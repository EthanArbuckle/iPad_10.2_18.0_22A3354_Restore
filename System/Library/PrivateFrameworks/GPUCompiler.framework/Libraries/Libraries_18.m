uint64_t sub_22ECBBAA4(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22ECB399C(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ECC1D24(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22ECC1D78((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22ECCEA54(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22ECBBEB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = v5 != 0;
  v7 = v5 != 0;
  LODWORD(v8) = v5 - 1;
  if (v7)
    v8 = v8;
  else
    v8 = 0;
  return sub_22EE739C0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 16), v8 | (v6 << 32));
}

uint64_t sub_22ECBBF0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EB27A20(*a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECBBF54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22ECBC050(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22ECB399C(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22ECBC0C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)(a2 + 32);
    v6 = 8 * v4;
    v7 = 1;
    while (1)
    {
      v8 = sub_22ECB399C(a1, *v5);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
    }
  }
  else
  {
    v10 = 0;
    return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
  }
  return v7;
}

uint64_t sub_22ECBC1FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  int v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[32];
  void *v71;
  __int128 v72;
  _BYTE v73[24];
  void *v74[2];
  _BYTE v75[32];
  uint64_t *v76;
  uint64_t v77;
  _QWORD v78[6];

  v78[4] = *MEMORY[0x24BDAC8D0];
  v76 = v78;
  v77 = 0x400000000;
  v74[0] = v75;
  v74[1] = (void *)0x400000000;
  v71 = v73;
  v72 = xmmword_22F44E350;
  v73[16] = 0;
  v4 = *a1;
  v68 = 0;
  v66 = 3;
  v67 = 0;
  v64 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v67, (int *)&v64, (__int16 *)(v4 + 1693), (uint64_t *)&v68, &v66);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v62 = *(_QWORD *)(v16 + 10288);
  v63 = v19;
  v60 = *(_DWORD *)(v16 + 2192);
  v61 = *(_DWORD *)(v16 + 1944);
  v59 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22ECC3D60(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v74, (uint64_t)&v76, (uint64_t)&v71) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_61;
  }
  if ((_DWORD)v77)
  {
    v21 = v76;
    v22 = 8 * v77;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v59 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v68 = v70;
  v69 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v58 = v18;
    v25 = (unsigned int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v26 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v27 = *v25;
      v28 = **v25;
      if (v28)
      {
        if (v28 <= 2)
        {
          v37 = *((_QWORD *)v27 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v27[10] == 1)
          {
            v38 = v37 | 2;
          }
          else
          {
            v39 = sub_22ECB399C(a1, v37);
            if (v39 >= 2)
            {
              v40 = *(_QWORD *)(*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v41 = (*(_DWORD *)(v40 + 16) & 0xFE00000u) < 0x8180001 || v40 == 0;
              if (!v41 && *(_DWORD *)(v40 + 16) == 11)
                v39 = sub_22EB19A28(*a1);
            }
            if ((v39 & 1) != 0)
            {
LABEL_58:
              v18 = v58;
              goto LABEL_59;
            }
            v38 = v39 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v64) = 0;
          v65 = 0;
          v43 = *((_QWORD *)v27 + 3);
          if (v43 > 7)
          {
            v45 = v43 & 0xFFFFFFFFFFFFFFF8;
            if ((v43 & 4) != 0)
            {
              v44 = v45 | 4;
              v64 = v45 | 4;
            }
            else
            {
              if (!v45)
              {
                v36 = 0;
                goto LABEL_49;
              }
              sub_22F31A5DC((unint64_t *)&v64, v45);
              v44 = v64;
            }
          }
          else
          {
            v44 = 0;
            v64 = 0;
          }
          v65 = 1;
          v46 = v38 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = *v27;
          v48 = v27[4];
          v49 = *a1;
          if ((v38 & 2) != 0 || !v46)
            v32 = sub_22F332740(v49, v46, v47 == 1, v48, v44);
          else
            v32 = sub_22EBCF54C(v49, v46, v47 == 1, v48, v44);
          goto LABEL_48;
        }
        v29 = *((_QWORD *)v27 + 1);
        v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v29 & 2) == 0)
        {
          v31 = sub_22ECB399C(a1, v30);
          if ((v31 & 1) != 0)
            goto LABEL_58;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_48:
          v36 = v32;
LABEL_49:
          if (!v36)
            goto LABEL_58;
          goto LABEL_50;
        }
        v35 = sub_22F332940(*a1, v30);
      }
      else
      {
        v33 = (uint64_t *)(*((_QWORD *)v27 + 1) & 0xFFFFFFFFFFFFFFF8);
        if (v27[4] == 1)
        {
          v35 = sub_22F332794(*a1, (uint64_t)v33);
        }
        else
        {
          v34 = sub_22ECBDAF0((_QWORD **)a1, v33);
          if (!v34)
            goto LABEL_58;
          v35 = sub_22F3325E4(*a1, (unint64_t)v34);
        }
      }
      v36 = v35;
LABEL_50:
      v50 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = v69;
      }
      *((_QWORD *)v68 + v50) = v36;
      v51 = (v69 + 1);
      LODWORD(v69) = v69 + 1;
      ++v25;
      v26 -= 8;
      if (!v26)
      {
        v53 = (char *)v68;
        if ((_DWORD)v51)
        {
          v54 = 0;
          v18 = v58;
          do
          {
            v55 = *(_QWORD *)&v53[v54];
            if ((*(_DWORD *)v55 - 3) >= 0xFFFFFFFE)
            {
              v56 = *(_QWORD *)(v55 + 24);
              if (v56 >= 8 && (v56 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v59 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v54 += 8;
          }
          while (8 * v51 != v54);
        }
        else
        {
          v51 = 0;
          v18 = v58;
        }
        goto LABEL_71;
      }
    }
  }
  v51 = 0;
  v53 = v70;
LABEL_71:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v76, v77, v53, v51, *(_DWORD *)(a2 + 32));
LABEL_59:
  if (v68 != v70)
    free(v68);
LABEL_61:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v63;
    *(_QWORD *)(v16 + 10288) = v62;
    *(_DWORD *)(v16 + 1944) = v61;
    *(_DWORD *)(v16 + 2192) = v60;
  }
  sub_22EB48E64(v4);
  if (v71 != v73)
    free(v71);
  if (v74[0] != v75)
    free(v74[0]);
  if (v76 != v78)
    free(v76);
  return v20;
}

uint64_t sub_22ECBC79C(_QWORD **a1, uint64_t a2)
{
  int *v2;
  unint64_t *v4;

  v2 = (int *)a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22ECBDAF0(a1, *(uint64_t **)(a2 + 32));
    if (v4)
      return sub_22F3C109C((*a1)[11], v2[4], v2[5], v2[6], (uint64_t)v4);
    else
      return 1;
  }
  return (uint64_t)v2;
}

uint64_t sub_22ECBC7F8(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 32);
  }
  if ((sub_22ECC4C60(a1, *(unsigned __int8 ***)(a2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v5 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v5;
}

uint64_t sub_22ECBCA48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22ECC27FC(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22ECC2518((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

unsigned int *sub_22ECBCF34(uint64_t a1, uint64_t a2)
{
  return sub_22F32FAE8(a1, (*(_DWORD *)a2 >> 18) & 7, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 216));
}

uint64_t sub_22ECBCF50(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v5 = *a1 + 3688;
  v17 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22ECC9974(a1, *(unsigned int **)(a2 + 16), 1u);
  if ((v12 & 1) == 0)
    return sub_22EB497A8(*a1, *(_DWORD *)(a2 + 24), (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
  sub_22F32F704(*a1);
  return 1;
}

uint64_t sub_22ECBD0C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22ECB399C(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22ECBD180(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22ECB399C(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22ECBD234(uint64_t *a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned __int32 v26;
  _QWORD *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  size_t v43;
  unsigned __int32 v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v52;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[2];
  void *v59[2];
  _BYTE v60[32];
  uint64_t v61;
  int64x2_t v62;
  _BYTE v63[32];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD v67[6];

  v2 = a2;
  v3 = a1;
  v67[4] = *MEMORY[0x24BDAC8D0];
  v65 = v67;
  v66 = 0x400000000;
  v4 = a2[1];
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t)(a2 + 6);
    v54 = vdupq_n_s64(0x20uLL);
    v55 = (uint64_t)(a2 + 6);
    v56 = a2[1];
    while (1)
    {
      v7 = *(unint64_t **)(v6 + 8 * v5);
      v8 = (int *)(v7 + 1);
      v9 = *v7;
      if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
        v61 = (uint64_t)v63;
        v62 = vdupq_n_s64(0x20uLL);
        v64 = 0;
        v10 = sub_22F11598C(v9);
        if (v62.i64[0] < (unint64_t)v10)
          sub_22EEB52C0(&v61, v10);
        v13 = sub_22ECBDD18((_QWORD **)v3, (uint64_t)&v61, v9, (uint64_t)v8, v11, v12);
        if (v13 < 0x10)
        {
          v14 = 1;
LABEL_38:
          if ((_BYTE *)v61 != v63 && v61)
            MEMORY[0x2348A0E84]();
          goto LABEL_52;
        }
        v15 = v13;
        if (v13 == *v7)
        {
          v16 = v66;
          if (v66 >= (unint64_t)HIDWORD(v66))
            goto LABEL_10;
        }
        else
        {
          v24 = *(_QWORD *)(*v3 + 88);
          v25 = v62.i64[0] - v62.i64[1];
          v26 = v62.i32[0] - v62.i32[2];
          if (v62.i32[0] == v62.i32[2])
            v26 = sub_22F11598C(v15);
          v7 = (unint64_t *)sub_22E3CD3D4(v24 + 2032, v26 + 8, 3);
          *v7 = v15;
          memcpy(v7 + 1, (const void *)(v61 + v62.i64[1]), v25);
          v16 = v66;
          if (v66 >= (unint64_t)HIDWORD(v66))
          {
LABEL_10:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v66;
          }
        }
        v65[v16] = (uint64_t)v7;
        LODWORD(v66) = v66 + 1;
        v14 = 4;
        goto LABEL_38;
      }
      v17 = *(_QWORD *)(v9 + 32);
      if (v17 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
        v36 = *(_QWORD *)((char *)&unk_22F495A90
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v36 = 1;
      v19 = ((unint64_t)v8 + v36 + 3) & -v36;
      v58[0] = *(_QWORD *)(v9 + 32);
      v58[1] = v19;
      v59[0] = v60;
      v59[1] = (void *)0x200000000;
      sub_22EE73804(*v3, v17, v19, (uint64_t)v59);
      v52 = *(_DWORD *)(v9 + 20);
      LODWORD(v20) = v52 - 1;
      if (v52)
        v20 = v20;
      else
        v20 = 0;
      v53 = v20;
      v21 = v17;
      for (i = v17; ; i = sub_22F115B7C(i))
      {
        while (1)
        {
          if ((i & 0xF) != 0)
            goto LABEL_33;
          v23 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v23 <= 0x39)
            break;
LABEL_28:
          if (sub_22F115668(i))
            v21 = i;
          i = sub_22F115B7C(i);
          if (!i)
            goto LABEL_42;
        }
        if (v23 == 24)
          goto LABEL_41;
        if (v23 == 26)
          break;
        if (((1 << v23) & 0x20000000200003CLL) == 0)
          goto LABEL_28;
LABEL_33:
        ;
      }
      if ((*(_BYTE *)(i + 23) & 0x10) == 0)
        goto LABEL_33;
LABEL_41:
      v21 = i;
LABEL_42:
      sub_22F115668(v21);
      sub_22F1167E8(v58);
      v3 = a1;
      v27 = (_QWORD *)*a1;
      v28 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v61 = (uint64_t)v63;
      v62 = v54;
      v64 = 0;
      v29 = sub_22F11598C(*v7);
      if (v62.i64[0] < (unint64_t)v29)
        sub_22EEB52C0(&v61, v29);
      v32 = sub_22ECBDD18((_QWORD **)a1, (uint64_t)&v61, v17, v19, v30, v31);
      if (v32 < 0x10)
      {
LABEL_45:
        v14 = 1;
        goto LABEL_46;
      }
      v33 = v32;
      v34 = v17;
      while (2)
      {
        while (2)
        {
          if ((v34 & 0xF) != 0)
            goto LABEL_66;
          v35 = *(unsigned __int8 *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v35 > 0x39)
          {
LABEL_61:
            if (sub_22F115668(v34))
              v17 = v34;
            v34 = sub_22F115B7C(v34);
            if (!v34)
              goto LABEL_68;
            continue;
          }
          break;
        }
        if (v35 == 24)
          break;
        if (v35 != 26)
        {
          if (((1 << v35) & 0x20000000200003CLL) != 0)
            goto LABEL_66;
          goto LABEL_61;
        }
        if ((*(_BYTE *)(v34 + 23) & 0x10) == 0)
        {
LABEL_66:
          v34 = sub_22F115B7C(v34);
          continue;
        }
        break;
      }
      v17 = v34;
LABEL_68:
      v37 = sub_22F115668(v17);
      v38 = sub_22F1167E8(v58);
      v3 = a1;
      v39 = sub_22F34AE9C((_QWORD *)*a1, v33, v37 | ((unint64_t)v38 << 32), *v8, v53 | ((unint64_t)(v52 != 0) << 32));
      if (v39 < 0x10)
        goto LABEL_45;
      v40 = v39;
      sub_22EEB5360((uint64_t)&v61, v39, 4uLL, 4);
      *v41 = *v8;
      v42 = *(_QWORD *)(*a1 + 88);
      v43 = v62.i64[0] - v62.i64[1];
      v44 = v62.i32[0] - v62.i32[2];
      if (v62.i32[0] == v62.i32[2])
        v44 = sub_22F11598C(v40);
      v45 = (_QWORD *)sub_22E3CD3D4(v42 + 2032, v44 + 8, 3);
      *v45 = v40;
      memcpy(v45 + 1, (const void *)(v61 + v62.i64[1]), v43);
      v46 = v66;
      if (v66 >= (unint64_t)HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = v66;
      }
      v65[v46] = (uint64_t)v45;
      LODWORD(v66) = v66 + 1;
      v14 = 4;
LABEL_46:
      if ((_BYTE *)v61 != v63 && v61)
        MEMORY[0x2348A0E84]();
      *((_DWORD *)v27 + 2998) = v28;
      if (v59[0] != v60)
        free(v59[0]);
      v6 = v55;
      v4 = v56;
LABEL_52:
      if (v14 != 4)
      {
        v47 = 1;
        goto LABEL_77;
      }
      if (++v5 == v4)
      {
        v48 = v65;
        v49 = v66;
        v2 = a2;
        goto LABEL_76;
      }
    }
  }
  v49 = 0;
  v48 = v67;
LABEL_76:
  v47 = sub_22EBC6244(*v3, (*v2 >> 18), v2[4], v48, v49, v2[5]);
LABEL_77:
  if (v65 != v67)
    free(v65);
  return v47;
}

uint64_t sub_22ECBD878(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v8 = sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 16));
    if (v8)
    {
      v9 = v8;
      v10 = *(unsigned int *)(a2 + 24);
      v11 = (*(_DWORD *)a2 >> 18) & 0xF;
      sub_22F0D4E74(a2);
      return sub_22EB28664(*a1, v9, v10, v11, v12);
    }
    return 1;
  }
  else
  {
    v4 = (_QWORD *)*a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v20 = 0;
    v5 = *(unsigned __int8 **)(a2 + 16);
    if (*v5 == 214 && (v6 = (unsigned int *)*((_QWORD *)v5 + 3), *(unsigned __int8 *)v6 == 163))
    {
      v7 = sub_22ECCECF4(a1, v6, 0, &v20);
      if (v7 >= 2)
        v7 = sub_22EB27A20(*a1, *((unsigned int *)v5 + 4), *((unsigned int *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v7 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
    }
    v14 = v20;
    if (v20)
    {
      v15 = *(unsigned int *)(a2 + 24);
      v16 = (*(_DWORD *)a2 >> 18) & 0xF;
      sub_22F0D4E74(a2);
      v18 = sub_22EB28664(*a1, v14, v15, v16, v17);
    }
    else if ((v7 & 1) != 0)
    {
      v18 = 1;
    }
    else
    {
      v19 = sub_22EB28F24((_QWORD *)*a1, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), (*(_DWORD *)a2 >> 18) & 0xF);
      if ((v19 & 1) != 0)
        v18 = 1;
      else
        v18 = v19;
    }
    sub_22EB48E64(v4);
  }
  return v18;
}

uint64_t sub_22ECBD9FC(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  uint64_t v6;

  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned int **)(a2 + 16);
  if (v4 == 0x100000 && *(unsigned __int8 *)v5 == 163)
  {
    v6 = sub_22ECCECF4(a1, v5, 1, 0);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22ECB399C(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  return sub_22EB2941C(*a1, 0, *(unsigned int *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 0x1F, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECBDA80(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ECBDAF0(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB4B7A8(*a1, *(_DWORD *)(a2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(a2 + 36));
}

unint64_t *sub_22ECBDAF0(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22ECBDD18(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22ECBDD18(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F495A90
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22ECBDD18(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22ECC1D24(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22ECBDAF0(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

uint64_t sub_22ECC1D78(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  int v68;
  unsigned int v69[24];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[11];

  v76[8] = *MEMORY[0x24BDAC8D0];
  v74 = v76;
  v75 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v71 = 0u;
    v72 = 0u;
    goto LABEL_85;
  }
  v9 = a2;
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v75;
    }
    v12 = (unint64_t *)&v74[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v75 + 1;
    LODWORD(v75) = v75 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v71 = 0u;
  v72 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v64 = a1 + 1;
  do
  {
    LODWORD(v75) = v10 - 1;
    v13 = v74[v10 - 1];
    v70 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v70);
      sub_22F0AB958((uint64_t)&v71 + 8, v37, v38);
      *(_QWORD *)&v71 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v73 = v46;
          v66[0] = 0;
          if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v66[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v70);
          sub_22F3E8E2C((uint64_t *)&v71 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v71 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v70);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v73 = v36;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v66[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v73 = v36;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v66[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v70);
          v41 = sub_22F0AB364((uint64_t *)&v70);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v71 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v71)
            LODWORD(v71) = v40;
          DWORD1(v71) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v70);
      v45 = sub_22F0AB364((uint64_t *)&v70);
      v66[0] = a4;
      v66[1] = v43;
      v67 = v44;
      v68 = HIDWORD(v45);
      LOBYTE(v63) = 0;
      if ((sub_22E958D90(*a1, 0, v66, 0, &v71, a5, 0, 0, v63) & 1) == 0)
        goto LABEL_39;
      goto LABEL_109;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v70);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22ECC2C50(a1, v19, v18, a4, (uint64_t)&v71);
      if (!v21)
        goto LABEL_109;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_109;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_109;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_105;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_100:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_108;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_107;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_107:
              v57 = v58;
LABEL_108:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v66);
              v73 = v19;
              v61 = sub_22E8901B8((uint64_t)v66, (uint64_t *)&v73);
              v65 = v71;
              sub_22E8906A0(v61, &v65);
              sub_22E903BEC((unsigned int *)v66);
LABEL_109:
              v55 = 0;
              goto LABEL_110;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_100;
          }
LABEL_105:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v69);
    sub_22E903BEC(v69);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v70);
    sub_22E8ACD1C((uint64_t)&v71, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v75;
  }
  while ((_DWORD)v75);
  v49 = DWORD2(v72);
LABEL_76:
  v50 = 0;
  do
  {
    v51 = *(_QWORD *)(v9 + 8);
    if ((v51 & 4) != 0)
      v52 = 12;
    else
      v52 = 8;
    if (*(_QWORD *)(v9 + 16))
      v53 = v52;
    else
      v53 = 4;
    v50 += v53;
    v9 = v51 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((v51 & 0xFFFFFFFFFFFFFFF8) != 0);
  if (v49 == v50)
  {
LABEL_85:
    v54 = memcmp((const void *)v72, __s2, v49);
    v55 = *((_QWORD *)&v71 + 1);
    if (!v54 || !*((_QWORD *)&v71 + 1))
      goto LABEL_110;
  }
  else
  {
    v55 = *((_QWORD *)&v71 + 1);
    if (!*((_QWORD *)&v71 + 1))
      goto LABEL_110;
  }
  if (HIDWORD(v72))
  {
    v56 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v49, 3);
    memcpy(v56, (const void *)v72, DWORD2(v72));
    v55 = *((_QWORD *)&v71 + 1);
  }
LABEL_110:
  if (HIDWORD(v72))
    free((void *)v72);
  if (v74 != (_OWORD *)v76)
    free(v74);
  return v55;
}

uint64_t sub_22ECC2518(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22ECC27FC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22ECBDAF0(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22ECC1D24((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22ECC1D78((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EB99BA4((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22ECB399C(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

_QWORD *sub_22ECC2C50(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22ECC3450((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EB99BA4((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22ECC301C((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22ECBDD18(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22ECC301C(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22ECC3450(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22ECC3738(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22ECC1D78(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22ECC3D60(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22ECC1D24(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22ECC1D24((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22ECC4228(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22ECC4228(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22ECC4228(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22ECBDAF0(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22ECBDD18(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22ECC4744(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*(unsigned int *)(v9 + 1704);
    sub_22EB4DDB8(v9 + 3688, &v41, (int *)&v42, (__int16 *)(v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *(unsigned int *)(v9 + 3696);
    v11 = v10 - 2;
    v12 = *(_QWORD *)(v9 + 3688);
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)(v9 + 1693) = 0;
    if (*(_DWORD *)(v9 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08(v9 + 1840, (uint64_t *)(v15 - 496));
    }
    v16 = sub_22ECB399C(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3, v17 = sub_22EB14270(*a1, v16 & 0xFFFFFFFFFFFFFFFELL, v45), (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != (v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v28 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(v26 + 11992) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22ECC1D24((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454(*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22ECC4B64(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;

  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v17 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v17 = 1;
  v12 = sub_22ECBDD18(a1, a2, v10, ((unint64_t)a4 + v17 + 3) & -v17, a5, a6);
  result = 0;
  if (v12 >= 0x10)
  {
    v14 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
    result = 0;
    if (v14 >= 0x10)
    {
      v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
      if (!v15 || (*(_DWORD *)(v15 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v15);
      sub_22EEB5360(a2, v14, 4uLL, 4);
      *v16 = *a4;
      return v14;
    }
  }
  return result;
}

uint64_t sub_22ECC4C60(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22ECB399C(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22ECB399C(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22ECC4EF4(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22ECC4EF4(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22ECB399C(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22ECB399C(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22ECC4C60(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22ECC5410(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22ECC5B0C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22ECC5FD4(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22ECC61A0((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22ECC62AC(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22ECC64F0(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22ECC6638(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22ECC6850(a1, (unsigned int *)a2);
      break;
    case 0xAu:
      result = sub_22ECC6858(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22ECC68AC(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22E8C5894(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22ECC6B94(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22ECC6C0C(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22ECC6D74((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22ECC6FF0(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22ECC7048(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22ECC7234((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22ECC7240(a1, a2);
      break;
    case 0x16u:
      result = sub_22ECC72AC(a1, a2);
      break;
    case 0x17u:
      result = sub_22ECC7318(a1, a2);
      break;
    case 0x18u:
      result = sub_22ECC7384(a1, a2);
      break;
    case 0x19u:
      result = sub_22ECC73F0(a1, a2);
      break;
    case 0x1Au:
      result = sub_22ECC7460(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22ECC74CC(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22ECC7538(a1, a2);
      break;
    case 0x1Du:
      result = sub_22ECC75A4(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22ECC7610(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22ECC767C(a1, a2);
      break;
    case 0x20u:
      result = sub_22ECC76E8(a1, a2);
      break;
    case 0x21u:
      result = sub_22ECC7754(a1, a2);
      break;
    case 0x22u:
      result = sub_22ECC77C0(a1, a2);
      break;
    case 0x23u:
      result = sub_22ECC782C(a1, a2);
      break;
    case 0x24u:
      result = sub_22ECC7898(a1, a2);
      break;
    case 0x25u:
      result = sub_22ECC7904(a1, a2);
      break;
    case 0x26u:
      result = sub_22ECC7970(a1, a2);
      break;
    case 0x27u:
      result = sub_22ECC79DC(a1, a2);
      break;
    case 0x28u:
      result = sub_22ECC7A48(a1, a2);
      break;
    case 0x29u:
      result = sub_22ECC7AB4(a1, a2);
      break;
    case 0x2Au:
      result = sub_22ECC7B20(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22ECC7B8C(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22ECC7BF8(a1, a2);
      break;
    case 0x2Du:
      result = sub_22ECC7C64(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22ECC7CD0(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22ECC7D3C(a1, a2);
      break;
    case 0x30u:
      result = sub_22ECC7DA8(a1, a2);
      break;
    case 0x31u:
      result = sub_22ECC7E14(a1, a2);
      break;
    case 0x32u:
      result = sub_22ECC7E80(a1, a2);
      break;
    case 0x33u:
      result = sub_22ECC7EEC(a1, a2);
      break;
    case 0x34u:
      result = sub_22ECC7F58(a1, a2);
      break;
    case 0x35u:
      result = sub_22ECC7FC4(a1, a2);
      break;
    case 0x36u:
      result = sub_22ECC8030(a1, a2);
      break;
    case 0x37u:
      result = sub_22ECC809C(a1, a2);
      break;
    case 0x38u:
      result = sub_22ECC8108(a1, a2);
      break;
    case 0x39u:
      result = sub_22ECC8174(a1, a2);
      break;
    case 0x3Au:
      result = sub_22ECC81E0(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22ECC824C(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22ECC82B8(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22ECC8324(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22ECC8390(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22ECC83FC(a1, a2);
      break;
    case 0x42u:
      result = sub_22ECC8468(a1, a2);
      break;
    case 0x43u:
      result = sub_22ECC84D4(a1, a2);
      break;
    case 0x44u:
      result = sub_22ECC8540(a1, a2);
      break;
    case 0x45u:
      result = sub_22ECC85AC(a1, a2);
      break;
    case 0x46u:
      result = sub_22ECC8618(a1, a2);
      break;
    case 0x47u:
      result = sub_22ECC8684(a1, a2);
      break;
    case 0x48u:
      result = sub_22ECC86F0(a1, a2);
      break;
    case 0x49u:
      result = sub_22ECC875C(a1, a2);
      break;
    case 0x4Au:
      result = sub_22ECC87C8(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22ECC8834(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22ECC88A0(a1, a2);
      break;
    case 0x4Du:
      result = sub_22ECC890C(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22ECC8978(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22ECC89E4(a1, a2);
      break;
    case 0x50u:
      result = sub_22ECC8A50(a1, a2);
      break;
    case 0x51u:
      result = sub_22ECC8ABC(a1, a2);
      break;
    case 0x52u:
      result = sub_22ECC8B28(a1, a2);
      break;
    case 0x53u:
      result = sub_22ECC8B94(a1, a2);
      break;
    case 0x54u:
      result = sub_22ECC8C00(a1, a2);
      break;
    case 0x55u:
      result = sub_22ECC8C6C(a1, a2);
      break;
    case 0x56u:
      result = sub_22ECC8CD8((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22ECC8DC4(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22ECC8E10((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22ECC8E94((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22ECC8EE8(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22ECC909C(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22ECC90E8(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22ECC919C(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22ECC91EC(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22ECC9258(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22ECC92A0(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22ECC9324(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22ECC9534(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22ECC9584(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22ECC96AC(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22ECB399C(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22ECC9804((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22ECC98B0(a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22ECC5B0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  unsigned int v38;
  _QWORD v39[8];
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  char *v46;
  uint64_t v47;
  _QWORD v48[10];

  v48[8] = *MEMORY[0x24BDAC8D0];
  v46 = (char *)v48;
  v47 = 0x800000000;
  v43 = v45;
  v44 = 0x800000000;
  v40 = v42;
  v41 = 0x400000000;
  v38 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    v13 = 1;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v15 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v41;
      }
      *((_QWORD *)v40 + v15) = v14;
      LODWORD(v41) = v41 + 1;
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v17 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v47;
      }
      *(_QWORD *)&v46[8 * v17] = v16;
      LODWORD(v47) = v47 + 1;
      v18 = sub_22ECB399C(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11));
      if ((v18 & 1) != 0)
        break;
      v10 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v44;
      }
      *((_QWORD *)v43 + v10) = v18 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v10) = v44 + 1;
      LODWORD(v44) = v44 + 1;
      v11 += 8;
      if (v12 == v11)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v19 = *(_DWORD *)(a2 + 20);
    if (v19)
    {
      v20 = 0;
      v13 = 1;
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v20 + *(_DWORD *)(a2 + 16)));
        v22 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v41;
        }
        *((_QWORD *)v40 + v22) = v21;
        LODWORD(v41) = v41 + 1;
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v20 + *(_DWORD *)(a2 + 16)));
        v24 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = v47;
        }
        *(_QWORD *)&v46[8 * v24] = v23;
        LODWORD(v47) = v47 + 1;
        v25 = sub_22ECB399C(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v20 + *(_DWORD *)(a2 + 16))));
        if ((v25 & 1) != 0)
          break;
        v10 = v44;
        if (v44 >= (unint64_t)HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v44;
        }
        *((_QWORD *)v43 + v10) = v25 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v10) = v44 + 1;
        LODWORD(v44) = v44 + 1;
        if (v19 == ++v20)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v26 = *(_DWORD *)(a2 + 80);
      if (v26)
      {
        v27 = 0;
        v13 = 1;
        while (1)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v27 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v29 = v41;
          if (v41 >= (unint64_t)HIDWORD(v41))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v41;
          }
          *((_QWORD *)v40 + v29) = v28;
          LODWORD(v41) = v41 + 1;
          v30 = sub_22ECB399C(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v27 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v30 & 1) != 0)
            break;
          v10 = v44;
          if (v44 >= (unint64_t)HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v44;
          }
          *((_QWORD *)v43 + v10) = v30 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v10) = v44 + 1;
          LODWORD(v44) = v44 + 1;
          if (v26 == ++v27)
            goto LABEL_29;
        }
      }
      else
      {
LABEL_29:
        v31 = *(unsigned int *)(a2 + 24);
        v32 = 0;
        if ((_DWORD)v31)
        {
          v33 = 0;
          v34 = 8 * v31;
          do
          {
            v35 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v33);
            if (v32 >= 8)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = v38;
            }
            v39[v32] = v35;
            v32 = ++v38;
            v33 += 8;
          }
          while (v34 != v33);
          LODWORD(v10) = v44;
        }
        v13 = sub_22ED4E804(*a1, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v40, a8, v46, v47, (uint64_t *)v43, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v39, v32, 0, *(_DWORD *)(a2 + 80), v37, *(_DWORD *)(a2 + 40));
      }
    }
  }
  if (v40 != v42)
    free(v40);
  if (v43 != v45)
    free(v43);
  if (v46 != (char *)v48)
    free(v46);
  return v13;
}

uint64_t sub_22ECC5FD4(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  const void *v19;
  unsigned int v20;
  uint64_t v21[10];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v7 + v8;
  v20 = 0;
  if (v9 < 9)
  {
    if (!(_DWORD)v9)
    {
      v17 = 0;
      v15 = 0;
      return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v21, v15, *(_DWORD *)(a2 + 44));
    }
    v19 = *(const void **)(a2 + 72);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v10 = 0;
  LOBYTE(v11) = 0;
  do
  {
    while (1)
    {
      v12 = sub_22ECB399C(a1, *(_QWORD *)(v6 + 8 * v10));
      if (v12 >= 2)
        break;
      v11 = 1;
      if (v9 - 1 == v10++)
        return v11;
    }
    v13 = v12;
    v14 = v20;
    if (v20 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v20;
    }
    v21[v14] = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = ++v20;
    ++v10;
  }
  while (v9 != v10);
  if ((v11 & 1) == 0)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
    v4 = v19;
    v17 = v8 + v7;
    return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v21, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22ECC61A0(_QWORD **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22ECBDAF0(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v11 = sub_22E3CD3D4((*a1)[11] + 2032, 32, 3);
  *(_BYTE *)v11 = 4;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(4);
    ++*((_DWORD *)v12 + 2);
  }
  *(_DWORD *)(v11 + 8) = v9;
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v10;
  return v11;
}

uint64_t sub_22ECC62AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22ECC5410(a1, v4, 0) & 1) != 0)
    return 1;
  if ((sub_22ECC5410(a1, *(_QWORD *)(v2 + 24), 0) & 1) != 0)
    return 1;
  if ((sub_22ECC5410(a1, *(_QWORD *)(v2 + 32), 0) & 1) != 0)
    return 1;
  if ((sub_22ECC5410(a1, *(_QWORD *)(v2 + 40), 0) & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(v2 + 48));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v6 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v6 & 1) != 0)
    return 1;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0)
    sub_22EBCCCF0(*a1, (int *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  v7 = sub_22ECB399C(a1, *(_QWORD *)(v2 + 56));
  if ((v7 & 1) != 0)
    return 1;
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0)
    sub_22EBCCCF0(*a1, (int *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  v8 = sub_22ECC5410(a1, *(_QWORD *)(v2 + 64), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v10 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
  if ((v10 & 1) != 0 && *(_QWORD *)(v2 + 64) != v9)
  {
    sub_22EA2BABC(*a1, *(_QWORD *)(v9 + 8));
    return 1;
  }
  v11 = sub_22ECC5410(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v11 & 1) != 0)
    return 1;
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v13 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v12)
  {
    v14 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v15 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
    if ((v15 & 1) != 0)
      return 1;
    v13 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v12 = v14;
  }
  if (v13 != v2)
    return sub_22ED33C64(*a1, v13, v12);
  return v2;
}

uint64_t sub_22ECC64F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECC6850(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v12 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = 1;
    while (1)
    {
      v8 = sub_22ECC61A0((_QWORD **)a1, *v6);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v6;
      if (!--v5)
        return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
    }
  }
  else
  {
    v10 = 0;
    return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
  }
  return v7;
}

uint64_t sub_22ECC6638(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22ECC5410(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22ECC6850(uint64_t *a1, unsigned int *a2)
{
  return sub_22ECC9974(a1, a2, 0);
}

uint64_t sub_22ECC6858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22ECC68AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22ECC5410(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22ECC5410(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22ECC5410(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22ECC5410(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22ECC6B94(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3440A8(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), *(unsigned int *)(a2 + 24), (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22ECC6C0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22ECC9BAC((uint64_t)&v19, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v20)
    return 1;
  v9 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (!*(_QWORD *)(a2 + 32) || v15)
  {
    v16 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 40), 0);
    if ((v16 & 1) == 0)
    {
      v17 = *(_DWORD *)(a2 + 4);
      v21 = v19;
      v22 = v20;
      return sub_22ED31008(*a1, v17, *(_DWORD *)(a2 + 48), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v21, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
    }
    return 1;
  }
  return v14;
}

uint64_t sub_22ECC6D74(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  unsigned __int8 v34;
  unsigned __int8 v35;

  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22ECC5410(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v31 = 0u;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v10 = (v6 >> 13) & 1;
      v30 = *(_QWORD *)&a2[4 * v10 + 8];
      if (v30)
        v9 = *(_QWORD *)(v30 + 8);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
      LODWORD(v10) = (v6 >> 13) & 1;
    }
    sub_22ECC9BAC((uint64_t)&v32, a1, *((_DWORD *)a2 + 1), v9, *(_QWORD *)&a2[4 * v10 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v33)
      return 1;
    v31 = v32;
    v8 = v34;
    v7 = v35;
    LODWORD(v6) = *a2;
  }
  v11 = (v6 & 0x700) != 0x100 || v8 == 0;
  v12 = v11;
  if (!v11 && !v7)
  {
    v13 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)]);
    v15 = v14;
    *(_BYTE *)v13 = 19;
    if (byte_255E04EB3)
    {
      v16 = sub_22F0D3748(19);
      ++*((_DWORD *)v16 + 2);
    }
    *(_WORD *)v13 &= ~0x100u;
    *(_DWORD *)(v13 + 4) = v15;
    goto LABEL_22;
  }
  v13 = sub_22ECC5410(a1, *(_QWORD *)&a2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v13 & 1) != 0)
    return 1;
  if (v7)
    v19 = v12;
  else
    v19 = 1;
  if (v19 == 1)
  {
LABEL_22:
    v17 = *a2;
    if ((v17 & 0x800) != 0)
      v18 = *(_QWORD *)&a2[4 * ((v17 >> 13) & 1) + 16 + 4 * ((v17 >> 12) & 1)];
    else
      v18 = 0;
    v20 = sub_22ECC5410(a1, v18, 0);
    if ((v20 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v20 = 0;
LABEL_32:
  v21 = *a2;
  v22 = (v21 >> 8) & 7;
  v23 = *((_DWORD *)a2 + 1);
  v24 = *((_DWORD *)a2 + 2);
  v25 = *((_DWORD *)a2 + 3);
  if ((v21 & 0x800) != 0)
    v26 = *(_DWORD *)&a2[4 * ((v21 >> 12) & 1) + 20 + 4 * ((v21 >> 13) & 1)];
  else
    v26 = 0;
  v28 = (_BYTE *)(v20 & 0xFFFFFFFFFFFFFFFELL);
  v29 = *(_QWORD *)a1;
  v32 = v31;
  v33 = 0;
  v34 = v8;
  v35 = v7;
  return sub_22ED2D6D0(v29, v23, v22, v24, v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v32, v25, (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFELL), v26, v28);
}

uint64_t sub_22ECC6FF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return sub_22ED343AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), (unint64_t)v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC7048(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  void *v18[2];
  __int128 v19;
  void *v20;
  __int128 v21;
  void *v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECC1D78(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v19 = *(_OWORD *)(a2 + 32);
  v20 = *(void **)(a2 + 48);
  if ((_QWORD)v19)
  {
    sub_22ECC9CB0((__n128 *)&v17, a1, (__n128 *)&v19);
    v19 = v17;
    v20 = v18[0];
    if (!(_QWORD)v17)
      return 1;
  }
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  sub_22E8ACE30((uint64_t)&v17, v7, v8);
  v9 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v17, (uint64_t *)&v19))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_13;
      goto LABEL_11;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_11;
LABEL_13:
      v9 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v12 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v9 = 19;
      if (byte_255E04EB3)
      {
        v13 = sub_22F0D3748(19);
        ++*((_DWORD *)v13 + 2);
      }
      *(_WORD *)v9 &= ~0x100u;
      *(_DWORD *)(v9 + 4) = v12;
      break;
    case 2u:
      v11 = 0;
      goto LABEL_17;
    case 3u:
      break;
    default:
LABEL_11:
      v11 = 1;
LABEL_17:
      v14 = sub_22ECC6850(a1, *(unsigned int **)(a2 + 56));
      if ((v14 & 1) != 0)
        v9 = 1;
      else
        v9 = v14;
      if ((v11 & 1) == 0 && (v14 & 1) == 0)
      {
        v15 = *(_DWORD *)(a2 + 8);
        v16 = *(_BYTE *)(a2 + 12);
        v21 = v19;
        v22 = v20;
        v9 = sub_22F344AB0(*a1, v15, v16, v7, v8, &v21, v14 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v9;
}

uint64_t sub_22ECC7234(uint64_t a1, uint64_t a2)
{
  return sub_22ECC5410(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22ECC7240(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC72AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7318(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7384(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC73F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7460(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC74CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7538(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC75A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7610(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC767C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC76E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7754(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC77C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC782C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7898(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7904(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7970(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC79DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7A48(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7AB4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7B20(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7B8C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7BF8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7C64(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7CD0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7D3C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7DA8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7E14(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7E80(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7EEC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7F58(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC7FC4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8030(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC809C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8108(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8174(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC81E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC824C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC82B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8324(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8390(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC83FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8468(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC84D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8540(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC85AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8618(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8684(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC86F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC875C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC87C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8834(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC88A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC890C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8978(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC89E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8A50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8ABC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8B28(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8B94(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8C00(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8C6C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECC9EB8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECC8CD8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22ECBDAF0(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22ECC8DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344474(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC8E10(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC8E94(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  return sub_22ED36B94(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC8EE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 16;
  v5 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v17 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
  v7 = *(unsigned __int16 *)(a2 + 12);
  if (!*(_WORD *)(a2 + 12))
  {
    v12 = 0;
    if ((v6 & 0x10000) != 0)
    {
LABEL_13:
      v13 = *(_QWORD *)(v4 + 8 * ((unsigned __int16)v6 + 1));
      if (v13)
      {
        v14 = sub_22ECC5410(a1, v13, 0);
        if ((v14 & 1) != 0)
          return 1;
        v12 = v17;
        v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
        return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v16);
      }
    }
LABEL_17:
    v16 = 0;
    return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v16);
  }
  v8 = (_QWORD *)(a2 + 24);
  v9 = 1;
  while (1)
  {
    v10 = sub_22ECC5410(a1, *v8, 0);
    if ((v10 & 1) != 0)
      return v9;
    v11 = v17;
    if (v17 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v17;
    }
    v18[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
    v12 = ++v17;
    ++v8;
    if (!--v7)
    {
      v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v6 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
  }
}

uint64_t sub_22ECC909C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344820(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22ECC90E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = 1;
  v5 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v8 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v8 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22ECC919C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22ECC91EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECC6850(a1, *(unsigned int **)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC9258(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC6850(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC92A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  v4 = sub_22ECC6850(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(a2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22ECC9258(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22ECC91EC(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(a2 + 8), *(_DWORD *)(a2 + 12), v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22ECC9324(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22ECB399C(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22ECB399C(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22ECC5410(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22ECC9534(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC9584(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22ECC5410(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22ECC9BAC((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22ECC5410(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22ECC96AC(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22ECC5410(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22ECC9804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22ECC5410(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECC98B0(uint64_t *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v10 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v10 + 8);
  else
    v5 = 0;
  sub_22ECC9BAC((uint64_t)&v11, (uint64_t)a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v12)
    return 1;
  v6 = sub_22ECC5410(a1, *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 12], 0);
  if ((v6 & 1) != 0)
    return 1;
  v8 = *((_DWORD *)a2 + 1);
  v9 = *((_DWORD *)a2 + 2);
  v13 = v11;
  v14 = v12;
  return sub_22F343FAC(*a1, v8, v9, (uint64_t)&v13, *((_DWORD *)a2 + 3), (_BYTE *)(v6 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECC9974(uint64_t *a1, unsigned int *a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23[9];

  v23[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = a2 + 4;
  v8 = *a2;
  v9 = (uint64_t)&a2[2 * (v8 >> 8) + 4];
  v10 = 2 * (v8 >> 8);
  while (v10 * 4)
  {
    v11 = *(_BYTE **)&a2[v10 + 2];
    v10 -= 2;
    if (*v11 != 19)
    {
      v22 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        goto LABEL_27;
      }
      v21 = v6;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    goto LABEL_27;
  }
  v11 = (_BYTE *)v7[(*a2 >> 8) - 1];
  v21 = v6;
  v22 = 0;
LABEL_10:
  LOBYTE(v13) = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22ECC5410(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      v13 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v21;
        goto LABEL_28;
      }
    }
    v17 = v22;
    if (v22 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v22;
    }
    v23[v17] = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v12 = ++v22;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v21;
  if ((v13 & 1) != 0)
  {
    v13 = 1;
    goto LABEL_28;
  }
LABEL_27:
  v13 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, a2[1], a2[2], v23, v12);
LABEL_28:
  v19 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v19 + 360);
  return v13;
}

uint64_t sub_22ECC9BAC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22ECB399C(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

__n128 sub_22ECC9CB0(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22ECC1D24((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22ECBDAF0((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22ECC9EB8(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t i;
  unint64_t v20;
  uint64_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[18];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v29 = v31;
  v30 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (v4)
  {
    v7 = *v4;
    v6 = (__n128 **)(v4 + 4);
    v5 = v7;
    if (v7 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_6:
      v8 = 8 * v5;
      while (1)
      {
        v9 = *v6;
        if (*v6)
        {
          v10 = (_QWORD *)*a1;
          v11 = v9->n128_u32[2];
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = v11;
          switch(v11)
          {
            case 3u:
              v12 = sub_22ECCA5FC(a1, v9);
              goto LABEL_72;
            case 4u:
              v12 = sub_22ECCA780((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 5u:
              v12 = (uint64_t)sub_22ECCA7CC(a1, (unsigned int *)v9);
              goto LABEL_72;
            case 6u:
              v12 = sub_22ECCA944((uint64_t **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 7u:
              v12 = sub_22ECCAAC8((uint64_t **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0xAu:
              v12 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
              goto LABEL_72;
            case 0xCu:
              v12 = sub_22ECCAB14((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0xEu:
              v12 = (uint64_t)sub_22ECCAB60((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0xFu:
              v12 = (uint64_t)sub_22ECCACAC((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x10u:
              sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
              goto LABEL_72;
            case 0x11u:
              v12 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
              goto LABEL_72;
            case 0x12u:
              v12 = (uint64_t)sub_22ECCADF8(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x13u:
              v12 = sub_22ECCAF8C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x14u:
              v12 = sub_22ECCAFD8((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x15u:
              v12 = sub_22ECCB030(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x16u:
              v12 = sub_22ECCB088((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x18u:
              v12 = sub_22ECCB0D8((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Au:
              v12 = (uint64_t)sub_22ECCB128((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x1Bu:
              v12 = sub_22ECCB274((uint64_t)a1, (uint64_t *)v9);
              goto LABEL_72;
            case 0x1Cu:
              v12 = sub_22ECCB2F8(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Du:
              v12 = sub_22ECCB344((uint64_t)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Eu:
              v12 = (uint64_t)sub_22ECCB490((uint64_t)a1, (int *)v9);
              goto LABEL_72;
            case 0x1Fu:
              v12 = (uint64_t)sub_22ECCB5E4(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x20u:
              v12 = (uint64_t)sub_22ECCBA58(v10[11], v9->n128_u32[0], v9->n128_i32[1]);
              goto LABEL_72;
            case 0x21u:
              v12 = sub_22ECCBA94((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x22u:
              v12 = (uint64_t)sub_22ECCBAE0((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x23u:
              v12 = sub_22ECCBC38((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x24u:
              v12 = sub_22ECCBC84(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x25u:
              v12 = sub_22ECCBCD8(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x27u:
              v12 = (uint64_t)sub_22ECCC114((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x29u:
              v12 = sub_22ECCC260((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x2Au:
              v12 = (uint64_t)sub_22ECCC3F4((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x2Bu:
              v12 = sub_22ECCC54C((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x2Cu:
              v12 = sub_22ECCC6A4((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x2Eu:
              v12 = (uint64_t)sub_22ECCC834(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x34u:
              v12 = sub_22ECCCD0C(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x35u:
              v12 = (uint64_t)sub_22ECCCD58((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x37u:
              v12 = sub_22ECCCEA4(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x38u:
              v12 = sub_22ECCCEF0((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x39u:
              v12 = sub_22ECCCF3C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Au:
              v12 = sub_22ECCCF88((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Bu:
              v12 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
              goto LABEL_72;
            case 0x3Cu:
              v12 = sub_22ECCCFD4((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Du:
              v12 = sub_22ECCD02C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Eu:
              v12 = sub_22ECCD078((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Fu:
              v12 = (uint64_t)sub_22ECCD0C4((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x40u:
              v12 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
              goto LABEL_72;
            case 0x42u:
              v12 = sub_22ECCD210(a1, v9);
              goto LABEL_72;
            case 0x46u:
              v12 = sub_22ECCD654((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x47u:
              v12 = sub_22ECCD6A0((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x49u:
              v12 = (uint64_t)sub_22ECCD704((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x4Bu:
              v12 = sub_22ECCD850((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x4Cu:
              v12 = (uint64_t)sub_22ECCD89C((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x4Du:
              v12 = sub_22ECCDA00(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x4Eu:
              v12 = sub_22ECCDE3C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x51u:
              v12 = (uint64_t)sub_22ECCDE88(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x58u:
              v12 = sub_22ECCE2FC((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x59u:
              v12 = (uint64_t)sub_22ECCE348((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x5Au:
              v12 = (uint64_t)sub_22ECCE4A0((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x5Bu:
              v12 = (uint64_t)sub_22ECCE5F8(a1, (int *)v9);
LABEL_72:
              v9 = (__n128 *)v12;
              break;
            default:
              break;
          }
          v14 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v14);
          if (!v9)
            goto LABEL_78;
          v15 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v30;
          }
          *((_QWORD *)v29 + v15) = v9;
        }
        else
        {
          v13 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = v30;
          }
          *((_QWORD *)v29 + v13) = 0;
        }
        LODWORD(v30) = v30 + 1;
LABEL_78:
        ++v6;
        v8 -= 8;
        if (!v8)
          goto LABEL_79;
      }
    }
    if ((_DWORD)v5)
      goto LABEL_6;
LABEL_79:
    v16 = (unsigned int *)a2[1].n128_u64[1];
    if (v16 && *((_BYTE *)v16 + 8) && *(_QWORD *)&v16[2 * *v16 + 4 + 2 * v16[1]])
    {
      sub_22EC84DA0(*a1, a2->n128_i32[2]);
      v17 = *a1;
      sub_22E905168(*a1, 0);
      v18 = a2->n128_u32[2];
      if (v18 <= 0x34 && ((1 << v18) & 0x10000800000204) != 0)
      {
        i = *(_QWORD *)(a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                      + 16);
      }
      else
      {
        for (i = *(_QWORD *)(a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                            + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
          ;
      }
      v20 = sub_22ECC5410(a1, i, 0);
      if (v20 >= 2
        && sub_22F4219DC(a2->n128_u32[2])
        && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
      {
        v20 = sub_22EC86C20();
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v17 + 1896) + 8 * *(unsigned int *)(v17 + 1904) - 8);
      --*(_QWORD *)(v21 + 360);
      if ((sub_22EC8617C((_QWORD *)*a1, v20, (uint64_t *)v29, v30) & 1) != 0)
        goto LABEL_91;
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5 != v30)
  {
LABEL_91:
    v23 = 1;
    goto LABEL_92;
  }
  v27.n128_u64[0] = 0;
  v27.n128_u32[2] = 0;
  v28 = 0;
  v22 = a2->n128_u32[2];
  if (v22 == 9)
  {
    v27 = a2[2];
    v28 = a2[3].n128_u64[0];
    sub_22ECC9CB0(&v25, a1, &v27);
    v27 = v25;
    v28 = v26;
  }
  v23 = sub_22EC87DEC();
LABEL_92:
  if (v29 != v31)
    free(v29);
  return v23;
}

uint64_t sub_22ECCA5FC(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22ECB399C(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22ECB399C(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22ECCA780(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCA7CC(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ECB399C(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22ECCA944(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22ECB399C(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22ECCAAC8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCAB14(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCAB60(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22ECCACAC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22ECCADF8(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22ECB399C(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22ECB399C(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCAF8C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCAFD8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCB030(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCB088(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCB0D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCB128(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCB274(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22ECB399C(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22ECCB2F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCB344(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22ECB399C(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22ECCB490(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
LABEL_11:
    if (v9)
      return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
  }
  return 0;
}

_DWORD *sub_22ECCB5E4(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD **v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  __n128 v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v49 = v51;
  v50 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  v39.n128_u64[0] = 0;
  v39.n128_u32[2] = 0;
  v46 = v48;
  v47 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ECB399C(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v50;
      }
      *((_QWORD *)v49 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v50) = v50 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECC1D78(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v36 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(__n128 *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if (v39.n128_u64[0])
  {
    sub_22ECC9CB0(&v52, a1, &v39);
    v39 = v52;
    v40 = v53[0];
    if (!v52.n128_u64[0])
      goto LABEL_46;
  }
  v38 = a2;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)(a2 + 104 + 8 * v17);
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      if (*v18)
      {
        v52.n128_u64[0] = (unint64_t)v53;
        v52.n128_u64[1] = 0x800000000;
        v21 = *(unsigned __int8 *)v20;
        v22 = v21 == 211;
        if (v21 == 211)
          v23 = v20;
        else
          v23 = 0;
        v24 = v23 + 16;
        if (v22)
          v25 = v24;
        else
          v25 = v20 + 20;
        v26 = v20[1];
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v25 & 0xFFFFFFFFFFFFFFFCLL;
            v44 = v28;
            v45 = 0;
            if (sub_22E793870(a1 + 1, &v44, &v45)
              && v45 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v28 = v45[1];
            }
            v29 = *(unsigned int *)(v28 + 28);
            v26 = v52.n128_u32[2];
            if (v52.n128_u32[2] >= (unint64_t)v52.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v26 = v52.n128_u32[2];
            }
            *(_QWORD *)(v52.n128_u64[0] + 8 * v26) = (v29 >> 13) & 3 | v28;
            LODWORD(v26) = ++v52.n128_u32[2];
            ++v25;
            v27 -= 8;
          }
          while (v27);
        }
        v30 = *(_QWORD *)(*a1 + 88);
        v31 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v32 = (void *)sub_22E3CD3D4(v30 + 2032, LODWORD(__n[1]), 3);
            memcpy(v32, (const void *)__n[0], LODWORD(__n[1]));
            v31 = *((_QWORD *)&v41 + 1);
            LODWORD(v26) = v52.n128_u32[2];
          }
          else
          {
            v32 = (void *)__n[0];
          }
        }
        else
        {
          v32 = 0;
        }
        v34 = sub_22F0605AC(v30, 0, v31, (uint64_t)v32, (uint64_t)&v39, 1, (*v20 >> 20) & 1, (const void *)v52.n128_u64[0], v52.n128_u64[0] + 8 * v26);
        v35 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = v47;
        }
        *((_QWORD *)v46 + v35) = v34;
        LODWORD(v47) = v47 + 1;
        if ((_QWORD *)v52.n128_u64[0] != v53)
          free((void *)v52.n128_u64[0]);
      }
      else
      {
        v33 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v47;
        }
        *((_QWORD *)v46 + v33) = 0;
        LODWORD(v47) = v47 + 1;
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v36 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v38 + 80), 2u, (int *)(v38 + 88), 2, (uint64_t)&v41, (__int128 *)&v39, v16, (uint64_t)v49, v50, v43, (unsigned __int8 **)v46, v47);
LABEL_48:
  if (v46 != v48)
    free(v46);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v49 != v51)
    free(v49);
  return v36;
}

_DWORD *sub_22ECCBA58(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 12, 3);
  result[1] = a3;
  result[2] = 32;
  *result = a2;
  return result;
}

uint64_t sub_22ECCBA94(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ECCBAE0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ECCBC38(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCBC84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCBCD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22ECC9CB0((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22ECCC114(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCC260(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22ECB399C(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22ECCC3F4(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ECCC54C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCC6A4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ECB399C(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22ECCC834(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  size_t __n[2];
  int v49[3];
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  void *v55;
  uint64_t v56;
  _BYTE v57[128];
  __int128 v58;
  _QWORD v59[10];

  v59[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v49[0] = *(_DWORD *)a2;
  v49[1] = v6;
  v49[2] = v4;
  v55 = v57;
  v56 = 0x1000000000;
  v47 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v45 = 0;
  DWORD2(v45) = 0;
  v52 = v54;
  v53 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22ECB399C(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v56;
      }
      *((_QWORD *)v55 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v56) = v56 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECC1D78(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v47, v14, v15);
  v45 = *(_OWORD *)(a2 + 56);
  v46 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v45)
  {
    sub_22ECC9CB0((__n128 *)&v58, a1, (__n128 *)&v45);
    v45 = v58;
    v46 = v59[0];
    if (!(_QWORD)v58)
      goto LABEL_46;
  }
  v39 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v58 = v59;
        *((_QWORD *)&v58 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v50 = v27;
            v51 = 0;
            if (sub_22E793870(a1 + 1, &v50, &v51)
              && v51 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v51[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v58);
            if (DWORD2(v58) >= (unint64_t)HIDWORD(v58))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v58);
            }
            *(_QWORD *)(v58 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v58);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v47 + 1);
            LODWORD(v25) = DWORD2(v58);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v45, 1, (*v19 >> 20) & 1, (const void *)v58, v58 + 8 * v25);
        v34 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v53;
        }
        *((_QWORD *)v52 + v34) = v33;
        LODWORD(v53) = v53 + 1;
        if ((_QWORD *)v58 != v59)
          free((void *)v58);
      }
      else
      {
        v32 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v53;
        }
        *((_QWORD *)v52 + v32) = 0;
        LODWORD(v53) = v53 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v42 = v47;
  sub_22F0AB560(v43, (uint64_t)&v47 + 8);
  v40 = v45;
  v41 = v46;
  v35 = sub_22EC94100((_QWORD *)*a1, v39 + 80, 5u, v39 + 100, 5, (uint64_t)&v42, &v40, *(_DWORD *)(v39 + 120), *(_BYTE *)(v39 + 124), v37, *(_DWORD *)(v39 + 128), v38, (uint64_t)v55, v56, v49, 0, (unsigned __int8 **)v52, v53);
  if (v44)
    free(v43[1]);
LABEL_49:
  if (v52 != v54)
    free(v52);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v55 != v57)
    free(v55);
  return v35;
}

uint64_t sub_22ECCCD0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCCD58(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCCEA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCCEF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCCF3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCCF88(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCCFD4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECCD02C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E49C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCD078(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCD0C4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCD210(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22ECC9CB0((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22ECCD654(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECCD6A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCD704(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECCD850(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCD89C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v14;
  _DWORD *v15[5];

  v15[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      if (*v5)
      {
        v7 = sub_22ECB399C(a1, *v5);
        if ((v7 & 1) != 0)
          return 0;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        v9 = v14;
        v10 = (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v8 = 0;
        v10 = 0;
        v9 = v14;
      }
      if (v9 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v14;
        v10 = (_DWORD *)v8;
      }
      v15[v9] = v10;
      v11 = ++v14;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA137C(*a1, v15, v11, *a2, a2[3], a2[1]);
    }
  }
  v11 = 0;
  return sub_22ECA137C(*a1, v15, v11, *a2, a2[3], a2[1]);
}

uint64_t sub_22ECCDA00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22ECC9CB0((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22ECCDE3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECCDE88(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD **v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  __n128 v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v49 = v51;
  v50 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  v39.n128_u64[0] = 0;
  v39.n128_u32[2] = 0;
  v46 = v48;
  v47 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ECB399C(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v50;
      }
      *((_QWORD *)v49 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v50) = v50 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECC1D78(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v36 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(__n128 *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if (v39.n128_u64[0])
  {
    sub_22ECC9CB0(&v52, a1, &v39);
    v39 = v52;
    v40 = v53[0];
    if (!v52.n128_u64[0])
      goto LABEL_46;
  }
  v38 = a2;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)(a2 + 104 + 8 * v17);
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      if (*v18)
      {
        v52.n128_u64[0] = (unint64_t)v53;
        v52.n128_u64[1] = 0x800000000;
        v21 = *(unsigned __int8 *)v20;
        v22 = v21 == 211;
        if (v21 == 211)
          v23 = v20;
        else
          v23 = 0;
        v24 = v23 + 16;
        if (v22)
          v25 = v24;
        else
          v25 = v20 + 20;
        v26 = v20[1];
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v25 & 0xFFFFFFFFFFFFFFFCLL;
            v44 = v28;
            v45 = 0;
            if (sub_22E793870(a1 + 1, &v44, &v45)
              && v45 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v28 = v45[1];
            }
            v29 = *(unsigned int *)(v28 + 28);
            v26 = v52.n128_u32[2];
            if (v52.n128_u32[2] >= (unint64_t)v52.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v26 = v52.n128_u32[2];
            }
            *(_QWORD *)(v52.n128_u64[0] + 8 * v26) = (v29 >> 13) & 3 | v28;
            LODWORD(v26) = ++v52.n128_u32[2];
            ++v25;
            v27 -= 8;
          }
          while (v27);
        }
        v30 = *(_QWORD *)(*a1 + 88);
        v31 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v32 = (void *)sub_22E3CD3D4(v30 + 2032, LODWORD(__n[1]), 3);
            memcpy(v32, (const void *)__n[0], LODWORD(__n[1]));
            v31 = *((_QWORD *)&v41 + 1);
            LODWORD(v26) = v52.n128_u32[2];
          }
          else
          {
            v32 = (void *)__n[0];
          }
        }
        else
        {
          v32 = 0;
        }
        v34 = sub_22F0605AC(v30, 0, v31, (uint64_t)v32, (uint64_t)&v39, 1, (*v20 >> 20) & 1, (const void *)v52.n128_u64[0], v52.n128_u64[0] + 8 * v26);
        v35 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = v47;
        }
        *((_QWORD *)v46 + v35) = v34;
        LODWORD(v47) = v47 + 1;
        if ((_QWORD *)v52.n128_u64[0] != v53)
          free((void *)v52.n128_u64[0]);
      }
      else
      {
        v33 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v47;
        }
        *((_QWORD *)v46 + v33) = 0;
        LODWORD(v47) = v47 + 1;
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v36 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v38 + 80), 2u, (int *)(v38 + 88), 2, (uint64_t)&v41, (__int128 *)&v39, v16, (uint64_t)v49, v50, v43, (unsigned __int8 **)v46, v47);
LABEL_48:
  if (v46 != v48)
    free(v46);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v49 != v51)
    free(v49);
  return v36;
}

uint64_t sub_22ECCE2FC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ECCE348(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ECCE4A0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECB399C(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ECCE5F8(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22ECB399C(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22ECB399C(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22ECCE764(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22ECBDAF0((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F495A90
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22ECC3738(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22ECCEA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22ECCECF4(uint64_t *a1, unsigned int *a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  void *v20[2];
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22ECC1D78(a1, *((_QWORD *)a2 + 2), *((void **)a2 + 3), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*((_BYTE *)a2 + 2) & 4) != 0 ? a2[16] : 0;
  sub_22ECC9CB0(&v19, a1, (__n128 *)a2 + 2);
  if (!v19.n128_u64[0])
    return 1;
  v13 = *a2;
  if ((v13 & 0x40000) == 0)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v14 = a2[14];
  if (!v14)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v15 = a2[15];
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  v21[64] = v14;
  v21[65] = v15;
  v16 = (uint64_t)&a2[4 * ((v13 >> 18) & 1) + 14];
  if ((sub_22ECCEA54((uint64_t)a1, v16, v16 + 32 * a2[17]) & 1) != 0)
    v17 = 1;
  else
    v17 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, (uint64_t)v20, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  return v17;
}

uint64_t sub_22ECCEE8C(_QWORD **a1, char *a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;
  __int128 v9;

  v4 = sub_22ECBDAF0(a1, *((uint64_t **)a2 + 3));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EFFB374((unsigned __int8 *)a2);
  sub_22ECB399C(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  *((_QWORD *)&v9 + 1) = *((unsigned int *)a2 + 9);
  *(_QWORD *)&v9 = *((_QWORD *)a2 + 5);
  return sub_22E95ADCC(*a1, *((_DWORD *)a2 + 8), *((unsigned __int16 *)&unk_22F495A84 + *a2 + 110), v5, v8 & 0xFFFFFFFFFFFFFFFELL, v9, v9 >> 32);
}

unint64_t sub_22ECCEF1C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22ECC4EF4(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22ECCF08C(uint64_t a1, int a2, _QWORD *a3, int a4)
{
  if (a2 != 9 || *a3 != *(_QWORD *)a1)
    return 0;
  **(_DWORD **)(a1 + 24) = a4;
  return 1;
}

uint64_t sub_22ECCF0BC(_DWORD **a1, int a2)
{
  uint64_t result;

  result = 0;
  if ((a2 - 56) <= 0x2A && ((1 << (a2 - 56)) & 0x6000001CF91) != 0)
  {
    **a1 = a2;
    return 1;
  }
  return result;
}

uint64_t sub_22ECCF0FC()
{
  return 1;
}

uint64_t sub_22ECCF104(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t *v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  const void *v41;
  size_t v42;
  _BOOL4 v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  const void *p_p;
  size_t v86;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t i;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE v97[96];
  uint64_t v98;
  unint64_t v99;
  void *__p;
  unint64_t v101;
  __int128 v102;
  llvm *v103[2];
  __int128 v104;
  __int128 v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  _QWORD v110[5];
  void *v111;
  uint64_t v112;
  _DWORD v113[26];
  uint64_t v114;
  __int16 v115;
  char v116;
  uint64_t v117;
  void *__src;
  uint64_t v119;
  _BYTE v120[64];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  __int16 v129;
  char v130;
  char *v131;
  uint64_t v132;
  _QWORD v133[42];

  v133[40] = *MEMORY[0x24BDAC8D0];
  v98 = a5;
  v6 = (uint64_t *)(a3 + 8);
  if (*(_DWORD *)a3)
    v7 = *(_DWORD *)(a3 + 4) == 0;
  else
    v7 = 1;
  if (!v7 && *(_QWORD *)(a3 + 8) == 0)
    return 1;
  v16 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    if ((*(_DWORD *)(v16 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
      v16 = sub_22F10CF48(v16);
    v98 = *(_QWORD *)(v16 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
  }
  v131 = (char *)v133;
  v132 = 0x400000000;
  v117 = 0;
  __src = v120;
  v119 = 0x800000000;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = a1;
  v125 = *(_OWORD *)a4;
  v126 = *(_QWORD *)(a4 + 16);
  v127 = xmmword_22F495C90;
  v128 = 16842752;
  v129 = 0;
  v130 = 0;
  sub_22EC56024((uint64_t)&v117);
  HIBYTE(v128) = 0;
  if (a2)
  {
    do
    {
      if (!sub_22EC64BE8((uint64_t)a1, (uint64_t)&v117, (uint64_t)a2, a3, 0, 0))
        break;
      v27 = (void *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v28 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a2 + 9), v27);
        v29 = a2[10];
        if (v29 == a2[9])
          v30 = 92;
        else
          v30 = 88;
        v31 = (void **)(v29 + 8 * *(unsigned int *)((char *)a2 + v30));
        a2 = (_QWORD *)*a2;
      }
      while (v28 == v31 && a2);
      sub_22F3406DC((uint64_t)&v131);
      sub_22E3D0148((uint64_t)&v131[80 * v132 - 80], __src, (_BYTE *)__src + 8 * v119);
      LODWORD(v117) = 0;
      LODWORD(v119) = 0;
      if (v121)
      {
        v32 = sub_22EC6CBD0(v121);
        MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
      }
      HIBYTE(v129) = 0;
      v121 = 0;
      v122 = 0;
    }
    while (a2);
  }
  else if (a6)
  {
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    *(_OWORD *)v103 = 0u;
    __p = &v102;
    v101 = 0x800000000;
    sub_22F24C510((uint64_t)&v131, (unint64_t)&__p);
    if (__p != &v102)
      free(__p);
    v17 = *a6;
    v18 = v17 == 211;
    if (v17 == 211)
      v19 = a6;
    else
      v19 = 0;
    v20 = (uint64_t *)(v19 + 64);
    if (v18)
      v21 = v20;
    else
      v21 = (uint64_t *)(a6 + 80);
    v22 = *((unsigned int *)a6 + 1);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      do
      {
        v24 = *v21;
        v25 = &v131[80 * v132];
        v26 = *((unsigned int *)v25 - 18);
        if (v26 >= *((unsigned int *)v25 - 17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = *((unsigned int *)v25 - 18);
        }
        *(_QWORD *)(*((_QWORD *)v25 - 10) + 8 * v26) = v24 | 3;
        ++*((_DWORD *)v25 - 18);
        ++v21;
        v23 -= 8;
      }
      while (v23);
    }
  }
  if (sub_22EFC7ADC(a1[27]))
  {
    v33 = v131;
    v34 = v132;
LABEL_76:
    __p = &v102;
    v101 = 0x800000000;
    if (v34)
    {
      v50 = 80 * v34;
      v51 = (unsigned int *)(v33 + 8);
      do
      {
        v52 = *v51;
        if ((_DWORD)v52)
          sub_22E3D0148((uint64_t)&__p, *((_BYTE **)v51 - 1), (_BYTE *)(*((_QWORD *)v51 - 1) + 8 * v52));
        v51 += 20;
        v50 -= 80;
      }
      while (v50);
    }
    v53 = a1[11];
    if (*v6)
    {
      v54 = sub_22F0ABC50(v6, v53);
      v55 = v56;
    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
    v9 = (uint64_t)sub_22F0605AC(v53, 0, v54, v55, a4, 0, 1, __p, (uint64_t)__p + 8 * v101);
    if (__p != &v102)
      free(__p);
    goto LABEL_86;
  }
  v35 = v98;
  v36 = *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF0);
  v33 = v131;
  v34 = v132;
  if ((*(_BYTE *)(v36 + 17) & 7) != 0)
    goto LABEL_76;
  if ((_DWORD)v132)
  {
    v45 = v131;
    while (1)
    {
      v46 = *((unsigned int *)v45 + 2);
      if ((_DWORD)v46)
        break;
LABEL_74:
      v45 += 80;
      if (v45 == &v131[80 * v132])
        goto LABEL_45;
    }
    v47 = *(_QWORD **)v45;
    v48 = 8 * v46;
    while (1)
    {
      v49 = *v47 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_BYTE *)(v49 + 28) & 0x80) == 0
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 7) != 0)
      {
        goto LABEL_76;
      }
      ++v47;
      v48 -= 8;
      if (!v48)
        goto LABEL_74;
    }
  }
LABEL_45:
  v37 = *(unsigned int *)(a4 + 8);
  if ((sub_22F10DF70(v36) & 1) == 0 && !sub_22F10E06C(*(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF0)))
  {
    if (*v6)
      goto LABEL_149;
    sub_22EFC6E98((__int128 *)a4, &__p);
    v82 = BYTE7(v102);
    if ((SBYTE7(v102) & 0x80u) == 0)
      v83 = BYTE7(v102) & 0x7F;
    else
      v83 = v101;
    if (v83 == 7)
    {
      if ((SBYTE7(v102) & 0x80u) == 0)
        v84 = BYTE7(v102);
      else
        v84 = v101;
      if ((SBYTE7(v102) & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v84 >= 7)
        v86 = 7;
      else
        v86 = v84;
      v87 = memcmp(p_p, "default", v86) == 0;
      v88 = v84 == 7 && v87;
    }
    else
    {
      v88 = 0;
    }
    if (v82 < 0)
      operator delete(__p);
    if (!v88)
    {
LABEL_149:
      sub_22E8FCA40(a1, v37, 0x10B2u, 0, (uint64_t)v97);
      v90 = (unsigned int *)v97;
      goto LABEL_150;
    }
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0 && !*v6)
    sub_22ECCFB28((uint64_t)a1, (uint64_t *)a4, v37, v98, (uint64_t)&v131);
  if ((_DWORD)v132)
  {
    v57 = v131;
    v58 = &v131[80 * v132];
    v59 = v131;
    do
    {
      v60 = *((unsigned int *)v59 + 2);
      if ((_DWORD)v60)
      {
        v61 = *(_QWORD **)v59;
        v62 = 8 * v60;
        while (1)
        {
          v63 = *v61 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_BYTE *)(v63 + 28) & 0x80) == 0
            && (*(_QWORD *)((*(_QWORD *)(v63 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v63 + 48) & 7) == (*(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 8) | v98 & 7))
          {
            break;
          }
          ++v61;
          v62 -= 8;
          if (!v62)
            goto LABEL_102;
        }
        v9 = sub_22F32D524((uint64_t)a1, v63, v98, 1, v37, 0);
        goto LABEL_86;
      }
LABEL_102:
      v59 += 80;
    }
    while (v59 != v58);
    while (1)
    {
      v64 = *((unsigned int *)v57 + 2);
      if ((_DWORD)v64)
        break;
LABEL_119:
      v57 += 80;
      if (v57 == v58)
        goto LABEL_51;
    }
    v65 = *(_QWORD **)v57;
    v66 = 8 * v64;
    while (1)
    {
      v67 = *v65 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_BYTE *)(v67 + 28) & 0x80) == 0)
      {
        v96 = *v65 & 0xFFFFFFFFFFFFFFFCLL;
        v68 = sub_22EAAB1B8(a1, v37, v98, *(_QWORD *)(v67 + 48));
        v69 = v96;
        if (v68)
        {
          v70 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v70 & 8) != 0)
          {
            v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v72 = 0;
            v71 = 0;
          }
          v73 = *(_QWORD *)(v96 + 48);
          v74 = v71 | (v70 | v98) & 7;
          __p = (void *)(v74 | v72);
          v75 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v75 & 8) != 0)
          {
            v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v77 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v77 = 0;
            v76 = 0;
          }
          v78 = HIDWORD(v72);
          v79 = v76 | (v75 | v73) & 7;
          if ((_DWORD)v74 == (_DWORD)v79 && (_DWORD)v78 == HIDWORD(v77))
            break;
          v81 = sub_22E95F24C((unsigned int *)&__p, v79 | v77);
          v69 = v96;
          if (!v81)
            break;
        }
      }
      ++v65;
      v66 -= 8;
      if (!v66)
        goto LABEL_119;
    }
    __p = 0;
    v101 = (unint64_t)&v101;
    *(_QWORD *)&v102 = &v101;
    *((_QWORD *)&v102 + 1) = 0;
    v103[0] = (llvm *)1;
    for (i = 40; i != 168; i += 16)
      *(void **)((char *)&__p + i) = 0;
    v106 = v110;
    v107 = v110;
    v108 = 4;
    v109 = 0;
    v110[4] = 0;
    v111 = v113;
    v112 = 0x400000000;
    v113[24] = 0;
    v114 = 0;
    v115 = 257;
    v116 = 0;
    v92 = v69;
    if (!sub_22EAAB2A0((uint64_t)a1, v37, v35, *(_QWORD *)(v69 + 48), (unint64_t *)&__p))
      goto LABEL_158;
    v93 = *(_QWORD *)(*(_QWORD *)(v92 + 48) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v93 + 8) & 0xF) != 0)
      v93 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v92 + 48));
    v99 = *(_QWORD *)(*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
    v94 = sub_22EFB50E0(v103, &v99);
    if (((_DWORD)v94[1] & 1u) + (*((_DWORD *)v94 + 2) >> 1) > 1
      || sub_22E90B400((uint64_t)a1, v37, *(_QWORD *)(v96 + 48), v35, v102 + 16, 0, 0, 0) == 1)
    {
LABEL_158:
      if (v111 != v113)
        free(v111);
      if (v107 != v106)
        free(v107);
      if (((uint64_t)v103[0] & 1) == 0)
        llvm::deallocate_buffer(v103[1], (void *)(16 * v104));
      sub_22E687D9C((uint64_t *)&v101);
      goto LABEL_51;
    }
    v9 = sub_22F32D524((uint64_t)a1, v96, v35, 1, v37, 0);
    if (v111 != v113)
      free(v111);
    if (v107 != v106)
      free(v107);
    if (((uint64_t)v103[0] & 1) == 0)
      llvm::deallocate_buffer(v103[1], (void *)(16 * v104));
    sub_22E687D9C((uint64_t *)&v101);
    goto LABEL_86;
  }
LABEL_51:
  if (*v6)
    goto LABEL_143;
  sub_22EFC6E98((__int128 *)a4, &__p);
  v38 = BYTE7(v102);
  if ((SBYTE7(v102) & 0x80u) == 0)
    v39 = BYTE7(v102) & 0x7F;
  else
    v39 = v101;
  if (v39 == 7)
  {
    if ((SBYTE7(v102) & 0x80u) == 0)
      v40 = BYTE7(v102);
    else
      v40 = v101;
    if ((SBYTE7(v102) & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if (v40 >= 7)
      v42 = 7;
    else
      v42 = v40;
    v43 = memcmp(v41, "default", v42) != 0;
    v44 = v40 != 7 || v43;
  }
  else
  {
    v44 = 1;
  }
  if (v38 < 0)
    operator delete(__p);
  if (v44)
  {
LABEL_143:
    sub_22E8FCA40(a1, v37, 0x1097u, 0, (uint64_t)&__p);
    v89 = sub_22E8901B8((uint64_t)&__p, &v98);
    v99 = *(_QWORD *)a4;
    sub_22E894538(v89, (uint64_t *)&v99);
    v90 = (unsigned int *)&__p;
LABEL_150:
    sub_22E903BEC(v90);
    v9 = 1;
    goto LABEL_86;
  }
  v9 = 0;
LABEL_86:
  if (HIBYTE(v128))
  {
    if ((_DWORD)v117 == 5)
    {
      sub_22EC64D18(v124, (uint64_t)&v117);
    }
    else if (v122 && (*(_DWORD *)(v124[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v124, (uint64_t)&v117);
    }
  }
  if (v121)
  {
    v95 = sub_22EC6CBD0(v121);
    MEMORY[0x2348A0E9C](v95, 0x10E0C409F09D3C3);
  }
  if (__src != v120)
    free(__src);
  sub_22F24C958(&v131);
  return v9;
}

void sub_22ECCFB28(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t i;
  unint64_t *v16;
  BOOL v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE v27[24];
  _QWORD v28[2];
  unsigned int v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD v33[2];
  unsigned int v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[18];

  v37[16] = *MEMORY[0x24BDAC8D0];
  v33[0] = 1;
  v8 = 1;
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v33[v8] = v9;
    v8 += 2;
  }
  while (v8 != 17);
  v35 = v37;
  v36 = 0x1000000000;
  v28[0] = 1;
  v10 = 1;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v28[v10] = v11;
    v10 += 2;
  }
  while (v10 != 17);
  v30 = v32;
  v31 = 0x1000000000;
  sub_22E5BBE34((uint64_t)v27, a3, a4, 1, 0, 0);
  v26 = v27;
  sub_22EC6543C(a1, a3, (uint64_t)&v26, 1, (uint64_t)v33, (uint64_t)v28);
  if ((_DWORD)v36)
  {
    v13 = (unint64_t *)v35;
    v14 = (unint64_t *)((char *)v35 + 8 * v36);
    do
    {
      for (i = sub_22EFCE144(*v13, *a2); i; i = v16[1])
      {
        v16 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFF8);
        v17 = (i & 0xFFFFFFFFFFFFFFF8) == 0 || (i & 4) == 0;
        v18 = i & 0xFFFFFFFFFFFFFFF8;
        if (!v17)
          v18 = *v16;
        v19 = *(_DWORD *)(v18 + 28);
        if (v18)
        {
          v20 = v18;
          if ((*(_DWORD *)(v18 + 28) & 0x7E) == 0x2E)
          {
            v20 = *(_QWORD *)(v18 + 64);
            v19 = *(_DWORD *)(v20 + 28);
          }
        }
        else
        {
          v20 = 0;
        }
        if ((v19 & 0x7E) == 0x46)
        {
          if ((*(_BYTE *)(v18 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v18) & 1) == 0)
          {
            v21 = v18;
            while (v21 == v18 || (*(_BYTE *)(v21 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v21) & 1) == 0)
            {
              v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 40))(v21);
              v21 = v22;
              if (v22 == v18 || v22 == 0)
                goto LABEL_29;
            }
            if ((*(_DWORD *)(v21 + 28) & 0x7E) == 0x2E)
              v20 = *(_QWORD *)(v21 + 64);
          }
          sub_22F3406DC(a5);
          v24 = *(_QWORD *)a5 + 80 * *(unsigned int *)(a5 + 8);
          v25 = *(unsigned int *)(v24 - 72);
          if (v25 >= *(unsigned int *)(v24 - 68))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = *(unsigned int *)(v24 - 72);
          }
          *(_QWORD *)(*(_QWORD *)(v24 - 80) + 8 * v25) = v20 | 3;
          ++*(_DWORD *)(v24 - 72);
          if (v17)
            break;
        }
        else
        {
LABEL_29:
          if (v17)
            break;
        }
      }
      ++v13;
    }
    while (v13 != v14);
  }
  if (v30 != v32)
    free(v30);
  if ((v28[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v28[1], (void *)(8 * v29));
  if (v35 != v37)
    free(v35);
  if ((v33[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v33[1], (void *)(8 * v34));
}

uint64_t sub_22ECCFE28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_22ECCFEA4(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v10;
  unsigned __int8 **v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  int v17;

  result = 1;
  if (a2)
  {
    v7 = a4;
    if (a4)
    {
      if ((a4[2] & 2) == 0)
      {
        a1[7] = sub_22EC81010(a2);
        a1[8] = a3;
        if ((*v7 & 0xFE) == 0x76)
        {
          v10 = *((_QWORD *)v7 + 2);
          if (v10)
          {
            v17 = 0;
            if ((sub_22EFD8088(v10, &v17) & 1) != 0 || sub_22EFD8400(v10, 0))
            {
              if (*((_DWORD *)v7 + 8))
              {
                v11 = (unsigned __int8 **)(v7 + 40);
                v12 = *v7;
                v13 = v12 == 119;
                if (v12 == 119)
                  v14 = v7;
                else
                  v14 = 0;
                v15 = (unsigned __int8 **)(v14 + 48);
                if (v13)
                  v11 = v15;
                if (*v11)
                  v7 = sub_22EFFA6B0(*v11);
              }
            }
          }
        }
        a1[9] = v7;
        if (a5)
        {
          v16 = sub_22ECCFFF4((uint64_t)a1, v7, 1);
          result = 0;
          a1[14] = v16;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ECCFF94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1[7];
  if (v1)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      return 1;
    v2 = a1[9];
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 2) & 1) != 0)
        return 1;
    }
    v3 = a1[10];
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 2) & 1) != 0)
        return 1;
    }
    v4 = a1[11];
    if (v4)
      return *(_BYTE *)(v4 + 2) & 1;
  }
  return 0;
}

uint64_t sub_22ECCFFF4(uint64_t a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unsigned int v15;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 8);
  v10[0] = *(_QWORD *)a1;
  v10[1] = v4;
  v10[2] = v5;
  v11 = 0;
  v12 = v6;
  v13 = a3;
  v14 = v7;
  v15 = 0;
  v8 = sub_22ECD0068((uint64_t)v10, a2);
  result = 0;
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v11;
    return v15 | 0x100000000;
  }
  return result;
}

uint64_t sub_22ECD0068(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_9;
      default:
        goto LABEL_7;
    }
  }
  if (!a2 || v2 != 233)
    return ((uint64_t (*)(void))((char *)&loc_22ECD00F8 + 4 * byte_22F49528B[v2 - 1]))();
  v3 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 18) & 0x1F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
LABEL_9:
      result = sub_22ECD0200(a1, (uint64_t)a2);
      break;
    default:
LABEL_7:
      v2 = v3;
      return ((uint64_t (*)(void))((char *)&loc_22ECD00F8 + 4 * byte_22F49528B[v2 - 1]))();
  }
  return result;
}

uint64_t sub_22ECD00FC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 60 > 6)
    return 0;
  else
    return sub_22ECD02F4(a1, a2, v2);
}

uint64_t sub_22ECD0200(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  char v7;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_22F0D492C(a2);
  v11 = v13;
  v3 = v15;
  v12 = v14;
  v4 = v16;
  v6 = *((_QWORD *)&v13 + 1);
  v5 = (uint64_t *)v13;
  v7 = 0;
  if ((_QWORD)v13 != v15 || *((_QWORD *)&v13 + 1) != v16)
  {
    do
    {
      v9 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v9 && (sub_22ECD0068(a1) & 1) != 0)
        v7 = 1;
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v11);
        else
          sub_22F3F2FE0((uint64_t)&v11, 1);
      }
      else
      {
        *(_QWORD *)&v11 = v5 + 1;
      }
      v6 = *((_QWORD *)&v11 + 1);
      v5 = (uint64_t *)v11;
    }
    while (v11 != __PAIR128__(v4, v3));
  }
  return v7 & 1;
}

uint64_t sub_22ECD02F4(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v10;
  int v11;
  unsigned int *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  _BYTE v26[96];
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[64];
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x24BDAC8D0];
  v33 = a3;
  v6 = sub_22EC81010(a3);
  if (v6 == sub_22EC81010((uint64_t)a1[2]))
  {
    v10 = *a1;
    sub_22EFF605C(a2);
    sub_22E8FCA40(v10, v11, 0x10F5u, 0, (uint64_t)&v34);
    LODWORD(v29) = *((_BYTE *)a1 + 40) == 0;
    sub_22E8900C4((uint64_t)&v34, (int *)&v29);
    v12 = (unsigned int *)&v34;
LABEL_11:
    sub_22E903BEC(v12);
    return 0;
  }
  v7 = sub_22EC80308((uint64_t)a1[1], a3);
  if (!v7)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 45)
  {
    v34 = v36;
    v35 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v31, (uint64_t)&v34);
    v29 = sub_22E8FCD8C((*a1)[11], (*a1)[10]);
    v30 = v15;
    (*(void (**)(uint64_t, _BYTE *, unint64_t *, uint64_t))(*(_QWORD *)a3 + 96))(a3, v31, &v29, 1);
    v16 = *a1;
    sub_22EFF605C(a2);
    sub_22E8FCA40(v16, v17, 0x110Du, 0, (uint64_t)&v29);
    v18 = v32[1];
    v27 = *v32;
    v28 = v18;
    sub_22F2F2210((uint64_t)&v29, (uint64_t)&v27);
    sub_22E903BEC((unsigned int *)&v29);
    sub_22E8FCA40(*a1, *(_DWORD *)(a3 + 24), 0x1771u, 0, (uint64_t)&v29);
    sub_22E890024((uint64_t)&v29, &v33);
    sub_22E903BEC((unsigned int *)&v29);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v31);
    v19 = v34;
    if (v34 == v36)
      return 0;
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + 41))
  {
    v13 = *a1;
    sub_22EFF605C(a2);
    sub_22E8FCA40(v13, v14, 0x109Au, 0, (uint64_t)v26);
    v12 = (unsigned int *)v26;
    goto LABEL_11;
  }
  if (!a1[3])
  {
    if (!a1[4] || (v8 = sub_22EC81010(a3), v8 == sub_22EC81010((uint64_t)a1[4])))
    {
      a1[3] = (_QWORD *)a3;
      *((_DWORD *)a1 + 11) = v7;
      return 1;
    }
    if (!a1[3])
    {
      v20 = a1[4];
      if (v20)
        a1[3] = v20;
    }
  }
  v34 = v36;
  v35 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v31, (uint64_t)&v34);
  v21 = a1[3];
  v29 = sub_22E8FCD8C((*a1)[11], (*a1)[10]);
  v30 = v22;
  (*(void (**)(_QWORD *, _BYTE *, unint64_t *, uint64_t))(*v21 + 96))(v21, v31, &v29, 1);
  v23 = *a1;
  sub_22EFF605C(a2);
  sub_22E8FCA40(v23, v24, 0x109Bu, 0, (uint64_t)&v29);
  v25 = v32[1];
  v27 = *v32;
  v28 = v25;
  sub_22F2F2210((uint64_t)&v29, (uint64_t)&v27);
  sub_22E903BEC((unsigned int *)&v29);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v31);
  v19 = v34;
  if (v34 != v36)
LABEL_20:
    free(v19);
  return 0;
}

uint64_t sub_22ECD061C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  char v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;

  v9 = *(_QWORD *)(a1 + 88);
  v10 = a3;
  if ((a5 & 1) == 0)
    v10 = sub_22EFFEB40(a3);
  v11 = *((_QWORD *)v10 + 1);
  if ((*(_DWORD *)a3 & 0x1C00) == 0 && (*(_DWORD *)a3 & 0x300) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    {
      a4 = 1;
      v11 = sub_22EF5F8C4(v9, *((_QWORD *)v10 + 1), 1);
    }
    else
    {
      v11 = sub_22EF5B848(v9, *((_QWORD *)v10 + 1), 0);
      sub_22EFF605C((uint64_t)a3);
      v14 = 0;
      if ((unint64_t)sub_22EB2EA08(a1, v13, 4, (uint64_t)v10) < 2)
        return v14;
      a4 = 1;
    }
  }
  v16 = (char *)(a1 + 10664);
  v17 = *(_QWORD *)(a1 + 216);
  sub_22F0D5A50((uint64_t)a3);
  v14 = sub_22F3B8080(v9, v17, a2, v11, v18);
  if ((a4 & 1) == 0)
  {
    v28 = 0uLL;
    v30 = 0;
    v29 = 0;
    v32 = 120;
    v31 = 0;
    v27 = sub_22F395DF4(v9, &v28);
    sub_22EFCA95C(v14, v27);
  }
  sub_22EFCCE00(*(_QWORD *)(a1 + 216), v14);
  v19 = *(_DWORD *)(a1 + 8456);
  v20 = *(_BYTE *)(a1 + 11952);
  v21 = *v16;
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v23)
    *(_BYTE *)(a1 + 11952) = 1;
  *v16 = 1;
  v24 = *(_BYTE *)(a1 + 12032);
  *(_BYTE *)(a1 + 12032) = 1;
  sub_22EA28AD8();
  *(_BYTE *)(a1 + 12032) = v24;
  *(_DWORD *)(a1 + 8456) = v19;
  *(_BYTE *)(a1 + 11952) = v20;
  *v16 = v21;
  v25 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v25 + 180) == 5)
    *(_BYTE *)(v25 + 170) = 1;
  if (v22)
    v26 = 3;
  else
    v26 = 0;
  *(_DWORD *)(v25 + 180) = v26;
  return v14;
}

uint64_t sub_22ECD080C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[192];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v15;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
        v9 += 24;
      }
      v8 += 24;
    }
    while (v8 != 192);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F3409C4(a1, (uint64_t)v15, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v14 = 3 * v7;
    sub_22F3409C4(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v14);
    return llvm::deallocate_buffer(v6, (void *)(8 * v14));
  }
}

uint64_t sub_22ECD09AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;

  if (!a2)
    return 1;
  v4 = (unsigned __int8 *)a2;
  v6 = a3[11];
  if (sub_22EF5CDF0(v6, *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)) < a1)
  {
    v7 = sub_22EF60A6C(v6, a1, 1);
    return sub_22ECFABE8(a3, v4, v7, 3, 1);
  }
  return (uint64_t)v4;
}

uint64_t sub_22ECD0A38(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, int a8, char a9, uint64_t a10)
{
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  char v45;
  int v46;

  v15 = a3;
  v16 = sub_22EB27A20(a1, a3, a3, a6 & 0xFFFFFFFFFFFFFFFELL);
  v17 = 1;
  if (a4 >= 2 && a5 >= 2)
  {
    v18 = v16;
    if (v16 >= 2 && a7 >= 2)
    {
      if (a10)
        a7 = sub_22ECA02F4(a1, a7 & 0xFFFFFFFFFFFFFFFELL, a10);
      if ((a7 & 1) != 0)
        return 1;
      v19 = sub_22EB4785C(a1, a2, v15, 2, v18 & 0xFFFFFFFFFFFFFFFELL, a7 & 0xFFFFFFFFFFFFFFFELL);
      if (v19 < 2)
        return 1;
      v20 = v19;
      v21 = a5 & 0xFFFFFFFFFFFFFFFELL;
      v22 = sub_22EB27A20(a1, v15, v15, v21);
      if (v22 < 2)
        return 1;
      v23 = v22;
      if (a10 && (a9 & 1) == 0)
        v23 = sub_22ECA02F4(a1, v21, a10);
      if ((v23 & 1) != 0)
        return 1;
      v24 = a4 & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v25 + 17) & 4) != 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
        || (v26 = *(_QWORD *)(*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0),
            (*(_BYTE *)(v26 + 17) & 4) != 0)
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
        || (v27 = v20 & 0xFFFFFFFFFFFFFFFELL,
            v28 = *(_QWORD *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0),
            (*(_BYTE *)(v28 + 17) & 4) != 0)
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
      {
        v29 = (_BYTE *)(a1 + 10664);
        v30 = *(_BYTE *)(a1 + 11952);
        v45 = *(_BYTE *)(a1 + 10664);
        v46 = *(_DWORD *)(a1 + 8456);
        v31 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
        sub_22EE03478(a1);
        if (!v32)
          *(_BYTE *)(a1 + 11952) = 1;
        *v29 = 1;
        v33 = *(_BYTE *)(a1 + 12032);
        *(_BYTE *)(a1 + 12032) = 1;
        v44 = v23 & 0xFFFFFFFFFFFFFFFELL;
        v17 = sub_22EB4785C(a1, a2, v15, 21, v24, v23 & 0xFFFFFFFFFFFFFFFELL);
        v43 = v24;
        if (v17 < 2)
        {
          v35 = 0;
        }
        else
        {
          if (a8)
            v34 = 26;
          else
            v34 = 25;
          v35 = sub_22EB4785C(a1, a2, v15, v34, v24, v20 & 0xFFFFFFFFFFFFFFFELL);
          if (v35 >= 2)
            v17 = sub_22EB2D0B8();
        }
        *(_BYTE *)(a1 + 12032) = v33;
        *(_DWORD *)(a1 + 8456) = v46;
        *(_BYTE *)(a1 + 11952) = v30;
        *v29 = v45;
        v36 = *(_QWORD *)(a1 + 104);
        if (*(_DWORD *)(v36 + 180) == 5)
          *(_BYTE *)(v36 + 170) = 1;
        if (v31)
          v37 = 3;
        else
          v37 = 0;
        *(_DWORD *)(v36 + 180) = v37;
        if (v35 >= 2 && v17 > 1)
          return v17;
        v27 = v20 & 0xFFFFFFFFFFFFFFFELL;
        v24 = v43;
      }
      else
      {
        v44 = v23 & 0xFFFFFFFFFFFFFFFELL;
      }
      v38 = a8 ? 6 : 5;
      v39 = sub_22EB4785C(a1, a2, v15, v38, v44, v27);
      if (v39 < 2)
      {
        return 1;
      }
      else
      {
        v40 = (unsigned __int8 *)(v39 & 0xFFFFFFFFFFFFFFFELL);
        if ((*(_QWORD *)((*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7) == (*(_QWORD *)((*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v24 + 8) & 7))
          return sub_22EB4785C(a1, a2, v15, 21, v24, (uint64_t)v40);
        v17 = 1;
        v41 = sub_22ECFABE8((uint64_t *)a1, v40, *(_QWORD *)(v24 + 8), 3, 1);
        if (v41 >= 2)
        {
          v40 = (unsigned __int8 *)(v41 & 0xFFFFFFFFFFFFFFFELL);
          return sub_22EB4785C(a1, a2, v15, 21, v24, (uint64_t)v40);
        }
      }
    }
  }
  return v17;
}

uint64_t sub_22ECD0DE4(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;

  v5 = sub_22ECD0EAC(*(_DWORD *)a1, a3, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, *(_DWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_DWORD **)(a1 + 48), **(_QWORD **)(a1 + 56), *(unsigned int *)(*(_QWORD *)(a1 + 56) + 8), *(_QWORD *)(a1 + 64));
  v6 = v5;
  if (a2)
  {
    if ((v5 & 1) == 0 && *(_DWORD *)(a1 + 28) <= a2)
    {
      v7 = *(_QWORD *)(**(_QWORD **)(a1 + 56) + 120 * a2 + 24);
      if (v7)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 16) + 28) & 0x7F) == 0x3F)
        {
          v9 = *(_QWORD *)(a1 + 64);
          v10 = v7;
          *(_QWORD *)sub_22F340BE8(v9, &v10) = v7;
        }
      }
    }
  }
  return v6;
}

uint64_t sub_22ECD0EAC(int a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 *v16;
  unsigned int v18;
  BOOL v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int *v22;
  _BOOL8 v23;
  unsigned int v24;
  unsigned int **v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  _BYTE *v60;
  char v61;
  char v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  char v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  __int16 v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned __int8 **v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t v151;
  unsigned __int8 *v152;
  unsigned int v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  __int128 *v158;
  int v159;
  unsigned __int8 *v160;
  _DWORD *v161;
  BOOL v162;
  unint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  int v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  int v176;
  _QWORD *v177;
  int v178;
  int v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  _BOOL4 v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  uint64_t v220;
  BOOL v221;
  _BOOL4 v222;
  uint64_t *v223;
  uint64_t v224;
  _BOOL4 v225;
  uint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  _BOOL4 v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  int v243;
  _QWORD *v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v249;
  _DWORD *v250;
  const char *v251;
  size_t v252;
  unsigned int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  unsigned __int8 *v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t i;
  unint64_t v294;
  unint64_t v295;
  unsigned __int8 v296;
  unsigned __int8 v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  int v319;
  char v320;
  char v321;
  unint64_t v322;
  unsigned int v323;
  unsigned int v324;
  unint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  unsigned __int8 *v348;
  unsigned __int8 *v349;
  unint64_t v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  char v353;
  uint64_t *v354;
  char v355;
  int v356;
  unsigned __int8 *v357;
  char v358;
  int v359;
  int v360;
  unint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  int v368;
  int v369;
  int v371[2];
  BOOL v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  int v380;
  uint64_t v381;
  int v382;
  unsigned __int8 v383;
  int v384;
  unsigned __int8 v385;
  unsigned __int8 *v386;
  unsigned int v387;
  unsigned int v388;
  int v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  _OWORD v393[6];

  v16 = a2;
  v387 = a6;
  v388 = a5;
  v18 = a1 & 0xFFFFFFFD;
  v19 = (a1 & 0xFFFFFFFD) != 88;
  if (!a2)
    goto LABEL_24;
  v20 = *a2;
  if (v20 == 20)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if (!v16)
      goto LABEL_24;
    v20 = *v16;
  }
  if (v20 == 14)
  {
    v21 = 0;
    v22 = (unsigned int *)(v16 + 4);
    goto LABEL_15;
  }
  v21 = v20 == 5 ? v16 : 0;
  if (v20 != 5 || *(_DWORD *)(a3[9] + 72) <= 0x2Du)
  {
LABEL_24:
    sub_22F0D5A50((uint64_t)v16);
    sub_22E8FCA40(a3, v30, 0x10BBu, 0, (uint64_t)v371);
    LOBYTE(v390) = (a7 | a8) != 0;
    v31 = sub_22E894E38((uint64_t)v371, (unsigned __int8 *)&v390);
    *(_QWORD *)&v392 = llvm::omp::getOpenMPDirectiveName();
    *((_QWORD *)&v392 + 1) = v32;
    v33 = sub_22F2F2210(v31, (uint64_t)&v392);
    v34 = sub_22E89519C(v33, &v387);
    LOBYTE(v389) = a5 != 0;
    v35 = sub_22E894E38(v34, (unsigned __int8 *)&v389);
    sub_22E89519C(v35, &v388);
    sub_22E903BEC((unsigned int *)v371);
    if (v387 >= 2)
    {
      if (a7 && a8)
      {
        v36 = sub_22ECB1B04(a4);
        if (v36)
          v37 = *(_DWORD *)(v36 + 1008);
        else
          v37 = 0;
        sub_22E8FCA40(a3, v37, 0x16F9u, 0, (uint64_t)v371);
        v389 = 2;
        v53 = sub_22E8900C4((uint64_t)v371, &v389);
        sub_22F0D4E74(a7);
        *(_QWORD *)&v392 = v54;
        v39 = sub_22E8906A0(v53, (uint64_t *)&v392);
        sub_22F0D4E74(a8);
        *(_QWORD *)&v390 = v55;
        v41 = (uint64_t *)&v390;
      }
      else
      {
        if (!a7)
        {
          sub_22EFF605C(a8);
          sub_22E8FCA40(a3, v50, 0x16F9u, 0, (uint64_t)v371);
          v23 = 1;
          LODWORD(v390) = 1;
          v51 = sub_22E8900C4((uint64_t)v371, (int *)&v390);
          sub_22F0D4E74(a8);
          *(_QWORD *)&v392 = v52;
          sub_22E8906A0(v51, (uint64_t *)&v392);
          sub_22E903BEC((unsigned int *)v371);
          return v23;
        }
        sub_22EFF605C(a7);
        sub_22E8FCA40(a3, v38, 0x16F9u, 0, (uint64_t)v371);
        LODWORD(v390) = 0;
        v39 = sub_22E8900C4((uint64_t)v371, (int *)&v390);
        sub_22F0D4E74(a7);
        *(_QWORD *)&v392 = v40;
        v41 = (uint64_t *)&v392;
      }
      sub_22E8906A0(v39, v41);
      sub_22E903BEC((unsigned int *)v371);
    }
    return 1;
  }
  if ((sub_22EFC7ADC(a3[27]) & 1) != 0)
    return 0;
  v16 = 0;
  v22 = (unsigned int *)(v21 + 8);
LABEL_15:
  v24 = *v22;
  *(_QWORD *)v371 = a3;
  v372 = v19;
  v373 = a4;
  v374 = v24;
  v375 = v24;
  v381 = 0;
  LOBYTE(v382) = 0;
  v383 = 0;
  LOBYTE(v384) = 0;
  v385 = 0;
  v386 = 0;
  v25 = (unsigned int **)(v16 + 8);
  v376 = 0u;
  v377 = 0u;
  v378 = 0u;
  v379 = 0u;
  v380 = 0;
  if (v20 != 14)
    v25 = (unsigned int **)(v21 + 32);
  v26 = *v25;
  v23 = 1;
  if ((sub_22EC9B2F0(v371, *v25, 1) & 1) != 0)
    return v23;
  v27 = *((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v42 = *(_QWORD *)(*((_QWORD *)&v377 + 1) + 48) & 0xFFFFFFFFFFFFFFF0;
    v43 = *(_QWORD *)v42;
    if (!*(_QWORD *)v42 || (v44 = *(_DWORD *)(v43 + 16), (v44 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_34;
      v342 = *(_QWORD *)(*((_QWORD *)&v377 + 1) + 48) & 0xFFFFFFFFFFFFFFF0;
      v43 = sub_22F10CF48(v43);
      if (!v43)
      {
        v42 = v342;
        goto LABEL_34;
      }
      v44 = *(_DWORD *)(v43 + 16);
    }
    if ((v44 & 0x100000) != 0)
    {
      do
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v43)
        {
          v343 = *(_DWORD *)(v43 + 16);
          if ((v343 & 0xFE) == 0x28)
            continue;
        }
        v43 = sub_22F10CF48(v43);
        v343 = *(_DWORD *)(v43 + 16);
      }
      while ((v343 & 0x100000) != 0);
    }
    v42 = *(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_34:
    if ((*(_BYTE *)(*(_QWORD *)v42 + 17) & 4) == 0)
    {
      v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFFFF0);
      v46 = *(_DWORD *)(v45 + 16);
      if (v45)
        v47 = v46 == 11;
      else
        v47 = 0;
      if (v47)
      {
        if (((*(_DWORD *)(v45 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_106;
      }
      else if (v45 && v46 == 44)
      {
        v367 = v42;
        v48 = sub_22F114198(*(_QWORD *)(v45 + 24));
        v42 = v367;
        if ((*(_BYTE *)(v48 + 74) & 1) != 0 || *(_QWORD *)(v48 + 128) > 7uLL)
        {
          v49 = sub_22F114198(*(_QWORD *)(v45 + 24));
          v42 = v367;
          if ((*(_BYTE *)(v49 + 76) & 0x80) == 0)
            goto LABEL_106;
        }
      }
      else if (v46 == 9)
      {
        goto LABEL_106;
      }
      v87 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v87 != 39)
      {
        if ((*(_BYTE *)(a3[9] + 1) & 1) == 0
          || ((v87 & 0xFE) != 0x2C ? (v113 = (*(_DWORD *)(*(_QWORD *)v42 + 16) & 0x400) == 0) : (v113 = 0), v113))
        {
          sub_22F0D5A50((uint64_t)v26);
          sub_22E8FCA40(a3, v114, 0x10B0u, 0, (uint64_t)&v392);
          LODWORD(v390) = (*(_DWORD *)a3[9] >> 8) & 1;
          sub_22E89519C((uint64_t)&v392, (unsigned int *)&v390);
          sub_22E903BEC((unsigned int *)&v392);
          v88 = 1;
LABEL_107:
          *(_QWORD *)&v392 = 0;
          if (sub_22F2891B4((uint64_t)a9, v27, &v392))
          {
            *(_QWORD *)v392 = -8192;
            v89 = a9[1] + 1;
            *a9 -= 2;
            a9[1] = v89;
          }
          v90 = (unsigned __int8 **)(v16 + 24);
          if (v20 != 14)
            v90 = (unsigned __int8 **)(v21 + 48);
          v91 = *v90;
          v92 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v371 + 72) + 72);
          if (!v91)
          {
            sub_22E8FCA40(*(_QWORD **)v371, v374, 0x10ACu, 0, (uint64_t)&v392);
            LODWORD(v390) = v92 > 0x31;
            v107 = sub_22E8900C4((uint64_t)&v392, (int *)&v390);
            sub_22E890024(v107, (uint64_t *)&v377 + 1);
            sub_22E903BEC((unsigned int *)&v392);
            v108 = 1;
            goto LABEL_155;
          }
          v368 = v88;
          v386 = v91;
          v93 = sub_22ECB248C(v91);
          sub_22F0D5A50((uint64_t)v93);
          v360 = v94;
          v95 = *v93;
          if (v95 == 130)
          {
            v390 = 0u;
            v391 = 0u;
            sub_22F05FD5C((uint64_t *)v93, &v390);
            v356 = v390;
            v348 = (unsigned __int8 *)v391;
            v351 = (unsigned __int8 *)*((_QWORD *)&v390 + 1);
            v392 = 0u;
            v393[0] = 0u;
            sub_22F05FD5C((uint64_t *)v93, &v392);
            sub_22F0D5A50(*((uint64_t *)&v392 + 1));
            v97 = v96;
            sub_22F0D60E4(*(uint64_t *)&v393[0]);
            v99 = v97 | (unint64_t)(v98 << 32);
            sub_22F05FD5C((uint64_t *)v93, &v392);
            sub_22EFF605C(*((uint64_t *)&v393[0] + 1));
            v101 = v100;
            v102 = v92 > 0x31;
            v103 = v356;
            v105 = v348;
            v104 = v351;
            v106 = v99;
          }
          else if ((v95 & 0xFE) == 0x70)
          {
            v365 = (*(_DWORD *)v93 >> 18) & 0x3F;
            v352 = (unsigned __int8 *)*((_QWORD *)v93 + 3);
            v357 = (unsigned __int8 *)*((_QWORD *)v93 + 2);
            sub_22F0D4E74((uint64_t)v93);
            v106 = v109;
            v101 = *((_DWORD *)v93 + 1);
            v102 = v92 > 0x31;
            v103 = v365;
            v105 = v352;
            v104 = v357;
          }
          else
          {
            if (v95 != 141 || *((_DWORD *)v93 + 4) != 2)
              goto LABEL_122;
            v111 = *(_QWORD *)v93;
            v103 = sub_22EFFBA54(HIDWORD(*(_QWORD *)v93) & 0x3F);
            v112 = (uint64_t)&v93[8 * ((v111 >> 18) & 1) + BYTE3(v111)];
            v104 = *(unsigned __int8 **)(v112 + 8);
            v105 = *(unsigned __int8 **)(v112 + 16);
            v106 = *((_QWORD *)v93 + 3);
            v101 = *((_DWORD *)v93 + 5);
            v102 = v92 > 0x31;
          }
          v110 = sub_22ECD3260((uint64_t)v371, v102, v103, v104, v105, v106, v101);
          if (HIBYTE(v110))
          {
            v108 = v110 != 0;
LABEL_154:
            v88 = v368;
LABEL_155:
            v145 = v88 | v108;
            v146 = (unsigned __int8 **)(v16 + 32);
            if (v20 != 14)
              v146 = (unsigned __int8 **)(v21 + 56);
            v147 = *v146;
            if (!*v146)
            {
              sub_22E8FCA40(*(_QWORD **)v371, v374, 0x10ADu, 0, (uint64_t)&v392);
              v158 = &v392;
              goto LABEL_219;
            }
            if (*v147 == 173 && (v147[2] & 4) == 0)
              v147 = (unsigned __int8 *)*((_QWORD *)v147 + 2);
            sub_22F0D4E74((uint64_t)v147);
            *(_QWORD *)&v377 = v148;
            do
            {
              v149 = (unsigned int *)v147;
              v150 = *v147;
              if (v150 > 0xD5)
              {
                if (v150 == 233)
                {
                  v153 = *(_DWORD *)v147;
                  if ((*(_DWORD *)v147 & 0x7C0000) != 0x300000)
                    goto LABEL_179;
                  v150 = *(_DWORD *)v147;
                  v152 = v147 + 16;
                }
                else
                {
                  if (v150 != 214)
                    break;
                  v152 = v147 + 24;
                }
              }
              else if (v150 == 155)
              {
                if ((**((_DWORD **)v147 + 2) & 0x18000) != 0)
                  goto LABEL_215;
                v152 = v147 + 24;
                if (!v147[48])
                  v152 = v147 + 32;
                v150 = 155;
              }
              else
              {
                if (v150 != 176)
                  break;
                v151 = *((unsigned int *)v147 + 5);
                if ((_DWORD)v151 == -1)
                  goto LABEL_215;
                v152 = &v147[8 * v151 + 40];
                v150 = 176;
              }
              v147 = *(unsigned __int8 **)v152;
            }
            while (*(unsigned int **)v152 != v149);
            if (v150 == 233)
            {
              v153 = *v149;
LABEL_179:
              if ((v153 & 0x700000) == 0)
              {
                v154 = sub_22ECD33AC(*((unsigned __int8 **)v149 + 2));
                if (v154 == *((unsigned __int8 **)&v377 + 1))
                {
                  v369 = v145;
                  v155 = *(_QWORD *)v371;
                  v156 = *v149;
                  if ((*v149 & 0x780000) != 0)
                    v157 = v149[1];
                  else
                    sub_22F0D5A50(*((_QWORD *)v149 + 2));
                  if ((v156 & 0x740000) == 0x40000)
                    v171 = -1;
                  else
                    v171 = 1;
                  v172 = sub_22EB25D60(v155, v157, v171);
                  v173 = sub_22ECD3514((_QWORD **)v371, (_DWORD *)(v172 & 0xFFFFFFFFFFFFFFFELL), 0);
                  v145 = v369;
                  goto LABEL_220;
                }
              }
              goto LABEL_215;
            }
            if ((v150 & 0xFE) == 0x70)
            {
              v159 = (*v149 >> 18) & 0x3F;
              if ((v159 - 25) < 2)
              {
                v160 = sub_22ECD33AC(*((unsigned __int8 **)v149 + 2));
                if (v160 == *((unsigned __int8 **)&v377 + 1))
                {
                  v161 = (_DWORD *)*((_QWORD *)v149 + 3);
                  v162 = (*v149 & 0xFC0000) == 6815744;
                  goto LABEL_209;
                }
                goto LABEL_215;
              }
              if (v159 != 21)
                goto LABEL_215;
              v168 = sub_22ECD33AC(*((unsigned __int8 **)v149 + 2));
              if (v168 != *((unsigned __int8 **)&v377 + 1))
                goto LABEL_215;
              v169 = (unsigned __int8 *)*((_QWORD *)v149 + 3);
            }
            else
            {
              if (v150 != 141)
                goto LABEL_215;
              v163 = *(_QWORD *)v149;
              v164 = HIDWORD(*(_QWORD *)v149) & 0x3FLL;
              if ((v164 - 18) < 2)
              {
                v174 = sub_22ECD33AC(*(unsigned __int8 **)((char *)&v149[2 * ((v163 >> 18) & 1) + 2] + BYTE3(v163)));
                if (v174 == *((unsigned __int8 **)&v377 + 1))
                {
                  v161 = *(_DWORD **)((char *)&v149[2 * (((unint64_t)*v149 >> 18) & 1) + 4]
                                    + ((unint64_t)*v149 >> 24));
                  v162 = (*(_QWORD *)v149 & 0x3F00000000) == 0x1300000000;
LABEL_209:
                  v167 = v162;
LABEL_212:
                  v173 = sub_22ECD3514((_QWORD **)v371, v161, v167);
                  goto LABEL_220;
                }
LABEL_215:
                if ((sub_22ECCFF94(v371) & 1) != 0 || (sub_22EFC7ADC(*(_QWORD *)(*(_QWORD *)v371 + 216)) & 1) != 0)
                {
                  v173 = 0;
LABEL_220:
                  v23 = (v145 | v173) != 0;
                  goto LABEL_20;
                }
                v176 = v145;
                v177 = *(_QWORD **)v371;
                sub_22F0D5A50((uint64_t)v149);
                v179 = v178;
                v180 = v177;
                v145 = v176;
                sub_22E8FCA40(v180, v179, 0x10ADu, 0, (uint64_t)&v392);
                sub_22F0D4E74((uint64_t)v149);
                *(_QWORD *)&v390 = v181;
                v158 = (__int128 *)sub_22E8906A0((uint64_t)&v392, (uint64_t *)&v390);
LABEL_219:
                sub_22E890024((uint64_t)v158, (uint64_t *)&v377 + 1);
                sub_22E903BEC((unsigned int *)&v392);
                v173 = 1;
                goto LABEL_220;
              }
              if ((v164 - 37) < 2)
              {
                v165 = sub_22ECD33AC(*(unsigned __int8 **)((char *)&v149[2 * ((v163 >> 18) & 1) + 2] + BYTE3(v163)));
                if (v165 == *((unsigned __int8 **)&v377 + 1))
                {
                  if ((*(_QWORD *)v149 & 0x3F00000000) == 0x2600000000)
                    v166 = -1;
                  else
                    v166 = 1;
                  v161 = (_DWORD *)(sub_22EB25D60(*(uint64_t *)v371, v149[6], v166) & 0xFFFFFFFFFFFFFFFELL);
                  v167 = 0;
                  goto LABEL_212;
                }
                goto LABEL_215;
              }
              if ((_DWORD)v164 != 15)
                goto LABEL_215;
              v175 = sub_22ECD33AC(*(unsigned __int8 **)((char *)&v149[2 * ((v163 >> 18) & 1) + 2] + BYTE3(v163)));
              if (v175 != *((unsigned __int8 **)&v377 + 1))
                goto LABEL_215;
              v169 = *(unsigned __int8 **)((char *)&v149[2 * (((unint64_t)*v149 >> 18) & 1) + 4]
                                         + ((unint64_t)*v149 >> 24));
            }
            v173 = sub_22ECD37EC(v371, v169);
            goto LABEL_220;
          }
LABEL_122:
          if ((sub_22ECCFF94(v371) & 1) != 0 || (sub_22EFC7ADC(*(_QWORD *)(*(_QWORD *)v371 + 216)) & 1) != 0)
          {
            v108 = 0;
          }
          else
          {
            sub_22E8FCA40(*(_QWORD **)v371, v360, 0x10ACu, 0, (uint64_t)&v392);
            v389 = v92 > 0x31;
            v142 = sub_22E8900C4((uint64_t)&v392, &v389);
            sub_22F0D4E74((uint64_t)v93);
            *(_QWORD *)&v390 = v143;
            v144 = sub_22E8906A0(v142, (uint64_t *)&v390);
            sub_22E890024(v144, (uint64_t *)&v377 + 1);
            sub_22E903BEC((unsigned int *)&v392);
            v108 = 1;
          }
          goto LABEL_154;
        }
      }
    }
LABEL_106:
    v88 = 0;
    goto LABEL_107;
  }
  v23 = 0;
LABEL_20:
  if ((sub_22ECCFF94(v371) & 1) == 0 && !(sub_22EFC7ADC(a3[27]) | v23))
  {
    v28 = sub_22ECB1B04(a4);
    if (v28)
      v29 = *(_QWORD *)(v28 + 992);
    else
      v29 = 0;
    v57 = a10;
    v58 = (unint64_t *)(v16 + 24);
    if (v20 != 14)
      v58 = (unint64_t *)(v21 + 48);
    v59 = *(_QWORD *)v371;
    if (v385 | v383)
    {
      v74 = sub_22EB25D60(*(uint64_t *)v371, 0, 1);
      v66 = sub_22ECFABE8((uint64_t *)v59, (unsigned __int8 *)(v74 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v371 + 88) + 16400), 6, 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v350 = *v58;
      v60 = (_BYTE *)(*(_QWORD *)v371 + 10664);
      v359 = *(_DWORD *)(*(_QWORD *)v371 + 8456);
      v61 = *(_BYTE *)(*(_QWORD *)v371 + 11952);
      v355 = *(_BYTE *)(*(_QWORD *)v371 + 10664);
      v364 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v371 + 104) + 180);
      sub_22EE03478(*(uint64_t *)v371);
      if (!v62)
        *(_BYTE *)(v59 + 11952) = 1;
      *v60 = 1;
      v63 = *(_BYTE *)(v59 + 12032);
      *(_BYTE *)(v59 + 12032) = 1;
      v64 = sub_22ECA02F4(v59, *((uint64_t *)&v378 + 1), a12);
      v65 = sub_22ECA02F4(*(uint64_t *)v371, v379, a12);
      v66 = 0;
      if (v64 >= 2 && v65 >= 2)
      {
        if (BYTE2(v380))
          v67 = 10;
        else
          v67 = 12;
        if (BYTE2(v380))
          v68 = 11;
        else
          v68 = 13;
        if ((_BYTE)v380)
          v69 = v67;
        else
          v69 = v68;
        v70 = sub_22EB4785C(*(uint64_t *)v371, v29, v374, v69, v64 & 0xFFFFFFFFFFFFFFFELL, v65 & 0xFFFFFFFFFFFFFFFELL);
        if (v70 >= 2)
        {
          v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v371 + 88) + 16400);
          if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            v70 = sub_22ECFABE8(*(uint64_t **)v371, (unsigned __int8 *)(v70 & 0xFFFFFFFFFFFFFFFELL), v71, 6, 1);
        }
        v66 = v70 & 0xFFFFFFFFFFFFFFFELL;
        if (v70 <= 1)
          v66 = v350;
      }
      *(_BYTE *)(v59 + 12032) = v63;
      *(_DWORD *)(v59 + 8456) = v359;
      *(_BYTE *)(v59 + 11952) = v61;
      *v60 = v355;
      v72 = *(_QWORD *)(v59 + 104);
      if (*(_DWORD *)(v72 + 180) == 5)
        *(_BYTE *)(v72 + 170) = 1;
      if (v364)
        v73 = 3;
      else
        v73 = 0;
      *(_DWORD *)(v72 + 180) = v73;
      v57 = a10;
    }
    *(_QWORD *)(v57 + 120 * a5 + 8) = v66;
    v75 = sub_22ECB1B04(a4);
    if (v75)
      v76 = *(_QWORD *)(v75 + 992);
    else
      v76 = 0;
    if (sub_22F421A30(a1)
      || (a1 - 36) < 0x40 && ((0xF400030000000C03 >> (a1 - 36)) & 1) != 0)
    {
      v77 = 1;
    }
    else
    {
      v170 = sub_22F421B08(a1);
      if (v18 == 88)
        v77 = 1;
      else
        v77 = v170;
    }
    v78 = a5;
    v79 = *(_QWORD *)(*((_QWORD *)&v377 + 1) + 48);
    v80 = (uint64_t *)(v79 & 0xFFFFFFFFFFFFFFF0);
    v81 = *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0);
    if (!v81 || (v82 = *(_DWORD *)(v81 + 16), (v82 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v81 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_92;
      v81 = sub_22F10CF48(v81);
      if (!v81)
        goto LABEL_92;
      v82 = *(_DWORD *)(v81 + 16);
    }
    if ((v82 & 0x100000) != 0)
    {
      do
      {
        v81 = *(_QWORD *)(*(_QWORD *)(v81 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v81)
        {
          v344 = *(_DWORD *)(v81 + 16);
          if ((v344 & 0xFE) == 0x28)
            continue;
        }
        v81 = sub_22F10CF48(v81);
        v344 = *(_DWORD *)(v81 + 16);
      }
      while ((v344 & 0x100000) != 0);
    }
    v79 = *(_QWORD *)(v81 + 32);
    v80 = (uint64_t *)(v79 & 0xFFFFFFFFFFFFFFF0);
LABEL_92:
    v83 = *(_QWORD *)(*(_QWORD *)(*v80 + 8) & 0xFFFFFFFFFFFFFFF0);
    v84 = *(_DWORD *)(v83 + 16);
    if (v83)
      v85 = v84 == 11;
    else
      v85 = 0;
    if (v85)
    {
      if (((*(_DWORD *)(v83 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_135;
    }
    else if (v83 && v84 == 44)
    {
      v86 = sub_22F114198(*(_QWORD *)(v83 + 24));
      if (((*(_BYTE *)(v86 + 74) & 1) != 0 || *(_QWORD *)(v86 + 128) > 7uLL)
        && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v83 + 24)) + 76) & 0x80) == 0)
      {
        goto LABEL_135;
      }
    }
    else if (v84 == 9)
    {
      goto LABEL_135;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v80 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v371 + 72) + 1) & 1) == 0)
    {
      goto LABEL_289;
    }
LABEL_135:
    v115 = *((_QWORD *)&v378 + 1);
    v116 = v379;
    if (v383)
    {
      v117 = v382 - 1;
      v118 = *(_QWORD *)(a10 + 120 * (v382 - 1) + 88);
      if (!v118)
        goto LABEL_289;
      v119 = a10 + 120 * v117;
      v122 = *(_QWORD *)(v119 + 96);
      v121 = (_QWORD *)(v119 + 96);
      v120 = v122;
      if (!v122)
        goto LABEL_290;
      v123 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v118);
      if (v123 < 2)
        goto LABEL_289;
      v124 = a10 + 120 * v117;
      v126 = *(_QWORD *)(v124 + 24);
      v125 = (uint64_t *)(v124 + 24);
      v127 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 21, v126, v123 & 0xFFFFFFFFFFFFFFFELL);
      if (v127 < 2)
        goto LABEL_289;
      v128 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 32, v127 & 0xFFFFFFFFFFFFFFFELL, v115);
      if (v128 < 2)
        goto LABEL_289;
      v129 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v128 & 0xFFFFFFFFFFFFFFFELL);
      if (v129 < 2)
        goto LABEL_289;
      v130 = v129;
      v131 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, *v121);
      if (v131 < 2)
        goto LABEL_289;
      v132 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 21, *v125, v131 & 0xFFFFFFFFFFFFFFFELL);
      if (v132 < 2)
        goto LABEL_289;
      v133 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 32, v132 & 0xFFFFFFFFFFFFFFFELL, v115);
      if (v133 < 2)
        goto LABEL_289;
      v134 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v133 & 0xFFFFFFFFFFFFFFFELL);
      if (v134 < 2)
        goto LABEL_289;
      v135 = v134;
      v136 = sub_22ECA02F4(*(uint64_t *)v371, v130 & 0xFFFFFFFFFFFFFFFELL, a12) & 0xFFFFFFFFFFFFFFFELL;
      v137 = sub_22ECA02F4(*(uint64_t *)v371, v135 & 0xFFFFFFFFFFFFFFFELL, a12);
      v120 = 0;
      if (!v136)
        goto LABEL_290;
      v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
      if ((v137 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_290;
      v139 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 10, v136, v138);
      if (v139 < 2)
        goto LABEL_289;
      v140 = sub_22ECA02F4(*(uint64_t *)v371, v139 & 0xFFFFFFFFFFFFFFFELL, a12) & 0xFFFFFFFFFFFFFFFELL;
      if (!v140)
        goto LABEL_289;
      if ((_BYTE)v380)
      {
        v141 = sub_22EB2F86C(*(_QWORD *)v371, v374, v374, v140, v136, v138);
        if (v141 <= 1)
          goto LABEL_289;
      }
      else
      {
        v141 = sub_22EB2F86C(*(_QWORD *)v371, v374, v374, v140, v138, v136);
        if (v141 < 2)
          goto LABEL_289;
      }
      v115 = v141 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v385)
    {
LABEL_245:
      if ((_BYTE)v380)
        v206 = v116;
      else
        v206 = v115;
      if ((_BYTE)v380)
        v116 = v115;
      v207 = sub_22ECA02F4(*(uint64_t *)v371, v206, a12) & 0xFFFFFFFFFFFFFFFELL;
      v208 = sub_22ECA02F4(*(uint64_t *)v371, v116, a12);
      v120 = 0;
      if (!v207 || (v208 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_290;
      v209 = sub_22ECD39D0(*(uint64_t **)v371, v76, v374, v208 & 0xFFFFFFFFFFFFFFFELL, v207, *((uint64_t *)&v379 + 1), v79, BYTE2(v380), 1u, a12);
      if (v209 >= 2)
      {
        v210 = v209;
        v211 = v209 & 0xFFFFFFFFFFFFFFFELL;
        v212 = *(_QWORD *)((v209 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v213 = *(_QWORD *)(*(_QWORD *)v371 + 88);
        v214 = (uint64_t *)(v212 & 0xFFFFFFFFFFFFFFF0);
        if (sub_22F1105F0(*v80))
        {
          v215 = sub_22EF5CDF0(v213, *v214);
          v216 = v215 > sub_22EF5CDF0(v213, *v80);
        }
        else
        {
          v216 = 0;
        }
        v217 = *(_QWORD *)(*(_QWORD *)(*v214 + 8) & 0xFFFFFFFFFFFFFFF0);
        v218 = *(_DWORD *)(v217 + 16);
        if (v217)
          v219 = v218 == 11;
        else
          v219 = 0;
        if (v219)
        {
          v222 = ((*(_DWORD *)(v217 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
        }
        else
        {
          if (v217 && v218 == 44)
          {
            v220 = sub_22F114198(*(_QWORD *)(v217 + 24));
            if ((*(_BYTE *)(v220 + 74) & 1) == 0 && *(_QWORD *)(v220 + 128) < 8uLL)
              goto LABEL_271;
            v221 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v217 + 24)) + 76) & 0x80) == 0;
          }
          else
          {
            v221 = v218 == 9;
          }
          v222 = v221;
        }
        if (v222 && !v216)
        {
LABEL_276:
          if (v77)
          {
            v226 = (uint64_t *)(v212 & 0xFFFFFFFFFFFFFFF0);
            v227 = (unint64_t)sub_22EF5CDF0(v213, *(_QWORD *)(v212 & 0xFFFFFFFFFFFFFFF0)) <= 0x20 ? 32 : 64;
            if (sub_22EF5CDF0(v213, *v226) != v227)
            {
              if (sub_22EF5CDF0(v213, *v226) > v227)
              {
                sub_22E8FCA40(*(_QWORD **)v371, v374, 0x1AC8u, 0, (uint64_t)&v392);
                v228 = sub_22E8906A0((uint64_t)&v392, (uint64_t *)&v376);
                sub_22E8906A0(v228, (uint64_t *)&v376 + 1);
                sub_22E903BEC((unsigned int *)&v392);
              }
              v229 = sub_22F110B20(*v226) || sub_22EF5CDF0(v213, *v226) < v227;
              v230 = sub_22EF60A6C(v213, v227, v229);
              if ((*(_QWORD *)((v210 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7 | *(_QWORD *)((*(_QWORD *)((v210 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8)) != (*(_QWORD *)((v230 & 0xFFFFFFFFFFFFFFF0) + 8) | v230 & 7))
              {
                v210 = sub_22ECFABE8(*(uint64_t **)v371, (unsigned __int8 *)(v210 & 0xFFFFFFFFFFFFFFFELL), v230, 3, 1);
                if (v210 < 2)
                  goto LABEL_289;
              }
            }
          }
          v120 = v210 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_290;
        }
LABEL_271:
        if (v216)
          v223 = v80;
        else
          v223 = (uint64_t *)(v212 & 0xFFFFFFFFFFFFFFF0);
        v224 = sub_22EF5CDF0(v213, *v223);
        v225 = sub_22F110B20(*v223);
        v212 = sub_22EF60A6C(v213, v224, v225);
        if ((*(_QWORD *)(v211 + 8) & 7 | *(_QWORD *)((*(_QWORD *)(v211 + 8) & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((v212 & 0xFFFFFFFFFFFFFFF0) + 8) | v212 & 7))
        {
          v210 = sub_22ECFABE8(*(uint64_t **)v371, (unsigned __int8 *)v211, v212, 3, 1);
          if (v210 < 2)
            goto LABEL_289;
        }
        goto LABEL_276;
      }
LABEL_289:
      v120 = 0;
      goto LABEL_290;
    }
    v182 = v384 - 1;
    v183 = *(_QWORD *)(a10 + 120 * (v384 - 1) + 88);
    if (!v183)
      goto LABEL_289;
    v184 = a10 + 120 * v182;
    v186 = *(_QWORD *)(v184 + 96);
    v185 = (_QWORD *)(v184 + 96);
    v120 = v186;
    if (v186)
    {
      v187 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v183);
      if (v187 < 2)
        goto LABEL_289;
      v188 = a10 + 120 * v182;
      v190 = *(_QWORD *)(v188 + 24);
      v189 = (uint64_t *)(v188 + 24);
      v191 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 21, v190, v187 & 0xFFFFFFFFFFFFFFFELL);
      if (v191 < 2)
        goto LABEL_289;
      v192 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 32, v191 & 0xFFFFFFFFFFFFFFFELL, v116);
      if (v192 < 2)
        goto LABEL_289;
      v193 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v192 & 0xFFFFFFFFFFFFFFFELL);
      if (v193 < 2)
        goto LABEL_289;
      v194 = v193;
      v195 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, *v185);
      if (v195 < 2)
        goto LABEL_289;
      v196 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 21, *v189, v195 & 0xFFFFFFFFFFFFFFFELL);
      if (v196 < 2)
        goto LABEL_289;
      v197 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 32, v196 & 0xFFFFFFFFFFFFFFFELL, v116);
      if (v197 < 2)
        goto LABEL_289;
      v198 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v197 & 0xFFFFFFFFFFFFFFFELL);
      if (v198 < 2)
        goto LABEL_289;
      v199 = v198;
      v200 = sub_22ECA02F4(*(uint64_t *)v371, v194 & 0xFFFFFFFFFFFFFFFELL, a12) & 0xFFFFFFFFFFFFFFFELL;
      v201 = sub_22ECA02F4(*(uint64_t *)v371, v199 & 0xFFFFFFFFFFFFFFFELL, a12);
      v120 = 0;
      if (v200)
      {
        v202 = v201 & 0xFFFFFFFFFFFFFFFELL;
        if ((v201 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          v203 = sub_22EB4785C(*(uint64_t *)v371, v76, v374, 11, v200, v202);
          if (v203 < 2)
            goto LABEL_289;
          v204 = sub_22ECA02F4(*(uint64_t *)v371, v203 & 0xFFFFFFFFFFFFFFFELL, a12) & 0xFFFFFFFFFFFFFFFELL;
          if (!v204)
            goto LABEL_289;
          if ((_BYTE)v380)
          {
            v205 = sub_22EB2F86C(*(_QWORD *)v371, v374, v374, v204, v200, v202);
            if (v205 <= 1)
              goto LABEL_289;
          }
          else
          {
            v205 = sub_22EB2F86C(*(_QWORD *)v371, v374, v374, v204, v202, v200);
            if (v205 < 2)
              goto LABEL_289;
          }
          v116 = v205 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_245;
        }
      }
    }
LABEL_290:
    v231 = a10;
    *(_QWORD *)(a10 + 120 * v78 + 16) = v120;
    v232 = *((_QWORD *)&v377 + 1);
    if (*((_QWORD *)&v377 + 1) && (*(_DWORD *)(*((_QWORD *)&v377 + 1) + 28) & 0x7Fu) - 67 > 0xFFFFFFF8)
    {
      *(_QWORD *)(a10 + 120 * v78 + 24) = v378;
LABEL_300:
      if ((*(_BYTE *)(v232 + 28) & 0x80) == 0)
      {
        v241 = *(_QWORD *)(v232 + 48);
        v242 = *(_QWORD *)(v241 & 0xFFFFFFFFFFFFFFF0);
        if (!v242 || (v243 = *(_DWORD *)(v242 + 16), (v243 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v242 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v242 = sub_22F10CF48(v242)) == 0)
          {
LABEL_304:
            v244 = *(_QWORD **)v371;
            v245 = v374;
            v246 = *((_QWORD *)&v377 + 1);
            v247 = *(_QWORD *)(*((_QWORD *)&v377 + 1) + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(*((_QWORD *)&v377 + 1) + 40) & 7) != 0 || v247 == 0)
            {
              v252 = 0;
              v251 = "";
            }
            else
            {
              v250 = *(_DWORD **)(v247 + 16);
              v253 = *v250;
              v251 = (const char *)(v250 + 4);
              v252 = v253;
            }
            v254 = *(_DWORD *)(*((_QWORD *)&v377 + 1) + 28);
            if ((v254 & 0x100) != 0)
            {
              sub_22EFC8E88(*((uint64_t *)&v377 + 1));
              v255 = v256;
              v246 = *((_QWORD *)&v377 + 1);
              v254 = *(_DWORD *)(*((_QWORD *)&v377 + 1) + 28);
            }
            else
            {
              v255 = 0;
            }
            if ((v254 & 0x7Fu) - 60 > 6)
            {
              v260 = 0;
            }
            else
            {
              v257 = *(_QWORD *)v371;
              v258 = v374;
              *(_DWORD *)(v246 + 28) = v254 | 0x800;
              sub_22EFC9100(v246, *(_QWORD *)(v257 + 88));
              v259 = *(_QWORD *)(v257 + 88);
              *(_QWORD *)&v392 = *(_QWORD *)(v246 + 40);
              DWORD2(v392) = v258;
              sub_22EFC6D6C((uint64_t)v393, v392);
              v260 = sub_22E3CD3D4(v259 + 2032, 32, 3);
              sub_22EFF6AE4(v260, v259, 0, 0, 0, v246, 0, (uint64_t)&v392, 0, 0, v241, 1, 0, 0);
            }
            v261 = sub_22EC822F4(v244, v245, v241, v251, v252, v255, v260);
            v262 = *(_DWORD *)(v261 + 28);
            if ((v262 & 0x80) != 0)
            {
              v249 = 0;
            }
            else
            {
              v263 = v261;
              v264 = *(_QWORD *)v371;
              v265 = v374;
              *(_DWORD *)(v261 + 28) = v262 | 0x800;
              sub_22EFC9100(v261, *(_QWORD *)(v264 + 88));
              v266 = *(_QWORD *)(v264 + 88);
              *(_QWORD *)&v392 = *(_QWORD *)(v263 + 40);
              DWORD2(v392) = v265;
              sub_22EFC6D6C((uint64_t)v393, v392);
              v267 = sub_22E3CD3D4(v266 + 2032, 32, 3);
              v249 = sub_22EFF6AE4(v267, v266, 0, 0, 0, v263, 0, (uint64_t)&v392, 0, 0, v241, 1, 0, 0);
            }
            v231 = a10;
LABEL_321:
            v268 = v388;
            v269 = v231 + 120 * v388;
            *(_QWORD *)(v269 + 32) = v249;
            v270 = (_QWORD *)(v269 + 32);
            *(_QWORD *)(v269 + 40) = *((_QWORD *)&v378 + 1);
            v271 = (_QWORD *)(v269 + 40);
            *(_QWORD *)(v269 + 48) = *((_QWORD *)&v379 + 1);
            v272 = (_QWORD *)(v269 + 48);
            *(_OWORD *)(v269 + 60) = v376;
            *(_QWORD *)(v269 + 76) = v377;
            *(_BYTE *)(v269 + 56) = HIBYTE(v380);
            *(_BYTE *)v269 = BYTE2(v380);
            v273 = sub_22ECB1B04(a4);
            if (v273)
              v274 = *(_QWORD *)(v273 + 992);
            else
              v274 = 0;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v377 + 1) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 45)
              goto LABEL_325;
            if ((_BYTE)v380)
              v294 = *((_QWORD *)&v378 + 1);
            else
              v294 = v379;
            if ((_BYTE)v380)
              v295 = v379;
            else
              v295 = *((_QWORD *)&v378 + 1);
            if ((_BYTE)v380)
              v296 = v383;
            else
              v296 = v385;
            if ((_BYTE)v380)
              v297 = v385;
            else
              v297 = v383;
            if (!v296)
              v294 = sub_22ECA02F4(*(uint64_t *)v371, v294, a12) & 0xFFFFFFFFFFFFFFFELL;
            if (!v297)
              v295 = sub_22ECA02F4(*(uint64_t *)v371, v295, a12) & 0xFFFFFFFFFFFFFFFELL;
            v275 = 0;
            v276 = 0;
            if (!v295 || !v294)
            {
LABEL_326:
              v277 = v231 + 120 * v268;
              *(_QWORD *)(v277 + 88) = v275;
              *(_QWORD *)(v277 + 96) = v276;
              v278 = v383;
              v279 = v385;
              if (v383 | v385)
                v280 = v386;
              else
                v280 = 0;
              *(_QWORD *)(v277 + 112) = v280;
              *(_BYTE *)(v277 + 104) = v278;
              *(_BYTE *)(v277 + 105) = v279;
              v47 = v279 == 0;
              v281 = v384;
              if (v47)
                v281 = 0;
              if (v278)
                v282 = v382;
              else
                v282 = v281;
              *(_DWORD *)(v277 + 108) = v282;
              if (*(_QWORD *)(v277 + 8))
              {
                v283 = *(_QWORD *)(v231 + 120 * v268 + 16);
                if (v283)
                {
                  v284 = v231 + 120 * v268;
                  v286 = *(_QWORD *)(v284 + 24);
                  v285 = (uint64_t *)(v284 + 24);
                  if (v286)
                  {
                    if (*v270 && *v271 && *v272)
                    {
                      v287 = sub_22ECB1B04(a4);
                      if (v287 && *(_BYTE *)(v287 + 1056))
                      {
                        v288 = *(_QWORD *)(v287 + 1048);
                        if (*(_QWORD *)(v288 + 16) && *(_DWORD *)(v288 + 24) > v268)
                        {
                          *(_QWORD *)(v288 + 8 * v268 + 32) = v283;
                          v289 = sub_22ECB1B04(a4);
                          *(_QWORD *)(*(_QWORD *)(v289 + 1048)
                                    + 8 * (*(_DWORD *)(*(_QWORD *)(v289 + 1048) + 24) + v268)
                                    + 32) = *v285;
                        }
                        v290 = sub_22ECB1B04(a4);
                        if (sub_22F421A30(*(_DWORD *)(v290 + 960)))
                        {
                          if (*(_DWORD *)(v290 + 1024))
                          {
                            v291 = *(_DWORD *)(v290 + 1032);
                            if (v291)
                            {
                              v292 = 88 * v291;
                              for (i = *(_QWORD *)(v290 + 1016);
                                    (*(_QWORD *)i | 0x1000) == 0xFFFFFFFFFFFFF000;
                                    i += 88)
                              {
                                v23 = 0;
                                v292 -= 88;
                                if (!v292)
                                  return v23;
                              }
                            }
                            else
                            {
                              i = *(_QWORD *)(v290 + 1016);
                            }
                            v329 = *(_QWORD *)(v290 + 1016) + 88 * v291;
                            if (i != v329)
                            {
                              v330 = *(unsigned int **)i;
                              while (v268 >= v330[8])
                              {
LABEL_434:
                                i += 88;
                                if (i == v329)
                                  return 0;
                                while (1)
                                {
                                  v330 = *(unsigned int **)i;
                                  if ((*(_QWORD *)i | 0x1000) != 0xFFFFFFFFFFFFF000)
                                    break;
                                  v23 = 0;
                                  i += 88;
                                  if (i == v329)
                                    return v23;
                                }
                                v23 = 0;
                                if (i == v329)
                                  return v23;
                              }
                              v331 = v330[5];
                              if (v331 == 5)
                              {
                                v334 = sub_22ECB1B04(a4);
                                if (v334)
                                  v333 = *(_QWORD *)(v334 + 992);
                                else
                                  v333 = 0;
                                v335 = *v285;
                                v336 = v330[6];
                                v340 = a12;
                                v338 = 0;
                                v339 = 11;
                              }
                              else
                              {
                                if (v331 == 6 && *(_DWORD *)(i + 16) <= v268)
                                {
                                  v341 = 0;
LABEL_433:
                                  *(_QWORD *)&v330[2 * v330[4] + 12 + 2 * v268] = v341;
                                  goto LABEL_434;
                                }
                                v332 = sub_22ECB1B04(a4);
                                if (v332)
                                  v333 = *(_QWORD *)(v332 + 992);
                                else
                                  v333 = 0;
                                v335 = *v285;
                                v336 = v330[6];
                                v337 = *(_QWORD *)(i + 8) + 16 * v268;
                                v338 = *(_QWORD *)v337;
                                v339 = *(_DWORD *)(v337 + 8);
                                v340 = a12;
                              }
                              v341 = sub_22ECD3004(v371, v333, v335, v340, v336, v338, v339);
                              v330 = *(unsigned int **)i;
                              goto LABEL_433;
                            }
                          }
                        }
                      }
                      return 0;
                    }
                  }
                }
              }
              return 1;
            }
            if ((_BYTE)v380)
              v298 = 0;
            else
              v298 = v295;
            if ((_BYTE)v380)
              v299 = v294;
            else
              v299 = 0;
            v366 = v299;
            v300 = *(_QWORD *)(*((_QWORD *)&v377 + 1) + 48);
            v301 = *(_QWORD *)(v300 & 0xFFFFFFFFFFFFFFF0);
            if (!v301 || (v302 = *(_DWORD *)(v301 + 16), (v302 & 0xFE) != 0x28))
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v301 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                goto LABEL_379;
              v301 = sub_22F10CF48(v301);
              if (!v301)
                goto LABEL_379;
              v302 = *(_DWORD *)(v301 + 16);
            }
            if ((v302 & 0x100000) != 0)
            {
              do
              {
                v301 = *(_QWORD *)(*(_QWORD *)(v301 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v301)
                {
                  v347 = *(_DWORD *)(v301 + 16);
                  if ((v347 & 0xFE) == 0x28)
                    continue;
                }
                v301 = sub_22F10CF48(v301);
                v347 = *(_DWORD *)(v301 + 16);
              }
              while ((v347 & 0x100000) != 0);
            }
            v300 = *(_QWORD *)(v301 + 32);
            v231 = a10;
LABEL_379:
            v303 = sub_22ECD39D0(*(uint64_t **)v371, v274, v374, v294, v295, *((uint64_t *)&v379 + 1), v300, BYTE2(v380), 0, a12);
            if (v303 < 2)
            {
LABEL_325:
              v275 = 0;
              v276 = 0;
              goto LABEL_326;
            }
            v304 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v303 & 0xFFFFFFFFFFFFFFFELL);
            if (v304 < 2)
              goto LABEL_414;
            v305 = v304;
            v306 = sub_22ECA02F4(*(uint64_t *)v371, *((uint64_t *)&v379 + 1), a12);
            if (v306 < 2)
              goto LABEL_414;
            v307 = sub_22EB4785C(*(uint64_t *)v371, v274, v374, 2, v305 & 0xFFFFFFFFFFFFFFFELL, v306 & 0xFFFFFFFFFFFFFFFELL);
            if (v307 < 2)
              goto LABEL_414;
            v308 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v307 & 0xFFFFFFFFFFFFFFFELL);
            if (v308 < 2)
              goto LABEL_414;
            v309 = v308;
            v310 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v300 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16);
            if (v310 == 39 || v310 == 32)
            {
              v349 = (unsigned __int8 *)(v308 & 0xFFFFFFFFFFFFFFFELL);
              v354 = *(uint64_t **)v371;
              v363 = *(_QWORD *)((v308 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v328 = sub_22F36D838(*(_QWORD *)(*(_QWORD *)v371 + 88));
              if ((*(_QWORD *)((v363 & 0xFFFFFFFFFFFFFFF0) + 8) | v363 & 7) != (*(_QWORD *)((v328 & 0xFFFFFFFFFFFFFFF0)
                                                                                             + 8) | v328 & 7))
              {
                v309 = sub_22ECFABE8(v354, v349, v328, 3, 1);
                if (v309 < 2)
                  goto LABEL_414;
              }
            }
            v361 = v309 & 0xFFFFFFFFFFFFFFFELL;
            v311 = v374;
            if ((_BYTE)v380)
            {
              v312 = *(_QWORD *)v371;
              v313 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v294);
              v314 = sub_22EB4785C(v312, v274, v311, 5, v313 & 0xFFFFFFFFFFFFFFFELL, v361);
              if (v314 <= 1)
                goto LABEL_414;
            }
            else
            {
              v315 = *(_QWORD *)v371;
              v316 = sub_22EB27A20(*(_QWORD *)v371, v374, v374, v295);
              v314 = sub_22EB4785C(v315, v274, v311, 6, v316 & 0xFFFFFFFFFFFFFFFELL, v361);
              if (v314 < 2)
                goto LABEL_414;
            }
            if ((*(_QWORD *)((v314 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7 | *(_QWORD *)((*(_QWORD *)((v314 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                   + 8)) != (*(_QWORD *)((v300 & 0xFFFFFFFFFFFFFFF0) + 8) | v300 & 7)
              || (v314 = sub_22ECFABE8(*(uint64_t **)v371, (unsigned __int8 *)(v314 & 0xFFFFFFFFFFFFFFFELL), v300, 3, 1), v314 >= 2))
            {
              v317 = *(_QWORD *)v371;
              v318 = (_BYTE *)(*(_QWORD *)v371 + 10664);
              v319 = *(_DWORD *)(*(_QWORD *)v371 + 8456);
              v358 = *(_BYTE *)(*(_QWORD *)v371 + 11952);
              v353 = *(_BYTE *)(*(_QWORD *)v371 + 10664);
              v362 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v371 + 104) + 180);
              sub_22EE03478(*(uint64_t *)v371);
              if (!v320)
                v318[1288] = 1;
              *v318 = 1;
              v321 = v318[1368];
              v318[1368] = 1;
              v322 = v314 & 0xFFFFFFFFFFFFFFFELL;
              if (v322)
              {
                sub_22EFF605C(v322);
                v324 = v323;
              }
              else
              {
                v324 = 0;
              }
              v325 = sub_22EBCF22C(v317, v322, v324, 0, 0);
              if (v325 < 2)
              {
                v275 = 0;
                v276 = 0;
              }
              else
              {
                if ((_BYTE)v380)
                  v276 = v325 & 0xFFFFFFFFFFFFFFFELL;
                else
                  v276 = v298;
                v275 = v366;
                if (!(_BYTE)v380)
                  v275 = v325 & 0xFFFFFFFFFFFFFFFELL;
              }
              v318[1368] = v321;
              *(_DWORD *)(v317 + 8456) = v319;
              v318[1288] = v358;
              *v318 = v353;
              v326 = *(_QWORD *)(v317 + 104);
              if (*(_DWORD *)(v326 + 180) == 5)
                *(_BYTE *)(v326 + 170) = 1;
              if (v362)
                v327 = 3;
              else
                v327 = 0;
              *(_DWORD *)(v326 + 180) = v327;
              goto LABEL_415;
            }
LABEL_414:
            v275 = 0;
            v276 = 0;
LABEL_415:
            v231 = a10;
            goto LABEL_326;
          }
          v243 = *(_DWORD *)(v242 + 16);
        }
        if ((v243 & 0x100000) != 0)
        {
          do
          {
            v242 = *(_QWORD *)(*(_QWORD *)(v242 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v242)
            {
              v346 = *(_DWORD *)(v242 + 16);
              if ((v346 & 0xFE) == 0x28)
                continue;
            }
            v242 = sub_22F10CF48(v242);
            v346 = *(_DWORD *)(v242 + 16);
          }
          while ((v346 & 0x100000) != 0);
        }
        v241 = *(_QWORD *)(v242 + 32);
        goto LABEL_304;
      }
LABEL_310:
      v249 = 0;
      goto LABEL_321;
    }
    v233 = sub_22EC7ECC4(*(uint64_t *)v371, *((uint64_t *)&v377 + 1), 0, 0);
    v234 = *(_QWORD *)v371;
    v235 = *(_QWORD *)(v233 + 48);
    v236 = *(_QWORD *)(v235 & 0xFFFFFFFFFFFFFFF0);
    if (!v236 || (v237 = *(_DWORD *)(v236 + 16), (v237 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v236 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_296;
      v236 = sub_22F10CF48(v236);
      if (!v236)
        goto LABEL_296;
      v237 = *(_DWORD *)(v236 + 16);
    }
    if ((v237 & 0x100000) != 0)
    {
      v231 = a10;
      do
      {
        v236 = *(_QWORD *)(*(_QWORD *)(v236 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v236)
        {
          v345 = *(_DWORD *)(v236 + 16);
          if ((v345 & 0xFE) == 0x28)
            continue;
        }
        v236 = sub_22F10CF48(v236);
        v345 = *(_DWORD *)(v236 + 16);
      }
      while ((v345 & 0x100000) != 0);
    }
    v235 = *(_QWORD *)(v236 + 32);
LABEL_296:
    v238 = v374;
    *(_DWORD *)(v233 + 28) |= 0x800u;
    sub_22EFC9100(v233, *(_QWORD *)(v234 + 88));
    v239 = *(_QWORD *)(v234 + 88);
    *(_QWORD *)&v392 = *(_QWORD *)(v233 + 40);
    DWORD2(v392) = v238;
    sub_22EFC6D6C((uint64_t)v393, v392);
    v240 = sub_22E3CD3D4(v239 + 2032, 32, 3);
    sub_22EFF6AE4(v240, v239, 0, 0, 0, v233, 0, (uint64_t)&v392, 0, 0, v235, 1, 0, 0);
    sub_22EC7F2A4(a4, *((uint64_t *)&v377 + 1), 0, (uint64_t)&v392);
    if ((DWORD1(v392) - 29) > 0x30
      || ((1 << (BYTE4(v392) - 29)) & 0x100240000C101) == 0
      || !*(_QWORD *)&v393[0])
    {
      *(_QWORD *)&v390 = v378;
      *((_QWORD *)&v390 + 1) = v240;
      sub_22F340CA4(a12, &v390);
    }
    v232 = *((_QWORD *)&v377 + 1);
    *(_QWORD *)(v231 + 120 * v388 + 24) = v240;
    if (!v232)
      goto LABEL_310;
    goto LABEL_300;
  }
  return v23;
}

unint64_t sub_22ECD3004(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;

  v13 = sub_22EB1A358(*a1, a3, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (!v13)
    return 0;
  if (a6)
  {
    v14 = a7 == 5 ? 5 : 6;
    v13 = sub_22EB4785C(*a1, a2, a5, v14, v13, a6) & 0xFFFFFFFFFFFFFFFELL;
    if (!v13)
      return 0;
  }
  v15 = *(_QWORD *)(a1[7] + 48);
  v16 = v15 & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
  if (!v17 || (v18 = *(_DWORD *)(v17 + 16), (v18 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_10;
    v17 = sub_22F10CF48(v17);
    if (!v17)
      goto LABEL_10;
    v18 = *(_DWORD *)(v17 + 16);
  }
  if ((v18 & 0x100000) != 0)
  {
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v17)
      {
        v27 = *(_DWORD *)(v17 + 16);
        if ((v27 & 0xFE) == 0x28)
          continue;
      }
      v17 = sub_22F10CF48(v17);
      v27 = *(_DWORD *)(v17 + 16);
    }
    while ((v27 & 0x100000) != 0);
  }
  v15 = *(_QWORD *)(v17 + 32);
  v16 = v15 & 0xFFFFFFFFFFFFFFF0;
LABEL_10:
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_DWORD *)(v19 + 16);
  if (v19)
    v21 = v20 == 11;
  else
    v21 = 0;
  if (v21)
  {
    if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_26;
LABEL_23:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      || (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 1) & 1) != 0)
    {
      goto LABEL_26;
    }
    return 0;
  }
  if (!v19 || v20 != 44)
  {
    if (v20 == 9)
      goto LABEL_26;
    goto LABEL_23;
  }
  v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
  if ((*(_BYTE *)(v22 + 74) & 1) == 0 && *(_QWORD *)(v22 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_23;
  }
LABEL_26:
  v24 = *a1;
  if (*((_BYTE *)a1 + 96))
  {
    v25 = v13;
LABEL_30:
    v13 = sub_22ECA02F4(v24, a1[9], a4) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_31;
  }
  v25 = sub_22ECA02F4(v24, a1[9], a4) & 0xFFFFFFFFFFFFFFFELL;
  if (*((_BYTE *)a1 + 96))
  {
    v24 = *a1;
    goto LABEL_30;
  }
LABEL_31:
  result = 0;
  if (v25 && v13)
  {
    v26 = sub_22ECD39D0((uint64_t *)*a1, a2, *((_DWORD *)a1 + 6), v13, v25, a1[11], v15, 0, 0, a4);
    if (v26 <= 1)
      return 0;
    else
      return v26 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

uint64_t sub_22ECD3260(uint64_t a1, char a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, int a7)
{
  int v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  BOOL v17;
  __int16 v18;
  char v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  __int16 v25;

  if ((a3 - 10) <= 3)
  {
    if (sub_22ECD33AC(a4) == *(unsigned __int8 **)(a1 + 56))
    {
      v17 = a3 == 10 || a3 == 12;
      v18 = v17;
      v19 = (a3 & 0xFFFFFFFE) == 10;
      v20 = v18 | 0x100;
      v21 = a7;
      v22 = a1;
      v23 = a5;
    }
    else
    {
      if (sub_22ECD33AC(a5) != *(unsigned __int8 **)(a1 + 56))
      {
        v13 = 0;
        v14 = 0;
        return v13 | (v14 << 8);
      }
      v25 = a3 == 11 || a3 == 13;
      v19 = (a3 & 0xFFFFFFFE) == 10;
      v20 = v25 | 0x100;
      v21 = a7;
      v22 = a1;
      v23 = a4;
    }
    v13 = sub_22ECD34B4(v22, v23, v20, v19, a6, v21);
LABEL_28:
    v14 = 1;
    return v13 | (v14 << 8);
  }
  v13 = 0;
  v14 = 0;
  if (a2 && a3 == 15)
  {
    v17 = sub_22ECD33AC(a4) == *(unsigned __int8 **)(a1 + 56);
    v13 = 1;
    if (v17)
      v15 = a5;
    else
      v15 = a4;
    if (v15 && (v15[2] & 2) == 0)
    {
      *(_QWORD *)(a1 + 80) = v15;
      *(_BYTE *)(a1 + 98) = 1;
      *(_QWORD *)(a1 + 40) = a6;
      *(_DWORD *)(a1 + 28) = a7;
      v16 = sub_22ECCFFF4(a1, v15, 0);
      v13 = 0;
      *(_QWORD *)(a1 + 120) = v16;
    }
    goto LABEL_28;
  }
  return v13 | (v14 << 8);
}

unsigned __int8 *sub_22ECD33AC(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!result)
    return result;
  result = sub_22ECB248C(result);
  if (!result)
    return result;
  v1 = result;
  v2 = *result;
  if ((v2 & 0xFE) == 0x76)
  {
    v3 = *((_QWORD *)result + 2);
    if (v3)
    {
      v11 = 0;
      if ((sub_22EFD8088(v3, &v11) & 1) != 0 || sub_22EFD8400(v3, 0))
      {
        if (*((_DWORD *)v1 + 8))
        {
          v4 = (unsigned __int8 **)(v1 + 40);
          v5 = *v1;
          v6 = v5 == 119;
          v7 = v5 == 119 ? v1 : 0;
          v8 = (unsigned __int8 **)(v7 + 48);
          if (v6)
            v4 = v8;
          if (*v4)
          {
            result = sub_22EFFA6B0(*v4);
            v1 = result;
            if (!result)
              return result;
          }
        }
      }
    }
    v2 = *v1;
  }
  if (v2 == 188)
  {
    if ((v1[2] & 4) != 0 && *sub_22EFFA6B0(*((unsigned __int8 **)v1 + 2)) == 133)
    {
      v10 = *((_QWORD *)v1 + 3);
      return (unsigned __int8 *)sub_22EC81010(v10);
    }
    return 0;
  }
  if (v2 != 161)
    return 0;
  result = 0;
  v9 = *((_QWORD *)v1 + 2);
  if (v9 && (*(_DWORD *)(v9 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v10 = *((_QWORD *)v1 + 2);
    return (unsigned __int8 *)sub_22EC81010(v10);
  }
  return result;
}

uint64_t sub_22ECD34B4(uint64_t a1, unsigned __int8 *a2, __int16 a3, char a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t result;

  if (!a2)
    return 1;
  if ((a2[2] & 2) != 0)
    return 1;
  *(_QWORD *)(a1 + 80) = a2;
  *(_WORD *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 98) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  v7 = sub_22ECCFFF4(a1, a2, 0);
  result = 0;
  *(_QWORD *)(a1 + 120) = v7;
  return result;
}

uint64_t sub_22ECD3514(_QWORD **a1, _DWORD *a2, int a3)
{
  unint64_t v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _BOOL4 v11;
  char v12;
  unsigned int v13;
  uint64_t *v14;
  _BOOL4 v15;
  char v16;
  int v17;
  uint64_t result;
  BOOL v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int16 v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  char v38;

  if (!a2)
    return 1;
  v3 = (unint64_t)a2;
  if ((*a2 & 0x20000) == 0)
  {
    if ((*a2 & 0x10000) != 0)
    {
LABEL_40:
      result = 0;
      a1[11] = (_QWORD *)v3;
      *((_BYTE *)a1 + 99) = a3;
      return result;
    }
    sub_22F0D5A50((uint64_t)a2);
    v7 = v6;
    v8 = (uint64_t)*a1;
    v9 = sub_22ECB248C((unsigned __int8 *)v3);
    if (v9)
    {
      v33 = 256;
      v34 = 0;
      v32 = off_24FAB8D98;
      v10 = sub_22ED03140(v8, v7, v9, &v32);
      if ((v10 & 1) == 0)
      {
        v3 = v10 & 0xFFFFFFFFFFFFFFFELL;
        sub_22F00905C(v10 & 0xFFFFFFFFFFFFFFFELL, (*a1)[11], 0, (uint64_t)&v35);
        v11 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0));
        v12 = v38;
        if (!v38 || v37)
        {
          v16 = 0;
          v17 = 1;
          if (!v38)
            goto LABEL_20;
          v13 = v36;
        }
        else
        {
          v13 = v36;
          v14 = (uint64_t *)(v35 + 8 * ((v36 - 1) >> 6));
          if (v36 < 0x41)
            v14 = &v35;
          v15 = (((unint64_t)*v14 >> (v36 - 1)) & 1) == 0;
          v16 = v15 ^ a3;
          v17 = v15 ^ a3;
        }
        if (v13 > 0x40)
          v19 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v35) == v13;
        else
          v19 = v35 == 0;
        v12 = v19;
LABEL_20:
        if (!*((_BYTE *)a1 + 97))
        {
          *((_BYTE *)a1 + 96) = v16 | (v11 | a3) ^ 1;
          *((_BYTE *)a1 + 97) = 1;
        }
        v20 = a1 + 12;
        if (a1[10])
        {
          if ((v12 & 1) == 0)
          {
            if (*v20)
            {
              if ((v17 & (v11 | a3 ^ 1) & 1) != 0)
              {
                v21 = 1;
LABEL_28:
                if (v21 == a3)
                {
                  v22 = (uint64_t)*a1;
                  sub_22EFF605C(v3);
                  v3 = sub_22EB2EA08(v22, v23, 7, v3) & 0xFFFFFFFFFFFFFFFELL;
                  LOBYTE(a3) = a3 ^ 1;
                }
                v24 = 1;
LABEL_35:
                if (v38 && v36 >= 0x41)
                {
                  if (v35)
                    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
                }
                if (v24)
                  goto LABEL_40;
                return 1;
              }
            }
            else if ((v16 & 1) == 0 && ((v11 | a3) & 1) != 0)
            {
              v21 = 0;
              goto LABEL_28;
            }
          }
          v25 = *a1;
          sub_22EFF605C(v3);
          sub_22E8FCA40(v25, v26, 0x10ABu, 0, (uint64_t)&v32);
          v27 = sub_22E890024((uint64_t)&v32, (uint64_t *)a1 + 7);
          v28 = sub_22E894E38(v27, (unsigned __int8 *)a1 + 96);
          sub_22F0D4E74(v3);
          v31 = v29;
          sub_22E8906A0(v28, &v31);
          sub_22E903BEC((unsigned int *)&v32);
          sub_22E8FCA40(*a1, *((_DWORD *)a1 + 7), 0x1707u, 0, (uint64_t)&v32);
          v30 = sub_22E894E38((uint64_t)&v32, (unsigned __int8 *)a1 + 96);
          sub_22E8906A0(v30, (uint64_t *)a1 + 5);
          sub_22E903BEC((unsigned int *)&v32);
          v24 = 0;
          goto LABEL_35;
        }
        v21 = *v20;
        goto LABEL_28;
      }
    }
  }
  return 1;
}

uint64_t sub_22ECD37EC(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD **v15;
  uint64_t v16;
  unsigned int v17[24];

  v3 = sub_22EFFA6B0(a2);
  v4 = v3;
  v5 = *v3;
  if ((v5 & 0xFE) == 0x70)
  {
    v6 = (*(_DWORD *)v3 >> 18) & 0x3F;
    if ((v6 - 5) > 1)
      goto LABEL_13;
    if (sub_22ECD33AC(*((unsigned __int8 **)v3 + 2)) != (unsigned __int8 *)a1[7])
    {
      if (v6 == 5 && sub_22ECD33AC(*((unsigned __int8 **)v4 + 3)) == (unsigned __int8 *)a1[7])
      {
        v7 = (_DWORD *)*((_QWORD *)v4 + 2);
LABEL_22:
        v15 = (_QWORD **)a1;
        v14 = 0;
        return sub_22ECD3514(v15, v7, v14);
      }
      goto LABEL_13;
    }
    v14 = v6 != 5;
    v7 = (_DWORD *)*((_QWORD *)v4 + 3);
LABEL_19:
    v15 = (_QWORD **)a1;
    return sub_22ECD3514(v15, v7, v14);
  }
  if (v5 != 141)
    goto LABEL_13;
  v8 = HIDWORD(*(_QWORD *)v3) & 0x3FLL;
  if ((v8 - 7) < 0xFFFFFFFE || *((_DWORD *)v3 + 4) != 2)
    goto LABEL_13;
  if (sub_22ECD33AC(*(unsigned __int8 **)&v3[8 * ((*(_QWORD *)v3 >> 18) & 1) + 8 + BYTE3(*(_QWORD *)v3)]) == (unsigned __int8 *)a1[7])
  {
    v14 = v8 != 5;
    v7 = *(_DWORD **)&v4[8 * (((unint64_t)*(unsigned int *)v4 >> 18) & 1)
                       + 16
                       + ((unint64_t)*(unsigned int *)v4 >> 24)];
    goto LABEL_19;
  }
  if ((_DWORD)v8 == 5
    && sub_22ECD33AC(*(unsigned __int8 **)&v4[8 * (((unint64_t)*(unsigned int *)v4 >> 18) & 1)
                                            + 16
                                            + ((unint64_t)*(unsigned int *)v4 >> 24)]) == (unsigned __int8 *)a1[7])
  {
    v7 = *(_DWORD **)&v4[8 * (((unint64_t)*(unsigned int *)v4 >> 18) & 1)
                       + 8
                       + ((unint64_t)*(unsigned int *)v4 >> 24)];
    goto LABEL_22;
  }
LABEL_13:
  if ((sub_22ECCFF94(a1) & 1) != 0 || (sub_22EFC7ADC(*(_QWORD *)(*a1 + 216)) & 1) != 0)
    return 0;
  v10 = (_QWORD *)*a1;
  sub_22F0D5A50((uint64_t)v4);
  sub_22E8FCA40(v10, v11, 0x10ADu, 0, (uint64_t)v17);
  sub_22F0D4E74((uint64_t)v4);
  v16 = v12;
  v13 = sub_22E8906A0((uint64_t)v17, &v16);
  sub_22E890024(v13, a1 + 7);
  sub_22E903BEC(v17);
  return 1;
}

unint64_t sub_22ECD39D0(uint64_t *a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  unsigned int v81;
  char v82;
  uint64_t v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  unsigned int v87;
  char v88;

  v18 = sub_22ECA02F4((uint64_t)a1, a6, a10);
  if (v18 < 2)
    return 0;
  v19 = v18;
  v71 = a7;
  v87 = 1;
  v86 = 0;
  v88 = 0;
  v84 = 1;
  v83 = 0;
  v85 = 0;
  sub_22F00905C(a4, a1[11], 0, (uint64_t)&v73);
  v20 = v76;
  if (v76)
  {
    if (v87 > 0x40 || v74 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&v86, (const llvm::APInt *)&v73);
      v88 = v75;
      if (v76 && v74 >= 0x41 && v73)
        MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
    }
    else
    {
      v86 = v73;
      v87 = v74;
      v88 = v75;
    }
  }
  sub_22F00905C(a6, a1[11], 0, (uint64_t)&v73);
  v22 = v76;
  if (v76)
  {
    if (v84 > 0x40 || v74 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v73);
      v85 = v75;
      if (v76 && v74 >= 0x41 && v73)
        MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
    }
    else
    {
      v83 = v73;
      v84 = v74;
      v85 = v75;
    }
  }
  v69 = a2;
  v70 = a3;
  v68 = a8;
  if (!v20 || (a9 & 1) != 0)
  {
    v23 = a9;
    if (!v22)
      v23 = 0;
    if ((v23 | a8) != 1 || v20 == 0)
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_73;
    }
    goto LABEL_32;
  }
  if ((a8 & 1) != 0)
  {
    if ((sub_22E984E5C((uint64_t)&v86) & 1) != 0)
      goto LABEL_42;
LABEL_32:
    if (a9)
    {
      sub_22E46361C((llvm::APInt *)&v86, (uint64_t)&v73);
      if (v87 >= 0x41 && v86)
        MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
      v86 = v73;
      v87 = v74;
      v88 = 0;
      sub_22E46361C((llvm::APInt *)&v83, (uint64_t)&v73);
      if (v84 >= 0x41 && v83)
        MEMORY[0x2348A0E84](v83, 0x1000C8000313F17);
      v83 = v73;
      v84 = v74;
      v85 = 0;
      llvm::APInt::operator-=();
      llvm::APInt::trunc((llvm::APInt *)&v86);
      v81 = v74;
      v80 = v73;
      v82 = v88;
      sub_22E46361C((llvm::APInt *)&v80, (uint64_t)&v73);
      if (v74 > 0x40)
      {
        v27 = llvm::APInt::equalSlowCase((llvm::APInt *)&v73, (const llvm::APInt *)&v86);
        if (v73)
          MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
      }
      else
      {
        v27 = v73 == v86;
      }
      if (v81 >= 0x41 && v80)
        MEMORY[0x2348A0E84](v80, 0x1000C8000313F17);
      llvm::APInt::trunc((llvm::APInt *)&v86);
      v28 = v88;
      v29 = v74;
      v30 = v73;
      if (v87 >= 0x41 && v86)
        MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
      v86 = v30;
      v87 = v29;
      v88 = v28;
      if (!v68)
        goto LABEL_72;
    }
    else
    {
      v27 = 1;
      if (!a8)
      {
LABEL_72:
        v25 = v27 != 0;
        v26 = v25;
        goto LABEL_73;
      }
    }
    sub_22E46361C((llvm::APInt *)&v86, (uint64_t)&v73);
    if (v87 >= 0x41 && v86)
      MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
    v86 = v73;
    v87 = v74;
    v88 = 0;
    llvm::APInt::operator++();
    if (v27)
    {
      llvm::APInt::trunc((llvm::APInt *)&v86);
      v81 = v74;
      v80 = v73;
      v82 = v88;
      sub_22E46361C((llvm::APInt *)&v80, (uint64_t)&v73);
      if (v74 > 0x40)
      {
        v27 = llvm::APInt::equalSlowCase((llvm::APInt *)&v73, (const llvm::APInt *)&v86);
        if (v73)
          MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
      }
      else
      {
        v27 = v73 == v86;
      }
      if (v81 >= 0x41 && v80)
        MEMORY[0x2348A0E84](v80, 0x1000C8000313F17);
    }
    llvm::APInt::trunc((llvm::APInt *)&v86);
    v32 = v88;
    v33 = v74;
    v34 = v73;
    if (v87 >= 0x41 && v86)
      MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
    v86 = v34;
    v87 = v33;
    v88 = v32;
    goto LABEL_72;
  }
  if (v88)
  {
LABEL_42:
    v25 = 0;
    v26 = 1;
    goto LABEL_73;
  }
  v25 = 0;
  v31 = &v86;
  if (v87 >= 0x41)
    v31 = (uint64_t *)(v86 + 8 * ((v87 - 1) >> 6));
  v26 = (((unint64_t)*v31 >> (v87 - 1)) & 1) == 0;
LABEL_73:
  v81 = 1;
  v80 = 0;
  v82 = 0;
  sub_22F00905C(a5, a1[11], 0, (uint64_t)&v73);
  v35 = v76;
  if (!v76)
  {
    v36 = v71;
    if (!v26)
      goto LABEL_108;
LABEL_101:
    if (v88)
      goto LABEL_130;
    v38 = &v86;
    if (v87 >= 0x41)
      v38 = (uint64_t *)(v86 + 8 * ((v87 - 1) >> 6));
    if (v35 || ((1 << (v87 - 1)) & *v38) == 0)
      goto LABEL_130;
    goto LABEL_108;
  }
  if (v81 > 0x40 || v74 > 0x40)
  {
    llvm::APInt::assignSlowCase((llvm::APInt *)&v80, (const llvm::APInt *)&v73);
    v82 = v75;
    if (v76 && v74 >= 0x41 && v73)
      MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
  }
  else
  {
    v80 = v73;
    v81 = v74;
    v82 = v75;
  }
  if ((((v22 != 0) | ~a9) & (v20 != 0 && v26)) != 1)
  {
    v36 = v71;
    if (!v26)
      goto LABEL_108;
    goto LABEL_101;
  }
  sub_22E46361C((llvm::APInt *)&v86, (uint64_t)&v73);
  v36 = v71;
  if (v87 >= 0x41 && v86)
    MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
  v86 = v73;
  v87 = v74;
  v88 = 0;
  sub_22E46361C((llvm::APInt *)&v80, (uint64_t)&v73);
  if (v81 >= 0x41 && v80)
    MEMORY[0x2348A0E84](v80, 0x1000C8000313F17);
  v80 = v73;
  v81 = v74;
  v82 = 0;
  llvm::APInt::operator-=();
  llvm::APInt::trunc((llvm::APInt *)&v80);
  v78 = v74;
  v77 = v73;
  v79 = v82;
  sub_22E46361C((llvm::APInt *)&v77, (uint64_t)&v73);
  if (v74 > 0x40)
  {
    v37 = llvm::APInt::equalSlowCase((llvm::APInt *)&v73, (const llvm::APInt *)&v80);
    if (v73)
      MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
  }
  else
  {
    v37 = v73 == v80;
  }
  if (v78 >= 0x41 && v77)
    MEMORY[0x2348A0E84](v77, 0x1000C8000313F17);
  if ((v37 & 1) != 0)
  {
    v25 = 1;
    goto LABEL_101;
  }
  v25 = 0;
LABEL_108:
  v39 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v39 + 17) & 4) != 0)
    goto LABEL_130;
  v40 = *(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_DWORD *)(v40 + 16);
  if (v40)
    v42 = v41 == 11;
  else
    v42 = 0;
  if (v42)
  {
    if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_130;
  }
  else if (v40 && v41 == 44)
  {
    v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
    if ((*(_BYTE *)(v43 + 74) & 1) == 0 && *(_QWORD *)(v43 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v40 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_130;
    }
  }
  else if (v41 != 9)
  {
    goto LABEL_130;
  }
  v44 = *(_QWORD *)(a5 + 8);
  v45 = (uint64_t *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_22EF5CDF0(a1[11], *v45);
  v47 = (uint64_t *)(v44 & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_22EF5CDF0(a1[11], *v47);
  if (v46 <= v48)
  {
    if (!sub_22F110B20(*v47))
      goto LABEL_130;
  }
  else if (!sub_22F110B20(*v45))
  {
    goto LABEL_130;
  }
  if (v46 <= v48)
    v49 = v48;
  else
    v49 = v46;
  v50 = sub_22EF60A6C(a1[11], v49, 0);
  v51 = v70;
  v52 = sub_22EB27A20(a1, v70, v70, a5);
  a5 = sub_22ECFABE8(a1, (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL), v50, 3, 0) & 0xFFFFFFFFFFFFFFFELL;
  a4 = sub_22EB27A20(a1, v51, v51, a4) & 0xFFFFFFFFFFFFFFFELL;
  v19 = sub_22EB27A20(a1, v51, v51, v19 & 0xFFFFFFFFFFFFFFFELL);
LABEL_130:
  v21 = 0;
  if (!a4 || !a5 || (v19 & 1) != 0)
    goto LABEL_154;
  if (v25)
  {
    v53 = v69;
    if (a9)
    {
      a4 = sub_22EB4785C((uint64_t)a1, v69, v70, 6, a4 & 0xFFFFFFFFFFFFFFFELL, v19 & 0xFFFFFFFFFFFFFFFELL);
      if (a4 < 2)
        goto LABEL_153;
    }
    if (v68)
    {
      v54 = sub_22EB25D60((uint64_t)a1, 0, 1);
      a4 = sub_22EB4785C((uint64_t)a1, v69, v70, 5, a4 & 0xFFFFFFFFFFFFFFFELL, v54 & 0xFFFFFFFFFFFFFFFELL);
    }
    if (a4 < 2)
      goto LABEL_153;
    v55 = v70;
    v56 = sub_22EB27A20(a1, v55, v55, a4 & 0xFFFFFFFFFFFFFFFELL);
    if (v56 < 2)
      goto LABEL_153;
    v57 = sub_22EB4785C((uint64_t)a1, v69, v70, 6, a5, v56 & 0xFFFFFFFFFFFFFFFELL);
    if (v57 <= 1)
      goto LABEL_153;
  }
  else
  {
    v53 = v69;
    v55 = v70;
    v57 = sub_22EB4785C((uint64_t)a1, v69, v70, 6, a5, a4);
    if (v57 <= 1)
    {
      v62 = sub_22F10C2A4(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0));
      if (v62 && (*(_DWORD *)(v62 + 28) & 0x7Fu) - 35 <= 2)
      {
        sub_22F0D5A50(a5);
        sub_22E8FCA40(a1, v63, 0x10AAu, 0, (uint64_t)&v73);
        sub_22F0D4E74(a5);
        v77 = v64;
        v65 = sub_22E8906A0((uint64_t)&v73, &v77);
        sub_22F0D4E74(a4);
        v72 = v66;
        sub_22E8906A0(v65, &v72);
        sub_22E903BEC((unsigned int *)&v73);
      }
      goto LABEL_153;
    }
    if (v68)
    {
      v58 = v57 & 0xFFFFFFFFFFFFFFFELL;
      v59 = sub_22EB25D60((uint64_t)a1, 0, 1);
      v57 = sub_22EB4785C((uint64_t)a1, v69, v70, 6, v58, v59 & 0xFFFFFFFFFFFFFFFELL);
      v21 = 0;
      if (v57 < 2)
        goto LABEL_154;
    }
    if (a9)
    {
      v57 = sub_22EB4785C((uint64_t)a1, v69, v70, 5, v57 & 0xFFFFFFFFFFFFFFFELL, v19 & 0xFFFFFFFFFFFFFFFELL);
      if (v57 < 2)
        goto LABEL_153;
    }
  }
  v60 = sub_22EB27A20(a1, v55, v55, v57 & 0xFFFFFFFFFFFFFFFELL);
  if (v60 >= 2)
  {
    v61 = sub_22EB4785C((uint64_t)a1, v53, v55, 3, v60 & 0xFFFFFFFFFFFFFFFELL, v19 & 0xFFFFFFFFFFFFFFFELL);
    if (v61 >= 2)
    {
      v21 = v61 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_154;
    }
  }
LABEL_153:
  v21 = 0;
LABEL_154:
  if (v81 >= 0x41 && v80)
    MEMORY[0x2348A0E84](v80, 0x1000C8000313F17);
  if (v84 >= 0x41 && v83)
    MEMORY[0x2348A0E84](v83, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x2348A0E84](v86, 0x1000C8000313F17);
  return v21;
}

uint64_t *sub_22ECD462C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(v2 + 8);
    v16 = v5;
    if (v5)
      v6 = &v16;
    else
      v6 = 0;
    if ((v5 & 1) != 0)
      v7 = (uint64_t *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v7 = v6;
    if ((v5 & 1) != 0)
    {
      v8 = (uint64_t *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
    }
    else if (v5)
    {
      v8 = &v17;
    }
    else
    {
      v8 = 0;
    }
    for (; v7 != v8; *result = v14)
    {
      v9 = *v7++;
      v10 = *v4;
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(v9 + 28) |= 0x800u;
      sub_22EFC9100(v9, *(_QWORD *)(v10 + 88));
      v13 = *(_QWORD *)(v10 + 88);
      v17 = *(_QWORD *)(v9 + 40);
      v18 = v12;
      sub_22EFC6D6C((uint64_t)&v19, v17);
      v14 = sub_22E3CD3D4(v13 + 2032, 32, 3);
      sub_22EFF6AE4(v14, v13, 0, 0, 0, v9, 0, (uint64_t)&v17, 0, 0, v11, 1, 0, 0);
      v15 = v4[1];
      v17 = v14;
      result = (uint64_t *)sub_22F340BE8(v15, (unint64_t *)&v17);
    }
  }
  return result;
}

uint64_t sub_22ECD4774(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  *(_BYTE *)(a1 + 64) = 1;
  v6 = a2 + 8;
  v7 = *(unsigned __int8 **)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)];
  v8 = *v7;
  if (v8 == 8)
  {
    if (*(_DWORD *)v7 <= 0xFFu)
    {
LABEL_3:
      v9 = *((_DWORD *)v7 + 1);
      *(_DWORD *)(a3 + 16) = v9;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 4) = v9;
LABEL_33:
      v14 = (uint64_t)v7;
      goto LABEL_34;
    }
    if (*(_DWORD *)v7 >= 0x200u)
    {
      v10 = 1;
LABEL_25:
      v19 = *((_DWORD *)v7 + 1);
      *(_DWORD *)(a3 + 16) = v19;
      *(_DWORD *)a3 = v10;
      *(_DWORD *)(a3 + 4) = v19;
      goto LABEL_33;
    }
    v7 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    LOBYTE(v8) = *v7;
  }
  if ((v8 & 0xFE) != 0x70)
    goto LABEL_31;
  if ((*(_DWORD *)v7 & 0xFC0000) != 0x540000)
  {
LABEL_32:
    v22 = *((_DWORD *)v7 + 1);
    *(_DWORD *)a3 = 2;
    *(_DWORD *)(a3 + 4) = v22;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)v7 + 1);
    goto LABEL_33;
  }
  v11 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)v7 + 3);
  v7 = *(unsigned __int8 **)&v6[4 * ((*a2 >> 13) & 1) + 4 * ((*a2 >> 12) & 1)];
  if ((*v7 & 0xFE) != 0x70)
  {
    *(_DWORD *)a3 = 5;
    sub_22EFF605C(*(_QWORD *)&v6[4 * ((*a2 >> 13) & 1) + 4 * ((*a2 >> 12) & 1)]);
    *(_DWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 4) = v13;
    v14 = *(_QWORD *)&v6[4 * ((*a2 >> 13) & 1) + 4 * ((*a2 >> 12) & 1)];
    goto LABEL_34;
  }
  if ((*(_DWORD *)v7 & 0xFC0000) != 0x380000)
  {
    v10 = 12;
    goto LABEL_25;
  }
  v12 = v7 + 16;
  if (sub_22ECD4A80(*(_QWORD *)a1, v11, *((unsigned __int8 **)v7 + 2)))
  {
    v12 = v7 + 24;
  }
  else if ((sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 8), *((unsigned __int8 **)v7 + 3)) & 1) == 0)
  {
    v10 = 7;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 16) = *v12;
  *(_QWORD *)(a1 + 32) = v7;
  v15 = *a2;
  if ((v15 & 0x800) == 0 || (v7 = *(unsigned __int8 **)&v6[4 * ((v15 >> 13) & 1) + 8 + 4 * ((v15 >> 12) & 1)]) == 0)
  {
    v17 = 17;
    v18 = *((_DWORD *)a2 + 1);
    goto LABEL_23;
  }
  v16 = *v7;
  if (v16 == 8)
  {
    if (*(_DWORD *)v7 <= 0xFFu)
      goto LABEL_3;
    if (*(_DWORD *)v7 >= 0x200u)
    {
      v17 = 1;
      v18 = *((_DWORD *)v7 + 1);
LABEL_23:
      *(_DWORD *)(a3 + 16) = v18;
      *(_DWORD *)a3 = v17;
      *(_DWORD *)(a3 + 4) = v18;
      v14 = (uint64_t)a2;
      goto LABEL_34;
    }
    v7 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    LOBYTE(v16) = *v7;
  }
  if ((v16 & 0xFE) != 0x70)
  {
LABEL_31:
    *(_DWORD *)a3 = 2;
    sub_22F0D5A50((uint64_t)v7);
    *(_DWORD *)(a3 + 16) = v21;
    *(_DWORD *)(a3 + 4) = v21;
    goto LABEL_33;
  }
  if ((*(_DWORD *)v7 & 0xFC0000) != 0x540000)
    goto LABEL_32;
  if ((sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 8), *((unsigned __int8 **)v7 + 3)) & 1) != 0)
  {
    *(_QWORD *)(a1 + 48) = *((_QWORD *)v7 + 2);
    return sub_22ECD4A24((uint64_t *)a1, a3);
  }
  *(_DWORD *)a3 = 13;
  v24 = *((_QWORD *)v7 + 3);
  sub_22EFF605C(v24);
  *(_DWORD *)(a3 + 16) = v25;
  *(_DWORD *)(a3 + 4) = v25;
  v14 = v24;
LABEL_34:
  sub_22F0D4E74(v14);
  *(_QWORD *)(a3 + 20) = v23;
  *(_QWORD *)(a3 + 8) = v23;
  return 0;
}

uint64_t sub_22ECD4A24(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_22ECD4E88(a1, a2);
  if ((_DWORD)result)
  {
    v5 = a1[6];
    if (!v5 || (result = sub_22ECD4EF8(v5, a2, 1), (_DWORD)result))
    {
      v6 = a1[7];
      if (!v6)
        return 1;
      result = sub_22ECD4EF8(v6, a2, 1);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22ECD4A80(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  v5 = sub_22EFFA6B0(a2);
  v14 = 1;
  v12 = &off_24FAC6E70;
  v13 = (uint64_t)v16;
  v15 = a1;
  sub_22F0E9FEC(&v12, v5);
  v12 = &v14;
  v13 = 0x2000000000;
  v6 = sub_22EFFA6B0(a3);
  v10 = 1;
  v9[0] = &off_24FAC6E70;
  v9[1] = &v12;
  v11 = a1;
  sub_22F0E9FEC(v9, v6);
  v7 = llvm::FoldingSetNodeID::operator==();
  if (v12 != &v14)
    free(v12);
  if (v16[0] != v17)
    free(v16[0]);
  return v7;
}

uint64_t sub_22ECD4B9C(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;

  v6 = a2 + 8;
  v7 = *(unsigned __int8 **)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)];
  v8 = *v7;
  if (v8 != 8)
  {
LABEL_7:
    if ((v8 & 0xFE) != 0x70)
    {
      *(_DWORD *)a3 = 2;
      sub_22F0D5A50((uint64_t)v7);
      *(_DWORD *)(a3 + 16) = v15;
      *(_DWORD *)(a3 + 4) = v15;
      goto LABEL_16;
    }
    if ((*(_DWORD *)v7 & 0xFC0000) != 0x540000)
    {
      v16 = *((_DWORD *)v7 + 1);
      *(_DWORD *)a3 = 2;
      *(_DWORD *)(a3 + 4) = v16;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v7 + 1);
      goto LABEL_16;
    }
    v12 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    *(_QWORD *)(a1 + 8) = v12;
    v13 = *(_QWORD *)&v6[4 * ((*a2 >> 13) & 1) + 4 * ((*a2 >> 12) & 1)];
    if ((*(_BYTE *)v13 & 0xFE) != 0x70)
    {
      *(_DWORD *)a3 = 5;
      sub_22EFF605C(*(_QWORD *)&v6[4 * ((*a2 >> 13) & 1) + 4 * ((*a2 >> 12) & 1)]);
      *(_DWORD *)(a3 + 16) = v20;
      *(_DWORD *)(a3 + 4) = v20;
      v21 = ((*a2 >> 13) & 1) + ((*a2 >> 12) & 1);
LABEL_20:
      v11 = *(_QWORD *)&v6[4 * v21];
      goto LABEL_17;
    }
    v14 = (*(_DWORD *)v13 >> 18) & 0x3F;
    if ((v14 - 10) < 2)
    {
      *(_QWORD *)(a1 + 16) = sub_22EFFEB40(*((unsigned __int8 **)v7 + 3));
      if (sub_22ECD4A80(*(_QWORD *)a1, v12, *(unsigned __int8 **)(v13 + 16))
        && sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 16), *(unsigned __int8 **)(v13 + 24)))
      {
        *(_QWORD *)(a1 + 32) = v13;
        goto LABEL_31;
      }
      if (sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 16), *(unsigned __int8 **)(v13 + 16))
        && sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 8), *(unsigned __int8 **)(v13 + 24)))
      {
        *(_QWORD *)(a1 + 32) = v13;
        *(_BYTE *)(a1 + 40) = 0;
        goto LABEL_31;
      }
      goto LABEL_35;
    }
    if (v14 != 14)
    {
      v23 = 6;
LABEL_36:
      v27 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(a3 + 16) = v27;
      *(_DWORD *)a3 = v23;
      *(_DWORD *)(a3 + 4) = v27;
      v11 = v13;
      goto LABEL_17;
    }
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 24) = sub_22EFFEB40(*((unsigned __int8 **)v7 + 3));
    if (sub_22ECD4A80(*(_QWORD *)a1, v12, *(unsigned __int8 **)(v13 + 16)))
    {
      v22 = *(unsigned __int8 **)(v13 + 24);
    }
    else
    {
      if (!sub_22ECD4A80(*(_QWORD *)a1, *(unsigned __int8 **)(a1 + 8), *(unsigned __int8 **)(v13 + 24)))
      {
LABEL_35:
        v23 = 7;
        goto LABEL_36;
      }
      v22 = *(unsigned __int8 **)(v13 + 16);
    }
    *(_QWORD *)(a1 + 16) = sub_22EFFEB40(v22);
LABEL_31:
    v24 = *a2;
    if ((v24 & 0x800) == 0 || !*(_QWORD *)&v6[4 * ((v24 >> 13) & 1) + 8 + 4 * ((v24 >> 12) & 1)])
      return 1;
    *(_DWORD *)a3 = 11;
    v25 = *a2;
    if ((v25 & 0x800) != 0)
      v26 = *(_QWORD *)&v6[4 * ((v25 >> 13) & 1) + 8 + 4 * ((v25 >> 12) & 1)];
    else
      v26 = 0;
    sub_22F0D5A50(v26);
    *(_DWORD *)(a3 + 16) = v28;
    *(_DWORD *)(a3 + 4) = v28;
    v29 = *a2;
    if ((v29 & 0x800) == 0)
    {
      v11 = 0;
      goto LABEL_17;
    }
    v21 = ((v29 >> 13) & 1) + ((v29 >> 12) & 1) + 2;
    goto LABEL_20;
  }
  if (*(_DWORD *)v7 <= 0xFFu)
  {
    v9 = *((_DWORD *)v7 + 1);
    *(_DWORD *)(a3 + 16) = v9;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v9;
LABEL_16:
    v11 = (uint64_t)v7;
    goto LABEL_17;
  }
  if (*(_DWORD *)v7 < 0x200u)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    LOBYTE(v8) = *v7;
    goto LABEL_7;
  }
  v10 = *((_DWORD *)v7 + 1);
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v10;
  v11 = (uint64_t)a2;
LABEL_17:
  sub_22F0D4E74(v11);
  v17 = 0;
  *(_QWORD *)(a3 + 20) = v18;
  *(_QWORD *)(a3 + 8) = v18;
  return v17;
}

uint64_t sub_22ECD4E88(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;

  result = sub_22ECD4EF8(a1[1], a2, 1);
  if ((_DWORD)result)
  {
    v5 = sub_22ECD4EF8(a1[2], a2, 0);
    result = 0;
    if (v5)
    {
      v6 = a1[3];
      if (!v6)
        return 1;
      v7 = sub_22ECD4EF8(v6, a2, 0);
      result = 0;
      if (v7)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22ECD4EF8(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;

  if (a3 && (*(_DWORD *)a1 & 0x300) != 0x100)
  {
    v5 = 8;
LABEL_4:
    *(_DWORD *)a2 = v5;
    sub_22EFF605C(a1);
    *(_DWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 4) = v6;
    sub_22F0D4E74(a1);
    v8 = v7;
    result = 0;
    *(_QWORD *)(a2 + 20) = v8;
    *(_QWORD *)(a2 + 8) = v8;
    return result;
  }
  if ((*(_DWORD *)a1 & 0x4000) != 0)
    return 1;
  v10 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (v13)
  {
    if (((v12 >> 19) & 0x1FF) - 166 >= 0x35)
      goto LABEL_16;
  }
  else
  {
    if (v11 && v12 == 44)
    {
      v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
      if ((*(_BYTE *)(v14 + 74) & 1) != 0 || *(_QWORD *)(v14 + 128) >= 8uLL)
        goto LABEL_21;
LABEL_16:
      v5 = 9;
      goto LABEL_4;
    }
    v15 = v12 > 0x27u;
    v16 = (1 << v12) & 0x8180001600;
    if (v15 || v16 == 0)
      goto LABEL_16;
  }
LABEL_21:
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_DWORD *)(v18 + 16);
  if (v18)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (v20)
  {
    if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      return 1;
LABEL_34:
    v5 = 10;
    goto LABEL_4;
  }
  if (!v18 || v19 != 44)
  {
    if (v19 == 9)
      return 1;
    goto LABEL_34;
  }
  v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
  if ((*(_BYTE *)(v21 + 74) & 1) == 0 && *(_QWORD *)(v21 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v18 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_34;
  }
  return 1;
}

uint64_t sub_22ECD5090(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v5 = (unsigned __int8 *)(sub_22EB1A358(a1, a2, 0) & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a3;
  if (*a3)
    goto LABEL_6;
  v7 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), ".capture_expr.", 0xEuLL);
  v8 = sub_22ECD061C(a1, v7, v5, 1, 1);
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 16);
    if ((v11 & 0xFE) == 0x28)
      goto LABEL_17;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v10 = sub_22F10CF48(v10);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 16);
LABEL_17:
      if ((v11 & 0x100000) != 0)
      {
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v10)
          {
            v18 = *(_DWORD *)(v10 + 16);
            if ((v18 & 0xFE) == 0x28)
              continue;
          }
          v10 = sub_22F10CF48(v10);
          v18 = *(_DWORD *)(v10 + 16);
        }
        while ((v18 & 0x100000) != 0);
      }
      v9 = *(_QWORD *)(v10 + 32);
    }
  }
  sub_22EFF605C((uint64_t)v5);
  v13 = v12;
  *(_DWORD *)(v8 + 28) |= 0x800u;
  sub_22EFC9100(v8, *(_QWORD *)(a1 + 88));
  v14 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(v8 + 40);
  v20 = v13;
  sub_22EFC6D6C((uint64_t)&v21, v19);
  v6 = sub_22E3CD3D4(v14 + 2032, 32, 3);
  *a3 = sub_22EFF6AE4(v6, v14, 0, 0, 0, v8, 0, (uint64_t)&v19, 0, 0, v9, 1, 0, 0);
LABEL_6:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    return sub_22EB1A358(a1, v6 & 0xFFFFFFFFFFFFFFFELL, 0);
  if ((*(_DWORD *)v5 & 0x1C00) != 0 || (*(_DWORD *)v5 & 0x300) == 0)
    return sub_22EB1A358(a1, v6 & 0xFFFFFFFFFFFFFFFELL, 0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 39)
    return sub_22EB1A358(a1, v6 & 0xFFFFFFFFFFFFFFFELL, 0);
  sub_22EFF605C((uint64_t)v5);
  v6 = sub_22EB2EA08(a1, v16, 5, v6);
  if (v6 >= 2)
    return sub_22EB1A358(a1, v6 & 0xFFFFFFFFFFFFFFFELL, 0);
  else
    return 1;
}

unsigned int *sub_22ECD52BC@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0x108Bu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22ECD5348@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  sub_22E8FCA40(a1, a2, 0x1082u, 0, (uint64_t)v10);
  v6 = sub_22E8901B8((uint64_t)v10, &v12);
  v7 = sub_22E8901B8(v6, &v11);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22ECD53DC@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x16FAu, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22ECD5498@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0x103Eu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22ECD5524@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x16FAu, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

void sub_22ECD55E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22ECD55F8@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0x10BCu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

void sub_22ECD5688()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22ECD569C(_QWORD *a1, unsigned int a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9)
{
  uint64_t *v9;
  BOOL v10;
  uint64_t v12;
  _QWORD *v15;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  void *v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t i;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  void *__src;
  __int128 v107;
  llvm *v108[2];
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  int v118;
  __int16 v119;
  char v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  _QWORD v125[5];
  void *v126;
  uint64_t v127;
  _DWORD v128[26];
  uint64_t v129;
  __int16 v130;
  char v131;
  int v132;
  void *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char v139;
  char v140;
  char *v141;
  uint64_t v142;
  _QWORD v143[42];

  v143[40] = *MEMORY[0x24BDAC8D0];
  v102 = a7;
  v103 = a3;
  v9 = (uint64_t *)(a5 + 8);
  if (*(_DWORD *)a5)
    v10 = *(_DWORD *)(a5 + 4) == 0;
  else
    v10 = 1;
  if (!v10 && *(_QWORD *)(a5 + 8) == 0)
    return 1;
  v15 = a4;
  v141 = (char *)v143;
  v142 = 0x400000000;
  if (a4)
  {
    v105 = 0;
    __src = (char *)&v107 + 8;
    *(_QWORD *)&v107 = 0x800000000;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = a1;
    v115 = *(_OWORD *)a6;
    v116 = *(_QWORD *)(a6 + 16);
    v117 = xmmword_22F495C80;
    v118 = 16842752;
    v119 = 0;
    v120 = 0;
    sub_22EC56024((uint64_t)&v105);
    HIBYTE(v118) = 0;
    do
    {
      if (!sub_22EC64BE8((uint64_t)a1, (uint64_t)&v105, (uint64_t)v15, a5, 0, 0))
        break;
      v30 = (void *)(*(_QWORD *)__src & 0xFFFFFFFFFFFFFFFCLL);
      while (1)
      {
        v15 = (_QWORD *)*v15;
        if (!v15)
          break;
        v31 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v15 + 9), v30);
        v32 = v15[10];
        if (v32 == v15[9])
          v33 = 92;
        else
          v33 = 88;
        if (v31 != (void **)(v32 + 8 * *(unsigned int *)((char *)v15 + v33)))
        {
          v15 = (_QWORD *)*v15;
          break;
        }
      }
      sub_22F3406DC((uint64_t)&v141);
      sub_22E3D0148((uint64_t)&v141[80 * v142 - 80], __src, (_BYTE *)__src + 8 * v107);
      LODWORD(v105) = 0;
      LODWORD(v107) = 0;
      if (v111)
      {
        v34 = sub_22EC6CBD0(v111);
        MEMORY[0x2348A0E9C](v34, 0x10E0C409F09D3C3);
      }
      HIBYTE(v119) = 0;
      v111 = 0;
      v112 = 0;
    }
    while (v15);
    if (HIBYTE(v118))
    {
      if ((_DWORD)v105 == 5)
      {
        sub_22EC64D18(v114, (uint64_t)&v105);
      }
      else if (v112 && (*(_DWORD *)(v114[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v114, (uint64_t)&v105);
      }
    }
    if (v111)
    {
      v97 = sub_22EC6CBD0(v111);
      MEMORY[0x2348A0E9C](v97, 0x10E0C409F09D3C3);
    }
    if (__src != (char *)&v107 + 8)
      free(__src);
  }
  else if (a9)
  {
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    *(_OWORD *)v108 = 0u;
    v105 = &v107;
    __src = (void *)0x800000000;
    sub_22F24C510((uint64_t)&v141, (unint64_t)&v105);
    if (v105 != &v107)
      free(v105);
    v17 = *a9;
    v18 = v17 == 211;
    if (v17 == 211)
      v19 = a9;
    else
      v19 = 0;
    v20 = (uint64_t *)(v19 + 64);
    if (v18)
      v21 = v20;
    else
      v21 = (uint64_t *)(a9 + 80);
    v22 = *((unsigned int *)a9 + 1);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 8 * v22;
      do
      {
        v25 = v23;
        v26 = *v21;
        v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
        if (v25 == v23)
        {
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          *(_OWORD *)v108 = 0u;
          v105 = &v107;
          __src = (void *)0x800000000;
          sub_22F24C510((uint64_t)&v141, (unint64_t)&v105);
          if (v105 != &v107)
            free(v105);
        }
        else if (v23 && (*(_DWORD *)(v23 + 28) & 0x7F) == 0x47)
        {
          v27 = &v141[80 * v142];
          v28 = *((unsigned int *)v27 - 18);
          if (v28 >= *((unsigned int *)v27 - 17))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = *((unsigned int *)v27 - 18);
          }
          *(_QWORD *)(*((_QWORD *)v27 - 10) + 8 * v28) = v26 | 3;
          ++*((_DWORD *)v27 - 18);
        }
        ++v21;
        v24 -= 8;
      }
      while (v24);
    }
  }
  if (sub_22EFC7ADC(a1[27]))
  {
    v35 = v141;
    v36 = v142;
    goto LABEL_83;
  }
  v37 = v102;
  v35 = v141;
  v36 = v142;
  if ((*(_BYTE *)(*(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF0) + 17) & 7) != 0)
  {
LABEL_83:
    v105 = &v107;
    __src = (void *)0x800000000;
    v49 = 0;
    if (v36)
    {
      v53 = 80 * v36;
      v54 = v35 + 8;
      do
      {
        v55 = *v54;
        if ((_DWORD)v55)
        {
          sub_22E3D0148((uint64_t)&v105, *((_BYTE **)v54 - 1), (_BYTE *)(*((_QWORD *)v54 - 1) + 8 * v55));
          v56 = *(_QWORD *)(*((_QWORD *)v54 - 1) + 8 * (*v54 - 1));
          v57 = __src;
          if (__src >= (unint64_t)HIDWORD(__src))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v57 = __src;
          }
          *((_QWORD *)v105 + v57) = v56 | 3;
          v49 = (_DWORD)__src + 1;
          LODWORD(__src) = (_DWORD)__src + 1;
        }
        v54 += 20;
        v53 -= 80;
      }
      while (v53);
    }
    v50 = a1[11];
    if (*v9)
    {
      v51 = sub_22F0ABC50(v9, v50);
      v52 = v58;
      v49 = __src;
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v12 = (uint64_t)sub_22F0605AC(v50, 0, v51, v52, a6, 1, 1, v105, (uint64_t)v105 + 8 * v49);
    v59 = v105;
    if (v105 != &v107)
      goto LABEL_95;
    goto LABEL_96;
  }
  if ((_DWORD)v142)
  {
    v44 = v141;
    while (1)
    {
      v45 = *((unsigned int *)v44 + 2);
      if ((_DWORD)v45)
        break;
LABEL_81:
      v44 += 80;
      if (v44 == &v141[80 * v142])
        goto LABEL_58;
    }
    v46 = *(_QWORD **)v44;
    v47 = 8 * v45;
    while (1)
    {
      v48 = *v46 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_BYTE *)(v48 + 28) & 0x80) == 0
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 7) != 0)
      {
        goto LABEL_83;
      }
      ++v46;
      v47 -= 8;
      if (!v47)
        goto LABEL_81;
    }
  }
LABEL_58:
  sub_22EA406B0((uint64_t)&v132, (uint64_t)a1, (__int128 *)a6, 13, 0);
  v139 = 0;
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v38)
  {
    if (*(_BYTE *)(v38 + 16) == 45)
    {
      if (!sub_22EE8B180(a1, a2)
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v38 + 24)) + 74) & 2) != 0
        || (v39 = sub_22F114198(*(_QWORD *)(v38 + 24)), sub_22EFC3500(v39)))
      {
        v132 = 0;
        v134 = 0;
        if (v136)
        {
          v40 = sub_22EC6CBD0(v136);
          MEMORY[0x2348A0E9C](v40, 0x10E0C409F09D3C3);
        }
        v140 = 0;
        v136 = 0;
        v137 = 0;
        v41 = sub_22F114198(*(_QWORD *)(v38 + 24));
        if (v41)
          v42 = v41 + 64;
        else
          v42 = 0;
        sub_22EC611AC(a1, &v132, v42, 0);
        if (!v134)
        {
          sub_22F3406DC((uint64_t)&v141);
          sub_22E3D0148((uint64_t)&v141[80 * v142 - 80], v133, (_BYTE *)v133 + 8 * v134);
        }
      }
    }
  }
  v43 = a2;
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    sub_22ECCFB28((uint64_t)a1, (uint64_t *)a6, a2, v102, (uint64_t)&v141);
  if (!(_DWORD)v142)
  {
LABEL_73:
    if (*v9)
    {
      sub_22E8FCA40(a1, v43, 0x10BDu, 0, (uint64_t)&v105);
      v88 = sub_22E8901B8((uint64_t)&v105, &v102);
      sub_22E8906A0(v88, &v103);
      sub_22E903BEC((unsigned int *)&v105);
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_128;
  }
  v60 = v141;
  v61 = &v141[80 * v142];
  v62 = v141;
  do
  {
    v63 = *((unsigned int *)v62 + 2);
    if ((_DWORD)v63)
    {
      v64 = *(_QWORD **)v62;
      v65 = 8 * v63;
      while (1)
      {
        v66 = *v64 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(v66 + 28) & 0x80) == 0)
        {
          v67 = *(_QWORD *)(v66 + 48);
          v68 = (uint64_t *)(v67 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 8) | v67 & 7) == (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF0)
                                                                                       + 8) | v102 & 7))
            break;
        }
        ++v64;
        v65 -= 8;
        if (!v65)
          goto LABEL_103;
      }
      v86 = *v68;
      if (!*v68 || (v87 = *(_DWORD *)(v86 + 16), (v87 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v86 = sub_22F10CF48(v86)) == 0)
        {
LABEL_126:
          v12 = sub_22F32D524((uint64_t)a1, v66, v67, 1, v43, 0);
          goto LABEL_128;
        }
        v87 = *(_DWORD *)(v86 + 16);
      }
      if ((v87 & 0x100000) != 0)
      {
        do
        {
          v86 = *(_QWORD *)(*(_QWORD *)(v86 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v86)
          {
            v96 = *(_DWORD *)(v86 + 16);
            if ((v96 & 0xFE) == 0x28)
              continue;
          }
          v86 = sub_22F10CF48(v86);
          v96 = *(_DWORD *)(v86 + 16);
        }
        while ((v96 & 0x100000) != 0);
      }
      v67 = *(_QWORD *)(v86 + 32);
      v43 = a2;
      goto LABEL_126;
    }
LABEL_103:
    v62 += 80;
  }
  while (v62 != v61);
  if ((*(_BYTE *)(a1[9] + 1) & 1) == 0)
    goto LABEL_73;
  while (1)
  {
    v69 = *((unsigned int *)v60 + 2);
    if ((_DWORD)v69)
      break;
LABEL_121:
    v60 += 80;
    if (v60 == v61)
      goto LABEL_73;
  }
  v70 = *(_QWORD **)v60;
  v71 = 8 * v69;
  while (1)
  {
    v72 = *v70 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_BYTE *)(v72 + 28) & 0x80) == 0 && sub_22EAAB1B8(a1, a2, v102, *(_QWORD *)(v72 + 48)))
    {
      v73 = v72;
      v74 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v74 & 8) != 0)
      {
        v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v76 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v76 = 0;
        v75 = 0;
      }
      v77 = *(_QWORD *)(v72 + 48);
      v78 = v75 | (v74 | v102) & 7;
      v105 = (void *)(v78 | v76);
      v79 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v79 & 8) != 0)
      {
        v80 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v81 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v81 = 0;
        v80 = 0;
      }
      v82 = HIDWORD(v76);
      v83 = v80 | (v79 | v77) & 7;
      if ((_DWORD)v78 == (_DWORD)v83 && (_DWORD)v82 == HIDWORD(v81))
        break;
      v85 = sub_22E95F24C((unsigned int *)&v105, v83 | v81);
      v73 = v72;
      if (!v85)
        break;
    }
    ++v70;
    v71 -= 8;
    if (!v71)
      goto LABEL_121;
  }
  v105 = 0;
  __src = &__src;
  *(_QWORD *)&v107 = &__src;
  *((_QWORD *)&v107 + 1) = 0;
  v108[0] = (llvm *)1;
  for (i = 40; i != 168; i += 16)
    *(void **)((char *)&v105 + i) = 0;
  v121 = v125;
  v122 = v125;
  v123 = 4;
  v124 = 0;
  v125[4] = 0;
  v126 = v128;
  v127 = 0x400000000;
  v128[24] = 0;
  v129 = 0;
  v130 = 257;
  v131 = 0;
  v90 = v73;
  if (!sub_22EAAB2A0((uint64_t)a1, a2, v37, *(_QWORD *)(v73 + 48), (unint64_t *)&v105))
    goto LABEL_144;
  v91 = *(_QWORD *)(*(_QWORD *)(v90 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v91 + 8) & 0xF) != 0)
    v91 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v90 + 48));
  v104 = *(_QWORD *)(*(_QWORD *)((v91 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  v92 = sub_22EFB50E0(v108, &v104);
  v43 = a2;
  if (((_DWORD)v92[1] & 1u) + (*((_DWORD *)v92 + 2) >> 1) > 1
    || sub_22E90B400((uint64_t)a1, a2, *(_QWORD *)(v72 + 48), v37, v107 + 16, 0, 0, 0) == 1)
  {
LABEL_144:
    if (v126 != v128)
      free(v126);
    if (v122 != v121)
      free(v122);
    if (((uint64_t)v108[0] & 1) == 0)
      llvm::deallocate_buffer(v108[1], (void *)(16 * v109));
    sub_22E687D9C((uint64_t *)&__src);
    goto LABEL_73;
  }
  sub_22EAAB384(v107 + 16, a8);
  v93 = *(_QWORD *)(v72 + 48);
  v94 = *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0);
  if (v94 && (v95 = *(_DWORD *)(v94 + 16), (v95 & 0xFE) == 0x28))
  {
LABEL_172:
    if ((v95 & 0x100000) != 0)
    {
      do
      {
        v94 = *(_QWORD *)(*(_QWORD *)(v94 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v94)
        {
          v98 = *(_DWORD *)(v94 + 16);
          if ((v98 & 0xFE) == 0x28)
            continue;
        }
        v94 = sub_22F10CF48(v94);
        v98 = *(_DWORD *)(v94 + 16);
      }
      while ((v98 & 0x100000) != 0);
    }
    v93 = *(_QWORD *)(v94 + 32);
  }
  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v94 = sub_22F10CF48(v94);
    if (v94)
    {
      v95 = *(_DWORD *)(v94 + 16);
      goto LABEL_172;
    }
  }
  v12 = sub_22F32D524((uint64_t)a1, v72, v93, 1, a2, 0);
  if (v126 != v128)
    free(v126);
  if (v122 != v121)
    free(v122);
  if (((uint64_t)v108[0] & 1) == 0)
    llvm::deallocate_buffer(v108[1], (void *)(16 * v109));
  sub_22E687D9C((uint64_t *)&__src);
LABEL_128:
  if (v139)
  {
    if (v132 == 5)
    {
      sub_22EC64D18(v138, (uint64_t)&v132);
    }
    else if (v137 && (*(_DWORD *)(v138[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v138, (uint64_t)&v132);
    }
  }
  if (v136)
  {
    v99 = sub_22EC6CBD0(v136);
    MEMORY[0x2348A0E9C](v99, 0x10E0C409F09D3C3);
  }
  v59 = v133;
  if (v133 != &v135)
LABEL_95:
    free(v59);
LABEL_96:
  sub_22F24C958(&v141);
  return v12;
}

uint64_t sub_22ECD6290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)) = a2;
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a2;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  sub_22ECD6FF0(a1 + 80);
  sub_22ECD6FF0(a1 + 160);
  sub_22ECD6FF0(a1 + 240);
  v7 = *(unsigned int *)(a1 + 328);
  if (v7 >= *(_DWORD *)(a1 + 332))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * *(unsigned int *)(a1 + 328)) = a3;
    LODWORD(v7) = *(_DWORD *)(a1 + 328);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v7) = a3;
  }
  *(_DWORD *)(a1 + 328) = v7 + 1;
  result = sub_22ECD6FF0(a1 + 640);
  if (*(_DWORD *)(a1 + 816) == 1)
  {
    v9 = *(_DWORD *)(a1 + 408);
    if (v9 >= *(_DWORD *)(a1 + 412))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a1 + 408);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v9) = 0;
    ++*(_DWORD *)(a1 + 408);
    v10 = *(_DWORD *)(a1 + 488);
    if (v10 >= *(_DWORD *)(a1 + 492))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 488);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 480) + 8 * v10) = 0;
    ++*(_DWORD *)(a1 + 488);
    v11 = *(_DWORD *)(a1 + 568);
    if (v11 >= *(_DWORD *)(a1 + 572))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(a1 + 568);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v11) = 0;
    ++*(_DWORD *)(a1 + 568);
  }
  return result;
}

uint64_t sub_22ECD6434(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22ECD7050(a1, (uint64_t)a2);
      default:
        goto LABEL_7;
    }
  }
  if (a2 && v2 == 233)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        return sub_22ECD7050(a1, (uint64_t)a2);
      default:
LABEL_7:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

BOOL sub_22ECD64EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BOOL8 result;
  uint64_t v4;
  __int16 v5;
  _DWORD v6[10];
  uint64_t v7;
  uint64_t v8;

  result = 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 60 <= 6)
    {
      sub_22EC7F2A4(*v2, *(_QWORD *)(a2 + 16), 0, (uint64_t)&v7);
      if (HIDWORD(v7) != 73 || (result = 0, v8))
      {
        if (HIDWORD(v7) == 85)
        {
          sub_22EC80388((uint64_t)v6, *v2, v4, (uint64_t (*)(uint64_t, _QWORD, _QWORD))sub_22ECD713C, (uint64_t)&v5 + 1, (uint64_t (*)(uint64_t, _QWORD))sub_22ECD7168, (uint64_t)&v5, 1);
          return v6[1] != 85;
        }
        else
        {
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_22ECD6590(uint64_t *a1, unint64_t a2, __n128 a3)
{
  uint64_t v5;

  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22ECD7374(a1, a2);
        break;
      case 0x67:
        sub_22ECD7414(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22ECD74D8(a1, a2);
        break;
      case 0x6C:
        sub_22ECD7590((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22ECD7758((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22ECD77C0((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22ECD77C8(a1, a2);
        break;
      case 0x70:
        sub_22ECD78D4(a1, a2);
        break;
      case 0x71:
        sub_22ECD7A68(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22ECD7B38(a1, a2);
        break;
      case 0x73:
        sub_22ECD7DB0((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22ECD7E98(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22ECD7EF4((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22ECD84F8((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22ECD8838((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22ECD89B8((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22ECD8D20(a1, a2);
        break;
      case 0x7D:
        sub_22ECD8F4C((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22ECD905C(a1, a2);
        break;
      case 0x7F:
        sub_22ECD94E8(a1, a2);
        break;
      case 0x81:
        sub_22ECD965C((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22ECD9B9C((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22ECD9E78((_QWORD **)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22ECD9F88(a1, a2);
        break;
      case 0x87:
        sub_22ECD9FF4(a1, a2);
        break;
      case 0x88:
        sub_22ECDA16C(a1, a2);
        break;
      case 0x89:
        sub_22ECDA404((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22ECDA5DC(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22ECDA7C4(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22ECDA930(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22ECDA934(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22ECDB074(a1, a2);
        break;
      case 0x90:
        sub_22ECDB0E0((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22ECDB184(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22ECDB240();
        break;
      case 0x98:
        sub_22ECDB244(a1, a2);
        break;
      case 0x99:
        sub_22ECDB2E8((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22ECDB314(a1, a2);
        break;
      case 0x9C:
        sub_22ECDB3D8((_QWORD **)a1, a2);
        break;
      case 0x9D:
        sub_22ECDB4A4(a1, a2);
        break;
      case 0x9E:
        sub_22ECDB5C8((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22ECDB660(a1, a2);
        break;
      case 0xA0:
        sub_22ECDB6B4(a1, a2);
        break;
      case 0xA1:
        sub_22ECDB700(a1, a2);
        break;
      case 0xA2:
        sub_22ECDBA20(a1, a2);
        break;
      case 0xA3:
        sub_22ECDBA90(a1, a2);
        break;
      case 0xA4:
        sub_22ECDBA9C((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22ECDBF00(a1, a2);
        break;
      case 0xA7:
        sub_22ECDC088((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22ECDC19C((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22ECDC1C8((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22ECDC25C(a1, a2);
        break;
      case 0xB1:
        sub_22ECDC484((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22ECDC54C((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22ECDC5D0(a1, a2);
        break;
      case 0xB6:
        sub_22ECDC7E8(a1, a2);
        break;
      case 0xB7:
        sub_22ECDDD54((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22ECDDE60(a1, a2);
        break;
      case 0xB9:
        sub_22ECDDF14((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22ECDE000((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22ECDE014((_QWORD **)a1, a2);
        break;
      case 0xBC:
        if (*sub_22EFFA6B0(*(unsigned __int8 **)(a2 + 16)) == 133 && (v5 = *(_QWORD *)(a2 + 24), v5 == a1[10]))
          a1[11] = sub_22EC9B8AC(*a1, v5, (unsigned __int8 *)a2, 0);
        else
          sub_22ECF4184(a1, a2);
        break;
      case 0xBD:
        sub_22ECDE0D8(a1, a2);
        break;
      case 0xBF:
        sub_22ECDE3D0(a1, a2);
        break;
      case 0xC0:
        sub_22ECDE4F0((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22ECDE67C((uint64_t)a1, a2);
        break;
      case 0xC4:
        sub_22ECDEA98(a1, a2);
        break;
      case 0xC6:
        sub_22ECDEAFC((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22ECDEBEC(a1, a2);
        break;
      case 0xC8:
        sub_22ECDECE8(a1, a2);
        break;
      case 0xC9:
        sub_22ECDF0B8(a1, a2);
        break;
      case 0xCA:
        sub_22ECDF1A0((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22ECDF208(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22ECDF504((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22ECDF644(a1, a2);
        break;
      case 0xD1:
        sub_22ECDF6E4(a1, a2);
        break;
      case 0xD2:
        sub_22ECDF8E8((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22ECDF94C(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22ECDFD14((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22ECE0120(a1, a2);
        break;
      case 0xD6:
        sub_22ECE019C(a1, a2);
        break;
      case 0xD7:
        sub_22ECE0204(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22ECE0300(a1, a2);
        break;
      case 0xDA:
        sub_22ECE0378(a1, a2);
        break;
      case 0xDB:
        sub_22ECE04DC(a1, a2);
        break;
      case 0xDC:
        sub_22ECE0AB0((_QWORD **)a1, a2);
        break;
      case 0xDD:
        sub_22ECE0B24(a1, a2);
        break;
      case 0xDE:
        sub_22ECE0D88(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22ECE1274(a1, a2);
        break;
      case 0xE4:
        sub_22ECE1420((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22ECE14E0((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22ECE1594(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22ECE1BEC(a1, a2);
        break;
      case 0xE9:
        sub_22ECE1DC4(a1, a2);
        break;
      case 0xEA:
        sub_22ECE1E68((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22ECD6FF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 8)) = 0;
    LODWORD(v2) = *(_DWORD *)(v1 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v2) = 0;
  }
  *(_DWORD *)(v1 + 8) = v2 + 1;
  return result;
}

uint64_t sub_22ECD7050(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  sub_22F0D492C(a2);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = v15;
  v6 = *((_QWORD *)&v12 + 1);
  v5 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14 && *((_QWORD *)&v12 + 1) == v15)
    return 0;
  while (1)
  {
    v8 = v5;
    if ((v6 & 3) != 0)
    {
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (_QWORD *)sub_22F3AC1A8(*v5);
    }
    if (*v8 && (sub_22ECD6434(a1) & 1) != 0)
      break;
    if ((v6 & 3) != 0)
    {
      if (v6 < 4)
        sub_22F3F2FE0((uint64_t)&v10, 1);
      else
        sub_22F0D8720((uint64_t)&v10);
    }
    else
    {
      *(_QWORD *)&v10 = v5 + 1;
    }
    v6 = *((_QWORD *)&v10 + 1);
    v5 = (uint64_t *)v10;
    if (v10 == __PAIR128__(v4, v3))
      return 0;
  }
  return 1;
}

uint64_t sub_22ECD713C(uint64_t a1, int a2, int a3)
{
  return ((a2 - 29) < 0x31) & (0x100240000C101uLL >> (a2 - 29)) & (a3 ^ 1);
}

uint64_t sub_22ECD7168()
{
  return 1;
}

void sub_22ECD7170(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v5 + 16 * v4;
    if (v5 <= a2 && v7 > a2)
    {
      v9 = a2 - v5;
      sub_22F341184(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_22F341184(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 16 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)v2;
  *(_DWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v6 + 12) = *(_BYTE *)(v2 + 12);
  ++*(_DWORD *)(a1 + 8);
}

llvm::APInt *sub_22ECD720C(uint64_t a1, llvm::APInt *a2)
{
  llvm::APInt *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  llvm::APInt *result;
  unsigned int v8;
  unint64_t v9;
  char *v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + 16 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = (char *)a2 - v5;
      sub_22F341184(a1);
      v5 = *(_QWORD *)a1;
      v2 = (llvm::APInt *)&v11[*(_QWORD *)a1];
    }
    else
    {
      sub_22F341184(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  result = (llvm::APInt *)(v5 + 16 * v6);
  v8 = *((_DWORD *)v2 + 2);
  *((_DWORD *)result + 2) = v8;
  if (v8 > 0x40)
    result = (llvm::APInt *)llvm::APInt::initSlowCase(result, v2);
  else
    *(_QWORD *)result = *(_QWORD *)v2;
  *(_BYTE *)(v5 + 16 * v6 + 12) = *((_BYTE *)v2 + 12);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22ECD72C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22ECD7374(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ECD7414(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ECD74D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(unsigned int *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, &v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22ECD7590(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22ECE1F0C(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v6 + 426);
    sub_22EB4DDB8((uint64_t)(v6 + 461), &v19, v16, (__int16 *)((char *)v6 + 1693), &v18, &v17);
    v7 = *((unsigned int *)v6 + 924);
    v8 = v7 - 2;
    v9 = v6[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v6 + 1693) = 0;
    if (*((_DWORD *)v6 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
    }
    v13 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22ECD7758(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22ECE67B8((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22ECD77C0(uint64_t a1, uint64_t a2)
{
  return sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22ECD77C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22ECE9718(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22ECD78D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22ECD7A68(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22ECD78D4(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22ECD7B38(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22ECE8800(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22ECE67B8((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22ECE9EC8(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22ECD7DB0(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22ECD7E98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22ECD7EF4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22ECE99AC((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22ECE67B8(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22ECE9718((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22ECD84F8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22ECF37A0((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22ECE9718((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22ECD8838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22ECD89B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22ECD6590(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ECE67B8(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22ECE680C((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22ECEEC8C(&v30, (uint64_t *)a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22ECF3A90(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22ECD8D20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22ECD6590(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22ECD6590(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22ECD8F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22ECE67B8(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22ECD905C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECF37A0(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22ECD6590(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22ECE99AC(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22ECD94E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22ECD965C(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22ECE680C((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22ECE76F0((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22ECE76F0((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22ECD9B9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22ECD6590(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22ECD9E78(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = sub_22ECE1F0C(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

unsigned int *sub_22ECD9F20(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = sub_22EBBB18C(*a1);
  v5 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(_QWORD *)(a2 + 8))
    return sub_22EBBC14C(v5, *(_DWORD *)(a2 + 4), v4, (*(_DWORD *)a2 >> 18) & 1);
  sub_22F3313CC(v5, a2);
  return (unsigned int *)a2;
}

uint64_t sub_22ECD9F88(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22ECD9FF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22ECD6590(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22ECE1F0C((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22ECDA16C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECF37A0(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22ECE9718(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22ECDA404(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22ECE1F0C(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22ECDA5DC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECD6590(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22ECDA7C4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECD6590(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECDA5DC(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22ECDA934(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22ECD6590(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v61 = v63;
      v62 = 0x800000000;
      v10 = 1;
      if ((sub_22ECE9718(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v61, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, v61, v62, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v61, v62, v11, 0);
        v10 = v13;
      }
      if (v61 != v63)
        free(v61);
      return v10;
    }
    return 1;
  }
  v14 = sub_22ECD6590(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22ECF3D30(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22ECD6590(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22ECD6590(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v60 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v61, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v61 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v60;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v57 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v57 + 520) = v46;
        *(_DWORD *)(v57 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v60;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v58 = sub_22EB2D0B8();
              if ((v58 & 1) != 0)
                v10 = 1;
              else
                v10 = v58;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v61 = v63;
      v62 = 0x1000000000;
      v51 = *v36;
      v59 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v61, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v63[0] = v53 | 3;
          LODWORD(v62) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v59;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v55 = sub_22EFFBA54(v30);
        v56 = sub_22ED1767C(*a1, v31, v55, (uint64_t)&v61, v33, (uint64_t)v34, v52, 1, 0);
        if ((v56 & 1) != 0)
          v10 = 1;
        else
          v10 = v56;
      }
      else
      {
        v54 = sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C(*a1, v31, v54, &v61, v33, v52);
      }
      v27 = v59;
LABEL_79:
      if (v61 != v63)
        free(v61);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22ECDB074(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22ECDB0E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22ECE1F0C(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ECD6590(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ECDB184(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22ECF37A0(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22ECD6590(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22ECDB244(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22ECDB2E8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22ECD6590(a1, v3);
}

uint64_t sub_22ECDB314(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22ECDB3D8(_QWORD **a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  v5 = sub_22ECE1F0C(a1, v4);
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *((_DWORD *)v8 + 2998) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0((uint64_t)v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22ECDB4A4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22ECF3A90((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22ECDB5C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22ECE1F0C(a1, *(uint64_t **)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22ECDB660(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22ECDB6B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECDB700(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22ECE680C(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22ECEEC8C((__n128 *)v31, a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22ECF3A90((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22ECDBA20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECDF94C(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECDBA90(uint64_t *a1, uint64_t a2)
{
  return sub_22ECF3D30(a1, a2, 0, 0);
}

uint64_t sub_22ECDBA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22ECD6590(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22ECD6590(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22ECD6590(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22ECD6590(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22ECDBF00(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22ECDC088(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22ECDC19C(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22ECD6590(a1, v3);
}

uint64_t sub_22ECDC1C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ECD6590(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22ECDC25C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22ECE1F0C((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22ECD6590(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22ECDC484(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22ECDC54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22ECE67B8(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22ECDC5D0(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22ECE9718(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22ECDC7E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  unint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned __int8 v193[24];
  char v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  char v199;
  uint64_t v200;
  _DWORD *v201;
  void *v202;
  uint64_t v203;
  int v204[12];
  unsigned __int8 *v205;
  void *v206[2];
  _BYTE v207[32];
  unint64_t v208;
  int64x2_t v209;
  _QWORD v210[5];
  void *v211;
  uint64_t v212;
  _BYTE v213[352];
  unsigned __int8 *v214;
  __int128 v215;
  _BYTE v216[16];
  char v217;
  void *v218[2];
  _BYTE v219[32];
  unint64_t *v220;
  uint64_t v221;
  _QWORD v222[6];

  v2 = a2;
  v222[4] = *MEMORY[0x24BDAC8D0];
  v211 = v213;
  v212 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v212)
    {
      if (v6 <= HIDWORD(v212))
      {
        v10 = (char *)v211;
      }
      else
      {
        v202 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v211 != v213)
          free(v211);
        v211 = v10;
        HIDWORD(v212) = (_DWORD)v202;
        v7 = v212;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v211 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v212) = (unint64_t)v5 >> 4;
  }
  v220 = 0;
  v220 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v220;
  if (v220 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v220;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v211 + 88 * (((uint64_t)v15 - v16) >> 4);
        v218[0] = 0;
        v18 = (_QWORD *)(*v220 & 0xFFFFFFFFFFFFFFF8);
        v218[0] = v18;
        v208 = (unint64_t)a1;
        v209.i64[0] = (uint64_t)v218;
        v209.i64[1] = (uint64_t)v17;
        v210[0] = &v220;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v202 = v204;
          v203 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v197 = 7;
          v198 = v22;
          sub_22EE7377C(v21, (uint64_t)&v197, (uint64_t)&v202);
          sub_22ECF4014((uint64_t)&v208);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v202 != v204)
            free(v202);
        }
        else
        {
          sub_22ECF4014((uint64_t)&v208);
        }
      }
      v13 = v220 + 2;
      v220 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v195 = *a1;
  LOBYTE(v196) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v192 = v23;
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v208 = (unint64_t)v210;
  v209 = vdupq_n_s64(0x20uLL);
  v210[4] = 0;
  v206[0] = v207;
  v206[1] = (void *)0x400000000;
  v200 = v29;
  v201 = v30;
  v220 = v222;
  v221 = 0x400000000;
  v218[0] = v219;
  v218[1] = (void *)0x400000000;
  v214 = v216;
  v215 = xmmword_22F44E350;
  v217 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v37 = v29;
    v38 = v29;
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_52;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_66;
      }
      else
      {
        if (v39 == 24)
          goto LABEL_65;
        if (v39 == 26)
        {
          if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
          {
LABEL_65:
            v37 = v38;
LABEL_66:
            sub_22F115668(v37);
            if (*(_BYTE *)(v200 + 16) == 25)
              v43 = 0;
            else
              v43 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
            v44 = (uint64_t)(v201 + 4);
            v45 = v200 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v46 = sub_22E47E270(v29);
            else
              v46 = 0;
            if ((sub_22ECE8800(a1, v44, v43, v45, v46, (uint64_t)&v220, (uint64_t)v218, (uint64_t)&v214) & 1) != 0)
            {
              v36 = 0;
              goto LABEL_76;
            }
            v47 = *(_QWORD *)(v200 + 24);
            v48 = sub_22E47EE80(&v200);
            v51 = sub_22ECE2134((_QWORD **)a1, (uint64_t)&v208, v47, v48, v49, v50);
            if (v51 >= 0x10)
              goto LABEL_216;
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v39) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v38 = sub_22F115B7C(v38);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  v32 = sub_22E47EE80(&v200);
  v35 = sub_22ECE2134((_QWORD **)a1, (uint64_t)&v208, v31, v32, v33, v34);
  if (v35 < 0x10)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v184 = v35;
  v40 = v200;
  for (i = v200; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v42 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v42 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v40 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_209;
    }
    if (v42 == 24)
      goto LABEL_208;
    if (v42 == 26)
      break;
    if (((1 << v42) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_208:
  v40 = i;
LABEL_209:
  sub_22F115668(v40);
  if (*(_BYTE *)(v200 + 16) == 25)
    v152 = 0;
  else
    v152 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
  v153 = (uint64_t)(v201 + 4);
  v154 = v200 + 40;
  v51 = v184;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v155 = sub_22E47E270(v29);
  else
    v155 = 0;
  if ((sub_22ECE8800(a1, v153, v152, v154, v155, (uint64_t)&v220, (uint64_t)v218, (uint64_t)&v214) & 1) != 0)
    goto LABEL_75;
LABEL_216:
  sub_22E4913B4(v29, (uint64_t)&v202);
  v199 = 0;
  v156 = v29;
  v157 = v29;
  while (2)
  {
    while (2)
    {
      if ((v157 & 0xF) != 0)
        goto LABEL_227;
      v158 = *(unsigned __int8 *)(*(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v158 > 0x39)
      {
LABEL_222:
        if (sub_22F115668(v157))
          v156 = v157;
        v157 = sub_22F115B7C(v157);
        if (!v157)
          goto LABEL_229;
        continue;
      }
      break;
    }
    if (v158 == 24)
      break;
    if (v158 != 26)
    {
      if (((1 << v158) & 0x20000000200003CLL) != 0)
        goto LABEL_227;
      goto LABEL_222;
    }
    if ((*(_BYTE *)(v157 + 23) & 0x10) == 0)
    {
LABEL_227:
      v157 = sub_22F115B7C(v157);
      continue;
    }
    break;
  }
  v156 = v157;
LABEL_229:
  v159 = sub_22F115668(v156);
  if ((sub_22ECE91E4(a1, v159, v204, (uint64_t)v206, &v199) & 1) != 0)
  {
    v36 = 0;
    goto LABEL_76;
  }
  if (v217)
  {
    sub_22F24FB88(&v214, v221);
    if (v214)
    {
      v160 = v205;
      if (v205)
      {
        if (*(_BYTE *)(v200 + 16) == 25)
        {
          if (!(_DWORD)v221)
            goto LABEL_237;
        }
        else
        {
          v180 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
          if (v180 == v221)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38))
              goto LABEL_237;
            v181 = v214;
            while (*v160 == *v181)
            {
              ++v160;
              ++v181;
              if (!--v180)
                goto LABEL_237;
            }
          }
        }
      }
      v199 = 1;
LABEL_237:
      v205 = v214;
      goto LABEL_238;
    }
  }
  if (v205)
  {
    v199 = 1;
    v205 = 0;
  }
LABEL_238:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v161 = v221;
    goto LABEL_248;
  }
  v161 = v221;
  if (v51 == *(_QWORD *)(v29 + 24)
    && (v162 = (unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38), v162 == v221))
  {
    v163 = v200;
    if ((unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38))
    {
      v164 = (_QWORD *)(v29 + 40);
      v165 = v220;
      v166 = 8 * v162;
      while (*v164 == *v165)
      {
        ++v164;
        ++v165;
        v166 -= 8;
        if (!v166)
          goto LABEL_245;
      }
      goto LABEL_248;
    }
LABEL_245:
    if (v199)
      goto LABEL_248;
LABEL_249:
    v167 = sub_22E8BB094((uint64_t)&v208, v163);
    v169 = 0;
    v170 = v201;
    *v168 = *v201;
    v168[1] = v170[1];
    v168[2] = v170[2];
    if (v200)
    {
      v171 = 0;
      if (*(_BYTE *)(v200 + 16) == 26)
      {
        v172 = *(_QWORD *)(v200 + 16);
        if ((v172 & 0x3C0000000000000) != 0)
        {
          v173 = (unsigned __int16)(v172 >> 38);
          if (*(_QWORD *)(v200 + 16) == 25)
            v173 = 0;
          v171 = *(_QWORD *)&v170[2 * v173 + 4];
          v169 = v171 & 0xFFFFFFFF00000000;
          v171 = v171;
        }
        else
        {
          v169 = 0;
          v171 = 0;
        }
      }
    }
    else
    {
      v171 = 0;
    }
    if (v167)
    {
      if (*(_BYTE *)(v167 + 16) == 26)
      {
        v174 = *(_QWORD *)(v167 + 16);
        if ((v174 & 0x3C0000000000000) != 0)
        {
          v175 = v171 | v169;
          if (*(_QWORD *)(v167 + 16) == 25)
            v176 = 0;
          else
            v176 = (unsigned __int16)(v174 >> 38);
          *(_QWORD *)&v168[2 * v176 + 4] = v175;
          v170 = v201;
        }
      }
    }
    v168[3] = v170[3];
    if (*(_BYTE *)(v167 + 16) != 25)
    {
      v177 = *(_QWORD *)(v167 + 16);
      if ((v177 & 0x3FFFC000000000) != 0)
      {
        v178 = 0;
        v179 = (unsigned __int16)(v177 >> 38);
        do
        {
          *(_QWORD *)&v168[2 * v178 + 4] = *((_QWORD *)v218[0] + v178);
          ++v178;
        }
        while (v179 != v178);
      }
    }
    v36 = v163;
  }
  else
  {
LABEL_248:
    v163 = sub_22EE80544((_QWORD *)*a1, v51, v220, v161, 0, 0, (uint64_t)&v202);
    v36 = 0;
    if (v163 >= 0x10)
      goto LABEL_249;
  }
LABEL_76:
  if (v214 != v216)
    free(v214);
  if (v218[0] != v219)
    free(v218[0]);
  if (v220 != v222)
    free(v220);
  if (v36 >= 0x10)
  {
    v53 = *(_QWORD *)(*a1 + 88);
    v54 = v209.i64[0] - v209.i64[1];
    v55 = v209.i32[0] - v209.i32[2];
    if (v209.i32[0] == v209.i32[2])
      v55 = sub_22F11598C(v36);
    v52 = (unint64_t *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v52 = v36;
    memcpy(v52 + 1, (const void *)(v208 + v209.i64[1]), v54);
  }
  else
  {
    v52 = 0;
  }
  if (v206[0] != v207)
    free(v206[0]);
  if ((_QWORD *)v208 != v210 && v208)
    MEMORY[0x2348A0E84]();
  if (v36 < 0x10)
  {
    v56 = 1;
    goto LABEL_199;
  }
  v57 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v57 & 4) != 0 && (v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v190 = sub_22ECD6590(a1, v58);
  else
    v190 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v59 > 3 || v59 == 2)
    goto LABEL_122;
  v61 = *(_QWORD *)(*a1 + 216);
  v62 = *(_WORD *)(v61 + 8) & 0x7F;
  if (v62 == 16 || v62 == 83)
    goto LABEL_123;
  v63 = -40;
  if ((*(_WORD *)(v61 + 8) & 0x7Fu) > 0x46)
  {
    if (v62 == 71)
    {
      v63 = -56;
    }
    else if (v62 != 81)
    {
LABEL_114:
      if (v62 - 52 < 6)
      {
        v63 = -72;
      }
      else
      {
        v63 = -48;
        if (v62 - 33 < 5)
          v63 = -64;
      }
    }
  }
  else
  {
    if (v62 > 0x18)
      goto LABEL_113;
    if (((1 << v62) & 0x1066) == 0)
    {
      if (v62 == 24)
      {
        v63 = -48;
      }
      else
      {
LABEL_113:
        if (v62 != 70)
          goto LABEL_114;
        v63 = -64;
      }
    }
  }
  v64 = *(_QWORD *)(v61 + v63 + 16);
  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
  if ((v64 & 4) != 0)
    v65 = (_QWORD *)*v65;
  if ((sub_22EFC7ADC((unint64_t)v65) & 1) == 0)
LABEL_123:
    v66 = 2;
  else
LABEL_122:
    v66 = 0;
  v67 = (void *)sub_22F3C61E8(v2);
  v68 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v52, v66, (*(_DWORD *)v2 >> 18) & 3);
  v202 = v67;
  sub_22F25E108(a1 + 1, &v202)[1] = v68;
  v69 = *a1;
  v70 = *(_QWORD *)(v2 + 16);
  v71 = sub_22F3C6220(v2);
  v72 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 16))(v71) >> 32;
  if (*(_BYTE *)(*v52 + 16) == 25)
    v73 = 0;
  else
    v73 = (unsigned __int16)(*(_QWORD *)(*v52 + 16) >> 38);
  v74 = sub_22F3C6220(v2);
  v75 = sub_22F3366E8(v69, (uint64_t)v68, v70, v52, v72, v52 + 3, v73, *(_DWORD *)(v74 + 80) >> 30, v190 & 0xFFFFFFFFFFFFFFFELL);
  v76 = v192;
  *(_QWORD *)(v192 + 1488) = v75;
  sub_22F3C6220(v2);
  v202 = (void *)sub_22F3C6220(v2);
  v191 = a1 + 1;
  sub_22F25E108(a1 + 1, &v202)[1] = v75;
  v77 = *a1;
  v193[0] = 0;
  v194 = 0;
  v189 = v75;
  sub_22EC52964(v77, v68, v75, v193);
  if (v194)
    v194 = 0;
  v78 = *a1;
  v79 = v75;
  v80 = v75 + 72;
  if (!v75)
    v80 = 0;
  v188 = *(_QWORD *)(v78 + 216);
  v81 = *(_QWORD *)(v78 + 3200);
  *(_QWORD *)(v78 + 3200) = 0;
  v183 = *(_QWORD *)(v78 + 10288);
  v185 = v81;
  v186 = *(_DWORD *)(v78 + 1944);
  v187 = *(_DWORD *)(v78 + 2192);
  *(_QWORD *)(v78 + 216) = v80;
  *(_DWORD *)(v78 + 1944) = *(_DWORD *)(v78 + 1904);
  *(_DWORD *)(v78 + 2192) = *(_DWORD *)(v78 + 1960);
  v82 = *(_QWORD *)(v2 + 16);
  v83 = (*(_DWORD *)v2 >> 18) & 3;
  v84 = *(_DWORD *)(v2 + 24);
  v85 = (*(_DWORD *)v2 >> 20) & 1;
  v86 = (*(_DWORD *)v2 >> 21) & 1;
  v87 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v78, v192, v79, v82, v83, v84, v85, v86, v87);
  v88 = sub_22F3C64D0(v2);
  v89 = sub_22F3C650C(v2);
  if (v88 == v89)
  {
    *(_DWORD *)(v192 + 1508) = *(_DWORD *)(v192 + 1272);
    v90 = *a1;
    LODWORD(v220) = 6;
    v202 = 0;
    LODWORD(v218[0]) = 3;
    v208 = *(unsigned int *)(v90 + 1704);
    sub_22EB4DDB8(v90 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v90 + 1693), (uint64_t *)&v202, (int *)v218);
    v91 = *(unsigned int *)(v90 + 3696);
    v92 = v91 - 2;
    v93 = *(_QWORD *)(v90 + 3688);
    v94 = *(_DWORD *)(v93 + 576 * (v91 - 2));
    if (v94 == 5)
    {
      *(_BYTE *)(v93 + 576 * v91 - 4) = *(_BYTE *)(v93 + 576 * v92 + 572);
      v96 = 1;
      v95 = v188;
    }
    else
    {
      v95 = v188;
      if (v94 == 2)
      {
        *(_BYTE *)(v93 + 576 * v91 - 4) = 1;
        v96 = *(_BYTE *)(v93 + 576 * v92 + 573) != 0;
      }
      else
      {
        v96 = 0;
        *(_BYTE *)(v93 + 576 * v91 - 4) = 0;
      }
    }
    v97 = v93 + 576 * v91;
    *(_BYTE *)(v97 - 3) = v96;
    *(_WORD *)(v90 + 1693) = 0;
    if (*(_DWORD *)(v90 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v90 + 1776), (llvm::SmallPtrSetImplBase *)(v97 - 560));
      sub_22EAEAE08(v90 + 1840, (uint64_t *)(v97 - 496));
    }
  }
  else
  {
    v98 = v89;
    v99 = 0;
    do
    {
      v100 = *(_QWORD *)v88;
      if ((*(_QWORD *)v88 & 1) != 0)
        break;
      if ((v100 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v88 + 8), 1, 1, 0, (v100 >> 1) & 1);
      }
      else if (v100 >= 4)
      {
        v101 = v99;
        if (sub_22F3C6428(v2, (_QWORD *)v88))
        {
          v108 = sub_22F3C64D0(v2);
          v109 = (char *)v211 + 88 * ((v88 - v108) >> 4);
          v110 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          v202 = v204;
          v203 = 0x400000000;
          v111 = *((unsigned int *)v109 + 4);
          if ((_DWORD)v111)
          {
            v115 = (_QWORD *)*((_QWORD *)v109 + 1);
            v182 = &v115[2 * v111];
            while ((*v115 & 1) == 0)
            {
              v116 = v115[1];
              if (v116 < 0x10)
                break;
              v117 = *(_QWORD *)(v110 + 40);
              v118 = (v117 & 7) != 0 ? 0 : v117 & 0xFFFFFFFFFFFFFFF8;
              v119 = sub_22EC5313C(*a1, *(_DWORD *)(v110 + 24), v116, *(_DWORD *)v109, v118, (*(_BYTE *)(v110 + 96) >> 5) & 3, *v115 & 0xFFFFFFFFFFFFFFFELL);
              if (!v119)
                break;
              v120 = v119;
              v121 = v203;
              if (v203 >= (unint64_t)HIDWORD(v203))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = v203;
              }
              *((_QWORD *)v202 + v121) = v120;
              LODWORD(v203) = v203 + 1;
              sub_22F336D2C(*a1, v192, v120);
              v115 += 2;
              if (v115 == v182)
                goto LABEL_163;
            }
LABEL_188:
            if (v202 != v204)
              free(v202);
            *(_DWORD *)(v192 + 1508) = *(_DWORD *)(v192 + 1272);
            v140 = *a1;
            LODWORD(v220) = 6;
            v202 = 0;
            LODWORD(v218[0]) = 3;
            v208 = *(unsigned int *)(v140 + 1704);
            sub_22EB4DDB8(v140 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v140 + 1693), (uint64_t *)&v202, (int *)v218);
            v141 = *(unsigned int *)(v140 + 3696);
            v142 = v141 - 2;
            v143 = *(_QWORD *)(v140 + 3688);
            v144 = *(_DWORD *)(v143 + 576 * (v141 - 2));
            v95 = v188;
            if (v144 == 5)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = *(_BYTE *)(v143 + 576 * v142 + 572);
              v145 = 1;
            }
            else if (v144 == 2)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = 1;
              v145 = *(_BYTE *)(v143 + 576 * v142 + 573) != 0;
            }
            else
            {
              v145 = 0;
              *(_BYTE *)(v143 + 576 * v141 - 4) = 0;
            }
            v146 = v143 + 576 * v141;
            *(_BYTE *)(v146 - 3) = v145;
            *(_WORD *)(v140 + 1693) = 0;
            if (*(_DWORD *)(v140 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v140 + 1776), (llvm::SmallPtrSetImplBase *)(v146 - 560));
              sub_22EAEAE08(v140 + 1840, (uint64_t *)(v146 - 496));
            }
            goto LABEL_195;
          }
LABEL_163:
          if ((v101 & 1) != 0)
            goto LABEL_188;
          v112 = a1;
          v113 = v2;
          v208 = v110;
          v114 = *(_QWORD *)v202;
          sub_22F25E108(v191, &v208)[1] = v114;
          if (v202 != v204)
            free(v202);
          v99 = 0;
          v2 = v113;
          a1 = v112;
          v76 = v192;
        }
        else
        {
          v102 = *(_QWORD *)v88;
          if ((*(_QWORD *)v88 & 2) != 0)
            v103 = 1;
          else
            v103 = 2;
          if ((*(_QWORD *)v88 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v104 = 2;
          else
            v104 = v103;
          if (v102 < 4)
            v104 = 2;
          if ((v102 & 1) != 0)
            v105 = 0;
          else
            v105 = v104;
          v106 = *(_DWORD *)(v88 + 12);
          v107 = v102 & 0xFFFFFFFFFFFFFFF8;
          v208 = v102 & 0xFFFFFFFFFFFFFFF8;
          v202 = 0;
          if (sub_22E793870(v191, &v208, &v202)
            && v202 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v107 = *((_QWORD *)v202 + 1);
          }
          if (v107 && (*(_BYTE *)(v107 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v107, *(_DWORD *)(v88 + 8), v105, v106);
            v99 = v101;
          }
          else
          {
            v99 = 1;
          }
        }
      }
      v88 += 16;
    }
    while (v88 != v98);
    *(_DWORD *)(v76 + 1508) = *(_DWORD *)(v76 + 1272);
    v122 = *a1;
    LODWORD(v220) = 6;
    v202 = 0;
    LODWORD(v218[0]) = 3;
    v208 = *(unsigned int *)(v122 + 1704);
    sub_22EB4DDB8(v122 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v122 + 1693), (uint64_t *)&v202, (int *)v218);
    v123 = *(unsigned int *)(v122 + 3696);
    v124 = v123 - 2;
    v125 = *(_QWORD *)(v122 + 3688);
    v126 = *(_DWORD *)(v125 + 576 * (v123 - 2));
    if (v126 == 5)
    {
      *(_BYTE *)(v125 + 576 * v123 - 4) = *(_BYTE *)(v125 + 576 * v124 + 572);
      v127 = 1;
      v95 = v188;
    }
    else
    {
      v95 = v188;
      if (v126 == 2)
      {
        *(_BYTE *)(v125 + 576 * v123 - 4) = 1;
        v127 = *(_BYTE *)(v125 + 576 * v124 + 573) != 0;
      }
      else
      {
        v127 = 0;
        *(_BYTE *)(v125 + 576 * v123 - 4) = 0;
      }
    }
    v128 = v125 + 576 * v123;
    *(_BYTE *)(v128 - 3) = v127;
    *(_WORD *)(v122 + 1693) = 0;
    if (!*(_DWORD *)(v122 + 1848))
    {
      if ((v99 & 1) == 0)
        goto LABEL_184;
      goto LABEL_195;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v122 + 1776), (llvm::SmallPtrSetImplBase *)(v128 - 560));
    sub_22EAEAE08(v122 + 1840, (uint64_t *)(v128 - 496));
    if ((v99 & 1) != 0)
    {
LABEL_195:
      LOBYTE(v196) = 0;
      goto LABEL_196;
    }
  }
LABEL_184:
  sub_22F3C638C(v2);
  v134 = sub_22ECE9EC8(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v129, v130, v131, v132, v133);
  LOBYTE(v196) = 0;
  if ((v134 & 1) != 0)
  {
LABEL_196:
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v185;
      *(_QWORD *)(v78 + 10288) = v183;
      *(_DWORD *)(v78 + 1944) = v186;
      *(_DWORD *)(v78 + 2192) = v187;
    }
    v147 = *(unsigned int *)(v2 + 16);
    v56 = 1;
    sub_22F336DD4(*a1, v147, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v202, v192);
    v135 = v134 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v189, v135, 1);
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v185;
      *(_QWORD *)(v78 + 10288) = v183;
      *(_DWORD *)(v78 + 1944) = v186;
      *(_DWORD *)(v78 + 2192) = v187;
    }
    v136 = *a1;
    v137 = *(unsigned int *)(v2 + 16);
    sub_22F0D60E4(v135);
    sub_22EC54548(v136, v137, v138, (uint64_t)&v202);
    v56 = v139;
    sub_22F2F43D0((uint64_t)&v202);
  }
LABEL_199:
  sub_22F2F446C((uint64_t)&v195);
  v148 = (char *)v211;
  if ((_DWORD)v212)
  {
    v149 = 88 * v212;
    do
    {
      v150 = *(char **)&v148[v149 - 80];
      if (&v148[v149 - 64] != v150)
        free(v150);
      v149 -= 88;
    }
    while (v149);
    v148 = (char *)v211;
  }
  if (v148 != v213)
    free(v148);
  return v56;
}

uint64_t sub_22ECDDD54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22ECE680C((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22ECDDE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(unsigned int *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, &v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22ECDDF14(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22ECDE000(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22ECD6590(a1, v3);
}

uint64_t sub_22ECDE014(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22ECDE0D8(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22ECD6590(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22ECE9718(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(unint64_t **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22ECDE3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ECD6590(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22ECD6590(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22ECD6590(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22ECDE4F0(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22ECD6590(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22ECDE67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(uint64_t **)(v41 + 32);
LABEL_9:
        v20 = sub_22ECE1F0C((_QWORD **)v59, v19);
        v21 = sub_22ECE67B8(v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*(_QWORD *)v59, v21, (uint64_t)v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22ECD6590(v59, v56);
      v55 = v25;
      v28 = sub_22ECD6590(v59, v25);
      v29 = v26;
      v30 = sub_22ECD6590(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = *(_QWORD **)v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108((uint64_t *)(v59 + 8), v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22ECDEA98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22ECDEAFC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22ECDEBEC(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22ECDECE8(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22ECE9718(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v40, &v36) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22ECD6590(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v36))
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v22 = (_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v23 = *v22;
          v22 = (_QWORD *)(*v22 + 40);
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v22, v23, *(unsigned int *)(a2 + 32));
LABEL_52:
        v20 = v24;
        v35 = v37;
        if (v37 == v39)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v15 = sub_22ECE1F0C((_QWORD **)a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v36)
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v24 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v37, v38, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v37 = v39;
  v38 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v37);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v25 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v25 = (uint64_t *)(*v6 + 40);
  v26 = *v25;
  v27 = (int *)v37;
  v28 = v38;
  v29 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v31 = *v6;
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 32);
  v33 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v31 + 58) & 2) != 0)
    v34 = sub_22EC2DA20(v33, 0, v29, v8, v26, v31, v32);
  else
    v34 = sub_22EC2F730(v33, 0, v29, v8, v26, v31, v32, v30, v27, v28, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
  v20 = v34;
  v35 = v37;
  if (v37 != v39)
LABEL_53:
    free(v35);
LABEL_28:
  if (v40 != v42)
    free(v40);
  return v20;
}

uint64_t sub_22ECDF0B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22ECDF1A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22ECDF208(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22ECD6590(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22ECD6590(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22ECD6590(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22ECD6590(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22ECDF504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22ECD6590(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22ECDF644(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22ECDF6E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22ECD6590(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22ECDF8E8(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22ECD6590(a1, a2[2]);
}

uint64_t sub_22ECDF94C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22ECE680C(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22ECF3A90((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22ECDFD14(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22ECD6590(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ECE67B8(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22ECE680C((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22ECF3A90(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22ECE0120(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

uint64_t sub_22ECE019C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22ECE0204(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22ECE9718(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22ECE0300(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22ECD6590(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22ECE0378(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22ECD6590(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22ECE04DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22ECE8800(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22ECD6590(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1);
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22ECD6590(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22ECE1F0C((_QWORD **)a1, (uint64_t *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8));
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, (unint64_t)v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22ECE0AB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22ECE1F0C(a1, *(uint64_t **)(a2 + 32));
    if (v4)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || *(unint64_t **)(v2 + 32) != v4)
        return sub_22F3C109C((*a1)[11], *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22ECE0B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22ECE9718(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22ECE0D88(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22ECE729C(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22ECE6FB8((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22ECE1274(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22ECEE920(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22ECE1420(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22ECD6590(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22ECE14E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22ECD6590(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22ECE1594(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unsigned __int32 v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  size_t v44;
  unsigned __int32 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57[2];
  void *v58[2];
  _BYTE v59[32];
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[6];

  v2 = a1;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v64 = v66;
  v65 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v53 = vdupq_n_s64(0x20uLL);
  v54 = (uint64_t)(a2 + 6);
  v55 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v60 = (uint64_t)v62;
      v61 = vdupq_n_s64(0x20uLL);
      v63 = 0;
      v10 = sub_22F11598C(v9);
      if (v61.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v60, v10);
      v13 = sub_22ECE2134((_QWORD **)v2, (uint64_t)&v60, v9, (uint64_t)v8, v11, v12);
      if (v13 >= 0x10)
      {
        v15 = v13;
        if (v13 == *v7)
        {
          v16 = v65;
          v17 = HIDWORD(v65);
        }
        else
        {
          v25 = *(_QWORD *)(*v2 + 88);
          v26 = v61.i64[0] - v61.i64[1];
          v27 = v61.i32[0] - v61.i32[2];
          if (v61.i32[0] == v61.i32[2])
            v27 = sub_22F11598C(v15);
          v7 = (unint64_t *)sub_22E3CD3D4(v25 + 2032, v27 + 8, 3);
          *v7 = v15;
          memcpy(v7 + 1, (const void *)(v60 + v61.i64[1]), v26);
          v16 = v65;
          v17 = HIDWORD(v65);
          v5 = 1;
        }
        if (v16 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v65;
        }
        v64[v16] = (uint64_t)v7;
        LODWORD(v65) = v65 + 1;
        v14 = 4;
      }
      else
      {
        v14 = 1;
      }
      if ((_BYTE *)v60 != v62 && v60)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v18 = *(_QWORD *)(v9 + 32);
    if (v18 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v37 = *(_QWORD *)((char *)&unk_22F495A90
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v37 = 1;
    v20 = ((unint64_t)v8 + v37 + 3) & -v37;
    v57[0] = *(_QWORD *)(v9 + 32);
    v57[1] = v20;
    v58[0] = v59;
    v58[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v18, v20, (uint64_t)v58);
    v51 = *(_DWORD *)(v9 + 20);
    LODWORD(v21) = v51 - 1;
    if (v51)
      v21 = v21;
    else
      v21 = 0;
    v52 = v21;
    v22 = v18;
    for (i = v18; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v24 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v24 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v22 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v24 == 24)
        goto LABEL_42;
      if (v24 == 26)
        break;
      if (((1 << v24) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v22 = i;
LABEL_43:
    sub_22F115668(v22);
    sub_22F1167E8(v57);
    v2 = a1;
    v28 = (_QWORD *)*a1;
    v29 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v60 = (uint64_t)v62;
    v61 = v53;
    v63 = 0;
    v30 = sub_22F11598C(*v7);
    if (v61.i64[0] < (unint64_t)v30)
      sub_22EEB52C0(&v60, v30);
    v33 = sub_22ECE2134((_QWORD **)a1, (uint64_t)&v60, v18, v20, v31, v32);
    if (v33 < 0x10)
    {
LABEL_46:
      v14 = 1;
      goto LABEL_47;
    }
    v34 = v33;
    v35 = v18;
    while (2)
    {
      while (2)
      {
        if ((v35 & 0xF) != 0)
          goto LABEL_67;
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v36 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v35))
            v18 = v35;
          v35 = sub_22F115B7C(v35);
          if (!v35)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v36 == 24)
        break;
      if (v36 != 26)
      {
        if (((1 << v36) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
      {
LABEL_67:
        v35 = sub_22F115B7C(v35);
        continue;
      }
      break;
    }
    v18 = v35;
LABEL_69:
    v38 = sub_22F115668(v18);
    v39 = sub_22F1167E8(v57);
    v2 = a1;
    v40 = sub_22F34AE9C((_QWORD *)*a1, v34, v38 | ((unint64_t)v39 << 32), *v8, v52 | ((unint64_t)(v51 != 0) << 32));
    if (v40 < 0x10)
      goto LABEL_46;
    v41 = v40;
    sub_22EEB5360((uint64_t)&v60, v40, 4uLL, 4);
    *v42 = *v8;
    v43 = *(_QWORD *)(*a1 + 88);
    v44 = v61.i64[0] - v61.i64[1];
    v45 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v45 = sub_22F11598C(v41);
    v46 = (_QWORD *)sub_22E3CD3D4(v43 + 2032, v45 + 8, 3);
    *v46 = v41;
    memcpy(v46 + 1, (const void *)(v60 + v61.i64[1]), v44);
    v47 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = v65;
    }
    v64[v47] = (uint64_t)v46;
    LODWORD(v65) = v65 + 1;
    v14 = 4;
LABEL_47:
    if ((_BYTE *)v60 != v62 && v60)
      MEMORY[0x2348A0E84]();
    *((_DWORD *)v28 + 2998) = v29;
    if (v58[0] != v59)
      free(v58[0]);
    v5 = 1;
    v6 = (_DWORD *)v54;
    v3 = v55;
LABEL_53:
    if (v14 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v48 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v64, v65, a2[5]);
        else
          v48 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v48 = 1;
LABEL_81:
  if (v64 != v66)
    free(v64);
  return v48;
}

uint64_t sub_22ECE1BEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(uint64_t **)(a2 + 16);
    v10 = sub_22ECE1F0C((_QWORD **)a1, v9);
    if (v10)
    {
      v11 = v10;
      v12 = (_QWORD *)*a1;
      if (v9 != (uint64_t *)v10 || *((_DWORD *)v12 + 2998) != -1)
      {
        v14 = *(unsigned int *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (_QWORD *)*a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22ECF3D30(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20(*a1, *((unsigned int *)v5 + 4), *((unsigned int *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(unsigned int *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22ECE1DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22ECF3D30(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22ECD6590(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C(*a1, 0, *(unsigned int *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22ECE1E68(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ECE1F0C(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

unint64_t *sub_22ECE1F0C(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22ECE2134(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22ECE2134(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F495A90
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22ECE2134(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22ECE67B8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22ECE1F0C(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22ECE680C(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22ECE76F0(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

uint64_t sub_22ECE6FB8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22ECE729C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22ECE1F0C(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22ECE67B8((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22ECE680C((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22ECD6590(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

_QWORD *sub_22ECE76F0(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22ECE7EF0((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22ECE7ABC((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22ECE2134(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22ECE7ABC(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22ECE7EF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22ECE81D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22ECE680C(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22ECE8800(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22ECE67B8(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22ECE67B8((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22ECE8CC8(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22ECE8CC8(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22ECE8CC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22ECE1F0C(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22ECE2134(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22ECE91E4(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*(unsigned int *)(v9 + 1704);
    sub_22EB4DDB8(v9 + 3688, &v41, (int *)&v42, (__int16 *)(v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *(unsigned int *)(v9 + 3696);
    v11 = v10 - 2;
    v12 = *(_QWORD *)(v9 + 3688);
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)(v9 + 1693) = 0;
    if (*(_DWORD *)(v9 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08(v9 + 1840, (uint64_t *)(v15 - 496));
    }
    v16 = sub_22ECD6590(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3, v17 = sub_22EB14270(*a1, v16 & 0xFFFFFFFFFFFFFFFELL, v45), (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != (v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v28 = sub_22ECE67B8((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(v26 + 11992) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22ECE67B8((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454(*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22ECE9604(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v10;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  int *v15;
  uint64_t v16;

  v7 = a3;
  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v16 = *(_QWORD *)((char *)&unk_22F495A90
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v16 = 1;
  v12 = sub_22ECE2134(a1, a2, v10, ((unint64_t)a4 + v16 + 3) & -v16, a5, a6);
  result = 0;
  if (v12 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v12 == *(_QWORD *)(v7 + 32)
      || (v7 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(v7 + 16) >> 19) & 1, *a4), result = 0, v7 >= 0x10))
    {
      v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || (*(_DWORD *)(v14 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v14);
      sub_22EEB5360(a2, v7, 4uLL, 4);
      *v15 = *a4;
      return v7;
    }
  }
  return result;
}

uint64_t sub_22ECE9718(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22ECD6590(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22ECD6590(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22ECE99AC(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22ECE99AC(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22ECD6590(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22ECD6590(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22ECE9718(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22ECE9EC8(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22ECEA5C4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22ECEAAF4(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22ECEACF0((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22ECEAE18(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22ECEB0DC(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22ECEB264(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22ECEB47C(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22ECEB484(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22ECEB4D8(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22ECEB7C0(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22ECEB868(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22ECEBA3C((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22ECEBD64(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22ECEBDDC(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22ECEC000((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22ECEC00C(a1, a2);
      break;
    case 0x16u:
      result = sub_22ECEC078(a1, a2);
      break;
    case 0x17u:
      result = sub_22ECEC0E4(a1, a2);
      break;
    case 0x18u:
      result = sub_22ECEC150(a1, a2);
      break;
    case 0x19u:
      result = sub_22ECEC1BC(a1, a2);
      break;
    case 0x1Au:
      result = sub_22ECEC22C(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22ECEC298(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22ECEC304(a1, a2);
      break;
    case 0x1Du:
      result = sub_22ECEC370(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22ECEC3DC(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22ECEC448(a1, a2);
      break;
    case 0x20u:
      result = sub_22ECEC4B4(a1, a2);
      break;
    case 0x21u:
      result = sub_22ECEC520(a1, a2);
      break;
    case 0x22u:
      result = sub_22ECEC58C(a1, a2);
      break;
    case 0x23u:
      result = sub_22ECEC5F8(a1, a2);
      break;
    case 0x24u:
      result = sub_22ECEC664(a1, a2);
      break;
    case 0x25u:
      result = sub_22ECEC6D0(a1, a2);
      break;
    case 0x26u:
      result = sub_22ECEC73C(a1, a2);
      break;
    case 0x27u:
      result = sub_22ECEC7A8(a1, a2);
      break;
    case 0x28u:
      result = sub_22ECEC814(a1, a2);
      break;
    case 0x29u:
      result = sub_22ECEC880(a1, a2);
      break;
    case 0x2Au:
      result = sub_22ECEC8EC(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22ECEC958(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22ECEC9C4(a1, a2);
      break;
    case 0x2Du:
      result = sub_22ECECA30(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22ECECA9C(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22ECECB08(a1, a2);
      break;
    case 0x30u:
      result = sub_22ECECB74(a1, a2);
      break;
    case 0x31u:
      result = sub_22ECECBE0(a1, a2);
      break;
    case 0x32u:
      result = sub_22ECECC4C(a1, a2);
      break;
    case 0x33u:
      result = sub_22ECECCB8(a1, a2);
      break;
    case 0x34u:
      result = sub_22ECECD24(a1, a2);
      break;
    case 0x35u:
      result = sub_22ECECD90(a1, a2);
      break;
    case 0x36u:
      result = sub_22ECECDFC(a1, a2);
      break;
    case 0x37u:
      result = sub_22ECECE68(a1, a2);
      break;
    case 0x38u:
      result = sub_22ECECED4(a1, a2);
      break;
    case 0x39u:
      result = sub_22ECECF40(a1, a2);
      break;
    case 0x3Au:
      result = sub_22ECECFAC(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22ECED018(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22ECED084(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22ECED0F0(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22ECED15C(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22ECED1C8(a1, a2);
      break;
    case 0x42u:
      result = sub_22ECED234(a1, a2);
      break;
    case 0x43u:
      result = sub_22ECED2A0(a1, a2);
      break;
    case 0x44u:
      result = sub_22ECED30C(a1, a2);
      break;
    case 0x45u:
      result = sub_22ECED378(a1, a2);
      break;
    case 0x46u:
      result = sub_22ECED3E4(a1, a2);
      break;
    case 0x47u:
      result = sub_22ECED450(a1, a2);
      break;
    case 0x48u:
      result = sub_22ECED4BC(a1, a2);
      break;
    case 0x49u:
      result = sub_22ECED528(a1, a2);
      break;
    case 0x4Au:
      result = sub_22ECED594(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22ECED600(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22ECED66C(a1, a2);
      break;
    case 0x4Du:
      result = sub_22ECED6D8(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22ECED744(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22ECED7B0(a1, a2);
      break;
    case 0x50u:
      result = sub_22ECED81C(a1, a2);
      break;
    case 0x51u:
      result = sub_22ECED888(a1, a2);
      break;
    case 0x52u:
      result = sub_22ECED8F4(a1, a2);
      break;
    case 0x53u:
      result = sub_22ECED960(a1, a2);
      break;
    case 0x54u:
      result = sub_22ECED9CC(a1, a2);
      break;
    case 0x55u:
      result = sub_22ECEDA38(a1, a2);
      break;
    case 0x56u:
      result = sub_22ECEDAA4((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22ECEDB90(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22ECEDBFC((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22ECEDCB0((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22ECEDD28(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22ECEDF50(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22ECEDFBC(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22ECEE0B0(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22ECEE100(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22ECEE16C(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22ECEE1B4(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22ECEE268(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22ECEE478(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22ECEE4C8(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22ECEE5F0(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22ECD6590(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22ECEE748((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22ECEE7F4((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22ECEA5C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22ECD6590(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22ECD6590(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22ECD6590(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22ECEAAF4(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22ECD6590(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22ECEACF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22ECE1F0C(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *((_DWORD *)v9 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22ECEAE18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECE9EC8(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 64), 0);
  if ((v13 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == (v5 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v15 = v2;
  }
  else
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
    if ((v15 & 1) != 0 && *(_QWORD *)(v2 + 64) != v14)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v14 + 8));
      return 1;
    }
  }
  v16 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v17)
  {
    v19 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
    if ((v19 & 1) != 0)
      return 1;
    v18 = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v18 != v2)
    return sub_22ED33C64(*a1, v18, v17);
  return v2;
}

uint64_t sub_22ECEB0DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECEB47C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22ECEACF0((_QWORD **)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22ECEB264(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22ECE67B8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22ECE9EC8(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22ECEB47C(uint64_t *a1, uint64_t a2)
{
  return sub_22ECEE920(a1, a2, 0);
}

uint64_t sub_22ECEB484(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22ECEB4D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22ECE9EC8(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22ECE9EC8(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22ECE9EC8(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22ECE9EC8(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22ECEB7C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22ECEB868(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22ECEEB88((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECEBA3C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22ECE9EC8(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22ECEEB88((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22ECE9EC8(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22ECE9EC8(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22ECEBD64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22ECEBDDC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECE680C(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22ECEEC8C((__n128 *)&v19, a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22ECEB47C(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22ECEC000(uint64_t a1, uint64_t a2)
{
  return sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22ECEC00C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC078(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC0E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC150(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC1BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC22C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC298(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC304(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC370(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC3DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC448(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC4B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC520(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC58C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC5F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC664(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC6D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC73C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC7A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC814(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC880(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC8EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC958(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEC9C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECA30(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECA9C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECB08(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECB74(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECBE0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECC4C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECCB8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECD24(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECD90(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECDFC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECE68(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECED4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECF40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECECFAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED018(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED084(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED0F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED15C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED1C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED234(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED2A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED30C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED378(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED3E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED450(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED4BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED528(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED594(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED600(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED66C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED6D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED744(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED7B0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED81C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED888(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED8F4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED960(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECED9CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEDA38(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22ECEEE94(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22ECEDAA4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22ECE1F0C(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22ECE67B8((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22ECEDB90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22ECEDBFC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECE9EC8(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22ECEDCB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22ECEDD28(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22ECE9EC8(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22ECE9EC8(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22ECEDF50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22ECEDFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22ECEE0B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECE99AC(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22ECEE100(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECEB47C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECEE16C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECEB47C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECEE1B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ECEB47C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22ECEE16C(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22ECEE100(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22ECEE268(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22ECD6590(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22ECD6590(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22ECE9EC8(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22ECEE478(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECEE4C8(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22ECE9EC8(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22ECEEB88((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22ECE9EC8(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22ECEE5F0(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22ECE9EC8(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22ECEE748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22ECE9EC8(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECEE7F4(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22ECEEB88((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22ECE9EC8(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22ECEE920(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22ECE9EC8(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22ECEEB88(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22ECD6590(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

__n128 sub_22ECEEC8C(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22ECE67B8((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22ECE1F0C((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22ECEEE94(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t i;
  unint64_t v20;
  uint64_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[18];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v29 = v31;
  v30 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (v4)
  {
    v7 = *v4;
    v6 = (__n128 **)(v4 + 4);
    v5 = v7;
    if (v7 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_6:
      v8 = 8 * v5;
      while (1)
      {
        v9 = *v6;
        if (*v6)
        {
          v10 = (_QWORD *)*a1;
          v11 = v9->n128_u32[2];
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = v11;
          switch(v11)
          {
            case 3u:
              v12 = sub_22ECEF5D4(a1, v9);
              goto LABEL_72;
            case 4u:
              v12 = sub_22ECEF758((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 5u:
              v12 = (uint64_t)sub_22ECEF7A4(a1, (unsigned int *)v9);
              goto LABEL_72;
            case 6u:
              v12 = sub_22ECEF91C((uint64_t **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 7u:
              v12 = sub_22ECEFAA0((uint64_t **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0xAu:
              v12 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
              goto LABEL_72;
            case 0xCu:
              v12 = sub_22ECEFAEC((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0xEu:
              v12 = (uint64_t)sub_22ECEFB38((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0xFu:
              v12 = (uint64_t)sub_22ECEFC84((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x10u:
              sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
              goto LABEL_72;
            case 0x11u:
              v12 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
              goto LABEL_72;
            case 0x12u:
              v12 = (uint64_t)sub_22ECEFDD0(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x13u:
              v12 = sub_22ECEFF64((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x14u:
              v12 = sub_22ECEFFB0((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x15u:
              v12 = sub_22ECF0008(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x16u:
              v12 = sub_22ECF0060((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x18u:
              v12 = sub_22ECF00B0((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Au:
              v12 = (uint64_t)sub_22ECF0100((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x1Bu:
              v12 = sub_22ECF024C((uint64_t)a1, (uint64_t *)v9);
              goto LABEL_72;
            case 0x1Cu:
              v12 = sub_22ECF02D0(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Du:
              v12 = sub_22ECF031C((uint64_t)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x1Eu:
              v12 = (uint64_t)sub_22ECF0468((uint64_t)a1, (int *)v9);
              goto LABEL_72;
            case 0x1Fu:
              v12 = (uint64_t)sub_22ECF05BC(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x20u:
              v12 = sub_22ECF0A30((uint64_t)v10, (uint64_t)v9);
              goto LABEL_72;
            case 0x21u:
              v12 = sub_22ECF0A80((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x22u:
              v12 = (uint64_t)sub_22ECF0ACC((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x23u:
              v12 = sub_22ECF0C24((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x24u:
              v12 = sub_22ECF0C70(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x25u:
              v12 = sub_22ECF0CC4(a1, (unsigned int *)v9);
              goto LABEL_72;
            case 0x27u:
              v12 = (uint64_t)sub_22ECF1100((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x29u:
              v12 = sub_22ECF124C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x2Au:
              v12 = (uint64_t)sub_22ECF13E0((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x2Bu:
              v12 = sub_22ECF1538((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x2Cu:
              v12 = sub_22ECF1690((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x2Eu:
              v12 = (uint64_t)sub_22ECF1820(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x34u:
              v12 = sub_22ECF1CF8(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x35u:
              v12 = (uint64_t)sub_22ECF1D44((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x37u:
              v12 = sub_22ECF1E90(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x38u:
              v12 = sub_22ECF1EDC((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x39u:
              v12 = sub_22ECF1F28((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Au:
              v12 = sub_22ECF1F74((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Bu:
              v12 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
              goto LABEL_72;
            case 0x3Cu:
              v12 = sub_22ECF1FC0((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Du:
              v12 = sub_22ECF2018(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Eu:
              v12 = sub_22ECF2080((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x3Fu:
              v12 = (uint64_t)sub_22ECF20CC((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x40u:
              v12 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
              goto LABEL_72;
            case 0x42u:
              v12 = sub_22ECF2218(a1, v9);
              goto LABEL_72;
            case 0x46u:
              v12 = sub_22ECF265C((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x47u:
              v12 = sub_22ECF26A8((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x49u:
              v12 = (uint64_t)sub_22ECF270C((_QWORD **)a1, (int *)v9);
              goto LABEL_72;
            case 0x4Bu:
              v12 = sub_22ECF2858((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x4Cu:
              v12 = (uint64_t)sub_22ECF28A4((uint64_t)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x4Du:
              v12 = sub_22ECF2A3C(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x4Eu:
              v12 = sub_22ECF2E78((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x51u:
              v12 = (uint64_t)sub_22ECF2EC4(a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x58u:
              v12 = sub_22ECF3338((_QWORD **)a1, (uint64_t)v9);
              goto LABEL_72;
            case 0x59u:
              v12 = (uint64_t)sub_22ECF3384((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x5Au:
              v12 = (uint64_t)sub_22ECF34DC((_QWORD **)a1, v9);
              goto LABEL_72;
            case 0x5Bu:
              v12 = (uint64_t)sub_22ECF3634(a1, (int *)v9);
LABEL_72:
              v9 = (__n128 *)v12;
              break;
            default:
              break;
          }
          v14 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v14);
          if (!v9)
            goto LABEL_78;
          v15 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v30;
          }
          *((_QWORD *)v29 + v15) = v9;
        }
        else
        {
          v13 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = v30;
          }
          *((_QWORD *)v29 + v13) = 0;
        }
        LODWORD(v30) = v30 + 1;
LABEL_78:
        ++v6;
        v8 -= 8;
        if (!v8)
          goto LABEL_79;
      }
    }
    if ((_DWORD)v5)
      goto LABEL_6;
LABEL_79:
    v16 = (unsigned int *)a2[1].n128_u64[1];
    if (v16 && *((_BYTE *)v16 + 8) && *(_QWORD *)&v16[2 * *v16 + 4 + 2 * v16[1]])
    {
      sub_22EC84DA0(*a1, a2->n128_i32[2]);
      v17 = *a1;
      sub_22E905168(*a1, 0);
      v18 = a2->n128_u32[2];
      if (v18 <= 0x34 && ((1 << v18) & 0x10000800000204) != 0)
      {
        i = *(_QWORD *)(a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                      + 16);
      }
      else
      {
        for (i = *(_QWORD *)(a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                            + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
          ;
      }
      v20 = sub_22ECE9EC8(a1, i, 0);
      if (v20 >= 2
        && sub_22F4219DC(a2->n128_u32[2])
        && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
      {
        v20 = sub_22EC86C20();
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v17 + 1896) + 8 * *(unsigned int *)(v17 + 1904) - 8);
      --*(_QWORD *)(v21 + 360);
      if ((sub_22EC8617C((_QWORD *)*a1, v20, (uint64_t *)v29, v30) & 1) != 0)
        goto LABEL_91;
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5 != v30)
  {
LABEL_91:
    v23 = 1;
    goto LABEL_92;
  }
  v27.n128_u64[0] = 0;
  v27.n128_u32[2] = 0;
  v28 = 0;
  v22 = a2->n128_u32[2];
  if (v22 == 9)
  {
    v27 = a2[2];
    v28 = a2[3].n128_u64[0];
    sub_22ECEEC8C(&v25, a1, &v27);
    v27 = v25;
    v28 = v26;
  }
  v23 = sub_22EC87DEC();
LABEL_92:
  if (v29 != v31)
    free(v29);
  return v23;
}

uint64_t sub_22ECEF5D4(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22ECD6590(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22ECD6590(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22ECEF758(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECEF7A4(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ECD6590(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22ECEF91C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22ECD6590(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22ECEFAA0(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECEFAEC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECEFB38(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22ECEFC84(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22ECEFDD0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22ECD6590(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22ECD6590(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECEFF64(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECEFFB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF0008(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF0060(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF00B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECF0100(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF024C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22ECD6590(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22ECF02D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF031C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22ECD6590(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22ECF0468(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
LABEL_11:
    if (v9)
      return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
  }
  return 0;
}

_DWORD *sub_22ECF05BC(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD **v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  __n128 v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v49 = v51;
  v50 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  v39.n128_u64[0] = 0;
  v39.n128_u32[2] = 0;
  v46 = v48;
  v47 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ECD6590(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v50;
      }
      *((_QWORD *)v49 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v50) = v50 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECE680C(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v36 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(__n128 *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if (v39.n128_u64[0])
  {
    sub_22ECEEC8C(&v52, a1, &v39);
    v39 = v52;
    v40 = v53[0];
    if (!v52.n128_u64[0])
      goto LABEL_46;
  }
  v38 = a2;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)(a2 + 104 + 8 * v17);
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      if (*v18)
      {
        v52.n128_u64[0] = (unint64_t)v53;
        v52.n128_u64[1] = 0x800000000;
        v21 = *(unsigned __int8 *)v20;
        v22 = v21 == 211;
        if (v21 == 211)
          v23 = v20;
        else
          v23 = 0;
        v24 = v23 + 16;
        if (v22)
          v25 = v24;
        else
          v25 = v20 + 20;
        v26 = v20[1];
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v25 & 0xFFFFFFFFFFFFFFFCLL;
            v44 = v28;
            v45 = 0;
            if (sub_22E793870(a1 + 1, &v44, &v45)
              && v45 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v28 = v45[1];
            }
            v29 = *(unsigned int *)(v28 + 28);
            v26 = v52.n128_u32[2];
            if (v52.n128_u32[2] >= (unint64_t)v52.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v26 = v52.n128_u32[2];
            }
            *(_QWORD *)(v52.n128_u64[0] + 8 * v26) = (v29 >> 13) & 3 | v28;
            LODWORD(v26) = ++v52.n128_u32[2];
            ++v25;
            v27 -= 8;
          }
          while (v27);
        }
        v30 = *(_QWORD *)(*a1 + 88);
        v31 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v32 = (void *)sub_22E3CD3D4(v30 + 2032, LODWORD(__n[1]), 3);
            memcpy(v32, (const void *)__n[0], LODWORD(__n[1]));
            v31 = *((_QWORD *)&v41 + 1);
            LODWORD(v26) = v52.n128_u32[2];
          }
          else
          {
            v32 = (void *)__n[0];
          }
        }
        else
        {
          v32 = 0;
        }
        v34 = sub_22F0605AC(v30, 0, v31, (uint64_t)v32, (uint64_t)&v39, 1, (*v20 >> 20) & 1, (const void *)v52.n128_u64[0], v52.n128_u64[0] + 8 * v26);
        v35 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = v47;
        }
        *((_QWORD *)v46 + v35) = v34;
        LODWORD(v47) = v47 + 1;
        if ((_QWORD *)v52.n128_u64[0] != v53)
          free((void *)v52.n128_u64[0]);
      }
      else
      {
        v33 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v47;
        }
        *((_QWORD *)v46 + v33) = 0;
        LODWORD(v47) = v47 + 1;
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v36 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v38 + 80), 2u, (int *)(v38 + 88), 2, (uint64_t)&v41, (__int128 *)&v39, v16, (uint64_t)v49, v50, v43, (unsigned __int8 **)v46, v47);
LABEL_48:
  if (v46 != v48)
    free(v46);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v49 != v51)
    free(v49);
  return v36;
}

uint64_t sub_22ECF0A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 11992) != -1)
  {
    v2 = *(_QWORD *)a2;
    a2 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 12, 3);
    *(_DWORD *)(a2 + 8) = 32;
    *(_QWORD *)a2 = v2;
  }
  return a2;
}

uint64_t sub_22ECF0A80(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ECF0ACC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ECF0C24(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF0C70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF0CC4(uint64_t *a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = v46;
  v45 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = v2 + 24;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *((_QWORD *)v2 + 7), *((_QWORD *)v2 + 8));
    v33 = *(__n128 *)(v2 + 18);
    v34 = *((_QWORD *)v2 + 11);
    if (!v33.n128_u64[0] || (sub_22ECEEC8C((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = v2[4];
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = &v2[2 * v11 + 24 + 2 * v11 + 2 * v11 + 2 * v11];
        v15 = &v14[2 * v11];
        do
        {
          v16 = *(_DWORD **)v14;
          if (*(_QWORD *)v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          v14 += 2;
        }
        while (v14 != v15);
        v13 = v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *v2, v2[3], v2[12], v2[1], &v35, &v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22ECF1100(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF124C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22ECD6590(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22ECF13E0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22ECF1538(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF1690(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22ECD6590(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22ECF1820(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  size_t __n[2];
  int v49[3];
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  void *v55;
  uint64_t v56;
  _BYTE v57[128];
  __int128 v58;
  _QWORD v59[10];

  v59[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v49[0] = *(_DWORD *)a2;
  v49[1] = v6;
  v49[2] = v4;
  v55 = v57;
  v56 = 0x1000000000;
  v47 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v45 = 0;
  DWORD2(v45) = 0;
  v52 = v54;
  v53 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22ECD6590(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v56;
      }
      *((_QWORD *)v55 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v56) = v56 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECE680C(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v47, v14, v15);
  v45 = *(_OWORD *)(a2 + 56);
  v46 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v45)
  {
    sub_22ECEEC8C((__n128 *)&v58, a1, (__n128 *)&v45);
    v45 = v58;
    v46 = v59[0];
    if (!(_QWORD)v58)
      goto LABEL_46;
  }
  v39 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v58 = v59;
        *((_QWORD *)&v58 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v50 = v27;
            v51 = 0;
            if (sub_22E793870(a1 + 1, &v50, &v51)
              && v51 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v51[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v58);
            if (DWORD2(v58) >= (unint64_t)HIDWORD(v58))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v58);
            }
            *(_QWORD *)(v58 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v58);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v47 + 1);
            LODWORD(v25) = DWORD2(v58);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v45, 1, (*v19 >> 20) & 1, (const void *)v58, v58 + 8 * v25);
        v34 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v53;
        }
        *((_QWORD *)v52 + v34) = v33;
        LODWORD(v53) = v53 + 1;
        if ((_QWORD *)v58 != v59)
          free((void *)v58);
      }
      else
      {
        v32 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v53;
        }
        *((_QWORD *)v52 + v32) = 0;
        LODWORD(v53) = v53 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v42 = v47;
  sub_22F0AB560(v43, (uint64_t)&v47 + 8);
  v40 = v45;
  v41 = v46;
  v35 = sub_22EC94100((_QWORD *)*a1, v39 + 80, 5u, v39 + 100, 5, (uint64_t)&v42, &v40, *(_DWORD *)(v39 + 120), *(_BYTE *)(v39 + 124), v37, *(_DWORD *)(v39 + 128), v38, (uint64_t)v55, v56, v49, 0, (unsigned __int8 **)v52, v53);
  if (v44)
    free(v43[1]);
LABEL_49:
  if (v52 != v54)
    free(v52);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v55 != v57)
    free(v55);
  return v35;
}

uint64_t sub_22ECF1CF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECF1D44(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF1E90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF1EDC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF1F28(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF1F74(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF1FC0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22ECD6590(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECF2018(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22ECF2080(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECF20CC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF2218(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22ECEEC8C((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22ECF265C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECF26A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECF270C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22ECF2858(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22ECF28A4(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22ECD6590(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22ECF2A3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22ECEEC8C((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22ECF2E78(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22ECF2EC4(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD **v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  __n128 v52;
  _QWORD v53[10];

  v53[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v49 = v51;
  v50 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  v39.n128_u64[0] = 0;
  v39.n128_u32[2] = 0;
  v46 = v48;
  v47 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22ECD6590(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v50;
      }
      *((_QWORD *)v49 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v50) = v50 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22ECE680C(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v36 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(__n128 *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if (v39.n128_u64[0])
  {
    sub_22ECEEC8C(&v52, a1, &v39);
    v39 = v52;
    v40 = v53[0];
    if (!v52.n128_u64[0])
      goto LABEL_46;
  }
  v38 = a2;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)(a2 + 104 + 8 * v17);
    v19 = &v18[v17];
    do
    {
      v20 = *v18;
      if (*v18)
      {
        v52.n128_u64[0] = (unint64_t)v53;
        v52.n128_u64[1] = 0x800000000;
        v21 = *(unsigned __int8 *)v20;
        v22 = v21 == 211;
        if (v21 == 211)
          v23 = v20;
        else
          v23 = 0;
        v24 = v23 + 16;
        if (v22)
          v25 = v24;
        else
          v25 = v20 + 20;
        v26 = v20[1];
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v25 & 0xFFFFFFFFFFFFFFFCLL;
            v44 = v28;
            v45 = 0;
            if (sub_22E793870(a1 + 1, &v44, &v45)
              && v45 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v28 = v45[1];
            }
            v29 = *(unsigned int *)(v28 + 28);
            v26 = v52.n128_u32[2];
            if (v52.n128_u32[2] >= (unint64_t)v52.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v26 = v52.n128_u32[2];
            }
            *(_QWORD *)(v52.n128_u64[0] + 8 * v26) = (v29 >> 13) & 3 | v28;
            LODWORD(v26) = ++v52.n128_u32[2];
            ++v25;
            v27 -= 8;
          }
          while (v27);
        }
        v30 = *(_QWORD *)(*a1 + 88);
        v31 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v32 = (void *)sub_22E3CD3D4(v30 + 2032, LODWORD(__n[1]), 3);
            memcpy(v32, (const void *)__n[0], LODWORD(__n[1]));
            v31 = *((_QWORD *)&v41 + 1);
            LODWORD(v26) = v52.n128_u32[2];
          }
          else
          {
            v32 = (void *)__n[0];
          }
        }
        else
        {
          v32 = 0;
        }
        v34 = sub_22F0605AC(v30, 0, v31, (uint64_t)v32, (uint64_t)&v39, 1, (*v20 >> 20) & 1, (const void *)v52.n128_u64[0], v52.n128_u64[0] + 8 * v26);
        v35 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = v47;
        }
        *((_QWORD *)v46 + v35) = v34;
        LODWORD(v47) = v47 + 1;
        if ((_QWORD *)v52.n128_u64[0] != v53)
          free((void *)v52.n128_u64[0]);
      }
      else
      {
        v33 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v47;
        }
        *((_QWORD *)v46 + v33) = 0;
        LODWORD(v47) = v47 + 1;
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v36 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v38 + 80), 2u, (int *)(v38 + 88), 2, (uint64_t)&v41, (__int128 *)&v39, v16, (uint64_t)v49, v50, v43, (unsigned __int8 **)v46, v47);
LABEL_48:
  if (v46 != v48)
    free(v46);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v49 != v51)
    free(v49);
  return v36;
}

uint64_t sub_22ECF3338(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22ECF3384(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ECF34DC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22ECD6590(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22ECF3634(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22ECD6590(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22ECD6590(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22ECF37A0(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22ECE1F0C((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F495A90
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22ECE81D8(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22ECF3A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22ECF3D30(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22ECE680C(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22ECEEC8C(&v18, a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22ECF3A90((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22ECF3F04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22ECE1F0C((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22ECD6590(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22ECF3FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ECF3FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ECF3FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22ECF3FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22ECF3FF8()
{
  JUMPOUT(0x22ECF4000);
}

unint64_t sub_22ECF4014(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22ECE99AC(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22ECF4184(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECD6590(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22ECE680C(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22ECF3A90((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22ECEEC8C((__n128 *)v51, a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t *sub_22ECF4748(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = 0;
  v4 = sub_22ECD72C4((uint64_t)a1, *a2, &v10);
  v5 = v10;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_22ECF4828((uint64_t)a1, v7);
    v10 = 0;
    sub_22ECD72C4((uint64_t)a1, *a2, &v10);
    v5 = v10;
  }
  *a1 += 2;
  if (*v5 != -4096)
    --a1[1];
  v8 = *a2;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = v8;
  return v5 + 1;
}

uint64_t sub_22ECF4828(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[96];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v15;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
        v9 += 24;
      }
      v8 += 24;
    }
    while (v8 != 96);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22ECF49BC(a1, (uint64_t)v15, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v14 = 3 * v7;
    sub_22ECF49BC(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v14);
    return llvm::deallocate_buffer(v6, (void *)(8 * v14));
  }
}

uint64_t sub_22ECF49BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22ECD72C4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22ECF4A80(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = v10;
        v9[1] = *(_QWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 128);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F34142C(a1, v14, v9);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F34142C(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(16 * v7));
  }
}

_QWORD *sub_22ECF4BFC(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F34171C(a1, (uint64_t)v4, (uint64_t)v4 + 88 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22ECF4CC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v7 = a2 + 1;
      v8 = *((unsigned int *)a2 + 2);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = v4 + 16 * v8;
          v12 = *(_DWORD **)a1;
          do
          {
            *(_QWORD *)v12 = *(_QWORD *)v4;
            v12[2] = *(_DWORD *)(v4 + 8);
            v4 += 16;
            v12 += 4;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = v4 + 16 * v9;
            v14 = *(_DWORD **)a1;
            do
            {
              *(_QWORD *)v14 = *(_QWORD *)v4;
              v14[2] = *(_DWORD *)(v4 + 8);
              v4 += 16;
              v14 += 4;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*a2 + 16 * v9), *a2 + 16 * v10 - (*a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

uint64_t *sub_22ECF4E18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *((unsigned int *)a1 + 2);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *a2;
        v8 = *a2 + 16 * v4;
        v9 = *a1;
        do
        {
          *(_QWORD *)v9 = *(_QWORD *)v7;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v7 + 8);
          v7 += 16;
          v9 += 16;
        }
        while (v7 != v8);
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 3) >= v4)
      {
        if ((_DWORD)v5)
        {
          v10 = *a2;
          v11 = *a2 + 16 * v5;
          v12 = *a1;
          do
          {
            *(_QWORD *)v12 = *(_QWORD *)v10;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v10 + 8);
            v10 += 16;
            v12 += 16;
          }
          while (v10 != v11);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *((_DWORD *)a1 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = 0;
        v6 = *((unsigned int *)a2 + 2);
      }
      if (v5 != v6)
        memcpy((void *)(*a1 + 16 * v5), (const void *)(*a2 + 16 * v5), *a2 + 16 * v6 - (*a2 + 16 * v5));
    }
    *((_DWORD *)a1 + 2) = v4;
  }
  return a1;
}

uint64_t sub_22ECF4F24(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5, char a6)
{
  unsigned __int8 *v10;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v26[24];
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t *v30;
  char v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v10 = (unsigned __int8 *)a2;
  sub_22EFF605C(a2);
  v13 = v12;
  sub_22F0D4E74((uint64_t)v10);
  v14 = 0;
  v28 = a4;
  v29 = a5;
  v38 = v15;
  v27 = a1;
  v30 = a3;
  v31 = 0;
  v32 = a6;
  v33 = 0;
  v34 = 257;
  v35 = 1;
  v36 = v13;
  v37 = v15;
  if (v10)
  {
    do
    {
      v14 = v10;
      v16 = *v10;
      if (v16 > 0xD5)
      {
        if (v16 == 233)
        {
          if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
            break;
          v18 = (unsigned __int8 **)(v10 + 16);
        }
        else
        {
          if (v16 != 214)
            break;
          v18 = (unsigned __int8 **)(v10 + 24);
        }
      }
      else if (v16 == 155)
      {
        if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
          break;
        if (v10[48])
          v18 = (unsigned __int8 **)(v10 + 24);
        else
          v18 = (unsigned __int8 **)(v10 + 32);
      }
      else
      {
        if (v16 != 176)
          break;
        v17 = *((unsigned int *)v10 + 5);
        if ((_DWORD)v17 == -1)
          break;
        v18 = (unsigned __int8 **)&v10[8 * v17 + 40];
      }
      v10 = *v18;
    }
    while (*v18 != v14);
  }
  if (!sub_22ECF5244(&v27, v14))
    return 0;
  if (*(_DWORD *)(a1[9] + 72) >= 0x32u)
  {
    v19 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v19)
    {
      if (a4 == 81 || a4 == 31)
      {
        v20 = *a3;
        v21 = v13;
        v22 = 16 * v19;
        v23 = v20 - 16;
        do
        {
          v24 = (unsigned __int8 *)(*(_QWORD *)(v23 + v22) & 0xFFFFFFFFFFFFFFFCLL);
          if (*v24 == 191)
          {
            if (*((_QWORD *)v24 + 4))
              return v33;
            sub_22E8FCA40(a1, v21, 0xA9Du, 0, (uint64_t)v26);
            sub_22E8906A0((uint64_t)v26, &v38);
            sub_22E903BEC(v26);
          }
          v22 -= 16;
        }
        while (v22);
      }
    }
  }
  return v33;
}

uint64_t sub_22ECF50FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  sub_22EFF605C(a4);
  v17 = v16;
  sub_22F0D4E74(a4);
  v33 = v18;
  v32 = 0;
  v31 = 0;
  v23[0] = &v32;
  v23[1] = a1;
  v23[2] = a3;
  v24 = a5;
  v25 = v17;
  v26 = v18;
  v27 = a8;
  v28 = &v31;
  v29 = a6;
  v30 = a7;
  result = sub_22EC829E0(a2, a3, a5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF66F8, (uint64_t)v23);
  if ((a5 & 1) == 0 && v31 && !v32)
  {
    sub_22E8FCA40(a1, v17, 0x10C4u, 0, (uint64_t)v23);
    sub_22E8906A0((uint64_t)v23, &v33);
    sub_22E903BEC((unsigned int *)v23);
    sub_22EFF605C(v31);
    sub_22E8FCA40(a1, v20, 0x180Cu, 0, (uint64_t)v23);
    sub_22F0D4E74(v31);
    v22 = v21;
    sub_22E8906A0((uint64_t)v23, &v22);
    sub_22E903BEC((unsigned int *)v23);
    return 1;
  }
  return result;
}

uint64_t sub_22ECF5244(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22ECF60B4(a1, (uint64_t)a2);
      default:
        goto LABEL_7;
    }
  }
  if (a2 && v2 == 233)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        return sub_22ECF61FC(a1, (uint64_t)a2);
      default:
LABEL_7:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X9 }
  return result;
}

uint64_t sub_22ECF60B4(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) < 0x32u
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 39)
  {
    sub_22ECF62F4((uint64_t)a1);
    return 0;
  }
  v4 = sub_22EFFA6B0(*(unsigned __int8 **)(a2 + 16));
  v5 = sub_22EFFA6B0(*(unsigned __int8 **)(a2 + 24));
  v6 = v5;
  v7 = a1[2];
  v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v14 = v5;
    v15 = a1[2];
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v14;
    v7 = v15;
    v8 = *(_QWORD *)v15 + 16 * *(unsigned int *)(v15 + 8);
    *(_QWORD *)v8 = a2 & 0xFFFFFFFFFFFFFFFDLL;
    *(_QWORD *)(v8 + 8) = 0;
    LODWORD(v8) = *(_DWORD *)(v15 + 8);
  }
  else
  {
    v9 = (unint64_t *)(*(_QWORD *)v7 + 16 * v8);
    *v9 = a2 & 0xFFFFFFFFFFFFFFFDLL;
    v9[1] = 0;
  }
  *(_DWORD *)(v7 + 8) = v8 + 1;
  v10 = a1[4];
  if (*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0))
  {
    if (!v10)
    {
      v11 = a1;
      v12 = v4;
      return sub_22ECF5244(v11, v12);
    }
    return 1;
  }
  if (v10)
    return 1;
  v11 = a1;
  v12 = v6;
  return sub_22ECF5244(v11, v12);
}

uint64_t sub_22ECF61FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) >= 0x32u && (*(_DWORD *)a2 & 0x7C0300) == 0x140100)
  {
    if (a1[4])
      return 1;
    v3 = a1[2];
    v4 = *(unsigned int *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v8 = a2;
      v9 = a1[2];
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v8;
      v3 = v9;
      v4 = *(_QWORD *)v9 + 16 * *(unsigned int *)(v9 + 8);
      *(_QWORD *)v4 = v8 & 0xFFFFFFFFFFFFFFFDLL;
      *(_QWORD *)(v4 + 8) = 0;
      LODWORD(v4) = *(_DWORD *)(v9 + 8);
    }
    else
    {
      v5 = (unint64_t *)(*(_QWORD *)v3 + 16 * v4);
      *v5 = a2 & 0xFFFFFFFFFFFFFFFDLL;
      v5[1] = 0;
    }
    *(_DWORD *)(v3 + 8) = v4 + 1;
    if (a1[4])
    {
      return 1;
    }
    else
    {
      v7 = sub_22EFFA6B0(*(unsigned __int8 **)(a2 + 16));
      return sub_22ECF5244(a1, v7);
    }
  }
  else
  {
    sub_22ECF62F4((uint64_t)a1);
    return 0;
  }
}

unsigned int *sub_22ECF62F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  unsigned int *v4;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8[24];

  v2 = *(_QWORD **)a1;
  if (*(_DWORD *)(v2[9] + 72) > 0x31u)
  {
    sub_22E8FCA40(v2, *(_DWORD *)(a1 + 44), 0x10B8u, 0, (uint64_t)v8);
    v7[0] = llvm::omp::getOpenMPClauseName();
    v7[1] = v6;
    v4 = (unsigned int *)sub_22F2F2210((uint64_t)v8, (uint64_t)v7);
    v3 = (uint64_t *)(a1 + 48);
  }
  else
  {
    sub_22E8FCA40(v2, *(_DWORD *)(a1 + 44), 0x1079u, 0, (uint64_t)v8);
    v3 = (uint64_t *)(a1 + 48);
    v4 = v8;
  }
  sub_22E8906A0((uint64_t)v4, v3);
  return sub_22E903BEC(v8);
}

BOOL sub_22ECF6388(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  char v14;
  uint64_t *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  char v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 == 191)
    v5 = a2;
  else
    v5 = 0;
  if (v4 == 107 || v5 && !*((_DWORD *)v5 + 12))
  {
    v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 2;
    else
      v7 = 0;
    if (v7)
    {
      v8 = *(_DWORD *)(v6 + 48);
      if (v8 > 0x40)
        v9 = **(_QWORD **)(v6 + 40);
      else
        v9 = (uint64_t)(*(_QWORD *)(v6 + 40) << -(char)v8) >> -(char)v8;
      return v9 != 1;
    }
    return 0;
  }
  v11 = *((_QWORD *)v5 + 3);
  v12 = *((_QWORD *)v5 + 4);
  if (!v11)
  {
LABEL_29:
    if (v12)
    {
      v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
        && *(_BYTE *)(v18 + 16) == 2)
      {
        v26 = 0;
        v27 = 0;
        LODWORD(v28) = 0;
        v13 = 0;
        if (sub_22F00554C(v12, (uint64_t)&v26, *(_QWORD *)(a1 + 88), 0, 0))
        {
          v24 = v30;
          if (v30 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const llvm::APInt *)&v29);
          else
            v23 = v29;
          v25 = v31;
          v20 = *(_DWORD *)(v18 + 48);
          if (v20 > 0x40)
            v21 = **(_QWORD **)(v18 + 40);
          else
            v21 = (uint64_t)(*(_QWORD *)(v18 + 40) << -(char)v20) >> -(char)v20;
          if (v24 > 0x40)
          {
            v22 = *v23;
            MEMORY[0x2348A0E84]();
          }
          else
          {
            v22 = (uint64_t)((_QWORD)v23 << -(uint64_t)v24) >> -(uint64_t)v24;
          }
          v13 = v21 != v22;
        }
        if (v28 >= 2)
          sub_22EF53BC0(&v28);
        return v13;
      }
    }
    return 0;
  }
  v26 = 0;
  v27 = 0;
  LODWORD(v28) = 0;
  v13 = sub_22F00554C(v11, (uint64_t)&v26, *(_QWORD *)(a1 + 88), 0, 0);
  if (!v13)
  {
    v16 = 1;
    goto LABEL_26;
  }
  v14 = v30;
  v24 = v30;
  if (v30 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const llvm::APInt *)&v29);
    v14 = v24;
    v25 = v31;
    if (v24 > 0x40)
    {
      v17 = *v23;
      MEMORY[0x2348A0E84]();
      goto LABEL_25;
    }
    v15 = v23;
  }
  else
  {
    v15 = v29;
  }
  v17 = (uint64_t)((_QWORD)v15 << -v14) >> -v14;
LABEL_25:
  v16 = v17 != 0;
LABEL_26:
  if (v28 >= 2)
    sub_22EF53BC0(&v28);
  if (!v16)
    goto LABEL_29;
  return v13;
}

void sub_22ECF6638(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (void *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_22F341AF8(a1, v4, (_QWORD *)v4 + v3);
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 8 * v10);
  }
}

uint64_t sub_22ECF66F8(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  char *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 **v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL4 v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  char v50;
  _BOOL4 v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70[24];

  v4 = a2;
  v5 = a1;
  if (*(_DWORD *)(a1 + 40) == a4 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 72) > 0x31u)
    return 0;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 56) + 16 * v8;
  v10 = &a2[2 * a3];
  v11 = -16 * v8;
  while (1)
  {
    v12 = v7;
    v13 = 16 * a3 + v7;
    v14 = v11 != v7;
    if (v11 == v7 || !v13)
      break;
    v15 = (unsigned __int8 *)(*(_QWORD *)(v9 + v7 - 16) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = *v15;
    if (*(_BYTE *)(v5 + 24) && ((v16 - 191) < 2 || v16 == 107))
    {
      v17 = (char *)v10 + v12;
      v18 = *(unsigned __int8 *)(*(_QWORD *)((char *)v10 + v12 - 16) & 0xFFFFFFFFFFFFFFFCLL);
      if ((v18 - 191) < 2 || v18 == 107)
      {
        v34 = *(_QWORD **)(v5 + 8);
        sub_22EFF605C((uint64_t)v15);
        sub_22E8FCA40(v34, v35, 0x10B3u, 0, (uint64_t)v70);
        sub_22F0D4E74(*(_QWORD *)(v9 + v12 - 16) & 0xFFFFFFFFFFFFFFFCLL);
        v69 = v36;
        sub_22E8906A0((uint64_t)v70, &v69);
        sub_22E903BEC(v70);
        v37 = *(_QWORD **)(v5 + 8);
        sub_22EFF605C(*((_QWORD *)v17 - 2) & 0xFFFFFFFFFFFFFFFCLL);
        sub_22E8FCA40(v37, v38, 0x180Cu, 0, (uint64_t)v70);
        v39 = *((_QWORD *)v17 - 2) & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_95;
      }
    }
    if (v16 == *(unsigned __int8 *)(*(_QWORD *)((char *)v10 + v12 - 16) & 0xFFFFFFFFFFFFFFFCLL))
    {
      v7 = v12 - 16;
      if (*(_QWORD *)(v9 + v12 - 8) == *(_QWORD *)((char *)v10 + v12 - 8))
        continue;
    }
    v14 = 1;
    break;
  }
  v19 = (_QWORD *)((char *)v10 + v12);
  v64 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  v65 = -16 * v8;
  v67 = v5;
  while (1)
  {
    v20 = v13;
    if (!v13)
      break;
    v21 = (char *)v4 + v13;
    v22 = (unsigned __int8 **)(*(_QWORD *)((char *)v4 + v13 - 16) & 0xFFFFFFFFFFFFFFFCLL);
    v23 = *(unsigned __int8 *)v22;
    if (v23 == 192)
    {
      v31 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v22[*((unsigned int *)v22 + 6) + 4] + 1) & 0xFFFFFFFFFFFFFFF0));
      goto LABEL_35;
    }
    if (v23 == 191)
    {
      v29 = sub_22EFFA6B0(v22[2]);
      v30 = sub_22F00338C(v29);
      v31 = v30 & 7 | *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
      goto LABEL_35;
    }
    if (v23 != 107)
      goto LABEL_44;
    v24 = v22 + 3;
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22[3] + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v26 = *(_DWORD *)(v25 + 16);
    if (v25)
      v27 = v26 == 11;
    else
      v27 = 0;
    if (!v27)
    {
      if (v25 && v26 == 44)
      {
        v28 = sub_22F114198(*(_QWORD *)(v25 + 24));
        if ((*(_BYTE *)(v28 + 74) & 1) == 0 && *(_QWORD *)(v28 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v25 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_34;
        }
      }
      else if (v26 != 9)
      {
        goto LABEL_34;
      }
LABEL_33:
      v24 = v22 + 2;
      goto LABEL_34;
    }
    if (((*(_DWORD *)(v25 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_33;
LABEL_34:
    v31 = *((_QWORD *)sub_22EFFA6B0(*v24) + 1);
    v4 = a2;
    v5 = v67;
LABEL_35:
    if (v31 < 0x10)
      goto LABEL_44;
    v32 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v32 == 32 || v32 == 39)
      goto LABEL_44;
    v19 -= 2;
    v33 = sub_22ECF6388(*(_QWORD *)(v5 + 8), (unsigned __int8 *)(*((_QWORD *)v21 - 2) & 0xFFFFFFFFFFFFFFFCLL), v31);
    v13 = v20 - 16;
    if (v33)
    {
      v19 = (_QWORD *)((char *)v4 + v20);
      goto LABEL_44;
    }
  }
  v19 = v4;
LABEL_44:
  if (v65 != v12 || v19 != v4)
  {
    v41 = *(_QWORD *)(*(_QWORD *)(v9 + v12 + 8) + 48);
    sub_22EFF605C(*(_QWORD *)(v9 + v12) & 0xFFFFFFFFFFFFFFFCLL);
    v43 = v42;
    v68 = v42;
    v44 = v41 & 0xFFFFFFFFFFFFFFF0;
    v45 = *(_QWORD *)v44;
    if (!*(_QWORD *)v44 || (v46 = *(_DWORD *)(v45 + 16), (v46 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_52;
      v45 = sub_22F10CF48(v45);
      if (!v45)
      {
        v4 = a2;
        v5 = v67;
        goto LABEL_52;
      }
      v46 = *(_DWORD *)(v45 + 16);
      v4 = a2;
      v5 = v67;
    }
    if ((v46 & 0x100000) != 0)
    {
      v4 = a2;
      v5 = v67;
      do
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v45)
        {
          v63 = *(_DWORD *)(v45 + 16);
          if ((v63 & 0xFE) == 0x28)
            continue;
        }
        v45 = sub_22F10CF48(v45);
        v63 = *(_DWORD *)(v45 + 16);
      }
      while ((v63 & 0x100000) != 0);
    }
    v44 = *(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_52:
    v47 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v47 == 39 || v47 == 32)
    {
      if (v65 == v12 || v19 == v4)
      {
        v60 = *(_QWORD **)(v5 + 8);
        v61 = v43;
        v62 = 4301;
      }
      else
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v9 + v12 - 16) & 0xFFFFFFFFFFFFFFFCLL) == *(unsigned __int8 *)(*(v19 - 2) & 0xFFFFFFFFFFFFFFFCLL))
        {
          v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + v12 - 8) + 32))(*(_QWORD *)(v9 + v12 - 8));
          if (v48 != (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v19 - 1) + 32))(*(v19 - 1)))
          {
            v49 = *(unsigned __int8 *)(v5 + 24);
            goto LABEL_59;
          }
        }
        v60 = *(_QWORD **)(v5 + 8);
        v61 = v43;
        v62 = 4323;
      }
      sub_22E8FCA40(v60, v61, v62, 0, (uint64_t)v70);
      sub_22F2F2168((uint64_t)v70, &v68);
      sub_22E903BEC(v70);
      v57 = *(_QWORD **)(v5 + 8);
      v53 = v64;
      goto LABEL_94;
    }
    v52 = v65 == v12 || v19 == v4;
    v49 = *(unsigned __int8 *)(v5 + 24);
    if (*(_BYTE *)(v5 + 24) && v52)
    {
      if (*(_DWORD *)(v5 + 40) != 46)
      {
        sub_22E8FCA40(*(_QWORD **)(v5 + 8), *(_DWORD *)(v5 + 28), 0x10BFu, 0, (uint64_t)v70);
        v56 = (uint64_t *)(v5 + 32);
        goto LABEL_92;
      }
      v53 = v64;
      if (((v20 == 0) & ~v14) != 0)
        goto LABEL_97;
      if (v14)
      {
        v4 = *(_QWORD **)(v5 + 56);
        v10 = &v4[2 * *(_QWORD *)(v5 + 64)];
      }
      if (v4 == v10)
        goto LABEL_97;
      v54 = v4;
      while (!v54[1])
      {
        v54 += 2;
        if (v54 == v10)
        {
          v54 = v10;
          break;
        }
      }
      if (v54 == v4
        || (v55 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v54[1] + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16),
            v55 != 39)
        && v55 != 32)
      {
LABEL_97:
        sub_22E8FCA40(*(_QWORD **)(v5 + 8), *(_DWORD *)(v5 + 28), 0x10B1u, 0, (uint64_t)v70);
        sub_22E8906A0((uint64_t)v70, (uint64_t *)(v5 + 32));
        sub_22E903BEC(v70);
        goto LABEL_93;
      }
      result = 0;
      **(_BYTE **)v5 = 0;
      **(_QWORD **)(v5 + 48) = 0;
      return result;
    }
LABEL_59:
    if (v20 && !v49)
      **(_QWORD **)(v5 + 48) = v64;
    result = 0;
    if (v49)
      v50 = 0;
    else
      v50 = v14;
    if (v19 != v4)
      v50 = 0;
    **(_BYTE **)v5 |= v50;
    return result;
  }
  if (*(_BYTE *)(v5 + 24))
  {
    if (*(_DWORD *)(v5 + 40) == 46)
      v40 = 4273;
    else
      v40 = 4287;
    sub_22E8FCA40(*(_QWORD **)(v5 + 8), *(_DWORD *)(v5 + 28), v40, 0, (uint64_t)v70);
    v56 = (uint64_t *)(v5 + 32);
LABEL_92:
    sub_22E8906A0((uint64_t)v70, v56);
    sub_22E903BEC(v70);
    v53 = v64;
LABEL_93:
    v57 = *(_QWORD **)(v5 + 8);
LABEL_94:
    sub_22EFF605C(v53);
    sub_22E8FCA40(v57, v58, 0x180Cu, 0, (uint64_t)v70);
    v39 = v53;
LABEL_95:
    sub_22F0D4E74(v39);
    v69 = v59;
    sub_22E8906A0((uint64_t)v70, &v69);
    sub_22E903BEC(v70);
    return 1;
  }
  else
  {
    result = 0;
    **(_BYTE **)v5 = 1;
  }
  return result;
}

void sub_22ECF6DCC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22ECF6DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v3 = sub_22F2E6D78(a2);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 + 28);
  if ((v4 & 0x7F) != 0x3C && (v4 & 0x7Eu) - 52 > 5)
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 224);
  if (!v6)
    v6 = *(_QWORD *)(v5 + 216);
  return sub_22E8CE620(v5 + 3320, (_QWORD *)v3, v6, *(uint64_t **)(v5 + 12888), 0);
}

__n128 sub_22ECF6E58@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24FAB8E38;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

_QWORD *sub_22ECF6EB0(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char **v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 1184 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 1184 * v10;
      do
      {
        *result = -4096;
        result += 148;
        v11 -= 1184;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4;
      while (1)
      {
        v13 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_11:
        v12 = (llvm *)((char *)v12 + 1184);
        if (v12 == (llvm *)((char *)v4 + 1184 * v3))
          return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(1184 * v3));
      }
      v29 = 0;
      sub_22ECB195C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v29);
      v14 = v29;
      v15 = v29;
      *(_QWORD *)(v29 + 8) = v29 + 24;
      v16 = (char **)(v15 + 8);
      *(_QWORD *)v14 = v13;
      v17 = (char **)((char *)v12 + 8);
      *(_QWORD *)(v14 + 16) = 0x800000000;
      v18 = *((_DWORD *)v12 + 4);
      if ((llvm *)v14 != v12 && v18 != 0)
      {
        v20 = *((_QWORD *)v12 + 1);
        if ((llvm *)v20 == (llvm *)((char *)v12 + 24))
        {
          if (v18 <= 8)
          {
            v22 = v20 + 144 * v18;
          }
          else
          {
            sub_22F341810((uint64_t)v16);
            v20 = *((_QWORD *)v12 + 1);
            v21 = *((_DWORD *)v12 + 4);
            if (!v21)
            {
LABEL_28:
              *(_DWORD *)(v14 + 16) = v18;
              v24 = *((unsigned int *)v12 + 4);
              if ((_DWORD)v24)
              {
                v25 = 144 * v24;
                do
                {
                  v26 = *(void **)(v20 + v25 - 144);
                  if ((void *)(v20 + v25 - 128) != v26)
                    free(v26);
                  v25 -= 144;
                }
                while (v25);
              }
              *((_DWORD *)v12 + 4) = 0;
              v17 = (char **)((char *)v12 + 8);
              goto LABEL_34;
            }
            v22 = v20 + 144 * v21;
          }
          v23 = *v16;
          do
          {
            *(_QWORD *)v23 = v23 + 16;
            *((_QWORD *)v23 + 1) = 0x800000000;
            if (*(_DWORD *)(v20 + 8))
              v23 = (char *)sub_22F2528D0((uint64_t)v23, v20);
            v20 += 144;
            v23 += 144;
          }
          while (v20 != v22);
          v20 = *((_QWORD *)v12 + 1);
          goto LABEL_28;
        }
        sub_22F341B94(v16, (char **)v12 + 1);
      }
LABEL_34:
      *(_DWORD *)(v14 + 1176) = *((_DWORD *)v12 + 294);
      ++*(_DWORD *)(a1 + 8);
      sub_22F340364(v17);
      goto LABEL_11;
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(1184 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v27 = *(_DWORD *)(a1 + 16);
    if (v27)
    {
      v28 = 1184 * v27;
      do
      {
        *result = -4096;
        result += 148;
        v28 -= 1184;
      }
      while (v28);
    }
  }
  return result;
}

_QWORD *sub_22ECF7140(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = (_DWORD *)((char *)v4 + 8);
      v14 = 16 * v3;
      do
      {
        v15 = *((_QWORD *)v13 - 1);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = v15;
          *((_DWORD *)v16 + 2) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 4;
        v14 -= 16;
      }
      while (v14);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      do
      {
        *result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t sub_22ECF7284(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  if (a4 != 46)
    return 0;
  v4 = a2 + 16 * a3;
  if (*(unsigned __int8 *)(*(_QWORD *)(v4 - 16) & 0xFFFFFFFFFFFFFFFCLL) == 161)
    **(_BYTE **)a1 |= *(_QWORD *)(v4 - 8) == *(_QWORD *)(a1 + 16);
  if (v4 - 16 == a2)
    return 0;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 32) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = 1;
  v7 = (v5 - 188) > 4 || ((1 << (v5 + 68)) & 0x19) == 0;
  if (v7 && v5 != 107)
    return 0;
  **(_BYTE **)(a1 + 8) = 1;
  return v6;
}

uint64_t sub_22ECF731C(uint64_t a1, int a2, int a3)
{
  if (a2 == 66)
    return a3 ^ 1u;
  else
    return 0;
}

uint64_t sub_22ECF732C(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 == 66)
    v3 = a3;
  else
    v3 = 0;
  if (a2 == 29)
    return 1;
  else
    return v3;
}

BOOL sub_22ECF7344(uint64_t a1, int a2)
{
  return a2 != 85;
}

uint64_t sub_22ECF7350(uint64_t a1, int a2)
{
  return ((a2 - 56) < 0x2B) & (0x6000001CF91uLL >> (a2 - 56));
}

uint64_t sub_22ECF7374(uint64_t a1, int a2, int a3)
{
  return ((a2 - 29) < 0x31) & (0x100240000C101uLL >> (a2 - 29)) & (a3 ^ 1);
}

uint64_t sub_22ECF73A0()
{
  return 1;
}

BOOL sub_22ECF73A8(uint64_t a1, int a2)
{
  return a2 == 29;
}

BOOL sub_22ECF73B4(uint64_t a1, int a2)
{
  return a2 != 63;
}

BOOL sub_22ECF73C0(uint64_t a1, int a2)
{
  return a2 == 15;
}

BOOL sub_22ECF73CC(uint64_t a1, int a2)
{
  return a2 == 63;
}

uint64_t sub_22ECF73D8(_DWORD **a1, int a2, char a3)
{
  uint64_t result;

  result = 0;
  if ((a2 - 29) <= 0x30 && ((1 << (a2 - 29)) & 0x100240000C101) != 0)
  {
    if ((a3 & 1) != 0)
    {
      return 0;
    }
    else
    {
      **a1 = a2;
      return 1;
    }
  }
  return result;
}

uint64_t sub_22ECF7424()
{
  return 1;
}

void sub_22ECF742C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a1 + 32 * v2;
    do
    {
      *(_QWORD *)a2 = *(_QWORD *)v3;
      v5 = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v3 += 32;
      a2 += 32;
    }
    while (v3 != v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 32 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 1) < 0)
          operator delete(*(void **)(v7 + v8 - 24));
        v8 -= 32;
      }
      while (v8);
    }
  }
}

uint64_t sub_22ECF74B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a3)
    return 0;
  v4 = a2 + 16 * a3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 32))(*(_QWORD *)(v4 - 8));
  if (v5 != (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
    return 0;
  *(_QWORD *)a1[1] = *(_QWORD *)(v4 - 16) & 0xFFFFFFFFFFFFFFFCLL;
  return 1;
}

uint64_t sub_22ECF752C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  sub_22F0D492C(a2);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = v15;
  v6 = *((_QWORD *)&v12 + 1);
  v5 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14 && *((_QWORD *)&v12 + 1) == v15)
    return 0;
  while (1)
  {
    v8 = v5;
    if ((v6 & 3) != 0)
    {
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (_QWORD *)sub_22F3AC1A8(*v5);
    }
    if (*v8 && (sub_22EC83760(a1) & 1) != 0)
      break;
    if ((v6 & 3) != 0)
    {
      if (v6 >= 4)
        sub_22F0D8720((uint64_t)&v10);
      else
        sub_22F3F2FE0((uint64_t)&v10, 1);
    }
    else
    {
      *(_QWORD *)&v10 = v5 + 1;
    }
    v6 = *((_QWORD *)&v10 + 1);
    v5 = (uint64_t *)v10;
    if (v10 == __PAIR128__(v4, v3))
      return 0;
  }
  return 1;
}

unsigned __int8 *sub_22ECF7618(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *result;

  v4 = *a2;
  v5 = v4 >> 24;
  v6 = a2[4];
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = v5 + 8 * ((v4 >> 18) & 1) + 8;
    do
    {
      if (*(_QWORD *)((char *)a2 + v8))
        sub_22EC91D64(a1);
      v8 += 8;
      v7 -= 8;
    }
    while (v7);
    v5 = *((unsigned __int8 *)a2 + 3);
  }
  result = *(unsigned __int8 **)((char *)a2 + v5);
  if (result)
  {
    result = sub_22EFFA6B0(result);
    if (*result == 188)
      return (unsigned __int8 *)sub_22EC91D64(a1);
  }
  return result;
}

void sub_22ECF76B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22F0D492C(a2);
  *(_OWORD *)v9 = *(_OWORD *)v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = v11[1];
  v5 = (uint64_t *)v11[0];
  if (v11[0] != v13 || v11[1] != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22EC91D64(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)v9, 1);
        else
          sub_22F0D8720((uint64_t)v9);
      }
      else
      {
        v9[0] = (uint64_t)(v5 + 1);
      }
      v5 = (uint64_t *)v9[0];
      v6 = v9[1];
    }
    while (v9[0] != v3 || v9[1] != v4);
  }
}

unint64_t sub_22ECF778C(unint64_t result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD **v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(unsigned int **)(a2 + 24);
  if (!v2)
    return result;
  v4 = result;
  v6 = (_DWORD **)(v2 + 4);
  v5 = *v2;
  if (!(_DWORD)v5)
  {
LABEL_30:
    if (!*((_BYTE *)v2 + 8) || !*(_QWORD *)&v2[2 * *v2 + 4 + 2 * v2[1]])
      return result;
    v18 = *(_DWORD *)(a2 + 8);
    if (v18 <= 0x34 && ((1 << v18) & 0x10000800000204) != 0 || v18 == 95 || (v18 & 0xFFFFFFFD) == 0x58)
      return sub_22EC91D64(v4);
    v19 = sub_22F28423C(a2);
    sub_22EC92E00(v4, v19);
    if (*(_BYTE *)(v4 + 17))
    {
      v24 = 1;
    }
    else
    {
      result = sub_22ECB1B04(*(_QWORD *)v4);
      if (!result
        || (v20 = *(_DWORD *)(result + 960) - 56, v20 > 0x2A)
        || ((1 << v20) & 0x6000001CF91) == 0
        || (result = sub_22F28423C(a2), v21 = *(unsigned int *)(result + 8), !(_DWORD)v21))
      {
LABEL_49:
        if (*(_DWORD *)(a2 + 8) == 74)
        {
          v25 = *(unsigned int **)(a2 + 24);
          if (v25)
          {
            v28 = *v25;
            v27 = v25 + 4;
            v26 = v28;
            if (v28)
            {
              v29 = &v27[2 * v26];
              do
              {
                v30 = *(_QWORD *)v27;
                if (*(_QWORD *)v27)
                  v31 = *(_DWORD *)(*(_QWORD *)v27 + 8) == 29;
                else
                  v31 = 0;
                if (v31)
                {
                  v32 = *(unsigned int *)(v30 + 16);
                  if ((_DWORD)v32)
                  {
                    v33 = v30 + 40;
                    v34 = 8 * v32;
                    do
                    {
                      v33 += 8;
                      result = sub_22EC91D64(v4);
                      v34 -= 8;
                    }
                    while (v34);
                  }
                }
                v27 += 2;
              }
              while (v27 != v29);
            }
          }
        }
        return result;
      }
      v22 = (_BYTE *)(result + (8 * v21 + 40));
      v23 = 16 * v21;
      while ((*v22 & 6) != 0)
      {
        v22 += 16;
        v23 -= 16;
        if (!v23)
          goto LABEL_49;
      }
      v24 = *(_BYTE *)(v4 + 17);
    }
    *(_BYTE *)(v4 + 17) = 1;
    sub_22F28423C(a2);
    result = sub_22EC91D64(v4);
    *(_BYTE *)(v4 + 17) = v24;
    goto LABEL_49;
  }
  v7 = &v6[v5];
  do
  {
    v8 = *v6;
    if (!*v6)
      goto LABEL_28;
    v9 = v8[2];
    if (v9 != 29)
    {
      if (v9 == 63)
        goto LABEL_28;
      if (v9 != 46)
        goto LABEL_14;
    }
    if (*v8
      || (result = sub_22ECB1B04(*(_QWORD *)v4)) != 0
      && ((v10 = *(_DWORD *)(result + 960) - 36, v11 = v10 > 0x29, v12 = (1 << v10) & 0x34000000C03, !v11)
        ? (v13 = v12 == 0)
        : (v13 = 1),
          !v13))
    {
LABEL_14:
      result = sub_22F3E9FA4((uint64_t)v8);
      *(_OWORD *)v35 = *(_OWORD *)v37;
      v14 = v39;
      v36 = v38;
      v15 = v40;
      while (1)
      {
        v16 = v35[0];
        v17 = v35[1];
        if (v35[0] == v14 && v35[1] == v15)
          break;
        result = v35[0];
        if ((v35[1] & 3) != 0)
        {
          if ((v35[1] & 0xFFFFFFFFFFFFFFFCLL) != 0)
            result = (v35[1] & 0xFFFFFFFFFFFFFFFCLL) + 40;
          else
            result = sub_22F3AC1A8(*(_QWORD *)v35[0]);
        }
        if (*(_QWORD *)result)
          result = sub_22EC91D64(v4);
        if ((v17 & 3) != 0)
        {
          if (v17 < 4)
            result = sub_22F3F2FE0((uint64_t)v35, 1);
          else
            result = sub_22F0D8720((uint64_t)v35);
        }
        else
        {
          v35[0] = v16 + 8;
        }
      }
    }
LABEL_28:
    ++v6;
  }
  while (v6 != v7);
  v2 = *(unsigned int **)(a2 + 24);
  if (v2)
    goto LABEL_30;
  return result;
}

BOOL sub_22ECF7A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_22ECB1B04(a1);
  if (a2)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  else
    v4 = 0;
  v9 = 0;
  if (sub_22F2588D8(*(_QWORD *)(v3 + 1184), *(_DWORD *)(v3 + 1200), v4, &v9))
  {
    v5 = v9;
    v6 = *(_QWORD *)(v3 + 1184);
    v7 = *(unsigned int *)(v3 + 1200);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 1184);
    v7 = *(unsigned int *)(v3 + 1200);
    v5 = v6 + 8 * v7;
  }
  return v5 != v6 + 8 * v7;
}

BOOL sub_22ECF7B10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return a3 && *(_QWORD *)(a2 + 16 * a3 - 8) == *a1;
}

BOOL sub_22ECF7B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 72) + 72) >= 0x32u)
    return a3 != 0;
  result = 1;
  if (a3 != 1 && a2 + 16 * a3 - 16 != a2)
  {
    v4 = 16 * a3;
    while (!*(_QWORD *)(a2 + v4 - 24))
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(a2 + v4 - 32) & 0xFFFFFFFFFFFFFFFCLL);
      if ((v5 - 191) >= 2 && v5 != 107)
        break;
      v4 -= 16;
      if (v4 == 16)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22ECF7BC0(uint64_t a1, int a2, int a3)
{
  if (a2 == 66)
    return a3 ^ 1u;
  else
    return 0;
}

uint64_t sub_22ECF7BD0(uint64_t a1, int a2)
{
  BOOL v4;
  unint64_t v5;

  if (sub_22F421A78(a2))
    return 1;
  v4 = sub_22F421A30(a2);
  v5 = (0x3001CC073uLL >> (a2 - 66)) & 1;
  if ((a2 - 66) > 0x21)
    LODWORD(v5) = 0;
  if (v4)
    return 1;
  else
    return v5;
}

BOOL sub_22ECF7C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v8;

  v3 = *(unsigned __int8 **)((*(_QWORD *)(a2 + 16 * a3 - 16) & 0xFFFFFFFFFFFFFFFCLL) + 16);
  while (1)
  {
    v4 = *v3;
    if (v4 > 0xD5)
    {
      if (v4 == 233)
      {
        v4 = *(_DWORD *)v3;
        if ((*(_DWORD *)v3 & 0x7C0000) != 0x300000)
          return v4 == 133;
        v6 = v3 + 16;
      }
      else
      {
        if (v4 != 214)
          return v4 == 133;
        v6 = v3 + 24;
      }
      goto LABEL_16;
    }
    if (v4 == 155)
      break;
    if (v4 != 176)
      return v4 == 133;
    v5 = *((unsigned int *)v3 + 5);
    if ((_DWORD)v5 == -1)
    {
      v4 = 176;
      return v4 == 133;
    }
    v6 = &v3[8 * v5 + 40];
    v4 = 176;
LABEL_16:
    v7 = *(unsigned __int8 **)v6;
    v8 = v7 == v3;
    v3 = v7;
    if (v8)
      return v4 == 133;
  }
  if ((**((_DWORD **)v3 + 2) & 0x18000) == 0)
  {
    v6 = v3 + 24;
    if (!v3[48])
      v6 = v3 + 32;
    v4 = 155;
    goto LABEL_16;
  }
  v4 = 155;
  return v4 == 133;
}

uint64_t sub_22ECF7D04(uint64_t a1, int a2, int a3)
{
  if (a2 == 66)
    return a3 ^ 1u;
  else
    return 0;
}

uint64_t sub_22ECF7D14(uint64_t a1, int a2)
{
  BOOL v4;
  unint64_t v5;

  if (sub_22F421A78(a2))
    return 1;
  v4 = sub_22F421A30(a2);
  v5 = (0x3001CC073uLL >> (a2 - 66)) & 1;
  if ((a2 - 66) > 0x21)
    LODWORD(v5) = 0;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t sub_22ECF7D78(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = **a1;
  v4 = a2 + 16 * a3;
  v5 = -16 * a3;
  v6 = 16 * *((unsigned int *)*a1 + 2);
  while (1)
  {
    if (!v5)
      return 1;
    v7 = v4 - 16;
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + v6 - 16) & 0xFFFFFFFFFFFFFFFCLL);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 16) & 0xFFFFFFFFFFFFFFFCLL);
    if (v8 != v9 && (v8 != 107 || (v9 + 65) > 1u))
      return 0;
    v11 = *(_QWORD *)(v3 + v6 - 8);
    v12 = *(_QWORD *)(v4 - 8);
    if (v11)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      if (!v12)
        goto LABEL_12;
    }
    else
    {
      v13 = 0;
      if (!v12)
      {
LABEL_12:
        v14 = 0;
        goto LABEL_13;
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
LABEL_13:
    if (v14 != v13)
      return 0;
    v5 += 16;
    v4 = v7;
    v6 -= 16;
    if (!v6)
      return 1;
  }
}

void sub_22ECF7E60()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22ECF7E74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FAB8E70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22ECF7EAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAB8E70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *sub_22ECF7ECC(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  int v3;
  unsigned int v5[24];
  __int128 v6;

  v6 = *a2;
  v2 = *(_QWORD **)(a1 + 8);
  sub_22EFFAE7C(*(unsigned int **)(a1 + 16));
  sub_22E8FCA40(v2, v3, 0x7EDu, 0, (uint64_t)v5);
  sub_22F2F2210((uint64_t)v5, (uint64_t)&v6);
  return sub_22E903BEC(v5);
}

BOOL sub_22ECF7F28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[2];
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)a1;
  v18[0] = 1;
  for (i = 1; i != 9; i += 2)
    v18[i] = -4096;
  v7 = sub_22EC9BA28(*(_DWORD *)(a1 + 32), 0, 0, a3, v5, v5[1536], (uint64_t)v18, **(_QWORD **)(a1 + 8) + 616 * a2);
  if (v7)
  {
    v8 = **(_QWORD **)(a1 + 24) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 8);
    v9 = *(_DWORD *)(v8 - 8);
    v10 = *(_DWORD *)(v8 - 4);
    if (*(_BYTE *)a3 == 14)
    {
      v11 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFFBLL;
      if (v9 >= v10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(v8 - 8);
      }
      *(_QWORD *)(*(_QWORD *)(v8 - 16) + 8 * v9) = v11;
      ++*(_DWORD *)(v8 - 8);
      v12 = (_QWORD *)(a3 + 40);
    }
    else
    {
      v13 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFFBLL;
      if (v9 >= v10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(v8 - 8);
      }
      *(_QWORD *)(*(_QWORD *)(v8 - 16) + 8 * v9) = v13;
      ++*(_DWORD *)(v8 - 8);
      v12 = (_QWORD *)(a3 + 72);
    }
    **(_QWORD **)(a1 + 16) = *v12;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(unsigned int *)(v14 + 8);
    if (v15 >= *(_DWORD *)(v14 + 12))
    {
      sub_22F341F44(v14);
    }
    else
    {
      v16 = (_QWORD *)(*(_QWORD *)v14 + 16 * v15);
      *v16 = v16 + 2;
      v16[1] = 0;
      ++*(_DWORD *)(v14 + 8);
    }
  }
  if ((v18[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v18[1], (void *)(16 * v19));
  return v7 == 0;
}

uint64_t sub_22ECF80F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t vars0;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * **(unsigned int **)(a2 + 24) + 16);
  if (v2)
  {
    v3 = **(_QWORD **)result + 16 * *(unsigned int *)(*(_QWORD *)result + 8) - 16;
    v4 = *(_QWORD *)(v2 + 8);
    v7 = v4;
    if ((v4 & 1) != 0)
    {
      v5 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v6 = &v5[8 * *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL)];
    }
    else
    {
      if (v4)
        v5 = (char *)&v7;
      else
        v5 = 0;
      if (v4)
        v6 = (char *)&vars0;
      else
        v6 = 0;
    }
    return sub_22F342060(v3, v5, v6);
  }
  return result;
}

void sub_22ECF8170(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_22F3420E4((uint64_t *)a1, a2, a3);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        v8 = sub_22F342194(v8, a3) + 616;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v12 = 616 * a2 - 616 * v6;
        v13 = (_QWORD *)(*(_QWORD *)a1 + 616 * v6 - 616);
        do
        {
          v13 = sub_22F340E84(v13) - 77;
          v12 += 616;
        }
        while (v12);
      }
    }
    else
    {
      v10 = *(_QWORD *)a1 + 616 * v6;
      do
        v10 = sub_22F342268(v10, a3) + 616;
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22ECF8254(_DWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  **a1 = a4;
  return 1;
}

uint64_t sub_22ECF8264(uint64_t a1, int a2, int a3)
{
  if (a2 == 66)
    return a3 ^ 1u;
  else
    return 0;
}

uint64_t sub_22ECF8274(uint64_t a1, int a2)
{
  BOOL v4;
  unint64_t v5;

  if (sub_22F421A78(a2))
    return 1;
  v4 = sub_22F421A30(a2);
  v5 = (0x3001CC073uLL >> (a2 - 66)) & 1;
  if ((a2 - 66) > 0x21)
    LODWORD(v5) = 0;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t sub_22ECF82D8(_DWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  **a1 = a4;
  return 1;
}

_QWORD *sub_22ECF82E8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F342520(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22ECF83A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F3425D0(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F3425D0(a1);
    }
  }
  return v3;
}

uint64_t sub_22ECF840C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(_QWORD *)result + 56 * v2;
    do
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = 0;
      v5 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v3 + 12) = v5;
      v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v6;
      v7 = *(_OWORD *)(v3 + 24);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)(v3 + 36);
      *(_OWORD *)(a2 + 24) = v7;
      v3 += 56;
      a2 += 56;
    }
    while (v3 != v4);
    v8 = *(unsigned int *)(result + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)result;
      v10 = 56 * v8;
      do
      {
        result = llvm::deallocate_buffer(*(llvm **)(v9 + v10 - 56), (void *)(16 * *(unsigned int *)(v9 + v10 - 40)));
        v10 -= 56;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t sub_22ECF84CC(unint64_t **a1, _QWORD *a2)
{
  **a1 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  return 1;
}

uint64_t sub_22ECF84E4(unint64_t **a1, _QWORD *a2)
{
  **a1 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  return 1;
}

BOOL sub_22ECF84FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  _BOOL8 result;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = (*(_DWORD *)(v2 + 16) & 0xFF800FF) == 87031819;
  else
    v3 = 0;
  result = 0;
  if (v3)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16);
    if ((v5 - 10) < 0x1Eu && ((0x20600001u >> (v5 - 10)) & 1) != 0)
      return 1;
    v6 = (v5 & 0xFF800FF) != 0x6D0000B || (*(_QWORD *)(a2 + 232) & 0x800000000) == 0;
    if (!v6 || (*a1 & 0xFELL) == 2)
      return 1;
  }
  return result;
}

uint64_t sub_22ECF85B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;

  v2 = a1[3];
  v4 = *a1;
  v3 = a1[1];
  if (*a1 == 2)
  {
    v3 = sub_22EF5F824(a2, v3);
    v4 = *a1;
  }
  if ((v4 & 0xFF00) == 0xD00)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    if (v6 == 39 || v6 == 32)
    {
      result = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
      if (result && *(_BYTE *)(result + 16) == 39)
      {
LABEL_10:
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v8)
          v9 = *(_DWORD *)(v8 + 16) == 11;
        else
          v9 = 0;
        if (v9)
          return (*(_DWORD *)(v8 + 16) & 0xFF80000) == 86507520;
        return 0;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        result = sub_22F10CF48(result);
        if (!result)
          return result;
        goto LABEL_10;
      }
    }
  }
  return 0;
}

uint64_t sub_22ECF86A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, char a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  _BOOL8 v34;
  const llvm::detail::IEEEFloat *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  _BOOL4 v40;
  unsigned int v41;
  _BOOL4 v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  int v47;
  unsigned int v48;
  __int128 *v49;
  int v50;
  int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  uint64_t inited;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  char v73;
  uint64_t v74;
  unsigned int v75;
  char v76;
  char v77;
  uint64_t v78;
  unsigned int v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  char v83;
  char v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[19];
  uint64_t v88;
  uint64_t v89;
  char v90[16];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v14 && *(_BYTE *)(v14 + 16) == 44)
  {
    v15 = sub_22F114198(*(_QWORD *)(v14 + 24));
    v12 = sub_22E496830(v15);
  }
  v16 = 0;
  switch(*(_BYTE *)(a1 + 1))
  {
    case 9:
      v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_57;
    case 0xA:
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v28)
        v29 = *(_DWORD *)(v28 + 16) == 11;
      else
        v29 = 0;
      if (!v29 || ((*(_DWORD *)(v28 + 16) >> 19) & 0x1FEu) - 210 > 7)
        return 0;
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v31 = v30 && *(_DWORD *)(v30 + 16) == 11;
      if (!v31 || ((*(_DWORD *)(v30 + 16) >> 19) & 0x1FEu) - 210 > 7 || sub_22EF6A108(a2, v13, v12) != 1)
        return 0;
      v32 = sub_22ECF8FC0(a2, a3);
      if ((*((_BYTE *)v32 + 2) & 1) != 0)
        return 4;
      v33 = v32;
      v34 = sub_22F0092DC((uint64_t)v32, a2, (uint64_t *)a4, 0);
      if (!v34)
        return 3;
      v36 = *(_QWORD *)(a4 + 16);
      v35 = (const llvm::detail::IEEEFloat *)(a4 + 16);
      v37 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v34);
      if (v37 == v36)
        MEMORY[0x23489F2A0]((char *)&v85 + 8, v35);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v85 + 8), v35);
      LOBYTE(v88) = 0;
      sub_22EF5B2E0(a2, v12);
      v38 = llvm::APFloat::convert();
      if ((v38 & 4) != 0)
        *a5 = v33[1];
      if (v37 == *((_QWORD *)&v85 + 1))
        sub_22E463170((llvm::APFloatBase *)&v86);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v85 + 8));
      if ((v38 & 4) != 0)
        return 2;
      return 0;
    case 0xC:
      v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v18 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v19 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_7;
    case 0xF:
      v17 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v18 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v19 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0;
      if (*(_QWORD *)v19)
        v39 = *(_DWORD *)(*(_QWORD *)v19 + 16) == 11;
      else
        v39 = 0;
      if (v39 && ((*(_DWORD *)(*(_QWORD *)v19 + 16) >> 19) & 0x1FEu) - 210 < 8)
      {
LABEL_7:
        v20 = *(_QWORD *)v19;
        v21 = *(_DWORD *)(*(_QWORD *)v19 + 16);
        if (v20)
          v22 = v21 == 11;
        else
          v22 = 0;
        if (v22 && ((v21 >> 19) & 0x1FE) - 210 <= 7)
        {
          if (sub_22F110744(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0), a2))
            return 1;
          v18 = *v17;
        }
        if (!sub_22F1107D8(v18))
          return 0;
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v24 = v23 && *(_DWORD *)(v23 + 16) == 11;
        if (!v24 || ((*(_DWORD *)(v23 + 16) >> 19) & 0x1FEu) - 210 > 7 || (a6 & 1) != 0)
          return 0;
        v25 = sub_22ECF8FC0(a2, a3);
        if ((*((_BYTE *)v25 + 2) & 1) != 0)
          return 4;
        v26 = v25;
        sub_22F00905C((uint64_t)v25, a2, 0, (uint64_t)&v81);
        if (!v84)
          return 3;
        v27 = sub_22EF5B2E0(a2, v12);
        sub_22E99C474((llvm::APFloatBase *)&v89, v27);
        sub_22E51FB5C((llvm::APFloatBase *)&v88);
        v79 = v82;
        if (v82 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v78, (const llvm::APInt *)&v81);
        else
          v78 = v81;
        v80 = v83;
        v77 = 0;
        inited = llvm::APFloat::convertToInteger();
        v62 = v82;
        if (v82 > 0x40)
        {
          inited = llvm::APInt::equalSlowCase((llvm::APInt *)&v81, (const llvm::APInt *)&v78);
          if ((inited & 1) == 0)
          {
            v75 = v62;
            inited = llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const llvm::APInt *)&v81);
            v62 = v75;
            v63 = v74;
            goto LABEL_120;
          }
        }
        else
        {
          v63 = v81;
          if (v81 != v78)
          {
            v74 = v81;
LABEL_120:
            v66 = v83;
            v76 = v83;
            v75 = 0;
            if (*(_DWORD *)a4 > 1u)
            {
              sub_22EF53BC0((uint64_t *)a4);
              v69 = v86;
              *(_OWORD *)(a4 + 21) = v85;
              v70 = v75;
              *(_DWORD *)a4 = 2;
              *(_QWORD *)(a4 + 8) = v63;
              *(_DWORD *)(a4 + 16) = v62;
              *(_BYTE *)(a4 + 20) = v66;
              *(_OWORD *)(a4 + 37) = v69;
              *(_OWORD *)(a4 + 53) = *(_OWORD *)v87;
              *(_DWORD *)(a4 + 68) = *(_DWORD *)&v87[15];
              if (v70 >= 0x41)
              {
                inited = v74;
                if (v74)
                  inited = MEMORY[0x2348A0E84](v74, 0x1000C8000313F17);
              }
            }
            else
            {
              *(_DWORD *)a4 = 2;
              *(_QWORD *)(a4 + 8) = v63;
              *(_DWORD *)(a4 + 16) = v62;
              *(_BYTE *)(a4 + 20) = v66;
              v67 = v86;
              *(_OWORD *)(a4 + 21) = v85;
              *(_OWORD *)(a4 + 37) = v67;
              *(_OWORD *)(a4 + 53) = *(_OWORD *)v87;
              *(_DWORD *)(a4 + 68) = *(_DWORD *)&v87[15];
            }
            v64 = 0;
            *a5 = v26[1];
LABEL_123:
            if (v79 >= 0x41)
            {
              inited = v78;
              if (v78)
                inited = MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
            }
            v68 = v89;
            if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)inited) == v68)
              sub_22E463170((llvm::APFloatBase *)v90);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v89);
            if (v84 && v82 >= 0x41 && v81)
              MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
            if (!v64)
              return 2;
            return 0;
          }
        }
        v64 = 1;
        goto LABEL_123;
      }
      if ((sub_22F1107D8(v18) & 1) == 0)
        return 1;
LABEL_57:
      v40 = sub_22F110A40(*v17);
      v41 = sub_22EF6A330(a2, v13);
      v42 = sub_22F110A40(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
      v43 = sub_22EF6A330(a2, v12);
      v44 = v43;
      if (v41 <= v43)
      {
        v50 = v40 ^ v42;
        if (v41 != v43)
          v50 = 0;
        if (v50 != 1 && (!v40 || v42))
          return 0;
      }
      v45 = sub_22ECF8FC0(a2, a3);
      if ((*((_BYTE *)v45 + 2) & 1) != 0)
        return 4;
      v46 = v45;
      LOBYTE(v85) = 0;
      LOBYTE(v86) = 0;
      sub_22F00905C((uint64_t)v45, a2, 0, (uint64_t)&v88);
      sub_22E54C490((uint64_t)&v85, (uint64_t)&v88);
      v47 = v86;
      if (v90[0] && v89 >= 0x41 && v88)
        MEMORY[0x2348A0E84](v88, 0x1000C8000313F17);
      if (v47)
      {
        if (v41 >= v44)
        {
          sub_22E46361C((llvm::APInt *)&v85, (uint64_t)&v88);
          if (DWORD2(v85) >= 0x41 && (_QWORD)v85)
            MEMORY[0x2348A0E84](v85, 0x1000C8000313F17);
          *(_QWORD *)&v85 = v88;
          DWORD2(v85) = v89;
          v52 = BYTE4(v89);
          BYTE12(v85) = BYTE4(v89);
          v82 = v89;
          if (v89 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v81, (const llvm::APInt *)&v85);
            v52 = BYTE12(v85);
          }
          else
          {
            v81 = v88;
          }
          v83 = v52;
          llvm::APInt::trunc((llvm::APInt *)&v81);
          v53 = v89;
          v54 = v88;
          if (v82 >= 0x41 && v81)
            MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
          v81 = v54;
          v82 = v53;
          v83 = !v42;
          sub_22E46361C((llvm::APInt *)&v81, (uint64_t)&v88);
          if (v82 >= 0x41 && v81)
            MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
          v55 = v88;
          v81 = v88;
          v82 = v89;
          v83 = BYTE12(v85);
          if (v89 > 0x40)
          {
            v56 = llvm::APInt::equalSlowCase((llvm::APInt *)&v81, (const llvm::APInt *)&v85);
            if (v55)
              MEMORY[0x2348A0E84](v55, 0x1000C8000313F17);
            if ((v56 & 1) != 0)
              goto LABEL_92;
          }
          else if (v88 == (_QWORD)v85)
          {
LABEL_92:
            v16 = 2;
            v51 = 1;
            goto LABEL_101;
          }
        }
        else
        {
          if (BYTE12(v85))
            goto LABEL_92;
          v48 = DWORD2(v85) - 1;
          v49 = &v85;
          if (DWORD2(v85) >= 0x41)
            v49 = (__int128 *)(v85 + 8 * (v48 >> 6));
          if (((*(_QWORD *)v49 >> v48) & 1) == 0)
            goto LABEL_92;
        }
        *a5 = v46[1];
        v57 = DWORD2(v85);
        v72 = DWORD2(v85);
        if (DWORD2(v85) > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v71, (const llvm::APInt *)&v85);
          v57 = v72;
          v58 = v71;
        }
        else
        {
          v58 = v85;
          v71 = v85;
        }
        v59 = BYTE12(v85);
        v73 = BYTE12(v85);
        v72 = 0;
        if (*(_DWORD *)a4 > 1u)
        {
          sub_22EF53BC0((uint64_t *)a4);
          v65 = v72;
          v16 = 2;
          *(_DWORD *)a4 = 2;
          *(_QWORD *)(a4 + 8) = v58;
          *(_DWORD *)(a4 + 16) = v57;
          *(_BYTE *)(a4 + 20) = v59;
          if (v65 >= 0x41 && v71)
            MEMORY[0x2348A0E84](v71, 0x1000C8000313F17);
          v51 = 0;
        }
        else
        {
          v51 = 0;
          v16 = 2;
          *(_DWORD *)a4 = 2;
          *(_QWORD *)(a4 + 8) = v58;
          *(_DWORD *)(a4 + 16) = v57;
          *(_BYTE *)(a4 + 20) = v59;
        }
      }
      else
      {
        v51 = 0;
        v16 = 3;
      }
LABEL_101:
      if ((_BYTE)v86 && DWORD2(v85) >= 0x41 && (_QWORD)v85)
        MEMORY[0x2348A0E84](v85, 0x1000C8000313F17);
      if (v51)
        return 0;
      return v16;
    default:
      return v16;
  }
}

uint64_t *sub_22ECF8FC0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  int *v10;

  v2 = a2;
  v3 = *(unsigned __int8 *)a2;
  if (v3 == 173)
  {
    v10 = (int *)sub_22ECF8FC0(a1, a2[2]);
    return (uint64_t *)sub_22F061910(a1, v10, (*(_DWORD *)v2 >> 18) & 1, v2 + 3, (unint64_t)*(unsigned int *)v2 >> 19);
  }
  else
  {
    if (v3 == 153)
    {
      do
      {
        v4 = (*(_DWORD *)v2 >> 18) & 0x7F;
        v5 = v4 > 0x2A;
        v6 = (1 << v4) & 0x781C0000020;
        if (v5 || v6 == 0)
          break;
        v2 = (uint64_t *)v2[2];
      }
      while (*(unsigned __int8 *)v2 == 153);
    }
    return v2;
  }
}

llvm::raw_ostream *sub_22ECF9060(llvm *a1)
{
  llvm::raw_ostream *result;
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  _DWORD *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  const char *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;

  result = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = result;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (v5 != 30)
    {
      v6 = off_24FAB8EF8[v5];
      v7 = strlen(v6);
      result = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
      if (v7 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
      {
        if (v7)
        {
          result = (llvm::raw_ostream *)memcpy(result, v6, v7);
          *((_QWORD *)v3 + 4) += v7;
        }
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, v6);
      }
    }
    if (!*((_BYTE *)a1 + 1))
      goto LABEL_25;
    v8 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v8 > 3uLL)
    {
      *v8 = 540945696;
      *((_QWORD *)v3 + 4) += 4;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, " -> ");
    }
LABEL_9:
    v9 = *((unsigned __int8 *)a1 + 1);
    if (v9 != 30)
    {
      v10 = off_24FAB8EF8[v9];
      v11 = strlen(v10);
      result = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
      if (v11 <= *((_QWORD *)v3 + 3) - (_QWORD)result)
      {
        if (v11)
        {
          result = (llvm::raw_ostream *)memcpy(result, v10, v11);
          *((_QWORD *)v3 + 4) += v11;
        }
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, v10);
      }
    }
    if (*((_QWORD *)a1 + 5))
    {
      v12 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v12 <= 0x15uLL)
      {
        v13 = " (by copy constructor)";
        v14 = v3;
LABEL_24:
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, v13);
        goto LABEL_25;
      }
      qmemcpy(v12, " (by copy constructor)", 22);
      v24 = *((_QWORD *)v3 + 4) + 22;
    }
    else if ((*(_QWORD *)a1 & 0x10000000) != 0)
    {
      v18 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v18 <= 0x1AuLL)
      {
        v13 = " (direct reference binding)";
        v14 = v3;
        goto LABEL_24;
      }
      qmemcpy(v18, " (direct reference binding)", 27);
      v24 = *((_QWORD *)v3 + 4) + 27;
    }
    else
    {
      if ((*(_QWORD *)a1 & 0x8000000) == 0)
      {
LABEL_25:
        if (!*((_BYTE *)a1 + 2))
          return result;
        v19 = (_DWORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v19 > 3uLL)
        {
          *v19 = 540945696;
          *((_QWORD *)v3 + 4) += 4;
        }
        else
        {
          result = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, " -> ");
        }
        goto LABEL_28;
      }
      v15 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v15) <= 0x13)
      {
        v13 = " (reference binding)";
        v14 = v3;
        goto LABEL_24;
      }
      *(_DWORD *)(v15 + 16) = 694644329;
      *(_OWORD *)v15 = *(_OWORD *)" (reference binding)";
      v24 = *((_QWORD *)v3 + 4) + 20;
    }
    *((_QWORD *)v3 + 4) = v24;
    goto LABEL_25;
  }
  if ((v4 & 0xFF00) != 0)
    goto LABEL_9;
  if ((v4 & 0xFF0000) == 0)
  {
    v16 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v16 <= 0x16uLL)
    {
      v17 = "No conversions required";
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v17);
    }
    qmemcpy(v16, "No conversions required", 23);
    v23 = *((_QWORD *)result + 4) + 23;
    goto LABEL_38;
  }
LABEL_28:
  v20 = *((unsigned __int8 *)a1 + 2);
  if (v20 != 30)
  {
    v21 = off_24FAB8EF8[v20];
    v22 = strlen(v21);
    result = (llvm::raw_ostream *)*((_QWORD *)v3 + 4);
    if (v22 > *((_QWORD *)v3 + 3) - (_QWORD)result)
    {
      result = v3;
      v17 = v21;
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v17);
    }
    if (v22)
    {
      result = (llvm::raw_ostream *)memcpy(result, v21, v22);
      v23 = *((_QWORD *)v3 + 4) + v22;
LABEL_38:
      *((_QWORD *)v3 + 4) = v23;
    }
  }
  return result;
}

uint64_t sub_22ECF93A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  result = a1 + 16;
  if (*(_DWORD *)(a2 + 24))
    return sub_22E8BB370(result, a2 + 16);
  return result;
}

unint64_t sub_22ECF93D4@<X0>(unint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a4 = *(_WORD *)a4 & 0xFE00 | a2;
  if (a2 == 10)
  {
    result = sub_22E3CD3D4(result + 2032, 48, 3);
    *(_DWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v6 = *(_QWORD *)(a3 + 192);
    *(_OWORD *)result = *(_OWORD *)(a3 + 176);
    *(_QWORD *)(result + 16) = v6;
LABEL_3:
    v7 = *(_QWORD *)(a3 + 216);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 200);
    *(_QWORD *)(result + 40) = v7;
LABEL_4:
    *(_QWORD *)(a4 + 8) = result;
  }
  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 11:
      case 12:
      case 16:
      case 17:
        *(_QWORD *)(a4 + 8) = 0;
        break;
      case 3:
      case 13:
        *(_QWORD *)(a4 + 8) = *(_QWORD *)(a3 + 168);
        break;
      case 4:
      case 5:
      case 6:
        result = sub_22E3CD3D4(result + 2032, 56, 3);
        *(_DWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 48) = *(_QWORD *)(a3 + 168);
        v9 = *(_OWORD *)(a3 + 176);
        *(_QWORD *)(result + 16) = *(_QWORD *)(a3 + 192);
        *(_OWORD *)result = v9;
        goto LABEL_3;
      case 7:
        v8 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a4 + 8) = v8;
        if (*(_BYTE *)(a3 + 12))
        {
          *(_DWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
          *(_QWORD *)(a4 + 32) = 0;
          *(_DWORD *)(a4 + 40) = 0;
          result = sub_22E9F6EB8(a3, a4 + 16);
          *(_WORD *)a4 |= 0x100u;
        }
        break;
      case 8:
      case 9:
        result = sub_22E3CD3D4(result + 2032, 64, 3);
        *(_DWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        v10 = *(_QWORD *)(a3 + 192);
        *(_OWORD *)result = *(_OWORD *)(a3 + 176);
        *(_QWORD *)(result + 16) = v10;
        v11 = *(_QWORD *)(a3 + 216);
        *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 200);
        *(_QWORD *)(result + 40) = v11;
        v12 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(result + 48) = v12;
        *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 224);
        goto LABEL_4;
      case 15:
        v13 = sub_22E3CD3D4(result + 2032, 224, 3);
        *(_QWORD *)(v13 + 24) = v13 + 40;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 32) = 0x400000000;
        *(_BYTE *)(v13 + 136) = 0;
        *(_QWORD *)(v13 + 144) = v13 + 160;
        *(_QWORD *)(v13 + 152) = 0x400000000;
        v14 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)v13 = v14;
        *(_QWORD *)(v13 + 8) = *(_QWORD *)(a3 + 312);
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(a3 + 320);
        sub_22F2E32AC(v13 + 24, a3 + 328);
        *(_BYTE *)(v13 + 136) = *(_BYTE *)(a3 + 440);
        result = sub_22E9F6214(v13 + 144, a3 + 448);
        *(_QWORD *)(a4 + 8) = v13;
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t sub_22ECF95E4(unint64_t result)
{
  __int16 v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_WORD *)result;
  v2 = *(_WORD *)result;
  if (v2 <= 0xF)
  {
    v3 = result;
    if (((1 << v2) & 0x770) != 0)
    {
      *(_QWORD *)(result + 8) = 0;
    }
    else if (v2 == 7 || v2 == 15)
    {
      *(_QWORD *)(result + 8) = 0;
      if ((v1 & 0x100) != 0)
      {
        v4 = *(_QWORD *)(result + 24);
        if (v4)
        {
          result = *(_QWORD *)(result + 32);
          if (result)
          {
            result = sub_22E3BB10C(result, v4);
            *(_QWORD *)(v3 + 24) = 0;
            v1 = *(_WORD *)v3;
          }
        }
        *(_WORD *)v3 = v1 & 0xFEFF;
      }
    }
  }
  return result;
}

BOOL sub_22ECF9668(char a1, uint64_t a2)
{
  int v2;

  if ((*(_QWORD *)(a2 + 40) & 7) == 6)
    v2 = *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
  else
    v2 = 0;
  if (!a1 || v2 != 34 && v2 != 30)
    return 0;
  if (sub_22EFBAACC(a2) == 2
    && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(**(_QWORD **)(a2 + 120) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    return sub_22ECF9724(a2);
  }
  return 1;
}

BOOL sub_22ECF9724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 167)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

void sub_22ECF9784(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    v2 = *a1;
    v3 = *a1 + 168 * v1;
    do
    {
      v4 = *(_QWORD *)(v2 + 56);
      if (v4)
      {
        v5 = 152 * v4;
        v6 = *(_QWORD *)(v2 + 48) + 48;
        do
        {
          if ((*(_DWORD *)(v6 - 48) & 0x7FFFFFFF) == 2)
          {
            v7 = *(void **)(v6 - 16);
            if ((void *)v6 != v7)
            {
              v8 = v6;
              v9 = v5;
              free(v7);
              v6 = v8;
              v5 = v9;
            }
          }
          v6 += 152;
          v5 -= 152;
        }
        while (v5);
      }
      if ((*(_BYTE *)(v2 + 104) & 1) == 0 && *(_BYTE *)(v2 + 105) == 3)
        sub_22ECF95E4(v2 + 112);
      v2 += 168;
    }
    while (v2 != v3);
  }
}

void *sub_22ECF9840(uint64_t a1, int a2)
{
  unsigned int v4;
  void *result;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  sub_22ECF9784((uint64_t *)a1);
  sub_22E6188F4(a1 + 2864);
  *(_DWORD *)(a1 + 2976) = 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v8 = *(_QWORD *)a1 - 104;
    v9 = 168 * v4;
    do
    {
      v10 = (void **)(v8 + v9);
      sub_22E6C60B8(&v10);
      v9 -= 168;
    }
    while (v9);
  }
  *(_DWORD *)(a1 + 8) = 0;
  result = *(void **)(a1 + 2712);
  if (result != *(void **)(a1 + 2704))
  {
    v6 = *(unsigned int *)(a1 + 2720);
    if (v6 >= 0x21 && 4 * (*(_DWORD *)(a1 + 2724) - *(_DWORD *)(a1 + 2728)) < v6)
    {
      result = (void *)llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 2704));
      goto LABEL_4;
    }
    result = memset(result, 255, 8 * v6);
  }
  *(_QWORD *)(a1 + 2724) = 0;
LABEL_4:
  *(_DWORD *)(a1 + 2964) = a2;
  return result;
}

uint64_t sub_22ECF9910(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, int a6)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t i;
  unint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  void *v41[2];
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v9)
  {
    v11 = *(_QWORD **)(a4 + 8);
    for (i = 8 * v9; i; i -= 8)
    {
      v13 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = *(_DWORD *)(v13 + 28) & 0x7E;
      if (v14 == 46)
      {
        if ((a6 & 1) != 0)
          goto LABEL_38;
        v15 = *(_QWORD *)(v13 + 64);
      }
      else
      {
        v15 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
        if (!a6)
          goto LABEL_9;
      }
      if ((*(_BYTE *)(v13 + 8) & 4) != 0 && !sub_22EC62AF4((uint64_t)a1, v13))
        goto LABEL_38;
LABEL_9:
      v16 = v14 != 46 && a6 == 0;
      v17 = !v16 && (*(_WORD *)(a1[27] + 8) & 0x7Eu) - 34 <= 3 && (*(_WORD *)(a3 + 30) & 0x180) == 0;
      if (v15)
        v18 = (*(_DWORD *)(v15 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
      else
        v18 = 0;
      v19 = v15;
      if (!v18)
      {
        v20 = *(_DWORD *)(v15 + 28) & 0x7F;
        if (v20 == 13 || v20 == 45)
          goto LABEL_38;
        if (v20 != 29)
        {
          if ((v20 - 33) >= 5
            && (v20 != 74 || (sub_22F0AAC5C(*(_QWORD *)(v15 + 64)) & 4) != 0 && !sub_22E8BB0E8(v15)))
          {
LABEL_54:
            *a5 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
            return 2;
          }
          goto LABEL_38;
        }
        v19 = *(_QWORD *)(v15 + 48);
        if (!v19)
          goto LABEL_54;
      }
      if ((sub_22ECF9D50(a1, a3, v19, v17, 1, 1) & 1) != 0)
      {
        v21 = *(uint64_t **)(a1[11] + 15208);
        v22 = sub_22EFC01DC(v19, 0);
        if (!sub_22F1CA310(v21, v22))
          goto LABEL_54;
      }
      else
      {
        v23 = v17 ^ 1;
        if (v14 != 46)
          v23 = 1;
        if ((v23 & 1) != 0)
        {
          if ((*(_DWORD *)(v15 + 28) & 0x7F) == 0x1D || sub_22EA27A2C((uint64_t)a1, *v11 & 0xFFFFFFFFFFFFFFFCLL, a3))
          {
            *a5 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
            return 1;
          }
        }
        else
        {
          sub_22EAC4BD4((uint64_t)a1, a2, (_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFFCLL));
        }
      }
LABEL_38:
      ++v11;
    }
  }
  if ((*(_WORD *)(a3 + 30) & 0x180) == 0)
    return 0;
  v24 = *(_QWORD *)(a3 + 56);
  if ((v24 & 4) == 0 || !*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  v25 = *(_QWORD *)(a3 + 144);
  v26 = (v25 & 6) == 6 || (v25 & 6) == 0;
  v27 = v26 && v25 > 7;
  if (v27 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    return 0;
  v40 = 0;
  v41[0] = v42;
  v41[1] = (void *)0x800000000;
  v43 = 0;
  v44 = 0;
  v28 = *(_QWORD **)(a4 + 112);
  v45 = 0;
  v46 = v28;
  v47 = *(_OWORD *)(a4 + 120);
  v48 = *(_QWORD *)(a4 + 136);
  v29 = *(_QWORD *)(a4 + 152);
  v49 = 0;
  v50 = v29;
  v51 = *(_WORD *)(a4 + 160);
  v52 = *(_BYTE *)(a4 + 162);
  v53 = 0;
  v54 = *(_BYTE *)(a4 + 164);
  v56 = *(_BYTE *)(a4 + 166);
  v30 = *(_BYTE **)(a4 + 8);
  v31 = &v30[8 * *(unsigned int *)(a4 + 16)];
  v55 = 0;
  sub_22E3D0148((uint64_t)v41, v30, v31);
  LODWORD(v40) = 2;
  if (sub_22ED6CFD0())
  {
    sub_22EFC77E8(a3, 1);
    v32 = 0;
  }
  else
  {
    v34 = *(_QWORD *)v41[0] & 0xFFFFFFFFFFFFFFFCLL;
    v35 = *(_DWORD *)(v34 + 28);
    if ((v35 & 0x7Fu) <= 0x2F && ((1 << (v35 & 0x7F)) & 0xC00000060000) != 0)
    {
      v34 = sub_22EFBAEA4(v34);
      v35 = *(_DWORD *)(v34 + 28);
    }
    if ((v35 & 0x7Eu) - 52 >= 6)
      v36 = 0;
    else
      v36 = v34;
    *a5 = v36;
    v32 = 1;
  }
  if (v53)
  {
    if ((_DWORD)v40 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v40);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v40);
    }
  }
  if (v43)
  {
    v37 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v37, 0x10E0C409F09D3C3);
  }
  if (v41[0] != v42)
    free(v41[0]);
  return v32;
}

uint64_t sub_22ECF9D50(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  char v77;
  int v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  _BYTE *v90;
  unsigned int v91[24];
  uint64_t (**v92)();
  void **v93;
  char v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[128];
  _QWORD *v99;
  uint64_t v100;
  _QWORD v101[18];

  v101[16] = *MEMORY[0x24BDAC8D0];
  if (sub_22EFBFAF0(a2) || sub_22EFBFB90(a2))
    return 0;
  v13 = *(_QWORD *)(a3 + 144);
  if ((v13 & 6) != 0)
    v14 = 0;
  else
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(a2 + 144);
  if ((v15 & 6) != 0)
    v16 = 0;
  else
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 != 0) == (v16 == 0))
    return 1;
  v17 = *(_QWORD *)((*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v18 + 16) == 25)
    return 0;
  v19 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v20 + 16) == 25)
    return 0;
  if ((*(_QWORD *)(a3 + 48) & 7 | v17) != (*(_QWORD *)(a2 + 48) & 7 | v19))
  {
    v33 = *(_QWORD *)(v18 + 16);
    v34 = *(_QWORD *)(v20 + 16);
    if (((v34 ^ v33) & 0x3FFFC000000000) != 0
      || ((v33 & 0x800000000000000) != 0) != ((v34 & 0x800000000000000) != 0)
      || !sub_22ECFA740((uint64_t)a1, v18, v20, 0))
    {
      return 1;
    }
  }
  if (v16)
  {
    if ((a4 & 1) == 0)
    {
      if (!sub_22ED5D218(a1, *(_QWORD *)(v16 + 56), *(_QWORD *)(v14 + 56), 0, 0, 0))
        return 1;
      v21 = sub_22EA0E144(a3);
      v22 = sub_22EA0E144(a2);
      if ((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7) != (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) | v22 & 7))
        return 1;
    }
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 54 >= 4)
    v23 = 0;
  else
    v23 = a3;
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 >= 4)
    v24 = 0;
  else
    v24 = a2;
  if (v23
    && v24
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(v23 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(v23 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4)
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(v24 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v25 || *(_BYTE *)(v25 + 16) != 26)
      v25 = sub_22F10CF48(v25);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v27 || *(_BYTE *)(v27 + 16) != 26)
      v27 = sub_22F10CF48(v27);
    if (((*(_QWORD *)(v27 + 16) ^ v26) & 0x300000000) != 0)
    {
      if ((a4 & 1) == 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v28 || *(_BYTE *)(v28 + 16) != 26)
          v28 = sub_22F10CF48(v28);
        if ((*(_BYTE *)(v28 + 20) & 3) == 0)
          goto LABEL_49;
        v29 = *(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v29 || *(_BYTE *)(v29 + 16) != 26)
          v29 = sub_22F10CF48(v29);
        if ((*(_BYTE *)(v29 + 20) & 3) == 0)
        {
LABEL_49:
          sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), 0x1225u, 0, (uint64_t)&v99);
          v30 = *(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (!v30 || *(_BYTE *)(v30 + 16) != 26)
            v30 = sub_22F10CF48(v30);
          LODWORD(v96) = *(_DWORD *)(v30 + 20) & 3;
          sub_22E8900C4((uint64_t)&v99, (int *)&v96);
          v31 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (!v31 || *(_BYTE *)(v31 + 16) != 26)
            v31 = sub_22F10CF48(v31);
          LODWORD(v92) = *(_DWORD *)(v31 + 20) & 3;
          v32 = (unsigned int *)sub_22E8900C4((uint64_t)&v99, (int *)&v92);
          sub_22E903BEC(v32);
          sub_22E8FCA40(a1, *(_DWORD *)(v23 + 24), 0x6Cu, 0, (uint64_t)v91);
          sub_22E903BEC(v91);
        }
      }
      return 1;
    }
    v35 = sub_22E46BB88(v23);
    v36 = sub_22E46BB88(v24);
    v37 = HIDWORD(v36);
    if ((*(_BYTE *)(a1[9] + 1) & 4) != 0)
    {
      v38 = v36;
    }
    else
    {
      v38 = v36;
      if ((*(_BYTE *)(v24 + 83) & 0xC0) != 0)
        v38 = v36 | ((*(_DWORD *)(v24 + 28) & 0x7F) != 55);
    }
    result = 1;
    if (((v38 ^ v35) & 0xFFFFFFFD) != 0 || HIDWORD(v35) != v37)
      return result;
  }
  v39 = *(uint64_t **)(a2 + 120);
  v40 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((v40 && *(_BYTE *)(v40 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v40 = sub_22F10CF48(v40)) != 0)
    && (v41 = *(_QWORD *)(v40 + 16), (v41 & 0x3FFFC000000000) != 0))
  {
    v42 = 8 * (unsigned __int16)(v41 >> 38) - 8;
    do
    {
      v43 = *v39++;
      v44 = sub_22E484F44(v43);
      if (v44)
        break;
      v45 = v42;
      v42 -= 8;
    }
    while (v45);
  }
  else
  {
    v44 = 0;
  }
  v46 = *(uint64_t **)(a3 + 120);
  v47 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v47)
    v48 = *(_BYTE *)(v47 + 16) == 26;
  else
    v48 = 0;
  if ((v48
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v47 = sub_22F10CF48(v47)) != 0)
    && (v49 = *(_QWORD *)(v47 + 16), (v49 & 0x3FFFC000000000) != 0))
  {
    v50 = 8 * (unsigned __int16)(v49 >> 38);
    while (!sub_22E484F44(*v46))
    {
      ++v46;
      v50 -= 8;
      if (!v50)
        goto LABEL_85;
    }
    if (!v44)
      return 1;
  }
  else
  {
LABEL_85:
    if (v44)
      return 1;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
  {
    v51 = 0;
LABEL_91:
    v53 = 0;
    goto LABEL_93;
  }
  sub_22EFC8E88(a2);
  v51 = *v52;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_91;
  sub_22EFC8E88(a2);
  v53 = *(_QWORD *)v54 + 8 * *(unsigned int *)(v54 + 8);
LABEL_93:
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v55 = *v56;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v57 = *(_QWORD *)v58 + 8 * *(unsigned int *)(v58 + 8);
      goto LABEL_98;
    }
  }
  else
  {
    v55 = 0;
  }
  v57 = 0;
LABEL_98:
  v59 = v101;
  v60 = v98;
  while (1)
  {
    v61 = v51;
    if ((unint64_t)v51 >= v53)
    {
      v62 = (uint64_t *)v53;
      if ((uint64_t *)v53 == v51)
        goto LABEL_110;
      while (*(_WORD *)(*v62 + 32) != 167)
      {
        if (++v62 == v51)
          goto LABEL_110;
      }
      v61 = v51;
    }
    else
    {
      while (*(_WORD *)(*v61 + 32) != 167)
      {
        if (++v61 == (uint64_t *)v53)
          goto LABEL_110;
      }
      v62 = (uint64_t *)v53;
    }
    if (v61 != v62)
      goto LABEL_121;
LABEL_110:
    v63 = v55;
    if ((unint64_t)v55 >= v57)
    {
      v64 = (uint64_t *)v57;
      if ((uint64_t *)v57 == v55)
        break;
      while (*(_WORD *)(*v64 + 32) != 167)
      {
        if (++v64 == v55)
          goto LABEL_153;
      }
      v63 = v55;
    }
    else
    {
      while (*(_WORD *)(*v63 + 32) != 167)
      {
        if (++v63 == (uint64_t *)v57)
          goto LABEL_153;
      }
      v64 = (uint64_t *)v57;
    }
    if (v63 == v64)
      break;
LABEL_121:
    v65 = v51;
    if ((unint64_t)v51 >= v53)
    {
      v66 = (uint64_t *)v53;
      if ((uint64_t *)v53 == v51)
        return 1;
      while (*(_WORD *)(*v66 + 32) != 167)
      {
        ++v66;
        result = 1;
        if (v66 == v51)
          return result;
      }
      v65 = v51;
    }
    else
    {
      while (*(_WORD *)(*v65 + 32) != 167)
      {
        ++v65;
        result = 1;
        if (v65 == (uint64_t *)v53)
          return result;
      }
      v66 = (uint64_t *)v53;
    }
    if (v65 == v66)
      return 1;
    v67 = v55;
    if ((unint64_t)v55 >= v57)
    {
      v68 = (uint64_t *)v57;
      if ((uint64_t *)v57 == v55)
        return 1;
      while (*(_WORD *)(*v68 + 32) != 167)
      {
        ++v68;
        result = 1;
        if (v68 == v55)
          return result;
      }
      v67 = v55;
    }
    else
    {
      while (*(_WORD *)(*v67 + 32) != 167)
      {
        ++v67;
        result = 1;
        if (v67 == (uint64_t *)v57)
          return result;
      }
      v68 = (uint64_t *)v57;
    }
    if (v67 == v68)
      return 1;
    v89 = v59;
    v90 = v60;
    v99 = v59;
    v100 = 0x2000000000;
    v96 = v60;
    v97 = 0x2000000000;
    do
    {
      v70 = *v51++;
      v69 = v70;
    }
    while (*(_WORD *)(v70 + 32) != 167);
    v71 = *(unsigned __int8 **)(v69 + 40);
    v72 = a1[11];
    v94 = 1;
    v92 = &off_24FAC6E70;
    v93 = (void **)&v99;
    v95 = v72;
    sub_22F0E9FEC(&v92, v71);
    do
    {
      v74 = *v55++;
      v73 = v74;
    }
    while (*(_WORD *)(v74 + 32) != 167);
    v75 = *(unsigned __int8 **)(v73 + 40);
    v76 = a1[11];
    v94 = 1;
    v93 = &v96;
    v92 = &off_24FAC6E70;
    v95 = v76;
    sub_22F0E9FEC(&v92, v75);
    v77 = llvm::FoldingSetNodeID::operator==();
    v60 = v90;
    if (v96 != v90)
    {
      free(v96);
      v60 = v90;
    }
    v59 = v89;
    if (v99 != v89)
    {
      free(v99);
      v59 = v89;
      v60 = v90;
    }
    result = 1;
    if ((v77 & 1) == 0)
      return result;
  }
LABEL_153:
  if ((*(_BYTE *)(a1[9] + 68) & 0x20) != 0 && a5 && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x39)
  {
    v78 = sub_22E9FDFC4((uint64_t)a1, a2, 0);
    v79 = sub_22E9FDFC4((uint64_t)a1, a3, 0);
    v80 = v78 == 4 || v78 == v79;
    result = !v80;
    if (!v80 || !a6)
      return result;
LABEL_167:
    v81 = *(_QWORD *)(a2 + 56);
    if ((v81 & 4) != 0)
    {
      v83 = *(unsigned __int8 **)((v81 & 0xFFFFFFFFFFFFFFF8) + 40);
      v84 = *(_QWORD *)(a3 + 56);
      if ((v84 & 4) != 0)
      {
        v85 = *(unsigned __int8 **)((v84 & 0xFFFFFFFFFFFFFFF8) + 40);
        if ((v83 != 0) != (v85 == 0))
        {
          if (!v83)
            return 0;
          v99 = v101;
          v100 = 0x2000000000;
          v97 = 0x2000000000;
          v86 = a1[11];
          v94 = 1;
          v92 = &off_24FAC6E70;
          v93 = (void **)&v99;
          v95 = v86;
          v96 = v98;
          sub_22F0E9FEC(&v92, v83);
          v87 = a1[11];
          v94 = 1;
          v92 = &off_24FAC6E70;
          v93 = &v96;
          v95 = v87;
          sub_22F0E9FEC(&v92, v85);
          v88 = llvm::FoldingSetNodeID::operator==();
          if (v96 != v98)
            free(v96);
          if (v99 != v101)
            free(v99);
          if (v88)
            return 0;
        }
      }
      else if (!v83)
      {
        return 0;
      }
    }
    else
    {
      v82 = *(_QWORD *)(a3 + 56);
      if ((v82 & 4) == 0 || !*(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFF8) + 40))
        return 0;
    }
    return 1;
  }
  if (a6)
    goto LABEL_167;
  return 0;
}

uint64_t sub_22ECFA740(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  unint64_t v27;

  if (!(unsigned __int16)(*(_QWORD *)(a2 + 16) >> 38))
    return 1;
  v6 = 0;
  v7 = a2 + 40;
  v8 = a3 + 40;
  v9 = 8 * (unsigned __int16)(*(_QWORD *)(a2 + 16) >> 38);
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 88);
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v6) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
      v11 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v7 + 8 * v6));
    v12 = v11 & 0xFFFFFFFFFFFFFFF0;
    v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    if (v13 && *(_BYTE *)(v13 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      && (v13 = sub_22F10CF48(v13)) != 0)
    {
      v18 = *(_QWORD *)(v13 + 32);
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v19 & 8) != 0 && ((*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11) - 24) <= 2)
      {
        v20 = v13;
        v21 = sub_22EF5DEB0(v10, v18);
        v12 = sub_22EF5B848(v10, v21, *(_DWORD *)(v20 + 40));
      }
    }
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 8 * v6) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
      v15 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v8 + 8 * v6));
    v16 = v15 & 0xFFFFFFFFFFFFFFF0;
    v17 = *(_QWORD *)v16;
    if (*(_QWORD *)v16 && *(_BYTE *)(v17 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      && (v27 = v16, v17 = sub_22F10CF48(v17), v16 = v27, v17))
    {
      v22 = *(_QWORD *)(v17 + 32);
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v23 & 8) != 0 && ((*(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11) - 24) <= 2)
      {
        v24 = v17;
        v25 = sub_22EF5DEB0(v14, v22);
        v16 = sub_22EF5B848(v14, v25, *(_DWORD *)(v24 + 40));
      }
    }
    if ((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) | v12 & 7) != (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) | v16 & 7))
      break;
    ++v6;
    v9 -= 8;
    if (!v9)
      return 1;
  }
  result = 0;
  if (a4)
    *a4 = v6;
  return result;
}

void sub_22ECFA94C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W5>, uint64_t a5@<X6>, int a6@<W7>, uint64_t a7@<X8>, char a8, unsigned __int8 a9)
{
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *(_OWORD *)v25 = xmmword_22F495F80;
  *((_QWORD *)&v27 + 1) = 0;
  if (sub_22ED1D500(a1, a2, a3, a4, (unint64_t *)&v25[8], a5, a6, a9))
    goto LABEL_2;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 16) == 45)
      {
        v17 = *(_QWORD *)(a2 + 8);
        v18 = v17 & 0xFFFFFFFFFFFFFFF0;
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v19)
        {
          if (*(_BYTE *)(v19 + 16) == 45)
          {
            if (*(_QWORD *)(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
              || (v23 = v17 & 0xFFFFFFFFFFFFFFF0,
                  v24 = *(_QWORD *)(a2 + 8),
                  sub_22F0D5A50(a2),
                  v21 = sub_22EAAB1B8(a1, v20, v24, a3),
                  v18 = v23,
                  v17 = v24,
                  v21))
            {
              v22 = *(_QWORD *)&v25[8] & 0xFFFFFFFC04000000;
              *(_QWORD *)&v25[8] = *(_QWORD *)&v25[8] & 0xFFFFFFFC04000000 | 0x20000000;
              *(_QWORD *)&v25[16] = v17;
              *(_QWORD *)&v26 = a3;
              *((_QWORD *)&v26 + 1) = a3;
              v27 = (unint64_t)a3;
              if (*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
                *(_QWORD *)&v25[8] = v22 | 0x20001100;
LABEL_2:
              *(_DWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = *(_QWORD *)v25;
              v13 = v26;
              *(_OWORD *)(a7 + 16) = *(_OWORD *)&v25[8];
              *(_OWORD *)(a7 + 32) = v13;
              *(_OWORD *)(a7 + 48) = v27;
              *(_QWORD *)(a7 + 64) = v28;
              return;
            }
          }
        }
      }
    }
    sub_22ED1F2B4();
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)&v25[16] = 0;
    *(_QWORD *)&v26 = v14;
    *((_QWORD *)&v26 + 1) = a3;
    *(_QWORD *)&v25[8] = a2;
    *(_DWORD *)a7 = 4;
    *(_QWORD *)(a7 + 8) = *(_QWORD *)v25;
    v15 = v26;
    *(_OWORD *)(a7 + 16) = *(_OWORD *)&v25[8];
    *(_OWORD *)(a7 + 32) = v15;
  }
}

uint64_t sub_22ECFABE8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v16[4];
  void *v17;
  uint64_t v18;
  unsigned __int8 *v19;

  v19 = a2;
  if ((sub_22ECFAD0C(a1, &v19, 0) & 1) != 0)
    return 1;
  v10 = a1[9];
  if ((a4 & 0xFFFFFFFB) == 1)
    v11 = ((unint64_t)*(unsigned __int16 *)(v10 + 148) >> 1) & 1;
  else
    v11 = 0;
  if ((*(_BYTE *)(v10 + 1) & 0x40) != 0)
  {
    v12 = v19;
    sub_22F0D5A50((uint64_t)v19);
    sub_22EC32354(a1, v13, a3, *((_QWORD *)v12 + 1), &v19, 1);
  }
  if (a5)
    v14 = 2;
  else
    v14 = 0;
  sub_22ECFA94C(v16, a1, v19, a3, 0, v14, 0, 0, v11, 0);
  v9 = sub_22EBC4694(a1, v19, a3, v16, a4, 0);
  if ((v16[0] & 0x7FFFFFFF) == 2 && v17 != &v18)
    free(v17);
  return v9;
}

uint64_t sub_22ECFAD0C(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  int v10;
  int v11;
  unsigned int v12;
  unsigned __int8 ***v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t *v19;

  v4 = *a2;
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = *(_DWORD *)(v5 + 16) == 11;
  else
    v7 = 0;
  v8 = v6 & 0xFE00000;
  v10 = v7 && v8 > 0x8180000;
  if (v10 == 1)
  {
    v11 = (v6 >> 19) & 0x1FF;
    if (v11 == 260)
    {
      v8 = 0;
    }
    else
    {
      if (a3 && v11 == 265)
      {
        v12 = *(_DWORD *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          v18 = v4;
          v19 = a1;
          v17 = a3;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          a3 = v17;
          v4 = v18;
          a1 = v19;
          v12 = *(_DWORD *)(v17 + 8);
        }
        v13 = (unsigned __int8 ***)(*(_QWORD *)a3 + 16 * v12);
        *v13 = a2;
        v13[1] = (unsigned __int8 **)v4;
        ++*(_DWORD *)(a3 + 8);
        v14 = sub_22EC2C298(a1, *a2);
      }
      else
      {
        v15 = sub_22EB19A28(a1);
        if ((v15 & 1) != 0)
        {
          v8 = 1;
          return v10 & v8;
        }
        v14 = v15 & 0xFFFFFFFFFFFFFFFELL;
      }
      v8 = 0;
      *a2 = (unsigned __int8 *)v14;
    }
  }
  return v10 & v8;
}

uint64_t sub_22ECFAE0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v22;
  unint64_t v23;
  BOOL v24;
  BOOL v26;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;

  v4 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (v4 == v6)
    return 0;
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 != *(unsigned __int8 *)(v4 + 16))
    return 0;
  if ((v7 - 27) >= 0xFFFFFFFE)
  {
    v11 = v5 | a3 & 7;
  }
  else
  {
    if (v7 != 10)
    {
      if (v7 == 31)
      {
        if (*(_QWORD *)(v6 + 40) != *(_QWORD *)(v4 + 40))
          return 0;
      }
      else if (v7 != 39)
      {
        return 0;
      }
    }
    v11 = *(_QWORD *)(v6 + 32);
    v6 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    v12 = *(unsigned __int8 *)(v6 + 16);
    v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
    if ((v12 - 27) < 0xFFFFFFFE || v12 != *(unsigned __int8 *)(v4 + 16))
      return 0;
  }
  v14 = *(_DWORD *)(v4 + 16);
  v15 = *(_DWORD *)(v6 + 16);
  v16 = ((v15 & 0x1000000) == 0) & HIBYTE(v14);
  if (v16 == 1)
  {
    v4 = (uint64_t)sub_22EF5F1F4(*(_QWORD *)(a1 + 88), v4, (v14 >> 19) & 0xFFDF);
    v17 = *(_BYTE *)(v4 + 16);
  }
  else
  {
    v17 = *(_DWORD *)(v4 + 16);
  }
  if (v17 == 26)
  {
    if (sub_22F113A44(v4))
    {
      v18 = v4;
    }
    else
    {
      v18 = v4;
      if (sub_22F113A44(v6))
      {
        v19 = *(_QWORD *)(a1 + 88);
        v28 = 0;
        v29 = 0u;
        v30 = 0u;
        v31 = 0;
        v18 = *(_QWORD *)(sub_22EF5F294(v19, v4 & 0xFFFFFFFFFFFFFFF0, (__int128 *)&v28) & 0xFFFFFFFFFFFFFFF0);
        v16 = 1;
      }
    }
    v34 = &v36;
    v35 = xmmword_22F4559B0;
    v33 = 0;
    if (sub_22EF71984(*(_QWORD *)(a1 + 88), v6, v4, (_BYTE *)&v33 + 1, &v33, (uint64_t *)&v34))
      v20 = HIBYTE(v33) == 0;
    else
      v20 = 1;
    if (!v20 && v33 == 0)
    {
      sub_22E4913B4(v4, (uint64_t)&v28);
      if ((_QWORD)v35)
        v22 = v34;
      else
        v22 = 0;
      v32 = v22;
      v23 = sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(v4 + 24), (uint64_t *)(v4 + 40), (unsigned __int16)(*(_QWORD *)(v4 + 16) >> 38), (__int128 *)&v28, 0);
      v18 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
      if (v18)
        v24 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
      else
        v24 = 0;
      if (!v24)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
          v18 = sub_22F10CF48(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
        else
          v18 = 0;
      }
      v16 = 1;
    }
    if (v34 != &v36)
      free(v34);
  }
  else
  {
    v18 = v4;
  }
  if ((v14 & 0xF80000) == 0xE00000 && (v15 & 0xF80000) == 0)
  {
    v18 = (uint64_t)sub_22EF5F1F4(*(_QWORD *)(a1 + 88), v18, (v14 >> 19) & 0x1FE0);
    v16 = 1;
  }
  if (v16)
    v26 = (v18 & 0xFFFFFFFFFFFFFFF0) == v11;
  else
    v26 = 0;
  if (!v26)
    return 0;
  *a4 = a3;
  return 1;
}

uint64_t sub_22ECFB0F0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  _QWORD *v59;
  unsigned int v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = *(_BYTE *)(v8 + 16) == 11;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_126;
    v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
    v11 = sub_22F1124D8(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    v12 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    v13 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0;
    v14 = *(_QWORD *)v13;
    if (v11)
    {
      v15 = v14 && (*(_DWORD *)(*(_QWORD *)v13 + 16) & 0xFF800FF) == 87031819;
      v16 = v15;
      if (*(_DWORD *)(*(_QWORD *)v13 + 16) != 44 && !v16)
      {
        if (sub_22F110930(v12)
          || (v22 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v10), v22 < sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v7)))
        {
          v23 = *(_DWORD *)(v8 + 16) & 0xFF80000;
          v24 = 95420416;
        }
        else
        {
          v23 = *(_DWORD *)(v8 + 16) & 0xFF80000;
          v24 = 91226112;
        }
        v36 = v23 == v24;
        goto LABEL_74;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)v13 + 16) != 44)
      goto LABEL_40;
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v14 + 24)) + 76) & 0x80) != 0)
      goto LABEL_126;
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v14 + 24)) + 77) & 2) == 0)
      break;
    v17 = sub_22F114198(*(_QWORD *)(v14 + 24));
    a3 = sub_22E496830(v17);
    a2 = 0;
    if (*(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_125;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_DWORD *)(v18 + 16);
  if (v18)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (v20)
  {
    if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (!v18 || v19 != 44)
  {
    if (v19 != 9)
      goto LABEL_38;
    goto LABEL_37;
  }
  v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
  if (((*(_BYTE *)(v21 + 74) & 1) != 0 || *(_QWORD *)(v21 + 128) > 7uLL)
    && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v18 + 24)) + 76) & 0x80) == 0)
  {
LABEL_37:
    sub_22F0D5A50((uint64_t)a2);
    if ((sub_22EE8B180(a1, v25) & 1) != 0)
      goto LABEL_38;
    v36 = *(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(sub_22F114198(*(_QWORD *)(v14 + 24))
                                                                                          + 136) & 0xFFFFFFFFFFFFFFF0)
                                                                             + 8) & 0xFFFFFFFFFFFFFFF0);
LABEL_74:
    LOBYTE(a1) = v36;
    return a1 & 1;
  }
LABEL_38:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
LABEL_126:
    LOBYTE(a1) = 0;
    return a1 & 1;
  }
  v12 = *v10;
  v13 = *(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_40:
  v26 = *(_QWORD *)v13;
  if (v26)
    v27 = *(_DWORD *)(v26 + 16) == 11;
  else
    v27 = 0;
  if (v27)
  {
    v31 = (*(_DWORD *)(v26 + 16) >> 19) & 0x1FF;
    if ((v31 - 169) < 4 || v31 == 180)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      v33 = *(_DWORD *)(v32 + 16);
      if (v32)
        v34 = v33 == 11;
      else
        v34 = 0;
      if (v34)
      {
        if (((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_65;
      }
      else if (v32 && v33 == 44)
      {
        v35 = sub_22F114198(*(_QWORD *)(v32 + 24));
        if (((*(_BYTE *)(v35 + 74) & 1) != 0 || *(_QWORD *)(v35 + 128) > 7uLL)
          && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v32 + 24)) + 76) & 0x80) == 0)
        {
          v12 = *v10;
LABEL_65:
          v37 = sub_22F110930(v12);
          v38 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v10);
          v39 = 0;
          v40 = *(_QWORD **)(a1 + 88);
          v41 = v40[2066];
          v63 = v40[2060];
          v64 = v41;
          v42 = v40[2067];
          v65 = v40[2061];
          v66 = v42;
          v43 = v40[2062];
          v44 = v40[2068];
          v67 = v43;
          v68 = v44;
          while (1)
          {
            v45 = (uint64_t *)(*(uint64_t *)((char *)&v63 + v39) & 0xFFFFFFFFFFFFFFF0);
            v46 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v45);
            if (v38 < v46 || v38 == v46 && v37 == sub_22F110930(*v45))
              break;
            v39 += 8;
            if (v39 == 48)
              goto LABEL_44;
          }
          v36 = *(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v45[1] & 0xFFFFFFFFFFFFFFF0);
          goto LABEL_74;
        }
      }
      else if (v33 == 9)
      {
        goto LABEL_65;
      }
    }
  }
LABEL_44:
  if (!a2
    || (v28 = sub_22F0018D8(a2)) == 0
    || (v29 = v28, LOBYTE(v63) = 0, LOBYTE(v65) = 0, !sub_22F110744(*v10, *(_QWORD *)(a1 + 88))))
  {
LABEL_119:
    v56 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v56)
      v57 = (*(_DWORD *)(v56 + 16) & 0xFF800FF) == 87031819;
    else
      v57 = 0;
    if (v57 && (*(_DWORD *)(v8 + 16) & 0xFF80000) == 0x5B00000)
    {
LABEL_125:
      LOBYTE(a1) = 1;
      return a1 & 1;
    }
    goto LABEL_126;
  }
  if ((v29[68] & 1) != 0)
  {
    v30 = *((_QWORD *)v29 + 9) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*((_DWORD *)v29 + 18) & 3) != 0 && (*((_DWORD *)v29 + 18) & 3) != 3)
      v30 = *(_QWORD *)(v30 + 8);
  }
  else
  {
    v30 = 0;
  }
  sub_22F00905C(v30, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v59);
  sub_22E54C490((uint64_t)&v63, (uint64_t)&v59);
  v47 = v65;
  if (v62 && v60 >= 0x41 && v59)
    MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
  if (v47)
  {
    v48 = BYTE4(v64);
    v60 = v64;
    if (v64 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v59);
    else
      v59 = 0;
    v61 = v48;
    v49 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v7);
    v50 = v60;
    if (v60 > 0x40)
    {
      *v59 = v49;
      bzero(v59 + 1, (((unint64_t)(v50 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v60)
        v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
      else
        v51 = 0;
      v59 = (_QWORD *)(v51 & v49);
    }
    if (BYTE4(v64))
      v52 = llvm::APInt::compare((llvm::APInt *)&v63, (const llvm::APInt *)&v59);
    else
      v52 = llvm::APInt::compareSigned((llvm::APInt *)&v63, (const llvm::APInt *)&v59);
    if (v52 < 0
      || sub_22F110930(*v10)
      && (!BYTE4(v64)
        ? (v53 = llvm::APInt::compareSigned((llvm::APInt *)&v63, (const llvm::APInt *)&v59))
        : (v53 = llvm::APInt::compare((llvm::APInt *)&v63, (const llvm::APInt *)&v59)),
          v53 < 1))
    {
      v55 = 95420416;
    }
    else
    {
      if (!sub_22F110B50(*v10)
        || (!BYTE4(v64)
          ? (v54 = llvm::APInt::compareSigned((llvm::APInt *)&v63, (const llvm::APInt *)&v59))
          : (v54 = llvm::APInt::compare((llvm::APInt *)&v63, (const llvm::APInt *)&v59)),
            v54 > 0))
      {
        LOBYTE(a1) = 0;
        goto LABEL_111;
      }
      v55 = 91226112;
    }
    LOBYTE(a1) = (*(_DWORD *)(v8 + 16) & 0xFF80000) == v55;
LABEL_111:
    if (v60 >= 0x41 && v59)
      MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
    if (!(_BYTE)v65)
      return a1 & 1;
    goto LABEL_115;
  }
  if (!(_BYTE)v65)
    goto LABEL_119;
LABEL_115:
  if (v64 >= 0x41 && v63)
    MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
  if (!v47)
    goto LABEL_119;
  return a1 & 1;
}

BOOL sub_22ECFB7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  int v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_DWORD *)(v3 + 16);
  if (v3)
    v5 = *(_DWORD *)(v3 + 16) == 11;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (!v6 || *(_DWORD *)(v6 + 16) != 11)
    return 0;
  v10 = v7 & 0xFF80000;
  if ((v4 & 0xFF80000) == 0x6980000 && v10 == 111149056)
    return 1;
  v12 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v12 + 1) & 1) != 0 || ((v4 >> 19) & 0x1FF) - 211 > 1)
    return v10 == 110624768 && (v4 & 0xFF80000) == 110100480 && (*(_QWORD *)(v12 + 64) & 0x800000000) == 0;
  result = 1;
  if (((v7 >> 19) & 0x1FF) - 213 > 4 || ((1 << ((v7 >> 19) + 43)) & 0x19) == 0)
    return v10 == 110624768 && (v4 & 0xFF80000) == 110100480 && (*(_QWORD *)(v12 + 64) & 0x800000000) == 0;
  return result;
}

uint64_t sub_22ECFB880(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  _BOOL4 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v68;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) == 0)
    return 0;
  v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v11 & 8) != 0)
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v66 = v12 | v13 | (v11 | a2) & 7;
  v14 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v15 || *(_BYTE *)(v15 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
      v15 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    else
      v15 = 0;
  }
  v16 = *v10;
  if (!*v10 || *(_BYTE *)(v16 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
    {
      LODWORD(v5) = 0;
      v16 = 0;
      v17 = v15 != 0;
      goto LABEL_24;
    }
    v16 = sub_22F10CF48(*v10);
  }
  v17 = v15 != 0;
  LODWORD(v5) = v16 != 0;
  if (v15 && v16)
  {
    if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      return 0;
    if (sub_22EF6ED94(*(_QWORD *)(a1 + 88), v15, v16))
    {
      v51 = sub_22F40A120(v15);
      v52 = sub_22F40A120(v16);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0 && v51 && v52)
      {
        v53 = *(_QWORD *)(v15 + 32);
        v54 = *(_QWORD *)(v16 + 32);
        v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v55 & 8) != 0)
        {
          v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v56 = 0;
          v57 = 0;
        }
        v58 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v58 + 8) & 0xF) != 0)
          v58 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v15 + 32));
        v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v60 = v59 && *(_DWORD *)(v59 + 16) == 11;
        v61 = v60 && (*(_DWORD *)(v59 + 16) & 0xFF80000) == 86507520;
        v62 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v62 & 8) != 0)
        {
          v64 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v63 = 0;
          v64 = 0;
        }
        v65 = v61
            ? v57 & 0xFFFFFFFFFFFFFFF7 | (v55 | v54) & 7
            : v57 | (v55 | v54) & 7;
        v68 = v63 | v64 | (v62 | v53) & 7;
        if (!sub_22E95F24C((unsigned int *)&v68, v65 | v56))
          return 0;
      }
      v33 = sub_22ECFC10C(v16, *(_QWORD *)(v15 + 32), a3, *(_QWORD *)(a1 + 88), 0);
      v34 = v33;
      v32 = a4;
      goto LABEL_66;
    }
    v5 = 1;
    if (sub_22EF6ED94(*(_QWORD *)(a1 + 88), v16, v15))
    {
      *a5 = 1;
      v18 = sub_22ECFC10C(v16, *(_QWORD *)(v15 + 32), a3, *(_QWORD *)(a1 + 88), 0);
      v19 = v18;
      v20 = a4;
LABEL_45:
      *v20 = v18;
      *v20 = sub_22ECFC348(*(_QWORD *)(a1 + 88), v19, v66);
      return v5;
    }
    v17 = 1;
  }
LABEL_24:
  v21 = *v14;
  v22 = *(unsigned __int8 *)(*v14 + 16);
  if (!*v14 || v22 != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v21 = sub_22F10CF48(*v14);
      if (v21)
        goto LABEL_33;
      v21 = *v14;
      v22 = *(unsigned __int8 *)(*v14 + 16);
    }
    if (v22 != 10
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10
       || (v21 = sub_22F10CF48(v21)) == 0))
    {
      v29 = *v10;
      if (!*v10 || *(_BYTE *)(v29 + 16) != 10)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
          return 0;
        v29 = sub_22F10CF48(v29);
      }
      v30 = !v17;
      if (!v29)
        v30 = 1;
      if ((v30 & 1) != 0 || !sub_22F32EDD0(v15))
        return 0;
      goto LABEL_99;
    }
    if ((_DWORD)v5 && sub_22F32EDD0(v16))
    {
LABEL_99:
      *a4 = sub_22ECFC348(*(_QWORD *)(a1 + 88), a3, v66);
      return 1;
    }
  }
LABEL_33:
  v23 = *(_QWORD *)(v21 + 32);
  v24 = *v10;
  v25 = *(unsigned __int8 *)(*v10 + 16);
  if (!*v10 || v25 != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v24 = sub_22F10CF48(v24);
      if (v24)
        goto LABEL_41;
      v24 = *v10;
      v25 = *(unsigned __int8 *)(*v10 + 16);
    }
    if (v25 != 10)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
        return 0;
      v24 = sub_22F10CF48(v24);
      if (!v24)
        return 0;
    }
  }
LABEL_41:
  v26 = *(_QWORD *)(v24 + 32);
  v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v20 = a4;
    if ((sub_22ECFB880(a1, v26, v23, a4, a5) & 1) != 0)
    {
      v5 = 1;
      *a5 = 1;
      v18 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *a4, 0);
      v19 = v18;
      goto LABEL_45;
    }
    v28 = *v27;
  }
  if ((v28 && *(_BYTE *)(v28 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32 && sub_22F10CF48(v28))
    && ((v31 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v31 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32 && sub_22F10CF48(v31)))
  {
    if (sub_22ECFB880(a1, v26, v23, a4, a5))
    {
      v32 = a4;
      v33 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *a4, 0);
      v34 = v33;
LABEL_66:
      *v32 = v33;
      *v32 = sub_22ECFC348(*(_QWORD *)(a1 + 88), v34, v66);
      return 1;
    }
  }
  v35 = *v27;
  if (!*v27 || *(_BYTE *)(v35 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v35 = sub_22F10CF48(*v27);
    else
      v35 = 0;
  }
  v36 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
  if (!v36 || *(_BYTE *)(v36 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v36 = sub_22F10CF48(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
      goto LABEL_77;
    }
    return 0;
  }
LABEL_77:
  v5 = 0;
  if (v35 && v36)
  {
    if ((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8) | v26 & 7) != (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) | v23 & 7))
    {
      v37 = *(_QWORD *)(v35 + 16);
      v38 = *(_QWORD *)(v36 + 16);
      if (((v38 ^ v37) & 0x3FFFC000000000) == 0
        && ((v37 & 0x800000000000000) != 0) == ((v38 & 0x800000000000000) != 0))
      {
        v39 = sub_22E47E1B0(v35);
        if (v39 == sub_22E47E1B0(v36))
        {
          v40 = *(_QWORD *)(v35 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v35 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
          v41 = *(_QWORD *)(v36 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v36 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
          v42 = v40 != v41;
          if (v40 == v41 || sub_22ECFB880(a1, *(_QWORD *)(v35 + 24), *(_QWORD *)(v36 + 24), a4, a5))
          {
            v43 = *(_QWORD *)(v35 + 16);
            if ((v43 & 0x3FFFC000000000) != 0)
            {
              v44 = (uint64_t *)(v35 + 40);
              v45 = (uint64_t *)(v36 + 40);
              v46 = (unsigned __int16)(v43 >> 38);
              do
              {
                v48 = *v44++;
                v47 = v48;
                v50 = *v45++;
                v49 = v50;
                if ((*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8) | v47 & 7) != (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0)
                                                                                             + 8) | v50 & 7))
                {
                  if (!sub_22ECFB880(a1, v47, v49, a4, a5))
                    return 0;
                  v42 = 1;
                }
                --v46;
              }
              while (v46);
            }
            if (v42)
            {
              *a4 = sub_22ECFC348(*(_QWORD *)(a1 + 88), a3, v66);
              v5 = 1;
              *a5 = 1;
              return v5;
            }
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t sub_22ECFBFFC(unint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;

  if ((*(_DWORD *)a1 & 0x18000) == 0x10000)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    v7 = *(_QWORD *)v6;
    v8 = *(_DWORD *)(*(_QWORD *)v6 + 16);
    if (*(_QWORD *)v6)
      v9 = v8 == 11;
    else
      v9 = 0;
    if (v9)
    {
      if (((*(_DWORD *)(*(_QWORD *)v6 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_16;
    }
    else if (v7 && v8 == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v7 + 24)) + 76) & 0x80) != 0)
      {
        goto LABEL_16;
      }
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    }
    else if (v8 != 9)
    {
      goto LABEL_16;
    }
    if (*(_BYTE *)(*(_QWORD *)v6 + 16) != 44)
      return a2 ^ 1u;
  }
LABEL_16:
  if (a2)
    v11 = 2;
  else
    v11 = 1;
  return sub_22EFFBE1C(a1, a3, v11) != 0;
}

unint64_t sub_22ECFC10C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v10 = a3 & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v11 && *(_BYTE *)(v11 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v11 = sub_22F10CF48(v11)) != 0)
    && sub_22E5761BC(v11)
    || ((v12 = *(_QWORD *)v10) != 0 && *(_BYTE *)(v12 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v12 = sub_22F10CF48(v12)) != 0)
    && sub_22E491464(v12))
  {
    v13 = *(_QWORD *)v10;
LABEL_12:
    if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
      v13 = (unint64_t)sub_22F10D2BC(a3);
    return v13 & 0xFFFFFFFFFFFFFFF0;
  }
  v15 = sub_22F10ACF8(a1);
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
  v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v18 & 8) != 0)
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v21 = v20 | ((v16 | v15) | v18) & 7;
  if (a5)
    v21 &= 0xFFFFFFFFFFFFFE3FLL;
  if ((v17 & 8) != 0)
  {
    v23 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v22 = HIDWORD(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    LODWORD(v22) = 0;
    v23 = 0;
  }
  if ((v23 | (v17 | a2) & 7) == (_DWORD)v21 && (_DWORD)v22 == HIDWORD(v19))
  {
    v13 = *(_QWORD *)v10;
    if (a3 < 0x10)
    {
      if (*(_BYTE *)(v13 + 16) == 32)
        return sub_22F36CC4C(a4, a2);
      else
        return sub_22EF5B848(a4, a2, 0);
    }
    goto LABEL_12;
  }
  v25 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  if (((v21 | v19) & 0xCFFFFFFF8) != 0)
  {
    v28 = v21 | v19;
    v26 = sub_22E491354((unsigned int *)&v28, v25);
    v27 = sub_22EF5DBC4(a4, v26, v28);
  }
  else
  {
    v27 = v25 | v21 & 7;
  }
  if (*(_BYTE *)(*(_QWORD *)v10 + 16) == 32)
    return sub_22F36CC4C(a4, v27);
  else
    return sub_22EF5B848(a4, v27, 0);
}

uint64_t sub_22ECFC348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = a2;
  v15 = a3;
  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v7 = HIDWORD(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = v8 | (v6 | a2) & 7;
  if ((_DWORD)v9 != (_DWORD)a3 || (_DWORD)v7 != HIDWORD(a3))
  {
    if (sub_22E95F24C((unsigned int *)&v15, v9 | (v7 << 32)))
    {
      if ((v15 & 0xCFFFFFFF8) == 0)
        return v15 & 7 | v3;
      v16 = v15;
      v11 = v3;
    }
    else
    {
      v12 = *(_QWORD *)v5;
      if ((*(_BYTE *)(*(_QWORD *)v5 + 8) & 0xF) != 0)
        v12 = (unint64_t)sub_22F10D2BC(v3);
      v11 = v12 & 0xFFFFFFFFFFFFFFF0;
      if ((v15 & 0xCFFFFFFF8) == 0)
        return v15 & 7 | v11;
      v16 = v15;
    }
    v13 = sub_22E491354((unsigned int *)&v16, v11);
    return sub_22EF5DBC4(a1, v13, v16);
  }
  return v3;
}

uint64_t sub_22ECFC458(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
    return 0;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 0;
  result = *v5;
  if (!*v5 || *(_BYTE *)(result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  v9 = *(_QWORD *)(result + 32);
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v11 & 8) != 0)
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = v12 | v13 | (v11 | v9) & 7;
  v31 = v14;
  v15 = sub_22F40ACB8(*v10);
  result = 0;
  if (!v15 || (v13 & 0x1C0) != 0x100 || (v14 & 0xCFFFFFE3FLL) != 0)
    return result;
  result = *v4;
  if (!*v4 || *(_BYTE *)(result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      result = sub_22F10CF48(result);
      if (!result)
        return result;
      goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v16 = *(_QWORD *)(result + 32);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v18 & 8) != 0)
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v21 = sub_22F40ACB8(*v17);
  result = 0;
  if (v21 && (v20 & 0x180) == 0x80)
  {
    v22 = (v18 | v16) & 7 | v19 | v20 & 0xFFFFFFFFFFFFFE3FLL | 0x100;
    result = sub_22E95F24C((unsigned int *)&v31, v22);
    if ((_DWORD)result)
    {
      v23 = *v17;
      if ((*(_BYTE *)(*v17 + 8) & 0xF) != 0)
        v23 = (uint64_t)sub_22F10D2BC(v16);
      v24 = v23 & 0xFFFFFFFFFFFFFFF0;
      v30 = v23 & 0xFFFFFFFFFFFFFFF0;
      v25 = *v10;
      if ((*(_BYTE *)(*v10 + 8) & 0xF) != 0)
        v25 = (uint64_t)sub_22F10D2BC(v9);
      v26 = v25 & 0xFFFFFFFFFFFFFFF0;
      v29 = 0;
      if (sub_22F36EDA0(*(_QWORD *)(a1 + 88), v24, v25 & 0xFFFFFFFFFFFFFFF0, 0))
      {
        v30 = v26;
LABEL_33:
        v27 = *(_QWORD *)(a1 + 88);
        v32 = v22;
        v28 = sub_22E491354((unsigned int *)&v32, v26);
        v30 = sub_22EF5DBC4(v27, v28, v32);
        *a4 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v30, 0);
        return 1;
      }
      result = sub_22ECFB880(a1, v24, v26, &v30, &v29);
      if ((_DWORD)result)
      {
        v26 = v30;
        goto LABEL_33;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_22ECFC6F4(uint64_t a1, unsigned __int8 **a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *result;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  char v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;

  if (a3 < 0x10 || (v5 = a4, a4 <= 0xF))
  {
LABEL_35:
    result = *a2;
    if (!*a2)
    {
      result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
      *a2 = result;
    }
    result[*result + 1] = 2;
    v38 = *a2;
    v39 = **a2;
    *v38 = v39 + 1;
    *(_QWORD *)&v38[8 * v39 + 16] = 0;
    return result;
  }
  v6 = a3;
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 31)
  {
    v10 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
    {
      if (*(_BYTE *)(v8 + 16) != 31)
      {
        v8 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
        v10 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
      }
      if (!v10 || *(_BYTE *)(v10 + 16) != 31)
        v10 = sub_22F10CF48(v10);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        result = *a2;
        if (!*a2)
        {
          result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
          *a2 = result;
        }
        result[*result + 1] = 2;
        v12 = *a2;
        v13 = **a2;
        v14 = v13 + 1;
        *v12 = v13 + 1;
        *(_QWORD *)&v12[8 * v13 + 16] = 1;
        v15 = *(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFF0;
        v16 = &v12[v14];
        v17 = 9;
        v16[1] = 9;
        v18 = *a2;
        v19 = **a2;
        v20 = v19 + 1;
        *v18 = v19 + 1;
        *(_QWORD *)&v18[8 * v19 + 16] = v15;
        v21 = *(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF0;
LABEL_34:
        v18[v20 + 1] = v17;
        v36 = *a2;
        v37 = **a2;
        *v36 = v37 + 1;
        *(_QWORD *)&v36[8 * v37 + 16] = v21;
        return result;
      }
      v6 = *(_QWORD *)(v8 + 32);
      v5 = *(_QWORD *)(v10 + 32);
      v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      v9 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 39)
    v6 = sub_22F10ACF8(v8);
  v22 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    v5 = sub_22F10ACF8(v22);
  v23 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (!v23 || (v24 = *(_DWORD *)(v23 + 16), (v24 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_22;
    v23 = sub_22F10CF48(v23);
    if (!v23)
      goto LABEL_22;
    v24 = *(_DWORD *)(v23 + 16);
  }
  if ((v24 & 0x100000) != 0)
  {
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v23)
      {
        v72 = *(_DWORD *)(v23 + 16);
        if ((v72 & 0xFE) == 0x28)
          continue;
      }
      v23 = sub_22F10CF48(v23);
      v72 = *(_DWORD *)(v23 + 16);
    }
    while ((v72 & 0x100000) != 0);
  }
  v6 = *(_QWORD *)(v23 + 32);
LABEL_22:
  v25 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (!v25 || (v26 = *(_DWORD *)(v25 + 16), (v26 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_25;
    v25 = sub_22F10CF48(v25);
    if (!v25)
      goto LABEL_25;
    v26 = *(_DWORD *)(v25 + 16);
  }
  if ((v26 & 0x100000) != 0)
  {
    do
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v25)
      {
        v73 = *(_DWORD *)(v25 + 16);
        if ((v73 & 0xFE) == 0x28)
          continue;
      }
      v25 = sub_22F10CF48(v25);
      v73 = *(_DWORD *)(v25 + 16);
    }
    while ((v73 & 0x100000) != 0);
  }
  v5 = *(_QWORD *)(v25 + 32);
LABEL_25:
  v27 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v27 + 17) & 2) != 0 && !sub_22F10D628(v27))
    goto LABEL_35;
  if ((*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) | v6 & 7) == (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5 & 7))
    goto LABEL_35;
  v28 = (_QWORD *)sub_22ECFCDD0(v6);
  v29 = sub_22ECFCDD0(v5);
  if (!v28)
    goto LABEL_35;
  v30 = (_QWORD *)v29;
  if (!v29)
    goto LABEL_35;
  if (((*(_QWORD *)(v29 + 16) ^ v28[2]) & 0x3FFFC000000000) != 0)
  {
    result = *a2;
    if (!*a2)
    {
      result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
      *a2 = result;
    }
    result[*result + 1] = 2;
    v31 = *a2;
    v32 = **a2;
    *v31 = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = 2;
    v33 = (unsigned __int16)(v30[2] >> 38);
    v34 = &v31[(v32 + 1)];
    v17 = 3;
    v34[1] = 3;
    v18 = *a2;
    v35 = **a2;
    v20 = v35 + 1;
    *v18 = v35 + 1;
    *(_QWORD *)&v18[8 * v35 + 16] = v33;
    v21 = (unsigned __int16)(v28[2] >> 38);
    goto LABEL_34;
  }
  v74 = 0;
  if ((sub_22ECFA740(a1, (uint64_t)v28, v29, &v74) & 1) != 0)
  {
    if ((*(_QWORD *)((v28[3] & 0xFFFFFFFFFFFFFFF0) + 8) | v28[3] & 7) == (*(_QWORD *)((v30[3] & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) | v30[3] & 7))
    {
      v62 = sub_22E47E1B0((uint64_t)v28);
      if (v62 == sub_22E47E1B0((uint64_t)v30))
      {
        v63 = sub_22F113A44(*(_QWORD *)(v28[1] & 0xFFFFFFFFFFFFFFF0)) == 0;
        v64 = sub_22F113A44(*(_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF0)) == 0;
        result = *a2;
        if (v63 == v64)
        {
          if (!result)
          {
            result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
            *a2 = result;
          }
          v48 = 0;
          v47 = *result;
          v45 = 2;
        }
        else
        {
          if (!result)
          {
            result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
            *a2 = result;
          }
          v47 = *result;
          v45 = 2;
          v48 = 6;
        }
      }
      else
      {
        v65 = *a2;
        if (!*a2)
        {
          v65 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
          *a2 = v65;
        }
        v65[*v65 + 1] = 2;
        v66 = *a2;
        v67 = **a2;
        *v66 = v67 + 1;
        *(_QWORD *)&v66[8 * v67 + 16] = 5;
        v68 = sub_22E47E1B0((uint64_t)v30);
        v69 = *a2;
        if (!*a2)
        {
          v69 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
          *a2 = v69;
        }
        v69[*v69 + 1] = 8;
        v70 = *a2;
        v71 = **a2;
        *v70 = v71 + 1;
        *(_QWORD *)&v70[8 * v71 + 16] = v68;
        v48 = sub_22E47E1B0((uint64_t)v28);
        result = *a2;
        if (!*a2)
        {
          result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
          *a2 = result;
        }
        v47 = *result;
        v45 = 8;
      }
    }
    else
    {
      v40 = *a2;
      if (!*a2)
      {
        v40 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
        *a2 = v40;
      }
      v40[*v40 + 1] = 2;
      v41 = *a2;
      v42 = **a2;
      *v41 = v42 + 1;
      *(_QWORD *)&v41[8 * v42 + 16] = 4;
      v43 = v30[3];
      v44 = &v41[(v42 + 1)];
      v45 = 9;
      v44[1] = 9;
      result = *a2;
      v46 = **a2;
      v47 = v46 + 1;
      *result = v46 + 1;
      *(_QWORD *)&result[8 * v46 + 16] = v43;
      v48 = v28[3];
    }
  }
  else
  {
    v49 = *a2;
    if (!*a2)
    {
      v49 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
      *a2 = v49;
    }
    v49[*v49 + 1] = 2;
    v50 = *a2;
    v51 = **a2;
    v52 = v51 + 1;
    *v50 = v51 + 1;
    *(_QWORD *)&v50[8 * v51 + 16] = 3;
    v53 = v74 + 1;
    v50[v52 + 1] = 3;
    v54 = *a2;
    v55 = **a2;
    v56 = v55 + 1;
    *v54 = v55 + 1;
    *(_QWORD *)&v54[8 * v55 + 16] = v53;
    v57 = v30[v74 + 5];
    v58 = &v54[v56];
    v45 = 9;
    v58[1] = 9;
    result = *a2;
    v59 = **a2;
    v47 = v59 + 1;
    *result = v59 + 1;
    *(_QWORD *)&result[8 * v59 + 16] = v57;
    v48 = v28[v74 + 5];
  }
  result[v47 + 1] = v45;
  v60 = *a2;
  v61 = **a2;
  *v60 = v61 + 1;
  *(_QWORD *)&v60[8 * v61 + 16] = v48;
  return result;
}

uint64_t sub_22ECFCDD0(uint64_t a1)
{
  unint64_t v1;
  uint64_t result;
  int v3;
  BOOL v4;
  BOOL v5;

  v1 = a1 & 0xFFFFFFFFFFFFFFF0;
  result = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v3 = *(unsigned __int8 *)(result + 16);
  if (result)
    v4 = v3 == 26;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      result = sub_22F10CF48(result);
      if (result)
        return result;
      result = *(_QWORD *)v1;
      v3 = *(unsigned __int8 *)(*(_QWORD *)v1 + 16);
    }
    if (v3 != 31)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
        return 0;
      result = sub_22F10CF48(result);
      if (!result)
        return result;
    }
    result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v5 = *(_BYTE *)(result + 16) == 26;
    else
      v5 = 0;
    if (!v5)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        return sub_22F10CF48(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_22ECFCE94(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, char a6, int a7)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v54 = a3;
  v13 = *(_QWORD *)(a2 + 8);
  *a4 = 1;
  v14 = a7 ^ 1 | a6;
  if ((v14 & 1) == 0)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v15 != 32 && v15 != 39 && sub_22EFFBE1C(a2, *(_QWORD *)(a1 + 88), 2) == 1)
    {
      v17 = *(_QWORD *)(a1 + 88);
      if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v17 + 16400) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v49 = a5;
        sub_22EFF605C(a2);
        v24 = v23;
        v52 = v17 + 2128;
        v53 = 6627;
        v51 = (_BYTE *)sub_22E3B8AAC(v17 + 2128);
        v51[*v51 + 1] = 9;
        v25 = v51;
        v26 = *v51;
        *v51 = v26 + 1;
        *(_QWORD *)&v25[8 * v26 + 16] = a3;
        sub_22F0D4E74(a2);
        sub_22E4D6448((uint64_t)(v25 + 336), v27, 1);
        v55 = a2;
        sub_22EB52944(a1, v24, &v55, 1uLL, (uint64_t *)&v51);
        if (v51 && v52)
          sub_22E3BB10C(v52, (unint64_t)v51);
        a5 = v49;
      }
      else
      {
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
        if (v18 > 3 || v18 == 2)
        {
          sub_22EFF605C(a2);
          sub_22E8FCA40((_QWORD *)a1, v20, 0x1A79u, 0, (uint64_t)&v51);
          v21 = sub_22E8901B8((uint64_t)&v51, &v54);
          sub_22F0D4E74(a2);
          v55 = v22;
          sub_22E8906A0(v21, &v55);
          sub_22E903BEC((unsigned int *)&v51);
        }
      }
    }
  }
  v28 = *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0);
  v29 = *(unsigned __int8 *)(v28 + 16);
  if (v28 && v29 == 39)
  {
LABEL_20:
    v30 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (v30 && *(_BYTE *)(v30 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      && (v30 = sub_22F10CF48(v30)) != 0)
    {
      v31 = a5;
      v32 = *(_QWORD *)(v30 + 32);
      v33 = *(_QWORD *)(v28 + 32);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45
        && *(_QWORD *)(*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        if (a7)
          v34 = 2625;
        else
          v34 = 0;
        if (a7)
          v35 = 5082;
        else
          v35 = 0;
        v48 = v35;
        v50 = v34;
        sub_22EFF605C(a2);
        v37 = v36;
        sub_22F0D4E74(a2);
        if ((sub_22EAAB46C(a1, v32, v33, v48, v50, v37, v38, 0, v31, a6) & 1) != 0)
          return 1;
        *a4 = 7;
      }
      if ((v14 & 1) == 0
        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 <= 1)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v44)
          v45 = (*(_DWORD *)(v44 + 16) & 0xFF800FF) == 86507531;
        else
          v45 = 0;
        if (v45)
        {
          sub_22EFF605C(a2);
          sub_22E8FCA40((_QWORD *)a1, v46, 0x14B6u, 0, (uint64_t)&v51);
          sub_22F0D4E74(a2);
          v55 = v47;
          sub_22E8906A0((uint64_t)&v51, &v55);
          sub_22E903BEC((unsigned int *)&v51);
        }
      }
    }
    goto LABEL_61;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v28 = sub_22F10CF48(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0));
    if (v28)
      goto LABEL_20;
    v28 = *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0);
    v29 = *(unsigned __int8 *)(v28 + 16);
  }
  if (v29 != 32)
  {
    v40 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)v40 + 16) == 32)
    {
      v28 = sub_22F10CF48(v28);
      if (v28)
        goto LABEL_39;
      v40 = *(_QWORD *)(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    }
    if (*(_BYTE *)(*(_QWORD *)v40 + 16) != 10
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    {
      goto LABEL_61;
    }
    v43 = 45;
    goto LABEL_60;
  }
LABEL_39:
  v41 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (!v41 || *(_BYTE *)(v41 + 16) != 32)
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v42 != 32)
      goto LABEL_44;
    v41 = sub_22F10CF48(v41);
    if (!v41)
    {
      v42 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
LABEL_44:
      if (v42 == 10)
        v43 = 44;
      else
        v43 = 43;
LABEL_60:
      *a4 = v43;
      goto LABEL_61;
    }
  }
  if ((sub_22F32EDD0(v41) & 1) != 0 || (sub_22F32EDD0(v28) & 1) != 0)
    return 0;
LABEL_61:
  result = sub_22EFFBE1C(a2, *(_QWORD *)(a1 + 88), 1);
  if ((_DWORD)result)
  {
    result = 0;
    *a4 = 14;
  }
  return result;
}

uint64_t sub_22ECFD3B0(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, char a6)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t i;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38[24];
  std::string __p;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD v46[2];
  unsigned int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[32];
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _DWORD v56[26];
  uint64_t v57;
  __int16 v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 31;
  else
    v13 = 0;
  if (!v13
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
     || (v12 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0))) == 0))
  {
    v27 = 0;
    *a4 = 15;
    return v27;
  }
  v14 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 31;
  else
    v15 = 0;
  if (!v15)
    v14 = sub_22F10CF48(v14);
  v16 = *(_QWORD *)(v12 + 40) & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)(v14 + 40) & 0xFFFFFFFFFFFFFFF0;
  v40 = v17;
  v41 = v16;
  v42 = 0;
  v43 = (uint64_t)&v43;
  v44 = &v43;
  v45 = 0;
  v46[0] = 1;
  for (i = 40; i != 168; i += 16)
    *(unint64_t *)((char *)&v42 + i) = 0;
  v48 = v52;
  v49 = v52;
  v50 = 4;
  v51 = 0;
  v53 = 0;
  v54 = v56;
  v55 = 0x400000000;
  v56[24] = 0;
  v57 = 0;
  v58 = 257;
  v59 = 1;
  sub_22F0D5A50(a2);
  sub_22EAAB2A0((uint64_t)a1, v19, v17, v16, &v42);
  *(_QWORD *)v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  v20 = sub_22EFB50E0(v46, v38);
  if (((_DWORD)v20[1] & 1u) + (*((_DWORD *)v20 + 2) >> 1) < 2)
  {
    v28 = v53;
    if (!v53)
    {
      if ((a6 & 1) == 0)
      {
        sub_22EFF605C(a2);
        sub_22E90B400((uint64_t)a1, v35, v16, v17, (uint64_t)(v44 + 2), 3271, 0, 0);
      }
      sub_22EAAB384((uint64_t)(v44 + 2), a5);
      v27 = 0;
      *a4 = 16;
      goto LABEL_21;
    }
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v29, 0xEC6u, 0, (uint64_t)v38);
    v30 = sub_22E8901B8((uint64_t)v38, (uint64_t *)&v41);
    v31 = sub_22E8901B8(v30, (uint64_t *)&v40);
    __p.__r_.__value_.__r.__words[0] = v28 & 0xFFFFFFFFFFFFFFF0;
    v32 = sub_22E8901B8(v31, (uint64_t *)&__p);
    sub_22F0D4E74(a2);
    v36 = v33;
    sub_22E8906A0(v32, &v36);
    sub_22E903BEC(v38);
  }
  else
  {
    sub_22EAAAFAC((uint64_t)a1, &v42, &__p);
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v21, 0xA45u, 0, (uint64_t)v38);
    v37 = 0;
    v22 = sub_22E8900C4((uint64_t)v38, &v37);
    v23 = sub_22E8901B8(v22, (uint64_t *)&v41);
    v24 = sub_22E8901B8(v23, (uint64_t *)&v40);
    v25 = sub_22E90749C(v24, &__p);
    sub_22F0D4E74(a2);
    v36 = v26;
    sub_22E8906A0(v25, &v36);
    sub_22E903BEC(v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v27 = 1;
LABEL_21:
  if (v54 != v56)
    free(v54);
  if (v49 != v48)
    free(v49);
  if ((v46[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v46[1], (void *)(16 * v47));
  sub_22E687D9C(&v43);
  return v27;
}

BOOL sub_22ECFD738(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = v9 | a3 & 7;
  v17 = v10;
  v18 = v8 | a2 & 7;
  *a5 = 0;
  v11 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v11 + 8) & 0xF) != 0)
    v11 = (unint64_t)sub_22F10D2BC(v8 | a2 & 7);
  v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
    v12 = (unint64_t)sub_22F10D2BC(v10);
  if ((v12 ^ v11) < 0x10)
    return 0;
  v13 = 0;
  v16 = 1;
  while (sub_22EF68220(*(_QWORD *)(a1 + 88), (unint64_t *)&v18, (unint64_t *)&v17, 1))
  {
    v14 = sub_22ECFD864(v18, v17, a4, (v13 & 1) == 0, &v16, a5);
    v13 = 1;
    if ((v14 & 1) == 0)
      return 0;
  }
  return (v13 & 1) != 0
      && *(_QWORD *)(*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_22ECFD864(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5, _BYTE *a6)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t result;
  int v25;
  int v26;
  unint64_t v28;

  v9 = a1 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v10 & 8) != 0)
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = v12 | (v10 | a1) & 7;
  v14 = a2 & 0xFFFFFFFFFFFFFFF0;
  v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v15 & 8) != 0)
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = v16 | v17 | (v15 | a2) & 7;
  v28 = v18;
  v19 = (v18 >> 6) & 7;
  if (((v13 >> 6) & 7) == v19)
  {
    v20 = v13 & 0xFFFFFFF7;
LABEL_13:
    if (((v20 ^ v18) & 0x30) != 0 && ((v18 & 0x30) == 0 || (v20 & 0x30) == 0))
    {
      v20 &= 0xFFFFFFC7;
      LODWORD(v18) = v18 & 0xFFFFFFCF;
      LODWORD(v28) = v18;
    }
    if ((a3 & 1) == 0)
    {
      result = sub_22E95F24C((unsigned int *)&v28, v11 | v20);
      if (!(_DWORD)result)
        return result;
      LODWORD(v18) = v28;
    }
    if (v18 >> 11 == v20 >> 11)
      goto LABEL_24;
    if (!a4)
      return 0;
    if (sub_22E95F2F0(v18 >> 11, v20 >> 11))
    {
LABEL_24:
      if ((a3 & 1) == 0)
      {
        if ((((unsigned __int16)v28 ^ (unsigned __int16)v20) & 7) != 0)
        {
          if (!*a5)
            return 0;
        }
        else if ((((unsigned __int16)v28 ^ (unsigned __int16)v20) & 0x600) != 0 && *a5 == 0)
        {
          return 0;
        }
      }
    }
    else if (!a3 || !sub_22E95F2F0(v20 >> 11, v28 >> 11))
    {
      return 0;
    }
    v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v25 != 4)
    {
      v26 = *a5;
      if (v25 == 2
        && (a3 & 1) == 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4
        && v26 == 0)
      {
        return 0;
      }
LABEL_52:
      *a5 = (v26 != 0) & v28;
      return 1;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
    {
      v26 = *a5;
      goto LABEL_52;
    }
    return 0;
  }
  v21 = (v12 >> 6) & 7;
  if (v19 == v21)
  {
LABEL_10:
    if ((v18 & 0x1C1) != 0x41)
      *a6 = 1;
    v20 = v13 & 0xFFFFFE37;
    LODWORD(v18) = v18 & 0xFFFFFE3F;
    LODWORD(v28) = v18;
    goto LABEL_13;
  }
  result = 0;
  if (v21 != 3 && v19 != 3)
  {
    if ((v18 & 1) == 0 && v21 && v19)
      return 0;
    goto LABEL_10;
  }
  return result;
}

void sub_22ECFDAC8(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, char a8)
{
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  BOOL v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  unint64_t v35;
  unint64_t *v36;
  BOOL v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;

  v12 = (unsigned __int8 *)a2;
  v65 = (unsigned __int8 *)a2;
  sub_22ECF9840(a5, 2);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 45)
  {
LABEL_73:
    if (*v12 != 180)
    {
      sub_22F0D5A50((uint64_t)v12);
      if ((sub_22EE8B180(a1, v44) & 1) == 0)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v65 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v47)
        {
          if (*(_BYTE *)(v47 + 16) == 45)
          {
            v48 = sub_22F114198(*(_QWORD *)(v47 + 24));
            if (v48 && (*(_DWORD *)(v48 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
            {
              v50 = sub_22EFD4DF4(v48);
              if ((uint64_t *)v50 != v51)
              {
                v53 = (uint64_t *)v50;
                v54 = v51;
                do
                {
                  v55 = *v53;
                  v56 = *v53 & 0xFFFFFFFFFFFFFFFCLL;
                  v57 = *(_DWORD *)(v56 + 28);
                  if ((v57 & 0x7E) == 0x2E)
                  {
                    v56 = *(_QWORD *)(v56 + 64);
                    v57 = *(_DWORD *)(v56 + 28);
                  }
                  if ((v57 & 0x7F) == 0x1D)
                    sub_22ED096FC((uint64_t)a1, (uint64_t *)v56, v55, v52, (uint64_t)v65, a3, a5, a7, a6 != 0, 1);
                  else
                    sub_22ED08B24((uint64_t)a1, (uint64_t *)v56, v55, v52, (uint64_t)v65, a3, a5, a7, a6 != 0, a8, 1);
                  ++v53;
                }
                while (v53 != v54);
              }
            }
          }
        }
      }
    }
LABEL_75:
    v67 = 0;
    sub_22F0D5A50((uint64_t)v65);
    v46 = (char *)&loc_22ECFE1DC + 4 * byte_22F495CC8[sub_22ED03FCC(a5, a1, v45, &v67)];
    __asm { BR              X10 }
  }
  v15 = *((_QWORD *)v12 + 1);
  if (*(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_7;
  v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v62 = 1;
  if (!v17 || *(_BYTE *)(v17 + 16) != 45)
    goto LABEL_9;
  sub_22F0D5A50((uint64_t)v12);
  if (sub_22EAAB1B8(a1, v18, v15, a3))
  {
LABEL_7:
    v62 = 0;
    v16 = 1;
  }
  else
  {
    v16 = 0;
    v62 = 1;
  }
LABEL_9:
  v63 = v16;
  sub_22EFF605C((uint64_t)v12);
  if ((sub_22EE8B180(a1, v19) & 1) != 0)
  {
    if ((v63 & 1) != 0)
      goto LABEL_75;
    goto LABEL_73;
  }
  v60 = a7;
  v61 = a3;
  v20 = sub_22F114198(*(_QWORD *)(v14 + 24));
  if (v20)
    v21 = (*(_DWORD *)(v20 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v21 = 0;
  if (!v21)
    goto LABEL_71;
  v22 = v20;
  if (*v12 == 180)
  {
    v67 = v12;
    sub_22ECF9840(a5, 2);
    v23 = sub_22EC66BE4((uint64_t)a1, v22);
    v24 = (uint64_t)v12;
    if (!v23)
      goto LABEL_45;
    while (1)
    {
      v25 = (unint64_t *)(v23 & 0xFFFFFFFFFFFFFFF8);
      v26 = (v23 & 0xFFFFFFFFFFFFFFF8) == 0 || (v23 & 4) == 0;
      v27 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v26)
        v27 = *v25;
      v28 = *(_DWORD *)(v27 + 28);
      v29 = v28 & 0x7F;
      if (v29 > 0x2F)
        break;
      if (((1 << (v28 & 0x7F)) & 0xC00000060000) != 0)
      {
        v30 = sub_22EFBAEA4(v27);
        v28 = *(_DWORD *)(v30 + 28);
        LODWORD(v29) = v28 & 0x7F;
        goto LABEL_28;
      }
      v30 = v27;
      if (v29 != 13)
        goto LABEL_28;
LABEL_39:
      if (!v26)
      {
        v23 = v25[1];
        if (v23)
          continue;
      }
      v24 = (uint64_t)v67;
LABEL_45:
      v66 = 0;
      sub_22F0D5A50(v24);
      v34 = (char *)&loc_22ECFDE04 + 4 * word_22F495CC0[sub_22ED03FCC(a5, a1, v33, &v66)];
      __asm { BR              X10 }
    }
    v30 = v27;
LABEL_28:
    if ((_DWORD)v29 == 29)
      v31 = (_QWORD *)v30;
    else
      v31 = 0;
    if (v31)
    {
      v30 = v31[6];
      LODWORD(v29) = *(_DWORD *)(v30 + 28) & 0x7F;
    }
    if ((_DWORD)v29 == 55 && (*(_BYTE *)(v30 + 28) & 0x80) == 0 && sub_22EAC23F4(a1, v30))
    {
      v32 = (v28 >> 13) & 3 | v27;
      if (v31)
      {
        sub_22ED07F48(a1, v31, v32, v61, 0, (uint64_t)&v67, 1uLL, a5, 0, 0, a6 == 2, 0, 0);
      }
      else
      {
        LOBYTE(v59) = 0;
        BYTE3(v58) = 0;
        LOBYTE(v58) = 0;
        *(_WORD *)((char *)&v58 + 1) = a6 == 2;
        sub_22ED0475C(a1, v30, v32, v61, &v67, 1, a5, 0, v58, 0, 0, v59);
      }
    }
    goto LABEL_39;
  }
  v35 = sub_22EC66BE4((uint64_t)a1, v20);
  if (!v35)
  {
LABEL_71:
    a3 = v61;
    a7 = v60;
    if ((v63 & 1) != 0)
      goto LABEL_75;
    v12 = v65;
    goto LABEL_73;
  }
  while (1)
  {
    v36 = (unint64_t *)(v35 & 0xFFFFFFFFFFFFFFF8);
    v37 = (v35 & 0xFFFFFFFFFFFFFFF8) == 0 || (v35 & 4) == 0;
    v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    if (!v37)
      v38 = *v36;
    v39 = *(_DWORD *)(v38 + 28);
    v40 = v39 & 0x7F;
    if (v40 > 0x2F)
      break;
    if (((1 << (v39 & 0x7F)) & 0xC00000060000) != 0)
    {
      v41 = sub_22EFBAEA4(v38);
      v39 = *(_DWORD *)(v41 + 28);
      LODWORD(v40) = v39 & 0x7F;
      goto LABEL_56;
    }
    v41 = v38;
    if (v40 != 13)
      goto LABEL_56;
LABEL_62:
    if (!v37)
    {
      v35 = v36[1];
      if (v35)
        continue;
    }
    goto LABEL_71;
  }
  v41 = v38;
LABEL_56:
  if ((_DWORD)v40 == 29)
    v42 = (_QWORD *)v41;
  else
    v42 = 0;
  if (v42)
  {
    v41 = v42[6];
    LODWORD(v40) = *(_DWORD *)(v41 + 28) & 0x7F;
  }
  if ((_DWORD)v40 == 55 && (*(_DWORD *)(v41 + 28) & 0x80) == 0 && sub_22EFD8400(v41, 1))
  {
    v43 = (v39 >> 13) & 3 | v38;
    if (v42)
    {
      sub_22ED07F48(a1, v42, v43, v61, 0, (uint64_t)&v65, 1uLL, a5, v62, 0, a6 == 2, 0, 0);
    }
    else
    {
      LOBYTE(v59) = 0;
      BYTE3(v58) = 0;
      LOBYTE(v58) = 0;
      *(_WORD *)((char *)&v58 + 1) = a6 == 2;
      sub_22ED0475C(a1, v41, v43, v61, &v65, 1, a5, v62, v58, 0, 0, v59);
    }
  }
  goto LABEL_62;
}

void sub_22ECFE46C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int (*a6)(uint64_t, int64x2_t *)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned int v14;
  int64x2_t *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  char v21;
  __int8 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  const std::nothrow_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t *v81;
  uint64_t v82;
  int v84;
  char v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  *(_QWORD *)a8 = a8 + 16;
  *(_QWORD *)(a8 + 8) = 0x2000000000;
  if (!a3 && *(_DWORD *)(a1 + 8) >= 0x21u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v87 = a1;
  v14 = *(_DWORD *)(a1 + 8);
  if (v14)
  {
    v15 = *(int64x2_t **)a1;
    v16 = *(_QWORD *)a1 + 168 * v14;
    do
    {
      if (a6(a7, v15))
      {
        if (a3 == 2)
        {
          if ((v15[6].i8[8] & 2) != 0)
            goto LABEL_33;
        }
        else if (a3 == 1)
        {
          if ((v15[6].i8[8] & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          if (a3)
            goto LABEL_33;
          v17 = v15[6].u8[8];
          if ((v17 & 1) != 0)
            goto LABEL_33;
          if ((v17 & 4) != 0 || v15->i64[0])
          {
            if (v15[6].i8[9] != 2)
              goto LABEL_33;
            v18 = *(_DWORD *)(v87 + 2964);
            v15[6].i64[0] = (uint64_t)sub_22ED23174;
            v19 = (v17 >> 3) & 1;
            v82 = v15[3].i64[1];
            do
              v20 = *(_DWORD *)(v15[3].i64[0] + 152 * v19++) & 0x7FFFFFFF;
            while (v20 != 4);
            v21 = sub_22ED23218(v15, v19 - 1, a2);
            v22 = v15[6].i8[8];
            if ((v22 & 4) == 0)
            {
              v23 = v15->i64[0];
              v24 = v82;
              if (v15->i64[0])
              {
                v25 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v25)
                  v26 = *(_BYTE *)(v25 + 16) == 26;
                else
                  v26 = 0;
                if (!v26)
                {
                  v27 = v21;
                  v25 = sub_22F10CF48(v25);
                  v21 = v27;
                  v24 = v82;
                  v23 = v15->i64[0];
                }
                v81 = (int64x2_t *)(v25 + 40);
                v88 = (unsigned __int16)(*(_QWORD *)(v25 + 16) >> 38);
                v28 = *(_DWORD *)(v23 + 28);
                if ((v28 & 0x7Eu) - 54 > 3)
                {
                  v29 = 0;
                  LODWORD(v23) = 0;
                }
                else
                {
                  v29 = 0;
                  if ((v22 & 0x40) != 0 || (v28 & 0x7F) == 0x37)
                  {
                    LODWORD(v23) = 0;
                  }
                  else
                  {
                    if (v18 != 1)
                      goto LABEL_29;
                    v30 = *(_QWORD *)(v23 + 40);
                    if ((v30 & 7) == 6)
                    {
                      v31 = *(_DWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
                      if (v31 == 42)
LABEL_29:
                        v29 = 0;
                      else
                        v29 = v31 != 43;
                    }
                    else
                    {
                      v29 = 1;
                    }
LABEL_57:
                    LODWORD(v23) = 1;
                  }
                }
              }
              else
              {
                v29 = 0;
                v81 = v15 + 1;
                v88 = 3;
              }
              if ((_DWORD)v23 != v24)
              {
                v86 = v21 ^ 1;
                if ((v22 & 0x40) != 0)
                  v42 = v88 - 1;
                else
                  v42 = 0;
                if ((v22 & 0x40) != 0)
                  v43 = -1;
                else
                  v43 = 1;
                v79 = a7;
                v80 = a2;
                v84 = v43;
                do
                {
                  v44 = v23;
                  v45 = (unsigned int *)(v15[3].i64[0] + 152 * v23);
                  if ((*v45 & 0x7FFFFFFF) == 5)
                  {
                    if (v88 > v42)
                    {
                      v46 = v81->u64[v42];
                      if ((*(_BYTE *)(*(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
                      {
                        sub_22F3437F0(v45, *(_QWORD *)(*(_QWORD *)(a4 + 8 * v29) + 8));
                        v24 = v82;
                        v43 = v84;
                        goto LABEL_90;
                      }
                      sub_22ED06388((uint64_t)&v89, (unsigned int *)a2, *(unsigned __int8 **)(a4 + 8 * v29), v46, 0, 1, ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 148) >> 1) & 1, 0);
                      v47 = v15[3].i64[0];
                      v48 = (unsigned int *)(v47 + 152 * v44);
                      v49 = *v48;
                      if ((*v48 & 0x7FFFFFFF) == 2)
                      {
                        v50 = v47 + 152 * v44;
                        v51 = *(void **)(v50 + 32);
                        if (v51 != (void *)(v50 + 48))
                        {
                          free(v51);
                          v49 = *v48;
                        }
                      }
                      v52 = v49 & 0x80000000;
                      v53 = v89 & 0x7FFFFFFF;
                      *v48 = v89 & 0x7FFFFFFF | v52;
                      *v48 = v89 & 0x80000000 | v53;
                      *(_QWORD *)(v47 + 152 * v44 + 8) = v90;
                      switch(v53)
                      {
                        case 0u:
                          v54 = v47 + 152 * v44;
                          v55 = v91;
                          v56 = v92;
                          v57 = v93;
                          *(_QWORD *)(v54 + 64) = v94;
                          *(_OWORD *)(v54 + 48) = v57;
                          goto LABEL_79;
                        case 1u:
                          v60 = v47 + 152 * v44;
                          *(_OWORD *)(v60 + 16) = v91;
                          v61 = v92;
                          v62 = v93;
                          v63 = v95;
                          *(_OWORD *)(v60 + 64) = v94;
                          *(_OWORD *)(v60 + 80) = v63;
                          *(_OWORD *)(v60 + 32) = v61;
                          *(_OWORD *)(v60 + 48) = v62;
                          v64 = v96;
                          v65 = v97;
                          v66 = v98;
                          *(_QWORD *)(v60 + 144) = v99;
                          *(_OWORD *)(v60 + 112) = v65;
                          *(_OWORD *)(v60 + 128) = v66;
                          *(_OWORD *)(v60 + 96) = v64;
                          break;
                        case 2u:
                          v67 = v47 + 152 * v44;
                          v68 = v91;
                          *(_QWORD *)(v67 + 32) = v67 + 48;
                          v69 = v67 + 32;
                          *(_OWORD *)(v69 - 16) = v68;
                          *(_QWORD *)(v69 + 8) = 0x400000000;
                          if (DWORD2(v92))
                            sub_22E8BB370(v69, (uint64_t)&v92);
                          break;
                        case 4u:
                          v55 = v91;
                          v56 = v92;
                          v54 = v47 + 152 * v44;
LABEL_79:
                          *(_OWORD *)(v54 + 16) = v55;
                          *(_OWORD *)(v54 + 32) = v56;
                          break;
                        default:
                          break;
                      }
                      a7 = v79;
                      v43 = v84;
                      if ((v89 & 0x7FFFFFFF) == 2 && (__int128 *)v92 != &v93)
                      {
                        free((void *)v92);
                        v43 = v84;
                      }
                      a2 = v80;
                      if ((v86 & 1) != 0)
                      {
                        v58 = 1;
                        goto LABEL_87;
                      }
                      if ((*(_DWORD *)(v15[3].i64[0] + 152 * v44) & 0x7FFFFFFF) == 4)
                      {
                        v59 = sub_22ED23218(v15, v44, v80);
                        v43 = v84;
                        v58 = v59 ^ 1;
LABEL_87:
                        v86 = v58;
                      }
                      else
                      {
                        v86 = 0;
                      }
                      v24 = v82;
                      goto LABEL_90;
                    }
                    *v45 = *v45 & 0x80000000 | 3;
                  }
LABEL_90:
                  LODWORD(v23) = v44 + 1;
                  ++v29;
                  v42 += v43;
                }
                while (v24 != v44 + 1);
              }
LABEL_33:
              v32 = *(unsigned int *)(a8 + 8);
              if (v32 >= *(unsigned int *)(a8 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v32 = *(unsigned int *)(a8 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a8 + 8 * v32) = v15;
              ++*(_DWORD *)(a8 + 8);
              goto LABEL_36;
            }
            v33 = *(_QWORD *)(*(_QWORD *)(v15[2].i64[1] + 48) & 0xFFFFFFFFFFFFFFF0);
            v34 = v21;
            if (v33)
              v35 = *(unsigned __int8 *)(v33 + 16) - 27 > 0xFFFFFFFD;
            else
              v35 = 0;
            if (!v35)
              v33 = sub_22F10CF48(v33);
            v36 = *(_QWORD *)(v33 + 24) & 0xFFFFFFFFFFFFFFF0;
            v37 = *(_QWORD *)v36;
            if (*(_QWORD *)v36 && (v38 = *(_DWORD *)(v37 + 16), (v38 & 0xFE) == 0x28))
            {
LABEL_100:
              if ((v38 & 0x100000) != 0)
              {
                do
                {
                  v37 = *(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v37)
                  {
                    v70 = *(_DWORD *)(v37 + 16);
                    if ((v70 & 0xFE) == 0x28)
                      continue;
                  }
                  v37 = sub_22F10CF48(v37);
                  v70 = *(_DWORD *)(v37 + 16);
                }
                while ((v70 & 0x100000) != 0);
              }
              v36 = *(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0;
            }
            else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            {
              v37 = sub_22F10CF48(v37);
              if (v37)
              {
                v38 = *(_DWORD *)(v37 + 16);
                goto LABEL_100;
              }
            }
            v39 = *(_QWORD *)v36;
            if (*(_QWORD *)v36 && *(_BYTE *)(v39 + 16) == 39
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
              && (v39 = sub_22F10CF48(v39)) != 0)
            {
              v36 = *(_QWORD *)(v39 + 32) & 0xFFFFFFFFFFFFFFF0;
            }
            v40 = *(_QWORD *)v36;
            if (*(_QWORD *)v36)
              v41 = *(_BYTE *)(*(_QWORD *)v36 + 16) == 26;
            else
              v41 = 0;
            if (!v41)
              v40 = sub_22F10CF48(v40);
            v24 = v82;
            v21 = v34;
            v29 = 0;
            v81 = (int64x2_t *)(v40 + 40);
            v88 = (unsigned __int16)(*(_QWORD *)(v40 + 16) >> 38);
            goto LABEL_57;
          }
        }
      }
LABEL_36:
      v15 = (int64x2_t *)((char *)v15 + 168);
    }
    while (v15 != (int64x2_t *)v16);
  }
  v71 = *(_DWORD *)(v87 + 2964);
  v72 = *(uint64_t **)a8;
  v73 = *(unsigned int *)(a8 + 8);
  v74 = (uint64_t *)(*(_QWORD *)a8 + 8 * v73);
  v89 = (_QWORD *)a2;
  LODWORD(v90) = 0;
  *(_QWORD *)&v91 = a5;
  DWORD2(v91) = v71;
  if (v73 < 0x81)
  {
LABEL_111:
    sub_22ED24A34(v72, v74, &v89, v73, 0, 0);
  }
  else
  {
    v75 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v76 = v73;
    while (1)
    {
      v77 = (uint64_t *)operator new(8 * v76, v75);
      if (v77)
        break;
      v35 = v76 > 1;
      v76 >>= 1;
      if (!v35)
        goto LABEL_111;
    }
    v78 = v77;
    sub_22ED24A34(v72, v74, &v89, v73, v77, v76);
    operator delete(v78);
  }
}

void sub_22ECFEBA0(uint64_t a1, uint64_t a2, int a3, unsigned int a4, char *a5, uint64_t a6, std::string::value_type *__s, std::string::size_type __n, uint64_t a9)
{
  char *v11;
  uint64_t v12;
  unsigned int v14;
  char *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const std::string::value_type *p_p;
  std::string::size_type v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t v32;
  BOOL v33;
  std::string::size_type v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  std::string::value_type *v40;
  std::string::size_type v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t *v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  std::string::size_type v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  int v125;
  uint64_t v126;
  unsigned __int8 **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  std::string::size_type v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  BOOL v166;
  _BOOL4 v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  uint64_t v175;
  _DWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  _DWORD *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  unsigned __int8 v215;
  char v216;
  _DWORD *v217;
  unint64_t v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unsigned __int8 v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  BOOL v270;
  _BOOL4 v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  int v276;
  char v277;
  char v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  unsigned int *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  unint64_t v322;
  uint64_t v323;
  BOOL v324;
  _BOOL4 v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  char v331;
  uint64_t v332;
  int v333;
  char v334;
  int v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  BOOL v360;
  _BOOL4 v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  std::string *v382;
  size_t size;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  unsigned __int8 *v388;
  _QWORD *v389;
  uint64_t v390;
  unsigned __int8 v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  unsigned int v402;
  _DWORD *v403;
  _DWORD *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned __int8 v418;
  uint64_t v419;
  uint64_t v420;
  unsigned __int8 v421;
  unint64_t v422;
  uint64_t v423;
  std::string::value_type *v424;
  unsigned __int8 v425;
  unsigned int v426;
  uint64_t v427;
  unsigned int v428;
  std::string::size_type v429;
  unint64_t v430;
  unint64_t v431;
  _DWORD *v432;
  unint64_t v433;
  unsigned __int8 v434;
  int v435;
  int v436;
  _BOOL4 v437;
  unsigned int v438;
  unint64_t v439;
  unsigned __int8 *v440;
  unint64_t v441;
  unsigned int v442;
  char *v444;
  char v445;
  int v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  unsigned int v450;
  void *v451[2];
  char v452;
  BOOL v453;
  void *v454;
  unint64_t v455;
  int v456;
  char v457;
  BOOL v458;
  unsigned int v459;
  unsigned int v460;
  int v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  std::string v465;
  void *__p;
  unint64_t v467;
  void *v468;
  uint64_t v469;
  _QWORD v470[6];
  char v471;
  unsigned int v472;
  char v473;
  char v474;
  void *v475;
  uint64_t v476;
  _QWORD v477[10];

  v477[8] = *MEMORY[0x24BDAC8D0];
  if (!a6)
    return;
  v11 = a5;
  v12 = a2;
  v445 = 0;
  v14 = 0;
  v15 = &a5[8 * a6];
  v446 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 12);
  v442 = a6;
  v16 = a9;
  v444 = v15;
  while (1)
  {
    v17 = *(_QWORD *)(v12 + 104);
    v18 = *(_DWORD *)(v17 + 12) ? *(_DWORD *)(v17 + 16) : 0x7FFFFFFF;
    v447 = *(_QWORD *)v11;
    if (v14 >= v18 && v446 == 1)
      break;
    v19 = *(_QWORD *)v447;
    if (*(_QWORD *)v447)
    {
      v20 = *(_DWORD *)(a1 + 6632);
      if (!sub_22ED116B8(*(_QWORD *)v447))
      {
        v21 = *(unsigned __int8 *)(v447 + 104);
        if ((v21 & 1) != 0)
        {
          if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 32))(v19) + 82) & 0x40) != 0)
          {
            v39 = a1;
            v40 = __s;
            v41 = __n;
            memset(&v465, 0, sizeof(v465));
            v42 = sub_22ED11874(v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, v19, (*(_BYTE *)(v447 + 104) >> 5) & 3, (uint64_t)&v465);
            v43 = v42;
            v44 = HIDWORD(v42);
            sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v19 + 24), 0x173Eu, 0, (uint64_t)&__p);
            LODWORD(v454) = v43;
            v45 = sub_22E89519C((uint64_t)&__p, (unsigned int *)&v454);
            LODWORD(v451[0]) = v44;
            v46 = sub_22E89519C(v45, (unsigned int *)v451);
            v47 = sub_22E90749C(v46, &v465);
            v48 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 32))(v19);
            v49 = 0;
            if ((*(_BYTE *)(v48 + 82) & 0x40) != 0)
            {
              if ((*(_QWORD *)(v19 + 80) & 0x2400000) == 0x400000)
                v49 = 1;
              else
                v49 = 2;
            }
            LODWORD(v464) = v49;
            sub_22E8900C4(v47, (int *)&v464);
            sub_22E903BEC((unsigned int *)&__p);
            sub_22ED11A4C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
            __n = v41;
            if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v465.__r_.__value_.__l.__data_);
            __s = v40;
            a1 = v39;
            v16 = a9;
            v15 = v444;
          }
          else
          {
            v22 = *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL;
            v21 = *(unsigned __int8 *)(v447 + 104);
LABEL_61:
            sub_22ED113EC((unsigned int *)v12, v22, v19, (v21 >> 5) & 3, 0, 0);
          }
        }
        else
        {
          switch(*(_BYTE *)(v447 + 105))
          {
            case 0:
            case 1:
              v52 = *(_QWORD *)v447;
              sub_22EFC0EB8(*(_QWORD *)v447);
              if ((*(_BYTE *)(v52 + 28) & 0x80) == 0 || (*(_QWORD *)(v52 + 40) & 7) != 6)
                sub_22ED23294((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)v447, a4);
              break;
            case 2:
              v69 = (v21 >> 3) & 1;
              v70 = *(_DWORD *)(v447 + 56);
              if (v69 == v70)
                goto LABEL_12;
              v71 = *(_QWORD *)(v447 + 48);
              while ((*(_DWORD *)(v71 + 152 * v69) & 0x7FFFFFFF) != 4)
              {
                if (v70 == ++v69)
                {
LABEL_12:
                  v22 = *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL;
                  goto LABEL_61;
                }
              }
              v109 = *(_QWORD *)v447;
              if ((*(_DWORD *)(*(_QWORD *)v447 + 28) & 0x7F) != 0x37
                && (*(_DWORD *)(*(_QWORD *)v447 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
              {
                v113 = v69 - 1;
                if (!v69)
                  v113 = 0;
                v437 = v69 == 0;
                v438 = v113;
              }
              else
              {
                v437 = 0;
                v438 = v69;
              }
              v114 = v69;
              memset(&v465, 0, sizeof(v465));
              v441 = v109;
              v439 = sub_22ED11874(v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, v109, (v21 >> 5) & 3, (uint64_t)&v465);
              v115 = (_QWORD *)(v71 + 152 * v114);
              v116 = (unsigned __int8 *)v115[2];
              v117 = v115[4];
              v464 = v117;
              v118 = v115[5];
              v463 = v118;
              v440 = v116;
              if (*(_QWORD *)(*(_QWORD *)(v12 + 88) + 16840) == v117)
              {
                v119 = v116;
                do
                {
                  v120 = v119;
                  v121 = *v119;
                  if (v121 > 0xD5)
                  {
                    if (v121 == 233)
                    {
                      if ((*(_DWORD *)v119 & 0x7C0000) != 0x300000)
                        goto LABEL_210;
                      v121 = *(_DWORD *)v119;
                      v123 = v119 + 16;
                    }
                    else
                    {
                      if (v121 != 214)
                        break;
                      v123 = v119 + 24;
                    }
                  }
                  else if (v121 == 155)
                  {
                    if ((**((_DWORD **)v119 + 2) & 0x18000) != 0)
                      goto LABEL_226;
                    v123 = v119 + 24;
                    if (!v120[48])
                      v123 = v120 + 32;
                    v121 = 155;
                  }
                  else
                  {
                    if (v121 != 176)
                      break;
                    v122 = *((unsigned int *)v119 + 5);
                    if ((_DWORD)v122 == -1)
                      goto LABEL_226;
                    v123 = &v119[8 * v122 + 40];
                    v121 = 176;
                  }
                  v119 = *(unsigned __int8 **)v123;
                }
                while (v119 != v120);
                if (v121 == 233)
                {
LABEL_210:
                  v124 = (unsigned __int8 *)*((_QWORD *)v120 + 2);
                  do
                  {
                    v120 = v124;
                    v125 = *v124;
                    if (v125 > 213)
                    {
                      if (v125 == 233)
                      {
                        if ((*(_DWORD *)v120 & 0x7C0000) != 0x300000)
                          break;
                        v127 = (unsigned __int8 **)(v120 + 16);
                      }
                      else
                      {
                        if (v125 != 214)
                          break;
                        v127 = (unsigned __int8 **)(v120 + 24);
                      }
                    }
                    else if (v125 == 155)
                    {
                      if ((**((_DWORD **)v120 + 2) & 0x18000) != 0)
                        break;
                      if (v120[48])
                        v127 = (unsigned __int8 **)(v120 + 24);
                      else
                        v127 = (unsigned __int8 **)(v120 + 32);
                    }
                    else
                    {
                      if (v125 != 176)
                        break;
                      v126 = *((unsigned int *)v120 + 5);
                      if ((_DWORD)v126 == -1)
                        break;
                      v127 = (unsigned __int8 **)&v120[8 * v126 + 40];
                    }
                    v124 = *v127;
                  }
                  while (v124 != v120);
                }
LABEL_226:
                v454 = (void *)*((_QWORD *)v120 + 2);
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1736u, 0, (uint64_t)&__p);
                LODWORD(v449) = v439;
                v128 = sub_22E89519C((uint64_t)&__p, (unsigned int *)&v449);
                v462 = HIDWORD(v439);
                v129 = sub_22E89519C(v128, &v462);
                v130 = sub_22E90749C(v129, &v465);
                v131 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                v451[0] = v131;
                v132 = sub_22E8906A0(v130, (uint64_t *)v451);
                v133 = sub_22E8901B8(v132, &v463);
                v134 = sub_22E894538(v133, (uint64_t *)&v454);
LABEL_229:
                v461 = v438 + 1;
                v135 = &v461;
LABEL_230:
                sub_22E89519C(v134, (unsigned int *)v135);
                goto LABEL_335;
              }
              v136 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFFFF0) + 8);
              v137 = v136 | v117 & 7;
              v138 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 8);
              v139 = v138 | v118 & 7;
              if (v139 >= 0x10 && (*(_DWORD *)(*(_QWORD *)(v138 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                __p = (void *)(v138 | v118 & 7);
                v428 = v114;
                v258 = v137;
                v139 = sub_22F31295C(&__p);
                v137 = v258;
                v114 = v428;
LABEL_234:
                v140 = v441;
                goto LABEL_235;
              }
              if (v137 < 0x10)
                goto LABEL_234;
              v140 = v441;
              if (v139 >= 0x10)
              {
                v151 = *(_QWORD *)(v136 & 0xFFFFFFFFFFFFFFF0);
                if (*(_BYTE *)(v151 + 16) == 39)
                {
                  v152 = *(_QWORD *)(v138 & 0xFFFFFFFFFFFFFFF0);
                  if (*(_BYTE *)(v152 + 16) == 39)
                  {
                    v137 = *(_QWORD *)(v151 + 32);
                    v139 = *(_QWORD *)(v152 + 32);
                  }
                }
              }
LABEL_235:
              v433 = v139 & 0xFFFFFFFFFFFFFFF0;
              v434 = v139;
              v141 = *(_QWORD *)(v139 & 0xFFFFFFFFFFFFFFF0);
              v142 = v141 & 0xFFFFFFFFFFFFFFF0;
              v143 = v137 & 0xFFFFFFFFFFFFFFF0;
              if ((v141 & 0xFFFFFFFFFFFFFFF0) != (*(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_293;
              v144 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v144 & 8) != 0)
              {
                v146 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v145 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v145 = 0;
                v146 = 0;
              }
              v414 = v146;
              v418 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFF0) + 8);
              v422 = v145;
              v426 = v114;
              v431 = v137 & 0xFFFFFFFFFFFFFFF0;
              if ((*(_BYTE *)(v141 + 8) & 0xF) != 0)
              {
                v163 = v137;
                v164 = (unint64_t)sub_22F10D2BC(v139);
                v137 = v163;
                v142 = v164 & 0xFFFFFFFFFFFFFFF0;
              }
              v165 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v142 + 8) & 0xFFFFFFFFFFFFFFF0);
              v166 = v165 && *(_DWORD *)(v165 + 16) == 11;
              v167 = v166 && (*(_DWORD *)(v165 + 16) & 0xFF80000) == 86507520;
              v168 = *(_QWORD *)(v433 + 8);
              if ((v168 & 8) != 0)
              {
                v170 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v169 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v169 = 0;
                v170 = 0;
              }
              v171 = v137;
              v172 = v414 | (v418 | v137) & 7;
              v173 = v167 ? v172 & 0xFFFFFFFFFFFFFFF7 : v172;
              __p = (void *)(v169 | v170 | (v168 | v434) & 7);
              v174 = sub_22E95F24C((unsigned int *)&__p, v173 | v422);
              v137 = v171;
              v140 = v441;
              v114 = v426;
              v143 = v431;
              if ((v174 & 1) != 0)
              {
LABEL_293:
                v175 = v71 + 152 * v114;
                v177 = *(_DWORD *)(v175 + 24);
                v176 = (_DWORD *)(v175 + 24);
                if ((v177 - 3) <= 1)
                {
                  sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v140 + 24), 0x173Bu, 0, (uint64_t)&__p);
                  LODWORD(v451[0]) = v439;
                  v178 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                  LODWORD(v449) = HIDWORD(v439);
                  v179 = sub_22E89519C(v178, (unsigned int *)&v449);
                  v180 = sub_22E90749C(v179, &v465);
                  v462 = v437;
                  v181 = sub_22E89519C(v180, &v462);
                  v461 = v438 + 1;
                  v182 = sub_22E89519C(v181, (unsigned int *)&v461);
                  LOBYTE(v460) = *v176 == 4;
                  v183 = sub_22E894E38(v182, (unsigned __int8 *)&v460);
                  v184 = v440;
                  if (v440)
                    sub_22F0D4E74((uint64_t)v440);
                  v454 = v184;
                  sub_22E8906A0(v183, (uint64_t *)&v454);
                  goto LABEL_335;
                }
                if (v440 && *v440 == 180)
                {
                  sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v140 + 24), 0x1735u, 0, (uint64_t)&__p);
                  LODWORD(v451[0]) = v439;
                  v185 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                  LODWORD(v449) = HIDWORD(v439);
                  v186 = sub_22E89519C(v185, (unsigned int *)&v449);
                  v187 = sub_22E90749C(v186, &v465);
                  sub_22F0D4E74((uint64_t)v440);
                  v454 = v188;
                  v189 = sub_22E8906A0(v187, (uint64_t *)&v454);
                  v190 = sub_22E8901B8(v189, &v464);
                  v191 = sub_22E8901B8(v190, &v463);
                  v462 = v437;
                  v192 = sub_22E89519C(v191, &v462);
                  v461 = v438 + 1;
                  v193 = sub_22E89519C(v192, (unsigned int *)&v461);
                  if (*v176 == 5)
                    v194 = 1;
                  else
                    v194 = 2 * (*v176 == 6);
                  v460 = v194;
                  sub_22E8900C4(v193, (int *)&v460);
                  goto LABEL_335;
                }
                v195 = *(_QWORD *)(v464 & 0xFFFFFFFFFFFFFFF0);
                if (v195 && (v196 = *(_DWORD *)(v195 + 16), (v196 & 0xFE) == 0x28))
                {
LABEL_529:
                  if ((v196 & 0x100000) != 0)
                  {
                    do
                    {
                      v406 = v143;
                      v407 = v137;
                      v195 = *(_QWORD *)(*(_QWORD *)(v195 + 32) & 0xFFFFFFFFFFFFFFF0);
                      if (!v195 || (v408 = *(_DWORD *)(v195 + 16), (v408 & 0xFE) != 0x28))
                      {
                        v195 = sub_22F10CF48(v195);
                        v408 = *(_DWORD *)(v195 + 16);
                      }
                      v137 = v407;
                      v143 = v406;
                    }
                    while ((v408 & 0x100000) != 0);
                  }
                  v197 = (_DWORD *)v143;
                  v198 = (uint64_t *)(v195 + 32);
                }
                else
                {
                  v197 = (_DWORD *)v143;
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v195 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                  {
                    v198 = &v464;
                    goto LABEL_307;
                  }
                  v405 = v137;
                  v195 = sub_22F10CF48(v195);
                  if (v195)
                  {
                    v196 = *(_DWORD *)(v195 + 16);
                    v137 = v405;
                    v143 = (unint64_t)v197;
                    goto LABEL_529;
                  }
                  v198 = &v464;
                  LOBYTE(v137) = v405;
                }
LABEL_307:
                v413 = v137;
                v199 = (uint64_t *)(*v198 & 0xFFFFFFFFFFFFFFF0);
                v200 = *v199;
                if (*v199 && *(_BYTE *)(v200 + 16) == 39
                  || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v200 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                  && (v200 = sub_22F10CF48(v200)) != 0)
                {
                  v199 = (uint64_t *)(*(_QWORD *)(v200 + 32) & 0xFFFFFFFFFFFFFFF0);
                }
                if (sub_22F1110EC(*v199, 0))
                {
                  sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1730u, 0, (uint64_t)&__p);
                  LODWORD(v451[0]) = v439;
                  v201 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                  LODWORD(v449) = HIDWORD(v439);
                  v202 = sub_22E89519C(v201, (unsigned int *)&v449);
                  v203 = sub_22E90749C(v202, &v465);
                  v204 = v440;
                  if (v440)
                    sub_22F0D4E74((uint64_t)v440);
                  v454 = v204;
                  v205 = sub_22E8906A0(v203, (uint64_t *)&v454);
                  v206 = sub_22E8901B8(v205, &v464);
                  v207 = sub_22E8901B8(v206, &v463);
                  v462 = v437;
                  v208 = sub_22E89519C(v207, &v462);
                  v461 = v438 + 1;
                  v209 = sub_22E89519C(v208, (unsigned int *)&v461);
                  v460 = *(_DWORD *)(v447 + 92);
                  sub_22E89519C(v209, &v460);
                  sub_22E903BEC((unsigned int *)&__p);
                  v210 = *(_QWORD *)(v447 + 8);
                  goto LABEL_336;
                }
                v213 = *(_QWORD *)(v464 & 0xFFFFFFFFFFFFFFF0);
                v214 = *(unsigned __int8 *)(v213 + 16);
                if (v213 && v214 == 39)
                {
                  v215 = v434;
                  v216 = v413;
                  v217 = v197;
                  goto LABEL_341;
                }
                v217 = v197;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v213 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
                {
                  v213 = sub_22F10CF48(*(_QWORD *)(v464 & 0xFFFFFFFFFFFFFFF0));
                  v215 = v434;
                  v216 = v413;
                  if (v213)
                  {
LABEL_341:
                    v236 = *(_QWORD *)(v463 & 0xFFFFFFFFFFFFFFF0);
                    v427 = v213;
                    if (v236 && *(_BYTE *)(v236 + 16) == 39
                      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v236 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                      && (v236 = sub_22F10CF48(v236), v213 = v427, v216 = v413, v215 = v434, v236))
                    {
                      v423 = *(_QWORD *)(v213 + 32);
                      v237 = *(_QWORD *)((v423 & 0xFFFFFFFFFFFFFFF0) + 8);
                      v432 = v217;
                      if ((v237 & 8) != 0)
                      {
                        v239 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                        v238 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                      }
                      else
                      {
                        v238 = 0;
                        v239 = 0;
                      }
                      v415 = v238;
                      v419 = v239;
                      v411 = v236;
                      v254 = *(_QWORD *)(v236 + 32);
                      v255 = v254 & 0xFFFFFFFFFFFFFFF0;
                      v256 = *(_QWORD *)(v254 & 0xFFFFFFFFFFFFFFF0);
                      v257 = v254;
                      if ((*(_BYTE *)(v256 + 8) & 0xF) != 0)
                        v256 = (unint64_t)sub_22F10D2BC(v254);
                      v269 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v256 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                      v270 = v269 && *(_DWORD *)(v269 + 16) == 11;
                      v271 = v270 && (*(_DWORD *)(v269 + 16) & 0xFF80000) == 86507520;
                      v272 = *(_QWORD *)(v255 + 8);
                      if ((v272 & 8) != 0)
                      {
                        v274 = *(_QWORD *)((v272 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                        v273 = *(_QWORD *)((v272 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                      }
                      else
                      {
                        v273 = 0;
                        v274 = 0;
                      }
                      v217 = v432;
                      v275 = v271
                           ? v419 & 0xFFFFFFFFFFFFFFF7 | (v237 | v423) & 7
                           : v419 | (v237 | v423) & 7;
                      __p = (void *)(v273 | v274 | (v272 | v257) & 7);
                      v276 = sub_22E95F24C((unsigned int *)&__p, v275 | v415);
                      v215 = v434;
                      v216 = v413;
                      if (v276)
                      {
                        v277 = sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v427 + 32) & 0xFFFFFFFFFFFFFFF0), 0);
                        v216 = v413;
                        v215 = v434;
                        if ((v277 & 1) == 0)
                        {
                          v278 = sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v411 + 32) & 0xFFFFFFFFFFFFFFF0), 0);
                          v216 = v413;
                          v215 = v434;
                          if ((v278 & 1) == 0)
                          {
                            v279 = sub_22EAAB1B8(v12, 0, *(_QWORD *)(v411 + 32), *(_QWORD *)(v427 + 32));
                            v216 = v413;
                            v215 = v434;
                            if (v279)
                            {
                              v420 = a1;
                              v424 = __s;
                              v429 = __n;
                              v280 = 0;
LABEL_388:
                              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x172Eu, 0, (uint64_t)&__p);
                              LODWORD(v451[0]) = v439;
                              v281 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                              LODWORD(v449) = HIDWORD(v439);
                              v282 = sub_22E89519C(v281, (unsigned int *)&v449);
                              v283 = sub_22E90749C(v282, &v465);
                              v284 = v440;
                              if (v440)
                                sub_22F0D4E74((uint64_t)v440);
                              v454 = v284;
                              v285 = sub_22E8906A0(v283, (uint64_t *)&v454);
                              v462 = v280;
                              v286 = sub_22E89519C(v285, &v462);
                              v287 = sub_22E8901B8(v286, &v464);
                              v288 = sub_22E8901B8(v287, &v463);
                              v461 = v438 + 1;
                              sub_22E89519C(v288, (unsigned int *)&v461);
                              sub_22E903BEC((unsigned int *)&__p);
                              sub_22ED11A4C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
                              __s = v424;
                              __n = v429;
                              a1 = v420;
LABEL_391:
                              v16 = a9;
                              v15 = v444;
                              goto LABEL_540;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_493;
                  }
                  v213 = *(_QWORD *)(v464 & 0xFFFFFFFFFFFFFFF0);
                  v214 = *(unsigned __int8 *)(v213 + 16);
                }
                else
                {
                  v215 = v434;
                  v216 = v413;
                }
                if (v214 == 32
                  || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v213 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                  && (v289 = sub_22F10CF48(v213), v216 = v413, v215 = v434, (v213 = v289) != 0))
                {
                  v290 = *(_QWORD *)(v463 & 0xFFFFFFFFFFFFFFF0);
                  if (v290 && *(_BYTE *)(v290 + 16) == 32)
                  {
LABEL_401:
                    v292 = v290;
                    v293 = v213;
                    v294 = sub_22F31179C(v213);
                    v215 = v434;
                    v216 = v413;
                    v416 = v294;
                    if (v294)
                    {
                      v295 = sub_22F31179C(v292);
                      v216 = v413;
                      v215 = v434;
                      v412 = v295;
                      if (v295)
                      {
                        v429 = __n;
                        v410 = v12;
                        v420 = a1;
                        v424 = __s;
                        v296 = *(_QWORD *)(v293 + 32);
                        v297 = *(_QWORD *)((v296 & 0xFFFFFFFFFFFFFFF0) + 8);
                        if ((v297 & 8) != 0)
                        {
                          v299 = *(_QWORD *)((v297 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                          v298 = *(_QWORD *)((v297 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                        }
                        else
                        {
                          v298 = 0;
                          v299 = 0;
                        }
                        v357 = *(_QWORD *)(v292 + 32);
                        v358 = *(_QWORD *)(v357 & 0xFFFFFFFFFFFFFFF0);
                        if ((*(_BYTE *)(v358 + 8) & 0xF) != 0)
                          v358 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v292 + 32));
                        v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v358 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        v360 = v359 && *(_DWORD *)(v359 + 16) == 11;
                        v361 = v360 && (*(_DWORD *)(v359 + 16) & 0xFF80000) == 86507520;
                        v362 = *(_QWORD *)((v357 & 0xFFFFFFFFFFFFFFF0) + 8);
                        if ((v362 & 8) != 0)
                        {
                          v364 = *(_QWORD *)((v362 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                          v363 = *(_QWORD *)((v362 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                        }
                        else
                        {
                          v363 = 0;
                          v364 = 0;
                        }
                        v365 = v361
                             ? v299 & 0xFFFFFFFFFFFFFFF7 | (v297 | v296) & 7
                             : v299 | (v297 | v296) & 7;
                        __p = (void *)(v363 | v364 | (v362 | v357) & 7);
                        v366 = sub_22E95F24C((unsigned int *)&__p, v365 | v298);
                        __s = v424;
                        a1 = v420;
                        v15 = v444;
                        v12 = v410;
                        v215 = v434;
                        v216 = v413;
                        if (v366)
                        {
                          if (v412 != v416)
                          {
                            while (1)
                            {
                              v367 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v416 + 32))(v416);
                              if (v367 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v412 + 32))(v412))
                                break;
                              v412 = sub_22F3B46CC(v412);
                              if (!v412 || v412 == v416)
                              {
                                __s = v424;
                                a1 = v420;
                                v15 = v444;
                                v12 = v410;
                                v215 = v434;
                                v216 = v413;
                                if (!v412)
                                  goto LABEL_493;
                                v280 = 1;
                                goto LABEL_388;
                              }
                            }
                          }
                          v280 = 1;
                          v12 = v410;
                          goto LABEL_388;
                        }
                      }
                    }
                  }
                  else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v290 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
                  {
                    v291 = v213;
                    v290 = sub_22F10CF48(v290);
                    v216 = v413;
                    v215 = v434;
                    if (v290)
                    {
                      v213 = v291;
                      goto LABEL_401;
                    }
                  }
LABEL_493:
                  v16 = a9;
                  if (*(_BYTE *)(*(_QWORD *)v217 + 16) == 32 && *(_BYTE *)(*(_QWORD *)v433 + 16) == 39)
                  {
                    if ((v216 & 8) != 0)
                      v368 = v217[6];
                    else
                      LOWORD(v368) = 0;
                    if ((v215 & 8) != 0)
                      v369 = *(_DWORD *)(v433 + 24);
                    else
                      LOWORD(v369) = 0;
                    if ((((unsigned __int16)v369 ^ (unsigned __int16)v368) & 0x1C0) != 0)
                    {
                      sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x172Du, 0, (uint64_t)&__p);
                      LODWORD(v451[0]) = v439;
                      v370 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                      LODWORD(v449) = HIDWORD(v439);
                      v371 = sub_22E89519C(v370, (unsigned int *)&v449);
                      v372 = sub_22E90749C(v371, &v465);
                      v373 = v440;
                      if (v440)
                        sub_22F0D4E74((uint64_t)v440);
                      v454 = v373;
                      v374 = sub_22E8906A0(v372, (uint64_t *)&v454);
                      v375 = sub_22E8901B8(v374, &v464);
                      v376 = sub_22E8901B8(v375, &v463);
                      v462 = v437;
                      v134 = sub_22E89519C(v376, &v462);
                      goto LABEL_229;
                    }
                  }
                  v377 = *(_QWORD *)(v12 + 88) + 2128;
                  v454 = 0;
                  v455 = v377;
                  v456 = 5935;
                  v454 = (void *)sub_22E3B8AAC(v377);
                  *((_BYTE *)v454 + *(unsigned __int8 *)v454 + 1) = 3;
                  v378 = v454;
                  v379 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v379 + 1;
                  v378[v379 + 2] = v439;
                  *((_BYTE *)v378 + (v379 + 1) + 1) = 3;
                  v380 = v454;
                  v381 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v381 + 1;
                  v380[v381 + 2] = HIDWORD(v439);
                  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v382 = &v465;
                  else
                    v382 = (std::string *)v465.__r_.__value_.__r.__words[0];
                  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = *((_BYTE *)&v465.__r_.__value_.__s + 23) & 0x7F;
                  else
                    size = v465.__r_.__value_.__l.__size_;
                  sub_22E3B89A8((unsigned __int8 **)&v454, v382, size);
                  if (v440)
                  {
                    sub_22F0D4E74((uint64_t)v440);
                    v385 = v384;
                  }
                  else
                  {
                    v385 = 0;
                  }
                  v386 = v454;
                  if (!v454)
                  {
                    v386 = (void *)sub_22E3B8AAC(v455);
                    v454 = v386;
                  }
                  sub_22E4D6448((uint64_t)v386 + 336, v385, 1);
                  v387 = v464;
                  v388 = (unsigned __int8 *)v454;
                  if (!v454)
                  {
                    v388 = (unsigned __int8 *)sub_22E3B8AAC(v455);
                    v454 = v388;
                  }
                  v388[*v388 + 1] = 9;
                  v389 = v454;
                  v390 = *(unsigned __int8 *)v454;
                  v391 = v390 + 1;
                  *(_BYTE *)v454 = v390 + 1;
                  v389[v390 + 2] = v387;
                  v392 = v463;
                  *((_BYTE *)v389 + v391 + 1) = 9;
                  v393 = v454;
                  v394 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v394 + 1;
                  v393[v394 + 2] = v392;
                  *((_BYTE *)v393 + (v394 + 1) + 1) = 3;
                  v395 = v454;
                  v396 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v396 + 1;
                  v395[v396 + 2] = v437;
                  *((_BYTE *)v395 + (v396 + 1) + 1) = 3;
                  v397 = v454;
                  v398 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v398 + 1;
                  v397[v398 + 2] = v438 + 1;
                  v399 = *(unsigned int *)(v447 + 92);
                  *((_BYTE *)v397 + (v398 + 1) + 1) = 3;
                  v400 = v454;
                  v401 = *(unsigned __int8 *)v454;
                  *(_BYTE *)v454 = v401 + 1;
                  v400[v401 + 2] = v399;
                  v402 = sub_22F1E361C(*(_QWORD **)(v12 + 112), *(_DWORD *)(v441 + 24));
                  if (v402 == 3 || !v402)
                  {
                    v403 = *(_DWORD **)(v447 + 64);
                    v404 = *(_DWORD **)(v447 + 72);
                    while (v403 != v404)
                    {
                      sub_22E6D82D0((uint64_t *)&v454, v403);
                      v403 += 14;
                    }
                  }
                  sub_22E90379C((_QWORD *)v12, *(_DWORD *)(v441 + 24), (uint64_t)&v454, 0, (uint64_t)&__p);
                  sub_22E903BEC((unsigned int *)&__p);
                  sub_22ED11A4C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
                  if (v454 && v455)
                    sub_22E3BB10C(v455, (unint64_t)v454);
                  goto LABEL_540;
                }
                v300 = *(_QWORD *)(v463 & 0xFFFFFFFFFFFFFFF0);
                if (!v300 || (v301 = *(_DWORD *)(v300 + 16), (v301 & 0xFE) != 0x28))
                {
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v300 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                    goto LABEL_493;
                  v302 = sub_22F10CF48(*(_QWORD *)(v463 & 0xFFFFFFFFFFFFFFF0));
                  v216 = v413;
                  v215 = v434;
                  if (!v302)
                    goto LABEL_493;
                  v300 = v302;
                  v301 = *(_DWORD *)(v302 + 16);
                }
                v303 = v300;
                if ((v301 & 0x100000) != 0)
                {
                  v303 = v300;
                  do
                  {
                    v303 = *(_QWORD *)(*(_QWORD *)(v303 + 32) & 0xFFFFFFFFFFFFFFF0);
                    if (v303)
                    {
                      v304 = *(_DWORD *)(v303 + 16);
                      if ((v304 & 0xFE) == 0x28)
                        continue;
                    }
                    v303 = sub_22F10CF48(v303);
                    v304 = *(_DWORD *)(v303 + 16);
                  }
                  while ((v304 & 0x100000) != 0);
                }
                v305 = *(_QWORD *)(v303 + 32);
                v425 = v464;
                v306 = *(_QWORD *)((v464 & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v306 & 8) != 0)
                {
                  v308 = *(_QWORD *)((v306 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                  v307 = *(_QWORD *)((v306 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                }
                else
                {
                  v307 = 0;
                  v308 = 0;
                }
                v417 = v308;
                v421 = *(_QWORD *)((v464 & 0xFFFFFFFFFFFFFFF0) + 8);
                v430 = v307;
                v322 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(v322 + 8) & 0xF) != 0)
                  v322 = (unint64_t)sub_22F10D2BC(v305);
                v323 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v322 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v323)
                  v324 = *(_DWORD *)(v323 + 16) == 11;
                else
                  v324 = 0;
                v325 = v324 && (*(_DWORD *)(v323 + 16) & 0xFF80000) == 86507520;
                v326 = *(_QWORD *)((v305 & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v326 & 8) != 0)
                {
                  v328 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                  v327 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                }
                else
                {
                  v327 = 0;
                  v328 = 0;
                }
                if (v325)
                  v329 = v417 & 0xFFFFFFFFFFFFFFF7 | (v421 | v425) & 7;
                else
                  v329 = v417 | (v421 | v425) & 7;
                __p = (void *)(v327 | v328 | (v326 | v305) & 7);
                v330 = sub_22E95F24C((unsigned int *)&__p, v329 | v430);
                v215 = v434;
                v216 = v413;
                if (v330)
                {
                  v331 = sub_22F1110EC(*(_QWORD *)(v464 & 0xFFFFFFFFFFFFFFF0), 0);
                  v216 = v413;
                  v215 = v434;
                  if ((v331 & 1) == 0)
                  {
                    v332 = v300;
                    if ((*(_BYTE *)(v300 + 18) & 0x10) != 0)
                    {
                      v332 = v300;
                      do
                      {
                        v332 = *(_QWORD *)(*(_QWORD *)(v332 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (v332)
                        {
                          v333 = *(_DWORD *)(v332 + 16);
                          if ((v333 & 0xFE) == 0x28)
                            continue;
                        }
                        v332 = sub_22F10CF48(v332);
                        v333 = *(_DWORD *)(v332 + 16);
                      }
                      while ((v333 & 0x100000) != 0);
                    }
                    v334 = sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v332 + 32) & 0xFFFFFFFFFFFFFFF0), 0);
                    v215 = v434;
                    v216 = v413;
                    if ((v334 & 1) == 0)
                    {
                      v420 = a1;
                      v424 = __s;
                      v429 = __n;
                      if ((*(_BYTE *)(v300 + 18) & 0x10) != 0)
                      {
                        do
                        {
                          v300 = *(_QWORD *)(*(_QWORD *)(v300 + 32) & 0xFFFFFFFFFFFFFFF0);
                          if (v300)
                          {
                            v335 = *(_DWORD *)(v300 + 16);
                            if ((v335 & 0xFE) == 0x28)
                              continue;
                          }
                          v300 = sub_22F10CF48(v300);
                          v335 = *(_DWORD *)(v300 + 16);
                        }
                        while ((v335 & 0x100000) != 0);
                      }
                      v336 = sub_22EAAB1B8(v12, 0, *(_QWORD *)(v300 + 32), v464);
                      v15 = v444;
                      v215 = v434;
                      v216 = v413;
                      if ((v336 & 1) != 0)
                      {
                        v280 = 2;
                        goto LABEL_388;
                      }
                    }
                  }
                }
                goto LABEL_493;
              }
              if ((v137 & 8) != 0)
              {
                v211 = *(_QWORD *)(v431 + 24) & 0xFFFFFFFF00000000;
                v212 = *(_QWORD *)(v431 + 24);
              }
              else
              {
                v211 = 0;
                v212 = 0;
              }
              if ((v434 & 8) != 0)
              {
                v218 = *(_QWORD *)(v433 + 24) & 0xFFFFFFFF00000000;
                v219 = *(_QWORD *)(v433 + 24);
              }
              else
              {
                v218 = 0;
                v219 = 0;
              }
              v220 = v212 | v137 & 7;
              v221 = v220 >> 11;
              if (v220 >> 11 != v219 >> 11)
              {
                v435 = v219 >> 11;
                if (!v437)
                {
                  sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x172Bu, 0, (uint64_t)&__p);
                  LODWORD(v451[0]) = v439;
                  v247 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                  LODWORD(v449) = HIDWORD(v439);
                  v248 = sub_22E89519C(v247, (unsigned int *)&v449);
                  v249 = sub_22E90749C(v248, &v465);
                  v250 = v440;
                  if (v440)
                    sub_22F0D4E74((uint64_t)v440);
                  v454 = v250;
                  v251 = sub_22E8906A0(v249, (uint64_t *)&v454);
                  v462 = v221;
                  v252 = sub_22ED2348C(v251, &v462);
                  v461 = v435;
                  v253 = sub_22ED2348C(v252, (unsigned int *)&v461);
                  LOBYTE(v459) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v463 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16) & 0xFE) == 40;
                  v134 = sub_22E894E38(v253, (unsigned __int8 *)&v459);
                  v460 = v438 + 1;
                  v135 = (int *)&v460;
                  goto LABEL_230;
                }
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x172Cu, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v230 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v231 = sub_22E89519C(v230, (unsigned int *)&v449);
                v232 = sub_22E90749C(v231, &v465);
                v233 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                v454 = v233;
                v234 = sub_22E8906A0(v232, (uint64_t *)&v454);
                v462 = v221;
                v235 = sub_22ED2348C(v234, &v462);
                v461 = v435;
                sub_22ED2348C(v235, (unsigned int *)&v461);
LABEL_335:
                sub_22E903BEC((unsigned int *)&__p);
                v210 = *(_QWORD *)(v447 + 8);
LABEL_336:
                sub_22ED11A4C((unsigned int *)v12, v210 & 0xFFFFFFFFFFFFFFFCLL);
                goto LABEL_540;
              }
              v222 = v219 | v434 & 7;
              v223 = (v220 >> 9) & 3;
              if (v223 > ((v222 >> 9) & 3))
              {
                if (!v437)
                {
                  sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x16A1u, 0, (uint64_t)&__p);
                  LODWORD(v451[0]) = v439;
                  v259 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                  LODWORD(v449) = HIDWORD(v439);
                  v260 = sub_22E89519C(v259, (unsigned int *)&v449);
                  v261 = sub_22E90749C(v260, &v465);
                  v262 = v440;
                  if (v440)
                    sub_22F0D4E74((uint64_t)v440);
                  v454 = v262;
                  v263 = sub_22E8906A0(v261, (uint64_t *)&v454);
                  v264 = sub_22E8901B8(v263, &v464);
                  v462 = v223;
                  v134 = sub_22EC44A2C(v264, &v462);
                  goto LABEL_229;
                }
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x16A2u, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v224 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v225 = sub_22E89519C(v224, (unsigned int *)&v449);
                v226 = sub_22E90749C(v225, &v465);
                v227 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                v454 = v227;
                v228 = sub_22E8906A0(v226, (uint64_t *)&v454);
                v229 = sub_22E8901B8(v228, &v464);
                v462 = v223;
                sub_22EC44A2C(v229, &v462);
                goto LABEL_335;
              }
              v240 = (v220 >> 6) & 7;
              if (v240 != ((v222 >> 6) & 7))
              {
                v436 = (v222 >> 6) & 7;
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1737u, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v265 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v266 = sub_22E89519C(v265, (unsigned int *)&v449);
                v267 = sub_22E90749C(v266, &v465);
                v268 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                goto LABEL_420;
              }
              v240 = (v220 >> 4) & 3;
              if (v240 != ((v222 >> 4) & 3))
              {
                v436 = (v222 >> 4) & 3;
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1734u, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v309 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v310 = sub_22E89519C(v309, (unsigned int *)&v449);
                v267 = sub_22E90749C(v310, &v465);
                v268 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
LABEL_420:
                v454 = v268;
                v311 = sub_22E8906A0(v267, (uint64_t *)&v454);
                v312 = sub_22E8901B8(v311, &v464);
                v462 = v240;
                v313 = sub_22E8900C4(v312, (int *)&v462);
                v461 = v436;
                v314 = sub_22E8900C4(v313, &v461);
                v460 = v437;
                v134 = sub_22E89519C(v314, &v460);
                v459 = v438 + 1;
                v135 = (int *)&v459;
                goto LABEL_230;
              }
              if (((v220 >> 3) & 1) != (v219 & 8) >> 3)
              {
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x173Au, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v241 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v242 = sub_22E89519C(v241, (unsigned int *)&v449);
                v243 = sub_22E90749C(v242, &v465);
                v244 = v440;
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                v454 = v244;
                v245 = sub_22E8906A0(v243, (uint64_t *)&v454);
                v246 = sub_22E8901B8(v245, &v464);
                LOBYTE(v461) = (v220 & 8) >> 3;
                v134 = sub_22E894E38(v246, (unsigned __int8 *)&v461);
                v462 = v438 + 1;
                v135 = (int *)&v462;
                goto LABEL_230;
              }
              v315 = HIDWORD(v211);
              if (HIDWORD(v211) != HIDWORD(v218))
              {
                v346 = HIDWORD(v218);
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1738u, 0, (uint64_t)&__p);
                v462 = v439;
                v347 = sub_22E89519C((uint64_t)&__p, &v462);
                v461 = HIDWORD(v439);
                v348 = sub_22E89519C(v347, (unsigned int *)&v461);
                v349 = sub_22E90749C(v348, &v465);
                v350 = sub_22E8901B8(v349, &v464);
                v458 = (v315 & 0xC) != 0;
                v351 = sub_22E894E38(v350, (unsigned __int8 *)&v458);
                v460 = v315;
                sub_22F40B4D0((int *)&v460, &v454);
                v352 = sub_22F2F3734(v351, &v454);
                v453 = (v346 & 0xC) != 0;
                v353 = sub_22E894E38(v352, (unsigned __int8 *)&v453);
                v459 = v346;
                sub_22F40B4D0((int *)&v459, v451);
                v354 = sub_22F2F3734(v353, v451);
                v450 = v438 + 1;
                v355 = sub_22E89519C(v354, &v450);
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                else
                  v356 = 0;
                v449 = v356;
                sub_22E8906A0(v355, &v449);
                if (v452 < 0)
                  operator delete(v451[0]);
                if (v457 < 0)
                  operator delete(v454);
                sub_22E903BEC((unsigned int *)&__p);
                sub_22ED11A4C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
                goto LABEL_391;
              }
              v316 = v220 & ~(_BYTE)v222 & 7;
              if (v437)
              {
                v317 = (unsigned int *)v12;
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1732u, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v318 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v319 = sub_22E89519C(v318, (unsigned int *)&v449);
                v320 = sub_22E90749C(v319, &v465);
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                else
                  v321 = 0;
                v454 = v321;
                v341 = sub_22E8906A0(v320, (uint64_t *)&v454);
                v342 = sub_22E8901B8(v341, &v464);
                v462 = v316 - 1;
                v343 = (int *)&v462;
              }
              else
              {
                v317 = (unsigned int *)v12;
                sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v441 + 24), 0x1731u, 0, (uint64_t)&__p);
                LODWORD(v451[0]) = v439;
                v337 = sub_22E89519C((uint64_t)&__p, (unsigned int *)v451);
                LODWORD(v449) = HIDWORD(v439);
                v338 = sub_22E89519C(v337, (unsigned int *)&v449);
                v339 = sub_22E90749C(v338, &v465);
                if (v440)
                  sub_22F0D4E74((uint64_t)v440);
                else
                  v340 = 0;
                v454 = v340;
                v344 = sub_22E8906A0(v339, (uint64_t *)&v454);
                v345 = sub_22E8901B8(v344, &v464);
                v462 = v316 - 1;
                v342 = sub_22E89519C(v345, &v462);
                v461 = v438 + 1;
                v343 = &v461;
              }
              sub_22E89519C(v342, (unsigned int *)v343);
              sub_22E903BEC((unsigned int *)&__p);
              v12 = (uint64_t)v317;
              sub_22ED11A4C(v317, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
              v16 = a9;
LABEL_540:
              if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v465.__r_.__value_.__l.__data_);
              break;
            case 3:
              if (*(unsigned __int8 *)(v447 + 112) - 11 > 1
                || (v53 = *(_QWORD *)v447, sub_22EFC0EB8(*(_QWORD *)v447), (*(_BYTE *)(v53 + 28) & 0x80) == 0)
                || (*(_QWORD *)(v53 + 40) & 7) != 6)
              {
                sub_22ED1260C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)v447, v447 + 112, a4, 0);
              }
              v15 = v444;
              break;
            case 4:
            case 6:
            case 7:
              goto LABEL_12;
            case 5:
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v19 + 24), 0x1746u, 0, (uint64_t)&__p);
              v54 = *(_QWORD *)(v19 + 144) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(v19 + 144) & 6) != 4 || v54 == 0)
                v88 = 0;
              else
                v88 = *(_QWORD *)(v54 + 16) & 0xFFFFFFFFFFFFFFF8;
              LODWORD(v465.__r_.__value_.__l.__data_) = v88 != 0;
              sub_22E8900C4((uint64_t)&__p, (int *)&v465);
              goto LABEL_188;
            case 8:
              v58 = sub_22E903070(v12, 1);
              v59 = v58 - 72;
              if (!v58)
                v59 = 0;
              if ((*(_WORD *)(v58 + 8) & 0x7Eu) - 52 >= 6)
                v60 = 0;
              else
                v60 = v59;
              v61 = *(_QWORD *)v447;
              LODWORD(v454) = 0;
              LODWORD(v454) = sub_22E9FDFC4(v12, v60, 0);
              LODWORD(v451[0]) = 0;
              LODWORD(v451[0]) = sub_22E9FDFC4(v12, v61, 0);
              memset(&v465, 0, sizeof(v465));
              v62 = sub_22ED11874(v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, v61, (*(_BYTE *)(v447 + 104) >> 5) & 3, (uint64_t)&v465);
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v61 + 24), 0x1739u, 0, (uint64_t)&__p);
              LODWORD(v464) = v62;
              v63 = sub_22E89519C((uint64_t)&__p, (unsigned int *)&v464);
              LODWORD(v463) = 0;
              v64 = sub_22E89519C(v63, (unsigned int *)&v463);
              v65 = sub_22E90749C(v64, &v465);
              v66 = sub_22E8900C4(v65, (int *)v451);
              sub_22E8900C4(v66, (int *)&v454);
              sub_22E903BEC((unsigned int *)&__p);
              if ((*(_DWORD *)(v61 + 28) & 0x200) == 0 || (*(_DWORD *)(v61 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC || !v61)
                goto LABEL_540;
              v67 = *(_WORD *)(v61 + 80) & 0x7F;
              v68 = -40;
              if (v67 > 0x46)
              {
                switch(v67)
                {
                  case 'S':
                    goto LABEL_254;
                  case 'G':
                    v68 = -56;
                    goto LABEL_254;
                  case 'Q':
                    goto LABEL_254;
                }
              }
              else
              {
                if (v67 <= 0x18)
                {
                  if (v67 == 16)
                    goto LABEL_106;
                  if (((1 << v67) & 0x1066) != 0)
                    goto LABEL_254;
                  if (v67 == 24)
                    goto LABEL_106;
                }
                if (v67 == 70)
                  goto LABEL_252;
              }
              if (v67 - 52 >= 6)
              {
                if (v67 - 33 >= 5)
                {
LABEL_106:
                  v68 = -48;
                  goto LABEL_254;
                }
LABEL_252:
                v68 = -64;
                goto LABEL_254;
              }
              v68 = -72;
LABEL_254:
              v153 = *(_QWORD *)(v61 + 72 + v68 + 16);
              v154 = (_QWORD *)(v153 & 0xFFFFFFFFFFFFFFF8);
              if ((v153 & 4) != 0)
                v154 = (_QWORD *)*v154;
              if (v154)
                v155 = v154 - 8;
              else
                v155 = 0;
              v156 = (v62 - 4);
              if (v156 > 4)
                goto LABEL_540;
              v448 = v155;
              v157 = *(_QWORD *)(*(_QWORD *)(v61 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (!v157 || *(_BYTE *)(v157 + 16) != 26)
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v157 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
                  goto LABEL_538;
                v157 = sub_22F10CF48(v157);
                if (!v157)
                  goto LABEL_538;
              }
              if ((*(_DWORD *)(v157 + 20) & 0x3FFFC0) == 0)
                goto LABEL_538;
              v158 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v61 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v158)
              {
                v159 = *(_DWORD *)(v158 + 16);
                if ((v159 & 0xFE) == 0x28)
                  goto LABEL_268;
              }
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v158 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
                && (v158 = sub_22F10CF48(v158)) != 0)
              {
                v159 = *(_DWORD *)(v158 + 16);
LABEL_268:
                if ((v159 & 0x100000) != 0)
                {
                  do
                  {
                    while (1)
                    {
                      v158 = *(_QWORD *)(*(_QWORD *)(v158 + 32) & 0xFFFFFFFFFFFFFFF0);
                      if (!v158)
                        break;
                      v160 = *(_DWORD *)(v158 + 16);
                      if ((v160 & 0xFE) != 0x28)
                        break;
                      if ((v160 & 0x100000) == 0)
                        goto LABEL_274;
                    }
                    v158 = sub_22F10CF48(v158);
                  }
                  while ((*(_DWORD *)(v158 + 16) & 0x100000) != 0);
                }
LABEL_274:
                v161 = *(_QWORD *)(v158 + 32);
                if ((v161 & 1) != 0)
                  v162 = 1;
                else
                  v162 = *(_BYTE *)((v161 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
              }
              else
              {
LABEL_538:
                v162 = 0;
              }
              sub_22E9FE3F8(v12, v448, v156, v61, v162, 1);
              goto LABEL_540;
            case 9:
              v147 = *(_QWORD *)(v447 + 120);
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(*(_QWORD *)v447 + 24), 0x1740u, 0, (uint64_t)&__p);
              sub_22F0D4E74(*(_QWORD *)(v147 + 40));
              v454 = v148;
              v149 = sub_22E8906A0((uint64_t)&__p, (uint64_t *)&v454);
              v150 = *(unsigned int *)(v147 + 48);
              v465.__r_.__value_.__r.__words[0] = *(_QWORD *)(v147 + 56);
              v465.__r_.__value_.__l.__size_ = v150;
              sub_22F2F2210(v149, (uint64_t)&v465);
              goto LABEL_179;
            case 0xA:
              v80 = *(_QWORD *)v447;
              v81 = *(_WORD *)(*(_QWORD *)v447 + 80) & 0x7F;
              switch(v81)
              {
                case '8':
                  v82 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80) + 160);
                  v80 = *(_QWORD *)v447;
                  v81 = *(_WORD *)(*(_QWORD *)v447 + 80) & 0x7F;
                  break;
                case '7':
                  v96 = *(_QWORD *)(v80 + 112);
                  v97 = *(_QWORD *)(v96 + 80);
                  if ((v97 & 0x4000000000000000) == 0)
                    goto LABEL_150;
                  v82 = *(_QWORD *)(v96 + 16 * ((v97 >> 61) & 1) + 168);
                  break;
                case '5':
                  v82 = *(_QWORD *)(v80 + 168);
                  break;
                default:
LABEL_150:
                  v82 = 0;
                  break;
              }
              if (v81 == 53)
                LODWORD(v454) = ~(*(_DWORD *)(v80 + 28) >> 8) & 2;
              else
                LODWORD(v454) = v81 == 56;
              v98 = *(_QWORD *)(v80 + 112);
              v99 = sub_22EFC20FC(v98, 1);
              if (v99)
                v98 = *(_QWORD *)(v99 + 112);
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v98 + 24), 0x1742u, 0, (uint64_t)&__p);
              v100 = sub_22E89519C((uint64_t)&__p, (unsigned int *)&v454);
              v101 = v82 & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v451[0]) = v101 != 0;
              v102 = sub_22E8900C4(v100, (int *)v451);
              if (v101)
                sub_22F0D4E74(v101);
              else
                v103 = 0;
              v465.__r_.__value_.__r.__words[0] = v103;
              sub_22E8906A0(v102, (uint64_t *)&v465);
              goto LABEL_179;
            case 0xB:
              sub_22ED10E50((_QWORD *)v12, *(_QWORD *)v447, 1, 1, 0);
              break;
            case 0xC:
              LODWORD(__p) = 0;
              if ((sub_22EFD8088(v19, (int *)&__p) & 1) != 0)
                break;
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v19 + 24), 0x174Du, 0, (uint64_t)&__p);
              v56 = *(_QWORD *)(v19 + 144) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(v19 + 144) & 6) != 4 || v56 == 0)
                v111 = 0;
              else
                v111 = *(_QWORD *)(v56 + 16) & 0xFFFFFFFFFFFFFFF8;
              LODWORD(v465.__r_.__value_.__l.__data_) = v111 != 0;
              v112 = sub_22E8900C4((uint64_t)&__p, (int *)&v465);
              LOBYTE(v454) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v19 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) == 41;
              sub_22E894E38(v112, (unsigned __int8 *)&v454);
              goto LABEL_188;
            case 0xE:
              v83 = (v20 << 11);
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v19 + 24), 0x1747u, 0, (uint64_t)&__p);
              if (v471)
              {
                v84 = (unsigned __int8 *)v470[0];
                if (!v470[0])
                {
                  v84 = (unsigned __int8 *)sub_22E3B8AAC(v470[1]);
                  v470[0] = v84;
                }
                v84[*v84 + 1] = 8;
                v85 = (_BYTE *)v470[0];
LABEL_127:
                v86 = *v85;
                *v85 = v86 + 1;
                *(_QWORD *)&v85[8 * v86 + 16] = v83;
                goto LABEL_188;
              }
              if (v473)
              {
                v89 = (uint64_t *)__p;
                v90 = v468;
                if (v468)
                  v90 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v468 + 32))(v468);
                v465.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
                v91 = sub_22F2F1D6C(v89 + 1598, (uint64_t *)&v465);
                v92 = v91[1] + 32 * v472;
                v95 = *(unsigned __int8 **)(v92 + 8);
                v94 = (_QWORD *)(v92 + 8);
                v93 = v95;
                if (!v95)
                {
                  v93 = (unsigned __int8 *)sub_22E3B8AAC(v94[1]);
                  *v94 = v93;
                }
                v93[*v93 + 1] = 8;
                v85 = (_BYTE *)*v94;
                goto LABEL_127;
              }
LABEL_188:
              sub_22E903BEC((unsigned int *)&__p);
              sub_22ED11A4C((unsigned int *)v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL);
              break;
            case 0xF:
              memset(&v465, 0, sizeof(v465));
              v72 = sub_22ED11874(v12, *(_QWORD *)(v447 + 8) & 0xFFFFFFFFFFFFFFFCLL, v19, (v21 >> 5) & 3, (uint64_t)&v465);
              sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(v19 + 24), 0x173Cu, 0, (uint64_t)&__p);
              LODWORD(v454) = v72;
              v73 = sub_22E89519C((uint64_t)&__p, (unsigned int *)&v454);
              LODWORD(v451[0]) = 0;
              v74 = sub_22E89519C(v73, (unsigned int *)v451);
              sub_22E90749C(v74, &v465);
              sub_22E903BEC((unsigned int *)&__p);
              __p = 0;
              v467 = 0;
              v468 = v470;
              v469 = 0x400000000;
              v474 = 0;
              v475 = v477;
              v476 = 0x400000000;
              v75 = sub_22E9F3C18(v12);
              v76 = v475;
              if ((v75 & 1) == 0 && (_DWORD)v476)
              {
                v77 = 16 * v476;
                v78 = (char *)v475 + 8;
                v79 = 1;
                do
                {
                  sub_22E9F4654((_QWORD *)v12, v78, v79 & 1);
                  v79 = 0;
                  v78 += 2;
                  v77 -= 16;
                }
                while (v77);
                v76 = v475;
              }
              if (v76 != v477)
                free(v76);
              if (v468 != v470)
                free(v468);
              goto LABEL_540;
            default:
              break;
          }
        }
      }
    }
    else if ((*(_BYTE *)(v447 + 104) & 4) != 0)
    {
      if (!sub_22ED116B8(*(_QWORD *)(v447 + 40)))
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v447 + 40) + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v32)
          v33 = *(unsigned __int8 *)(v32 + 16) - 27 > 0xFFFFFFFD;
        else
          v33 = 0;
        if (!v33)
          v32 = sub_22F10CF48(v32);
        v34 = *(_QWORD *)(v32 + 24);
        v465.__r_.__value_.__r.__words[0] = v34;
        v35 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
        v36 = *(_DWORD *)(v35 + 16);
        v37 = v36;
        if (v35 && v36 == 40)
        {
          if ((v36 & 0x100000) != 0)
          {
            do
            {
LABEL_53:
              while (1)
              {
                v35 = *(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v35)
                  break;
                v38 = *(_DWORD *)(v35 + 16);
                if ((v38 & 0xFE) != 0x28)
                  break;
                if ((v38 & 0x100000) == 0)
                  goto LABEL_72;
              }
              v35 = sub_22F10CF48(v35);
            }
            while ((*(_DWORD *)(v35 + 16) & 0x100000) != 0);
          }
LABEL_72:
          v50 = 0;
          v51 = 0;
          v34 = *(_QWORD *)(v35 + 32);
          v465.__r_.__value_.__r.__words[0] = v34;
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
          {
            v35 = sub_22F10CF48(v35);
            if (v35)
            {
              if ((*(_DWORD *)(v35 + 16) & 0x100000) != 0)
                goto LABEL_53;
              goto LABEL_72;
            }
            v34 = v465.__r_.__value_.__r.__words[0];
            v35 = *(_QWORD *)(v465.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0);
            v36 = *(_DWORD *)(v35 + 16);
            v37 = v36;
          }
          if (v37 != 41)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 41)
            {
              v51 = 0;
              v50 = 1;
              goto LABEL_161;
            }
            v35 = sub_22F10CF48(v35);
            if (!v35)
            {
              v51 = 0;
              v50 = 1;
              v34 = v465.__r_.__value_.__r.__words[0];
              goto LABEL_161;
            }
            v36 = *(_DWORD *)(v35 + 16);
          }
          if ((v36 & 0x100000) != 0)
          {
            do
            {
              while (1)
              {
                v35 = *(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v35)
                  break;
                v87 = *(_DWORD *)(v35 + 16);
                if ((v87 & 0xFE) != 0x28)
                  break;
                if ((v87 & 0x100000) == 0)
                  goto LABEL_139;
              }
              v35 = sub_22F10CF48(v35);
            }
            while ((*(_DWORD *)(v35 + 16) & 0x100000) != 0);
          }
LABEL_139:
          v34 = *(_QWORD *)(v35 + 32);
          v465.__r_.__value_.__r.__words[0] = v34;
          v50 = 1;
          v51 = 1;
        }
LABEL_161:
        v104 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
        v105 = *(unsigned __int8 *)(v104 + 16);
        if (v104 && v105 == 39)
        {
LABEL_165:
          v465.__r_.__value_.__r.__words[0] = *(_QWORD *)(v104 + 32);
          v106 = *(_QWORD *)(v465.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0);
          if (v106)
            v107 = *(unsigned __int8 *)(v106 + 16) - 27 > 0xFFFFFFFD;
          else
            v107 = 0;
          if (!v107)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v106 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
               - 25 <= 1)
              v106 = sub_22F10CF48(v106);
            else
              v106 = 0;
          }
          v465.__r_.__value_.__r.__words[0] = v106 & 0xFFFFFFFFFFFFFFF0;
          v108 = sub_22EF5B848(*(_QWORD *)(v12 + 88), v106 & 0xFFFFFFFFFFFFFFF0, 0);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
          {
            v104 = sub_22F10CF48(v104);
            if (v104)
              goto LABEL_165;
            v104 = *(_QWORD *)(v465.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0);
            v105 = *(unsigned __int8 *)(v104 + 16);
          }
          if ((v105 - 27) <= 0xFFFFFFFD)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
               - 25 <= 1)
              v104 = sub_22F10CF48(v104);
            else
              v104 = 0;
          }
          v108 = v104 & 0xFFFFFFFFFFFFFFF0;
        }
        v465.__r_.__value_.__r.__words[0] = v108;
        if (v51)
        {
          v108 = sub_22EF5FB8C(*(_QWORD *)(v12 + 88), v108);
          v465.__r_.__value_.__r.__words[0] = v108;
        }
        if ((v50 & 1) == 0)
          v465.__r_.__value_.__r.__words[0] = sub_22EF5F8C4(*(_QWORD *)(v12 + 88), v108, 1);
        sub_22E8FCA40((_QWORD *)v12, *(_DWORD *)(*(_QWORD *)(v447 + 40) + 24), 0x1754u, 0, (uint64_t)&__p);
        sub_22E8901B8((uint64_t)&__p, (uint64_t *)&v465);
LABEL_179:
        sub_22E903BEC((unsigned int *)&__p);
      }
    }
    else
    {
      if ((v445 & 1) == 0)
      {
        v23 = *(_QWORD *)(v447 + 56);
        if (v23)
        {
          v24 = *(_DWORD **)(v447 + 48);
          v25 = 152 * v23;
          do
          {
            v26 = *v24 & 0x7FFFFFFF;
            if (v26 == 2)
            {
              v27 = *(_QWORD *)(v12 + 88) + 2128;
              __p = 0;
              v467 = v27;
              LODWORD(v468) = 5426;
              sub_22F342BD4((uint64_t)v24, (unsigned int *)v12, v16, (uint64_t)&__p);
              if (__p && v467)
                sub_22E3BB10C(v467, (unint64_t)__p);
            }
            else if (v26 == 4)
            {
              break;
            }
            v24 += 38;
            v25 -= 152;
          }
          while (v25);
        }
      }
      *((_BYTE *)&v465.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v465, "operator");
      std::string::append(&v465, __s, __n);
      std::string::append(&v465, "(");
      sub_22F1192C0((_QWORD *)(v447 + 16), (uint64_t)&__p);
      if (SHIBYTE(v468) >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (SHIBYTE(v468) >= 0)
        v29 = HIBYTE(v468) & 0x7F;
      else
        v29 = v467;
      std::string::append(&v465, p_p, v29);
      if (SHIBYTE(v468) < 0)
        operator delete(__p);
      if (*(_QWORD *)(v447 + 56) != 1)
      {
        std::string::append(&v465, ", ");
        sub_22F1192C0((_QWORD *)(v447 + 24), (uint64_t)&__p);
        v30 = SHIBYTE(v468) >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        v31 = SHIBYTE(v468) >= 0 ? HIBYTE(v468) & 0x7F : v467;
        std::string::append(&v465, v30, v31);
        if (SHIBYTE(v468) < 0)
          operator delete(__p);
      }
      std::string::append(&v465, ")");
      sub_22E8FCA40((_QWORD *)v12, v16, 0x1727u, 0, (uint64_t)&__p);
      sub_22E90749C((uint64_t)&__p, &v465);
      sub_22E903BEC((unsigned int *)&__p);
      if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v465.__r_.__value_.__l.__data_);
      v445 = 1;
    }
    ++v14;
    v11 += 8;
    if (v11 == v15)
    {
      if (v442 >= 5)
        *(_DWORD *)(*(_QWORD *)(v12 + 104) + 16) = 4;
      return;
    }
  }
  if (v14 >= 5)
    *(_DWORD *)(v17 + 16) = 4;
  v409 = sub_22F342D10(a1, v12);
  sub_22E8FCA40((_QWORD *)v12, v16, 0x1755u, v409, (uint64_t)&__p);
  LODWORD(v465.__r_.__value_.__l.__data_) = (unint64_t)(v15 - v11) >> 3;
  sub_22E8900C4((uint64_t)&__p, (int *)&v465);
  sub_22E903BEC((unsigned int *)&__p);
}

uint64_t sub_22ED0169C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
  v30 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) | a4 & 7;
  v9 = v30;
  v31 = v8;
  v28 = 0;
  v29 = 0;
  v10 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v8, &v29);
  v11 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v9, &v28);
  v12 = v11;
  if (a5)
    *a5 = 0;
  if (v10 != v11)
  {
    v13 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
    if ((sub_22EE8B180(a1, a2) & 1) == 0)
    {
      v14 = sub_22F10C2A4(*v13);
      if (!v14
        || ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD ? (v15 = (*(_DWORD *)(v14 + 28) & 0x80) == 0) : (v15 = 1),
            v15))
      {
        v16 = sub_22F10C2A4(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
        if (!v16
          || ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD
            ? (v17 = (*(_DWORD *)(v16 + 28) & 0x80) == 0)
            : (v17 = 1),
              v17))
        {
          if (sub_22EAAB1B8(a1, a2, v12, v10))
          {
            if (a5)
            {
              v18 = 0;
              v19 = *a5 | 8;
LABEL_20:
              *a5 = v19;
              goto LABEL_30;
            }
LABEL_50:
            v18 = 0;
            goto LABEL_30;
          }
        }
      }
    }
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 33 <= 1
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 33 <= 1)
    {
      if ((sub_22F36ED18(*(_QWORD *)(a1 + 88), v10, v12) & 1) != 0)
      {
        if (a5)
        {
          v18 = 0;
          v19 = *a5 | 0x10;
          goto LABEL_20;
        }
        goto LABEL_50;
      }
      v20 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1
      && sub_22ECFAE0C(a1, v12, v10, &v27))
    {
      if (a5)
        *a5 |= 4u;
      return 2;
    }
  }
  if (a5)
    v18 = *a5 == 0;
  else
    v18 = 1;
LABEL_30:
  v21 = 1;
  v26 = 1;
  do
  {
    v22 = v31;
    if (v31 == v30)
      break;
    if (a5)
    {
      v23 = *a5;
      *a5 |= 1u;
      if ((v21 & 1) == 0)
        *a5 = v23 | 3;
    }
    v31 = sub_22ED019B8(*(_QWORD *)(a1 + 88), v22);
    v30 = sub_22ED019B8(*(_QWORD *)(a1 + 88), v30);
    v25 = 0;
    if ((sub_22ECFD864(v30, v31, 0, v21 & 1, &v26, &v25) & 1) == 0)
      return !v18 || sub_22EF6845C(*(_QWORD *)(a1 + 88), v31, v30);
    if (a5 && v25)
      *a5 |= 0x20u;
    v21 = 0;
  }
  while ((sub_22EF68220(*(_QWORD *)(a1 + 88), (unint64_t *)&v31, (unint64_t *)&v30, 1) & 1) != 0);
  if (!v18)
    return 2;
  return 2
       * (*(_QWORD *)(*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22ED019B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v2 & 8) != 0 && (*(_BYTE *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 8) != 0)
  {
    v7 = 0;
    v4 = sub_22EF67F34(a1, a2, &v7);
    LODWORD(v7) = v7 & 0xFFFFFFF7;
    if ((v7 & 0xCFFFFFFF8) != 0)
    {
      v8 = v7;
      v5 = sub_22E491354((unsigned int *)&v8, v4);
      return sub_22EF5DBC4(a1, v5, v8);
    }
    else
    {
      return v7 & 7 | v4;
    }
  }
  return a2;
}

uint64_t sub_22ED01A54(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62[24];
  unsigned int v63[4];
  unsigned __int8 v64;
  int v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v10 = *(_QWORD *)(sub_22EFD7558(a5) & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || *(_BYTE *)(v10 + 16) != 39)
    v10 = sub_22F10CF48(v10);
  v11 = *(_QWORD *)(v10 + 32);
  v68 = v11;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (v13 && *(_BYTE *)(v13 + 16) == 39)
    goto LABEL_65;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    goto LABEL_6;
  v13 = sub_22F10CF48(v13);
  if (v13)
  {
LABEL_65:
    v69 = *(_QWORD *)(v13 + 32);
    v11 = sub_22EFD7558(a5);
    v14 = 0;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a2 + 8);
LABEL_6:
  v69 = v12;
  v14 = (unsigned __int16)sub_22F003E64(a2, a1[11], 0);
  if ((*(_BYTE *)(a2 + 1) & 3) == 0)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v32)
      v33 = *(_BYTE *)(v32 + 16) == 26;
    else
      v33 = 0;
    if (!v33)
      v32 = sub_22F10CF48(v32);
    a2 = sub_22F335E0C((uint64_t)a1, v12, a2, (*(_QWORD *)(v32 + 16) & 0x300000000) != 0x200000000);
  }
LABEL_7:
  sub_22F0D5A50(a2);
  v16 = *(_WORD *)(a5 + 80) & 0x7F;
  v17 = -40;
  if (v16 > 0x46)
  {
    if (v16 == 83)
      goto LABEL_11;
    if (v16 == 71)
    {
      v17 = -56;
      goto LABEL_11;
    }
    if (v16 != 81)
    {
LABEL_37:
      v28 = v16 - 52;
      v29 = v16 - 33 >= 5;
      v30 = -48;
      if (!v29)
        v30 = -64;
      if (v28 >= 6)
        v17 = v30;
      else
        v17 = -72;
    }
  }
  else
  {
    if (v16 > 0x18)
      goto LABEL_36;
    if (v16 == 16)
    {
LABEL_10:
      v17 = -48;
      goto LABEL_11;
    }
    if (((1 << v16) & 0x1066) == 0)
    {
      if (v16 == 24)
        goto LABEL_10;
LABEL_36:
      if (v16 == 70)
      {
        v17 = -64;
        goto LABEL_11;
      }
      goto LABEL_37;
    }
  }
LABEL_11:
  v18 = *(_QWORD *)(a5 + 72 + v17 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = (unint64_t)(v19 - 8);
  else
    v20 = 0;
  sub_22ED02038(v63, (uint64_t)a1, v15, *(_QWORD *)(a2 + 8), v14, a5, v20);
  if ((v63[0] & 0x7FFFFFFF) == 4)
  {
    if ((v65 - 3) < 2)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v34 || *(_BYTE *)(v34 + 16) != 26)
        v34 = sub_22F10CF48(v34);
      LOBYTE(v59) = (*(_QWORD *)(v34 + 16) & 0x300000000) == 0x200000000;
      sub_22F0D5A50(a2);
      sub_22E8FCA40(a1, v35, 0xEBBu, 0, (uint64_t)v62);
      v61 = *(_QWORD *)(a5 + 40);
      v36 = sub_22E894538((uint64_t)v62, &v61);
      LOBYTE(v60) = v14 != 0;
      v37 = sub_22E894E38(v36, (unsigned __int8 *)&v60);
      sub_22E894E38(v37, (unsigned __int8 *)&v59);
      goto LABEL_58;
    }
    if (v65 == 2)
    {
      v38 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v38 & 8) != 0)
        v39 = *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      else
        v39 = 0;
      v40 = v39 | (v38 | v69) & 7;
      v41 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v41 & 8) != 0)
        v42 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      else
        v42 = 0;
      v43 = v42 | (v41 | v11) & 7;
      v44 = v40 & ~(_BYTE)v43 & 7;
      if ((v40 & ~(_BYTE)v43 & 7) != 0)
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v45, 0xEBAu, 0, (uint64_t)v62);
        v61 = *(_QWORD *)(a5 + 40);
        v46 = sub_22E894538((uint64_t)v62, &v61);
        v47 = sub_22E8901B8(v46, &v69);
        v60 = v44 - 1;
        v48 = sub_22E89519C(v47, &v60);
LABEL_78:
        v49 = v48;
        sub_22F0D4E74(a2);
        v59 = v50;
        sub_22E8906A0(v49, &v59);
LABEL_58:
        sub_22E903BEC(v62);
        sub_22E8FCA40(a1, *(_DWORD *)(a5 + 24), 0x1771u, 0, (uint64_t)v62);
        v61 = *(_QWORD *)(a5 + 40);
        sub_22E894538((uint64_t)v62, &v61);
LABEL_59:
        sub_22E903BEC(v62);
        goto LABEL_60;
      }
      v51 = (v40 >> 9) & 3;
      if (v51 > ((v43 >> 9) & 3))
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v52, 0xF27u, 0, (uint64_t)v62);
        v61 = *(_QWORD *)(a5 + 40);
        v53 = sub_22E894538((uint64_t)v62, &v61);
        v54 = sub_22E8901B8(v53, &v69);
        v60 = v51;
        v48 = sub_22EC44A2C(v54, &v60);
        goto LABEL_78;
      }
    }
    sub_22F0D5A50(a2);
    sub_22E8FCA40(a1, v55, 0xEBCu, 0, (uint64_t)v62);
    v56 = sub_22E8901B8((uint64_t)v62, (uint64_t *)&v68);
    v57 = sub_22E8901B8(v56, &v69);
    sub_22F0D4E74(a2);
    v61 = v58;
    sub_22E8906A0(v57, &v61);
    goto LABEL_59;
  }
  if ((unint64_t)v64 << 8 != 4352)
    goto LABEL_18;
  v31 = (unint64_t)sub_22EB24398((uint64_t)a1, a2, a3, a4, a5);
  if ((v31 & 1) != 0)
  {
LABEL_60:
    a2 = 1;
    goto LABEL_19;
  }
  a2 = v31 & 0xFFFFFFFFFFFFFFFELL;
LABEL_18:
  if ((*(_QWORD *)(a2 + 8) & 7 | *(_QWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) | v11 & 7))
  {
    v22 = sub_22F10ACF8(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
    if (v22 > 0xF)
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v23 & 8) == 0)
        goto LABEL_27;
    }
    else
    {
      v23 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v23 & 8) == 0)
      {
LABEL_27:
        v24 = 0;
LABEL_28:
        v25 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v25 & 8) != 0)
          v26 = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        else
          v26 = 0;
        if (v26 == v24)
          v27 = 5;
        else
          v27 = 66;
        a2 = sub_22E90092C((uint64_t)a1, a2, v11, v27, (*(_DWORD *)a2 >> 8) & 3, 0) & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_19;
      }
    }
    v24 = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    goto LABEL_28;
  }
LABEL_19:
  if ((v63[0] & 0x7FFFFFFF) == 2 && v66 != &v67)
    free(v66);
  return a2;
}

void sub_22ED02038(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4, __int16 a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int *v49;
  unsigned int v50;
  int *v51;
  unsigned int v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int *v61;
  uint64_t v63;
  __int16 v64;
  unint64_t v65;
  unint64_t v66;

  v12 = *(_QWORD *)(a7 + 48);
  if (v12)
    v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  else
    v13 = sub_22EF6462C(*(_QWORD *)(a2 + 88), a7);
  v14 = sub_22E46BB88(a6);
  if ((*(_DWORD *)(a6 + 28) & 0x7F) == 0x39)
    v15 = v14 | 5;
  else
    v15 = v14;
  v63 = a2;
  if (v14 & 0xC00000000 | v15 & 0xCFFFFFFF8)
  {
    v16 = *(_QWORD *)(a2 + 88);
    v66 = v14 & 0xFFFFFFFF00000000 | v15;
    v17 = sub_22E491354((unsigned int *)&v66, v13);
    v18 = sub_22EF5DBC4(v16, v17, v66);
  }
  else
  {
    v18 = v15 & 7 | v13;
  }
  *a1 = 5;
  v19 = *((_QWORD *)a1 + 2) & 0xFFFFFFFC04000000 | 0x20000000;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = v19;
  *((_QWORD *)a1 + 7) = 0;
  v20 = a4 & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v65 = v13;
  if (v21 && *(_BYTE *)(v21 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && (v21 = sub_22F10CF48(v21)) != 0)
  {
    a4 = *(_QWORD *)(v21 + 32);
    v20 = a4 & 0xFFFFFFFFFFFFFFF0;
  }
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v18 & 0xFFFFFFFFFFFFFFF0;
  v24 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((((v24 | v18) ^ (a4 & 7 | v22)) & 7) != 0)
  {
    v64 = a5;
    v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
  }
  else
  {
    if ((v24 & 8) != 0)
      v26 = (*(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
    else
      v26 = 0;
    v27 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 8;
    v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v25 & 8) != 0)
      v28 = (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
    else
      v28 = 0;
    if (v26 == v28)
      goto LABEL_44;
    v64 = a5;
  }
  v29 = a6;
  if ((v25 & 8) != 0)
  {
    v30 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v31 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v31 = 0;
    v30 = 0;
  }
  v32 = *(_QWORD *)v23;
  if ((*(_BYTE *)(*(_QWORD *)v23 + 8) & 0xF) != 0)
    v32 = (unint64_t)sub_22F10D2BC(v18);
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v33)
    v34 = *(_DWORD *)(v33 + 16) == 11;
  else
    v34 = 0;
  v35 = v34 && (*(_DWORD *)(v33 + 16) & 0xFF80000) == 86507520;
  v36 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v36 & 8) != 0)
  {
    v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  if (v35)
    v39 = v30 & 0xFFFFFFFFFFFFFFF7 | v25 & 7 | a4 & 7 | v22 & 7;
  else
    v39 = v30 | v25 & 7 | a4 & 7 | v22 & 7;
  v66 = v37 | v38 | (v36 | v18) & 7;
  if (!sub_22E95F24C((unsigned int *)&v66, v39 | v31))
    goto LABEL_53;
  v24 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8);
  v27 = v24 & 8;
  a6 = v29;
  a5 = v64;
LABEL_44:
  if (v27)
    v40 = *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v40 = 0;
  v41 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v41 & 8) != 0)
    v42 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v42 = 0;
  if (!sub_22E95F2F0(v40 >> 11, v42 >> 11))
  {
LABEL_53:
    v44 = *a1;
    if ((*a1 & 0x7FFFFFFF) == 2)
    {
      v45 = (int *)*((_QWORD *)a1 + 4);
      if (v45 != (int *)(a1 + 12))
      {
        free(v45);
        v44 = *a1;
      }
    }
    *a1 = v44 & 0x80000000 | 4;
    v46 = 2;
    goto LABEL_57;
  }
  if ((*(_QWORD *)((v65 & 0xFFFFFFFFFFFFFFF0) + 8) | v65 & 7) == (*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
  {
    v43 = 939524096;
  }
  else
  {
    if ((sub_22EAAB1B8(v63, a3, a4, v65) & 1) == 0)
    {
      v50 = *a1;
      if ((*a1 & 0x7FFFFFFF) == 2)
      {
        v51 = (int *)*((_QWORD *)a1 + 4);
        if (v51 != (int *)(a1 + 12))
        {
          free(v51);
          v50 = *a1;
        }
      }
      *a1 = v50 & 0x80000000 | 4;
      v46 = 1;
      goto LABEL_57;
    }
    v43 = 939528448;
  }
  v47 = *(_QWORD *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v47 || *(_BYTE *)(v47 + 16) != 26)
    v47 = sub_22F10CF48(v47);
  if ((*(_DWORD *)(v47 + 20) & 3) == 2)
  {
    if (!a5)
    {
      v60 = *a1;
      if ((*a1 & 0x7FFFFFFF) == 2)
      {
        v61 = (int *)*((_QWORD *)a1 + 4);
        if (v61 != (int *)(a1 + 12))
        {
          free(v61);
          v60 = *a1;
        }
      }
      *a1 = v60 & 0x80000000 | 4;
      v46 = 4;
      goto LABEL_57;
    }
  }
  else if ((*(_DWORD *)(v47 + 20) & 3) == 1 && a5 && (_DWORD)v15 != 1)
  {
    v48 = *a1;
    if ((*a1 & 0x7FFFFFFF) == 2)
    {
      v49 = (int *)*((_QWORD *)a1 + 4);
      if (v49 != (int *)(a1 + 12))
      {
        free(v49);
        v48 = *a1;
      }
    }
    *a1 = v48 & 0x80000000 | 4;
    v46 = 3;
LABEL_57:
    a1[6] = v46;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 4) = a4;
    *((_QWORD *)a1 + 5) = v18;
    return;
  }
  v52 = *a1;
  if ((*a1 & 0x7FFFFFFF) == 2)
  {
    v53 = (int *)*((_QWORD *)a1 + 4);
    if (v53 != (int *)(a1 + 12))
    {
      free(v53);
      v52 = *a1;
    }
  }
  *a1 = v52 & 0x80000000;
  v54 = *((_QWORD *)a1 + 2) & 0xFFFFFFFC04000000;
  *((_QWORD *)a1 + 4) = v18;
  *((_QWORD *)a1 + 5) = v18;
  *((_QWORD *)a1 + 6) = v18;
  *((_QWORD *)a1 + 7) = 0;
  v55 = v43 | v54;
  *((_QWORD *)a1 + 2) = v43 | v54;
  *((_QWORD *)a1 + 3) = a4;
  v56 = (uint64_t *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0);
  v57 = *v56;
  if (!*v56 || *(_BYTE *)(v57 + 16) != 26)
  {
    v57 = sub_22F10CF48(v57);
    v55 = *((_QWORD *)a1 + 2);
    v56 = (uint64_t *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0);
  }
  v58 = v55 & 0xFFFFFFFF1FFFFFFFLL | ((unint64_t)(a5 != 0) << 31) | ((unint64_t)((*(_QWORD *)(v57 + 16) & 0x300000000) != 0x200000000) << 29);
  *((_QWORD *)a1 + 2) = v58;
  v59 = *v56;
  if (!*v56 || *(_BYTE *)(v59 + 16) != 26)
  {
    v59 = sub_22F10CF48(v59);
    v58 = *((_QWORD *)a1 + 2);
  }
  *((_QWORD *)a1 + 2) = v58 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((*(_QWORD *)(v59 + 16) & 0x300000000) == 0) << 32);
}

uint64_t sub_22ED025A8(uint64_t *a1, unsigned __int8 *a2)
{
  unint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10[24];
  _QWORD v11[4];
  void *v12;
  uint64_t v13;
  unsigned __int8 *v14;

  v14 = a2;
  if ((sub_22ECFAD0C(a1, &v14, 0) & 1) != 0)
    return 1;
  sub_22ED026CC(a1, (int *)v14, v11);
  if ((v11[0] & 0x7FFFFFFF) == 4)
  {
    if ((sub_22F342700() & 1) == 0)
    {
      sub_22F0D5A50((uint64_t)v14);
      sub_22E8FCA40(a1, v5, 0x1337u, 0, (uint64_t)v10);
      v9 = *((_QWORD *)v14 + 1);
      v6 = sub_22E8901B8((uint64_t)v10, &v9);
      sub_22F0D4E74((uint64_t)v14);
      v8 = v7;
      sub_22E8906A0(v6, &v8);
      sub_22E903BEC(v10);
    }
    v3 = 1;
  }
  else
  {
    v3 = sub_22EBC4694(a1, v14, *(_QWORD *)(a1[11] + 16400), (uint64_t)v11, 3u, 0);
  }
  if ((v11[0] & 0x7FFFFFFF) == 2 && v12 != &v13)
    free(v12);
  return v3;
}

_QWORD *sub_22ED026CC@<X0>(_QWORD *result@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(result[11] + 16400);
  if (v4)
    v6 = (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 114294795;
  else
    v6 = 0;
  if (!v6)
    return sub_22ECFA94C(a3, result, a2, v5, 0, 1, 0, 0, 0, 0);
  v7 = *a2;
  v8 = a3[2] & 0xFFFFFFFC04000000;
  *(_DWORD *)a3 = 0;
  a3[6] = v5;
  a3[7] = 0;
  a3[3] = v3;
  a3[4] = v3;
  v9 = 536874752;
  if ((v7 & 0x300) != 0)
    v9 = 536874753;
  a3[1] = 0;
  a3[2] = v9 | v8;
  a3[5] = v5;
  return result;
}

uint64_t sub_22ED02780(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _DWORD v17[20];
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20[12];
  uint64_t v21[11];
  unsigned int v22[68];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v19 = a3;
  v17[19] = a5;
  if ((sub_22ECFAD0C(a1, &v18, 0) & 1) == 0)
  {
    if ((a5 & 0xFFFFFFFE) == 4)
      sub_22ED026CC(a1, (int *)v18, v13);
    else
      sub_22ED06388(v13, a1, v18);
    v7 = 0;
    switch(v13[0] & 0x7FFFFFFF)
    {
      case 0:
        goto LABEL_7;
      case 1:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45)
LABEL_7:
          v7 = &v14;
        else
          v7 = (uint64_t *)v17;
        goto LABEL_9;
      case 2:
      case 4:
        if ((sub_22F342700() & 1) == 0)
        {
          sub_22F0D5A50((uint64_t)v18);
          sub_22E8FCA40(a1, v8, 0x135Fu, 0, (uint64_t)v22);
          v20[0] = *((_QWORD *)v18 + 1);
          v9 = sub_22E8901B8((uint64_t)v22, v20);
          sub_22F0D4E74((uint64_t)v18);
          v21[0] = v10;
          v11 = sub_22E8906A0(v9, v21);
          sub_22E8901B8(v11, &v19);
          sub_22E903BEC(v22);
        }
        if ((v13[0] & 0x7FFFFFFF) == 2 && v15 != &v16)
          free(v15);
        return 1;
      default:
LABEL_9:
        __asm { BR              X11 }
        return result;
    }
  }
  return 1;
}

uint64_t sub_22ED02FD4(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = 0;
  v6 = sub_22ED02780(a1, a2, a3, (uint64_t)&v10, a5);
  v7 = v6;
  if ((v6 & 1) == 0 && (*(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) == 0)
  {
    if (*(_DWORD *)(a4 + 8) > 0x40u || (v8 = v12, v12 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v11);
    }
    else
    {
      *(_QWORD *)a4 = v11;
      *(_DWORD *)(a4 + 8) = v8;
    }
    *(_BYTE *)(a4 + 12) = v13;
  }
  if (v10 >= 2)
    sub_22EF53BC0(&v10);
  return v7;
}

uint64_t sub_22ED030A4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a1 + 10);
  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v2)
    return sub_22F1107D8(v3);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = v6 == 11;
  else
    v7 = 0;
  if (v7)
    return ((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (!v5 || v6 != 44)
    return v6 == 9;
  v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
  return (*(_BYTE *)(v8 + 74) & 1) != 0 || *(_QWORD *)(v8 + 128) > 7uLL;
}

uint64_t sub_22ED03140()
{
  uint64_t v0;
  unsigned int v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56[4];
  unint64_t v57;
  uint64_t v58[2];
  _QWORD v59[339];
  int v60;
  _OWORD v61[9];
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[5];
  __int128 v65;
  uint64_t v66;
  unsigned int v67;
  __int128 v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  _BYTE v72[32];
  uint64_t *v73;
  uint64_t v74;
  _QWORD v75[6];

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v2;
  v75[4] = *MEMORY[0x24BDAC8D0];
  v57 = v2;
  if ((*(_BYTE *)(v2 + 1) & 0x80) != 0)
    return v4;
  v5 = v3;
  v6 = v1;
  v7 = (_QWORD *)v0;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v9 + 16) & 0xFE00000u) >= 0x8180001 && v9 != 0 && *(_DWORD *)(v9 + 16) == 11)
  {
    v12 = sub_22EB19A28(v0, (_DWORD *)v2);
    v4 = v12;
    if ((v12 & 1) != 0)
      return v4;
    v4 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  if ((*(unsigned int (**)(unint64_t *, uint64_t))*v5)(v5, v8))
    return sub_22EB1A358(v7, v4, 0);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 45 || (*(_BYTE *)(v7[9] + 1) & 1) == 0)
  {
    if (!*((_BYTE *)v5 + 8))
    {
      (*(void (**)(uint64_t *__return_ptr, unint64_t *, _QWORD *, _QWORD, uint64_t))(*v5 + 8))(v58, v5, v7, v6, v8);
      sub_22F0D4E74(v4);
      v73 = v15;
      sub_22E8906A0((uint64_t)v58, (uint64_t *)&v73);
      sub_22E903BEC((unsigned int *)v58);
    }
    return v4;
  }
  v56[1] = (unint64_t *)off_24FAB9000;
  v56[2] = v5;
  v56[3] = (unint64_t *)v4;
  if (*((_BYTE *)v5 + 8))
  {
    if ((sub_22EE8B180(v7, v6) & 1) != 0)
      return v4;
  }
  else if (sub_22EE8B0B0((uint64_t)v7, v6, v8))
  {
    return v4;
  }
  v53 = v6;
  v73 = v75;
  v74 = 0x400000000;
  v70 = (uint64_t *)v72;
  v71 = 0x400000000;
  v16 = sub_22F114198(*(_QWORD *)(v14 + 24));
  v17 = sub_22EFD4DF4(v16);
  v20 = (uint64_t)v18 - v17;
  if (v18 == (uint64_t *)v17)
  {
    if ((*(_BYTE *)(v7[9] + 1) & 4) != 0)
    {
LABEL_97:
      if ((sub_22ED03960((uint64_t)v7, v6, (uint64_t *)&v57, v5, v8, v20 > 8, v70, v71) & 1) == 0)
      {
        v47 = v57;
        v48 = (uint64_t)v7;
        v49 = v6;
        goto LABEL_107;
      }
      goto LABEL_101;
    }
LABEL_93:
    v39 = v6;
    if ((_DWORD)v74 == 1)
    {
      v58[0] = *v73;
      if ((sub_22ED044E0(v7, v6, (uint64_t *)&v57, v5, v8, v20 > 8, v58) & 1) == 0)
        goto LABEL_106;
    }
    else
    {
      if ((_DWORD)v74)
        goto LABEL_99;
      if ((sub_22ED03960((uint64_t)v7, v6, (uint64_t *)&v57, v5, v8, v20 > 8, v70, v71) & 1) == 0)
        goto LABEL_106;
    }
LABEL_101:
    v4 = 1;
    goto LABEL_109;
  }
  v21 = (uint64_t *)v17;
  v22 = v18;
  v51 = (uint64_t)v18 - v17;
  v54 = 0;
  v52 = 1;
  do
  {
    v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = *(_DWORD *)(v23 + 28) & 0x7F;
    if (v24 <= 0x2F && ((1 << v24) & 0xC00000060000) != 0)
    {
      v23 = sub_22EFBAEA4(*v21 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = *(_DWORD *)(v23 + 28) & 0x7F;
    }
    if (v24 == 29)
      v26 = v23;
    else
      v26 = 0;
    if (v26)
    {
      if ((*(_BYTE *)(v7[9] + 1) & 4) == 0)
        goto LABEL_64;
      v23 = *(_QWORD *)(v26 + 48);
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = *(unsigned __int8 *)(v27 + 16) - 27 > 0xFFFFFFFD;
    else
      v28 = 0;
    if (!v28)
      v27 = sub_22F10CF48(v27);
    v29 = *(_QWORD *)(v27 + 24);
    v30 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
    if (!v30 || (v31 = *(_DWORD *)(v30 + 16), (v31 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_44;
      v30 = sub_22F10CF48(v30);
      if (!v30)
        goto LABEL_44;
      v31 = *(_DWORD *)(v30 + 16);
    }
    if ((v31 & 0x100000) != 0)
    {
      do
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v30)
        {
          v38 = *(_DWORD *)(v30 + 16);
          if ((v38 & 0xFE) == 0x28)
            continue;
        }
        v30 = sub_22F10CF48(v30);
        v38 = *(_DWORD *)(v30 + 16);
      }
      while ((v38 & 0x100000) != 0);
    }
    v29 = *(_QWORD *)(v30 + 32);
LABEL_44:
    v32 = (*(uint64_t (**)(unint64_t *, uint64_t))*v5)(v5, v29);
    if (v26 || v32)
    {
      if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23) + 160) & 3) == 1)
      {
        if (v26)
          goto LABEL_64;
        v33 = *v21;
        v34 = v71;
        v35 = &v70;
        if (v71 >= (unint64_t)HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v71;
        }
      }
      else
      {
        if (!v26 && (*(_BYTE *)(v7[9] + 1) & 4) != 0)
        {
          if (v54 > 0xF)
          {
            if (v52)
            {
              v37 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v37 + 8) & 0xF) != 0)
                v37 = (unint64_t)sub_22F10D2BC(v29);
              v52 = (v37 & 0xFFFFFFFFFFFFFFF0) == v54;
            }
            else
            {
              v52 = 0;
            }
          }
          else
          {
            v36 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v36 + 8) & 0xF) != 0)
              v36 = (unint64_t)sub_22F10D2BC(v29);
            v54 = v36 & 0xFFFFFFFFFFFFFFF0;
          }
        }
        v33 = *v21;
        v34 = v74;
        v35 = &v73;
        if (v74 >= (unint64_t)HIDWORD(v74))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v74;
        }
      }
      (*v35)[v34] = v33;
      ++*((_DWORD *)v35 + 2);
    }
LABEL_64:
    ++v21;
  }
  while (v21 != v22);
  v20 = v51;
  if ((*(_BYTE *)(v7[9] + 1) & 4) == 0)
    goto LABEL_93;
  if (v54 <= 0xF)
    goto LABEL_97;
  v39 = v6;
  if (!v52)
  {
LABEL_99:
    v50 = sub_22ED03DFC((uint64_t)v7, v39, v57, v5, v8, (uint64_t)&v73);
    goto LABEL_108;
  }
  v58[0] = (uint64_t)v59;
  v58[1] = 0x1000000000;
  v59[336] = v61;
  v59[337] = v61;
  v59[338] = 16;
  v60 = 0;
  v61[8] = 0u;
  v62 = v64;
  v63 = 0x400000000;
  v64[4] = (char *)&v65 + 8;
  v65 = 0u;
  v66 = 1;
  v67 = v6;
  v69 = 0;
  v68 = 0u;
  v40 = v57;
  if ((_DWORD)v74)
  {
    v41 = 0;
    v42 = 8 * v74;
    do
    {
      v43 = v73[v41 / 8];
      v44 = v43 & 0xFFFFFFFFFFFFFFFCLL;
      v45 = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFFCLL) + 28);
      if ((v45 & 0x7E) == 0x2E)
      {
        v44 = *(_QWORD *)(v44 + 64);
        v45 = *(_DWORD *)(v44 + 28);
      }
      if ((v45 & 0x7F) == 0x1D)
        sub_22ED096FC((uint64_t)v7, (uint64_t *)v44, v43, v19, v57, v54, (uint64_t)v58, 0, 1, 1);
      else
        sub_22ED08B24((uint64_t)v7, (uint64_t *)v44, v43, v19, v57, v54, (uint64_t)v58, 0, 1, 0, 1);
      v41 += 8;
    }
    while (v42 != v41);
  }
  v56[0] = 0;
  v46 = sub_22ED03FCC(v58, v7, v53, v56);
  if (v46 == 2)
  {
    v4 = sub_22ED03DFC((uint64_t)v7, v53, v40, v5, v8, (uint64_t)&v73);
LABEL_103:
    sub_22E9DC79C(v58);
  }
  else
  {
    if (v46 == 1)
    {
      if ((sub_22ED03960((uint64_t)v7, v53, (uint64_t *)&v57, v5, v8, v51 > 8, v70, v71) & 1) != 0)
        goto LABEL_91;
    }
    else if (!v46)
    {
      v55 = v56[0][1] & 3 | *v56[0];
      if ((sub_22ED044E0(v7, v53, (uint64_t *)&v57, v5, v8, v51 > 8, (uint64_t *)&v55) & 1) != 0)
      {
LABEL_91:
        v4 = 1;
        goto LABEL_103;
      }
    }
    sub_22E9DC79C(v58);
LABEL_106:
    v47 = v57;
    v48 = (uint64_t)v7;
    v49 = v39;
LABEL_107:
    v50 = sub_22ED03D54(v48, v49, v47, v5);
LABEL_108:
    v4 = v50;
  }
LABEL_109:
  if (v70 != (uint64_t *)v72)
    free(v70);
  if (v73 != v75)
    free(v73);
  return v4;
}

uint64_t sub_22ED03960(uint64_t a1, unsigned int a2, uint64_t *a3, _BYTE *a4, uint64_t a5, char a6, uint64_t *a7, int a8)
{
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  std::string *v28;
  std::string::size_type v29;
  void **v30;
  size_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int *v47;
  int v48;
  _QWORD v49[12];
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  void *__p;
  uint64_t v55;
  uint64_t v56;
  char v57;
  std::string v58;
  void *v59[2];
  uint64_t v60;
  _DWORD v61[6];
  void *v62;
  char v63;
  uint64_t v64[12];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  if (a8 != 1 || a4[8])
    return 0;
  v14 = *a7;
  v15 = *a7 & 0xFFFFFFFFFFFFFFFCLL;
  v16 = *(_DWORD *)(v15 + 28) & 0x7F;
  v21 = v16 > 0x2F;
  v17 = (1 << v16) & 0xC00000060000;
  if (v21 || v17 == 0)
    v19 = *a7 & 0xFFFFFFFFFFFFFFFCLL;
  else
    v19 = sub_22EFBAEA4(*a7 & 0xFFFFFFFFFFFFFFFCLL);
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v20)
    v21 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
  else
    v21 = 0;
  if (!v21)
    v20 = sub_22F10CF48(v20);
  v22 = *(_QWORD *)(v20 + 24);
  v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  if (!v23 || (v24 = *(_DWORD *)(v23 + 16), (v24 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_16;
    v23 = sub_22F10CF48(v23);
    if (!v23)
      goto LABEL_16;
    v24 = *(_DWORD *)(v23 + 16);
  }
  if ((v24 & 0x100000) != 0)
  {
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v23)
      {
        v48 = *(_DWORD *)(v23 + 16);
        if ((v48 & 0xFE) == 0x28)
          continue;
      }
      v23 = sub_22F10CF48(v23);
      v48 = *(_DWORD *)(v23 + 16);
    }
    while ((v48 & 0x100000) != 0);
  }
  v22 = *(_QWORD *)(v23 + 32);
LABEL_16:
  v66 = 0;
  v67 = v22;
  v65 = 0uLL;
  v64[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
  v64[1] = v25;
  sub_22F119374(&v67, &v65, (uint64_t)v64);
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(v64, a4, a1, a2, a5, v22);
  sub_22F0D5A50(*a3);
  v27 = v26;
  std::operator+<char>();
  v28 = std::string::append(&v58, ">(");
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)v59 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v60 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v60 >= 0)
    v30 = v59;
  else
    v30 = (void **)v59[0];
  if (v60 >= 0)
    v31 = HIBYTE(v60) & 0x7F;
  else
    v31 = (size_t)v59[1];
  sub_22E729148(v30, v31, v27, 0, (uint64_t)v61);
  v32 = sub_22E890748((uint64_t)v64, v61);
  sub_22F0D60E4(*a3);
  v34 = sub_22F141A3C(v33, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  v52 = 0;
  v53 = 0;
  v55 = 0;
  v56 = 0x100000000000000;
  v50 = v34 | ((unint64_t)v34 << 32);
  v51 = 0;
  __p = (void *)41;
  v57 = 0;
  sub_22E890748(v32, &v50);
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  if (v63 < 0)
    operator delete(v62);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  sub_22E903BEC((unsigned int *)v64);
  (*(void (**)(_QWORD *__return_ptr, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(v49, a4, a1, v19, v22);
  sub_22E903BEC((unsigned int *)v49);
  sub_22EE03478(a1);
  if (v35
    || (v36 = *a3,
        sub_22EFF605C(*a3),
        v64[0] = 0,
        sub_22E90AE54(a1, v37, v36, v64, v14),
        v38 = sub_22EBCE6E4(a1, *a3, v15, v19, a6),
        (v38 & 1) != 0))
  {
    v45 = 0;
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 88);
    v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
    v41 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v42 = (*(_DWORD *)(v38 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
    if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    {
      v43 = 0;
      v44 = 24;
    }
    else
    {
      v43 = *(_QWORD *)(a1 + 1296);
      if (HIDWORD(v43))
        v44 = 32;
      else
        v44 = 24;
    }
    v47 = (unsigned int *)sub_22E3CD3D4(v39 + 2032, v44, 3);
    *a3 = (uint64_t)sub_22F003694(v47, v41, 20, v40, 0, v43, v42);
    v45 = 1;
  }
  if (SHIBYTE(v66) < 0)
  {
    operator delete((void *)v65);
    if (v45)
      return 0;
  }
  else if (v45)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_22ED03D54(uint64_t a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int v11[24];

  if (((**(uint64_t (***)(_BYTE *, _QWORD))a4)(a4, *(_QWORD *)(a3 + 8)) & 1) == 0 && !a4[8])
  {
    (*(void (**)(unsigned int *__return_ptr, _BYTE *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 8))(v11, a4, a1, a2, *(_QWORD *)(a3 + 8));
    sub_22F0D4E74(a3);
    v10 = v8;
    sub_22E8906A0((uint64_t)v11, &v10);
    sub_22E903BEC(v11);
  }
  return sub_22EB1A358(a1, a3, 0);
}

uint64_t sub_22ED03DFC(uint64_t a1, unsigned int a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23[24];
  uint64_t v24;
  unsigned int v25[24];

  if (!a4[8])
  {
    v6 = a3;
    (*(void (**)(unsigned int *__return_ptr, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a4 + 40))(v25, a4, a1, a2, a5);
    sub_22F0D4E74(v6);
    v24 = v11;
    sub_22E8906A0((uint64_t)v25, &v24);
    sub_22E903BEC(v25);
    v12 = *(unsigned int *)(a6 + 8);
    if (!(_DWORD)v12)
      return v6;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v13) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = *(_DWORD *)(v14 + 28) & 0x7F;
      v19 = v15 > 0x2F;
      v16 = (1 << v15) & 0xC00000060000;
      if (!v19 && v16 != 0)
        v14 = sub_22EFBAEA4(*(_QWORD *)(*(_QWORD *)a6 + 8 * v13) & 0xFFFFFFFFFFFFFFFCLL);
      v18 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v18)
        v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
      else
        v19 = 0;
      if (!v19)
        v18 = sub_22F10CF48(v18);
      v20 = *(_QWORD *)(*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF0);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 16);
        if ((v21 & 0xFE) == 0x28)
          goto LABEL_23;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v20 = sub_22F10CF48(v20);
        if (v20)
          break;
      }
LABEL_19:
      (*(void (**)(unsigned int *__return_ptr, _BYTE *, uint64_t, unint64_t))(*(_QWORD *)a4 + 48))(v23, a4, a1, v14);
      sub_22E903BEC(v23);
      if (++v13 == v12)
        return v6;
    }
    v21 = *(_DWORD *)(v20 + 16);
LABEL_23:
    if ((v21 & 0x100000) != 0)
    {
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v20)
        {
          v22 = *(_DWORD *)(v20 + 16);
          if ((v22 & 0xFE) == 0x28)
            continue;
        }
        v20 = sub_22F10CF48(v20);
        v22 = *(_DWORD *)(v20 + 16);
      }
      while ((v22 & 0x100000) != 0);
    }
    goto LABEL_19;
  }
  return 1;
}

uint64_t sub_22ED03FCC(uint64_t *a1, _QWORD *a2, unsigned int a3, unint64_t **a4)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t **v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  char v30;
  unsigned int v31;
  unint64_t *v32;
  _QWORD **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unsigned int v43;
  unsigned int v44;
  _QWORD v45[4];
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  void *v49;
  uint64_t v50;
  _QWORD v51[18];

  v51[16] = *MEMORY[0x24BDAC8D0];
  v49 = v51;
  v50 = 0x1000000000;
  v8 = *((_DWORD *)a1 + 2);
  if (v8)
  {
    LODWORD(v9) = 0;
    v10 = *a1;
    v11 = 168 * v8;
    do
    {
      if (v9 >= HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v9) = v50;
      }
      *((_QWORD *)v49 + v9) = v10;
      LODWORD(v9) = v50 + 1;
      LODWORD(v50) = v50 + 1;
      v10 += 168;
      v11 -= 168;
    }
    while (v11);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = a2[9];
  if ((*(_BYTE *)(v12 + 68) & 0x20) != 0 && (*(_BYTE *)(v12 + 104) & 2) == 0)
  {
    v13 = sub_22E903070((uint64_t)a2, 1);
    v14 = v13 - 72;
    if (!v13)
      v14 = 0;
    if ((*(_WORD *)(v13 + 8) & 0x7Eu) - 52 >= 6)
      v15 = 0;
    else
      v15 = v14;
    if (!(_DWORD)v50)
    {
      v19 = *((_DWORD *)a1 + 2);
      v20 = *a1 + 168 * v19;
      *a4 = (unint64_t *)v20;
      goto LABEL_48;
    }
    v16 = (uint64_t **)v49;
    v17 = 8 * v50;
    while (1)
    {
      v18 = *v16;
      if (((*v16)[13] & 1) != 0 && *v18 && sub_22E9FE318((uint64_t)a2, v15, *v18) == 3)
        break;
      ++v16;
      v17 -= 8;
      if (!v17)
      {
        LODWORD(v9) = v50;
        goto LABEL_40;
      }
    }
    v21 = (uint64_t **)v49;
    v22 = (char *)v49 + 8 * v50;
    v23 = 8 * v50 - 8;
    while (1)
    {
      v24 = *v21;
      if (((*v21)[13] & 1) != 0 && *v24 && sub_22E9FE318((uint64_t)a2, v15, *v24) == 1)
        break;
      ++v21;
      v23 -= 8;
      if (v21 == (uint64_t **)v22)
        goto LABEL_39;
    }
    if (v21 + 1 != (uint64_t **)v22)
    {
      v25 = 1;
      v22 = (char *)v21;
      while (1)
      {
        v26 = v21[v25];
        if ((v26[13] & 1) == 0 || !*v26)
          goto LABEL_35;
        if (sub_22E9FE318((uint64_t)a2, v15, *v26) != 1)
          break;
LABEL_36:
        ++v25;
        v23 -= 8;
        if (!v23)
          goto LABEL_39;
      }
      v26 = v21[v25];
LABEL_35:
      *(_QWORD *)v22 = v26;
      v22 += 8;
      goto LABEL_36;
    }
    v22 = (char *)v21;
LABEL_39:
    v9 = (unint64_t)(v22 - (_BYTE *)v49) >> 3;
    LODWORD(v50) = v9;
  }
LABEL_40:
  v19 = *((_DWORD *)a1 + 2);
  v20 = *a1 + 168 * v19;
  *a4 = (unint64_t *)v20;
  if ((_DWORD)v9)
  {
    v27 = (char *)v49;
    v28 = 8 * v9;
    do
    {
      v29 = *(unint64_t **)v27;
      v30 = *(_BYTE *)(*(_QWORD *)v27 + 104);
      *(_BYTE *)(*(_QWORD *)v27 + 104) = v30 & 0xFD;
      if ((v30 & 1) != 0
        && (*a4 == (unint64_t *)(*a1 + 168 * *((unsigned int *)a1 + 2))
         || sub_22ED0DB6C((uint64_t)a2, v29, *a4, a3, *((_DWORD *)a1 + 741))))
      {
        *a4 = v29;
      }
      v27 += 8;
      v28 -= 8;
    }
    while (v28);
    v20 = (uint64_t)*a4;
    v19 = *((_DWORD *)a1 + 2);
  }
LABEL_48:
  if (v20 == *a1 + 168 * v19)
  {
    v41 = 1;
  }
  else
  {
    v46 = v48;
    v47 = 0x400000000;
    v44 = 4;
    v45[0] = v20;
    *(_BYTE *)(v20 + 104) |= 2u;
    v31 = 1;
    do
    {
      v32 = (unint64_t *)v45[--v31];
      v43 = v31;
      if ((_DWORD)v50)
      {
        v33 = (_QWORD **)v49;
        v34 = 8 * v50;
        do
        {
          v35 = (uint64_t)*v33;
          if (((*v33)[13] & 3) == 1)
          {
            v36 = sub_22ED0DB6C((uint64_t)a2, v32, *v33, a3, *((_DWORD *)a1 + 741));
            if ((v36 & 1) == 0)
            {
              v37 = v43;
              if (v43 >= (unint64_t)v44)
              {
                v36 = llvm::SmallVectorBase<unsigned int>::grow_pod();
                v37 = v43;
              }
              v45[v37] = v35;
              ++v43;
              *(_BYTE *)(v35 + 104) |= 2u;
              if (sub_22ED10A18(v36, *(_QWORD *)v35, *v32))
              {
                v38 = *(_QWORD *)v35;
                v39 = v47;
                if (v47 >= (unint64_t)HIDWORD(v47))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v39 = v47;
                }
                *((_QWORD *)v46 + v39) = v38;
                LODWORD(v47) = v47 + 1;
              }
              else
              {
                *a4 = (unint64_t *)(*a1 + 168 * *((unsigned int *)a1 + 2));
              }
            }
          }
          ++v33;
          v34 -= 8;
        }
        while (v34);
        v31 = v43;
      }
    }
    while (v31);
    v40 = *a4;
    if (*a4 == (unint64_t *)(*a1 + 168 * *((unsigned int *)a1 + 2)))
    {
      v41 = 2;
    }
    else if (*v40
           && (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)*v40 + 32))(*v40) + 82) & 0x40) != 0)
    {
      v41 = 3;
    }
    else
    {
      if ((_DWORD)v47)
        sub_22ED10C74(a2, a3, **a4, (unint64_t *)v46, v47);
      v41 = 0;
    }
    if (v46 != v48)
      free(v46);
  }
  if (v49 != v51)
    free(v49);
  return v41;
}

uint64_t sub_22ED044E0(_QWORD *a1, unsigned int a2, uint64_t *a3, _BYTE *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  unsigned int *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39[12];

  v14 = *a7;
  v15 = *a7 & 0xFFFFFFFFFFFFFFFCLL;
  v16 = *(_DWORD *)(v15 + 28) & 0x7F;
  v22 = v16 > 0x2F;
  v17 = (1 << v16) & 0xC00000060000;
  if (!v22 && v17 != 0)
    v15 = sub_22EFBAEA4(*a7 & 0xFFFFFFFFFFFFFFFCLL);
  v19 = *a3;
  sub_22EFF605C(*a3);
  v39[0] = 0;
  sub_22E90AE54((uint64_t)a1, v20, v19, v39, v14);
  v21 = *(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(unsigned __int8 *)(v21 + 16) - 27 > 0xFFFFFFFD;
  else
    v22 = 0;
  if (!v22)
    v21 = sub_22F10CF48(v21);
  v23 = *(_QWORD *)(v21 + 24);
  v24 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
  if (!v24 || (v25 = *(_DWORD *)(v24 + 16), (v25 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_14;
    v24 = sub_22F10CF48(v24);
    if (!v24)
      goto LABEL_14;
    v25 = *(_DWORD *)(v24 + 16);
  }
  if ((v25 & 0x100000) != 0)
  {
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v24)
      {
        v37 = *(_DWORD *)(v24 + 16);
        if ((v37 & 0xFE) == 0x28)
          continue;
      }
      v24 = sub_22F10CF48(v24);
      v37 = *(_DWORD *)(v24 + 16);
    }
    while ((v37 & 0x100000) != 0);
  }
  v23 = *(_QWORD *)(v24 + 32);
LABEL_14:
  if (!a4[9])
  {
    sub_22EE03478((uint64_t)a1);
    if (v33)
      return 1;
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, _QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a4 + 56))(v39, a4, a1, a2, a5, v23);
    sub_22F0D4E74(*a3);
    v38 = v36;
    sub_22E8906A0((uint64_t)v39, &v38);
    sub_22E903BEC((unsigned int *)v39);
  }
  v26 = sub_22EBCE6E4((uint64_t)a1, *a3, *a7 & 0xFFFFFFFFFFFFFFFCLL, v15, a6);
  if ((v26 & 1) != 0)
    return 1;
  v27 = a1[11];
  v28 = v26 & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v30 = (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
  if (a1[162] == a1[161])
  {
    v31 = 0;
    v32 = 24;
  }
  else
  {
    v31 = a1[162];
    if (HIDWORD(v31))
      v32 = 32;
    else
      v32 = 24;
  }
  v35 = (unsigned int *)sub_22E3CD3D4(v27 + 2032, v32, 3);
  sub_22F003694(v35, v29, 20, v28, 0, v31, v30);
  result = 0;
  *a3 = (uint64_t)v35;
  return result;
}

uint64_t sub_22ED0475C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, unsigned __int8 a9, char a10, char a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  int v65;
  char v66;
  char v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int *v131;
  uint64_t v132;
  int *v133;
  int v134;
  uint64_t v135;
  void *v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  void *v169[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  _QWORD v178[10];

  v22 = a9;
  v178[8] = *MEMORY[0x24BDAC8D0];
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(unsigned __int8 *)(v23 + 16);
  if (v23)
    v25 = (v24 - 27) > 0xFFFFFFFD;
  else
    v25 = 0;
  if (!v25)
  {
    v73 = a4;
    v23 = sub_22F10CF48(v23);
    a4 = v73;
    v22 = a9;
    v24 = *(unsigned __int8 *)(v23 + 16);
  }
  if (v24 == 26)
    v26 = v23;
  else
    v26 = 0;
  v27 = (*(_DWORD *)(a2 + 28) & 0x7F) != 0x37 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
  if (v27)
  {
    v41 = *(_WORD *)(a2 + 80) & 0x7F;
    v42 = -40;
    if (v41 > 0x46)
    {
      if (v41 != 83)
      {
        if (v41 == 71)
        {
          v42 = -56;
          goto LABEL_72;
        }
        if (v41 == 81)
          goto LABEL_72;
        goto LABEL_67;
      }
    }
    else
    {
      if (v41 > 0x18)
        goto LABEL_66;
      if (v41 != 16)
      {
        if (((1 << v41) & 0x1066) != 0)
          goto LABEL_72;
        if (v41 != 24)
        {
LABEL_66:
          if (v41 == 70)
          {
            v42 = -64;
            goto LABEL_72;
          }
LABEL_67:
          v55 = v41 - 52;
          v27 = v41 - 33 >= 5;
          v56 = -48;
          if (!v27)
            v56 = -64;
          if (v55 >= 6)
            v42 = v56;
          else
            v42 = -72;
          goto LABEL_72;
        }
      }
      v42 = -48;
    }
LABEL_72:
    v57 = *(_QWORD *)(a2 + 72 + v42 + 16);
    v58 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
    if ((v57 & 4) != 0)
      v58 = (_QWORD *)*v58;
    if (v58)
      v59 = (unint64_t)(v58 - 8);
    else
      v59 = 0;
    return sub_22ED05760(a1, a2, a3, v59, 0, 0, a5, a6, a7, a8, v22, a13, a14, a15);
  }
  v158 = a4;
  v161 = v26;
  v163 = v22;
  v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  result = sub_22E3BA850(a7 + 2704, (const void *)(v28 | a15));
  if (!v30)
    return result;
  v31 = (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37 ? a2 : 0;
  if (v31)
  {
    if ((*(_BYTE *)(v31 + 83) & 2) != 0
      && (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31) + 82) & 0x40) != 0)
    {
      result = sub_22EFD83B0(v31, (int *)&v167);
      if ((result & 1) != 0)
        return result;
    }
  }
  v167 = 0;
  v165 = 3;
  v166 = 0;
  v164 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v166, (int *)&v164, (__int16 *)(a1 + 1693), &v167, &v165);
  v32 = *(unsigned int *)(a1 + 3696);
  v33 = v32 - 2;
  v34 = *(_QWORD *)(a1 + 3688);
  v35 = *(_DWORD *)(v34 + 576 * (v32 - 2));
  if (v35 == 5)
  {
    *(_BYTE *)(v34 + 576 * v32 - 4) = *(_BYTE *)(v34 + 576 * v33 + 572);
    v36 = 1;
  }
  else if (v35 == 2)
  {
    *(_BYTE *)(v34 + 576 * v32 - 4) = 1;
    v36 = *(_BYTE *)(v34 + 576 * v33 + 573) != 0;
  }
  else
  {
    v36 = 0;
    *(_BYTE *)(v34 + 576 * v32 - 4) = 0;
  }
  v162 = (uint64_t *)a5;
  v37 = v34 + 576 * v32;
  *(_BYTE *)(v37 - 3) = v36;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v37 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v37 - 496));
  }
  v160 = a7;
  if (*(_DWORD *)(a7 + 2964) == 1)
  {
    v38 = (_QWORD *)(*(_QWORD *)(*v162 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (a6 < 2)
    {
      if ((*(_BYTE *)(*v38 + 17) & 4) != 0
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
      {
        goto LABEL_81;
      }
      v40 = 0;
    }
    else
    {
      v39 = *v38;
      if ((*(_BYTE *)(*v38 + 17) & 4) != 0)
        goto LABEL_81;
      v40 = *(_QWORD *)(v162[1] + 8);
      if (v40 >= 0x10)
      {
        v60 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v60 + 17) & 4) != 0
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        {
          goto LABEL_81;
        }
        v43 = 0;
LABEL_44:
        v44 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v44 || *(_BYTE *)(v44 + 16) != 26)
          v44 = sub_22F10CF48(v44);
        v45 = *(_QWORD *)(v44 + 16);
        if ((v45 & 0x3FFFC000000000) == 0)
          return sub_22EB48E64(a1);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44)
          goto LABEL_54;
        v156 = v40;
        v46 = (uint64_t *)(*(_QWORD *)(v44 + 40) & 0xFFFFFFFFFFFFFFF0);
        v47 = *v46;
        if (!*v46 || (v48 = *(_DWORD *)(v47 + 16), (v48 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          {
LABEL_52:
            v49 = *(_QWORD *)(v46[1] & 0xFFFFFFFFFFFFFFF0);
            v40 = v156;
            if (*(_QWORD *)(v38[1] & 0xFFFFFFFFFFFFFFF0) == v49)
              goto LABEL_81;
            v45 = *(_QWORD *)(v44 + 16);
LABEL_54:
            if ((v45 & 0x3FFF8000000000) != 0)
              v50 = v43;
            else
              v50 = 1;
            if ((v50 & 1) != 0)
              return sub_22EB48E64(a1);
            v51 = v40 & 0xFFFFFFFFFFFFFFF0;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) != 44)
              return sub_22EB48E64(a1);
            v52 = (uint64_t *)(*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF0);
            v53 = *v52;
            if (!*v52 || (v54 = *(_DWORD *)(v53 + 16), (v54 & 0xFE) != 0x28))
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                goto LABEL_62;
              v53 = sub_22F10CF48(v53);
              if (!v53)
                goto LABEL_62;
              v54 = *(_DWORD *)(v53 + 16);
            }
            if ((v54 & 0x100000) != 0)
            {
              do
              {
                v53 = *(_QWORD *)(*(_QWORD *)(v53 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v53)
                {
                  v119 = *(_DWORD *)(v53 + 16);
                  if ((v119 & 0xFE) == 0x28)
                    continue;
                }
                v53 = sub_22F10CF48(v53);
                v119 = *(_DWORD *)(v53 + 16);
              }
              while ((v119 & 0x100000) != 0);
            }
            v52 = (uint64_t *)(*(_QWORD *)(v53 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_62:
            if (*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v52[1] & 0xFFFFFFFFFFFFFFF0))
              return sub_22EB48E64(a1);
            goto LABEL_81;
          }
          v155 = v44;
          v47 = sub_22F10CF48(v47);
          if (!v47)
          {
            v44 = v155;
            goto LABEL_52;
          }
          v48 = *(_DWORD *)(v47 + 16);
          v44 = v155;
        }
        if ((v48 & 0x100000) != 0)
        {
          do
          {
            v117 = v44;
            v47 = *(_QWORD *)(*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v47 || (v118 = *(_DWORD *)(v47 + 16), (v118 & 0xFE) != 0x28))
            {
              v47 = sub_22F10CF48(v47);
              v118 = *(_DWORD *)(v47 + 16);
            }
            v44 = v117;
          }
          while ((v118 & 0x100000) != 0);
        }
        v46 = (uint64_t *)(*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_52;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        goto LABEL_81;
    }
    v43 = 1;
    goto LABEL_44;
  }
LABEL_81:
  v61 = sub_22ED060FC(v160, a6, a13, a14);
  v62 = v61;
  *(_QWORD *)v61 = a2;
  *(_QWORD *)(v61 + 8) = a3;
  v63 = *(_BYTE *)(v61 + 104) | 1;
  *(_BYTE *)(v61 + 104) = v63;
  v64 = *(_DWORD *)(v160 + 2968);
  if (v64)
  {
    if ((*(_QWORD *)(a2 + 40) & 7) == 6)
      v65 = *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
    else
      v65 = 0;
    LOBYTE(v64) = v65 != v64;
  }
  if (a15 == 1)
    LOBYTE(v64) = v64 | 2;
  v66 = v63 & 0x83 | (32 * v64);
  if (a12)
    v67 = 16;
  else
    v67 = 0;
  *(_BYTE *)(v61 + 104) = v66 | v67;
  *(_DWORD *)(v61 + 108) = a6;
  if ((a10 & 1) == 0)
  {
    v68 = *(_WORD *)(a2 + 80) & 0x7F;
    switch(v68)
    {
      case '8':
        v69 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 160);
        break;
      case '7':
        v70 = *(_QWORD *)(a2 + 112);
        v71 = *(_QWORD *)(v70 + 80);
        if ((v71 & 0x4000000000000000) != 0)
          v69 = *(_QWORD *)(v70 + 16 * ((v71 >> 61) & 1) + 168);
        else
          v69 = v71 >> 63;
        break;
      case '5':
        v69 = *(_QWORD *)(a2 + 168);
        break;
      default:
        goto LABEL_101;
    }
    if ((v69 & 3) == 1)
    {
      *(_BYTE *)(v62 + 104) &= ~1u;
      v72 = 10;
      goto LABEL_224;
    }
  }
LABEL_101:
  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 84) & 0x10) != 0
    && sub_22E47DA60(a2))
  {
    sub_22EFC8E88(a2);
    v75 = *v74;
    v76 = *((unsigned int *)v74 + 2);
    if ((_DWORD)v76 && *(_WORD *)(*v75 + 32) != 327)
    {
      v77 = 8 * v76 - 8;
      v78 = *v74;
      do
      {
        v79 = v78[1];
        ++v78;
        v77 -= 8;
      }
      while (*(_WORD *)(v79 + 32) != 327);
    }
    do
    {
      v81 = *v75++;
      v80 = v81;
    }
    while (*(_WORD *)(v81 + 32) != 327);
    if (*(_DWORD *)(v80 + 36) != 7
      || ((v82 = *(int **)(v80 + 40), v83 = *v82, v84 = *(int *)((char *)v82 + 3), v83 == 1634100580)
        ? (v85 = v84 == 1953264993)
        : (v85 = 0),
          !v85))
    {
      *(_BYTE *)(v62 + 104) &= ~1u;
      v72 = 13;
      goto LABEL_224;
    }
  }
  if (!v31)
    goto LABEL_214;
  v86 = v31 + 72;
  v87 = *(_WORD *)(v31 + 80) & 0x7F;
  v88 = -40;
  if (v87 > 0x46)
  {
    if (v87 == 83)
      goto LABEL_131;
    if (v87 == 71)
    {
      v88 = -56;
      goto LABEL_131;
    }
    if (v87 != 81)
    {
LABEL_126:
      v89 = v87 - 52;
      v27 = v87 - 33 >= 5;
      v90 = -48;
      if (!v27)
        v90 = -64;
      if (v89 >= 6)
        v88 = v90;
      else
        v88 = -72;
    }
  }
  else
  {
    if (v87 > 0x18)
      goto LABEL_125;
    if (v87 == 16)
    {
LABEL_118:
      v88 = -48;
      goto LABEL_131;
    }
    if (((1 << v87) & 0x1066) == 0)
    {
      if (v87 == 24)
        goto LABEL_118;
LABEL_125:
      if (v87 == 70)
      {
        v88 = -64;
        goto LABEL_131;
      }
      goto LABEL_126;
    }
  }
LABEL_131:
  v91 = *(_QWORD *)(v86 + v88 + 16);
  v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFF8);
  if ((v91 & 4) != 0)
    v92 = (_QWORD *)*v92;
  if (v92)
    v93 = (unint64_t)(v92 - 8);
  else
    v93 = 0;
  v94 = *(_QWORD *)(v93 + 48);
  if (v94)
    v95 = v94 & 0xFFFFFFFFFFFFFFF0;
  else
    v95 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v93);
  if (a6 == 1)
  {
    if (sub_22EFD84E0(v31))
    {
      v96 = *(_QWORD *)(*v162 + 8);
      if (*(_QWORD *)(*(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v96 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
        || (sub_22F0D5A50(*v162), sub_22EAAB1B8(a1, v97, v96, v95)))
      {
        *(_BYTE *)(v62 + 104) &= ~1u;
        v72 = 5;
        goto LABEL_224;
      }
    }
  }
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) == 0x2F)
    v98 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  else
    v98 = 0;
  if (a6 != 1 || !v98)
    goto LABEL_209;
  v99 = *(_QWORD *)(*(_QWORD *)(v31 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v99 || *(_BYTE *)(v99 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v99 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_209;
    v99 = sub_22F10CF48(v99);
    if (!v99)
      goto LABEL_209;
  }
  if ((*(_DWORD *)(v99 + 20) & 0x3FFFC0) == 0)
    goto LABEL_209;
  v100 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v31 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    goto LABEL_209;
  v101 = sub_22F10ACF8(v100);
  v102 = *(_WORD *)(v31 + 80) & 0x7F;
  v103 = -40;
  if (v102 > 0x46)
  {
    if (v102 != 83)
    {
      if (v102 == 71)
      {
        v103 = -56;
        goto LABEL_169;
      }
      if (v102 == 81)
        goto LABEL_169;
LABEL_164:
      v104 = v102 - 52;
      v27 = v102 - 33 >= 5;
      v105 = -48;
      if (!v27)
        v105 = -64;
      if (v104 >= 6)
        v103 = v105;
      else
        v103 = -72;
    }
  }
  else
  {
    if (v102 > 0x18)
      goto LABEL_163;
    if (v102 != 16)
    {
      if (((1 << v102) & 0x1066) != 0)
        goto LABEL_169;
      if (v102 != 24)
      {
LABEL_163:
        if (v102 == 70)
        {
          v103 = -64;
          goto LABEL_169;
        }
        goto LABEL_164;
      }
    }
    v103 = -48;
  }
LABEL_169:
  v106 = *(_QWORD *)(v86 + v103 + 16);
  v107 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF8);
  if ((v106 & 4) != 0)
    v107 = (_QWORD *)*v107;
  if (v107)
    v108 = (uint64_t)(v107 - 8);
  else
    v108 = 0;
  v109 = sub_22EF6477C(*(_QWORD *)(a1 + 88), v108);
  v110 = *(_QWORD *)(v98 + 16);
  v111 = (_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF8);
  if ((v110 & 4) != 0)
    v111 = (_QWORD *)*v111;
  if (v111)
    v112 = (uint64_t)(v111 - 8);
  else
    v112 = 0;
  v113 = sub_22EF6477C(*(_QWORD *)(a1 + 88), v112);
  sub_22EFF605C(*v162);
  v115 = v114;
  v116 = *(_QWORD *)(*(_QWORD *)((v101 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v116 == *(_QWORD *)(*(_QWORD *)((v109 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_182:
    if (*(_QWORD *)(*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == v116
      || sub_22EAAB1B8(a1, v115, v113, v101))
    {
      *(_BYTE *)(v62 + 104) &= ~1u;
      v72 = 12;
      goto LABEL_224;
    }
    goto LABEL_209;
  }
  if (sub_22EAAB1B8(a1, v114, v101, v109))
  {
    v116 = *(_QWORD *)(*(_QWORD *)((v101 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_182;
  }
LABEL_209:
  v120 = sub_22E46BB88(v31) >> 11;
  v121 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v121 & 8) != 0)
    v122 = *(_DWORD *)((v121 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v122 = 0;
  if (!sub_22E95F2F0(v120, v122 >> 11))
  {
    *(_BYTE *)(v62 + 104) &= ~1u;
    *(_BYTE *)(v62 + 105) = 14;
  }
LABEL_214:
  v123 = *(_QWORD *)(v161 + 16);
  v124 = (unsigned __int16)(v123 >> 38);
  if (a6)
    v125 = v163;
  else
    v125 = 0;
  if ((v123 & 0x800000000000000) == 0 && a6 + v125 > v124 && sub_22ED06298(v163, a2))
  {
    *(_WORD *)(v62 + 104) = *(_BYTE *)(v62 + 104) & 0xFE;
    return sub_22EB48E64(a1);
  }
  if (a6 < sub_22EFC0EB8(a2) && (v163 & 1) == 0)
  {
    *(_BYTE *)(v62 + 104) &= ~1u;
    v72 = 1;
    goto LABEL_224;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
  {
    v154 = sub_22E903070(a1, 1);
    if (v154)
    {
      if ((*(_WORD *)(v154 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA
        && (*(_BYTE *)(v154 - 43) & 2) == 0
        && !sub_22E9FE318(a1, v154 - 72, a2))
      {
        *(_BYTE *)(v62 + 104) &= ~1u;
        v72 = 8;
        goto LABEL_224;
      }
    }
  }
  v126 = *(_QWORD *)(a2 + 56);
  if ((v126 & 4) != 0 && *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF8) + 40))
  {
    v167 = 0;
    v168 = 0;
    v169[0] = &v170;
    v169[1] = (void *)0x400000000;
    LOBYTE(v176) = 0;
    *((_QWORD *)&v176 + 1) = v178;
    v177 = 0x400000000;
    if ((sub_22E9F3C18(a1) & 1) != 0 || !(_BYTE)v176)
    {
      *(_BYTE *)(v62 + 104) &= ~1u;
      *(_BYTE *)(v62 + 105) = 15;
      if (*((_QWORD **)&v176 + 1) != v178)
        free(*((void **)&v176 + 1));
      if (v169[0] != &v170)
        free(v169[0]);
      return sub_22EB48E64(a1);
    }
    if (*((_QWORD **)&v176 + 1) != v178)
      free(*((void **)&v176 + 1));
    if (v169[0] != &v170)
      free(v169[0]);
  }
  if (!a6)
  {
LABEL_260:
    v153 = sub_22ED0649C(a1, a2, *(_DWORD *)(v160 + 2960), (uint64_t)v162, a6);
    if (v153)
    {
      *(_BYTE *)(v62 + 104) &= ~1u;
      *(_BYTE *)(v62 + 105) = 9;
      *(_QWORD *)(v62 + 120) = v153;
    }
    return sub_22EB48E64(a1);
  }
  v127 = 0;
  v128 = 1;
  v129 = 1;
  v157 = a6;
  v159 = v124;
  while (1)
  {
    if (a15 == 1)
      v130 = v128;
    else
      v130 = v129 - 1;
    v131 = (unsigned int *)(*(_QWORD *)(v62 + 48) + 152 * v130);
    if ((*v131 & 0x7FFFFFFF) != 5)
      goto LABEL_255;
    if (v129 - 1 < v124)
      break;
    *v131 = *v131 & 0x80000000 | 3;
LABEL_255:
    v127 = v129;
    v25 = a6 > v129++;
    --v128;
    if (!v25)
      goto LABEL_260;
  }
  sub_22ED06388(&v167, a1, v162[v127]);
  v132 = *(_QWORD *)(v62 + 48);
  v133 = (int *)(v132 + 152 * v130);
  v134 = *v133;
  if ((*v133 & 0x7FFFFFFF) == 2)
  {
    v135 = v132 + 152 * v130;
    v136 = *(void **)(v135 + 32);
    if (v136 != (void *)(v135 + 48))
    {
      free(v136);
      v134 = *v133;
    }
  }
  v137 = v134 & 0x80000000;
  v138 = v167 & 0x7FFFFFFF;
  *v133 = v167 & 0x7FFFFFFF | v137;
  *v133 = v167 & 0x80000000 | v138;
  *(_QWORD *)(v132 + 152 * v130 + 8) = v168;
  switch(v138)
  {
    case 0:
      v139 = v132 + 152 * v130;
      v140 = *(_OWORD *)v169;
      v141 = v170;
      v142 = v171;
      *(_QWORD *)(v139 + 64) = v172;
      *(_OWORD *)(v139 + 48) = v142;
      goto LABEL_250;
    case 1:
      v143 = v132 + 152 * v130;
      *(_OWORD *)(v143 + 16) = *(_OWORD *)v169;
      v144 = v170;
      v145 = v171;
      v146 = v173;
      *(_OWORD *)(v143 + 64) = v172;
      *(_OWORD *)(v143 + 80) = v146;
      *(_OWORD *)(v143 + 32) = v144;
      *(_OWORD *)(v143 + 48) = v145;
      v147 = v174;
      v148 = v175;
      v149 = v176;
      *(_QWORD *)(v143 + 144) = v177;
      *(_OWORD *)(v143 + 112) = v148;
      *(_OWORD *)(v143 + 128) = v149;
      *(_OWORD *)(v143 + 96) = v147;
      break;
    case 2:
      v150 = v132 + 152 * v130;
      v151 = *(_OWORD *)v169;
      *(_QWORD *)(v150 + 32) = v150 + 48;
      v152 = v150 + 32;
      *(_OWORD *)(v152 - 16) = v151;
      *(_QWORD *)(v152 + 8) = 0x400000000;
      if (DWORD2(v170))
        sub_22E8BB370(v152, (uint64_t)&v170);
      break;
    case 4:
      v140 = *(_OWORD *)v169;
      v141 = v170;
      v139 = v132 + 152 * v130;
LABEL_250:
      *(_OWORD *)(v139 + 16) = v140;
      *(_OWORD *)(v139 + 32) = v141;
      break;
    default:
      break;
  }
  LODWORD(v124) = v159;
  if ((v167 & 0x7FFFFFFF) == 2 && (__int128 *)v170 != &v171)
    free((void *)v170);
  a6 = v157;
  if ((*(_DWORD *)(*(_QWORD *)(v62 + 48) + 152 * v130) & 0x7FFFFFFF) != 4)
    goto LABEL_255;
  *(_BYTE *)(v62 + 104) &= ~1u;
  v72 = 2;
LABEL_224:
  *(_BYTE *)(v62 + 105) = v72;
  return sub_22EB48E64(a1);
}

uint64_t sub_22ED05760(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, __int16 a6, uint64_t a7, unint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  char v44;
  _BOOL4 v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  void *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  void *v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  int v95;
  int v96;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  void *v117[2];
  void *v118[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  uint64_t v125;
  _QWORD v126[10];

  v126[8] = *MEMORY[0x24BDAC8D0];
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v22)
    v24 = (v23 - 27) > 0xFFFFFFFD;
  else
    v24 = 0;
  if (!v24)
  {
    v22 = sub_22F10CF48(v22);
    v23 = *(unsigned __int8 *)(v22 + 16);
  }
  if (v23 == 26)
    v25 = v22;
  else
    v25 = 0;
  v110 = v25;
  v26 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  result = sub_22E3BA850(a9 + 2704, (const void *)(v26 | a14));
  if (v28)
  {
    if ((*(_BYTE *)(a2 + 83) & 2) == 0
      || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 82) & 0x40) == 0
      || (result = sub_22EFD3F30(a2), (result & 1) == 0))
    {
      v108 = a4;
      v115 = 0;
      v113 = 3;
      v114 = 0;
      v112 = *(unsigned int *)(a1 + 1704);
      sub_22EB4DDB8(a1 + 3688, &v114, (int *)&v112, (__int16 *)(a1 + 1693), &v115, &v113);
      v29 = *(unsigned int *)(a1 + 3696);
      v30 = v29 - 2;
      v31 = *(_QWORD *)(a1 + 3688);
      v32 = *(_DWORD *)(v31 + 576 * (v29 - 2));
      v109 = a7;
      if (v32 == 5)
      {
        *(_BYTE *)(v31 + 576 * v29 - 4) = *(_BYTE *)(v31 + 576 * v30 + 572);
        v33 = 1;
      }
      else if (v32 == 2)
      {
        *(_BYTE *)(v31 + 576 * v29 - 4) = 1;
        v33 = *(_BYTE *)(v31 + 576 * v30 + 573) != 0;
      }
      else
      {
        v33 = 0;
        *(_BYTE *)(v31 + 576 * v29 - 4) = 0;
      }
      v34 = v31 + 576 * v29;
      *(_BYTE *)(v34 - 3) = v33;
      *(_WORD *)(a1 + 1693) = 0;
      if (*(_DWORD *)(a1 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v34 - 560));
        sub_22EAEAE08(a1 + 1840, (uint64_t *)(v34 - 496));
      }
      v35 = sub_22ED060FC(a9, (int)a8 + 1, a12, a13);
      v36 = v35;
      *(_QWORD *)v35 = a2;
      *(_QWORD *)(v35 + 8) = a3;
      v37 = *(_DWORD *)(a9 + 2968);
      if (v37)
      {
        if ((*(_QWORD *)(a2 + 40) & 7) == 6)
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
        else
          v38 = 0;
        v39 = a14;
        LOBYTE(v37) = v38 != v37;
      }
      else
      {
        v39 = a14;
      }
      if (v39 == 1)
        LOBYTE(v37) = v37 | 2;
      *(_BYTE *)(v35 + 104) = *(_BYTE *)(v35 + 104) & 0x93 | (32 * v37);
      *(_DWORD *)(v35 + 108) = a8;
      v40 = *(_QWORD *)(v110 + 16);
      v111 = (unsigned __int16)(v40 >> 38);
      if (a8)
        v41 = a11;
      else
        v41 = 0;
      if ((v40 & 0x800000000000000) == 0 && a8 + v41 > v111 && sub_22ED06298(a11, a2))
      {
        *(_WORD *)(v36 + 104) = *(_BYTE *)(v36 + 104) & 0xFE;
        return sub_22EB48E64(a1);
      }
      v42 = sub_22EFC0EB8(a2);
      v43 = *(_BYTE *)(v36 + 104);
      if (a8 < v42 && (a11 & 1) == 0)
      {
        *(_BYTE *)(v36 + 104) = v43 & 0xFE;
        v44 = 1;
LABEL_52:
        *(_BYTE *)(v36 + 105) = v44;
        return sub_22EB48E64(a1);
      }
      *(_BYTE *)(v36 + 104) = v43 | 1;
      if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
        || (*(_QWORD *)(a2 + 40) & 7) == 6
        && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4
        || a5 <= 0xF)
      {
        *(_BYTE *)(v36 + 104) |= 8u;
      }
      else
      {
        v45 = v39 == 1;
        sub_22ED02038((unsigned int *)&v115, a1, *(_DWORD *)(a9 + 2960), a5, a6, a2, v108);
        v46 = *(_QWORD *)(v36 + 48);
        v47 = (int *)(v46 + 152 * (v39 == 1));
        v48 = *v47;
        if ((*v47 & 0x7FFFFFFF) == 2)
        {
          v49 = v46 + 152 * v45;
          v50 = *(void **)(v49 + 32);
          if (v50 != (void *)(v49 + 48))
          {
            free(v50);
            v48 = *v47;
          }
        }
        v51 = v48 & 0x80000000;
        v52 = v115 & 0x7FFFFFFF;
        *v47 = v115 & 0x7FFFFFFF | v51;
        *v47 = v115 & 0x80000000 | v52;
        *(_QWORD *)(v46 + 152 * v45 + 8) = v116;
        switch(v52)
        {
          case 0:
            v53 = v46 + 152 * v45;
            v54 = *(_OWORD *)v117;
            v55 = *(_OWORD *)v118;
            v56 = v119;
            *(_QWORD *)(v53 + 64) = v120;
            *(_OWORD *)(v53 + 48) = v56;
            goto LABEL_46;
          case 1:
            v98 = v46 + 152 * v45;
            *(_OWORD *)(v98 + 16) = *(_OWORD *)v117;
            v99 = *(_OWORD *)v118;
            v100 = v119;
            v101 = v121;
            *(_OWORD *)(v98 + 64) = v120;
            *(_OWORD *)(v98 + 80) = v101;
            *(_OWORD *)(v98 + 32) = v99;
            *(_OWORD *)(v98 + 48) = v100;
            v102 = v122;
            v103 = v123;
            v104 = *(_OWORD *)v124;
            *(_QWORD *)(v98 + 144) = v125;
            *(_OWORD *)(v98 + 112) = v103;
            *(_OWORD *)(v98 + 128) = v104;
            *(_OWORD *)(v98 + 96) = v102;
            break;
          case 2:
            v105 = v46 + 152 * v45;
            v106 = *(_OWORD *)v117;
            *(_QWORD *)(v105 + 32) = v105 + 48;
            v107 = v105 + 32;
            *(_OWORD *)(v107 - 16) = v106;
            *(_QWORD *)(v107 + 8) = 0x400000000;
            if (LODWORD(v118[1]))
              sub_22E8BB370(v107, (uint64_t)v118);
            break;
          case 4:
            v54 = *(_OWORD *)v117;
            v55 = *(_OWORD *)v118;
            v53 = v46 + 152 * v45;
LABEL_46:
            *(_OWORD *)(v53 + 16) = v54;
            *(_OWORD *)(v53 + 32) = v55;
            break;
          default:
            break;
        }
        v39 = a14;
        if ((v115 & 0x7FFFFFFF) == 2 && v118[0] != &v119)
          free(v118[0]);
        if ((*(_DWORD *)(*(_QWORD *)(v36 + 48) + 152 * v45) & 0x7FFFFFFF) == 4)
        {
LABEL_51:
          *(_BYTE *)(v36 + 104) &= ~1u;
          v44 = 2;
          goto LABEL_52;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0
        && (v57 = sub_22E903070(a1, 1)) != 0
        && (*(_WORD *)(v57 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA
        && !sub_22E9FE318(a1, v57 - 72, a2))
      {
        *(_BYTE *)(v36 + 104) &= ~1u;
        v44 = 8;
      }
      else
      {
        v58 = *(_QWORD *)(a2 + 56);
        if ((v58 & 4) != 0 && *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 40))
        {
          v115 = 0;
          v116 = 0;
          v117[0] = v118;
          v117[1] = (void *)0x400000000;
          LOBYTE(v124[0]) = 0;
          v124[1] = v126;
          v125 = 0x400000000;
          if ((sub_22E9F3C18(a1) & 1) != 0 || !LOBYTE(v124[0]))
          {
            *(_BYTE *)(v36 + 104) &= ~1u;
            *(_BYTE *)(v36 + 105) = 15;
            if (v124[1] != v126)
              free(v124[1]);
            if (v117[0] != v118)
              free(v117[0]);
            return sub_22EB48E64(a1);
          }
          if (v124[1] != v126)
            free(v124[1]);
          v39 = a14;
          if (v117[0] != v118)
            free(v117[0]);
        }
        if (a8)
        {
          v59 = 0;
          v60 = 0;
          do
          {
            v61 = v59;
            v59 = v60 + 1;
            if (v39 == 1)
              v62 = 0;
            else
              v62 = v60 + 1;
            v63 = (unsigned int *)(*(_QWORD *)(v36 + 48) + 152 * v62);
            if ((*v63 & 0x7FFFFFFF) == 5)
            {
              if (v60 >= v111)
              {
                *v63 = *v63 & 0x80000000 | 3;
              }
              else
              {
                sub_22ED06388(&v115, a1, *(_QWORD *)(a7 + 8 * v61));
                v64 = *(_QWORD *)(v36 + 48);
                v65 = (int *)(v64 + 152 * v62);
                v66 = *v65;
                if ((*v65 & 0x7FFFFFFF) == 2)
                {
                  v67 = v64 + 152 * v62;
                  v68 = *(void **)(v67 + 32);
                  if (v68 != (void *)(v67 + 48))
                  {
                    free(v68);
                    v66 = *v65;
                  }
                }
                v69 = v66 & 0x80000000;
                v70 = v115 & 0x7FFFFFFF;
                *v65 = v115 & 0x7FFFFFFF | v69;
                *v65 = v115 & 0x80000000 | v70;
                *(_QWORD *)(v64 + 152 * v62 + 8) = v116;
                switch(v70)
                {
                  case 0:
                    v71 = v64 + 152 * v62;
                    v72 = *(_OWORD *)v117;
                    v73 = *(_OWORD *)v118;
                    v74 = v119;
                    *(_QWORD *)(v71 + 64) = v120;
                    *(_OWORD *)(v71 + 48) = v74;
                    goto LABEL_83;
                  case 1:
                    v75 = v64 + 152 * v62;
                    *(_OWORD *)(v75 + 16) = *(_OWORD *)v117;
                    v76 = *(_OWORD *)v118;
                    v77 = v119;
                    v78 = v121;
                    *(_OWORD *)(v75 + 64) = v120;
                    *(_OWORD *)(v75 + 80) = v78;
                    *(_OWORD *)(v75 + 32) = v76;
                    *(_OWORD *)(v75 + 48) = v77;
                    v79 = v122;
                    v80 = v123;
                    v81 = *(_OWORD *)v124;
                    *(_QWORD *)(v75 + 144) = v125;
                    *(_OWORD *)(v75 + 112) = v80;
                    *(_OWORD *)(v75 + 128) = v81;
                    *(_OWORD *)(v75 + 96) = v79;
                    break;
                  case 2:
                    v82 = v64 + 152 * v62;
                    v83 = *(_OWORD *)v117;
                    *(_QWORD *)(v82 + 32) = v82 + 48;
                    v84 = v82 + 32;
                    *(_OWORD *)(v84 - 16) = v83;
                    *(_QWORD *)(v84 + 8) = 0x400000000;
                    if (LODWORD(v118[1]))
                      sub_22E8BB370(v84, (uint64_t)v118);
                    break;
                  case 4:
                    v72 = *(_OWORD *)v117;
                    v73 = *(_OWORD *)v118;
                    v71 = v64 + 152 * v62;
LABEL_83:
                    *(_OWORD *)(v71 + 16) = v72;
                    *(_OWORD *)(v71 + 32) = v73;
                    break;
                  default:
                    break;
                }
                a7 = v109;
                if ((v115 & 0x7FFFFFFF) == 2 && v118[0] != &v119)
                  free(v118[0]);
                v39 = a14;
                if ((*(_DWORD *)(*(_QWORD *)(v36 + 48) + 152 * v62) & 0x7FFFFFFF) == 4)
                  goto LABEL_51;
              }
            }
            v60 = v59;
          }
          while (a8 > v59);
        }
        v85 = sub_22ED0649C(a1, a2, *(_DWORD *)(a9 + 2960), a7, a8);
        if (v85)
        {
          *(_BYTE *)(v36 + 104) &= ~1u;
          *(_BYTE *)(v36 + 105) = 9;
          *(_QWORD *)(v36 + 120) = v85;
          return sub_22EB48E64(a1);
        }
        if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 84) & 0x10) == 0
          || !sub_22E47DA60(a2))
        {
          return sub_22EB48E64(a1);
        }
        sub_22EFC8E88(a2);
        v87 = *v86;
        v88 = *((unsigned int *)v86 + 2);
        if ((_DWORD)v88 && *(_WORD *)(*v87 + 32) != 327)
        {
          v89 = 8 * v88 - 8;
          v90 = *v86;
          do
          {
            v91 = v90[1];
            ++v90;
            v89 -= 8;
          }
          while (*(_WORD *)(v91 + 32) != 327);
        }
        do
        {
          v93 = *v87++;
          v92 = v93;
        }
        while (*(_WORD *)(v93 + 32) != 327);
        if (*(_DWORD *)(v92 + 36) == 7)
        {
          v94 = *(int **)(v92 + 40);
          v95 = *v94;
          v96 = *(int *)((char *)v94 + 3);
          if (v95 == 1634100580 && v96 == 1953264993)
            return sub_22EB48E64(a1);
        }
        *(_BYTE *)(v36 + 104) &= ~1u;
        v44 = 13;
      }
      goto LABEL_52;
    }
  }
  return result;
}

uint64_t sub_22ED060FC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[48];
  __int128 v25;
  _OWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, unsigned int);
  char v28;
  void **v29;

  memset(&v24[16], 0, 24);
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = sub_22F335800;
  v28 = 0;
  v8 = sub_22ED1F710(a1, (unint64_t)v24);
  v9 = *(_QWORD *)a1 + 168 * *(unsigned int *)(a1 + 8);
  v10 = *(_OWORD *)v8;
  v11 = *(_OWORD *)(v8 + 16);
  v12 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)v9 = v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v8 + 64);
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(v8 + 80);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v8 + 88);
  v13 = *(_OWORD *)(v8 + 152);
  v14 = *(_OWORD *)(v8 + 136);
  v15 = *(_OWORD *)(v8 + 120);
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v9 + 120) = v15;
  *(_OWORD *)(v9 + 136) = v14;
  *(_OWORD *)(v9 + 152) = v13;
  ++*(_DWORD *)(a1 + 8);
  v29 = (void **)v26;
  sub_22E6C60B8(&v29);
  v16 = *(_QWORD *)a1;
  v17 = *(_DWORD *)(a1 + 8);
  if (!a4)
  {
    v18 = *(unsigned int *)(a1 + 2976);
    if (152 * a2 > 3648 - (int)v18)
    {
      a3 = sub_22E3CD3D4(a1 + 2864, 152 * a2, 3);
      if (a2)
      {
LABEL_4:
        a4 = a2;
        v19 = a3;
        v20 = a2;
        do
        {
          *(_DWORD *)v19 = 5;
          v21 = *(_QWORD *)(v19 + 16) & 0xFFFFFFFC04000000 | 0x20000000;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = v21;
          *(_QWORD *)(v19 + 56) = 0;
          v19 += 152;
          --v20;
        }
        while (v20);
        goto LABEL_9;
      }
    }
    else
    {
      a3 = a1 + v18 + 2984;
      *(_DWORD *)(a1 + 2976) = v18 + 152 * a2;
      if (a2)
        goto LABEL_4;
    }
    a4 = 0;
  }
LABEL_9:
  v22 = v16 + 168 * v17;
  result = v22 - 168;
  *(_QWORD *)(v22 - 120) = a3;
  *(_QWORD *)(v22 - 112) = a4;
  return result;
}

BOOL sub_22ED06298(int a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v4;
  uint64_t i;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = 1;
  if (a2 && a1)
  {
    if ((sub_22EFBF68C(a2) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v4 = sub_22EFCB008(a2, 1);
      if (v4 && *(_BYTE *)(v4 + 16) == 26)
      {
        for (i = 8 * (unsigned __int16)(*(_QWORD *)(v4 + 16) >> 38); i; i -= 8)
        {
          v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 32 + i) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v6 == 36)
            return 0;
        }
      }
      v2 = 1;
      v8 = sub_22EFC20FC(a2, 1);
      if (v8)
      {
        v9 = sub_22EFCB008(v8, 1);
        if (v9)
        {
          if (*(_BYTE *)(v9 + 16) == 26)
          {
            v10 = 8 * (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38);
            do
            {
              v2 = v10 == 0;
              if (!v10)
                break;
              v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 32 + v10) & 0xFFFFFFFFFFFFFFF0) + 16);
              v10 -= 8;
            }
            while (v11 != 36);
          }
        }
      }
    }
  }
  return v2;
}

void sub_22ED06388(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned int v13;

  if (*a3 == 180)
  {
    sub_22ED1F888(a1, a2, (unint64_t)a3, a4, a5, a6, a7);
  }
  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFE) == 0x28)
  {
    sub_22F0D5A50((uint64_t)a3);
    sub_22ED20D9C(a1, (uint64_t)a2, (unint64_t)a3, a4, v13, a5);
  }
  else
  {
    sub_22ECFA94C((uint64_t)a2, (unint64_t)a3, a4, a6, 0, a7, a1, 0, a8);
  }
}

uint64_t sub_22ED0649C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22E9DD080(a2);
  v12 = (uint64_t *)v10;
  v13 = (uint64_t *)v11;
  if (v10 >= v11)
  {
    if (v11 == v10)
      return 0;
    v15 = v11;
    while (*(_WORD *)(*(_QWORD *)v15 + 32) != 167)
    {
      v15 += 8;
      if (v15 == v10)
        return 0;
    }
    v14 = v10;
  }
  else
  {
    v14 = v10;
    while (*(_WORD *)(*(_QWORD *)v14 + 32) != 167)
    {
      v14 += 8;
      if (v14 == v11)
        return 0;
    }
    v15 = v11;
  }
  if (v14 == v15)
    return 0;
  v50 = a3;
  v16 = (char *)(a1 + 10664);
  v60 = 0;
  v55 = 3;
  v56 = 4;
  v57 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v56, (int *)&v57, (__int16 *)(a1 + 1693), (uint64_t *)&v60, &v55);
  v17 = *(unsigned int *)(a1 + 3696);
  v18 = v17 - 2;
  v19 = *(_QWORD *)(a1 + 3688);
  v20 = *(_DWORD *)(v19 + 576 * (v17 - 2));
  if (v20 == 5)
  {
    *(_BYTE *)(v19 + 576 * v17 - 4) = *(_BYTE *)(v19 + 576 * v18 + 572);
    v21 = 1;
  }
  else if (v20 == 2)
  {
    *(_BYTE *)(v19 + 576 * v17 - 4) = 1;
    v21 = *(_BYTE *)(v19 + 576 * v18 + 573) != 0;
  }
  else
  {
    v21 = 0;
    *(_BYTE *)(v19 + 576 * v17 - 4) = 0;
  }
  v22 = v19 + 576 * v17;
  *(_BYTE *)(v22 - 3) = v21;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v22 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v22 - 496));
  }
  v54 = *(_DWORD *)(a1 + 8456);
  v51 = *v16;
  v52 = *(_BYTE *)(a1 + 11952);
  v53 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v23)
    *(_BYTE *)(a1 + 11952) = 1;
  *v16 = 0;
  v60 = v62;
  v61 = 0x1000000000;
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v24 && *(_BYTE *)(v24 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v24 = sub_22F10CF48(v24)) != 0)
  {
    v25 = (unsigned __int16)(*(_QWORD *)(v24 + 16) >> 38);
  }
  else
  {
    v25 = 0;
  }
  if (a5 < v25)
    v25 = a5;
  if (v25)
  {
    v26 = 0;
    v27 = 8 * v25;
    while (1)
    {
      sub_22E99E5D4(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a2 + 120) + v26), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + v26) + 48), (uint64_t)&v57);
      v28 = sub_22EC45014(a1, &v57, 0, *(_QWORD *)(a4 + v26), 0, 0);
      if ((v28 & 1) != 0)
        break;
      v29 = v61;
      if (v61 >= (unint64_t)HIDWORD(v61))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v61;
      }
      *((_QWORD *)v60 + v29) = v28 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v61) = v61 + 1;
      v26 += 8;
      if (v27 == v26)
        goto LABEL_34;
    }
  }
  else
  {
LABEL_34:
    if (*(_DWORD *)(a1 + 8456) <= v54)
    {
      if ((sub_22EFBF68C(a2) & 1) != 0
        || ((v32 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v33 = *(_BYTE *)(v32 + 16) == 26)
          : (v33 = 0),
            !v33
         && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
          || (v32 = sub_22F10CF48(v32)) == 0)
         || a5 >= (unsigned __int16)(*(_QWORD *)(v32 + 16) >> 38)))
      {
        while (1)
        {
LABEL_49:
          v36 = v12;
          if (v12 >= v13)
          {
            if (v12 == v13)
              goto LABEL_73;
            v37 = v13;
            while (*(_WORD *)(*v37 + 32) != 167)
            {
              if (++v37 == v12)
                goto LABEL_73;
            }
            v36 = v12;
          }
          else
          {
            while (*(_WORD *)(*v36 + 32) != 167)
            {
              if (++v36 == v13)
                goto LABEL_73;
            }
            v37 = v13;
          }
          if (v36 == v37)
          {
LABEL_73:
            v30 = 0;
            goto LABEL_74;
          }
          do
          {
            v38 = *v12++;
            v30 = v38;
          }
          while (*(_WORD *)(v38 + 32) != 167);
          LODWORD(v57) = 0;
          v39 = *(_QWORD *)(v30 + 40);
          if ((*(_BYTE *)(v39 + 2) & 1) != 0)
            goto LABEL_74;
          if (!sub_22F0094E0(v39, (uint64_t)&v57, *(_QWORD *)(a1 + 88), a2, (unint64_t *)v60, v61, 0)|| (_DWORD)v57 != 2)
          {
            break;
          }
          v41 = v59;
          if (v59 > 0x40)
          {
            v43 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v58);
            sub_22EF53BC0(&v57);
            if (v43 == v41)
              goto LABEL_74;
          }
          else
          {
            v42 = v58;
            sub_22EF53BC0(&v57);
            if (!v42)
              goto LABEL_74;
          }
        }
        if (v57 >= 2)
          sub_22EF53BC0(&v57);
        goto LABEL_74;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v34 && *(_BYTE *)(v34 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v34 = sub_22F10CF48(v34)) != 0)
      {
        v35 = (unsigned __int16)(*(_QWORD *)(v34 + 16) >> 38);
      }
      else
      {
        v35 = 0;
      }
      if (v35 == (_DWORD)a5)
      {
LABEL_48:
        if (*(_DWORD *)(a1 + 8456) <= v54)
          goto LABEL_49;
      }
      else
      {
        while (1)
        {
          v47 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * a5);
          if ((*(_DWORD *)(v47 + 96) & 0x600) != 0x400
            && (*(_DWORD *)(v47 + 96) & 0x600) != 0x200
            && *(_QWORD *)(v47 + 88) < 8uLL)
          {
            break;
          }
          v48 = sub_22EB31884(a1, v50, a2, v47);
          if ((v48 & 1) != 0)
            break;
          v49 = v61;
          if (v61 >= (unint64_t)HIDWORD(v61))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v49 = v61;
          }
          *((_QWORD *)v60 + v49) = v48 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v61) = v61 + 1;
          LODWORD(a5) = a5 + 1;
          if (v35 == (_DWORD)a5)
            goto LABEL_48;
        }
      }
    }
  }
  do
  {
    v31 = *v12++;
    v30 = v31;
  }
  while (*(_WORD *)(v31 + 32) != 167);
LABEL_74:
  if (v60 != v62)
    free(v60);
  *(_DWORD *)(a1 + 8456) = v54;
  *(_BYTE *)(a1 + 11952) = v52;
  *v16 = v51;
  v44 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v44 + 180) == 5)
    *(_BYTE *)(v44 + 170) = 1;
  if (v53)
    v45 = 3;
  else
    v45 = 0;
  *(_DWORD *)(v44 + 180) = v45;
  sub_22EB48E64(a1);
  return v30;
}

uint64_t sub_22ED06ACC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v10;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _DWORD *v41;
  uint64_t v42;
  _BYTE v44[12];
  _DWORD v45[4];
  unsigned __int8 v46;
  void *v47;
  uint64_t v48;

  v7 = *(unsigned int *)(a6 + 8);
  if (v7 >= 2)
  {
    v10 = a4;
    if (a7)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
        v14 = *(_DWORD *)(v13 + 16) == 11;
      else
        v14 = 0;
      if (!v14)
      {
        v40 = 0;
LABEL_13:
        v16 = 0;
        *(_DWORD *)&v44[8] = 0;
        *(_QWORD *)v44 = a2 & 7;
        v41 = (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
        v42 = *(unsigned int *)(a6 + 8);
        while (1)
        {
          v17 = *(_DWORD *)v44 > 1u;
          if (*(_DWORD *)v44 >= 3u)
            v17 = *v41 - 3;
          v18 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v16);
          v19 = *(_DWORD *)(v18 + 104);
          if (v19 <= v17)
            v20 = v17;
          else
            v20 = v19;
          if (v10 < v20)
            goto LABEL_78;
          if ((_DWORD)v20)
          {
            v21 = 0;
            v22 = 0;
            while (1)
            {
              v23 = *(_QWORD *)(a3 + 8 * v21);
              if ((*(_BYTE *)(v23 + 1) & 0x80) != 0)
                break;
              v24 = *(_QWORD *)(*(_QWORD *)(v18 + 96) + 8 * v21);
              v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v25)
                v26 = (*(_DWORD *)(v25 + 16) & 0xFF800FF) == 138936331;
              else
                v26 = 0;
              if (v26 && !sub_22F32DD04(*(_QWORD *)(*(_QWORD *)(v18 + 96) + 8 * v21)))
                v23 = sub_22EC2C298(a1, (unsigned __int8 *)v23);
              if (*(_QWORD *)(v24 + 48) == *(_QWORD *)(a1[11] + 16856))
                break;
              sub_22ED06388(v45, a1, v23);
              v27 = v45[0] & 0x7FFFFFFF;
              if ((v45[0] & 0x7FFFFFFF) != 0)
              {
                if (v27 == 2)
                {
                  if (v47 != &v48)
                    free(v47);
                }
                else if (v27 == 4)
                {
                  break;
                }
              }
              else if ((unint64_t)v46 << 8 == 7680)
              {
                break;
              }
              v22 = ++v21 >= v20;
              if (v20 == v21)
                goto LABEL_40;
            }
          }
          else
          {
LABEL_40:
            if ((*(_BYTE *)(v18 + 58) & 4) != 0)
            {
              v10 = a4;
              if (v20 < a4)
              {
                v28 = (uint64_t *)(a3 + 8 * v20);
                v29 = a4 - v20;
                while ((*(_BYTE *)(*v28 + 1) & 0x80) == 0 && (sub_22F32D0F4((uint64_t)a1, *v28, 2, 0) & 1) == 0)
                {
                  ++v28;
                  if (!--v29)
                    goto LABEL_51;
                }
                v7 = v42;
                goto LABEL_78;
              }
LABEL_51:
              v7 = v42;
              goto LABEL_73;
            }
            v22 = 1;
          }
          v7 = v42;
          v10 = a4;
          if (a4 != v20)
            goto LABEL_78;
          if ((_DWORD)v20)
          {
            if (!v22)
              goto LABEL_78;
          }
          else
          {
            v30 = *(unsigned int *)(a6 + 8);
            if (v30 >= 2)
            {
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v34 = *(_QWORD *)(*(_QWORD *)a6 + 8 * v31);
                v35 = *(_QWORD *)(*(_QWORD *)(v34 + 80) & 0xFFFFFFFFFFFFFFF0);
                if ((v35 && *(_BYTE *)(v35 + 16) == 32
                   || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                   && (v35 = sub_22F10CF48(v35)) != 0)
                  && sub_22E5761BC(v35))
                {
                  if (v40 || sub_22EFDC9F0(v34))
                    goto LABEL_65;
                  if (!v33)
                    v33 = v34;
                }
                v32 = ++v31 >= v30;
              }
              while (v30 != v31);
              v34 = v39;
LABEL_65:
              v36 = v33 ? v33 : v34;
              result = v32 ? v36 : v34;
              v10 = a4;
              if (!v32)
                return result;
              v39 = result;
              v7 = v42;
              if (v33)
                return result;
            }
          }
LABEL_73:
          if (v40)
            return v18;
          v37 = sub_22EFDC9F0(v18);
          result = v18;
          if (v37)
            return result;
          v38 = *(_QWORD *)&v44[4];
          if (!*(_QWORD *)&v44[4])
            v38 = v18;
          *(_QWORD *)&v44[4] = v38;
LABEL_78:
          ++v16;
          result = *(_QWORD *)&v44[4];
          if (v16 == v7)
            return result;
        }
      }
      v15 = (*(_DWORD *)(v13 + 16) & 0xFF80000) == 114819072;
    }
    else
    {
      v15 = 1;
    }
    v40 = v15;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_22ED06E6C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const std::nothrow_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  int8x16_t *v29;
  char *v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int8x16_t *v36;
  uint64_t v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[10];

  v62[8] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x800000000;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
  {
    v10 = 0;
LABEL_3:
    v11 = 0;
    goto LABEL_4;
  }
  sub_22EFC8E88(a2);
  v10 = *v47;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_3;
  sub_22EFC8E88(a2);
  v11 = *(_QWORD *)v48 + 8 * *(unsigned int *)(v48 + 8);
  while (1)
  {
LABEL_4:
    v12 = v10;
    if ((unint64_t)v10 >= v11)
    {
      v13 = (uint64_t *)v11;
      if ((uint64_t *)v11 == v10)
        break;
      while (*(_WORD *)(*v13 + 32) != 163)
      {
        if (++v13 == v10)
          goto LABEL_20;
      }
      v12 = v10;
    }
    else
    {
      while (*(_WORD *)(*v12 + 32) != 163)
      {
        if (++v12 == (uint64_t *)v11)
          goto LABEL_20;
      }
      v13 = (uint64_t *)v11;
    }
    if (v12 == v13)
      break;
    do
    {
      v15 = *v10++;
      v14 = v15;
    }
    while (*(_WORD *)(v15 + 32) != 163);
    if (*(_BYTE *)(v14 + 68))
    {
      v16 = v61;
      if (v61 >= (unint64_t)HIDWORD(v61))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v61;
      }
      *((_QWORD *)v60 + v16) = v14;
      LODWORD(v61) = v61 + 1;
    }
  }
LABEL_20:
  if ((_DWORD)v61)
  {
    v17 = (int8x16_t *)v60;
    v18 = (char *)v60 + 8 * v61;
    v19 = 8 * v61;
    while (!*(_DWORD *)(v17->i64[0] + 64))
    {
      v17 = (int8x16_t *)((char *)v17 + 8);
      v19 -= 8;
      if (!v19)
      {
        v17 = (int8x16_t *)((char *)v60 + 8 * v61);
        goto LABEL_40;
      }
    }
    while (1)
    {
      v19 -= 8;
      if (!v19)
        break;
      v20 = (unint64_t *)(v18 - 8);
      v21 = *(_DWORD *)(*((_QWORD *)v18 - 1) + 64);
      v18 -= 8;
      if (!v21)
      {
        v23 = (v19 >> 3) + 1;
        if (v19 < 17)
        {
LABEL_36:
          v28 = 0;
          v24 = 0;
        }
        else
        {
          if (v23 >= 0xFFFFFFFFFFFFFFFLL)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = (v19 >> 3) + 1;
          v25 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v26 = (uint64_t *)operator new(8 * v24, v25);
            if (v26)
              break;
            v27 = v24 > 1;
            v24 >>= 1;
            if (!v27)
              goto LABEL_36;
          }
          v28 = v26;
        }
        v17 = (int8x16_t *)sub_22ED24174(v17, v20, v23, v28, v24);
        if (v28)
          operator delete(v28);
        break;
      }
    }
LABEL_40:
    v29 = (int8x16_t *)v60;
    v30 = (char *)v17;
    if (v60 == v17)
      goto LABEL_53;
    do
    {
      v31 = v29->i64[0];
      LODWORD(v57) = 0;
      if (sub_22F0094E0(*(_QWORD *)(v31 + 40), (uint64_t)&v57, a1[11], *(_QWORD *)(v31 + 72), a4, a5, a3)
        && (_DWORD)v57 == 2)
      {
        v33 = v59;
        if (v59 > 0x40)
        {
          v35 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v58);
          sub_22EF53BC0(&v57);
          if (v35 != v33)
          {
LABEL_71:
            v49 = v29->i64[0];
            sub_22E8FCA40(a1, a6, 0xCBEu, 0, (uint64_t)&v57);
            v50 = *(unsigned int *)(v49 + 48);
            v55 = *(_QWORD *)(v49 + 56);
            v56 = v50;
            sub_22F2F2210((uint64_t)&v57, (uint64_t)&v55);
            sub_22E903BEC((unsigned int *)&v57);
            sub_22E8FCA40(a1, *(_DWORD *)(v49 + 16), 0x160Du, 0, (uint64_t)&v57);
            v55 = *(_QWORD *)(v49 + 72);
            v51 = sub_22E890024((uint64_t)&v57, &v55);
            sub_22F0D4E74(*(_QWORD *)(v49 + 40));
            v54 = v52;
            sub_22E8906A0(v51, &v54);
            sub_22E903BEC((unsigned int *)&v57);
            v22 = 1;
            goto LABEL_66;
          }
        }
        else
        {
          v34 = v58;
          sub_22EF53BC0(&v57);
          if (v34)
            goto LABEL_71;
        }
      }
      else if (v57 >= 2)
      {
        sub_22EF53BC0(&v57);
      }
      v29 = (int8x16_t *)((char *)v29 + 8);
    }
    while (v29 != v17);
    v30 = (char *)v60;
LABEL_53:
    v36 = (int8x16_t *)&v30[8 * v61];
    if (v17 != v36)
    {
      while (2)
      {
        v37 = v17->i64[0];
        LODWORD(v57) = 0;
        if (!sub_22F0094E0(*(_QWORD *)(v37 + 40), (uint64_t)&v57, a1[11], *(_QWORD *)(v37 + 72), a4, a5, a3)
          || (_DWORD)v57 != 2)
        {
          if (v57 >= 2)
            sub_22EF53BC0(&v57);
LABEL_64:
          v17 = (int8x16_t *)((char *)v17 + 8);
          if (v17 == v36)
            goto LABEL_65;
          continue;
        }
        break;
      }
      v39 = v59;
      if (v59 > 0x40)
      {
        v44 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v58);
        sub_22EF53BC0(&v57);
        if (v44 == v39)
          goto LABEL_64;
      }
      else
      {
        v40 = v58;
        sub_22EF53BC0(&v57);
        if (!v40)
          goto LABEL_64;
      }
      sub_22E8FCA40(a1, a6, 0x1971u, 0, (uint64_t)&v57);
      v41 = *(unsigned int *)(v37 + 48);
      v55 = *(_QWORD *)(v37 + 56);
      v56 = v41;
      sub_22F2F2210((uint64_t)&v57, (uint64_t)&v55);
      sub_22E903BEC((unsigned int *)&v57);
      sub_22E8FCA40(a1, *(_DWORD *)(v37 + 16), 0x160Du, 0, (uint64_t)&v57);
      v55 = *(_QWORD *)(v37 + 72);
      v42 = sub_22E890024((uint64_t)&v57, &v55);
      sub_22F0D4E74(*(_QWORD *)(v37 + 40));
      v54 = v43;
      sub_22E8906A0(v42, &v54);
      sub_22E903BEC((unsigned int *)&v57);
      goto LABEL_64;
    }
LABEL_65:
    v22 = 0;
  }
  else
  {
    v22 = 0;
  }
LABEL_66:
  if (v60 != v62)
    free(v60);
  return v22;
}

uint64_t sub_22ED0737C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  const std::nothrow_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t *v22;
  int8x16_t *v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  int8x16_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45[24];
  void *v46;
  uint64_t v47;
  _QWORD v48[9];

  v48[8] = *MEMORY[0x24BDAC8D0];
  v46 = v48;
  v47 = 0x800000000;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
  {
    v5 = 0;
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  sub_22EFC8E88(a2);
  v5 = *v35;
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_3;
  sub_22EFC8E88(a2);
  v6 = *(_QWORD *)v36 + 8 * *(unsigned int *)(v36 + 8);
  while (1)
  {
LABEL_4:
    v7 = v5;
    if ((unint64_t)v5 >= v6)
    {
      v8 = (uint64_t *)v6;
      if ((uint64_t *)v6 == v5)
        break;
      while (*(_WORD *)(*v8 + 32) != 163)
      {
        if (++v8 == v5)
          goto LABEL_20;
      }
      v7 = v5;
    }
    else
    {
      while (*(_WORD *)(*v7 + 32) != 163)
      {
        if (++v7 == (uint64_t *)v6)
          goto LABEL_20;
      }
      v8 = (uint64_t *)v6;
    }
    if (v7 == v8)
      break;
    do
    {
      v10 = *v5++;
      v9 = v10;
    }
    while (*(_WORD *)(v10 + 32) != 163);
    if (!*(_BYTE *)(v9 + 68))
    {
      v11 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v47;
      }
      *((_QWORD *)v46 + v11) = v9;
      LODWORD(v47) = v47 + 1;
    }
  }
LABEL_20:
  if ((_DWORD)v47)
  {
    v12 = (int8x16_t *)v46;
    v13 = (char *)v46 + 8 * v47;
    v14 = 8 * v47;
    while (!*(_DWORD *)(v12->i64[0] + 64))
    {
      v12 = (int8x16_t *)((char *)v12 + 8);
      v14 -= 8;
      if (!v14)
      {
        v12 = (int8x16_t *)((char *)v46 + 8 * v47);
        goto LABEL_39;
      }
    }
    while (1)
    {
      v14 -= 8;
      if (!v14)
        break;
      v15 = (unint64_t *)(v13 - 8);
      v16 = *(_DWORD *)(*((_QWORD *)v13 - 1) + 64);
      v13 -= 8;
      if (!v16)
      {
        v17 = (v14 >> 3) + 1;
        if (v14 < 17)
        {
LABEL_35:
          v22 = 0;
          v18 = 0;
        }
        else
        {
          if (v17 >= 0xFFFFFFFFFFFFFFFLL)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = (v14 >> 3) + 1;
          v19 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v20 = (uint64_t *)operator new(8 * v18, v19);
            if (v20)
              break;
            v21 = v18 > 1;
            v18 >>= 1;
            if (!v21)
              goto LABEL_35;
          }
          v22 = v20;
        }
        v12 = (int8x16_t *)sub_22ED24174(v12, v15, v17, v22, v18);
        if (v22)
          operator delete(v22);
        break;
      }
    }
LABEL_39:
    v23 = (int8x16_t *)v46;
    v24 = (char *)v12;
    if (v46 != v12)
    {
      do
      {
        v25 = v23->i64[0];
        LOBYTE(v45[0]) = 0;
        if (sub_22F005310(*(unsigned __int8 **)(v25 + 40), (uint64_t)v45, a1[11], 0))
          v26 = LOBYTE(v45[0]) == 0;
        else
          v26 = 1;
        if (!v26)
        {
          v37 = v23->i64[0];
          sub_22E8FCA40(a1, a3, 0xCBEu, 0, (uint64_t)v45);
          v38 = *(unsigned int *)(v37 + 48);
          v43 = *(_QWORD *)(v37 + 56);
          v44 = v38;
          sub_22F2F2210((uint64_t)v45, (uint64_t)&v43);
          sub_22E903BEC(v45);
          sub_22E8FCA40(a1, *(_DWORD *)(v37 + 16), 0x160Du, 0, (uint64_t)v45);
          v43 = *(_QWORD *)(v37 + 72);
          v39 = sub_22E890024((uint64_t)v45, &v43);
          sub_22F0D4E74(*(_QWORD *)(v37 + 40));
          v42 = v40;
          sub_22E8906A0(v39, &v42);
          sub_22E903BEC(v45);
          v41 = 1;
          goto LABEL_56;
        }
        v23 = (int8x16_t *)((char *)v23 + 8);
      }
      while (v23 != v12);
      v24 = (char *)v46;
    }
    v27 = (int8x16_t *)&v24[8 * v47];
    while (v12 != v27)
    {
      v28 = v12->i64[0];
      LOBYTE(v45[0]) = 0;
      if (sub_22F005310(*(unsigned __int8 **)(v28 + 40), (uint64_t)v45, a1[11], 0))
        v29 = LOBYTE(v45[0]) == 0;
      else
        v29 = 1;
      if (!v29)
      {
        sub_22E8FCA40(a1, a3, 0x1971u, 0, (uint64_t)v45);
        v30 = *(unsigned int *)(v28 + 48);
        v43 = *(_QWORD *)(v28 + 56);
        v44 = v30;
        sub_22F2F2210((uint64_t)v45, (uint64_t)&v43);
        sub_22E903BEC(v45);
        sub_22E8FCA40(a1, *(_DWORD *)(v28 + 16), 0x160Du, 0, (uint64_t)v45);
        v43 = *(_QWORD *)(v28 + 72);
        v31 = sub_22E890024((uint64_t)v45, &v43);
        sub_22F0D4E74(*(_QWORD *)(v28 + 40));
        v42 = v32;
        sub_22E8906A0(v31, &v42);
        sub_22E903BEC(v45);
      }
      v12 = (int8x16_t *)((char *)v12 + 8);
    }
  }
  v41 = 0;
LABEL_56:
  if (v46 != v48)
    free(v46);
  return v41;
}

void sub_22ED077A4(_QWORD *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, unsigned __int8 a8, char a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t *v15;
  uint64_t i;
  unint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  unint64_t v44;

  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9)
  {
    v11 = a5;
    v43 = a3 + 1;
    v44 = a4 - 1;
    v15 = *(uint64_t **)a2;
    for (i = 8 * v9; i; i -= 8)
    {
      v17 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = *(_DWORD *)(v17 + 28);
      v19 = v18 & 0x7F;
      if (v19 <= 0x2F && ((1 << (v18 & 0x7F)) & 0xC00000060000) != 0)
      {
        v17 = sub_22EFBAEA4(*v15 & 0xFFFFFFFFFFFFFFFCLL);
        v18 = *(_DWORD *)(v17 + 28);
        v19 = v18 & 0x7F;
      }
      if (v19 == 29)
        v21 = (_QWORD *)v17;
      else
        v21 = 0;
      if (v21)
      {
        v17 = v21[6];
        v18 = *(_DWORD *)(v17 + 28);
      }
      if ((v18 & 0x7Eu) - 54 > 3
        || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 32))(v17) + 80) & 0xE000) == 0x4000
        || (*(_QWORD *)(v17 + 40) & 7) == 6
        && (*(_DWORD *)(*(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
      {
        if (a4)
        {
          if (!*a3
            || (v22 = (uint64_t)a3, v23 = a4, a9)
            && ((*(_DWORD *)(v17 + 28) & 0x7F) != 0x37
              ? (v24 = (*(_DWORD *)(v17 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
              : (v24 = 0),
                v22 = (uint64_t)a3,
                v23 = a4,
                v24))
          {
            v22 = (uint64_t)v43;
            v23 = v44;
          }
        }
        else
        {
          v23 = 0;
          v22 = (uint64_t)a3;
        }
        v27 = *v15;
        if (v21)
          sub_22ED07F48(a1, v21, v27, 0, a6, v22, v23, v11, a7, a8, 1u, 0, 0);
        else
          sub_22ED0475C((uint64_t)a1, v17, v27, 0, v22, v23, v11, a7, a8, 1, 0, 0, 0, 0, 0);
      }
      else
      {
        if (a4)
        {
          v25 = *a3;
          if (*a3)
          {
            v26 = *(_QWORD *)(v25 + 8);
            if (v26 >= 0x10
              && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39)
            {
              v42 = 0x10000;
            }
            else
            {
              v42 = sub_22F003E64(v25, a1[11], 0);
            }
          }
          else
          {
            v26 = 0;
          }
          v29 = (uint64_t)v43;
          v28 = v44;
        }
        else
        {
          v26 = 0;
          v28 = 0;
          v29 = (uint64_t)a3;
        }
        v30 = *v15;
        if (!v21)
        {
          v34 = *(_WORD *)(v17 + 80) & 0x7F;
          v35 = -40;
          if (v34 > 0x46)
          {
            if (v34 != 83)
            {
              if (v34 == 71)
              {
                v35 = -56;
              }
              else if (v34 != 81)
              {
                goto LABEL_58;
              }
            }
          }
          else
          {
            if (v34 > 0x18)
              goto LABEL_57;
            if (v34 == 16)
              goto LABEL_49;
            if (((1 << v34) & 0x1066) == 0)
            {
              if (v34 == 24)
              {
LABEL_49:
                v35 = -48;
              }
              else
              {
LABEL_57:
                if (v34 == 70)
                  goto LABEL_60;
LABEL_58:
                if (v34 - 52 < 6)
                {
                  v35 = -72;
                }
                else if (v34 - 33 >= 5)
                {
                  v35 = -48;
                }
                else
                {
LABEL_60:
                  v35 = -64;
                }
              }
            }
          }
          v36 = *(_QWORD *)(v17 + 72 + v35 + 16);
          v37 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8);
          if ((v36 & 4) != 0)
            v37 = (_QWORD *)*v37;
          if (v37)
            v38 = (unint64_t)(v37 - 8);
          else
            v38 = 0;
          v11 = a5;
          v39 = v39 & 0xFFFFFFFF00000000 | v42;
          sub_22ED05760((uint64_t)a1, v17, v30, v38, v26, v42, v29, v28, a5, a7, a8, 0, 0, 0);
          goto LABEL_68;
        }
        v31 = v21[2];
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
          v33 = (uint64_t)(v32 - 8);
        else
          v33 = 0;
        v11 = a5;
        v41 = v41 & 0xFFFFFFFF00000000 | v42;
        sub_22ED07BB0((uint64_t)a1, (uint64_t)v21, v30, v33, a6, v26, v41, v28, v29, v28, a5, a7, a8, 0);
      }
LABEL_68:
      ++v15;
    }
  }
}

char **sub_22ED07BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, unsigned __int8 a13, char a14)
{
  int v18;
  uint64_t v19;
  char **result;
  char v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  int v29;
  char v30;
  _BOOL4 v31;
  char v32;
  __int128 v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t *v49;
  unint64_t *v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char *v57[2];
  _QWORD v58[17];
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[10];
  void *v67;
  uint64_t v68;
  _BYTE v69[104];
  void *v70;
  uint64_t v71;
  _QWORD v72[10];

  v18 = a14;
  v72[8] = *MEMORY[0x24BDAC8D0];
  v45 = a6;
  v44 = a7;
  v42 = a9;
  v43 = a10;
  v40 = a4;
  v41 = a2;
  v39 = a12;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  result = (char **)sub_22E3BA850(a11 + 2704, (const void *)(v19 | v18));
  if (v21)
  {
    v22 = *(_DWORD *)(a11 + 2960);
    v53 = 0;
    v54 = v22;
    v55 = 0;
    v56 = 0;
    v57[0] = (char *)v58;
    v57[1] = (char *)0x400000000;
    v58[16] = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v36 = 0;
    v64 = v66;
    v65 = 0x800000000;
    v66[9] = 0;
    v66[8] = 0;
    v67 = v69;
    v68 = 0x400000000;
    v69[96] = 0;
    v70 = v72;
    v71 = 0x400000000;
    v37 = 0;
    v38 = 0;
    *(_QWORD *)&v46 = a1;
    *((_QWORD *)&v46 + 1) = &v41;
    *(_QWORD *)&v48 = &v36;
    *((_QWORD *)&v48 + 1) = &v39;
    v49 = &v40;
    v50 = &v45;
    v51 = &v44;
    v52 = &a14;
    *(_QWORD *)&v47 = &v42;
    *((_QWORD *)&v47 + 1) = a11;
    v23 = sub_22EDC2CBC(a1, a2, a5, a9, a10, &v38, &v53, a13, sub_22ED244E0, &v46);
    if (v23)
    {
      v24 = v23;
      v25 = sub_22ED060FC(a11, v37, v36, v37);
      v26 = v25;
      *(_QWORD *)(v25 + 8) = a3;
      v27 = *(_QWORD **)(v41 + 48);
      *(_QWORD *)v25 = v27;
      v28 = *(_BYTE *)(v25 + 104);
      *(_BYTE *)(v25 + 104) = v28 & 0xFE;
      v29 = *(_DWORD *)(a11 + 2968);
      if (v29)
      {
        if ((v27[5] & 7) == 6)
          v34 = *(_DWORD *)(v27[5] & 0xFFFFFFFFFFFFFFF8);
        else
          v34 = 0;
        LOBYTE(v29) = v34 != v29;
      }
      if (a14 == 1)
        v30 = v29 | 2;
      else
        v30 = v29;
      *(_BYTE *)(v25 + 104) = v28 & 0x9A | (32 * v30);
      if ((*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v27 + 32))(v27) + 80) & 0xE000) == 0x4000)
        v31 = 1;
      else
        v31 = (v27[5] & 7) == 6 && (*(_DWORD *)(v27[5] & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
      if (v45 < 0x10)
        v31 = 1;
      if (v31)
        v32 = 8;
      else
        v32 = 0;
      *(_BYTE *)(v26 + 104) = v32 | *(_BYTE *)(v26 + 104) & 0xF7;
      *(_DWORD *)(v26 + 108) = v43;
      if (v24 == 14)
      {
        *(_BYTE *)(v26 + 105) = 2;
      }
      else
      {
        *(_BYTE *)(v26 + 105) = 3;
        sub_22ECF93D4(*(_QWORD *)(a1 + 88), v24, (unint64_t)&v53, (uint64_t)&v46);
        v33 = v47;
        *(_OWORD *)(v26 + 112) = v46;
        *(_OWORD *)(v26 + 128) = v33;
        *(_OWORD *)(v26 + 144) = v48;
      }
    }
    else
    {
      BYTE1(v35) = a13;
      LOBYTE(v35) = v39;
      sub_22ED05760(a1, v38, a3, v40, v45, v44, v42, v43, a11, v35, v36, v37, a14);
    }
    if (v70 != v72)
      free(v70);
    if (v67 != v69)
      free(v67);
    if (v64 != v66)
      free(v64);
    return sub_22E89277C(v57);
  }
  return result;
}

void sub_22ED07F48(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13)
{
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  unsigned int v40;
  char v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unsigned __int8 v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _BYTE v73[24];
  _OWORD v74[2];
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t, unsigned int);
  char v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[10];
  void *v86;
  uint64_t v87;
  _BYTE v88[104];
  void *v89;
  uint64_t v90;
  _QWORD v91[10];

  v21 = a13;
  v91[8] = *MEMORY[0x24BDAC8D0];
  v61 = a6;
  v62 = a7;
  v60 = a2;
  v59 = a9;
  v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  sub_22E3BA850(a8 + 2704, (const void *)(v22 | v21));
  if (!v23)
    return;
  if ((a11 & 1) == 0)
  {
    v24 = a2[6];
    v25 = *(_WORD *)(v24 + 80) & 0x7F;
    switch(v25)
    {
      case '8':
        v26 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24) + 160);
        goto LABEL_5;
      case '7':
        v44 = *(_QWORD *)(v24 + 112);
        v45 = *(_QWORD *)(v44 + 80);
        if ((v45 & 0x4000000000000000) != 0)
          v26 = *(_QWORD *)(v44 + 16 * ((v45 >> 61) & 1) + 168);
        else
          v26 = v45 >> 63;
LABEL_5:
        if ((v26 & 3) == 1)
        {
          v70 = 0;
          v71 = 0;
          v72 = 0;
          *(_OWORD *)&v73[8] = 0u;
          memset(v74, 0, sizeof(v74));
          v75 = sub_22F335800;
          v76 = 0;
          v46 = sub_22ED1F710(a8, (unint64_t)&v67);
          v47 = *(_QWORD *)a8 + 168 * *(unsigned int *)(a8 + 8);
          v48 = *(_OWORD *)v46;
          v49 = *(_OWORD *)(v46 + 16);
          v50 = *(_OWORD *)(v46 + 48);
          *(_OWORD *)(v47 + 32) = *(_OWORD *)(v46 + 32);
          *(_OWORD *)(v47 + 48) = v50;
          *(_OWORD *)v47 = v48;
          *(_OWORD *)(v47 + 16) = v49;
          *(_QWORD *)(v47 + 72) = 0;
          *(_QWORD *)(v47 + 80) = 0;
          *(_QWORD *)(v47 + 64) = 0;
          *(_OWORD *)(v47 + 64) = *(_OWORD *)(v46 + 64);
          *(_QWORD *)(v47 + 80) = *(_QWORD *)(v46 + 80);
          *(_QWORD *)(v46 + 64) = 0;
          *(_QWORD *)(v46 + 72) = 0;
          *(_QWORD *)(v46 + 80) = 0;
          *(_OWORD *)(v47 + 88) = *(_OWORD *)(v46 + 88);
          v51 = *(_OWORD *)(v46 + 152);
          v52 = *(_OWORD *)(v46 + 136);
          v53 = *(_OWORD *)(v46 + 120);
          *(_OWORD *)(v47 + 104) = *(_OWORD *)(v46 + 104);
          *(_OWORD *)(v47 + 120) = v53;
          *(_OWORD *)(v47 + 136) = v52;
          *(_OWORD *)(v47 + 152) = v51;
          ++*(_DWORD *)(a8 + 8);
          *(_QWORD *)&v63 = v74;
          sub_22E6C60B8((void ***)&v63);
          v54 = *(_QWORD *)a8 + 168 * *(unsigned int *)(a8 + 8);
          *(_QWORD *)(v54 - 120) = a8 + *(unsigned int *)(a8 + 2976) + 2984;
          *(_QWORD *)(v54 - 112) = 0;
          *(_QWORD *)(v54 - 160) = a3;
          *(_QWORD *)(v54 - 168) = a2[6];
          *(_BYTE *)(v54 - 64) &= ~1u;
          *(_BYTE *)(v54 - 63) = 10;
          return;
        }
        break;
      case '5':
        v26 = *(_QWORD *)(v24 + 168);
        goto LABEL_5;
    }
  }
  v27 = *(_DWORD *)(a8 + 2960);
  v67 = 0;
  v68 = v27;
  v69 = 0;
  v70 = 0;
  v71 = v73;
  v72 = 0x400000000;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v56 = 0;
  v83 = v85;
  v84 = 0x800000000;
  v85[8] = 0;
  v85[9] = 0;
  v86 = v88;
  v87 = 0x400000000;
  v88[96] = 0;
  v89 = v91;
  v90 = 0x400000000;
  v57 = 0;
  v58 = 0;
  *(_QWORD *)&v63 = a1;
  *((_QWORD *)&v63 + 1) = &v60;
  *(_QWORD *)&v65 = &v56;
  *((_QWORD *)&v65 + 1) = &v59;
  v66 = &a13;
  *(_QWORD *)&v64 = &v61;
  *((_QWORD *)&v64 + 1) = a8;
  v28 = sub_22EDC2CBC(a1, (uint64_t)a2, a5, a6, a7, &v58, (uint64_t)&v67, a10, (uint64_t)sub_22ED2454C, (uint64_t)&v63);
  if (v28)
  {
    v29 = v28;
    v30 = sub_22ED060FC(a8, v57, v56, v57);
    v31 = (_OWORD *)v30;
    *(_QWORD *)(v30 + 8) = a3;
    v32 = v60[6];
    *(_QWORD *)v30 = v32;
    v33 = *(_BYTE *)(v30 + 104);
    *(_BYTE *)(v30 + 104) = v33 & 0xFE;
    v34 = *(_DWORD *)(a8 + 2968);
    if (v34)
    {
      if ((*(_QWORD *)(v32 + 40) & 7) == 6)
        v43 = *(_DWORD *)(*(_QWORD *)(v32 + 40) & 0xFFFFFFFFFFFFFFF8);
      else
        v43 = 0;
      LOBYTE(v34) = v43 != v34;
    }
    if (a13 == 1)
      v35 = v34 | 2;
    else
      v35 = v34;
    v36 = v33 & 0x8A | (32 * v35);
    if (a12)
      v37 = 16;
    else
      v37 = 0;
    v38 = v36 | v37;
    *(_BYTE *)(v30 + 104) = v38;
    v39 = *(_DWORD *)(v32 + 28);
    v40 = (v39 & 0x7E) - 54;
    v41 = 8 * ((v39 & 0x7F) != 55);
    if (v40 >= 4)
      v41 = 0;
    *(_BYTE *)(v30 + 104) = v38 & 0xF7 | v41;
    *(_DWORD *)(v30 + 108) = v62;
    if (v29 == 14)
    {
      *(_BYTE *)(v30 + 105) = 2;
    }
    else
    {
      *(_BYTE *)(v30 + 105) = 3;
      sub_22ECF93D4(a1[11], v29, (unint64_t)&v67, (uint64_t)&v63);
      v42 = v64;
      v31[7] = v63;
      v31[8] = v42;
      v31[9] = v65;
    }
  }
  else
  {
    BYTE3(v55) = a12;
    *(_WORD *)((char *)&v55 + 1) = a11;
    LOBYTE(v55) = a10;
    sub_22ED0475C(a1, v58, a3, a4, v61, v62, a8, v59, v55, v56, v57, a13);
  }
  if (v89 != v91)
    free(v89);
  if (v86 != v88)
    free(v86);
  if (v83 != v85)
    free(v83);
  sub_22E89277C(&v71);
}

char **sub_22ED08414(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;

  v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0)
    v14 = (_QWORD *)*v14;
  if (v14)
    v15 = (uint64_t)(v14 - 8);
  else
    v15 = 0;
  v16 = *(_DWORD *)(v12 + 28);
  if ((v16 & 0x7E) == 0x2E)
  {
    v12 = *(_QWORD *)(v12 + 64);
    v16 = *(_DWORD *)(v12 + 28);
  }
  if ((v16 & 0x7F) == 0x1D)
    return sub_22ED07BB0(a1, v12, a2, v15, 0, a3, a4, a8, a5, a6, a7, 0, 0, a8);
  else
    return (char **)sub_22ED05760(a1, v12, a2, v15, a3, a4, a5, a6, a7, 0, 0, 0, (_BYTE)a8);
}

uint64_t sub_22ED084CC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, unint64_t a10, unint64_t a11, __int16 a12, int a13, char a14)
{
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  void *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  void *v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95[3];

  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 >= 4)
    v22 = 0;
  else
    v22 = a2;
  if (v22)
    v23 = (*(_DWORD *)(v22 + 28) & 0x7F) != 55;
  else
    v23 = 0;
  v24 = v23;
  *a8 = sub_22ED08A7C(a7, (int)a6 + v23);
  a8[1] = v25;
  v82 = 0;
  v94 = 3;
  v95[0] = 0;
  v93 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, v95, (int *)&v93, (__int16 *)(a1 + 1693), &v82, &v94);
  v26 = *(unsigned int *)(a1 + 3696);
  v27 = v26 - 2;
  v28 = *(_QWORD *)(a1 + 3688);
  v29 = *(_DWORD *)(v28 + 576 * (v26 - 2));
  v81 = a8;
  if (v29 == 5)
  {
    *(_BYTE *)(v28 + 576 * v26 - 4) = *(_BYTE *)(v28 + 576 * v27 + 572);
    v30 = 1;
  }
  else if (v29 == 2)
  {
    *(_BYTE *)(v28 + 576 * v26 - 4) = 1;
    v30 = *(_BYTE *)(v28 + 576 * v27 + 573) != 0;
  }
  else
  {
    v30 = 0;
    *(_BYTE *)(v28 + 576 * v26 - 4) = 0;
  }
  v31 = v28 + 576 * v26;
  *(_BYTE *)(v31 - 3) = v30;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v31 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v31 - 496));
  }
  v32 = v81;
  if (!v24
    || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(a2 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4
    || a11 < 0x10)
  {
    goto LABEL_30;
  }
  sub_22ED02038((unsigned int *)&v82, a1, *(_DWORD *)(a7 + 2960), a11, a12, v22, a10);
  v33 = *v81;
  v34 = (int *)(*v81 + 152 * (a14 == 1));
  v35 = *v34;
  if ((*v34 & 0x7FFFFFFF) == 2)
  {
    v36 = v33 + 152 * (a14 == 1);
    v37 = *(void **)(v36 + 32);
    if (v37 != (void *)(v36 + 48))
    {
      free(v37);
      v35 = *v34;
    }
  }
  v38 = v35 & 0x80000000;
  v39 = v82 & 0x7FFFFFFF;
  *v34 = v82 & 0x7FFFFFFF | v38;
  *v34 = v82 & 0x80000000 | v39;
  *(_QWORD *)(v33 + 152 * (a14 == 1) + 8) = v83;
  switch(v39)
  {
    case 0:
      v40 = v33 + 152 * (a14 == 1);
      v41 = v84;
      v42 = *(_OWORD *)v85;
      v43 = v86;
      *(_QWORD *)(v40 + 64) = v87;
      *(_OWORD *)(v40 + 48) = v43;
      goto LABEL_23;
    case 1:
      v71 = v33 + 152 * (a14 == 1);
      *(_OWORD *)(v71 + 16) = v84;
      v72 = *(_OWORD *)v85;
      v73 = v86;
      v74 = v88;
      *(_OWORD *)(v71 + 64) = v87;
      *(_OWORD *)(v71 + 80) = v74;
      *(_OWORD *)(v71 + 32) = v72;
      *(_OWORD *)(v71 + 48) = v73;
      v75 = v89;
      v76 = v90;
      v77 = v91;
      *(_QWORD *)(v71 + 144) = v92;
      *(_OWORD *)(v71 + 112) = v76;
      *(_OWORD *)(v71 + 128) = v77;
      *(_OWORD *)(v71 + 96) = v75;
      break;
    case 2:
      v78 = v33 + 152 * (a14 == 1);
      v79 = v84;
      *(_QWORD *)(v78 + 32) = v78 + 48;
      v80 = v78 + 32;
      *(_OWORD *)(v80 - 16) = v79;
      *(_QWORD *)(v80 + 8) = 0x400000000;
      if (LODWORD(v85[1]))
        sub_22E8BB370(v80, (uint64_t)v85);
      break;
    case 4:
      v41 = v84;
      v42 = *(_OWORD *)v85;
      v40 = v33 + 152 * (a14 == 1);
LABEL_23:
      *(_OWORD *)(v40 + 16) = v41;
      *(_OWORD *)(v40 + 32) = v42;
      break;
    default:
      break;
  }
  v32 = v81;
  if ((v82 & 0x7FFFFFFF) == 2 && v85[0] != &v86)
    free(v85[0]);
  if ((*(_DWORD *)(*v81 + 152 * (a14 == 1)) & 0x7FFFFFFF) != 4)
  {
LABEL_30:
    if (a6 >= a4)
      v45 = a4;
    else
      v45 = a6;
    v46 = v45;
    if (!v45)
    {
LABEL_54:
      v44 = 0;
      goto LABEL_55;
    }
    while (1)
    {
      v47 = *a3++;
      if ((*(_BYTE *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      {
        sub_22ED06388(&v82, a1, *a5);
        if (a14 == 1)
          v48 = 0;
        else
          v48 = v24;
        v49 = *v32;
        v50 = (int *)(v49 + 152 * v48);
        v51 = *v50;
        if ((*v50 & 0x7FFFFFFF) == 2)
        {
          v52 = v49 + 152 * v48;
          v53 = *(void **)(v52 + 32);
          if (v53 != (void *)(v52 + 48))
          {
            free(v53);
            v51 = *v50;
          }
        }
        v54 = v51 & 0x80000000;
        v55 = v82 & 0x7FFFFFFF;
        *v50 = v82 & 0x7FFFFFFF | v54;
        *v50 = v82 & 0x80000000 | v55;
        *(_QWORD *)(v49 + 152 * v48 + 8) = v83;
        switch(v55)
        {
          case 0:
            v56 = v49 + 152 * v48;
            v57 = v84;
            v58 = *(_OWORD *)v85;
            v59 = v86;
            *(_QWORD *)(v56 + 64) = v87;
            *(_OWORD *)(v56 + 48) = v59;
            goto LABEL_44;
          case 1:
            v60 = v49 + 152 * v48;
            *(_OWORD *)(v60 + 16) = v84;
            v61 = *(_OWORD *)v85;
            v62 = v86;
            v63 = v88;
            *(_OWORD *)(v60 + 64) = v87;
            *(_OWORD *)(v60 + 80) = v63;
            *(_OWORD *)(v60 + 32) = v61;
            *(_OWORD *)(v60 + 48) = v62;
            v64 = v89;
            v65 = v90;
            v66 = v91;
            *(_QWORD *)(v60 + 144) = v92;
            *(_OWORD *)(v60 + 112) = v65;
            *(_OWORD *)(v60 + 128) = v66;
            *(_OWORD *)(v60 + 96) = v64;
            break;
          case 2:
            v67 = v49 + 152 * v48;
            v68 = v84;
            *(_QWORD *)(v67 + 32) = v67 + 48;
            v69 = v67 + 32;
            *(_OWORD *)(v69 - 16) = v68;
            *(_QWORD *)(v69 + 8) = 0x400000000;
            if (LODWORD(v85[1]))
              sub_22E8BB370(v69, (uint64_t)v85);
            break;
          case 4:
            v57 = v84;
            v58 = *(_OWORD *)v85;
            v56 = v49 + 152 * v48;
LABEL_44:
            *(_OWORD *)(v56 + 16) = v57;
            *(_OWORD *)(v56 + 32) = v58;
            break;
          default:
            break;
        }
        if ((v82 & 0x7FFFFFFF) == 2 && v85[0] != &v86)
          free(v85[0]);
        v32 = v81;
        if ((*(_DWORD *)(*v81 + 152 * v48) & 0x7FFFFFFF) == 4)
          break;
      }
      ++a5;
      ++v24;
      if (!--v46)
        goto LABEL_54;
    }
  }
  v44 = 1;
LABEL_55:
  sub_22EB48E64(a1);
  return v44;
}

uint64_t sub_22ED08A7C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(unsigned int *)(a1 + 2976);
  if (152 * a2 > 3648 - (int)v4)
  {
    result = sub_22E3CD3D4(a1 + 2864, 152 * a2, 3);
  }
  else
  {
    result = a1 + v4 + 2984;
    *(_DWORD *)(a1 + 2976) = v4 + 152 * a2;
  }
  if (a2)
  {
    v6 = result;
    v7 = a2;
    do
    {
      *(_DWORD *)v6 = 5;
      v8 = *(_QWORD *)(v6 + 16) & 0xFFFFFFFC04000000 | 0x20000000;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = v8;
      *(_QWORD *)(v6 + 56) = 0;
      v6 += 152;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22ED08B24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, char a9, char a10, char a11)
{
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void *v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  __int16 v53;
  int *v54;
  int v55;
  int *v56;
  unsigned int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  void *v74;
  char v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  int v97;
  int v98;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106[2];
  unint64_t v107;
  int *v108;
  int v109[8];
  int v110[8];
  uint64_t v111;
  uint64_t v112;
  void *v113[2];
  void *v114[2];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _QWORD v122[10];

  v122[8] = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
  else
    v19 = 0;
  if (!v19)
    v18 = sub_22F10CF48(v18);
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if (!v21 || (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_9;
    v21 = sub_22F10CF48(v21);
    if (!v21)
      goto LABEL_9;
    v22 = *(_DWORD *)(v21 + 16);
  }
  if ((v22 & 0x100000) != 0)
  {
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v21)
      {
        v100 = *(_DWORD *)(v21 + 16);
        if ((v100 & 0xFE) == 0x28)
          continue;
      }
      v21 = sub_22F10CF48(v21);
      v100 = *(_DWORD *)(v21 + 16);
    }
    while ((v100 & 0x100000) != 0);
  }
  v20 = *(_QWORD *)(v21 + 32);
LABEL_9:
  v23 = (const void *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  result = sub_22E3BA850(a7 + 2704, v23);
  if (!v25)
    return result;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 4) != 0)
  {
    v26 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v111) = 0;
    v27 = sub_22F110500((uint64_t)&v111, v26);
    if (v27)
    {
      if (*(_QWORD *)(v27 + 24) <= 0xFuLL && (*(_BYTE *)(v27 + 17) & 4) == 0)
      {
        sub_22EFF605C(a5);
        result = sub_22EDC6650(a1, a2, v28, 1);
        if ((result & 1) != 0)
          return result;
        v29 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
        if (!v29 || *(unsigned __int8 *)(v29 + 16) - 27 <= 0xFFFFFFFD)
          v29 = sub_22F10CF48(v29);
        v20 = *(_QWORD *)(v29 + 24);
        v30 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (!v30 || (v31 = *(_DWORD *)(v30 + 16), (v31 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            goto LABEL_21;
          v30 = sub_22F10CF48(v30);
          if (!v30)
            goto LABEL_21;
          v31 = *(_DWORD *)(v30 + 16);
        }
        if ((v31 & 0x100000) != 0)
        {
          do
          {
            v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v30)
            {
              v102 = *(_DWORD *)(v30 + 16);
              if ((v102 & 0xFE) == 0x28)
                continue;
            }
            v30 = sub_22F10CF48(v30);
            v102 = *(_DWORD *)(v30 + 16);
          }
          while ((v102 & 0x100000) != 0);
        }
        v20 = *(_QWORD *)(v30 + 32);
      }
    }
  }
LABEL_21:
  if ((a11 & 1) != 0)
    goto LABEL_28;
  result = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v32 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
  else
    v32 = 0;
  if (!v32)
    result = sub_22F10CF48(result);
  if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_28:
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) + 160) & 3) != 1)
    {
LABEL_38:
      v110[0] = 0;
      v111 = 0;
      v106[0] = 3;
      *(_QWORD *)v109 = *(unsigned int *)(a1 + 1704);
      sub_22EB4DDB8(a1 + 3688, v110, v109, (__int16 *)(a1 + 1693), &v111, v106);
      v39 = *(unsigned int *)(a1 + 3696);
      v40 = v39 - 2;
      v41 = *(_QWORD *)(a1 + 3688);
      v42 = *(_DWORD *)(v41 + 576 * (v39 - 2));
      if (v42 == 5)
      {
        *(_BYTE *)(v41 + 576 * v39 - 4) = *(_BYTE *)(v41 + 576 * v40 + 572);
        v43 = 1;
      }
      else if (v42 == 2)
      {
        *(_BYTE *)(v41 + 576 * v39 - 4) = 1;
        v43 = *(_BYTE *)(v41 + 576 * v40 + 573) != 0;
      }
      else
      {
        v43 = 0;
        *(_BYTE *)(v41 + 576 * v39 - 4) = 0;
      }
      v44 = v41 + 576 * v39;
      *(_BYTE *)(v44 - 3) = v43;
      *(_WORD *)(a1 + 1693) = 0;
      if (*(_DWORD *)(a1 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v44 - 560));
        sub_22EAEAE08(a1 + 1840, (uint64_t *)(v44 - 496));
      }
      v45 = sub_22ED060FC(a7, 1u, 0, 0);
      *(_QWORD *)v45 = a2;
      *(_QWORD *)(v45 + 8) = a3;
      v46 = *(_BYTE *)(v45 + 104) & 0xF3;
      *(_QWORD *)(v45 + 112) = *(_QWORD *)(v45 + 112) & 0xFFFFFFFC04000000 | 0x20000000;
      *(_QWORD *)(v45 + 144) = a6;
      *(_QWORD *)(v45 + 152) = 0;
      *(_QWORD *)(v45 + 120) = v20;
      *(_QWORD *)(v45 + 128) = a6;
      *(_QWORD *)(v45 + 136) = a6;
      *(_BYTE *)(v45 + 104) = v46 | 1;
      *(_DWORD *)(v45 + 108) = 1;
      if ((a9 & 1) == 0 && (*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) + 160) & 3) == 1)
      {
        *(_BYTE *)(v45 + 104) &= ~1u;
        v47 = 10;
LABEL_76:
        *(_BYTE *)(v45 + 105) = v47;
        return sub_22EB48E64(a1);
      }
      v48 = *(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0;
      v49 = *(_QWORD *)v48;
      if (*(_QWORD *)v48 && *(_BYTE *)(v49 + 16) == 39
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
        && (v49 = sub_22F10CF48(v49)) != 0)
      {
        v48 = *(_QWORD *)(v49 + 32) & 0xFFFFFFFFFFFFFFF0;
      }
      v50 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
      v51 = *(_DWORD *)(a7 + 2960);
      v52 = *(_QWORD *)(a5 + 8);
      v53 = sub_22F003E64(a5, *(_QWORD *)(a1 + 88), 0);
      sub_22ED02038((unsigned int *)&v111, a1, v51, v52, v53, (uint64_t)a2, v50);
      v54 = *(int **)(v45 + 48);
      v55 = *v54;
      if ((*v54 & 0x7FFFFFFF) == 2)
      {
        v56 = (int *)*((_QWORD *)v54 + 4);
        if (v56 != v54 + 12)
        {
          free(v56);
          v55 = *v54;
        }
      }
      v57 = v55 & 0x80000000;
      v58 = v111 & 0x7FFFFFFF;
      *v54 = v111 & 0x7FFFFFFF | v57;
      *v54 = v111 & 0x80000000 | v58;
      *((_QWORD *)v54 + 1) = v112;
      switch(v58)
      {
        case 0:
          v59 = *(_OWORD *)v113;
          v60 = *(_OWORD *)v114;
          v61 = v115;
          *((_QWORD *)v54 + 8) = v116;
          *((_OWORD *)v54 + 3) = v61;
          goto LABEL_57;
        case 1:
          *((_OWORD *)v54 + 1) = *(_OWORD *)v113;
          v82 = *(_OWORD *)v114;
          v83 = v115;
          v84 = v117;
          *((_OWORD *)v54 + 4) = v116;
          *((_OWORD *)v54 + 5) = v84;
          *((_OWORD *)v54 + 2) = v82;
          *((_OWORD *)v54 + 3) = v83;
          v85 = v118;
          v86 = v119;
          v87 = v120;
          *((_QWORD *)v54 + 18) = v121;
          *((_OWORD *)v54 + 7) = v86;
          *((_OWORD *)v54 + 8) = v87;
          *((_OWORD *)v54 + 6) = v85;
          break;
        case 2:
          *((_QWORD *)v54 + 4) = v54 + 12;
          v103 = (uint64_t)(v54 + 8);
          *(_OWORD *)(v103 - 16) = *(_OWORD *)v113;
          *(_QWORD *)(v103 + 8) = 0x400000000;
          if (LODWORD(v114[1]))
            sub_22E8BB370(v103, (uint64_t)v114);
          break;
        case 4:
          v59 = *(_OWORD *)v113;
          v60 = *(_OWORD *)v114;
LABEL_57:
          *((_OWORD *)v54 + 1) = v59;
          *((_OWORD *)v54 + 2) = v60;
          break;
        default:
          break;
      }
      if ((v111 & 0x7FFFFFFF) == 2 && v114[0] != &v115)
        free(v114[0]);
      if ((**(_DWORD **)(v45 + 48) & 0x7FFFFFFF) == 4)
      {
        *(_BYTE *)(v45 + 104) &= ~1u;
        v47 = 2;
        goto LABEL_76;
      }
      v62 = a2[7];
      if ((v62 & 4) != 0 && *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 40))
      {
        v111 = 0;
        v112 = 0;
        v113[0] = v114;
        v113[1] = (void *)0x400000000;
        LOBYTE(v120) = 0;
        *((_QWORD *)&v120 + 1) = v122;
        v121 = 0x400000000;
        if ((sub_22E9F3C18(a1) & 1) != 0 || !(_BYTE)v120)
        {
          *(_BYTE *)(v45 + 104) &= ~1u;
          *(_BYTE *)(v45 + 105) = 15;
          if (*((_QWORD **)&v120 + 1) != v122)
            free(*((void **)&v120 + 1));
          v74 = v113[0];
          if (v113[0] == v114)
            return sub_22EB48E64(a1);
LABEL_95:
          free(v74);
          return sub_22EB48E64(a1);
        }
        if (*((_QWORD **)&v120 + 1) != v122)
          free(*((void **)&v120 + 1));
        if (v113[0] != v114)
          free(v113[0]);
      }
      v63 = *(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v63 + 8) & 0xF) != 0)
        v63 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a5 + 8));
      v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 8);
      v65 = *(_QWORD *)(*(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
      if (v64 == v65 || sub_22EAAB1B8(a1, *(unsigned int *)(a7 + 2960), v64, v65))
      {
        *(_BYTE *)(v45 + 104) &= ~1u;
        v47 = 4;
        goto LABEL_76;
      }
      v66 = *(_QWORD *)(a1 + 88);
      v67 = a2[6];
      sub_22F0D5A50(a5);
      v111 = 0;
      sub_22EFF69F0((uint64_t)v109, v66, (uint64_t)a2, 0, v67, 1, v68, &v111, 0);
      v69 = sub_22EF5B848(*(_QWORD *)(a1 + 88), a2[6], 0);
      LOBYTE(v106[0]) = -103;
      if (byte_255E04EB3)
      {
        v70 = sub_22F0D3748(153);
        ++*((_DWORD *)v70 + 2);
      }
      v107 = v69;
      v108 = v109;
      v106[0] = v106[0] & 0xF80000FF | 0x340000;
      v106[1] = 0;
      v71 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
      if (!v71 || *(unsigned __int8 *)(v71 + 16) - 27 <= 0xFFFFFFFD)
        v71 = sub_22F10CF48(v71);
      v72 = *(_QWORD *)(v71 + 24);
      v105 = v72;
      sub_22F0D5A50(a5);
      if (sub_22EE8B180(a1, v73))
      {
        *(_BYTE *)(v45 + 104) &= ~1u;
        v47 = 6;
        goto LABEL_76;
      }
      v75 = sub_22E8BBBD0(v72);
      v76 = sub_22F1133DC(&v105, *(_QWORD *)(a1 + 88));
      sub_22F0D5A50(a5);
      sub_22EFFA1EC((unsigned int *)v110, 138, (uint64_t)v106, 0, 0, 0, 0, v76, v75, v104, v77, 0, 0, 0);
      sub_22ED06388(&v111, a1, v110);
      if ((v111 & 0x7FFFFFFF) != 0)
        goto LABEL_91;
      v79 = *(_OWORD *)v114;
      *(_OWORD *)(v45 + 112) = *(_OWORD *)v113;
      *(_OWORD *)(v45 + 128) = v79;
      *(_OWORD *)(v45 + 144) = v115;
      *(_QWORD *)(v45 + 160) = v116;
      if ((a2[18] & 6) == 4)
      {
        v80 = a2[18] & 0xFFFFFFFFFFFFFFF8;
        if (v80)
        {
          if (*(_QWORD *)(v80 + 16) >= 8uLL && ((0x4800003FuLL >> SBYTE1(v113[0])) & 1) == 0)
          {
            *(_BYTE *)(v45 + 104) &= ~1u;
            v78 = 7;
            goto LABEL_92;
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 41
        && LOBYTE(v113[0]) == 1)
      {
LABEL_91:
        *(_BYTE *)(v45 + 104) &= ~1u;
        v78 = 6;
      }
      else
      {
        v81 = sub_22ED0649C(a1, a2, *(unsigned int *)(a7 + 2960), 0, 0, 0);
        if (v81)
        {
          *(_BYTE *)(v45 + 104) &= ~1u;
          *(_BYTE *)(v45 + 105) = 9;
          *(_QWORD *)(v45 + 120) = v81;
          goto LABEL_93;
        }
        if ((*(_BYTE *)((*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) + 84) & 0x10) == 0
          || !sub_22E47DA60((uint64_t)a2))
        {
          goto LABEL_93;
        }
        sub_22EFC8E88((uint64_t)a2);
        v89 = *v88;
        v90 = *((unsigned int *)v88 + 2);
        if ((_DWORD)v90 && *(_WORD *)(*v89 + 32) != 327)
        {
          v91 = 8 * v90 - 8;
          v92 = *v88;
          do
          {
            v93 = v92[1];
            ++v92;
            v91 -= 8;
          }
          while (*(_WORD *)(v93 + 32) != 327);
        }
        do
        {
          v95 = *v89++;
          v94 = v95;
        }
        while (*(_WORD *)(v95 + 32) != 327);
        if (*(_DWORD *)(v94 + 36) == 7)
        {
          v96 = *(int **)(v94 + 40);
          v97 = *v96;
          v98 = *(int *)((char *)v96 + 3);
          if (v97 == 1634100580 && v98 == 1953264993)
          {
LABEL_93:
            if ((v111 & 0x7FFFFFFF) != 2)
              return sub_22EB48E64(a1);
            v74 = v114[0];
            if (v114[0] == &v115)
              return sub_22EB48E64(a1);
            goto LABEL_95;
          }
        }
        *(_BYTE *)(v45 + 104) &= ~1u;
        v78 = 13;
      }
LABEL_92:
      *(_BYTE *)(v45 + 105) = v78;
      goto LABEL_93;
    }
    v33 = a3;
    v34 = a6 & 0xFFFFFFFFFFFFFFF0;
    v35 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
    if (!v35 || (v36 = *(_DWORD *)(v35 + 16), (v36 & 0xFE) != 0x28))
    {
      v37 = a6;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_32;
      v35 = sub_22F10CF48(v35);
      if (!v35)
      {
        v37 = a6;
        goto LABEL_32;
      }
      v36 = *(_DWORD *)(v35 + 16);
    }
    if ((v36 & 0x100000) != 0)
    {
      do
      {
        v35 = *(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v35)
        {
          v101 = *(_DWORD *)(v35 + 16);
          if ((v101 & 0xFE) == 0x28)
            continue;
        }
        v35 = sub_22F10CF48(v35);
        v101 = *(_DWORD *)(v35 + 16);
      }
      while ((v101 & 0x100000) != 0);
    }
    v37 = *(_QWORD *)(v35 + 32);
    v34 = v37 & 0xFFFFFFFFFFFFFFF0;
LABEL_32:
    v38 = *(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0);
    a3 = v33;
    if (*(_QWORD *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != v38)
    {
      result = sub_22ECFD738(a1, v20, v37, 0, v109);
      if ((result & 1) != 0 || !a8)
      {
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        LOBYTE(v110[0]) = 0;
        v111 = 0;
        result = sub_22ECFB880(a1, v20, v37, &v111, v110);
        if ((result & 1) == 0)
          return result;
      }
    }
    goto LABEL_38;
  }
  return result;
}

void sub_22ED096FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, char a9, char a10)
{
  const void *v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t *v50;
  void **v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE v58[24];
  _OWORD v59[2];
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, unsigned int);
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[10];
  void *v71;
  uint64_t v72;
  _BYTE v73[104];
  void *v74;
  uint64_t v75;
  _BYTE v76[64];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[32];
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, unsigned int);
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v17 = (const void *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  sub_22E3BA850(a7 + 2704, v17);
  if (!v18)
    return;
  if ((a9 & 1) == 0)
  {
    v19 = a2[6];
    v20 = *(_WORD *)(v19 + 80) & 0x7F;
    switch(v20)
    {
      case '8':
        v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19) + 160);
        goto LABEL_8;
      case '7':
        v22 = *(_QWORD *)(v19 + 112);
        v23 = *(_QWORD *)(v22 + 80);
        if ((v23 & 0x4000000000000000) != 0)
          v21 = *(_QWORD *)(v22 + 16 * ((v23 >> 61) & 1) + 168);
        else
          v21 = v23 >> 63;
LABEL_8:
        if ((v21 & 3) == 1)
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          *(_OWORD *)&v58[8] = 0u;
          memset(v59, 0, sizeof(v59));
          v60 = sub_22F335800;
          v61 = 0;
          v24 = sub_22ED1F710(a7, (unint64_t)&v52);
          v25 = *(_QWORD *)a7 + 168 * *(unsigned int *)(a7 + 8);
          v26 = *(_OWORD *)v24;
          v27 = *(_OWORD *)(v24 + 16);
          v28 = *(_OWORD *)(v24 + 48);
          *(_OWORD *)(v25 + 32) = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v25 + 48) = v28;
          *(_OWORD *)v25 = v26;
          *(_OWORD *)(v25 + 16) = v27;
          *(_QWORD *)(v25 + 72) = 0;
          *(_QWORD *)(v25 + 80) = 0;
          *(_QWORD *)(v25 + 64) = 0;
          *(_OWORD *)(v25 + 64) = *(_OWORD *)(v24 + 64);
          *(_QWORD *)(v25 + 80) = *(_QWORD *)(v24 + 80);
          *(_QWORD *)(v24 + 64) = 0;
          *(_QWORD *)(v24 + 72) = 0;
          *(_QWORD *)(v24 + 80) = 0;
          *(_OWORD *)(v25 + 88) = *(_OWORD *)(v24 + 88);
          v29 = *(_OWORD *)(v24 + 152);
          v30 = *(_OWORD *)(v24 + 136);
          v31 = *(_OWORD *)(v24 + 120);
          *(_OWORD *)(v25 + 104) = *(_OWORD *)(v24 + 104);
          *(_OWORD *)(v25 + 120) = v31;
          *(_OWORD *)(v25 + 136) = v30;
          *(_OWORD *)(v25 + 152) = v29;
          ++*(_DWORD *)(a7 + 8);
          *(_QWORD *)&v77 = v59;
          sub_22E6C60B8((void ***)&v77);
          v32 = *(_QWORD *)a7 + 168 * *(unsigned int *)(a7 + 8);
          *(_QWORD *)(v32 - 120) = a7 + *(unsigned int *)(a7 + 2976) + 2984;
          *(_QWORD *)(v32 - 112) = 0;
          *(_QWORD *)(v32 - 160) = a3;
          *(_QWORD *)(v32 - 168) = a2[6];
          *(_BYTE *)(v32 - 64) &= ~1u;
          *(_BYTE *)(v32 - 63) = 10;
          return;
        }
        break;
      case '5':
        v21 = *(_QWORD *)(v19 + 168);
        goto LABEL_8;
    }
  }
  v33 = *(_DWORD *)(a7 + 2960);
  v52 = 0;
  v53 = v33;
  v54 = 0;
  v55 = 0;
  v56 = v58;
  v57 = 0x400000000;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = v70;
  v69 = 0x800000000;
  v70[8] = 0;
  v70[9] = 0;
  v71 = v73;
  v72 = 0x400000000;
  v73[96] = 0;
  v74 = v76;
  v75 = 0x400000000;
  v50 = 0;
  v34 = sub_22EDC6B5C(a1, a2, a6, (uint64_t)&v50, (uint64_t)&v52);
  if (v34)
  {
    v36 = v34;
    v78 = 0uLL;
    *(_QWORD *)&v79 = 0;
    v80 = 0u;
    memset(v81, 0, sizeof(v81));
    v82 = sub_22F335800;
    v83 = 0;
    v37 = sub_22ED1F710(a7, (unint64_t)&v77);
    v38 = *(_QWORD *)a7 + 168 * *(unsigned int *)(a7 + 8);
    v39 = *(_OWORD *)v37;
    v40 = *(_OWORD *)(v37 + 16);
    v41 = *(_OWORD *)(v37 + 48);
    *(_OWORD *)(v38 + 32) = *(_OWORD *)(v37 + 32);
    *(_OWORD *)(v38 + 48) = v41;
    *(_OWORD *)v38 = v39;
    *(_OWORD *)(v38 + 16) = v40;
    *(_QWORD *)(v38 + 72) = 0;
    *(_QWORD *)(v38 + 80) = 0;
    *(_QWORD *)(v38 + 64) = 0;
    *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + 64);
    *(_QWORD *)(v38 + 80) = *(_QWORD *)(v37 + 80);
    *(_QWORD *)(v37 + 64) = 0;
    *(_QWORD *)(v37 + 72) = 0;
    *(_QWORD *)(v37 + 80) = 0;
    *(_OWORD *)(v38 + 88) = *(_OWORD *)(v37 + 88);
    v42 = *(_OWORD *)(v37 + 152);
    v43 = *(_OWORD *)(v37 + 136);
    v44 = *(_OWORD *)(v37 + 120);
    *(_OWORD *)(v38 + 104) = *(_OWORD *)(v37 + 104);
    *(_OWORD *)(v38 + 120) = v44;
    *(_OWORD *)(v38 + 136) = v43;
    *(_OWORD *)(v38 + 152) = v42;
    ++*(_DWORD *)(a7 + 8);
    v51 = (void **)v81;
    sub_22E6C60B8(&v51);
    v45 = a7 + *(unsigned int *)(a7 + 2976) + 2984;
    v46 = *(_QWORD *)a7 + 168 * *(unsigned int *)(a7 + 8);
    *(_QWORD *)(v46 - 120) = v45;
    *(_QWORD *)(v46 - 112) = 0;
    *(_QWORD *)(v46 - 160) = a3;
    *(_QWORD *)(v46 - 168) = a2[6];
    v47 = *(_BYTE *)(v46 - 64);
    *(_BYTE *)(v46 - 63) = 3;
    *(_BYTE *)(v46 - 64) = v47 & 0xF2;
    *(_DWORD *)(v46 - 60) = 1;
    sub_22ECF93D4(*(_QWORD *)(a1 + 88), v36, (unint64_t)&v52, (uint64_t)&v77);
    v48 = v77;
    v49 = v78;
    *(_OWORD *)(v46 - 24) = v79;
    *(_OWORD *)(v46 - 40) = v49;
    *(_OWORD *)(v46 - 56) = v48;
  }
  else
  {
    sub_22ED08B24(a1, v50, a3, v35, a5, a6, a7, a8, a9, 0, a10);
  }
  if (v74 != v76)
    free(v74);
  if (v71 != v73)
    free(v71);
  if (v68 != v70)
    free(v68);
  sub_22E89277C(&v56);
}

void sub_22ED09B88(_QWORD *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
  {
    v11 = 8 * v6;
    v12 = *(uint64_t **)a2;
    do
    {
      v13 = *v12;
      v14 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = *(_DWORD *)(v14 + 28) & 0x7F;
      if (v15 <= 0x2F && ((1 << v15) & 0xC00000060000) != 0)
      {
        v14 = sub_22EFBAEA4(*v12 & 0xFFFFFFFFFFFFFFFCLL);
        v15 = *(_DWORD *)(v14 + 28) & 0x7F;
      }
      if (v15 == 29)
        v17 = (_QWORD *)v14;
      else
        v17 = 0;
      if (v17)
        v14 = v17[6];
      v18 = *(_QWORD *)(a5 + 2968);
      if (!(_DWORD)v18)
      {
LABEL_22:
        if (v17)
        {
          sub_22ED07F48(a1, v17, v13, 0, a6, (uint64_t)a3, a4, a5, 0, 0, 1u, 0, 0);
          if (sub_22ECF9668(*(_BYTE *)(a5 + 2972), v14))
          {
            v21 = *v12;
            v24 = a3[1];
            v25 = *a3;
            sub_22ED07F48(a1, v17, v21, 0, a6, (uint64_t)&v24, 2uLL, a5, 0, 0, 1u, 0, 1);
          }
        }
        else if (!a6)
        {
          sub_22ED0475C((uint64_t)a1, v14, v13, 0, (uint64_t)a3, a4, a5, 0, 0, 1, 0, 0, 0, 0, 0);
          if (sub_22ECF9668(*(_BYTE *)(a5 + 2972), v14))
          {
            v22 = *v12;
            v24 = a3[1];
            v25 = *a3;
            sub_22ED0475C((uint64_t)a1, v14, v22, 0, (uint64_t)&v24, 2uLL, a5, 0, 0, 1, 0, 0, 0, 0, 1);
          }
        }
        goto LABEL_28;
      }
      if ((*(_QWORD *)(v14 + 40) & 7) == 6)
      {
        v19 = *(_DWORD *)(*(_QWORD *)(v14 + 40) & 0xFFFFFFFFFFFFFFF8);
        if (v19)
        {
          if (v19 == (_DWORD)v18)
            goto LABEL_22;
          if ((v18 & 0xFF00000000) != 0 && v18 <= 0x21)
          {
            if (((1 << v18) & 0x300030000) != 0)
            {
              v20 = 34;
            }
            else
            {
              if (v18 != 31)
                goto LABEL_28;
              v20 = 30;
            }
            if (v19 == v20)
              goto LABEL_22;
          }
        }
      }
LABEL_28:
      ++v12;
      v11 -= 8;
    }
    while (v11);
  }
}

void sub_22ED09E00(_QWORD *a1, int a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t *v12;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD v43[3];
  __int16 v44;
  char v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 45)
    {
      v12 = a4;
      v15 = a1[11];
      if (!sub_22EE8B180(a1, a3) || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v8 + 24)) + 74) & 2) != 0)
      {
        v16 = sub_22F114198(*(_QWORD *)(v8 + 24));
        if (sub_22EFC3500(v16))
        {
          v33 = 0;
          v34 = v36;
          v35 = 0x800000000;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = a1;
          v41 = (v15 + 16 * a2 + 15280) | 6;
          v42 = a3;
          sub_22EFC6D6C((uint64_t)v43, v41);
          v43[1] = 0;
          v43[2] = 0;
          v44 = 0;
          v45 = 1;
          v46 = 1;
          sub_22EC56024((uint64_t)&v33);
          v17 = sub_22F114198(*(_QWORD *)(v8 + 24));
          if (v17)
            v18 = v17 + 64;
          else
            v18 = 0;
          sub_22EC611AC(a1, &v33, v18, 0);
          LOBYTE(v46) = 0;
          if ((_DWORD)v35)
          {
            v19 = (uint64_t *)v34;
            v32 = a5 - 1;
            v20 = (uint64_t)(v12 + 1);
            v21 = 8 * v35;
            v22 = (uint64_t)a1;
            do
            {
              v23 = *v19++;
              v24 = *v12;
              v25 = v12;
              v26 = a6;
              v27 = a7;
              v28 = *(_QWORD *)(v24 + 8);
              v29 = sub_22F003E64(v24, *(_QWORD *)(v22 + 88), 0);
              v30 = v28;
              a7 = v27;
              a6 = v26;
              v12 = v25;
              sub_22ED08414(v22, v23, v30, v29, v20, v32, a6, a7);
              v21 -= 8;
            }
            while (v21);
            if ((_BYTE)v46)
            {
              if ((_DWORD)v33 == 5)
              {
                sub_22EC64D18(v40, (uint64_t)&v33);
              }
              else if (v38 && (*(_DWORD *)(v40[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v40, (uint64_t)&v33);
              }
            }
          }
          if (v37)
          {
            v31 = sub_22EC6CBD0(v37);
            MEMORY[0x2348A0E9C](v31, 0x10E0C409F09D3C3);
          }
          if (v34 != v36)
            free(v34);
        }
      }
    }
  }
}

uint64_t sub_22ED0A07C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  void *v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67[3];

  v54 = 0;
  v66 = 3;
  v67[0] = 0;
  v65 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, v67, (int *)&v65, (__int16 *)(a1 + 1693), &v54, &v66);
  v12 = *(unsigned int *)(a1 + 3696);
  v13 = v12 - 2;
  v14 = *(_QWORD *)(a1 + 3688);
  v15 = *(_DWORD *)(v14 + 576 * (v12 - 2));
  if (v15 == 5)
  {
    *(_BYTE *)(v14 + 576 * v12 - 4) = *(_BYTE *)(v14 + 576 * v13 + 572);
    v16 = 1;
  }
  else if (v15 == 2)
  {
    *(_BYTE *)(v14 + 576 * v12 - 4) = 1;
    v16 = *(_BYTE *)(v14 + 576 * v13 + 573) != 0;
  }
  else
  {
    v16 = 0;
    *(_BYTE *)(v14 + 576 * v12 - 4) = 0;
  }
  v17 = v14 + 576 * v12;
  *(_BYTE *)(v17 - 3) = v16;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v17 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v17 - 496));
  }
  v18 = sub_22ED060FC(a5, a4, 0, 0);
  v19 = v18;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 3;
  v20 = *(_BYTE *)(v18 + 104) & 0xF3;
  *(_BYTE *)(v18 + 104) = v20;
  if (a4)
  {
    memmove((void *)(v18 + 16), a2, 8 * a4);
    *(_BYTE *)(v19 + 104) |= 1u;
    *(_DWORD *)(v19 + 108) = a4;
    if ((_DWORD)a4)
    {
      v21 = 0;
      v22 = 0;
      v23 = a4;
      v24 = a7;
      v25 = 152 * v23;
      while (1)
      {
        if (v22 >= v24)
        {
          sub_22ED06388(&v54, a1, *(_QWORD *)(a3 + 8 * v22));
          v26 = *(_QWORD *)(v19 + 48);
          v33 = *(_DWORD *)(v26 + v21);
          if ((v33 & 0x7FFFFFFF) == 2)
          {
            v34 = *(void **)(v26 + v21 + 32);
            if ((void *)(v26 + v21 + 48) != v34)
            {
              free(v34);
              v33 = *(_DWORD *)(v26 + v21);
            }
          }
          v35 = v33 & 0x80000000;
          v36 = v54 & 0x7FFFFFFF;
          v37 = v54 & 0x7FFFFFFF | v35;
          v38 = v26 + v21;
          *(_DWORD *)v38 = v37;
          *(_DWORD *)v38 = v54 & 0x80000000 | v36;
          *(_QWORD *)(v38 + 8) = v55;
          switch(v36)
          {
            case 0:
LABEL_18:
              v39 = v26 + v21;
              v40 = v56;
              v41 = v57;
              v42 = v58;
              *(_QWORD *)(v39 + 64) = v59;
              *(_OWORD *)(v39 + 48) = v42;
              goto LABEL_20;
            case 1:
LABEL_27:
              v43 = v26 + v21;
              *(_OWORD *)(v43 + 16) = v56;
              v44 = v57;
              v45 = v58;
              v46 = v60;
              *(_OWORD *)(v43 + 64) = v59;
              *(_OWORD *)(v43 + 80) = v46;
              *(_OWORD *)(v43 + 32) = v44;
              *(_OWORD *)(v43 + 48) = v45;
              v47 = v61;
              v48 = v62;
              v49 = v63;
              *(_QWORD *)(v43 + 144) = v64;
              *(_OWORD *)(v43 + 112) = v48;
              *(_OWORD *)(v43 + 128) = v49;
              *(_OWORD *)(v43 + 96) = v47;
              break;
            case 2:
LABEL_28:
              v50 = v56;
              *(_QWORD *)(v26 + v21 + 32) = v26 + v21 + 48;
              v51 = v26 + v21 + 32;
              *(_OWORD *)(v51 - 16) = v50;
              *(_QWORD *)(v51 + 8) = 0x400000000;
              if (DWORD2(v57))
                sub_22E8BB370(v51, (uint64_t)&v57);
              break;
            case 4:
LABEL_19:
              v39 = v26 + v21;
              v40 = v56;
              v41 = v57;
LABEL_20:
              *(_OWORD *)(v39 + 16) = v40;
              *(_OWORD *)(v39 + 32) = v41;
              break;
            default:
              break;
          }
        }
        else
        {
          sub_22ED026CC((_QWORD *)a1, *(int **)(a3 + 8 * v22), &v54);
          v26 = *(_QWORD *)(v19 + 48);
          v27 = *(_DWORD *)(v26 + v21);
          if ((v27 & 0x7FFFFFFF) == 2)
          {
            v28 = *(void **)(v26 + v21 + 32);
            if ((void *)(v26 + v21 + 48) != v28)
            {
              free(v28);
              v27 = *(_DWORD *)(v26 + v21);
            }
          }
          v29 = v27 & 0x80000000;
          v30 = v54 & 0x7FFFFFFF;
          v31 = v54 & 0x7FFFFFFF | v29;
          v32 = v26 + v21;
          *(_DWORD *)v32 = v31;
          *(_DWORD *)v32 = v54 & 0x80000000 | v30;
          *(_QWORD *)(v32 + 8) = v55;
          switch(v30)
          {
            case 0:
              goto LABEL_18;
            case 1:
              goto LABEL_27;
            case 2:
              goto LABEL_28;
            case 4:
              goto LABEL_19;
            default:
              break;
          }
        }
        if ((v54 & 0x7FFFFFFF) == 2 && (__int128 *)v57 != &v58)
          free((void *)v57);
        if ((*(_DWORD *)(*(_QWORD *)(v19 + 48) + v21) & 0x7FFFFFFF) == 4)
          break;
        ++v22;
        v21 += 152;
        if (v25 == v21)
          return sub_22EB48E64(a1);
      }
      *(_BYTE *)(v19 + 104) &= ~1u;
      *(_BYTE *)(v19 + 105) = 2;
    }
  }
  else
  {
    *(_BYTE *)(v18 + 104) = v20 | 1;
    *(_DWORD *)(v18 + 108) = 0;
  }
  return sub_22EB48E64(a1);
}

uint64_t sub_22ED0A498(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  unsigned int v61;
  char *v62;
  uint64_t v63;
  BOOL v64;
  void **v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  const void *v130;
  char v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  llvm **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t i;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  char v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unint64_t j;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void **v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v203;
  void **v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  uint64_t v209;
  char v210;
  char v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  char v231;
  int v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  int v269;
  int *v270;
  uint64_t v271;
  int *v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  _BOOL4 v285;
  _BOOL4 v287;
  char v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int v294;
  uint64_t v296;
  void **v297;
  uint64_t v298;
  unsigned int v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  int *v308;
  int *v309;
  uint64_t *v311;
  uint64_t *v312;
  int *v313;
  llvm *v314[2];
  unsigned int v315;
  uint64_t v316;
  int v317;
  BOOL v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  llvm **v324;
  BOOL v325;
  void **v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  void *v339;
  uint64_t v340;
  _BYTE v341[1808];
  _QWORD v342[2];
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  BOOL *v348;
  _QWORD v349[10];

  v349[8] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v317) = 0;
  v316 = 1;
  v314[0] = 0;
  v314[1] = 0;
  v315 = 0;
  LODWORD(v319) = 0;
  sub_22ED245A8((int **)&v339, (uint64_t)v314, (int *)&v319);
  v11 = a5;
  if (!(_DWORD)a5)
  {
    v60 = 0;
    v339 = v341;
    v340 = 0x200000000;
    goto LABEL_118;
  }
  v299 = a3;
  v301 = a6;
  v304 = a5;
  v307 = a2;
  v12 = 0;
  do
  {
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(_QWORD *)(a4 + 8 * v12);
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *v15;
    if (*v15)
      v17 = *(_BYTE *)(*v15 + 16) == 31;
    else
      v17 = 0;
    if (!v17)
    {
      v18 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0;
      if (*(_BYTE *)(*(_QWORD *)v18 + 16) != 31)
        goto LABEL_12;
      v16 = sub_22F10CF48(v16);
      if (!v16)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
        v18 = *(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_12:
        v19 = *(_QWORD *)v18;
        if (*(_BYTE *)(v19 + 16) != 45)
          goto LABEL_63;
        goto LABEL_13;
      }
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v19 + 16) != 45)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
LABEL_63:
      v48 = *(_QWORD *)(*(_QWORD *)(v13 + 2000) + 116);
      if ((v48 & 0x4000000000000000) != 0)
        v49 = 518;
      else
        v49 = 6;
      if (v48 < 0)
        v26 = 1030;
      else
        v26 = v49;
      v50 = v15[1];
      v51 = *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0);
      if (v51)
      {
        v52 = *(_DWORD *)(v51 + 16);
        if ((v52 & 0xFE) == 0x28)
        {
          if ((v52 & 0x100000) == 0)
            goto LABEL_83;
          do
          {
LABEL_72:
            while (1)
            {
              v51 = *(_QWORD *)(*(_QWORD *)(v51 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v51)
                break;
              v53 = *(_DWORD *)(v51 + 16);
              if ((v53 & 0xFE) != 0x28)
                break;
              if ((v53 & 0x100000) == 0)
                goto LABEL_83;
            }
            v51 = sub_22F10CF48(v51);
          }
          while ((*(_DWORD *)(v51 + 16) & 0x100000) != 0);
          goto LABEL_83;
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v51 = sub_22F10CF48(v51);
        if (v51)
        {
          if ((*(_DWORD *)(v51 + 16) & 0x100000) == 0)
            goto LABEL_83;
          goto LABEL_72;
        }
      }
      while (1)
      {
        v54 = 0;
        v55 = (uint64_t *)(v50 & 0xFFFFFFFFFFFFFFF0);
        v56 = v55[1];
        if ((v56 & 8) != 0)
          v54 = *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        LODWORD(v319) = v54;
        sub_22ED245A8((int **)&v339, (uint64_t)v314, (int *)&v319);
        v51 = *v55;
        v57 = *(unsigned __int8 *)(*v55 + 16);
        if (!*v55 || v57 != 39)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
          {
            v51 = sub_22F10CF48(v51);
            if (v51)
              goto LABEL_83;
            v51 = *v55;
            v57 = *(unsigned __int8 *)(*v55 + 16);
          }
          if (v57 != 31)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
              goto LABEL_94;
            v51 = sub_22F10CF48(v51);
            if (!v51)
              goto LABEL_94;
          }
        }
LABEL_83:
        v50 = *(_QWORD *)(v51 + 32);
      }
    }
LABEL_13:
    v20 = sub_22F114198(*(_QWORD *)(v19 + 24));
    v21 = v20;
    if (*(_QWORD *)(v20 + 128)
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v20 + 104) + 96), *(_QWORD *)(v20 + 104)), *(_QWORD *)(v21 + 128)))
    {
      v22 = sub_22EFD4DF4(v21);
      if ((_QWORD *)v22 != v23)
      {
        v24 = (_QWORD *)v22;
        v25 = v23;
        v26 = 0;
        while (1)
        {
          v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          v28 = *(_DWORD *)(v27 + 28);
          if ((v28 & 0x7E) == 0x2E)
          {
            v27 = *(_QWORD *)(v27 + 64);
            v28 = *(_DWORD *)(v27 + 28);
          }
          if ((v28 & 0x7F) == 0x38)
            break;
LABEL_61:
          if (++v24 == v25)
            goto LABEL_94;
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v29)
          v30 = *(unsigned __int8 *)(v29 + 16) - 27 > 0xFFFFFFFD;
        else
          v30 = 0;
        if (!v30)
          v29 = sub_22F10CF48(v29);
        v31 = *(_QWORD *)(v29 + 24);
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8);
        v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
        if (v33 && (v34 = *(_DWORD *)(v33 + 16), (v34 & 0xFE) == 0x28))
        {
          if ((v34 & 0x100000) != 0)
            goto LABEL_28;
        }
        else
        {
          v36 = v31 & 7 | v32;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            goto LABEL_39;
          v33 = sub_22F10CF48(v33);
          if (!v33)
            goto LABEL_39;
          for (; (*(_DWORD *)(v33 + 16) & 0x100000) != 0; v33 = sub_22F10CF48(v33))
          {
LABEL_28:
            while (1)
            {
              v33 = *(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v33)
                break;
              v35 = *(_DWORD *)(v33 + 16);
              if ((v35 & 0xFE) != 0x28)
                break;
              if ((v35 & 0x100000) == 0)
                goto LABEL_37;
            }
          }
        }
LABEL_37:
        v36 = *(_QWORD *)(v33 + 32);
        while (1)
        {
LABEL_39:
          v39 = v36 & 0xFFFFFFFFFFFFFFF0;
          v40 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v40 & 8) != 0)
            v41 = *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
          else
            v41 = 0;
          LODWORD(v319) = v41;
          sub_22ED245A8((int **)&v339, (uint64_t)v314, (int *)&v319);
          v42 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v42 & 8) != 0)
            v43 = *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          else
            v43 = 0;
          v44 = (v43 >> 9) & 3;
          if ((int)((v26 >> 9) & 3) <= v44)
            v45 = v44;
          else
            v45 = (v26 >> 9) & 3;
          v46 = *(_QWORD *)v39;
          v47 = *(unsigned __int8 *)(*(_QWORD *)v39 + 16);
          if (*(_QWORD *)v39 && v47 == 39)
            goto LABEL_56;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
          {
            v46 = sub_22F10CF48(v46);
            if (v46)
              goto LABEL_56;
            v46 = *(_QWORD *)v39;
            v47 = *(unsigned __int8 *)(*(_QWORD *)v39 + 16);
          }
          if (v47 != 31
            && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
             || (v46 = sub_22F10CF48(v46)) == 0))
          {
            v37 = 1;
            v38 = v36;
            goto LABEL_57;
          }
LABEL_56:
          v37 = 0;
          v38 = *(_QWORD *)(v46 + 32);
LABEL_57:
          v26 = (v36 | v40) & 2 | v26 & 0xFFFFF9FF | (v45 << 9);
          if ((v38 & 4) != 0 || (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v26 |= 4u;
          v36 = v38;
          if (v37)
            goto LABEL_61;
        }
      }
    }
    v26 = 0;
LABEL_94:
    sub_22E49FA0C(&v316, v26);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v12) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 6)
      LOBYTE(v317) = 1;
    ++v12;
  }
  while (v12 != v11);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v339 = v341;
  v340 = 0x200000000;
  v61 = v299;
  do
  {
    if (v340 >= HIDWORD(v340))
    {
      v319 = 0;
      v62 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      sub_22ED24978((uint64_t)&v62[904 * v340], a1);
      v65 = (void **)v339;
      if ((_DWORD)v340)
      {
        v66 = 0;
        v296 = 904 * v340;
        v297 = (void **)v339;
        do
        {
          v298 = v66;
          v300 = &v62[v66];
          v67 = (char *)v65 + v66;
          sub_22F343B54((uint64_t)&v62[v66], (uint64_t)v65 + v66);
          sub_22F343B54((uint64_t)(v300 + 176), (uint64_t)(v67 + 176));
          sub_22F343B54((uint64_t)(v300 + 352), (uint64_t)(v67 + 352));
          sub_22F343B54((uint64_t)(v300 + 528), (uint64_t)(v67 + 528));
          sub_22F343B54((uint64_t)(v300 + 704), (uint64_t)(v67 + 704));
          v68 = *((_OWORD *)v67 + 55);
          *((_QWORD *)v300 + 112) = *((_QWORD *)v67 + 112);
          *((_OWORD *)v300 + 55) = v68;
          v65 = v297;
          v66 = v298 + 904;
        }
        while (v296 != v298 + 904);
        v65 = (void **)v339;
        v69 = v340;
      }
      else
      {
        v69 = 0;
      }
      sub_22ED24884(v65, &v65[113 * v69]);
      v70 = v319;
      if (v339 != v341)
        free(v339);
      v339 = v62;
      HIDWORD(v340) = v70;
      LODWORD(v340) = v340 + 1;
    }
    else
    {
      sub_22ED24978((uint64_t)v339 + 904 * v340, a1);
      LODWORD(v340) = v340 + 1;
      v62 = (char *)v339;
    }
    v63 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v58) + 8);
    v319 = v316;
    v64 = 1;
    sub_22ED0C60C((uint64_t)&v62[904 * v58], v63, v61, 1, (v307 < 0x25) & (0x1800004000uLL >> v307), (uint64_t)&v319);
    if (!v59)
      v64 = *((_BYTE *)v339 + 904 * v58 + 880) != 0;
    v60 = v60 || *((_BYTE *)v339 + 904 * v58++ + 881) != 0;
    v59 = v64;
  }
  while (v58 != v11);
  a2 = v307;
  a6 = v301;
  a5 = v304;
  if (v64)
    goto LABEL_120;
LABEL_118:
  if (a2 <= 0x24 && ((1 << a2) & 0x1800004000) != 0)
  {
LABEL_120:
    v319 = a1;
    v320 = a4;
    v321 = a5;
    v322 = v316;
    v323 = v317;
    v324 = v314;
    v325 = v60;
    v326 = &v339;
    v327 = a6;
    v328 = &v330;
    v336 = 0;
    v71 = *(_QWORD *)(a1 + 88);
    v72 = *(_QWORD *)(v71 + 16576);
    v330 = *(_OWORD *)(v71 + 16560);
    v73 = *(_QWORD *)(v71 + 15088);
    v331 = v72;
    v329 = 0x1800000003;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 88))(v73))
    {
      v74 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16584);
      v75 = v329;
      if (v329 >= HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v75 = v329;
      }
      *((_QWORD *)v328 + v75) = v74;
      LODWORD(v329) = v329 + 1;
    }
    v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) + 120))(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088));
    v77 = v329;
    if (v76)
    {
      v78 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16592);
      if (v329 >= HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v77 = v329;
      }
      *((_QWORD *)v328 + v77) = v78;
      v77 = v329 + 1;
      LODWORD(v329) = v329 + 1;
    }
    v332 = v77;
    v334 = v77;
    v79 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16480);
    if (v77 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v77 = v329;
    }
    *((_QWORD *)v328 + v77) = v79;
    v80 = v329 + 1;
    LODWORD(v329) = v80;
    v81 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16488);
    if (v80 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v80 = v329;
    }
    *((_QWORD *)v328 + v80) = v81;
    v82 = v329 + 1;
    LODWORD(v329) = v82;
    v83 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16496);
    if (v82 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v82 = v329;
    }
    *((_QWORD *)v328 + v82) = v83;
    LODWORD(v329) = v329 + 1;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) + 48))(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088)) & 1) != 0
      || (v84 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 15096)) != 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84))
    {
      v85 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16504);
      v86 = v329;
      if (v329 >= HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v86 = v329;
      }
      *((_QWORD *)v328 + v86) = v85;
      LODWORD(v329) = v329 + 1;
    }
    v87 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16528);
    v88 = v329;
    if (v329 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v88 = v329;
    }
    *((_QWORD *)v328 + v88) = v87;
    v89 = v329 + 1;
    LODWORD(v329) = v89;
    v90 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16536);
    if (v89 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v89 = v329;
    }
    *((_QWORD *)v328 + v89) = v90;
    v91 = v329 + 1;
    LODWORD(v329) = v91;
    v92 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16544);
    if (v91 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v91 = v329;
    }
    *((_QWORD *)v328 + v91) = v92;
    LODWORD(v329) = v329 + 1;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) + 48))(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088)) & 1) != 0
      || (v93 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 15096)) != 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 48))(v93))
    {
      v94 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16552);
      v95 = v329;
      if (v329 >= HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v95 = v329;
      }
      *((_QWORD *)v328 + v95) = v94;
      LODWORD(v329) = v329 + 1;
    }
    v96 = v329;
    v335 = v329;
    v337 = v329;
    v97 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16400);
    if (v329 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v96 = v329;
    }
    *((_QWORD *)v328 + v96) = v97;
    v98 = v329 + 1;
    LODWORD(v329) = v98;
    v99 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16408);
    if (v98 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v98 = v329;
    }
    *((_QWORD *)v328 + v98) = v99;
    v100 = v329 + 1;
    LODWORD(v329) = v100;
    v101 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16416);
    if (v100 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v100 = v329;
    }
    *((_QWORD *)v328 + v100) = v101;
    v102 = v329 + 1;
    LODWORD(v329) = v329 + 1;
    v103 = *(_QWORD **)(v319 + 88);
    if ((*(_BYTE *)(v103[250] + 3) & 4) != 0)
    {
      v104 = v103[2055];
      if (v102 >= HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v102 = v329;
      }
      *((_QWORD *)v328 + v102) = v104;
      v102 = v329 + 1;
      LODWORD(v329) = v329 + 1;
      v103 = *(_QWORD **)(v319 + 88);
    }
    v105 = v103[2056];
    if (v102 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v102 = v329;
    }
    *((_QWORD *)v328 + v102) = v105;
    v106 = v329 + 1;
    LODWORD(v329) = v106;
    v107 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16456);
    if (v106 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v106 = v329;
    }
    *((_QWORD *)v328 + v106) = v107;
    v108 = v329 + 1;
    LODWORD(v329) = v108;
    v109 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16464);
    if (v108 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v108 = v329;
    }
    *((_QWORD *)v328 + v108) = v109;
    v110 = v329 + 1;
    LODWORD(v329) = v110;
    v111 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16472);
    if (v110 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v110 = v329;
    }
    *((_QWORD *)v328 + v110) = v111;
    v112 = v329 + 1;
    LODWORD(v329) = v112;
    v113 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16512);
    if (v112 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v112 = v329;
    }
    *((_QWORD *)v328 + v112) = v113;
    v114 = v329 + 1;
    LODWORD(v329) = v114;
    v115 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16520);
    if (v114 >= HIDWORD(v329))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v114 = v329;
    }
    *((_QWORD *)v328 + v114) = v115;
    v116 = v329 + 1;
    LODWORD(v329) = v116;
    v333 = v116;
    v338 = v116;
    switch(a2)
    {
      case 5u:
        if (a5 != 1)
          goto LABEL_221;
        v143 = *((unsigned int *)*v326 + 26);
        if (!(_DWORD)v143)
          goto LABEL_214;
        v144 = (uint64_t *)*((_QWORD *)*v326 + 12);
        v145 = 8 * v143;
        do
        {
          v146 = *v144++;
          v345 = v146;
          sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
          v145 -= 8;
        }
        while (v145);
        goto LABEL_213;
      case 6u:
LABEL_213:
        if (a5 == 1)
        {
LABEL_214:
          if (v325)
          {
            for (i = v336; i < v337; ++i)
            {
              v345 = *((_QWORD *)v328 + i);
              sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
            }
            v148 = *((unsigned int *)*v326 + 158);
            if ((_DWORD)v148)
            {
              v149 = (uint64_t *)*((_QWORD *)*v326 + 78);
              v150 = 8 * v148;
              do
              {
                v151 = *v149++;
                v345 = v151;
                sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
                v150 -= 8;
              }
              while (v150);
            }
          }
        }
        else
        {
LABEL_221:
          v152 = 0;
          v345 = (uint64_t)v349;
          v346 = v349;
          v347 = 8;
          LODWORD(v348) = 0;
          v153 = 1;
          do
          {
            v154 = v153;
            v343 = sub_22EF5B0AC(*(_QWORD *)(v319 + 88), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) - 24)+ 120));
            v344 = v343;
            v155 = (uint64_t)*v326 + 904 * v152;
            v156 = *(unsigned int *)(v155 + 104);
            if ((_DWORD)v156)
            {
              v157 = *(uint64_t **)(v155 + 96);
              v158 = 8 * v156;
              do
              {
                v159 = *v157;
                v160 = (uint64_t *)(*v157 & 0xFFFFFFFFFFFFFFF0);
                v161 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*v160) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
                if ((v161 & 0xFE) != 0x28
                  && (v161 & 0xFF800FF) != 0x528000B
                  && v161 - 25 >= 2)
                {
                  *(&v343 + v152) = v159;
                  if ((a2 == 5) | v154 & 1)
                    sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
                  if (a2 == 6)
                  {
                    sub_22E3BA850((uint64_t)&v345, (const void *)(v160[1] | v159 & 7));
                    if (v163)
                    {
                      v342[0] = v159;
                      v342[1] = v159;
                      sub_22ED0A07C(v319, v342, v320, v321, v327, 0, 0);
                    }
                  }
                }
                ++v157;
                v158 -= 8;
              }
              while (v158);
            }
            v153 = 0;
            v152 = 1;
          }
          while ((v154 & 1) != 0);
          if (v346 != (_QWORD *)v345)
            free(v346);
LABEL_257:
          sub_22ED0CDC0((uint64_t)&v319);
          sub_22ED0CFA8((uint64_t)&v319);
        }
        goto LABEL_466;
      case 7u:
        if (a5 != 1)
          goto LABEL_257;
        v164 = *((unsigned int *)*v326 + 26);
        if (!(_DWORD)v164)
          goto LABEL_466;
        v165 = (uint64_t *)*((_QWORD *)*v326 + 12);
        v166 = 8 * v164;
        break;
      case 8u:
        goto LABEL_200;
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0x1Au:
      case 0x1Bu:
        v120 = (a2 & 0xFFFFFFFE) == 26;
        goto LABEL_183;
      case 0xBu:
        if (a5 == 1)
          goto LABEL_466;
        v120 = 0;
LABEL_183:
        sub_22ED0D53C((uint64_t)&v319, v120);
        goto LABEL_466;
      case 0xDu:
        if (v325)
        {
          for (j = v334; j < v335; ++j)
          {
            v345 = *((_QWORD *)v328 + j);
            sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
          }
          v173 = *((unsigned int *)*v326 + 158);
          if ((_DWORD)v173)
          {
            v174 = (uint64_t *)*((_QWORD *)*v326 + 78);
            v175 = 8 * v173;
            do
            {
              v176 = *v174++;
              v345 = v176;
              sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
              v175 -= 8;
            }
            while (v175);
          }
        }
        goto LABEL_466;
      case 0xEu:
        v133 = v319;
        v134 = v320;
        v345 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16400);
        v135 = v321;
        v136 = v327;
        v137 = 1;
        goto LABEL_268;
      case 0xFu:
        sub_22ED222D4((uint64_t)&v319, 0);
        v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 2000) + 116);
        if ((v177 & 0x4000000000000000) != 0)
        {
          sub_22ED222D4((uint64_t)&v319, 1);
          v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 2000) + 116);
        }
        if (v177 < 0)
          sub_22ED222D4((uint64_t)&v319, 2);
        goto LABEL_273;
      case 0x10u:
      case 0x11u:
      case 0x20u:
      case 0x21u:
        goto LABEL_198;
      case 0x12u:
      case 0x13u:
LABEL_273:
        sub_22ED225F4((uint64_t)&v319, 0, a2 == 15);
        v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 2000) + 116);
        if ((v178 & 0x4000000000000000) != 0)
        {
          sub_22ED225F4((uint64_t)&v319, 1, a2 == 15);
          v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 2000) + 116);
        }
        if (v178 < 0)
          sub_22ED225F4((uint64_t)&v319, 2, a2 == 15);
        goto LABEL_277;
      case 0x14u:
      case 0x15u:
LABEL_277:
        v318 = a2 == 15;
        if (!v325)
          goto LABEL_466;
        v179 = *((unsigned int *)v324 + 4);
        if (!*((_DWORD *)v324 + 2))
          goto LABEL_283;
        if ((_DWORD)v179)
        {
          v180 = 4 * v179;
          v181 = (int *)*v324;
          do
          {
            if (*v181 < 0xFFFFFFFE)
              goto LABEL_378;
            ++v181;
            v180 -= 4;
          }
          while (v180);
LABEL_283:
          v181 = (int *)((char *)*v324 + 4 * v179);
        }
        else
        {
          v181 = (int *)*v324;
        }
LABEL_378:
        v306 = (uint64_t)*v324 + 4 * v179;
        if (v181 == (int *)v306)
          goto LABEL_466;
        v303 = (uint64_t)*v324 + 4 * v179;
        do
        {
          v309 = v181;
          v246 = *v181;
          v247 = v338;
          if (v338)
          {
            v248 = 0;
            v249 = v337;
            do
            {
              v250 = v336;
              if (v336 < v249)
              {
                do
                {
                  v343 = 0;
                  v344 = 0;
                  v344 = *((_QWORD *)v328 + v250);
                  v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), *((_QWORD *)v328 + v248), v246);
                  v345 = (uint64_t)&v343;
                  v346 = v342;
                  v347 = (uint64_t)&v319;
                  v348 = &v318;
                  sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22C84, (uint64_t)&v345);
                  ++v250;
                  v249 = v337;
                }
                while (v250 < v337);
                v247 = v338;
              }
              ++v248;
            }
            while (v248 < v247);
          }
          v251 = *((unsigned int *)*v326 + 158);
          if ((_DWORD)v251)
          {
            v252 = (uint64_t *)*((_QWORD *)*v326 + 78);
            v312 = &v252[v251];
            do
            {
              v253 = *v252;
              v254 = *((unsigned int *)*v326 + 158);
              if ((_DWORD)v254)
              {
                v255 = (uint64_t *)*((_QWORD *)*v326 + 78);
                v256 = 8 * v254;
                do
                {
                  v257 = *v255++;
                  v343 = 0;
                  v344 = v257;
                  v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), v253, v246);
                  v345 = (uint64_t)&v343;
                  v346 = v342;
                  v347 = (uint64_t)&v319;
                  v348 = &v318;
                  sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22D38, (uint64_t)&v345);
                  v256 -= 8;
                }
                while (v256);
              }
              if ((*(_BYTE *)(*(_QWORD *)(v319 + 72) + 104) & 0x20) != 0)
              {
                v343 = 0;
                v344 = 0;
                v344 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v253 & 0xFFFFFFFFFFFFFFF0)) + 32);
                v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), v253, v246);
                v345 = (uint64_t)&v343;
                v346 = v342;
                v347 = (uint64_t)&v319;
                v348 = &v318;
                sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22D88, (uint64_t)&v345);
              }
              ++v252;
            }
            while (v252 != v312);
          }
          v258 = (unsigned int *)(v309 + 1);
          while (v258 != (unsigned int *)v303)
          {
            v259 = *v258++;
            if (v259 <= 0xFFFFFFFD)
            {
              v181 = (int *)(v258 - 1);
              goto LABEL_399;
            }
          }
          v181 = (int *)v303;
LABEL_399:
          ;
        }
        while (v181 != (int *)v306);
        goto LABEL_466;
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Cu:
      case 0x1Du:
        if (!v325)
          goto LABEL_466;
        v117 = *((unsigned int *)v324 + 4);
        if (!*((_DWORD *)v324 + 2))
          goto LABEL_181;
        if ((_DWORD)v117)
        {
          v118 = 4 * v117;
          v119 = (int *)*v324;
          do
          {
            if (*v119 < 0xFFFFFFFE)
              goto LABEL_355;
            ++v119;
            v118 -= 4;
          }
          while (v118);
LABEL_181:
          v119 = (int *)((char *)*v324 + 4 * v117);
        }
        else
        {
          v119 = (int *)*v324;
        }
LABEL_355:
        v305 = (uint64_t)*v324 + 4 * v117;
        if (v119 == (int *)v305)
          goto LABEL_466;
        v302 = (uint64_t)*v324 + 4 * v117;
        do
        {
          v308 = v119;
          v232 = *v119;
          v233 = v332;
          v234 = v333;
          if (v332 < (unint64_t)v333)
          {
            v235 = v335;
            do
            {
              v236 = v334;
              if (v334 < v235)
              {
                do
                {
                  v343 = 0;
                  v344 = 0;
                  v344 = *((_QWORD *)v328 + v236);
                  v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), *((_QWORD *)v328 + v233), v232);
                  v345 = (uint64_t)&v343;
                  v346 = v342;
                  v347 = (uint64_t)&v319;
                  sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22DD8, (uint64_t)&v345);
                  ++v236;
                  v235 = v335;
                }
                while (v236 < v335);
                v234 = v333;
              }
              ++v233;
            }
            while (v233 < v234);
          }
          if ((*(_BYTE *)(*(_QWORD *)(v319 + 72) + 104) & 0x20) != 0)
          {
            v237 = *((unsigned int *)*v326 + 158);
            if ((_DWORD)v237)
            {
              v238 = (uint64_t *)*((_QWORD *)*v326 + 78);
              v311 = &v238[v237];
              do
              {
                v239 = *v238;
                v240 = *((unsigned int *)*v326 + 384);
                if ((_DWORD)v240)
                {
                  v241 = (uint64_t *)*((_QWORD *)*v326 + 191);
                  v242 = 8 * v240;
                  do
                  {
                    v243 = *v241++;
                    v343 = 0;
                    v344 = v243;
                    v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), v239, v232);
                    v345 = (uint64_t)&v343;
                    v346 = v342;
                    v347 = (uint64_t)&v319;
                    sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22E24, (uint64_t)&v345);
                    v242 -= 8;
                  }
                  while (v242);
                }
                v343 = 0;
                v344 = 0;
                v344 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0)) + 32);
                v342[0] = sub_22EF5DD84(*(_QWORD *)(v319 + 88), v239, v232);
                v345 = (uint64_t)&v343;
                v346 = v342;
                v347 = (uint64_t)&v319;
                sub_22ED22B58(v322, v323, 0, 0, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_22ED22E70, (uint64_t)&v345);
                ++v238;
              }
              while (v238 != v311);
            }
          }
          v244 = (unsigned int *)(v308 + 1);
          while (v244 != (unsigned int *)v302)
          {
            v245 = *v244++;
            if (v245 <= 0xFFFFFFFD)
            {
              v119 = (int *)(v244 - 1);
              goto LABEL_375;
            }
          }
          v119 = (int *)v302;
LABEL_375:
          ;
        }
        while (v119 != (int *)v305);
        goto LABEL_466;
      case 0x1Eu:
      case 0x1Fu:
        v345 = (uint64_t)v349;
        v346 = v349;
        v347 = 8;
        LODWORD(v348) = 0;
        v121 = v321;
        if ((_DWORD)v321)
        {
          v122 = 0;
          do
          {
            v123 = *v326;
            v124 = (uint64_t)*v326 + 904 * v122;
            v125 = *(unsigned int *)(v124 + 280);
            if ((_DWORD)v125)
            {
              v126 = *(uint64_t **)(v124 + 272);
              v127 = 8 * v125;
              do
              {
                v128 = *v126;
                sub_22E3BA850((uint64_t)&v345, (const void *)(*v126 & 7 | *(_QWORD *)((*v126 & 0xFFFFFFFFFFFFFFF0) + 8)));
                if (v129)
                {
                  v343 = v128;
                  v344 = v128;
                  sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
                }
                ++v126;
                v127 -= 8;
              }
              while (v127);
              v123 = *v326;
            }
            if (v123[904 * v122 + 882])
            {
              v130 = (const void *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 16824) & 7 | *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v319 + 88) + 16824) & 0xFFFFFFFFFFFFFFF0) + 8));
              sub_22E3BA850((uint64_t)&v345, v130);
              if (v131)
              {
                v343 = (uint64_t)v130;
                v344 = (uint64_t)v130;
                sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
              }
            }
            ++v122;
          }
          while (v122 != v121);
          if (v346 != (_QWORD *)v345)
            free(v346);
        }
LABEL_198:
        v132 = 0;
        goto LABEL_199;
      case 0x22u:
        v132 = 1;
LABEL_199:
        sub_22ED0D138((uint64_t)&v319, v132);
        goto LABEL_200;
      case 0x23u:
      case 0x24u:
        v133 = v319;
        v134 = v320;
        v345 = *(_QWORD *)(*(_QWORD *)(v319 + 88) + 16400);
        v346 = (_QWORD *)v345;
        v135 = v321;
        v136 = v327;
        v137 = 2;
LABEL_268:
        sub_22ED0A07C(v133, &v345, v134, v135, v136, 0, v137);
        goto LABEL_466;
      case 0x25u:
      case 0x26u:
        v138 = v324;
        if (!v325)
          goto LABEL_421;
        v139 = *((unsigned int *)v324 + 4);
        v140 = (uint64_t)*v324 + 4 * v139;
        if (!*((_DWORD *)v324 + 2))
          goto LABEL_208;
        if ((_DWORD)v139)
        {
          v141 = 4 * v139;
          v142 = (int *)*v324;
          do
          {
            if (*v142 < 0xFFFFFFFE)
              goto LABEL_402;
            ++v142;
            v141 -= 4;
          }
          while (v141);
LABEL_208:
          v142 = (int *)((char *)*v324 + 4 * v139);
        }
        else
        {
          v142 = (int *)*v324;
        }
LABEL_402:
        v260 = (uint64_t)*v324 + 4 * v139;
        if (v142 == (int *)v260)
          goto LABEL_421;
        v261 = v116;
        do
        {
          if (v261)
          {
            v262 = 0;
            v263 = *v142;
            do
            {
              v264 = *((_QWORD *)v328 + v262);
              v265 = *(_QWORD *)(v319 + 88);
              if (v264 != *(_QWORD *)(v265 + 16400)
                || a2 != 38 && (a2 != 37 || (*(_BYTE *)(*(_QWORD *)(v319 + 72) + 1) & 8) == 0))
              {
                v266 = sub_22EF5DD84(v265, v264, v263);
                sub_22ED21FBC(&v319, v266, (v322 >> 2) & 1, (v322 >> 1) & 1);
                v116 = v338;
              }
              ++v262;
              v261 = v116;
            }
            while (v262 < v116);
          }
          v267 = (unsigned int *)(v142 + 1);
          while (v267 != (unsigned int *)v140)
          {
            v268 = *v267++;
            if (v268 <= 0xFFFFFFFD)
            {
              v142 = (int *)(v267 - 1);
              goto LABEL_419;
            }
          }
          v142 = (int *)v140;
LABEL_419:
          ;
        }
        while (v142 != (int *)v260);
        v138 = v324;
LABEL_421:
        v269 = *((_DWORD *)v138 + 2);
        v270 = (int *)*v138;
        v271 = *((unsigned int *)v138 + 4);
        v272 = &v270[v271];
        if (v269)
        {
          if ((_DWORD)v271)
          {
            v273 = 4 * v271;
            v274 = v270;
            while (*v274 >= 0xFFFFFFFE)
            {
              ++v274;
              v273 -= 4;
              if (!v273)
                goto LABEL_426;
            }
          }
          else
          {
            v274 = v270;
          }
        }
        else
        {
LABEL_426:
          v274 = &v270[v271];
        }
        v313 = &v270[v271];
        while (v274 != v313)
        {
          v275 = *((unsigned int *)*v326 + 26);
          if ((_DWORD)v275)
          {
            v276 = *v274;
            v277 = (uint64_t *)*((_QWORD *)*v326 + 12);
            v278 = 8 * v275;
            do
            {
              v279 = sub_22EF5DD84(*(_QWORD *)(v319 + 88), *v277, v276);
              v280 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v279 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
              if ((v280 & 0xFE) != 0x28
                && (v280 & 0xFF800FF) != 0x528000B
                && v280 - 25 >= 2)
              {
                v282 = *(_QWORD *)((v279 & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v282 & 8) != 0)
                {
                  v284 = v322;
                  v285 = (v322 & 0x600) != 0 && (*(_QWORD *)((v282 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x600) == 0;
                  v283 = (*(_QWORD *)((v282 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
                }
                else
                {
                  v283 = 0;
                  v284 = v322;
                  v285 = (v322 & 0x600) != 0;
                }
                v287 = v283 < 2 && (v284 & 0x600) == 1024;
                v288 = v282 | v279;
                if ((v288 & 4) != 0)
                  v289 = 0;
                else
                  v289 = (v284 >> 2) & 1;
                if ((v288 & 2) != 0)
                  v290 = 0;
                else
                  v290 = (v284 >> 1) & 1;
                sub_22ED21FBC(&v319, v279, v289, v290);
                if (v285)
                {
                  v291 = sub_22EF5DE18(*(_QWORD *)(v319 + 88), v279, 1);
                  sub_22ED21FBC(&v319, v291, v289, v290);
                }
                if (v287)
                {
                  v292 = sub_22EF5DE18(*(_QWORD *)(v319 + 88), v279, 2);
                  sub_22ED21FBC(&v319, v292, v289, v290);
                }
              }
              ++v277;
              v278 -= 8;
            }
            while (v278);
          }
          v293 = (unsigned int *)(v274 + 1);
          while (v293 != (unsigned int *)v272)
          {
            v294 = *v293++;
            if (v294 <= 0xFFFFFFFD)
            {
              v274 = (int *)(v293 - 1);
              goto LABEL_465;
            }
          }
          v274 = v272;
LABEL_465:
          ;
        }
LABEL_466:
        if (v328 != &v330)
          free(v328);
        goto LABEL_468;
      case 0x28u:
        v182 = *((unsigned int *)*v326 + 26);
        if ((_DWORD)v182)
        {
          v183 = (uint64_t *)*((_QWORD *)*v326 + 12);
          v184 = &v183[v182];
          do
          {
            v185 = *v183;
            v343 = 0;
            v186 = sub_22F10ACF8(*(_QWORD *)(v185 & 0xFFFFFFFFFFFFFFF0));
            v187 = sub_22E491354((unsigned int *)&v343, v186) & 0xFFFFFFFFFFFFFFF0;
            if (*(_BYTE *)(*(_QWORD *)v187 + 16) == 45
              && ((v322 & 4) != 0 || (v343 & 4) == 0)
              && ((v322 & 2) != 0 || (v343 & 2) == 0))
            {
              v188 = *((unsigned int *)*v326 + 296);
              if ((_DWORD)v188)
              {
                v189 = (void **)*((_QWORD *)*v326 + 147);
                v190 = 8 * v188;
                do
                {
                  v191 = *v189;
                  v192 = *(_QWORD *)((unint64_t)*v189 & 0xFFFFFFFFFFFFFFF0);
                  v193 = *(_QWORD *)(v192 + 40) & 0xFFFFFFFFFFFFFFF0;
                  v194 = *(_QWORD *)v193;
                  if ((*(_BYTE *)(*(_QWORD *)v193 + 8) & 0xF) != 0)
                    v194 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v192 + 40) & 0xFFFFFFFFFFFFFFF0);
                  if (v187 != (v194 & 0xFFFFFFFFFFFFFFF0)
                    && !sub_22EAAB1B8(v319, *(unsigned int *)(v327 + 2960), v187, v194 & 0xFFFFFFFFFFFFFFF0))
                  {
                    break;
                  }
                  v345 = v185;
                  v346 = v191;
                  v195 = *(_QWORD *)(v192 + 32);
                  if (((v322 & 4) != 0 || (v195 & 4) == 0 && (*(_BYTE *)((v195 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
                    && ((v322 & 2) != 0 || (v195 & 2) == 0 && (*(_BYTE *)((v195 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) == 0))
                  {
                    sub_22F40A8A8((uint64_t)&v343, *(_QWORD *)(v319 + 88), v195);
                    sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
                  }
                  ++v189;
                  v190 -= 8;
                }
                while (v190);
              }
            }
            ++v183;
          }
          while (v183 != v184);
        }
        goto LABEL_466;
      case 0x2Bu:
        if (a5 == 2)
        {
          v196 = (unsigned int *)*v326;
          v197 = *((unsigned int *)*v326 + 26);
          if ((_DWORD)v197)
          {
            v198 = (uint64_t *)*((_QWORD *)v196 + 12);
            v199 = 8 * v197;
            do
            {
              v345 = *v198;
              v200 = v345;
              v346 = (_QWORD *)sub_22EF5B0AC(*(_QWORD *)(v319 + 88), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) - 24)+ 120));
              v201 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v200 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
              if ((v201 & 0xFE) != 0x28
                && (v201 & 0xFF800FF) != 0x528000B
                && v201 - 25 >= 2)
              {
                sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
              }
              ++v198;
              v199 -= 8;
            }
            while (v199);
            v196 = (unsigned int *)*v326;
          }
          v203 = v196[252];
          if ((_DWORD)v203)
          {
            v204 = (void **)*((_QWORD *)v196 + 125);
            v205 = 8 * v203;
            do
            {
              v206 = (unint64_t)*v204;
              v345 = sub_22EF5B0AC(*(_QWORD *)(v319 + 88), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v319 + 88) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v319 + 88) + 15088) - 24)+ 120));
              v346 = (_QWORD *)v206;
              v207 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v206 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0)
                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
              if ((v207 & 0xFE) != 0x28
                && (v207 & 0xFF800FF) != 0x528000B
                && v207 - 25 >= 2)
              {
                sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
              }
              ++v204;
              v205 -= 8;
            }
            while (v205);
          }
        }
        goto LABEL_466;
      case 0x2Cu:
        v209 = 0;
        v345 = (uint64_t)v349;
        v346 = v349;
        v347 = 8;
        LODWORD(v348) = 0;
        v210 = 1;
        do
        {
          v211 = v210;
          v212 = (char *)*v326;
          v213 = (uint64_t)*v326 + 904 * v209;
          v214 = *(unsigned int *)(v213 + 104);
          if ((_DWORD)v214)
          {
            v215 = *(uint64_t **)(v213 + 96);
            v216 = 8 * v214;
            do
            {
              v217 = *v215;
              sub_22E3BA850((uint64_t)&v345, (const void *)(*v215 & 7 | *(_QWORD *)((*v215 & 0xFFFFFFFFFFFFFFF0) + 8)));
              if (v218)
              {
                v343 = v217;
                v344 = v217;
                sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
              }
              ++v215;
              v216 -= 8;
            }
            while (v216);
            v212 = (char *)*v326;
          }
          v219 = &v212[904 * v209];
          v220 = *((unsigned int *)v219 + 70);
          if ((_DWORD)v220)
          {
            v221 = (uint64_t *)*((_QWORD *)v219 + 34);
            v222 = 8 * v220;
            do
            {
              v223 = *v221;
              sub_22E3BA850((uint64_t)&v345, (const void *)(*v221 & 7 | *(_QWORD *)((*v221 & 0xFFFFFFFFFFFFFFF0) + 8)));
              if (v224)
              {
                v343 = v223;
                v344 = v223;
                sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
              }
              ++v221;
              v222 -= 8;
            }
            while (v222);
          }
          if ((*(_BYTE *)(*(_QWORD *)(v319 + 72) + 1) & 2) != 0)
          {
            v225 = (uint64_t)*v326 + 904 * v209;
            v226 = *(unsigned int *)(v225 + 456);
            if ((_DWORD)v226)
            {
              v227 = *(uint64_t **)(v225 + 448);
              v228 = 8 * v226;
              do
              {
                v229 = *v227;
                v230 = (_QWORD *)(*v227 & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v230 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 24))
                               + 76) & 0x80) != 0)
                {
                  sub_22E3BA850((uint64_t)&v345, (const void *)(v230[1] | v229 & 7));
                  if (v231)
                  {
                    v343 = v229;
                    v344 = v229;
                    sub_22ED0A07C(v319, &v343, v320, v321, v327, 0, 0);
                  }
                }
                ++v227;
                v228 -= 8;
              }
              while (v228);
            }
          }
          v210 = 0;
          v209 = 1;
        }
        while ((v211 & 1) != 0);
        if (v346 != (_QWORD *)v345)
          free(v346);
LABEL_200:
        sub_22ED0CDC0((uint64_t)&v319);
        goto LABEL_466;
      default:
        goto LABEL_466;
    }
    while (2)
    {
      v345 = *v165;
      v167 = sub_22F10ACF8(*(_QWORD *)(v345 & 0xFFFFFFFFFFFFFFF0));
      v168 = *(_QWORD *)(v167 & 0xFFFFFFFFFFFFFFF0);
      v169 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v168 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v170 = v169 - 25;
      if ((v169 & 0xFE) == 0x28)
      {
        if (v170 > 1)
          goto LABEL_255;
LABEL_249:
        if (*(_BYTE *)(v168 + 16) != 26
          && (v169 != 26 || (v168 = sub_22F10CF48(*(_QWORD *)(v167 & 0xFFFFFFFFFFFFFFF0))) == 0)
          || (sub_22E47E1B0(v168) & 0xCFFFFFFFFLL) == 0 && (*(_BYTE *)(v168 + 20) & 3) == 0)
        {
          sub_22ED0A07C(v319, &v345, v320, v321, v327, 0, 0);
        }
      }
      else if ((v169 & 0xFF800FF) != 0x528000B || v170 < 2)
      {
        goto LABEL_249;
      }
LABEL_255:
      ++v165;
      v166 -= 8;
      if (!v166)
        goto LABEL_466;
      continue;
    }
  }
LABEL_468:
  sub_22ED24884((void **)v339, (void **)v339 + 113 * v340);
  if (v339 != v341)
    free(v339);
  return llvm::deallocate_buffer(v314[0], (void *)(4 * v315));
}

uint64_t sub_22ED0C60C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  int v41;
  _BOOL4 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  BOOL v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;

  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (v12 && (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) == 0x28))
  {
    if ((v13 & 0x100000) != 0)
    {
      do
      {
LABEL_4:
        while (1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v12)
            break;
          v14 = *(_DWORD *)(v12 + 16);
          if ((v14 & 0xFE) != 0x28)
            break;
          if ((v14 & 0x100000) == 0)
            goto LABEL_13;
        }
        v12 = sub_22F10CF48(v12);
      }
      while ((*(_DWORD *)(v12 + 16) & 0x100000) != 0);
    }
  }
  else
  {
    v15 = v11 | a2 & 7;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_14;
    v12 = sub_22F10CF48(v12);
    if (!v12)
      goto LABEL_14;
    if ((*(_DWORD *)(v12 + 16) & 0x100000) != 0)
      goto LABEL_4;
  }
LABEL_13:
  v15 = *(_QWORD *)(v12 + 32);
LABEL_14:
  v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    v16 = *(_QWORD *)(sub_22EF5F824(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 88), v15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
  v72 = v16 & 0xFFFFFFFFFFFFFFF0;
  v18 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v19 = 0;
  if (*(_BYTE *)(a1 + 880))
    v20 = 1;
  else
    v20 = v19 == 0;
  v21 = v20;
  *(_BYTE *)(a1 + 880) = v21;
  if (*(_BYTE *)(a1 + 881))
  {
    v22 = 1;
  }
  else
  {
    v22 = sub_22F110E9C(v18);
    v18 = *v17;
  }
  *(_BYTE *)(a1 + 881) = v22;
  if ((v18 && *(_BYTE *)(v18 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v18 = sub_22F10CF48(v18)) != 0)
    && sub_22E5761BC(v18)
    || ((v23 = *v17) != 0 && *(_BYTE *)(v23 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v23 = sub_22F10CF48(v23)) != 0)
    && sub_22E509ED0(v23))
  {
    v24 = a1;
    return sub_22ED21F34(v24, (const void **)&v72);
  }
  result = *v17;
  v26 = *(unsigned __int8 *)(*v17 + 16);
  if (*v17 && v26 == 39)
    goto LABEL_48;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    if (sub_22F10CF48(result))
      goto LABEL_48;
    result = *v17;
    v26 = *(unsigned __int8 *)(*v17 + 16);
  }
  if (v26 == 32)
  {
LABEL_48:
    v75 = v17;
    result = sub_22ED21F34(a1, (const void **)&v75);
    if (!(_DWORD)result)
      return result;
    result = *v17;
    v29 = *(unsigned __int8 *)(*v17 + 16);
    if (*v17 && v29 == 39)
      goto LABEL_53;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      result = sub_22F10CF48(result);
      if (result)
      {
LABEL_53:
        v71 = 0;
        v30 = (uint64_t *)(result + 32);
LABEL_58:
        v31 = *v30;
        v70 = *v30 & 0xFFFFFFFFFFFFFFF0;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v70 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 >= 4)
        {
          v32 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFFF0) + 8);
          v33 = *(_DWORD *)a6;
          if ((v32 & 8) != 0)
            v34 = (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
          else
            v34 = 0;
          v35 = (v32 | v31) & 7;
          v36 = v33 & 0x600;
          if ((v33 & 0x600) != 0)
          {
            a6 = *(_QWORD *)(a1 + 896);
            v37 = sub_22EF5DE18(a6, v31, 1);
            v74 = sub_22EF5B848(a6, v37, 0);
            result = sub_22ED21F34(a1, (const void **)&v74);
            if ((_DWORD)v36 == 1024)
            {
              a6 = *(_QWORD *)(a1 + 896);
              v38 = sub_22EF5DE18(a6, v31, 2);
              v74 = sub_22EF5B848(a6, v38, 0);
              result = sub_22ED21F34(a1, (const void **)&v74);
            }
          }
          if (v35 != 7)
          {
            v40 = (v33 & 0x600) == 0 || v34 != 0;
            v41 = v35 + 1;
            v43 = (_DWORD)v36 != 1024 || v34 > 1;
            v68 = v43;
            v69 = v40;
            v67 = v43;
            v66 = v43;
            do
            {
              if (v41 == (v41 | v35) && ((v41 & 4) == 0 || (v33 & 4) != 0))
              {
                if ((v41 & 2) == 0
                  || (v33 & 2) != 0
                  && ((v50 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v70 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
                       v50 == 32)
                   || v50 == 39
                   || (v50 & 0xFE) == 0x28))
                {
                  v44 = *(_QWORD *)(a1 + 896);
                  if ((v71 & 1) != 0)
                  {
                    v45 = sub_22F36CC4C(v44, v31 | v41 & 7);
                  }
                  else
                  {
                    v36 = v36 & 0xFFFFFFFF00000000 | a6 & 0xE0;
                    v45 = sub_22EF5B848(v44, v31 | v41 & 7, v36);
                    LODWORD(a6) = a6 & 0xFFFFFFE0;
                  }
                  v74 = v45;
                  result = sub_22ED21F34(a1, (const void **)&v74);
                  if (!v69)
                  {
                    v46 = *(_QWORD *)(a1 + 896);
                    v47 = sub_22EF5DE18(v46, v31 | v41 & 7, 1);
                    v64 = v64 & 0xFFFFFFFF00000000 | v66 & 0xE0;
                    v73 = sub_22EF5B848(v46, v47, v66 & 0xE0);
                    result = sub_22ED21F34(a1, (const void **)&v73);
                    v66 &= 0xFFFFFFE0;
                  }
                  if (!v68)
                  {
                    v48 = *(_QWORD *)(a1 + 896);
                    v49 = sub_22EF5DE18(v48, v31 | v41 & 7, 2);
                    v65 = v65 & 0xFFFFFFFF00000000 | v67 & 0xE0;
                    v73 = sub_22EF5B848(v48, v49, v67 & 0xE0);
                    result = sub_22ED21F34(a1, (const void **)&v73);
                    v67 &= 0xFFFFFFE0;
                  }
                }
              }
              ++v41;
            }
            while (v41 != 8);
          }
        }
        return result;
      }
      result = *v17;
      v29 = *(unsigned __int8 *)(*v17 + 16);
    }
    if (v29 != 32)
      result = sub_22F10CF48(result);
    v30 = (uint64_t *)(result + 32);
    v71 = 1;
    goto LABEL_58;
  }
  v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v28 = v27;
  if (v27 == 32)
  {
    result = sub_22F10CF48(result);
    if (result)
      goto LABEL_48;
    v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v28 = v27;
  }
  if (v27 == 44)
  {
    *(_BYTE *)(a1 + 881) = 1;
    v24 = a1 + 352;
    return sub_22ED21F34(v24, (const void **)&v72);
  }
  if (v27 == 31)
  {
    v75 = v17;
    result = sub_22ED21F34(a1 + 176, (const void **)&v75);
    if ((_DWORD)result)
    {
      result = *v17;
      if (!*v17 || *(_BYTE *)(result + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
          result = sub_22F10CF48(result);
        else
          result = 0;
      }
      v51 = *(_QWORD *)(result + 32);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFEu)
         - 2 >= 4)
      {
        v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8) | v51;
        v53 = v52 & 7;
        if (v53 != 7)
        {
          v54 = *(_QWORD *)(result + 40);
          v55 = (v52 & 7) + 1;
          do
          {
            if (v55 == (v53 | v55))
            {
              v74 = sub_22F36A6C0(*(_QWORD *)(a1 + 896), v55 | v51, v54);
              result = sub_22ED21F34(a1 + 176, (const void **)&v74);
            }
            ++v55;
          }
          while (v55 != 8);
        }
      }
    }
  }
  else
  {
    if ((v28 - 55) <= 1)
    {
      *(_BYTE *)(a1 + 881) = 1;
      v24 = a1 + 528;
      return sub_22ED21F34(v24, (const void **)&v72);
    }
    if ((v28 - 29) <= 1)
    {
      *(_BYTE *)(a1 + 881) = 1;
      v24 = a1 + 704;
      return sub_22ED21F34(v24, (const void **)&v72);
    }
    if ((v27 & 0xFF800FF) == 0x6D0000B)
    {
      *(_BYTE *)(a1 + 882) = 1;
    }
    else if (a4)
    {
      if (v19)
      {
        result = sub_22EE8B180(*(_QWORD *)(a1 + 888), a3);
        if ((result & 1) == 0)
        {
          v56 = sub_22F114198(*(_QWORD *)(v19 + 24));
          result = sub_22EFD4DF4(v56);
          if ((_QWORD *)result != v57)
          {
            v58 = (_QWORD *)result;
            v59 = v57;
            do
            {
              v60 = *v58 & 0xFFFFFFFFFFFFFFFCLL;
              v61 = *(_DWORD *)(v60 + 28);
              if ((v61 & 0x7E) == 0x2E)
              {
                v60 = *(_QWORD *)(v60 + 64);
                v61 = *(_DWORD *)(v60 + 28);
              }
              if ((v61 & 0x7F) != 0x1D)
              {
                if ((a5 & 1) != 0
                  || (result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v60 + 32))(v60),
                      (*(_QWORD *)(result + 160) & 3) != 1))
                {
                  v62 = *(_QWORD *)(*(_QWORD *)(v60 + 48) & 0xFFFFFFFFFFFFFFF0);
                  if (v62)
                    v63 = *(unsigned __int8 *)(v62 + 16) - 27 > 0xFFFFFFFD;
                  else
                    v63 = 0;
                  if (!v63)
                    v62 = sub_22F10CF48(v62);
                  result = sub_22ED0C60C(a1, *(_QWORD *)(v62 + 24), a3, 0, 0, a6);
                }
              }
              ++v58;
            }
            while (v58 != v59);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ED0CDC0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 48))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 296);
    v3 = *(unsigned int *)(result + 300);
    while (v2 < v3)
    {
      for (i = *(unsigned int *)(v1 + 296); i < v3; ++i)
      {
        v5 = *(_QWORD *)(v1 + 64);
        v6 = *(_QWORD *)(v1 + 72);
        v7 = *(_QWORD *)(v6 + 8 * v2);
        v8 = *(_QWORD *)(v6 + 8 * i);
        v28 = v7;
        v29 = v8;
        result = sub_22ED0A07C(*(_QWORD *)v1, &v28, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), v5, 0, 0);
        v3 = *(unsigned int *)(v1 + 300);
      }
      ++v2;
    }
    v9 = *(uint64_t **)(v1 + 56);
    v10 = *(unsigned int *)(*v9 + 632);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(*v9 + 624);
      v12 = &v11[v10];
      do
      {
        v13 = **(_QWORD **)(v1 + 56);
        v14 = *(unsigned int *)(v13 + 1536);
        if ((_DWORD)v14)
        {
          v15 = *v11;
          v16 = *(uint64_t **)(v13 + 1528);
          v17 = 8 * v14;
          do
          {
            v18 = *v16++;
            v28 = v15;
            v29 = v18;
            result = sub_22ED0A07C(*(_QWORD *)v1, &v28, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
            v17 -= 8;
          }
          while (v17);
        }
        ++v11;
      }
      while (v11 != v12);
      v9 = *(uint64_t **)(v1 + 56);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1 + 72) + 104) & 0x20) != 0)
    {
      v19 = *(unsigned int *)(*v9 + 632);
      if ((_DWORD)v19)
      {
        v20 = *(uint64_t **)(*v9 + 624);
        v21 = 8 * v19;
        do
        {
          v22 = *v20++;
          v28 = v22;
          v29 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0)) + 32);
          result = sub_22ED0A07C(*(_QWORD *)v1, &v28, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
          v21 -= 8;
        }
        while (v21);
        v9 = *(uint64_t **)(v1 + 56);
      }
    }
    v23 = *v9;
    v24 = *(unsigned int *)(*v9 + 1536);
    if ((_DWORD)v24)
    {
      v25 = *(uint64_t **)(v23 + 1528);
      v26 = 8 * v24;
      do
      {
        v27 = *v25++;
        v28 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0)) + 32);
        v29 = v27;
        result = sub_22ED0A07C(*(_QWORD *)v1, &v28, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
        v26 -= 8;
      }
      while (v26);
    }
  }
  return result;
}

uint64_t sub_22ED0CFA8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 48))
  {
    v1 = result;
    v2 = **(_QWORD **)(result + 56);
    v3 = *(unsigned int *)(v2 + 808);
    if ((_DWORD)v3)
    {
      v4 = *(void ***)(v2 + 800);
      v5 = 8 * v3;
      do
      {
        v6 = (unint64_t)*v4++;
        v7 = *(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 32);
        v15 = v6;
        v16 = v7;
        sub_22ED0A07C(*(_QWORD *)v1, &v15, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
        v15 = v6;
        v16 = v6;
        result = sub_22ED0A07C(*(_QWORD *)v1, &v15, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
        v5 -= 8;
      }
      while (v5);
      v2 = **(_QWORD **)(v1 + 56);
    }
    v8 = *(unsigned int *)(v2 + 1712);
    if ((_DWORD)v8)
    {
      v9 = *(void ***)(v2 + 1704);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        v15 = *(_QWORD *)(*(_QWORD *)((unint64_t)*v9 & 0xFFFFFFFFFFFFFFF0) + 32);
        v16 = (unint64_t)v11;
        sub_22ED0A07C(*(_QWORD *)v1, &v15, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
        v12 = **(_QWORD **)(v1 + 56);
        result = (uint64_t)sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v12 + 704), v11);
        v13 = *(_QWORD *)(v12 + 712);
        if (v13 == *(_QWORD *)(v12 + 704))
          v14 = 724;
        else
          v14 = 720;
        if (result == v13 + 8 * *(unsigned int *)(v12 + v14))
        {
          v15 = (unint64_t)v11;
          v16 = (unint64_t)v11;
          result = sub_22ED0A07C(*(_QWORD *)v1, &v15, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 64), 0, 0);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t sub_22ED0D138(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  llvm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  const void *v39;
  char v40;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[64];
  llvm *v47[2];
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v2 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 904 * v5 + 456))
      {
        v6 = *(_QWORD *)(a1 + 64);
        v7 = *(_DWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_BYTE **)v6;
          v9 = 168 * v7;
          do
          {
            if ((v8[104] & 1) != 0 && *(_QWORD *)v8)
            {
              v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 48) & 0xFFFFFFFFFFFFFFF0);
              v11 = v10 && *(_BYTE *)(v10 + 16) == 26;
              if ((v11
                 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                 && (v10 = sub_22F10CF48(v10)) != 0)
                && (*(_QWORD *)(v10 + 16) & 0x3FFFC000000000) == 0x8000000000)
              {
                v12 = *(_QWORD *)(*(_QWORD *)v8 + 144) & 0xFFFFFFFFFFFFFFF8;
                v13 = (*(_QWORD *)(*(_QWORD *)v8 + 144) & 6) != 4 || v12 == 0;
                if (v13 || *(_QWORD *)(v12 + 16) <= 7uLL)
                {
                  v14 = v8[104] & 0x40;
                  v15 = *(_QWORD *)(*(_QWORD *)v8 + 120);
                  v16 = *(_QWORD *)(*(_QWORD *)(v15 + (v14 >> 3)) + 48);
                  v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
                  if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
                  {
                    v17 = (unint64_t)sub_22F10D2BC(v16);
                    v15 = *(_QWORD *)(*(_QWORD *)v8 + 120);
                  }
                  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 8 * ((_DWORD)v14 == 0)) + 48);
                  v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
                  if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
                    v19 = (unint64_t)sub_22F10D2BC(v18);
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 44
                    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 44)
                  {
                    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
                    v49 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8);
                    v50 = v20;
                    sub_22F3435D0((uint64_t)&v42, (uint64_t)v47, &v49);
                  }
                }
              }
            }
            v8 += 168;
            v9 -= 168;
          }
          while (v9);
        }
      }
      ++v5;
    }
    while (v5 != v2);
    v21 = *(unsigned int *)(a1 + 16);
    v42 = v46;
    v43 = v46;
    v44 = 8;
    v45 = 0;
    v22 = v47[0];
    if (v21)
    {
      v23 = v21;
      v24 = 0;
      LODWORD(v2) = v48;
      do
      {
        v25 = **(_QWORD **)(a1 + 56);
        v26 = v25 + 904 * v24;
        v27 = *(unsigned int *)(v26 + 104);
        if ((_DWORD)v27)
        {
          v28 = *(unint64_t **)(v26 + 96);
          v29 = 8 * v27;
          do
          {
            v30 = *v28;
            v31 = (uint64_t *)(*v28 & 0xFFFFFFFFFFFFFFF0);
            sub_22E3BA850((uint64_t)&v42, (const void *)(*v28 & 7 | v31[1]));
            if (v32)
            {
              if (!a2
                || ((v33 = *v31) == 0 || *(_BYTE *)(v33 + 16) != 39)
                && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
                 || (v33 = sub_22F10CF48(v33)) == 0)
                || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
                 - 25 >= 2)
              {
                v49 = v30;
                v50 = v30;
                sub_22ED0A07C(*(_QWORD *)a1, &v49, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 0, 0);
              }
            }
            ++v28;
            v29 -= 8;
          }
          while (v29);
          v25 = **(_QWORD **)(a1 + 56);
        }
        v34 = v25 + 904 * v24;
        v35 = *(unsigned int *)(v34 + 456);
        if ((_DWORD)v35)
        {
          v36 = *(unint64_t **)(v34 + 448);
          v37 = 8 * v35;
          do
          {
            v38 = *v36;
            v39 = (const void *)(*v36 & 7 | *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFFF0) + 8));
            sub_22E3BA850((uint64_t)&v42, v39);
            if (v40 && (sub_22ED22138((uint64_t)v22, v2, (unint64_t)v39, (unint64_t)v39, &v49) & 1) == 0)
            {
              v49 = v38;
              v50 = v38;
              sub_22ED0A07C(*(_QWORD *)a1, &v49, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 0, 0);
            }
            ++v36;
            v37 -= 8;
          }
          while (v37);
        }
        ++v24;
      }
      while (v24 != v23);
      if (v43 != v42)
        free(v43);
    }
    else
    {
      LODWORD(v2) = v48;
    }
  }
  else
  {
    v22 = 0;
  }
  return llvm::deallocate_buffer(v22, (void *)(16 * v2));
}

uint64_t sub_22ED0D53C(uint64_t result, char a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 48))
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 288);
    v5 = *(unsigned int *)(result + 292);
    while (v4 < v5)
    {
      for (i = *(unsigned int *)(v3 + 288); i < v5; ++i)
      {
        v7 = *(_QWORD *)(v3 + 64);
        v8 = *(_QWORD *)(v3 + 72);
        v9 = *(_QWORD *)(v8 + 8 * v4);
        v10 = *(_QWORD *)(v8 + 8 * i);
        v31 = v9;
        v32 = v10;
        result = sub_22ED0A07C(*(_QWORD *)v3, &v31, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), v7, 0, 0);
        v5 = *(unsigned int *)(v3 + 292);
      }
      ++v4;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 104) & 0x20) != 0)
    {
      v11 = **(_QWORD **)(v3 + 56);
      v12 = *(unsigned int *)(v11 + 632);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(v11 + 624);
        v14 = &v13[v12];
        do
        {
          v15 = **(_QWORD **)(v3 + 56);
          v16 = *(unsigned int *)(v15 + 1536);
          if ((_DWORD)v16)
          {
            v17 = *v13;
            v18 = *(uint64_t **)(v15 + 1528);
            v19 = 8 * v16;
            do
            {
              v20 = *v18++;
              v31 = v17;
              v32 = v20;
              result = sub_22ED0A07C(*(_QWORD *)v3, &v31, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 64), 0, 0);
              v19 -= 8;
            }
            while (v19);
          }
          ++v13;
        }
        while (v13 != v14);
        v21 = **(_QWORD **)(v3 + 56);
        v22 = *(unsigned int *)(v21 + 632);
        if ((_DWORD)v22)
        {
          v23 = *(uint64_t **)(v21 + 624);
          v24 = 8 * v22;
          do
          {
            v25 = *v23++;
            v31 = v25;
            v32 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0)) + 32);
            result = sub_22ED0A07C(*(_QWORD *)v3, &v31, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 64), 0, 0);
            v24 -= 8;
          }
          while (v24);
        }
      }
      if ((a2 & 1) == 0)
      {
        v26 = **(_QWORD **)(v3 + 56);
        v27 = *(unsigned int *)(v26 + 1536);
        if ((_DWORD)v27)
        {
          v28 = *(uint64_t **)(v26 + 1528);
          v29 = 8 * v27;
          do
          {
            v30 = *v28++;
            v31 = *(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0)) + 32);
            v32 = v30;
            result = sub_22ED0A07C(*(_QWORD *)v3, &v31, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 64), 0, 0);
            v29 -= 8;
          }
          while (v29);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22ED0D734(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  llvm *v27[2];
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  sub_22EC67598(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)v27);
  v13 = *(_DWORD *)(a7 + 8);
  if (v13)
  {
    v14 = *(uint64_t **)a7;
    v15 = 168 * v13;
    do
    {
      if (*v14)
      {
        sub_22ED0D9CC((uint64_t)v27, *v14);
        v16 = *(_QWORD *)(*v14 + 144) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*v14 + 144) & 6) == 4 && v16 != 0)
        {
          v18 = *(_QWORD *)(v16 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v18)
            sub_22ED0D9CC((uint64_t)v27, v18);
        }
      }
      v14 += 21;
      v15 -= 168;
    }
    while (v15);
  }
  v19 = v29;
  v20 = v30;
  if (v29 != v30)
  {
    do
    {
      v21 = v19[1];
      if (v21)
        v22 = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
      else
        v22 = 0;
      if (v22)
      {
        if (!a6)
        {
          LOBYTE(v25) = 0;
          BYTE3(v24) = 1;
          *(_WORD *)((char *)&v24 + 1) = 1;
          LOBYTE(v24) = a8;
          sub_22ED0475C(a1, v21, v21 | 3, 0, a4, a5, a7, 0, v24, 0, 0, v25);
          if (sub_22ECF9668(*(_BYTE *)(a7 + 2972), v21))
          {
            v32 = a4[1];
            v33 = *a4;
            LOBYTE(v25) = 1;
            BYTE3(v24) = 1;
            *(_WORD *)((char *)&v24 + 1) = 1;
            LOBYTE(v24) = a8;
            sub_22ED0475C(a1, v21, v21 | 3, 0, &v32, 2, a7, 0, v24, 0, 0, v25);
          }
        }
      }
      else
      {
        BYTE4(v24) = 0;
        WORD1(v24) = 257;
        BYTE1(v24) = a8;
        LOBYTE(v24) = 0;
        sub_22ED07F48(a1, v21, v21 | 3, 0, a6, a4, a5, a7, v24);
        if (sub_22ECF9668(*(_BYTE *)(a7 + 2972), *(_QWORD *)(v21 + 48)))
        {
          v32 = a4[1];
          v33 = *a4;
          BYTE4(v24) = 1;
          WORD1(v24) = 257;
          BYTE1(v24) = a8;
          LOBYTE(v24) = 0;
          sub_22ED07F48(a1, v21, v21 | 3, 0, a6, &v32, 2, a7, v24);
        }
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v29;
  }
  if (v19)
  {
    v30 = v19;
    operator delete(v19);
  }
  return llvm::deallocate_buffer(v27[0], (void *)(16 * v28));
}

uint64_t sub_22ED0D9CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v18 = 0;
  result = sub_22EA461AC((uint64_t *)a1, &v17, &v18);
  if ((_DWORD)result)
  {
    if (v18 != *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    {
      v4 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v18 + 8));
      if (*(_QWORD **)(a1 + 32) != v4)
      {
        v18 = 0;
        result = sub_22E3B9914(a1, v4, &v18);
        if ((_DWORD)result)
        {
          *(_QWORD *)v18 = -8192;
          *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
        v5 = *(_QWORD **)(a1 + 32);
        v6 = v4 + 2;
        if (v4 + 2 == v5)
        {
          *(_QWORD *)(a1 + 32) = v4;
        }
        else
        {
          v7 = 0;
          v8 = ((uint64_t)v4 - *(_QWORD *)(a1 + 24)) >> 4;
          do
          {
            v9 = &v6[v7];
            *((_OWORD *)v9 - 1) = *(_OWORD *)&v6[v7];
            v7 += 2;
          }
          while (v9 + 2 != v5);
          *(_QWORD *)(a1 + 32) = &v4[v7];
          if (v7 * 8)
          {
            v10 = *(unsigned int *)(a1 + 16);
            v11 = *(_QWORD *)a1 + 16 * v10;
            if (*(_DWORD *)(a1 + 8))
            {
              if ((_DWORD)v10)
              {
                v12 = 16 * v10;
                v13 = *(_QWORD *)a1;
                while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v13 += 16;
                  v12 -= 16;
                  if (!v12)
                    goto LABEL_16;
                }
              }
              else
              {
                v13 = *(_QWORD *)a1;
              }
            }
            else
            {
LABEL_16:
              v13 = *(_QWORD *)a1 + 16 * v10;
            }
            v14 = *(_QWORD *)a1 + 16 * v10;
LABEL_18:
            while (v13 != v14)
            {
              v15 = *(unsigned int *)(v13 + 8);
              if (v8 < v15)
                *(_DWORD *)(v13 + 8) = v15 - 1;
              v16 = v13 + 16;
              v13 = v11;
              if (v16 != v11)
              {
                v13 = v16;
                while ((*(_QWORD *)v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v13 += 16;
                  if (v13 == v11)
                  {
                    v13 = v11;
                    goto LABEL_18;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_22ED0DB6C(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4, int a5)
{
  _BOOL8 result;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v25;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  BOOL v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  const void *v139;
  size_t v140;
  unsigned int v141;
  int *v142;
  const void *v143;
  int v144;
  unsigned int *v145;
  unint64_t v146;
  unsigned int *v147;
  unint64_t v148;
  size_t v149;
  int v150;
  BOOL v151;
  __int16 v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157[2];

  v157[1] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  if ((a3[13] & 1) == 0)
    return a2[13] & 1;
  if ((a2[13] & 1) == 0)
    return 0;
  v10 = (uint64_t *)a1;
  v11 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v11 + 68) & 0x20) != 0)
  {
    if (*a2)
    {
      if (*a3)
      {
        if ((*(_BYTE *)(v11 + 104) & 2) != 0)
        {
          v12 = sub_22E903070(a1, 1);
          if (v12)
          {
            if ((*(_WORD *)(v12 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
            {
              v56 = a4;
              v57 = v12 - 72;
              v58 = sub_22F31C378(v12 - 72);
              v59 = sub_22F31C378(*a2);
              v60 = sub_22F31C378(*a3);
              v61 = sub_22E9FE318((uint64_t)v10, v57, *a2);
              v62 = sub_22E9FE318((uint64_t)v10, v57, *a3);
              if ((*(_WORD *)(v10[9] + 96) & 0x80) != 0)
                v63 = v58 & (v59 | v60);
              else
                v63 = 0;
              v64 = v63 ^ 1;
              if (v61 > v64 && v62 <= v64)
                return 1;
              a4 = v56;
              if (v61 <= v64 && v62 > v64)
                return 0;
            }
          }
        }
      }
    }
  }
  v13 = (a2[13] & 8) != 0 || (a3[13] & 8) != 0;
  v14 = *((_DWORD *)a2 + 14);
  v15 = v14 - v13;
  if (v14 <= v13)
    goto LABEL_59;
  v16 = 0;
  v17 = (uint64_t *)v10[9];
  v18 = *v17;
  v19 = v13;
  v20 = 152 * v13 + 16;
  v21 = a3[6] + v20;
  v22 = a2[6] + v20;
  v23 = v15;
  do
  {
    if ((v18 & 0x100) != 0)
    {
      if ((v18 & 0x200) == 0 || (v17[1] & 0x8000000000) != 0)
      {
        v28 = 0;
        goto LABEL_39;
      }
      if ((*(_DWORD *)(v22 - 16) & 0x7FFFFFFE) != 0)
        v25 = 0;
      else
        v25 = *(_BYTE *)(v22 + 3) & 1;
      if ((*(_DWORD *)(v21 - 16) & 0x7FFFFFFFu) > 1)
        v27 = 0;
      else
        v27 = *(_BYTE *)(v21 + 3) & 1;
    }
    else
    {
      v25 = (*(_DWORD *)(v22 - 16) & 0x7FFFFFFF) == 0 && (unint64_t)*(unsigned __int8 *)(v22 + 1) << 8 == 7680;
      v27 = (*(_DWORD *)(v21 - 16) & 0x7FFFFFFF) == 0 && (unint64_t)*(unsigned __int8 *)(v21 + 1) << 8 == 7680;
    }
    v28 = v25 ^ v27;
    if (v25 && (v28 & 1) != 0)
      return 0;
LABEL_39:
    v16 |= v28;
    v21 += 152;
    v22 += 152;
    --v23;
  }
  while (v23);
  if ((v16 & 1) != 0)
    return 1;
  v29 = 0;
  v30 = 0;
  v31 = 152 * v19;
  do
  {
    v32 = sub_22ED0E7D4(v10, a4, (int *)(a2[6] + v31), a3[6] + v31);
    if (v32 == 1)
    {
      v33 = *a3;
      if (*a2)
        v34 = v33 == 0;
      else
        v34 = 1;
      if (v34 || ((*((unsigned __int8 *)a2 + 104) >> 6) & 1) == (a3[13] & 0x40) >> 6)
        return 0;
      result = sub_22ED0EAE8(v10[11], *a2, v33, v14);
      if (!result)
        return result;
      v29 = 1;
    }
    else if (v32 == -1)
    {
      v30 = 1;
    }
    v31 += 152;
    --v15;
  }
  while (v15);
  if (!(v29 & 1 | ((v30 & 1) == 0)))
    return 1;
LABEL_59:
  v35 = *a2;
  v36 = *a3;
  if (a5 != 2 || !v35 || !v36 || (*(_DWORD *)(v35 + 28) & 0x7F) != 0x38 || (*(_DWORD *)(v36 + 28) & 0x7F) != 0x38)
  {
LABEL_68:
    if (a5 == 3 && v14 == 1 && v35 && v36)
    {
      result = (*(_DWORD *)(v35 + 28) & 0x7F) == 55;
      if (((*(_DWORD *)(v35 + 28) & 0x7F) == 55) != ((*(_DWORD *)(v36 + 28) & 0x7F) == 55))
        return result;
    }
    else if (!v35)
    {
      if (v36)
      {
        if ((*(_QWORD *)(v36 + 144) & 6) == 4)
        {
          v47 = *(_QWORD *)(v36 + 144) & 0xFFFFFFFFFFFFFFF8;
          if (v47)
          {
            if (*(_QWORD *)(v47 + 16) >= 8uLL)
              return 1;
          }
        }
      }
      goto LABEL_127;
    }
    v40 = (*(_QWORD *)(v35 + 144) & 6) != 4;
    v41 = *(_QWORD *)(v35 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (!v41)
      v40 = 1;
    if (v40)
      v42 = 0;
    else
      v42 = *(_QWORD *)(v41 + 16) & 0xFFFFFFFFFFFFFFF8;
    v43 = v42 != 0;
    if (v36)
    {
      if ((*(_QWORD *)(v36 + 144) & 6) == 4 && (v44 = *(_QWORD *)(v36 + 144) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v45 = *(_QWORD *)(v44 + 16);
        result = v45 > 7;
        if ((v42 != 0) != v45 > 7)
          return result;
        if (v42 && v45 >= 8)
        {
          if (v40)
            v46 = 0;
          else
            v46 = *(_QWORD *)(v41 + 16) & 0xFFFFFFFFFFFFFFF8;
          v65 = sub_22EDC93B8(v10, v46, v45 & 0xFFFFFFFFFFFFFFF8, a4, (*(_DWORD *)(v35 + 28) & 0x7F) == 56, *((_DWORD *)a2 + 27), *((_DWORD *)a3 + 27), ((*((unsigned __int8 *)a2 + 104) ^ *((unsigned __int8 *)a3 + 104)) >> 6) & 1);
          if (v65)
          {
            v66 = 0;
            if ((*(_QWORD *)(*a2 + 144) & 6) == 4)
            {
              v67 = *(_QWORD *)(*a2 + 144) & 0xFFFFFFFFFFFFFFF8;
              if (v67)
                v66 = *(_QWORD *)(v67 + 16) & 0xFFFFFFFFFFFFFFF8;
            }
            return v65 == v66;
          }
          goto LABEL_127;
        }
      }
      else
      {
        v43 = 0;
        result = 0;
        if (v42)
          return result;
      }
      if (result)
        goto LABEL_127;
      if (v43)
        goto LABEL_127;
      if ((*(_BYTE *)(v35 + 82) & 0x30) == 0)
        goto LABEL_127;
      if ((*(_BYTE *)(v36 + 82) & 0x30) == 0)
        goto LABEL_127;
      v48 = sub_22EFCB008(v35, 1);
      v49 = sub_22EFCB008(*a3, 1);
      v50 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 16);
      if (((v51 ^ v50) & 0x3FFFC000000000) != 0
        || ((v50 & 0x800000000000000) != 0) != ((v51 & 0x800000000000000) != 0)
        || !sub_22ECFA740((uint64_t)v10, v48, v49, 0))
      {
        goto LABEL_127;
      }
      v52 = (uint64_t)v10;
      v53 = *a2;
      v54 = *(_QWORD *)(*a2 + 56);
      if ((v54 & 4) != 0)
        v55 = *(unsigned __int8 **)((v54 & 0xFFFFFFFFFFFFFFF8) + 40);
      else
        v55 = 0;
      v68 = *a3;
      v69 = *(_QWORD *)(*a3 + 56);
      if ((v69 & 4) == 0)
      {
        v70 = 0;
        result = v55 != 0;
        goto LABEL_125;
      }
      v119 = *(unsigned __int8 **)((v69 & 0xFFFFFFFFFFFFFFF8) + 40);
      result = v55 != 0;
      v70 = v119 != 0;
      if (!v55 || !v119)
      {
LABEL_125:
        if (result)
          return result;
        v10 = (uint64_t *)v52;
        if (v70)
          return result;
        goto LABEL_127;
      }
      v153 = 0;
      v156 = v119;
      v157[0] = v55;
      if ((sub_22E9F4DA0(v52, v53, v157, 1uLL, v68, &v156, 1uLL, (char *)&v153 + 1) & 1) != 0)
        return 0;
      v120 = *a3;
      v154 = v55;
      v155 = v119;
      if ((sub_22E9F4DA0(v52, v120, &v155, 1uLL, *a2, &v154, 1uLL, (char *)&v153) & 1) != 0)
        return 0;
      result = HIBYTE(v153) != 0;
      v10 = (uint64_t *)v52;
      if (HIBYTE(v153) != v153)
        return result;
    }
    else if (v42)
    {
      return 0;
    }
LABEL_127:
    if ((a2[1] & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v71 = *(_DWORD *)((a2[1] & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F;
      if ((a3[1] & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        result = (*(_DWORD *)((a3[1] & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) == 47;
        if ((v71 == 47) != ((*(_DWORD *)((a3[1] & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) == 47))
          return result;
        if (v71 == 47)
        {
          v72 = *(_QWORD *)(*a2 + 16);
          v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
          if ((v72 & 4) != 0)
            v73 = (_QWORD *)*v73;
          if (v73)
            v74 = (unint64_t)(v73 - 8);
          else
            v74 = 0;
          v75 = *(_QWORD *)(*a3 + 16);
          v76 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
          if ((v75 & 4) != 0)
            v76 = (_QWORD *)*v76;
          if (v76)
            v77 = (unint64_t)(v76 - 8);
          else
            v77 = 0;
          if ((sub_22EFB35BC(v74, v77) & 1) != 0)
            return 1;
          if ((sub_22EFB35BC(v77, v74) & 1) != 0)
            return 0;
        }
      }
      else if (v71 == 47)
      {
        return 0;
      }
    }
    else if ((a3[1] & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)((a3[1] & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) == 0x2F)
    {
      return 1;
    }
    v78 = (*((unsigned __int8 *)a2 + 104) >> 5) & 3;
    v79 = (*((unsigned __int8 *)a3 + 104) >> 5) & 3;
    if (v78 != v79)
      return v78 < v79;
    v80 = *a2;
    if (*a2)
    {
      if ((*(_DWORD *)(v80 + 28) & 0x7F) == 0x35)
        v81 = *a2;
      else
        v81 = 0;
      v82 = *a3;
      if (!*a3)
      {
        v83 = v10;
        goto LABEL_155;
      }
    }
    else
    {
      v81 = 0;
      v91 = 0;
      v82 = *a3;
      if (!*a3)
      {
LABEL_200:
        v101 = *a3;
        if ((*(_BYTE *)(v10[9] + 68) & 0x20) != 0 && v91 && v101)
        {
          v102 = sub_22E903070((uint64_t)v10, 1);
          v103 = v102 - 72;
          if (!v102)
            v103 = 0;
          if ((*(_WORD *)(v102 + 8) & 0x7Eu) - 52 >= 6)
            v104 = 0;
          else
            v104 = v103;
          v105 = sub_22E9FE318((uint64_t)v10, v104, *a2);
          return v105 > (int)sub_22E9FE318((uint64_t)v10, v104, *a3);
        }
        if (v91)
        {
          if ((*(_DWORD *)(v91 + 28) & 0x7F) == 0x37)
            v106 = v91;
          else
            v106 = 0;
        }
        else
        {
          v106 = 0;
        }
        if (v101)
        {
          result = 0;
          if (!v106 || (*(_DWORD *)(v101 + 28) & 0x7F) != 0x37)
            return result;
          v107 = sub_22E46BB88(v106) >> 11;
          v108 = sub_22E46BB88(v101);
          if (v107 != v108 >> 11)
          {
            v109 = v108 >> 11;
            if (!sub_22E95F2F0(v108 >> 11, v107))
            {
              sub_22E95F2F0(v109, v107);
              return 0;
            }
            return 1;
          }
        }
        return 0;
      }
    }
    if ((*(_DWORD *)(v82 + 28) & 0x7F) == 0x35)
      v92 = v82;
    else
      v92 = 0;
    if (v81 && v92)
    {
      result = (*(unsigned __int8 *)(v92 + 29) >> 1) & 1;
      if (result != (*(_BYTE *)(v81 + 29) & 2) >> 1)
        return result;
      if ((*(_BYTE *)(v81 + 84) & 0x20) != 0)
        return 1;
    }
    if (!v80)
    {
      v83 = v10;
      goto LABEL_176;
    }
    v93 = sub_22ED10710((uint64_t)v10, v80, v82);
    result = v93 == 1;
    if (v93)
      return result;
    v83 = v10;
    v80 = *a2;
    if (!*a2)
      goto LABEL_176;
LABEL_155:
    v84 = *(uint64_t **)(v80 + 120);
    v85 = *(_QWORD *)(*(_QWORD *)(v80 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v85 && *(_BYTE *)(v85 + 16) == 26
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v85 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v85 = sub_22F10CF48(v85)) != 0)
    {
      v86 = *(_QWORD *)(v85 + 16);
      if ((v86 & 0x3FFFC000000000) != 0)
      {
        v87 = 8 * (unsigned __int16)(v86 >> 38) - 8;
        do
        {
          v88 = *v84++;
          v89 = sub_22E484F44(v88);
          if ((v89 & 1) != 0)
            break;
          v90 = v87;
          v87 -= 8;
        }
        while (v90);
LABEL_177:
        v94 = *a3;
        if (*a3)
        {
          v95 = *(uint64_t **)(v94 + 120);
          v96 = *(_QWORD *)(*(_QWORD *)(v94 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v96)
            v97 = *(_BYTE *)(v96 + 16) == 26;
          else
            v97 = 0;
          if ((v97
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v96 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
             && (v96 = sub_22F10CF48(v96)) != 0)
            && (v98 = *(_QWORD *)(v96 + 16), (v98 & 0x3FFFC000000000) != 0))
          {
            v99 = 8 * (unsigned __int16)(v98 >> 38);
            while (!sub_22E484F44(*v95))
            {
              ++v95;
              v99 -= 8;
              if (!v99)
                goto LABEL_187;
            }
            LODWORD(v94) = 1;
          }
          else
          {
LABEL_187:
            LODWORD(v94) = 0;
          }
        }
        if ((_DWORD)v94 == v89)
          v100 = 0;
        else
          v100 = v89;
        if ((v100 & 1) != 0)
          return 1;
        v10 = v83;
        if (!*a2)
        {
          v91 = 0;
          goto LABEL_200;
        }
        if ((*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) + 84) & 0x10) == 0
          || !*a3
          || (*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3) + 84) & 0x10) == 0)
        {
          goto LABEL_198;
        }
        v110 = *(_DWORD *)(*a3 + 28);
        if ((*(_BYTE *)(*a2 + 28) & 0x80) != 0)
        {
          v118 = ~(v110 >> 6) & 2;
        }
        else
        {
          if ((v110 & 0x80) != 0)
            return 1;
          v111 = sub_22E631558(*a2);
          v112 = sub_22E631558(*a3);
          if ((*(_BYTE *)(*a2 + 29) & 1) == 0)
            goto LABEL_240;
          sub_22EFC8E88(*a2);
          v114 = *(uint64_t **)v113;
          v115 = *(unsigned int *)(v113 + 8);
          v116 = *(uint64_t **)v113;
          if ((_DWORD)v115)
          {
            v117 = 8 * v115;
            v116 = *(uint64_t **)v113;
            while (*(_WORD *)(*v116 + 32) != 128)
            {
              ++v116;
              v117 -= 8;
              if (!v117)
                goto LABEL_240;
            }
          }
          if (v116 == &v114[v115])
          {
LABEL_240:
            v121 = 0;
          }
          else
          {
            do
            {
              v122 = *v114++;
              v121 = v122;
            }
            while (*(_WORD *)(v122 + 32) != 128);
          }
          if ((*(_BYTE *)(*a3 + 29) & 1) == 0)
            goto LABEL_250;
          sub_22EFC8E88(*a3);
          v124 = *(uint64_t **)v123;
          v125 = *(unsigned int *)(v123 + 8);
          v126 = *(uint64_t **)v123;
          if ((_DWORD)v125)
          {
            v127 = 8 * v125;
            v126 = *(uint64_t **)v123;
            while (*(_WORD *)(*v126 + 32) != 128)
            {
              ++v126;
              v127 -= 8;
              if (!v127)
                goto LABEL_250;
            }
          }
          if (v126 == &v124[v125])
          {
LABEL_250:
            v128 = 0;
          }
          else
          {
            do
            {
              v129 = *v124++;
              v128 = v129;
            }
            while (*(_WORD *)(v129 + 32) != 128);
          }
          if (v111)
          {
            if (!v112)
              return 1;
            goto LABEL_264;
          }
          if (v121 | v128)
            v130 = 1;
          else
            v130 = v112;
          if (v121 | v128)
            v131 = v112;
          else
            v131 = 1;
          if (v130)
            v118 = 2;
          else
            v118 = 0;
          if ((v131 & 1) == 0)
          {
LABEL_264:
            v132 = *(unsigned int *)(v121 + 36);
            v133 = *(_DWORD *)(v128 + 36);
            if ((_DWORD)v132 == v133)
            {
              v134 = *(_QWORD *)(v121 + 40);
              v135 = *(_QWORD *)(v128 + 40);
              if ((_DWORD)v132)
              {
                v136 = 8 * v132;
                v137 = v134 + 8 * v132;
                while (1)
                {
                  v138 = *(unsigned int **)(*(_QWORD *)v134 + 16);
                  v141 = *v138;
                  v139 = v138 + 4;
                  v140 = v141;
                  v142 = *(int **)(*(_QWORD *)v135 + 16);
                  v144 = *v142;
                  v143 = v142 + 4;
                  if (v140 != v144 || v140 && memcmp(v139, v143, v140))
                    break;
                  v134 += 8;
                  v135 += 8;
                  v136 -= 8;
                  if (!v136)
                  {
                    v134 = v137;
                    break;
                  }
                }
              }
              v145 = *(unsigned int **)(*(_QWORD *)v134 + 16);
              v146 = *v145;
              v147 = *(unsigned int **)(*(_QWORD *)v135 + 16);
              v148 = *v147;
              if (v148 >= v146)
                v149 = *v145;
              else
                v149 = *v147;
              if (v149)
              {
                v150 = memcmp(v145 + 4, v147 + 4, v149);
                if ((v150 & 0x80000000) == 0)
                {
                  v151 = v150 || v146 == v148;
                  if (v151 || v146 >= v148)
                    return 0;
                }
              }
              else if (v146 >= v148)
              {
                return 0;
              }
            }
            else if (v132 >= v133)
            {
              return 0;
            }
            return 1;
          }
        }
        if (v118 == 2)
          return 0;
LABEL_198:
        v91 = *a2;
        goto LABEL_200;
      }
    }
LABEL_176:
    v89 = 0;
    goto LABEL_177;
  }
  v37 = sub_22ED0ED9C((uint64_t)v10, v35, v36);
  if (v37)
    return v37 == -1;
  v39 = sub_22ED0F2A0((uint64_t)v10, a4, (uint64_t)(a2 + 14), (uint64_t)(a3 + 14));
  result = v39 == -1;
  if (!v39)
  {
    v35 = *a2;
    v36 = *a3;
    goto LABEL_68;
  }
  return result;
}

uint64_t sub_22ED0E7D4(_QWORD *a1, unsigned int a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const llvm::APInt *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v8 = a1[9];
  if ((*(_BYTE *)(v8 + 1) & 2) != 0)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *a3;
    if ((v10 & 0x8000000000) == 0)
    {
      v11 = v9 & 0x7FFFFFFF;
      if ((v9 & 0x7FFFFFFF) != 0 && v11 != 1)
        v12 = 0;
      else
        v12 = *((_BYTE *)a3 + 19) & 1;
      v13 = *(_DWORD *)a4 & 0x7FFFFFFF;
      if (v13 == 1)
      {
        if (v12 == (*(_BYTE *)(a4 + 19) & 1))
          goto LABEL_17;
      }
      else if (!v13 && (*(_BYTE *)(a4 + 19) & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_17;
      }
      else if ((v12 & 1) == 0)
      {
        goto LABEL_17;
      }
      if ((v11 == 4) == (v13 == 4))
      {
        if (v11)
        {
          result = 0xFFFFFFFFLL;
          if (v11 == 1)
          {
            if ((*((_BYTE *)a3 + 19) & 1) != 0)
              return 1;
            else
              return 0xFFFFFFFFLL;
          }
        }
        else if ((*((_BYTE *)a3 + 19) & 1) != 0)
        {
          return 1;
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
        return result;
      }
    }
  }
  else
  {
    v9 = *a3;
  }
LABEL_17:
  v14 = v9 & 0x7FFFFFFF;
  v15 = *(_DWORD *)a4 & 0x7FFFFFFF;
  if (dword_22F495F18[v14] < dword_22F495F18[v15])
    return 0xFFFFFFFFLL;
  if (dword_22F495F18[v15] < dword_22F495F18[v14])
    return 1;
  if (v14 != (_DWORD)v15)
    return 0;
  if (v14 == 4)
  {
LABEL_23:
    v17 = *a3 & 0x7FFFFFFF;
    if (v17 == 1)
    {
      v30 = *((_QWORD *)a3 + 17);
      v31 = *(_QWORD *)(a4 + 136);
      if (v30 != v31)
        return sub_22ED0ED9C((uint64_t)a1, v30, v31);
      v18 = (uint64_t)(a3 + 20);
      v19 = a4 + 80;
      return sub_22ED0F2A0((uint64_t)a1, a2, v18, v19);
    }
    if (!v17)
    {
      v18 = (uint64_t)(a3 + 4);
      v19 = a4 + 16;
      return sub_22ED0F2A0((uint64_t)a1, a2, v18, v19);
    }
    return 0;
  }
  v20 = *((_QWORD *)a3 + 1);
  if (v20 < 0x10)
    v21 = 0;
  else
    v21 = sub_22EAC21FC(a1, v20, 0);
  v22 = *(_QWORD *)(a4 + 8);
  if (v22 < 0x10)
    v23 = 0;
  else
    v23 = sub_22EAC21FC(a1, v22, 0);
  if (v23 == v21)
  {
    v24 = *((_QWORD *)a3 + 1);
    if (v24 < 0x10)
      goto LABEL_23;
    if (*(_QWORD *)(a4 + 8) < 0x10uLL)
      goto LABEL_23;
    v25 = sub_22EF5C728(a1[11], v24);
    if (!v25)
      goto LABEL_23;
    v26 = v25;
    if (*(_BYTE *)(v25 + 16) != 2)
      goto LABEL_23;
    v27 = sub_22EF5C728(a1[11], *(_QWORD *)(a4 + 8));
    if (!v27
      || *(_BYTE *)(v27 + 16) != 2
      || *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v27 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      goto LABEL_23;
    }
    v28 = (const llvm::APInt *)(v27 + 40);
    if (*(_DWORD *)(v26 + 48) > 0x40u)
    {
      if ((llvm::APInt::equalSlowCase((llvm::APInt *)(v26 + 40), v28) & 1) == 0)
        goto LABEL_49;
    }
    else if (*(_QWORD *)(v26 + 40) != *(_QWORD *)v28)
    {
LABEL_49:
      v29 = (int)llvm::APInt::compare((llvm::APInt *)(v26 + 40), v28) >> 31;
      return v29 | 1u;
    }
    if (((*(_DWORD *)a4 ^ *a3) & 0x80000000) == 0)
      goto LABEL_23;
    v29 = *(int *)a4 >> 31;
    return v29 | 1u;
  }
  if (v21)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

BOOL sub_22ED0EAE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 result;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;

  if (a2 == a3)
    return 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v8 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a4 - 1;
    while (1)
    {
      if (v9)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v11++);
        v14 = *(_QWORD *)(v13 + 48);
      }
      else
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x37 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
            || (*(_QWORD *)(a2 + 40) & 7) == 6
            && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
          {
            LOBYTE(v17) = 0;
            v18 = 0;
          }
          else
          {
            v19 = sub_22EFD7784(a2);
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v20)
              v21 = *(_BYTE *)(v20 + 16) == 26;
            else
              v21 = 0;
            if (!v21)
              v20 = sub_22F10CF48(v20);
            if ((*(_QWORD *)(v20 + 16) & 0x300000000) == 0x200000000)
              v17 = sub_22EF5FB8C(a1, v19);
            else
              v17 = sub_22EF5F8C4(a1, v19, 1);
            v18 = v17 & 0xFFFFFFFFFFFFFF00;
          }
          v14 = v18 | v17;
        }
        else
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v11++);
          v14 = *(_QWORD *)(v16 + 48);
        }
        if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x37 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 80) & 0xE000) == 0x4000
            || (*(_QWORD *)(a3 + 40) & 7) == 6
            && (*(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
          {
            LOBYTE(v28) = 0;
            v29 = 0;
          }
          else
          {
            v30 = sub_22EFD7784(a3);
            v31 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v31)
              v32 = *(_BYTE *)(v31 + 16) == 26;
            else
              v32 = 0;
            if (!v32)
              v31 = sub_22F10CF48(v31);
            if ((*(_QWORD *)(v31 + 16) & 0x300000000) == 0x200000000)
              v28 = sub_22EF5FB8C(a1, v30);
            else
              v28 = sub_22EF5F8C4(a1, v30, 1);
            v29 = v28 & 0xFFFFFFFFFFFFFF00;
          }
          v24 = v29 | v28;
          goto LABEL_30;
        }
      }
      v23 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v10++);
      v24 = *(_QWORD *)(v23 + 48);
LABEL_30:
      v25 = *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v26 = *(_QWORD *)(*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      result = v25 == v26;
      if (v12 != v9)
      {
        ++v9;
        if (v25 == v26)
          continue;
      }
      return result;
    }
  }
  return 1;
}

uint64_t sub_22ED0ED9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  _DWORD v48[3];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x38)
      v4 = a2;
    else
      v4 = 0;
    if (!a3)
      return 0;
  }
  else
  {
    v4 = 0;
    if (!a3)
      return 0;
  }
  result = 0;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x38)
    v6 = a3;
  else
    v6 = 0;
  if (!v4 || (*(_DWORD *)(a3 + 28) & 0x7F) != 0x38)
    return result;
  v7 = *(_WORD *)(v4 + 80) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_29;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_29;
    }
    if (v7 != 81)
    {
LABEL_24:
      v9 = v7 - 52;
      v10 = v7 - 33 >= 5;
      v11 = -48;
      if (!v10)
        v11 = -64;
      if (v9 >= 6)
        v8 = v11;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_23;
    if (v7 == 16)
    {
LABEL_16:
      v8 = -48;
      goto LABEL_29;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_16;
LABEL_23:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_29;
      }
      goto LABEL_24;
    }
  }
LABEL_29:
  v12 = *(_QWORD *)(v4 + 72 + v8 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  v15 = v14[16];
  if (!v15 || ((*(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16)) & 0x100000) == 0)
    return 0;
  v16 = v6 + 72;
  v17 = *(_WORD *)(v6 + 80) & 0x7F;
  v18 = -40;
  if (v17 > 0x46)
  {
    if (v17 == 83)
      goto LABEL_52;
    if (v17 == 71)
    {
      v18 = -56;
      goto LABEL_52;
    }
    if (v17 != 81)
    {
LABEL_47:
      v19 = v17 - 52;
      v10 = v17 - 33 >= 5;
      v20 = -48;
      if (!v10)
        v20 = -64;
      if (v19 >= 6)
        v18 = v20;
      else
        v18 = -72;
    }
  }
  else
  {
    if (v17 > 0x18)
      goto LABEL_46;
    if (v17 == 16)
    {
LABEL_39:
      v18 = -48;
      goto LABEL_52;
    }
    if (((1 << v17) & 0x1066) == 0)
    {
      if (v17 == 24)
        goto LABEL_39;
LABEL_46:
      if (v17 == 70)
      {
        v18 = -64;
        goto LABEL_52;
      }
      goto LABEL_47;
    }
  }
LABEL_52:
  v21 = *(_QWORD *)(v16 + v18 + 16);
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) != 0)
    v22 = (_QWORD *)*v22;
  if (v22)
    v23 = v22 - 8;
  else
    v23 = 0;
  v24 = v23[16];
  if (!v24 || ((*(unsigned __int16 *)(v24 + 8) | (*(unsigned __int8 *)(v24 + 10) << 16)) & 0x100000) == 0)
    return 0;
  if ((~**(_DWORD **)(a1 + 72) & 0x4200) != 0)
    goto LABEL_73;
  v25 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v25 || *(unsigned __int8 *)(v25 + 16) - 27 <= 0xFFFFFFFD)
    v25 = sub_22F10CF48(v25);
  v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  v27 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v27 || *(unsigned __int8 *)(v27 + 16) - 27 <= 0xFFFFFFFD)
    v27 = sub_22F10CF48(v27);
  v28 = (v26 == 10) ^ (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 10);
  result = v26 == 10 ? 1 : 0xFFFFFFFFLL;
  if ((v28 & 1) == 0)
  {
LABEL_73:
    v29 = sub_22ED22EBC(*(_QWORD *)(v4 + 48));
    v30 = sub_22ED22EBC(*(_QWORD *)(v6 + 48));
    result = 0;
    if (v29)
    {
      if (v30)
      {
        v31 = (*(_DWORD *)(v29 + 16) >> 19) & 0x1F;
        v32 = (*(_DWORD *)(v30 + 16) >> 19) & 0x1F;
        if (v31 != v32)
        {
          v33 = *(_WORD *)(v6 + 80) & 0x7F;
          v34 = -40;
          if (v33 > 0x46)
          {
            switch(v33)
            {
              case 'S':
                goto LABEL_90;
              case 'G':
                v34 = -56;
                goto LABEL_90;
              case 'Q':
LABEL_90:
                v35 = *(_QWORD *)(v16 + v34 + 16);
                v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
                if ((v35 & 4) != 0)
                  v36 = (_QWORD *)*v36;
                if (v36)
                  v37 = (unint64_t)(v36 - 8);
                else
                  v37 = 0;
                v38 = sub_22EFD462C(v37);
                v39 = v38;
                if (v38 && (*(_DWORD *)(v38 + 28) & 0x7F) == 0x1D)
                  v39 = *(_QWORD *)(v38 + 48);
                v40 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v40 && *(_BYTE *)(v40 + 16) == 26)
                {
                  v41 = 0;
                  v42 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
                }
                else
                {
                  v42 = sub_22F10CF48(v40);
                  v40 = *(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0);
                  v41 = *(unsigned __int8 *)(v40 + 16) - 27 < 0xFFFFFFFE;
                }
                if (v41)
                  v40 = sub_22F10CF48(v40);
                v43 = (*(_DWORD *)(v40 + 16) >> 19) & 0x1F;
                v44 = sub_22EF72F20(*(_QWORD *)(a1 + 88), (*(_QWORD *)(v42 + 16) >> 59) & 1, 0, 0);
                v45 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15064) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15064), (*(_QWORD *)(v42 + 16) >> 59) & 1);
                v46 = 0;
                v48[0] = v44;
                v48[1] = v45;
                v48[2] = v43;
                while (1)
                {
                  v47 = v48[v46];
                  if (v31 == v47)
                    return 0xFFFFFFFFLL;
                  if (v32 == v47)
                    break;
                  if (++v46 == 3)
                    return 0;
                }
                return 1;
            }
          }
          else
          {
            if (v33 <= 0x18)
            {
              if (v33 == 16)
              {
LABEL_78:
                v34 = -48;
                goto LABEL_90;
              }
              if (((1 << v33) & 0x1066) != 0)
                goto LABEL_90;
              if (v33 == 24)
                goto LABEL_78;
            }
            if (v33 == 70)
            {
LABEL_88:
              v34 = -64;
              goto LABEL_90;
            }
          }
          if (v33 - 52 >= 6)
          {
            if (v33 - 33 >= 5)
              goto LABEL_78;
            goto LABEL_88;
          }
          v34 = -72;
          goto LABEL_90;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22ED0F2A0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  _BOOL4 v163;
  int v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)a3;
  v10 = *(_QWORD *)a4;
  v11 = *(_QWORD *)a4 & 0xFFFF00;
  if ((*(_QWORD *)a3 & 0xFFFF00) != 0)
  {
    if (!v11)
      return 1;
  }
  else if (v11)
  {
    return 0xFFFFFFFFLL;
  }
  v12 = BYTE1(v9);
  if (BYTE1(v9) == BYTE1(v10))
  {
    v13 = sub_22EF6845C(v8, *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 + 24));
    v9 = *(_QWORD *)a3;
    v10 = *(_QWORD *)a4;
    if (!v13)
      goto LABEL_18;
    result = 0;
    v15 = 0xFFFFFFFFLL;
    v12 = 1;
  }
  else if (BYTE1(v9))
  {
    if (BYTE1(v10))
      goto LABEL_18;
    v15 = 0;
    v12 = 1;
    result = 1;
  }
  else
  {
    v15 = 0xFFFFFFFFLL;
    result = 0xFFFFFFFFLL;
  }
  if (BYTE2(v9) == BYTE2(v10))
  {
    if ((*(_QWORD *)(a3 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0) + 8)) == (*(_QWORD *)(a4 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8)))
      goto LABEL_17;
  }
  else
  {
    result = v15;
    if (!BYTE2(v9) || (result = v12, !BYTE2(v10)))
    {
LABEL_17:
      if ((_DWORD)result)
        return result;
    }
  }
LABEL_18:
  v16 = dword_22F495E9C[v9];
  if (v16 <= dword_22F495E9C[BYTE1(v9)])
    v16 = dword_22F495E9C[BYTE1(v9)];
  v17 = dword_22F495E9C[BYTE2(v9)];
  if (v16 > v17)
    v17 = v16;
  v18 = v17 & ~(v17 >> 31);
  v19 = dword_22F495E9C[v10];
  if (v19 <= dword_22F495E9C[BYTE1(v10)])
    v19 = dword_22F495E9C[BYTE1(v10)];
  v20 = dword_22F495E9C[BYTE2(v10)];
  if (v19 > v20)
    v20 = v19;
  v21 = v20 & ~(v20 >> 31);
  if (v18 < v21)
    return 0xFFFFFFFFLL;
  if (v21 < v18)
    return 1;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000);
  v23 = sub_22ECF84FC((_QWORD *)a3, v22);
  v24 = sub_22ECF84FC((_QWORD *)a4, v22);
  if (v23 != v24)
    goto LABEL_40;
  v25 = sub_22ED22F70(a3);
  v26 = sub_22ED22F70(a4);
  if (v25 && v26 && v25 != v26)
  {
    v27 = v25 == 1;
    goto LABEL_36;
  }
  v28 = sub_22ECF85B4((uint64_t *)a3, *(_QWORD *)(a1 + 88));
  v24 = sub_22ECF85B4((uint64_t *)a4, *(_QWORD *)(a1 + 88));
  if (v28 != v24)
  {
LABEL_40:
    v29 = v24 == 0;
    v30 = -1;
    goto LABEL_41;
  }
  if (((v28 | v24) & 1) != 0)
  {
    if ((v28 & v24) == 1)
    {
      v31 = *(_QWORD *)(a3 + 8);
      v32 = *(_QWORD *)(a4 + 8);
      if ((v31 & 7 | *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8)) != (v32 & 7 | *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0)
                                                                                             + 8)))
      {
        if (*(_BYTE *)a3 == 2)
          v31 = sub_22EF5F824(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 8));
        if (*(_BYTE *)a4 == 2)
          v32 = sub_22EF5F824(*(_QWORD *)(a1 + 88), v32);
        v33 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFF0);
        v34 = sub_22F10ACF8(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
        v35 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v35 + 8) & 0xF) != 0)
          v35 = (unint64_t)sub_22F10D2BC(v34);
        v36 = v35 & 0xFFFFFFFFFFFFFFF0;
        v37 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFF0);
        v38 = sub_22F10ACF8(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0));
        v39 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v39 + 8) & 0xF) != 0)
          v39 = (unint64_t)sub_22F10D2BC(v38);
        v40 = v39 & 0xFFFFFFFFFFFFFFF0;
        if ((sub_22EAAB1B8(a1, a2, v39 & 0xFFFFFFFFFFFFFFF0, v36) & 1) != 0)
          return 0xFFFFFFFFLL;
        if ((sub_22EAAB1B8(a1, a2, v36, v40) & 1) != 0)
          return 1;
        v41 = *v33;
        if (!*v33 || *(_BYTE *)(v41 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
            v41 = sub_22F10CF48(*v33);
          else
            v41 = 0;
        }
        v144 = *v37;
        if (!*v37 || *(_BYTE *)(v144 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
            goto LABEL_202;
          v144 = sub_22F10CF48(*v37);
        }
        if (v41 && v144)
        {
          v145 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v41, v144);
          v146 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v144, v41);
          result = v145 ? 0xFFFFFFFFLL : 1;
          if (v145 != v146)
            return result;
        }
      }
    }
  }
  else
  {
    v42 = *(_QWORD *)(a3 + 8);
    v43 = *(_QWORD *)(a3 + 24);
    v44 = *(_QWORD *)(a4 + 8);
    v45 = *(_QWORD *)(a4 + 24);
    if (*(_BYTE *)a3 == 2)
      v42 = sub_22EF5F824(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 8));
    v220 = a2;
    if (*(_BYTE *)a4 == 2)
      v44 = sub_22EF5F824(*(_QWORD *)(a1 + 88), v44);
    v46 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8);
    v47 = v46 | v42 & 7;
    v218 = v45;
    v219 = v43;
    v48 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 8);
    v49 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFF0) + 8);
    v50 = v49 | v44 & 7;
    v51 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((unint64_t)*(unsigned __int8 *)(a3 + 1) << 8 == 3328
      && (unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 == 3328)
    {
      v52 = *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0);
      v53 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v53 == 39
        && (v54 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFF0),
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 39)
        && (v55 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFF0),
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 39)
        && (v56 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFF0),
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 39))
      {
        v196 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 8);
        v200 = v49;
        v57 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8);
        v58 = v51;
        v208 = v50;
        v212 = v47;
        if (*(_BYTE *)(v52 + 16) != 39)
          v52 = sub_22F10CF48(v52);
        v59 = *(_QWORD *)(v52 + 32);
        v60 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v60 + 8) & 0xF) != 0)
          v60 = (unint64_t)sub_22F10D2BC(v59);
        v61 = *v55;
        if (!*v55 || *(_BYTE *)(v61 + 16) != 39)
          v61 = sub_22F10CF48(v61);
        v62 = *(_QWORD *)(v61 + 32);
        v63 = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v63 + 8) & 0xF) != 0)
          v63 = (unint64_t)sub_22F10D2BC(v62);
        v64 = *v54;
        if (!*v54 || *(_BYTE *)(v64 + 16) != 39)
          v64 = sub_22F10CF48(v64);
        v65 = *(_QWORD *)(v64 + 32);
        v66 = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v66 + 8) & 0xF) != 0)
          v66 = (unint64_t)sub_22F10D2BC(v65);
        v67 = *v56;
        if (!*v56 || *(_BYTE *)(v67 + 16) != 39)
          v67 = sub_22F10CF48(v67);
        v68 = v60 & 0xFFFFFFFFFFFFFFF0;
        v69 = v66 & 0xFFFFFFFFFFFFFFF0;
        v70 = *(_QWORD *)(v67 + 32);
        v71 = *(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v71 + 8) & 0xF) != 0)
          v71 = (unint64_t)sub_22F10D2BC(v70);
        v72 = v63 & 0xFFFFFFFFFFFFFFF0;
        v73 = v71 & 0xFFFFFFFFFFFFFFF0;
        if (v68 == v69 && v72 != v73)
        {
          if ((sub_22EAAB1B8(a1, v220, v72, v73) & 1) != 0)
            return 0xFFFFFFFFLL;
          if ((sub_22EAAB1B8(a1, v220, v73, v72) & 1) != 0)
            return 1;
        }
        v50 = v208;
        v47 = v212;
        v48 = v196;
        v49 = v200;
        v51 = v58;
        v46 = v57;
        if (v68 != v69 && v72 == v73)
        {
          if ((sub_22EAAB1B8(a1, v220, v69, v68) & 1) != 0)
            return 0xFFFFFFFFLL;
          v74 = sub_22EAAB1B8(a1, v220, v68, v69);
          v50 = v208;
          v47 = v212;
          v48 = v196;
          v49 = v200;
          v51 = v58;
          v46 = v57;
          if ((v74 & 1) != 0)
            return 1;
        }
      }
      else
      {
        v207 = v46 & 0xFFFFFFFFFFFFFFF0;
        if (*(_BYTE *)(v52 + 16) != 32)
        {
          if (v53 == 32)
          {
            v75 = v46 | v42 & 7;
            v76 = v50;
            v77 = v48;
            v78 = v51;
            v79 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8);
            v80 = v49;
            v81 = sub_22F10CF48(v52);
            v49 = v80;
            v46 = v79;
            v51 = v78;
            v48 = v77;
            v50 = v76;
            v47 = v75;
            v52 = v81;
          }
          else
          {
            v52 = 0;
          }
        }
        v206 = v49 & 0xFFFFFFFFFFFFFFF0;
        v82 = *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0);
        if (!v82 || *(_BYTE *)(v82 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
          {
            v83 = v47;
            v84 = v50;
            v85 = v48;
            v86 = v51;
            v87 = v46;
            v88 = v49;
            v89 = v52;
            v90 = sub_22F10CF48(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0));
            v52 = v89;
            v49 = v88;
            v46 = v87;
            v51 = v86;
            v48 = v85;
            v50 = v84;
            v47 = v83;
            v82 = v90;
          }
          else
          {
            v82 = 0;
          }
        }
        v205 = v48 & 0xFFFFFFFFFFFFFFF0;
        v91 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
        if (!v91 || *(_BYTE *)(v91 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
          {
            v92 = v47;
            v93 = v50;
            v94 = v48;
            v95 = v51;
            v96 = v46;
            v97 = v49;
            v213 = v52;
            v98 = sub_22F10CF48(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0));
            v52 = v213;
            v49 = v97;
            v46 = v96;
            v51 = v95;
            v48 = v94;
            v50 = v93;
            v47 = v92;
            v91 = v98;
          }
          else
          {
            v91 = 0;
          }
        }
        v99 = v51 & 0xFFFFFFFFFFFFFFF0;
        v100 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0);
        if (!v100 || *(_BYTE *)(v100 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
          {
            v101 = v47;
            v102 = v50;
            v197 = v48;
            v103 = v51;
            v203 = v46;
            v104 = v49;
            v214 = v52;
            v105 = sub_22F10CF48(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0));
            v52 = v214;
            v49 = v104;
            v46 = v203;
            v51 = v103;
            v48 = v197;
            v50 = v102;
            v47 = v101;
            v100 = v105;
          }
          else
          {
            v100 = 0;
          }
        }
        if (v52 && v82 && v91 && v100)
        {
          v106 = v99;
          v201 = v49;
          v204 = v46;
          v195 = v51;
          v107 = v48;
          v209 = v50;
          v215 = v47;
          v108 = v52;
          v198 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v52, v82);
          v109 = v108;
          v194 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v82, v108);
          v110 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v91, v100);
          v111 = sub_22EF6ED94(*(_QWORD *)(a1 + 88), v100, v91);
          if (sub_22E5761BC(v91) && (sub_22E491464(v100) || sub_22F31179C(v100)))
            return 1;
          if (sub_22E5761BC(v100) && (sub_22E491464(v91) || sub_22F31179C(v91)))
            return 0xFFFFFFFFLL;
          if (sub_22E491464(v91) && sub_22F31179C(v100))
            return 1;
          if (sub_22E491464(v100) && sub_22F31179C(v91))
            return 0xFFFFFFFFLL;
          if (sub_22E509ED0(v91) && (sub_22E509F54(v100) || sub_22F31179C(v100)))
            return 1;
          if (sub_22E509ED0(v100) && (sub_22E509F54(v91) || sub_22F31179C(v91)))
            return 0xFFFFFFFFLL;
          if (sub_22E509F54(v91) && sub_22F31179C(v100))
            return 1;
          if (sub_22E509F54(v100) && sub_22F31179C(v91))
            return 0xFFFFFFFFLL;
          if ((*(_QWORD *)(v207 + 8) | v215 & 7) == (*(_QWORD *)(v206 + 8) | v209 & 7)
            && !sub_22E5761BC(v109)
            && !sub_22E509ED0(v109)
            && v110 != v111)
          {
            if (sub_22F3437C0(*(_QWORD *)(v109 + 32)))
            {
              v190 = sub_22F31179C(v109);
              v191 = sub_22F31179C(v91);
              v192 = sub_22F31179C(v109);
              v193 = sub_22F31179C(v100);
              if (v190 == v191)
              {
                if (v192 != v193)
                  return 0xFFFFFFFFLL;
              }
              else if (v192 == v193)
              {
                return 1;
              }
            }
            v29 = v110 == 0;
            v30 = 1;
LABEL_41:
            if (v29)
              return -v30;
            else
              return v30;
          }
          v46 = v204;
          if (v198)
            result = 0xFFFFFFFFLL;
          else
            result = 1;
          v50 = v209;
          v47 = v215;
          v48 = v107;
          v51 = v195;
          v49 = v201;
          if (*(_QWORD *)(*(_QWORD *)(v205 + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)(v106 + 8) & 0xFFFFFFFFFFFFFFF0)
            && ((v198 ^ v194) & 1) != 0)
          {
            return result;
          }
        }
      }
    }
    if ((unint64_t)*(unsigned __int8 *)(a3 + 1) << 8 == 3584
      && (unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 == 3584)
    {
      v112 = *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
      {
        v113 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 31)
        {
          v114 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFF0);
          v115 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
          {
            v116 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFF0);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 31)
            {
              v199 = v48;
              v202 = v49;
              v117 = v46;
              v118 = v51;
              v210 = v50;
              v216 = v47;
              if (*(_BYTE *)(v112 + 16) != 31)
              {
                v112 = sub_22F10CF48(v112);
                v115 = *v114;
              }
              if (!v115 || *(_BYTE *)(v115 + 16) != 31)
                v115 = sub_22F10CF48(v115);
              v119 = *v113;
              if (!v119 || *(_BYTE *)(v119 + 16) != 31)
                v119 = sub_22F10CF48(v119);
              v120 = *v116;
              if (!*v116 || *(_BYTE *)(v120 + 16) != 31)
                v120 = sub_22F10CF48(v120);
              v121 = *(_QWORD *)(v115 + 40);
              v122 = *(_QWORD *)(v119 + 40);
              v123 = *(_QWORD *)(v120 + 40);
              v124 = *(_QWORD *)(v112 + 40) & 0xFFFFFFFFFFFFFFF0;
              v125 = *(_QWORD *)v124;
              if ((*(_BYTE *)(*(_QWORD *)v124 + 8) & 0xF) != 0)
                v125 = (unint64_t)sub_22F10D2BC(v124);
              v126 = *(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v126 + 8) & 0xF) != 0)
                v126 = (unint64_t)sub_22F10D2BC(v121 & 0xFFFFFFFFFFFFFFF0);
              v127 = *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v127 + 8) & 0xF) != 0)
                v127 = (unint64_t)sub_22F10D2BC(v122 & 0xFFFFFFFFFFFFFFF0);
              v128 = v125 & 0xFFFFFFFFFFFFFFF0;
              v129 = v127 & 0xFFFFFFFFFFFFFFF0;
              v130 = *(_QWORD *)(v123 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v130 + 8) & 0xF) != 0)
                v130 = (unint64_t)sub_22F10D2BC(v123 & 0xFFFFFFFFFFFFFFF0);
              v131 = v126 & 0xFFFFFFFFFFFFFFF0;
              v132 = v130 & 0xFFFFFFFFFFFFFFF0;
              if (v128 == v129 && v131 != v132)
              {
                if ((sub_22EAAB1B8(a1, v220, v131, v132) & 1) != 0)
                  return 1;
                if ((sub_22EAAB1B8(a1, v220, v132, v131) & 1) != 0)
                  return 0xFFFFFFFFLL;
              }
              v50 = v210;
              v47 = v216;
              v48 = v199;
              v49 = v202;
              v51 = v118;
              v46 = v117;
              if (v131 == v132 && v128 != v129)
              {
                if ((sub_22EAAB1B8(a1, v220, v128, v129) & 1) != 0)
                  return 0xFFFFFFFFLL;
                v133 = sub_22EAAB1B8(a1, v220, v129, v128);
                v50 = v210;
                v47 = v216;
                v48 = v199;
                v49 = v202;
                v51 = v118;
                v46 = v117;
                if ((v133 & 1) != 0)
                  return 1;
              }
            }
          }
        }
      }
    }
    if ((unint64_t)*(unsigned __int8 *)(a3 + 1) << 8 == 4352)
    {
      v134 = v46 & 0xFFFFFFFFFFFFFFF0;
      v135 = *(_QWORD *)(*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v136 = v49 & 0xFFFFFFFFFFFFFFF0;
      v137 = *(_QWORD *)(*(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v135 == v137)
      {
        if (*(_QWORD *)(*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_202;
        v211 = v50;
        v217 = v47;
        v140 = v48;
        v141 = v48 | v219 & 7;
        v142 = v51;
        v143 = v51 | v218 & 7;
        if ((sub_22EAAB1B8(a1, v220, v141, v143) & 1) != 0)
          return 0xFFFFFFFFLL;
        if ((sub_22EAAB1B8(a1, v220, v143, v141) & 1) != 0)
          return 1;
        v135 = *(_QWORD *)(*(_QWORD *)(v134 + 8) & 0xFFFFFFFFFFFFFFF0);
        v137 = *(_QWORD *)(*(_QWORD *)(v136 + 8) & 0xFFFFFFFFFFFFFFF0);
        v50 = v211;
        v47 = v217;
        v48 = v140;
        v51 = v142;
      }
      if (v135 != v137
        && *(_QWORD *)(*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v138 = v50;
        v139 = v47;
        if ((sub_22EAAB1B8(a1, v220, v50, v47) & 1) != 0)
          return 0xFFFFFFFFLL;
        if ((sub_22EAAB1B8(a1, v220, v139, v138) & 1) != 0)
          return 1;
      }
    }
  }
LABEL_202:
  v147 = *(_QWORD *)a3;
  v148 = *(_QWORD *)a4;
  if ((*(_QWORD *)a3 & 0x8000000) != 0 && (v148 & 0x8000000) != 0 && ((v148 | v147) & 0x100000000) == 0)
  {
    if ((*(_QWORD *)a3 & 0xA0000000) == 0x80000000 && (v148 & 0x20000000) != 0)
      return 0xFFFFFFFFLL;
    v149 = *(_QWORD *)a4 & 0x60000000;
    if ((*(_QWORD *)a3 & 0x60000000) == 0x60000000 && v149 == 0x40000000)
      return 0xFFFFFFFFLL;
    if ((v147 & 0x20000000) != 0 && (*(_QWORD *)a4 & 0xA0000000) == 0x80000000
      || (*(_QWORD *)a3 & 0x60000000) == 0x40000000 && v149 == 1610612736)
    {
      return 1;
    }
  }
  v150 = *(_QWORD *)a3 & 0x8000000;
  if ((unsigned __int16)v148 == (unsigned __int16)v147 && (v147 & 0xFF0000) == 0x50000 && (v148 & 0xFF0000) == 0x50000)
  {
    v159 = *(_QWORD *)(a3 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    v160 = *(_QWORD *)(a4 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    v222 = 0;
    v223 = 0;
    v161 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v159, &v223);
    if (v161 != sub_22EF67F34(*(_QWORD *)(a1 + 88), v160, &v222))
    {
      v162 = (*(_QWORD *)a4 & 0x1000000) == 0;
      if ((*(_QWORD *)a4 & 0x2000000) != 0)
        v162 = ((*(_QWORD *)a4 & 0x1000000) == 0) & (*(_QWORD *)a3 >> 25);
      if (((((*(_QWORD *)a3 & 0x2000000) == 0) | (*(_QWORD *)a4 >> 25)) & ((*(_QWORD *)a3 & 0x1000000) == 0)) != 0)
      {
        v163 = sub_22ECFD738(a1, v159, v160, 0, &v221);
        v164 = v163;
        if ((v162 & 1) != 0)
        {
          v165 = sub_22ECFD738(a1, v160, v159, 0, &v221);
          if (v164)
            result = 0xFFFFFFFFLL;
          else
            result = 1;
          if (v164 != v165)
            return result;
        }
        else if (v163)
        {
          return 0xFFFFFFFFLL;
        }
      }
      else if (v162 && sub_22ECFD738(a1, v160, v159, 0, &v221))
      {
        return 1;
      }
    }
    v150 = *(_QWORD *)a3 & 0x8000000;
  }
  if (!v150)
    goto LABEL_262;
  if ((*(_BYTE *)(a4 + 3) & 8) == 0)
    goto LABEL_262;
  v151 = *(_QWORD *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
  v152 = *(_QWORD *)(a3 + 32) & 7 | v151;
  v153 = *(_QWORD *)((*(_QWORD *)(a4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
  v154 = *(_QWORD *)(a4 + 32) & 7 | v153;
  v222 = 0;
  v221 = 0;
  v155 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v152, &v222);
  if (v155 != sub_22EF67F34(*(_QWORD *)(a1 + 88), v154, &v221))
    goto LABEL_262;
  v156 = (*(_QWORD *)a3 >> 33) & 1;
  if ((_DWORD)v156 != ((*(_QWORD *)a4 >> 33) & 1))
  {
    v27 = (_DWORD)v156 == 0;
LABEL_36:
    if (v27)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v151 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3
    && v222 | BYTE4(v222) & 0xC)
  {
    if ((v222 & 0xCFFFFFFF8) != 0)
    {
      v157 = *(_QWORD *)(a1 + 88);
      v223 = v222;
      v158 = sub_22E491354((unsigned int *)&v223, v155);
      v152 = sub_22EF5DBC4(v157, v158, v223);
    }
    else
    {
      v152 = v222 & 7 | v155;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(v153 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3
    && v221 | BYTE4(v221) & 0xC)
  {
    if ((v221 & 0xCFFFFFFF8) != 0)
    {
      v166 = *(_QWORD *)(a1 + 88);
      v223 = v221;
      v167 = sub_22E491354((unsigned int *)&v223, v155);
      v154 = sub_22EF5DBC4(v166, v167, v223);
    }
    else
    {
      v154 = v221 & 7 | v155;
    }
  }
  v168 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v168 & 8) != 0)
  {
    v169 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v170 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v170 = 0;
    v169 = 0;
  }
  v171 = v169 | (v168 | v154) & 7;
  v223 = v171 | v170;
  v172 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v172 & 8) != 0)
  {
    v173 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v174 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v174 = 0;
    v173 = 0;
  }
  v175 = v173 | (v172 | v152) & 7;
  if ((_DWORD)v171 != (_DWORD)v175 || HIDWORD(v170) != HIDWORD(v174))
  {
    if ((sub_22E95F24C((unsigned int *)&v223, v175 | v174) & 1) == 0)
    {
      v172 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFFFF0) + 8);
      goto LABEL_254;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_254:
  v176 = v172 & 8;
  if ((v172 & 8) != 0)
  {
    v177 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v176 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v177 = 0;
  }
  v178 = v177 | (v172 | v152) & 7;
  v223 = v178 | v176;
  v179 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v179 & 8) != 0)
  {
    v180 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v181 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v181 = 0;
    v180 = 0;
  }
  v182 = v180 | (v179 | v154) & 7;
  if (((_DWORD)v178 != (_DWORD)v182 || HIDWORD(v176) != HIDWORD(v181))
    && sub_22E95F24C((unsigned int *)&v223, v182 | v181))
  {
    return 1;
  }
LABEL_262:
  v183 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)v183 & 0x10) != 0
    && *(_DWORD *)(v183 + 192) <= 0xB7DE4FFu
    && (unint64_t)*(unsigned __int8 *)(a3 + 1) << 8 == 2304
    && (unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 == 3072)
  {
    v184 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v184 == sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF0)))
      return 0xFFFFFFFFLL;
  }
  v185 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 0xFF00) == 0x1200 && (unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 == 4608)
  {
    v186 = sub_22EF6E49C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 32));
    v187 = sub_22EF6E49C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 32));
    if (v186)
      result = 0xFFFFFFFFLL;
    else
      result = 1;
    if (v186 != v187)
      return result;
    v185 = *(_QWORD *)a3;
  }
  if ((v185 & 0xFF00) != 0x1300 || (unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 != 4864)
    return 0;
  v188 = sub_22F36E9C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 32));
  v189 = sub_22F36E9C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 32));
  result = v188 ? 0xFFFFFFFFLL : 1;
  if (v188 == v189)
    return 0;
  return result;
}

uint64_t sub_22ED10710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32[4];
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t (**v37)();
  void **v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[128];
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[18];

  v46[16] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22ECF9724(a2);
  v7 = sub_22ECF9724(a3);
  if (!v6 || (v7 & 1) == 0)
  {
    if (v6)
      v30 = 1;
    else
      v30 = 2;
    if (v6 != v7)
      return v30;
    else
      return 0;
  }
  v8 = (uint64_t *)sub_22E9DD080(a2);
  v10 = v9;
  v11 = (uint64_t *)sub_22E9DD080(a3);
  v44 = v46;
  v45 = 0x2000000000;
  v41 = v43;
  v42 = 0x2000000000;
  v33 = v8;
  v34 = v11;
  v35 = v10;
  v36 = v12;
  v32[0] = (uint64_t)v10;
  v32[1] = (uint64_t)v12;
  v32[2] = (uint64_t)v10;
  v32[3] = (uint64_t)v12;
  if (!sub_22ED2300C((uint64_t *)&v33, v32))
  {
    v29 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    v13 = sub_22ED230CC(&v33, &v35);
    v15 = v14;
    v16 = sub_22ED230CC(&v34, &v36);
    if (!v15)
    {
LABEL_42:
      v29 = 2;
      goto LABEL_44;
    }
    if (!v17)
      break;
    v18 = v16;
    LODWORD(v45) = 0;
    LODWORD(v42) = 0;
    v19 = *(unsigned __int8 **)(v13 + 40);
    v20 = *(_QWORD *)(a1 + 88);
    v39 = 1;
    v37 = &off_24FAC6E70;
    v38 = (void **)&v44;
    v40 = v20;
    sub_22F0E9FEC(&v37, v19);
    v21 = *(unsigned __int8 **)(v18 + 40);
    v22 = *(_QWORD *)(a1 + 88);
    v39 = 1;
    v37 = &off_24FAC6E70;
    v38 = &v41;
    v40 = v22;
    sub_22F0E9FEC(&v37, v21);
    if (!llvm::FoldingSetNodeID::operator==())
      goto LABEL_42;
    v23 = v33;
    if (v33 >= v35)
    {
      v25 = v35;
      if (v35 == v33)
        goto LABEL_20;
      while (*(_WORD *)(*v25 + 32) != 167)
      {
        if (++v25 == v33)
        {
LABEL_15:
          v23 = v35;
          goto LABEL_20;
        }
      }
      v24 = v33;
    }
    else
    {
      v24 = v33;
      while (*(_WORD *)(*v24 + 32) != 167)
      {
        if (++v24 == v35)
          goto LABEL_15;
      }
      v25 = v35;
    }
    v23 = v33 + 1;
    if (v24 == v25)
      v23 = v35;
LABEL_20:
    v26 = v34;
    if (v34 < v36)
    {
      v27 = v34;
      while (*(_WORD *)(*v27 + 32) != 167)
      {
        if (++v27 == v36)
          goto LABEL_28;
      }
      v28 = v36;
LABEL_31:
      v26 = v34 + 1;
      if (v27 == v28)
        v26 = v36;
      goto LABEL_33;
    }
    v28 = v36;
    if (v36 != v34)
    {
      while (*(_WORD *)(*v28 + 32) != 167)
      {
        if (++v28 == v34)
        {
LABEL_28:
          v26 = v36;
          goto LABEL_33;
        }
      }
      v27 = v34;
      goto LABEL_31;
    }
LABEL_33:
    v33 = v23;
    v34 = v26;
    if (!sub_22ED2300C((uint64_t *)&v33, v32))
    {
      v29 = 0;
      goto LABEL_44;
    }
  }
  v29 = 1;
LABEL_44:
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
  return v29;
}

unint64_t sub_22ED10A18(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t result;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 48 >= 0x1B)
      v3 = 0;
    else
      v3 = a2;
    if (!a3)
      return 0;
  }
  else
  {
    v3 = 0;
    if (!a3)
      return 0;
  }
  result = 0;
  v5 = (*(_DWORD *)(a3 + 28) & 0x7F) - 48;
  if (v5 >= 0x1B)
    v6 = 0;
  else
    v6 = a3;
  if (v3 && v5 <= 0x1A)
  {
    v7 = *(_QWORD *)(v3 + 16);
    v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (_QWORD *)*v8;
    v9 = sub_22EFCBB30((unint64_t)v8);
    v10 = *(_QWORD *)(v6 + 16);
    v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 4) != 0)
      v11 = (_QWORD *)*v11;
    result = sub_22EFCBB30((unint64_t)v11);
    if (result)
    {
      v12 = result;
      v13 = sub_22EFCC008(v9);
      if (v13 != sub_22EFCC008(v12))
        return 0;
      v14 = *(_QWORD *)(v3 + 8) & 6;
      if ((*(_BYTE *)(v3 + 29) & 0x80) != 0)
      {
        if (v14)
        {
          v15 = sub_22EFC7594(v3);
          goto LABEL_27;
        }
      }
      else if (v14)
      {
        v15 = *(_QWORD *)(v3 - 8);
        goto LABEL_27;
      }
      v15 = 0;
LABEL_27:
      v16 = *(_QWORD *)(v6 + 8) & 6;
      if ((*(_BYTE *)(v6 + 29) & 0x80) != 0)
      {
        if (v16)
        {
          v17 = sub_22EFC7594(v6);
          goto LABEL_33;
        }
      }
      else if (v16)
      {
        v17 = *(_QWORD *)(v6 - 8);
LABEL_33:
        if (v15 != v17 && sub_22EFB948C(v3) <= 2 && sub_22EFB948C(v6) <= 2)
        {
          if ((*(_QWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v3 + 48) & 7) == (*(_QWORD *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v6 + 48) & 7))
            return 1;
          if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x43 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x43)
          {
            v18 = *(_QWORD *)(v3 + 16);
            v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
            if ((v18 & 4) != 0)
              v19 = (_QWORD *)*v19;
            if (v19)
              v20 = (uint64_t)(v19 - 8);
            else
              v20 = 0;
            v21 = *(_QWORD *)(v6 + 16);
            v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
            if ((v21 & 4) != 0)
              v22 = (_QWORD *)*v22;
            v23 = v22 ? (uint64_t)(v22 - 8) : 0;
            if (!*(_QWORD *)(v20 + 40))
            {
              v24 = *(_QWORD *)(v20 + 120);
              if ((v24 < 8 || (v24 & 4) != 0) && !*(_QWORD *)(v23 + 40))
              {
                v25 = *(_QWORD *)(v23 + 120);
                if (v25 < 8 || (v25 & 4) != 0)
                {
                  v26 = sub_22E496830(v20);
                  v27 = sub_22E496830(v23);
                  if ((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8) | v26 & 7) == (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0)
                                                                                               + 8) | v27 & 7))
                    return sub_22E4634B4(v3 + 64, v6 + 64) == 0;
                }
              }
            }
          }
        }
        return 0;
      }
      v17 = 0;
      goto LABEL_33;
    }
  }
  return result;
}

unsigned int *sub_22ED10C74(_QWORD *a1, int a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  BOOL v20;
  unsigned int v21[24];
  unint64_t v22;

  v22 = a3;
  sub_22E8FCA40(a1, a2, 0x146Du, 0, (uint64_t)v21);
  sub_22E890024((uint64_t)v21, (uint64_t *)&v22);
  sub_22E903BEC(v21);
  v8 = v22;
  v9 = *(_QWORD *)(v22 + 8) & 6;
  if ((*(_BYTE *)(v22 + 29) & 0x80) == 0)
  {
    if (v9)
    {
      v10 = *(uint64_t **)(v22 - 8);
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (!v9)
  {
LABEL_5:
    v10 = 0;
    goto LABEL_7;
  }
  v10 = (uint64_t *)sub_22EFC7594(v22);
  v8 = v22;
LABEL_7:
  sub_22E8FCA40(a1, *(_DWORD *)(v8 + 24), 0x15CDu, 0, (uint64_t)v21);
  v20 = v10 == 0;
  v11 = sub_22E894E38((uint64_t)v21, (unsigned __int8 *)&v20);
  if (v10)
  {
    sub_22F1D8A24(v10, 0, __p);
  }
  else
  {
    v19 = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_22F2F3734(v11, __p);
  if (v19 < 0)
    operator delete(__p[0]);
  result = sub_22E903BEC(v21);
  if (a5)
  {
    v13 = 8 * a5;
    while (1)
    {
      v14 = *a4;
      v15 = *(_QWORD *)(*a4 + 8) & 6;
      if ((*(_BYTE *)(*a4 + 29) & 0x80) != 0)
        break;
      if (!v15)
        goto LABEL_18;
      v16 = *(uint64_t **)(v14 - 8);
LABEL_20:
      sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x15CDu, 0, (uint64_t)v21);
      v20 = v16 == 0;
      v17 = sub_22E894E38((uint64_t)v21, (unsigned __int8 *)&v20);
      if (v16)
      {
        sub_22F1D8A24(v16, 0, __p);
      }
      else
      {
        v19 = 0;
        LOBYTE(__p[0]) = 0;
      }
      sub_22F2F3734(v17, __p);
      if (v19 < 0)
        operator delete(__p[0]);
      result = sub_22E903BEC(v21);
      ++a4;
      v13 -= 8;
      if (!v13)
        return result;
    }
    if (v15)
    {
      v16 = (uint64_t *)sub_22EFC7594(*a4);
      goto LABEL_20;
    }
LABEL_18:
    v16 = 0;
    goto LABEL_20;
  }
  return result;
}

BOOL sub_22ED10E50(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  _BOOL8 result;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  void *v48;
  _QWORD *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD v57[2];
  char v58;
  _BYTE v59[96];
  uint64_t v60;
  void *v61;
  __int128 v62;
  _BYTE v63[128];
  _QWORD v64[2];
  void *v65;
  uint64_t v66;
  _BYTE v67[96];
  char v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[10];

  v71[8] = *MEMORY[0x24BDAC8D0];
  v60 = a2;
  v9 = a1[11];
  v10 = (uint64_t *)sub_22E9DD080(a2);
  v12 = v11;
  while (1)
  {
    v13 = v10;
    if (v10 >= v12)
    {
      if (v10 == v12)
        break;
      v14 = v12;
      while (*(_WORD *)(*v14 + 32) != 167)
      {
        if (++v14 == v10)
          goto LABEL_23;
      }
      v13 = v10;
    }
    else
    {
      while (*(_WORD *)(*v13 + 32) != 167)
      {
        if (++v13 == v12)
          goto LABEL_23;
      }
      v14 = v12;
    }
    if (v13 == v14)
      break;
    do
    {
      v16 = *v10++;
      v15 = v16;
    }
    while (*(_WORD *)(v16 + 32) != 167);
    LOBYTE(v64[0]) = 0;
    v17 = *(unsigned __int8 **)(v15 + 40);
    if ((v17[2] & 1) != 0 || !sub_22F005310(v17, (uint64_t)v64, v9, 0) || !LOBYTE(v64[0]))
    {
      if (!a3)
        return 0;
      if (a4)
      {
        v18 = *(_QWORD *)(v60 + 56);
        if ((v18 & 4) != 0 && (v54 = v18 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v54 + 16)))
          v19 = **(int ***)(v54 + 24);
        else
          v19 = (int *)(v60 + 64);
        sub_22E8FCA40(a1, *v19, 0x1527u, 0, (uint64_t)v59);
        v20 = (unsigned int *)v59;
LABEL_70:
        sub_22E903BEC(v20);
        return 0;
      }
      sub_22E8FCA40(a1, a5, 0xA2Au, 0, (uint64_t)v64);
      sub_22E890024((uint64_t)v64, &v60);
LABEL_69:
      v20 = (unsigned int *)v64;
      goto LABEL_70;
    }
  }
LABEL_23:
  v21 = v60;
  v22 = *(_QWORD *)(v60 + 56);
  if ((v22 & 4) != 0 && *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 40))
  {
    v64[0] = 0;
    v64[1] = 0;
    v65 = v67;
    v66 = 0x400000000;
    v68 = 0;
    v69 = v71;
    v70 = 0x400000000;
    if ((sub_22E9F3C18(a1) & 1) != 0)
    {
LABEL_33:
      v23 = 1;
LABEL_34:
      if (v69 != v71)
        free(v69);
      if (v65 != v67)
        free(v65);
      if (v23)
        return 0;
      v21 = v60;
      goto LABEL_40;
    }
    v23 = v68 == 0;
    if (v68 || !a3)
      goto LABEL_34;
    if (!a4)
    {
      sub_22E8FCA40(a1, a5, 0xA29u, 0, (uint64_t)&v61);
      sub_22E890024((uint64_t)&v61, &v60);
      sub_22E903BEC((unsigned int *)&v61);
LABEL_30:
      if ((_DWORD)v70)
      {
        v24 = 16 * v70;
        v25 = (char *)v69 + 8;
        v26 = 1;
        do
        {
          sub_22E9F4654(a1, v25, v26 & 1);
          v26 = 0;
          v25 += 2;
          v24 -= 16;
        }
        while (v24);
      }
      goto LABEL_33;
    }
    v61 = v63;
    v62 = xmmword_22F44E310;
    v44 = v60;
    if ((*(_QWORD *)(v60 + 144) & 6) != 4
      || (v45 = *(_QWORD *)(v60 + 144) & 0xFFFFFFFFFFFFFFF8) == 0
      || (v46 = *(_QWORD *)(v45 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_89:
      v52 = *(_QWORD *)(v44 + 56);
      if ((v52 & 4) != 0 && (v55 = v52 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v55 + 16)))
        v53 = **(int ***)(v55 + 24);
      else
        v53 = (int *)(v44 + 64);
      sub_22E8FCA40(a1, *v53, 0x1753u, 0, (uint64_t)v57);
      sub_22F2F2210((uint64_t)v57, (uint64_t)&v61);
      sub_22E903BEC((unsigned int *)v57);
      if (v61 != v63)
        free(v61);
      goto LABEL_30;
    }
    v63[0] = 32;
    *(_QWORD *)&v62 = 1;
    sub_22ED730EC((uint64_t)a1, *(_QWORD *)(v46 + 56), **(_QWORD **)(v45 + 24), *(_DWORD *)(*(_QWORD *)(v45 + 24) + 8), v57);
    v47 = v58;
    v48 = (void *)v57[0];
    if (v58 >= 0)
      v49 = v57;
    else
      v49 = (_QWORD *)v57[0];
    if (v58 >= 0)
      v50 = v58 & 0x7F;
    else
      v50 = v57[1];
    v51 = v62;
    if (*((_QWORD *)&v62 + 1) < (unint64_t)v62 + v50)
    {
      v56 = v49;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v49 = v56;
      v51 = v62;
      if (!v50)
        goto LABEL_86;
    }
    else if (!v50)
    {
LABEL_86:
      *(_QWORD *)&v62 = v51 + v50;
      if (v47 < 0)
        operator delete(v48);
      v44 = v60;
      goto LABEL_89;
    }
    memcpy((char *)v61 + v51, v49, v50);
    v51 = v62;
    goto LABEL_86;
  }
LABEL_40:
  v27 = *(uint64_t **)(v21 + 120);
  v28 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v28)
    v29 = *(_BYTE *)(v28 + 16) == 26;
  else
    v29 = 0;
  if (v29
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v28 = sub_22F10CF48(v28)) != 0)
  {
    v30 = *(_QWORD *)(v28 + 16);
    if ((v30 & 0x3FFFC000000000) != 0)
    {
      v31 = (unsigned __int16)(v30 >> 38);
      v32 = &v27[v31];
      while (!sub_22E484F44(*v27))
      {
        ++v27;
        if (!(--v31 * 8))
        {
          v27 = v32;
          break;
        }
      }
    }
  }
  v33 = *(_QWORD *)(v60 + 120);
  v34 = *(_QWORD *)(*(_QWORD *)(v60 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v34)
    v35 = *(_BYTE *)(v34 + 16) == 26;
  else
    v35 = 0;
  if (v35
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v34 = sub_22F10CF48(v34)) != 0)
  {
    v36 = (unsigned __int16)(*(_QWORD *)(v34 + 16) >> 38);
  }
  else
  {
    v36 = 0;
  }
  v37 = (uint64_t *)(v33 + 8 * v36);
  result = v27 == v37;
  if (v27 != v37 && a3 != 0)
  {
    v40 = *(_QWORD *)(v60 + 120);
    v41 = *(_QWORD *)(*(_QWORD *)(v60 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v41)
      v42 = *(_BYTE *)(v41 + 16) == 26;
    else
      v42 = 0;
    if (!v42 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      sub_22F10CF48(v41);
    LODWORD(v61) = (((unint64_t)v27 - v40) >> 3) + 1;
    if (a4)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v60 + 24), 0x1745u, 0, (uint64_t)v64);
      v43 = v64;
    }
    else
    {
      sub_22E8FCA40(a1, a5, 0xA25u, 0, (uint64_t)v64);
      v43 = (_QWORD *)sub_22E890024((uint64_t)v64, &v60);
    }
    sub_22E89519C((uint64_t)v43, (unsigned int *)&v61);
    goto LABEL_69;
  }
  return result;
}

void sub_22ED113EC(unsigned int *a1, uint64_t a2, unint64_t a3, char a4, unint64_t a5, int a6)
{
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40[24];
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unint64_t v45;
  int v46;
  void **v47;
  size_t v48;
  uint64_t v49;

  if (!a6 || sub_22ED10E50(a1, a3, 1, 1, 0))
  {
    if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 32))(a3) + 84) & 0x10) == 0
      || !sub_22E47DA60(a3))
    {
      goto LABEL_16;
    }
    sub_22EFC8E88(a3);
    v12 = *v11;
    v13 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v13 && *(_WORD *)(*v12 + 32) != 327)
    {
      v14 = 8 * v13 - 8;
      v15 = *v11;
      do
      {
        v16 = v15[1];
        ++v15;
        v14 -= 8;
      }
      while (*(_WORD *)(v16 + 32) != 327);
    }
    do
    {
      v18 = *v12++;
      v17 = v18;
    }
    while (*(_WORD *)(v18 + 32) != 327);
    if (*(_DWORD *)(v17 + 36) == 7)
    {
      v19 = *(int **)(v17 + 40);
      v20 = *v19;
      v21 = *(int *)((char *)v19 + 3);
      if (v20 == 1634100580 && v21 == 1953264993)
      {
LABEL_16:
        if (!sub_22ED116B8(a3))
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v23 = sub_22ED11874((uint64_t)a1, a2, a3, a4, (uint64_t)&v47);
          v24 = v23;
          v25 = HIDWORD(v23);
          v42 = *((_QWORD *)a1 + 11) + 2128;
          v43 = 5928;
          v26 = (unsigned __int8 *)sub_22E3B8AAC(v42);
          v41 = v26;
          v27 = v26 + 1;
          v28 = *v26;
          v27[v28] = 3;
          *v26 = v28 + 3;
          v26 += 16;
          *(_QWORD *)&v26[8 * v28] = v24;
          v29 = (v28 + 1);
          v27[v29] = 3;
          *(_QWORD *)&v26[8 * v29] = v25;
          v30 = (v28 + 2);
          v27[v30] = 11;
          *(_QWORD *)&v26[8 * v30] = a3;
          if (v49 >= 0)
            v31 = (void **)&v47;
          else
            v31 = v47;
          if (v49 >= 0)
            v32 = HIBYTE(v49) & 0x7F;
          else
            v32 = v48;
          sub_22E3B89A8(&v41, v31, v32);
          v46 = v43;
          v44 = 0;
          v45 = v42;
          if (v41)
          {
            v33 = sub_22E3B8AAC(v42);
            v34 = 0;
            v44 = (unsigned __int8 *)v33;
            v35 = v41;
            v36 = *((_OWORD *)v41 + 1);
            *(_OWORD *)v33 = *(_OWORD *)v41;
            *(_OWORD *)(v33 + 16) = v36;
            v37 = *((_OWORD *)v35 + 5);
            v39 = *((_OWORD *)v35 + 2);
            v38 = *((_OWORD *)v35 + 3);
            *(_OWORD *)(v33 + 64) = *((_OWORD *)v35 + 4);
            *(_OWORD *)(v33 + 80) = v37;
            *(_OWORD *)(v33 + 32) = v39;
            *(_OWORD *)(v33 + 48) = v38;
            do
            {
              std::string::operator=((std::string *)(v33 + 96 + v34), (const std::string *)&v35[v34 + 96]);
              v34 += 24;
            }
            while (v34 != 240);
            sub_22E78D560(v33 + 336, (uint64_t)(v35 + 336));
            sub_22E78D658(v33 + 448, (uint64_t *)v35 + 56);
            if (v41)
            {
              if (v42)
                sub_22E3BB10C(v42, (unint64_t)v41);
            }
          }
          sub_22ECFC6F4((uint64_t)a1, &v44, *(_QWORD *)(a3 + 48), a5);
          sub_22E90379C(a1, *(_DWORD *)(a3 + 24), (uint64_t)&v44, 0, (uint64_t)v40);
          sub_22E903BEC(v40);
          sub_22ED11A4C(a1, a2);
          if (v44 && v45)
            sub_22E3BB10C(v45, (unint64_t)v44);
          if (SHIBYTE(v49) < 0)
            operator delete(v47);
        }
      }
    }
  }
}

BOOL sub_22ED116B8(uint64_t a1)
{
  _BOOL8 result;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  result = 0;
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x38)
    return result;
  v3 = *(_WORD *)(a1 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 != 83)
    {
      if (v3 == 71)
      {
        v4 = -56;
        goto LABEL_19;
      }
      if (v3 == 81)
        goto LABEL_19;
      goto LABEL_14;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_13;
    if (v3 != 16)
    {
      if (((1 << v3) & 0x1066) != 0)
        goto LABEL_19;
      if (v3 != 24)
      {
LABEL_13:
        if (v3 == 70)
        {
          v4 = -64;
          goto LABEL_19;
        }
LABEL_14:
        v5 = v3 - 52;
        v6 = v3 - 33 >= 5;
        v7 = -48;
        if (!v6)
          v7 = -64;
        if (v5 >= 6)
          v4 = v7;
        else
          v4 = -72;
        goto LABEL_19;
      }
    }
    v4 = -48;
  }
LABEL_19:
  v8 = *(_QWORD *)(a1 + 72 + v4 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  if (v9)
    v10 = (unint64_t)(v9 - 8);
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 128);
  if (!v11 || ((*(unsigned __int16 *)(v11 + 8) | (*(unsigned __int8 *)(v11 + 10) << 16)) & 0x100000) == 0)
    return 0;
  v12 = sub_22EFD462C(v10);
  if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x1D)
    v12 = *(_QWORD *)(v12 + 48);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 27 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(unsigned __int8 *)(v16 + 16) - 27 <= 0xFFFFFFFD)
    v16 = sub_22F10CF48(v16);
  v17 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v16 + 24) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(unsigned __int8 *)(v17 + 16) - 27 > 0xFFFFFFFD;
  else
    v18 = 0;
  if (!v18)
    v17 = sub_22F10CF48(v17);
  return ((*(_DWORD *)(v17 + 16) ^ v15) & 0xF80000) != 0;
}

uint64_t sub_22ED11874(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;

  v9 = *(_DWORD *)(a3 + 28);
  v10 = (v9 & 0x7Fu) - 26 < 7 || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 26 < 7;
  v11 = *(_QWORD *)(a3 + 144) & 0xFFFFFFFFFFFFFFF8;
  v12 = (*(_QWORD *)(a3 + 144) & 6) != 4 || v11 == 0;
  if (!v12 && (*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    sub_22ED730EC(a1, *(_QWORD *)((*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8) + 56), **(_QWORD **)(v11 + 24), *(_DWORD *)(*(_QWORD *)(v11 + 24) + 8), &v19);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = v19;
    *(_QWORD *)(a5 + 16) = v20;
    v9 = *(_DWORD *)(a3 + 28);
    v10 = 1;
  }
  v13 = *(_BYTE *)(a5 + 23);
  v14 = *(_QWORD *)(a5 + 8);
  if ((v9 & 0x200) != 0
    && (*(_QWORD *)(a3 + 40) & 7) == 6
    && *(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) == 30)
  {
    v15 = 9;
  }
  else if ((a4 & 2) != 0)
  {
    v15 = 2;
  }
  else if ((v9 & 0x7F) == 0x37)
  {
    if ((v9 & 0x200) != 0)
    {
      if (sub_22EFC0EB8(a3))
      {
        if (sub_22EFD83B0(a3, (int *)&v19))
          v15 = 6;
        else
          v15 = 5;
      }
      else
      {
        v15 = 4;
      }
    }
    else
    {
      v15 = 10;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x2F)
        v15 = 3;
    }
  }
  else
  {
    v15 = (v9 & 0x7Eu) - 58 > 0xFFFFFFFB;
    if ((v9 & 0x200) != 0 && (v9 & 0x7Eu) - 58 >= 0xFFFFFFFC)
    {
      if ((sub_22EFD3F30(a3) & 1) != 0)
      {
        v15 = 8;
      }
      else if (sub_22EFD3B9C(a3))
      {
        v15 = 7;
      }
      else
      {
        v15 = 1;
      }
    }
  }
  if (v13 >= 0)
    v16 = v13 & 0x7F;
  else
    v16 = v14;
  v12 = v16 == 0;
  v17 = 0x200000000;
  if (v12)
    v17 = v10 << 32;
  return v15 | v17;
}

unsigned int *sub_22ED11A4C(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4[24];

  if (a2)
  {
    v2 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x2F)
    {
      sub_22E8FCA40(result, *(_DWORD *)(a2 + 24), 0x174Cu, 0, (uint64_t)v4);
      do
        v2 = *(_QWORD *)(v2 + 72);
      while (v2 && (*(_DWORD *)(v2 + 28) & 0x7E) == 0x2E);
      v3 = sub_22F0AABF8(*(_QWORD *)(v2 + 64));
      sub_22E890024((uint64_t)v4, &v3);
      return sub_22E903BEC(v4);
    }
  }
  return result;
}

void sub_22ED11AD0(unsigned int *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  unsigned __int8 *v7;
  int v8;
  BOOL v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v19;
  int v20;
  unint64_t v21;

  v7 = sub_22E9058F0(a2);
  v8 = *v7;
  v9 = v8 == 211;
  if (v8 == 211)
    v10 = v7;
  else
    v10 = 0;
  v11 = v10 + 64;
  if (v9)
    v12 = v11;
  else
    v12 = v7 + 80;
  v13 = *((unsigned int *)v7 + 1);
  if ((_DWORD)v13)
  {
    for (i = 8 * v13; i; i -= 8)
    {
      v15 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      v16 = *(_DWORD *)(v15 + 28);
      v17 = v16 & 0x7F;
      if (v17 > 0x2F || ((1 << (v16 & 0x7F)) & 0xC00000060000) == 0)
      {
        v20 = *(_DWORD *)(v15 + 28);
        v19 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v19 = sub_22EFBAEA4(*v12 & 0xFFFFFFFFFFFFFFFCLL);
        v20 = *(_DWORD *)(v19 + 28);
      }
      if ((v20 & 0x7F) == 0x1D)
      {
        v21 = *(_QWORD *)(v19 + 48);
      }
      else
      {
        if (v17 > 0x2F || ((1 << v17) & 0xC00000060000) == 0)
        {
          v21 = v15;
        }
        else
        {
          v21 = sub_22EFBAEA4(v15);
          v16 = *(_DWORD *)(v21 + 28);
        }
        if ((v16 & 0x7Eu) - 58 < 0xFFFFFFFA)
          goto LABEL_24;
      }
      sub_22ED113EC(a1, v15, v21, 0, a3, a4);
LABEL_24:
      ++v12;
    }
  }
}

BOOL sub_22ED11C00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;

  if (*(_BYTE *)(a3 + 680))
  {
    if (*(_BYTE *)(a2 + 680))
    {
      v4 = *(_DWORD *)(a2 + 8);
      if (v4)
      {
        v7 = 0;
        v8 = 0;
        v9 = 152 * v4;
        do
        {
          v10 = sub_22ED0E7D4(a1, 0, (int *)(*(_QWORD *)a2 + v7), *(_QWORD *)a3 + v7);
          if (v10 == -1)
          {
            v8 = 1;
          }
          else if (v10 == 1)
          {
            return 0;
          }
          v7 += 152;
        }
        while (v9 != v7);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return *(_BYTE *)(a2 + 680) != 0;
  }
  return v8;
}

uint64_t sub_22ED11CBC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  *a3 = *(_QWORD *)a1 + 688 * v4;
  v5 = *(_QWORD *)a1;
  if (!v4)
    return v3 == v5;
  v9 = v5 + 688 * v4;
  do
  {
    if (*(_BYTE *)(v5 + 680) && (*a3 == v9 || sub_22ED11C00(a2, v5, *a3)))
      *a3 = v5;
    v5 += 688;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 8);
    v9 = *(_QWORD *)a1 + 688 * v11;
  }
  while (v5 != v9);
  if (v5 == *a3)
    return 1;
  if (!*(_DWORD *)(a1 + 8))
    return 0;
  v12 = *(_QWORD *)a1;
  while (1)
  {
    if (*(_BYTE *)(v12 + 680))
    {
      if (v12 != *a3)
      {
        v13 = sub_22ED11C00(a2, *a3, v12);
        v10 = *(_QWORD *)a1;
        v11 = *(unsigned int *)(a1 + 8);
        if (!v13)
          break;
      }
    }
    v12 += 688;
    if (v12 == v10 + 688 * v11)
      return 0;
  }
  *a3 = v10 + 688 * v11;
  return 2;
}

void sub_22ED11DD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  int v7;
  void *v8;
  std::string *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  size_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  std::string __p;
  unsigned __int8 *v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  char v56;
  uint64_t v57[2];
  std::string v58;
  void *v59;
  __int128 v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a1 + 2))
  {
    v4 = *a1;
    while (1)
    {
      v59 = v61;
      v60 = xmmword_22F44E300;
      v57[0] = sub_22E8FCD8C(a2[11], a2[10]);
      v57[1] = v5;
      memset(&v58, 0, sizeof(v58));
      sub_22F119374((uint64_t *)(v4 + 624), (__int128 *)&v58, (uint64_t)v57);
      v6 = std::string::append(&v58, "(");
      __p = *v6;
      v6->__r_.__value_.__r.__words[0] = 0;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v8 = (void *)__p.__r_.__value_.__r.__words[0];
      v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F
          : __p.__r_.__value_.__l.__size_;
      v11 = v60;
      if (*((_QWORD *)&v60 + 1) >= (unint64_t)v60 + v10)
        break;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = v60;
      if (v10)
        goto LABEL_11;
LABEL_12:
      *(_QWORD *)&v60 = v11 + v10;
      if (v7 < 0)
        operator delete(v8);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v12 = *(unsigned int *)(v4 + 640);
      if ((_DWORD)v12)
      {
        v22 = 0;
        v23 = 8 * v12;
        while (1)
        {
          v57[0] = *(_QWORD *)(*(_QWORD *)(v4 + 632) + v22);
          if (v22)
          {
            v24 = v60;
            if (*((_QWORD *)&v60 + 1) < (unint64_t)(v60 + 2))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v24 = v60;
            }
            *(_WORD *)((char *)v59 + v24) = 8236;
            *(_QWORD *)&v60 = v60 + 2;
          }
          v58.__r_.__value_.__r.__words[0] = sub_22E8FCD8C(a2[11], a2[10]);
          v58.__r_.__value_.__l.__size_ = v25;
          memset(&__p, 0, sizeof(__p));
          sub_22F119374(v57, (__int128 *)&__p, (uint64_t)&v58);
          v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F
              : __p.__r_.__value_.__l.__size_;
          v28 = v60;
          if (*((_QWORD *)&v60 + 1) < (unint64_t)v60 + v27)
            break;
          if (v27)
            goto LABEL_39;
LABEL_40:
          *(_QWORD *)&v60 = v28 + v27;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v22 += 8;
          if (v23 == v22)
            goto LABEL_17;
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v28 = v60;
        if (!v27)
          goto LABEL_40;
LABEL_39:
        memcpy((char *)v59 + v28, v26, v27);
        v28 = v60;
        goto LABEL_40;
      }
LABEL_17:
      v13 = v60;
      if (*((_QWORD *)&v60 + 1) < (unint64_t)(v60 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v13 = v60;
      }
      *((_BYTE *)v59 + v13) = 41;
      *(_QWORD *)&v60 = v60 + 1;
      sub_22E8FCA40(a2, 0, 0x1728u, 0, (uint64_t)&__p);
      if (v54)
      {
        v29 = v52;
        if (!v52)
        {
          v29 = (unsigned __int8 *)sub_22E3B8AAC(v53);
          v52 = v29;
        }
        v29[*v29 + 1] = 2;
        v21 = v52;
      }
      else
      {
        if (!v56)
          goto LABEL_60;
        v14 = __p.__r_.__value_.__r.__words[0];
        v15 = __p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
          v15 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 32))(__p.__r_.__value_.__r.__words[2]);
        v58.__r_.__value_.__r.__words[0] = v15;
        v16 = sub_22F2F1D6C((uint64_t *)(v14 + 12784), (uint64_t *)&v58);
        v17 = v16[1] + 32 * v55;
        v20 = *(unsigned __int8 **)(v17 + 8);
        v19 = (unsigned __int8 **)(v17 + 8);
        v18 = v20;
        if (!v20)
        {
          v18 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
          *v19 = v18;
        }
        v18[*v18 + 1] = 2;
        v21 = *v19;
      }
      v30 = *v21;
      *v21 = v30 + 1;
      *(_QWORD *)&v21[8 * v30 + 16] = 3;
      if (v54)
      {
        v39 = v52;
        if (!v52)
        {
          v39 = (unsigned __int8 *)sub_22E3B8AAC(v53);
          v52 = v39;
        }
        v39[*v39 + 1] = 2;
        v38 = v52;
      }
      else
      {
        if (!v56)
          goto LABEL_60;
        v31 = __p.__r_.__value_.__r.__words[0];
        v32 = __p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
          v32 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 32))(__p.__r_.__value_.__r.__words[2]);
        v58.__r_.__value_.__r.__words[0] = v32;
        v33 = sub_22F2F1D6C((uint64_t *)(v31 + 12784), (uint64_t *)&v58);
        v34 = v33[1] + 32 * v55;
        v37 = *(unsigned __int8 **)(v34 + 8);
        v36 = (unsigned __int8 **)(v34 + 8);
        v35 = v37;
        if (!v37)
        {
          v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v36[1]);
          *v36 = v35;
        }
        v35[*v35 + 1] = 2;
        v38 = *v36;
      }
      v40 = *v38;
      *v38 = v40 + 1;
      *(_QWORD *)&v38[8 * v40 + 16] = 2;
LABEL_60:
      v57[0] = 0;
      v41 = sub_22E890024((uint64_t)&__p, v57);
      if (*(_BYTE *)(sub_22F2F2210(v41, (uint64_t)&v59) + 80))
      {
        v42 = *(unsigned __int8 **)(v41 + 32);
        if (!v42)
        {
          v42 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v41 + 40));
          *(_QWORD *)(v41 + 32) = v42;
        }
        v42[*v42 + 1] = 2;
        v43 = *(_BYTE **)(v41 + 32);
      }
      else
      {
        if (!*(_BYTE *)(v41 + 92))
          goto LABEL_66;
        v45 = *(_QWORD *)v41;
        v46 = *(_QWORD *)(v41 + 16);
        if (v46)
          v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
        v58.__r_.__value_.__r.__words[0] = v46;
        v47 = sub_22F2F1D6C((uint64_t *)(v45 + 12784), (uint64_t *)&v58)[1] + 32 * *(unsigned int *)(v41 + 88);
        v50 = *(unsigned __int8 **)(v47 + 8);
        v49 = (_QWORD *)(v47 + 8);
        v48 = v50;
        if (!v50)
        {
          v48 = (unsigned __int8 *)sub_22E3B8AAC(v49[1]);
          *v49 = v48;
        }
        v48[*v48 + 1] = 2;
        v43 = (_BYTE *)*v49;
      }
      v44 = *v43;
      *v43 = v44 + 1;
      *(_QWORD *)&v43[8 * v44 + 16] = 0;
LABEL_66:
      sub_22E903BEC((unsigned int *)&__p);
      if (v59 != v61)
        free(v59);
      v4 += 688;
      if (v4 == *a1 + 688 * *((unsigned int *)a1 + 2))
        return;
    }
    if (!v10)
      goto LABEL_12;
LABEL_11:
    memcpy((char *)v59 + v11, v9, v10);
    v11 = v60;
    goto LABEL_12;
  }
}

void sub_22ED1231C(uint64_t a1, int *a2, _QWORD *a3, int a4, int a5, unsigned int a6, std::string::value_type *a7, std::string::size_type a8, unsigned int a9)
{
  int v17;
  char v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  unsigned int v34[24];
  void *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[24];
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[5];

  v46[3] = *MEMORY[0x24BDAC8D0];
  sub_22ECFE46C(&v35);
  v17 = *a2;
  v18 = sub_22F342D10(a1, (uint64_t)a3);
  sub_22E90379C(a3, v17, (uint64_t)(a2 + 2), v18, (uint64_t)v34);
  sub_22E903BEC(v34);
  sub_22ECFEBA0(a1, (uint64_t)a3, a5, a6, (char *)v35, v36, a7, a8, a9);
  if (a4 != 2)
    goto LABEL_38;
  v19 = *(uint64_t **)a1;
  v20 = *(_DWORD *)(a1 + 8);
  v44 = v46;
  v45 = 0x300000000;
  v41 = v43;
  v42 = 0x300000000;
  if (!v20)
    goto LABEL_34;
  v21 = 0;
  v22 = 0;
  v23 = 168 * v20;
  do
  {
    v24 = *v19;
    if (!*v19)
      goto LABEL_27;
    v38 = v40;
    v39 = 0x300000000;
    v25 = *(_QWORD *)(v24 + 144) & 0xFFFFFFFFFFFFFFF8;
    v26 = (*(_QWORD *)(v24 + 144) & 6) != 4 || v25 == 0;
    if (v26 || (v27 = *(_QWORD *)(v25 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      sub_22F34385C(*(_QWORD *)(v24 + 56), (uint64_t)&v38);
LABEL_14:
      if (!(_DWORD)v39)
        goto LABEL_23;
      goto LABEL_15;
    }
    sub_22EFE9164(*(_QWORD *)(v27 + 56), (uint64_t)&v38);
    v28 = *(_QWORD *)(v27 + 48);
    if (!v28)
      goto LABEL_14;
    if ((*(_DWORD *)(v28 + 28) & 0x7Eu) - 52 > 5)
      goto LABEL_14;
    v30 = *(_QWORD *)(v28 + 56);
    if ((v30 & 4) == 0)
      goto LABEL_14;
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (!v31)
      goto LABEL_14;
    v32 = v39;
    if (v39 >= (unint64_t)HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = v39;
    }
    v38[v32] = v31;
    LODWORD(v39) = v39 + 1;
    if (!(_DWORD)v39)
    {
LABEL_23:
      v29 = 4;
      goto LABEL_24;
    }
LABEL_15:
    if (v22)
    {
      if (v21)
      {
        v29 = 1;
        goto LABEL_24;
      }
      v21 = *v19;
      v33 = (void **)&v41;
    }
    else
    {
      v22 = *v19;
      v33 = (void **)&v44;
    }
    sub_22F24C890((uint64_t)v33, (uint64_t)&v38);
    v29 = 0;
LABEL_24:
    if (v38 != (_QWORD *)v40)
      free(v38);
    if ((v29 | 4) != 4)
      goto LABEL_34;
LABEL_27:
    v19 += 21;
    v23 -= 168;
  }
  while (v23);
  if (v21)
    sub_22E9F5158((uint64_t)a3, v22, (uint64_t)v44, v45, v21, (uint64_t)v41, v42);
LABEL_34:
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
LABEL_38:
  if (v35 != &v37)
    free(v35);
}

void sub_22ED1260C(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  void *v31;
  _BYTE *v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  int v36;
  size_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  const void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  void *v58;
  _BYTE *v59;
  size_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  void *v66;
  _BYTE *v67;
  size_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE v101[96];
  _BYTE v102[96];
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  _BYTE v107[96];
  uint64_t v108;
  unint64_t v109;
  _BYTE v110[24];
  _WORD v111[68];
  _BYTE *v112;
  __int128 v113;
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v11 = *(_WORD *)a4;
  if ((v11 - 4) >= 3)
  {
    v13 = v11 == 13 || v11 == 3;
    if (v13)
      v12 = *(_QWORD *)(a4 + 8);
    else
      v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 48);
  }
  v14 = v12 & 6;
  v15 = v12 & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 & 0xFFFFFFFFFFFFFFF8) == 0;
  v16 = (v12 >> 2) & 1;
  if (v13)
    LODWORD(v16) = 1;
  if (v14 == 4)
    v17 = v15;
  else
    v17 = 0;
  if ((_DWORD)v16)
    v18 = v17;
  else
    v18 = v15;
  switch(*(_WORD *)a4)
  {
    case 2u:
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x174Eu, 0, (uint64_t)v107);
      v19 = (unsigned int *)v107;
      goto LABEL_35;
    case 3u:
      v20 = *(_DWORD *)(a3 + 24);
      v21 = 5960;
      goto LABEL_32;
    case 4u:
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1749u, 0, (uint64_t)&v112);
      *(_QWORD *)v110 = *(_QWORD *)(v18 + 40);
      v48 = sub_22E894538((uint64_t)&v112, (uint64_t *)v110);
      LODWORD(v105) = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4) + 1;
      v49 = sub_22E89519C(v48, (unsigned int *)&v105);
      v50 = *(_QWORD *)(a4 + 8);
      goto LABEL_130;
    case 5u:
      if ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x3B)
      {
        if ((*(_DWORD *)(v18 + 28) & 0x7F) == 0x26)
        {
          LODWORD(v108) = 0;
LABEL_125:
          v87 = *(_DWORD **)(a4 + 8);
          if (*v87 == 8 && v87[6] == 8 && v87[1] != v87[7])
            LODWORD(v108) = 3;
          sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x174Au, 0, (uint64_t)&v112);
          v88 = sub_22E8900C4((uint64_t)&v112, (int *)&v108);
          *(_QWORD *)v110 = *(_QWORD *)(v18 + 40);
          v89 = sub_22E894538(v88, (uint64_t *)v110);
          v49 = sub_22F31ABB4(v89, *(_QWORD *)(a4 + 8));
          v50 = *(_QWORD *)(a4 + 8) + 24;
LABEL_130:
          sub_22F31ABB4(v49, v50);
          goto LABEL_33;
        }
        v86 = 2;
LABEL_124:
        LODWORD(v108) = v86;
        goto LABEL_125;
      }
      v84 = sub_22F0EECF4();
      *(_QWORD *)v110 = v84;
      v85 = sub_22F0EECF4();
      *(_QWORD *)&v105 = v85;
      if (v84 < 0x10
        || v85 < 0x10
        || (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFFF0) + 8) | v84 & 7) == (*(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 8) | v85 & 7))
      {
        v86 = 1;
        goto LABEL_124;
      }
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x174Bu, 0, (uint64_t)&v112);
      v109 = *(_QWORD *)(v18 + 40);
      v97 = sub_22E894538((uint64_t)&v112, (uint64_t *)&v109);
      v98 = sub_22F31ABB4(v97, *(_QWORD *)(a4 + 8));
      v99 = sub_22E8901B8(v98, (uint64_t *)v110);
      v53 = sub_22F31ABB4(v99, *(_QWORD *)(a4 + 8) + 24);
LABEL_76:
      sub_22E8901B8(v53, (uint64_t *)&v105);
      goto LABEL_33;
    case 6u:
      v51 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
      *(_QWORD *)v110 = 0;
      sub_22E491354((unsigned int *)v110, v51);
      *(_QWORD *)&v105 = sub_22F40A8E8((unsigned int *)v110, *((_QWORD *)a1 + 11), *(_QWORD *)(v18 + 48));
      v109 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 32);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1752u, 0, (uint64_t)&v112);
      v108 = *(_QWORD *)(v18 + 40);
      v52 = sub_22E894538((uint64_t)&v112, &v108);
      v53 = sub_22E8901B8(v52, (uint64_t *)&v109);
      goto LABEL_76;
    case 7u:
      v112 = v114;
      v54 = xmmword_22F44E310;
      v113 = xmmword_22F44E310;
      v55 = *(_QWORD *)(a4 + 8);
      if (!v55)
        goto LABEL_91;
      v114[0] = 32;
      *(_QWORD *)&v113 = 1;
      v56 = sub_22EFC7948(a3);
      sub_22ED730EC((uint64_t)a1, *(_QWORD *)(v56 + 56), *(_QWORD *)v55, *(_DWORD *)(v55 + 8), v110);
      v57 = v110[23];
      v58 = *(void **)v110;
      if (v110[23] >= 0)
        v59 = v110;
      else
        v59 = *(_BYTE **)v110;
      if (v110[23] >= 0)
        v60 = v110[23] & 0x7F;
      else
        v60 = *(_QWORD *)&v110[8];
      v61 = v113;
      if (*((_QWORD *)&v113 + 1) >= (unint64_t)v113 + v60)
      {
        if (!v60)
          goto LABEL_87;
        goto LABEL_86;
      }
      v100 = v59;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v59 = v100;
      v61 = v113;
      if (v60)
      {
LABEL_86:
        memcpy(&v112[v61], v59, v60);
        v61 = v113;
      }
LABEL_87:
      v62 = v61 + v60;
      *(_QWORD *)&v113 = v62;
      if (v57 < 0)
      {
        operator delete(v58);
        v62 = v113;
      }
      v54 = xmmword_22F44E310;
      if (v62 == 1)
        *(_QWORD *)&v113 = 0;
LABEL_91:
      if ((*(_WORD *)a4 & 0x100) == 0)
      {
        v109 = 0;
        *(_QWORD *)v110 = v111;
        *(_OWORD *)&v110[8] = v54;
        goto LABEL_138;
      }
      v81 = a4 + 24;
      v82 = *(_DWORD *)(a4 + 40);
      if (v82 == 5031)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1741u, 0, (uint64_t)v110);
        v90 = *(_QWORD *)(*(_QWORD *)v81 + 96);
        v91 = *(_BYTE *)(*(_QWORD *)v81 + 119);
        v92 = v91;
        if (v91 >= 0)
          v90 = *(_QWORD *)v81 + 96;
        v93 = *(_QWORD *)(*(_QWORD *)v81 + 104);
        v94 = v91 & 0x7F;
        if (v92 >= 0)
          v93 = v94;
        *(_QWORD *)&v105 = v90;
        *((_QWORD *)&v105 + 1) = v93;
        v83 = sub_22F2F2210((uint64_t)v110, (uint64_t)&v105);
      }
      else
      {
        if (v82 != 5030)
        {
          v111[0] = 8250;
          *(_OWORD *)&v110[8] = xmmword_22F45D830;
          v109 = *(unsigned int *)(a4 + 16) | ((unint64_t)*(unsigned int *)(a4 + 16) << 32);
          *(_QWORD *)v110 = v111;
          sub_22E9F6F54(a4 + 24, *((_QWORD *)a1 + 13), v110);
LABEL_138:
          sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1751u, 0, (uint64_t)&v105);
          v95 = sub_22F2F2210((uint64_t)&v105, (uint64_t)&v112);
          v96 = sub_22F2F2210(v95, (uint64_t)v110);
          sub_22E8906A0(v96, (uint64_t *)&v109);
          sub_22E903BEC((unsigned int *)&v105);
          sub_22ED11A4C(a1, a2);
          if (*(_WORD **)v110 != v111)
            free(*(void **)v110);
LABEL_140:
          v80 = v112;
          if (v112 != v114)
            goto LABEL_141;
          return;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(a4 + 16), 0x173Fu, 0, (uint64_t)v110);
        v83 = sub_22F2F30F4((uint64_t)v110, (uint64_t)"'enable_if'");
      }
      sub_22F2F2210(v83, (uint64_t)&v112);
      sub_22E903BEC((unsigned int *)v110);
      goto LABEL_140;
    case 8u:
    case 9u:
      v112 = v114;
      v113 = xmmword_22F44E310;
      v28 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 48);
      if (!v28)
        goto LABEL_60;
      v114[0] = 32;
      *(_QWORD *)&v113 = 1;
      v29 = sub_22EFC7948(a3);
      sub_22ED730EC((uint64_t)a1, *(_QWORD *)(v29 + 56), *(_QWORD *)v28, *(_DWORD *)(v28 + 8), v110);
      v30 = v110[23];
      v31 = *(void **)v110;
      if (v110[23] >= 0)
        v32 = v110;
      else
        v32 = *(_BYTE **)v110;
      if (v110[23] >= 0)
        v33 = v110[23] & 0x7F;
      else
        v33 = *(_QWORD *)&v110[8];
      v34 = v113;
      if (*((_QWORD *)&v113 + 1) >= (unint64_t)v113 + v33)
      {
        if (!v33)
          goto LABEL_56;
        goto LABEL_55;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v34 = v113;
      if (v33)
      {
LABEL_55:
        memcpy(&v112[v34], v32, v33);
        v34 = v113;
      }
LABEL_56:
      v35 = v34 + v33;
      *(_QWORD *)&v113 = v35;
      if (v30 < 0)
      {
        operator delete(v31);
        v35 = v113;
      }
      if (v35 == 1)
        *(_QWORD *)&v113 = 0;
LABEL_60:
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x173Du, 0, (uint64_t)v110);
      if ((*(_WORD *)a4 & 0xFE) == 8)
        v36 = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 56) + 1;
      else
        v36 = 1;
      LODWORD(v105) = v36;
      v76 = sub_22E89519C((uint64_t)v110, (unsigned int *)&v105);
      v77 = sub_22F31ABB4(v76, *(_QWORD *)(a4 + 8));
      v78 = sub_22F31ABB4(v77, *(_QWORD *)(a4 + 8) + 24);
      v79 = sub_22F2F2210(v78, (uint64_t)&v112);
      LOBYTE(v109) = *(_BYTE *)a4 == 9;
      sub_22E894E38(v79, (unsigned __int8 *)&v109);
      sub_22E903BEC((unsigned int *)v110);
      goto LABEL_112;
    case 0xAu:
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(_QWORD *)(v22 + 16);
      *(_OWORD *)v110 = *(_OWORD *)v22;
      *(_QWORD *)&v110[16] = v23;
      v105 = *(_OWORD *)(v22 + 24);
      v106 = *(_QWORD *)(v22 + 40);
      if (*(_DWORD *)v110 != 5)
        goto LABEL_26;
      if ((_DWORD)v105 != 5)
        goto LABEL_26;
      v108 = *((_QWORD *)&v105 + 1);
      v109 = *(_QWORD *)&v110[8];
      if (sub_22F0F084C(&v109) || sub_22F0F084C(&v108))
        goto LABEL_26;
      v37 = 0;
      v38 = *(_QWORD *)(sub_22F0F08CC((uint64_t *)&v109) + 40);
      v39 = "";
      if ((v38 & 7) == 0)
      {
        v40 = v38 & 0xFFFFFFFFFFFFFFF8;
        if (v40)
        {
          v41 = *(_DWORD **)(v40 + 16);
          v42 = *v41;
          v39 = (const char *)(v41 + 4);
          v37 = v42;
        }
      }
      v43 = *(_QWORD *)(sub_22F0F08CC(&v108) + 40);
      if ((v43 & 7) != 0 || (v44 = v43 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        if (!v37)
        {
LABEL_115:
          sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1750u, 0, (uint64_t)&v112);
          v104 = sub_22F0F08CC((uint64_t *)&v109);
          sub_22E9AEF84((uint64_t)&v112, (uint64_t *)&v104);
          v103 = sub_22F0F08CC(&v108);
          v25 = (unsigned int *)sub_22E9AEF84((uint64_t)&v112, (uint64_t *)&v103);
          goto LABEL_37;
        }
      }
      else
      {
        v45 = *(int **)(v44 + 16);
        v47 = *v45;
        v46 = v45 + 4;
        if (v37 == v47 && (!v37 || !memcmp(v39, v46, v37)))
          goto LABEL_115;
      }
LABEL_26:
      if (a6 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 52 <= 5 && !sub_22ED10E50(a1, a3, 1, 1, 0))
        return;
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x174Fu, 0, (uint64_t)&v112);
      v24 = sub_22F31ABB4((uint64_t)&v112, (uint64_t)v110);
      sub_22F31ABB4(v24, (uint64_t)&v105);
      v25 = (unsigned int *)&v112;
LABEL_37:
      sub_22E903BEC(v25);
      return;
    case 0xBu:
    case 0xCu:
      sub_22ED23294(a1, a2, a3, a5);
      return;
    case 0xDu:
      if (*(_QWORD *)(v18 + 40))
      {
        v20 = *(_DWORD *)(a3 + 24);
        v21 = 5955;
LABEL_32:
        sub_22E8FCA40(a1, v20, v21, 0, (uint64_t)&v112);
        *(_QWORD *)v110 = *(_QWORD *)(v18 + 40);
        sub_22E894538((uint64_t)&v112, (uint64_t *)v110);
LABEL_33:
        v19 = (unsigned int *)&v112;
LABEL_35:
        sub_22E903BEC(v19);
        sub_22ED11A4C(a1, a2);
        return;
      }
      if ((*(_DWORD *)(v18 + 28) & 0x7F) == 0x3B)
      {
        v27 = *(_DWORD *)(v18 + 68);
      }
      else
      {
        if ((*(_DWORD *)(v18 + 28) & 0x7F) == 0x26)
        {
          v26 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 34);
LABEL_45:
          sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1744u, 0, (uint64_t)&v112);
          *(_DWORD *)v110 = v26 + 1;
          sub_22E8900C4((uint64_t)&v112, (int *)v110);
          goto LABEL_33;
        }
        v27 = *(_DWORD *)(v18 + 64);
      }
      v26 = v27 >> 20;
      goto LABEL_45;
    case 0xFu:
      v112 = v114;
      v63 = **(_QWORD **)(a4 + 8);
      v114[0] = 32;
      v113 = xmmword_22F460B10;
      v64 = sub_22EFC7948(a3);
      sub_22ED730EC((uint64_t)a1, *(_QWORD *)(v64 + 56), *(_QWORD *)v63, *(_DWORD *)(v63 + 8), v110);
      v65 = v110[23];
      v66 = *(void **)v110;
      if (v110[23] >= 0)
        v67 = v110;
      else
        v67 = *(_BYTE **)v110;
      if (v110[23] >= 0)
        v68 = v110[23] & 0x7F;
      else
        v68 = *(_QWORD *)&v110[8];
      v69 = v113;
      if (*((_QWORD *)&v113 + 1) >= (unint64_t)v113 + v68)
      {
        if (!v68)
          goto LABEL_102;
        goto LABEL_101;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v69 = v113;
      if (v68)
      {
LABEL_101:
        memcpy(&v112[v69], v67, v68);
        v69 = v113;
      }
LABEL_102:
      v70 = v69 + v68;
      *(_QWORD *)&v113 = v70;
      if (v65 < 0)
      {
        operator delete(v66);
        v70 = v113;
      }
      if (v70 == 1)
        *(_QWORD *)&v113 = 0;
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1753u, 0, (uint64_t)v110);
      sub_22F2F2210((uint64_t)v110, (uint64_t)&v112);
      sub_22E903BEC((unsigned int *)v110);
      v71 = *(_QWORD *)(a4 + 8);
      v72 = *(unsigned int *)(v71 + 152);
      if ((_DWORD)v72)
      {
        v73 = 16 * v72;
        v74 = (_QWORD *)(*(_QWORD *)(v71 + 144) + 8);
        v75 = 1;
        do
        {
          sub_22E9F4654(a1, v74, v75 & 1);
          v75 = 0;
          v74 += 2;
          v73 -= 16;
        }
        while (v73);
      }
LABEL_112:
      v80 = v112;
      if (v112 != v114)
LABEL_141:
        free(v80);
      return;
    case 0x10u:
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1733u, 0, (uint64_t)v102);
      v19 = (unsigned int *)v102;
      goto LABEL_35;
    case 0x11u:
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x158Au, 0, (uint64_t)v101);
      v25 = (unsigned int *)v101;
      goto LABEL_37;
    default:
      return;
  }
}

void sub_22ED13154(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18[12];
  void *v19;
  uint64_t v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x2000000000;
  v6 = *((_DWORD *)a1 + 2);
  if (v6 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *((_DWORD *)a1 + 2);
  }
  if (v6)
  {
    v7 = *a1;
    v8 = (unint64_t)v6 << 6;
    v9 = (_QWORD *)(*a1 + 8);
    do
    {
      if (*v9)
      {
        v10 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v20;
        }
        *((_QWORD *)v19 + v10) = v7;
        LODWORD(v20) = v20 + 1;
      }
      v7 += 64;
      v9 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  v18[0] = a2;
  v11 = 126 - 2 * __clz(v20);
  if ((_DWORD)v20)
    v12 = v11;
  else
    v12 = 0;
  sub_22ED2574C((uint64_t)v19, (int8x16_t *)((char *)v19 + 8 * v20), v18, v12, 1);
  if ((_DWORD)v20)
  {
    v13 = 0;
    v14 = (_QWORD **)v19;
    v15 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 12);
    v16 = 8 * v20;
    while (v13 < 4 || v15 != 1)
    {
      sub_22ED1260C((unsigned int *)a2, *v14[v13] & 0xFFFFFFFFFFFFFFFCLL, v14[v13][1], (uint64_t)(v14[v13] + 2), 0, *((unsigned __int8 *)a1 + 1044));
      ++v13;
      v16 -= 8;
      if (!v16)
        goto LABEL_20;
    }
    sub_22E8FCA40((_QWORD *)a2, a3, 0x1755u, 0, (uint64_t)v18);
    v17 = v16 >> 3;
    sub_22E8900C4((uint64_t)v18, &v17);
    sub_22E903BEC((unsigned int *)v18);
  }
LABEL_20:
  if (v19 != v21)
    free(v19);
}

uint64_t sub_22ED13340(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, BOOL *a6)
{
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _BYTE *v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  BOOL v37;
  int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  _QWORD *v43;
  int v44;
  int v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;
  BOOL v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unsigned int v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  int v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int *v130;
  int v131;
  uint64_t v132;
  unsigned int *v133;
  int v134;
  uint64_t v135;
  _BYTE *v136;
  unsigned int *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  unsigned __int8 *v142;
  int v143;
  BOOL v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unint64_t v150;
  int v151;
  uint64_t *v153;
  uint64_t v154;
  BOOL v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  int v159;
  _BYTE *v160;
  unint64_t v161;
  char *v162;
  _QWORD *v164;
  uint64_t v165;
  unsigned __int8 *v166;
  BOOL *v167;
  int v169;
  int v170;
  uint64_t v171;
  _BYTE *v172;
  unint64_t v173;
  int v174;
  _BYTE *v175;
  unint64_t v176;
  int v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  unsigned __int8 v182;
  unint64_t v183;
  BOOL v184;
  __int16 v185;
  char v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unsigned __int8 *v189;
  void *v190[2];
  _QWORD v191[33];
  void *v192;
  uint64_t v193;
  _BYTE v194[64];
  void *v195;
  uint64_t v196;
  _BYTE v197[1024];
  int v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206[2];
  _QWORD v207[17];
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  void *v213;
  uint64_t v214;
  _QWORD v215[10];
  void *v216;
  uint64_t v217;
  _BYTE v218[104];
  void *v219;
  uint64_t v220;
  _QWORD v221[10];

  v7 = a4;
  v8 = (unsigned __int8 *)a2;
  v9 = (uint64_t)a1;
  v221[8] = *MEMORY[0x24BDAC8D0];
  v171 = a3;
  v178 = a1;
  v179 = a2;
  v180 = &v171;
  v181 = 0;
  v182 = a4;
  v183 = *((_QWORD *)a1 + 11);
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || *(_BYTE *)(v10 + 16) != 31)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
      v10 = sub_22F10CF48(v10);
    else
      v10 = 0;
  }
  v184 = v10 != 0;
  v185 = 0;
  v186 = 0;
  v187 = sub_22E9058F0(v8);
  v188 = v11;
  v189 = v187;
  v190[0] = v191;
  v190[1] = (void *)0x800000000;
  v191[32] = 0;
  v192 = v194;
  v193 = 0x400000000;
  v12 = *((_DWORD *)v187 + 6);
  v195 = v197;
  v196 = 0x1000000000;
  v198 = v12;
  v199 = 1;
  v181 = sub_22F342DC8(*v180);
  v13 = v189;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    if (*v189 == 212)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v189 + 7);
      if (v14)
      {
        if ((sub_22EFFFB48(v14) & 1) == 0 && !sub_22ED14F7C(v9, v13, 0, 0))
          HIBYTE(v185) = 1;
      }
    }
    goto LABEL_26;
  }
  if ((*(_DWORD *)v189 & 0x40000) == 0
    || (*(_DWORD *)v189 != 211 ? (v15 = v189 + 80) : (v15 = v189 + 64),
        !*(_DWORD *)&v15[8 * *((unsigned int *)v189 + 1)]))
  {
LABEL_26:
    v169 = v7;
    if ((*(_DWORD *)v189 & 0x40000) != 0)
    {
      v21 = *(_DWORD *)v189 == 211 ? v189 + 64 : v189 + 80;
      if (*(_DWORD *)&v21[8 * *((unsigned int *)v189 + 1)])
        sub_22E9C442C((unsigned int *)v189, (uint64_t)v190);
    }
    if (v184 && !BYTE1(v188))
      goto LABEL_171;
    v22 = *v189;
    v23 = v22 == 211;
    v24 = v22 == 211 ? v189 : 0;
    v25 = v24 + 64;
    v26 = v23 ? v25 : v189 + 80;
    v27 = *((unsigned int *)v189 + 1);
    if (!(_DWORD)v27)
      goto LABEL_171;
    v165 = v9;
    v166 = v8;
    v167 = a6;
    v28 = 0;
    v29 = v215;
    v30 = v218;
    v31 = v221;
    v32 = &v26[8 * v27];
    while (1)
    {
      v33 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFCLL;
      v34 = *(_DWORD *)(v33 + 28);
      if ((v34 & 0x7Fu) <= 0x2F && ((1 << (v34 & 0x7F)) & 0xC00000060000) != 0)
      {
        v33 = sub_22EFBAEA4(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFCLL);
        v34 = *(_DWORD *)(v33 + 28);
      }
      if ((v34 & 0x7F) != 0x1D)
      {
        if ((*(_DWORD *)v189 & 0x40000) != 0)
        {
          v39 = v189 + 80;
          if (*(_DWORD *)v189 == 211)
            v39 = v189 + 64;
          if (*(_DWORD *)&v39[8 * *((unsigned int *)v189 + 1)])
            goto LABEL_122;
        }
        v40 = (v34 & 0x7E) - 58;
        if (v40 >= 0xFFFFFFFC)
        {
          if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33) + 80) & 0xE000) == 0x4000)
            v53 = 1;
          else
            v53 = (*(_QWORD *)(v33 + 40) & 7) == 6
               && (*(_DWORD *)(*(_QWORD *)(v33 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
          if (v184 != v53)
          {
            v40 = (*(_DWORD *)(v33 + 28) & 0x7E) - 58;
            goto LABEL_73;
          }
        }
        else if (!v184)
        {
LABEL_73:
          if (v40 < 0xFFFFFFFA)
            goto LABEL_74;
          if ((*(_BYTE *)(*((_QWORD *)v178 + 9) + 68) & 0x20) != 0)
          {
            v66 = sub_22E903070((uint64_t)v178, 1);
            if (v66)
            {
              if ((*(_WORD *)(v66 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA
                && (*(_BYTE *)(v66 - 43) & 2) == 0
                && !sub_22E9FE318((uint64_t)v178, v66 - 72, v33))
              {
                goto LABEL_118;
              }
            }
          }
          if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33) + 84) & 0x10) == 0
            || (*(_BYTE *)(v33 + 29) & 1) == 0)
          {
            goto LABEL_110;
          }
          sub_22EFC8E88(v33);
          v62 = *(uint64_t **)v61;
          v63 = *(unsigned int *)(v61 + 8);
          v64 = *(uint64_t **)v61;
          if ((_DWORD)v63)
          {
            v65 = 8 * v63;
            v64 = *(uint64_t **)v61;
            while (*(_WORD *)(*v64 + 32) != 327)
            {
              ++v64;
              v65 -= 8;
              if (!v65)
                goto LABEL_110;
            }
          }
          if (v64 == &v62[v63])
            goto LABEL_110;
          do
          {
            v68 = *v62++;
            v67 = v68;
          }
          while (*(_WORD *)(v68 + 32) != 327);
          if (*(_DWORD *)(v67 + 36) == 7
            && ((v69 = *(int **)(v67 + 40), v70 = *v69, v71 = *(int *)((char *)v69 + 3), v70 == 1634100580)
              ? (v72 = v71 == 1953264993)
              : (v72 = 0),
                v72))
          {
LABEL_110:
            v73 = v178;
            sub_22F0D5A50(v179);
            if (sub_22ED15360(v73, v33, v74, v182))
            {
              v56 = 0;
              v186 |= v182;
              goto LABEL_119;
            }
            if (!sub_22ED10E50(v178, v33, 0, 0, 0))
              goto LABEL_118;
            if ((*(_BYTE *)(*((_QWORD *)v178 + 9) + 1) & 1) != 0
              && !sub_22ED23580((uint64_t *)&v178, *(_QWORD *)(v33 + 48)))
            {
LABEL_74:
              v55 = 0;
              v56 = 0;
            }
            else
            {
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
              v76 = *(_QWORD *)v26;
              v77 = v193;
              if (v193 >= (unint64_t)HIDWORD(v193))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v77 = v193;
              }
              v78 = (char *)v192 + 16 * v77;
              *v78 = v76;
              v78[1] = v75;
              LODWORD(v193) = v193 + 1;
              v55 = 1;
              LOBYTE(v185) = 1;
              v56 = 1;
            }
          }
          else
          {
LABEL_118:
            v56 = 0;
LABEL_119:
            v55 = 1;
          }
          v54 = v55 & v56;
LABEL_121:
          v28 |= v54;
          goto LABEL_122;
        }
        v54 = 0;
        goto LABEL_121;
      }
      v36 = *(_QWORD *)(v33 + 48);
      if (v36)
        v37 = (*(_DWORD *)(v36 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
      else
        v37 = 0;
      if (v37)
      {
        if ((*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v36 + 32))(*(_QWORD *)(v33 + 48)) + 80) & 0xE000) == 0x4000)
          v41 = 1;
        else
          v41 = (*(_QWORD *)(v36 + 40) & 7) == 6
             && (*(_DWORD *)(*(_QWORD *)(v36 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
        if (v184 != v41)
        {
LABEL_65:
          v170 = v28;
          v42 = v32;
          v175 = 0;
          v203 = 0;
          LODWORD(v204) = v198;
          BYTE4(v204) = 0;
          v205 = 0;
          v206[0] = (char *)v207;
          v206[1] = (char *)0x400000000;
          v207[16] = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v43 = v29;
          v213 = v29;
          v214 = 0x800000000;
          v215[8] = 0;
          v215[9] = 0;
          v216 = v30;
          v217 = 0x400000000;
          v218[96] = 0;
          v219 = v31;
          v220 = 0x400000000;
          v44 = sub_22EDC3E48((uint64_t)v178, v33, (uint64_t)v190, v181, (void **)&v175, (uint64_t)&v203, 1);
          if (v44)
          {
            v45 = v44;
            sub_22ED23640((uint64_t)&v195);
            v46 = (char *)v195 + 64 * (unint64_t)v196;
            v47 = v31;
            v48 = *(_QWORD *)v26;
            v49 = v30;
            v50 = *(_QWORD *)(v33 + 48);
            sub_22ECF93D4(v183, v45, (unint64_t)&v203, (uint64_t)&v200);
            v38 = 0;
            *((_QWORD *)v46 - 8) = v48;
            *((_QWORD *)v46 - 7) = v50;
            v31 = v47;
            v30 = v49;
            v51 = v200;
            v52 = v202;
            *((_OWORD *)v46 - 2) = v201;
            *((_OWORD *)v46 - 1) = v52;
            *((_OWORD *)v46 - 3) = v51;
          }
          else
          {
            v38 = 0;
            if (sub_22ED10E50(v178, (uint64_t)v175, 0, 0, 0))
            {
              v57 = *(_QWORD *)v26;
              v58 = v175;
              v59 = v193;
              if (v193 >= (unint64_t)HIDWORD(v193))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v59 = v193;
              }
              v60 = (char *)v192 + 16 * v59;
              *v60 = v57;
              v60[1] = v58;
              LODWORD(v193) = v193 + 1;
              v38 = 1;
            }
          }
          if (v219 != v31)
            free(v219);
          v29 = v43;
          if (v216 != v30)
            free(v216);
          v32 = v42;
          if (v213 != v29)
            free(v213);
          sub_22E89277C(v206);
          v28 = v170;
          goto LABEL_86;
        }
      }
      else if (!v184)
      {
        goto LABEL_65;
      }
      v38 = 0;
LABEL_86:
      v28 |= v38;
LABEL_122:
      v26 += 8;
      if (v26 == v32)
      {
        a6 = v167;
        v9 = v165;
        v8 = v166;
        if ((v28 & 1) != 0 && v193 >= 2)
        {
          v79 = v192;
          v80 = (char *)v192 + 16;
          v81 = 16 * v193 - 16;
          do
          {
            if (sub_22ED235D8((uint64_t *)&v178, *((_QWORD *)v80 + 1), v79[1]))
              v79 = v80;
            v80 += 16;
            v81 -= 16;
          }
          while (v81);
          v82 = v192;
          v83 = v79[1];
          if ((_DWORD)v193)
          {
            v84 = 16 * v193;
            v85 = (uint64_t *)((char *)v192 + 8);
            while (*v85 == v83 || sub_22ED235D8((uint64_t *)&v178, v83, *v85))
            {
              v85 += 2;
              v84 -= 16;
              if (!v84)
              {
                v82 = v192;
                v83 = v79[1];
                goto LABEL_138;
              }
            }
            if ((_BYTE)v185)
            {
              LODWORD(v86) = v193;
              if ((_DWORD)v193)
              {
                v87 = 0;
                do
                {
                  v88 = (char *)v192 + 16 * v87;
                  v90 = *((_QWORD *)v88 + 1);
                  v89 = v88 + 8;
                  v91 = *(_QWORD *)(v90 + 144) & 0xFFFFFFFFFFFFFFF8;
                  v92 = (*(_QWORD *)(v90 + 144) & 6) != 4 || v91 == 0;
                  if (v92 || *(_QWORD *)(v91 + 16) <= 7uLL)
                  {
                    ++v87;
                  }
                  else
                  {
                    v86 = (v86 - 1);
                    v93 = (uint64_t *)((char *)v192 + 16 * v86);
                    v95 = *v93;
                    v94 = v93[1];
                    *((_QWORD *)v192 + 2 * v87) = v95;
                    *v89 = v94;
                    sub_22F3438C4((uint64_t)&v192, v86);
                  }
                }
                while (v87 != (_DWORD)v86);
              }
            }
            else
            {
              v203 = &v205;
              v204 = 0x400000000;
              if ((_DWORD)v193)
              {
                v96 = 0;
                v97 = 0;
                v98 = 16 * v193;
                do
                {
                  v100 = *(_QWORD *)((char *)v192 + v96);
                  v99 = *(_QWORD *)((char *)v192 + v96 + 8);
                  if (v97 >= HIDWORD(v204))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v97 = v204;
                  }
                  *((_QWORD *)v203 + v97) = v100 & 3 | v99;
                  v97 = v204 + 1;
                  LODWORD(v204) = v204 + 1;
                  v96 += 16;
                }
                while (v98 != v96);
                v101 = (uint64_t *)v203;
              }
              else
              {
                v97 = 0;
                v101 = &v205;
              }
              v102 = &v101[v97];
              v103 = (uint64_t *)v178;
              sub_22F0D5A50(v179);
              v105 = v104;
              v106 = v103[11] + 2128;
              *(_QWORD *)&v200 = 0;
              *((_QWORD *)&v200 + 1) = v106;
              LODWORD(v201) = 0;
              v175 = 0;
              v176 = v106;
              v177 = 2593;
              v107 = *(_QWORD *)(*((_QWORD *)v192 + 1) + 40);
              v175 = (_BYTE *)sub_22E3B8AAC(v106);
              v175[*v175 + 1] = 10;
              v108 = v175;
              v109 = *v175;
              *v175 = v109 + 1;
              *(_QWORD *)&v108[8 * v109 + 16] = v107;
              v110 = *((_QWORD *)v178 + 11) + 2128;
              v172 = 0;
              v173 = v110;
              v174 = 5928;
              v172 = (_BYTE *)sub_22E3B8AAC(v110);
              v172[*v172 + 1] = 3;
              v111 = v172;
              v112 = *v172;
              *v172 = v112 + 1;
              *(_QWORD *)&v111[8 * v112 + 16] = 0;
              v111[(v112 + 1) + 1] = 3;
              v113 = v172;
              v114 = *v172;
              *v172 = v114 + 1;
              *(_QWORD *)&v113[8 * v114 + 16] = 2;
              v115 = (char *)sub_22EDC9E74(v103, v101, v102, (uint64_t *)&v195, v105, (uint64_t)&v200, (uint64_t)&v175, (uint64_t *)&v172, v182, v181);
              if (v172 && v173)
                sub_22E3BB10C(v173, (unint64_t)v172);
              a6 = v167;
              if (v175 && v176)
                sub_22E3BB10C(v176, (unint64_t)v175);
              if ((_QWORD)v200 && *((_QWORD *)&v200 + 1))
                sub_22E3BB10C(*((unint64_t *)&v200 + 1), v200);
              v116 = (uint64_t *)v203;
              if ((char *)v203 + 8 * v204 == v115)
              {
                v186 |= v182;
              }
              else
              {
                v164 = v192;
                *(_QWORD *)v192 = *(_QWORD *)((char *)v192 + 2 * (v115 - (_BYTE *)v203));
                v164[1] = *(_QWORD *)v115 & 0xFFFFFFFFFFFFFFFCLL;
                sub_22F3438C4((uint64_t)&v192, 1uLL);
                v116 = (uint64_t *)v203;
              }
              if (v116 != &v205)
                free(v116);
            }
          }
          else
          {
LABEL_138:
            *v82 = *v79;
            v82[1] = v83;
            sub_22F3438C4((uint64_t)&v192, 1uLL);
          }
        }
LABEL_171:
        v117 = v193;
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 72) + 68) & 0x20) != 0)
        {
          v7 = v169;
          if (v193 >= 2)
          {
            v118 = v178;
            v119 = sub_22E903070((uint64_t)v178, 1);
            v120 = v119 - 72;
            if (!v119)
              v120 = 0;
            if ((*(_WORD *)(v119 + 8) & 0x7Eu) - 52 >= 6)
              v121 = 0;
            else
              v121 = v120;
            sub_22F31C408((uint64_t)v118, v121, (uint64_t)&v192);
            goto LABEL_179;
          }
        }
        else
        {
          v7 = v169;
        }
        goto LABEL_181;
      }
    }
  }
  v16 = (_DWORD *)sub_22ED14F7C(v9, v189, 0, &v203);
  if (v16)
  {
    if ((v17 = v16, (v16[7] & 0x7Eu) - 58 < 0xFFFFFFFC)
      || (*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 32))(v16) + 80) & 0xE000) == 0x4000
      || (*((_QWORD *)v17 + 5) & 7) == 6
      && (*(_DWORD *)(*((_QWORD *)v17 + 5) & 0xFFFFFFFFFFFFFFF8) - 1) < 4
      || (v184 = 1, BYTE1(v188)))
    {
      v18 = v203;
      v19 = v193;
      if (v193 >= HIDWORD(v193))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v193;
      }
      v20 = (char *)v192 + 16 * v19;
      *v20 = v18;
      v20[1] = v17;
      LODWORD(v193) = v193 + 1;
    }
  }
LABEL_179:
  v117 = v193;
LABEL_181:
  v122 = v7 ^ 1;
  if (v186)
    v122 = 1;
  if (!v117 && (v122 & 1) == 0)
  {
    if (v184 && !BYTE1(v188))
    {
      sub_22E8FCA40(v178, *((_DWORD *)v189 + 6), 0xA22u, 0, (uint64_t)&v203);
      v123 = sub_22E8901B8((uint64_t)&v203, v180);
      sub_22F0D4E74((uint64_t)v189);
      *(_QWORD *)&v200 = v124;
      sub_22E8906A0(v123, (uint64_t *)&v200);
      sub_22E903BEC((unsigned int *)&v203);
LABEL_236:
      v125 = 0;
      goto LABEL_237;
    }
    v137 = v178;
    sub_22F0D5A50((uint64_t)v189);
    sub_22E8FCA40(v137, v138, 0xA23u, 0, (uint64_t)&v203);
    *(_QWORD *)&v200 = *((_QWORD *)v189 + 2);
    v139 = sub_22E894538((uint64_t)&v203, (uint64_t *)&v200);
    v140 = sub_22E8901B8(v139, (uint64_t *)&v181);
    sub_22F0D4E74((uint64_t)v189);
    v175 = v141;
    sub_22E8906A0(v140, (uint64_t *)&v175);
    sub_22E903BEC((unsigned int *)&v203);
    if ((_DWORD)v196)
    {
      v142 = v189;
      v143 = *v189;
      v144 = v143 == 211;
      if (v143 == 211)
        v145 = v189;
      else
        v145 = 0;
      v146 = v145 + 64;
      if (v144)
        v147 = v146;
      else
        v147 = v189 + 80;
      v148 = *((unsigned int *)v189 + 1);
      if ((_DWORD)v148)
      {
        v149 = &v147[8 * v148];
        do
        {
          v150 = *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFFCLL;
          v151 = *(_DWORD *)(v150 + 28);
          if ((v151 & 0x7Fu) <= 0x2F && ((1 << (v151 & 0x7F)) & 0xC00000060000) != 0)
          {
            v150 = sub_22EFBAEA4(*(_QWORD *)v147 & 0xFFFFFFFFFFFFFFFCLL);
            v151 = *(_DWORD *)(v150 + 28);
          }
          if ((v151 & 0x7Eu) - 58 >= 0xFFFFFFFA)
          {
            v153 = *(uint64_t **)(v150 + 120);
            v154 = *(_QWORD *)(*(_QWORD *)(v150 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v154)
              v155 = *(_BYTE *)(v154 + 16) == 26;
            else
              v155 = 0;
            if ((v155
               || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v154 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
               && (v154 = sub_22F10CF48(v154)) != 0)
              && (v156 = *(_QWORD *)(v154 + 16), (v156 & 0x3FFFC000000000) != 0))
            {
              v157 = 8 * (unsigned __int16)(v156 >> 38);
              while (!sub_22E484F44(*v153))
              {
                ++v153;
                v157 -= 8;
                if (!v157)
                  goto LABEL_228;
              }
            }
            else
            {
LABEL_228:
              sub_22ED113EC(v178, *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFFCLL, v150, 0, v181, 1);
            }
          }
          v147 += 8;
        }
        while (v147 != v149);
        v142 = v189;
      }
      v158 = v178;
      sub_22F0D5A50((uint64_t)v142);
      sub_22ED13154((uint64_t *)&v195, (uint64_t)v158, v159);
      goto LABEL_236;
    }
LABEL_234:
    sub_22ED11AD0(v178, v189, v181, 1);
    goto LABEL_236;
  }
  if (v117 < 2)
    v122 = 1;
  if ((v122 & 1) == 0)
  {
    v133 = v178;
    sub_22F0D5A50((uint64_t)v189);
    sub_22E8FCA40(v133, v134, 0xA21u, 0, (uint64_t)&v203);
    *(_QWORD *)&v200 = *((_QWORD *)v189 + 2);
    v135 = sub_22E894538((uint64_t)&v203, (uint64_t *)&v200);
    sub_22F0D4E74((uint64_t)v189);
    v175 = v136;
    sub_22E8906A0(v135, (uint64_t *)&v175);
    sub_22E903BEC((unsigned int *)&v203);
    goto LABEL_234;
  }
  if (v117 != 1)
    goto LABEL_236;
  v125 = *((_QWORD *)v192 + 1);
  v126 = *(_QWORD *)(*(_QWORD *)(v125 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v126)
    v127 = *(_BYTE *)(v126 + 16) == 26;
  else
    v127 = 0;
  if (v127
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v126 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v125 + 48) & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22EFF605C((uint64_t)v8);
    sub_22EB14850(v9, v128);
  }
  v129 = *(_QWORD *)v192;
  *a5 = *(_QWORD *)v192;
  if (!v7)
  {
LABEL_237:
    if (!a6)
      goto LABEL_239;
    goto LABEL_238;
  }
  if (HIBYTE(v185))
  {
    v130 = v178;
    sub_22F0D5A50((uint64_t)v189);
    sub_22E8FCA40(v130, v131, 0xE51u, 0, (uint64_t)&v203);
    sub_22F0D4E74((uint64_t)v189);
    *(_QWORD *)&v200 = v132;
    sub_22E8906A0((uint64_t)&v203, (uint64_t *)&v200);
    sub_22E903BEC((unsigned int *)&v203);
    if (!a6)
      goto LABEL_239;
LABEL_238:
    *a6 = *((_DWORD *)v189 + 1) > 1u;
    goto LABEL_239;
  }
  sub_22E90B2C0(v9, v8, v129);
  if (a6)
    goto LABEL_238;
LABEL_239:
  v160 = v195;
  if ((_DWORD)v196)
  {
    v161 = (unint64_t)v196 << 6;
    v162 = (char *)v195 + 16;
    do
    {
      sub_22ECF95E4((unint64_t)v162);
      v162 += 64;
      v161 -= 64;
    }
    while (v161);
    v160 = v195;
  }
  if (v160 != v197)
    free(v160);
  if (v192 != v194)
    free(v192);
  if (v190[0] != v191)
    free(v190[0]);
  return v125;
}

uint64_t sub_22ED14440(_QWORD *a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E9058F0(a2);
  v25 = 0;
  v7 = *v6;
  v8 = v7 == 211;
  if (v7 == 211)
    v9 = v6;
  else
    v9 = 0;
  v10 = (uint64_t *)(v9 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = (uint64_t *)(v6 + 80);
  v12 = *((unsigned int *)v6 + 1);
  if ((_DWORD)v12)
  {
    v24 = a3;
    v13 = 0;
    v14 = 0;
    v15 = 8 * v12;
    while (1)
    {
      v16 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = *(_DWORD *)(v16 + 28);
      if ((v17 & 0x7Fu) <= 0x2F && ((1 << (v17 & 0x7F)) & 0xC00000060000) != 0)
      {
        v16 = sub_22EFBAEA4(*v11 & 0xFFFFFFFFFFFFFFFCLL);
        v17 = *(_DWORD *)(v16 + 28);
      }
      if ((v17 & 0x7Eu) - 58 < 0xFFFFFFFA)
        return 0;
      if (sub_22ED10E50(a1, v16, 0, 0, 0))
      {
        if (!v13)
          goto LABEL_22;
        v19 = sub_22ED146A8((uint64_t)a1, v16, v13);
        if (v19 <= 0xFFu)
        {
          v20 = v25;
          if (v25 >= 2uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v25;
          }
          v26[v20] = v16;
          ++v25;
          v14 = 1;
          goto LABEL_23;
        }
        if ((_BYTE)v19)
        {
LABEL_22:
          v14 = 0;
          v3 = *v11;
          v13 = v16;
        }
      }
LABEL_23:
      ++v11;
      v15 -= 8;
      if (!v15)
      {
        if (v14 & 1 | (v13 == 0))
          return 0;
        if (!v25)
        {
          *v24 = v3;
          return v13;
        }
        v22 = v26;
        v23 = 8 * v25;
        while ((unsigned __int16)sub_22ED146A8((uint64_t)a1, *v22, v13) >= 0x100u)
        {
          ++v22;
          v23 -= 8;
          if (!v23)
          {
            *v24 = v3;
            return v13;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_22ED146A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  __int16 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x100000000;
  v10 = &v12;
  v11 = 0x100000000;
  sub_22F34385C(*(_QWORD *)(a2 + 56), (uint64_t)&v13);
  sub_22F34385C(*(_QWORD *)(a3 + 56), (uint64_t)&v10);
  v9 = 0;
  if ((sub_22E9F4DA0(a1, a2, v13, v14, a3, v10, v11, (char *)&v9 + 1) & 1) != 0
    || (sub_22E9F4DA0(a1, a3, v10, v11, a2, v13, v14, &v9) & 1) != 0)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v7 = HIBYTE(v9) != v9;
    if (HIBYTE(v9) == v9)
      v6 = 0;
    else
      v6 = HIBYTE(v9);
  }
  if (v10 != &v12)
    free(v10);
  if (v13 != v15)
    free(v13);
  return v6 | (v7 << 8);
}

unint64_t sub_22ED147E8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  void **v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 *v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v63[2];
  void *v64;
  uint64_t v65;
  _BYTE v66[256];
  uint64_t v67;
  uint64_t v68;

  v7 = (uint64_t)a2;
  v68 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  if (v9 > 0xD3)
  {
    if (v9 != 212)
    {
      if (v9 != 233)
      {
        if (v9 == 214)
        {
          v12 = sub_22ED147E8(a1, *((_QWORD *)a2 + 3), a3, a4);
          if (v12 != *(_QWORD *)(v7 + 24))
          {
            v13 = (int *)v12;
            v14 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
            return sub_22EB54C14(v14, *(_DWORD *)(v7 + 16), *(_DWORD *)(v7 + 20), v13);
          }
        }
        return v7;
      }
      if (!a4
        || (*(_DWORD *)(a4 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
        || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) + 80) & 0xE000) == 0x4000
        || (*(_QWORD *)(a4 + 40) & 7) == 6
        && (*(_DWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
      {
        v32 = sub_22ED147E8(a1, *(_QWORD *)(v7 + 16), a3, a4);
        if (v32 != *(_QWORD *)(v7 + 16))
          return sub_22EB2EA08(a1, *(_DWORD *)(v7 + 4), 4, v32) & 0xFFFFFFFFFFFFFFFELL;
        return v7;
      }
      v43 = sub_22ED147E8(a1, *(_QWORD *)(v7 + 16), a3, a4);
      if (v43 == *(_QWORD *)(v7 + 16))
        return v7;
      v44 = v43;
      v45 = *(_QWORD *)(a1 + 88);
      v46 = *(_QWORD *)(a4 + 16);
      v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
      if ((v46 & 4) != 0)
        v47 = (_QWORD *)*v47;
      if (v47)
        v48 = (unint64_t)(v47 - 8);
      else
        v48 = 0;
      v49 = *(_QWORD *)(v48 + 48);
      if (!v49)
      {
        v49 = sub_22EF6462C(v45, v48);
        v45 = *(_QWORD *)(a1 + 88);
      }
      v50 = sub_22F36A6C0(v45, *(_QWORD *)(a4 + 48), *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0));
      v51 = *(_QWORD *)(a1 + 88);
      if (*(_DWORD *)(*(_QWORD *)(v51 + 15088) + 148) == 11)
      {
        sub_22EE8B180(a1, *(unsigned int *)(v7 + 4));
        v51 = *(_QWORD *)(a1 + 88);
      }
      v52 = *(_DWORD *)(v7 + 4);
      if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
      {
        v53 = 0;
      }
      else
      {
        v53 = *(_QWORD *)(a1 + 1296);
        if (HIDWORD(v53))
        {
          v54 = 32;
          goto LABEL_99;
        }
      }
      v54 = 24;
LABEL_99:
      v7 = sub_22E3CD3D4(v51 + 2032, v54, 3);
      sub_22F0031D0(v7, v51, v44, 4, v50, 0, 0, v52, 0, v53);
      return v7;
    }
    v64 = v66;
    a5.n128_u64[0] = 0x800000000;
    v65 = 0x800000000;
    v67 = 0;
    if ((*(_DWORD *)a2 & 0x40000) != 0
      && (*(_DWORD *)a2 != 211 ? (v30 = a2 + 80) : (v30 = a2 + 64),
          *(_DWORD *)&v30[8 * *((unsigned int *)a2 + 1)]))
    {
      v31 = &v64;
      a5.n128_f64[0] = sub_22E9C442C((unsigned int *)a2, (uint64_t)&v64);
    }
    else
    {
      v31 = 0;
    }
    v37 = *(unsigned int **)(v7 + 56);
    if (!v37 || sub_22EFFFB48(*(unsigned __int8 **)(v7 + 56)))
    {
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a4 + 32))(a4, a5) + 80) & 0xE000) == 0x4000
        || (*(_QWORD *)(a4 + 40) & 7) == 6
        && (*(_DWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
      {
        if ((*(_DWORD *)v7 & 0x40000) != 0)
        {
          if (*(_DWORD *)v7 == 211)
            v55 = v7 + 64;
          else
            v55 = v7 + 80;
          v38 = *(_DWORD *)(v55 + 8 * *(unsigned int *)(v7 + 4) + 8);
        }
        else
        {
          v38 = 0;
        }
        v56 = (_DWORD *)sub_22EB21CE8(a1, a4, *(_QWORD *)(a4 + 48), 1, v7 + 16, *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), a3 & 0xFFFFFFFFFFFFFFFCLL, v38, (uint64_t)v31);
        *v56 = *v56 & 0xFFDFFFFF | ((*(_DWORD *)(v7 + 4) > 1u) << 21);
        goto LABEL_96;
      }
      if (*(_QWORD *)(v7 + 40))
      {
        v41 = *(_QWORD *)(v7 + 48);
        v63[0] = *(_QWORD *)(v7 + 40);
        v63[1] = v41;
        v42 = sub_22F0AB0EC(v63);
      }
      else
      {
        v42 = *(_DWORD *)(v7 + 24);
      }
      v37 = sub_22EBBC14C(a1, v42, *(_QWORD *)(v7 + 64), 1);
    }
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) + 80) & 0xE000) == 0x4000
      || (*(_QWORD *)(a4 + 40) & 7) == 6
      && (*(_DWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
    {
      v57 = (uint64_t *)(a4 + 48);
      v58 = 1;
    }
    else
    {
      v58 = 0;
      v57 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 16848);
    }
    v59 = *v57;
    if ((*(_DWORD *)v7 & 0x40000) != 0)
    {
      if (*(_DWORD *)v7 == 211)
        v61 = v7 + 64;
      else
        v61 = v7 + 80;
      v60 = *(_DWORD *)(v61 + 8 * *(unsigned int *)(v7 + 4) + 8);
    }
    else
    {
      v60 = 0;
    }
    v56 = sub_22EC25D24(a1, (uint64_t)v37, (*(_DWORD *)v7 >> 19) & 1, *(_DWORD *)(v7 + 72), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), v60, a4, a3, 1, (__int128 *)(v7 + 16), v59, v58, SHIWORD(v58), 0, 0, (uint64_t)v31);
LABEL_96:
    v7 = (uint64_t)v56;
    v29 = v64;
    if (v64 == v66)
      return v7;
    goto LABEL_97;
  }
  if (v9 != 153)
  {
    if (v9 != 176)
    {
      if (v9 == 211)
      {
        v64 = v66;
        v65 = 0x800000000;
        v67 = 0;
        if ((*(_DWORD *)a2 & 0x40000) != 0
          && (*(_DWORD *)a2 != 211 ? (v10 = a2 + 80) : (v10 = a2 + 64),
              *(_DWORD *)&v10[8 * *((unsigned int *)a2 + 1)]))
        {
          v11 = &v64;
          sub_22E9C442C((unsigned int *)a2, (uint64_t)&v64);
        }
        else
        {
          v11 = 0;
        }
        v33 = *(_QWORD *)(a4 + 48);
        v34 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
        v35 = sub_22EFC01DC(a4, 0);
        if (v35 && (sub_22EB2542C(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15208), v35) & 1) == 0)
        {
          v34 = 0;
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16864);
        }
        if ((*(_DWORD *)v7 & 0x40000) != 0)
        {
          if (*(_DWORD *)v7 == 211)
            v39 = v7 + 64;
          else
            v39 = v7 + 80;
          v36 = *(_DWORD *)(v39 + 8 * *(unsigned int *)(v7 + 4) + 8);
        }
        else
        {
          v36 = 0;
        }
        v40 = (_DWORD *)sub_22EB21CE8(a1, a4, v33, v34, v7 + 16, *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), a3 & 0xFFFFFFFFFFFFFFFCLL, v36, (uint64_t)v11);
        *v40 = *v40 & 0xFFDFFFFF | ((*(_DWORD *)(v7 + 4) > 1u) << 21);
        if (v64 != v66)
          free(v64);
        return (unint64_t)v40;
      }
      return v7;
    }
    v23 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v23 == -1)
      return v7;
    v24 = a2 + 32;
    v25 = sub_22ED147E8(a1, *(_QWORD *)&a2[8 * v23 + 40], a3, a4);
    if (v25 == *(_QWORD *)&v24[8 * (*(_DWORD *)(v7 + 20) + 1)])
      return v7;
    v26 = v25;
    v27 = (_BYTE *)(v7 + 40 + 8 * *(unsigned int *)(v7 + 16));
    v64 = v66;
    v65 = 0x400000000;
    sub_22E3D0148((uint64_t)&v64, (_BYTE *)(v7 + 40), v27);
    v28 = *(unsigned int *)(v7 + 20);
    *((_QWORD *)v64 + v28) = v26;
    v7 = sub_22F3C26AC(*(_QWORD *)(a1 + 88), *(_DWORD *)(v7 + 4), *(_QWORD *)(v7 + 32), &v24[8 * (*(_DWORD *)(v7 + 16) + 1)], *(unsigned int *)(v7 + 16), (uint64_t *)v64, v65, *(_DWORD *)(v7 + 24), *(_DWORD *)(v7 + 28), 0, (*(_DWORD *)v7 & 0x2000) != 0, v28);
    v29 = v64;
    if (v64 == v66)
      return v7;
LABEL_97:
    free(v29);
    return v7;
  }
  v15 = sub_22ED147E8(a1, *((_QWORD *)a2 + 2), a3, a4);
  if (v15 != *(_QWORD *)(v7 + 16))
  {
    v16 = v15;
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *(_QWORD *)(v7 + 8);
    v19 = (*(_DWORD *)v7 >> 18) & 0x7F;
    v20 = (*(_DWORD *)v7 >> 8) & 3;
    if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    {
      v21 = 0;
      v22 = 24;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 1296);
      if (HIDWORD(v21))
        v22 = 32;
      else
        v22 = 24;
    }
    v7 = sub_22E3CD3D4(v17 + 2032, v22, 3);
    sub_22F003694((unsigned int *)v7, v18, v19, v16, 0, v21, v20);
  }
  return v7;
}

unint64_t sub_22ED14F7C(_QWORD *a1, unsigned int *a2, int a3, _QWORD *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v9;
  int v10;
  BOOL v11;
  unsigned int *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  int v22;
  int v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  _BYTE *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v38;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43[24];
  unint64_t v44;
  _OWORD v45[3];
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char *v50[2];
  _QWORD v51[17];
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[10];
  void *v60;
  uint64_t v61;
  _BYTE v62[104];
  void *v63;
  uint64_t v64;
  _BYTE v65[64];
  void *v66;
  uint64_t v67;
  _BYTE v68[1024];
  unsigned int v69;
  char v70;
  void *v71[2];
  _QWORD v72[35];

  v72[33] = *MEMORY[0x24BDAC8D0];
  if ((*a2 & 0x40000) == 0)
    return 0;
  v5 = (unsigned __int8 *)(a2 + 20);
  v6 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
  if (!*(_DWORD *)(v6 + 8 * a2[1]))
    return 0;
  v71[0] = v72;
  v71[1] = (void *)0x800000000;
  v72[32] = 0;
  sub_22E9C442C(a2, (uint64_t)v71);
  v9 = a2[6];
  v66 = v68;
  v67 = 0x1000000000;
  v69 = v9;
  v70 = 0;
  v10 = *(unsigned __int8 *)a2;
  v11 = v10 == 211;
  if (v10 == 211)
    v12 = a2;
  else
    v12 = 0;
  v13 = (unsigned __int8 *)(v12 + 16);
  if (v11)
    v14 = v13;
  else
    v14 = v5;
  v15 = a2[1];
  if (!(_DWORD)v15)
    goto LABEL_39;
  v38 = a4;
  v40 = 0;
  v16 = 8 * v15;
  v41 = a1;
  do
  {
    v17 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = *(_DWORD *)(v17 + 28) & 0x7F;
    v19 = v18 > 0x2F;
    v20 = (1 << v18) & 0xC00000060000;
    if (!v19 && v20 != 0)
      v17 = sub_22EFBAEA4(*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL);
    v44 = 0;
    v46 = 0;
    v47 = v69;
    v48 = 0;
    v49 = 0;
    v50[0] = (char *)v51;
    v50[1] = (char *)0x400000000;
    v51[16] = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = v59;
    v58 = 0x800000000;
    v59[8] = 0;
    v59[9] = 0;
    v60 = v62;
    v61 = 0x400000000;
    v62[96] = 0;
    v63 = v65;
    v64 = 0x400000000;
    v22 = sub_22EDC3E48((uint64_t)a1, v17, (uint64_t)v71, 0, (void **)&v44, (uint64_t)&v46, 1);
    if (v22)
    {
      v23 = v22;
      sub_22ED23640((uint64_t)&v66);
      v24 = a1;
      v25 = (char *)v66 + 64 * (unint64_t)v67;
      v26 = *(_QWORD *)v14;
      v27 = *(_QWORD *)(v17 + 48);
      sub_22ECF93D4(v24[11], v23, (unint64_t)&v46, (uint64_t)v45);
      *((_QWORD *)v25 - 8) = v26;
      *((_QWORD *)v25 - 7) = v27;
      v28 = v45[0];
      v29 = v45[2];
      *((_OWORD *)v25 - 2) = v45[1];
      *((_OWORD *)v25 - 1) = v29;
      *((_OWORD *)v25 - 3) = v28;
      v30 = 4;
    }
    else if (v40)
    {
      if (a3)
      {
        sub_22EFF605C((uint64_t)a2);
        sub_22E8FCA40(a1, v31, 0xA21u, 0, (uint64_t)v43);
        v42 = *((_QWORD *)a2 + 2);
        sub_22E894538((uint64_t)v43, &v42);
        sub_22E903BEC(v43);
        sub_22ED11AD0((unsigned int *)a1, (unsigned __int8 *)a2, 0, 0);
      }
      v30 = 1;
    }
    else
    {
      v40 = v44;
      v30 = 0;
      if (v38)
        *v38 = *(_QWORD *)v14;
    }
    if (v63 != v65)
      free(v63);
    a1 = v41;
    if (v60 != v62)
      free(v60);
    if (v57 != v59)
      free(v57);
    sub_22E89277C(v50);
    if ((v30 | 4) != 4)
    {
      v32 = 0;
      goto LABEL_41;
    }
    v14 += 8;
    v16 -= 8;
  }
  while (v16);
  v32 = v40;
  if (v40)
  {
    sub_22EFF605C((uint64_t)a2);
    if (sub_22ED15360(v41, v40, v33, a3))
LABEL_39:
      v32 = 0;
  }
LABEL_41:
  v34 = v66;
  if ((_DWORD)v67)
  {
    v35 = (unint64_t)v67 << 6;
    v36 = (char *)v66 + 16;
    do
    {
      sub_22ECF95E4((unint64_t)v36);
      v36 += 64;
      v35 -= 64;
    }
    while (v35);
    v34 = v66;
  }
  if (v34 != v68)
    free(v34);
  if (v71[0] != v72)
    free(v71[0]);
  return v32;
}

BOOL sub_22ED15360(_QWORD *a1, unint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v15;

  if ((*(_BYTE *)(a1[9] + 1) & 4) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
    else
      v9 = 0;
    if (!v9)
      v8 = sub_22F10CF48(v8);
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0);
    v15 = 0;
    v11 = sub_22F110500((uint64_t)&v15, v10);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 24) <= 0xFuLL
        && (*(_BYTE *)(v11 + 17) & 4) == 0
        && (sub_22EDC6650(a1, a2, a3, a4) & 1) != 0)
      {
        return 1;
      }
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || *(_BYTE *)(v12 + 16) != 26)
    v12 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  return (*(_BYTE *)(a1[9] + 1) & 8) != 0
      && ((*(_QWORD *)(v12 + 16) >> 54) & 0xF) - 9 <= 1
      && !sub_22EB14850(a1, a3);
}

void sub_22ED15474(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  int v12;
  unsigned __int8 *v13;
  void **v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24[2];
  _QWORD v25[35];

  v25[33] = *MEMORY[0x24BDAC8D0];
  v24[0] = v25;
  v24[1] = (void *)0x800000000;
  v25[32] = 0;
  v12 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x40000) == 0)
    goto LABEL_6;
  v13 = a2 + 64;
  if (v12 != 211)
    v13 = a2 + 80;
  if (*(_DWORD *)&v13[8 * *((unsigned int *)a2 + 1)])
  {
    v14 = v24;
    sub_22E9C442C((unsigned int *)a2, (uint64_t)v24);
    v12 = *a2;
  }
  else
  {
LABEL_6:
    v14 = 0;
  }
  v15 = v12 == 211;
  if (v12 == 211)
    v16 = a2;
  else
    v16 = 0;
  v17 = (uint64_t *)(v16 + 64);
  if (v15)
    v18 = v17;
  else
    v18 = (uint64_t *)(a2 + 80);
  v19 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    do
    {
      v21 = *v18++;
      sub_22ED155EC(a1, v21, (uint64_t)v14, (uint64_t)a3, a4, a5, a6);
      v20 -= 8;
    }
    while (v20);
  }
  if ((a2[2] & 8) != 0)
  {
    v22 = *((_QWORD *)a2 + 2);
    sub_22EFF605C((uint64_t)a2);
    sub_22ED0D734(a1, v22, v23, a3, a4, (uint64_t)v14, a5, a6);
  }
  if (v24[0] != v25)
    free(v24[0]);
}

uint64_t sub_22ED155EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;

  v12 = result;
  v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 28);
  v15 = v14 & 0x7E;
  if (v15 == 46)
  {
    v13 = *(_QWORD *)(v13 + 64);
    v14 = *(_DWORD *)(v13 + 28);
    v15 = v14 & 0x7E;
  }
  if ((v15 - 58) >= 0xFFFFFFFA)
  {
    if (!a3)
    {
      result = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
      v16 = *(unsigned __int8 *)(result + 16);
      if (result)
        v17 = (v16 - 27) > 0xFFFFFFFD;
      else
        v17 = 0;
      if (!v17)
      {
        result = sub_22F10CF48(result);
        v16 = *(unsigned __int8 *)(result + 16);
      }
      if (v16 == 26)
      {
        HIBYTE(v19) = 0;
        *(_WORD *)((char *)&v19 + 1) = 1;
        LOBYTE(v19) = a7;
        return sub_22ED0475C(v12, v13, a2, 0, a4, a5, a6, 0, v19, 0, 0, 0);
      }
    }
  }
  else if ((v14 & 0x7F) == 0x1D)
  {
    BYTE4(v18) = 0;
    WORD1(v18) = 1;
    BYTE1(v18) = a7;
    LOBYTE(v18) = 0;
    return sub_22ED07F48(result, v13, a2, 0, a3, a4, a5, a6, v18);
  }
  return result;
}

uint64_t sub_22ED15724(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int **a9)
{
  uint64_t v15;
  unsigned __int8 **v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int16 v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v28 = v30;
  v29 = 0x200000000;
  v15 = a6;
  if ((_DWORD)a6)
  {
    v16 = (unsigned __int8 **)a5;
    while (!sub_22ECFAD0C((uint64_t *)a1, v16, (uint64_t)&v28))
    {
      ++v16;
      if (!--v15)
        goto LABEL_5;
    }
    v20 = 1;
    *a9 = (unsigned int *)1;
  }
  else
  {
LABEL_5:
    sub_22ED15474(a1, a4, a5, a6, a8, 0);
    if ((**(_BYTE **)(a1 + 72) & 0x10) != 0
      && sub_22EFC7ADC(*(_QWORD *)(a1 + 216))
      && (sub_22EE03478(a1), !v17)
      && ((v22 = *(_WORD *)(*(_QWORD *)(a1 + 216) + 8), (v22 & 0x7Eu) - 52 < 6) || (v22 & 0x7Fu) - 35 <= 2)
      && ((v27 = 0, !*(_DWORD *)(a8 + 8)) || (sub_22F0D5A50(a3), sub_22ED03FCC(a8, a1, v23, &v27) == 1)))
    {
      if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
        v24 = 0;
      else
        v24 = *(_QWORD *)(a1 + 1296);
      v25 = sub_22EFFA488(*(_QWORD *)(a1 + 88), a3, (uint64_t)a5, a6, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), 0, a7, v24, 0, 0);
      *v25 |= 0x1C000u;
      *a9 = v25;
      v20 = 1;
    }
    else
    {
      if (*(_DWORD *)(a8 + 8) && (_DWORD)v29)
      {
        v18 = 16 * v29;
        v19 = (char *)v28 + 8;
        do
        {
          *(_QWORD *)*(v19 - 1) = *v19;
          v19 += 2;
          v18 -= 16;
        }
        while (v18);
      }
      v20 = 0;
    }
  }
  if (v28 != v30)
    free(v28);
  return v20;
}

unsigned int *sub_22ED15954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int *v31;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[339];
  int v41;
  _OWORD v42[9];
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[5];
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  v11 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = (unsigned __int8 *)v22;
  v25 = v24;
  v26 = (_QWORD *)v11;
  v51 = *MEMORY[0x24BDAC8D0];
  sub_22EFF605C(v22);
  v38 = v40;
  v39 = 0x1000000000;
  v40[336] = v42;
  v40[337] = v42;
  v40[338] = 16;
  v41 = 0;
  v42[8] = 0u;
  v43 = v45;
  v44 = 0x400000000;
  v45[4] = (char *)&v46 + 8;
  v46 = 0u;
  v47 = 1;
  v48 = v27;
  v50 = 0;
  v49 = 0u;
  v37 = 0;
  if (sub_22ED15724((uint64_t)v26, v28, (uint64_t)v23, v21, (uint64_t *)v17, v15, v19, (uint64_t)&v38, &v37))
  {
    v31 = v37;
  }
  else
  {
    v35 = (uint64_t)v21;
    if (a11 && (_DWORD)v39)
    {
      v33 = 168 * v39;
      v34 = v38 + 13;
      do
      {
        if ((*v34 & 1) != 0 && !sub_22ED10E50(v26, *((_QWORD *)v34 - 13), 0, 0, 0))
        {
          *v34 &= ~1u;
          v34[1] = 11;
        }
        v34 += 168;
        v33 -= 168;
      }
      while (v33);
    }
    v36 = 0;
    sub_22F0D5A50((uint64_t)v23);
    v30 = sub_22ED03FCC(&v38, v26, v29, &v36);
    v31 = (unsigned int *)sub_22ED15B90((uint64_t)v26, v25, v23, v35, v19, v17, v15, v13, a9, (uint64_t)&v38, &v36, v30, a10);
  }
  sub_22E9DC79C((uint64_t *)&v38);
  return v31;
}

uint64_t sub_22ED15B90(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, unsigned __int8 **a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t **a11, int a12, char a13)
{
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t k;
  uint64_t v43;
  __n128 v44;
  uint64_t v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v52;
  unsigned __int8 **v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t i;
  int v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unsigned __int8 *v79;
  BOOL v80;
  BOOL v82;
  uint64_t (***v83)();
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t j;
  int v96;
  int v97;
  uint64_t **v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t (*v105)();
  void **v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  unsigned int v111;
  uint64_t v114;
  uint64_t **v116;
  int v118;
  _OWORD *v119;
  unint64_t v120;
  int v121;
  int v122;
  _OWORD *v123;
  unint64_t v124;
  int v125;
  int v126;
  _OWORD *v127;
  unint64_t v128;
  int v129;
  uint64_t (**v130)();
  int v131;
  char v132;
  uint64_t v133;
  _BYTE v134[11];
  int v135;
  BOOL v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t (**v139)();
  int v140;
  char v141;
  uint64_t v142;
  _BYTE v143[11];
  uint64_t v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  int v156;
  _QWORD v157[3];
  __int16 v158;
  int v159;
  char v160;
  void *v161;
  uint64_t v162;
  _QWORD v163[32];
  uint64_t v164;
  uint64_t v165;

  v13 = a8;
  v14 = a7;
  v15 = a6;
  v16 = (uint64_t)a3;
  v19 = a10;
  v18 = a11;
  v165 = *MEMORY[0x24BDAC8D0];
  switch(a12)
  {
    case 0:
      v22 = **a11;
      sub_22E90A150(a1, a4, (*a11)[1]);
      LODWORD(v161) = *(_DWORD *)(a4 + 24);
      v23 = 1;
      if ((sub_22EB17F48(a1, v22, &v161, 1, 0, 0, 0, 0) & 1) == 0)
      {
        v25 = sub_22ED147E8(a1, a3, (*a11)[1], v22, v24);
        v26 = a5;
        v27 = v13;
        BYTE1(v103) = ((*a11)[13] & 0x10) != 0;
        LOBYTE(v103) = 0;
        v28 = a1;
        v29 = v22;
        return sub_22EB334BC(v28, v25, v29, v26, v15, v14, v27, a9, v103, v105, v106);
      }
      return v23;
    case 1:
      if (*(_BYTE *)(a1 + 1692))
        goto LABEL_13;
      v68 = *(_DWORD *)(a10 + 8);
      *(_BYTE *)(a1 + 1692) = 1;
      v145 = 0u;
      *(_OWORD *)v146 = 0u;
      sub_22E8ACE30((uint64_t)&v145, *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48));
      v111 = v13;
      v108 = v68;
      if ((*(_DWORD *)a4 & 0x40000) != 0)
      {
        v71 = *(unsigned int *)(a4 + 4);
        if (*(_DWORD *)a4 == 211)
          v72 = a4 + 64;
        else
          v72 = a4 + 80;
        v107 = *(_DWORD *)(v72 + 8 * v71 + 8);
        v69 = a10;
        v161 = v163;
        v162 = 0x800000000;
        v164 = 0;
        if (*(_DWORD *)(v72 + 8 * v71))
        {
          v70 = &v161;
          sub_22E9C442C((unsigned int *)a4, (uint64_t)&v161);
        }
        else
        {
          v70 = 0;
        }
      }
      else
      {
        v69 = a10;
        v107 = 0;
        v70 = 0;
        v161 = v163;
        v162 = 0x800000000;
        v164 = 0;
      }
      v73 = *(_QWORD *)(a4 + 16);
      v74 = *(_DWORD *)(a4 + 24);
      v147 = 0;
      v148 = v150;
      v149 = 0x800000000;
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v154 = (_QWORD *)a1;
      v155 = v73;
      v156 = v74;
      sub_22EFC6D6C((uint64_t)v157, v73);
      v157[1] = 0;
      v157[2] = 0;
      v158 = 0;
      v159 = 257;
      v160 = 0;
      sub_22EC56024((uint64_t)&v147);
      v144 = 0;
      sub_22EFF605C((uint64_t)a3);
      if ((sub_22ED23774(a1, v75, (uint64_t)&v145, (uint64_t)&v147, 0, (uint64_t)v70, (uint64_t)v15, v14, &v144) & 1) != 0)
        goto LABEL_38;
      if (v108)
      {
        if (!v144 || (**(_BYTE **)(a1 + 72) & 0x10) == 0)
        {
          v23 = 0;
LABEL_82:
          v19 = v69;
          v13 = v111;
          goto LABEL_87;
        }
        if (sub_22EB2247C(a1, (uint64_t)&v147))
        {
LABEL_81:
          v23 = 1;
          goto LABEL_82;
        }
      }
      else
      {
        LODWORD(v147) = 0;
        LODWORD(v149) = 0;
        if (v151)
        {
          v77 = sub_22EC6CBD0(v151);
          MEMORY[0x2348A0E9C](v77, 0x10E0C409F09D3C3);
        }
        v78 = 0;
        HIBYTE(v159) = 0;
        v151 = 0;
        v152 = 0;
        memset(v143, 0, sizeof(v143));
        v142 = 0;
        v139 = &off_24FAB9028;
        v140 = 0;
        v141 = 0;
        v80 = *a3 == 188;
        v131 = 16843009;
        v132 = 1;
        v130 = &off_24FAB8880;
        if (v80)
          v79 = a3;
        else
          v79 = 0;
        memset(v134, 0, sizeof(v134));
        v133 = 0;
        v135 = v14;
        v136 = v70 != 0;
        v137 = *(_QWORD *)(a1 + 216);
        v138 = v79;
        LOBYTE(v131) = 0;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        {
          v80 = (_DWORD)v14 == 1 && v70 == 0;
          v78 = v80;
        }
        HIBYTE(v131) = v78;
        v82 = (_DWORD)v14 == 1 && v70 != 0;
        BYTE2(v131) = v82;
        v132 = 0;
        if (a13)
          v83 = &v130;
        else
          v83 = &v139;
        if ((sub_22EB22808(a1, (uint64_t)a2, (uint64_t)&v145, (uint64_t)&v147, (uint64_t)v83, (uint64_t)v70, (uint64_t)v15, v14, 0) & 1) != 0)goto LABEL_81;
      }
LABEL_38:
      if ((_DWORD)v147 == 5)
      {
        BYTE1(v159) = 0;
        v23 = 1;
        v19 = v69;
        v13 = v111;
        goto LABEL_92;
      }
      v19 = v69;
      if (sub_22E8BB0E8(*(_QWORD *)v148 & 0xFFFFFFFFFFFFFFFCLL))
      {
        v76 = sub_22EC21A04(a1, (uint64_t *)&v145, v107, (uint64_t)&v147, (uint64_t)v70, a2, 0);
        v13 = v111;
      }
      else
      {
        v13 = v111;
        if (v70 || v107)
          v76 = sub_22ED66318((_QWORD *)a1, (uint64_t)&v145, v107, (uint64_t)&v147, 0, (uint64_t)v70);
        else
          v76 = sub_22EB235A8((_QWORD *)a1, (uint64_t)&v145, (uint64_t)&v147, 0, 0);
      }
      if ((v76 & 1) != 0)
      {
        v23 = 1;
      }
      else
      {
        LOWORD(v104) = 0;
        v23 = sub_22EB1CFA4(a1, 0, v76 & 0xFFFFFFFFFFFFFFFELL, a5, v15, v14, v13, 0, v104);
      }
LABEL_87:
      if (BYTE1(v159))
      {
        if ((_DWORD)v147 == 5)
        {
          sub_22EC64D18(v154, (uint64_t)&v147);
        }
        else if (v152 && (*(_DWORD *)(v154[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v154, (uint64_t)&v147);
        }
      }
LABEL_92:
      if (v151)
      {
        v102 = sub_22EC6CBD0(v151);
        MEMORY[0x2348A0E9C](v102, 0x10E0C409F09D3C3);
      }
      if (v148 != v150)
        free(v148);
      if (v161 != v163)
        free(v161);
      if (HIDWORD(v146[1]))
        free(v146[0]);
      *(_BYTE *)(a1 + 1692) = 0;
      if (!v23)
      {
LABEL_13:
        v109 = v19;
        v114 = v14;
        v116 = a11;
        if (!v14)
        {
LABEL_24:
          v53 = v15;
          sub_22F0D5A50((uint64_t)a3);
          v55 = v54;
          v56 = *(_QWORD *)(a1 + 88) + 2128;
          v57 = *(_QWORD *)(a4 + 16);
          v58 = (unsigned __int8 *)sub_22E3B8AAC(v56);
          v59 = *v58;
          v58[v59 + 1] = 10;
          *v58 = v59 + 1;
          *(_QWORD *)&v58[8 * v59 + 16] = v57;
          sub_22F0D4E74((uint64_t)a3);
          sub_22E4D6448((uint64_t)(v58 + 336), v60, 1);
          v126 = v55;
          v129 = 4481;
          v128 = v56;
          v61 = (_OWORD *)sub_22E3B8AAC(v56);
          v127 = v61;
          v62 = *((_OWORD *)v58 + 5);
          v64 = *((_OWORD *)v58 + 2);
          v63 = *((_OWORD *)v58 + 3);
          v61[4] = *((_OWORD *)v58 + 4);
          v61[5] = v62;
          v61[2] = v64;
          v61[3] = v63;
          v65 = *((_OWORD *)v58 + 1);
          *v61 = *(_OWORD *)v58;
          v61[1] = v65;
          for (i = 96; i != 336; i += 24)
            std::string::operator=((std::string *)((char *)v61 + i), (const std::string *)&v58[i]);
          sub_22E78D560((uint64_t)(v61 + 21), (uint64_t)(v58 + 336));
          sub_22E78D658((uint64_t)(v61 + 28), (uint64_t *)v58 + 56);
          v19 = v109;
          v14 = v114;
          sub_22ED1231C(v109, &v126, (_QWORD *)a1, 0, (int)v15, v114, "", 0, 0);
          if (v127 && v128)
          {
            sub_22E3BB10C(v128, (unint64_t)v127);
            v127 = 0;
          }
          goto LABEL_74;
        }
        v46 = 8 * v14;
        v23 = 1;
        v47 = v15;
        while (1)
        {
          v48 = *v47;
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v47 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 <= 1)
          {
            v49 = sub_22EFFA6B0(*v47);
            if (*v49 == 161)
            {
              v50 = *((_QWORD *)v49 + 2);
              if (v50 && (*(_DWORD *)(v50 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
              {
                sub_22EFF605C((uint64_t)v48);
                if (!sub_22ED10E50((_QWORD *)a1, v50, 1, 0, v52))
                  break;
              }
            }
          }
          ++v47;
          v46 -= 8;
          if (!v46)
            goto LABEL_24;
        }
      }
      return v23;
    case 2:
      v116 = a11;
      v53 = a6;
      sub_22F0D5A50((uint64_t)a3);
      v86 = v85;
      v56 = *(_QWORD *)(a1 + 88) + 2128;
      v87 = *(_QWORD *)(a4 + 16);
      v58 = (unsigned __int8 *)sub_22E3B8AAC(v56);
      v88 = *v58;
      v58[v88 + 1] = 10;
      *v58 = v88 + 1;
      *(_QWORD *)&v58[8 * v88 + 16] = v87;
      sub_22F0D4E74(v16);
      sub_22E4D6448((uint64_t)(v58 + 336), v89, 1);
      v122 = v86;
      v125 = 4460;
      v124 = v56;
      v90 = (_OWORD *)sub_22E3B8AAC(v56);
      v123 = v90;
      v91 = *((_OWORD *)v58 + 5);
      v93 = *((_OWORD *)v58 + 2);
      v92 = *((_OWORD *)v58 + 3);
      v90[4] = *((_OWORD *)v58 + 4);
      v90[5] = v91;
      v90[2] = v93;
      v90[3] = v92;
      v94 = *((_OWORD *)v58 + 1);
      *v90 = *(_OWORD *)v58;
      v90[1] = v94;
      for (j = 96; j != 336; j += 24)
        std::string::operator=((std::string *)((char *)v90 + j), (const std::string *)&v58[j]);
      sub_22E78D560((uint64_t)(v90 + 21), (uint64_t)(v58 + 336));
      sub_22E78D658((uint64_t)(v90 + 28), (uint64_t *)v58 + 56);
      v19 = a10;
      v14 = a7;
      sub_22ED1231C(a10, &v122, (_QWORD *)a1, 2, (int)v53, a7, "", 0, 0);
      v13 = a8;
      if (v123 && v124)
      {
        sub_22E3BB10C(v124, (unint64_t)v123);
        v123 = 0;
      }
LABEL_74:
      sub_22E3BB10C(v56, (unint64_t)v58);
      v15 = v53;
      v18 = v116;
      v16 = (uint64_t)a3;
      goto LABEL_75;
    case 3:
      sub_22F0D5A50((uint64_t)a3);
      v31 = v30;
      v32 = *(_QWORD *)(a1 + 88) + 2128;
      v33 = *(_QWORD *)(a4 + 16);
      v34 = (unsigned __int8 *)sub_22E3B8AAC(v32);
      v35 = *v34;
      v34[v35 + 1] = 10;
      *v34 = v35 + 1;
      *(_QWORD *)&v34[8 * v35 + 16] = v33;
      sub_22F0D4E74(v16);
      sub_22E4D6448((uint64_t)(v34 + 336), v36, 1);
      v118 = v31;
      v121 = 4468;
      v120 = v32;
      v37 = (_OWORD *)sub_22E3B8AAC(v32);
      v119 = v37;
      v38 = *((_OWORD *)v34 + 5);
      v40 = *((_OWORD *)v34 + 2);
      v39 = *((_OWORD *)v34 + 3);
      v37[4] = *((_OWORD *)v34 + 4);
      v37[5] = v38;
      v37[2] = v40;
      v37[3] = v39;
      v41 = *((_OWORD *)v34 + 1);
      *v37 = *(_OWORD *)v34;
      v37[1] = v41;
      for (k = 96; k != 336; k += 24)
        std::string::operator=((std::string *)((char *)v37 + k), (const std::string *)&v34[k]);
      sub_22E78D560((uint64_t)(v37 + 21), (uint64_t)(v34 + 336));
      sub_22E78D658((uint64_t)(v37 + 28), (uint64_t *)v34 + 56);
      v105 = sub_22F30C78C;
      v106 = &v161;
      sub_22ED1231C(a10, &v118, (_QWORD *)a1, 0, (int)v15, v14, "", 0, 0);
      if (v119 && v120)
      {
        sub_22E3BB10C(v120, (unint64_t)v119);
        v119 = 0;
      }
      sub_22E3BB10C(v32, (unint64_t)v34);
      v43 = **a11;
      v25 = sub_22ED147E8(a1, a3, (*a11)[1], v43, v44);
      v26 = a5;
      v27 = a8;
      BYTE1(v103) = ((*a11)[13] & 0x10) != 0;
      LOBYTE(v103) = 0;
      v28 = a1;
      v29 = v43;
      return sub_22EB334BC(v28, v25, v29, v26, v15, v14, v27, a9, v103, v105, v106);
    default:
LABEL_75:
      v161 = v163;
      v163[0] = v16;
      v162 = 0x800000001;
      sub_22E5223E0((uint64_t)&v161, v15, &v15[v14]);
      sub_22F0D5A50(v16);
      v97 = v96;
      v98 = v18;
      v99 = v161;
      v100 = v162;
      v101 = sub_22ED1AE98(v19, v98);
      v23 = sub_22F32D6EC(a1, v97, v13, v99, v100, v101);
      if (v161 != v163)
        free(v161);
      return v23;
  }
}

unsigned int *sub_22ED166A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BOOL4 v11;
  unint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v7 = a7;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(unsigned int *)(a6 + 8);
  if (v9 < 2)
  {
    v10 = *(_QWORD **)a6;
    if ((_DWORD)v9 == 1)
    {
      v13 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = *(_DWORD *)(v13 + 28) & 0x7F;
      if (v14 <= 0x2F && ((1 << v14) & 0xC00000060000) != 0)
      {
        v25 = v8;
        v20 = a5;
        v23 = a4;
        v19 = a3;
        v22 = a2;
        v18 = *(_QWORD **)a6;
        v21 = *(unsigned int *)(a6 + 8);
        v16 = sub_22EFBAEA4(v13);
        a5 = v20;
        v9 = v21;
        v10 = v18;
        a3 = v19;
        a2 = v22;
        a4 = v23;
        v7 = a7;
        v17 = v16;
        v8 = v25;
        v14 = *(_DWORD *)(v17 + 28) & 0x7F;
      }
      v11 = v14 == 29;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v10 = *(_QWORD **)a6;
    v11 = 1;
  }
  return sub_22F0605AC(v8, a2, a3, a4, a5, v7, v11, v10, (uint64_t)&v10[v9]);
}

uint64_t sub_22ED1677C()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  signed int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[339];
  int v38;
  _OWORD v39[9];
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[6];
  _QWORD v43[2];
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (uint64_t *)v0;
  v51 = *MEMORY[0x24BDAC8D0];
  v34 = v10;
  v11 = sub_22EFFA1CC(v5);
  v12 = (v9[11] + 16 * v11 + 15280) | 6;
  *(_QWORD *)&v32 = v12;
  DWORD2(v32) = v8;
  sub_22EFC6D6C((uint64_t)&v33, v12);
  if ((sub_22ECFAD0C(v9, &v34, 0) & 1) != 0)
    return 1;
  v14 = v34;
  v49 = v34;
  v50 = 0;
  if (v6 > 1)
  {
    v18 = 1;
  }
  else
  {
    LODWORD(v36) = sub_22EF5CDF0(v9[11], *(_QWORD *)(*(_QWORD *)(v9[11] + 16480) & 0xFFFFFFFFFFFFFFF0));
    if (v36 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v35);
    else
      v35 = 0;
    BYTE4(v36) = 0;
    v15 = v9[11];
    v16 = *(_QWORD *)(v15 + 16480);
    v17 = sub_22E3CD3D4(v15 + 2032, 32, 3);
    v50 = sub_22EFF8F1C(v17, v15, (uint64_t)&v35, v16, 0);
    if (v36 >= 0x41 && v35)
      MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
    v14 = v34;
    v18 = 2;
  }
  if ((v14[1] & 0x80) == 0)
  {
    v35 = v37;
    v36 = 0x1000000000;
    v37[336] = v39;
    v37[337] = v39;
    v37[338] = 16;
    v38 = 0;
    v39[8] = 0u;
    v40 = v42;
    v41 = 0x400000000;
    v42[4] = v43;
    v43[0] = 0;
    v42[5] = 0;
    v43[1] = 1;
    v44 = v8;
    v45 = 1;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    sub_22ED09B88(v9, v4, (uint64_t *)&v49, v18, (uint64_t)&v35, 0);
    sub_22ED09E00(v9, v11, v8, (uint64_t *)&v49, v18, (uint64_t)&v35, 0);
    if (v2)
      sub_22ED0D734((uint64_t)v9, v12, v8, (uint64_t *)&v49, v18, 0, (uint64_t)&v35, 0);
    sub_22ED0A498((uint64_t)v9, v11, v8, (uint64_t)&v49, v18, (uint64_t)&v35);
    v29 = 0;
    v19 = (char *)&loc_22ED16A0C + 4 * byte_22F495DE2[sub_22ED03FCC(&v35, v9, v8, &v29)];
    __asm { BR              X10 }
  }
  if (!*(_DWORD *)(v4 + 8))
  {
    v23 = v9[11];
    v24 = *(_QWORD *)(v23 + 16832);
    if (v9[162] == v9[161])
    {
      v25 = 0;
      v26 = v8;
    }
    else
    {
      v25 = v9[162];
      v26 = v8;
      if (HIDWORD(v25))
      {
        v27 = 32;
        goto LABEL_26;
      }
    }
    v27 = 24;
LABEL_26:
    v13 = sub_22E3CD3D4(v23 + 2032, v27, 3);
    sub_22F0031D0(v13, v23, (uint64_t)v14, v6, v24, 0, 0, v26, 0, v25);
    return v13;
  }
  v30 = v32;
  v31 = v33;
  v13 = 1;
  v20 = sub_22ED166A0((uint64_t)v9, 0, 0, 0, (uint64_t)&v30, v4, 1);
  if ((v20 & 1) == 0)
  {
    v21 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
    if (v9[162] == v9[161])
      v22 = 0;
    else
      v22 = v9[162];
    return sub_22F060CD4(v9[11], v11, v21, (uint64_t)&v49, v18, *(_QWORD *)(v9[11] + 16832), 0, v8, v22, 0);
  }
  return v13;
}

uint64_t sub_22ED170D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, unsigned int a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v19;

  v19 = a6;
  v13 = 1;
  if ((sub_22EB17F48(a1, a3, &v19, 1, 0, 0, 0, 0) & 1) == 0)
  {
    if (a3 == a2 || (sub_22EB17F48(a1, a2, &v19, 1, 0, 0, 0, 0) & 1) == 0)
    {
      v14 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
      sub_22EFF69F0(v14, *(_QWORD *)(a1 + 88), a2, 0, *(_QWORD *)(a2 + 48), 1, v19, a7, 0);
      if (a5)
        *(_DWORD *)v14 |= 0x200000u;
      sub_22EB22288(a1, v14, a4);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v15)
        v16 = *(_BYTE *)(v15 + 16) == 26;
      else
        v16 = 0;
      if ((v16
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
         && (v15 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0))) != 0)
        && ((*(_QWORD *)(v15 + 16) >> 54) & 0xF) - 9 <= 1)
      {
        sub_22EB14850(a1, v19);
        *(_QWORD *)(v14 + 8) = *(_QWORD *)(a2 + 48);
      }
      v17 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(v14 + 8), 0);
      return sub_22E90092C(a1, v14, v17, 13, 0, 0);
    }
    else
    {
      return 1;
    }
  }
  return v13;
}

uint64_t sub_22ED17290(_QWORD *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[24];
  int v25;
  __int16 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = a1[11] + 16 * a2;
  v14 = 0;
  v15 = v17;
  v16 = 0x800000000;
  v9 = a3;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = a1;
  v22 = (v8 + 15280) | 6;
  v23 = a3;
  sub_22EFC6D6C((uint64_t)v24, v22);
  *(_OWORD *)&v24[8] = xmmword_22F4559B0;
  v25 = 16842752;
  v26 = 0;
  v27 = 0;
  sub_22EC56024((uint64_t)&v14);
  memset(v13, 0, sizeof(v13));
  v10 = sub_22ED23774((uint64_t)a1, v9, (uint64_t)v13, (uint64_t)&v14, 1, 0, a4, a5, 0);
  if (HIBYTE(v25))
  {
    if ((_DWORD)v14 == 5)
    {
      sub_22EC64D18(v21, (uint64_t)&v14);
    }
    else if (v19 && (*(_DWORD *)(v21[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v21, (uint64_t)&v14);
    }
  }
  if (v18)
  {
    v12 = sub_22EC6CBD0(v18);
    MEMORY[0x2348A0E9C](v12, 0x10E0C409F09D3C3);
  }
  if (v15 != v17)
    free(v15);
  return v10;
}

uint64_t sub_22ED1741C(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a2 + 2960);
  if ((*(_BYTE *)(a2 + 2972) & 1) != 0 && a3 <= 0x21)
  {
    if (((1 << a3) & 0x300030000) != 0)
    {
      v15 = 0;
      v14 = 34;
      goto LABEL_6;
    }
    if (a3 == 31)
    {
      v15 = 0;
      v14 = 30;
      goto LABEL_6;
    }
  }
  v14 = 0;
  v15 = 1;
LABEL_6:
  sub_22ED09B88(a1, a4, a5, a6, a2, 0);
  sub_22ED09E00(a1, a3, v13, a5, a6, a2, 0);
  if (*(_BYTE *)(a2 + 2972) && (a3 == 34 || a3 == 30))
  {
    v17 = a5[1];
    v18 = *a5;
    sub_22ED09E00(a1, a3, v13, &v17, 2, a2, 1);
  }
  if ((v15 & 1) == 0)
  {
    sub_22ED09E00(a1, v14, v13, a5, a6, a2, 0);
    if (*(_BYTE *)(a2 + 2972))
    {
      if (v14 == 34 || v14 == 30)
      {
        v17 = a5[1];
        v18 = *a5;
        sub_22ED09E00(a1, v14, v13, &v17, 2, a2, 1);
      }
    }
  }
  if (a3 != 15)
  {
    if (a7)
    {
      sub_22ED0D734((uint64_t)a1, (a1[11] + 16 * (int)a3 + 15280) | 6, v13, a5, a6, 0, a2, 0);
      if ((v15 & 1) == 0)
        sub_22ED0D734((uint64_t)a1, (a1[11] + 16 * v14 + 15280) | 6, v13, a5, a6, 0, a2, 0);
    }
  }
  return sub_22ED0A498((uint64_t)a1, a3, v13, (uint64_t)a5, a6, a2);
}

uint64_t sub_22ED1767C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  char *v31;
  unsigned int *v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[336];
  _QWORD v55[3];
  int v56;
  _OWORD v57[9];
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[6];
  _QWORD v61[2];
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68[3];

  v9 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v16 = v15;
  v17 = v13;
  v19 = v18;
  v20 = v12;
  v21 = v11;
  v22 = v10;
  v23 = v9;
  v68[1] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v67 = v18;
  v68[0] = v13;
  v24 = (int)dword_22F4A2BC4[v11];
  if ((v18[1] & 0x80) == 0 && (v13[1] & 0x80) == 0)
  {
    v25 = v14;
    v26 = *(unsigned __int8 *)(v9[9] + 1);
    if ((sub_22ECFAD0C(v9, v68, 0) & 1) == 0 && (sub_22ECFAD0C(v23, &v67, 0) & 1) == 0)
    {
      if (v21)
      {
        if (v21 != 21
          || (v27 = *(_QWORD *)(*((_QWORD *)v67 + 1) & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(v27 + 17) & 4) != 0)
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
        {
          *(_QWORD *)&v53 = v54;
          *((_QWORD *)&v53 + 1) = 0x1000000000;
          v28 = 0x100000000;
          v55[0] = v57;
          if ((v25 & (v26 >> 4)) == 0)
            v28 = 0;
          v55[1] = v57;
          v55[2] = 16;
          v56 = 0;
          v57[8] = 0u;
          v58 = v60;
          v59 = 0x400000000;
          v60[4] = v61;
          v61[0] = 0;
          v60[5] = 0;
          v61[1] = 1;
          v62 = v22;
          v63 = 1;
          v64 = v28 | v24;
          v65 = 0;
          v66 = 0;
          if (a9)
          {
            v29 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 32))(a9);
            sub_22E3BA850((uint64_t)v55, v29);
            v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a9 + 32))(a9);
            sub_22E3BA850((uint64_t)v55, (const void *)(v30 | 1));
          }
          sub_22ED1741C(v23, (uint64_t)&v53, v24, v20, (uint64_t *)&v67, 2, v16);
          v50 = 0;
          v31 = (char *)&loc_22ED178B8 + 4 * word_22F495DE6[sub_22ED03FCC(&v53, v23, v22, &v50)];
          __asm { BR              X10 }
        }
      }
      return sub_22EB2D0B8();
    }
    return 1;
  }
  if (!*(_DWORD *)(v12 + 8))
  {
    v36 = v9[11];
    v37 = *(_QWORD *)(v36 + 16832);
    v38 = v9[161];
    if ((v11 - 22) <= 9)
    {
      if (v9[162] == v38)
      {
        v39 = 0;
        v40 = v10;
      }
      else
      {
        v39 = v9[162];
        v40 = v10;
        if (HIDWORD(v39))
        {
          v44 = 56;
          goto LABEL_32;
        }
      }
      v44 = 48;
LABEL_32:
      v35 = (int *)sub_22E3CD3D4(v36 + 2032, v44, 3);
      v47 = sub_22F002F18(v35, v46, v19, v17, v21, v37, 1, 0, v40, v39);
      *((_QWORD *)v47 + 4) = v37;
      *((_QWORD *)v47 + 5) = v37;
      return (uint64_t)v35;
    }
    if (v9[162] == v38)
    {
      v42 = 0;
      v43 = v10;
    }
    else
    {
      v42 = v9[162];
      v43 = v10;
      if (HIDWORD(v42))
      {
        v45 = 40;
        goto LABEL_34;
      }
    }
    v45 = 32;
LABEL_34:
    v35 = (int *)sub_22E3CD3D4(v36 + 2032, v45, 3);
    sub_22F002E24(v35, v48, v19, v17, v21, v37, 0, 0, v43, v42);
    return (uint64_t)v35;
  }
  *(_QWORD *)&v53 = (v9[11] + 16 * v24 + 15280) | 6;
  DWORD2(v53) = v10;
  sub_22EFC6D6C((uint64_t)v54, v53);
  v51 = v53;
  v52 = v54[0];
  v32 = sub_22ED166A0((uint64_t)v23, 0, 0, 0, (uint64_t)&v51, v20, v16);
  if ((v32 & 1) == 0)
  {
    v33 = (unint64_t)v32 & 0xFFFFFFFFFFFFFFFELL;
    if (v23[162] == v23[161])
      v34 = 0;
    else
      v34 = v23[162];
    return sub_22F060CD4(v23[11], v24, v33, (uint64_t)&v67, 2, *(_QWORD *)(v23[11] + 16832), 0, v22, v34, 0);
  }
  return 1;
}

uint64_t sub_22ED18C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[339];
  int v30;
  _OWORD v31[9];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[6];
  _QWORD v35[2];
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t *v44;
  uint64_t v45;
  _QWORD v46[4];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v24 = v5;
  v7 = v6;
  v8 = (uint64_t *)v0;
  v46[2] = *MEMORY[0x24BDAC8D0];
  v9 = v46;
  v44 = v46;
  v46[0] = v10;
  v45 = 0x200000001;
  if (v1)
  {
    v11 = 0;
    v12 = 8 * v1;
    v13 = 1;
    do
    {
      v14 = v4[v11 / 8];
      if (v13 >= HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v45;
      }
      v44[v13] = v14;
      v13 = v45 + 1;
      LODWORD(v45) = v45 + 1;
      v11 += 8;
    }
    while (v12 != v11);
    sub_22F0D5A50(*v4);
    sub_22F0D60E4(v4[v2 - 1]);
    v9 = v44;
    v15 = (v8[11] + 15968) | 6;
    if (!v13)
    {
      v16 = 0;
      v41 = v43;
      v42 = 0x200000000;
      goto LABEL_16;
    }
  }
  else
  {
    v15 = (*(_QWORD *)(v0 + 88) + 15968) | 6;
    v13 = 1;
  }
  v17 = 0;
  v18 = v13;
  do
  {
    if ((*(_BYTE *)(v9[v17] + 1) & 0x80) != 0)
    {
      *(_QWORD *)&v28 = v15;
      DWORD2(v28) = v7;
      sub_22EFC6D6C((uint64_t)v29, v15);
      v29[0] = v7 | ((unint64_t)v24 << 32);
      v27 = v29[0];
      v26 = v28;
      v41 = v43;
      v42 = 0;
      v21 = sub_22ED166A0((uint64_t)v8, 0, 0, 0, (uint64_t)&v26, (uint64_t)&v41, 1);
      if (v41 != v43)
        free(v41);
      if ((v21 & 1) != 0)
      {
        v19 = 1;
      }
      else
      {
        if (v8[162] == v8[161])
          v22 = 0;
        else
          v22 = v8[162];
        v19 = sub_22F060CD4(v8[11], 43, (unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v44, v45, *(_QWORD *)(v8[11] + 16832), 0, v24, v22, 0);
      }
      goto LABEL_30;
    }
    ++v17;
  }
  while (v13 != (_DWORD)v17);
  v41 = v43;
  v42 = 0x200000000;
  v19 = 1;
  while ((sub_22ECFAD0C(v8, (unsigned __int8 **)v9, (uint64_t)&v41) & 1) == 0)
  {
    ++v9;
    if (!--v18)
    {
      v9 = v44;
      v16 = v45;
LABEL_16:
      *(_QWORD *)&v28 = v29;
      *((_QWORD *)&v28 + 1) = 0x1000000000;
      v29[336] = v31;
      v29[337] = v31;
      v29[338] = 16;
      v30 = 0;
      v31[8] = 0u;
      v32 = v34;
      v33 = 0x400000000;
      v34[4] = v35;
      v35[0] = 0;
      v34[5] = 0;
      v35[1] = 1;
      v36 = v7;
      v37 = 1;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      sub_22ED09E00(v8, 43, v7, v9, v16, (uint64_t)&v28, 0);
      if ((_DWORD)v45 == 2)
        sub_22ED0A498((uint64_t)v8, 0x2Bu, v7, (uint64_t)v44, 2, (uint64_t)&v28);
      v25 = 0;
      v20 = (char *)&loc_22ED18ED4 + 4 * byte_22F495DEE[sub_22ED03FCC(&v28, v8, v7, &v25)];
      __asm { BR              X10 }
    }
  }
  if (v41 != v43)
    free(v41);
LABEL_30:
  if (v44 != v46)
    free(v44);
  return v19;
}

uint64_t sub_22ED19850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v23[48];

  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 26;
  else
    v13 = 0;
  if (!v13)
    v12 = sub_22F10CF48(v12);
  v14 = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
  if (v14 <= a5)
    v15 = a5;
  else
    v15 = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
  if ((v15 + *(_DWORD *)(a2 + 8)) + (unint64_t)*(unsigned int *)(a2 + 8) > *(unsigned int *)(a2 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      if (a5 <= v16)
      {
        v20 = sub_22EB31884(a1, a6, a3, *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v16));
        if ((v20 & 1) != 0)
        {
          v17 = 1;
          return v17 & 1;
        }
      }
      else
      {
        v18 = *(_QWORD *)(a4 + 8 * v16);
        v19 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v16);
        sub_22E99E5D4(*(_QWORD *)(a1 + 88), v19, *(_QWORD *)(v19 + 48), (uint64_t)v23);
        v20 = sub_22EC45014(a1, v23, 0, v18, 0, 0);
        v17 |= v20;
      }
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = v20 & 0xFFFFFFFFFFFFFFFELL;
      ++*(_DWORD *)(a2 + 8);
      if (v14 == ++v16)
        return v17 & 1;
    }
  }
  v17 = 0;
  return v17 & 1;
}

uint64_t sub_22ED199E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  int *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  std::string *v59;
  unsigned int v60;
  BOOL v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  unsigned int *v90;
  int *v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v111;
  _QWORD *v112;
  void *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  std::string::size_type v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t *v126;
  uint64_t v127;
  int *v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  std::string::size_type v134;
  uint64_t v135;
  uint64_t v136;
  _WORD *v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int *v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  BOOL v151;
  unint64_t *v152;
  int *v153;
  unint64_t v154;
  std::string v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD v159[339];
  int v160;
  _OWORD v161[9];
  _QWORD *v162;
  uint64_t v163;
  _QWORD v164[5];
  __int128 v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  int v169;
  char *v170;
  uint64_t v171;
  _QWORD v172[6];

  v10 = MEMORY[0x24BDAC7A8]();
  v16 = v15;
  v17 = (char *)v12;
  v18 = v11;
  v19 = v10;
  v172[4] = *MEMORY[0x24BDAC8D0];
  v150 = v13;
  v147 = v14;
  v145 = v20;
  if (!v11)
  {
    v23 = 0;
    v22 = 0;
LABEL_37:
    v43 = (unint64_t)v172;
    v170 = (char *)v172;
    v171 = 0x200000000;
    v44 = v13;
    if ((_DWORD)v13)
    {
      v45 = 1;
      v46 = (unsigned __int8 **)v12;
      while ((sub_22ECFAD0C((uint64_t *)v19, v46, (uint64_t)&v170) & 1) == 0)
      {
        ++v46;
        if (!--v44)
        {
          v23 = *v22;
          goto LABEL_42;
        }
      }
      goto LABEL_119;
    }
LABEL_42:
    v153 = 0;
    if (v23 != 188)
    {
      v50 = (uint64_t)v17;
      v51 = *((_QWORD *)v22 + 8);
      v52 = *(_DWORD *)v22;
      if ((*(_DWORD *)v22 & 0x80000) != 0)
      {
        v53 = 0x10000;
      }
      else
      {
        v53 = sub_22F003E64(*((_QWORD *)v22 + 7), *(_QWORD *)(v19 + 88), 0);
        v52 = *(_DWORD *)v22;
      }
      v56 = v52;
      v57 = *((_DWORD *)v22 + 6);
      v157 = (unint64_t)v159;
      v158 = 0x1000000000;
      v159[336] = v161;
      v159[337] = v161;
      v159[338] = 16;
      v160 = 0;
      v161[8] = 0u;
      v162 = v164;
      v163 = 0x400000000;
      v164[4] = (char *)&v165 + 8;
      v165 = 0u;
      v166 = 1;
      v167 = v57;
      v169 = 0;
      v168 = 0u;
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
      v155.__r_.__value_.__l.__size_ = 0x800000000;
      v156 = 0;
      if ((v52 & 0x40000) == 0)
        goto LABEL_58;
      v58 = v22 + 80;
      if (v56 == 211)
        v58 = v22 + 64;
      if (*(_DWORD *)&v58[8 * *((unsigned int *)v22 + 1)])
      {
        v59 = &v155;
        v60 = v53;
        sub_22E9C442C((unsigned int *)v22, (uint64_t)&v155);
        v53 = v60;
        v56 = *v22;
      }
      else
      {
LABEL_58:
        v59 = 0;
      }
      v61 = v56 == 211;
      if (v56 == 211)
        v62 = v22;
      else
        v62 = 0;
      v63 = (uint64_t *)(v62 + 64);
      if (v61)
        v64 = v63;
      else
        v64 = (uint64_t *)(v22 + 80);
      v65 = *((unsigned int *)v22 + 1);
      if ((_DWORD)v65)
      {
        v66 = 8 * v65;
        v67 = v53;
        do
        {
          v68 = *v64;
          v69 = *v64 & 0xFFFFFFFFFFFFFFFCLL;
          v70 = *(_QWORD *)(v69 + 16);
          v71 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
          if ((v70 & 4) != 0)
            v71 = (_QWORD *)*v71;
          if (v71)
            v72 = (unint64_t)(v71 - 8);
          else
            v72 = 0;
          v73 = *(_DWORD *)(v69 + 28);
          if ((v73 & 0x7E) == 0x2E)
          {
            v69 = *(_QWORD *)(v69 + 64);
            v73 = *(_DWORD *)(v69 + 28);
          }
          if ((**(_BYTE **)(v19 + 72) & 0x20) != 0 && (v73 & 0x7F) == 0x37)
          {
            sub_22ED0475C(v19, v69, v68, v51, v50, v150, (uint64_t)&v157, 0, 0, 1, 0, 0, 0, 0, 0);
          }
          else
          {
            if ((v73 & 0x7Eu) - 54 >= 4)
              v74 = 0;
            else
              v74 = v69;
            v153 = (int *)v74;
            if (v74)
            {
              if (!v59)
              {
                v16 = v16 & 0xFFFFFFFF00000000 | v67;
                sub_22ED05760(v19, v74, v68, v72, v51, v16, v50, v150, (uint64_t)&v157, 0, 0, 0, 0, 0);
              }
            }
            else
            {
              v43 = v43 & 0xFFFFFFFF00000000 | v67;
              sub_22ED07BB0(v19, v69, v68, v72, (uint64_t)v59, v51, v43, v15, v50, v150, (uint64_t)&v157, 0, 0, 0);
            }
          }
          ++v64;
          v66 -= 8;
        }
        while (v66);
      }
      if ((_DWORD)v171)
      {
        v75 = 16 * v171;
        v76 = v170 + 8;
        do
        {
          *(_QWORD *)*(v76 - 1) = *v76;
          v76 += 2;
          v75 -= 16;
        }
        while (v75);
      }
      v152 = 0;
      sub_22ED1AE2C((uint64_t)v22);
      v78 = (char *)&loc_22ED19F78
          + 4 * byte_22F495DF2[sub_22ED03FCC((uint64_t *)&v157, (_QWORD *)v19, v77, &v152)];
      __asm { BR              X10 }
    }
    v47 = (int *)*((_QWORD *)v22 + 3);
    v153 = v47;
    if ((v22[2] & 8) != 0)
    {
      v49 = (int *)*((_QWORD *)v22 + 8);
      v48 = *((_QWORD *)v22 + 6);
    }
    else
    {
      v48 = 0;
      v49 = v47;
    }
    v143 = v49;
    v144 = v48;
    if ((_DWORD)v171)
    {
      v54 = 16 * v171;
      v55 = v170 + 8;
      do
      {
        *(_QWORD *)*(v55 - 1) = *v55;
        v55 += 2;
        v54 -= 16;
      }
      while (v54);
    }
    v149 = v18;
    v81 = *(_QWORD *)(*((_QWORD *)v47 + 6) & 0xFFFFFFFFFFFFFFF0);
    v82 = v17;
    if (v81)
      v83 = *(unsigned __int8 *)(v81 + 16) - 27 > 0xFFFFFFFD;
    else
      v83 = 0;
    if (!v83)
      v81 = sub_22F10CF48(v81);
    v154 = *(_QWORD *)(v81 + 24);
    v84 = sub_22E8BBBD0(v154);
    v85 = *(_QWORD *)(v19 + 88);
    v86 = sub_22F1133DC((uint64_t *)&v154, v85);
    v154 = v86;
    v87 = *(_QWORD *)(*((_QWORD *)v47 + 6) & 0xFFFFFFFFFFFFFFF0);
    if (v87)
      v88 = *(_BYTE *)(v87 + 16) == 26;
    else
      v88 = 0;
    if (!v88)
    {
      v87 = sub_22F10CF48(*(_QWORD *)(*((_QWORD *)v47 + 6) & 0xFFFFFFFFFFFFFFF0));
      v85 = *(_QWORD *)(v19 + 88);
    }
    if (*(_QWORD *)(v19 + 1296) == *(_QWORD *)(v19 + 1288))
      v89 = 0;
    else
      v89 = *(_QWORD *)(v19 + 1296);
    v90 = sub_22F060E14(v85, v149, (uint64_t)v82, v150, v86, v84, v147, v89, (unsigned __int16)(*(_QWORD *)(v87 + 16) >> 38));
    v91 = v153;
    v92 = *(_QWORD *)(*((_QWORD *)v153 + 6) & 0xFFFFFFFFFFFFFFF0);
    if (v92)
      v93 = *(unsigned __int8 *)(v92 + 16) - 27 > 0xFFFFFFFD;
    else
      v93 = 0;
    if (!v93)
      v92 = sub_22F10CF48(v92);
    if (sub_22EB34594(v19, *(_QWORD *)(v92 + 24), *((_DWORD *)v22 + 10), (uint64_t)v90))
      goto LABEL_117;
    if ((*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)v153 + 32))(v153) + 80) & 0xE000) != 0x4000
      && ((*((_QWORD *)v153 + 5) & 7) != 6
       || (*(_DWORD *)(*((_QWORD *)v153 + 5) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
    {
      v94 = sub_22ED01A54((_QWORD *)v19, *((_QWORD *)v22 + 2), v144, (unint64_t)v143 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)v153);
      if ((v94 & 1) != 0)
        goto LABEL_118;
      *((_QWORD *)v22 + 2) = v94 & 0xFFFFFFFFFFFFFFFELL;
      v91 = v153;
    }
    if (sub_22EB319F4((_QWORD *)v19, v90, (uint64_t)v22, (uint64_t)v91, v87, (uint64_t)v82, v150, v147, 0))
    {
LABEL_117:
      if (a10)
      {
        v111 = v154;
        v112 = operator new(8uLL);
        *v112 = v149;
        v159[0] = v112 + 1;
        v157 = (unint64_t)v112;
        v158 = (uint64_t)(v112 + 1);
        sub_22ED23F40((uint64_t)&v157, (uint64_t)(v112 + 1), v82, &v82[8 * v150], v150);
        sub_22F0D5A50(v149);
        v113 = (void *)v157;
        v45 = sub_22F32D6EC(v19, v114, v147, (const void *)v157, (uint64_t)(v158 - v157) >> 3, v111);
        if (v113)
          operator delete(v113);
        goto LABEL_119;
      }
LABEL_118:
      v45 = 1;
LABEL_119:
      if (v170 != (char *)v172)
        free(v170);
      return v45;
    }
    sub_22EB18D60(v19, (uint64_t)v153, v145, (uint64_t)v82, v150);
    if ((sub_22E97FBB8(v19, (uint64_t)v153, (unsigned __int8 *)v90, v87) & 1) != 0)
      goto LABEL_118;
    if (*v22 == 188)
    {
      v95 = sub_22ED0649C(v19, (uint64_t)v153, v145, (uint64_t)v82, v150);
      if (v95)
      {
        v119 = v95;
        sub_22E8FCA40((_QWORD *)v19, *((_DWORD *)v22 + 10), 0x1184u, 0, (uint64_t)&v157);
        v120 = sub_22E890024((uint64_t)&v157, (uint64_t *)&v153);
        v155.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(int *))(*(_QWORD *)v153 + 16))(v153);
        sub_22E8906A0(v120, (uint64_t *)&v155);
        sub_22E903BEC((unsigned int *)&v157);
        sub_22E8FCA40((_QWORD *)v19, v153[6], 0x1740u, 0, (uint64_t)&v157);
        sub_22F0D4E74(*(_QWORD *)(v119 + 40));
        v152 = v121;
        v122 = sub_22E8906A0((uint64_t)&v157, (uint64_t *)&v152);
        v123 = *(unsigned int *)(v119 + 48);
        v155.__r_.__value_.__r.__words[0] = *(_QWORD *)(v119 + 56);
        v155.__r_.__value_.__l.__size_ = v123;
        sub_22F2F2210(v122, (uint64_t)&v155);
        sub_22E903BEC((unsigned int *)&v157);
        goto LABEL_118;
      }
    }
    v96 = *(_WORD *)(*(_QWORD *)(v19 + 216) + 8) & 0x7F;
    if (v96 != 57 && v96 != 55
      || (v97 = sub_22F060FB4((uint64_t)v90), (*(_BYTE *)(v97 + 82) & 8) == 0)
      || (v98 = v97, *sub_22EFFBBCC(*((unsigned __int8 **)v22 + 2)) != 133)
      || (*(_QWORD *)(*(_QWORD *)(v19 + 72) + 8) & 0x2000000000) == 0 && (v22[2] & 8) != 0 && *((_QWORD *)v22 + 6))
    {
LABEL_200:
      v136 = sub_22F060FB4((uint64_t)v90);
      if (v136)
      {
        v137 = (_WORD *)v136;
        if ((*(_DWORD *)(v136 + 28) & 0x7F) == 0x39)
        {
          if ((v22[2] & 8) != 0 && *((_QWORD *)v22 + 6))
            v138 = (*(_QWORD *)(*(_QWORD *)(v19 + 72) + 8) >> 37) & 1;
          else
            LODWORD(v138) = 1;
          sub_22EFFB27C((uint64_t)v22);
          sub_22EBC36CC(v19, v137, v139, 0, v138, 1, *((_DWORD *)v22 + 10));
        }
      }
      v140 = sub_22EBCC6C0(v19, (uint64_t)v90);
      v141 = sub_22F060FB4((uint64_t)v90);
      v45 = sub_22EB346AC(v19, v140, v141);
      goto LABEL_119;
    }
    sub_22EFFB27C((uint64_t)v22);
    sub_22E8FCA40((_QWORD *)v19, v99, 0x18B3u, 0, (uint64_t)&v157);
    v155.__r_.__value_.__r.__words[0] = *(_QWORD *)(v98 + 40);
    v100 = sub_22E894538((uint64_t)&v157, (uint64_t *)&v155);
    v151 = (*(_WORD *)(*(_QWORD *)(v19 + 216) + 8) & 0x7F) == 57;
    v101 = sub_22E894E38(v100, (unsigned __int8 *)&v151);
    v102 = v98 + 72;
    v103 = *(_WORD *)(v98 + 80) & 0x7F;
    v104 = -40;
    if (v103 > 0x46)
    {
      switch(v103)
      {
        case 'S':
          goto LABEL_171;
        case 'G':
          v104 = -56;
          goto LABEL_171;
        case 'Q':
LABEL_171:
          v124 = *(_QWORD *)(v102 + v104 + 16);
          v125 = (_QWORD *)(v124 & 0xFFFFFFFFFFFFFFF8);
          if ((v124 & 4) != 0)
            v125 = (_QWORD *)*v125;
          if (v125)
            v126 = v125 - 8;
          else
            v126 = 0;
          v152 = v126;
          sub_22E890024(v101, (uint64_t *)&v152);
          sub_22E903BEC((unsigned int *)&v157);
          v127 = *(_QWORD *)(v98 + 56);
          if ((v127 & 4) != 0 && (v142 = v127 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v142 + 16)))
            v128 = **(int ***)(v142 + 24);
          else
            v128 = (int *)(v98 + 64);
          sub_22E8FCA40((_QWORD *)v19, *v128, 0x1771u, 0, (uint64_t)&v157);
          v155.__r_.__value_.__r.__words[0] = *(_QWORD *)(v98 + 40);
          sub_22E894538((uint64_t)&v157, (uint64_t *)&v155);
          sub_22E903BEC((unsigned int *)&v157);
          if ((*(_QWORD *)(*(_QWORD *)(v19 + 72) + 8) & 0x2000000000) == 0)
            goto LABEL_200;
          sub_22EFFB27C((uint64_t)v22);
          sub_22E8FCA40((_QWORD *)v19, v129, 0x17A2u, 0, (uint64_t)&v157);
          v130 = *(_WORD *)(v98 + 80) & 0x7F;
          v131 = -40;
          if (v130 > 0x46)
          {
            switch(v130)
            {
              case 'S':
                goto LABEL_194;
              case 'G':
                v131 = -56;
                goto LABEL_194;
              case 'Q':
                goto LABEL_194;
            }
          }
          else
          {
            if (v130 <= 0x18)
            {
              if (v130 == 16)
                goto LABEL_182;
              if (((1 << v130) & 0x1066) != 0)
                goto LABEL_194;
              if (v130 == 24)
              {
LABEL_182:
                v131 = -48;
LABEL_194:
                v132 = *(_QWORD *)(v102 + v131 + 16);
                v133 = (_QWORD *)(v132 & 0xFFFFFFFFFFFFFFF8);
                if ((v132 & 4) != 0)
                  v133 = (_QWORD *)*v133;
                if (v133)
                  v134 = (std::string::size_type)(v133 - 8);
                else
                  v134 = 0;
                v155.__r_.__value_.__r.__words[0] = v134;
                v135 = sub_22E890024((uint64_t)&v157, (uint64_t *)&v155);
                v152 = *(unint64_t **)(v98 + 40);
                sub_22E894538(v135, (uint64_t *)&v152);
                sub_22E903BEC((unsigned int *)&v157);
                goto LABEL_200;
              }
            }
            if (v130 == 70)
            {
LABEL_192:
              v131 = -64;
              goto LABEL_194;
            }
          }
          if (v130 - 52 < 6)
          {
            v131 = -72;
            goto LABEL_194;
          }
          if (v130 - 33 < 5)
            goto LABEL_192;
          goto LABEL_182;
      }
    }
    else
    {
      if (v103 <= 0x18)
      {
        if (v103 == 16)
        {
LABEL_134:
          v104 = -48;
          goto LABEL_171;
        }
        if (((1 << v103) & 0x1066) != 0)
          goto LABEL_171;
        if (v103 == 24)
          goto LABEL_134;
      }
      if (v103 == 70)
      {
LABEL_169:
        v104 = -64;
        goto LABEL_171;
      }
    }
    if (v103 - 52 >= 6)
    {
      if (v103 - 33 >= 5)
        goto LABEL_134;
      goto LABEL_169;
    }
    v104 = -72;
    goto LABEL_171;
  }
  v21 = (unsigned __int8 *)v11;
  do
  {
    v22 = v21;
    v23 = *v21;
    if (v23 > 0xD5)
    {
      if (v23 == 233)
      {
        v26 = *(_DWORD *)v21;
        if ((v26 & 0x7C0000) != 0x300000)
          goto LABEL_37;
        v23 = v26;
        v25 = v22 + 16;
      }
      else
      {
        if (v23 != 214)
          break;
        v25 = v21 + 24;
      }
    }
    else if (v23 == 155)
    {
      if ((**((_DWORD **)v21 + 2) & 0x18000) != 0)
        goto LABEL_37;
      v25 = v21 + 24;
      if (!v22[48])
        v25 = v22 + 32;
      v23 = 155;
    }
    else
    {
      if (v23 != 176)
        break;
      v24 = *((unsigned int *)v21 + 5);
      if ((_DWORD)v24 == -1)
        goto LABEL_37;
      v25 = &v22[8 * v24 + 40];
      v23 = 176;
    }
    v21 = *(unsigned __int8 **)v25;
  }
  while (v21 != v22);
  if ((v23 & 0xFE) != 0x70)
  {
    if (v23 == 129)
    {
      v79 = *(_QWORD *)(v10 + 88);
      if (*(_QWORD *)(v19 + 1296) == *(_QWORD *)(v19 + 1288))
        v80 = 0;
      else
        v80 = *(_QWORD *)(v19 + 1296);
      return (uint64_t)sub_22EFFA488(v79, v11, v12, v13, *(_QWORD *)(v79 + 16392), 0, v14, v80, 0, 0);
    }
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 3) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v27)
    v28 = *(_BYTE *)(v27 + 16) == 31;
  else
    v28 = 0;
  if (!v28)
    v27 = sub_22F10CF48(v27);
  v148 = v18;
  v29 = *(_QWORD *)(v27 + 32);
  v30 = v29 & 0xFFFFFFFFFFFFFFF0;
  v31 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
  v32 = (uint64_t)v17;
  if (v31)
    v33 = *(_BYTE *)(v31 + 16) == 26;
  else
    v33 = 0;
  if (!v33)
    v31 = sub_22F10CF48(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0));
  v34 = *(_QWORD *)(v19 + 88);
  v157 = *(_QWORD *)(v31 + 24);
  v35 = v157;
  v146 = sub_22F1133DC((uint64_t *)&v157, v34);
  v36 = sub_22E8BBBD0(v35);
  v37 = sub_22E47E1B0(v31);
  v38 = *(_QWORD *)(*((_QWORD *)v22 + 2) + 8);
  if ((*(_DWORD *)v22 & 0xFC0000) == 0x40000)
  {
    v39 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0);
    if (!v39 || *(_BYTE *)(v39 + 16) != 39)
      v39 = sub_22F10CF48(v39);
    v38 = *(_QWORD *)(v39 + 32);
  }
  v40 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v40 & 8) != 0)
  {
    v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v157 = v41 | v42 | (v40 | v38) & 7;
  sub_22E96251C((unsigned int *)&v157, v37);
  v170 = (char *)(v157 & 0xFFFFFFFF000007CFLL);
  if ((v157 & 0xC00000000) != 0 || (v157 & 0x7CF) != 0)
  {
    sub_22F40B554(&v170, &v155);
    sub_22E8FCA40((_QWORD *)v19, v145, 0x11A8u, 0, (uint64_t)&v157);
    v115 = *(_QWORD *)v30;
    if ((*(_BYTE *)(*(_QWORD *)v30 + 8) & 0xF) != 0)
      v115 = (unint64_t)sub_22F10D2BC(v29);
    v154 = v115 & 0xFFFFFFFFFFFFFFF0;
    v116 = sub_22E8901B8((uint64_t)&v157, (uint64_t *)&v154);
    v117 = sub_22E90749C(v116, &v155);
    if (std::string::find(&v155, 32, 0) == -1)
      v118 = 1;
    else
      v118 = 2;
    LODWORD(v153) = v118;
    sub_22E8900C4(v117, (int *)&v153);
    sub_22E903BEC((unsigned int *)&v157);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)(v19 + 1296) == *(_QWORD *)(v19 + 1288))
    v105 = 0;
  else
    v105 = *(_QWORD *)(v19 + 1296);
  v106 = sub_22F060E14(*(_QWORD *)(v19 + 88), v148, v32, v150, v146, v36, v147, v105, (unsigned __int16)(*(_QWORD *)(v31 + 16) >> 38));
  v107 = *(_QWORD *)(v31 + 24);
  sub_22F0D5A50(*((_QWORD *)v22 + 3));
  if ((sub_22EB34594(v19, v107, v108, (uint64_t)v106) & 1) == 0
    && (sub_22EB319F4((_QWORD *)v19, v106, (uint64_t)v22, 0, v31, v32, v150, v147, 0) & 1) == 0
    && (sub_22F310DE4(v19, v106, v31) & 1) == 0)
  {
    return sub_22EBCC6C0(v19, (uint64_t)v106);
  }
  return 1;
}

void sub_22ED1AE2C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2 || (sub_22EFFFB48(*(unsigned __int8 **)(a1 + 56)) & 1) != 0)
  {
    v3 = *(_OWORD *)(a1 + 40);
    if ((_QWORD)v3)
      sub_22F0AB0EC((unint64_t *)&v3);
  }
  else
  {
    sub_22F0D5A50(v2);
  }
}

unint64_t sub_22ED1AE98(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  char v26;

  v3 = *(uint64_t **)a1;
  if (a2)
  {
    if (*a2 != &v3[21 * *(unsigned int *)(a1 + 8)])
    {
      v4 = **a2;
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 28) & 0x80) == 0)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v5)
            v6 = *(unsigned __int8 *)(v5 + 16) - 27 > 0xFFFFFFFD;
          else
            v6 = 0;
          if (!v6)
            v5 = sub_22F10CF48(v5);
          v7 = *(_QWORD *)(v5 + 24);
          if (v7 > 0xF)
            goto LABEL_31;
          v3 = *(uint64_t **)a1;
        }
      }
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (!v8)
    return 0;
  v7 = 0;
  v9 = 0;
  v10 = 168 * v8;
  do
  {
    if ((v3[13] & 1) != 0)
    {
      v11 = *v3;
      if (*v3)
      {
        if ((*(_BYTE *)(v11 + 28) & 0x80) == 0)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v12)
            v13 = *(unsigned __int8 *)(v12 + 16) - 27 > 0xFFFFFFFD;
          else
            v13 = 0;
          if (!v13)
            v12 = sub_22F10CF48(v12);
          v14 = *(_QWORD *)(v12 + 24);
          if (v14 >= 0x10)
          {
            if (v9)
            {
              if (v7 != v14)
                v7 = 0;
              v9 = 1;
            }
            else
            {
              v9 = 1;
              v7 = *(_QWORD *)(v12 + 24);
            }
          }
        }
      }
    }
    v3 += 21;
    v10 -= 168;
  }
  while (v10);
  if (!v9)
  {
    v17 = *(_DWORD *)(a1 + 8);
    if (!v17)
      return 0;
    v18 = 0;
    v19 = *(uint64_t **)a1;
    v20 = 168 * v17;
    do
    {
      v21 = *v19;
      if (*v19 && (*(_BYTE *)(v21 + 28) & 0x80) == 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v22)
          v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
        else
          v23 = 0;
        if (!v23)
          v22 = sub_22F10CF48(v22);
        v24 = *(_QWORD *)(v22 + 24);
        if (v24 >= 0x10)
        {
          if (v18)
          {
            if (v7 != v24)
              v7 = 0;
            v18 = 1;
          }
          else
          {
            v18 = 1;
            v7 = *(_QWORD *)(v22 + 24);
          }
        }
      }
      v19 += 21;
      v20 -= 168;
    }
    while (v20);
    if (!v18)
      return 0;
  }
  if (v7 < 0x10)
    return 0;
LABEL_31:
  v15 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v26 = 0;
  v16 = sub_22F110500((uint64_t)&v26, v15);
  if (v16 && *(_QWORD *)(v16 + 24) <= 0xFuLL && (*(_BYTE *)(v16 + 17) & 4) == 0)
    return 0;
  return v7;
}

uint64_t sub_22ED1B080()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  const void *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  int *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unsigned int *v67;
  unsigned int v68;
  int *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  int *v82;
  int v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  __int128 v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int v150;
  char v151;
  BOOL v152;
  int v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  BOOL v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  _OWORD *v202;
  unint64_t v203;
  int v204;
  int v205;
  _OWORD *v206;
  unint64_t v207;
  int v208;
  int v209;
  _OWORD *v210;
  unint64_t v211;
  int v212;
  uint64_t *v213;
  unsigned __int8 *v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  void *v227;
  void *v228;
  uint64_t v229;
  _BYTE v230[64];
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned int v236;
  _QWORD v237[3];
  __int16 v238;
  char v239;
  int v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD v244[3];
  int v245;
  _OWORD v246[9];
  _QWORD *v247;
  uint64_t v248;
  _QWORD v249[6];
  _QWORD v250[2];
  unsigned int v251;
  int v252;
  uint64_t v253;
  int v254;
  int v255;
  void *v256;
  uint64_t v257;
  _BYTE v258[32];
  void *v259;
  unint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (uint64_t)v0;
  v270 = *MEMORY[0x24BDAC8D0];
  v215 = v7;
  v214 = v12;
  if ((sub_22ECFAD0C(v0, &v214, 0) & 1) != 0)
    return 1;
  v196 = v10;
  v14 = (unint64_t)v214;
  v256 = v258;
  v257 = 0x200000000;
  if ((_DWORD)v4)
  {
    v15 = v4;
    v13 = 1;
    v16 = v6;
    do
    {
      if ((sub_22ECFAD0C((uint64_t *)v11, v16, (uint64_t)&v256) & 1) != 0)
        goto LABEL_168;
      ++v16;
      --v15;
    }
    while (v15);
  }
  v198 = (uint64_t)v6;
  v241 = &v243;
  v242 = 0x1000000000;
  v244[0] = v246;
  v244[1] = v246;
  v244[2] = 16;
  v245 = 0;
  v246[8] = 0u;
  v247 = v249;
  v248 = 0x400000000;
  v249[4] = v250;
  v250[0] = 0;
  v249[5] = 0;
  v13 = 1;
  v250[1] = 1;
  v251 = v8;
  v252 = 1;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  v17 = *(_QWORD *)(v11 + 88);
  v193 = v14;
  v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v259 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  v227 = &unk_24FAB6ED0;
  LODWORD(v228) = 3588;
  v229 = (uint64_t)&v259;
  if ((sub_22EE8B0B0(v11, v8, v19) & 1) != 0)
    goto LABEL_167;
  v192 = v2;
  v20 = (v17 + 15952) | 6;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v227 = 0;
  v228 = v230;
  v229 = 0x800000000;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v234 = (_QWORD *)v11;
  v235 = v20;
  v236 = v8;
  sub_22EFC6D6C((uint64_t)v237, v20);
  v237[2] = 0;
  v237[1] = 0;
  v238 = 0;
  v239 = 1;
  v240 = 1;
  sub_22EC56024((uint64_t)&v227);
  v22 = sub_22F114198(*(_QWORD *)(v21 + 24));
  if (v22)
    v23 = v22 + 64;
  else
    v23 = 0;
  sub_22EC611AC(v11, &v227, v23, 0);
  LOBYTE(v240) = 0;
  if ((_DWORD)v229)
  {
    v24 = (uint64_t *)v228;
    v25 = 8 * v229;
    do
    {
      v26 = *v24++;
      v27 = *(_QWORD *)(v18 + 8);
      v28 = sub_22F003E64(v18, *(_QWORD *)(v11 + 88), 0);
      sub_22ED08414(v11, v26, v27, v28, v198, v4, (uint64_t)&v241, 0);
      v25 -= 8;
    }
    while (v25);
  }
  v199 = v4;
  v29 = sub_22F114198(*(_QWORD *)(v21 + 24));
  v30 = sub_22EFD4DF4(v29);
  if ((uint64_t *)v30 == v31)
    goto LABEL_114;
  v32 = (uint64_t *)v30;
  v33 = v31;
  v194 = v4 + 1;
  v197 = v4;
  v195 = v31;
  do
  {
    v34 = *v32 & 0xFFFFFFFFFFFFFFFCLL;
    v35 = *(_QWORD *)(v34 + 16);
    v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
    if ((v35 & 4) != 0)
      v36 = (_QWORD *)*v36;
    if (v36)
      v37 = (unint64_t)(v36 - 8);
    else
      v37 = 0;
    v38 = *(_DWORD *)(v34 + 28);
    if ((v38 & 0x7E) == 0x2E)
    {
      v34 = *(_QWORD *)(v34 + 64);
      v38 = *(_DWORD *)(v34 + 28);
    }
    if ((v38 & 0x7F) == 0x1D
      || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34) + 160) & 3) == 1)
    {
      goto LABEL_71;
    }
    v39 = *(_QWORD *)(*(_QWORD *)(v34 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v39)
      v40 = *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD;
    else
      v40 = 0;
    if (!v40)
      v39 = sub_22F10CF48(v39);
    v41 = (uint64_t *)(*(_QWORD *)(v39 + 24) & 0xFFFFFFFFFFFFFFF0);
    v42 = *v41;
    if (*v41)
    {
      v43 = *(_DWORD *)(v42 + 16);
      if ((v43 & 0xFE) == 0x28)
        goto LABEL_102;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v42 = sub_22F10CF48(v42);
      if (v42)
      {
        v43 = *(_DWORD *)(v42 + 16);
LABEL_102:
        if ((v43 & 0x100000) != 0)
        {
          do
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v42)
            {
              v114 = *(_DWORD *)(v42 + 16);
              if ((v114 & 0xFE) == 0x28)
                continue;
            }
            v42 = sub_22F10CF48(v42);
            v114 = *(_DWORD *)(v42 + 16);
          }
          while ((v114 & 0x100000) != 0);
        }
        v41 = (uint64_t *)(*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0);
      }
    }
    v44 = *v41;
    if (*v41 && *(_BYTE *)(v44 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      && (v44 = sub_22F10CF48(v44)) != 0)
    {
      v41 = (uint64_t *)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
    v45 = *v41;
    if (*v41)
      v46 = *(_BYTE *)(*v41 + 16) == 26;
    else
      v46 = 0;
    if (!v46)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        goto LABEL_71;
      v45 = sub_22F10CF48(*v41);
      if (!v45)
        goto LABEL_71;
    }
    v47 = *v32;
    v48 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34);
    sub_22E3BA850((uint64_t)v244, v48);
    if (!v49)
      goto LABEL_71;
    LODWORD(v213) = 0;
    v259 = 0;
    LODWORD(v200) = 3;
    v216 = *(unsigned int *)(v11 + 1704);
    sub_22EB4DDB8(v11 + 3688, (int *)&v213, (int *)&v216, (__int16 *)(v11 + 1693), (uint64_t *)&v259, (int *)&v200);
    v50 = *(unsigned int *)(v11 + 3696);
    v51 = v50 - 2;
    v52 = *(_QWORD *)(v11 + 3688);
    v53 = *(_DWORD *)(v52 + 576 * (v50 - 2));
    if (v53 == 5)
    {
      *(_BYTE *)(v52 + 576 * v50 - 4) = *(_BYTE *)(v52 + 576 * v51 + 572);
      v54 = 1;
    }
    else if (v53 == 2)
    {
      *(_BYTE *)(v52 + 576 * v50 - 4) = 1;
      v54 = *(_BYTE *)(v52 + 576 * v51 + 573) != 0;
    }
    else
    {
      v54 = 0;
      *(_BYTE *)(v52 + 576 * v50 - 4) = 0;
    }
    v55 = v52 + 576 * v50;
    *(_BYTE *)(v55 - 3) = v54;
    *(_WORD *)(v11 + 1693) = 0;
    if (*(_DWORD *)(v11 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v11 + 1776), (llvm::SmallPtrSetImplBase *)(v55 - 560));
      sub_22EAEAE08(v11 + 1840, (uint64_t *)(v55 - 496));
    }
    v56 = sub_22ED060FC((uint64_t)&v241, v194, 0, 0);
    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = v47;
    *(_QWORD *)(v56 + 40) = v34;
    *(_BYTE *)(v56 + 104) = *(_BYTE *)(v56 + 104) & 0xF2 | 5;
    *(_DWORD *)(v56 + 108) = v199;
    v57 = v251;
    v58 = *(_QWORD *)(v18 + 8);
    v59 = sub_22F003E64(v18, *(_QWORD *)(v11 + 88), 0);
    sub_22ED02038((unsigned int *)&v259, v11, v57, v58, v59, v34, v37);
    v60 = (int)v259;
    if ((v259 & 0x7FFFFFFF) == 4)
    {
      *(_BYTE *)(v56 + 104) &= ~1u;
      *(_BYTE *)(v56 + 105) = 2;
      v61 = *(unsigned int **)(v56 + 48);
      v62 = *v61;
      if ((*v61 & 0x7FFFFFFF) == 2)
      {
        v63 = (int *)*((_QWORD *)v61 + 4);
        if (v63 != (int *)(v61 + 12))
        {
          free(v63);
          v60 = (int)v259;
          v62 = *v61;
        }
      }
      *v61 = v62 & 0x80000000 | v60 & 0x7FFFFFFF;
      *v61 = v259 & 0x80000000 | v60 & 0x7FFFFFFF;
      *((_QWORD *)v61 + 1) = v260;
      switch(v60 & 0x7FFFFFFF)
      {
        case 0:
          v64 = v261;
          v65 = v262;
          v66 = v263;
          *((_QWORD *)v61 + 8) = v264;
          *((_OWORD *)v61 + 3) = v66;
          goto LABEL_66;
        case 1:
          *((_OWORD *)v61 + 1) = v261;
          v108 = v262;
          v109 = v263;
          v110 = v265;
          *((_OWORD *)v61 + 4) = v264;
          *((_OWORD *)v61 + 5) = v110;
          *((_OWORD *)v61 + 2) = v108;
          *((_OWORD *)v61 + 3) = v109;
          v111 = v266;
          v112 = v267;
          v113 = v268;
          *((_QWORD *)v61 + 18) = v269;
          *((_OWORD *)v61 + 7) = v112;
          *((_OWORD *)v61 + 8) = v113;
          *((_OWORD *)v61 + 6) = v111;
          break;
        case 2:
          v115 = v261;
          *((_QWORD *)v61 + 4) = v61 + 12;
          v116 = (uint64_t)(v61 + 8);
          *(_OWORD *)(v116 - 16) = v115;
          *(_QWORD *)(v116 + 8) = 0x400000000;
          if (DWORD2(v262))
            sub_22E8BB370(v116, (uint64_t)&v262);
          break;
        case 4:
          v64 = v261;
          v65 = v262;
LABEL_66:
          *((_OWORD *)v61 + 1) = v64;
          *((_OWORD *)v61 + 2) = v65;
          break;
        default:
          goto LABEL_67;
      }
      goto LABEL_67;
    }
    v67 = *(unsigned int **)(v56 + 48);
    v68 = *v67;
    if ((*v67 & 0x7FFFFFFF) == 2)
    {
      v69 = (int *)*((_QWORD *)v67 + 4);
      if (v69 != (int *)(v67 + 12))
      {
        free(v69);
        v68 = *v67;
      }
    }
    *v67 = v68 & 0x80000000 | 1;
    v70 = *(_QWORD *)(v56 + 48);
    v71 = v261;
    v72 = v262;
    v73 = v263;
    *(_QWORD *)(v70 + 64) = v264;
    *(_OWORD *)(v70 + 32) = v72;
    *(_OWORD *)(v70 + 48) = v73;
    *(_OWORD *)(v70 + 16) = v71;
    *(_BYTE *)(*(_QWORD *)(v56 + 48) + 72) &= ~1u;
    *(_BYTE *)(*(_QWORD *)(v56 + 48) + 72) &= ~2u;
    *(_QWORD *)(*(_QWORD *)(v56 + 48) + 136) = v34;
    v74 = *(_QWORD *)(v56 + 48);
    *(_QWORD *)(v74 + 144) = v47;
    v75 = *(_OWORD *)(v74 + 32);
    *(_OWORD *)(v74 + 80) = *(_OWORD *)(v74 + 16);
    *(_OWORD *)(v74 + 96) = v75;
    *(_OWORD *)(v74 + 112) = *(_OWORD *)(v74 + 48);
    *(_QWORD *)(v74 + 128) = *(_QWORD *)(v74 + 64);
    v76 = *(_QWORD *)(v56 + 48);
    *(_QWORD *)(v76 + 80) = *(_QWORD *)(v76 + 80) & 0xFFFFFFFC04000000 | 0x20000000;
    *(_QWORD *)(v76 + 120) = 0;
    v77 = *(_QWORD *)(v45 + 16);
    v78 = (unsigned __int16)(v77 >> 38);
    if ((v77 & 0x800000000000000) == 0 && v199 > v78)
    {
      *(_WORD *)(v56 + 104) = *(_BYTE *)(v56 + 104) & 0xFE;
      goto LABEL_67;
    }
    if (v199 < v78)
    {
      *(_BYTE *)(v56 + 104) &= ~1u;
      v79 = 1;
      goto LABEL_64;
    }
    if (!(_DWORD)v199)
    {
LABEL_96:
      v107 = sub_22ED0649C(v11, v34, v251, 0, 0);
      if (v107)
      {
        *(_BYTE *)(v56 + 104) &= ~1u;
        *(_BYTE *)(v56 + 105) = 9;
        *(_QWORD *)(v56 + 120) = v107;
      }
      goto LABEL_67;
    }
    v80 = 0;
    while (1)
    {
      if (v80 >= v78)
      {
        ++v80;
        v92 = *(_QWORD *)(v56 + 48);
        v93 = (unsigned int *)(v92 + 152 * v80);
        v94 = *v93;
        if ((*v93 & 0x7FFFFFFF) == 2)
        {
          v95 = v92 + 152 * v80;
          v96 = *(void **)(v95 + 32);
          if (v96 != (void *)(v95 + 48))
          {
            free(v96);
            v94 = *v93;
          }
        }
        *v93 = v94 & 0x80000000 | 3;
        goto LABEL_91;
      }
      sub_22ED06388(&v216, v11, *(_QWORD *)(v198 + 8 * v80++));
      v81 = *(_QWORD *)(v56 + 48);
      v82 = (int *)(v81 + 152 * v80);
      v83 = *v82;
      if ((*v82 & 0x7FFFFFFF) == 2)
      {
        v84 = v81 + 152 * v80;
        v85 = *(void **)(v84 + 32);
        if (v85 != (void *)(v84 + 48))
        {
          free(v85);
          v83 = *v82;
        }
      }
      v86 = v83 & 0x80000000;
      v87 = v216 & 0x7FFFFFFF;
      *v82 = v216 & 0x7FFFFFFF | v86;
      *v82 = v216 & 0x80000000 | v87;
      *(_QWORD *)(v81 + 152 * v80 + 8) = v217;
      switch(v87)
      {
        case 0:
          v88 = v81 + 152 * v80;
          v89 = v218;
          v90 = v219;
          v91 = v220;
          *(_QWORD *)(v88 + 64) = v221;
          *(_OWORD *)(v88 + 48) = v91;
          goto LABEL_86;
        case 1:
          v97 = v81 + 152 * v80;
          *(_OWORD *)(v97 + 16) = v218;
          v98 = v219;
          v99 = v220;
          v100 = v222;
          *(_OWORD *)(v97 + 64) = v221;
          *(_OWORD *)(v97 + 80) = v100;
          *(_OWORD *)(v97 + 32) = v98;
          *(_OWORD *)(v97 + 48) = v99;
          v101 = v223;
          v102 = v224;
          v103 = v225;
          *(_QWORD *)(v97 + 144) = v226;
          *(_OWORD *)(v97 + 112) = v102;
          *(_OWORD *)(v97 + 128) = v103;
          *(_OWORD *)(v97 + 96) = v101;
          break;
        case 2:
          v104 = v81 + 152 * v80;
          v105 = v218;
          *(_QWORD *)(v104 + 32) = v104 + 48;
          v106 = v104 + 32;
          *(_OWORD *)(v106 - 16) = v105;
          *(_QWORD *)(v106 + 8) = 0x400000000;
          if (DWORD2(v219))
            sub_22E8BB370(v106, (uint64_t)&v219);
          break;
        case 4:
          v89 = v218;
          v90 = v219;
          v88 = v81 + 152 * v80;
LABEL_86:
          *(_OWORD *)(v88 + 16) = v89;
          *(_OWORD *)(v88 + 32) = v90;
          break;
        default:
          break;
      }
      if ((v216 & 0x7FFFFFFF) == 2 && (__int128 *)v219 != &v220)
        free((void *)v219);
      if ((*(_DWORD *)(*(_QWORD *)(v56 + 48) + 152 * v80) & 0x7FFFFFFF) == 4)
        break;
LABEL_91:
      if (v80 == v197)
        goto LABEL_96;
    }
    *(_BYTE *)(v56 + 104) &= ~1u;
    v79 = 2;
LABEL_64:
    *(_BYTE *)(v56 + 105) = v79;
LABEL_67:
    if ((v259 & 0x7FFFFFFF) == 2 && (__int128 *)v262 != &v263)
      free((void *)v262);
    sub_22EB48E64(v11);
    v33 = v195;
LABEL_71:
    ++v32;
  }
  while (v32 != v33);
LABEL_114:
  v117 = v242;
  v213 = 0;
  sub_22F0D5A50(v18);
  v119 = sub_22ED03FCC(&v241, v11, v118, &v213);
  if (v119 == 1)
  {
    v157 = *(_QWORD *)(v11 + 88) + 2128;
    v216 = 0;
    v217 = v157;
    if ((_DWORD)v242)
    {
      LODWORD(v218) = 4485;
      v158 = *(_QWORD *)(v18 + 8);
      v216 = sub_22E3B8AAC(v157);
      *(_BYTE *)(v216 + *(unsigned __int8 *)v216 + 1) = 9;
      v159 = v216;
      v160 = *(unsigned __int8 *)v216;
      *(_BYTE *)v216 = v160 + 1;
      *(_QWORD *)(v159 + 8 * v160 + 16) = v158;
      sub_22F0D4E74(v18);
      v162 = v161;
      v163 = v159 + 336;
    }
    else
    {
      LODWORD(v218) = 4479;
      v172 = *(_QWORD *)(v18 + 8);
      v216 = sub_22E3B8AAC(v157);
      *(_BYTE *)(v216 + *(unsigned __int8 *)v216 + 1) = 9;
      v173 = v216;
      v174 = *(unsigned __int8 *)v216;
      *(_BYTE *)v216 = v174 + 1;
      *(_QWORD *)(v173 + 8 * v174 + 16) = v172;
      *(_BYTE *)(v173 + (v174 + 1) + 1) = 2;
      v175 = v216;
      v176 = *(unsigned __int8 *)v216;
      *(_BYTE *)v216 = v176 + 1;
      *(_QWORD *)(v175 + 8 * v176 + 16) = 1;
      sub_22F0D4E74(v18);
      v162 = v177;
      v163 = v175 + 336;
    }
    sub_22E4D6448(v163, v162, 1);
    sub_22E78D434((uint64_t)&v259, &v216);
    v120 = v192;
    if (v216 && v217)
      sub_22E3BB10C(v217, v216);
    sub_22F0D5A50(v18);
    v209 = v178;
    v212 = v261;
    v210 = 0;
    v211 = v260;
    if (v259)
    {
      v210 = (_OWORD *)sub_22E3B8AAC(v260);
      sub_22E78D4E8(v210, (uint64_t)v259);
    }
    sub_22ED1231C((uint64_t)&v241, &v209, (_QWORD *)v11, 0, v198, v199, "", 0, 0);
    if (v210 && v211)
    {
      sub_22E3BB10C(v211, (unint64_t)v210);
      v210 = 0;
    }
    v134 = v259;
    if (!v259)
      goto LABEL_125;
    v133 = v260;
    if (!v260)
      goto LABEL_125;
LABEL_124:
    sub_22E3BB10C(v133, (unint64_t)v134);
    goto LABEL_125;
  }
  if (v119 == 2)
  {
    sub_22F0D5A50(v18);
    v129 = v128;
    v123 = *(_QWORD *)(v11 + 88) + 2128;
    v130 = *(_QWORD *)(v18 + 8);
    v125 = (_BYTE *)sub_22E3B8AAC(v123);
    v131 = *v125;
    v125[v131 + 1] = 9;
    *v125 = v131 + 1;
    *(_QWORD *)&v125[8 * v131 + 16] = v130;
    sub_22F0D4E74(v18);
    sub_22E4D6448((uint64_t)(v125 + 336), v132, 1);
    v205 = v129;
    v208 = 4464;
    v206 = 0;
    v207 = v123;
    v206 = (_OWORD *)sub_22E3B8AAC(v123);
    sub_22E78D4E8(v206, (uint64_t)v125);
    sub_22ED1231C((uint64_t)&v241, &v205, (_QWORD *)v11, 2, v198, v199, "", 0, 0);
    v120 = v192;
    if (v206 && v207)
    {
      sub_22E3BB10C(v207, (unint64_t)v206);
      v206 = 0;
    }
LABEL_123:
    v133 = v123;
    v134 = v125;
    goto LABEL_124;
  }
  v120 = v192;
  if (v119 == 3)
  {
    sub_22F0D5A50(v18);
    v122 = v121;
    v123 = *(_QWORD *)(v11 + 88) + 2128;
    v124 = *(_QWORD *)(v18 + 8);
    v125 = (_BYTE *)sub_22E3B8AAC(v123);
    v126 = *v125;
    v125[v126 + 1] = 9;
    *v125 = v126 + 1;
    *(_QWORD *)&v125[8 * v126 + 16] = v124;
    sub_22F0D4E74(v18);
    sub_22E4D6448((uint64_t)(v125 + 336), v127, 1);
    v201 = v122;
    v204 = 4473;
    v202 = 0;
    v203 = v123;
    v202 = (_OWORD *)sub_22E3B8AAC(v123);
    sub_22E78D4E8(v202, (uint64_t)v125);
    sub_22ED1231C((uint64_t)&v241, &v201, (_QWORD *)v11, 0, v198, v199, "", 0, 0);
    if (v202 && v203)
    {
      sub_22E3BB10C(v203, (unint64_t)v202);
      v202 = 0;
    }
    goto LABEL_123;
  }
LABEL_125:
  v135 = v213;
  if (v213 == &v241[21 * v242])
    goto LABEL_157;
  if ((_DWORD)v257)
  {
    v136 = 16 * v257;
    v137 = (char *)v256 + 8;
    do
    {
      *(_QWORD *)*(v137 - 1) = *v137;
      v137 += 2;
      v136 -= 16;
    }
    while (v136);
  }
  if (!*v135)
  {
    v164 = *(_QWORD *)(v135[6] + 136);
    v165 = v135[1];
    v259 = 0;
    sub_22E90AE54(v11, v215, v18, (uint64_t *)&v259, v165);
    v13 = 1;
    if ((sub_22EB17F48(v11, v135[1] & 0xFFFFFFFFFFFFFFFCLL, &v215, 1, 0, 0, 0, 0) & 1) != 0)
      goto LABEL_158;
    v166 = sub_22EBCE6E4(v11, v18, v135[1] & 0xFFFFFFFFFFFFFFFCLL, v164, v117 > 1);
    if ((v166 & 1) == 0)
    {
      v167 = v166 & 0xFFFFFFFFFFFFFFFELL;
      v168 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (*(_QWORD *)(v11 + 1296) == *(_QWORD *)(v11 + 1288))
      {
        v169 = 0;
        v170 = 24;
      }
      else
      {
        v169 = *(_QWORD *)(v11 + 1296);
        if (HIDWORD(v169))
          v170 = 32;
        else
          v170 = 24;
      }
      v185 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v11 + 88) + 2032, v170, 3);
      v186 = sub_22F003694(v185, v168, 20, v167, 0, v169, 0);
      LOWORD(v191) = 0;
      v13 = sub_22EB1CFA4(v11, v196, (unint64_t)v186 & 0xFFFFFFFFFFFFFFFELL, v215, v198, v199, v120, 0, v191);
      goto LABEL_158;
    }
LABEL_157:
    v13 = 1;
    goto LABEL_158;
  }
  v138 = v215;
  v139 = v135[1];
  v259 = 0;
  sub_22E90AE54(v11, v215, v18, (uint64_t *)&v259, v139);
  v140 = *v135;
  if ((*(_BYTE *)(*v135 + 28) & 0x80) != 0)
    goto LABEL_157;
  v141 = *(_QWORD *)(*(_QWORD *)(v140 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v141)
    v142 = *(_BYTE *)(v141 + 16) == 26;
  else
    v142 = 0;
  if (!v142)
    v141 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v140 + 48) & 0xFFFFFFFFFFFFFFF0));
  v143 = *(_QWORD *)(v141 + 16);
  v216 = (*(_QWORD *)(v11 + 88) + 15952) | 6;
  LODWORD(v217) = v138;
  sub_22EFC6D6C((uint64_t)&v218, v216);
  *(_QWORD *)&v218 = v138 | (v120 << 32);
  v144 = sub_22ED170D8(v11, v140, v135[1] & 0xFFFFFFFFFFFFFFFCLL, v214, v117 > 1, v217, &v218);
  if ((v144 & 1) != 0)
    goto LABEL_157;
  v145 = (unsigned __int16)(v143 >> 38);
  v259 = &v261;
  v260 = 0x800000000;
  if (v145 >= 8)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v146 = sub_22ED01A54((_QWORD *)v11, v18, 0, v135[1] & 0xFFFFFFFFFFFFFFFCLL, v140);
  v147 = v146 & 1;
  v148 = v193;
  if ((v146 & 1) == 0)
    v148 = v146;
  v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
  v150 = v260;
  if (v260 >= HIDWORD(v260))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v150 = v260;
  }
  *((_QWORD *)v259 + v150) = v149;
  LODWORD(v260) = v260 + 1;
  v151 = (sub_22ED19850(v11, (uint64_t)&v259, v140, v198, v199, v138) | v147) != 0;
  if ((*(_BYTE *)(v141 + 23) & 8) != 0)
  {
    v152 = v199 >= v145;
    v153 = v199 - v145;
    if (v153 != 0 && v152)
    {
      v154 = (_QWORD *)(v198 + 8 * (unsigned __int16)(v143 >> 38));
      do
      {
        v155 = sub_22F32D0F4(v11, *v154, 2, 0);
        v156 = v260;
        if (v260 >= (unint64_t)HIDWORD(v260))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v156 = v260;
        }
        *((_QWORD *)v259 + v156) = v155 & 0xFFFFFFFFFFFFFFFELL;
        v151 |= v155;
        LODWORD(v260) = v260 + 1;
        ++v154;
        --v153;
      }
      while (v153);
    }
  }
  if ((v151 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    sub_22EB18D60(v11, v140, v138, v198, v199);
    v179 = *(_QWORD *)(*(_QWORD *)(v140 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v179)
      v180 = *(unsigned __int8 *)(v179 + 16) - 27 > 0xFFFFFFFD;
    else
      v180 = 0;
    if (!v180)
      v179 = sub_22F10CF48(v179);
    v200 = *(_QWORD *)(v179 + 24);
    v181 = sub_22E8BBBD0(v200);
    v182 = *(_QWORD *)(v11 + 88);
    v183 = sub_22F1133DC(&v200, v182);
    if (*(_QWORD *)(v11 + 1296) == *(_QWORD *)(v11 + 1288))
      v184 = 0;
    else
      v184 = *(_QWORD *)(v11 + 1296);
    v187 = (unsigned __int8 *)sub_22F060CD4(v182, 42, v144 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v259, v260, v183, v181, v192, v184, 0);
    v188 = *(_QWORD *)(*(_QWORD *)(v140 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v188 || *(unsigned __int8 *)(v188 + 16) - 27 <= 0xFFFFFFFD)
      v188 = sub_22F10CF48(v188);
    if ((sub_22EB34594(v11, *(_QWORD *)(v188 + 24), v138, (uint64_t)v187) & 1) != 0
      || (sub_22E97FBB8(v11, v140, v187, v141) & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v189 = sub_22EBCC6C0(v11, (uint64_t)v187);
      v13 = sub_22EB346AC(v11, v189, v140);
    }
  }
  if (v259 != &v261)
    free(v259);
LABEL_158:
  if ((_BYTE)v240)
  {
    if ((_DWORD)v227 == 5)
    {
      sub_22EC64D18(v234, (uint64_t)&v227);
    }
    else if (v232 && (*(_DWORD *)(v234[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v234, (uint64_t)&v227);
    }
  }
  if (v231)
  {
    v190 = sub_22EC6CBD0(v231);
    MEMORY[0x2348A0E9C](v190, 0x10E0C409F09D3C3);
  }
  if (v228 != v230)
    free(v228);
LABEL_167:
  sub_22E9DC79C((uint64_t *)&v241);
LABEL_168:
  if (v256 != v258)
    free(v256);
  return v13;
}

uint64_t sub_22ED1C570()
{
  uint64_t *v0;
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  int v52;
  _OWORD *v53;
  unint64_t v54;
  int v55;
  int v56;
  _OWORD *v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  void *__p;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68[24];
  uint64_t v69;
  uint64_t *v70;
  unsigned __int8 *v71;
  void *v72;
  int v73;
  unsigned __int8 **v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[64];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  _QWORD v85[3];
  __int16 v86;
  char v87;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD v91[339];
  int v92;
  _OWORD v93[9];
  _QWORD *v94;
  uint64_t v95;
  _QWORD v96[6];
  _QWORD v97[2];
  unsigned int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v103 = *MEMORY[0x24BDAC8D0];
  v71 = v6;
  v7 = 1;
  if ((sub_22ECFAD0C(v0, &v71, 0) & 1) == 0)
  {
    v8 = v71;
    sub_22EFF605C((uint64_t)v71);
    v9 = v5[11];
    v89 = v91;
    v90 = 0x1000000000;
    v91[336] = v93;
    v91[337] = v93;
    v91[338] = 16;
    v92 = 0;
    v93[8] = 0u;
    v94 = v96;
    v95 = 0x400000000;
    v96[4] = v97;
    v97[0] = 0;
    v96[5] = 0;
    v97[1] = 1;
    v98 = v10;
    v99 = 1;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v11 = *((_QWORD *)v8 + 1);
    v72 = &unk_24FAB6ED0;
    v73 = 4977;
    v74 = &v71;
    if ((sub_22EE8B0B0((uint64_t)v5, v10, v11) & 1) != 0)
    {
LABEL_59:
      sub_22E9DC79C((uint64_t *)&v89);
      return v7;
    }
    v12 = v4;
    v75 = 0;
    v76 = v78;
    v77 = 0x800000000;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v82 = v5;
    v83 = (v9 + 15936) | 6;
    v84 = v4;
    sub_22EFC6D6C((uint64_t)v85, v83);
    v85[2] = 0;
    v85[1] = 0;
    v86 = 0;
    v87 = 1;
    v88 = 1;
    sub_22EC56024((uint64_t)&v75);
    v13 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v71 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 24));
    if (v13)
      v14 = v13 + 64;
    else
      v14 = 0;
    sub_22EC611AC(v5, &v75, v14, 0);
    LOBYTE(v88) = 0;
    if ((_DWORD)v77)
    {
      v15 = (uint64_t *)v76;
      v16 = 8 * v77;
      do
      {
        v17 = *v15++;
        v18 = *((_QWORD *)v71 + 1);
        v19 = sub_22F003E64((uint64_t)v71, v5[11], 0);
        sub_22ED08414((uint64_t)v5, v17, v18, v19, 0, 0, (uint64_t)&v89, 0);
        v16 -= 8;
      }
      while (v16);
    }
    v20 = v90;
    v70 = 0;
    v21 = sub_22ED03FCC(&v89, v5, v4, &v70);
    if (v21 != 1)
    {
      if (v21 == 2)
      {
        v22 = v5[11] + 2128;
        v23 = (_BYTE *)sub_22E3B8AAC(v22);
        v26 = v23 + 1;
        v27 = *v23;
        v26[v27] = 1;
        *v23 = v27 + 2;
        v28 = v27 + 1;
        *(_QWORD *)&v23[8 * v27 + 16] = "->";
        v29 = *((_QWORD *)v71 + 1);
        v26[v28] = 9;
        *(_QWORD *)&v23[8 * v28 + 16] = v29;
        sub_22F0D4E74((uint64_t)v71);
        sub_22E4D6448((uint64_t)(v23 + 336), v30, 1);
        v56 = v4;
        v59 = 4466;
        v58 = v22;
        v57 = (_OWORD *)sub_22E3B8AAC(v22);
        sub_22E78D4E8(v57, (uint64_t)v23);
        sub_22ED1231C((uint64_t)&v89, &v56, v5, 2, (int)&v71, 1u, "", 0, 0);
        if (v57 && v58)
        {
          sub_22E3BB10C(v58, (unint64_t)v57);
          v57 = 0;
        }
      }
      else
      {
        if (v21 != 3)
        {
          v31 = v70;
          v32 = v70[1];
          v72 = 0;
          sub_22E90AE54((uint64_t)v5, v4, (uint64_t)v71, (uint64_t *)&v72, v32);
          v33 = *v31;
          v34 = sub_22ED01A54(v5, (uint64_t)v71, 0, v31[1] & 0xFFFFFFFFFFFFFFFCLL, *v31);
          if ((v34 & 1) == 0)
          {
            v71 = (unsigned __int8 *)(v34 & 0xFFFFFFFFFFFFFFFELL);
            v72 = 0;
            v35 = sub_22ED170D8((uint64_t)v5, v33, v31[1] & 0xFFFFFFFFFFFFFFFCLL, (unsigned __int8 *)(v34 & 0xFFFFFFFFFFFFFFFELL), v20 > 1, v12, &v72);
            if ((v35 & 1) == 0)
            {
              v36 = *(_QWORD *)(*(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v36)
                v37 = *(unsigned __int8 *)(v36 + 16) - 27 > 0xFFFFFFFD;
              else
                v37 = 0;
              if (!v37)
                v36 = sub_22F10CF48(v36);
              v72 = *(void **)(v36 + 24);
              v38 = sub_22E8BBBD0((uint64_t)v72);
              v39 = v5[11];
              v40 = sub_22F1133DC((uint64_t *)&v72, v39);
              if (v5[162] == v5[161])
                v41 = 0;
              else
                v41 = v5[162];
              v44 = (unsigned __int8 *)sub_22F060CD4(v39, 41, v35 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v71, 1, v40, v38, v12, v41, 0);
              v45 = *(_QWORD *)(*(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (!v45 || *(unsigned __int8 *)(v45 + 16) - 27 <= 0xFFFFFFFD)
                v45 = sub_22F10CF48(v45);
              if ((sub_22EB34594((uint64_t)v5, *(_QWORD *)(v45 + 24), v12, (uint64_t)v44) & 1) == 0)
              {
                v46 = *(_QWORD *)(*(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (!v46 || *(_BYTE *)(v46 + 16) != 26)
                  v46 = sub_22F10CF48(v46);
                if ((sub_22E97FBB8((uint64_t)v5, v33, v44, v46) & 1) == 0)
                {
                  v47 = sub_22EBCC6C0((uint64_t)v5, (uint64_t)v44);
                  v7 = sub_22EB346AC((uint64_t)v5, v47, v33);
LABEL_50:
                  if ((_BYTE)v88)
                  {
                    if ((_DWORD)v75 == 5)
                    {
                      sub_22EC64D18(v82, (uint64_t)&v75);
                    }
                    else if (v80 && (*(_DWORD *)(v82[9] + 52) & 0x400000) != 0)
                    {
                      sub_22E90B5FC((unint64_t)v82, (uint64_t)&v75);
                    }
                  }
                  if (v79)
                  {
                    v51 = sub_22EC6CBD0(v79);
                    MEMORY[0x2348A0E9C](v51, 0x10E0C409F09D3C3);
                  }
                  if (v76 != v78)
                    free(v76);
                  goto LABEL_59;
                }
              }
            }
          }
LABEL_49:
          v7 = 1;
          goto LABEL_50;
        }
        v22 = v5[11] + 2128;
        v23 = (_BYTE *)sub_22E3B8AAC(v22);
        v24 = *v23;
        v23[v24 + 1] = 1;
        *v23 = v24 + 1;
        *(_QWORD *)&v23[8 * v24 + 16] = "->";
        sub_22F0D4E74((uint64_t)v71);
        sub_22E4D6448((uint64_t)(v23 + 336), v25, 1);
        v52 = v4;
        v55 = 4474;
        v54 = v22;
        v53 = (_OWORD *)sub_22E3B8AAC(v22);
        sub_22E78D4E8(v53, (uint64_t)v23);
        sub_22ED1231C((uint64_t)&v89, &v52, v5, 0, (int)&v71, 1u, "", 0, 0);
        if (v53 && v54)
        {
          sub_22E3BB10C(v54, (unint64_t)v53);
          v53 = 0;
        }
      }
      sub_22E3BB10C(v22, (unint64_t)v23);
      goto LABEL_49;
    }
    sub_22ECFE46C(&v72);
    if ((_DWORD)v90)
    {
      sub_22E8FCA40(v5, v4, 0x1186u, 0, (uint64_t)v68);
      v48 = sub_22F2F30F4((uint64_t)v68, (uint64_t)"operator->");
      sub_22F0D4E74((uint64_t)v71);
      v60 = v49;
      sub_22E8906A0(v48, (uint64_t *)&v60);
    }
    else
    {
      v69 = *((_QWORD *)v71 + 1);
      if (v2)
      {
        *v2 = 1;
        goto LABEL_47;
      }
      sub_22E8FCA40(v5, v4, 0x137Du, 0, (uint64_t)v68);
      v42 = sub_22E8901B8((uint64_t)v68, &v69);
      sub_22F0D4E74((uint64_t)v71);
      v60 = v43;
      sub_22E8906A0(v42, (uint64_t *)&v60);
      sub_22E903BEC(v68);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 45)
      {
LABEL_46:
        sub_22ECFEBA0((uint64_t)&v89, (uint64_t)v5, (int)&v71, 1u, (char *)v72, v73, "", 0, 0);
LABEL_47:
        if (v72 != &v74)
          free(v72);
        goto LABEL_49;
      }
      sub_22E8FCA40(v5, v4, 0x17FAu, 0, (uint64_t)v68);
      v63 = 0;
      v62 = 0;
      v65 = 0;
      v66 = 0x100000000000000;
      v67 = 0;
      v60 = v4 | (unint64_t)(v4 << 32);
      v61 = 1;
      __p = (void *)46;
      sub_22E890748((uint64_t)v68, &v60);
      if (SHIBYTE(v66) < 0)
        operator delete(__p);
    }
    sub_22E903BEC(v68);
    goto LABEL_46;
  }
  return v7;
}

uint64_t sub_22ED1CDDC()
{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41[6];
  int v42;
  _OWORD *v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  _OWORD *v47;
  unint64_t v48;
  int v49;
  unint64_t *v50;
  _QWORD v51[2];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[339];
  int v55;
  _OWORD v56[9];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[5];
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  __int128 v63;
  int v64;
  uint64_t v65;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v7 = v6;
  v8 = v4;
  v9 = (int)v3;
  v10 = v2;
  v11 = v1;
  v12 = v0;
  v65 = *MEMORY[0x24BDAC8D0];
  if ((~*v2 & 7) != 0)
    goto LABEL_6;
  v13 = *(_DWORD *)(*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8);
  if (v13 >= 3)
    v13 = 3;
  if (v13 != 1)
LABEL_6:
    v14 = 0;
  else
    v14 = v2[4];
  v52 = v54;
  v53 = 0x1000000000;
  v54[336] = v56;
  v54[337] = v56;
  v54[338] = 16;
  v55 = 0;
  v56[8] = 0u;
  v57 = v59;
  v58 = 0x400000000;
  v59[4] = (char *)&v60 + 8;
  v60 = 0u;
  v61 = 1;
  v62 = v14;
  v64 = 0;
  v63 = 0u;
  sub_22ED09B88(v0, v1 + 8, v3, v4, (uint64_t)&v52, v5);
  v15 = v53;
  v50 = 0;
  v16 = v14;
  v17 = sub_22ED03FCC((uint64_t *)&v52, v12, v14, &v50);
  if (v17 == 2)
  {
    v22 = *(_DWORD *)(v11 + 128);
    v18 = v12[11] + 2128;
    v23 = *(_QWORD *)(v11 + 120);
    v20 = (_BYTE *)sub_22E3B8AAC(v18);
    v24 = *v20;
    v20[v24 + 1] = 10;
    *v20 = v24 + 1;
    *(_QWORD *)&v20[8 * v24 + 16] = v23;
    v42 = v22;
    v45 = 4460;
    v44 = v18;
    v43 = (_OWORD *)sub_22E3B8AAC(v18);
    sub_22E78D4E8(v43, (uint64_t)v20);
    sub_22ED1231C((uint64_t)&v52, &v42, v12, 2, v9, v8, "", 0, 0);
    if (v43 && v44)
    {
      sub_22E3BB10C(v44, (unint64_t)v43);
      v43 = 0;
    }
    goto LABEL_15;
  }
  if (v17 == 1)
  {
    v18 = v12[11] + 2128;
    v19 = *(_QWORD *)(v11 + 120);
    v20 = (_BYTE *)sub_22E3B8AAC(v18);
    v21 = *v20;
    v20[v21 + 1] = 10;
    *v20 = v21 + 1;
    *(_QWORD *)&v20[8 * v21 + 16] = v19;
    v46 = v14;
    v49 = 4481;
    v48 = v18;
    v47 = (_OWORD *)sub_22E3B8AAC(v18);
    sub_22E78D4E8(v47, (uint64_t)v20);
    sub_22ED1231C((uint64_t)&v52, (int *)&v46, v12, 0, v9, v8, "", 0, 0);
    if (v47 && v48)
    {
      sub_22E3BB10C(v48, (unint64_t)v47);
      v47 = 0;
    }
LABEL_15:
    sub_22E3BB10C(v18, (unint64_t)v20);
LABEL_16:
    v25 = 1;
    goto LABEL_17;
  }
  v27 = *v50;
  v28 = sub_22ED170D8((uint64_t)v12, *v50, v50[1] & 0xFFFFFFFFFFFFFFFCLL, 0, v15 > 1, v10[2], (_QWORD *)v10 + 2);
  if ((v28 & 1) != 0)
    goto LABEL_16;
  v40 = v7;
  v51[0] = 0;
  v51[1] = 0;
  if (!(_DWORD)v8)
  {
LABEL_23:
    v31 = *(_QWORD *)(*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v31)
      v32 = *(unsigned __int8 *)(v31 + 16) - 27 > 0xFFFFFFFD;
    else
      v32 = 0;
    if (!v32)
      v31 = sub_22F10CF48(v31);
    v41[0] = *(_QWORD *)(v31 + 24);
    v33 = sub_22E8BBBD0(v41[0]);
    v34 = v12[11];
    v35 = sub_22F1133DC(v41, v34);
    if (v12[162] == v12[161])
      v36 = 0;
    else
      v36 = v12[162];
    v37 = (unsigned __int8 *)sub_22F3C5CE0(v34, v28 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v51, v8, v35, v33, v40, v16, v36);
    v38 = *(_QWORD *)(*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v38 || *(unsigned __int8 *)(v38 + 16) - 27 <= 0xFFFFFFFD)
      v38 = sub_22F10CF48(v38);
    if ((sub_22EB34594((uint64_t)v12, *(_QWORD *)(v38 + 24), v16, (uint64_t)v37) & 1) == 0
      && (sub_22E97FBB8((uint64_t)v12, v27, v37, 0) & 1) == 0)
    {
      v39 = sub_22EBCC6C0((uint64_t)v12, (uint64_t)v37);
      v25 = sub_22EB346AC((uint64_t)v12, v39, v27);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  v29 = 0;
  v25 = 1;
  while (1)
  {
    sub_22E99E5D4(v12[11], *(_QWORD *)(*(_QWORD *)(v27 + 120) + v29 * 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 120) + v29 * 8) + 48), (uint64_t)v41);
    v30 = sub_22EC45014();
    if ((v30 & 1) != 0)
      break;
    v51[v29++] = v30 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 == v29)
      goto LABEL_23;
  }
LABEL_17:
  sub_22E9DC79C((uint64_t *)&v52);
  return v25;
}

uint64_t sub_22ED1D2B4(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int **a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  void *v32[2];
  void *v33[2];
  unsigned __int8 *v34;

  v34 = (unsigned __int8 *)a7;
  sub_22ECF9840(a6, 0);
  if (*(_DWORD *)(a5 + 16))
  {
    v15 = *(_QWORD *)(a7 + 8);
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)v33 = 0u;
    v16 = sub_22EC24AB8(a1, a7, v15, a2, 0, (uint64_t *)v32, 0, 0, a5, 0, 0, 0, 0);
    if (HIDWORD(v33[1]))
      free(v33[0]);
    if ((v16 & 1) == 0)
    {
      LOWORD(v28) = 0;
      v17 = sub_22EB1CFA4(a1, 0, v16 & 0xFFFFFFFFFFFFFFFELL, a2, 0, 0, a2, 0, v28);
      *a8 = (unsigned int *)v17;
      if ((v17 & 1) == 0)
        return 0;
    }
    *a8 = (unsigned int *)1;
  }
  else
  {
    v30 = *a4;
    v31 = *((_QWORD *)a4 + 2);
    v32[0] = v33;
    v32[1] = 0;
    v20 = sub_22ED166A0(a1, 0, 0, 0, (uint64_t)&v30, (uint64_t)v32, 1);
    if (v32[0] != v33)
      free(v32[0]);
    if ((v20 & 1) == 0)
    {
      v21 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = sub_22ED15724(a1, v19, v21, (unsigned __int8 *)v21, (uint64_t *)&v34, 1, a2, a6, a8);
      if (!*(_DWORD *)(a6 + 8) || v22)
      {
        result = 1;
        *a8 = (unsigned int *)1;
        return result;
      }
      v29 = 0;
      *(_OWORD *)v32 = *(_OWORD *)(v21 + 40);
      if (v32[0])
        v23 = sub_22F0AB0EC((unint64_t *)v32);
      else
        v23 = *(_DWORD *)(v21 + 24);
      v24 = sub_22ED03FCC(a6, a1, v23, &v29);
      if (v24 == 1)
      {
        result = 1;
        *a8 = (unsigned int *)1;
        return result;
      }
      v25 = v24;
      v26 = sub_22ED15B90(a1, 0, (unsigned __int8 *)v21, v21, a2, &v34, 1, a2, 0, a6, &v29, v24, 0);
      if (v25 == 0 && (v26 & 1) == 0)
        v27 = v26;
      else
        v27 = 1;
      *a8 = (unsigned int *)v27;
      if (v25 == 0 && (v26 & 1) == 0)
        return 0;
    }
  }
  return 2;
}

uint64_t sub_22ED1D500(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unint64_t *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t result;
  uint64_t *v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  char v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  llvm::APFloatBase *v70;
  llvm::APFloatBase *v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  int v117;
  char v118;
  char v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  unsigned int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _BOOL4 v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  BOOL v177;
  _BOOL4 v178;
  uint64_t v179;
  BOOL v180;
  _BOOL4 v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  _BOOL4 v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  int v197;
  int v198;
  uint64_t v199;
  _BOOL4 v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  BOOL v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  unsigned int v222;
  int v223;
  char v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t *v232;
  unsigned __int8 v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  __int128 v237;
  _OWORD v238[2];
  char v239;
  char v240;

  LODWORD(v12) = a4;
  v13 = a3;
  v235 = *(_QWORD *)(a2 + 8);
  v16 = v235;
  *a5 = *a5 & 0xFFFFFFFC00000000 | 0x20000000;
  a5[1] = v16;
  a5[5] = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45))
  {
    return 0;
  }
  if (v16 == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
  {
    v17 = sub_22ED13340((unsigned int *)a1, a2, a3, 0, &v236, 0);
    if (!v17)
      return 0;
    v18 = v17;
    v19 = v12;
    v20 = *(_QWORD *)(v17 + 48);
    v235 = v20;
    a5[1] = v20;
    if (*(_QWORD *)(*(_QWORD *)((sub_22F342DC8(v13) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v31 = sub_22F342DC8(v13);
      if ((sub_22ECFAE0C(a1, v20, v31, &v234) & 1) == 0)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v33 = v32 && (*(_DWORD *)(v32 + 16) & 0xFF800FF) == 87031819;
        if (!v33)
          return 0;
      }
    }
    v21 = (unsigned __int8 *)a2;
    LODWORD(v12) = v19;
    if ((*(_DWORD *)(v18 + 28) & 0x7Eu) - 58 <= 0xFFFFFFFB
      || (v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18),
          v21 = (unsigned __int8 *)a2,
          (*(_QWORD *)(v22 + 80) & 0xE000) == 0x4000)
      || (*(_QWORD *)(v18 + 40) & 7) == 6
      && (v21 = (unsigned __int8 *)a2, (*(_DWORD *)(*(_QWORD *)(v18 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4))
    {
      do
      {
        v23 = *v21;
        if (v23 > 0xD5)
        {
          if (v23 == 233)
          {
            if ((*(_DWORD *)v21 & 0x7C0000) != 0x300000)
            {
              v16 = v235;
              goto LABEL_36;
            }
            v23 = *(_DWORD *)v21;
            v25 = v21 + 16;
          }
          else
          {
            if (v23 != 214)
              break;
            v25 = v21 + 24;
          }
        }
        else if (v23 == 155)
        {
          if ((**((_DWORD **)v21 + 2) & 0x18000) != 0)
            goto LABEL_34;
          v25 = v21 + 24;
          if (!v21[48])
            v25 = v21 + 32;
          v23 = 155;
        }
        else
        {
          if (v23 != 176)
            break;
          v24 = *((unsigned int *)v21 + 5);
          if ((_DWORD)v24 == -1)
          {
LABEL_34:
            v16 = v235;
            goto LABEL_65;
          }
          v25 = &v21[8 * v24 + 40];
          v23 = 176;
        }
        v26 = *(unsigned __int8 **)v25;
        v33 = v26 == v21;
        v21 = v26;
      }
      while (!v33);
      v16 = v235;
      if (v23 != 233)
        goto LABEL_65;
LABEL_36:
      v30 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v16, 0);
      goto LABEL_64;
    }
    v27 = *(_QWORD *)(a1 + 88);
    v28 = *(_WORD *)(v18 + 80) & 0x7F;
    v29 = -40;
    if (v28 > 0x46)
    {
      if (v28 != 83)
      {
        if (v28 == 71)
        {
          v29 = -56;
          goto LABEL_55;
        }
        if (v28 == 81)
          goto LABEL_55;
LABEL_50:
        v34 = v28 - 52;
        v35 = v28 - 33 >= 5;
        v36 = -48;
        if (!v35)
          v36 = -64;
        if (v34 >= 6)
          v29 = v36;
        else
          v29 = -72;
      }
    }
    else
    {
      if (v28 > 0x18)
        goto LABEL_49;
      if (v28 != 16)
      {
        if (((1 << v28) & 0x1066) != 0)
          goto LABEL_55;
        if (v28 != 24)
        {
LABEL_49:
          if (v28 == 70)
          {
            v29 = -64;
            goto LABEL_55;
          }
          goto LABEL_50;
        }
      }
      v29 = -48;
    }
LABEL_55:
    v37 = *(_QWORD *)(v18 + 72 + v29 + 16);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
    if ((v37 & 4) != 0)
      v38 = (_QWORD *)*v38;
    if (v38)
      v39 = (unint64_t)(v38 - 8);
    else
      v39 = 0;
    v40 = *(_QWORD *)(v39 + 48);
    if (v40)
    {
      v41 = v40 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v41 = sub_22EF6462C(v27, v39);
      v27 = *(_QWORD *)(a1 + 88);
    }
    v30 = sub_22F36A6C0(v27, v235, *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0));
LABEL_64:
    v16 = v30;
    v235 = v30;
  }
LABEL_65:
  v42 = v16 & 0xFFFFFFFFFFFFFFF0;
  v43 = *(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)a2 & 0x300) == 0
    || (v44 = *(unsigned __int8 *)(*(_QWORD *)v43 + 16), (v44 - 25) < 2)
    || (v44 & 0xFEu) - 2 < 4
    || (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) | v16 & 7) == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
  {
    v47 = *(_DWORD *)(*(_QWORD *)v43 + 16);
    if ((v47 & 0xFEu) - 2 > 3)
    {
      v48 = *a5 & 0xFFFFFFFFFFFFFF00;
      if ((*(_DWORD *)a2 & 0x300) != 0 && v47 - 27 >= 0xFFFFFFFE)
      {
        *a5 = v48 | 3;
        v49 = sub_22EFFBBCC((unsigned __int8 *)a2);
        if (*v49 == 161)
        {
          v50 = *((_QWORD *)v49 + 2);
          if (v50)
          {
            if ((*(_DWORD *)(v50 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
            {
              v51 = sub_22ED10E50((_QWORD *)a1, v50, 0, 0, 0);
              result = 0;
              if (!v51)
                return result;
            }
          }
        }
        v16 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v16, 0);
        v235 = v16;
      }
      else
      {
        *a5 = v48;
      }
    }
    else
    {
      *(_BYTE *)a5 = 2;
      v16 = sub_22EF5F824(*(_QWORD *)(a1 + 88), v16);
      v235 = v16;
      if (sub_22EBC44E0(a1, (unsigned __int8 *)a2, v13))
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) != 0)
          return 0;
        *a5 = *a5 & 0xFFFFFFFFFC0000FFLL | 0x1050000;
        a5[2] = v16;
        a5[3] = v16;
        a5[4] = v16;
        return 1;
      }
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
    v45 = *(_QWORD *)v42;
    if (*(_QWORD *)v42 && *(_BYTE *)(v45 + 16) == 6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
      && (v45 = sub_22F10CF48(v45)) != 0)
    {
      v16 = *(_QWORD *)(v45 + 32);
      v42 = v16 & 0xFFFFFFFFFFFFFFF0;
    }
    v46 = *(_QWORD *)v42;
    if ((*(_BYTE *)(*(_QWORD *)v42 + 8) & 0xF) != 0)
      v46 = (unint64_t)sub_22F10D2BC(v16);
    v16 = v46 & 0xFFFFFFFFFFFFFFF0;
    v235 = v46 & 0xFFFFFFFFFFFFFFF0;
  }
  a5[2] = v16;
  v233 = 0;
  v53 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_391;
  v232 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22ECFB0F0(a1, (unsigned __int8 *)a2, v16, v13))
  {
    v54 = 6;
LABEL_94:
    *((_BYTE *)a5 + 1) = v54;
    v55 = *v232;
LABEL_95:
    if ((*(_BYTE *)(v55 + 8) & 0xF) != 0)
      v55 = (uint64_t)sub_22F10D2BC(v13);
    v56 = v55 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_98;
  }
  if (sub_22ECFB7A4(a1, v16, v13))
  {
    v54 = 7;
    goto LABEL_94;
  }
  v231 = v12;
  v57 = *v53;
  v58 = v13 & 0xFFFFFFFFFFFFFFF0;
  if (*v53 && *(_BYTE *)(v57 + 16) == 12)
    goto LABEL_451;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    v209 = sub_22F10CF48(*v53);
    v58 = v13 & 0xFFFFFFFFFFFFFFF0;
    if (v209)
    {
      v57 = v209;
LABEL_451:
      v210 = *v232;
      if (*v232 && *(_BYTE *)(v210 + 16) == 12
        || (v58 = v13 & 0xFFFFFFFFFFFFFFF0,
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v210 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
        && (v210 = sub_22F10CF48(v210), v58 = v13 & 0xFFFFFFFFFFFFFFF0, v210))
      {
        v211 = *(_QWORD *)(v57 + 32);
        v230 = *(_QWORD *)(v210 + 32);
        v212 = sub_22ECFB7A4(a1, v211, v230);
        v58 = v13 & 0xFFFFFFFFFFFFFFF0;
        if (v212 || (v213 = sub_22ECFB0F0(a1, 0, v211, v230), v58 = v13 & 0xFFFFFFFFFFFFFFF0, v213))
        {
          *((_BYTE *)a5 + 1) = 8;
          v97 = *(_QWORD *)v58;
          goto LABEL_180;
        }
      }
    }
  }
  v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v58 + 8) & 0xFFFFFFFFFFFFFFF0);
  v60 = *v53;
  if (v59)
  {
    LODWORD(v12) = v231;
    if ((*(_DWORD *)(v59 + 16) & 0xFF800FF) == 0x530000B)
    {
      if (sub_22F110E9C(v60)
        || ((v60 = *v53,
             *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) <= 0x27u)
          ? (v61 = ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)) & 0x8180000400) == 0)
          : (v61 = 1),
            !v61
         || ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x6D0000B
           ? (v73 = (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 232) & 0x800000000) == 0)
           : (v73 = 1),
             !v73)))
      {
        *((_BYTE *)a5 + 1) = 15;
        v56 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400);
LABEL_98:
        v235 = v56;
        goto LABEL_392;
      }
    }
  }
  else
  {
    LODWORD(v12) = v231;
  }
  if (sub_22F1107D8(v60) && sub_22F110744(*v232, *(_QWORD *)(a1 + 88)))
  {
    v54 = 9;
    goto LABEL_94;
  }
  v62 = *v53;
  v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v232 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      v64 = 11;
LABEL_150:
      *((_BYTE *)a5 + 1) = v64;
LABEL_151:
      v55 = *v63;
      goto LABEL_95;
    }
    if (sub_22F110E9C(*v232))
    {
LABEL_121:
      v54 = 23;
      goto LABEL_94;
    }
    v62 = *v53;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    if (sub_22F110E9C(v62))
      goto LABEL_121;
    v62 = *v53;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  }
  v65 = *(_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v65)
  {
    v66 = *(_DWORD *)(v65 + 16);
    if (v66 == 11 && ((v66 >> 19) & 0x1FE) - 210 <= 7)
    {
      v67 = *(_QWORD *)(*(_QWORD *)(*v63 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v67)
      {
        v68 = *(_DWORD *)(v67 + 16);
        if (v68 == 11 && ((v68 >> 19) & 0x1FE) - 210 <= 7)
        {
          if (((v68 & 0xFF80000) == 0x6B80000 || (v66 & 0xFF800FF) == 0x6B8000B)
            && sub_22EF6A108(*(_QWORD *)(a1 + 88), v13, v16) > 0xFFFFFFFD)
          {
            return 0;
          }
          v69 = sub_22EF5B2E0(*(_QWORD *)(a1 + 88), v16);
          v70 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(a1 + 88), v13);
          v71 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v70);
          v72 = llvm::APFloatBase::IEEEquad(v71);
          if ((llvm::APFloatBase *)v69 == v71 && v70 == (llvm::APFloatBase *)v72)
            return 0;
          if (v70 == v71 && v69 == v72)
            return 0;
          *((_BYTE *)a5 + 1) = 10;
          v97 = *v232;
          goto LABEL_180;
        }
      }
      v74 = sub_22F110744(*v232, *(_QWORD *)(a1 + 88));
      v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (v74)
        goto LABEL_149;
      v62 = *v53;
    }
  }
  v75 = sub_22F1107D8(v62);
  v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v76 = *v232;
  if (v75)
  {
    v77 = *(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v77)
    {
      v78 = *(_DWORD *)(v77 + 16);
      if (v78 == 11 && ((v78 >> 19) & 0x1FE) - 210 <= 7)
      {
LABEL_149:
        v64 = 12;
        goto LABEL_150;
      }
    }
  }
  if (v76 && *(_BYTE *)(v76 + 16) == 10
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10
    && (v76 = sub_22F10CF48(v76)) != 0)
  {
    if ((v79 = *(_QWORD *)(v76 + 32), (v80 = *v53) != 0) && *(_BYTE *)(v80 + 16) == 10
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v80 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10
      && (v81 = v79, v80 = sub_22F10CF48(v80), v79 = v81, v80))
    {
      v82 = *(_QWORD *)(v80 + 32);
      v83 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0);
      if (!v83 || *(_BYTE *)(v83 + 16) != 26)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        {
          v84 = v79;
          v85 = sub_22F10CF48(*(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0));
          v79 = v84;
          v83 = v85;
        }
        else
        {
          v83 = 0;
        }
      }
      v86 = v79 & 0xFFFFFFFFFFFFFFF0;
      v87 = *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0);
      if (!v87 || *(_BYTE *)(v87 + 16) != 26)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          goto LABEL_210;
        v224 = v79;
        v227 = v83;
        v87 = sub_22F10CF48(v87);
        LOBYTE(v79) = v224;
        v83 = v227;
      }
      if (v83 && v87)
      {
        if ((*(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFF0) + 8) | v82 & 7) == (*(_QWORD *)(v86 + 8) | v79 & 7))
          goto LABEL_207;
        v88 = *(_QWORD *)(v83 + 16);
        v89 = *(_QWORD *)(v87 + 16);
        if (((v89 ^ v88) & 0x3FFFC000000000) != 0
          || ((v88 & 0x800000000000000) != 0) != ((v89 & 0x800000000000000) != 0)
          || v88 >> 19 != v89 >> 19)
        {
          goto LABEL_210;
        }
        LOBYTE(v234) = 0;
        v225 = v87;
        v228 = v83;
        v90 = *(_QWORD *)(v83 + 24);
        v91 = *(_QWORD *)(v87 + 24);
        v92 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 8);
        v93 = v92 | v90 & 7;
        v94 = v91 & 0xFFFFFFFFFFFFFFF0;
        v95 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFFFF0) + 8);
        v96 = v91 & 7;
        if (v93 == (v95 | v96))
        {
LABEL_193:
          v99 = *(_QWORD *)(v228 + 16);
          if ((v99 & 0x3FFFC000000000) != 0)
          {
            v100 = (unint64_t *)(v228 + 40);
            v101 = (uint64_t *)(v225 + 40);
            v102 = (unsigned __int16)(v99 >> 38);
            do
            {
              LOBYTE(v234) = 0;
              v104 = *v100++;
              v103 = v104;
              v106 = *v101++;
              v105 = v106;
              if ((*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFFF0) + 8) | v103 & 7) != (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFF0)
                                                                                             + 8) | v106 & 7)
                && (!sub_22ECFB880(a1, v105, v103, (uint64_t *)&v235, &v234) || v234 != 0))
              {
                goto LABEL_210;
              }
            }
            while (--v102);
          }
          v236 = v238;
          v237 = xmmword_22F4559B0;
          v108 = sub_22EF71984(*(_QWORD *)(a1 + 88), v225, v228, &v240, &v239, (uint64_t *)&v236);
          if (v108)
            v235 = v13;
          if (v236 != v238)
            free(v236);
          if (!v108)
            goto LABEL_210;
LABEL_207:
          v109 = 24;
LABEL_208:
          *((_BYTE *)a5 + 1) = v109;
LABEL_209:
          LODWORD(v12) = v231;
          goto LABEL_392;
        }
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        {
          if ((v90 & 0xF) != 0
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 45)
          {
            goto LABEL_190;
          }
        }
        else if ((v90 & 0xF) != 0)
        {
          goto LABEL_190;
        }
        if ((v92 & 0xF) == 0 && ((v95 | v91) & 0xF) != 0)
        {
          v98 = *(_QWORD *)v94;
          if ((*(_BYTE *)(*(_QWORD *)v94 + 8) & 0xF) != 0)
          {
            v98 = (unint64_t)sub_22F10D2BC(v91);
            v93 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 8) | v90 & 7;
          }
          v96 = 0;
          v91 = v98 & 0xFFFFFFFFFFFFFFF0;
          v95 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 8);
        }
LABEL_190:
        if (v93 != (v96 | v95) && (!sub_22ECFB880(a1, v90, v91, (uint64_t *)&v235, &v234) || (_BYTE)v234))
          goto LABEL_210;
        goto LABEL_193;
      }
    }
  }
LABEL_210:
  v110 = v235;
  if (a7)
  {
    v12 = v231;
    if ((sub_22ECFC458(a1, v235, v13, &v235) & 1) != 0)
    {
      *((_BYTE *)a5 + 1) = 26;
      goto LABEL_392;
    }
    v110 = v235;
  }
  else
  {
    v12 = v231;
  }
  v233 = 0;
  if (sub_22ECFB880(a1, v110, v13, (uint64_t *)&v235, &v233))
  {
    v111 = v235;
LABEL_317:
    *a5 = *a5 & 0xFFFFFFFFFBFF00FFLL | ((unint64_t)v233 << 26) | 0xD00;
    v161 = *(_QWORD *)(v111 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v161 + 8) & 0xF) != 0)
      v161 = (unint64_t)sub_22F10D2BC(v111);
    v56 = v161 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_98;
  }
  v112 = *v232;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v232 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v113 = sub_22ECFBFFC(a2, v12, *(_QWORD *)(a1 + 88));
    v111 = v13;
    if ((v113 & 1) != 0)
      goto LABEL_316;
    v112 = *v232;
  }
  v114 = v110 & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    if (*(_BYTE *)(v112 + 16) != 39)
      v112 = sub_22F10CF48(v112);
    v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v115)
      v116 = (*(_DWORD *)(v115 + 16) & 0xFF800FF) == 86507531;
    else
      v116 = 0;
    v111 = v13;
    if (v116)
      goto LABEL_316;
    v112 = *v232;
  }
  v117 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v117 == 10)
  {
    v118 = sub_22ECFBFFC(a2, v12, *(_QWORD *)(a1 + 88));
    v111 = v13;
    if ((v118 & 1) != 0)
      goto LABEL_316;
    v112 = *v232;
    v117 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v232 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if ((v117 & 0xFF800FF) == 0x6D0000B)
  {
    v119 = sub_22ECFBFFC(a2, v12, *(_QWORD *)(a1 + 88));
    v111 = v13;
    if ((v119 & 1) != 0)
      goto LABEL_316;
    v112 = *v232;
  }
  if (!v112 || *(_BYTE *)(v112 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      goto LABEL_275;
    v112 = sub_22F10CF48(v112);
    if (!v112)
      goto LABEL_275;
  }
  v120 = sub_22ECFBFFC(a2, v12, *(_QWORD *)(a1 + 88));
  v111 = v13;
  if ((v120 & 1) != 0)
  {
LABEL_316:
    v235 = v111;
    goto LABEL_317;
  }
  v121 = *(_QWORD *)(v112 + 32);
  v122 = *(_QWORD *)v114;
  v123 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v114 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v123 == 32)
  {
    v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v125 = v124 && (*(_DWORD *)(v124 + 16) & 0xFF800FF) == 86507531;
    if (v125 && (*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
    {
      v126 = *(_QWORD *)(v112 + 32);
      if (*(_BYTE *)(v122 + 16) != 32)
        v122 = sub_22F10CF48(v122);
      v127 = *(_QWORD *)(a1 + 88);
      v128 = v122;
      v129 = v126;
      goto LABEL_314;
    }
  }
  if (*(_BYTE *)(v122 + 16) != 39)
  {
    if (v123 != 39)
      goto LABEL_275;
    v130 = *(_QWORD *)v114;
    v131 = *(_QWORD *)(v112 + 32);
    v132 = sub_22F10CF48(v130);
    v121 = v131;
    v122 = v132;
    if (!v132)
      goto LABEL_275;
  }
  v133 = (_QWORD *)(*(_QWORD *)(v122 + 32) & 0xFFFFFFFFFFFFFFF0);
  v134 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v133[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_275;
  v226 = *(_QWORD *)(v122 + 32);
  v229 = v121;
  v135 = *v133;
  v136 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v133 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v136 - 27) <= 0xFFFFFFFD)
  {
    v137 = *(_QWORD *)(*(_QWORD *)(*v134 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v137 && (*(_DWORD *)(v137 + 16) & 0xFF800FF) == 86507531)
    {
      v127 = *(_QWORD *)(a1 + 88);
      v128 = v122;
      v129 = v121;
      v157 = v13;
      v158 = 1;
LABEL_315:
      v111 = sub_22ECFC10C(v128, v129, v157, v127, v158);
      LODWORD(v12) = v231;
      goto LABEL_316;
    }
  }
  v139 = **(_QWORD **)(a1 + 72);
  if ((v139 & 0x10) != 0 && (v136 - 25) <= 1)
  {
    v140 = *(_QWORD *)(*(_QWORD *)(*v134 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v140 && (*(_DWORD *)(v140 + 16) & 0xFF800FF) == 86507531)
      goto LABEL_313;
  }
  if ((v139 & 0x100) == 0)
  {
    if (sub_22F36EDA0(*(_QWORD *)(a1 + 88), v226, v121, 0))
      goto LABEL_313;
    v135 = *v133;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
      goto LABEL_271;
    v136 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v135 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v136 == 45
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v134 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
    && *(_QWORD *)(v133[1] & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v134[1] & 0xFFFFFFFFFFFFFFF0))
  {
    sub_22F0D5A50(a2);
    if ((sub_22EAAB1B8(a1, v142, v226, v229) & 1) == 0)
    {
      v135 = *v133;
      goto LABEL_271;
    }
LABEL_313:
    v127 = *(_QWORD *)(a1 + 88);
    v128 = v122;
    v129 = v229;
LABEL_314:
    v157 = v13;
    v158 = 0;
    goto LABEL_315;
  }
LABEL_271:
  v12 = v231;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v135 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v134 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
    && sub_22EF6E49C(*(_QWORD *)(a1 + 88), v226, v229))
  {
    v111 = sub_22ECFC10C(v122, v229, v13, *(_QWORD *)(a1 + 88), 0);
    goto LABEL_316;
  }
LABEL_275:
  v143 = v235;
  v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v144 = *v232;
  if (!*v232 || *(_BYTE *)(v144 + 16) != 31)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_278;
    v214 = sub_22F10CF48(*v232);
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (!v214)
      goto LABEL_278;
    v144 = v214;
  }
  if (v231)
    v215 = 2;
  else
    v215 = 1;
  v216 = sub_22EFFBE1C(a2, *(_QWORD *)(a1 + 88), v215);
  v217 = v13;
  if (v216)
    goto LABEL_466;
  v218 = *(_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF0);
  if (v218 && *(_BYTE *)(v218 + 16) == 31)
  {
    v12 = v231;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v12 = v231;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v218 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_278;
    v219 = sub_22F10CF48(*(_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF0));
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    v218 = v219;
    if (!v219)
      goto LABEL_278;
  }
  v220 = *(_QWORD *)(v218 + 40) & 0xFFFFFFFFFFFFFFF0;
  v221 = (uint64_t *)(*(_QWORD *)(v144 + 40) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)(v220 + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v221[1] & 0xFFFFFFFFFFFFFFF0))
  {
    sub_22F0D5A50(a2);
    v223 = sub_22EAAB1B8(a1, v222, (uint64_t)v221, v220);
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (v223)
    {
      v217 = sub_22F36A6C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v218 + 32), *v221);
LABEL_466:
      v235 = v217;
      v109 = 14;
      goto LABEL_208;
    }
  }
LABEL_278:
  v145 = v235;
  v146 = (uint64_t *)(v235 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v146 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1
    || *(_QWORD *)(*(_QWORD *)((v235 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v63[1] & 0xFFFFFFFFFFFFFFF0))
  {
    goto LABEL_343;
  }
  if (sub_22EB35E88(a1, v235, v13))
  {
    v147 = 5120;
LABEL_339:
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
LABEL_340:
    *a5 = *a5 & 0xFFFFFFFFFFFF00FFLL | v147;
    goto LABEL_151;
  }
  v148 = *v232;
  if ((!*v232 || *(_BYTE *)(v148 + 16) != 56)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v148 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56
     || (v148 = sub_22F10CF48(*v232)) == 0))
  {
LABEL_330:
    v163 = *v232;
    if ((sub_22F111384(*v232) & 1) != 0 || sub_22F111384(*v146))
    {
      if ((sub_22F36E9C0(*(_QWORD *)(a1 + 88), v145, v13) & 1) != 0
        || (sub_22F36EA10(*(_QWORD *)(a1 + 88), v145, v13) & 1) != 0)
      {
        v147 = 4864;
        goto LABEL_338;
      }
      v163 = *v232;
    }
    v12 = v231;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v163 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v146 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1)
    {
      if ((sub_22EF6E49C(*(_QWORD *)(a1 + 88), v145, v13) & 1) != 0)
      {
        v147 = 4608;
        goto LABEL_338;
      }
      v164 = sub_22EB35C2C(a1, v145, v13);
      v12 = v231;
      v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (v164)
      {
        v165 = sub_22F10E1FC(*v232, 1);
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((v165 & 1) == 0)
        {
          v147 = 4608;
          goto LABEL_340;
        }
      }
    }
    goto LABEL_343;
  }
  v149 = *v146;
  if (*v146 && *(_BYTE *)(v149 + 16) == 56
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v149 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && (v149 = sub_22F10CF48(v149)) != 0)
  {
    v150 = *(_QWORD *)(a1 + 72);
    if ((*(_BYTE *)(v150 + 104) & 0x20) != 0)
    {
      v12 = v231;
      v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (*(_DWORD *)(v149 + 20) != *(_DWORD *)(v148 + 20)
        || !a8
        || (*(_BYTE *)(v149 + 18) & 0x78) != 0
        || (*(_BYTE *)(v148 + 18) & 0x78) != 0)
      {
        goto LABEL_343;
      }
      v159 = *(_QWORD *)(v148 + 32);
      v160 = *(_QWORD *)(*(_QWORD *)(v149 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F10E0EC(v160) && sub_22F10E0EC(*(_QWORD *)(v159 & 0xFFFFFFFFFFFFFFF0)))
      {
        v147 = 5376;
LABEL_338:
        LODWORD(v12) = v231;
        goto LABEL_339;
      }
      v201 = *(_QWORD *)(*(_QWORD *)(v160 + 8) & 0xFFFFFFFFFFFFFFF0);
      v202 = *(_DWORD *)(v201 + 16);
      if (v201 && v202 == 11)
      {
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (((*(_DWORD *)(v201 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_343;
      }
      else if (v201 && v202 == 44)
      {
        v203 = sub_22F114198(*(_QWORD *)(v201 + 24));
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v203 + 74) & 1) == 0 && *(_QWORD *)(v203 + 128) <= 7uLL)
          goto LABEL_343;
        v204 = sub_22F114198(*(_QWORD *)(v201 + 24));
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v204 + 76) & 0x80) != 0)
          goto LABEL_343;
      }
      else
      {
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (v202 != 9)
          goto LABEL_343;
      }
      v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v159 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v206 = *(_DWORD *)(v205 + 16);
      if (v205 && v206 == 11)
      {
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (((*(_DWORD *)(v205 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_343;
      }
      else if (v205 && v206 == 44)
      {
        v207 = sub_22F114198(*(_QWORD *)(v205 + 24));
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v207 + 74) & 1) == 0 && *(_QWORD *)(v207 + 128) <= 7uLL)
          goto LABEL_343;
        v208 = sub_22F114198(*(_QWORD *)(v205 + 24));
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v208 + 76) & 0x80) != 0)
          goto LABEL_343;
      }
      else
      {
        v12 = v231;
        v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
        if (v206 != 9)
          goto LABEL_343;
      }
      v147 = 5376;
      goto LABEL_340;
    }
    v12 = v231;
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v150 + 136) & 1) == 0)
      goto LABEL_343;
  }
  v151 = *v146;
  v152 = *(_QWORD *)(*(_QWORD *)(*v146 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v152
    || (v153 = *(_DWORD *)(v152 + 16), v153 != 11)
    || ((v153 >> 19) & 0x1FE) - 210 > 7
    || (v154 = *(_QWORD *)(v148 + 32),
        (v155 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) == 0)
    || (v156 = *(_DWORD *)(v155 + 16), v156 != 11)
    || ((v156 >> 19) & 0x1FE) - 210 > 7)
  {
LABEL_328:
    if (sub_22F110E9C(v151))
      goto LABEL_329;
    goto LABEL_330;
  }
  if (((v153 >> 19) & 0x1FF) - 211 > 2)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) == 0)
      goto LABEL_325;
  }
  else
  {
    if (((v156 >> 19) & 0x1FF) - 211 < 3)
      goto LABEL_329;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) == 0)
      goto LABEL_325;
    if ((v156 & 0xFF800FF) == 0x690000B)
      goto LABEL_329;
  }
  if ((v153 & 0xFF800FF) == 0x690000B && ((v156 >> 19) & 0x1FF) - 211 < 3)
    goto LABEL_329;
LABEL_325:
  v162 = sub_22EF6A108(*(_QWORD *)(a1 + 88), v154, v145);
  v12 = v231;
  v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (v162 < 0xFFFFFFFE)
  {
    if (v162 >= 2)
    {
      v151 = *v146;
      goto LABEL_328;
    }
LABEL_329:
    v147 = 5632;
    goto LABEL_338;
  }
LABEL_343:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
  {
    v200 = sub_22F36EDA0(*(_QWORD *)(a1 + 88), v13, v235, 0);
    v63 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (v200)
    {
      *((_BYTE *)a5 + 1) = 16;
      v97 = *v232;
LABEL_180:
      if ((*(_BYTE *)(v97 + 8) & 0xF) != 0)
        v97 = (uint64_t)sub_22F10D2BC(v13);
      v235 = v97 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_209;
    }
  }
  v166 = sub_22F10E2FC(*v63);
  if (v166)
  {
    v167 = v166;
    v168 = sub_22F114198(*(_QWORD *)(v166 + 24));
    if (sub_22E69BDA8(v168))
    {
      v169 = sub_22F114198(*(_QWORD *)(v167 + 24));
      v170 = sub_22EFC3B90(v169);
      if (v170)
      {
        v171 = v170;
        if ((sub_22ED1D500(a1, a2, *(_QWORD *)(v170 + 48), v12, a5, a6, 0, 0) & 1) != 0)
        {
LABEL_351:
          v13 = *(_QWORD *)(v171 + 48);
          v172 = 25;
LABEL_390:
          *((_BYTE *)a5 + 1) = v172;
          v235 = v13;
          goto LABEL_392;
        }
        while (1)
        {
          v171 = *(_QWORD *)(v171 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v171)
            break;
          if ((*(_DWORD *)(v171 + 28) & 0x7Fu) - 49 <= 2
            && sub_22ED1D500(a1, a2, *(_QWORD *)(v171 + 48), v12, a5, a6, 0, 0))
          {
            goto LABEL_351;
          }
        }
      }
    }
  }
  v173 = v13 & 0xFFFFFFFFFFFFFFF0;
  v174 = *v232;
  if (*v232)
    v175 = *(_BYTE *)(*v232 + 16) == 6;
  else
    v175 = 0;
  if (v175
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
    && (v174 = sub_22F10CF48(v174), v173 = v13 & 0xFFFFFFFFFFFFFFF0, v174))
  {
    if (sub_22ED1D500(a1, a2, *(_QWORD *)(v174 + 32), v12, &v236, a6, 0, 0))
    {
      *a5 = *a5 & 0xFFFFFFFFFD0000FFLL | v236 & 0x2FFFF00;
      *(_OWORD *)(a5 + 3) = v238[0];
      return 1;
    }
    v173 = v13 & 0xFFFFFFFFFFFFFFF0;
  }
  v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v173 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v176)
    v177 = (*(_DWORD *)(v176 + 16) & 0xFF800FF) == 116916235;
  else
    v177 = 0;
  if (v177 && sub_22F0085E8(a2, *(_QWORD *)(a1 + 88), 0))
  {
    sub_22F007D7C((unsigned __int8 *)a2, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v236);
    v178 = sub_22E42E5EC((uint64_t)&v236, 0);
    if (v237 >= 0x41 && v236)
      MEMORY[0x2348A0E84](v236, 0x1000C8000313F17);
    LODWORD(v12) = v231;
    if (v178)
    {
      v172 = 27;
      goto LABEL_390;
    }
  }
  v179 = *(_QWORD *)(*(_QWORD *)(*v232 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v179)
    v180 = (*(_DWORD *)(v179 + 16) & 0xFF800FF) == 117964811;
  else
    v180 = 0;
  if (v180 && sub_22F0085E8(a2, *(_QWORD *)(a1 + 88), 0))
  {
    sub_22F007D7C((unsigned __int8 *)a2, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v236);
    v181 = sub_22E42E5EC((uint64_t)&v236, 0);
    if (v237 >= 0x41 && v236)
      MEMORY[0x2348A0E84](v236, 0x1000C8000313F17);
    LODWORD(v12) = v231;
    if (v181)
    {
      v172 = 28;
      goto LABEL_390;
    }
  }
  v182 = *(_QWORD *)(*(_QWORD *)(*v232 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v182)
    v183 = (*(_DWORD *)(v182 + 16) & 0xFF800FF) == 116391947;
  else
    v183 = 0;
  if (v183 && sub_22F0085E8(a2, *(_QWORD *)(a1 + 88), 0))
  {
    v172 = 16;
    goto LABEL_390;
  }
LABEL_391:
  *a5 &= 0xFFFFFFFFFFFF00FFLL;
LABEL_392:
  v184 = v235;
  a5[3] = v235;
  LOBYTE(v234) = 0;
  if (sub_22ECFAE0C(a1, v184, v13, &v235))
  {
    *((_BYTE *)a5 + 2) = 4;
  }
  else
  {
    v185 = sub_22ECFD738(a1, v235, v13, a6, &v234);
    v186 = *a5;
    if (v185)
    {
      *a5 = v186 & 0xFFFFFFFFFD00FFFFLL | ((unint64_t)v234 << 25) | 0x50000;
      v235 = v13;
    }
    else
    {
      *a5 = v186 & 0xFFFFFFFFFF00FFFFLL;
    }
  }
  v187 = *(_QWORD *)((v235 & 0xFFFFFFFFFFFFFFF0) + 8);
  v188 = v235 & 7 | v187;
  v189 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v190 = v189 | v13 & 7;
  if ((*(_QWORD *)(v189 & 0xFFFFFFFFFFFFFFF0) ^ *(_QWORD *)(v187 & 0xFFFFFFFFFFFFFFF0)) <= 15)
  {
    if ((v187 & 8) != 0)
    {
      v192 = *(_QWORD *)((v187 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v191 = HIDWORD(*(_QWORD *)((v187 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      LODWORD(v191) = 0;
      v192 = 0;
    }
    v193 = v192 | v188 & 7;
    if ((v189 & 8) != 0)
    {
      v195 = *(_QWORD *)((v189 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v194 = HIDWORD(*(_QWORD *)((v189 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      LODWORD(v194) = 0;
      v195 = 0;
    }
    if (v193 != (v195 | v190 & 7) || (_DWORD)v191 != (_DWORD)v194)
      goto LABEL_418;
  }
  a5[4] = v235;
  if (v188 == v190)
    return 1;
  result = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 && (_DWORD)v12)
  {
    v236 = (void *)a2;
    v197 = sub_22EB392FC((uint64_t *)a1, v13, (uint64_t *)&v236, 0, 0, 0);
    if ((v197 - 17) >= 2)
    {
      v198 = v197;
      if (!v197)
      {
        v199 = 7424;
        goto LABEL_417;
      }
      result = 0;
      if (v198 != 15)
        return result;
    }
    v199 = 7680;
LABEL_417:
    *a5 = *a5 & 0xFFFFFFFFFF0000FFLL | v199;
    a5[3] = v13;
LABEL_418:
    a5[4] = v13;
    return 1;
  }
  return result;
}

uint64_t sub_22ED1F2B4()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  _QWORD v18[2];
  _QWORD v19[339];
  int v20;
  _OWORD v21[9];
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  result = MEMORY[0x24BDAC7A8]();
  v7 = v3;
  v8 = v2;
  v30 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)result = 5;
  *(_QWORD *)(result + 8) = 0;
  v9 = result + 16;
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFC04000000 | 0x20000000;
  *(_QWORD *)(result + 56) = 0;
  if (!v10)
  {
    v12 = v6;
    v13 = v5;
    v14 = v4;
    v15 = v1;
    sub_22EFF605C(v2);
    v18[0] = v19;
    v18[1] = 0x1000000000;
    v19[336] = v21;
    v19[337] = v21;
    v19[338] = 16;
    v20 = 0;
    v21[8] = 0u;
    v22 = v24;
    v23 = 0x400000000;
    v24[4] = (char *)&v25 + 8;
    v25 = 0u;
    v26 = 1;
    v27 = v16;
    v29 = 0;
    v28 = 0u;
    sub_22ECFDAC8(v15, v8, v7, v9, (uint64_t)v18, v14, v13, v12);
    __asm { BR              X10 }
  }
  *(_DWORD *)result = 4;
  v11 = *(_QWORD *)(v2 + 8);
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

unsigned int *sub_22ED1F6A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5[24];

  (*(void (**)(unsigned int *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(v5);
  sub_22F0D4E74(*(_QWORD *)(a1 + 16));
  v4 = v2;
  sub_22E8906A0((uint64_t)v5, &v4);
  return sub_22E903BEC(v5);
}

void sub_22ED1F6FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22ED1F710(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 168 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22ED1F778(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22ED1F778(a1);
    }
  }
  return v2;
}

void sub_22ED1F778(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  int v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  void **v16;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(char **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = &v3[168 * v4];
    v6 = v2;
    do
    {
      v7 = *(_OWORD *)v3;
      v8 = *((_OWORD *)v3 + 1);
      v9 = *((_OWORD *)v3 + 3);
      *(_OWORD *)(v6 + 32) = *((_OWORD *)v3 + 2);
      *(_OWORD *)(v6 + 48) = v9;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      *(_QWORD *)(v6 + 72) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 64) = 0;
      *(_OWORD *)(v6 + 64) = *((_OWORD *)v3 + 4);
      *(_QWORD *)(v6 + 80) = *((_QWORD *)v3 + 10);
      *((_QWORD *)v3 + 8) = 0;
      *((_QWORD *)v3 + 9) = 0;
      *((_QWORD *)v3 + 10) = 0;
      *(_OWORD *)(v6 + 88) = *(_OWORD *)(v3 + 88);
      v10 = *(_OWORD *)(v3 + 104);
      v11 = *(_OWORD *)(v3 + 120);
      v12 = *(_OWORD *)(v3 + 136);
      *(_OWORD *)(v6 + 152) = *(_OWORD *)(v3 + 152);
      *(_OWORD *)(v6 + 136) = v12;
      *(_OWORD *)(v6 + 120) = v11;
      *(_OWORD *)(v6 + 104) = v10;
      v3 += 168;
      v6 += 168;
    }
    while (v3 != v5);
    v3 = *(char **)a1;
    v13 = *(_DWORD *)(a1 + 8);
    if (v13)
    {
      v14 = v3 - 104;
      v15 = 168 * v13;
      do
      {
        v16 = (void **)&v14[v15];
        sub_22E6C60B8(&v16);
        v15 -= 168;
      }
      while (v15);
      v3 = *(char **)a1;
    }
  }
  if (v3 != (char *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22ED1F888(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  llvm::APInt *v38;
  unint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  __int128 v78;
  int v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 **v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t *v89;
  int v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  int v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  unsigned int v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  void *v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  char v130[8];
  uint64_t v131;
  _OWORD v132[2];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD v142[2];
  unint64_t v143;
  _BYTE v144[48];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;

  v9 = a4;
  *(_QWORD *)&v144[40] = 0;
  v142[0] = 4;
  v13 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)&v144[8] = 0;
  *(_QWORD *)&v144[16] = v13;
  *(_QWORD *)&v144[24] = a4;
  v143 = 0;
  *(_QWORD *)v144 = a3;
  v141 = a4;
  v14 = sub_22EF5C728(*((_QWORD *)a2 + 11), a4);
  v15 = v14;
  v16 = v9;
  if (v14)
  {
    v16 = v9;
    if ((*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 0x10) != 0)
    {
      v16 = v9;
      if (*(_BYTE *)(v14 + 16) == 4)
      {
        v16 = *(_QWORD *)(v14 + 32);
        v141 = v16;
      }
    }
  }
  sub_22EFFD954(a3);
  if (sub_22EE8B180((uint64_t)a2, v17, v16, 1, 0))
  {
    *(_DWORD *)a1 = 4;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_7:
    v18 = *(_OWORD *)&v144[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v144;
    *(_OWORD *)(a1 + 32) = v18;
    goto LABEL_8;
  }
  v19 = *(uint64_t **)(a3 + 16);
  v20 = v9 & 0xFFFFFFFFFFFFFFF0;
  if (((*(_QWORD *)(a3 + 24) - (_QWORD)v19) & 0x7FFFFFFF8) == 8)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v21 = *v19;
      v22 = *(_QWORD *)(*v19 + 8);
      if (*(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_17:
        sub_22ED06388(a1, a2, v21);
        goto LABEL_8;
      }
      sub_22EFFD954(a3);
      v24 = sub_22EAAB1B8((uint64_t)a2, v23, v22, v9);
      v20 = v9 & 0xFFFFFFFFFFFFFFF0;
      if (v24)
      {
        v21 = **(_QWORD **)(a3 + 16);
        goto LABEL_17;
      }
    }
    if (v15)
    {
      v25 = v20;
      if (!sub_22EC378D4(**(unsigned __int8 ***)(a3 + 16), v15)
        || (v20 = v25, v26 = *((_QWORD *)a2 + 9), (*(_BYTE *)(v26 + 104) & 0x20) != 0)
        && (*(_BYTE *)(v26 + 121) & 2) != 0)
      {
        v83 = *((_QWORD *)a2 + 11);
        DWORD2(v132[1]) = 0;
        LODWORD(v132[0]) = 1;
        *((_QWORD *)&v132[0] + 1) = 0;
        *(_QWORD *)&v132[1] = sub_22EF60188(v83, v9);
        *(_QWORD *)&v133 = 0;
        if (sub_22F335F3C())
        {
          v142[0] = 0;
          v84 = v143;
          *(_QWORD *)v144 = *(_QWORD *)v144 & 0xFFFFFFFC04000000 | 0x20000000;
          *(_QWORD *)&v144[8] = v9;
          *(_QWORD *)&v144[16] = v9;
          *(_QWORD *)&v144[24] = v9;
          *(_QWORD *)&v144[32] = v9;
          *(_QWORD *)&v144[40] = 0;
          *(_DWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = v84;
LABEL_30:
          v33 = *(_OWORD *)&v144[16];
          *(_OWORD *)(a1 + 16) = *(_OWORD *)v144;
          *(_OWORD *)(a1 + 32) = v33;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)&v144[32];
          *(_QWORD *)(a1 + 64) = v145;
          goto LABEL_8;
        }
        v20 = v25;
      }
    }
  }
  v27 = *(_QWORD *)v20;
  if (*(_QWORD *)v20 && *(_BYTE *)(v27 + 16) == 56)
    goto LABEL_28;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56)
    goto LABEL_31;
  v28 = a6;
  v29 = a7;
  v30 = a1;
  v31 = v20;
  v27 = sub_22F10CF48(v27);
  v20 = v31;
  a1 = v30;
  a7 = v29;
  a6 = v28;
  if (v27)
  {
LABEL_28:
    if (*(_DWORD *)(v27 + 20) != ((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3)
      || (*(_BYTE *)(*((_QWORD *)a2 + 9) + 133) & 2) == 0 && (*(_DWORD *)(v27 + 16) & 0x780000) == 0x80000)
    {
      v32 = v142[0];
      *(_DWORD *)a1 = v142[0];
      *(_QWORD *)(a1 + 8) = v143;
      switch(v32 & 0x7FFFFFFF)
      {
        case 0:
          goto LABEL_30;
        case 1:
          goto LABEL_205;
        case 2:
          goto LABEL_215;
        case 4:
          goto LABEL_7;
        default:
          goto LABEL_8;
      }
      goto LABEL_8;
    }
    v141 = *(_QWORD *)(v27 + 32);
    v34 = 1;
    if (v15)
    {
LABEL_35:
      v35 = *(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16);
      v36 = v35 >> 3;
      memset((char *)v132 + 8, 0, 20);
      *((_QWORD *)&v134 + 1) = 0;
      LODWORD(v132[0]) = 4;
      v133 = 0u;
      if (!v15)
      {
        v114 = 0;
        goto LABEL_99;
      }
      v141 = *(_QWORD *)(v15 + 32);
      if (*(_BYTE *)(v15 + 16) != 2)
      {
        if (!(_DWORD)v36)
        {
          if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
            free(*(void **)&v144[16]);
          v56 = *(_QWORD *)(a3 + 8);
          *(_DWORD *)&v144[8] = 5;
          *(_QWORD *)&v144[16] = v56;
          *(_QWORD *)&v144[24] = v9;
          v143 = v9;
          *(_QWORD *)v144 = a3;
          v57 = -2147483644;
          goto LABEL_96;
        }
        v44 = v35 >> 3;
        v45 = *((_QWORD *)a2 + 11);
        v46 = v35;
        v47 = sub_22EF67C8C(v45);
        v48 = sub_22EF5CDF0(v45, *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0));
        LODWORD(v120) = v48;
        if (v48 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v119);
          LODWORD(v36) = v44;
        }
        else
        {
          if (v48)
            v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
          else
            LODWORD(v49) = 0;
          LODWORD(v36) = v44;
          v119 = v49 & (v46 >> 3);
        }
        v9 = sub_22EF5FE30(*((_QWORD *)a2 + 11), v141, (const llvm::APInt *)&v119, 0, 0, 0);
        if (v120 >= 0x41 && v119)
          MEMORY[0x2348A0E84](v119, 0x1000C8000313F17);
        v114 = 0x80000000;
        v35 = v46;
        goto LABEL_99;
      }
      v117 = v35 >> 3;
      v37 = a1;
      v38 = (llvm::APInt *)(v15 + 40);
      v113 = v35;
      v39 = (v35 >> 3);
      v40 = *(_DWORD *)(v15 + 48);
      if (v40 >= 0x41)
      {
        v51 = (v35 >> 3);
        v52 = v40 - llvm::APInt::countLeadingZerosSlowCase(v38);
        a1 = v37;
        if (v52 >= 0x41)
        {
LABEL_59:
          v53 = *((_QWORD *)a2 + 11);
          sub_22EFFD9B4(a3);
          sub_22EFFD1B0((uint64_t)v130, v53, v54, 0, 0, v54);
          v131 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16392);
          sub_22ED1F888(&v119, a2, v130, v141, a5, a6, a7);
          if ((v132[0] & 0x7FFFFFFF) == 2 && (__int128 *)v133 != &v134)
            free((void *)v133);
          v55 = v119;
          LODWORD(v132[0]) = v119;
          *((_QWORD *)&v132[0] + 1) = v120;
          LODWORD(v36) = v117;
          switch(v119 & 0x7FFFFFFF)
          {
            case 0:
              v132[1] = v121;
              v133 = *(_OWORD *)v122;
              v134 = v123;
              *(_QWORD *)&v135 = v124;
              break;
            case 1:
              v138 = v127;
              v139 = v128;
              v140 = v129;
              v134 = v123;
              v135 = v124;
              v136 = v125;
              v137 = v126;
              v132[1] = v121;
              v133 = *(_OWORD *)v122;
              break;
            case 2:
              v132[1] = v121;
              *(_QWORD *)&v133 = &v134;
              *((_QWORD *)&v133 + 1) = 0x400000000;
              if (LODWORD(v122[1]))
              {
                sub_22E8BB370((uint64_t)&v133, (uint64_t)v122);
                v55 = v119;
              }
              break;
            case 3:
              break;
            case 4:
              v132[1] = v121;
              v133 = *(_OWORD *)v122;
              break;
            default:
              LODWORD(v36) = v117;
              break;
          }
          if ((v55 & 0x7FFFFFFF) == 2 && v122[0] != &v123)
            free(v122[0]);
          if ((v132[0] & 0x7FFFFFFF) == 4)
          {
            if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
              free(*(void **)&v144[16]);
            v42 = *(_QWORD *)(a3 + 8);
            v43 = 5;
            goto LABEL_95;
          }
          v114 = 0;
          v35 = v113;
LABEL_99:
          v70 = v142[0];
          v115 = a1;
          if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
          {
            v71 = v35;
            free(*(void **)&v144[16]);
            v35 = v71;
            v70 = v142[0];
          }
          v142[0] = v70 & 0x80000000;
          *(_QWORD *)v144 = *(_QWORD *)v144 & 0xFFFFFFFC04000000 | 0x20000000;
          *(_QWORD *)&v144[8] = v141;
          *(_QWORD *)&v144[16] = v141;
          *(_QWORD *)&v144[24] = v141;
          *(_QWORD *)&v144[32] = v141;
          *(_QWORD *)&v144[40] = 0;
          if ((_DWORD)v36)
          {
            v72 = 0;
            v73 = v35 & 0x7FFFFFFF8;
            while (1)
            {
              sub_22ED06388(&v119, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + v72));
              sub_22EFFD954(a3);
              if (sub_22ED0E7D4(a2, v74, (int *)&v119, (uint64_t)v142) == 1)
                break;
              v75 = v119;
LABEL_114:
              if ((v75 & 0x7FFFFFFF) == 2 && v122[0] != &v123)
                free(v122[0]);
              v72 += 8;
              if (v73 == v72)
                goto LABEL_122;
            }
            if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
              free(*(void **)&v144[16]);
            v75 = v119;
            v142[0] = v119;
            v143 = v120;
            v76 = v119;
            switch(v119 & 0x7FFFFFFF)
            {
              case 0:
                *(_OWORD *)v144 = v121;
                *(_OWORD *)&v144[16] = *(_OWORD *)v122;
                *(_OWORD *)&v144[32] = v123;
                *(_QWORD *)&v145 = v124;
                goto LABEL_112;
              case 1:
                v148 = v127;
                v149 = v128;
                v150 = v129;
                *(_OWORD *)&v144[32] = v123;
                v145 = v124;
                v146 = v125;
                v147 = v126;
                v76 = v119;
                *(_OWORD *)v144 = v121;
                *(_OWORD *)&v144[16] = *(_OWORD *)v122;
                goto LABEL_113;
              case 2:
                *(_OWORD *)v144 = v121;
                *(_QWORD *)&v144[16] = &v144[32];
                *(_QWORD *)&v144[24] = 0x400000000;
                v76 = v119;
                if (LODWORD(v122[1]))
                {
                  sub_22E8BB370((uint64_t)&v144[16], (uint64_t)v122);
                  v76 = v142[0];
                  v75 = v119;
                }
                goto LABEL_113;
              case 3:
                goto LABEL_113;
              case 4:
                *(_OWORD *)v144 = v121;
                *(_OWORD *)&v144[16] = *(_OWORD *)v122;
                goto LABEL_112;
              default:
LABEL_112:
                v76 = v119;
LABEL_113:
                if ((v76 & 0x7FFFFFFF) != 4)
                  goto LABEL_114;
                v143 = v9;
                v142[0] = v114 | 4;
                *(_DWORD *)v115 = v114 | 4;
                *(_QWORD *)(v115 + 8) = v9;
                v78 = *(_OWORD *)&v144[16];
                *(_OWORD *)(v115 + 16) = *(_OWORD *)v144;
                *(_OWORD *)(v115 + 32) = v78;
                if ((v75 & 0x7FFFFFFF) == 2 && v122[0] != &v123)
                  free(v122[0]);
                break;
            }
          }
          else
          {
LABEL_122:
            if ((v132[0] & 0x7FFFFFFF) != 4)
            {
              sub_22EFFD9B4(a3);
              if (sub_22ED0E7D4(a2, v77, (int *)v132, (uint64_t)v142) == 1)
              {
                if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
                  free(*(void **)&v144[16]);
                v142[0] = v132[0];
                v143 = *((_QWORD *)&v132[0] + 1);
                switch(v132[0] & 0x7FFFFFFF)
                {
                  case 0:
                    *(_OWORD *)v144 = v132[1];
                    *(_OWORD *)&v144[16] = v133;
                    *(_OWORD *)&v144[32] = v134;
                    *(_QWORD *)&v145 = v135;
                    break;
                  case 1:
                    v148 = v138;
                    v149 = v139;
                    v150 = v140;
                    *(_OWORD *)&v144[32] = v134;
                    v145 = v135;
                    v146 = v136;
                    v147 = v137;
                    *(_OWORD *)v144 = v132[1];
                    *(_OWORD *)&v144[16] = v133;
                    break;
                  case 2:
                    *(_OWORD *)v144 = v132[1];
                    *(_QWORD *)&v144[16] = &v144[32];
                    *(_QWORD *)&v144[24] = 0x400000000;
                    if (DWORD2(v133))
                      sub_22E8BB370((uint64_t)&v144[16], (uint64_t)&v133);
                    break;
                  case 4:
                    *(_OWORD *)v144 = v132[1];
                    *(_OWORD *)&v144[16] = v133;
                    break;
                  default:
                    break;
                }
              }
            }
            v143 = v9;
            v79 = v142[0] & 0x7FFFFFFF;
            v142[0] = v79 | v114;
            *(_DWORD *)v115 = v79 | v114;
            *(_QWORD *)(v115 + 8) = v9;
            switch(v79)
            {
              case 0:
                v80 = *(_OWORD *)&v144[16];
                *(_OWORD *)(v115 + 16) = *(_OWORD *)v144;
                *(_OWORD *)(v115 + 32) = v80;
                *(_OWORD *)(v115 + 48) = *(_OWORD *)&v144[32];
                *(_QWORD *)(v115 + 64) = v145;
                break;
              case 1:
                v102 = v149;
                *(_OWORD *)(v115 + 112) = v148;
                *(_OWORD *)(v115 + 128) = v102;
                *(_QWORD *)(v115 + 144) = v150;
                v103 = v145;
                *(_OWORD *)(v115 + 48) = *(_OWORD *)&v144[32];
                *(_OWORD *)(v115 + 64) = v103;
                v104 = v147;
                *(_OWORD *)(v115 + 80) = v146;
                *(_OWORD *)(v115 + 96) = v104;
                v105 = *(_OWORD *)&v144[16];
                *(_OWORD *)(v115 + 16) = *(_OWORD *)v144;
                *(_OWORD *)(v115 + 32) = v105;
                break;
              case 2:
                *(_QWORD *)(v115 + 32) = v115 + 48;
                *(_OWORD *)(v115 + 16) = *(_OWORD *)v144;
                *(_QWORD *)(v115 + 40) = 0x400000000;
                if (*(_DWORD *)&v144[24])
                  sub_22E8BB370(v115 + 32, (uint64_t)&v144[16]);
                break;
              case 4:
                v81 = *(_OWORD *)&v144[16];
                *(_OWORD *)(v115 + 16) = *(_OWORD *)v144;
                *(_OWORD *)(v115 + 32) = v81;
                break;
              default:
                goto LABEL_136;
            }
          }
          goto LABEL_136;
        }
        v41 = **(_QWORD ***)v38;
        v39 = v51;
        if ((unint64_t)v41 < v51)
        {
LABEL_39:
          if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
            free(*(void **)&v144[16]);
          v42 = *(_QWORD *)(a3 + 8);
          v43 = 6;
LABEL_95:
          *(_DWORD *)&v144[8] = v43;
          *(_QWORD *)&v144[16] = v42;
          *(_QWORD *)&v144[24] = v9;
          v143 = v9;
          *(_QWORD *)v144 = a3;
          v57 = 4;
LABEL_96:
          v142[0] = v57;
          *(_DWORD *)a1 = v57;
          *(_QWORD *)(a1 + 8) = v9;
          v69 = *(_OWORD *)&v144[16];
          *(_OWORD *)(a1 + 16) = *(_OWORD *)v144;
          *(_OWORD *)(a1 + 32) = v69;
LABEL_136:
          if ((v132[0] & 0x7FFFFFFF) == 2 && (__int128 *)v133 != &v134)
            free((void *)v133);
          goto LABEL_8;
        }
      }
      else
      {
        v41 = *(_QWORD **)v38;
        a1 = v37;
        if (*(_QWORD *)v38 < v39)
          goto LABEL_39;
      }
      if ((unint64_t)v41 <= v39)
      {
        v114 = 0;
        v35 = v113;
        LODWORD(v36) = v117;
        goto LABEL_99;
      }
      goto LABEL_59;
    }
  }
  else
  {
LABEL_31:
    v34 = 0;
    if (v15)
      goto LABEL_35;
  }
  v116 = (uint64_t *)v20;
  if ((v34 | sub_22EAC21FC(a2, v9, &v141)) == 1)
    goto LABEL_35;
  v50 = *v116;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
  {
    if (!sub_22F111060(v50))
    {
      sub_22ED1F2B4();
      goto LABEL_8;
    }
    v50 = *v116;
  }
  if (sub_22F111060(v50))
  {
    v99 = *((_QWORD *)a2 + 11);
    DWORD2(v132[1]) = 0;
    LODWORD(v132[0]) = 1;
    *((_QWORD *)&v132[0] + 1) = 0;
    *(_QWORD *)&v132[1] = sub_22EF60188(v99, v9);
    *(_QWORD *)&v133 = 0;
    v100 = sub_22F335958((uint64_t)a2, (uint64_t)v132, a3);
    v101 = v142[0];
    if (v100)
    {
      if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
      {
        free(*(void **)&v144[16]);
        v101 = v142[0];
      }
      v101 = v101 & 0x80000000 | 1;
      v142[0] = v101;
      memset(&v144[8], 0, 40);
      *(_QWORD *)v144 = *(_QWORD *)v144 & 0xFFFFFFFC04000000 | 0x20000000;
      *(_QWORD *)&v146 = v146 & 0xFFFFFFFC04000000 | 0x20000000;
      *((_QWORD *)&v146 + 1) = v9;
      *(_QWORD *)&v147 = v9;
      *((_QWORD *)&v147 + 1) = v9;
      v148 = v9;
      *((_QWORD *)&v149 + 1) = 0;
    }
    *(_DWORD *)a1 = v101;
    *(_QWORD *)(a1 + 8) = v143;
    switch(v101 & 0x7FFFFFFF)
    {
      case 0u:
        goto LABEL_30;
      case 1u:
LABEL_205:
        v107 = v149;
        *(_OWORD *)(a1 + 112) = v148;
        *(_OWORD *)(a1 + 128) = v107;
        *(_QWORD *)(a1 + 144) = v150;
        v108 = v145;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)&v144[32];
        *(_OWORD *)(a1 + 64) = v108;
        v109 = v147;
        *(_OWORD *)(a1 + 80) = v146;
        *(_OWORD *)(a1 + 96) = v109;
        v110 = *(_OWORD *)&v144[16];
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v144;
        *(_OWORD *)(a1 + 32) = v110;
        break;
      case 2u:
LABEL_215:
        *(_QWORD *)(a1 + 32) = a1 + 48;
        v112 = a1 + 32;
        *(_OWORD *)(v112 - 16) = *(_OWORD *)v144;
        *(_QWORD *)(v112 + 8) = 0x400000000;
        if (*(_DWORD *)&v144[24])
          sub_22E8BB370(v112, (uint64_t)&v144[16]);
        break;
      case 4u:
        goto LABEL_7;
      default:
        break;
    }
  }
  else
  {
    v58 = *v116;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v59 = *(_DWORD *)(v58 + 16);
      if ((v59 & 0xFE) != 0x28)
      {
        v58 = sub_22F10CF48(v58);
        v59 = *(_DWORD *)(v58 + 16);
      }
      if ((v59 & 0x100000) != 0)
      {
        do
        {
          while (1)
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v58 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v58)
              break;
            v60 = *(_DWORD *)(v58 + 16);
            if ((v60 & 0xFE) != 0x28)
              break;
            if ((v60 & 0x100000) == 0)
              goto LABEL_78;
          }
          v58 = sub_22F10CF48(v58);
        }
        while ((*(_DWORD *)(v58 + 16) & 0x100000) != 0);
      }
LABEL_78:
      v61 = *(_QWORD *)(v58 + 32);
      v62 = *(unint64_t **)(a3 + 16);
      if (((*(_QWORD *)(a3 + 24) - (_QWORD)v62) & 0x7FFFFFFF8) == 8)
      {
        v63 = *v62;
        v64 = *(_QWORD *)(*v62 + 8);
        if ((v64 & 7 | *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 8)) == *(_QWORD *)(*((_QWORD *)a2 + 11) + 16840))
        {
          v65 = sub_22ED13340(a2, v63, v9, 0, v132, 0);
          if (v65)
            v64 = *(_QWORD *)(v65 + 48);
        }
        sub_22EFFD954(a3);
        if (sub_22ED0169C((uint64_t)a2, v66, v61, v64, 0))
        {
          sub_22EFFD954(a3);
          sub_22ED20D9C(a1, (uint64_t)a2, v63, v9, v67, a5);
          goto LABEL_8;
        }
      }
      sub_22ED1F888(v132, a2, a3, v61, a5, a6, a7);
      if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
        free(*(void **)&v144[16]);
      v82 = v132[0];
      v142[0] = v132[0];
      v143 = *((_QWORD *)&v132[0] + 1);
      switch(v132[0] & 0x7FFFFFFF)
      {
        case 0:
          *(_OWORD *)v144 = v132[1];
          *(_OWORD *)&v144[16] = v133;
          *(_OWORD *)&v144[32] = v134;
          *(_QWORD *)&v145 = v135;
          break;
        case 1:
          v148 = v138;
          v149 = v139;
          v150 = v140;
          *(_OWORD *)&v144[32] = v134;
          v145 = v135;
          v146 = v136;
          v147 = v137;
          *(_OWORD *)v144 = v132[1];
          *(_OWORD *)&v144[16] = v133;
          break;
        case 2:
          *(_OWORD *)v144 = v132[1];
          *(_QWORD *)&v144[16] = &v144[32];
          *(_QWORD *)&v144[24] = 0x400000000;
          if (DWORD2(v133))
          {
            sub_22E8BB370((uint64_t)&v144[16], (uint64_t)&v133);
            v82 = v132[0];
          }
          break;
        case 4:
          *(_OWORD *)v144 = v132[1];
          *(_OWORD *)&v144[16] = v133;
          break;
        default:
          break;
      }
      if ((v82 & 0x7FFFFFFF) == 2 && (__int128 *)v133 != &v134)
        free((void *)v133);
      v88 = v142[0];
      if (v142[0] > 1)
      {
        v89 = v116;
        if (v142[0] != 4 && v142[0] != 2)
        {
LABEL_172:
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41)
          {
            v92 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF0) + 8);
            goto LABEL_174;
          }
          if ((v61 & 1) != 0)
          {
            if ((v61 & 4) != 0)
              goto LABEL_200;
            v92 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF0) + 8);
          }
          else
          {
            v92 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF0) + 8);
            if ((v92 & 1) == 0 || (v61 & 4) != 0)
              goto LABEL_200;
          }
          if ((v92 & 4) == 0)
          {
LABEL_174:
            if ((v92 & 8) != 0)
            {
              v93 = *(_DWORD *)((v92 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              v94 = v93 > 0x1A;
              v95 = (1 << v93) & 0x7000021;
              if (v94 || v95 == 0)
              {
                if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
                {
                  free(*(void **)&v144[16]);
                  v88 = v142[0];
                }
                v142[0] = v88 & 0x80000000 | 4;
                v111 = *(_QWORD *)(a3 + 8);
                *(_DWORD *)&v144[8] = 0;
                *(_QWORD *)&v144[16] = v111;
                *(_QWORD *)&v144[24] = v9;
                *(_QWORD *)v144 = a3;
                *(_DWORD *)a1 = v142[0];
                *(_QWORD *)(a1 + 8) = v143;
                goto LABEL_7;
              }
            }
            v97 = 20;
            if ((v142[0] & 0x7FFFFFFF) == 0)
              v97 = 4;
            v98 = *(_QWORD *)&v142[v97] | 0x8000000;
            *(_QWORD *)&v142[v97] = v98;
            *(_QWORD *)&v142[v97] = v98 & 0xFFFFFFFC1FFFFFFFLL | ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v116 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                              + 16) == 40) << 29) | 0x80000000;
            goto LABEL_204;
          }
LABEL_200:
          if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
          {
            free(*(void **)&v144[16]);
            v88 = v142[0];
          }
          v88 = v88 & 0x80000000 | 4;
          v142[0] = v88;
          v106 = *(_QWORD *)(a3 + 8);
          *(_DWORD *)&v144[8] = 3;
          *(_QWORD *)&v144[16] = v106;
          *(_QWORD *)&v144[24] = v9;
          *(_QWORD *)v144 = a3;
LABEL_204:
          *(_DWORD *)a1 = v88;
          *(_QWORD *)(a1 + 8) = v143;
          switch(v88 & 0x7FFFFFFF)
          {
            case 0u:
              goto LABEL_30;
            case 1u:
              goto LABEL_205;
            case 2u:
              goto LABEL_215;
            case 4u:
              goto LABEL_7;
            default:
              goto LABEL_8;
          }
          goto LABEL_8;
        }
      }
      else
      {
        v89 = v116;
        if (v142[0] != -2147483646 && v142[0] != -2147483644)
          goto LABEL_172;
      }
      *(_DWORD *)a1 = v142[0];
      *(_QWORD *)(a1 + 8) = v143;
      switch(v88 & 0x7FFFFFFF)
      {
        case 0u:
          goto LABEL_30;
        case 1u:
          goto LABEL_205;
        case 2u:
          goto LABEL_215;
        case 4u:
          goto LABEL_7;
        default:
          break;
      }
    }
    else if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v68 = v142[0];
      *(_DWORD *)a1 = v142[0];
      *(_QWORD *)(a1 + 8) = v143;
      switch(v68 & 0x7FFFFFFF)
      {
        case 0:
          goto LABEL_30;
        case 1:
          goto LABEL_205;
        case 2:
          goto LABEL_215;
        case 4:
          goto LABEL_7;
        default:
          break;
      }
    }
    else
    {
      v85 = *(unsigned __int8 ***)(a3 + 16);
      v86 = (*(_QWORD *)(a3 + 24) - (_QWORD)v85) >> 3;
      if ((_DWORD)v86)
      {
        if ((_DWORD)v86 == 1 && **v85 != 180)
        {
          sub_22ED06388(v132, a2, *v85);
          if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
            free(*(void **)&v144[16]);
          v87 = v132[0];
          v142[0] = v132[0];
          v143 = *((_QWORD *)&v132[0] + 1);
          switch(v132[0] & 0x7FFFFFFF)
          {
            case 0:
              *(_OWORD *)v144 = v132[1];
              *(_OWORD *)&v144[16] = v133;
              *(_OWORD *)&v144[32] = v134;
              *(_QWORD *)&v145 = v135;
              break;
            case 1:
              v148 = v138;
              v149 = v139;
              v150 = v140;
              *(_OWORD *)&v144[32] = v134;
              v145 = v135;
              v146 = v136;
              v147 = v137;
              *(_OWORD *)v144 = v132[1];
              *(_OWORD *)&v144[16] = v133;
              break;
            case 2:
              *(_OWORD *)v144 = v132[1];
              *(_QWORD *)&v144[16] = &v144[32];
              *(_QWORD *)&v144[24] = 0x400000000;
              if (DWORD2(v133))
              {
                sub_22E8BB370((uint64_t)&v144[16], (uint64_t)&v133);
                v87 = v132[0];
              }
              break;
            case 4:
              *(_OWORD *)v144 = v132[1];
              *(_OWORD *)&v144[16] = v133;
              break;
            default:
              break;
          }
          if ((v87 & 0x7FFFFFFF) == 2 && (__int128 *)v133 != &v134)
            free((void *)v133);
        }
      }
      else
      {
        v90 = v142[0];
        if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
        {
          free(*(void **)&v144[16]);
          v90 = v142[0];
        }
        v142[0] = v90 & 0x80000000;
        *(_QWORD *)v144 = *(_QWORD *)v144 & 0xFFFFFFFC04000000 | 0x20000000;
        *(_QWORD *)&v144[8] = v9;
        *(_QWORD *)&v144[16] = v9;
        *(_QWORD *)&v144[24] = v9;
        *(_QWORD *)&v144[32] = v9;
        *(_QWORD *)&v144[40] = 0;
      }
      v91 = v142[0];
      *(_DWORD *)a1 = v142[0];
      *(_QWORD *)(a1 + 8) = v143;
      switch(v91 & 0x7FFFFFFF)
      {
        case 0:
          goto LABEL_30;
        case 1:
          goto LABEL_205;
        case 2:
          goto LABEL_215;
        case 4:
          goto LABEL_7;
        default:
          break;
      }
    }
  }
LABEL_8:
  if ((v142[0] & 0x7FFFFFFF) == 2 && *(_BYTE **)&v144[16] != &v144[32])
    free(*(void **)&v144[16]);
}

void sub_22ED20D9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v70[2];
  __int128 v71;
  void *v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unsigned int *v80[6];
  int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;

  *(_QWORD *)(a1 + 16) = a3;
  v10 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)a1 = 4;
  v11 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = a1 + 32;
  *(_QWORD *)(a1 + 40) = a4;
  v13 = a4 & 0xFFFFFFFFFFFFFFF0;
  v14 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || (v15 = *(_DWORD *)(v14 + 16), (v15 & 0xFE) != 0x28))
  {
    v14 = sub_22F10CF48(v14);
    v15 = *(_DWORD *)(v14 + 16);
  }
  if ((v15 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v14)
          break;
        v16 = *(_DWORD *)(v14 + 16);
        if ((v16 & 0xFE) != 0x28)
          break;
        if ((v16 & 0x100000) == 0)
          goto LABEL_10;
      }
      v14 = sub_22F10CF48(v14);
    }
    while ((*(_DWORD *)(v14 + 16) & 0x100000) != 0);
  }
LABEL_10:
  v17 = *(_QWORD *)(v14 + 32);
  v18 = *(_QWORD *)(a3 + 8);
  v84 = v18;
  v85 = v17;
  v19 = *(_QWORD *)(a2 + 88);
  if ((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) | v18 & 7) == *(_QWORD *)(v19 + 16840))
  {
    v20 = sub_22ED13340((unsigned int *)a2, a3, a4, 0, v70, 0);
    if (v20)
    {
      v18 = *(_QWORD *)(v20 + 48);
      v84 = v18;
    }
    else
    {
      v18 = v84;
    }
    v19 = *(_QWORD *)(a2 + 88);
    v17 = v85;
  }
  v83 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41;
  v21 = sub_22F003E64(a3, v19, 0);
  v81 = 0;
  v82 = v21;
  v22 = a5;
  v23 = sub_22ED0169C(a2, a5, v17, v18, &v81);
  v24 = v23;
  v80[0] = (unsigned int *)a1;
  v80[1] = (unsigned int *)&v81;
  v80[2] = (unsigned int *)&v84;
  v80[3] = (unsigned int *)&v85;
  v80[4] = (unsigned int *)&v83;
  v80[5] = (unsigned int *)&v82;
  if (v83)
    goto LABEL_16;
  if (!(_WORD)v82 && v23 == 2)
  {
    v32 = 1;
    goto LABEL_54;
  }
  if ((a6 & 1) == 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
    && (sub_22EE8B180(a2, v22, v84, 1, 0) & 1) == 0
    && !v24)
  {
    sub_22ED217E4();
    if ((v33 & 1) != 0)
      return;
  }
  if (v83)
    goto LABEL_16;
  if ((v85 & 1) != 0)
  {
    if ((v85 & 4) != 0)
      goto LABEL_85;
    v34 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 8);
    goto LABEL_84;
  }
  if ((v85 & 4) == 0)
  {
    v34 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v34 & 1) != 0)
    {
LABEL_84:
      if ((v34 & 4) != 0)
        goto LABEL_85;
LABEL_16:
      if (v24 != 2)
      {
        v26 = v24 == 0;
        if (!a6 && !v24)
        {
          v26 = 1;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 45
            && (sub_22EE8B180(a2, v22, v84, 1, 0) & 1) == 0)
          {
            sub_22ED217E4();
            if (v27)
            {
              v28 = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 & 0x7FFFFFFF) == 1 && v83 && *(_BYTE *)(a1 + 80) == 1)
              {
LABEL_103:
                *(_DWORD *)a1 = v28 & 0x80000000 | 4;
                v48 = *(_QWORD *)(a3 + 8);
                *(_DWORD *)(a1 + 24) = 0;
LABEL_109:
                *(_QWORD *)(a1 + 32) = v48;
                *(_QWORD *)(a1 + 40) = a4;
                *(_QWORD *)(a1 + 16) = a3;
                return;
              }
              return;
            }
          }
        }
        goto LABEL_31;
      }
      if ((_WORD)v82)
      {
        if ((unsigned __int16)v82 != 1)
        {
          v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
          if (v25 != 45 && (v25 & 0xFEu) - 2 >= 4)
            goto LABEL_21;
        }
      }
      else if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                 + 16)
              - 25 > 1)
      {
LABEL_21:
        v26 = 0;
LABEL_31:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 >= 2)
        {
          if (v24 != 1)
            goto LABEL_63;
          v29 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v29 & 8) != 0)
          {
            v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v30 = 0;
            v31 = 0;
          }
          v35 = v30 | v31 | (v29 | v85) & 7;
          v70[0] = v30 | v31 | (v29 | v85) & 7;
          v36 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v36 & 8) != 0)
          {
            v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v37 = 0;
            v38 = 0;
          }
          LODWORD(v70[0]) = v35 & 0xFFFFFE07;
          if (sub_22E95F24C((unsigned int *)v70, v37 | v38 & 0xFFFFFFFFFFFFFE07 | (v36 | v84) & 7))
          {
LABEL_63:
            if ((a6 & v26) != 1
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) != 45
              && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) != 45)
            {
              if (!v24 || !v83 || (unsigned __int16)sub_22F003E64(a3, *(_QWORD *)(a2 + 88), 0))
              {
                sub_22ECFA94C(a2, a3, v85, 0, 0, 0, (uint64_t)v70, 0, 0);
                if ((*(_DWORD *)a1 & 0x7FFFFFFF) == 2)
                {
                  v39 = *(void **)(a1 + 32);
                  if (v39 != (void *)(a1 + 48))
                    free(v39);
                }
                v40 = v70[0];
                *(_DWORD *)a1 = v70[0];
                *(_QWORD *)(a1 + 8) = v70[1];
                switch(v40 & 0x7FFFFFFF)
                {
                  case 0:
                    v41 = *(_OWORD *)v72;
                    *(_OWORD *)v10 = v71;
                    *(_OWORD *)(v10 + 16) = v41;
                    *(_OWORD *)(v10 + 32) = v73;
                    *(_QWORD *)(v10 + 48) = v74;
                    break;
                  case 1:
                    v64 = v78;
                    *(_OWORD *)(v10 + 96) = v77;
                    *(_OWORD *)(v10 + 112) = v64;
                    *(_QWORD *)(v10 + 128) = v79;
                    v65 = v74;
                    *(_OWORD *)(v10 + 32) = v73;
                    *(_OWORD *)(v10 + 48) = v65;
                    v66 = v76;
                    *(_OWORD *)(v10 + 64) = v75;
                    *(_OWORD *)(v10 + 80) = v66;
                    v67 = *(_OWORD *)v72;
                    *(_OWORD *)v10 = v71;
                    *(_OWORD *)(v10 + 16) = v67;
                    break;
                  case 2:
                    *(_OWORD *)(a1 + 16) = v71;
                    *(_QWORD *)(a1 + 32) = a1 + 48;
                    *(_QWORD *)(a1 + 40) = 0x400000000;
                    if (LODWORD(v72[1]))
                    {
                      sub_22E8BB370(v12, (uint64_t)v72);
                      v40 = v70[0];
                    }
                    break;
                  case 4:
                    v42 = *(_OWORD *)v72;
                    *(_OWORD *)v10 = v71;
                    *(_OWORD *)(v10 + 16) = v42;
                    break;
                  default:
                    break;
                }
                if ((v40 & 0x7FFFFFFF) == 2 && v72[0] != &v73)
                  free(v72[0]);
                v43 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v43 & 8) != 0)
                {
                  v44 = *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
                  if (v44 > 0x1A || ((1 << v44) & 0x7000021) == 0)
                    goto LABEL_100;
                }
                v45 = *(_DWORD *)a1 & 0x7FFFFFFF;
                if (v45 != 1)
                {
                  if (!v45)
                    *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFC1FFFFFFFLL | ((unint64_t)!v83 << 29) | 0x88000000;
                  return;
                }
                v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) & 0xFFFFFFFFFFFFFFF0);
                if (!v50 || *(unsigned __int8 *)(v50 + 16) - 27 <= 0xFFFFFFFD)
                  v50 = sub_22F10CF48(v50);
                v51 = *(_QWORD *)(*(_QWORD *)(v50 + 24) & 0xFFFFFFFFFFFFFFF0);
                if (!v51 || *(_BYTE *)(v51 + 16) != 40)
                {
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40)
                  {
                    v61 = *(_QWORD *)(a1 + 80);
                    v55 = (uint64_t *)(a1 + 80);
                    v62 = v61 & 0xFFFFFFFC17FFFFFFLL;
                    v63 = 0x8000000;
                    if (!v83)
                      v63 = 671088640;
                    v59 = v63 | v62;
                    goto LABEL_117;
                  }
                  v51 = sub_22F10CF48(v51);
                }
                if (v83 && v51)
                {
LABEL_100:
                  v28 = *(_DWORD *)a1;
                  if ((*(_DWORD *)a1 & 0x7FFFFFFF) == 2)
                  {
                    v52 = *(void **)(a1 + 32);
                    if (v52 != (void *)(a1 + 48))
                    {
                      free(v52);
                      v28 = *(_DWORD *)a1;
                    }
                  }
                  goto LABEL_103;
                }
                v56 = *(_QWORD *)(a1 + 80);
                v55 = (uint64_t *)(a1 + 80);
                v57 = v56 & 0xFFFFFFFC1FFFFFFFLL;
                v58 = 0x8000000;
                if (!v83)
                  v58 = 671088640;
                v59 = v57 | v58;
                if (v51)
                {
                  v60 = 0;
LABEL_118:
                  *v55 = v60 | v59;
                  return;
                }
LABEL_117:
                v60 = 0x80000000;
                goto LABEL_118;
              }
              v53 = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 & 0x7FFFFFFF) == 2)
              {
                v54 = *(void **)(a1 + 32);
                if (v54 != (void *)(a1 + 48))
                {
                  free(v54);
                  v53 = *(_DWORD *)a1;
                }
              }
              *(_DWORD *)a1 = v53 & 0x80000000 | 4;
              v48 = *(_QWORD *)(a3 + 8);
              v49 = 4;
LABEL_108:
              *(_DWORD *)(a1 + 24) = v49;
              goto LABEL_109;
            }
          }
        }
        return;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 2) != 0)
        v32 = 1;
      else
        v32 = (unsigned __int16)v82 <= 1u
           && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16) != 45;
LABEL_54:
      sub_22ED2161C(v80, v32);
      return;
    }
  }
LABEL_85:
  if ((_WORD)v82 && v24)
  {
    v46 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x7FFFFFFF) == 2)
    {
      v47 = *(void **)(a1 + 32);
      if (v47 != (void *)(a1 + 48))
      {
        free(v47);
        v46 = *(_DWORD *)a1;
      }
    }
    *(_DWORD *)a1 = v46 & 0x80000000 | 4;
    v48 = *(_QWORD *)(a3 + 8);
    v49 = 3;
    goto LABEL_108;
  }
}

void sub_22ED2161C(unsigned int **a1, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  int v7;
  char v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = **a1;
  if ((v5 & 0x7FFFFFFF) == 2)
  {
    v6 = (unsigned int *)*((_QWORD *)v4 + 4);
    if (v6 != v4 + 12)
    {
      free(v6);
      v5 = *v4;
    }
  }
  *v4 = v5 & 0x80000000;
  *((_QWORD *)*a1 + 2) &= 0xFFFFFFFFFFFFFF00;
  v7 = *a1[1];
  if ((v7 & 8) != 0)
    v8 = 17;
  else
    v8 = (unsigned __int16)(((_WORD)v7 << 8) & 0x1000) >> 8;
  *((_BYTE *)*a1 + 17) = v8;
  v9 = 5;
  if ((*a1[1] & 2) == 0)
    v9 = 0;
  *((_BYTE *)*a1 + 18) = v9;
  v10 = *a1;
  v11 = *(_QWORD *)a1[2];
  *((_QWORD *)v10 + 3) = v11;
  *((_QWORD *)v10 + 4) = v11;
  *((_QWORD *)*a1 + 5) = *(_QWORD *)a1[3];
  *((_QWORD *)*a1 + 6) = *(_QWORD *)a1[3];
  *((_QWORD *)*a1 + 2) |= 0x8000000uLL;
  v12 = 0x10000000;
  if (!a2)
    v12 = 0;
  *((_QWORD *)*a1 + 2) = *((_QWORD *)*a1 + 2) & 0xFFFFFFFFEFFFFFFFLL | v12;
  *((_QWORD *)*a1 + 2) = *((_QWORD *)*a1 + 2) & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(*(_BYTE *)a1[4] == 0) << 29);
  *((_QWORD *)*a1 + 2) = *((_QWORD *)*a1 + 2) & 0xFFFFFFFFBFFFFFFFLL | ((unint64_t)(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[2] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                                                                                         - 25 < 2) << 30);
  *((_QWORD *)*a1 + 2) = *((_QWORD *)*a1 + 2) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)(*(_WORD *)a1[5] != 0) << 31);
  *((_QWORD *)*a1 + 2) &= ~0x100000000uLL;
  *((_QWORD *)*a1 + 2) = *((_QWORD *)*a1 + 2) & 0xFFFFFFFDFFFFFFFFLL | ((((unint64_t)(*a1[1] & 0x20) >> 5) & 1) << 33);
  *((_QWORD *)*a1 + 7) = 0;
  *((_QWORD *)*a1 + 2) &= ~0x1000000uLL;
}

void sub_22ED217E4()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  char *v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51[2];
  _QWORD v52[339];
  int v53;
  _OWORD v54[9];
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[6];
  _QWORD v58[2];
  unsigned int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (_QWORD *)v0;
  v64 = *MEMORY[0x24BDAC8D0];
  v13 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 24));
  v51[0] = (uint64_t)v52;
  v48 = v8;
  v51[1] = 0x1000000000;
  v52[336] = v54;
  v52[337] = v54;
  v52[338] = 16;
  v53 = 0;
  v54[8] = 0u;
  v55 = v57;
  v56 = 0x400000000;
  v57[4] = v58;
  v58[0] = 0;
  v57[5] = 0;
  v58[1] = 1;
  v59 = v8;
  v60 = 2;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v14 = sub_22EFD4DF4(v13);
  if ((uint64_t *)v14 == v15)
  {
LABEL_89:
    v50 = 0;
    v46 = (char *)sub_22ED21D74 + 4 * byte_22F495E83[sub_22ED03FCC(v51, v11, v48, &v50)];
    __asm { BR              X10 }
  }
  v17 = (uint64_t *)v14;
  v18 = v15;
  v49 = v10 & 0xFFFFFFFFFFFFFFF0;
  v47 = v2;
  while (1)
  {
    v19 = *v17;
    v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = *(_DWORD *)(v20 + 28);
    if ((v21 & 0x7E) == 0x2E)
    {
      v20 = *(_QWORD *)(v20 + 64);
      v21 = *(_DWORD *)(v20 + 28);
    }
    v22 = (v21 & 0x7F) == 0x1D ? (uint64_t *)v20 : 0;
    if (v22)
      break;
    if ((v4 & 1) == 0)
      goto LABEL_27;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 41)
    {
LABEL_49:
      v32 = *(_QWORD *)(*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v32)
        v33 = *(unsigned __int8 *)(v32 + 16) - 27 > 0xFFFFFFFD;
      else
        v33 = 0;
      if (!v33)
        v32 = sub_22F10CF48(v32);
      v34 = *(_QWORD *)(v32 + 24);
      v35 = (unint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0);
      v36 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
      if (v36 && (v37 = *(_DWORD *)(v36 + 16), (v37 & 0xFE) == 0x28))
      {
LABEL_72:
        if ((v37 & 0x100000) != 0)
        {
          do
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v36)
            {
              v44 = *(_DWORD *)(v36 + 16);
              if ((v44 & 0xFE) == 0x28)
                continue;
            }
            v36 = sub_22F10CF48(v36);
            v44 = *(_DWORD *)(v36 + 16);
          }
          while ((v44 & 0x100000) != 0);
        }
        v34 = *(_QWORD *)(v36 + 32);
        v35 = (unint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0);
      }
      else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v36 = sub_22F10CF48(v36);
        if (v36)
        {
          v37 = *(_DWORD *)(v36 + 16);
          goto LABEL_72;
        }
      }
      v38 = *v35;
      if ((*(_BYTE *)(v38 + 8) & 0xF) != 0)
        v38 = (unint64_t)sub_22F10D2BC(v34);
      v2 = v47;
      v39 = *(_QWORD *)v49;
      if (!*(_QWORD *)v49 || (v40 = *(_DWORD *)(v39 + 16), (v40 & 0xFE) != 0x28))
      {
        v41 = v10 & 0xFFFFFFFFFFFFFFF0;
        v42 = v10;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        {
LABEL_62:
          v43 = *(_QWORD *)v41;
          if ((*(_BYTE *)(*(_QWORD *)v41 + 8) & 0xF) != 0)
            v43 = (unint64_t)sub_22F10D2BC(v42);
          if (!sub_22ED0169C((uint64_t)v11, v48, v38 & 0xFFFFFFFFFFFFFFF0, v43 & 0xFFFFFFFFFFFFFFF0, 0))goto LABEL_67;
          goto LABEL_65;
        }
        v39 = sub_22F10CF48(v39);
        if (!v39)
        {
          v41 = v10 & 0xFFFFFFFFFFFFFFF0;
          v42 = v10;
          v2 = v47;
          goto LABEL_62;
        }
        v40 = *(_DWORD *)(v39 + 16);
        v2 = v47;
      }
      if ((v40 & 0x100000) != 0)
      {
        do
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v39 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v39 || (v45 = *(_DWORD *)(v39 + 16), (v45 & 0xFE) != 0x28))
          {
            v39 = sub_22F10CF48(v39);
            v45 = *(_DWORD *)(v39 + 16);
          }
          v2 = v47;
        }
        while ((v45 & 0x100000) != 0);
      }
      v42 = *(_QWORD *)(v39 + 32);
      v41 = v42 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_62;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v23)
      v24 = *(unsigned __int8 *)(v23 + 16) - 27 > 0xFFFFFFFD;
    else
      v24 = 0;
    if (!v24)
      v23 = sub_22F10CF48(v23);
    v25 = *(_QWORD *)(*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFF0);
    if (v25 && (v26 = *(_DWORD *)(v25 + 16), v26 == 40))
    {
      if ((v26 & 0x100000) != 0)
      {
        do
        {
LABEL_21:
          while (1)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v25)
              break;
            v27 = *(_DWORD *)(v25 + 16);
            if ((v27 & 0xFE) != 0x28)
              break;
            if ((v27 & 0x100000) == 0)
              goto LABEL_48;
          }
          v25 = sub_22F10CF48(v25);
        }
        while ((*(_DWORD *)(v25 + 16) & 0x100000) != 0);
      }
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40)
        goto LABEL_49;
      v25 = sub_22F10CF48(v25);
      if (!v25)
        goto LABEL_49;
      if ((*(_DWORD *)(v25 + 16) & 0x100000) != 0)
        goto LABEL_21;
    }
LABEL_48:
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
      goto LABEL_49;
LABEL_67:
    if (++v17 == v18)
      goto LABEL_89;
  }
  if ((v4 & 1) == 0)
  {
    v20 = v22[6];
LABEL_27:
    v28 = *(_QWORD *)(*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v28)
      v29 = *(unsigned __int8 *)(v28 + 16) - 27 > 0xFFFFFFFD;
    else
      v29 = 0;
    if (!v29)
      v28 = sub_22F10CF48(v28);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 24) & 0xFFFFFFFFFFFFFFF0);
    if (!v30 || (*(_DWORD *)(v30 + 16) & 0xFE) != 0x28)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_67;
      v30 = sub_22F10CF48(v30);
      if (!v30)
        goto LABEL_67;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40)
    {
      if ((*(_BYTE *)(v30 + 18) & 0x10) != 0)
      {
        do
        {
          while (1)
          {
            v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v30)
              break;
            v31 = *(_DWORD *)(v30 + 16);
            if ((v31 & 0xFE) != 0x28)
              break;
            if ((v31 & 0x100000) == 0)
              goto LABEL_43;
          }
          v30 = sub_22F10CF48(v30);
        }
        while ((*(_DWORD *)(v30 + 16) & 0x100000) != 0);
      }
LABEL_43:
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 > 1)
        goto LABEL_67;
    }
LABEL_65:
    v19 = *v17;
    if (!v22)
    {
      sub_22ED08B24((uint64_t)v11, (uint64_t *)v20, v19, v16, v6, v10, (uint64_t)v51, 0, v2, 0, 1);
      goto LABEL_67;
    }
  }
  sub_22ED096FC((uint64_t)v11, v22, v19, v16, v6, v10, (uint64_t)v51, 0, v2, 1);
  goto LABEL_67;
}

uint64_t sub_22ED21D74()
{
  unsigned int v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v14 + 115) & 0x10) != 0)
  {
    v2 = (unsigned int *)v13;
    v3 = *v13;
    if ((*v13 & 0x7FFFFFFF) == 2)
    {
      v4 = (int *)*((_QWORD *)v13 + 4);
      if (v4 != v13 + 12)
      {
        free(v4);
        v2 = (unsigned int *)v13;
        v3 = *v13;
      }
    }
    *v2 = v3 & 0x80000000 | 1;
    v5 = *(_QWORD *)(v14 + 48);
    v6 = *(_OWORD *)(v5 + 16);
    v7 = *(_OWORD *)(v5 + 32);
    v8 = *(_OWORD *)(v5 + 48);
    *((_QWORD *)v2 + 8) = *(_QWORD *)(v5 + 64);
    *((_OWORD *)v2 + 2) = v7;
    *((_OWORD *)v2 + 3) = v8;
    *((_OWORD *)v2 + 1) = v6;
    v9 = *(_OWORD *)(v14 + 112);
    v10 = *(_OWORD *)(v14 + 128);
    v11 = *(_OWORD *)(v14 + 144);
    *((_QWORD *)v2 + 16) = *(_QWORD *)(v14 + 160);
    *((_OWORD *)v2 + 6) = v10;
    *((_OWORD *)v2 + 7) = v11;
    *((_OWORD *)v2 + 5) = v9;
    LOBYTE(v5) = v2[18] & 0xFD | (2 * (v0 > 1));
    *((_BYTE *)v2 + 72) = v5;
    *((_QWORD *)v2 + 17) = *(_QWORD *)v14;
    *((_QWORD *)v2 + 18) = *(_QWORD *)(v14 + 8);
    *((_BYTE *)v2 + 72) = v5 & 0xFE;
    v1 = 1;
  }
  else
  {
    v1 = 0;
  }
  sub_22E9DC79C(&v15);
  return v1;
}

BOOL sub_22ED21F34(uint64_t a1, const void **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  const void *v6;
  unsigned int v7;
  uint64_t v9;

  sub_22E3BA850(a1, *a2);
  v5 = v4;
  if (v4)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 104);
    if (v7 >= *(_DWORD *)(a1 + 108))
    {
      v9 = v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v9;
      v7 = *(_DWORD *)(a1 + 104);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 104);
  }
  return v5 != 0;
}

uint64_t sub_22ED21FBC(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EF5F8C4(*(_QWORD *)(*a1 + 88), a2, 1);
  v10 = *a1;
  v9 = a1[1];
  v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16480);
  v14[0] = v8;
  v14[1] = v11;
  result = sub_22ED0A07C(v10, v14, v9, a1[2], a1[8], 0, 0);
  if (a3)
  {
    v14[0] = sub_22EF5F8C4(*(_QWORD *)(*a1 + 88), a2 | 4, 1);
    result = sub_22ED0A07C(*a1, v14, a1[1], a1[2], a1[8], 0, 0);
  }
  if (a4)
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if ((v13 == 39 || v13 == 32) && (a2 & 2) == 0 && (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) == 0)
    {
      v14[0] = sub_22EF5F8C4(*(_QWORD *)(*a1 + 88), a2 | 2, 1);
      result = sub_22ED0A07C(*a1, v14, a1[1], a1[2], a1[8], 0, 0);
      if (a3)
      {
        v14[0] = sub_22EF5F8C4(*(_QWORD *)(*a1 + 88), a2 | 6, 1);
        return sub_22ED0A07C(*a1, v14, a1[1], a1[2], a1[8], 0, 0);
      }
    }
  }
  return result;
}

uint64_t sub_22ED22138(uint64_t a1, int a2, unint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  if (a2)
  {
    v8 = ((a4 >> 9) ^ a4 | ((unint64_t)((a3 >> 9) ^ a3) << 32))
       + ~((unint64_t)((a4 >> 9) ^ a4) << 32);
    v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    v11 = a2 - 1;
    v12 = (a2 - 1) & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
    v5 = (_QWORD *)(a1 + 16 * v12);
    v13 = *v5;
    v14 = v5[1];
    if (a3 == *v5 && a4 == v14)
    {
      v6 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (1)
      {
        v6 = v13 | v14;
        if (!(v13 | v14))
          break;
        if (v16)
          v18 = 0;
        else
          v18 = (v13 & v14) == -1;
        if (v18)
          v16 = v5;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v5 = (_QWORD *)(a1 + 16 * (v19 & v11));
        v13 = *v5;
        v14 = v5[1];
        v6 = 1;
        if (a3 == *v5 && a4 == v14)
          goto LABEL_3;
      }
      if (v16)
        v5 = v16;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_3:
  *a5 = v5;
  return v6;
}

void sub_22ED22214(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (void *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_22F343718(a1, v4, &v4[2 * v3]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 16 * v10);
  }
}

void sub_22ED222D4(uint64_t a1, signed int a2)
{
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[64];
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v33 = 0;
  v41 = *MEMORY[0x24BDAC8D0];
  v34 = v38;
  v35 = v38;
  v36 = 8;
  v37 = 0;
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_DWORD *)(v6 + 8);
    v8 = *(int **)v6;
    v9 = *(unsigned int *)(v6 + 16);
    v10 = &v8[v9];
    v32 = v5;
    if (v7)
    {
      if (v9)
      {
        v11 = 4 * v9;
        v12 = v8;
        while (*v12 >= 0xFFFFFFFE)
        {
          ++v12;
          v11 -= 4;
          if (!v11)
            goto LABEL_7;
        }
      }
      else
      {
        v12 = v8;
      }
    }
    else
    {
LABEL_7:
      v12 = &v8[v9];
    }
    v13 = &v8[v9];
LABEL_10:
    while (v12 != v13)
    {
      v14 = **(_QWORD **)(a1 + 56) + 904 * v33;
      v15 = *(unsigned int *)(v14 + 456);
      if ((_DWORD)v15)
      {
        v16 = *v12;
        v17 = *(uint64_t **)(v14 + 448);
        v18 = 8 * v15;
        do
        {
          v19 = *v17;
          v20 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)a1 + 88), *v17, v16);
          v21 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)a1 + 88), v20, a2);
          sub_22E3BA850((uint64_t)&v34, (const void *)(v21 & 7 | *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8)));
          if (v22)
          {
            v39 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21, 1);
            v40 = v19;
            sub_22ED0A07C(*(_QWORD *)a1, &v39, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
            if (((*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8) | v19) & 4) == 0)
            {
              v39 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21 | 4, 1);
              v40 = v19;
              sub_22ED0A07C(*(_QWORD *)a1, &v39, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
            }
          }
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
      v23 = (unsigned int *)(v12 + 1);
      while (v23 != (unsigned int *)v10)
      {
        v24 = *v23++;
        if (v24 <= 0xFFFFFFFD)
        {
          v12 = (int *)(v23 - 1);
          goto LABEL_10;
        }
      }
      v12 = v10;
    }
    v25 = **(_QWORD **)(a1 + 56) + 904 * v33;
    v26 = *(unsigned int *)(v25 + 280);
    if ((_DWORD)v26)
    {
      v27 = *(uint64_t **)(v25 + 272);
      v28 = 8 * v26;
      do
      {
        v29 = *v27;
        sub_22E3BA850((uint64_t)&v34, (const void *)(*v27 & 7 | *(_QWORD *)((*v27 & 0xFFFFFFFFFFFFFFF0) + 8)));
        if (v30)
        {
          v31 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)a1 + 88), v29, a2);
          v39 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v31, 1);
          v40 = v31;
          sub_22ED0A07C(*(_QWORD *)a1, &v39, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
          if (((*(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8) | v31) & 4) == 0)
          {
            v39 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v31 | 4, 1);
            v40 = v31;
            sub_22ED0A07C(*(_QWORD *)a1, &v39, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
          }
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
    v4 = 0;
    v33 = 1;
  }
  while ((v32 & 1) != 0);
  if (v35 != v34)
    free(v35);
}

void sub_22ED225F4(uint64_t a1, signed int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  int *v50;
  int *v51;
  int *i;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[64];
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v53 = v57;
  v54 = v57;
  v55 = 8;
  v56 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *(int **)v6;
  v9 = *(unsigned int *)(v6 + 16);
  v10 = &v8[v9];
  if (v7)
  {
    if ((_DWORD)v9)
    {
      v11 = 4 * v9;
      v12 = v8;
      while (*v12 >= 0xFFFFFFFE)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
          goto LABEL_6;
      }
    }
    else
    {
      v12 = v8;
    }
  }
  else
  {
LABEL_6:
    v12 = &v8[v9];
  }
  v13 = &v8[v9];
  v50 = v13;
  while (v12 != v13)
  {
    v51 = v12;
    v14 = **(_QWORD **)(a1 + 56);
    v15 = *(unsigned int *)(v14 + 104);
    if ((_DWORD)v15)
    {
      v16 = *v12;
      v17 = *(uint64_t **)(v14 + 96);
      v18 = 8 * v15;
      while (1)
      {
        v19 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)a1 + 88), *v17, v16);
        v20 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)a1 + 88), v19, a2);
        v21 = v20;
        v22 = v20 & 0xFFFFFFFFFFFFFFF0;
        if ((_DWORD)a3)
        {
          sub_22E3BA850((uint64_t)&v53, (const void *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7));
        }
        else
        {
          v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)v22) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
          if ((v26 & 0xFE) == 0x28)
            goto LABEL_33;
          if ((v26 & 0xFF800FF) == 0x528000B || v26 - 25 < 2)
            goto LABEL_33;
        }
        v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21, 1);
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        if ((_DWORD)a3)
        {
          v25 = sub_22EF5DEB0(v24, v21);
          v23 = *(_QWORD *)a1;
        }
        else
        {
          v25 = sub_22EF5B0AC(v24, *(_DWORD *)(*(_QWORD *)(v24 + 15088) + *(_QWORD *)(**(_QWORD **)(v24 + 15088) - 24) + 120));
        }
        v59 = v25;
        sub_22ED0A07C(v23, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), a3, 0);
        v28 = 0;
        if ((v21 & 4) != 0)
          goto LABEL_27;
        if ((*(_BYTE *)(v22 + 8) & 4) != 0 || (*(_BYTE *)(a1 + 24) & 4) == 0)
          break;
        v28 = 1;
        v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21 | 4, 1);
        sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), a3, 0);
        if ((v21 & 2) == 0)
        {
LABEL_28:
          if ((*(_BYTE *)(v22 + 8) & 2) == 0 && (*(_BYTE *)(a1 + 24) & 2) != 0)
          {
            v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21 | 2, 1);
            sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), a3, 0);
            if (v28)
            {
              v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v21 | 6, 1);
              sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), a3, 0);
            }
          }
        }
LABEL_33:
        ++v17;
        v18 -= 8;
        if (!v18)
          goto LABEL_34;
      }
      v28 = 0;
LABEL_27:
      if ((v21 & 2) == 0)
        goto LABEL_28;
      goto LABEL_33;
    }
LABEL_34:
    v29 = (unsigned int *)(v51 + 1);
    while (v29 != (unsigned int *)v10)
    {
      v30 = *v29++;
      if (v30 <= 0xFFFFFFFD)
      {
        v12 = (int *)(v29 - 1);
        goto LABEL_39;
      }
    }
    v12 = v10;
LABEL_39:
    v13 = v50;
  }
  if ((a3 & 1) != 0)
  {
    v31 = *(_QWORD *)(a1 + 40);
    v32 = *(_DWORD *)(v31 + 8);
    v33 = *(int **)v31;
    v34 = *(unsigned int *)(v31 + 16);
    v35 = &v33[v34];
    if (v32)
    {
      if ((_DWORD)v34)
      {
        v36 = 4 * v34;
        v37 = v33;
        while (*v37 >= 0xFFFFFFFE)
        {
          ++v37;
          v36 -= 4;
          if (!v36)
            goto LABEL_46;
        }
      }
      else
      {
        v37 = v33;
      }
    }
    else
    {
LABEL_46:
      v37 = &v33[v34];
    }
    v38 = &v33[v34];
    for (i = v38; ; v38 = i)
    {
      if (v37 == v38)
        goto LABEL_70;
      v39 = **(_QWORD **)(a1 + 56);
      v40 = *(unsigned int *)(v39 + 1008);
      if ((_DWORD)v40)
        break;
LABEL_64:
      v48 = (unsigned int *)(v37 + 1);
      while (v48 != (unsigned int *)v35)
      {
        v49 = *v48++;
        if (v49 <= 0xFFFFFFFD)
        {
          v37 = (int *)(v48 - 1);
          goto LABEL_69;
        }
      }
      v37 = v35;
LABEL_69:
      ;
    }
    v41 = *v37;
    v42 = *(uint64_t **)(v39 + 1000);
    v43 = 8 * v40;
    while (1)
    {
      v44 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)a1 + 88), *v42, v41);
      v45 = sub_22EF5DE18(*(_QWORD *)(*(_QWORD *)a1 + 88), v44, a2);
      sub_22E3BA850((uint64_t)&v53, (const void *)(v45 & 7 | *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8)));
      if (!v46)
        goto LABEL_63;
      v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v45, 1);
      v59 = sub_22EF5DEB0(*(_QWORD *)(*(_QWORD *)a1 + 88), v45);
      sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
      v47 = 0;
      if ((v45 & 4) != 0)
        goto LABEL_57;
      if ((*(_BYTE *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0 || (*(_BYTE *)(a1 + 24) & 4) == 0)
        break;
      v47 = 1;
      v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v45 | 4, 1);
      sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
      if ((v45 & 2) == 0)
      {
LABEL_58:
        if ((*(_BYTE *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) == 0 && (*(_BYTE *)(a1 + 24) & 2) != 0)
        {
          v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v45 | 2, 1);
          sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
          if (v47)
          {
            v58 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)a1 + 88), v45 | 6, 1);
            sub_22ED0A07C(*(_QWORD *)a1, &v58, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 64), 1, 0);
          }
        }
      }
LABEL_63:
      ++v42;
      v43 -= 8;
      if (!v43)
        goto LABEL_64;
    }
    v47 = 0;
LABEL_57:
    if ((v45 & 2) == 0)
      goto LABEL_58;
    goto LABEL_63;
  }
LABEL_70:
  if (v54 != v53)
    free(v54);
}

uint64_t sub_22ED22B58(uint64_t a1, int a2, unint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t, unint64_t, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;

  LODWORD(v9) = a2;
  while (1)
  {
    while (1)
    {
      if ((_BYTE)v9)
      {
        v9 = v9 & 0xFFFFFF00;
        v11 = a1;
        v12 = v9;
        v13 = a3;
        v14 = 1;
        goto LABEL_12;
      }
      if ((a1 & 4) == 0)
        break;
      a1 &= ~4uLL;
      v9 = v9;
      v13 = a3 | 4;
LABEL_11:
      v14 = a4;
      v11 = a1;
      v12 = v9;
LABEL_12:
      sub_22ED22B58(v11, v12, v13, v14, a5, a6);
    }
    v15 = (a1 >> 9) & 3;
    if (v15 != 2)
      break;
    v17 = a1 & 0xFFFFFFFFFFFFF9FFLL;
    v18 = (a3 >> 9) & 3;
    if (v18 != 3)
      LOBYTE(v18) = 2;
    sub_22ED22B58(v17, v9, a3 & 0xFFFFFFFF00000000 | a3 & 0xFFFFF9FF | ((v18 & 3) << 9), a4, a5, a6);
    a1 = v17 | 0x200;
  }
  if (v15 == 1)
  {
    a1 &= 0xFFFFFFFFFFFFF9FFLL;
    v9 = v9;
    v16 = (a3 >> 9) & 3;
    if (v16 <= 1)
      LOBYTE(v16) = 1;
    v13 = a3 & 0xFFFFFFFF00000000 | a3 & 0xFFFFF9FF | ((v16 & 3) << 9);
    goto LABEL_11;
  }
  return a5(a6, a3, a4);
}

uint64_t sub_22ED22C84(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(uint64_t **)(a1 + 16);
  v5 = sub_22ED22CD4(**(_QWORD **)(a1 + 8), a2, a3, *v4);
  v6 = *(_QWORD **)a1;
  **(_QWORD **)a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], **(unsigned __int8 **)(a1 + 24), 0);
}

unint64_t sub_22ED22CD4(uint64_t a1, unsigned int a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;

  v6 = a1;
  if (a3)
    v6 = sub_22F36A8C0(*(_QWORD *)(a4 + 88), a1);
  v7 = v6 | a2 & 4;
  if ((a2 & 0x600) != 0)
    v7 = sub_22EF5DE18(*(_QWORD *)(a4 + 88), v7, (a2 >> 9) & 3);
  return sub_22EF5F8C4(*(_QWORD *)(a4 + 88), v7, 1);
}

uint64_t sub_22ED22D38(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(uint64_t **)(a1 + 16);
  v5 = sub_22ED22CD4(**(_QWORD **)(a1 + 8), a2, a3, *v4);
  v6 = *(_QWORD **)a1;
  **(_QWORD **)a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], **(unsigned __int8 **)(a1 + 24), 0);
}

uint64_t sub_22ED22D88(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(uint64_t **)(a1 + 16);
  v5 = sub_22ED22CD4(**(_QWORD **)(a1 + 8), a2, a3, *v4);
  v6 = *(_QWORD **)a1;
  **(_QWORD **)a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], **(unsigned __int8 **)(a1 + 24), 0);
}

uint64_t sub_22ED22DD8(unint64_t **a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;

  v4 = (uint64_t *)a1[2];
  v5 = sub_22ED22CD4(*a1[1], a2, a3, *v4);
  v6 = *a1;
  **a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], 0, 0);
}

uint64_t sub_22ED22E24(unint64_t **a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;

  v4 = (uint64_t *)a1[2];
  v5 = sub_22ED22CD4(*a1[1], a2, a3, *v4);
  v6 = *a1;
  **a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], 0, 0);
}

uint64_t sub_22ED22E70(unint64_t **a1, unsigned int a2, char a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;

  v4 = (uint64_t *)a1[2];
  v5 = sub_22ED22CD4(*a1[1], a2, a3, *v4);
  v6 = *a1;
  **a1 = v5;
  return sub_22ED0A07C(*v4, v6, v4[1], v4[2], v4[8], 0, 0);
}

uint64_t sub_22ED22EBC(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t result;
  BOOL v4;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 27 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0);
  if (!result || *(_BYTE *)(result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v4 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
      return sub_22F10CF48(result);
    return 0;
  }
  return result;
}

uint64_t sub_22ED22F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  if ((unint64_t)*(unsigned __int8 *)(a1 + 1) << 8 != 1536)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + 16) != 44)
    return 0;
  v3 = sub_22F114198(*(_QWORD *)(v2 + 24));
  if ((*(_BYTE *)(v3 + 77) & 2) == 0)
    return 0;
  v5 = sub_22E496830(v3);
  if ((*(_QWORD *)(a1 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8)) == (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5 & 7))
    return 1;
  else
    return 2;
}

BOOL sub_22ED2300C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *a1;
  v3 = *a2;
  if (*a1 >= (unint64_t)*a2)
  {
    while (v3 != v2)
    {
      if (*(_WORD *)(*(_QWORD *)v3 + 32) == 167)
        goto LABEL_9;
      v3 += 8;
    }
    v3 = *a1;
  }
  else
  {
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 167)
    {
      v2 += 8;
      if (v2 == v3)
      {
        v2 = *a2;
        break;
      }
    }
  }
LABEL_9:
  v4 = a1[1];
  v5 = a2[1];
  if (v4 >= v5)
  {
    while (v5 != v4)
    {
      if (*(_WORD *)(*(_QWORD *)v5 + 32) == 167)
        return v2 != v3 || v4 != v5;
      v5 += 8;
    }
    v5 = a1[1];
  }
  else
  {
    while (*(_WORD *)(*(_QWORD *)v4 + 32) != 167)
    {
      v4 += 8;
      if (v4 == v5)
      {
        v4 = a2[1];
        return v2 != v3 || v4 != v5;
      }
    }
  }
  return v2 != v3 || v4 != v5;
}

uint64_t sub_22ED230CC(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  if (*a1 >= *a2)
  {
    while (v3 != v2)
    {
      if (*(_WORD *)(*v3 + 32) == 167)
      {
        v4 = *a1;
        goto LABEL_10;
      }
      ++v3;
    }
    return 0;
  }
  v4 = *a1;
  while (*(_WORD *)(*v4 + 32) != 167)
  {
    if (++v4 == v3)
      return 0;
  }
LABEL_10:
  if (v4 == v3)
    return 0;
  v5 = *v2;
  if (*(_WORD *)(*v2 + 32) != 167)
  {
    v7 = v2 + 1;
    do
    {
      *a1 = v7;
      v8 = *v7++;
      v5 = v8;
    }
    while (*(_WORD *)(v8 + 32) != 167);
  }
  return v5;
}

BOOL sub_22ED23174(uint64_t a1, unint64_t a2, unsigned int *a3, int a4, char a5)
{
  int v7;
  _DWORD v9[8];
  void *v10;
  uint64_t v11;
  unsigned __int8 v12[24];

  sub_22E5BBE34((uint64_t)v12, a4, a1, a5, 0, 0);
  sub_22ED06388((uint64_t)v9, a3, v12, a2, 1u, 1, 0, 0);
  v7 = v9[0] & 0x7FFFFFFF;
  if ((v9[0] & 0x7FFFFFFF) == 2 && v10 != &v11)
    free(v10);
  return v7 != 4;
}

uint64_t sub_22ED23218(int64x2_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v4 = a1[3].i64[0] + 152 * a2;
  v5 = sub_22EC36954(a1 + 4, *(unsigned __int8 **)(v4 + 16), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a3);
  if ((v5 & 1) == 0)
  {
    v6 = a1[4].i64[0];
    for (i = a1[4].i64[1]; i != v6; i -= 56)
    {
      if (*(char *)(i - 9) < 0)
        operator delete(*(void **)(i - 32));
    }
    a1[4].i64[1] = v6;
    a1[5].i32[2] = 0;
  }
  return v5;
}

void sub_22ED23294(unsigned int *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32[24];
  void *v33[2];
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  v37 = a4;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_22EFC0EB8(a3);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 16);
  v13 = (unsigned __int16)(v12 >> 38);
  if (v10 <= a4)
  {
    if (v10 == (_DWORD)v13)
      v14 = 2;
    else
      v14 = 1;
    v11 = (unsigned __int16)(v12 >> 38);
  }
  else
  {
    v14 = 0;
    if ((v12 & 0x800000000000000) == 0 && v10 == (_DWORD)v13)
    {
      v15 = 8 * v13;
      while (v15)
      {
        v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 32 + v15) & 0xFFFFFFFFFFFFFFF0) + 16);
        v15 -= 8;
        if (v16 == 36)
        {
          v14 = 0;
          goto LABEL_18;
        }
      }
      v14 = 2;
    }
  }
LABEL_18:
  v35 = v11;
  v36 = v14;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v17 = sub_22ED11874((uint64_t)a1, a2, a3, 0, (uint64_t)v33);
  v18 = v17;
  v19 = HIDWORD(v17);
  if (v11 == 1 && *(_QWORD *)(**(_QWORD **)(a3 + 120) + 40))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x172Au, 0, (uint64_t)v32);
    v31 = v18;
    v20 = sub_22E89519C((uint64_t)v32, &v31);
    v30 = v19;
    v21 = sub_22E89519C(v20, &v30);
    v22 = sub_22E90749C(v21, v33);
    v23 = sub_22E89519C(v22, &v36);
    v29 = **(_QWORD **)(a3 + 120);
    v24 = sub_22E890024(v23, &v29);
  }
  else
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1729u, 0, (uint64_t)v32);
    LODWORD(v29) = v18;
    v25 = sub_22E89519C((uint64_t)v32, (unsigned int *)&v29);
    v31 = v19;
    v26 = sub_22E89519C(v25, &v31);
    v27 = sub_22E90749C(v26, v33);
    v28 = sub_22E89519C(v27, &v36);
    v24 = sub_22E89519C(v28, &v35);
  }
  sub_22E89519C(v24, &v37);
  sub_22E903BEC(v32);
  sub_22ED11A4C(a1, a2);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
}

uint64_t sub_22ED2348C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *a2;
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (!v5)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
    }
    v5[*v5 + 1] = 6;
    v6 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v9 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v15 = v10;
    v11 = sub_22F2F1D6C(v9, &v15)[1] + 32 * *(unsigned int *)(a1 + 88);
    v14 = *(unsigned __int8 **)(v11 + 8);
    v13 = (_QWORD *)(v11 + 8);
    v12 = v14;
    v4 = *a2;
    if (!v14)
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      *v13 = v12;
    }
    v12[*v12 + 1] = 6;
    v6 = (_BYTE *)*v13;
  }
  v7 = *v6;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v4;
  return a1;
}

uint64_t sub_22ED23580(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a1[3];
  if (*(_QWORD *)(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 1;
  else
    return sub_22ECFAE0C(*a1, a2, v2, &v4);
}

uint64_t sub_22ED235D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_22ED23580(a1, *(_QWORD *)(a2 + 48));
  if ((_DWORD)result)
    return !sub_22ED23580(a1, *(_QWORD *)(a3 + 48)) || sub_22ED10710(*a1, a2, a3) == 1;
  return result;
}

uint64_t sub_22ED23640(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
  {
    memset(v12, 0, sizeof(v12));
    v11 = a1;
    v6 = (__int128 *)sub_22ED23700(a1, (unint64_t)v12, 1);
    a1 = v11;
    v7 = (_OWORD *)(*(_QWORD *)v11 + ((unint64_t)*(unsigned int *)(v11 + 8) << 6));
    v8 = *v6;
    v9 = v6[1];
    v10 = v6[3];
    v7[2] = v6[2];
    v7[3] = v10;
    *v7 = v8;
    v7[1] = v9;
  }
  else
  {
    v2 = (_OWORD *)(*(_QWORD *)a1 + (v1 << 6));
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;
  }
  v3 = (*(_DWORD *)(a1 + 8) + 1);
  v4 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = v3;
  return v4 + (v3 << 6) - 64;
}

unint64_t sub_22ED23700(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + (v4 << 6);
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

uint64_t sub_22ED23774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  int64x2_t v51;
  unint64_t v52;
  unint64_t *v53;
  char *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  void *v58;
  _QWORD *v59;
  BOOL v60;
  char *v61;
  void *v62;
  char *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _QWORD v74[2];
  unsigned __int8 v75;
  _QWORD *v76;
  _QWORD v77[2];
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  _BYTE v81[128];
  _QWORD v82[2];
  unsigned int v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE v86[128];
  _QWORD v87[2];
  unsigned int v88;
  unint64_t *v89;
  uint64_t v90;
  _BYTE v91[128];
  uint64_t v92[2];
  _QWORD v93[339];
  int v94;
  _OWORD v95[9];
  _QWORD *v96;
  uint64_t v97;
  _QWORD v98[6];
  _QWORD v99[2];
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;

  v10 = MEMORY[0x24BDAC7A8]();
  v105 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v10 + 10680) <= *(_DWORD *)(v10 + 11956))
    return 0;
  v18 = !*(_DWORD *)(v12 + 4) || *(_DWORD *)v12 == 0;
  if (!v18 || *(_QWORD *)(v12 + 8) != 0)
    return 0;
  v21 = (_QWORD *)v10;
  v22 = *(_QWORD *)(v10 + 216);
  if (v22)
  {
    v23 = v17;
    v24 = v16;
    v25 = v15;
    v26 = v14;
    v9 = v13;
    v27 = v11;
    v28 = (_QWORD *)(v13 + 88);
    while (1)
    {
      LOWORD(v29) = *(_WORD *)(v22 + 8);
      v30 = v29 & 0x7F;
      if (v30 == 33)
      {
        v29 = *(_QWORD *)(v22 + 8);
        if ((v29 & 0x8000000000) == 0)
          goto LABEL_21;
      }
      else if (v30 == 12 || v30 == 5)
      {
        goto LABEL_21;
      }
      sub_22EC611AC(v21, v9, v22, 0);
      v32 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v32)
        break;
      *(_DWORD *)v9 = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v33 = *(_QWORD *)(v9 + 88);
      if (v33)
      {
        v34 = sub_22EC6CBD0(v33);
        MEMORY[0x2348A0E9C](v34, 0x10E0C409F09D3C3);
      }
      *(_BYTE *)(v9 + 165) = 0;
      *v28 = 0;
      v28[1] = 0;
      LOWORD(v29) = *(_WORD *)(v22 + 8);
LABEL_21:
      v35 = v29 & 0x7F;
      v36 = -40;
      if (v35 > 70)
      {
        if (v35 != 83)
        {
          if (v35 == 71)
          {
            v36 = -56;
          }
          else if (v35 != 81)
          {
            goto LABEL_32;
          }
        }
      }
      else
      {
        if (v35 > 0x18)
          goto LABEL_31;
        if (v35 == 16)
          goto LABEL_24;
        if (((1 << v35) & 0x1066) != 0)
          goto LABEL_38;
        if (v35 == 24)
        {
LABEL_24:
          v36 = -48;
        }
        else
        {
LABEL_31:
          if (v35 != 70)
          {
LABEL_32:
            v37 = v35 - 52;
            v38 = (v35 - 33) >= 5;
            v39 = -64;
            if (v38)
              v39 = -48;
            v38 = v37 >= 6;
            v36 = -72;
            if (v38)
              v36 = v39;
            goto LABEL_38;
          }
          v36 = -64;
        }
      }
LABEL_38:
      v40 = *(_QWORD *)(v22 + v36 + 16);
      v22 = v40 & 0xFFFFFFFFFFFFFFF8;
      if ((v40 & 4) != 0)
        v22 = *(_QWORD *)v22;
      if (!v22)
        goto LABEL_46;
    }
    *(_BYTE *)(v9 + 163) = 0;
    v92[0] = (uint64_t)v93;
    v92[1] = 0x1000000000;
    v93[336] = v95;
    v93[337] = v95;
    v93[338] = 16;
    v94 = 0;
    v95[8] = 0u;
    v96 = v98;
    v97 = 0x400000000;
    v98[4] = v99;
    v99[0] = 0;
    v98[5] = 0;
    v99[1] = 1;
    v100 = v27;
    v101 = v26;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v42 = 8 * v32;
    v43 = *(uint64_t **)(v9 + 8);
    do
    {
      v44 = *v43++;
      sub_22ED155EC((uint64_t)v21, v44, v25, v24, v23, (uint64_t)v92, 0);
      v42 -= 8;
    }
    while (v42);
    v76 = 0;
    v45 = sub_22ED03FCC(v92, v21, v27, &v76);
    if ((*(_WORD *)(v22 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      if (a9)
      {
        *a9 = v22 - 64;
        if (!v45)
        {
          *(_DWORD *)v9 = 0;
          *(_DWORD *)(v9 + 16) = 0;
          v66 = *(_QWORD *)(v9 + 88);
          if (v66)
          {
            v67 = sub_22EC6CBD0(v66);
            MEMORY[0x2348A0E9C](v67, 0x10E0C409F09D3C3);
            v68 = *(_DWORD *)(v9 + 16);
          }
          else
          {
            v68 = 0;
          }
          *(_BYTE *)(v9 + 165) = 0;
          *v28 = 0;
          v28[1] = 0;
          v71 = v76[1];
          if (v68 >= *(_DWORD *)(v9 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v68 = *(_DWORD *)(v9 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v68) = v71;
          ++*(_DWORD *)(v9 + 16);
          *(_DWORD *)v9 = 2;
          sub_22EC561E4(v9);
        }
      }
    }
    else if (!v45)
    {
      v87[0] = 1;
      v46 = 1;
      v47 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)&v87[v46] = v47;
        v46 += 2;
      }
      while (v46 != 17);
      v89 = (unint64_t *)v91;
      v90 = 0x1000000000;
      v82[0] = 1;
      v48 = 1;
      v49 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)&v82[v48] = v49;
        v48 += 2;
      }
      while (v48 != 17);
      v84 = v86;
      v85 = 0x1000000000;
      sub_22EC6543C((uint64_t)v21, v27, v24, v23, (uint64_t)v87, (uint64_t)v82);
      v77[0] = 1;
      v50 = 1;
      v51 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)&v77[v50] = v51;
        v50 += 2;
      }
      while (v50 != 17);
      v79 = (uint64_t *)v81;
      v80 = 0x1000000000;
      if ((*(_QWORD *)(v9 + 120) & 7) != 6
        || (*(_DWORD *)(*(_QWORD *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8) - 5) <= 0xFFFFFFFB)
      {
        v52 = v21[419];
        if ((v52 & 1) != 0)
        {
          v52 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v21[11] + 16048) + 16))(*(_QWORD *)(v21[11] + 16048), v52 >> 1);
          v21[419] = v52;
        }
        if ((_DWORD)v90)
        {
          v53 = v89;
          v54 = (char *)&v89[v90];
          while (1)
          {
            if (v52 && (sub_22EFCBE78(v52 + 48, *v53) & 1) != 0)
              goto LABEL_91;
            if (*v53)
              v55 = (*(_WORD *)(*v53 + 8) & 0x7F) == 16;
            else
              v55 = 0;
            if (!v55)
            {
LABEL_90:
              sub_22EC70694((uint64_t)v77, (uint64_t *)v53);
              goto LABEL_91;
            }
            sub_22EFB9E74(*v53 - 48, v74);
            v56 = v75;
            v57 = (char)v75;
            v58 = (void *)v74[0];
            if ((v75 & 0x80u) == 0)
            {
              v59 = v74;
            }
            else
            {
              v56 = v74[1];
              v59 = (_QWORD *)v74[0];
            }
            if (v56 < 2)
              break;
            v61 = (char *)v59 + v56;
            v62 = v59;
            do
            {
              v63 = (char *)memchr(v62, 95, v56 - 1);
              if (!v63)
                break;
              if (*(_WORD *)v63 == 24415)
                goto LABEL_81;
              v62 = v63 + 1;
              v56 = v61 - (_BYTE *)v62;
            }
            while (v61 - (_BYTE *)v62 > 1);
            v63 = v61;
LABEL_81:
            v60 = v63 != v61 && v63 - (char *)v59 != -1;
            if (v57 < 0)
              goto LABEL_88;
LABEL_89:
            if (!v60)
              goto LABEL_90;
LABEL_91:
            if (++v53 == (unint64_t *)v54)
              goto LABEL_92;
          }
          v60 = 0;
          if (((char)v75 & 0x80000000) == 0)
            goto LABEL_89;
LABEL_88:
          operator delete(v58);
          goto LABEL_89;
        }
      }
LABEL_92:
      sub_22E8FCA40(v21, *(_DWORD *)(v9 + 128), 0xFDCu, 0, (uint64_t)v74);
      v73 = *(_QWORD *)(v9 + 120);
      sub_22E894538((uint64_t)v74, &v73);
      sub_22E903BEC((unsigned int *)v74);
      if ((_DWORD)v80 == 1)
      {
        sub_22E8FCA40(v21, *(_DWORD *)(*v76 + 24), 0x16E3u, 0, (uint64_t)v74);
        v73 = *(_QWORD *)(v9 + 120);
        v69 = sub_22E894538((uint64_t)v74, &v73);
        v72 = 1;
        v70 = sub_22E8900C4(v69, &v72);
        sub_22E894FB4(v70, v79);
      }
      else
      {
        if ((_DWORD)v80)
        {
          sub_22E8FCA40(v21, *(_DWORD *)(*v76 + 24), 0x16E3u, 0, (uint64_t)v74);
          v73 = *(_QWORD *)(v9 + 120);
          v65 = sub_22E894538((uint64_t)v74, &v73);
          v72 = 2;
        }
        else
        {
          sub_22E8FCA40(v21, *(_DWORD *)(*v76 + 24), 0x16E3u, 0, (uint64_t)v74);
          v73 = *(_QWORD *)(v9 + 120);
          v65 = sub_22E894538((uint64_t)v74, &v73);
          v72 = 0;
        }
        sub_22E8900C4(v65, &v72);
      }
      sub_22E903BEC((unsigned int *)v74);
      if (v79 != (uint64_t *)v81)
        free(v79);
      if ((v77[0] & 1) == 0)
        llvm::deallocate_buffer((llvm *)v77[1], (void *)(8 * v78));
      if (v84 != v86)
        free(v84);
      if ((v82[0] & 1) == 0)
        llvm::deallocate_buffer((llvm *)v82[1], (void *)(8 * v83));
      if (v89 != (unint64_t *)v91)
        free(v89);
      if ((v87[0] & 1) == 0)
        llvm::deallocate_buffer((llvm *)v87[1], (void *)(8 * v88));
      LODWORD(v9) = 1;
      goto LABEL_120;
    }
    LODWORD(v9) = 0;
LABEL_120:
    sub_22E9DC79C(v92);
    v41 = 1;
    return v41 & v9;
  }
LABEL_46:
  v41 = 0;
  return v41 & v9;
}

void sub_22ED23F40(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  uint64_t *__srca;

  if (a5 < 1)
    return;
  v9 = *(_BYTE **)a1;
  v8 = *(uint64_t **)(a1 + 8);
  v10 = a2 - *(_QWORD *)a1;
  v11 = (char *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v12 = *(_QWORD *)(a1 + 16);
  if (a5 > (v12 - (uint64_t)v8) >> 3)
  {
    v13 = a5 + (((char *)v8 - v9) >> 3);
    if (v13 >> 61)
      abort();
    v14 = v12 - (_QWORD)v9;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    __srca = (uint64_t *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
    if (v15)
    {
      if (v15 >> 61)
        sub_22E3B3F8C();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v25 = &v16[8 * (v10 >> 3)];
    memcpy(v25, __src, 8 * a5);
    if ((unint64_t)v10 >= 8)
    {
      v26 = 8 * (v10 >> 3);
      do
      {
        *(_QWORD *)&v16[v26 - 8] = *(_QWORD *)&v9[v26 - 8];
        v26 -= 8;
      }
      while (v26);
      v8 = *(uint64_t **)(a1 + 8);
      v25 = v16;
    }
    v27 = &v16[8 * a5 + (v10 & 0xFFFFFFFFFFFFFFF8)];
    v28 = &v16[8 * v15];
    if (v8 != __srca)
      memmove(v27, __srca, (char *)v8 - (char *)__srca);
    v29 = *(_BYTE **)a1;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = &v27[(char *)v8 - (char *)__srca];
    *(_QWORD *)(a1 + 16) = v28;
    if (v29)
      operator delete(v29);
    return;
  }
  v17 = ((char *)v8 - v11) >> 3;
  if (v17 >= a5)
  {
    v18 = &__src[8 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v11[8 * a5];
    v22 = (uint64_t *)&v20[-8 * a5];
    v23 = v20;
    if (v22 < v8)
    {
      v23 = v20;
      do
      {
        v24 = *v22++;
        *(_QWORD *)v23 = v24;
        v23 += 8;
      }
      while (v22 < v8);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v20[-8 * ((v20 - v21) >> 3)], v11, v20 - v21);
    if (v18 != __src)
      memmove(v11, __src, v18 - __src);
    return;
  }
  v18 = &__src[8 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[8 * v17], a4 - v18);
  v20 = (char *)v8 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v8 + v19;
  if ((char *)v8 - v11 >= 1)
    goto LABEL_18;
}

uint64_t *sub_22ED24174(int8x16_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v5 = a2;
  v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    v9 = &a1->i8[8];
    v10 = a1->i64[1];
    if (!*(_DWORD *)(v10 + 64))
    {
      v8 = a1->i64[0];
      a1->i64[0] = v10;
      a1->i64[1] = v8;
      a1->i64[1] = *a2;
      goto LABEL_23;
    }
    a1->i64[1] = *a2;
    *a2 = v10;
    *a1 = vextq_s8(*a1, *a1, 8uLL);
    return (uint64_t *)v9;
  }
  if (a3 == 2)
  {
    v8 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_23:
    *a2 = v8;
    return (uint64_t *)v5;
  }
  if (a5 < a3)
  {
    if (a3 >= 0)
      v11 = a3;
    else
      v11 = a3 + 1;
    v12 = v11 >> 1;
    v13 = &a1->i64[v11 >> 1];
    v14 = v13 - 1;
    if (*(_DWORD *)(*(v13 - 1) + 64))
    {
      v15 = 8 - 8 * v12;
      v16 = v12;
      while (v15)
      {
        v17 = *(_DWORD *)(a1[-1].i64[v16] + 64);
        v15 += 8;
        --v16;
        if (!v17)
        {
          v14 = (uint64_t *)((char *)a1->i64 - v15);
          goto LABEL_24;
        }
      }
      v21 = (uint64_t *)a1;
    }
    else
    {
LABEL_24:
      v21 = (uint64_t *)sub_22ED24174(a1, v14);
    }
    v23 = a3 - v12;
    if (*(_DWORD *)(v6[v12] + 64))
    {
      v24 = v13;
LABEL_36:
      v9 = (char *)sub_22ED24174(v24, v5);
    }
    else
    {
      v9 = (char *)(v5 + 1);
      v25 = &v6[v12 + 1];
      while (v25 != (uint64_t *)v5)
      {
        --v23;
        v26 = *v25++;
        if (*(_DWORD *)(v26 + 64))
        {
          v24 = v25 - 1;
          goto LABEL_36;
        }
      }
    }
    if (v21 != v13)
    {
      if (v13 == (uint64_t *)v9)
        return v21;
      if (v21 + 1 == v13)
      {
        v28 = *v21;
        v29 = v9 - (char *)v13;
        memmove(v21, v13, v9 - (char *)v13);
        v5 = (unint64_t *)((char *)v21 + v29);
        *v5 = v28;
      }
      else
      {
        if (v13 + 1 != (uint64_t *)v9)
          return sub_22ED24414(v21, v13, v9);
        v30 = *((_QWORD *)v9 - 1);
        v5 = (unint64_t *)(v21 + 1);
        if (v9 - 8 != (char *)v21)
          memmove(v21 + 1, v21, v9 - 8 - (char *)v21);
        *v21 = v30;
      }
      return (uint64_t *)v5;
    }
    return (uint64_t *)v9;
  }
  v18 = &a1->i64[1];
  *a4 = a1->i64[0];
  v19 = a4 + 1;
  if (&a1->u64[1] == a2)
  {
    a1->i64[0] = *a2;
  }
  else
  {
    do
    {
      v20 = *v18;
      if (*(_DWORD *)(*v18 + 64))
        *v19++ = v20;
      else
        *v6++ = v20;
      ++v18;
    }
    while (v18 != (uint64_t *)a2);
    *v6 = *a2;
    v5 = (unint64_t *)(v6 + 1);
    if (v19 <= a4)
      return (uint64_t *)v5;
  }
  v22 = 0;
  do
  {
    v5[v22] = a4[v22];
    ++v22;
  }
  while (&a4[v22] < v19);
  return (uint64_t *)v5;
}

_QWORD *sub_22ED24414(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_QWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = __OFSUB__(v3, a3 - v15);
          v20 = v3 - (a3 - v15);
          v19 = (v20 < 0) ^ v18;
          v15 = &a1[v20];
          if (v19)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t sub_22ED244E0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;

  LOBYTE(v4) = **(_BYTE **)(a1 + 40);
  return sub_22ED084CC(*(_QWORD *)a1, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 48), a2, a3, **(_QWORD ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 32), v4, **(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 56), **(_DWORD **)(a1 + 64), 0, **(_BYTE **)(a1 + 72));
}

uint64_t sub_22ED2454C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;

  LOBYTE(v4) = **(_BYTE **)(a1 + 40);
  return sub_22ED084CC(*(_QWORD *)a1, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 48), a2, a3, **(_QWORD ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 32), v4, 0, 0, 0, 0, **(_BYTE **)(a1 + 48));
}

int **sub_22ED245A8(int **result, uint64_t a2, int *a3)
{
  int **v5;
  uint64_t v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int *v14;
  int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;

  v5 = result;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    v17 = v7 - 1;
    v18 = (37 * *a3) & (v7 - 1);
    v8 = (int *)(v6 + 4 * v18);
    v19 = *v8;
    if (*a3 == *v8)
    {
LABEL_15:
      v16 = 0;
      goto LABEL_13;
    }
    v26 = 0;
    v27 = 1;
    while (v19 != -1)
    {
      if (v26)
        v30 = 0;
      else
        v30 = v19 == -2;
      if (v30)
        v26 = v8;
      v31 = v18 + v27++;
      v18 = v31 & v17;
      v8 = (int *)(v6 + 4 * (v31 & v17));
      v19 = *v8;
      if (*a3 == *v8)
        goto LABEL_15;
    }
    if (v26)
      v8 = v26;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if (4 * v9 + 4 < 3 * v7)
  {
    if (v7 + ~v9 - *(_DWORD *)(a2 + 12) > v7 >> 3)
    {
LABEL_9:
      v10 = *v8;
      goto LABEL_10;
    }
    result = (int **)sub_22ED247C0(a2, v7);
    v6 = *(_QWORD *)a2;
    v7 = *(_DWORD *)(a2 + 16);
    v10 = *a3;
    v20 = v7 - 1;
    v21 = (37 * *a3) & (v7 - 1);
    v8 = (int *)(*(_QWORD *)a2 + 4 * v21);
    v22 = *v8;
    if (*a3 == *v8)
      goto LABEL_10;
    v14 = 0;
    v23 = 1;
    while (v22 != -1)
    {
      if (v14)
        v24 = 0;
      else
        v24 = v22 == -2;
      if (v24)
        v14 = v8;
      v25 = v21 + v23++;
      v21 = v25 & v20;
      v8 = (int *)(v6 + 4 * (v25 & v20));
      v22 = *v8;
      if (v10 == *v8)
        goto LABEL_10;
    }
LABEL_7:
    if (v14)
      v8 = v14;
    goto LABEL_9;
  }
  result = (int **)sub_22ED247C0(a2, 2 * v7);
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 16);
  v10 = *a3;
  v11 = v7 - 1;
  v12 = (37 * *a3) & (v7 - 1);
  v8 = (int *)(*(_QWORD *)a2 + 4 * v12);
  v13 = *v8;
  if (*a3 != *v8)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -1)
    {
      if (v14)
        v28 = 0;
      else
        v28 = v13 == -2;
      if (v28)
        v14 = v8;
      v29 = v12 + v15++;
      v12 = v29 & v11;
      v8 = (int *)(v6 + 4 * (v29 & v11));
      v13 = *v8;
      if (v10 == *v8)
        goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_10:
  ++*(_DWORD *)(a2 + 8);
  if (v10 != -1)
    --*(_DWORD *)(a2 + 12);
  *v8 = *a3;
  v16 = 1;
LABEL_13:
  *v5 = v8;
  v5[1] = (int *)(v6 + 4 * v7);
  *((_BYTE *)v5 + 16) = v16;
  return result;
}

void *sub_22ED247C0(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (void *)MEMORY[0x23489D23C](4 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F343A64((_QWORD *)a1, v4, &v4[v3]);
    return (void *)llvm::deallocate_buffer((llvm *)v4, (void *)(4 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      return memset(result, 255, 4 * v10);
  }
  return result;
}

void sub_22ED24884(void **a1, void **a2)
{
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  BOOL v14;

  if (a2 != a1)
  {
    v3 = a2 - 113;
    do
    {
      v4 = (void **)v3[100];
      if (v3 + 102 != v4)
        free(v4);
      v5 = v3[89];
      if (v5 != v3[88])
        free(v5);
      v6 = (void **)v3[78];
      if (v3 + 80 != v6)
        free(v6);
      v7 = v3[67];
      if (v7 != v3[66])
        free(v7);
      v8 = (void **)v3[56];
      if (v3 + 58 != v8)
        free(v8);
      v9 = v3[45];
      if (v9 != v3[44])
        free(v9);
      v10 = (void **)v3[34];
      if (v3 + 36 != v10)
        free(v10);
      v11 = v3[23];
      if (v11 != v3[22])
        free(v11);
      v12 = (void **)v3[12];
      if (v3 + 14 != v12)
        free(v12);
      v13 = v3[1];
      if (v13 != *v3)
        free(v13);
      v14 = v3 == a1;
      v3 -= 113;
    }
    while (!v14);
  }
}

double sub_22ED24978(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  *(_QWORD *)(a1 + 176) = a1 + 208;
  *(_QWORD *)(a1 + 184) = a1 + 208;
  *(_QWORD *)(a1 + 192) = 8;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x800000000;
  *(_QWORD *)(a1 + 352) = a1 + 384;
  *(_QWORD *)(a1 + 360) = a1 + 384;
  *(_QWORD *)(a1 + 368) = 8;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 464;
  *(_QWORD *)(a1 + 456) = 0x800000000;
  *(_QWORD *)(a1 + 528) = a1 + 560;
  *(_QWORD *)(a1 + 536) = a1 + 560;
  *(_QWORD *)(a1 + 544) = 8;
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 640;
  *(_QWORD *)(a1 + 632) = 0x800000000;
  *(_QWORD *)(a1 + 704) = a1 + 736;
  *(_QWORD *)(a1 + 712) = a1 + 736;
  *(_QWORD *)(a1 + 720) = 8;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 800) = a1 + 816;
  *(_QWORD *)(a1 + 808) = 0x800000000;
  *(_WORD *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 882) = 0;
  *(_QWORD *)(a1 + 888) = a2;
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 88);
  return result;
}

uint64_t *sub_22ED24A34(uint64_t *result, uint64_t *a2, _QWORD **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      result = (uint64_t *)sub_22ED24C7C(a3, *(a2 - 1), *result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = a5;
      v21 = a4 >> 1;
      v22 = &result[a4 >> 1];
      v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_22ED24F40(result, v22, a3, v23, a5);
        v24 = &v20[v21];
        result = sub_22ED24F40(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        v25 = &v20[a4];
        v26 = v24;
        while (v26 != v25)
        {
          result = (uint64_t *)sub_22ED24C7C(a3, *v26, *v20);
          if ((_DWORD)result)
            v27 = v26;
          else
            v27 = v20;
          v20 += result ^ 1;
          v26 += result;
          *v8++ = *v27;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          v29 = 0;
          do
          {
            v8[v29] = v20[v29];
            ++v29;
          }
          while (&v20[v29] != v24);
        }
      }
      else
      {
        sub_22ED24A34(result, v22, a3, v23, a5, a6);
        sub_22ED24A34(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return (uint64_t *)sub_22ED25134((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t)a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = result;
        do
        {
          v15 = *v13;
          v14 = v13[1];
          v13 = v11;
          result = (uint64_t *)sub_22ED24C7C(a3, v14, v15);
          if ((_DWORD)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17)
                break;
              result = (uint64_t *)sub_22ED24C7C(a3, v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            v18 = v8;
LABEL_15:
            *v18 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

BOOL sub_22ED24C7C(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL8 v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int16 v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;

  if (a2 == a3)
    return 0;
  if ((*(_BYTE *)(a2 + 104) & 1) != 0)
  {
    if ((*(_BYTE *)(a3 + 104) & 1) == 0
      || sub_22ED0DB6C((uint64_t)*a1, (_QWORD *)a2, (_QWORD *)a3, 0, *((_DWORD *)a1 + 6)))
    {
      return 1;
    }
    if (sub_22ED0DB6C((uint64_t)*a1, (_QWORD *)a3, (_QWORD *)a2, 0, *((_DWORD *)a1 + 6)))
      return 0;
    if ((*(_BYTE *)(a2 + 104) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    if ((*(_BYTE *)(a3 + 104) & 1) != 0)
      return 0;
    if ((*(_BYTE *)(a2 + 104) & 1) != 0)
      goto LABEL_20;
  }
  v6 = sub_22ED2560C((uint64_t)a1, (unsigned __int8 *)a2);
  v7 = sub_22ED2560C((uint64_t)a1, (unsigned __int8 *)a3);
  v8 = v7;
  v9 = v6 == 0;
  if (v6 > 1)
  {
    if (v7 < 2)
      return 1;
    if (v6 == 2)
    {
      if (v7 != 2)
        return 1;
      v16 = *(_DWORD *)(a2 + 88);
      v17 = *(_DWORD *)(a3 + 88);
      if (!v16)
        v16 = -1;
      if (!v17)
        v17 = -1;
      v13 = v16 >= v17;
      if (v16 != v17)
        return !v13;
      if ((*(_BYTE *)(a2 + 104) & 8) != 0)
        v18 = 1;
      else
        v18 = (*(unsigned __int8 *)(a3 + 104) >> 3) & 1;
      v25 = *(_DWORD *)(a2 + 56);
      if (v18 == v25)
      {
LABEL_20:
        v14 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
        {
          if ((*(_BYTE *)(a2 + 104) & 4) == 0)
          {
            v15 = 0;
LABEL_35:
            v19 = *(_QWORD *)a3;
            if (*(_QWORD *)a3)
            {
              if (!v15)
                return 0;
            }
            else
            {
              if ((*(_BYTE *)(a3 + 104) & 4) == 0)
                return v15 != 0;
              v19 = *(_QWORD *)(a3 + 40);
              if (!v15)
                return 0;
            }
            v20 = *(_DWORD *)(v19 + 24);
            if (v20)
              return sub_22F1E3C34((_QWORD *)(*a1)[14], v15, v20);
            return 1;
          }
          v14 = *(_QWORD *)(a2 + 40);
        }
        v15 = *(_DWORD *)(v14 + 24);
        goto LABEL_35;
      }
      v26 = 0;
      do
      {
        v27 = sub_22ED0E7D4(*a1, *((_DWORD *)a1 + 2), (int *)(*(_QWORD *)(a2 + 48) + 152 * v18), *(_QWORD *)(a3 + 48) + 152 * v18);
        if (v27 == 1)
        {
          --v26;
        }
        else if (v27 == -1)
        {
          ++v26;
        }
        ++v18;
      }
      while (v25 != v18);
      v9 = v26 > 0;
      if (v26)
        return v9;
    }
    else if (v7 == 2)
    {
      return 0;
    }
    if (v6 == 3)
    {
      if (v8 != 3)
        return 1;
      v22 = *(_WORD *)(a2 + 112);
      v23 = *(_WORD *)(a3 + 112);
      if (v23 != v22)
      {
        v24 = sub_22ED256E0(v22);
        v13 = v24 >= sub_22ED256E0(v23);
        return !v13;
      }
    }
    else if (v8 == 3)
    {
      return 0;
    }
    goto LABEL_20;
  }
  if (v7 > 1)
    return 0;
  v10 = sub_22F343BB0(a2) - *((_DWORD *)a1 + 4);
  if (v10 >= 0)
    v11 = v10;
  else
    v11 = -v10;
  v12 = sub_22F343BB0(a3) - *((_DWORD *)a1 + 4);
  if (v12 < 0)
    v12 = -v12;
  v13 = v11 >= v12;
  if (v11 != v12)
    return !v13;
  if (v6 == v8)
  {
    if ((*(_BYTE *)(a2 + 104) & 4) == 0)
      return (*(unsigned __int8 *)(a3 + 104) >> 2) & 1;
    return 0;
  }
  return v9;
}

uint64_t *sub_22ED24F40(uint64_t *result, uint64_t *a2, _QWORD **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)sub_22ED24C7C(a3, *(a2 - 1), *result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &result[a4 >> 1];
      sub_22ED24A34(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_22ED24A34(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        result = (uint64_t *)sub_22ED24C7C(a3, *v21, *v7);
        if ((_DWORD)result)
          v22 = v21;
        else
          v22 = v7;
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14;
          v16 = *v14++;
          result = (uint64_t *)sub_22ED24C7C(a3, *v12, v16);
          v17 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v17 = v5;
            if (v15 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v5 + v18);
                result = (uint64_t *)sub_22ED24C7C(a3, *v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v19 = *v12++;
          *v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22ED25134(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *__src;
  _OWORD v66[2];

  if (!a6)
    return result;
  v10 = a6;
  v15 = (uint64_t *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = sub_22ED24C7C((_QWORD **)a4, *a2, *v15);
      if ((result & 1) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v64 = a3;
    __src = a7;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v58 = *v15;
        *v15 = *a2;
        *a2 = v58;
        return result;
      }
      if (a5 >= 0)
        v24 = a5;
      else
        v24 = a5 + 1;
      v19 = v24 >> 1;
      v20 = &v15[v24 >> 1];
      v25 = *(_OWORD *)(a4 + 16);
      v66[0] = *(_OWORD *)a4;
      v66[1] = v25;
      v35 = a3 == a2;
      v18 = a3;
      v17 = a3 - a2;
      v63 = a4;
      if (v35)
        goto LABEL_34;
      v60 = a8;
      v61 = v10;
      v18 = a2;
      do
      {
        v26 = &v18[v17 >> 1];
        v28 = *v26;
        v27 = v26 + 1;
        v29 = sub_22ED24C7C((_QWORD **)v66, v28, *v20);
        if (v29)
          v17 += ~(v17 >> 1);
        else
          v17 >>= 1;
        if (v29)
          v18 = v27;
      }
      while (v17);
      v17 = v18 - a2;
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[v16 >> 1];
      v19 = a2 - v15;
      if (a2 == v15)
      {
        v15 = a2;
        v20 = a2;
        a2 += v16 >> 1;
        goto LABEL_54;
      }
      v60 = a8;
      v61 = v10;
      v20 = v15;
      do
      {
        v21 = &v20[v19 >> 1];
        v23 = *v21;
        v22 = v21 + 1;
        if (sub_22ED24C7C((_QWORD **)a4, *v18, v23))
        {
          v19 >>= 1;
        }
        else
        {
          v20 = v22;
          v19 += ~(v19 >> 1);
        }
      }
      while (v19);
      v63 = a4;
      v19 = v20 - v15;
    }
    a8 = v60;
    v10 = v61;
LABEL_34:
    if (v20 == a2)
    {
      v20 = a2;
      a2 = v18;
    }
    else if (a2 == v18)
    {
      v18 = a2;
      a2 = v20;
    }
    else if (v20 + 1 == a2)
    {
      v62 = v10;
      v36 = *v20;
      memmove(v20, a2, (char *)v18 - (char *)a2);
      a2 = (uint64_t *)((char *)v20 + (char *)v18 - (char *)a2);
      *a2 = v36;
      v10 = v62;
    }
    else if (a2 + 1 == v18)
    {
      v37 = *(v18 - 1);
      a2 = v20 + 1;
      if (v18 - 1 != v20)
        memmove(v20 + 1, v20, (char *)(v18 - 1) - (char *)v20);
      *v20 = v37;
    }
    else
    {
      v30 = a2 - v20;
      if (v30 != v18 - a2)
      {
        v39 = v18 - a2;
        v40 = a2 - v20;
        do
        {
          v41 = v40;
          v40 = v39;
          v39 = v41 % v39;
        }
        while (v39);
        a4 = v63;
        if (v40)
        {
          v42 = &v20[v40];
          do
          {
            v44 = *--v42;
            v43 = v44;
            v45 = &v42[v30];
            v46 = v42;
            do
            {
              v47 = v46;
              v46 = v45;
              *v47 = *v45;
              v48 = __OFSUB__(v30, v18 - v45);
              v50 = v30 - (v18 - v45);
              v49 = (v50 < 0) ^ v48;
              v45 = &v20[v50];
              if (v49)
                v45 = &v46[v30];
            }
            while (v45 != v42);
            *v46 = v43;
          }
          while (v42 != v20);
        }
        a2 = &v20[v18 - a2];
        goto LABEL_54;
      }
      v31 = 0;
      do
      {
        v32 = v20[v31];
        v20[v31] = a2[v31];
        v33 = (uint64_t)&v20[v31 + 1];
        a2[v31] = v32;
        v34 = (uint64_t)&a2[++v31];
        v35 = (uint64_t *)v33 == a2 || v34 == (_QWORD)v18;
      }
      while (!v35);
    }
    a4 = v63;
LABEL_54:
    a5 -= v19;
    v10 -= v17;
    if ((uint64_t)(v17 + v19) >= v10 + a5)
    {
      result = sub_22ED25134(a2, v18, v64, a4, a5, v10, __src, a8);
      v18 = v20;
      a5 = v19;
      a7 = __src;
      v10 = v17;
      a3 = a2;
    }
    else
    {
      v38 = v19;
      a7 = __src;
      result = sub_22ED25134(v15, v20, a2, a4, v38, v17, __src, a8);
      v15 = a2;
      a3 = v64;
    }
    a2 = v18;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v55 = 0;
      do
      {
        a7[v55] = v15[v55];
        ++v55;
      }
      while (&v15[v55] != a2);
      if (v55 * 8)
      {
        v56 = a7;
        while (a2 != a3)
        {
          result = sub_22ED24C7C((_QWORD **)a4, *a2, *v56);
          if ((_DWORD)result)
            v57 = a2;
          else
            v57 = v56;
          v56 += result ^ 1;
          a2 += result;
          *v15++ = *v57;
          if (&a7[v55] == v56)
            return result;
        }
        return (uint64_t)memmove(v15, v56, (char *)a7 - (char *)v56 + v55 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v51 = 0;
    do
    {
      a7[v51] = a2[v51];
      ++v51;
    }
    while (&a2[v51] != a3);
    if (v51 * 8)
    {
      v52 = &a7[v51];
      v53 = a3 - 1;
      while (a2 != v15)
      {
        result = sub_22ED24C7C((_QWORD **)a4, *(v52 - 1), *(a2 - 1));
        if ((_DWORD)result)
          v54 = a2;
        else
          v54 = v52;
        if ((_DWORD)result)
          --a2;
        else
          --v52;
        *v53-- = *(v54 - 1);
        if (v52 == a7)
          return result;
      }
      if (v52 != a7)
      {
        v59 = 0;
        do
        {
          v53[v59] = v52[v59 - 1];
          --v59;
        }
        while (&v52[v59] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_22ED2560C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = a2[105];
  if (result < 2 || !*(_QWORD *)a2)
    return result;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 26;
  else
    v7 = 0;
  if (v7)
    goto LABEL_8;
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
  {
    v8 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  v6 = sub_22F10CF48(v6);
  v5 = v11;
  if (v6)
LABEL_8:
    v8 = (unsigned __int16)(*(_QWORD *)(v6 + 16) >> 38);
  else
    v8 = 0;
LABEL_9:
  v9 = *(_QWORD *)a2;
  if (v5 > v8)
  {
    result = sub_22EFBF68C(v9);
    if (!(_DWORD)result)
      return result;
    v9 = *(_QWORD *)a2;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 >= sub_22EFC0EB8(v9))
    return a2[105];
  else
    return 1;
}

uint64_t sub_22ED256E0(char a1)
{
  return dword_22F495F2C[a1 - 1];
}

uint64_t sub_22ED256F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 104) & 1) == 0 && *(_BYTE *)(a2 + 105) == 8)
    return 1;
  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    result = sub_22F295B40(result);
    if ((_DWORD)result)
      return sub_22E466E5C(*(_QWORD *)a2);
  }
  return result;
}

uint64_t sub_22ED2574C(uint64_t result, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  int8x16_t *v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  int8x16_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int8x16_t *v86;
  uint64_t *v87;
  uint64_t *i64;
  uint64_t *v89;
  int64_t v90;
  uint64_t v91;

  v9 = (int8x16_t *)result;
LABEL_2:
  i64 = a2[-1].i64;
  v89 = &a2[-1].i64[1];
  v87 = &a2[-2].i64[1];
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_22ED25EF4(*a3, a2[-1].i64[1], v9->i64[0]);
        if ((_DWORD)result)
        {
          v39 = v9->i64[0];
          v9->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v39;
        }
        return result;
      case 3:
        return sub_22ED25F90(v9->i64, &v9->i64[1], v89, a3);
      case 4:
        return sub_22ED26298(v9->i64, &v9->i64[1], v9[1].i64, v89, a3);
      case 5:
        v40 = v9[1].i64;
        v41 = &v9[1].i64[1];
        sub_22ED26298(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1], a3);
        result = sub_22ED25EF4(*a3, a2[-1].i64[1], v9[1].i64[1]);
        if ((_DWORD)result)
        {
          v42 = *v41;
          *v41 = a2[-1].i64[1];
          a2[-1].i64[1] = v42;
          result = sub_22ED25EF4(*a3, *v41, *v40);
          if ((_DWORD)result)
          {
            v43 = *v40;
            v44 = *v41;
            *v40 = *v41;
            *v41 = v43;
            result = sub_22ED25EF4(*a3, v44, v9->i64[1]);
            if ((_DWORD)result)
            {
              v46 = v9->i64[1];
              v45 = v9[1].i64[0];
              v47 = v9->i64[0];
              v9->i64[1] = v45;
              v9[1].i64[0] = v46;
              result = sub_22ED25EF4(*a3, v45, v47);
              if ((_DWORD)result)
                *v9 = vextq_s8(*v9, *v9, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v48 = (int8x16_t *)&v9->u64[1];
          v50 = v9 == a2 || v48 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v50)
            {
              v51 = 0;
              v52 = (uint64_t *)v9;
              do
              {
                v54 = *v52;
                v53 = v52[1];
                v52 = (uint64_t *)v48;
                result = sub_22ED25EF4(*a3, v53, v54);
                if ((_DWORD)result)
                {
                  v55 = *v52;
                  v56 = v51;
                  while (1)
                  {
                    *(uint64_t *)((char *)&v9->i64[1] + v56) = *(uint64_t *)((char *)v9->i64 + v56);
                    if (!v56)
                      break;
                    result = sub_22ED25EF4(*a3, v55, *(uint64_t *)((char *)&v9->i64[-1] + v56));
                    v56 -= 8;
                    if ((result & 1) == 0)
                    {
                      v57 = (uint64_t *)((char *)&v9->i64[1] + v56);
                      goto LABEL_76;
                    }
                  }
                  v57 = (uint64_t *)v9;
LABEL_76:
                  *v57 = v55;
                }
                v48 = (int8x16_t *)(v52 + 1);
                v51 += 8;
              }
              while (v52 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v81 = v9->i64[0];
              v80 = v9->i64[1];
              v9 = v48;
              result = sub_22ED25EF4(*a3, v80, v81);
              if ((_DWORD)result)
              {
                v82 = v9->i64[0];
                v83 = (uint64_t *)v9;
                do
                {
                  v84 = v83;
                  v85 = *--v83;
                  *v84 = v85;
                  result = sub_22ED25EF4(*a3, v82, *(v84 - 2));
                }
                while ((result & 1) != 0);
                *v83 = v82;
              }
              v48 = (int8x16_t *)&v9->u64[1];
            }
            while (&v9->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v58 = (unint64_t)(v12 - 2) >> 1;
            v90 = v58;
            v86 = a2;
            do
            {
              v59 = v58;
              if (v90 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v9->i64[v60];
                if (2 * v58 + 2 < v12 && sub_22ED25EF4(*a3, *v61, v61[1]))
                {
                  ++v61;
                  v60 = 2 * v59 + 2;
                }
                v62 = &v9->i64[v59];
                result = sub_22ED25EF4(*a3, *v61, *v62);
                if ((result & 1) == 0)
                {
                  v63 = *v62;
                  do
                  {
                    v64 = v61;
                    *v62 = *v61;
                    if (v90 < v60)
                      break;
                    v65 = (2 * v60) | 1;
                    v61 = &v9->i64[v65];
                    v66 = 2 * v60 + 2;
                    if (v66 < v12 && sub_22ED25EF4(*a3, *v61, v61[1]))
                    {
                      ++v61;
                      v65 = v66;
                    }
                    result = sub_22ED25EF4(*a3, *v61, v63);
                    v62 = v64;
                    v60 = v65;
                  }
                  while (!(_DWORD)result);
                  *v64 = v63;
                  a2 = v86;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            do
            {
              v67 = a2;
              v68 = 0;
              v91 = v9->i64[0];
              v69 = (uint64_t *)v9;
              do
              {
                v70 = &v69[v68 + 1];
                v71 = (2 * v68) | 1;
                v72 = 2 * v68 + 2;
                if (v72 < v12)
                {
                  result = sub_22ED25EF4(*a3, *v70, v69[v68 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v70;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69 = v70;
                v68 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v67 - 8);
              if (v70 == (uint64_t *)&v67[-1].u64[1])
              {
                *v70 = v91;
              }
              else
              {
                *v70 = a2->i64[0];
                a2->i64[0] = v91;
                v73 = (char *)v70 - (char *)v9 + 8;
                if (v73 >= 9)
                {
                  v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                  v75 = &v9->i64[v74];
                  result = sub_22ED25EF4(*a3, *v75, *v70);
                  if ((_DWORD)result)
                  {
                    v76 = (int8x16_t *)((char *)v67 - 8);
                    v77 = *v70;
                    do
                    {
                      v78 = v75;
                      *v70 = *v75;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = &v9->i64[v74];
                      result = sub_22ED25EF4(*a3, *v75, v77);
                      v70 = v78;
                    }
                    while ((result & 1) != 0);
                    *v78 = v77;
                    a2 = v76;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9->i64[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_22ED25F90(v14, v9->i64, v89, a3);
        }
        else
        {
          sub_22ED25F90(v9->i64, v14, v89, a3);
          sub_22ED25F90(&v9->i64[1], v14 - 1, i64, a3);
          sub_22ED25F90(v9[1].i64, &v9->i64[v13 + 1], v87, a3);
          sub_22ED25F90(v14 - 1, v14, &v9->i64[v13 + 1], a3);
          v15 = v9->i64[0];
          v9->i64[0] = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_22ED25EF4(*a3, v9[-1].i64[1], v9->i64[0]))
        {
          v30 = v9->i64[0];
          result = sub_22ED25EF4(*a3, v9->i64[0], *v89);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v31 = v10->i64[1];
              v10 = (int8x16_t *)((char *)v10 + 8);
              result = sub_22ED25EF4(*a3, v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v32 = (int8x16_t *)&v9->u64[1];
            do
            {
              v10 = v32;
              if (v32 >= a2)
                break;
              v32 = (int8x16_t *)((char *)v32 + 8);
              result = sub_22ED25EF4(*a3, v30, v10->i64[0]);
            }
            while (!(_DWORD)result);
          }
          v33 = a2;
          if (v10 < a2)
          {
            v33 = a2;
            do
            {
              v34 = v33[-1].i64[1];
              v33 = (int8x16_t *)((char *)v33 - 8);
              result = sub_22ED25EF4(*a3, v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v33)
          {
            v35 = v10->i64[0];
            v10->i64[0] = v33->i64[0];
            v33->i64[0] = v35;
            do
            {
              v36 = v10->i64[1];
              v10 = (int8x16_t *)((char *)v10 + 8);
            }
            while (!sub_22ED25EF4(*a3, v30, v36));
            do
            {
              v37 = v33[-1].i64[1];
              v33 = (int8x16_t *)((char *)v33 - 8);
              result = sub_22ED25EF4(*a3, v30, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = &v10[-1].i64[1];
          if (&v10[-1].u64[1] != (unint64_t *)v9)
            v9->i64[0] = *v38;
          a5 = 0;
          *v38 = v30;
          continue;
        }
        v16 = 0;
        v17 = v9->i64[0];
        while (sub_22ED25EF4(*a3, v9->i64[++v16], v17))
          ;
        v19 = &v9->i8[v16 * 8];
        v20 = a2;
        if (v16 == 1)
        {
          do
          {
            if (v19 >= (char *)a2)
              break;
            v22 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!sub_22ED25EF4(*a3, v22, v17));
        }
        else
        {
          do
          {
            v21 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!sub_22ED25EF4(*a3, v21, v17));
        }
        v10 = (int8x16_t *)((char *)v9 + v16 * 8);
        if (v19 < (char *)a2)
        {
          v23 = a2;
          do
          {
            v24 = v10->i64[0];
            v10->i64[0] = v23->i64[0];
            v23->i64[0] = v24;
            do
            {
              v25 = v10->i64[1];
              v10 = (int8x16_t *)((char *)v10 + 8);
            }
            while (sub_22ED25EF4(*a3, v25, v17));
            do
            {
              v26 = v23[-1].i64[1];
              v23 = (int8x16_t *)((char *)v23 - 8);
            }
            while (!sub_22ED25EF4(*a3, v26, v17));
          }
          while (v10 < v23);
        }
        v27 = &v10[-1].i64[1];
        if (&v10[-1].u64[1] != (unint64_t *)v9)
          v9->i64[0] = *v27;
        *v27 = v17;
        v28 = v19 >= (char *)a2;
        a2 = v20;
        if (!v28)
        {
LABEL_30:
          result = sub_22ED2574C(v9, &v10[-1].u64[1], a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v29 = sub_22ED26070(v9, (int8x16_t *)((char *)v10 - 8), a3);
        result = sub_22ED26070(v10, v20, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = (int8x16_t *)((char *)v10 - 8);
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22ED25EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  unsigned int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (a2 == a3)
    return 0;
  v3 = *(_WORD *)(a3 + 16);
  if (v3 != *(_WORD *)(a2 + 16))
  {
    v4 = sub_22ED256E0(*(_WORD *)(a2 + 16));
    return v4 < sub_22ED256E0(v3);
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    return 0;
  v7 = *(_DWORD *)(v6 + 24);
  v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
    return v7 != 0;
  if (!v7)
    return 0;
  v9 = *(_DWORD *)(v8 + 24);
  return !v9 || sub_22F1E3C34(*(_QWORD **)(a1 + 112), v7, v9);
}

BOOL sub_22ED25F90(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_22ED25EF4(*a4, *a2, *a1);
  result = sub_22ED25EF4(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_22ED25EF4(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_22ED25EF4(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_22ED26070(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int8 *v15;
  uint64_t *v16;
  uint64_t *i64;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_22ED25EF4(*a3, a2[-1].i64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      sub_22ED25F90(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_22ED26298(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      v18 = &a1[1].i64[1];
      sub_22ED26298(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      if (sub_22ED25EF4(*a3, a2[-1].i64[1], a1[1].i64[1]))
      {
        v19 = *v18;
        *v18 = a2[-1].i64[1];
        a2[-1].i64[1] = v19;
        if (sub_22ED25EF4(*a3, *v18, *i64))
        {
          v20 = *i64;
          v21 = *v18;
          *i64 = *v18;
          *v18 = v20;
          if (sub_22ED25EF4(*a3, v21, a1->i64[1]))
          {
            v23 = a1->i64[1];
            v22 = a1[1].i64[0];
            v24 = a1->i64[0];
            a1->i64[1] = v22;
            a1[1].i64[0] = v23;
            if (sub_22ED25EF4(*a3, v22, v24))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v9 = a1[1].i64;
      sub_22ED25F90(a1->i64, &a1->i64[1], a1[1].i64, a3);
      v10 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22ED25EF4(*a3, *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = &a1->i8[v14];
        *(uint64_t *)((char *)&a1[1].i64[1] + v14) = *(uint64_t *)((char *)a1[1].i64 + v14);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!sub_22ED25EF4(*a3, v13, *((_QWORD *)v15 + 1)))
        {
          v16 = (uint64_t *)((char *)&a1[1].i64[1] + v14);
          goto LABEL_13;
        }
      }
      v16 = (uint64_t *)a1;
LABEL_13:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (uint64_t *)a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == (uint64_t *)a2)
      return 1;
  }
}

BOOL sub_22ED26298(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22ED25F90(a1, a2, a3, a5);
  result = sub_22ED25EF4(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_22ED25EF4(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_22ED25EF4(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_22ED26348(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  int v43;
  unint64_t v44;
  unsigned int v45[24];
  uint64_t v46;
  void *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE v53[12];
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  v50 = v4;
  v51 = a2;
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((v8 >> 19) & 0x1FE) - 166 < 0x14)
      return 0;
  }
  else
  {
    if (v7 && v8 == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL)
      {
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
        v8 = *(_DWORD *)(v7 + 16);
        goto LABEL_13;
      }
      return 0;
    }
    if (v8 == 9)
      return 0;
  }
LABEL_13:
  if (v8 == 32)
    return 1;
  if (v8 != 45)
  {
    if ((sub_22F10DFD8(v6) & 1) == 0)
    {
LABEL_69:
      if (*sub_22EFFA6B0((unsigned __int8 *)a2) == 225)
      {
        sub_22EFF605C(a2);
        sub_22E8FCA40(a1, v35, 0x101Au, 0, (uint64_t)&v47);
        v36 = sub_22E8901B8((uint64_t)&v47, &v50);
        sub_22EFF605C(v51);
        *(_QWORD *)&v53[4] = 0;
        v54 = 0;
        v56 = 0;
        v57 = 0x100000000000000;
        v55 = 64;
        v52 = (_QWORD *)(v37 | ((unint64_t)v37 << 32));
        v53[0] = 0;
        v58 = 0;
        sub_22E890748(v36, &v52);
        if (SHIBYTE(v57) < 0)
          operator delete((void *)v55);
      }
      else
      {
        sub_22EFF605C(a2);
        sub_22E8FCA40(a1, v38, 0x101Bu, 0, (uint64_t)&v47);
        sub_22E8901B8((uint64_t)&v47, &v50);
      }
      sub_22E903BEC((unsigned int *)&v47);
      return 2;
    }
    return 1;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) == 0 || sub_22F1110EC(v7, 0))
    goto LABEL_69;
  sub_22EFF605C(a2);
  v47 = &unk_24FAB6ED0;
  v48 = 4093;
  v49 = &v51;
  if ((sub_22EE8B0B0((uint64_t)a1, v12, v4) & 1) != 0)
    return 2;
  v52 = &v53[8];
  *(_QWORD *)v53 = 0x400000000;
  v13 = sub_22F114198(*(_QWORD *)(v7 + 24));
  v14 = sub_22EFD4DF4(v13);
  if ((_QWORD *)v14 == v15)
  {
    v41 = 1;
    v40 = 1;
    goto LABEL_80;
  }
  v16 = (_QWORD *)v14;
  v17 = v15;
  v18 = 0;
  v19 = 0;
  do
  {
    v20 = *v16 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = *(_DWORD *)(v20 + 28);
    if ((v21 & 0x7Fu) <= 0x2F && ((1 << (v21 & 0x7F)) & 0xC00000060000) != 0)
    {
      v20 = sub_22EFBAEA4(*v16 & 0xFFFFFFFFFFFFFFFCLL);
      v21 = *(_DWORD *)(v20 + 28);
    }
    if ((v21 & 0x7F) == 0x38)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v23)
        v24 = *(unsigned __int8 *)(v23 + 16) - 27 > 0xFFFFFFFD;
      else
        v24 = 0;
      if (!v24)
        v23 = sub_22F10CF48(v23);
      v25 = *(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFF0;
      v26 = *(_QWORD *)v25;
      if (!*(_QWORD *)v25 || (v27 = *(_DWORD *)(v26 + 16), (v27 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_34;
        v26 = sub_22F10CF48(v26);
        if (!v26)
          goto LABEL_34;
        v27 = *(_DWORD *)(v26 + 16);
      }
      if ((v27 & 0x100000) != 0)
      {
        do
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v26)
          {
            v34 = *(_DWORD *)(v26 + 16);
            if ((v34 & 0xFE) == 0x28)
              continue;
          }
          v26 = sub_22F10CF48(v26);
          v34 = *(_DWORD *)(v26 + 16);
        }
        while ((v34 & 0x100000) != 0);
      }
      v25 = *(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_34:
      v28 = *(_QWORD *)v25;
      v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF0);
      v30 = *(_DWORD *)(v29 + 16);
      if (v29)
        v31 = v30 == 11;
      else
        v31 = 0;
      if (v31)
      {
        if (((*(_DWORD *)(v29 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_46;
      }
      else if (v29 && v30 == 44)
      {
        v32 = sub_22F114198(*(_QWORD *)(v29 + 24));
        if ((*(_BYTE *)(v32 + 74) & 1) == 0 && *(_QWORD *)(v32 + 128) <= 7uLL)
        {
          v28 = *(_QWORD *)v25;
LABEL_46:
          if (((!v28 || *(_BYTE *)(v28 + 16) != 32)
             && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
              || (v28 = sub_22F10CF48(v28)) == 0)
             || !sub_22E5761BC(v28))
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
          {
            goto LABEL_56;
          }
          ++v19;
          goto LABEL_53;
        }
      }
      else if (v30 != 9)
      {
        goto LABEL_46;
      }
      ++v18;
LABEL_53:
      v33 = *(unsigned int *)v53;
      if (*(unsigned int *)v53 >= (unint64_t)*(unsigned int *)&v53[4])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = *(unsigned int *)v53;
      }
      v52[v33] = v20;
      ++*(_DWORD *)v53;
    }
LABEL_56:
    ++v16;
  }
  while (v16 != v17);
  v40 = v19 == 0;
  if (v18 == 1 && !v19)
  {
    v11 = 0;
    goto LABEL_90;
  }
  v41 = v18 == 0;
  if (!v18 && v19 == 1)
  {
    v11 = 1;
    goto LABEL_90;
  }
LABEL_80:
  if (v41 && v40)
  {
    sub_22EFF605C(v51);
    sub_22E8FCA40(a1, v42, 0x101Bu, 0, (uint64_t)&v47);
    v46 = *(_QWORD *)(v51 + 8);
    sub_22E8901B8((uint64_t)&v47, &v46);
    sub_22E903BEC((unsigned int *)&v47);
  }
  else
  {
    sub_22EFF605C(v51);
    sub_22E8FCA40(a1, v43, 0x1004u, 0, (uint64_t)&v47);
    v46 = *(_QWORD *)(v51 + 8);
    sub_22E8901B8((uint64_t)&v47, &v46);
    sub_22E903BEC((unsigned int *)&v47);
    if (*(_DWORD *)v53)
    {
      v44 = 0;
      do
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v52[v44] + 24), 0x157Eu, 0, (uint64_t)v45);
        sub_22E903BEC(v45);
        ++v44;
      }
      while (v44 < *(unsigned int *)v53);
    }
  }
  v11 = 2;
LABEL_90:
  if (v52 != (_QWORD *)&v53[8])
    free(v52);
  return v11;
}

uint64_t sub_22ED26924(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t (**v15)();
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[32];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  do
  {
    v4 = (uint64_t)a2;
    v5 = *a2;
    if (v5 > 0xD5)
    {
      if (v5 == 233)
      {
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_20;
        v5 = *(_DWORD *)a2;
        v7 = a2 + 16;
      }
      else
      {
        if (v5 != 214)
          break;
        v7 = a2 + 24;
      }
    }
    else if (v5 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_20;
      v7 = a2 + 24;
      if (!*(_BYTE *)(v4 + 48))
        v7 = (unsigned __int8 *)(v4 + 32);
      v5 = 155;
    }
    else
    {
      if (v5 != 176)
        break;
      v6 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v6 == -1)
        goto LABEL_20;
      v7 = &a2[8 * v6 + 40];
      v5 = 176;
    }
    a2 = *(unsigned __int8 **)v7;
  }
  while (a2 != (unsigned __int8 *)v4);
  switch(v5)
  {
    case 0xCDu:
      v11 = *(_DWORD *)(v4 + 32);
      v17 = -1;
      v18 = v11;
      v19 = 1;
      v20 = v22;
      v21 = 0x400000000;
      v15 = &off_24FAB9060;
      v16 = a1;
      v23 = v4;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v8 = sub_22ED26C00((uint64_t *)&v15);
      break;
    case 0xD0u:
      sub_22F0D4E74(v4);
      v17 = -1;
      v18 = v12;
      v19 = 1;
      v20 = v22;
      v21 = 0x400000000;
      v15 = &off_24FAB90F0;
      v16 = a1;
      v23 = v4;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v13 = sub_22ED26EB0((uint64_t)&v15);
      if ((v13 & 1) != 0)
        v8 = 1;
      else
        v8 = v13;
      break;
    case 0xB7u:
      sub_22F343D00(v4);
      v17 = -1;
      v18 = v14;
      v19 = 1;
      v20 = v22;
      v21 = 0x400000000;
      v15 = &off_24FAB9138;
      v16 = a1;
      v23 = v4;
      *(_QWORD *)&v24 = 0;
      *((_QWORD *)&v24 + 1) = (char *)&v25 + 8;
      *(_QWORD *)&v25 = 0x400000000;
      v8 = sub_22ED26EB0((uint64_t)&v15);
      v15 = &off_24FAB9138;
      if (*((__int128 **)&v24 + 1) != (__int128 *)((char *)&v25 + 8))
        free(*((void **)&v24 + 1));
      break;
    default:
LABEL_20:
      sub_22ED26FE4((uint64_t)&v15, a1, v4, 1);
      v8 = sub_22ED26EB0((uint64_t)&v15);
      v15 = &off_24FAB9138;
      if (*((__int128 **)&v24 + 1) != (__int128 *)((char *)&v25 + 8))
        free(*((void **)&v24 + 1));
      v15 = (uint64_t (**)())off_24FAB90A8;
      v9 = v20;
      if (v20 != v22)
        goto LABEL_23;
      return v8;
  }
  v15 = (uint64_t (**)())off_24FAB90A8;
  v9 = v20;
  if (v20 != v22)
LABEL_23:
    free(v9);
  return v8;
}

uint64_t sub_22ED26C00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23[24];

  v2 = a1[10];
  if ((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFFCLL) == 4)
  {
    sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(v2 + 32), 0xDC8u, 0, (uint64_t)v23);
    sub_22F0D4E74(a1[10]);
    v22 = v3;
    sub_22E8906A0((uint64_t)v23, &v22);
    sub_22E903BEC(v23);
    return 1;
  }
  v4 = sub_22ED26EB0((uint64_t)a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = a1[10];
  v6 = *(_QWORD *)(v5 + 16);
  if ((v6 & 4) == 0)
  {
    v7 = a1[13];
    if ((*(_BYTE *)(v7 + 60) & 2) == 0)
    {
      sub_22F33B4E0((_QWORD *)a1[1], v6 & 0xFFFFFFFFFFFFFFF8, v7, *(_DWORD *)(v5 + 32));
      v5 = a1[10];
      v6 = *(_QWORD *)(v5 + 16);
    }
  }
  if ((v6 & 4) == 0 && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 1) & 3) == 0)
  {
    v8 = sub_22F3C74D0(v5, *(_QWORD *)(a1[1] + 88));
    v9 = *(_QWORD *)(a1[10] + 16) & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v9 + 16);
    v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 4) != 0)
      v11 = (_QWORD *)*v11;
    sub_22F409EE0((uint64_t *)(v9 + 56), v8, (unint64_t)v11, 3);
    v13 = v12;
    v14 = *(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((v14 && *(_BYTE *)(v14 + 16) == 32
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
       && (v14 = sub_22F10CF48(v14)) != 0)
      && sub_22E5761BC(v14)
      && ((v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v15 + 16) == 32
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
       && (v15 = sub_22F10CF48(v15)) != 0)
      && !sub_22E5761BC(v15))
    {
      v4 = sub_22E90092C(a1[1], v4 & 0xFFFFFFFFFFFFFFFELL, v13, 1, 0, 0);
    }
    v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v16 & 8) != 0 && (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
    {
      v17 = a1[1];
      v18 = a1[10];
      if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(v17 + 104) + 32), 0x183Cu, *(_DWORD *)(v18 + 32), *(_QWORD *)(v17 + 104)) != 1)
      {
        v19 = *(unsigned int *)(v17 + 1904);
        if ((_DWORD)v19)
          v20 = *(_QWORD *)(*(_QWORD *)(v17 + 1896) + 8 * v19 - 8);
        else
          v20 = 0;
        sub_22E8FBEA0(v20, v18);
      }
    }
  }
  return v4;
}

_QWORD *sub_22ED26E30(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24FAB90A8;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

_QWORD *sub_22ED26E70(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24FAB90A8;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

uint64_t sub_22ED26EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((v3 & 1) != 0)
    return 1;
  v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v7 - 8);
  if (*(unsigned __int8 *)v8 == 210)
    *v8 &= ~0x40000u;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

_QWORD *sub_22ED26F84(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAB9138;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 14)
    free(v2);
  *a1 = off_24FAB90A8;
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

uint64_t sub_22ED26FE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;

  sub_22F0D4E74(a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 20) = v8;
  *(_BYTE *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  *(_QWORD *)a1 = &off_24FAB9138;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  v19 = *(_QWORD *)(a3 + 24);
  sub_22F24C084((uint64_t *)(a1 + 96), a1 + 112, &v19);
  v9 = 0;
  v10 = *(unsigned __int8 **)(a3 + 16);
  if (!v10)
    goto LABEL_19;
  do
  {
    v9 = v10;
    v11 = *v10;
    if (v11 > 0xD5)
    {
      if (v11 == 233)
      {
        if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
          goto LABEL_18;
        v11 = *(_DWORD *)v10;
        v13 = v10 + 16;
      }
      else
      {
        if (v11 != 214)
          break;
        v13 = v10 + 24;
      }
    }
    else if (v11 == 155)
    {
      if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
        goto LABEL_18;
      v13 = v10 + 24;
      if (!v9[48])
        v13 = v9 + 32;
      v11 = 155;
    }
    else
    {
      if (v11 != 176)
        break;
      v12 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v12 == -1)
        goto LABEL_18;
      v13 = &v10[8 * v12 + 40];
      v11 = 176;
    }
    v10 = *(unsigned __int8 **)v13;
  }
  while (v10 != v9);
LABEL_17:
  while (v11 == 184)
  {
LABEL_19:
    v15 = *(_QWORD *)(a1 + 96);
    v19 = *((_QWORD *)v9 + 3);
    sub_22F24C084((uint64_t *)(a1 + 96), v15, &v19);
    v16 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
    if (v16)
    {
      while (1)
      {
        v9 = v16;
        v11 = *v16;
        if (v11 > 0xD5)
        {
          if (v11 == 233)
          {
            if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
              goto LABEL_18;
            v11 = *(_DWORD *)v16;
            v18 = v16 + 16;
          }
          else
          {
            if (v11 != 214)
              goto LABEL_17;
            v18 = v16 + 24;
          }
        }
        else if (v11 == 155)
        {
          if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
            goto LABEL_18;
          v18 = v16 + 24;
          if (!v9[48])
            v18 = v9 + 32;
          v11 = 155;
        }
        else
        {
          if (v11 != 176)
            goto LABEL_17;
          v17 = *((unsigned int *)v16 + 5);
          if ((_DWORD)v17 == -1)
            goto LABEL_18;
          v18 = &v16[8 * v17 + 40];
          v11 = 176;
        }
        v16 = *(unsigned __int8 **)v18;
        if (v16 == v9)
          goto LABEL_17;
      }
    }
    v11 = 0;
    v9 = 0;
  }
LABEL_18:
  *(_QWORD *)(a1 + 80) = v9;
  return a1;
}

uint64_t sub_22ED2720C(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  unsigned int v34[24];
  uint64_t v35;
  _BOOL4 v36;
  int v37;
  unsigned int v38[24];
  uint64_t v39;
  uint64_t (**v40)();
  _QWORD *v41;
  int v42;
  int v43;
  char v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[32];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a5 + 1) & 0x80) != 0)
  {
    v17 = a1[11];
    v18 = *(_QWORD *)(v17 + 16832);
    if (a1[162] == a1[161])
    {
      v19 = 0;
      v20 = a3;
    }
    else
    {
      v19 = a1[162];
      v20 = a3;
      if (HIDWORD(v19))
      {
        v21 = 32;
        goto LABEL_30;
      }
    }
    v21 = 24;
LABEL_30:
    v15 = sub_22E3CD3D4(v17 + 2032, v21, 3);
    sub_22F0031D0(v15, v17, a5, a4, v18, 0, 0, v20, 0, v19);
    return v15;
  }
  v10 = (unsigned __int8 *)a5;
  do
  {
    v11 = (uint64_t)v10;
    v12 = *v10;
    if (v12 > 0xD5)
    {
      if (v12 == 233)
      {
        if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
          goto LABEL_21;
        v12 = *(_DWORD *)v10;
        v14 = v10 + 16;
      }
      else
      {
        if (v12 != 214)
          break;
        v14 = v10 + 24;
      }
    }
    else if (v12 == 155)
    {
      if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
        goto LABEL_21;
      v14 = v10 + 24;
      if (!*(_BYTE *)(v11 + 48))
        v14 = (unsigned __int8 *)(v11 + 32);
      v12 = 155;
    }
    else
    {
      if (v12 != 176)
        break;
      v13 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v13 == -1)
        goto LABEL_21;
      v14 = &v10[8 * v13 + 40];
      v12 = 176;
    }
    v10 = *(unsigned __int8 **)v14;
  }
  while (v10 != (unsigned __int8 *)v11);
  switch(v12)
  {
    case 0xCDu:
      v22 = *(_DWORD *)(v11 + 32);
      v42 = -1;
      v43 = v22;
      v44 = 0;
      v45 = v47;
      v46 = 0x400000000;
      v40 = &off_24FAB9060;
      v41 = a1;
      v48 = v11;
      v23 = a3;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      if ((sub_22ED296D8((uint64_t *)&v40, 1) & 1) != 0)
      {
        if (sub_22ED29444((uint64_t *)&v40))
        {
          v24 = sub_22ED276B8((uint64_t)&v40, a2, v23, a4, a5);
LABEL_38:
          v15 = v24;
          goto LABEL_43;
        }
        sub_22E8FCA40(v41, v23, 0xFB7u, 0, (uint64_t)v38);
        LODWORD(v35) = (a4 & 0xFFFFFFFD) == 1;
        v25 = sub_22E89519C((uint64_t)v38, (unsigned int *)&v35);
        v26 = sub_22E894538(v25, (uint64_t *)&v51 + 1);
        sub_22F0D4E74(a5);
        v39 = v27;
        v28 = &v39;
      }
      else
      {
        v39 = 0;
        if (sub_22ED2B164((uint64_t *)&v40, a5, &v39))
        {
          if ((v39 & 1) == 0)
          {
            v24 = sub_22EB2941C(v41, a2, v23, a4, v39 & 0xFFFFFFFFFFFFFFFELL);
            goto LABEL_38;
          }
LABEL_42:
          v15 = 1;
          goto LABEL_43;
        }
        sub_22E8FCA40(v41, v23, 0xFD9u, 0, (uint64_t)v38);
        v37 = (*(_DWORD *)(v48 + 16) >> 2) & 1;
        v29 = sub_22E89519C((uint64_t)v38, (unsigned int *)&v37);
        v36 = (a4 & 0xFFFFFFFD) == 1;
        v30 = sub_22E89519C(v29, (unsigned int *)&v36);
        v26 = sub_22E894538(v30, (uint64_t *)&v51);
        sub_22F0D4E74(a5);
        v35 = v31;
        v28 = &v35;
      }
      sub_22E8906A0(v26, v28);
      sub_22E903BEC(v38);
      goto LABEL_42;
    case 0xD0u:
      sub_22E8FCA40(a1, a3, 0xDDDu, 0, (uint64_t)v34);
      sub_22E903BEC(v34);
      return 1;
    case 0xB7u:
      sub_22F343D00(v11);
      v42 = -1;
      v43 = v33;
      v44 = 0;
      v45 = v47;
      v46 = 0x400000000;
      v40 = &off_24FAB9138;
      v41 = a1;
      v48 = v11;
      *(_QWORD *)&v49 = 0;
      *((_QWORD *)&v49 + 1) = (char *)&v50 + 8;
      *(_QWORD *)&v50 = 0x400000000;
      v15 = sub_22ED276B8((uint64_t)&v40, a2, a3, a4, a5);
      v40 = &off_24FAB9138;
      if (*((__int128 **)&v49 + 1) != (__int128 *)((char *)&v50 + 8))
        free(*((void **)&v49 + 1));
LABEL_43:
      v40 = (uint64_t (**)())off_24FAB90A8;
      v16 = v45;
      if (v45 == v47)
        return v15;
      goto LABEL_44;
  }
LABEL_21:
  sub_22ED26FE4((uint64_t)&v40, (uint64_t)a1, v11, 0);
  v15 = sub_22ED276B8((uint64_t)&v40, a2, a3, a4, a5);
  v40 = &off_24FAB9138;
  if (*((__int128 **)&v49 + 1) != (__int128 *)((char *)&v50 + 8))
    free(*((void **)&v49 + 1));
  v40 = (uint64_t (**)())off_24FAB90A8;
  v16 = v45;
  if (v45 != v47)
LABEL_44:
    free(v16);
  return v15;
}

uint64_t sub_22ED276B8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a5);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v11 = v10;
  if ((v10 & 1) != 0)
    return 1;
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if (a4 <= 1
    && ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) != 0
     || sub_22ED299E0(v10 & 0xFFFFFFFFFFFFFFFELL)))
  {
    v11 = (unint64_t)sub_22ED28D74(a1, v11 & 0xFFFFFFFFFFFFFFFELL);
    v13 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 16) = v13 - 1;
    v14 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v13 - 8);
    if (*(unsigned __int8 *)v14 == 210)
      *v14 &= ~0x40000u;
  }
  v15 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 16480) & 0xFFFFFFFFFFFFFFF0));
  v44 = v15;
  v42 = v9;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v43);
  }
  else
  {
    v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    if (!v15)
      LOBYTE(v16) = 0;
    v43 = v16 & 1;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v18 = *(_QWORD *)(v17 + 16480);
  v19 = *(_DWORD *)(a1 + 20);
  v20 = sub_22E3CD3D4(v17 + 2032, 32, 3);
  sub_22EFF8F1C(v20, v17, (uint64_t)&v43, v18, v19);
  if ((a4 & 0xFFFFFFFD) != 0)
    v21 = 6;
  else
    v21 = 5;
  v22 = sub_22EB4785C(*(_QWORD *)(a1 + 8), a2, a3, v21, v11 & 0xFFFFFFFFFFFFFFFELL, v20);
  if ((v22 & 1) == 0)
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v24 = (a4 & 0xFFFFFFFE) == 2 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) : 0;
    v26 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, v23, a3, v24);
    if ((v26 & 1) == 0)
    {
      v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(_DWORD *)(a1 + 40);
      if (v28 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v28) = v27;
      ++*(_DWORD *)(a1 + 40);
      if ((a4 & 0xFFFFFFFE) == 2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v30 = v29 && (*(_DWORD *)(v29 + 16) & 0xFF800FF) == 86507531;
        if (!v30 && ((*(_BYTE *)(v27 + 1) & 0x80) != 0 || sub_22ED299E0(v27)))
        {
          v31 = *(unsigned int *)(a1 + 40);
          *(_DWORD *)(a1 + 16) = v31 - 1;
          v32 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v31 - 8);
          if (*(unsigned __int8 *)v32 == 210)
            *v32 &= ~0x40000u;
        }
      }
      v33 = *(uint64_t **)(a1 + 8);
      v34 = v33[11];
      v35 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v35 + 17) & 4) != 0)
      {
        v37 = 0;
      }
      else
      {
        v36 = sub_22EF5CDF0(v33[11], v35);
        v37 = v36 >= sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 16480) & 0xFFFFFFFFFFFFFFF0));
        v33 = *(uint64_t **)(a1 + 8);
      }
      if (v33[162] == v33[161])
      {
        v38 = 0;
      }
      else
      {
        v38 = v33[162];
        if (HIDWORD(v38))
        {
          v39 = 32;
          goto LABEL_41;
        }
      }
      v39 = 24;
LABEL_41:
      v40 = sub_22E3CD3D4(v34 + 2032, v39, 3);
      sub_22F0031D0(v40, v34, v42, a4, v12, 1, 0, a3, v37, v38);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v40);
      goto LABEL_42;
    }
  }
  v25 = 1;
LABEL_42:
  if (v44 >= 0x41 && v43)
    MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
  return v25;
}

uint64_t sub_22ED27A90(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  uint64_t v12;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46[24];
  uint64_t v47;
  uint64_t (**v48)();
  _QWORD *v49;
  int v50;
  int v51;
  BOOL v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[32];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59[3];
  uint64_t v60;

  v6 = (unsigned __int8 *)a6;
  v60 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a5 + 1) & 0x80) != 0 || (*(_BYTE *)(a6 + 1) & 0x80) != 0)
  {
    v23 = a1[11];
    v24 = *(_QWORD *)(v23 + 16832);
    if (a1[162] == a1[161])
    {
      v25 = 0;
      v26 = a3;
    }
    else
    {
      v25 = a1[162];
      v26 = a3;
      if (HIDWORD(v25))
      {
        v27 = 40;
        goto LABEL_41;
      }
    }
    v27 = 32;
LABEL_41:
    v21 = sub_22E3CD3D4(v23 + 2032, v27, 3);
    sub_22F002E24((int *)v21, v28, (_DWORD *)a5, v6, a4, v24, 0, 0, v26, v25);
    return v21;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v12 + 16) & 0xFF80000u) >= 0x8200001 && v12 != 0 && *(_DWORD *)(v12 + 16) == 11)
  {
    v15 = sub_22EB19A28(a1);
    if ((v15 & 1) != 0)
      return 1;
    v6 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  }
  v16 = (unsigned __int8 *)a5;
  do
  {
    v17 = (uint64_t)v16;
    v18 = *v16;
    if (v18 > 0xD5)
    {
      if (v18 == 233)
      {
        if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
          goto LABEL_32;
        v18 = *(_DWORD *)v16;
        v20 = v16 + 16;
      }
      else
      {
        if (v18 != 214)
          break;
        v20 = v16 + 24;
      }
    }
    else if (v18 == 155)
    {
      if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
        goto LABEL_32;
      v20 = v16 + 24;
      if (!*(_BYTE *)(v17 + 48))
        v20 = (unsigned __int8 *)(v17 + 32);
      v18 = 155;
    }
    else
    {
      if (v18 != 176)
        break;
      v19 = *((unsigned int *)v16 + 5);
      if ((_DWORD)v19 == -1)
        goto LABEL_32;
      v20 = &v16[8 * v19 + 40];
      v18 = 176;
    }
    v16 = *(unsigned __int8 **)v20;
  }
  while (v16 != (unsigned __int8 *)v17);
  switch(v18)
  {
    case 0xCDu:
      v30 = *(_DWORD *)(v17 + 32);
      v50 = -1;
      v51 = v30;
      v52 = (_DWORD)a4 == 21;
      v53 = v55;
      v54 = 0x400000000;
      v48 = &off_24FAB9060;
      v49 = a1;
      v56 = v17;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)v59 = 0u;
      if ((sub_22ED296D8((uint64_t *)&v48, 1) & 1) != 0)
      {
        if ((_DWORD)a4 == 21 || sub_22ED29444((uint64_t *)&v48))
        {
          v21 = sub_22ED2808C((uint64_t)&v48, a2, a3, a4, a5, v6);
          if ((v21 & 1) == 0)
          {
            v31 = v49;
            if ((*(_WORD *)(v49[9] + 148) & 2) == 0)
              goto LABEL_65;
            v32 = *((_QWORD *)&v57 + 1);
            if (!*((_QWORD *)&v57 + 1))
              goto LABEL_65;
LABEL_57:
            sub_22F3112E4(v31, *(unsigned __int8 **)(v32 + 16), v6);
            sub_22E99011C((uint64_t)v49, a3, a5, v6);
            goto LABEL_65;
          }
LABEL_64:
          v21 = 1;
          goto LABEL_65;
        }
        sub_22E8FCA40(v49, a3, 0xFB6u, 0, (uint64_t)v46);
        sub_22F0D4E74(a5);
        v47 = v40;
        v37 = sub_22E8906A0((uint64_t)v46, &v47);
        sub_22F0D4E74((uint64_t)v6);
        v44 = v41;
        v39 = &v44;
      }
      else
      {
        v47 = 0;
        if (sub_22ED2B164((uint64_t *)&v48, a5, &v47))
        {
          if ((v47 & 1) == 0)
          {
            v21 = sub_22EB4785C(v49, a2, a3, a4, v47 & 0xFFFFFFFFFFFFFFFELL, v6);
            goto LABEL_65;
          }
          goto LABEL_64;
        }
        sub_22E8FCA40(v49, a3, 0xFD8u, 0, (uint64_t)v46);
        v45 = (*(_DWORD *)(v56 + 16) >> 2) & 1;
        v34 = sub_22E89519C((uint64_t)v46, (unsigned int *)&v45);
        v35 = sub_22E894538(v34, v59);
        sub_22F0D4E74(a5);
        v44 = v36;
        v37 = sub_22E8906A0(v35, &v44);
        sub_22F0D4E74((uint64_t)v6);
        v43 = v38;
        v39 = &v43;
      }
      sub_22E8906A0(v37, v39);
      sub_22E903BEC(v46);
      goto LABEL_64;
    case 0xD0u:
      sub_22F0D4E74(v17);
      v50 = -1;
      v51 = v33;
      v52 = (_DWORD)a4 == 21;
      v53 = v55;
      v54 = 0x400000000;
      v48 = &off_24FAB90F0;
      v49 = a1;
      v56 = v17;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)v59 = 0u;
      if (sub_22ED2A3C8((uint64_t *)&v48)
        && ((_DWORD)a4 == 21 || sub_22ED29D64((uint64_t *)&v48)))
      {
        v21 = sub_22ED2808C((uint64_t)&v48, a2, a3, a4, a5, v6);
        if ((v21 & 1) == 0)
        {
          v31 = v49;
          if ((*(_WORD *)(v49[9] + 148) & 2) == 0)
            goto LABEL_65;
          v32 = v57;
          if (!(_QWORD)v57)
            goto LABEL_65;
          goto LABEL_57;
        }
      }
      goto LABEL_64;
    case 0xB7u:
      sub_22F343D00(v17);
      v50 = -1;
      v51 = v42;
      v52 = (_DWORD)a4 == 21;
      v53 = v55;
      v54 = 0x400000000;
      v48 = &off_24FAB9138;
      v49 = a1;
      v56 = v17;
      *(_QWORD *)&v57 = 0;
      *((_QWORD *)&v57 + 1) = (char *)&v58 + 8;
      *(_QWORD *)&v58 = 0x400000000;
      v21 = sub_22ED2808C((uint64_t)&v48, a2, a3, a4, a5, v6);
      v48 = &off_24FAB9138;
      if (*((__int128 **)&v57 + 1) != (__int128 *)((char *)&v58 + 8))
        free(*((void **)&v57 + 1));
LABEL_65:
      v48 = (uint64_t (**)())off_24FAB90A8;
      v22 = v53;
      if (v53 == v55)
        return v21;
      goto LABEL_66;
  }
LABEL_32:
  sub_22ED26FE4((uint64_t)&v48, (uint64_t)a1, v17, (_DWORD)a4 == 21);
  v21 = sub_22ED2808C((uint64_t)&v48, a2, a3, a4, a5, v6);
  v48 = &off_24FAB9138;
  if (*((__int128 **)&v57 + 1) != (__int128 *)((char *)&v58 + 8))
    free(*((void **)&v57 + 1));
  v48 = (uint64_t (**)())off_24FAB90A8;
  v22 = v53;
  if (v53 != v55)
LABEL_66:
    free(v22);
  return v21;
}

uint64_t sub_22ED2808C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v8;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  BOOL v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _DWORD *v44;
  int v46;

  LODWORD(v8) = a3;
  v11 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a5);
  v12 = sub_22ED28D74(a1, (uint64_t)a6);
  v13 = v12;
  v14 = *(_QWORD *)(*((_QWORD *)a6 + 1) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_DWORD *)(v14 + 16) & 0xFE00000u) >= 0x8180001 && v14 != 0 && *(_DWORD *)(v14 + 16) == 11;
  if (v16 || (v17 = (unint64_t)v12, *a6 == 180))
  {
    --*(_DWORD *)(a1 + 40);
    v17 = (unint64_t)a6;
  }
  if (a4 == 21)
  {
    v18 = *(_QWORD **)(a1 + 8);
    v19 = *((_QWORD *)v12 + 1);
    v20 = (*v12 >> 8) & 3;
    if (v18[162] == v18[161])
    {
      v21 = 0;
      v8 = v8;
    }
    else
    {
      v21 = v18[162];
      v8 = v8;
      if (HIDWORD(v21))
      {
        v31 = 40;
        goto LABEL_23;
      }
    }
    v31 = 32;
LABEL_23:
    v32 = (int *)sub_22E3CD3D4(v18[11] + 2032, v31, 3);
    sub_22F002E24(v32, v33, v11, v13, 21, v19, v20, 0, v8, v21);
    v27 = v17 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_28;
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((v22 & 1) != 0)
    return 1;
  v23 = a4 <= 28 ? -20 : -13;
  v24 = v22 & 0xFFFFFFFFFFFFFFFELL;
  v8 = v8;
  v25 = sub_22EB4785C(*(_QWORD *)(a1 + 8), a2, v8, (v23 + a4), v22 & 0xFFFFFFFFFFFFFFFELL, v17);
  if ((v25 & 1) != 0)
    return 1;
  v26 = *(_QWORD **)(a1 + 8);
  v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
  v28 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v46 = (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
  if (v26[162] == v26[161])
  {
    v29 = 0;
    v30 = *(_QWORD *)(v24 + 8);
  }
  else
  {
    v29 = v26[162];
    v30 = *(_QWORD *)(v24 + 8);
    if (HIDWORD(v29))
    {
      v34 = 56;
      goto LABEL_27;
    }
  }
  v34 = 48;
LABEL_27:
  v32 = (int *)sub_22E3CD3D4(v26[11] + 2032, v34, 3);
  v36 = sub_22F002F18(v32, v35, v11, v13, a4, v28, v46, 0, v8, v29);
  *((_QWORD *)v36 + 4) = v30;
  *((_QWORD *)v36 + 5) = v28;
LABEL_28:
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v38 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v27, v8, v37);
  if ((v38 & 1) != 0)
    return 1;
  v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
  v40 = *(_DWORD *)(a1 + 40);
  if (v40 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v40) = v39;
  ++*(_DWORD *)(a1 + 40);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v41)
      v42 = (*(_DWORD *)(v41 + 16) & 0xFF800FF) == 86507531;
    else
      v42 = 0;
    if (!v42 && ((*(_BYTE *)(v39 + 1) & 0x80) != 0 || sub_22ED299E0(v39)))
    {
      v43 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 16) = v43 - 1;
      v44 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v43 - 8);
      if (*(unsigned __int8 *)v44 == 210)
        *v44 &= ~0x40000u;
    }
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 16))(a1, v32);
}

unsigned __int8 *sub_22ED28410(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v43;
  char v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  char *v46;
  _QWORD *v47;
  int v48;
  uint64_t (**v49)(uint64_t, uint64_t);

  v3 = *(unsigned __int8 **)(a2 + 16);
  v4 = *v3;
  if (v4 == 113)
  {
    v14 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
    v45 = sub_22ED2B1F4;
    v46 = &v44;
    v47 = a1;
    v48 = 0;
    v49 = &v45;
    v43 = sub_22ED28E28(&v47, v14);
    v15 = *(_DWORD **)(*((_QWORD *)v3 + 3) + 16);
    v16 = a1[11];
    v17 = *((_DWORD *)v3 + 1);
    v18 = (*(_DWORD *)v3 >> 18) & 0x3F;
    v19 = *((_QWORD *)v3 + 1);
    v20 = (*(_DWORD *)v3 >> 8) & 3;
    v21 = (*(_DWORD *)v3 >> 10) & 7;
    if (a1[162] == a1[161])
    {
      v22 = 0;
      v23 = *((_QWORD *)v3 + 4);
      v24 = *((_QWORD *)v3 + 5);
    }
    else
    {
      v22 = a1[162];
      v23 = *((_QWORD *)v3 + 4);
      v24 = *((_QWORD *)v3 + 5);
      if (HIDWORD(v22))
      {
        v36 = 56;
        goto LABEL_19;
      }
    }
    v36 = 48;
LABEL_19:
    v3 = (unsigned __int8 *)sub_22E3CD3D4(v16 + 2032, v36, 3);
    v39 = sub_22F002F18((int *)v3, v38, v43, v15, v18, v19, v20, v21, v17, v22);
    *((_QWORD *)v39 + 4) = v23;
    *((_QWORD *)v39 + 5) = v24;
    return v3;
  }
  if (v4 == 233)
  {
    v5 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
    v45 = sub_22ED2B1F4;
    v46 = &v44;
    v47 = a1;
    v48 = 0;
    v49 = &v45;
    v6 = sub_22ED28E28(&v47, v5);
    v7 = a1[11];
    v8 = *((_DWORD *)v3 + 1);
    v9 = (*(_DWORD *)v3 >> 18) & 0x1F;
    v10 = *((_QWORD *)v3 + 1);
    v11 = (*(_DWORD *)v3 >> 8) & 3;
    v12 = (*(_DWORD *)v3 >> 10) & 7;
    if (a1[162] == a1[161])
    {
      v13 = 0;
    }
    else
    {
      v13 = a1[162];
      if (HIDWORD(v13))
      {
        v35 = 32;
        goto LABEL_17;
      }
    }
    v35 = 24;
LABEL_17:
    v37 = (*(_DWORD *)v3 >> 23) & 1;
    v3 = (unsigned __int8 *)sub_22E3CD3D4(v7 + 2032, v35, 3);
    sub_22F0031D0((uint64_t)v3, v7, (uint64_t)v6, v9, v10, v11, v12, v8, v37, v13);
    return v3;
  }
  if ((v4 & 0xFE) == 0x70)
  {
    v25 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
    v45 = sub_22ED2B1F4;
    v46 = &v44;
    v47 = a1;
    v48 = 0;
    v49 = &v45;
    v26 = sub_22ED28E28(&v47, v25);
    v27 = *(_DWORD **)(*((_QWORD *)v3 + 3) + 16);
    v28 = a1[11];
    v29 = *((_DWORD *)v3 + 1);
    v30 = (*(_DWORD *)v3 >> 18) & 0x3F;
    v31 = *((_QWORD *)v3 + 1);
    v32 = (*(_DWORD *)v3 >> 8) & 3;
    v33 = (*(_DWORD *)v3 >> 10) & 7;
    if (a1[162] == a1[161])
    {
      v34 = 0;
    }
    else
    {
      v34 = a1[162];
      if (HIDWORD(v34))
      {
        v40 = 40;
        goto LABEL_23;
      }
    }
    v40 = 32;
LABEL_23:
    v3 = (unsigned __int8 *)sub_22E3CD3D4(v28 + 2032, v40, 3);
    sub_22F002E24((int *)v3, v41, v26, v27, v30, v31, v32, v33, v29, v34);
    return v3;
  }
  if ((v4 + 118) >= 5u)
  {
    v45 = sub_22ED2B1F4;
    v46 = &v44;
    v47 = a1;
    v48 = 0;
    v49 = &v45;
    return sub_22ED28E28(&v47, v3);
  }
  return v3;
}

void sub_22ED2871C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24FAB90A8;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

unsigned __int8 *sub_22ED2876C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16);
  if ((v4 & 4) != 0)
  {
    v7 = *(_QWORD *)(a1 + 104);
    if (!v7)
      return sub_22F3C2FFC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(_DWORD *)(a1 + 16));
    v6 = (_QWORD *)(v7 + 80);
LABEL_6:
    v8 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v8 & 8) == 0 || (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0xC0)
      return sub_22F3C2FFC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(_DWORD *)(a1 + 16));
    goto LABEL_8;
  }
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v5 + 73) & 2) == 0)
  {
    v6 = (_QWORD *)(v5 + 56);
    goto LABEL_6;
  }
LABEL_8:
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(*(_QWORD *)(v9 + 3688) + 576 * *(unsigned int *)(v9 + 3696) - 576);
  if (v10 > 3 || v10 == 2)
  {
    v13 = *(_QWORD *)(v9 + 104);
    sub_22F0D5A50(a2);
    if (sub_22F1CF68C(*(_QWORD *)(v13 + 32), 0x183Cu, v14, v13) != 1)
    {
      v15 = *(unsigned int *)(v9 + 1904);
      if ((_DWORD)v15)
        v16 = *(_QWORD *)(*(_QWORD *)(v9 + 1896) + 8 * v15 - 8);
      else
        v16 = 0;
      sub_22F343C64(v16, *(_QWORD *)(a1 + 88), (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) >> 1) & 1);
    }
  }
  return sub_22F3C2FFC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(_DWORD *)(a1 + 16));
}

unsigned __int8 *sub_22ED2887C(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD v13[2];
  uint64_t v14;
  int v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a1[10] + 40);
  if ((v4 & 6) == 0)
  {
    a1[12] = sub_22ED28D74((uint64_t)a1, v4 & 0xFFFFFFFFFFFFFFF8);
    v10 = a1[1];
    v12 = a1;
    v13[0] = sub_22ED29438;
    v13[1] = &v12;
    v14 = v10;
    v15 = 0;
    v16 = v13;
    v2 = sub_22ED28E28(&v14, v2);
    if (v2)
      goto LABEL_3;
LABEL_22:
    v6 = 0;
LABEL_23:
    a1[11] = v6;
    return v2;
  }
  if (!a2)
    goto LABEL_22;
LABEL_3:
  v5 = v2;
  do
  {
    v6 = v5;
    v7 = *v5;
    if (v7 > 0xD5)
    {
      if (v7 == 233)
      {
        if ((*(_DWORD *)v5 & 0x7C0000) != 0x300000)
          return v2;
        v7 = *(_DWORD *)v5;
        v9 = v5 + 16;
      }
      else
      {
        if (v7 != 214)
          break;
        v9 = v5 + 24;
      }
    }
    else if (v7 == 155)
    {
      if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
        return v2;
      v9 = v5 + 24;
      if (!v6[48])
        v9 = v6 + 32;
      v7 = 155;
    }
    else
    {
      if (v7 != 176)
        break;
      v8 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v8 == -1)
        return v2;
      v9 = &v5[8 * v8 + 40];
      v7 = 176;
    }
    v5 = *(unsigned __int8 **)v9;
  }
  while (v5 != v6);
  if (v7 == 205)
    goto LABEL_23;
  return v2;
}

uint64_t sub_22ED289C0(uint64_t a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_22ED29444((uint64_t *)a1);
  if (!*(_QWORD *)(a1 + 104))
  {
    sub_22ED29510(a1);
    return 1;
  }
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
    *(_QWORD *)(v3 + 24) |= 2uLL;
  v4 = sub_22F3C74D0(*(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88));
  v5 = *(_QWORD *)(a1 + 104);
  if ((*(_BYTE *)(v5 + 29) & 2) == 0)
  {
    sub_22EB17F48(*(_QWORD *)(a1 + 8), *(_DWORD **)(a1 + 104), (unsigned int *)(a1 + 20), 1, 0, 1, 0, 0);
    v5 = *(_QWORD *)(a1 + 104);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) & 6;
  if ((*(_BYTE *)(v5 + 58) & 2) != 0)
  {
    if (v6 == 4)
      return sub_22F3348F0(*(_QWORD **)(a1 + 8), v4, v6 == 2, *(_DWORD *)(a1 + 20), *(_QWORD *)(v5 + 40), v5, 0, 0);
  }
  else if (v6)
  {
    return sub_22F3348F0(*(_QWORD **)(a1 + 8), v4, v6 == 2, *(_DWORD *)(a1 + 20), *(_QWORD *)(v5 + 40), v5, 0, 0);
  }
  return sub_22F334A84(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 96), v4, *(unsigned int *)(a1 + 20), *(_QWORD *)(v5 + 40), v5, 0, 0);
}

uint64_t sub_22ED28AC4(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unsigned __int8 *v23;
  _DWORD *v24;
  unsigned __int8 *v25[2];

  v25[1] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  if ((sub_22ED296D8((uint64_t *)a1, 0) & 1) == 0)
  {
    sub_22ED29510(a1);
    return 1;
  }
  v10 = *(_QWORD *)(a1 + 88);
  if (v10)
    *(_QWORD *)(v10 + 24) |= 4uLL;
  v11 = sub_22F3C74D0(*(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88));
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 1) & 1) == 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 45)
  {
    v16 = *(_QWORD *)(a1 + 112);
    v25[0] = *(unsigned __int8 **)(**(_QWORD **)(v16 + 96) + 48);
    v17 = *(_QWORD *)(v16 + 16);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    sub_22F409EE0((uint64_t *)v25, v11, (unint64_t)v18, 2);
    v20 = v19;
    v21 = *(uint64_t **)(a1 + 8);
    if ((*(_BYTE *)(v21[9] + 1) & 1) == 0
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
    {
      v25[0] = (unsigned __int8 *)a2;
      v22 = sub_22EB392FC(v21, v20, (uint64_t *)v25, 1, 0, 1);
      if (((uint64_t)v25[0] & 1) != 0
        || (sub_22EB43580(*(_QWORD *)(a1 + 8), v22, a3, v20, *(_QWORD *)(a2 + 8), (unsigned __int8 *)((unint64_t)v25[0] & 0xFFFFFFFFFFFFFFFELL), 0, 0) & 1) != 0)
      {
        return 1;
      }
      a2 = (unint64_t)v25[0] & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  v25[0] = (unsigned __int8 *)a2;
  v12 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(v12 + 29) & 2) == 0)
  {
    sub_22EB17F48(*(_QWORD *)(a1 + 8), *(_DWORD **)(a1 + 112), (unsigned int *)(a1 + 20), 1, 0, 1, 0, 0);
    v12 = *(_QWORD *)(a1 + 112);
  }
  if ((*(_BYTE *)(v12 + 58) & 2) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) & 6;
    v13 = *(_QWORD **)(a1 + 8);
    if (v14 == 4)
      goto LABEL_13;
LABEL_22:
    v15 = sub_22F334A84((uint64_t)v13, *(_QWORD *)(a1 + 96), v11, *(unsigned int *)(a1 + 20), *(_QWORD *)(a1 + 120), v12, (uint64_t)v25, 1uLL);
    goto LABEL_23;
  }
  v13 = *(_QWORD **)(a1 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) & 6;
  if (!v14)
    goto LABEL_22;
LABEL_13:
  v15 = sub_22F3348F0(v13, v11, v14 == 2, *(_DWORD *)(a1 + 20), *(_QWORD *)(a1 + 120), v12, v25, 1);
LABEL_23:
  v8 = v15;
  if ((v15 & 1) == 0)
  {
    if (a4)
    {
      v23 = sub_22EFFED0C((unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL));
      v24 = (_DWORD *)*((_QWORD *)v23 + 6);
      if (sub_22ED299E0((uint64_t)v24))
        *((_QWORD *)v23 + 6) = sub_22ED29A30(a1, v24);
    }
  }
  return v8;
}

uint64_t sub_22ED28D48()
{
  return 1;
}

unsigned __int8 *sub_22ED28D58(uint64_t a1, uint64_t a2)
{
  return sub_22F3C2FFC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(_DWORD *)(a1 + 16));
}

_DWORD *sub_22ED28D74(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;

  v4 = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2032, 24, 3);
  sub_22E5BBE34((uint64_t)v4, *(_DWORD *)(a1 + 20), *(_QWORD *)(a2 + 8), BYTE1(*(_DWORD *)a2) & 3, (*(_DWORD *)a2 >> 10) & 7, a2);
  if (*(_BYTE *)(a1 + 24))
    *v4 |= 0x40000u;
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  return v4;
}

unsigned __int8 *sub_22ED28E28(_DWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD v64[8];
  void *v65;
  uint64_t v66;
  _QWORD v67[10];

  v67[8] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (v5 <= 0xCF)
  {
    switch(v5)
    {
      case 0xCDu:
        v16 = *((_QWORD *)a2 + 5) & 6;
        if (v16 == 2 || v16 == 4)
          return a2;
        v38 = *((_QWORD *)a2 + 2);
        v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 48, 3);
        v39 = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFF8;
        if ((v38 & 4) != 0)
        {
          v56 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8;
          v57 = *((_QWORD *)a2 + 1);
          v58 = (*(_DWORD *)a2 >> 8) & 3;
          v59 = (*(_DWORD *)a2 >> 10) & 7;
          v60 = *((_DWORD *)a2 + 8);
          v61 = (**((uint64_t (***)(_QWORD, unint64_t, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 5) & 0xFFFFFFFFFFFFFFF8, 0);
          sub_22F2F4590(v2, v39, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          v40 = *((_QWORD *)a2 + 1);
          v41 = (*(_DWORD *)a2 >> 8) & 3;
          v42 = (*(_DWORD *)a2 >> 10) & 7;
          v43 = *((_DWORD *)a2 + 8);
          v44 = (**((uint64_t (***)(_QWORD, unint64_t, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 5) & 0xFFFFFFFFFFFFFFF8, 0);
          sub_22F333FF4(v2, v39, v40, v41, v42, v43, v44);
        }
        return (unsigned __int8 *)v2;
      case 0xB7u:
        v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
        v33 = (**((uint64_t (***)(_QWORD, _QWORD, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 2), 0);
        sub_22F2F44CC(v2, v33, *((_QWORD *)a2 + 3), a2[36], *((_QWORD *)a2 + 1), BYTE1(*(_DWORD *)a2) & 3, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), *((_DWORD *)a2 + 8));
        return (unsigned __int8 *)v2;
      case 0xB8u:
        v20 = sub_22ED28E28(a1, *((_QWORD *)a2 + 2));
        ++a1[2];
        v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
        v21 = (**((uint64_t (***)(_QWORD, _QWORD, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 3), a1[2]);
        sub_22F330354(v2, v20, v21, *((_QWORD *)a2 + 1), BYTE1(*(_DWORD *)a2) & 3, (*(_DWORD *)a2 >> 10) & 7, *((_DWORD *)a2 + 8));
        return (unsigned __int8 *)v2;
    }
  }
  else
  {
    switch(v5)
    {
      case 0xD6u:
        v18 = (int *)sub_22ED28E28(a1, *((_QWORD *)a2 + 3));
        v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
        sub_22EB54C14(v2, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), v18);
        return (unsigned __int8 *)v2;
      case 0xE9u:
        v6 = sub_22ED28E28(a1, *((_QWORD *)a2 + 2));
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        v9 = *(_DWORD *)a2;
        v10 = *((_DWORD *)a2 + 1);
        v11 = (*(_DWORD *)a2 >> 18) & 0x1F;
        v12 = *((_QWORD *)a2 + 1);
        v13 = (*(_DWORD *)a2 >> 8) & 3;
        v14 = (*(_DWORD *)a2 >> 10) & 7;
        if (*(_QWORD *)(v7 + 1296) == *(_QWORD *)(v7 + 1288))
        {
          v15 = 0;
        }
        else
        {
          v15 = *(_QWORD *)(v7 + 1296);
          if (HIDWORD(v15))
          {
            v19 = 32;
            goto LABEL_35;
          }
        }
        v19 = 24;
LABEL_35:
        v31 = (v9 >> 23) & 1;
        v2 = sub_22E3CD3D4(v8 + 2032, v19, 3);
        sub_22F0031D0(v2, v8, v6, v11, v12, v13, v14, v10, v31, v15);
        return (unsigned __int8 *)v2;
      case 0xD0u:
        v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
        v34 = (**((uint64_t (***)(_QWORD, _QWORD, _QWORD))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 3), 0);
        v35 = (**((uint64_t (***)(_QWORD, _QWORD, uint64_t))a1 + 2))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8), *((_QWORD *)a2 + 4), 1);
        sub_22F334ED0(v2, v34, v35, *((_QWORD *)a2 + 1), BYTE1(*(_DWORD *)a2) & 3, (*(_DWORD *)a2 >> 10) & 7, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), *((_DWORD *)a2 + 4));
        return (unsigned __int8 *)v2;
    }
  }
  if (v5 == 176)
    v22 = a2;
  else
    v22 = 0;
  if (v5 == 176)
  {
    v36 = *((_DWORD *)a2 + 4);
    v37 = *((_DWORD *)a2 + 5);
    v65 = v67;
    v66 = 0x800000000;
    v63 = 0;
    if (v36 >= 9)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (v36 > 8)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v45 = (uint64_t *)(a2 + 32);
    v46 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v46)
    {
      v62 = v37;
      v48 = *((_DWORD *)a2 + 5);
      v49 = (v46 + 1);
      v50 = 8 * v46;
      v51 = a2 + 32;
      do
      {
        v52 = *((_QWORD *)v51 + 1);
        v53 = *(_QWORD *)&v51[8 * v49];
        if (!v48)
          v52 = sub_22ED28E28(a1, *((_QWORD *)v51 + 1));
        v54 = v66;
        if (v66 >= (unint64_t)HIDWORD(v66))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v54 = v66;
        }
        *((_QWORD *)v65 + v54) = v52;
        LODWORD(v66) = v66 + 1;
        v55 = v63;
        if (v63 >= 8uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v55 = v63;
        }
        v64[v55] = v53;
        v47 = ++v63;
        --v48;
        v51 += 8;
        v50 -= 8;
      }
      while (v50);
      v37 = v62;
    }
    else
    {
      v47 = 0;
    }
    v2 = sub_22F3C26AC(*(_QWORD *)(*(_QWORD *)a1 + 88), v22[1], *v45, v64, v47, (uint64_t *)v65, v66, v22[6], v22[7], 0, (*v22 & 0x2000) != 0, v37);
    if (v65 != v67)
      free(v65);
  }
  else if (v5 == 155)
  {
    v23 = *((_QWORD *)a2 + 3);
    v24 = *((_QWORD *)a2 + 4);
    v25 = a2[48];
    if (a2[48])
      v26 = *((_QWORD *)a2 + 3);
    else
      v26 = *((_QWORD *)a2 + 4);
    v27 = sub_22ED28E28(a1, v26);
    v28 = v27;
    v29 = v25 == 0;
    if (v25)
      v30 = v27;
    else
      v30 = v23;
    if (v29)
      v24 = v27;
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
    sub_22F330858(v2, *((_DWORD *)a2 + 10), *((_QWORD *)a2 + 2), v30, v24, *(_QWORD *)(v28 + 8), BYTE1(*(_DWORD *)v28) & 3, (*(_DWORD *)v28 >> 10) & 7, *((_DWORD *)a2 + 11), 0, a2[48]);
  }
  return (unsigned __int8 *)v2;
}

uint64_t sub_22ED29438(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 96);
}

BOOL sub_22ED29444(uint64_t *a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  llvm::StringMapImpl *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1[13])
    return 1;
  v3 = a1[10];
  v4 = *(_QWORD *)(v3 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
  {
    a1[13] = v5;
    if (v5)
    {
      a1[16] = *(_QWORD *)(v5 + 40);
      return 1;
    }
    v7 = *(_QWORD *)((*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((~*(_DWORD *)((*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF8) + 40) & 7) == 0)
      v7 = *(_QWORD *)(v7 + 16);
    v8 = *(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192);
    v9 = *(unsigned int **)(v7 + 16);
    v10 = *v9;
    v11 = 3;
    if (v10 < 3)
      v11 = *v9;
    v12 = sub_22E3CB704(v8, (char *)v9 + v11 + 16, v10 - v11);
    result = 0;
    a1[16] = v12 | 1;
  }
  else
  {
    v6 = sub_22ED295B0(a1[1], *(_QWORD *)(v5 + 80), v3);
    a1[13] = v6;
    return v6 != 0;
  }
  return result;
}

unsigned int *sub_22ED29510(uint64_t a1)
{
  unsigned int *result;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8[24];
  unsigned int v9[24];

  result = *(unsigned int **)(a1 + 8);
  v3 = *((_QWORD *)result + 28);
  if (!v3)
    v3 = *((_QWORD *)result + 27);
  v4 = *(_WORD *)(v3 + 8) & 0x7F;
  v5 = v4 != 20 && (v4 - 24) >= 0xFFFFFFFB;
  if (v5 && v4 != 21)
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      sub_22E8FCA40(result, *(_DWORD *)(v6 + 32), 0x11D4u, 0, (uint64_t)v9);
      sub_22E903BEC(v9);
      sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(v7 + 24), 0x1780u, 0, (uint64_t)v8);
      return sub_22E903BEC(v8);
    }
  }
  return result;
}

unint64_t sub_22ED295B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 + 40);
  if ((v6 & 6) == 2)
  {
    v12 = v6 & 0xFFFFFFFFFFFFFFF0;
    v13 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (!v13 || *(_BYTE *)(v13 + 16) != 32)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
        goto LABEL_14;
      v13 = sub_22F10CF48(v13);
      if (!v13)
      {
        v12 = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_14;
      }
    }
    v12 = *(_QWORD *)(v13 + 32);
LABEL_16:
    v14 = a1;
    v15 = a2;
    v16 = 1;
    return sub_22F3345A0(v14, v15, v12, v16);
  }
  if ((v6 & 6) != 0)
  {
    v11 = *(_QWORD *)(a1 + 88);
    v10 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || *(_BYTE *)(v7 + 16) != 32)
    v7 = sub_22F10CF48(v7);
  if (!sub_22E509ED0(v7)
    || !sub_22EC2C5A0(a1, (unsigned __int8 *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8)))
  {
    v12 = *(_QWORD *)(v7 + 32);
    goto LABEL_16;
  }
  v8 = sub_22EFCB584(*(_QWORD *)(a1 + 216));
  v9 = *(_QWORD *)(a1 + 88);
  v10 = (uint64_t *)sub_22EFDC9F0(v8);
  v11 = v9;
LABEL_13:
  v12 = sub_22F36D148(v11, v10, 0);
LABEL_14:
  v14 = a1;
  v15 = a2;
  v16 = 0;
  return sub_22F3345A0(v14, v15, v12, v16);
}

uint64_t sub_22ED296D8(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  _DWORD *v17;
  const char *v18;
  size_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  unsigned int v41[24];
  unsigned int v42[24];
  uint64_t v43;
  unsigned int v44[24];
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48;
  _QWORD v49[14];

  v49[13] = *MEMORY[0x24BDAC8D0];
  v3 = a1[10];
  v4 = *(_QWORD *)(v3 + 16);
  if ((v4 & 4) != 0)
  {
    v16 = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      a1[14] = v16;
      a1[15] = *(_QWORD *)(v16 + 40);
      return 1;
    }
    else
    {
      v38 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 40);
      v39 = v38 & 0xFFFFFFFFFFFFFFF8;
      if ((~(_BYTE)v38 & 7) == 0)
        v39 = *(_QWORD *)(v39 + 16);
      v9 = 0;
      a1[15] = sub_22F41FA34((llvm::StringMapImpl *)(*(_QWORD *)(a1[1] + 80) + 544), *(_QWORD *)(a1[1] + 80) + 672, v39);
    }
  }
  else
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    v46 = v4 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 88);
    a1[15] = v7;
    v8 = sub_22ED295B0(a1[1], v7, v3);
    v9 = v8 != 0;
    if (v8)
    {
      v10 = v8;
      if ((*(_BYTE *)(v8 + 58) & 8) == 0 || !a2)
        goto LABEL_39;
      v11 = *(_QWORD *)(v8 + 16);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v12 = *(_QWORD *)v12;
      if (!v12 || (*(_WORD *)(v12 + 8) & 0x7F) != 22)
        goto LABEL_39;
      v14 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v6 + 40) & 7) != 0 || v14 == 0)
      {
        v19 = 0;
        v18 = "";
      }
      else
      {
        v17 = *(_DWORD **)(v14 + 16);
        v20 = *v17;
        v18 = (const char *)(v17 + 4);
        v19 = v20;
      }
      v21 = v12 - 48;
      v22 = *(unsigned __int8 *)v18;
      v23 = word_22F4ADB24[v22];
      if ((v23 & 0x40) != 0)
      {
        v24 = v22 - 32;
      }
      else if ((v23 & 0x20) != 0)
      {
        v24 = v22 + 32;
      }
      else
      {
        v24 = *v18;
      }
      v47 = v49;
      v48 = xmmword_22F45DF40;
      if (v19 >= 0x65)
      {
        v40 = v18;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v18 = v40;
        v27 = v47;
        v25 = v48;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v27 = v49;
        v28 = v49;
        if (!v19)
        {
LABEL_28:
          *(_QWORD *)&v48 = v26 + v19;
          *(_BYTE *)v28 = v24;
          v29 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1[1] + 80) + 544), v47, v48);
          v45 = 0;
          if ((*(_DWORD *)(v6 + 72) & 0x4000) != 0)
            v30 = 2;
          else
            v30 = 1;
          v31 = sub_22EFDA7BC(v21, v29, v30);
          v45 = v31;
          if (v31)
            v32 = v46 == v31;
          else
            v32 = 1;
          if (!v32 && *(_QWORD *)(v31 + 112) == v10)
          {
            v33 = (_QWORD *)a1[1];
            sub_22EFF605C(a1[10]);
            sub_22E8FCA40(v33, v34, 0x11DDu, 0, (uint64_t)v44);
            v35 = sub_22E890024((uint64_t)v44, (uint64_t *)&v46);
            v36 = sub_22E890024(v35, &v45);
            v43 = *(_QWORD *)(v10 + 40);
            sub_22E894538(v36, &v43);
            sub_22E903BEC(v44);
            sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(v46 + 24), 0x1780u, 0, (uint64_t)v42);
            sub_22E903BEC(v42);
            sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(v45 + 24), 0x1780u, 0, (uint64_t)v41);
            sub_22E903BEC(v41);
          }
          if (v47 != v49)
            free(v47);
LABEL_39:
          a1[14] = v10;
          return v9;
        }
      }
      memcpy((char *)v27 + v25, v18, v19);
      v28 = v47;
      v26 = v48;
      goto LABEL_28;
    }
  }
  return v9;
}

uint64_t sub_22ED299E0(uint64_t a1)
{
  unint64_t v1;

  if ((*(_BYTE *)(a1 + 1) & 3) != 0)
    return 1;
  v1 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0));
  if (!v1 || (*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 > 2)
    return 1;
  else
    return sub_22EFD12A8(v1);
}

_DWORD *sub_22ED29A30(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  _DWORD *result;
  uint64_t v5;

  if (*(unsigned __int8 *)a2 == 210)
  {
    v3 = -1;
    do
      ++v3;
    while (*(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v3) != a2);
    *(_DWORD *)(a1 + 16) = v3;
    result = a2;
  }
  else
  {
    result = sub_22ED28D74(a1, (uint64_t)a2);
    v5 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 16) = v5 - 1;
    a2 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8 * v5 - 8);
    if (*(unsigned __int8 *)a2 != 210)
      return result;
  }
  *a2 &= ~0x40000u;
  return result;
}

void sub_22ED29AB4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_24FAB90A8;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

unsigned __int8 *sub_22ED29B04(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD v7[2];
  uint64_t v8;
  int v9;
  _QWORD *v10;

  a1[11] = sub_22ED28D74((uint64_t)a1, *(_QWORD *)(a1[10] + 24));
  a1[12] = sub_22ED28D74((uint64_t)a1, *(_QWORD *)(a1[10] + 32));
  v4 = a1[1];
  v6 = a1;
  v7[0] = sub_22ED29D48;
  v7[1] = &v6;
  v8 = v4;
  v9 = 0;
  v10 = v7;
  return sub_22ED28E28(&v8, a2);
}

uint64_t sub_22ED29B80(uint64_t a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  if (!sub_22ED29D64((uint64_t *)a1))
    return 1;
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(v3 + 8);
  v6[0] = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104))
  {
    sub_22EB17F48(*(_QWORD *)(a1 + 8), *(_DWORD **)(a1 + 104), (unsigned int *)(a1 + 20), 1, 0, 0, 0, 0);
    v3 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v5 = 0;
  }
  return sub_22F334A84(*(_QWORD *)(a1 + 8), v3, v4, *(unsigned int *)(a1 + 20), *(_QWORD *)(a1 + 112), v5, (uint64_t)v6, 1uLL);
}

uint64_t sub_22ED29C44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (!sub_22ED2A3C8((uint64_t *)a1))
    return 1;
  v9 = *(_DWORD **)(a1 + 120);
  if (v9)
  {
    sub_22EB17F48(*(_QWORD *)(a1 + 8), v9, (unsigned int *)(a1 + 20), 1, 0, 0, 0, 0);
    v10 = *(_QWORD *)(a1 + 120);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(v11 + 8);
  v17[0] = a2;
  v17[1] = v12;
  v14 = sub_22F334A84(*(_QWORD *)(a1 + 8), v11, v13, *(unsigned int *)(a1 + 20), *(_QWORD *)(a1 + 128), v10, (uint64_t)v17, 2uLL);
  v7 = v14;
  if ((v14 & 1) == 0)
  {
    if (a4)
    {
      v15 = sub_22EFFED0C((unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL));
      v16 = (_DWORD *)*((_QWORD *)v15 + 6);
      if (sub_22ED299E0((uint64_t)v16))
        *((_QWORD *)v15 + 6) = sub_22ED29A30(a1, v16);
    }
  }
  return v7;
}

uint64_t sub_22ED29D48(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 96;
  if (!a3)
    v3 = 88;
  return *(_QWORD *)(*a1 + v3);
}

uint64_t sub_22ED29D64(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  const char *v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63[25];
  BOOL v64;

  if (!a1[13])
  {
    v3 = *(_QWORD *)(a1[10] + 24);
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    v5 = *v4;
    if (*v4 && *(_BYTE *)(v5 + 16) == 32
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
      && (v5 = sub_22F10CF48(v5)) != 0)
    {
      v6 = *(_QWORD *)(v5 + 32);
    }
    else
    {
      v6 = 0;
    }
    v7 = sub_22ED26348((_QWORD *)a1[1], *(_QWORD *)(a1[10] + 32));
    if (v7 == 2)
    {
      v8 = a1[1];
      if ((*(_WORD *)(*(_QWORD *)(v8 + 72) + 148) & 2) != 0)
        sub_22ED2A31C(v8, v6, *(_QWORD *)(a1[10] + 32));
      return 0;
    }
    v9 = v7;
    v64 = v7 == 0;
    if (v6 <= 0xF)
    {
      v10 = (_QWORD *)a1[1];
      sub_22EFF605C(v3);
      sub_22E8FCA40(v10, v11, 0x1014u, 0, (uint64_t)v63);
      v62 = *(_QWORD *)(v3 + 8);
      v12 = sub_22E8901B8((uint64_t)v63, &v62);
LABEL_14:
      sub_22E894E38(v12, (unsigned __int8 *)&v64);
LABEL_15:
      sub_22E903BEC(v63);
      return 0;
    }
    if (v7)
      v14 = "objectForKeyedSubscript";
    else
      v14 = "objectAtIndexedSubscript";
    if (v7)
      v15 = 23;
    else
      v15 = 24;
    v16 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192), v14, v15);
    a1[14] = v16 | 2;
    v17 = sub_22F3345A0(a1[1], v16 | 2, v6, 1);
    a1[13] = v17;
    if (!v17)
    {
      v25 = a1[1];
      if ((*(_QWORD *)(*(_QWORD *)(v25 + 72) + 140) & 0x80000000000000) == 0)
        goto LABEL_38;
      v38 = *(_QWORD *)(v25 + 88);
      v39 = a1[14];
      v40 = sub_22F36E1B8(v38);
      v41 = *(_QWORD *)(v40 + 48);
      v42 = v41 ? v41 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v38, v40);
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 88) + 1960) + 80);
      v44 = sub_22E3CD31C((uint64_t *)(v43 + 72), v43);
      v45 = v44 ? v44 + 40 : 0;
      v46 = sub_22F3B51C0(v38, 0, 0, v39, v42, 0, v45, 1, 0, 0, 0, 1, 0, v59, 1, 0, 0);
      a1[13] = v46;
      v47 = *(_QWORD *)(a1[1] + 88);
      v48 = v46 ? v46 + 48 : 0;
      v49 = v9 ? "key" : "index";
      v50 = v9 ? 3 : 5;
      v51 = sub_22E3CB704(*(llvm::StringMapImpl **)(v47 + 15192), v49, v50);
      v52 = v51;
      v53 = a1[1];
      v54 = *(_QWORD *)(v53 + 88);
      if (v9)
      {
        v56 = v51;
        v57 = sub_22F36E1B8(*(_QWORD *)(v53 + 88));
        v58 = *(_QWORD *)(v57 + 48);
        v55 = v58 ? v58 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v54, v57);
        v52 = v56;
      }
      else
      {
        v55 = *(_QWORD *)(v54 + 16536);
      }
      *(_QWORD *)v63 = sub_22EFBF080(v47, v48, 0, 0, v52, v55, 0, 0, 0);
      sub_22F3B551C(a1[13], *(_QWORD *)(a1[1] + 88), v63, 1uLL, 0, 0);
      v17 = a1[13];
      if (!v17)
      {
LABEL_38:
        v26 = *v4;
        if ((!*v4 || *(_BYTE *)(v26 + 16) != 32)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
           || (v26 = sub_22F10CF48(v26)) == 0)
          || !sub_22E5761BC(v26))
        {
          v30 = (_QWORD *)a1[1];
          sub_22EFF605C(v3);
          sub_22E8FCA40(v30, v31, 0x1018u, 0, (uint64_t)v63);
          v62 = *(_QWORD *)(v3 + 8);
          v32 = sub_22E8901B8((uint64_t)v63, &v62);
          LODWORD(v61) = 0;
          v12 = sub_22E8900C4(v32, (int *)&v61);
          goto LABEL_14;
        }
        v27 = a1[1];
        v28 = a1[14];
        sub_22F0D4E74(a1[10]);
        v1 = 1;
        v17 = sub_22EAFB888(v27, v28, v29, 1, 1);
        a1[13] = v17;
        if (!v17)
          return v1;
      }
    }
    v62 = *(_QWORD *)(**(_QWORD **)(v17 + 96) + 48);
    v18 = v62 & 0xFFFFFFFFFFFFFFF0;
    if (!v64)
    {
LABEL_52:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
        goto LABEL_53;
      v24 = 4119;
LABEL_56:
      v36 = (_QWORD *)a1[1];
      sub_22EFF605C(*(_QWORD *)(a1[10] + 32));
      sub_22E8FCA40(v36, v37, v24, 0, (uint64_t)v63);
      sub_22E8901B8((uint64_t)v63, &v62);
      sub_22E903BEC(v63);
      sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(**(_QWORD **)(a1[13] + 96) + 24), 0x175Bu, 0, (uint64_t)v63);
      sub_22E8901B8((uint64_t)v63, &v62);
      goto LABEL_15;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v19)
      v21 = v20 == 11;
    else
      v21 = 0;
    if (v21)
    {
      if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_53;
    }
    else
    {
      if (v19 && v20 == 44)
      {
        v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
        if ((*(_BYTE *)(v22 + 74) & 1) != 0)
        {
          v23 = v64;
        }
        else
        {
          v23 = v64;
          if (*(_QWORD *)(v22 + 128) <= 7uLL)
          {
            if (v64)
              v24 = 4118;
            else
              v24 = 4119;
            goto LABEL_56;
          }
        }
        if (!v23)
          goto LABEL_52;
LABEL_53:
        v61 = *(_QWORD *)(a1[13] + 80);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 32)
        {
          v33 = (_QWORD *)a1[1];
          sub_22EFF605C(*(_QWORD *)(a1[10] + 32));
          sub_22E8FCA40(v33, v34, 0xFFEu, 0, (uint64_t)v63);
          v35 = sub_22E8901B8((uint64_t)v63, &v61);
          sub_22E894E38(v35, (unsigned __int8 *)&v64);
          sub_22E903BEC(v63);
          sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(a1[13] + 24), 0x16B5u, 0, (uint64_t)v63);
          v60 = *(_QWORD *)(a1[13] + 40);
          sub_22E894538((uint64_t)v63, &v60);
          sub_22E903BEC(v63);
        }
        return 1;
      }
      if (v20 == 9)
        goto LABEL_53;
    }
    v24 = 4118;
    goto LABEL_56;
  }
  return 1;
}

unint64_t sub_22ED2A31C(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = a3;
  if (a2 >= 0x10)
  {
    v5 = result;
    v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(result + 88) + 15192), "objectForKeyedSubscript", 0x17uLL);
    result = sub_22F3345A0(v5, v6 | 2, a2, 1);
    if (result)
    {
      v7 = *(_QWORD *)(**(_QWORD **)(result + 96) + 48);
      sub_22F0D4E74(a3);
      return sub_22EC32FE4(v5, v8, v7, &v9, 0, 1, 0, 0);
    }
  }
  return result;
}

uint64_t sub_22ED2A3C8(uint64_t *a1)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  llvm::StringMapImpl *v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  _QWORD *v27;
  int v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  BOOL v78;
  void *v79;
  uint64_t v80;
  _QWORD v81[11];

  v81[10] = *MEMORY[0x24BDAC8D0];
  if (a1[15])
    return 1;
  v3 = *(_QWORD *)(a1[10] + 24);
  v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v4;
  if (*v4 && *(_BYTE *)(v5 + 16) == 32
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32 && (v5 = sub_22F10CF48(v5)) != 0)
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_22ED26348((_QWORD *)a1[1], *(_QWORD *)(a1[10] + 32));
  if (v7 == 2)
  {
    v8 = a1[1];
    if ((*(_WORD *)(*(_QWORD *)(v8 + 72) + 148) & 2) != 0)
      sub_22ED2A31C(v8, v6, *(_QWORD *)(a1[10] + 32));
    return 0;
  }
  v78 = v7 == 0;
  if (v6 <= 0xF)
  {
    v9 = (_QWORD *)a1[1];
    sub_22EFF605C(v3);
    sub_22E8FCA40(v9, v10, 0x1014u, 0, (uint64_t)&v79);
    v77 = *(_QWORD *)(v3 + 8);
    v11 = sub_22E8901B8((uint64_t)&v79, &v77);
LABEL_14:
    sub_22E894E38(v11, (unsigned __int8 *)&v78);
    sub_22E903BEC((unsigned int *)&v79);
    return 0;
  }
  if (v7)
  {
    v79 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192), "setObject", 9uLL);
    v12 = *(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192);
    v13 = "forKeyedSubscript";
    v14 = 17;
  }
  else
  {
    v79 = (void *)sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192), "setObject", 9uLL);
    v12 = *(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 88) + 15192);
    v13 = "atIndexedSubscript";
    v14 = 18;
  }
  v80 = sub_22E3CB704(v12, v13, v14);
  v15 = sub_22F1D3E5C(*(uint64_t **)(*(_QWORD *)(a1[1] + 88) + 15200), 2u, (uint64_t *)&v79);
  a1[16] = v15;
  v16 = sub_22F3345A0(a1[1], v15, v6, 1);
  a1[15] = v16;
  if (!v16)
  {
    v33 = a1[1];
    if ((*(_QWORD *)(*(_QWORD *)(v33 + 72) + 140) & 0x80000000000000) == 0)
      goto LABEL_42;
    v46 = *(_QWORD *)(v33 + 88);
    v47 = *(_QWORD *)(v46 + 16392);
    v48 = a1[16];
    v49 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v46 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v46 + 1960) + 80));
    if (v49)
      v50 = v49 + 40;
    else
      v50 = 0;
    v51 = sub_22F3B51C0(v46, 0, 0, v48, v47, 0, v50, 1, 0, 0, 0, 1, 0, v75, 1, 0, 0);
    a1[15] = v51;
    v79 = v81;
    v80 = 0x200000000;
    v52 = *(_QWORD *)(a1[1] + 88);
    if (v51)
      v53 = v51 + 48;
    else
      v53 = 0;
    v54 = sub_22E3CB704(*(llvm::StringMapImpl **)(v52 + 15192), "object", 6uLL);
    v55 = *(_QWORD *)(a1[1] + 88);
    v56 = sub_22F36E1B8(v55);
    v57 = *(_QWORD *)(v56 + 48);
    if (v57)
      v58 = v57 & 0xFFFFFFFFFFFFFFF0;
    else
      v58 = sub_22EF6462C(v55, v56);
    v59 = sub_22EFBF080(v52, v53, 0, 0, v54, v58, 0, 0, 0);
    v60 = v80;
    if (v80 >= HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v60 = v80;
    }
    *((_QWORD *)v79 + v60) = v59;
    LODWORD(v80) = v80 + 1;
    v61 = *(_QWORD *)(a1[1] + 88);
    v62 = a1[15];
    if (v62)
      v63 = v62 + 48;
    else
      v63 = 0;
    if (v78)
      v64 = "index";
    else
      v64 = "key";
    if (v78)
      v65 = 5;
    else
      v65 = 3;
    v66 = sub_22E3CB704(*(llvm::StringMapImpl **)(v61 + 15192), v64, v65);
    v67 = v66;
    v68 = *(_QWORD *)(a1[1] + 88);
    if (v78)
    {
      v72 = *(_QWORD *)(v68 + 16536);
    }
    else
    {
      v69 = v66;
      v70 = sub_22F36E1B8(v68);
      v71 = *(_QWORD *)(v70 + 48);
      if (v71)
        v72 = v71 & 0xFFFFFFFFFFFFFFF0;
      else
        v72 = sub_22EF6462C(v68, v70);
      v67 = v69;
    }
    v73 = sub_22EFBF080(v61, v63, 0, 0, v67, v72, 0, 0, 0);
    v74 = v80;
    if (v80 >= HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v74 = v80;
    }
    *((_QWORD *)v79 + v74) = v73;
    LODWORD(v80) = v80 + 1;
    sub_22F3B551C(a1[15], *(_QWORD *)(a1[1] + 88), v79, v80, 0, 0);
    if (v79 != v81)
      free(v79);
    v16 = a1[15];
    if (!v16)
    {
LABEL_42:
      v34 = *v4;
      if ((!*v4 || *(_BYTE *)(v34 + 16) != 32)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
         || (v34 = sub_22F10CF48(v34)) == 0)
        || !sub_22E5761BC(v34))
      {
        v38 = (_QWORD *)a1[1];
        sub_22EFF605C(v3);
        sub_22E8FCA40(v38, v39, 0x1018u, 0, (uint64_t)&v79);
        v77 = *(_QWORD *)(v3 + 8);
        v40 = sub_22E8901B8((uint64_t)&v79, &v77);
        v76 = 1;
        v11 = sub_22E8900C4(v40, &v76);
        goto LABEL_14;
      }
      v35 = a1[1];
      v36 = a1[16];
      sub_22F0D4E74(a1[10]);
      v16 = sub_22EAFB888(v35, v36, v37, 1, 1);
      a1[15] = v16;
    }
  }
  v17 = v78;
  if (!v16 || !v78)
  {
    v22 = 0;
    if (v16 && !v78)
    {
      v23 = 0;
      v24 = 0;
      v25 = 1;
      do
      {
        v26 = v25;
        v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[15] + 96) + 8 * v23) + 48);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 32)
        {
          v27 = (_QWORD *)a1[1];
          if ((v17 & 1) != 0)
          {
            sub_22EFF605C(*(_QWORD *)(a1[10] + 32));
            v29 = v28;
            v30 = v27;
            v31 = 4119;
          }
          else
          {
            sub_22EFF605C(*(_QWORD *)(a1[10] + 24));
            v29 = v32;
            v30 = v27;
            v31 = 4117;
          }
          sub_22E8FCA40(v30, v29, v31, 0, (uint64_t)&v79);
          sub_22E8901B8((uint64_t)&v79, &v77);
          sub_22E903BEC((unsigned int *)&v79);
          sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[15] + 96) + 8 * v23) + 24), 0x175Bu, 0, (uint64_t)&v79);
          sub_22E8901B8((uint64_t)&v79, &v77);
          sub_22E903BEC((unsigned int *)&v79);
          v24 = 1;
        }
        v25 = 0;
        v17 = 1;
        v23 = 1;
      }
      while ((v26 & 1) != 0);
      v22 = v24 & 1;
    }
    return v22 ^ 1u;
  }
  v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 96) + 8) + 48);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_DWORD *)(v18 + 16);
  if (v18)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (v20)
  {
    if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_50;
  }
  else
  {
    if (v18 && v19 == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
      if ((*(_BYTE *)(v21 + 74) & 1) == 0 && *(_QWORD *)(v21 + 128) <= 7uLL)
        goto LABEL_52;
LABEL_50:
      v22 = 0;
      goto LABEL_53;
    }
    if (v19 == 9)
      goto LABEL_50;
  }
LABEL_52:
  v41 = (_QWORD *)a1[1];
  sub_22EFF605C(*(_QWORD *)(a1[10] + 32));
  sub_22E8FCA40(v41, v42, 0x1016u, 0, (uint64_t)&v79);
  sub_22E8901B8((uint64_t)&v79, &v77);
  sub_22E903BEC((unsigned int *)&v79);
  sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[15] + 96) + 8) + 24), 0x175Bu, 0, (uint64_t)&v79);
  sub_22E8901B8((uint64_t)&v79, &v77);
  sub_22E903BEC((unsigned int *)&v79);
  v22 = 1;
LABEL_53:
  v77 = *(_QWORD *)(**(_QWORD **)(a1[15] + 96) + 48);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
  {
    v43 = (_QWORD *)a1[1];
    sub_22EFF605C(*(_QWORD *)(a1[10] + 24));
    sub_22E8FCA40(v43, v44, 0x1019u, 0, (uint64_t)&v79);
    v45 = sub_22E8901B8((uint64_t)&v79, &v77);
    sub_22E894E38(v45, (unsigned __int8 *)&v78);
    sub_22E903BEC((unsigned int *)&v79);
    sub_22E8FCA40((_QWORD *)a1[1], *(_DWORD *)(**(_QWORD **)(a1[15] + 96) + 24), 0x175Bu, 0, (uint64_t)&v79);
    sub_22E8901B8((uint64_t)&v79, &v77);
    sub_22E903BEC((unsigned int *)&v79);
    v22 = 1;
  }
  return v22 ^ 1u;
}

void sub_22ED2ABEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAB9138;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 14)
    free(v2);
  *a1 = off_24FAB90A8;
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

unsigned __int8 *sub_22ED2AC5C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;
  _QWORD *v13;

  *(_QWORD *)(a1 + 88) = sub_22ED28D74(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16));
  v4 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a1 + 96);
    v6 = 8 * v4;
    do
    {
      *v5 = (uint64_t)sub_22ED28D74(a1, *v5);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v9 = a1;
  v10[0] = sub_22ED2B140;
  v10[1] = &v9;
  v11 = v7;
  v12 = 0;
  v13 = v10;
  return sub_22ED28E28(&v11, a2);
}

uint64_t sub_22ED2ACF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  void *v23[2];
  unsigned int v24[24];
  uint64_t v25[3];
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 72);
  if (v3)
  {
    v4 = *(_DWORD *)(v2 + 32);
    LODWORD(v25[0]) = 0;
    v25[1] = v3;
    v26 = v4;
    v27 = v4;
    v22 = 0u;
    *(_OWORD *)v23 = 0u;
    sub_22E8ACE30((uint64_t)&v22, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 36))
      v5 = 36;
    else
      v5 = 25;
    v6 = sub_22EC25EFC(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 12888), *(_QWORD *)(a1 + 88), 0, v5, (uint64_t)&v22, 0, v25, 0);
    if ((v6 & 1) != 0)
    {
      sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 80) + 32), 0xBB7u, 0, (uint64_t)v24);
      v21 = 0;
      v7 = sub_22E8900C4((uint64_t)v24, &v21);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
      sub_22E9AEF84(v7, &v20);
      sub_22E903BEC(v24);
      v8 = 1;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(v11 + 12888);
      v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
      sub_22F343D00(*(_QWORD *)(a1 + 80));
      v15 = v14;
      v16 = *(uint64_t **)(a1 + 96);
      v17 = *(unsigned int *)(a1 + 104);
      v18 = *(_QWORD *)(a1 + 80);
      sub_22F343D00(v18);
      LOWORD(v19) = 0;
      v8 = sub_22EB1CFA4(v11, v12, v13, v15, v16, v17, *(_DWORD *)(v18 + 32), 0, v19);
    }
    if (HIDWORD(v23[1]))
      free(v23[0]);
  }
  else
  {
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(v2 + 32), 0xFA3u, 0, (uint64_t)v24);
    LODWORD(v22) = 0;
    v9 = sub_22E8900C4((uint64_t)v24, (int *)&v22);
    v25[0] = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
    sub_22E9AEF84(v9, v25);
    sub_22E903BEC(v24);
    return 1;
  }
  return v8;
}

uint64_t sub_22ED2AED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  void *v25[2];
  uint64_t v26[3];
  int v27;
  int v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[11];

  v31[10] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 80);
  if (v4)
  {
    v6 = *(_DWORD *)(v3 + 32);
    LODWORD(v26[0]) = 0;
    v26[1] = v4;
    v27 = v6;
    v28 = v6;
    v24 = 0u;
    *(_OWORD *)v25 = 0u;
    sub_22E8ACE30((uint64_t)&v24, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 36))
      v7 = 36;
    else
      v7 = 25;
    v8 = sub_22EC25EFC(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 12888), *(_QWORD *)(a1 + 88), 0, v7, (uint64_t)&v24, 0, v26, 0);
    if ((v8 & 1) != 0)
    {
      sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 80) + 32), 0xBB7u, 0, (uint64_t)&v29);
      v9 = 1;
      v23 = 1;
      v10 = sub_22E8900C4((uint64_t)&v29, &v23);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
      sub_22E9AEF84(v10, &v22);
      sub_22E903BEC((unsigned int *)&v29);
    }
    else
    {
      v29 = v31;
      v30 = 0x400000000;
      sub_22E5223E0((uint64_t)&v29, *(_BYTE **)(a1 + 96), (_BYTE *)(*(_QWORD *)(a1 + 96) + 8 * *(unsigned int *)(a1 + 104)));
      v13 = v30;
      if (v30 >= HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v30;
      }
      *((_QWORD *)v29 + v13) = a2;
      LODWORD(v30) = v30 + 1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(v14 + 12888);
      sub_22F343D00(*(_QWORD *)(a1 + 80));
      v17 = v16;
      v18 = (uint64_t *)v29;
      v19 = v30;
      sub_22F0D4E74(a2);
      LOWORD(v21) = 0;
      v9 = sub_22EB1CFA4(v14, v15, v8 & 0xFFFFFFFFFFFFFFFELL, v17, v18, v19, v20, 0, v21);
      if (v29 != v31)
        free(v29);
    }
    if (HIDWORD(v25[1]))
      free(v25[0]);
  }
  else
  {
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(v3 + 32), 0xFA3u, 0, (uint64_t)&v29);
    v9 = 1;
    LODWORD(v24) = 1;
    v11 = sub_22E8900C4((uint64_t)&v29, (int *)&v24);
    v26[0] = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24);
    sub_22E9AEF84(v11, v26);
    sub_22E903BEC((unsigned int *)&v29);
  }
  return v9;
}

uint64_t sub_22ED2B138()
{
  return 0;
}

uint64_t sub_22ED2B140(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a3)
    v4 = *(_QWORD *)(v3 + 96) + 8 * (a3 - 1);
  else
    v4 = v3 + 88;
  return *(_QWORD *)v4;
}

uint64_t sub_22ED2B164(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(a1[1] + 72) + 1) & 1) == 0)
    return 0;
  sub_22ED29444(a1);
  v5 = a1[13];
  if (!v5)
  {
    v6 = 1;
    goto LABEL_7;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 40)
    return 0;
  v6 = sub_22ED26C00(a1);
LABEL_7:
  *a3 = v6;
  return 1;
}

uint64_t sub_22ED2B1F4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

unint64_t sub_22ED2B1FC(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if ((a2 & 1) != 0)
    return 1;
  v5 = a2 & 0xFFFFFFFFFFFFFFFELL;
  sub_22EFF605C(a2 & 0xFFFFFFFFFFFFFFFELL);
  v7 = sub_22EBCF22C(a1, v5, v6, a3, 0);
  if ((v7 & 1) != 0)
    return 1;
  else
    return v7 & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_22ED2B260(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  __int16 v6;
  char *v7;
  uint64_t v8;

  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8, 3);
  *(_BYTE *)result = 19;
  if (byte_255E04EB3)
  {
    v8 = result;
    v7 = sub_22F0D3748(19);
    result = v8;
    ++*((_DWORD *)v7 + 2);
  }
  if (a3)
    v6 = 256;
  else
    v6 = 0;
  *(_WORD *)result = *(_WORD *)result & 0xFEFF | v6;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_22ED2B2F8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  char *v8;
  uint64_t v9;

  if (!a2)
    return 1;
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_BYTE *)result = 12;
  if (byte_255E04EB3)
  {
    v9 = result;
    v8 = sub_22F0D3748(12);
    result = v9;
    ++*((_DWORD *)v8 + 2);
  }
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

void sub_22ED2B390(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5[24];

  if (a2 && (a2 & 1) == 0 && (*(_DWORD *)(a2 + 28) & 0x80) == 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8)
    {
      sub_22EFBC9E4(a2, 0);
      if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
      {
        v4 = *(_QWORD *)(a2 + 48);
        if ((v4 & 8) != 0 && (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x80)
        {
          *(_QWORD *)(a2 + 48) = v4 | 1;
          *(_BYTE *)(a2 + 96) |= 0x80u;
        }
      }
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xFCFu, 0, (uint64_t)v5);
      sub_22E903BEC(v5);
      sub_22EFC77E8(a2, 1);
    }
  }
}

void sub_22ED2B458(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v4;
  int v6;
  unsigned int v7;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned __int8 **v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  unsigned int v78;
  unint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  unint64_t v98;
  unsigned __int8 **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  void *__p;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  int v120;

  v108 = a2;
  if (!a2)
    return;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if (v6 != 235)
      break;
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    v108 = v4;
    if (!v4)
      return;
  }
  if ((v6 - 102) > 0x84)
    return;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
  if (v7 <= 3 && v7 != 2)
    return;
  v9 = sub_22EFFA6B0(v4);
  sub_22EFF605C((uint64_t)v9);
  v11 = v10;
  v12 = sub_22F1E28D4(*(_QWORD **)(a1 + 112), v10) || sub_22E90086C(*(_QWORD **)(a1 + 112), v11);
  v107 = 0;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  if (!sub_22EFFDBB8((unsigned int *)v4, &v107, (unsigned int *)&v106, &v105, (unint64_t *)&v104, *(_QWORD *)(a1 + 88)))return;
  v13 = *v4;
  v14 = v106;
  if (v13 == 224 && v106 < 0)
    return;
  if (*sub_22EFFEB40(v4) == 214 && v14 < 0)
  {
    LODWORD(v118) = v14;
    if ((sub_22F308B18(a1, (int *)&v118, "UNREFERENCED_PARAMETER", 22) & 1) != 0)
      return;
    v13 = *v4;
  }
  if ((v13 & 0xFE) == 0xAC)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    v13 = *v4;
  }
  if (v13 == 116)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    v13 = *v4;
  }
  if ((v13 & 0xFE) == 0x70)
  {
    v15 = (*(_DWORD *)v4 >> 18) & 0x3F;
    if ((v15 - 9) > 6)
      goto LABEL_44;
    switch(v15)
    {
      case 14:
        v16 = 0;
        break;
      case 15:
        v16 = 1;
        break;
      case 9:
        v16 = 3;
        break;
      default:
        v16 = 2;
        break;
    }
    v18 = (unsigned int *)(v4 + 4);
    v19 = (unsigned __int8 **)(v4 + 16);
  }
  else
  {
    if (v13 != 141)
      goto LABEL_44;
    v17 = HIDWORD(*(_QWORD *)v4) & 0x3FLL;
    v16 = 0;
    switch((int)v17)
    {
      case 30:
        break;
      case 31:
        v16 = 1;
        break;
      case 32:
      case 33:
        goto LABEL_33;
      case 34:
        v16 = 3;
        break;
      default:
        if ((v17 - 16) >= 2)
          goto LABEL_44;
LABEL_33:
        v16 = 2;
        break;
    }
    v18 = (unsigned int *)(v4 + 20);
    v19 = (unsigned __int8 **)&v4[8 * ((*(_QWORD *)v4 >> 18) & 1) + 8 + BYTE3(*(_QWORD *)v4)];
  }
  v20 = *(_DWORD *)sub_22EFFA6B0(*v19);
  v21 = *v18;
  if (!sub_22F1E28D4(*(_QWORD **)(a1 + 112), v21))
  {
    sub_22E8FCA40((_QWORD *)a1, v21, 0x1BD3u, 0, (uint64_t)&v118);
    v117 = v16;
    v37 = sub_22E89519C((uint64_t)&v118, &v117);
    sub_22F0D4E74((uint64_t)v4);
    v109 = v38;
    sub_22E8906A0(v37, &v109);
    sub_22E903BEC((unsigned int *)&v118);
    if ((v20 & 0x300) != 0x100)
      return;
    if (v16)
    {
      if (v16 != 1)
        return;
      sub_22E8FCA40((_QWORD *)a1, v21, 0x1630u, 0, (uint64_t)&v118);
      v112 = 0;
      v111 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v109 = v21 | (v21 << 32);
      v110 = 1;
      __p = (void *)15740;
      v39 = 2;
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a1, v21, 0x15CCu, 0, (uint64_t)&v118);
      v112 = 0;
      v111 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v109 = v21 | (v21 << 32);
      v39 = 1;
      v110 = 1;
      __p = (void *)61;
    }
    HIBYTE(v115) = v39;
    goto LABEL_145;
  }
LABEL_44:
  v22 = (unsigned __int8 *)v107;
  LOBYTE(v23) = *(_BYTE *)v107;
  if ((*(_BYTE *)v107 + 102) >= 0xF5u)
  {
    v23 = *v107;
    if (((*v107 >> 18) & 0x6F | 0x10) == 0x15)
    {
      v22 = sub_22EFFEB40(*((unsigned __int8 **)v107 + 2));
      LOBYTE(v23) = *v22;
    }
  }
  if ((v23 + 113) < 0xFBu)
  {
    if ((v23 & 0xFE) != 0x76)
    {
      if (v23 != 180)
      {
        if (v12)
          return;
        goto LABEL_123;
      }
      v40 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)v22 + 1) & 0xFFFFFFFFFFFFFFF0));
      if (!v40)
        goto LABEL_123;
      if ((*(_BYTE *)(v40 + 29) & 1) == 0)
        goto LABEL_92;
      sub_22EFC8E88(v40);
      v42 = *(uint64_t **)v41;
      v43 = *(unsigned int *)(v41 + 8);
      v44 = *(uint64_t **)v41;
      if ((_DWORD)v43)
      {
        v45 = 8 * v43;
        v44 = *(uint64_t **)v41;
        while (*(_WORD *)(*v44 + 32) != 348)
        {
          ++v44;
          v45 -= 8;
          if (!v45)
            goto LABEL_92;
        }
      }
      if (v44 == &v42[v43])
      {
LABEL_92:
        v46 = 0;
      }
      else
      {
        do
        {
          v50 = *v42++;
          v46 = v50;
        }
        while (*(_WORD *)(v50 + 32) != 348);
      }
      v51 = v106;
      v53 = v104;
      v52 = v105;
      v54 = (_QWORD *)a1;
      v55 = 0;
      goto LABEL_122;
    }
    v24 = *((_QWORD *)v22 + 2);
    if (!v24)
      goto LABEL_123;
    if ((*(_BYTE *)(v24 + 29) & 1) != 0)
    {
      sub_22EFC8E88(*((_QWORD *)v22 + 2));
      v26 = *(uint64_t **)v25;
      v27 = *(unsigned int *)(v25 + 8);
      v28 = *(uint64_t **)v25;
      if ((_DWORD)v27)
      {
        v29 = 8 * v27;
        v28 = *(uint64_t **)v25;
        while (*(_WORD *)(*v28 + 32) != 348)
        {
          ++v28;
          v29 -= 8;
          if (!v29)
            goto LABEL_83;
        }
      }
      if (v28 != &v26[v27])
      {
        do
        {
          v47 = *v26++;
          v46 = v47;
        }
        while (*(_WORD *)(v47 + 32) != 348);
LABEL_121:
        v51 = v106;
        v53 = v104;
        v52 = v105;
        v54 = (_QWORD *)a1;
        v55 = 1;
LABEL_122:
        if (sub_22ED2BF38(v54, v46, v51, v52, v53, v55))
          return;
        goto LABEL_123;
      }
    }
LABEL_83:
    v48 = *(_WORD *)(v24 + 80) & 0x7F;
    v49 = -40;
    if (v48 > 0x46)
    {
      if (v48 == 83)
        goto LABEL_106;
      if (v48 == 71)
      {
        v49 = -56;
        goto LABEL_106;
      }
      if (v48 != 81)
      {
LABEL_101:
        v56 = v48 - 52;
        v57 = v48 - 33 >= 5;
        v58 = -48;
        if (!v57)
          v58 = -64;
        if (v56 >= 6)
          v49 = v58;
        else
          v49 = -72;
      }
    }
    else
    {
      if (v48 > 0x18)
        goto LABEL_100;
      if (v48 == 16)
      {
LABEL_86:
        v49 = -48;
        goto LABEL_106;
      }
      if (((1 << v48) & 0x1066) == 0)
      {
        if (v48 == 24)
          goto LABEL_86;
LABEL_100:
        if (v48 == 70)
        {
          v49 = -64;
          goto LABEL_106;
        }
        goto LABEL_101;
      }
    }
LABEL_106:
    v59 = *(_QWORD *)(v24 + 72 + v49 + 16);
    v60 = (_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8);
    if ((v59 & 4) != 0)
      v60 = (_QWORD *)*v60;
    v46 = 0;
    if (v60)
      v61 = (uint64_t)(v60 - 8);
    else
      v61 = 0;
    if ((*(_BYTE *)(v61 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v61);
      v63 = *(uint64_t **)v62;
      v64 = *(unsigned int *)(v62 + 8);
      v65 = *(uint64_t **)v62;
      if ((_DWORD)v64)
      {
        v66 = 8 * v64;
        v65 = *(uint64_t **)v62;
        while (*(_WORD *)(*v65 + 32) != 348)
        {
          ++v65;
          v66 -= 8;
          if (!v66)
            goto LABEL_120;
        }
      }
      if (v65 == &v63[v64])
      {
LABEL_120:
        v46 = 0;
      }
      else
      {
        do
        {
          v67 = *v63++;
          v46 = v67;
        }
        while (*(_WORD *)(v67 + 32) != 348);
      }
    }
    goto LABEL_121;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v30)
    v31 = (*(_DWORD *)(v30 + 16) & 0xFF800FF) == 86507531;
  else
    v31 = 0;
  if (v31)
    return;
  v32 = sub_22EFFAD70((uint64_t)v22, *(_QWORD *)(a1 + 88));
  if (sub_22ED2BF38((_QWORD *)a1, v32, v106, v105, v104, 0))
    return;
  v33 = sub_22EFFA604(*(unsigned __int8 **)&v22[v22[3]]);
  if (v33)
  {
    if (v12)
      return;
    v34 = v33;
    if (sub_22E47278C(v33))
    {
      sub_22E8FCA40((_QWORD *)a1, v106, 0x1BD1u, 0, (uint64_t)&v118);
      v93 = sub_22E8906A0((uint64_t)&v118, &v105);
      v94 = sub_22E8906A0(v93, &v104);
      sub_22F2F30F4(v94, (uint64_t)"pure");
    }
    else
    {
      if (!sub_22E3E3190(v34))
        goto LABEL_123;
      sub_22E8FCA40((_QWORD *)a1, v106, 0x1BD1u, 0, (uint64_t)&v118);
      v35 = sub_22E8906A0((uint64_t)&v118, &v105);
      v36 = sub_22E8906A0(v35, &v104);
      sub_22F2F30F4(v36, (uint64_t)"const");
    }
LABEL_190:
    sub_22E903BEC((unsigned int *)&v118);
    return;
  }
LABEL_123:
  v68 = v107;
  v69 = *(unsigned __int8 *)v107;
  if (v69 > 0xC7)
  {
    if (v69 == 217)
    {
      v83 = **((unsigned __int8 **)v107 + 2);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
        v84 = (v83 + 118) > 4u;
      else
        v84 = 1;
      if (!v84 && (*v107 & 0x3FC0000) == 0x80000 && (**((_BYTE **)v107 + 3) + 118) < 5u)
      {
        sub_22ED2B458(a1);
        return;
      }
      if (v83 == 208)
        a3 = 7127;
      else
        a3 = 7138;
      goto LABEL_174;
    }
    if (v69 == 200)
    {
      v78 = v107[6];
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0 && (v78 & 0x2000000) != 0)
      {
        sub_22E8FCA40((_QWORD *)a1, v106, 0xA79u, 0, (uint64_t)&v118);
        v79 = &v118;
        v80 = &v105;
LABEL_189:
        sub_22E8906A0((uint64_t)v79, v80);
        goto LABEL_190;
      }
      if ((v78 & 0x1000000) != 0)
      {
        v85 = *((_QWORD *)v107 + 2);
        if (v85)
        {
          if ((*(_BYTE *)(v85 + 29) & 1) == 0)
            goto LABEL_168;
          sub_22EFC8E88(v85);
          v87 = *(uint64_t **)v86;
          v88 = *(unsigned int *)(v86 + 8);
          v89 = *(uint64_t **)v86;
          if ((_DWORD)v88)
          {
            v90 = 8 * v88;
            v89 = *(uint64_t **)v86;
            while (*(_WORD *)(*v89 + 32) != 348)
            {
              ++v89;
              v90 -= 8;
              if (!v90)
                goto LABEL_168;
            }
          }
          if (v89 == &v87[v88])
          {
LABEL_168:
            v91 = 0;
          }
          else
          {
            do
            {
              v92 = *v87++;
              v91 = v92;
            }
            while (*(_WORD *)(v92 + 32) != 348);
          }
          if (sub_22ED2BF38((_QWORD *)a1, v91, v106, v105, v104, 0))
            return;
        }
      }
    }
    goto LABEL_174;
  }
  if (v69 == 144)
  {
    v81 = *((_QWORD *)v107 + 3);
    if (*(_QWORD *)v81 == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16816))
    {
      sub_22E8FCA40((_QWORD *)a1, v106, 0x1BE7u, 0, (uint64_t)&v118);
      v82 = *(unsigned int *)(v81 + 8);
      v112 = 0;
      v111 = 0;
      v114 = 0;
      v115 = 0;
      __p = 0;
      v116 = 0;
      v109 = v82 | (v82 << 32);
      v110 = 1;
LABEL_145:
      sub_22E890748((uint64_t)&v118, &v109);
      if (SHIBYTE(v115) < 0)
        operator delete(__p);
      goto LABEL_190;
    }
LABEL_174:
    if ((*((_BYTE *)v68 + 1) & 3) == 0
      || (v95 = *((_QWORD *)v68 + 1), (v95 & 4) == 0) && (*(_BYTE *)((v95 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0
      || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 < 4)
    {
      if (a3 != 7122 || (sub_22EE03478(a1), !v96))
      {
        v97 = v106;
        v98 = v108 != 0;
        if (v108)
          v99 = &v108;
        else
          v99 = 0;
        v100 = *(_QWORD *)(a1 + 88) + 2128;
        v119 = v100;
        v120 = a3;
        v101 = v105;
        v102 = sub_22E3B8AAC(v100);
        v118 = v102;
        sub_22E4D6448(v102 + 336, v101, 1);
        v103 = v104;
        if (!v102)
        {
          v102 = sub_22E3B8AAC(v100);
          v118 = v102;
        }
        sub_22E4D6448(v102 + 336, v103, 1);
        sub_22EB5277C(a1, v97, v99, v98, (uint64_t *)&v118);
        if (v118)
        {
          if (v119)
            sub_22E3BB10C(v119, v118);
        }
      }
      return;
    }
    sub_22E8FCA40((_QWORD *)a1, v106, 0x1BE8u, 0, (uint64_t)&v118);
    v79 = (unint64_t *)sub_22E8906A0((uint64_t)&v118, &v105);
    v80 = &v104;
    goto LABEL_189;
  }
  if (v69 != 145)
    goto LABEL_174;
  v70 = (unsigned __int8 *)*((_QWORD *)v107 + 2);
  v71 = *v70;
  if (v71 == 116)
  {
    v70 = (unsigned __int8 *)*((_QWORD *)v70 + 3);
    v71 = *v70;
  }
  if (v71 != 119)
  {
    if ((v71 & 0xFE) != 0x76)
      goto LABEL_174;
    v72 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)v70 + 1) & 0xFFFFFFFFFFFFFFF0));
    if (!v72)
      goto LABEL_174;
    v73 = *(_DWORD *)(v72 + 28);
    if ((v73 & 0x7Fu) - 35 > 2)
      goto LABEL_174;
    if ((v73 & 0x100) != 0)
    {
      sub_22EFC8E88(v72);
      v75 = *((unsigned int *)v74 + 2);
      if ((_DWORD)v75)
      {
        v76 = 8 * v75;
        for (i = *v74; *(_WORD *)(*(_QWORD *)i + 32) != 347; i += 8)
        {
          v76 -= 8;
          if (!v76)
            return;
        }
      }
      else
      {
        i = *v74;
      }
      if (i != *v74 + 8 * v75)
        goto LABEL_174;
    }
  }
}

BOOL sub_22ED2BF38(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14[24];
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a5;
  v18 = a4;
  v16 = a2;
  if (!a2)
    return 0;
  v6 = *(unsigned int *)(a2 + 36);
  v15[0] = *(_QWORD *)(a2 + 40);
  v15[1] = v6;
  if ((_DWORD)v6)
  {
    if (a6)
      v13 = 7126;
    else
      v13 = 7140;
    sub_22E8FCA40(a1, a3, v13, 0, (uint64_t)v14);
    sub_22E9AEE38((uint64_t)v14, &v16);
    v10 = (unsigned int *)sub_22F2F2210((uint64_t)v14, (uint64_t)v15);
  }
  else
  {
    if (a6)
      v8 = 7125;
    else
      v8 = 7139;
    sub_22E8FCA40(a1, a3, v8, 0, (uint64_t)v14);
    sub_22E9AEE38((uint64_t)v14, &v16);
    v10 = v14;
  }
  v11 = sub_22E8906A0((uint64_t)v10, &v18);
  v12 = *(unsigned __int8 *)(sub_22E8906A0(v11, &v17) + 80);
  sub_22E903BEC(v14);
  return v12 != 0;
}

unsigned __int8 *sub_22ED2C004(_QWORD *a1, unsigned int a2, uint64_t a3, _BYTE **a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE **v21;
  uint64_t v22;
  BOOL i;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32[24];

  v7 = *(_QWORD *)a1[9];
  if ((v7 & 1) != 0)
    v8 = 6753;
  else
    v8 = 5292;
  if ((v7 & 0x100) == 0)
  {
    v14 = a1;
    v15 = a2;
    v29 = v8;
    v16 = a3;
    v17 = sub_22F1CF68C(*(_QWORD *)(a1[13] + 32), v8, a2, a1[13]);
    a2 = v15;
    a3 = v16;
    v18 = v17;
    a1 = v14;
    if (v18 != 1)
    {
      if ((_DWORD)a5)
      {
        v19 = 0;
        while (*a4[v19] == 12)
        {
          ++v19;
          a3 = v16;
          a2 = v15;
          a1 = v14;
          if (a5 == v19)
            goto LABEL_5;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      for (i = (_DWORD)v19 == (_DWORD)a5; ; i = (_DWORD)a5 == (_DWORD)v19)
      {
        a3 = v16;
        a2 = v15;
        a1 = v14;
        if (i)
          break;
        v24 = a4[v19];
        if (*v24 == 12)
        {
          v27 = *((_QWORD *)v24 + 1);
          v26 = (unint64_t)(v24 + 8);
          v25 = v27;
          if (!v27)
            v26 = 0;
          if ((v25 & 1) != 0)
            v28 = (v25 & 0xFFFFFFFFFFFFFFFELL) + 8;
          else
            v28 = v26;
          sub_22E8FCA40(v14, *(_DWORD *)(*(_QWORD *)v28 + 24), v29, 0, (uint64_t)v32);
          sub_22E903BEC(v32);
          a1 = v14;
          a3 = v16;
          a2 = v15;
          break;
        }
        LODWORD(v19) = v19 + 1;
      }
    }
  }
LABEL_5:
  if ((_DWORD)a5)
  {
    if (!a1[1503])
    {
      v9 = *(_QWORD *)(a1[237] + 8 * *((unsigned int *)a1 + 476) - 8);
      if (*(_BYTE *)(*(_QWORD *)(v9 + 352) + 2 * *(_QWORD *)(v9 + 360) - 2))
      {
        v20 = (a5 - 1);
        if ((_DWORD)a5 != 1)
        {
          v21 = a4 + 1;
          v30 = a2;
          v31 = a1;
          do
          {
            v22 = a3;
            sub_22E990528(v31, *(v21 - 1), *v21);
            a2 = v30;
            a1 = v31;
            a3 = v22;
            ++v21;
            --v20;
          }
          while (v20);
        }
      }
    }
  }
  v10 = a2;
  v11 = a3;
  v12 = (unsigned __int8 *)sub_22E3CD3D4(a1[11] + 2032, 8 * a5 + 16, 3);
  return sub_22F0D6590(v12, a4, a5, v10, v11);
}

uint64_t sub_22ED2C1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t *v14[2];
  uint64_t v15;

  v3 = a3;
  v4 = (_DWORD *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 0)
    return v3;
  if ((sub_22EE67384(a1, a3 & 0xFFFFFFFFFFFFFFFELL, 0) & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v7 = *(unsigned int *)(v6 + 56);
  if ((_DWORD)v7)
  {
    v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v7 - 8) & 0xFFFFFFFFFFFFFFF8);
    v9 = *(_QWORD *)&v8[4 * (HIBYTE(*v8) & 1) + 12 + 4 * ((*v8 >> 9) & 1)];
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      v14[1] = (uint64_t *)a1;
      v15 = v10;
      v14[0] = &v15;
      if ((v3 & 1) != 0)
        return sub_22ED2C314(v14, v4);
      v11 = sub_22EBBCB14(a1, v4, 0, 0, sub_22ED39608, v14);
      if ((_DWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL) == v4)
        return sub_22ED2C314(v14, v4);
      return v11;
    }
    return 1;
  }
  sub_22EFF605C((uint64_t)v4);
  return sub_22EBCF22C(a1, (unint64_t)v4, v13, 0, (**(_QWORD **)(a1 + 72) & 0x200) != 0);
}

uint64_t sub_22ED2C314(uint64_t **a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t (**v9)();
  unsigned int v10;
  char v11;

  v2 = (uint64_t)a2;
  v3 = **a1;
  if ((*(_BYTE *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0 || (*a2 & 0x8000) != 0)
    return v2;
  v5 = (uint64_t)a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 2) != 0)
  {
    v10 = 1;
    v9 = 0;
    v11 = 0;
    v2 = sub_22ED02FD4(v5, a2, v3, &v9, 0);
    if (v10 >= 0x41)
    {
      if (v9)
        MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
    }
    return v2;
  }
  if ((*a2 & 0x10000) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_6;
  }
  else
  {
    LOBYTE(v10) = 0;
    v9 = off_24FAB82C8;
    v2 = sub_22EB4CB24(v5, a2, 0, &v9, 1);
    if ((v2 & 1) != 0)
    {
LABEL_6:
      if ((v2 & 1) != 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  v2 = sub_22EB1A358(v5, v2 & 0xFFFFFFFFFFFFFFFELL, 0);
  if ((v2 & 1) != 0)
  {
LABEL_7:
    if ((v2 & 1) != 0)
      return v2;
LABEL_15:
    v6 = v2 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EFF605C(v6);
    return sub_22EBCF22C(v5, v6, v7, 0, 0);
  }
LABEL_14:
  v2 = sub_22E90092C(v5, v2 & 0xFFFFFFFFFFFFFFFELL, **a1, 30, 0, 0);
  if ((v2 & 1) == 0)
    goto LABEL_15;
  return v2;
}

uint64_t sub_22ED2C48C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19[24];

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v8 = *(unsigned int *)(v7 + 56);
  if (!(_DWORD)v8)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xBC8u, 0, (uint64_t)v19);
    sub_22E903BEC(v19);
    return 1;
  }
  if (((a3 | a5) & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v8 - 8) |= 4uLL;
    return 1;
  }
  v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
  v13 = a5 & 0xFFFFFFFFFFFFFFFELL;
  if ((a5 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v14 = 52;
  else
    v14 = 40;
  v15 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, v14, 3);
  result = sub_22F0D8578(v15, v9, v13, a2, a4, a6);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * *(unsigned int *)(v17 + 56) - 8) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(result + 16) = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = result;
  return result;
}

void sub_22ED2C598(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 16] = a3;
}

uint64_t sub_22ED2C5AC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13[24];

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8) + 56))
  {
    result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
    *(_BYTE *)result = 99;
    if (byte_255E04EB3)
    {
      v12 = result;
      v11 = sub_22F0D3748(99);
      result = v12;
      ++*((_DWORD *)v11 + 2);
    }
    *(_DWORD *)(result + 4) = a2;
    *(_DWORD *)(result + 8) = a3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = a4;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * *(unsigned int *)(v9 + 56) - 8) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(result + 16) = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = result;
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xC86u, 0, (uint64_t)v13);
    sub_22E903BEC(v13);
    return a4;
  }
  return result;
}

unsigned __int8 *sub_22ED2C6AC(uint64_t a1, int a2, char **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v10 = 8 * a4;
  if (a4)
  {
    v11 = 8 * a4;
    v12 = a3;
    do
    {
      if (*((_WORD *)*v12 + 16) == 41)
      {
        if (!sub_22ED2C780((_QWORD *)a1, a5, *v12))
          return (unsigned __int8 *)a5;
        v13 = *(unsigned int *)(a1 + 1904);
        if ((_DWORD)v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v13 - 8);
          *(_DWORD *)(v14 + 8) |= 0x40u;
        }
      }
      ++v12;
      v11 -= 8;
    }
    while (v11);
  }
  v15 = (unsigned __int8 *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, v10 + 16, 3);
  return sub_22F0D84EC(v15, a2, a3, a4, a5);
}

uint64_t sub_22ED2C780(_QWORD *a1, uint64_t a2, char *a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 **v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  v6 = *(unsigned __int8 **)(a2 + 8);
  if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
    return 1;
  if (!v6)
  {
    if ((sub_22ED2C90C(a1, a2, a3) & 1) == 0)
      return 0;
    v8 = 0;
LABEL_37:
    *(_QWORD *)(a2 + 8) = v8;
    return 1;
  }
  if ((v6[1] & 0x40) != 0)
    return 1;
  result = sub_22ED2C90C(a1, a2, a3);
  if ((_DWORD)result)
  {
    while (1)
    {
      v8 = v6;
      v9 = *v6;
      if (v9 == 153)
      {
        v6 = sub_22EFFB374(v6);
      }
      else
      {
        if ((v9 & 0xFE) == 0xAC)
        {
          v10 = (unsigned __int8 **)(v6 + 16);
LABEL_14:
          v6 = *v10;
          goto LABEL_15;
        }
        if (v9 == 116)
        {
          v10 = (unsigned __int8 **)(v6 + 24);
          goto LABEL_14;
        }
        if (v9 == 186)
        {
          v11 = *((_QWORD *)v6 + 2);
          v6 = (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFF8);
          if ((v11 & 4) != 0)
          {
            v10 = (unsigned __int8 **)(v6 + 40);
            goto LABEL_14;
          }
        }
      }
LABEL_15:
      if ((*v6 & 0xFE) == 0x76 && (*(_DWORD *)v6 & 0x40000) != 0 && *(_DWORD *)v6 != 119)
      {
        v12 = *((_DWORD *)v6 + 8);
        if (v12)
        {
          if (v12 == 1)
          {
            v13 = v6 + 40;
            v14 = (unsigned __int8 **)(v6 + 40);
            goto LABEL_25;
          }
          if (sub_22EFFF908(*((unsigned __int8 **)v6 + 6)))
          {
            v13 = v6 + 40;
            if (*v6 == 119)
              v14 = (unsigned __int8 **)(v6 + 48);
            else
              v14 = (unsigned __int8 **)(v6 + 40);
LABEL_25:
            if (!sub_22EFFF908(*v14) && (*(_DWORD *)v6 & 0x100000) == 0)
            {
              v15 = *(_DWORD *)v6;
              v16 = v15 == 119;
              if (v15 == 119)
                v17 = v6;
              else
                v17 = 0;
              v18 = v17 + 48;
              if (!v16)
                v18 = v13;
              v6 = *(unsigned __int8 **)v18;
            }
          }
        }
      }
      if (v6 == v8)
        goto LABEL_37;
    }
  }
  return result;
}

uint64_t sub_22ED2C90C(_QWORD *a1, uint64_t a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int *v34;
  uint64_t v35;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 **v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  char *v88;
  char v89;
  char *v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121[25];
  unsigned __int8 v122;
  char *v123;
  unint64_t v124;
  int v125;
  uint64_t v126[2];
  _BYTE v127[96];
  unsigned int v128[24];
  _QWORD v129[2];
  __int128 v130;
  _BYTE v131[19];
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[13];

  v6 = *(unsigned __int8 **)(a2 + 8);
  if (!v6)
    goto LABEL_65;
  v7 = *(unsigned __int8 **)(a2 + 8);
  do
  {
    v8 = v7;
    v9 = *v7;
    if (v9 > 0xD5)
    {
      if (v9 == 233)
      {
        if ((*(_DWORD *)v7 & 0x7C0000) != 0x300000)
          goto LABEL_28;
        v11 = v7 + 16;
      }
      else
      {
        if (v9 != 214)
          goto LABEL_18;
        v11 = v7 + 24;
      }
LABEL_17:
      v7 = *(unsigned __int8 **)v11;
      v9 = **(unsigned __int8 **)v11;
      goto LABEL_18;
    }
    if (v9 == 155)
    {
      if ((**((_DWORD **)v7 + 2) & 0x18000) != 0)
        goto LABEL_28;
      if (v7[48])
        v11 = v7 + 24;
      else
        v11 = v7 + 32;
      goto LABEL_17;
    }
    if (v9 == 176)
    {
      v10 = *((unsigned int *)v7 + 5);
      if ((_DWORD)v10 == -1)
        goto LABEL_28;
      v11 = &v7[8 * v10 + 40];
      goto LABEL_17;
    }
LABEL_18:
    if (v9 == 153)
    {
      v7 = sub_22EFFB374(v7);
      goto LABEL_28;
    }
    if ((v9 & 0xFE) == 0xAC)
    {
      v12 = (unsigned __int8 **)(v7 + 16);
LABEL_27:
      v7 = *v12;
      goto LABEL_28;
    }
    if (v9 == 116)
    {
      v12 = (unsigned __int8 **)(v7 + 24);
      goto LABEL_27;
    }
    if (v9 == 186)
    {
      v13 = *((_QWORD *)v7 + 2);
      v7 = (unsigned __int8 *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 4) != 0)
      {
        v12 = (unsigned __int8 **)(v7 + 40);
        goto LABEL_27;
      }
    }
LABEL_28:
    if ((*v7 & 0xFE) == 0x76 && (*(_DWORD *)v7 & 0x40000) != 0 && *(_DWORD *)v7 != 119)
    {
      v14 = *((_DWORD *)v7 + 8);
      if (v14)
      {
        if (v14 == 1)
        {
          v15 = v7 + 40;
          v16 = (unsigned __int8 **)(v7 + 40);
        }
        else
        {
          if (!sub_22EFFF908(*((unsigned __int8 **)v7 + 6)))
            continue;
          v15 = v7 + 40;
          if (*v7 == 119)
            v16 = (unsigned __int8 **)(v7 + 48);
          else
            v16 = (unsigned __int8 **)(v7 + 40);
        }
        if (!sub_22EFFF908(*v16) && (*(_DWORD *)v7 & 0x100000) == 0)
        {
          v17 = *(_DWORD *)v7;
          v18 = v17 == 119;
          if (v17 == 119)
            v19 = v7;
          else
            v19 = 0;
          v20 = v19 + 48;
          if (!v18)
            v20 = v15;
          v7 = *(unsigned __int8 **)v20;
        }
      }
    }
  }
  while (v7 != v8);
  if ((*v8 + 118) >= 5u)
  {
LABEL_65:
    sub_22F0D5A50(a2);
    v30 = v29;
    v31 = a1;
    v32 = 3978;
LABEL_66:
    sub_22E8FCA40(v31, v30, v32, 0, (uint64_t)v140);
    v129[0] = a3;
    v33 = v129;
LABEL_67:
    sub_22E8FB3C4((uint64_t)v140, v33);
LABEL_68:
    v34 = (unsigned int *)v140;
    goto LABEL_69;
  }
  if (*v6 == 173 && (v6[2] & 4) != 0)
  {
    sub_22F0D5A50(a2);
    v30 = v38;
    v31 = a1;
    v32 = 3980;
    goto LABEL_66;
  }
  v136 = 0;
  v137 = 0;
  v139 = 0;
  v132 = 0;
  v133 = 0;
  v135 = 0;
  v129[0] = a1;
  v129[1] = a2;
  v21 = *((_OWORD *)a3 + 1);
  v130 = *(_OWORD *)a3;
  *(_OWORD *)v131 = v21;
  *(_DWORD *)&v131[15] = *(_DWORD *)(a3 + 31);
  v22 = a1[27];
  v23 = *(_WORD *)(v22 + 8);
  v24 = (v23 & 0x7E) - 58;
  if (v22)
    v25 = v22 - 72;
  else
    v25 = 0;
  if (v24 >= 0xFFFFFFFA)
    v26 = v25;
  else
    v26 = 0;
  if (!v22 || v24 <= 0xFFFFFFF9)
  {
    v37 = v23 & 0x7F;
    if (v37 == 24)
    {
      v39 = 1;
    }
    else
    {
      if (v37 == 1)
      {
        LODWORD(v126[0]) = 0;
LABEL_81:
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v40, 0xF87u, 0, (uint64_t)v140);
        v123 = a3;
        v41 = sub_22E8FB3C4((uint64_t)v140, (uint64_t *)&v123);
        sub_22E8900C4(v41, (int *)v126);
        goto LABEL_68;
      }
      v39 = 2;
    }
    LODWORD(v126[0]) = v39;
    goto LABEL_81;
  }
  if (v24 >= 0xFFFFFFFC)
  {
    v35 = 0;
    if (!sub_22ED2D4E0((uint64_t)v129, v25, (uint64_t)&v136, 0))
      return v35;
  }
  else
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v26 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = *(_BYTE *)(v27 + 16) == 26;
    else
      v28 = 0;
    if (!v28)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v27 = sub_22F10CF48(v27);
      else
        v27 = 0;
    }
    v138 = v27;
  }
  v42 = *(unsigned __int8 **)&v8[v8[3]];
  while (2)
  {
    v43 = v42;
    v44 = *v42;
    if (v44 <= 0xD5)
    {
      if (v44 == 155)
      {
        if ((**((_DWORD **)v42 + 2) & 0x18000) != 0)
        {
          v44 = 155;
          goto LABEL_105;
        }
        if (v42[48])
          v46 = (unsigned __int8 **)(v42 + 24);
        else
          v46 = (unsigned __int8 **)(v42 + 32);
        v44 = 155;
      }
      else
      {
        if (v44 != 176)
          goto LABEL_105;
        v45 = *((unsigned int *)v42 + 5);
        if ((_DWORD)v45 == -1)
        {
          v44 = 176;
          goto LABEL_105;
        }
        v46 = (unsigned __int8 **)&v43[8 * v45 + 40];
        v44 = 176;
      }
      goto LABEL_100;
    }
    if (v44 != 233)
    {
      if (v44 != 214)
        goto LABEL_105;
      v46 = (unsigned __int8 **)(v42 + 24);
LABEL_100:
      v42 = *v46;
      if (v42 == v43)
        goto LABEL_105;
      continue;
    }
    break;
  }
  v47 = *(_DWORD *)v42;
  if ((v47 & 0x7C0000) == 0x300000)
  {
    v44 = v47;
    v46 = (unsigned __int8 **)(v43 + 16);
    goto LABEL_100;
  }
  v44 = 233;
LABEL_105:
  if ((v44 & 0xFE) == 0x70)
    v48 = v43;
  else
    v48 = 0;
  v49 = sub_22EFFA604(*(unsigned __int8 **)&v8[v8[3]]);
  if (!v49)
  {
    sub_22F0D5A50(a2);
    v51 = v53;
    goto LABEL_113;
  }
  v50 = v49;
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  if ((*(_DWORD *)(v50 + 28) & 0x7Eu) - 54 > 3)
  {
LABEL_113:
    if (v48 && (v48[2] & 0xF8) == 0)
    {
      v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v48 + 3) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v61)
        v62 = *(_BYTE *)(v61 + 16) == 31;
      else
        v62 = 0;
      if (!v62)
        v61 = sub_22F10CF48(v61);
      v63 = *(_QWORD *)(v61 + 32);
      v133 = *(_QWORD *)(v61 + 40) & 0xFFFFFFFFFFFFFFF0;
      v52 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
      if (v52)
        v64 = *(_BYTE *)(v52 + 16) == 26;
      else
        v64 = 0;
      if (!v64)
        v52 = sub_22F10CF48(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
      v134 = v52;
      v132 = 3;
    }
    else
    {
      if (v44 == 129)
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v54, 0xF8Fu, 0, (uint64_t)v140);
        LODWORD(v123) = 1;
        v55 = sub_22E8900C4((uint64_t)v140, (int *)&v123);
        LODWORD(v126[0]) = 1;
        sub_22E8900C4(v55, (int *)v126);
LABEL_117:
        sub_22E903BEC((unsigned int *)v140);
        v56 = *((_DWORD *)a3 + 4);
        v57 = a1;
        v58 = 6095;
LABEL_151:
        sub_22E8FCA40(v57, v56, v58, 0, (uint64_t)v140);
        v123 = a3;
        v33 = (uint64_t *)&v123;
        goto LABEL_67;
      }
      v59 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v43 + 1) & 0xFFFFFFFFFFFFFFF0));
      v52 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
      if (v52)
        v60 = *(_BYTE *)(v52 + 16) == 26;
      else
        v60 = 0;
      if (!v60)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
          v52 = sub_22F10CF48(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0));
        else
          v52 = 0;
      }
      v134 = v52;
    }
LABEL_137:
    v65 = v138;
    if (!v52 || !v138)
    {
      sub_22F0D5A50(a2);
      sub_22E8FCA40(a1, v74, 0xF8Bu, 0, (uint64_t)v140);
      v123 = a3;
      sub_22E8FB3C4((uint64_t)v140, (uint64_t *)&v123);
      sub_22E903BEC((unsigned int *)v140);
      if (!v52)
      {
        v78 = sub_22EFFA604(*(unsigned __int8 **)&v8[v8[3]]);
        if (v78)
        {
          if ((*(_DWORD *)(v78 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
          {
            v79 = *(_QWORD *)(v78 + 56);
            if ((v79 & 4) != 0 && (v120 = v79 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v120 + 16)))
              v80 = **(int ***)(v120 + 24);
            else
              v80 = (int *)(v78 + 64);
            sub_22E8FCA40(a1, *v80, 0x16BCu, 0, (uint64_t)v128);
            sub_22E903BEC(v128);
          }
        }
      }
      if (v65)
        return 0;
      v75 = *(_QWORD *)(v26 + 56);
      if ((v75 & 4) != 0 && (v119 = v75 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v119 + 16)))
        v76 = **(int ***)(v119 + 24);
      else
        v76 = (int *)(v26 + 64);
      sub_22E8FCA40(a1, *v76, 0x16BCu, 0, (uint64_t)v127);
      v34 = (unsigned int *)v127;
LABEL_69:
      sub_22E903BEC(v34);
      return 0;
    }
    v66 = *(_QWORD *)(v138 + 16);
    v67 = *(_QWORD *)(v52 + 16);
    if (((v67 ^ v66) & 0xF80000) != 0)
    {
      v104 = sub_22EFFA604(*(unsigned __int8 **)&v8[v8[3]]);
      if (v104 && (v105 = v104, (*(_DWORD *)(v104 + 28) & 0x7Fu) - 13 <= 0x3D))
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v106, 0xF86u, 0, (uint64_t)v140);
        LOBYTE(v126[0]) = 1;
        v107 = sub_22E894E38((uint64_t)v140, (unsigned __int8 *)v126);
        v123 = *(char **)(v105 + 40);
        sub_22E894538(v107, (uint64_t *)&v123);
      }
      else
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v108, 0xF86u, 0, (uint64_t)v140);
        LOBYTE(v123) = 0;
        sub_22E894E38((uint64_t)v140, (unsigned __int8 *)&v123);
      }
      sub_22E903BEC((unsigned int *)v140);
      sub_22E8FCA40(a1, v51, 0x16BAu, 0, (uint64_t)v140);
      v123 = sub_22F40A550((*(_DWORD *)(v65 + 16) >> 19) & 0x1F);
      v124 = v109;
      v110 = sub_22F2F2210((uint64_t)v140, (uint64_t)&v123);
      v126[0] = (uint64_t)sub_22F40A550((*(_DWORD *)(v52 + 16) >> 19) & 0x1F);
      v126[1] = v111;
      sub_22F2F2210(v110, (uint64_t)v126);
      goto LABEL_117;
    }
    if (((v67 | v66) & 0x800000000000000) != 0)
    {
      sub_22F0D5A50(a2);
      v56 = v77;
      v57 = a1;
      v58 = 3981;
      goto LABEL_151;
    }
    if (v137 < 0x10 != v133 < 0x10)
    {
      v68 = sub_22EFFA604(*(unsigned __int8 **)&v8[v8[3]]);
      if (v68 && (v69 = v68, (*(_DWORD *)(v68 + 28) & 0x7Fu) - 13 <= 0x3D))
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v70, 0xF88u, 0, (uint64_t)v140);
        v71 = sub_22E8900C4((uint64_t)v140, &v136);
        v72 = sub_22E8900C4(v71, &v132);
        LOBYTE(v126[0]) = 1;
        v73 = sub_22E894E38(v72, (unsigned __int8 *)v126);
        v123 = *(char **)(v69 + 40);
        sub_22E894538(v73, (uint64_t *)&v123);
        sub_22E903BEC((unsigned int *)v140);
        sub_22E8FCA40(a1, v51, 0x16BBu, 0, (uint64_t)v140);
        v123 = *(char **)(v69 + 40);
        sub_22E894538((uint64_t)v140, (uint64_t *)&v123);
      }
      else
      {
        sub_22F0D5A50(a2);
        sub_22E8FCA40(a1, v100, 0xF88u, 0, (uint64_t)v140);
        v101 = sub_22E8900C4((uint64_t)v140, &v136);
        v102 = sub_22E8900C4(v101, &v132);
        LOBYTE(v123) = 0;
        sub_22E894E38(v102, (unsigned __int8 *)&v123);
      }
      goto LABEL_117;
    }
    v81 = a1[11] + 2128;
    v123 = 0;
    v124 = v81;
    v125 = 5821;
    v140[0] = a1;
    v140[1] = &v123;
    if ((v137 < 0x10 || sub_22ED38098(v140, v137, v133, 0))
      && sub_22ED38098(v140, *(_QWORD *)(v65 + 24), *(_QWORD *)(v52 + 24), 3u))
    {
      v82 = *(_QWORD *)(v65 + 16);
      if (((*(_QWORD *)(v52 + 16) ^ v82) & 0x3FFFC000000000) != 0)
      {
        v83 = v123;
        if (!v123)
        {
          v83 = (char *)sub_22E3B8AAC(v124);
          v123 = v83;
        }
        v83[*v83 + 1] = 2;
        v84 = v123;
        v85 = *v123;
        v86 = v85 + 1;
        *v123 = v85 + 1;
        *(_QWORD *)&v84[8 * v85 + 16] = 1;
        v87 = (unsigned __int16)(*(_QWORD *)(v65 + 16) >> 38);
        v88 = &v84[v86];
        v89 = 3;
        v88[1] = 3;
        v90 = v123;
        v91 = *v123;
        v92 = v91 + 1;
        *v123 = v91 + 1;
        *(_QWORD *)&v90[8 * v91 + 16] = v87;
        v93 = (unsigned __int16)(*(_QWORD *)(v52 + 16) >> 38);
      }
      else
      {
        v112 = (unsigned __int16)(v82 >> 38);
        if (!(unsigned __int16)(v82 >> 38))
        {
LABEL_183:
          v35 = 1;
LABEL_171:
          if (v123 && v124)
            sub_22E3BB10C(v124, (unint64_t)v123);
          return v35;
        }
        v113 = (uint64_t *)(v52 + 40);
        v114 = (unint64_t *)(v65 + 40);
        v115 = 0x100000000;
        while (1)
        {
          v117 = *v113++;
          v116 = v117;
          v118 = *v114++;
          if (!sub_22ED38098(v140, v116, v118, 2u))
            break;
          v115 += 0x100000000;
          if (!--v112)
            goto LABEL_183;
        }
        v90 = v123;
        if (!v123)
        {
          v90 = (char *)sub_22E3B8AAC(v124);
          v123 = v90;
        }
        v93 = v115 >> 32;
        v92 = *v90;
        v89 = 2;
      }
      v90[v92 + 1] = v89;
      v94 = v123;
      v95 = *v123;
      *v123 = v95 + 1;
      *(_QWORD *)&v94[8 * v95 + 16] = v93;
    }
    v96 = sub_22EFFA604(*(unsigned __int8 **)&v8[v8[3]]);
    if (v96 && (v97 = v96, (*(_DWORD *)(v96 + 28) & 0x7Fu) - 13 <= 0x3D))
    {
      sub_22F0D5A50(a2);
      sub_22E8FCA40(a1, v98, 0xF89u, 0, (uint64_t)v140);
      v122 = 1;
      v99 = sub_22E894E38((uint64_t)v140, &v122);
      v126[0] = *(_QWORD *)(v97 + 40);
      sub_22E894538(v99, v126);
    }
    else
    {
      sub_22F0D5A50(a2);
      sub_22E8FCA40(a1, v103, 0xF89u, 0, (uint64_t)v140);
      LOBYTE(v126[0]) = 0;
      sub_22E894E38((uint64_t)v140, (unsigned __int8 *)v126);
    }
    sub_22E903BEC((unsigned int *)v140);
    sub_22E90379C(a1, v51, (uint64_t)&v123, 0, (uint64_t)v121);
    sub_22E903BEC(v121);
    sub_22E8FCA40(a1, *((_DWORD *)a3 + 4), 0x17CFu, 0, (uint64_t)v140);
    v126[0] = (uint64_t)a3;
    sub_22E8FB3C4((uint64_t)v140, v126);
    sub_22E903BEC((unsigned int *)v140);
    v35 = 0;
    goto LABEL_171;
  }
  if (sub_22ED2D4E0((uint64_t)v129, v50, (uint64_t)&v132, 1u))
  {
    v52 = v134;
    goto LABEL_137;
  }
  return 0;
}

BOOL sub_22ED2D4E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21[25];
  unsigned __int8 v22;

  v22 = a4;
  v6 = *(_QWORD **)a1;
  v7 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v7 == 57 || v7 == 55)
  {
    sub_22F0D5A50(*(_QWORD *)(a1 + 8));
    sub_22E8FCA40(v6, v8, 0xF8Fu, 0, (uint64_t)v21);
    v9 = sub_22E894E38((uint64_t)v21, &v22);
    LOBYTE(v20) = (*(_DWORD *)(a2 + 28) & 0x7F) == 57;
    sub_22E894E38(v9, (unsigned __int8 *)&v20);
    sub_22E903BEC(v21);
    if (v22)
    {
      v10 = *(_QWORD *)(a2 + 56);
      if ((v10 & 4) != 0 && (v19 = v10 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v19 + 16)))
        v11 = **(int ***)(v19 + 24);
      else
        v11 = (int *)(a2 + 64);
      sub_22E8FCA40(v6, *v11, 0x16BEu, 0, (uint64_t)v21);
      LOBYTE(v20) = (*(_DWORD *)(a2 + 28) & 0x7F) == 57;
      sub_22E894E38((uint64_t)v21, (unsigned __int8 *)&v20);
      sub_22E903BEC(v21);
    }
    sub_22E8FCA40(v6, *(_DWORD *)(a1 + 32), 0x17CFu, 0, (uint64_t)v21);
    v20 = a1 + 16;
    sub_22E8FB3C4((uint64_t)v21, &v20);
    sub_22E903BEC(v21);
  }
  else
  {
    if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
      || (*(_QWORD *)(a2 + 40) & 7) == 6
      && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
    {
      v13 = 1;
    }
    else
    {
      v14 = sub_22EFD7558(a2);
      *(_QWORD *)(a3 + 8) = sub_22F10ACF8(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
      v13 = 2;
    }
    *(_DWORD *)a3 = v13;
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v15)
      v16 = *(_BYTE *)(v15 + 16) == 26;
    else
      v16 = 0;
    if (!v16)
      v15 = sub_22F10CF48(v15);
    *(_QWORD *)(a3 + 16) = v15;
  }
  return v7 != 55 && v7 != 57;
}

uint64_t sub_22ED2D6D0(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unsigned int *a8, int a9, _BYTE *a10)
{
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v57[8];
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  BOOL *v61;
  int *v62;
  unsigned int **v63;
  int *v64;
  BOOL v65;
  unsigned int *v66;
  int v67;
  int v68;

  v67 = a4;
  v68 = a2;
  v66 = a8;
  if (*(_BYTE *)(a6 + 16))
    return 1;
  v15 = a3 & 0xFFFFFFFE;
  v65 = (a3 & 0xFFFFFFFE) == 2;
  v16 = *(_DWORD **)(a6 + 8);
  if (v16)
  {
    if ((**(_WORD **)(a1 + 72) & 0x101) != 0)
    {
      v17 = *(_QWORD *)(a1 + 104);
      sub_22EFF605C(*(_QWORD *)(a6 + 8));
      if (sub_22F1CF68C(*(_QWORD *)(v17 + 32), 0x18CFu, v18, v17) != 1)
      {
        v60 = *(unsigned __int8 **)(a1 + 88);
        v61 = (BOOL *)a1;
        sub_22ED2DC2C((uint64_t)&v60, v16);
      }
    }
  }
  if (v15 != 2 && !a10)
  {
    sub_22F0D60E4((uint64_t)v16);
    sub_22E99040C((unsigned int *)a1, v19, (uint64_t)a8, 0x1984u);
  }
  if ((a3 - 1) > 2)
  {
    sub_22F0D47C0(a8, a10, (uint64_t)v57);
    if (v57[0])
    {
      v21 = v58;
      v20 = v59;
      v22 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v22 + 312) = *(_QWORD *)(v58 + 16);
      *(_DWORD *)(v22 + 316) = 6291;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      v23 = (unsigned __int8 *)(v22 + 320);
      v60 = (unsigned __int8 *)(v22 + 320);
      v61 = 0;
      v62 = (int *)v22;
      LOWORD(v63) = 1;
      *(_BYTE *)(v22 + 320) = 0;
      *(_DWORD *)(v22 + 664) = 0;
      v24 = *(unsigned int *)(v22 + 776);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v22 + 768);
        v26 = 56 * v24;
        do
        {
          if (*(char *)(v25 + v26 - 9) < 0)
            operator delete(*(void **)(v25 + v26 - 32));
          v26 -= 56;
        }
        while (v26);
        v23 = v60;
        *(_DWORD *)(v22 + 776) = 0;
        if (!v23)
        {
          v23 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v61);
          v60 = v23;
        }
      }
      else
      {
        *(_DWORD *)(v22 + 776) = 0;
      }
      v23[*v23 + 1] = 15;
      v27 = v60;
      v28 = *v60;
      *v60 = v28 + 1;
      *(_QWORD *)&v27[8 * v28 + 16] = v21;
      sub_22E4D6448((uint64_t)(v27 + 336), *(_QWORD *)(v21 + 16), 1);
      sub_22E3BB0B8((uint64_t)&v60);
      v29 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)(v29 + 312) = *(_QWORD *)(v20 + 16);
      *(_DWORD *)(v29 + 316) = 5492;
      if (*(char *)(v29 + 311) < 0)
      {
        **(_BYTE **)(v29 + 288) = 0;
        *(_QWORD *)(v29 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v29 + 288) = 0;
        *(_BYTE *)(v29 + 311) = 0;
      }
      v30 = (unsigned __int8 *)(v29 + 320);
      v60 = (unsigned __int8 *)(v29 + 320);
      v61 = 0;
      v62 = (int *)v29;
      LOWORD(v63) = 1;
      *(_BYTE *)(v29 + 320) = 0;
      *(_DWORD *)(v29 + 664) = 0;
      v31 = *(unsigned int *)(v29 + 776);
      if ((_DWORD)v31)
      {
        v32 = *(_QWORD *)(v29 + 768);
        v33 = 56 * v31;
        do
        {
          if (*(char *)(v32 + v33 - 9) < 0)
            operator delete(*(void **)(v32 + v33 - 32));
          v33 -= 56;
        }
        while (v33);
        LODWORD(v31) = *v30;
      }
      *(_DWORD *)(v29 + 776) = 0;
      v30[v31 + 1] = 15;
      *(_BYTE *)(v29 + 320) = v31 + 1;
      *(_QWORD *)&v30[8 * v31 + 16] = v20;
      sub_22E4D6448(v29 + 656, *(_QWORD *)(v20 + 16), 1);
      sub_22E3BB0B8((uint64_t)&v60);
    }
  }
  else
  {
    v60 = (unsigned __int8 *)a1;
    v61 = &v65;
    v62 = &v68;
    v63 = &v66;
    v64 = &v67;
    sub_22ED2DDC4((uint64_t *)&v60, a8);
    sub_22ED2DDC4((uint64_t *)&v60, a10);
  }
  if (!v65)
    goto LABEL_67;
  v34 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v35 = *(_DWORD *)(v34 - 576);
  if (v35 == 5)
    v36 = 1;
  else
    v36 = v35 == 2 && *(unsigned __int8 *)(v34 - 3) != 0;
  v37 = *(_QWORD *)(a1 + 216);
  v38 = *(_WORD *)(v37 + 8) & 0x7F;
  if (v38 - 1 < 2)
  {
    v39 = -40;
LABEL_47:
    v40 = v37 + v39;
    if ((*(_DWORD *)(v40 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && (*(_QWORD *)(v40 + 80) & 0xC0000000) == 0x80000000)
      v36 = 1;
    goto LABEL_50;
  }
  if (v38 == 24)
  {
LABEL_46:
    v39 = -48;
    goto LABEL_47;
  }
  if (v38 - 52 <= 5)
  {
    v39 = -40;
    if ((*(_WORD *)(v37 + 8) & 0x7Fu) > 0x46)
    {
      switch(v38)
      {
        case 'S':
          goto LABEL_47;
        case 'G':
          v39 = -56;
          goto LABEL_47;
        case 'Q':
          goto LABEL_47;
      }
    }
    else
    {
      if (v38 <= 0x18)
      {
        if (v38 == 16)
          goto LABEL_46;
        if (((1 << v38) & 0x1066) != 0)
          goto LABEL_47;
      }
      if (v38 == 70)
      {
LABEL_82:
        v39 = -64;
        goto LABEL_47;
      }
    }
    if (v38 - 52 < 6)
    {
      v39 = -72;
      goto LABEL_47;
    }
    if (v38 - 33 >= 5)
      goto LABEL_46;
    goto LABEL_82;
  }
LABEL_50:
  if (v35 <= 3 && v35 != 2 || v36)
  {
    v43 = *(_QWORD *)(a1 + 104);
    *(_DWORD *)(v43 + 312) = v68;
    *(_DWORD *)(v43 + 316) = 6377;
    if (*(char *)(v43 + 311) < 0)
    {
      **(_BYTE **)(v43 + 288) = 0;
      *(_QWORD *)(v43 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v43 + 288) = 0;
      *(_BYTE *)(v43 + 311) = 0;
    }
    v44 = (unsigned __int8 *)(v43 + 320);
    v60 = (unsigned __int8 *)(v43 + 320);
    v61 = 0;
    v62 = (int *)v43;
    LOWORD(v63) = 1;
    *(_BYTE *)(v43 + 320) = 0;
    *(_DWORD *)(v43 + 664) = 0;
    v45 = *(unsigned int *)(v43 + 776);
    if ((_DWORD)v45)
    {
      v46 = *(_QWORD *)(v43 + 768);
      v47 = 56 * v45;
      do
      {
        if (*(char *)(v46 + v47 - 9) < 0)
          operator delete(*(void **)(v46 + v47 - 32));
        v47 -= 56;
      }
      while (v47);
      LODWORD(v45) = *v44;
    }
    *(_DWORD *)(v43 + 776) = 0;
    v44[v45 + 1] = 2;
    *(_BYTE *)(v43 + 320) = v45 + 1;
    *(_QWORD *)&v44[8 * v45 + 16] = v36;
    sub_22E3BB0B8((uint64_t)&v60);
  }
LABEL_67:
  if (*(_BYTE *)(a6 + 16))
    return 1;
  v50 = v67;
  v49 = v68;
  v51 = *(_QWORD *)a6;
  v52 = *(unsigned __int8 **)(a6 + 8);
  v53 = (uint64_t)v66;
  if (a3 || *v52 == 194)
  {
    v54 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v54)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v54 - 8);
      *(_DWORD *)(v55 + 8) |= 8u;
    }
  }
  return (uint64_t)sub_22F0D7F08(*(_QWORD *)(a1 + 88), v49, a3, a5, v51, (uint64_t)v52, v50, a7, v53, a9, (uint64_t)a10);
}

void sub_22ED2DC2C(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        sub_22ED3960C(a1, (uint64_t)a2);
        return;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
  sub_22ED39654(a1, (uint64_t)a2);
}

void sub_22ED2DD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22ED2DC2C(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  JUMPOUT(0x22ED2DD6CLL);
}

uint64_t sub_22ED2DDC4(uint64_t *a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  result = sub_22F3F18CC(a2);
  if (result)
  {
    v4 = result;
    v5 = *a1;
    v6 = *(_QWORD *)(*a1 + 104);
    *(_DWORD *)(v6 + 312) = *(_QWORD *)(result + 16);
    *(_DWORD *)(v6 + 316) = 6258;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v20 = v6 + 320;
    v21 = 0;
    v22 = v6;
    v23 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v7 = *(unsigned int *)(v6 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(v6 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
      LODWORD(v7) = *(unsigned __int8 *)(v6 + 320);
    }
    *(_DWORD *)(v6 + 776) = 0;
    *(_BYTE *)(v6 + 321 + v7) = 15;
    *(_QWORD *)(v6 + 336 + 8 * v7) = v4;
    v10 = *(unsigned __int8 *)a1[1];
    v11 = (v7 + 1);
    *(_BYTE *)(v6 + 321 + v11) = 2;
    *(_BYTE *)(v6 + 320) = v7 + 2;
    *(_QWORD *)(v6 + 336 + 8 * v11) = v10;
    sub_22E4D6448(v6 + 656, *(_QWORD *)(v4 + 16), 1);
    sub_22E3BB0B8((uint64_t)&v20);
    v12 = *(_QWORD *)(v5 + 104);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a1[2];
    *(_DWORD *)(v12 + 316) = 5453;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v12 + 320);
    v20 = v12 + 320;
    v21 = 0;
    v22 = v12;
    v23 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v14 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v12 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
      LODWORD(v14) = *v13;
    }
    *(_DWORD *)(v12 + 776) = 0;
    v17 = *(unsigned __int8 *)a1[1];
    v13[v14 + 1] = 2;
    *(_BYTE *)(v12 + 320) = v14 + 1;
    *(_QWORD *)&v13[8 * v14 + 16] = v17;
    v18 = *(unsigned int *)a1[2];
    if (*(_BYTE *)a1[1])
      sub_22F0D5A50(*(_QWORD *)a1[3]);
    else
      v19 = *(_DWORD *)a1[4];
    sub_22E4D6448(v12 + 656, v18 | ((unint64_t)(v19 - 1) << 32), 1);
    return sub_22E3BB0B8((uint64_t)&v20);
  }
  return result;
}

unint64_t sub_22ED2DFE0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t (**v12)();
  __int16 v13;
  char v14;
  uint64_t v15;

  v13 = 256;
  v4 = 1;
  v14 = 1;
  v12 = off_24FAB9180;
  v15 = a3;
  v5 = sub_22ED03140(a1, a2, a3, &v12);
  if ((v5 & 1) == 0)
  {
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) == 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v8 = *(_DWORD *)(v7 + 16);
      if (v7)
        v9 = v8 == 11;
      else
        v9 = 0;
      if (v9)
      {
        if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          return 1;
      }
      else
      {
        if (v7 && v8 == 44)
        {
          v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
          if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) < 8uLL)
            return 1;
          return sub_22EB1B998(a1, v6);
        }
        if (v8 != 9)
          return 1;
      }
    }
    return sub_22EB1B998(a1, v6);
  }
  return v4;
}

uint64_t sub_22ED2E0D4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v11;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  unsigned int v26[24];

  v11 = a5[1];
  if (v11 && (*(_BYTE *)(v11 + 1) & 0x80) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v14 = *(_DWORD *)(v13 + 16);
    if (v13)
      v15 = v14 == 11;
    else
      v15 = 0;
    if (v15)
    {
      if (((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        return 1;
    }
    else
    {
      if (v13 && v14 == 44)
      {
        v16 = sub_22F114198(*(_QWORD *)(v13 + 24));
        if ((*(_BYTE *)(v16 + 74) & 1) == 0 && *(_QWORD *)(v16 + 128) < 8uLL)
          return 1;
        goto LABEL_13;
      }
      if (v14 != 9)
        return 1;
    }
LABEL_13:
    if (sub_22EFF5C90((unsigned __int8 *)v11, 1))
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x18AEu, 0, (uint64_t)v26);
      sub_22F0D4E74(v11);
      v25 = v17;
      sub_22E8906A0((uint64_t)v26, &v25);
      sub_22E903BEC(v26);
    }
  }
  v18 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v18 - 8);
    *(_DWORD *)(v19 + 8) |= 0x10u;
  }
  v20 = sub_22F0D8248(*(_QWORD *)(a1 + 88), a4, *a5, v11, a3, a6);
  v21 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v21)
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v21 - 8);
  else
    v22 = 0;
  v23 = *(_DWORD *)(v22 + 56);
  if (v23 >= *(_DWORD *)(v22 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(v22 + 56);
  }
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * v23) = v20 & 0xFFFFFFFFFFFFFFFBLL;
  ++*(_DWORD *)(v22 + 56);
  return v20;
}

uint64_t sub_22ED2E298()
{
  uint64_t v0;
  int v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int8 *i;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL (**v42)(llvm::APInt *, llvm::APInt *);
  unint64_t v43;
  BOOL (*v44)(llvm::APInt *, llvm::APInt *);
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  const std::nothrow_t *v64;
  unint64_t v65;
  void *v66;
  BOOL v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  llvm::APInt *v72;
  int v73;
  unint64_t v74;
  llvm::APInt *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unint64_t v78;
  _DWORD *v80;
  size_t v81;
  const char *v82;
  unsigned int v83;
  unint64_t v84;
  _DWORD *v86;
  uint64_t v87;
  const char *v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int *v92;
  int v93;
  const char *v94;
  void *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  const std::nothrow_t *v103;
  unint64_t v104;
  llvm::APInt *v105;
  llvm::APInt *v106;
  int v107;
  uint64_t v108;
  int j;
  char *v110;
  unsigned __int16 *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  _BYTE *v132;
  unsigned int v133;
  void *v134;
  _BYTE *v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  char *v141;
  char *v142;
  unsigned int v143;
  int64x2_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  llvm::APInt *v157;
  char v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  const llvm::APInt *v164;
  int v165;
  uint64_t v166;
  llvm::APInt *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  const llvm::APInt *v172;
  int v173;
  int v174;
  size_t v175;
  const void *v176;
  unint64_t *p_dst;
  uint64_t v178;
  uint64_t v179;
  int v180;
  char *v181;
  char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  const llvm::APInt *v190;
  unint64_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  char *v195;
  const std::nothrow_t *v196;
  unint64_t v197;
  void *v198;
  int v199;
  void *v200;
  const void *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int8 *v206;
  int v207;
  BOOL (*v208)(llvm::APInt *, llvm::APInt *);
  const llvm::APInt *v209;
  unsigned __int8 *v210;
  int v211;
  unsigned __int16 *v212;
  unint64_t v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int16 *v216;
  unint64_t v217;
  int v218;
  char v219;
  _QWORD *v220;
  unsigned __int16 *v221;
  unint64_t v222;
  unsigned __int8 *v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int16 *v255;
  unint64_t v256;
  _BOOL4 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  char v264;
  char v265;
  uint64_t v266;
  int v267;
  int v268;
  _BOOL4 v269;
  char v270;
  unsigned int v271;
  unsigned int *v272;
  int v273;
  uint64_t v274;
  void *__p[2];
  _BYTE *v276;
  unsigned int v277[24];
  uint64_t v278;
  unsigned int v279[24];
  BOOL (*v280)(llvm::APInt *, llvm::APInt *);
  unsigned int v281;
  char v282;
  unsigned int v283[24];
  uint64_t v284;
  unsigned int v285;
  char v286;
  unsigned int v287[24];
  unsigned int v288[24];
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t __dst;
  uint64_t v294;
  _QWORD v295[8];
  _BYTE v296[25];
  _BYTE v297[56];
  uint64_t v298;
  BOOL (*v299)(llvm::APInt *, llvm::APInt *);
  int64x2_t v300;
  uint64_t v301;
  void **v302;
  unint64_t v303;
  uint64_t v304;
  _QWORD v305[195];

  v0 = MEMORY[0x24BDAC7A8]();
  v305[192] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 1896) + 8 * *(unsigned int *)(v0 + 1904) - 8);
  v5 = *(unsigned int *)(v4 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 56) = v5 - 1;
  if (!v3)
    return 1;
  v7 = (HIBYTE(*v2) & 1) + ((*v2 >> 9) & 1);
  *(_QWORD *)&v2[4 * v7 + 16] = v3;
  *((_DWORD *)v2 + 1) = v1;
  v8 = *(unsigned __int8 **)&v2[4 * v7 + 12];
  if (!v8)
    return 1;
  v9 = *((_QWORD *)v8 + 1);
  v10 = *v8;
  v11 = *(unsigned __int8 **)&v2[4 * v7 + 12];
  if ((v10 & 0xFE) == 0xAC)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
    v10 = *v11;
  }
  while (v10 == 153 && (*(_DWORD *)v11 & 0x1FC0000) == 0x780000)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
    v10 = *v11;
  }
  v256 = v6;
  v272 = (unsigned int *)v0;
  v13 = *((_QWORD *)v11 + 1);
  v292 = v13;
  v259 = (uint64_t)v8;
  v260 = (uint64_t)v2;
  v14 = *(_DWORD *)v8 & 0x18000;
  v15 = v14 != 0;
  v258 = v3;
  if (v14)
  {
    v270 = sub_22F110A40(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
    v271 = 0;
    v262 = 0;
  }
  else
  {
    v271 = sub_22EF6A330(*(_QWORD *)(v0 + 88), v9);
    v270 = sub_22F110A40(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
    v262 = sub_22EF6A330(*((_QWORD *)v272 + 11), v13);
  }
  v264 = 0;
  v265 = sub_22F110A40(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
  v16 = 0;
  v303 = (unint64_t)v305;
  v304 = 0x4000000000;
  v289 = 0;
  v290 = 0;
  v291 = 0;
  if (!v14)
  {
    v17 = *(unsigned __int16 **)(v260 + 8);
    if (v17)
    {
      v16 = 0;
      v264 = 0;
      while (1)
      {
        if (*(_BYTE *)v17 == 99)
        {
          if (v16)
          {
            sub_22E8FCA40(v272, *((_DWORD *)v17 + 1), 0xF78u, 0, (uint64_t)v288);
            sub_22E903BEC(v288);
            sub_22E8FCA40(v272, *((_DWORD *)v16 + 1), 0x65u, 0, (uint64_t)v287);
            sub_22E903BEC(v287);
            v15 = 0;
            v264 = 1;
          }
          else
          {
            v15 = 0;
          }
          v16 = v17;
          goto LABEL_80;
        }
        v18 = *((_QWORD *)v17 + 3);
        if ((*(_DWORD *)v18 & 0x10000) != 0)
        {
          v59 = v272;
          goto LABEL_435;
        }
        if ((*(_DWORD *)v18 & 0xFE) == 0xAC)
        {
          i = *(unsigned __int8 **)(v18 + 16);
          goto LABEL_24;
        }
        v20 = *(_DWORD *)v18;
        for (i = (unsigned __int8 *)*((_QWORD *)v17 + 3); v20 == 153 && (*(_DWORD *)i & 0x1FC0000) == 0x780000; v20 = *i)
        {
          i = (unsigned __int8 *)*((_QWORD *)i + 2);
LABEL_24:
          ;
        }
        sub_22F007D7C(i, *((_QWORD *)v272 + 11), 0, (uint64_t)__p);
        sub_22F0D5A50(v18);
        sub_22ED3032C(v272, v21, (llvm::APInt *)__p, v262, v265);
        *(_QWORD *)v296 = *((_QWORD *)v11 + 1);
        v22 = *((_QWORD *)i + 1);
        __dst = v22;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v296 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 44)
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v296 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        else
          v23 = 0;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 44)
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        else
          v24 = 0;
        if (v23)
          v25 = v24 == 0;
        else
          v25 = 1;
        if (!v25)
        {
          v26 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v23 + 24)) + 40);
          v27 = v26 >= 8 && (v26 & 7) == 0;
          if (v27
            || ((v28 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v23 + 24)) + 120), v28 >= 8)
              ? (v29 = (v28 & 4) == 0)
              : (v29 = 0),
                v29))
          {
            v30 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 40);
            v31 = v30 >= 8 && (v30 & 7) == 0;
            if (v31
              || ((v32 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 120), v32 >= 8)
                ? (v33 = (v32 & 4) == 0)
                : (v33 = 0),
                  v33))
            {
              if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)v296 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((__dst & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
              {
                sub_22EFF605C((uint64_t)i);
                sub_22E8FCA40(v272, v34, 0x18D5u, 0, (uint64_t)&v299);
                v35 = sub_22E8901B8((uint64_t)&v299, (uint64_t *)v296);
                v36 = sub_22E8901B8(v35, (uint64_t *)&__dst);
                sub_22F0D4E74((uint64_t)v11);
                v284 = v37;
                v38 = sub_22E8906A0(v36, &v284);
                sub_22F0D4E74((uint64_t)i);
                v280 = (BOOL (*)(llvm::APInt *, llvm::APInt *))v39;
                sub_22E8906A0(v38, (uint64_t *)&v280);
                sub_22E903BEC((unsigned int *)&v299);
              }
            }
          }
        }
        sub_22ED30648((llvm::APInt *)__p, v271, v270);
        v40 = *v17;
        if ((v40 & 0x100) == 0 || !*(_QWORD *)&v17[4 * ((v40 >> 8) & 1) + 12])
          break;
        if ((*(_BYTE *)(*((_QWORD *)v17 + 4) + 2) & 1) == 0)
        {
          *(_DWORD *)&v296[8] = __p[1];
          if (LODWORD(__p[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v296, (const llvm::APInt *)__p);
          else
            *(void **)v296 = __p[0];
          v46 = BYTE4(__p[1]);
          v296[12] = BYTE4(__p[1]);
          *(_QWORD *)&v296[16] = v17;
          v47 = (uint64_t)v290;
          v48 = (uint64_t)v291;
          if (v290 < v291)
          {
            *((_DWORD *)v290 + 2) = *(_DWORD *)&v296[8];
            *(_QWORD *)v47 = *(_QWORD *)v296;
            *(_DWORD *)&v296[8] = 0;
            *(_BYTE *)(v47 + 12) = v296[12];
            *(_QWORD *)(v47 + 16) = *(_QWORD *)&v296[16];
            v290 = (char *)(v47 + 24);
            goto LABEL_75;
          }
          v49 = v289;
          v50 = 0xAAAAAAAAAAAAAAABLL * ((v290 - v289) >> 3) + 1;
          if (v50 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_469;
          if (0x5555555555555556 * ((v291 - v289) >> 3) > v50)
            v50 = 0x5555555555555556 * ((v291 - v289) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v291 - v289) >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v50;
          v302 = (void **)&v291;
          if (v51 > 0xAAAAAAAAAAAAAAALL)
LABEL_470:
            sub_22E3B3F8C();
          v52 = (char *)operator new(24 * v51);
          v53 = &v52[8 * ((v47 - (uint64_t)v49) >> 3)];
          *((_DWORD *)v53 + 2) = *(_DWORD *)&v296[8];
          *(_QWORD *)v53 = *(_QWORD *)v296;
          *(_DWORD *)&v296[8] = 0;
          v53[12] = v46;
          *((_QWORD *)v53 + 2) = v17;
          v54 = v53;
          if ((char *)v47 != v49)
          {
            v55 = 0;
            do
            {
              v56 = &v53[v55];
              *((_DWORD *)v56 - 4) = *(_DWORD *)(v47 + v55 - 16);
              *((_QWORD *)v56 - 3) = *(_QWORD *)(v47 + v55 - 24);
              *(_DWORD *)(v47 + v55 - 16) = 0;
              *(v56 - 12) = *(_BYTE *)(v47 + v55 - 12);
              *((_QWORD *)v56 - 1) = *(_QWORD *)(v47 + v55 - 8);
              v55 -= 24;
            }
            while ((char *)(v47 + v55) != v49);
            v54 = &v53[v55];
          }
          v57 = v53 + 24;
          v289 = v54;
          v290 = v53 + 24;
          v291 = &v52[24 * v51];
          v300.i64[1] = v47;
          v301 = v48;
          v299 = (BOOL (*)(llvm::APInt *, llvm::APInt *))v49;
          v300.i64[0] = (uint64_t)v49;
          sub_22F345160((uint64_t)&v299);
          v290 = v57;
          if (*(_DWORD *)&v296[8] < 0x41u)
            goto LABEL_75;
          v44 = *(BOOL (**)(llvm::APInt *, llvm::APInt *))v296;
          if (!*(_QWORD *)v296)
            goto LABEL_75;
LABEL_70:
          MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
LABEL_75:
          v15 = 0;
          v45 = 1;
          goto LABEL_76;
        }
        v45 = 0;
        v15 = 1;
LABEL_76:
        if (LODWORD(__p[1]) >= 0x41 && __p[0])
          MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
        if ((v45 & 1) == 0)
          goto LABEL_101;
LABEL_80:
        if (!v15)
        {
          v17 = (unsigned __int16 *)*((_QWORD *)v17 + 2);
          if (v17)
            continue;
        }
        goto LABEL_101;
      }
      v300.i32[0] = (__int32)__p[1];
      if (LODWORD(__p[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v299, (const llvm::APInt *)__p);
      else
        v299 = (BOOL (*)(llvm::APInt *, llvm::APInt *))__p[0];
      v300.i8[4] = BYTE4(__p[1]);
      v300.i64[1] = (uint64_t)v17;
      v41 = v303;
      if (v304 >= HIDWORD(v304))
      {
        if (v303 <= (unint64_t)&v299 && v303 + 24 * v304 > (unint64_t)&v299)
        {
          v58 = (char *)&v299 - v303;
          sub_22F3451D0((uint64_t)&v303);
          v41 = v303;
          v42 = (BOOL (**)(llvm::APInt *, llvm::APInt *))&v58[v303];
        }
        else
        {
          sub_22F3451D0((uint64_t)&v303);
          v42 = &v299;
          v41 = v303;
        }
      }
      else
      {
        v42 = &v299;
      }
      v43 = v41 + 24 * v304;
      *(_DWORD *)(v43 + 8) = *((_DWORD *)v42 + 2);
      *(_QWORD *)v43 = *v42;
      *((_DWORD *)v42 + 2) = 0;
      *(_BYTE *)(v43 + 12) = *((_BYTE *)v42 + 12);
      *(_QWORD *)(v43 + 16) = v42[2];
      LODWORD(v304) = v304 + 1;
      if (v300.i32[0] < 0x41u)
        goto LABEL_75;
      v44 = v299;
      if (!v299)
        goto LABEL_75;
      goto LABEL_70;
    }
  }
LABEL_101:
  v59 = v272;
  if (v15)
    goto LABEL_435;
  v257 = 0;
  v285 = 1;
  v284 = 0;
  v286 = 0;
  if (!v16)
  {
    LOWORD(v299) = 0;
    v300.i64[0] = 0;
    v300.i32[2] = 0;
    v257 = sub_22F00554C(v259, (uint64_t)&v299, *((_QWORD *)v272 + 11), 2, 0);
    v60 = v300.u32[2];
    if (v300.i32[2] == 2)
    {
      if (v285 > 0x40 || v302 > 0x40)
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)&v284, (const llvm::APInt *)&v301);
        v60 = v300.u32[2];
      }
      else
      {
        v284 = v301;
        v285 = v302;
        v60 = 2;
      }
      v286 = BYTE4(v302);
    }
    if (v60 >= 2)
      sub_22EF53BC0(&v300.i64[1]);
  }
  v255 = v16;
  v61 = v303;
  v62 = v304;
  v63 = (_QWORD *)(v303 + 24 * v304);
  v299 = sub_22ED306E4;
  if ((_DWORD)v304)
  {
    v64 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v65 = v304;
    while (1)
    {
      v66 = operator new(24 * v65, v64);
      if (v66)
        break;
      v67 = v65 > 1;
      v65 >>= 1;
      if (!v67)
        goto LABEL_116;
    }
    v68 = v66;
    sub_22ED39730(v61, v63, (uint64_t (**)(unint64_t, uint64_t))&v299, v62, (uint64_t)v66, v65);
    operator delete(v68);
  }
  else
  {
LABEL_116:
    sub_22ED39730(v61, v63, (uint64_t (**)(unint64_t, uint64_t))&v299, v62, 0, 0);
  }
  if ((_DWORD)v304)
  {
    v69 = 0;
    v70 = 24 * v304;
    LOBYTE(v71) = v257;
    while (1)
    {
      if ((v71 & 1) != 0)
      {
        v72 = (llvm::APInt *)(v303 + v69);
        if (*(_DWORD *)(v303 + v69 + 8) > 0x40u)
          v73 = llvm::APInt::equalSlowCase(v72, (const llvm::APInt *)&v284);
        else
          v73 = *(_QWORD *)v72 == v284;
        v71 = v73 ^ 1;
        if (!v69)
          goto LABEL_131;
      }
      else
      {
        v71 = 0;
        if (!v69)
          goto LABEL_131;
      }
      v74 = v303;
      v75 = (llvm::APInt *)(v303 + v69);
      if (*(_DWORD *)(v303 + v69 + 8) > 0x40u)
      {
        if (llvm::APInt::equalSlowCase(v75, (const llvm::APInt *)(v303 + v69 - 24)))
        {
LABEL_133:
          v76 = sub_22EFFBBCC(*(unsigned __int8 **)(*(_QWORD *)(v74 + v69 - 8) + 24));
          v77 = sub_22EFFBBCC(*(unsigned __int8 **)(*(_QWORD *)(v74 + v69 + 16) + 24));
          v267 = v71;
          if (*v76 == 161)
          {
            v78 = *(_QWORD *)(*((_QWORD *)v76 + 2) + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(*((_QWORD *)v76 + 2) + 40) & 7) != 0 || v78 == 0)
            {
              v81 = 0;
              v82 = "";
            }
            else
            {
              v80 = *(_DWORD **)(v78 + 16);
              v83 = *v80;
              v82 = (const char *)(v80 + 4);
              v81 = v83;
            }
          }
          else
          {
            v82 = 0;
            v81 = 0;
          }
          if (*v77 == 161)
          {
            v84 = *(_QWORD *)(*((_QWORD *)v77 + 2) + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(*((_QWORD *)v77 + 2) + 40) & 7) != 0 || v84 == 0)
            {
              v87 = 0;
              v88 = "";
            }
            else
            {
              v86 = *(_DWORD **)(v84 + 16);
              v89 = *v86;
              v88 = (const char *)(v86 + 4);
              v87 = v89;
            }
          }
          else
          {
            v88 = 0;
            v87 = 0;
          }
          *(_QWORD *)v296 = &v296[24];
          *(_OWORD *)&v296[8] = xmmword_22F44E350;
          llvm::APInt::toString();
          if (v81 != v87)
            goto LABEL_155;
          if (!v81)
          {
            sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v303 + v69 + 16) + 24));
            sub_22E8FCA40(v272, v90, 0xCCCu, 0, (uint64_t)&v299);
            v82 = *(const char **)v296;
            v81 = *(_QWORD *)&v296[8];
            goto LABEL_154;
          }
          if (!memcmp(v82, v88, v81))
          {
            sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v303 + v69 + 16) + 24));
            sub_22E8FCA40(v272, v91, 0xCCCu, 0, (uint64_t)&v299);
LABEL_154:
            __p[0] = (void *)v82;
            __p[1] = (void *)v81;
            sub_22F2F2210((uint64_t)&v299, (uint64_t)__p);
            sub_22E903BEC((unsigned int *)&v299);
            v92 = v272;
          }
          else
          {
LABEL_155:
            sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v303 + v69 + 16) + 24));
            v92 = v272;
            sub_22E8FCA40(v272, v93, 0xCCDu, 0, (uint64_t)&v299);
            v94 = *(const char **)v296;
            v95 = *(void **)&v296[8];
            if (v81)
            {
              v94 = v82;
              v95 = (void *)v81;
            }
            __p[0] = (void *)v94;
            __p[1] = v95;
            v96 = sub_22F2F2210((uint64_t)&v299, (uint64_t)__p);
            v97 = *(const char **)v296;
            v98 = *(_QWORD *)&v296[8];
            if (v87)
            {
              v97 = v88;
              v98 = v87;
            }
            __dst = (unint64_t)v97;
            v294 = v98;
            v99 = sub_22F2F2210(v96, (uint64_t)&__dst);
            sub_22F2F2210(v99, (uint64_t)v296);
            sub_22E903BEC((unsigned int *)&v299);
          }
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(v303 + v69 - 8) + 24));
          sub_22E8FCA40(v92, v100, 0x65u, 0, (uint64_t)v283);
          sub_22E903BEC(v283);
          v71 = v267;
          if (*(_BYTE **)v296 != &v296[24])
            free(*(void **)v296);
          v264 = 1;
        }
      }
      else if (*(_QWORD *)v75 == *((_QWORD *)v75 - 3))
      {
        goto LABEL_133;
      }
LABEL_131:
      v69 += 24;
      if (v70 == v69)
        goto LABEL_164;
    }
  }
  v71 = v257;
LABEL_164:
  v102 = (uint64_t)v289;
  v101 = (unsigned __int8 *)v290;
  if (v289 == v290)
  {
    v59 = v272;
  }
  else
  {
    v268 = v71;
    if (v290 - v289 < 1)
    {
LABEL_169:
      sub_22ED3A514(v102, v101, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v101[-v102] >> 3), 0, 0);
    }
    else
    {
      v103 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v104 = 0xAAAAAAAAAAAAAAABLL * ((v290 - v289) >> 3);
      while (1)
      {
        v105 = (llvm::APInt *)operator new(24 * v104, v103);
        if (v105)
          break;
        v67 = v104 > 1;
        v104 >>= 1;
        if (!v67)
          goto LABEL_169;
      }
      v106 = v105;
      sub_22ED3A514(v102, v101, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v101[-v102] >> 3), v105, v104);
      operator delete(v106);
    }
    __p[0] = 0;
    __p[1] = 0;
    v276 = 0;
    v107 = -1431655765 * ((unint64_t)(v290 - v289) >> 3);
    v108 = v262;
    if (v107)
    {
      for (j = 0; j != v107; ++j)
      {
        v110 = &v289[24 * j];
        v111 = (unsigned __int16 *)*((_QWORD *)v110 + 2);
        v112 = *v111;
        if ((v112 & 0x100) != 0)
          v113 = *(unsigned __int8 **)&v111[4 * ((v112 >> 8) & 1) + 12];
        else
          v113 = 0;
        v114 = *v113;
        v115 = v113;
        if ((v114 & 0xFE) == 0xAC)
        {
          v115 = (unsigned __int8 *)*((_QWORD *)v113 + 2);
          goto LABEL_179;
        }
        while (v114 == 153 && (*(_DWORD *)v115 & 0x1FC0000) == 0x780000)
        {
          v115 = (unsigned __int8 *)*((_QWORD *)v115 + 2);
LABEL_179:
          v114 = *v115;
        }
        sub_22F007D7C(v115, *((_QWORD *)v272 + 11), 0, (uint64_t)v296);
        sub_22F0D5A50((uint64_t)v113);
        sub_22ED3032C(v272, v116, (llvm::APInt *)v296, v108, v265);
        sub_22ED30648((llvm::APInt *)v296, v271, v270);
        v117 = v110[12];
        if (v110[12])
          v118 = llvm::APInt::compare((llvm::APInt *)v110, (const llvm::APInt *)v296);
        else
          v118 = llvm::APInt::compareSigned((llvm::APInt *)v110, (const llvm::APInt *)v296);
        if (v118 < 1)
        {
          if ((v268 & 1) != 0)
          {
            if (v117)
              v129 = llvm::APInt::compare((llvm::APInt *)v110, (const llvm::APInt *)&v284);
            else
              v129 = llvm::APInt::compareSigned((llvm::APInt *)v110, (const llvm::APInt *)&v284);
            if (v129 <= 0)
            {
              if (v286)
                v131 = llvm::APInt::compare((llvm::APInt *)&v284, (const llvm::APInt *)v296);
              else
                v131 = llvm::APInt::compareSigned((llvm::APInt *)&v284, (const llvm::APInt *)v296);
              v126 = v131 > 0;
            }
            else
            {
              v126 = 1;
            }
          }
          else
          {
            v126 = 0;
          }
          v132 = __p[1];
          if (__p[1] >= v276)
          {
            v135 = __p[0];
            v136 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            v137 = v136 + 1;
            if ((unint64_t)(v136 + 1) >> 60)
              goto LABEL_469;
            v138 = v276 - (char *)__p[0];
            if ((v276 - (char *)__p[0]) >> 3 > v137)
              v137 = v138 >> 3;
            if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
              v139 = 0xFFFFFFFFFFFFFFFLL;
            else
              v139 = v137;
            v302 = (void **)&v276;
            v269 = v126;
            if (v139)
            {
              if (v139 >> 60)
                goto LABEL_470;
              v140 = operator new(16 * v139);
            }
            else
            {
              v140 = 0;
            }
            v141 = &v140[16 * v136];
            v142 = &v140[16 * v139];
            v301 = (uint64_t)v142;
            v143 = *(_DWORD *)&v296[8];
            *((_DWORD *)v141 + 2) = *(_DWORD *)&v296[8];
            if (v143 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v140[16 * v136], (const llvm::APInt *)v296);
              v135 = __p[0];
              v132 = __p[1];
            }
            else
            {
              *(_QWORD *)v141 = *(_QWORD *)v296;
            }
            v140[16 * v136 + 12] = v296[12];
            v134 = v141 + 16;
            v300.i64[1] = (uint64_t)(v141 + 16);
            if (v132 == v135)
            {
              v144 = vdupq_n_s64((unint64_t)v135);
              v126 = v269;
            }
            else
            {
              v145 = 0;
              v126 = v269;
              do
              {
                v146 = &v141[v145];
                *((_DWORD *)v146 - 2) = *(_DWORD *)&v132[v145 - 8];
                *((_QWORD *)v146 - 2) = *(_QWORD *)&v132[v145 - 16];
                *(_DWORD *)&v132[v145 - 8] = 0;
                *(v146 - 4) = v132[v145 - 4];
                v145 -= 16;
              }
              while (&v132[v145] != v135);
              v144 = *(int64x2_t *)__p;
              v141 += v145;
              v134 = (void *)v300.i64[1];
              v142 = (char *)v301;
            }
            __p[0] = v141;
            __p[1] = v134;
            v300 = v144;
            v147 = (uint64_t)v276;
            v276 = v142;
            v301 = v147;
            v299 = (BOOL (*)(llvm::APInt *, llvm::APInt *))v144.i64[0];
            sub_22F3452FC((uint64_t)&v299);
            v108 = v262;
          }
          else
          {
            v133 = *(_DWORD *)&v296[8];
            *((_DWORD *)__p[1] + 2) = *(_DWORD *)&v296[8];
            if (v133 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)v132, (const llvm::APInt *)v296);
            else
              *(_QWORD *)v132 = *(_QWORD *)v296;
            v132[12] = v296[12];
            v134 = v132 + 16;
          }
          __p[1] = v134;
        }
        else
        {
          sub_22F0D5A50(*((_QWORD *)v111 + 3));
          sub_22E8FCA40(v272, v119, 0x18BAu, 0, (uint64_t)&v299);
          sub_22F0D5A50(*((_QWORD *)v111 + 3));
          v121 = v120;
          sub_22F0D60E4((uint64_t)v113);
          __dst = __PAIR64__(v122, v121);
          sub_22E8906A0((uint64_t)&v299, (uint64_t *)&__dst);
          sub_22E903BEC((unsigned int *)&v299);
          v123 = v290;
          v124 = (uint64_t)&v289[24 * j];
          if ((char *)(v124 + 24) == v290)
          {
            v126 = v268;
          }
          else
          {
            v125 = (uint64_t)&v289[24 * j];
            v124 = v125;
            v126 = v268;
            do
            {
              v127 = v125 + 24;
              v128 = sub_22ED3A4A4(v125, v125 + 24) + 48;
              v124 += 24;
              v125 = v127;
            }
            while ((char *)v128 != v123);
            v123 = v290;
          }
          while (v123 != (char *)v124)
          {
            if (*((_DWORD *)v123 - 4) >= 0x41u)
            {
              v130 = *((_QWORD *)v123 - 3);
              if (v130)
                MEMORY[0x2348A0E84](v130, 0x1000C8000313F17);
            }
            v123 -= 24;
          }
          v290 = (char *)v124;
          --j;
          --v107;
        }
        if (*(_DWORD *)&v296[8] >= 0x41u && *(_QWORD *)v296)
          MEMORY[0x2348A0E84](*(_QWORD *)v296, 0x1000C8000313F17);
        v268 = v126;
      }
      v261 = -1431655765 * ((unint64_t)(v290 - v289) >> 3);
      if ((_DWORD)v261)
      {
        v148 = 0;
        while (1)
        {
          v149 = &v289[24 * v148];
          v150 = (char *)__p[0];
          v263 = *((_QWORD *)v149 + 2);
          v281 = 32;
          v280 = 0;
          v282 = 1;
          v151 = v303;
          v152 = v304;
          v153 = v303;
          if ((_DWORD)v304)
          {
            v153 = v303;
            v154 = v304;
            do
            {
              v155 = v153 + 24 * (v154 >> 1);
              if (*(_BYTE *)(v155 + 12))
                v156 = llvm::APInt::compare((llvm::APInt *)(v153 + 24 * (v154 >> 1)), (const llvm::APInt *)v149);
              else
                v156 = llvm::APInt::compareSigned((llvm::APInt *)(v153 + 24 * (v154 >> 1)), (const llvm::APInt *)v149);
              if (v156 >= 0)
                v154 >>= 1;
              else
                v154 += ~(v154 >> 1);
              if (v156 < 0)
                v153 = v155 + 24;
            }
            while (v154);
          }
          v157 = (llvm::APInt *)&v150[16 * v148];
          v266 = v148;
          if (v153 == v151 + 24 * v152)
            break;
          v158 = *(_BYTE *)(v153 + 12);
          if (v158)
          {
            if ((llvm::APInt::compare((llvm::APInt *)v153, (const llvm::APInt *)&v150[16 * v148]) & 0x80000000) == 0)
              break;
          }
          else if ((llvm::APInt::compareSigned((llvm::APInt *)v153, (const llvm::APInt *)&v150[16 * v148]) & 0x80000000) == 0)
          {
            break;
          }
          v160 = *(_DWORD *)(v153 + 8);
          if (v160 > 0x40)
          {
            llvm::APInt::assignSlowCase((llvm::APInt *)&v280, (const llvm::APInt *)v153);
            v158 = *(_BYTE *)(v153 + 12);
            v151 = v303;
            v152 = v304;
          }
          else
          {
            v280 = *(BOOL (**)(llvm::APInt *, llvm::APInt *))v153;
            v281 = v160;
          }
          v282 = v158;
          v159 = *(_QWORD *)(v153 + 16);
LABEL_261:
          v161 = v151 + 24 * v152 - v153;
          if (v161)
          {
            v162 = 0xAAAAAAAAAAAAAAABLL * (v161 >> 3);
            v163 = v150[16 * v266 + 12];
            do
            {
              v164 = (const llvm::APInt *)(v153 + 24 * (v162 >> 1));
              if (v163)
                v165 = llvm::APInt::compare(v157, v164);
              else
                v165 = llvm::APInt::compareSigned(v157, v164);
              if (v165 < 0)
              {
                v162 >>= 1;
              }
              else
              {
                v153 += 24 * (v162 >> 1) + 24;
                v162 += ~(v162 >> 1);
              }
            }
            while (v162);
          }
          if (v153 == v151)
          {
            v166 = v159;
            v169 = v266;
          }
          else
          {
            v166 = v159;
            v167 = (llvm::APInt *)(v153 - 24);
            if (*(_BYTE *)(v153 - 12))
              v168 = llvm::APInt::compare(v167, (const llvm::APInt *)v149);
            else
              v168 = llvm::APInt::compareSigned(v167, (const llvm::APInt *)v149);
            v169 = v266;
            if ((v168 & 0x80000000) == 0)
            {
              if (v281 > 0x40 || *(_DWORD *)(v153 - 16) > 0x40u)
              {
                llvm::APInt::assignSlowCase((llvm::APInt *)&v280, (const llvm::APInt *)(v153 - 24));
              }
              else
              {
                v280 = *(BOOL (**)(llvm::APInt *, llvm::APInt *))(v153 - 24);
                v281 = *(_DWORD *)(v153 - 16);
              }
              v282 = *(_BYTE *)(v153 - 12);
              v166 = *(_QWORD *)(v153 - 8);
            }
          }
          if (v169)
          {
            v170 = v169 - 1;
            v171 = __p[0];
            v172 = (const llvm::APInt *)((char *)__p[0] + 16 * v169 - 16);
            v173 = v149[12]
                 ? llvm::APInt::compare((llvm::APInt *)v149, (const llvm::APInt *)((char *)__p[0] + 16 * v169 - 16))
                 : llvm::APInt::compareSigned((llvm::APInt *)v149, (const llvm::APInt *)((char *)__p[0] + 16 * v169 - 16));
            if (v173 <= 0)
            {
              if (v281 > 0x40 || *((_DWORD *)v172 + 2) > 0x40u)
              {
                llvm::APInt::assignSlowCase((llvm::APInt *)&v280, v172);
              }
              else
              {
                v280 = *(BOOL (**)(llvm::APInt *, llvm::APInt *))v172;
                v281 = *((_DWORD *)v172 + 2);
              }
              v282 = v171[16 * v170 + 12];
              v166 = *(_QWORD *)&v289[24 * v170 + 16];
            }
          }
          if (!v166)
            goto LABEL_292;
          sub_22F0D5A50(*(_QWORD *)(v263 + 24));
          sub_22E8FCA40(v272, v174, 0xCCCu, 0, (uint64_t)&v299);
          *(_QWORD *)v296 = &v296[24];
          *(_OWORD *)&v296[8] = xmmword_22F455490;
          llvm::APInt::toString();
          v175 = *(_QWORD *)&v296[8];
          if (*(_QWORD *)&v296[8] > 0x7FFFFFFFFFFFFFF7uLL)
            goto LABEL_469;
          v176 = *(const void **)v296;
          if (*(_QWORD *)&v296[8] >= 0x17uLL)
          {
            v178 = (*(_QWORD *)&v296[8] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(_QWORD *)&v296[8] | 7) != 0x17)
              v178 = *(_QWORD *)&v296[8] | 7;
            v179 = v178 + 1;
            p_dst = (unint64_t *)operator new(v178 + 1);
            v294 = v175;
            v295[0] = v179 | 0x8000000000000000;
            __dst = (unint64_t)p_dst;
          }
          else
          {
            HIBYTE(v295[0]) = v296[8];
            p_dst = &__dst;
            if (!*(_QWORD *)&v296[8])
              goto LABEL_305;
          }
          memmove(p_dst, v176, v175);
LABEL_305:
          *((_BYTE *)p_dst + v175) = 0;
          if (*(_BYTE **)v296 != &v296[24])
            free(*(void **)v296);
          sub_22F2F3734((uint64_t)&v299, (void **)&__dst);
          if (SHIBYTE(v295[0]) < 0)
            operator delete((void *)__dst);
          sub_22E903BEC((unsigned int *)&v299);
          sub_22F0D5A50(*(_QWORD *)(v166 + 24));
          sub_22E8FCA40(v272, v180, 0x65u, 0, (uint64_t)v279);
          sub_22E903BEC(v279);
          v264 = 1;
LABEL_292:
          if (v281 >= 0x41 && v280)
            MEMORY[0x2348A0E84](v280, 0x1000C8000313F17);
          v148 = v169 + 1;
          if (v148 == v261)
            goto LABEL_310;
        }
        v159 = 0;
        goto LABEL_261;
      }
    }
LABEL_310:
    v181 = (char *)__p[0];
    v59 = v272;
    LOBYTE(v71) = v268;
    if (__p[0])
    {
      v182 = (char *)__p[1];
      v183 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((_DWORD *)v182 - 2) >= 0x41u)
          {
            v184 = *((_QWORD *)v182 - 2);
            if (v184)
              MEMORY[0x2348A0E84](v184, 0x1000C8000313F17);
          }
          v182 -= 16;
        }
        while (v182 != v181);
        v183 = __p[0];
      }
      __p[1] = v181;
      operator delete(v183);
    }
  }
  if (v264 & 1 | (v256 >> 2) & 1 || (v71 & 1) == 0)
    goto LABEL_320;
  sub_22EFF605C(v259);
  sub_22E8FCA40(v59, v199, 0x1A58u, 0, (uint64_t)&v299);
  *(_QWORD *)v296 = &v296[24];
  *(_OWORD *)&v296[8] = xmmword_22F455490;
  llvm::APInt::toString();
  v200 = *(void **)&v296[8];
  if (*(_QWORD *)&v296[8] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_469:
    abort();
  v201 = *(const void **)v296;
  if (*(_QWORD *)&v296[8] >= 0x17uLL)
  {
    v251 = (*(_QWORD *)&v296[8] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(_QWORD *)&v296[8] | 7) != 0x17)
      v251 = *(_QWORD *)&v296[8] | 7;
    v252 = v251 + 1;
    v202 = operator new(v251 + 1);
    __p[1] = v200;
    v276 = (_BYTE *)(v252 | 0x8000000000000000);
    __p[0] = v202;
  }
  else
  {
    HIBYTE(v276) = v296[8];
    v202 = __p;
    if (!*(_QWORD *)&v296[8])
      goto LABEL_460;
  }
  memmove(v202, v201, (size_t)v200);
LABEL_460:
  *((_BYTE *)v200 + (_QWORD)v202) = 0;
  if (*(_BYTE **)v296 != &v296[24])
    free(*(void **)v296);
  v253 = sub_22F2F3734((uint64_t)&v299, __p);
  sub_22F0D4E74(v259);
  *(_QWORD *)v296 = v254;
  sub_22E8906A0(v253, (uint64_t *)v296);
  v59 = v272;
  if (SHIBYTE(v276) < 0)
    operator delete(__p[0]);
  sub_22E903BEC((unsigned int *)&v299);
LABEL_320:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v292 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
    v185 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v292 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v185 = 0;
  if (v264 & 1 | (v256 >> 2) & 1 | v257)
    goto LABEL_432;
  if (!v185)
    goto LABEL_432;
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v185 + 24)) + 74) & 1) == 0)
    goto LABEL_432;
  v186 = sub_22F114198(*(_QWORD *)(v185 + 24));
  v187 = sub_22E49F9AC(v186);
  sub_22EFC3500(v186);
  if (!v187)
    goto LABEL_432;
  v188 = sub_22F114198(*(_QWORD *)(v185 + 24));
  v299 = (BOOL (*)(llvm::APInt *, llvm::APInt *))&v300.u64[1];
  v300.i64[0] = 0x4000000000;
  v189 = sub_22E49F9AC(v188);
  sub_22EFC3500(v188);
  if (v189)
  {
LABEL_328:
    v190 = (const llvm::APInt *)(v189 + 64);
    LODWORD(__p[1]) = *(_DWORD *)(v189 + 72);
    if (LODWORD(__p[1]) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)__p, v190);
    else
      __p[0] = *(void **)v190;
    BYTE4(__p[1]) = *(_BYTE *)(v189 + 76);
    sub_22ED30648((llvm::APInt *)__p, v271, v270);
    *(_DWORD *)&v296[8] = __p[1];
    if (LODWORD(__p[1]) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)v296, (const llvm::APInt *)__p);
    else
      *(void **)v296 = __p[0];
    v296[12] = BYTE4(__p[1]);
    *(_QWORD *)&v296[16] = v189;
    v191 = sub_22ED3B73C((uint64_t)&v299, (unint64_t)v296);
    v192 = (char *)v299 + 24 * v300.u32[0];
    *((_DWORD *)v192 + 2) = *(_DWORD *)(v191 + 8);
    *(_QWORD *)v192 = *(_QWORD *)v191;
    *(_DWORD *)(v191 + 8) = 0;
    v192[12] = *(_BYTE *)(v191 + 12);
    *((_QWORD *)v192 + 2) = *(_QWORD *)(v191 + 16);
    ++v300.i32[0];
    if (*(_DWORD *)&v296[8] >= 0x41u && *(_QWORD *)v296)
      MEMORY[0x2348A0E84](*(_QWORD *)v296, 0x1000C8000313F17);
    if (LODWORD(__p[1]) >= 0x41 && __p[0])
      MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
    while (1)
    {
      v189 = *(_QWORD *)(v189 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v189)
        break;
      if ((*(_DWORD *)(v189 + 28) & 0x7F) == 0x43)
        goto LABEL_328;
    }
  }
  v193 = (char *)v299;
  v194 = v300.u32[0];
  v195 = (char *)v299 + 24 * v300.u32[0];
  *(_QWORD *)v296 = sub_22ED30784;
  if (v300.i32[0])
  {
    v196 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v197 = v300.u32[0];
    while (1)
    {
      v198 = operator new(24 * v197, v196);
      if (v198)
        break;
      v67 = v197 > 1;
      v197 >>= 1;
      if (!v67)
        goto LABEL_347;
    }
    v203 = v198;
    sub_22ED3B7A4((uint64_t)v193, v195, (uint64_t (**)(unint64_t, uint64_t))v296, v194, (uint64_t)v198, v197);
    operator delete(v203);
  }
  else
  {
LABEL_347:
    sub_22ED3B7A4((uint64_t)v193, v195, (uint64_t (**)(unint64_t, uint64_t))v296, v194, 0, 0);
  }
  v280 = v299;
  *(_QWORD *)v296 = sub_22ED307AC;
  v204 = sub_22ED3BEA0((uint64_t)v299, (uint64_t)v299 + 24 * v300.u32[0], (uint64_t (**)(void))v296);
  v278 = v204;
  v205 = v303;
  if ((_DWORD)v304)
  {
    do
    {
      v206 = *(unsigned __int8 **)(*(_QWORD *)(v205 + 16) + 24);
      if (sub_22ED307D0((uint64_t)v272, v188, v206, (uint64_t *)&v280, &v278, (const llvm::APInt *)v205))
      {
        sub_22EFF605C((uint64_t)v206);
        sub_22E8FCA40(v272, v207, 0x1A82u, 0, (uint64_t)v296);
        sub_22E8901B8((uint64_t)v296, &v292);
        sub_22E903BEC((unsigned int *)v296);
      }
      v205 += 24;
    }
    while (v205 != v303 + 24 * v304);
    v205 = v303;
  }
  v208 = v299;
  v280 = v299;
  v209 = (const llvm::APInt *)v289;
  if (v289 != v290)
  {
    do
    {
      v210 = *(unsigned __int8 **)(*((_QWORD *)v209 + 2) + 24);
      if (sub_22ED307D0((uint64_t)v272, v188, v210, (uint64_t *)&v280, &v278, v209))
      {
        sub_22EFF605C((uint64_t)v210);
        sub_22E8FCA40(v272, v211, 0x1A82u, 0, (uint64_t)v296);
        sub_22E8901B8((uint64_t)v296, &v292);
        sub_22E903BEC((unsigned int *)v296);
      }
      v212 = (unsigned __int16 *)*((_QWORD *)v209 + 2);
      v213 = *v212;
      if ((v213 & 0x100) != 0)
        v214 = *(unsigned __int8 **)&v212[4 * ((v213 >> 8) & 1) + 12];
      else
        v214 = 0;
      sub_22F007D7C(v214, *((_QWORD *)v272 + 11), 0, (uint64_t)__p);
      sub_22ED30648((llvm::APInt *)__p, v271, v270);
      v215 = 0;
      v216 = (unsigned __int16 *)*((_QWORD *)v209 + 2);
      v217 = *v216;
      if ((v217 & 0x100) != 0)
        v215 = *(unsigned __int8 **)&v216[4 * ((v217 >> 8) & 1) + 12];
      if (sub_22ED307D0((uint64_t)v272, v188, v215, (uint64_t *)&v280, &v278, (const llvm::APInt *)__p))
      {
        sub_22EFF605C((uint64_t)v215);
        sub_22E8FCA40(v272, v218, 0x1A82u, 0, (uint64_t)v296);
        sub_22E8901B8((uint64_t)v296, &v292);
        sub_22E903BEC((unsigned int *)v296);
      }
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
      v209 = (const llvm::APInt *)((char *)v209 + 24);
    }
    while (v209 != (const llvm::APInt *)v290);
    v205 = v303;
    v209 = (const llvm::APInt *)v289;
    v208 = v299;
  }
  __dst = (unint64_t)v295;
  v294 = 0x800000000;
  v280 = v208;
  if (v208 == (BOOL (*)(llvm::APInt *, llvm::APInt *))v204)
  {
    v229 = 0;
    v219 = 0;
    goto LABEL_412;
  }
  v219 = 0;
  do
  {
    if ((sub_22EFC9284(*((_QWORD *)v208 + 2), 0, 0, 0, 0) & 0xFFFFFFFE) == 2
      || sub_22EA057AC(*((_QWORD *)v208 + 2)))
    {
      goto LABEL_409;
    }
    v220 = (_QWORD *)(v303 + 24 * v304);
    if ((_QWORD *)v205 == v220)
      goto LABEL_388;
    while (*(_BYTE *)(v205 + 12))
    {
      if ((llvm::APInt::compare((llvm::APInt *)v205, (const llvm::APInt *)v208) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_382:
      v205 += 24;
      if ((_QWORD *)v205 == v220)
      {
        v205 = (unint64_t)v220;
        goto LABEL_388;
      }
    }
    if ((llvm::APInt::compareSigned((llvm::APInt *)v205, (const llvm::APInt *)v208) & 0x80000000) != 0)
      goto LABEL_382;
LABEL_384:
    if (*(_DWORD *)(v205 + 8) > 0x40u)
    {
      if ((llvm::APInt::equalSlowCase((llvm::APInt *)v205, (const llvm::APInt *)v208) & 1) != 0)
        goto LABEL_409;
    }
    else if (*(_QWORD *)v205 == *(_QWORD *)v208)
    {
      goto LABEL_409;
    }
LABEL_388:
    if (v209 == (const llvm::APInt *)v290)
      goto LABEL_406;
    while (1)
    {
      v221 = (unsigned __int16 *)*((_QWORD *)v209 + 2);
      v222 = *v221;
      if ((v222 & 0x100) != 0)
        v223 = *(unsigned __int8 **)&v221[4 * ((v222 >> 8) & 1) + 12];
      else
        v223 = 0;
      sub_22F007D7C(v223, *((_QWORD *)v272 + 11), 0, (uint64_t)v296);
      sub_22ED30648((llvm::APInt *)v296, v271, v270);
      if (*((_BYTE *)v208 + 12))
        v224 = llvm::APInt::compare((llvm::APInt *)v208, (const llvm::APInt *)v296);
      else
        v224 = llvm::APInt::compareSigned((llvm::APInt *)v208, (const llvm::APInt *)v296);
      v225 = v224;
      if (*(_DWORD *)&v296[8] >= 0x41u && *(_QWORD *)v296)
        MEMORY[0x2348A0E84](*(_QWORD *)v296, 0x1000C8000313F17);
      if (v225 < 1)
        break;
      v209 = (const llvm::APInt *)((char *)v209 + 24);
      if (v209 == (const llvm::APInt *)v290)
      {
        v209 = (const llvm::APInt *)v290;
        goto LABEL_406;
      }
    }
    if (v209 == (const llvm::APInt *)v290
      || (!*((_BYTE *)v208 + 12)
        ? (v226 = llvm::APInt::compareSigned((llvm::APInt *)v208, v209))
        : (v226 = llvm::APInt::compare((llvm::APInt *)v208, v209)),
          v226 < 0))
    {
LABEL_406:
      v227 = *(_QWORD *)(*((_QWORD *)v208 + 2) + 40);
      v228 = v294;
      if (v294 >= (unint64_t)HIDWORD(v294))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v228 = v294;
      }
      *(_QWORD *)(__dst + 8 * v228) = v227;
      LODWORD(v294) = v294 + 1;
      v219 = 1;
    }
LABEL_409:
    v208 = (BOOL (*)(llvm::APInt *, llvm::APInt *))((char *)v208 + 24);
    v280 = v208;
  }
  while (v208 != (BOOL (*)(llvm::APInt *, llvm::APInt *))v204);
  v229 = v294;
LABEL_412:
  v59 = v272;
  if (v255 && !v229)
  {
    if (sub_22F3ACA14(v188))
    {
      sub_22E8FCA40(v272, *((_DWORD *)v255 + 1), 0x1BBFu, 0, (uint64_t)v277);
      sub_22E903BEC(v277);
    }
    if ((_DWORD)v294)
    {
LABEL_415:
      sub_22EFF605C(v259);
      if (v255)
        v231 = 6477;
      else
        v231 = 6743;
      sub_22E8FCA40(v272, v230, v231, 0, (uint64_t)__p);
      sub_22F0D4E74(v259);
      v274 = v232;
      v233 = sub_22E8906A0((uint64_t)__p, &v274);
      v273 = v294;
      v234 = sub_22E8900C4(v233, &v273);
      v235 = *(_OWORD *)(v234 + 9);
      *(_OWORD *)v296 = *(_OWORD *)v234;
      *(_OWORD *)&v296[9] = v235;
      v297[0] = 0;
      v297[48] = 0;
      if (*(_BYTE *)(v234 + 80))
        sub_22E907424((uint64_t)v297, v234 + 32);
      v298 = *(_QWORD *)(v234 + 88);
      sub_22E903BEC((unsigned int *)__p);
      if (v294 >= 3)
        v236 = 3;
      else
        v236 = v294;
      if ((_DWORD)v236)
      {
        v237 = 0;
        v238 = 8 * v236;
        do
        {
          sub_22E894538((uint64_t)v296, (uint64_t *)(__dst + v237));
          v237 += 8;
        }
        while (v238 != v237);
      }
      sub_22E903BEC((unsigned int *)v296);
      sub_22EFF605C(v259);
      sub_22E8FCA40(v272, v239, 0x15F7u, 0, (uint64_t)v296);
      v240 = *((_QWORD *)v272 + 11);
      v241 = *((_QWORD *)v272 + 27);
      __p[0] = v296;
      sub_22EF51980(v240, v260, v188, v241, (uint64_t)sub_22ED3BF3C, (uint64_t)__p);
      sub_22E903BEC((unsigned int *)v296);
    }
  }
  else if (v229)
  {
    goto LABEL_415;
  }
  if ((v219 & 1) == 0)
    *(_WORD *)v260 |= 0x400u;
  if ((_QWORD *)__dst != v295)
    free((void *)__dst);
  sub_22ED3B6A4((char **)&v299);
LABEL_432:
  if (v285 >= 0x41 && v284)
    MEMORY[0x2348A0E84](v284, 0x1000C8000313F17);
LABEL_435:
  sub_22F0D60E4(v259);
  sub_22E99040C(v59, v242, v258, 0x1987u);
  if ((v264 & 1) != 0)
    v12 = 1;
  else
    v12 = v260;
  v243 = v289;
  if (v289)
  {
    v244 = v290;
    v245 = v289;
    if (v290 != v289)
    {
      do
      {
        if (*((_DWORD *)v244 - 4) >= 0x41u)
        {
          v246 = *((_QWORD *)v244 - 3);
          if (v246)
            MEMORY[0x2348A0E84](v246, 0x1000C8000313F17);
        }
        v244 -= 24;
      }
      while (v244 != v243);
      v245 = v289;
    }
    v290 = v243;
    operator delete(v245);
  }
  v247 = (char *)v303;
  if ((_DWORD)v304)
  {
    v248 = 24 * v304;
    do
    {
      if (*(_DWORD *)&v247[v248 - 16] >= 0x41u)
      {
        v249 = *(_QWORD *)&v247[v248 - 24];
        if (v249)
          MEMORY[0x2348A0E84](v249, 0x1000C8000313F17);
      }
      v248 -= 24;
    }
    while (v248);
    v247 = (char *)v303;
  }
  if (v247 != (char *)v305)
    free(v247);
  return v12;
}

_QWORD *sub_22ED3032C(_QWORD *result, int a2, llvm::APInt *a3, uint64_t a4, char a5)
{
  unsigned int v7;
  _QWORD *v10;
  void *v11;
  const void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  unint64_t v23;
  void *__dst[2];
  unint64_t v25;
  unsigned int v26[24];
  uint64_t v27;
  unsigned int v28;
  char v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(result[9] + 1) & 2) != 0)
    return result;
  v7 = *((_DWORD *)a3 + 2);
  if (v7 <= a4)
    return result;
  v10 = result;
  v28 = *((_DWORD *)a3 + 2);
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v27, a3);
  else
    v27 = *(_QWORD *)a3;
  v29 = *((_BYTE *)a3 + 12);
  sub_22ED30648((llvm::APInt *)&v27, a4, a5);
  result = (_QWORD *)sub_22ED30648((llvm::APInt *)&v27, *((unsigned int *)a3 + 2), *((_BYTE *)a3 + 12) == 0);
  if (v28 > 0x40)
  {
    if ((llvm::APInt::equalSlowCase((llvm::APInt *)&v27, a3) & 1) != 0)
    {
LABEL_10:
      result = (_QWORD *)v27;
      if (v27)
        return (_QWORD *)MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
      return result;
    }
  }
  else if (v27 == *(_QWORD *)a3)
  {
    return result;
  }
  sub_22E8FCA40(v10, a2, 0x18BBu, 0, (uint64_t)v26);
  v30 = v32;
  v31 = xmmword_22F455490;
  llvm::APInt::toString();
  v11 = (void *)v31;
  if ((unint64_t)v31 > 0x7FFFFFFFFFFFFFF7)
LABEL_39:
    abort();
  v12 = v30;
  if ((unint64_t)v31 >= 0x17)
  {
    v14 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v31 | 7) != 0x17)
      v14 = v31 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    v25 = v15 | 0x8000000000000000;
    __dst[0] = v13;
    goto LABEL_20;
  }
  HIBYTE(v25) = v31;
  v13 = __dst;
  if ((_QWORD)v31)
LABEL_20:
    memmove(v13, v12, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v13) = 0;
  if (v30 != v32)
    free(v30);
  v16 = sub_22F2F3734((uint64_t)v26, __dst);
  v30 = v32;
  v31 = xmmword_22F455490;
  llvm::APInt::toString();
  v17 = (void *)v31;
  if ((unint64_t)v31 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_39;
  v18 = v30;
  if ((unint64_t)v31 >= 0x17)
  {
    v20 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v31 | 7) != 0x17)
      v20 = v31 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    __p[1] = v17;
    v23 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_30;
  }
  HIBYTE(v23) = v31;
  v19 = __p;
  if ((_QWORD)v31)
LABEL_30:
    memmove(v19, v18, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v19) = 0;
  if (v30 != v32)
    free(v30);
  sub_22F2F3734(v16, __p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst[0]);
  result = sub_22E903BEC(v26);
  if (v28 >= 0x41)
    goto LABEL_10;
  return result;
}

uint64_t sub_22ED30648(llvm::APInt *this, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  if (*((_BYTE *)this + 12))
    result = llvm::APInt::zextOrTrunc(this);
  else
    result = llvm::APInt::sextOrTrunc(this);
  if (*((_DWORD *)this + 2) >= 0x41u)
  {
    result = *(_QWORD *)this;
    if (*(_QWORD *)this)
      result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  *(_QWORD *)this = v6;
  *((_DWORD *)this + 2) = v7;
  *((_BYTE *)this + 12) = a3 ^ 1;
  return result;
}

BOOL sub_22ED306E4(llvm::APInt *this, llvm::APInt *a2)
{
  if (*((_BYTE *)this + 12))
  {
    if ((llvm::APInt::compare(this, a2) & 0x80000000) != 0)
      return 1;
  }
  else if ((llvm::APInt::compareSigned(this, a2) & 0x80000000) != 0)
  {
    return 1;
  }
  if (*((_DWORD *)this + 2) > 0x40u)
  {
    if (!llvm::APInt::equalSlowCase(this, a2))
      return 0;
  }
  else if (*(_QWORD *)this != *(_QWORD *)a2)
  {
    return 0;
  }
  return *(_DWORD *)(*((_QWORD *)this + 2) + 4) < *(_DWORD *)(*((_QWORD *)a2 + 2) + 4);
}

uint64_t sub_22ED30784(llvm::APInt *a1, const llvm::APInt *a2)
{
  unsigned int v2;

  if (*((_BYTE *)a1 + 12))
    v2 = llvm::APInt::compare(a1, a2);
  else
    v2 = llvm::APInt::compareSigned(a1, a2);
  return v2 >> 31;
}

uint64_t sub_22ED307AC(llvm::APInt *a1, const llvm::APInt *a2)
{
  if (*((_DWORD *)a1 + 2) > 0x40u)
    return llvm::APInt::equalSlowCase(a1, a2);
  else
    return *(_QWORD *)a1 == *(_QWORD *)a2;
}

BOOL sub_22ED307D0(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4, _QWORD *a5, const llvm::APInt *a6)
{
  _BOOL8 result;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;

  result = sub_22EFC39E4(a2);
  if (result)
  {
    v13 = sub_22EFFA6B0(a3);
    if (*v13 != 161)
      goto LABEL_13;
    v14 = *((_QWORD *)v13 + 2);
    if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      goto LABEL_13;
    v16 = *(_QWORD *)(v14 + 48);
    v17 = *(_QWORD *)(a2 + 48);
    if (!v17)
      v17 = sub_22EF6462C(*(_QWORD *)(a1 + 88), a2);
    if (!sub_22E3CB5E0(v14)
      && (v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8), ((v16 | v18) & 1) != 0)
      && *(_QWORD *)(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0))
    {
      return 0;
    }
    else
    {
LABEL_13:
      if (sub_22ED30EC8(a2))
      {
        return !sub_22EA3BA60(a1, a2, a6, 0);
      }
      else
      {
        for (i = *a4; i != *a5; *a4 = i)
        {
          if (*(_BYTE *)(i + 12))
          {
            if ((llvm::APInt::compare((llvm::APInt *)i, a6) & 0x80000000) == 0)
              goto LABEL_22;
          }
          else if ((llvm::APInt::compareSigned((llvm::APInt *)i, a6) & 0x80000000) == 0)
          {
LABEL_22:
            if (*(_DWORD *)(i + 8) > 0x40u)
            {
              if ((llvm::APInt::equalSlowCase((llvm::APInt *)i, a6) & 1) != 0)
                return 0;
            }
            else if (*(_QWORD *)i == *(_QWORD *)a6)
            {
              return 0;
            }
            return 1;
          }
          i += 24;
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22ED30954(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  const llvm::APInt *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  llvm::APInt *v26;
  _QWORD *v27;
  const std::nothrow_t *v28;
  unint64_t v29;
  void *v30;
  BOOL v31;
  void *v32;
  llvm::APInt *v33;
  llvm::APInt *v34;
  llvm::APInt *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  unsigned int v40;
  char v41;
  unint64_t v42;
  uint64_t (*v43)(void);
  unsigned int v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  llvm::APInt *v48;
  uint64_t v49;
  _QWORD v50[194];

  v50[192] = *MEMORY[0x24BDAC8D0];
  v8 = a1[13];
  sub_22EFF605C((uint64_t)a4);
  result = sub_22F1CF68C(*(_QWORD *)(v8 + 32), 0x1A83u, v9, v8);
  if ((_DWORD)result == 1)
    return result;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v12
    || *(_BYTE *)(v12 + 16) != 44
    || *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    return result;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(v13 + 16);
  if (v13)
    v15 = v14 == 11;
  else
    v15 = 0;
  if (v15)
  {
    if (((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return result;
LABEL_18:
    if ((*(_DWORD *)a4 & 0x18000) != 0)
      return result;
    result = sub_22F0085E8((uint64_t)a4, a1[11], 0);
    if (!(_DWORD)result)
      return result;
    v16 = sub_22EF6A330(a1[11], a2);
    v17 = sub_22F110A40(*v11);
    sub_22F007D7C(a4, a1[11], 0, (uint64_t)&v46);
    sub_22ED30648((llvm::APInt *)&v46, v16, v17);
    v18 = sub_22F114198(*(_QWORD *)(v12 + 24));
    result = sub_22EFC39E4(v18);
    if (!(_DWORD)result)
      goto LABEL_64;
    if (sub_22ED30EC8(v18))
    {
      result = sub_22EA3BA60((uint64_t)a1, v18, (const llvm::APInt *)&v46, 1);
      if ((result & 1) == 0)
      {
        sub_22EFF605C((uint64_t)a4);
        sub_22E8FCA40(a1, v19, 0x1A83u, 0, (uint64_t)&v48);
        v20 = *v11;
        if ((*(_BYTE *)(*v11 + 8) & 0xF) != 0)
          v20 = (uint64_t)sub_22F10D2BC(a2);
        v39 = (uint64_t (*)(void))(v20 & 0xFFFFFFFFFFFFFFF0);
        sub_22E8901B8((uint64_t)&v48, (uint64_t *)&v39);
        result = (uint64_t)sub_22E903BEC((unsigned int *)&v48);
      }
      goto LABEL_64;
    }
    v48 = (llvm::APInt *)v50;
    v49 = 0x4000000000;
    v21 = sub_22E49F9AC(v18);
    sub_22EFC3500(v18);
    if (v21)
    {
LABEL_27:
      v22 = (const llvm::APInt *)(v21 + 64);
      v44 = *(_DWORD *)(v21 + 72);
      if (v44 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v43, v22);
      else
        v43 = *(uint64_t (**)(void))v22;
      v45 = *(_BYTE *)(v21 + 76);
      sub_22ED30648((llvm::APInt *)&v43, v16, v17);
      v40 = v44;
      if (v44 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v39, (const llvm::APInt *)&v43);
      else
        v39 = v43;
      v41 = v45;
      v42 = v21;
      v23 = sub_22ED3B73C((uint64_t)&v48, (unint64_t)&v39);
      v24 = (char *)v48 + 24 * v49;
      *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
      *(_QWORD *)v24 = *(_QWORD *)v23;
      *(_DWORD *)(v23 + 8) = 0;
      v24[12] = *(_BYTE *)(v23 + 12);
      *((_QWORD *)v24 + 2) = *(_QWORD *)(v23 + 16);
      LODWORD(v49) = v49 + 1;
      if (v40 >= 0x41 && v39)
        MEMORY[0x2348A0E84](v39, 0x1000C8000313F17);
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v21)
          break;
        if ((*(_DWORD *)(v21 + 28) & 0x7F) == 0x43)
          goto LABEL_27;
      }
    }
    v25 = v49;
    if ((_DWORD)v49)
    {
      v26 = v48;
      v27 = (_QWORD *)((char *)v48 + 24 * v49);
      v39 = (uint64_t (*)(void))sub_22ED30784;
      v28 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v29 = v49;
      while (1)
      {
        v30 = operator new(24 * v29, v28);
        if (v30)
          break;
        v31 = v29 > 1;
        v29 >>= 1;
        if (!v31)
        {
          sub_22ED3B7A4((uint64_t)v26, v27, (uint64_t (**)(unint64_t, uint64_t))&v39, v25, 0, 0);
          goto LABEL_48;
        }
      }
      v32 = v30;
      sub_22ED3B7A4((uint64_t)v26, v27, (uint64_t (**)(unint64_t, uint64_t))&v39, v25, (uint64_t)v30, v29);
      operator delete(v32);
LABEL_48:
      v39 = (uint64_t (*)(void))sub_22ED307AC;
      v33 = (llvm::APInt *)sub_22ED3BEA0((uint64_t)v48, (uint64_t)v48 + 24 * v49, &v39);
      v34 = v48;
      if (v48 == v33)
        goto LABEL_60;
      v35 = v33;
      while (1)
      {
        v36 = *((_BYTE *)v34 + 12)
            ? llvm::APInt::compare(v34, (const llvm::APInt *)&v46)
            : llvm::APInt::compareSigned(v34, (const llvm::APInt *)&v46);
        if ((v36 & 0x80000000) == 0)
          break;
        v34 = (llvm::APInt *)((char *)v34 + 24);
        if (v34 == v35)
          goto LABEL_60;
      }
      if (*((_DWORD *)v34 + 2) <= 0x40u)
      {
        if (*(_QWORD *)v34 == v46)
          goto LABEL_63;
LABEL_60:
        sub_22EFF605C((uint64_t)a4);
        sub_22E8FCA40(a1, v37, 0x1A83u, 0, (uint64_t)&v39);
        v38 = *v11;
        if ((*(_BYTE *)(*v11 + 8) & 0xF) != 0)
          v38 = (uint64_t)sub_22F10D2BC(a2);
        v43 = (uint64_t (*)(void))(v38 & 0xFFFFFFFFFFFFFFF0);
        sub_22E8901B8((uint64_t)&v39, (uint64_t *)&v43);
        sub_22E903BEC((unsigned int *)&v39);
        goto LABEL_63;
      }
      if ((llvm::APInt::equalSlowCase(v34, (const llvm::APInt *)&v46) & 1) == 0)
        goto LABEL_60;
    }
LABEL_63:
    result = (uint64_t)sub_22ED3B6A4((char **)&v48);
LABEL_64:
    if (v47 >= 0x41)
    {
      result = v46;
      if (v46)
        return MEMORY[0x2348A0E84](v46, 0x1000C8000313F17);
    }
    return result;
  }
  if (!v13 || v14 != 44)
  {
    if (v14 != 9)
      return result;
    goto LABEL_18;
  }
  result = sub_22F114198(*(_QWORD *)(v13 + 24));
  if ((*(_BYTE *)(result + 74) & 1) != 0 || *(_QWORD *)(result + 128) > 7uLL)
  {
    result = sub_22F114198(*(_QWORD *)(v13 + 24));
    if ((*(_BYTE *)(result + 76) & 0x80) == 0)
      goto LABEL_18;
  }
  return result;
}

BOOL sub_22ED30EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 177)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unsigned int *sub_22ED30F28(unsigned int *result, _DWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _BYTE v6[96];
  _BYTE v7[96];
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a2 && (*(_BYTE *)(*((_QWORD *)result + 9) + 1) & 1) == 0)
  {
    v8 = *((_QWORD *)result + 11);
    v9 = 0;
    v10 = 0;
    v2 = result;
    sub_22ED385E0((uint64_t)&v8, a2);
    result = v2;
    v3 = *((_QWORD *)v2 + 1611);
    if ((_DWORD)v9 && (v4 = *(_QWORD *)(v3 + 40)) != 0)
    {
      if ((*(_BYTE *)(v4 + 9) & 0x10) != 0)
      {
        sub_22E8FCA40(v2, v9, 0x18B0u, 0, (uint64_t)v7);
        v5 = (unsigned int *)v7;
        return sub_22E903BEC(v5);
      }
      sub_22E8FCA40(v2, v9, 0x1A35u, 0, (uint64_t)v6);
      sub_22F2F30F4((uint64_t)v6, (uint64_t)"break");
    }
    else
    {
      if (!HIDWORD(v9) || !*(_QWORD *)(v3 + 48))
        return result;
      sub_22E8FCA40(v2, SHIDWORD(v9), 0x1A35u, 0, (uint64_t)v6);
      sub_22F2F30F4((uint64_t)v6, (uint64_t)"continue");
    }
    v5 = (unsigned int *)v6;
    return sub_22E903BEC(v5);
  }
  return result;
}

uint64_t sub_22ED31008(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8)
{
  int v10;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 v49;
  _QWORD *v50;
  uint64_t *v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v63[24];
  unsigned int v64[24];
  _QWORD v65[2];
  char v66;
  _QWORD v67[2];
  char v68;
  _QWORD v69[2];
  char v70;
  uint64_t v71[3];
  char v72;
  _BYTE *v73;
  unint64_t v74;
  int v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[80];
  _BYTE *v79;
  void *v80;
  uint64_t v81;
  int v82;
  _BYTE v83[64];
  void *v84;
  uint64_t v85;
  _QWORD v86[10];

  v86[8] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a5 + 16))
    return 1;
  v10 = a7;
  if (a4 && (**(_QWORD **)(a1 + 72) & 0x100) == 0 && *(_BYTE *)a4 == 12)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v17 = (uint64_t)&v16[*(unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL)];
    }
    else
    {
      v16 = v15 ? (uint64_t *)(a4 + 8) : 0;
      v17 = v15 ? a4 + 16 : 0;
    }
    if (v16 != (uint64_t *)v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = *v16;
        if (*v16)
          v21 = (*(_DWORD *)(*v16 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
        else
          v21 = 0;
        if (v21)
        {
          if (sub_22E3CEC2C(*v16) && !sub_22E3CB5E0(v20))
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v20 + 24), 0xFC1u, 0, (uint64_t)v64);
            sub_22E903BEC(v64);
            v19 = 1;
            sub_22EFC77E8(v20, 1);
          }
          else
          {
            v19 = 1;
          }
        }
        else if (!v18)
        {
          v18 = *v16;
        }
        ++v16;
      }
      while (v16 != (uint64_t *)v17);
      v22 = (v18 == 0) | v19;
      v10 = a7;
      if ((v22 & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v18 + 24), 0xFCFu, 0, (uint64_t)v63);
        sub_22E903BEC(v63);
      }
    }
  }
  sub_22ED30F28((unsigned int *)a1, *(_DWORD **)(a5 + 8));
  sub_22ED30F28((unsigned int *)a1, (_DWORD *)a6);
  if (!*(_QWORD *)a5)
  {
    v35 = *(unsigned __int8 **)(a5 + 8);
    if (v35)
    {
      v36 = *(_QWORD *)(a1 + 104);
      sub_22F0D5A50(*(_QWORD *)(a5 + 8));
      if (sub_22F1CF68C(*(_QWORD *)(v36 + 32), 0x1BF8u, v37, v36) != 1)
      {
        v38 = *(_QWORD *)(a1 + 88);
        v39 = v38 + 2128;
        v73 = 0;
        v74 = v38 + 2128;
        v75 = 7160;
        v79 = v83;
        v80 = v83;
        v81 = 8;
        v82 = 0;
        v84 = v86;
        v85 = 0x800000000;
        v76 = v78;
        v77 = 0xA00000000;
        v71[0] = v38;
        v71[1] = (uint64_t)&v79;
        v71[2] = (uint64_t)&v76;
        v72 = 1;
        sub_22ED38950((uint64_t)v71, v35);
        if (v72 && (_DWORD)v85)
        {
          v40 = (uint64_t *)v84;
          v41 = 8 * v85;
          while (1)
          {
            v42 = *(_QWORD *)(*v40 + 48);
            if ((v42 & 4) != 0 || (*(_BYTE *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0 || !sub_22E3CB5E0(*v40))
              break;
            ++v40;
            v41 -= 8;
            if (!v41)
            {
              v65[0] = *(_QWORD *)(a1 + 88);
              v65[1] = &v79;
              v66 = 0;
              sub_22ED38BA8((uint64_t)v65, v35);
              if (v66)
                break;
              v43 = *(_QWORD *)(a1 + 88);
              v69[0] = v43;
              v69[1] = &v79;
              v70 = 0;
              if (a6)
              {
                sub_22ED38BA8((uint64_t)v69, (_DWORD *)a6);
                if (v70)
                  break;
                v43 = *(_QWORD *)(a1 + 88);
              }
              v67[0] = v43;
              v67[1] = &v79;
              v68 = 0;
              if (!a8 || (sub_22ED38BA8((uint64_t)v67, a8), !v68))
              {
                v44 = v85;
                v45 = (_BYTE *)sub_22E3B8AAC(v39);
                v46 = (uint64_t)v45;
                v73 = v45;
                v47 = *v45;
                v48 = &v45[v47 + 1];
                v49 = v47 + 1;
                v50 = &v45[8 * v47 + 16];
                if (v44 < 5)
                {
                  *v48 = 3;
                  *v45 = v49;
                  *v50 = v44;
                  if ((_DWORD)v85)
                  {
                    v51 = (uint64_t *)v84;
                    v52 = *v45;
                    v53 = 8 * v85;
                    do
                    {
                      v54 = *v51++;
                      v55 = *(_QWORD *)(v54 + 40);
                      v45[v49 + 1] = 10;
                      v56 = &v45[8 * v52++];
                      *((_QWORD *)v56 + 2) = v55;
                      v49 = v52;
                      v53 -= 8;
                    }
                    while (v53);
                    *v45 = v52;
                  }
                }
                else
                {
                  *v48 = 2;
                  *v45 = v49;
                  *v50 = 0;
                }
                v57 = (int *)v76;
                if ((_DWORD)v77)
                {
                  v58 = 8 * v77;
                  do
                  {
                    v59 = *(_QWORD *)v57;
                    if (!v46)
                    {
                      v46 = sub_22E3B8AAC(v74);
                      v73 = (_BYTE *)v46;
                    }
                    sub_22E4D6448(v46 + 336, v59, 1);
                    v57 += 2;
                    v58 -= 8;
                  }
                  while (v58);
                  v57 = (int *)v76;
                }
                sub_22E90379C((_QWORD *)a1, *v57, (uint64_t)&v73, 0, (uint64_t)v65);
                sub_22E903BEC((unsigned int *)v65);
              }
              break;
            }
          }
        }
        if (v76 != v78)
          free(v76);
        if (v84 != v86)
          free(v84);
        if (v80 != v79)
          free(v80);
        if (v73 && v74)
          sub_22E3BB10C(v74, (unint64_t)v73);
      }
    }
  }
  if (a6)
  {
    if (a8)
    {
      v23 = *(_QWORD *)(a1 + 104);
      sub_22F0D5A50(a6);
      if (sub_22F1CF68C(*(_QWORD *)(v23 + 32), 0x1B21u, v24, v23) != 1
        && *(_BYTE *)a8 == 8
        && *a8 >= 0x100u)
      {
        v25 = *(unsigned __int8 **)&a8[2 * ((*a8 >> 8) - 1) + 4];
        if (v25)
        {
          LOBYTE(v73) = 0;
          LOBYTE(v69[0]) = 0;
          v76 = 0;
          v65[0] = 0;
          if (sub_22ED38F60((unsigned __int8 *)a6, (char *)&v73, &v76))
          {
            if (sub_22ED38F60(v25, (char *)v69, v65))
            {
              if (v73 == LOBYTE(v69[0]))
              {
                v26 = v76;
                v27 = v65[0];
                if (*((_QWORD *)v76 + 2) == *(_QWORD *)(v65[0] + 16))
                {
                  v79 = *(_BYTE **)(a1 + 88);
                  v80 = 0;
                  LOBYTE(v81) = 0;
                  sub_22ED385E0((uint64_t)&v79, a8);
                  if (!HIDWORD(v80))
                  {
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v27 + 4), 0x1B21u, 0, (uint64_t)&v79);
                    v71[0] = *(_QWORD *)(v27 + 16);
                    v28 = sub_22E890024((uint64_t)&v79, v71);
                    sub_22E894E38(v28, (unsigned __int8 *)v69);
                    sub_22E903BEC((unsigned int *)&v79);
                    sub_22E8FCA40((_QWORD *)a1, v26[1], 0x164Du, 0, (uint64_t)&v79);
                    sub_22E894E38((uint64_t)&v79, (unsigned __int8 *)&v73);
                    sub_22E903BEC((unsigned int *)&v79);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v29 = *(_DWORD **)(a5 + 8);
  if (v29)
  {
    v30 = *(_QWORD *)(a1 + 104);
    sub_22EFF605C(*(_QWORD *)(a5 + 8));
    if (sub_22F1CF68C(*(_QWORD *)(v30 + 32), 0x18CFu, v31, v30) != 1)
    {
      v79 = *(_BYTE **)(a1 + 88);
      v80 = (void *)a1;
      sub_22ED2DC2C((uint64_t)&v79, v29);
    }
  }
  v32 = a6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_BYTE *)a8 == 19)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
    *(_BYTE *)(*(_QWORD *)(v33 + 352) + 2 * *(_QWORD *)(v33 + 360) - 2) = 1;
  }
  v34 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 56, 3);
  return sub_22F0D80A4(v34, *(_QWORD *)(a1 + 88), a4, *(_QWORD *)(a5 + 8), *(_QWORD *)a5, v32, (uint64_t)a8, a2, a3, 0, v10);
}

uint64_t sub_22ED3169C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  void **v30;
  int v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  void *v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80[5];

  v80[3] = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v9 - 8);
    *(_DWORD *)(v10 + 8) |= 8u;
  }
  if (!a4)
    goto LABEL_12;
  v11 = sub_22EBBCB14(a1, a4, 0, 0, sub_22F2E6FA4, &v76);
  if (v11 < 2)
    goto LABEL_12;
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) != 0)
    goto LABEL_13;
  v13 = sub_22EB1B954(a1, (void *)v12);
  if ((v13 & 1) != 0)
  {
LABEL_12:
    v12 = 1;
LABEL_13:
    if (!a3)
      goto LABEL_38;
    goto LABEL_14;
  }
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v79 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v15 = *(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v15 || *(_BYTE *)(v15 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v16 = sub_22F10CF48(v15)) == 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0xBE3u, 0, (uint64_t)&v76);
      v80[0] = *(_QWORD *)(v14 + 8);
      v17 = sub_22E8901B8((uint64_t)&v76, v80);
      sub_22F0D4E74(v14);
      v75 = v18;
      sub_22E8906A0(v17, (uint64_t *)&v75);
      sub_22E903BEC((unsigned int *)&v76);
      goto LABEL_12;
    }
    v15 = v16;
  }
  v47 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v47)
    v48 = *(unsigned __int8 *)(v47 + 16) - 35 > 0xFFFFFFFD;
  else
    v48 = 0;
  if (!v48)
    v47 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_22F272660(v47);
  if (v49)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
    {
      v76 = &unk_24FAB6ED0;
      v77 = 2655;
      v78 = &v79;
      if ((sub_22EE8B0B0(a1, a2, v47 & 0xFFFFFFFFFFFFFFF0) & 1) != 0)
        goto LABEL_63;
    }
    else if ((sub_22EE8B180(a1, a2) & 1) != 0)
    {
      goto LABEL_63;
    }
  }
  else if ((*(_BYTE *)(v47 + 19) & 0xFC) == 0)
  {
    goto LABEL_63;
  }
  v80[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "countByEnumeratingWithState", 0x1BuLL);
  v80[1] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "objects", 7uLL);
  v80[2] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "count", 5uLL);
  v50 = (unsigned __int8 *)sub_22F1D3E5C(*(uint64_t **)(*(_QWORD *)(a1 + 88) + 15200), 3u, v80);
  v75 = v50;
  if ((!v49 || !sub_22EFDBA90(v49, (uint64_t)v50, 1, 0, 1, 0) && !sub_22F3B4D74(v49, (uint64_t *)&v75, 1))
    && !sub_22F334684(a1, (uint64_t)v50, v15, 1))
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x18CEu, 0, (uint64_t)&v76);
    v74 = *(_QWORD *)(v79 + 8);
    v68 = sub_22E8901B8((uint64_t)&v76, &v74);
    v69 = sub_22E894538(v68, (uint64_t *)&v75);
    sub_22F0D4E74(v79);
    v73 = v70;
    sub_22E8906A0(v69, &v73);
    sub_22E903BEC((unsigned int *)&v76);
  }
LABEL_63:
  v12 = v79;
  if (!a3)
    goto LABEL_38;
LABEL_14:
  v79 = 0;
  if (*(_BYTE *)a3 == 12)
  {
    v19 = *(_QWORD *)(a3 + 8);
    if ((v19 & 1) != 0)
    {
      v31 = *(_DWORD *)(*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8) + 24);
      v32 = (_QWORD *)a1;
      v33 = 4890;
    }
    else
    {
      if ((*(_DWORD *)(v19 + 28) & 0x80) != 0 || !v19 || (*(_DWORD *)(v19 + 28) & 0x7Fu) - 60 > 6)
        return 1;
      v20 = *(_QWORD *)(v19 + 48);
      v79 = v20;
      if (sub_22E3CB5E0(v19))
      {
        v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        LOBYTE(v76) = 0;
        v22 = sub_22F110500((uint64_t)&v76, v21);
        if (!v22 || *(_BYTE *)(v22 + 16) != 14)
          goto LABEL_35;
        v23 = *(_DWORD *)(v19 + 24);
        v24 = *(_QWORD *)(a1 + 88);
        v25 = sub_22F36E1B8(v24);
        v26 = *(_QWORD *)(v25 + 48);
        if (v26)
          v27 = v26 & 0xFFFFFFFFFFFFFFF0;
        else
          v27 = sub_22EF6462C(v24, v25);
        sub_22E5BBE34((uint64_t)v80, v23, v27, 0, 0, 0);
        v75 = (unsigned __int8 *)v80;
        v51 = *(_QWORD *)(v19 + 56);
        v52 = (unint64_t *)(v51 & 0xFFFFFFFFFFFFFFF8);
        if ((v51 & 4) != 0)
          v52 = (unint64_t *)v52[4];
        if (sub_22EDC7260((_QWORD *)a1, *v52, (uint64_t)(v52 + 1), (uint64_t *)&v75, (uint64_t *)&v79, 0, 0) == 1)sub_22F347444((_QWORD *)a1, v19, v75);
        if (v79 < 0x10)
        {
          sub_22EFC77E8(v19, 1);
          return 1;
        }
        *(_QWORD *)(v19 + 48) = v79;
        if (*(_DWORD *)(a1 + 10680) > *(_DWORD *)(a1 + 11956))
          goto LABEL_35;
        v54 = *(_QWORD *)(v19 + 56);
        v55 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFF8);
        if ((v54 & 4) != 0)
          v55 = (uint64_t *)v55[4];
        v58 = *v55;
        v57 = v55 + 1;
        v56 = v58;
        v59 = v58;
        v60 = v57;
LABEL_78:
        v71 = v57;
        v72 = v56;
        while (1)
        {
          if ((v59 & 0xF) == 0)
          {
            v61 = *(unsigned __int8 *)(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v61 > 0x39)
              goto LABEL_87;
            if (v61 == 24)
            {
LABEL_96:
              v56 = v59;
              goto LABEL_92;
            }
            if (v61 == 26)
            {
              if ((*(_BYTE *)(v59 + 23) & 0x10) != 0)
                goto LABEL_96;
            }
            else if (((1 << v61) & 0x20000000200003CLL) == 0)
            {
LABEL_87:
              v62 = v60;
              v63 = v59;
              v64 = sub_22F115668(v59) == 0;
              v65 = v72;
              v66 = v63;
              if (!v64)
                v65 = v63;
              v57 = v71;
              if (!v64)
                v57 = v62;
              v59 = sub_22F115B7C(v66);
              v56 = v65;
              if (!v59)
              {
LABEL_92:
                v67 = sub_22F115668(v56);
                sub_22E8FCA40((_QWORD *)a1, v67, 0x1898u, 0, (uint64_t)&v76);
                v74 = *(_QWORD *)(v19 + 40);
                sub_22E894538((uint64_t)&v76, &v74);
LABEL_34:
                sub_22E903BEC((unsigned int *)&v76);
                goto LABEL_35;
              }
              goto LABEL_78;
            }
          }
          v59 = sub_22F115B7C(v59);
        }
      }
      v31 = *(_DWORD *)(v19 + 24);
      v32 = (_QWORD *)a1;
      v33 = 4033;
    }
    sub_22E8FCA40(v32, v31, v33, 0, (uint64_t)&v76);
LABEL_30:
    sub_22E903BEC((unsigned int *)&v76);
    return 1;
  }
  if ((*(_DWORD *)a3 & 0x8000) == 0 && (*(_DWORD *)a3 & 0x300) != 0x100)
  {
    sub_22F0D5A50(a3);
    sub_22E8FCA40((_QWORD *)a1, v28, 0x1257u, 0, (uint64_t)&v76);
    sub_22F0D4E74(a3);
    v80[0] = v29;
    v30 = &v76;
LABEL_27:
    sub_22E8906A0((uint64_t)v30, v80);
    goto LABEL_30;
  }
  v34 = *(_QWORD *)(a3 + 8);
  v79 = v34;
  if ((v34 & 1) != 0 || (*(_BYTE *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1256u, 0, (uint64_t)&v76);
    v35 = sub_22E8901B8((uint64_t)&v76, (uint64_t *)&v79);
    sub_22F0D4E74(a3);
    v80[0] = v36;
    sub_22E8906A0(v35, v80);
    goto LABEL_34;
  }
LABEL_35:
  v37 = *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v37 + 17) & 4) == 0)
  {
    v38 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v38 != 10 && v38 != 32)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1258u, 0, (uint64_t)&v76);
      v45 = sub_22E8901B8((uint64_t)&v76, (uint64_t *)&v79);
      sub_22F0D4E74(a3);
      v80[0] = v46;
      v30 = (void **)v45;
      goto LABEL_27;
    }
  }
LABEL_38:
  if ((v12 & 1) != 0)
    return 1;
  if ((v12 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v12 & 0xFFFFFFFFFFFFFFFELL);
    v40 = v39;
  }
  else
  {
    v40 = 0;
  }
  v41 = sub_22EBCF22C(a1, v12 & 0xFFFFFFFFFFFFFFFELL, v40, 0, 0);
  if ((v41 & 1) != 0)
    return 1;
  v42 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  *(_BYTE *)v42 = 92;
  if (byte_255E04EB3)
  {
    v44 = sub_22F0D3748(92);
    ++*((_DWORD *)v44 + 2);
  }
  *(_QWORD *)(v42 + 8) = a3;
  *(_QWORD *)(v42 + 16) = v43;
  *(_QWORD *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 32) = a2;
  *(_DWORD *)(v42 + 36) = a5;
  return v42;
}

uint64_t sub_22ED31E48(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, _BYTE *a6, unsigned int a7, unint64_t a8, unsigned int a9, int a10, int a11)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  unsigned int *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;
  unint64_t v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  std::string::size_type v34;
  void **v35;
  size_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  std::string v42;
  void *__p[2];
  uint64_t v44;
  _BYTE v45[96];
  std::string v46;

  if (!a6)
    return 1;
  v19 = a11;
  if (!a8
    || (*(_BYTE *)(a8 + 1) & 0x80) != 0
    || ((v20 = *(_QWORD *)(*(_QWORD *)(a8 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0 || *(_BYTE *)(v20 + 16) != 32)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
     || (v21 = sub_22F10CF48(v20), v19 = a11, !v21)))
  {
    if (*a6 == 12)
      v25 = a6;
    else
      v25 = 0;
    v26 = *((_QWORD *)v25 + 1);
    if ((v26 & 1) == 0)
    {
      v41 = v19;
      if (a8
        && (*(_DWORD *)(v26 + 28) & 0x80) == 0
        && !sub_22EE67384((uint64_t)a1, a8, 0)
        && (!a4 || sub_22E9F98A0((uint64_t)a1, a2, a4, (uint64_t)"co_await", 8)))
      {
        std::to_string(&v46, *(unsigned __int16 *)(a2 + 12) >> 1);
        sub_22F0D5A50(a8);
        v40 = v29;
        v30 = sub_22F36D73C(a1[11]);
        *((_BYTE *)&v42.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v42, "__range");
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v46;
        else
          v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v46.__r_.__value_.__l.__size_;
        v33 = std::string::append(&v42, (const std::string::value_type *)v31, size);
        v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v44 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (v44 >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        if (v44 >= 0)
          v36 = HIBYTE(v44) & 0x7F;
        else
          v36 = (size_t)__p[1];
        v37 = (void *)sub_22ED321AC(a1, v40, v30, v35, v36);
        if (SHIBYTE(v44) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        __p[0] = v37;
        if (sub_22ED32240(a1, (unint64_t)v37, a8, v40, 0xDA3u)
          || (v38 = sub_22EA2D7B4(a1, (unint64_t *)__p, 1uLL),
              v39 = sub_22ED2B2F8((uint64_t)a1, v38, v40, v40),
              (v39 & 1) != 0)
          || (v27 = sub_22ED3242C(a1, a3, a4, a5, a7, v39 & 0xFFFFFFFFFFFFFFFELL, 0, 0, 0, 0, v25, a9, v41),
              (v27 & 1) != 0))
        {
          sub_22EA2BABC((uint64_t)a1, v26);
          v27 = 1;
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        return v27;
      }
      sub_22EA2BABC((uint64_t)a1, v26);
      return 1;
    }
    sub_22E8FCA40(a1, *((_DWORD *)v25 + 4), 0x1323u, 0, (uint64_t)v45);
    v24 = (unsigned int *)v45;
LABEL_21:
    sub_22E903BEC(v24);
    return 1;
  }
  if (a5)
  {
    sub_22F0D5A50(a5);
    sub_22E8FCA40(a1, v22, 0xFFAu, 0, (uint64_t)&v46);
    sub_22F0D4E74(a5);
    __p[0] = v23;
    sub_22E8906A0((uint64_t)&v46, (uint64_t *)__p);
    v24 = (unsigned int *)&v46;
    goto LABEL_21;
  }
  return sub_22ED3169C((uint64_t)a1, a3, (uint64_t)a6, a8, a9);
}

uint64_t sub_22ED321AC(_QWORD *a1, unsigned int a2, unint64_t a3, const void *a4, size_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v8 = a1[27];
  v9 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), a4, a5);
  v10 = sub_22EF579A8(a1[11], a3, a2);
  result = sub_22EFBB670(a1[11], v8, a2, a2, v9, a3, (uint64_t)v10, 0);
  *(_DWORD *)(result + 28) |= 0x200u;
  return result;
}

BOOL sub_22ED32240(_QWORD *a1, unint64_t a2, unint64_t a3, int a4, unsigned int a5)
{
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t *v16;
  _BOOL8 v17;
  int v18;
  uint64_t v20;
  unsigned int v21[24];
  unint64_t v22;
  unint64_t v23;

  v7 = (unsigned __int8 *)a3;
  v23 = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v21[0]) = 0;
  v11 = sub_22F110500((uint64_t)v21, v10);
  if (v11 && *(_QWORD *)(v11 + 24) <= 0xFuLL && (*(_BYTE *)(v11 + 17) & 4) == 0)
  {
    v12 = sub_22EBBCB14(a1, v7, 0, 0, sub_22F2E6FA4, v21);
    if (v12 < 2)
    {
      v17 = 1;
LABEL_16:
      sub_22EFC77E8(a2, 1);
      return v17;
    }
    v7 = (unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    v23 = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = 0;
  if (*v7 != 180)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v13 && (*(_DWORD *)(v13 + 16) & 0xFF800FF) == 86507531)
      goto LABEL_14;
  }
  v15 = *(_QWORD *)(a2 + 56);
  v16 = (unint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (unint64_t *)v16[4];
  if (sub_22EDC7260(a1, *v16, (uint64_t)(v16 + 1), (uint64_t *)&v23, (uint64_t *)&v22, 0, 0) == 1)
  {
LABEL_14:
    sub_22E8FCA40(a1, a4, a5, 0, (uint64_t)v21);
    v20 = *(_QWORD *)(v23 + 8);
    sub_22E8901B8((uint64_t)v21, &v20);
    sub_22E903BEC(v21);
  }
  v17 = v22 < 0x10;
  if (v22 <= 0xF)
    goto LABEL_16;
  *(_QWORD *)(a2 + 48) = v22;
  if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
  {
    sub_22EA1D5B8(a1, a2);
    if (v18)
      sub_22EFC77E8(a2, 1);
  }
  sub_22EA28AD8();
  sub_22EA2BC1C((uint64_t)a1, a2);
  sub_22EFCCE00(a1[27], a2);
  return v17;
}

uint64_t sub_22ED3242C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  std::string::size_type v50;
  void **v51;
  size_t v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  void **v57;
  size_t v58;
  uint64_t v59;
  llvm::StringMapImpl *v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  char v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t (*v76)(uint64_t);
  std::string *v77;
  uint64_t *v78;
  uint64_t *v79;
  unsigned int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t i;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  std::string *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  _OWORD *v179;
  unint64_t v180;
  int v181;
  unsigned int v182[18];
  int v183;
  uint64_t v184;
  uint64_t v185;
  std::string v186;
  unsigned int v187;
  _QWORD v188[3];
  uint64_t v189[9];
  uint64_t v190[10];
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  int *v195;
  uint64_t *v196;
  uint64_t *v197;
  void **v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  void *__p[2];
  _QWORD v206[339];
  int v207;
  _OWORD v208[9];
  _QWORD *v209;
  uint64_t v210;
  _QWORD v211[5];
  __int128 v212;
  uint64_t v213;
  unsigned int v214;
  __int128 v215;
  int v216;
  uint64_t v217;
  __int128 v218;
  void *v219[2];
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  int v229;
  __int16 v230;
  char v231;
  std::string v232;
  _BYTE v233[64];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  int v241;
  __int16 v242;
  char v243;
  uint64_t v244;

  v14 = MEMORY[0x24BDAC7A8]();
  v18 = v17;
  v19 = v16;
  v20 = v15;
  v176 = v21;
  v177 = v22;
  v175 = v23;
  v25 = v24;
  v26 = (_QWORD *)v14;
  v244 = *MEMORY[0x24BDAC8D0];
  v27 = *(_QWORD *)(v15 + 8);
  v28 = *(_QWORD *)(v27 + 48);
  v29 = *(_QWORD *)(a11 + 8);
  v30 = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_DWORD *)(v30 + 16);
  if ((v31 & 0x400) != 0)
  {
    sub_22EFC9100(*(_QWORD *)(v15 + 8), v26[11]);
    if (a14 != 2 && (*(_DWORD *)(v29 + 28) & 0x80) == 0)
    {
      if ((*(_DWORD *)(v29 + 28) & 0x7F) == 0x3D)
      {
        v37 = *(unsigned int *)(v29 + 100);
        if ((_DWORD)v37)
        {
          v38 = (uint64_t *)(v29 + 104);
          v39 = v26[11];
          v40 = 8 * v37;
          do
          {
            v41 = *v38++;
            *(_QWORD *)(v41 + 48) = *(_QWORD *)(v39 + 16832);
            v40 -= 8;
          }
          while (v40);
        }
      }
      *(_QWORD *)(v29 + 48) = sub_22F347230((uint64_t)v26);
    }
    goto LABEL_9;
  }
  if (v16 > 1)
  {
LABEL_9:
    if (a14 == 2)
      return 0;
    if (*(_DWORD *)(v26[9] + 72) >= 0x32u && v19 >= 2)
      sub_22EC9AE58(v26, v25, (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFELL));
    v33 = sub_22E3CD3D4(v26[11] + 2032, 96, 3);
    *(_BYTE *)v33 = 5;
    if (byte_255E04EB3)
    {
      v35 = sub_22F0D3748(5);
      ++*((_DWORD *)v35 + 2);
    }
    *(_DWORD *)(v33 + 8) = v25;
    *(_DWORD *)(v33 + 80) = v176;
    *(_DWORD *)(v33 + 84) = v177;
    *(_DWORD *)(v33 + 88) = a12;
    *(_QWORD *)(v33 + 16) = v175;
    *(_QWORD *)(v33 + 24) = v20;
    *(_QWORD *)(v33 + 32) = v19 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v33 + 40) = v18 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v33 + 48) = a9 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v33 + 56) = a10 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v33 + 64) = a11;
    *(_QWORD *)(v33 + 72) = 0;
    return v33;
  }
  v162 = v26[1611];
  v163 = *(_DWORD *)(v27 + 24);
  v187 = v163;
  if ((v31 & 0xFE) != 0x28)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_5;
    v30 = sub_22F10CF48(v30);
    if (!v30)
      goto LABEL_5;
    v31 = *(_DWORD *)(v30 + 16);
  }
  if ((v31 & 0x100000) != 0)
  {
    do
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v30)
      {
        v120 = *(_DWORD *)(v30 + 16);
        if ((v120 & 0xFE) == 0x28)
          continue;
      }
      v30 = sub_22F10CF48(v30);
      v120 = *(_DWORD *)(v30 + 16);
    }
    while ((v120 & 0x100000) != 0);
  }
  v28 = *(_QWORD *)(v30 + 32);
LABEL_5:
  v32 = sub_22F32D524((uint64_t)v26, v27, v28, 1, v177, 0);
  if ((v32 & 1) != 0)
    return 1;
  v161 = v32;
  v42 = sub_22F32D524((uint64_t)v26, v27, v28, 1, v177, 0);
  if ((v42 & 1) != 0)
    return 1;
  v155 = sub_22EF67C08(v26[11]);
  v43 = sub_22EFBC5B4(v27);
  if (!v43)
    return 1;
  v44 = v43;
  v45 = *(_QWORD *)(v43 + 8);
  __p[0] = &unk_24FAB6EF8;
  LODWORD(__p[1]) = 3493;
  v46 = v163;
  v164 = v45;
  if ((sub_22EE8B0B0((uint64_t)v26, v46, v45) & 1) != 0)
    return 1;
  v148 = v42;
  v152 = v44;
  std::to_string(&v186, *(unsigned __int16 *)(v162 + 12) >> 1);
  *((_BYTE *)&v232.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v232, "__begin");
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v186;
  else
    v47 = (std::string *)v186.__r_.__value_.__r.__words[0];
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v186.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v186.__r_.__value_.__l.__size_;
  v49 = std::string::append(&v232, (const std::string::value_type *)v47, size);
  v50 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v206[0] = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (v206[0] >= 0)
    v51 = __p;
  else
    v51 = (void **)__p[0];
  if (v206[0] >= 0)
    v52 = HIBYTE(v206[0]) & 0x7F;
  else
    v52 = (size_t)__p[1];
  v151 = sub_22ED321AC(v26, v177, v155, v51, v52);
  if (SHIBYTE(v206[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  *((_BYTE *)&v232.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v232, "__end");
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v186;
  else
    v53 = (std::string *)v186.__r_.__value_.__r.__words[0];
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = *((_BYTE *)&v186.__r_.__value_.__s + 23) & 0x7F;
  else
    v54 = v186.__r_.__value_.__l.__size_;
  v55 = std::string::append(&v232, (const std::string::value_type *)v53, v54);
  v56 = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v206[0] = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (v206[0] >= 0)
    v57 = __p;
  else
    v57 = (void **)__p[0];
  if (v206[0] >= 0)
    v58 = HIBYTE(v206[0]) & 0x7F;
  else
    v58 = (size_t)__p[1];
  v150 = sub_22ED321AC(v26, v177, v155, v57, v58);
  if (SHIBYTE(v206[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  v184 = 0;
  v185 = 0;
  v59 = *(_QWORD *)(v164 & 0xFFFFFFFFFFFFFFF0);
  if (!v59 || (*(_DWORD *)(v59 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
  {
    v165 = (uint64_t *)(v164 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
      || (v59 = sub_22F10CF48(v59)) == 0)
    {
      __p[0] = v206;
      __p[1] = (void *)0x1000000000;
      v206[336] = v208;
      v206[337] = v208;
      v206[338] = 16;
      v207 = 0;
      v208[8] = 0u;
      v209 = v211;
      v210 = 0x400000000;
      v211[4] = (char *)&v212 + 8;
      v212 = 0u;
      v213 = 1;
      v214 = v187;
      v216 = 0;
      v215 = 0u;
      v183 = 0;
      v204 = v177;
      v203 = v176;
      v145 = v42 & 0xFFFFFFFFFFFFFFFELL;
      v202 = v161 & 0xFFFFFFFFFFFFFFFELL;
      v201 = v42 & 0xFFFFFFFFFFFFFFFELL;
      v200 = v151;
      v199 = v150;
      v198 = __p;
      v197 = &v185;
      v196 = &v184;
      v60 = (llvm::StringMapImpl *)(v26[10] + 544);
      v195 = &v183;
      *(_QWORD *)&v193 = sub_22E3CB704(v60, "begin", 5uLL);
      DWORD2(v193) = v177;
      sub_22EFC6D6C((uint64_t)&v194, v193);
      *(_QWORD *)&v191 = sub_22E3CB704((llvm::StringMapImpl *)(v26[10] + 544), "end", 3uLL);
      DWORD2(v191) = v177;
      sub_22EFC6D6C((uint64_t)&v192, v191);
      v232.__r_.__value_.__r.__words[0] = 0;
      v232.__r_.__value_.__l.__size_ = (std::string::size_type)v233;
      v232.__r_.__value_.__r.__words[2] = 0x800000000;
      v234 = 0;
      v235 = 0;
      v236 = 0;
      v237 = v26;
      v238 = v193;
      v239 = v194;
      v240 = xmmword_22F463A40;
      v241 = 16842752;
      v242 = 0;
      v243 = 0;
      sub_22EC56024((uint64_t)&v232);
      v217 = 0;
      *(_QWORD *)&v218 = v219;
      *((_QWORD *)&v218 + 1) = 0x800000000;
      v222 = 0;
      v223 = 0;
      v224 = 0;
      v225 = v26;
      v226 = v191;
      v227 = v192;
      v228 = xmmword_22F463A40;
      v229 = 16842752;
      v230 = 0;
      v231 = 0;
      sub_22EC56024((uint64_t)&v217);
      v190[0] = (uint64_t)&v195;
      v190[1] = (uint64_t)v26;
      v190[2] = (uint64_t)&v204;
      v190[3] = (uint64_t)&v193;
      v190[4] = (uint64_t)&v232;
      v190[5] = (uint64_t)&v198;
      v190[6] = (uint64_t)&v202;
      v190[7] = (uint64_t)&v197;
      v190[8] = (uint64_t)&v203;
      v190[9] = (uint64_t)&v200;
      v189[0] = (uint64_t)&v195;
      v189[1] = (uint64_t)v26;
      v189[2] = (uint64_t)&v204;
      v189[3] = (uint64_t)&v191;
      v189[4] = (uint64_t)&v217;
      v189[5] = (uint64_t)&v198;
      v189[6] = (uint64_t)&v201;
      v189[7] = (uint64_t)&v196;
      v189[8] = (uint64_t)&v199;
      v61 = sub_22F10C2A4(*v165);
      if (v61 && (*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 <= 2)
      {
        v64 = v61 + 64;
        sub_22EC611AC(v26, &v232, v61 + 64, 0);
        if (LODWORD(v232.__r_.__value_.__l.__data_) == 5 || (sub_22EC611AC(v26, &v217, v64, 0), (_DWORD)v217 == 5))
        {
          v62 = 2;
LABEL_71:
          v63 = (unsigned __int8 *)v152;
          goto LABEL_72;
        }
        if ((LODWORD(v232.__r_.__value_.__r.__words[2]) == 0) != (DWORD2(v218) == 0))
        {
          v188[0] = &v198;
          v188[1] = &v202;
          v188[2] = v26;
          if (LODWORD(v232.__r_.__value_.__r.__words[2]))
          {
            v75 = sub_22ED39604;
            v76 = sub_22ED39600;
            v77 = &v232;
            v78 = v190;
            v79 = v189;
            v80 = 0;
          }
          else
          {
            v75 = sub_22ED39600;
            v76 = sub_22ED39604;
            v77 = (std::string *)&v217;
            v78 = v189;
            v79 = v190;
            v80 = 1;
          }
          v62 = sub_22ED39074((uint64_t)v188, v80, (uint64_t)v77, v75, (uint64_t)v78, v76, (uint64_t)v79);
          goto LABEL_71;
        }
      }
      v62 = sub_22ED3938C((uint64_t)v190);
      v63 = (unsigned __int8 *)v152;
      if (!v62)
        v62 = sub_22ED394E0((uint64_t)v189);
LABEL_72:
      v156 = v62;
      if (!HIBYTE(v229))
        goto LABEL_78;
      if ((_DWORD)v217 == 5)
      {
        sub_22EC64D18(v225, (uint64_t)&v217);
      }
      else
      {
        if (!v223 || (*(_DWORD *)(v225[9] + 52) & 0x400000) == 0)
        {
LABEL_78:
          if (v222)
          {
            v142 = sub_22EC6CBD0(v222);
            MEMORY[0x2348A0E9C](v142, 0x10E0C409F09D3C3);
            v62 = v156;
          }
          if ((void **)v218 != v219)
          {
            free((void *)v218);
            v62 = v156;
          }
          if (HIBYTE(v241))
          {
            if (LODWORD(v232.__r_.__value_.__l.__data_) == 5)
            {
              sub_22EC64D18(v237, (uint64_t)&v232);
              goto LABEL_87;
            }
            if (v235 && (*(_DWORD *)(v237[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v237, (uint64_t)&v232);
LABEL_87:
              v62 = v156;
            }
          }
          if (v234)
          {
            v143 = sub_22EC6CBD0(v234);
            MEMORY[0x2348A0E9C](v143, 0x10E0C409F09D3C3);
            v62 = v156;
          }
          if ((_BYTE *)v232.__r_.__value_.__l.__size_ == v233)
          {
            if (a14)
              goto LABEL_120;
          }
          else
          {
            free((void *)v232.__r_.__value_.__l.__size_);
            v62 = v156;
            if (a14)
              goto LABEL_120;
          }
          if (v62 == 1 && !v183)
          {
            if (*v63 == 161)
            {
              v65 = (*(_DWORD *)(*((_QWORD *)v63 + 2) + 28) & 0x7F) == 0x40 ? *((_QWORD *)v63 + 2) : 0;
              v217 = v65;
              if (v65)
              {
                v66 = sub_22EFBF144(v65);
                v190[0] = v66;
                v189[0] = *(_QWORD *)(v65 + 48);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v189[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 39
                  && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) & 0xFEu)
                   - 2 <= 3)
                {
                  sub_22F0D5A50(v152);
                  sub_22E8FCA40(v26, v104, 0x120Cu, 0, (uint64_t)&v232);
                  v105 = sub_22F2F2168((uint64_t)&v232, &v187);
                  v106 = sub_22E890024(v105, &v217);
                  v107 = sub_22E8901B8(v106, v190);
                  sub_22E8901B8(v107, v189);
                  sub_22E903BEC((unsigned int *)&v232);
                  sub_22E8FCA40(v26, *(_DWORD *)(v217 + 24), 0x64u, 0, (uint64_t)v182);
                  sub_22E903BEC(v182);
LABEL_133:
                  v33 = 1;
LABEL_134:
                  sub_22E9DC79C((uint64_t *)__p);
LABEL_135:
                  v98 = 1;
                  goto LABEL_136;
                }
              }
            }
            v67 = v26 + 1333;
            v166 = v187;
            v68 = *((_DWORD *)v26 + 2114);
            v147 = *((_BYTE *)v26 + 11952);
            v146 = *((_BYTE *)v26 + 10664);
            v149 = *(_DWORD *)(v26[13] + 180);
            sub_22EE03478((uint64_t)v26);
            if (!v69)
              *((_BYTE *)v26 + 11952) = 1;
            *v67 = 0;
            v70 = sub_22EB2941C(v26, v162, v166, 5, v152);
            v144 = v70;
            if ((v70 & 1) != 0)
              v71 = 1;
            else
              v71 = sub_22ED31E48(v26, v162, v25, v176, v175, (_BYTE *)a11, v177, v70 & 0xFFFFFFFFFFFFFFFELL, a12, 0, 2) & 1;
            *((_DWORD *)v26 + 2114) = v68;
            *((_BYTE *)v26 + 11952) = v147;
            *v67 = v146;
            v72 = v26[13];
            if (*(_DWORD *)(v72 + 180) == 5)
              *(_BYTE *)(v72 + 170) = 1;
            if (v149)
              v73 = 3;
            else
              v73 = 0;
            *(_DWORD *)(v72 + 180) = v73;
            if (!v71)
            {
              sub_22E8FCA40(v26, v166, 0xDA4u, 0, (uint64_t)&v232);
              v190[0] = *(_QWORD *)(v152 + 8);
              v74 = sub_22E8901B8((uint64_t)&v232, v190);
              BYTE12(v218) = 0;
              *(_QWORD *)((char *)&v218 + 4) = 0;
              v220 = 0x100000000000000;
              v219[1] = 0;
              v219[0] = (void *)42;
              v217 = v166 | (v166 << 32);
              LOBYTE(v218) = 0;
              v221 = 0;
              sub_22E890748(v74, &v217);
              if (SHIBYTE(v220) < 0)
                operator delete(v219[0]);
              sub_22E903BEC((unsigned int *)&v232);
              v33 = sub_22ED31E48(v26, v162, v25, v176, v175, (_BYTE *)a11, v177, v144 & 0xFFFFFFFFFFFFFFFELL, a12, 0, 1);
              if (v33)
                goto LABEL_134;
            }
LABEL_121:
            if (v183)
              v81 = v145;
            else
              v81 = v161 & 0xFFFFFFFFFFFFFFFELL;
            v232.__r_.__value_.__r.__words[0] = v81;
            sub_22F0D5A50(v81);
            v153 = v82;
            v83 = v26[11] + 2128;
            v167 = v187 | ((unint64_t)v187 << 32);
            v84 = sub_22E3B8AAC(v83);
            sub_22E4D6448(v84 + 336, v167, 1);
            v85 = *(_QWORD *)(v232.__r_.__value_.__r.__words[0] + 8);
            v168 = (unsigned __int8 *)v84;
            if (!v84)
            {
              v86 = *(_QWORD *)(v232.__r_.__value_.__r.__words[0] + 8);
              v87 = sub_22E3B8AAC(v83);
              v85 = v86;
              v168 = (unsigned __int8 *)v87;
            }
            v88 = *v168;
            v89 = v168 + 1;
            v89[v88] = 9;
            *v168 = v88 + 1;
            *(_QWORD *)&v168[8 * v88 + 16] = v85;
            v90 = v183;
            v91 = (v88 + 1);
            v89[v91] = 2;
            *(_QWORD *)&v168[8 * v91 + 16] = v90;
            *v168 = v88 + 2;
            v178 = v153;
            v181 = 3494;
            v180 = v83;
            v154 = v83;
            v92 = (_OWORD *)sub_22E3B8AAC(v83);
            v179 = v92;
            v93 = *((_OWORD *)v168 + 5);
            v95 = *((_OWORD *)v168 + 2);
            v94 = *((_OWORD *)v168 + 3);
            v92[4] = *((_OWORD *)v168 + 4);
            v92[5] = v93;
            v92[2] = v95;
            v92[3] = v94;
            v96 = *((_OWORD *)v168 + 1);
            *v92 = *(_OWORD *)v168;
            v92[1] = v96;
            for (i = 96; i != 336; i += 24)
              std::string::operator=((std::string *)((char *)v92 + i), (const std::string *)&v168[i]);
            sub_22E78D560((uint64_t)(v92 + 21), (uint64_t)(v168 + 336));
            sub_22E78D658((uint64_t)(v92 + 28), (uint64_t *)v168 + 56);
            sub_22ED1231C((uint64_t)__p, &v178, v26, 0, (int)&v232, 1u, "", 0, 0);
            if (v179 && v180)
            {
              sub_22E3BB10C(v180, (unint64_t)v179);
              v179 = 0;
            }
            sub_22E3BB10C(v154, (unint64_t)v168);
LABEL_132:
            if (!v156)
            {
              sub_22E9DC79C((uint64_t *)__p);
              v33 = 0;
              goto LABEL_141;
            }
            goto LABEL_133;
          }
LABEL_120:
          if (v62 != 1)
            goto LABEL_132;
          goto LABEL_121;
        }
        sub_22E90B5FC((unint64_t)v225, (uint64_t)&v217);
      }
      v62 = v156;
      goto LABEL_78;
    }
  }
  v121 = v59;
  v185 = v161;
  if (v176)
  {
    v185 = sub_22E9F9E30((unsigned int *)v26, v162, v177, v161 & 0xFFFFFFFFFFFFFFFELL);
    if ((v185 & 1) != 0)
      goto LABEL_202;
  }
  if (sub_22ED32240(v26, v151, v161 & 0xFFFFFFFFFFFFFFFELL, v177, 0xDA7u))
  {
    sub_22ED33B40(v26, v185 & 0xFFFFFFFFFFFFFFFELL, 0);
    goto LABEL_202;
  }
  if (*(_BYTE *)(v121 + 16) == 2)
  {
    v122 = v26[11];
    v170 = v121 + 40;
    v123 = sub_22EF5B0AC(v122, *(_DWORD *)(*(_QWORD *)(v122 + 15088) + *(_QWORD *)(**(_QWORD **)(v122 + 15088) - 24) + 120));
    v158 = v187;
    v124 = sub_22E3CD3D4(v122 + 2032, 32, 3);
    v125 = sub_22EFF8F1C(v124, v122, v170, v123, v158);
  }
  else
  {
    v171 = *(_DWORD *)(v150 + 24);
    v127 = sub_22EF579A8(v26[11], v121 & 0xFFFFFFFFFFFFFFF0, v187);
    v159 = sub_22EE7D030((uint64_t)v26, v121 & 0xFFFFFFFFFFFFFFF0, (uint64_t)v127);
    v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 16))(v150);
    v33 = 1;
    v172 = sub_22F32DA5C(v26, v171, 0, 1, v159, v128);
    if ((v172 & 1) != 0)
      goto LABEL_135;
    v160 = *(_DWORD *)(v150 + 24);
    v129 = sub_22EF579A8(v26[11], *(_QWORD *)(v121 + 32), v187);
    v130 = sub_22EE7D030((uint64_t)v26, v121 & 0xFFFFFFFFFFFFFFF0, (uint64_t)v129);
    v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 16))(v150);
    v33 = 1;
    v132 = sub_22F32DA5C(v26, v160, 0, 1, v130, v131);
    if ((v132 & 1) != 0)
      goto LABEL_135;
    v125 = sub_22EB1E9A8(v26, v162, *(_DWORD *)(v150 + 24), 42, (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFFELL), v132 & 0xFFFFFFFFFFFFFFFELL);
    if ((v125 & 1) != 0)
      goto LABEL_202;
  }
  v126 = sub_22EB1E9A8(v26, v162, v177, 32, (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFFELL), v125 & 0xFFFFFFFFFFFFFFFELL);
  v184 = v126;
  if ((v126 & 1) != 0)
  {
LABEL_202:
    v33 = 1;
    goto LABEL_135;
  }
  if (sub_22ED32240(v26, v150, v126 & 0xFFFFFFFFFFFFFFFELL, v177, 0xDA7u))
  {
    v33 = 1;
    sub_22ED33B40(v26, v184 & 0xFFFFFFFFFFFFFFFELL, 1);
    goto LABEL_135;
  }
  v33 = 1;
LABEL_141:
  v232.__r_.__value_.__r.__words[0] = *(_QWORD *)(v151 + 48);
  v217 = *(_QWORD *)(v150 + 48);
  if ((*(_QWORD *)((v232.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0) + 8) | v232.__r_.__value_.__s.__data_[0] & 7) != (*(_QWORD *)((v217 & 0xFFFFFFFFFFFFFFF0) + 8) | v217 & 7))
  {
    if ((*(_QWORD *)v26[9] & 0x800) != 0)
      v99 = 6570;
    else
      v99 = 5248;
    sub_22E8FCA40(v26, v187, v99, 0, (uint64_t)__p);
    v100 = sub_22E8901B8((uint64_t)__p, (uint64_t *)&v232);
    sub_22E8901B8(v100, &v217);
    sub_22E903BEC((unsigned int *)__p);
    sub_22ED33B40(v26, v185 & 0xFFFFFFFFFFFFFFFELL, 0);
    sub_22ED33B40(v26, v184 & 0xFFFFFFFFFFFFFFFELL, 1);
  }
  v19 = sub_22ED2B2F8((uint64_t)v26, v151, v177, v177);
  v18 = sub_22ED2B2F8((uint64_t)v26, v150, v177, v177);
  v101 = *(_QWORD *)(v232.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0);
  if (!v101 || (v102 = *(_DWORD *)(v101 + 16), (v102 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
      || (v101 = sub_22F10CF48(v101)) == 0)
    {
      v103 = &v232;
      goto LABEL_150;
    }
    v102 = *(_DWORD *)(v101 + 16);
  }
  if ((v102 & 0x100000) != 0)
  {
    do
    {
      v101 = *(_QWORD *)(*(_QWORD *)(v101 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v101)
      {
        v140 = *(_DWORD *)(v101 + 16);
        if ((v140 & 0xFE) == 0x28)
          continue;
      }
      v101 = sub_22F10CF48(v101);
      v140 = *(_DWORD *)(v101 + 16);
    }
    while ((v140 & 0x100000) != 0);
  }
  v103 = (std::string *)(v101 + 32);
LABEL_150:
  v98 = 1;
  v157 = v103->__r_.__value_.__r.__words[0];
  v169 = sub_22F32D524((uint64_t)v26, v151, v103->__r_.__value_.__r.__words[0], 1, v177, 0);
  if ((v169 & 1) != 0)
  {
    v33 = 1;
    goto LABEL_136;
  }
  v108 = *(_QWORD *)(v217 & 0xFFFFFFFFFFFFFFF0);
  if (!v108 || (v109 = *(_DWORD *)(v108 + 16), (v109 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
      || (v108 = sub_22F10CF48(v108)) == 0)
    {
      v110 = &v217;
      goto LABEL_159;
    }
    v109 = *(_DWORD *)(v108 + 16);
  }
  if ((v109 & 0x100000) != 0)
  {
    do
    {
      v108 = *(_QWORD *)(*(_QWORD *)(v108 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v108)
      {
        v141 = *(_DWORD *)(v108 + 16);
        if ((v141 & 0xFE) == 0x28)
          continue;
      }
      v108 = sub_22F10CF48(v108);
      v141 = *(_DWORD *)(v108 + 16);
    }
    while ((v141 & 0x100000) != 0);
  }
  v110 = (uint64_t *)(v108 + 32);
LABEL_159:
  v98 = 1;
  v111 = sub_22F32D524((uint64_t)v26, v150, *v110, 1, v177, 0);
  if ((v111 & 1) != 0)
  {
LABEL_160:
    v33 = 1;
    goto LABEL_136;
  }
  a9 = sub_22EB1E9A8(v26, v162, v177, 41, (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFFELL), v111 & 0xFFFFFFFFFFFFFFFELL);
  if ((a9 & 1) == 0)
    a9 = sub_22EB52F30((uint64_t)v26, v177, (unsigned __int8 *)(a9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((a9 & 1) == 0)
  {
    if ((a9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(a9 & 0xFFFFFFFFFFFFFFFELL);
      v112 = v113;
    }
    else
    {
      v112 = 0;
    }
    a9 = sub_22EBCF22C((uint64_t)v26, a9 & 0xFFFFFFFFFFFFFFFELL, v112, 0, 0);
  }
  if ((a9 & 1) != 0)
  {
    sub_22E8FCA40(v26, v187, 0x1604u, 0, (uint64_t)__p);
    v116 = sub_22F2F2168((uint64_t)__p, &v187);
    LODWORD(v189[0]) = 0;
    v117 = sub_22E8900C4(v116, (int *)v189);
    v190[0] = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v117, v190);
    sub_22E903BEC((unsigned int *)__p);
    sub_22ED33B40(v26, v185 & 0xFFFFFFFFFFFFFFFELL, 0);
    v33 = 1;
    v98 = 1;
    if ((*(_QWORD *)((v232.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF0) + 8) | v232.__r_.__value_.__s.__data_[0] & 7) == (*(_QWORD *)((v217 & 0xFFFFFFFFFFFFFFF0) + 8) | v217 & 7))
      goto LABEL_136;
    v118 = &v184;
    goto LABEL_182;
  }
  v98 = 1;
  v114 = sub_22F32D524((uint64_t)v26, v151, v157, 1, v177, 0);
  if ((v114 & 1) != 0)
    goto LABEL_160;
  a10 = sub_22EB2941C(v26, v162, v177, 2, v114 & 0xFFFFFFFFFFFFFFFELL);
  if ((a10 & 1) == 0 && v176)
    a10 = sub_22E9F9E30((unsigned int *)v26, v162, v176, a10 & 0xFFFFFFFFFFFFFFFELL);
  if ((a10 & 1) == 0)
  {
    if ((a10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(a10 & 0xFFFFFFFFFFFFFFFELL);
      v115 = v133;
    }
    else
    {
      v115 = 0;
    }
    a10 = sub_22EBCF22C((uint64_t)v26, a10 & 0xFFFFFFFFFFFFFFFELL, v115, 0, 0);
  }
  if ((a10 & 1) != 0)
  {
    sub_22E8FCA40(v26, v187, 0x1604u, 0, (uint64_t)__p);
    v136 = sub_22F2F2168((uint64_t)__p, &v187);
    LODWORD(v189[0]) = 2;
    v137 = sub_22E8900C4(v136, (int *)v189);
    v190[0] = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v137, v190);
    sub_22E903BEC((unsigned int *)__p);
    v98 = 0;
    v33 = 1;
LABEL_216:
    v118 = &v185;
LABEL_182:
    v119 = 1;
LABEL_183:
    sub_22ED33B40(v26, *v118 & 0xFFFFFFFFFFFFFFFELL, v98);
    v98 = v119;
    goto LABEL_136;
  }
  v98 = 1;
  v134 = sub_22F32D524((uint64_t)v26, v151, v157, 1, v177, 0);
  if ((v134 & 1) != 0)
    goto LABEL_160;
  if ((sub_22EB2941C(v26, v162, v177, 5, v134 & 0xFFFFFFFFFFFFFFFELL) & 1) != 0)
  {
    sub_22E8FCA40(v26, v187, 0x1604u, 0, (uint64_t)__p);
    v138 = sub_22F2F2168((uint64_t)__p, &v187);
    v33 = 1;
    LODWORD(v189[0]) = 1;
    v139 = sub_22E8900C4(v138, (int *)v189);
    v190[0] = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v139, v190);
    sub_22E903BEC((unsigned int *)__p);
    v98 = 0;
    goto LABEL_216;
  }
  v98 = 0;
  if (a14 != 2 && (*(_DWORD *)(v29 + 28) & 0x80) == 0)
  {
    sub_22EA28AD8();
    if ((*(_BYTE *)(v29 + 28) & 0x80) != 0)
    {
      v98 = 0;
      v119 = 0;
      v118 = &v185;
      goto LABEL_183;
    }
    v135 = sub_22EFBC5B4(v29);
    v98 = 0;
    if (v135)
    {
      if ((*(_BYTE *)(v135 + 2) & 2) != 0)
      {
        v118 = &v185;
        v119 = 0;
        goto LABEL_183;
      }
    }
  }
LABEL_136:
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  if (!v98)
    goto LABEL_9;
  return v33;
}

void sub_22ED33B40(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13[25];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  int v17;

  v17 = a3;
  if ((*(_BYTE *)a2 + 113) >= 0xFBu)
  {
    v5 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
    if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v7 = *(_DWORD *)(v5 + 24);
      v15[0] = 0;
      v15[1] = 0;
      v16 = 0;
      v14 = 0;
      v8 = *(_QWORD *)(v5 + 144) & 0xFFFFFFFFFFFFFFF8;
      v9 = (*(_QWORD *)(v5 + 144) & 6) != 4 || v8 == 0;
      if (!v9 && (*(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        sub_22ED730EC((uint64_t)a1, *(_QWORD *)((*(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF8) + 56), **(_QWORD **)(v8 + 24), *(_DWORD *)(*(_QWORD *)(v8 + 24) + 8), v15);
        v14 = 1;
      }
      sub_22E8FCA40(a1, v7, 0x1603u, 0, (uint64_t)v13);
      sub_22E8900C4((uint64_t)v13, &v17);
      v10 = sub_22E894E38((uint64_t)v13, &v14);
      v11 = sub_22E90749C(v10, v15);
      v12 = *(_QWORD *)(a2 + 8);
      sub_22E8901B8(v11, &v12);
      sub_22E903BEC(v13);
      if (SHIBYTE(v16) < 0)
        operator delete(v15[0]);
    }
  }
}

uint64_t sub_22ED33C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 **v30;
  BOOL v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  void *__p;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75[24];
  uint64_t v76;
  uint64_t v77;

  result = 1;
  if (a2 && a3)
  {
    if (*(_BYTE *)a2 == 92)
    {
      *(_QWORD *)(a2 + 24) = a3;
      return a2;
    }
    *(_QWORD *)(a2 + 72) = a3;
    sub_22E99040C((unsigned int *)a1, *(_DWORD *)(a2 + 88), a3, 0x1986u);
    if (*(_DWORD *)(a1 + 10680) > *(_DWORD *)(a1 + 11956))
      return a2;
    v6 = *(_QWORD *)(a1 + 104);
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_QWORD *)(v6 + 32);
    if (sub_22F1CF68C(v8, 0x19ABu, v7, v6) == 1
      && sub_22F1CF68C(v8, 0x19ADu, v7, v6) == 1
      && sub_22F1CF68C(v8, 0x19ACu, v7, v6) == 1)
    {
      return a2;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8);
    if (!v9)
      return a2;
    v10 = *(_QWORD *)(v9 + 48);
    if ((sub_22F1110EC(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
      return a2;
    v11 = sub_22EFBC5B4(v9);
    if (!v11)
      return a2;
    v12 = v11;
    sub_22EFF605C(v11);
    if (v13 < 0)
      return a2;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) != 0x28)
    {
      if ((v10 & 1) != 0 || (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
      {
        v14 = *(_QWORD *)(v9 + 48);
        v76 = v14;
        v77 = v9;
        if ((*(_BYTE *)v12 & 0xFE) == 0x76)
        {
          if ((sub_22EFD3AF0(*(_QWORD *)(v12 + 16), (int *)v75) & 1) == 0)
            return a2;
        }
        else if ((*(_BYTE *)v12 + 102) < 0xF5u || (*(_DWORD *)v12 & 0x1FC0000) != 0x100000)
        {
          return a2;
        }
        v15 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)sub_22EF5CDF0(v15, *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0)) > 0x200
          || (sub_22F111968((unint64_t *)&v76, v15) & 1) == 0
          && ((v16 = sub_22F10C2A4(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0))) == 0
           || (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 > 2
           || !sub_22EAB5D40(v16)))
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x19ACu, 0, (uint64_t)v75);
          v17 = sub_22E890024((uint64_t)v75, &v77);
          sub_22E8901B8(v17, &v76);
          sub_22E903BEC(v75);
          v18 = *(_QWORD *)(v77 + 56);
          if ((v18 & 4) != 0 && (v47 = v18 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v47 + 16)))
            v19 = **(int ***)(v47 + 24);
          else
            v19 = (int *)(v77 + 64);
          sub_22E8FCA40((_QWORD *)a1, *v19, 0x1809u, 0, (uint64_t)v75);
          v74 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), v76, 1);
          v20 = sub_22E8901B8((uint64_t)v75, (uint64_t *)&v74);
          v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
          v21 = sub_22E8906A0(v20, (uint64_t *)&v73);
          v22 = *(unsigned int *)(v77 + 24);
          v67 = 0;
          v68 = 0;
          v70 = 0;
          v71 = 0x100000000000000;
          v65 = v22 | (v22 << 32);
          v66 = 0;
          __p = (void *)38;
          v72 = 0;
          goto LABEL_29;
        }
      }
      return a2;
    }
    v23 = *(_QWORD *)(sub_22F3F2E44(a2) + 8);
    v76 = v9;
    v77 = v23;
    v24 = (unsigned __int8 *)sub_22EFBC5B4(v9);
    if (!v24)
      return a2;
    v25 = *(_QWORD *)(v9 + 48);
    v74 = v25;
    v26 = *v24;
    if (v26 == 173)
    {
      if ((*(_DWORD *)v24 & 0x40000) != 0)
      {
        v26 = *(_DWORD *)v24;
      }
      else
      {
        v24 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
        v26 = *v24;
      }
    }
    if (v26 != 186)
      return a2;
    while (1)
    {
      v27 = *((_QWORD *)v24 + 2);
      v28 = (unsigned __int8 *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 4) != 0)
        break;
      while (1)
      {
        v24 = sub_22EFFEB40(v28);
        v29 = *v24;
        if (v29 == 141 || v29 == 233)
        {
          if (v29 == 233)
          {
            v33 = v24;
            v34 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), *((_QWORD *)v24 + 1), 1);
            goto LABEL_64;
          }
          v33 = v24;
          v35 = sub_22EFFA604(*(unsigned __int8 **)&v24[v24[3]]);
          if ((*(_DWORD *)(v35 + 28) & 0x7Eu) - 52 >= 6)
            v36 = 0;
          else
            v36 = v35;
          v37 = *(_QWORD *)(*(_QWORD *)(v36 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v37)
            v38 = *(unsigned __int8 *)(v37 + 16) - 27 > 0xFFFFFFFD;
          else
            v38 = 0;
          if (!v38)
            v37 = sub_22F10CF48(v37);
          v34 = *(_QWORD *)(v37 + 24);
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFE) == 0x28)
          {
LABEL_64:
            v73 = v34;
            if (v34 < 0x10)
              goto LABEL_65;
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x19ABu, 0, (uint64_t)v75);
            v48 = sub_22E890024((uint64_t)v75, &v76);
            v49 = sub_22E8901B8(v48, (uint64_t *)&v74);
            sub_22E8901B8(v49, (uint64_t *)&v73);
            sub_22E903BEC(v75);
            v50 = *(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0);
            if (v50 && (v51 = *(_DWORD *)(v50 + 16), (v51 & 0xFE) == 0x28))
            {
LABEL_92:
              if ((v51 & 0x100000) != 0)
              {
                do
                {
                  v50 = *(_QWORD *)(*(_QWORD *)(v50 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v50)
                  {
                    v61 = *(_DWORD *)(v50 + 16);
                    if ((v61 & 0xFE) == 0x28)
                      continue;
                  }
                  v50 = sub_22F10CF48(v50);
                  v61 = *(_DWORD *)(v50 + 16);
                }
                while ((v61 & 0x100000) != 0);
              }
              v52 = (unint64_t *)(v50 + 32);
            }
            else
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v50 = sub_22F10CF48(v50);
                if (v50)
                {
                  v51 = *(_DWORD *)(v50 + 16);
                  goto LABEL_92;
                }
              }
              v52 = &v74;
            }
            v64 = *v52 & 0xFFFFFFFFFFFFFFFELL;
            v63 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), *((_QWORD *)v33 + 1) | 1, 1);
            v53 = *(_QWORD *)(v76 + 56);
            if ((v53 & 4) != 0 && (v59 = v53 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v59 + 16)))
              v54 = **(int ***)(v59 + 24);
            else
              v54 = (int *)(v76 + 64);
            sub_22E8FCA40((_QWORD *)a1, *v54, 0x180Bu, 0, (uint64_t)v75);
            v55 = sub_22E8901B8((uint64_t)v75, (uint64_t *)&v64);
            v45 = sub_22E8901B8(v55, (uint64_t *)&v63);
            v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
            v46 = &v62;
LABEL_81:
            v56 = sub_22E8906A0(v45, v46);
            v57 = sub_22F3AC040(v76);
            v67 = 0;
            v68 = 0;
            v70 = 0;
            v71 = 0;
            __p = 0;
            v72 = 0;
            v65 = v57 | ((unint64_t)v57 << 32);
            v66 = 1;
            v21 = v56;
LABEL_29:
            sub_22E890748(v21, &v65);
            if (SHIBYTE(v71) < 0)
              operator delete(__p);
            sub_22E903BEC(v75);
            return a2;
          }
LABEL_65:
          v39 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 41)
            return a2;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x19ADu, 0, (uint64_t)v75);
          v40 = sub_22E890024((uint64_t)v75, &v76);
          sub_22E8901B8(v40, &v77);
          sub_22E903BEC(v75);
          v41 = *v39;
          if (*v39 && (v42 = *(_DWORD *)(v41 + 16), (v42 & 0xFE) == 0x28))
          {
LABEL_88:
            if ((v42 & 0x100000) != 0)
            {
              do
              {
                v41 = *(_QWORD *)(*(_QWORD *)(v41 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v41)
                {
                  v60 = *(_DWORD *)(v41 + 16);
                  if ((v60 & 0xFE) == 0x28)
                    continue;
                }
                v41 = sub_22F10CF48(v41);
                v60 = *(_DWORD *)(v41 + 16);
              }
              while ((v60 & 0x100000) != 0);
            }
            v25 = *(_QWORD *)(v41 + 32);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v41 = sub_22F10CF48(v41);
            if (v41)
            {
              v42 = *(_DWORD *)(v41 + 16);
              goto LABEL_88;
            }
          }
          v64 = v25 & 0xFFFFFFFFFFFFFFFELL;
          v43 = *(_QWORD *)(v76 + 56);
          if ((v43 & 4) != 0 && (v58 = v43 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v58 + 16)))
            v44 = **(int ***)(v58 + 24);
          else
            v44 = (int *)(v76 + 64);
          sub_22E8FCA40((_QWORD *)a1, *v44, 0x1808u, 0, (uint64_t)v75);
          v45 = sub_22E8901B8((uint64_t)v75, (uint64_t *)&v64);
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
          v46 = (uint64_t *)&v63;
          goto LABEL_81;
        }
        if ((v29 & 0xFE) != 0x76)
          break;
        v31 = v29 == 119;
        if (v29 == 119)
          v32 = v24;
        else
          v32 = 0;
        v30 = (unsigned __int8 **)(v32 + 48);
        if (!v31)
          v30 = (unsigned __int8 **)(v24 + 40);
LABEL_52:
        v28 = *v30;
      }
      if (v29 == 140)
      {
        v30 = (unsigned __int8 **)(*(_QWORD *)&v24[v24[3]] + 16);
        goto LABEL_52;
      }
    }
    v30 = (unsigned __int8 **)(v28 + 40);
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_22ED343AC(uint64_t a1, int a2, int a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v20;

  v4 = a4;
  if ((*(_BYTE *)(a4 + 1) & 0x80) != 0)
    goto LABEL_5;
  v8 = *(_QWORD *)(a4 + 8);
  v9 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392) | 1, 0);
  v20 = v4;
  v10 = sub_22EB392FC(a1, v9, &v20, 1, 0, 1);
  if ((v20 & 1) != 0)
    return 1;
  v4 = v20 & 0xFFFFFFFFFFFFFFFELL;
  v11 = 1;
  if ((sub_22EB43580(a1, v10, a3, v9, v8, (unsigned __int8 *)(v20 & 0xFFFFFFFFFFFFFFFELL), 1u, 0) & 1) != 0)
    return v11;
  if (v4)
  {
LABEL_5:
    sub_22EFF605C(v4);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_22EBCF22C(a1, v4, v13, 0, 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v16 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v16 - 8);
    *(_DWORD *)(v17 + 8) |= 0x20u;
  }
  v11 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_BYTE *)v11 = 17;
  if (byte_255E04EB3)
  {
    v18 = sub_22F0D3748(17);
    ++*((_DWORD *)v18 + 2);
  }
  *(_QWORD *)(v11 + 16) = v15;
  *(_DWORD *)(v11 + 4) = a2;
  *(_DWORD *)(v11 + 8) = a3;
  return v11;
}

unsigned int *sub_22ED3451C(unsigned int *result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4[24];

  v3 = result[64];
  if ((_DWORD)v3)
  {
    if (*(unsigned __int16 *)(a3 + 12) < *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)result + 31)
                                                                                        + 8 * v3
                                                                                        - 8)
                                                                            + 12))
    {
      sub_22E8FCA40(result, a2, 0x1A29u, 0, (uint64_t)v4);
      return sub_22E903BEC(v4);
    }
  }
  return result;
}

uint64_t sub_22ED34574(unsigned int *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v8;
  unsigned int v9[24];

  v5 = *(_QWORD *)(a3 + 40);
  if (!v5)
  {
    sub_22E8FCA40(a1, a2, 0xB91u, 0, (uint64_t)v9);
LABEL_10:
    sub_22E903BEC(v9);
    return 1;
  }
  if (*(_QWORD *)v5 && (*(_BYTE *)(*(_QWORD *)v5 + 10) & 1) != 0)
  {
    sub_22E8FCA40(a1, a2, 0x10A9u, 0, (uint64_t)v9);
    sub_22F2F30F4((uint64_t)v9, (uint64_t)"break");
    goto LABEL_10;
  }
  sub_22ED3451C(a1, a2, v5);
  v6 = sub_22E3CD3D4(*((_QWORD *)a1 + 11) + 2032, 8, 3);
  *(_BYTE *)v6 = 3;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(3);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v6 + 4) = a2;
  return v6;
}

unint64_t sub_22ED3466C(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v3 = (unsigned __int8 *)*a2;
  if (!*a2)
    return 0;
  do
  {
    v7 = v3;
    v8 = *v3;
    if (v8 > 0xD5)
    {
      if (v8 == 233)
      {
        if ((*(_DWORD *)v3 & 0x7C0000) != 0x300000)
          return 0;
        v8 = *(_DWORD *)v3;
        v10 = v3 + 16;
      }
      else
      {
        if (v8 != 214)
          break;
        v10 = v3 + 24;
      }
    }
    else if (v8 == 155)
    {
      if ((**((_DWORD **)v3 + 2) & 0x18000) != 0)
        return 0;
      v10 = v3 + 24;
      if (!v7[48])
        v10 = v7 + 32;
      v8 = 155;
    }
    else
    {
      if (v8 != 176)
        break;
      v9 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v9 == -1)
        return 0;
      v10 = &v3[8 * v9 + 40];
      v8 = 176;
    }
    v3 = *(unsigned __int8 **)v10;
  }
  while (v3 != v7);
  if (v8 != 161 || (v7[2] & 0x40) != 0)
    return 0;
  v11 = *((_QWORD *)v7 + 2);
  if (!v11)
    return 0;
  v12 = 0;
  if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v12 = sub_22ED348AC(a1, v11);
    if (v12)
    {
      if ((*(_DWORD *)*a2 & 0x300) != 0x200 && a3 && (a3 == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x20) != 0))
      {
        v13 = *(_QWORD *)(a1 + 88);
        v14 = *(_QWORD *)(v11 + 48);
        v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
        if (!v15 || (v16 = *(_DWORD *)(v15 + 16), (v16 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v20 = v13, v15 = sub_22F10CF48(v15), v13 = v20, !v15))
          {
LABEL_29:
            v17 = *a2;
            v18 = (unsigned int *)sub_22E3CD3D4(v13 + 2032, 24, 3);
            *a2 = (uint64_t)sub_22F003694(v18, v14, 5, v17, 0, 0, 2);
            return v12;
          }
          v16 = *(_DWORD *)(v15 + 16);
        }
        if ((v16 & 0x100000) != 0)
        {
          do
          {
            v21 = v13;
            v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v15 || (v22 = *(_DWORD *)(v15 + 16), (v22 & 0xFE) != 0x28))
            {
              v15 = sub_22F10CF48(v15);
              v22 = *(_DWORD *)(v15 + 16);
            }
            v13 = v21;
          }
          while ((v22 & 0x100000) != 0);
        }
        v14 = *(_QWORD *)(v15 + 32);
        goto LABEL_29;
      }
    }
  }
  return v12;
}

unint64_t sub_22ED348AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  int v12;

  v2 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x3C
    || !sub_22E3CB5E0(a2)
    || sub_22E49C868(v2))
  {
    return 0;
  }
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v6 & 0xFE) != 0x28 && (v6 & 0xFF800FF) != 0x528000B && v6 - 25 >= 2)
  {
    if ((v4 & 4) == 0 && (*(_BYTE *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
      goto LABEL_24;
    return 0;
  }
  if (v6 != 41)
    return 0;
  v8 = *(_DWORD *)(v5 + 16);
  if ((v8 & 0xFE) != 0x28)
  {
    v9 = *(_QWORD *)(v2 + 48);
    if ((v6 & 0xFE) != 0x28)
      goto LABEL_13;
    v5 = sub_22F10CF48(v5);
    v9 = v4;
    if (!v5)
      goto LABEL_13;
    v8 = *(_DWORD *)(v5 + 16);
  }
  if ((v8 & 0x100000) != 0)
  {
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v5)
      {
        v12 = *(_DWORD *)(v5 + 16);
        if ((v12 & 0xFE) == 0x28)
          continue;
      }
      v5 = sub_22F10CF48(v5);
      v12 = *(_DWORD *)(v5 + 16);
    }
    while ((v12 & 0x100000) != 0);
  }
  v9 = *(_QWORD *)(v5 + 32);
LABEL_13:
  if ((v9 & 4) != 0
    || (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x528000B
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 < 2)
  {
    return 0;
  }
LABEL_24:
  if ((sub_22EFBD2AC(v2) & 1) == 0)
  {
    sub_22EF5B404(*(_QWORD *)(a1 + 88), v2, 0);
    sub_22EF5D130(*(_QWORD *)(a1 + 88), v4);
  }
  return v2;
}

uint64_t sub_22ED34A90(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  BOOL v11;

  v3 = *a2;
  if (!*a2)
    return 0;
  v4 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_DWORD *)(v4 + 16);
  if (v5 == 14)
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF0;
    v7 = *(_QWORD *)(v4 + 8);
    if (v7 == v6)
      goto LABEL_18;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
  }
  v9 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if ((*(_DWORD *)(v9 + 16) & 0xFF80000) == 0x8180000 || (v5 & 0x400) == 0)
      goto LABEL_18;
  }
  else if ((v5 & 0x400) == 0)
  {
    if (v10 != 45)
    {
LABEL_18:
      result = 0;
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      *((_BYTE *)a2 + 8) = 1;
    }
  }
  if (*((_BYTE *)a2 + 8) == 2)
    return v3;
  else
    return 0;
}

uint64_t sub_22ED34B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  _QWORD v22[2];
  _DWORD *v23;
  _DWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _BYTE v28[8];
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v2;
  v6 = v5;
  v7 = v0;
  v32 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(v0 + 72);
  if ((v8 & 0x100) == 0 || ((v3 ^ 1) & (v8 >> 13) & 1) != 0 || !*(_BYTE *)(v1 + 8))
    return sub_22EC45014(v7, v6, 0, v4, 0, 0);
  v9 = *(_QWORD *)(v2 + 8);
  LOBYTE(v24[0]) = -103;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(153);
    ++*((_DWORD *)v10 + 2);
  }
  v25 = v9;
  v26 = v4;
  v24[0] = v24[0] & 0xF80000FF | 0x140200;
  v24[1] = 0;
  v23 = v24;
  sub_22F0D5A50(v4);
  v22[0] = ((unint64_t)v11 << 32) | 2;
  v22[1] = v11 | ((unint64_t)v11 << 32);
  sub_22EC395BC(v28, v7, v6, v22, &v23, 1, 0, 1);
  if (v31 == 3 || !v31)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 72) + 1) & 2) == 0 && v30)
    {
      v12 = v29;
      v13 = 40 * v30;
      while (*(_DWORD *)v12 != 8 && *(_DWORD *)v12 != 19)
      {
        v12 += 40;
        v13 -= 40;
        if (!v13)
          goto LABEL_28;
      }
      v15 = *(_QWORD *)(v12 + 24);
      if ((*(_DWORD *)(v15 + 28) & 0x7F) == 0x37)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 41)
          goto LABEL_19;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v18)
          v19 = *(_BYTE *)(v18 + 16) == 26;
        else
          v19 = 0;
        if (!v19)
          v18 = sub_22F10CF48(v18);
        if ((*(_BYTE *)(v18 + 20) & 3) == 0)
          goto LABEL_19;
      }
    }
LABEL_28:
    v20 = *(_QWORD *)(v4 + 8);
    v21 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 24, 3);
    v27 = sub_22F003694(v21, v20, 5, v4, 0, 0, 2);
    v16 = sub_22EC3DF80((int)v28, v7);
    sub_22EC3CE2C((uint64_t)v28);
    return v16;
  }
LABEL_19:
  sub_22EC3CE2C((uint64_t)v28);
  return sub_22EC45014(v7, v6, 0, v4, 0, 0);
}

uint64_t sub_22ED34DE4(_QWORD *a1, unint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52[24];
  uint64_t v53;

  if ((sub_22F344434(a2) & 1) != 0)
    return 0;
  v12 = sub_22F3443DC(*(_QWORD *)(a2 + 56));
  v14 = v13;
  v53 = 0;
  v15 = (unsigned __int8 *)*a4;
  if (*a4 && *v15 == 180)
  {
    sub_22EFF605C((uint64_t)v15);
    v17 = v16;
    if (sub_22E904A34((uint64_t)a1, 0))
      v18 = 3718;
    else
      v18 = 2878;
    sub_22E8FCA40(a1, v17, v18, 0, (uint64_t)v52);
    sub_22F0D4E74(*a4);
    v51 = v19;
    v20 = v52;
    v21 = (uint64_t *)&v51;
    goto LABEL_10;
  }
  v22 = a2 + 72;
  if ((sub_22EFC7ADC(a2 + 72) & 1) != 0)
    return 0;
  if (*a4)
  {
    v23 = sub_22EDC7260(a1, v12, v14, a4, &v53, 0, 0);
    if (v23)
    {
      if (v23 != 1 || (*(_BYTE *)(a2 + 28) & 0x80) != 0)
        return 1;
      sub_22EFF605C(*a4);
      sub_22E8FCA40(a1, v24, 0xB3Bu, 0, (uint64_t)v52);
      v51 = v12;
      v25 = (unsigned int *)sub_22E8901B8((uint64_t)v52, (uint64_t *)&v51);
      v50 = *(_QWORD *)(*a4 + 8);
      v26 = (uint64_t *)&v50;
      goto LABEL_44;
    }
    *(_QWORD *)v52 = a1;
    sub_22ED352EC(v52, *(_QWORD *)(*a4 + 8));
  }
  else
  {
    v27 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = *(_BYTE *)(v27 + 16) == 14;
    else
      v28 = 0;
    if (!v28
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 14 || !sub_22F10CF48(v27)))
    {
      sub_22E8FCA40(a1, a3, 0xB3Fu, 0, (uint64_t)v52);
      v51 = v12;
      v25 = v52;
      v26 = (uint64_t *)&v51;
      goto LABEL_44;
    }
    v29 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    v30 = a1[11];
    v31 = *(_QWORD *)(v30 + 16392);
    v32 = sub_22EF579A8(v30, v31, a3);
    sub_22EBD096C(v29, v31, (uint64_t)v32, a3);
    v51 = v29;
    v33 = sub_22EDC7260(a1, v12, v14, (uint64_t *)&v51, &v53, 0, 0);
    if (v33 == 1)
    {
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
        return 1;
      sub_22E8FCA40(a1, a3, 0xB3Bu, 0, (uint64_t)v52);
      v50 = v12;
      v25 = (unsigned int *)sub_22E8901B8((uint64_t)v52, (uint64_t *)&v50);
      v49 = *(_QWORD *)(v51 + 8);
      v26 = &v49;
      goto LABEL_44;
    }
    v22 = a2 + 72;
    if (v33)
      return 1;
  }
  if ((*(_BYTE *)(a1[9] + 68) & 0x20) != 0 && sub_22E462B18(a2))
  {
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v34 || (*(_DWORD *)(v34 + 16) & 0xFF800FF) != 86507531)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xE7Cu, 0, (uint64_t)v52);
      v51 = *(_QWORD *)(a2 + 48);
      v36 = sub_22E8901B8((uint64_t)v52, (uint64_t *)&v51);
      v50 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
      v21 = (uint64_t *)&v50;
      v20 = (unsigned int *)v36;
LABEL_10:
      sub_22E8906A0((uint64_t)v20, v21);
LABEL_45:
      sub_22E903BEC(v52);
      return 1;
    }
  }
  if ((*(_BYTE *)(a1[9] + 104) & 0x20) != 0 && sub_22F10C618(*(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22EFF605C(*a4);
    sub_22E8FCA40(a1, v37, 0xF19u, 0, (uint64_t)v52);
    v25 = v52;
    v26 = &v53;
LABEL_44:
    sub_22E8901B8((uint64_t)v25, v26);
    goto LABEL_45;
  }
  v38 = *(_QWORD *)(a5 + 24);
  v51 = v38;
  v39 = *(_DWORD *)(a2 + 28);
  if (v38 < 0x10 || (v39 & 0x80) != 0)
  {
    if ((v39 & 0x80) == 0)
      sub_22F369B34(a1[11], a2, v53);
    return 0;
  }
  v40 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v52[0]) = 0;
  v41 = sub_22F110500((uint64_t)v52, v40);
  if (v41)
    v42 = *(_BYTE *)(v41 + 16) == 14 ? v41 : 0;
  else
    v42 = 0;
  if (*(_QWORD *)(v42 + 24) < 0x10uLL)
    return 0;
  v43 = sub_22EF63D48(a1[11], v38);
  v44 = sub_22EF63D48(a1[11], *(_QWORD *)(v42 + 24));
  v10 = 0;
  if ((sub_22EFC7ADC(v22) & 1) == 0 && v43 != v44)
  {
    v45 = sub_22E904A34((uint64_t)a1, 0);
    if (v45 && *(_BYTE *)(v45 + 1408))
    {
      sub_22E8FCA40(a1, a3, 0x1384u, 0, (uint64_t)v52);
      v50 = *(_QWORD *)(v42 + 24);
      v46 = sub_22E8901B8((uint64_t)v52, (uint64_t *)&v50);
      v47 = sub_22E8901B8(v46, (uint64_t *)&v51);
      v10 = 1;
      LOBYTE(v49) = 1;
      sub_22E894E38(v47, (unsigned __int8 *)&v49);
      sub_22E903BEC(v52);
      return v10;
    }
    sub_22E8FCA40(a1, a3, 0xB3Cu, 0, (uint64_t)v52);
    LODWORD(v49) = (*(_DWORD *)(a5 + 16) & 0x180000) == 0x80000;
    v48 = sub_22E8900C4((uint64_t)v52, (int *)&v49);
    v50 = *(_QWORD *)(v42 + 24);
    v25 = (unsigned int *)sub_22E8901B8(v48, (uint64_t *)&v50);
    v26 = (uint64_t *)&v51;
    goto LABEL_44;
  }
  return v10;
}

uint64_t sub_22ED352EC(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22ED3BF44((uint64_t)a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22ED3BF44((uint64_t)a1, v13, 0);
      case 14:
        result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22ED47864(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22ED4C4AC((uint64_t)a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22ED4C3E8((uint64_t)a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22ED3BF44((uint64_t)a1, v13, 0);
      case 18:
        return sub_22ED4C448((uint64_t)a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22ED3BF44((uint64_t)a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22ED4C448((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22ED4C4AC((uint64_t)a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22ED3BF44((uint64_t)a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22ED4C448((uint64_t)a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22ED352EC(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22ED3BF44((uint64_t)a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22ED3BF44((uint64_t)a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22ED352EC(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22ED352EC(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v47 = *(_QWORD *)(v4 + 40);
        v46[0] = 8;
        v46[1] = v41;
        return sub_22ED4C4AC((uint64_t)a1, (uint64_t)v46);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 45:
        sub_22ED4C578(a1, *(_QWORD *)(v4 + 24));
        return 1;
      case 46:
        result = sub_22ED4C3E8((uint64_t)a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v42 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v42)
          return 1;
        v43 = v4 + 40;
        v44 = v42 - 1;
        do
        {
          result = sub_22ED4C4AC((uint64_t)a1, v43);
          v19 = v44-- != 0;
          v45 = v19;
          if (!(_DWORD)result)
            break;
          v43 += 24;
        }
        while ((v45 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22ED352EC(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22ED352EC(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22ED352EC(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22ED3BF44((uint64_t)a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22ED357A0(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v7 = 1;
  v8 = (unint64_t)sub_22EBBCB14(a1, a3, 0, 1, (uint64_t)sub_22F2E6FA4, (uint64_t)&v15);
  if ((v8 & 1) == 0)
  {
    v9 = sub_22ED358AC(a1, a2, v8 & 0xFFFFFFFFFFFFFFFELL, 1);
    v7 = v9;
    if ((v9 & 1) == 0)
    {
      v10 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
      v11 = *(_DWORD *)(v10 - 576);
      if (v11 != 2 && (v11 != 5 || !*(_BYTE *)(v10 - 4)))
      {
        if ((*(_WORD *)(v9 & 0xFFFFFFFFFFFFFFFELL) & 0x100) != 0
          && (v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 16)) != 0)
        {
          v12 = *(_QWORD *)(a4 + 416);
          if ((v12 & 4) != 0)
            goto LABEL_8;
          if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            *(_QWORD *)(a4 + 416) = v12 | v14;
            goto LABEL_8;
          }
          if (v14 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_8;
        }
        else
        {
          v12 = *(_QWORD *)(a4 + 416);
        }
        *(_QWORD *)(a4 + 416) = v12 & 3 | 4;
LABEL_8:
        sub_22ED3451C((unsigned int *)a1, a2, *(_QWORD *)(a4 + 24));
      }
    }
  }
  return v7;
}

uint64_t sub_22ED358AC(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  unsigned __int8 *v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  _BOOL4 v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  BOOL v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  int v173;
  _QWORD v174[2];
  uint64_t v175;
  uint64_t v176[2];
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182[2];

  v5 = (unsigned __int8 *)a3;
  v175 = a3;
  if (a3)
  {
    if ((sub_22EE67384(a1, a3, 0) & 1) != 0)
      return 1;
    if ((~**(_DWORD **)(a1 + 72) & 0x2010) != 0 || (v10 = sub_22EFFA604(v5)) == 0)
    {
LABEL_36:
      LODWORD(v5) = 0;
      goto LABEL_37;
    }
    v11 = v10;
    v12 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *(_DWORD *)(v10 + 24));
    LODWORD(v5) = 0;
    if (v12 && v12 != 3)
    {
      v13 = *(_QWORD *)(v11 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      if (v14)
      {
        while (1)
        {
          LODWORD(v5) = sub_22EFC84D4(v14);
          if ((v5 & 1) != 0)
            goto LABEL_37;
          v15 = *(_WORD *)(v14 + 8) & 0x7F;
          v16 = -40;
          if (v15 > 0x46)
          {
            if (v15 != 83)
            {
              if (v15 == 71)
              {
                v16 = -56;
              }
              else if (v15 != 81)
              {
                goto LABEL_24;
              }
            }
          }
          else
          {
            if (v15 > 0x18)
              goto LABEL_23;
            if (v15 == 16)
              goto LABEL_16;
            if (((1 << v15) & 0x1066) != 0)
              goto LABEL_30;
            if (v15 == 24)
            {
LABEL_16:
              v16 = -48;
            }
            else
            {
LABEL_23:
              if (v15 != 70)
              {
LABEL_24:
                v17 = v15 - 52;
                if (v15 - 33 >= 5)
                  v18 = -48;
                else
                  v18 = -64;
                if (v17 >= 6)
                  v16 = v18;
                else
                  v16 = -72;
                goto LABEL_30;
              }
              v16 = -64;
            }
          }
LABEL_30:
          v19 = *(_QWORD *)(v14 + v16 + 16);
          v14 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v14 = *(_QWORD *)v14;
          if (!v14)
            goto LABEL_37;
        }
      }
      goto LABEL_36;
    }
  }
LABEL_37:
  v20 = sub_22ED3466C(a1, &v175, v5 ^ 1);
  v174[0] = v20;
  v174[1] = v21;
  v22 = *(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904);
  if ((*(_DWORD *)(*(_QWORD *)(v22 - 8) + 8) & 7u) - 1 <= 2)
  {
    v23 = (unsigned __int8 *)v175;
    v24 = a2;
    v182[0] = v175;
    v25 = *(_QWORD *)(v22 - 8);
    v26 = *(_QWORD *)(v25 + 1416);
    if ((*(_DWORD *)(v25 + 8) & 7) == 2)
      v27 = *(_QWORD *)(v22 - 8);
    else
      v27 = 0;
    if (!v27)
      goto LABEL_65;
    v28 = *(_QWORD *)(*(_QWORD *)(v27 + 1488) + 56);
    v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
    if ((v28 & 4) != 0)
      v29 = (_QWORD *)v29[4];
    v30 = *(_QWORD *)(*v29 & 0xFFFFFFFFFFFFFFF0);
    if (v30)
      v31 = *(_BYTE *)(v30 + 16) == 26;
    else
      v31 = 0;
    if (!v31)
      v30 = sub_22F10CF48(v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v30 + 24) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v177) = 0;
    v20 = sub_22F110500((uint64_t)&v177, v32);
    if (v20 && *(_QWORD *)(v20 + 24) <= 0xFuLL)
      v33 = (*(_BYTE *)(v20 + 17) & 4) == 0;
    else
LABEL_65:
      v33 = 0;
    v43 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
    v44 = *(_DWORD *)(v43 - 576);
    if (v44 == 2 || v44 == 5 && *(_BYTE *)(v43 - 4))
    {
      if (v33 || *(_BYTE *)(v25 + 1408))
      {
        if (v23)
        {
          v45 = sub_22EBCF22C(a1, (unint64_t)v23, a2, 0, 0);
          if ((v45 & 1) != 0)
            return 1;
          v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v46 = 0;
        }
        v64 = *(_QWORD *)(a1 + 88);
        v65 = a2;
        return sub_22F0D8310(v64, v65, v46, 0);
      }
LABEL_214:
      v117 = sub_22ED34A90(v20, v174, v26);
      if ((*(_DWORD *)(v25 + 8) & 7) == 1)
      {
        v123 = *(_QWORD *)(*(_QWORD *)(v25 + 1440) & 0xFFFFFFFFFFFFFFF0);
        if (v123)
          v124 = *(unsigned __int8 *)(v123 + 16) - 27 > 0xFFFFFFFD;
        else
          v124 = 0;
        if (!v124)
          v123 = sub_22F10CF48(v123);
        if ((*(_BYTE *)(v123 + 19) & 1) != 0)
        {
          v120 = (_QWORD *)a1;
          v121 = v24;
          v122 = 4053;
          goto LABEL_239;
        }
      }
      else
      {
        if ((*(_DWORD *)(v25 + 8) & 7) == 3)
        {
          sub_22E8FCA40((_QWORD *)a1, v24, 0x1241u, 0, (uint64_t)&v177);
          v144 = *(__int16 *)(v25 + 1456);
          v145 = qword_22F496C10[v144];
          v176[0] = (uint64_t)off_24FAB91D8[v144];
          v176[1] = v145;
          sub_22F2F2210((uint64_t)&v177, (uint64_t)v176);
          goto LABEL_241;
        }
        v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 1488) + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v118)
          v119 = *(unsigned __int8 *)(v118 + 16) - 27 > 0xFFFFFFFD;
        else
          v119 = 0;
        if (!v119)
          v118 = sub_22F10CF48(v118);
        if ((*(_BYTE *)(v118 + 19) & 1) != 0)
        {
          v120 = (_QWORD *)a1;
          v121 = v24;
          v122 = 4054;
LABEL_239:
          LOBYTE(v127) = 0;
LABEL_240:
          sub_22E8FCA40(v120, v121, v122, v127, (uint64_t)&v177);
LABEL_241:
          sub_22E903BEC(&v177);
          return 1;
        }
      }
      v125 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v125 + 17) & 4) == 0)
      {
        v126 = *(_QWORD *)(*(_QWORD *)(v125 + 8) & 0xFFFFFFFFFFFFFFF0);
        v127 = v182[0];
        if (v126)
          v128 = (*(_DWORD *)(v126 + 16) & 0xFF800FF) == 86507531;
        else
          v128 = 0;
        if (v128)
        {
          if (!v182[0])
            goto LABEL_299;
          if (*(unsigned __int8 *)v182[0] == 180)
          {
LABEL_297:
            v155 = sub_22EBCF22C(a1, v127, v24, 0, 0);
            if ((v155 & 1) != 0)
              return 1;
            v154 = v155 & 0xFFFFFFFFFFFFFFFELL;
            v182[0] = v155 & 0xFFFFFFFFFFFFFFFELL;
LABEL_300:
            v8 = sub_22F0D8310(*(_QWORD *)(a1 + 88), v24, v154, v117);
            if (*(_BYTE *)(v25 + 1408) || v117)
            {
LABEL_315:
              v159 = a2;
              v160 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
              v161 = *(_DWORD *)(v160 + 136);
              if (v161 >= *(_DWORD *)(v160 + 140))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v161 = *(_DWORD *)(v160 + 136);
              }
              *(_QWORD *)(*(_QWORD *)(v160 + 128) + 8 * v161) = v8;
              ++*(_DWORD *)(v160 + 136);
              a2 = v159;
            }
LABEL_318:
            v162 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
            if (!*(_DWORD *)(v162 + 16))
              *(_DWORD *)(v162 + 16) = a2;
            return v8;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
          {
            if ((*(_BYTE *)(v182[0] + 1) & 0x80) != 0)
              goto LABEL_296;
            v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v182[0] + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v152 && (*(_DWORD *)(v152 + 16) & 0xFF800FF) == 86507531)
              goto LABEL_296;
          }
          else
          {
            v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v182[0] + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v130)
              v131 = (*(_DWORD *)(v130 + 16) & 0xFF800FF) == 86507531;
            else
              v131 = 0;
            if (v131)
            {
              sub_22E8FCA40((_QWORD *)a1, v24, 0x14DFu, 0, (uint64_t)&v177);
              v132 = sub_22F2F30F4((uint64_t)&v177, (uint64_t)"literal");
              LODWORD(v176[0]) = 2;
              sub_22E8900C4(v132, (int *)v176);
              sub_22E903BEC(&v177);
              goto LABEL_296;
            }
          }
          sub_22E8FCA40((_QWORD *)a1, v24, 0x1240u, 0, (uint64_t)&v177);
          sub_22E903BEC(&v177);
          v154 = 0;
          v182[0] = 0;
          goto LABEL_300;
        }
        if (!v182[0])
        {
          v120 = (_QWORD *)a1;
          v121 = v24;
          v122 = 2956;
          goto LABEL_240;
        }
        if ((*(_BYTE *)(v182[0] + 1) & 0x80) == 0)
        {
          v177 = 3;
          v178 = 0;
          v179 = v26;
          v180 = 0;
          LODWORD(v181) = a2;
          BYTE4(v181) = 0;
          v129 = sub_22ED34B68();
          if ((v129 & 1) != 0)
            return 1;
          v182[0] = v129 & 0xFFFFFFFFFFFFFFFELL;
          sub_22E987AF4(a1, v129 & 0xFFFFFFFFFFFFFFFELL, v26, v24, 0, 0, 0);
        }
      }
LABEL_296:
      v127 = v182[0];
      if (v182[0])
        goto LABEL_297;
LABEL_299:
      v154 = 0;
      goto LABEL_300;
    }
    if (v33)
    {
      v49 = *(_QWORD *)(v27 + 1488);
      if ((*(_BYTE *)(v49 + 28) & 0x80) != 0)
        return 1;
      v50 = *(_QWORD *)(v25 + 1416);
      if (v50 <= 0xF)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v49 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v51)
          v52 = *(unsigned __int8 *)(v51 + 16) - 27 > 0xFFFFFFFD;
        else
          v52 = 0;
        if (!v52)
          v51 = sub_22F10CF48(v51);
        v50 = *(_QWORD *)(v51 + 24);
        *(_QWORD *)(v25 + 1416) = v50;
      }
      v53 = *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v177) = 0;
      v54 = sub_22F110500((uint64_t)&v177, v53);
      if (v54)
      {
        if (*(_BYTE *)(v54 + 16) == 14)
          v55 = v54;
        else
          v55 = 0;
      }
      else
      {
        v55 = 0;
      }
      if (sub_22ED34DE4((_QWORD *)a1, v49, a2, v182, v55))
      {
        v8 = 1;
        sub_22EFC77E8(v49, 1);
        return v8;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v49 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v20)
        v116 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
      else
        v116 = 0;
      if (!v116)
        v20 = sub_22F10CF48(v20);
      v26 = *(_QWORD *)(v20 + 24);
      goto LABEL_213;
    }
    if (!*(_BYTE *)(v25 + 1408))
      goto LABEL_214;
    if (v23)
    {
      if (*v23 != 180)
      {
        v8 = 1;
        v113 = sub_22EB1B954(a1, v23);
        if ((v113 & 1) != 0)
          return v8;
        v114 = a2;
        v115 = v113 & 0xFFFFFFFFFFFFFFFELL;
        v182[0] = v113 & 0xFFFFFFFFFFFFFFFELL;
        v20 = sub_22EFC7ADC(*(_QWORD *)(a1 + 216));
        if ((v20 & 1) != 0)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832);
          *(_QWORD *)(v25 + 1416) = v63;
          v26 = v63;
          a2 = v114;
LABEL_113:
          if (v63 > 0xF)
            goto LABEL_214;
LABEL_213:
          *(_QWORD *)(v25 + 1416) = v26;
          goto LABEL_214;
        }
        v20 = *(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
          v20 = (uint64_t)sub_22F10D2BC(*(_QWORD *)(v115 + 8));
        v26 = v20 & 0xFFFFFFFFFFFFFFF0;
        a2 = v114;
LABEL_112:
        v63 = *(_QWORD *)(v25 + 1416);
        goto LABEL_113;
      }
      sub_22E8FCA40((_QWORD *)a1, a2, 0xE86u, 0, (uint64_t)&v177);
      sub_22F0D4E74(v182[0]);
      v176[0] = v62;
      sub_22E8906A0((uint64_t)&v177, v176);
      v20 = (uint64_t)sub_22E903BEC(&v177);
    }
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392);
    goto LABEL_112;
  }
  v34 = sub_22E903070(a1, 0);
  v35 = (*(_WORD *)(v34 + 8) & 0x7E) - 58;
  if (v34)
    v36 = v34 - 72;
  else
    v36 = 0;
  if (v35 >= 0xFFFFFFFA)
    v37 = v36;
  else
    v37 = 0;
  v176[0] = v37;
  v38 = v35 < 0xFFFFFFFA || v34 == 0;
  if (v38)
  {
    v39 = sub_22E90328C(a1);
    if (!v39)
      return 1;
    v40 = v39;
    v41 = *(_QWORD *)(v39 + 80);
    if ((*(_BYTE *)(v39 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v39);
      v42 = (uint64_t *)v39;
    }
    else
    {
      v42 = 0;
    }
    if ((*(_BYTE *)(v40 + 60) & 2) == 0)
      goto LABEL_120;
    v39 = sub_22EFDC9F0(v40);
    if (!v39)
      goto LABEL_120;
    v146 = *(_QWORD *)(a1 + 88);
    v147 = (uint64_t *)sub_22EFDC9F0(v40);
    v148 = sub_22F36D148(v146, v147, 0);
    v39 = sub_22F36CC4C(*(_QWORD *)(a1 + 88), v148);
    v58 = v39;
  }
  else
  {
    v47 = *(_QWORD *)(*(_QWORD *)(v37 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v47)
      v48 = *(unsigned __int8 *)(v47 + 16) - 27 > 0xFFFFFFFD;
    else
      v48 = 0;
    if (!v48)
      v47 = sub_22F10CF48(v47);
    v41 = *(_QWORD *)(v47 + 24);
    if ((*(_BYTE *)(v37 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v37);
      v42 = v56;
    }
    else
    {
      v42 = 0;
    }
    if (sub_22EFC0BA0(v37))
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1A7Eu, 0, (uint64_t)&v177);
      sub_22E890024((uint64_t)&v177, v176);
      sub_22E903BEC(&v177);
      v36 = v176[0];
    }
    if (sub_22EFBFAF0(v36) && v175 && *(_BYTE *)v175 == 117)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1A39u, 0, (uint64_t)&v177);
      sub_22F0D4E74(v175);
      v182[0] = v57;
      sub_22E8906A0((uint64_t)&v177, v182);
      sub_22E903BEC(&v177);
    }
    v39 = sub_22E47296C(v176[0]);
    v58 = 0;
    if ((_DWORD)v39)
    {
      if (v175)
      {
        v58 = 0;
        v59 = *(_QWORD *)(*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v59)
        {
          if (*(_BYTE *)(v59 + 16) == 45)
          {
            v60 = sub_22F114198(*(_QWORD *)(v59 + 24));
            v39 = sub_22EFC3AEC(v60);
            if ((_DWORD)v39)
            {
              sub_22F0D5A50(v175);
              sub_22E8FCA40((_QWORD *)a1, v61, 0x18CCu, 0, (uint64_t)&v177);
              LODWORD(v182[0]) = 1;
              sub_22E8900C4((uint64_t)&v177, (int *)v182);
              v39 = (uint64_t)sub_22E903BEC(&v177);
            }
LABEL_120:
            v58 = 0;
          }
        }
      }
    }
  }
  v66 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v67 = *(_DWORD *)(v66 - 576);
  if (v67 == 2 || v67 == 5 && *(_BYTE *)(v66 - 4))
  {
    v68 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v177) = 0;
    v39 = sub_22F110500((uint64_t)&v177, v68);
    if (v39)
    {
      if (*(_BYTE *)(v39 + 16) == 14)
      {
        if (v175)
        {
          v69 = sub_22EBCF22C(a1, v175, a2, 0, 0);
          if ((v69 & 1) != 0)
            return 1;
          v46 = v69 & 0xFFFFFFFFFFFFFFFELL;
          v175 = v69 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v46 = 0;
        }
        v64 = *(_QWORD *)(a1 + 88);
        v65 = a2;
        return sub_22F0D8310(v64, v65, v46, 0);
      }
    }
  }
  v172 = v42;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 4) == 0)
    goto LABEL_139;
  v70 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v177) = 0;
  v39 = sub_22F110500((uint64_t)&v177, v70);
  if (!v39)
    goto LABEL_139;
  v71 = v39;
  if (*(_BYTE *)(v39 + 16) != 14)
    goto LABEL_139;
  v72 = *(_QWORD *)(a1 + 216);
  if (v72)
    v73 = v72 - 72;
  else
    v73 = 0;
  if ((*(_BYTE *)(v73 + 28) & 0x80) == 0 && !sub_22ED34DE4((_QWORD *)a1, v73, a2, &v175, v39))
  {
    v75 = a4;
    v39 = *(_QWORD *)(*(_QWORD *)(v73 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v39 && *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD)
    {
      v76 = v38;
    }
    else
    {
      v76 = v38;
      v39 = sub_22F10CF48(v39);
    }
    v41 = *(_QWORD *)(v39 + 24);
LABEL_140:
    v77 = sub_22ED34A90(v39, v174, v41);
    v78 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
    v79 = *(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0);
    v80 = v175;
    if (v79)
      v81 = (*(_DWORD *)(v79 + 16) & 0xFF800FF) == 86507531;
    else
      v81 = 0;
    if (!v81)
    {
      v82 = v77;
      v83 = *(_DWORD *)(v78 + 16);
      if (!v175 && (v83 & 0x400) == 0)
      {
        v84 = sub_22E903070(a1, 0);
        v85 = (*(_WORD *)(v84 + 8) & 0x7E) - 58;
        v86 = v84 == 0;
        if (v84)
          v87 = v84 - 72;
        else
          v87 = 0;
        if (v85 >= 0xFFFFFFFA)
          v88 = v87;
        else
          v88 = 0;
        v176[0] = v88;
        v89 = v85 < 0xFFFFFFFA || v86;
        if ((v89 & 1) == 0 && (*(_BYTE *)(v88 + 28) & 0x80) != 0
          || (*(_BYTE *)(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0) + 17) & 0x10) != 0)
        {
          goto LABEL_281;
        }
        v90 = **(_QWORD **)(a1 + 72);
        if (v88 && (v90 & 0x200) != 0)
        {
          if ((*(_BYTE *)(v88 + 83) & 0xC0) != 0)
          {
            sub_22E8FCA40((_QWORD *)a1, a2, 0xC0Cu, 0, (uint64_t)&v177);
            v91 = sub_22E890024((uint64_t)&v177, v176);
            LOBYTE(v182[0]) = (*(_QWORD *)(v176[0] + 80) & 0xC0000000) == 0x80000000;
            sub_22E894E38(v91, (unsigned __int8 *)v182);
            sub_22E903BEC(&v177);
            sub_22EFC77E8(v176[0], 1);
LABEL_281:
            v111 = *(_QWORD *)(a1 + 88);
            v112 = a2;
            v95 = 0;
LABEL_312:
            v82 = 0;
            goto LABEL_313;
          }
          if ((v90 & 1) != 0)
            v133 = 5344;
          else
            v133 = 6960;
          LOBYTE(v173) = 0;
        }
        else
        {
          if ((v90 & 1) != 0)
            v133 = 5344;
          else
            v133 = 6960;
          LOBYTE(v173) = v89;
          if (v89)
            v87 = sub_22E90328C(a1);
        }
        v182[0] = v87;
        sub_22E8FCA40((_QWORD *)a1, a2, v133, 0, (uint64_t)&v177);
        v143 = sub_22E890024((uint64_t)&v177, v182);
        sub_22E894E38(v143, (unsigned __int8 *)&v173);
        sub_22E903BEC(&v177);
        goto LABEL_281;
      }
      if (v58 >= 0x10)
        v94 = v58;
      else
        v94 = v41;
      if ((v83 & 0x400) != 0)
      {
        if (!v175)
        {
LABEL_173:
          v95 = 0;
          v96 = a2;
LABEL_197:
          v111 = *(_QWORD *)(a1 + 88);
          v112 = v96;
LABEL_313:
          v158 = sub_22F0D8310(v111, v112, v95, v82);
          v8 = v158;
          if ((*(_WORD *)v158 & 0x100) != 0 && *(_QWORD *)(v158 + 16))
            goto LABEL_315;
          goto LABEL_318;
        }
      }
      else if ((*(_BYTE *)(v175 + 1) & 0x80) == 0)
      {
        v171 = v77;
        v177 = 3;
        v178 = 0;
        v179 = v94;
        v180 = 0;
        LODWORD(v181) = a2;
        BYTE4(v181) = 0;
        v101 = sub_22ED34B68();
        v102 = v76;
        if ((v101 & 1) == 0)
          goto LABEL_185;
        if (v75)
        {
          v163 = v175;
          sub_22F0D5A50(v175);
          v165 = v164;
          sub_22F0D60E4(v163);
          v101 = sub_22F32D6EC(a1, v165, v166, &v175, 1, v94);
          if ((v101 & 1) != 0)
            return 1;
        }
        else
        {
LABEL_185:
          if ((v101 & 1) != 0)
            return 1;
        }
        v103 = v101 & 0xFFFFFFFFFFFFFFFELL;
        v175 = v101 & 0xFFFFFFFFFFFFFFFELL;
        if (v58 >= 0x10)
        {
          v104 = sub_22E90328C(a1);
          v177 = 18;
          v178 = 0;
          v179 = v41;
          v180 = 0;
          v181 = v104;
          v105 = sub_22EC45014(a1, &v177, a2, v175, 0, 0);
          if ((v105 & 1) != 0)
            return 1;
          v103 = v105 & 0xFFFFFFFFFFFFFFFELL;
          v175 = v105 & 0xFFFFFFFFFFFFFFFELL;
        }
        v106 = sub_22E903070(a1, 0);
        v107 = v106 - 72;
        if (!v106)
          v107 = 0;
        v108 = (*(_WORD *)(v106 + 8) & 0x7Eu) - 52 >= 6 ? 0 : v107;
        sub_22E987AF4(a1, v103, v41, a2, v102, v172, v108);
        v80 = v175;
        v82 = v171;
        if (!v175)
          goto LABEL_173;
      }
      v109 = v82;
      v96 = a2;
      v110 = sub_22EBCF22C(a1, v80, a2, 0, 0);
      if ((v110 & 1) != 0)
        return 1;
      v95 = v110 & 0xFFFFFFFFFFFFFFFELL;
      v175 = v110 & 0xFFFFFFFFFFFFFFFELL;
      v82 = v109;
      goto LABEL_197;
    }
    if (!v175)
    {
      v95 = 0;
LABEL_311:
      v111 = *(_QWORD *)(a1 + 88);
      v112 = a2;
      goto LABEL_312;
    }
    if (*(unsigned __int8 *)v175 == 180)
    {
      v176[0] = sub_22E903398(a1);
      v173 = 0;
      v92 = *(_DWORD *)(v176[0] + 28) & 0x7F;
      if (v92 == 57)
      {
        v173 = 3;
      }
      else
      {
        if (v92 == 55)
        {
          v93 = 2;
        }
        else
        {
          if (v92 != 24)
            goto LABEL_262;
          v93 = 1;
        }
        v173 = v93;
      }
LABEL_262:
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1244u, 0, (uint64_t)&v177);
      v134 = sub_22E890024((uint64_t)&v177, v176);
      v135 = sub_22E8900C4(v134, &v173);
      sub_22F0D4E74(v175);
      v182[0] = v136;
      sub_22E8906A0(v135, v182);
      sub_22E903BEC(&v177);
      if (v75)
        v137 = sub_22F32D6EC(a1, *(_DWORD *)(v80 + 40), *(_DWORD *)(v80 + 44), *(const void **)(v80 + 16), ((*(_QWORD *)(v80 + 24) - *(_QWORD *)(v80 + 16)) >> 3), 0) & 0xFFFFFFFFFFFFFFFELL;
      else
        v137 = 0;
      v175 = v137;
      if (v137)
        goto LABEL_265;
LABEL_310:
      v95 = 0;
      goto LABEL_311;
    }
    if ((*(_BYTE *)(v175 + 1) & 0x80) != 0)
    {
LABEL_309:
      v137 = v175;
      if (v175)
      {
LABEL_265:
        v138 = sub_22EBCF22C(a1, v137, a2, 0, 0);
        if ((v138 & 1) != 0)
          return 1;
        v95 = v138 & 0xFFFFFFFFFFFFFFFELL;
        v175 = v138 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_311;
      }
      goto LABEL_310;
    }
    v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v97)
      v98 = (*(_DWORD *)(v97 + 16) & 0xFF800FF) == 86507531;
    else
      v98 = 0;
    if (v98)
    {
      v139 = *(_DWORD *)(sub_22E903398(a1) + 28) & 0x7F;
      if (v139 == 55 || v139 == 57)
      {
        v176[0] = sub_22E903398(a1);
        sub_22E8FCA40((_QWORD *)a1, a2, 0xC41u, 0, (uint64_t)&v177);
        v140 = sub_22E890024((uint64_t)&v177, v176);
        LOBYTE(v173) = (*(_DWORD *)(v176[0] + 28) & 0x7F) == 57;
        v141 = sub_22E894E38(v140, (unsigned __int8 *)&v173);
        sub_22F0D4E74(v175);
        v182[0] = v142;
LABEL_308:
        sub_22E8906A0(v141, v182);
        sub_22E903BEC(&v177);
        goto LABEL_309;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        goto LABEL_309;
      v100 = 5343;
    }
    else
    {
      v99 = sub_22EBCEBF8(a1, (unsigned __int8 *)(v175 & 0xFFFFFFFFFFFFFFFELL));
      if ((v99 & 1) != 0)
        return 1;
      v175 = v99 & 0xFFFFFFFFFFFFFFFELL;
      v175 = sub_22E90092C(a1, v99 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 25, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
      v100 = 5342;
    }
    v176[0] = sub_22E903398(a1);
    v173 = 0;
    v149 = *(_DWORD *)(v176[0] + 28) & 0x7F;
    if (v149 == 57)
    {
      v173 = 3;
      v150 = a2;
    }
    else
    {
      v150 = a2;
      if (v149 == 55)
      {
        v151 = 2;
        goto LABEL_306;
      }
      if (v149 == 24)
      {
        v151 = 1;
LABEL_306:
        v173 = v151;
      }
    }
    sub_22E8FCA40((_QWORD *)a1, v150, v100, 0, (uint64_t)&v177);
    v156 = sub_22E890024((uint64_t)&v177, v176);
    v141 = sub_22E8900C4(v156, &v173);
    sub_22F0D4E74(v175);
    v182[0] = v157;
    goto LABEL_308;
  }
  v8 = 1;
  v39 = sub_22EFC77E8(v73, 1);
  if (!a4)
    return v8;
  v74 = v175;
  if (!v175)
  {
LABEL_139:
    v75 = a4;
    v76 = v38;
    goto LABEL_140;
  }
  sub_22F0D5A50(v175);
  v168 = v167;
  sub_22F0D60E4(v74);
  if (*(_QWORD *)(v71 + 24) > 0xFuLL || (*(_DWORD *)(v71 + 16) & 0x400) != 0)
    v170 = v41;
  else
    v170 = 0;
  v8 = 1;
  v39 = sub_22F32D6EC(a1, v168, v169, &v175, 1, v170);
  if ((v39 & 1) == 0)
  {
    v75 = a4;
    v76 = v38;
    v175 = v39 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_140;
  }
  return v8;
}

