void sub_22F296AD4(uint64_t a1)
{
  sub_22F296734(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F296AF8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, llvm::LLVMContext *a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char v24;
  BOOL v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24FA66B20;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(_QWORD *)(a1 + 56) = a9;
  v20 = *a12;
  *a12 = 0;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = 0;
  v21 = *a4;
  *(_QWORD *)(a1 + 80) = *a4;
  if (v21)
  {
    v22 = (unsigned int *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  llvm::Timer::init();
  *(_DWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 252) = 0;
  v24 = *(_BYTE *)(a10 + 23);
  v25 = v24 < 0;
  if (v24 >= 0)
    v26 = (_BYTE *)a10;
  else
    v26 = *(_BYTE **)a10;
  v27 = v24 & 0x7F;
  if (v25)
    v28 = *(_QWORD *)(a10 + 8);
  else
    v28 = v27;
  v29 = *a4;
  v39 = v29;
  if (v29)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)(a1 + 256) = sub_22E697430(a3, v26, v28, &v39, a5, a6, a7, a13, a14, a15);
  v32 = v39;
  if (v39)
  {
    v35 = (unsigned int *)(v39 + 8);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x400000000;
  if (*(_DWORD *)(a11 + 8))
    sub_22E618B48(a1 + 264, a11);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 253) = (*(_QWORD *)(a7 + 32) & 0x800000000000000) != 0;
  v33 = *(_QWORD *)(a7 + 32);
  *MEMORY[0x24BED62A0] = (v33 & 0x800000000000000) != 0;
  *MEMORY[0x24BED6018] = (v33 & 0x1000000000000000) != 0;
  return a1;
}

uint64_t sub_22F296CFC(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12)
{
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24FA66B20;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(_QWORD *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v18 = *a4;
  *(_QWORD *)(a1 + 80) = *a4;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  llvm::Timer::init();
  *(_DWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 252) = 0;
  v21 = *a4;
  v30 = v21;
  if (v21)
  {
    v22 = (unsigned int *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 256) = sub_22E697430(a3, "", 0, &v30, a5, a6, a7, a12, 0, 0);
  v24 = v30;
  if (v30)
  {
    v25 = (unsigned int *)(v30 + 8);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x400000000;
  if (*(_DWORD *)(a11 + 8))
    sub_22E618B48(a1 + 264, a11);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a10;
  *(_BYTE *)(a1 + 253) = (*(_QWORD *)(a7 + 32) & 0x800000000000000) != 0;
  v28 = *(_QWORD *)(a7 + 32);
  *MEMORY[0x24BED62A0] = (v28 & 0x800000000000000) != 0;
  *MEMORY[0x24BED6018] = (v28 & 0x1000000000000000) != 0;
  return a1;
}

char *sub_22F296ED8(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_22E617DDC(a1, a2, &v14, &v13, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (char *)operator new(0x50uLL);
    sub_22E579A24(v7 + 32, a4);
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_22F296F88(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = sub_22E617DDC(a1, a2, &v13, &v12, a3);
  result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_22E618304((uint64_t)a1, a4, (uint64_t)&v11);
    v8 = v13;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v8;
    *v6 = (uint64_t)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = (uint64_t *)*v6;
    }
    sub_22E49FD00(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

void sub_22F297034()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F297048()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FA66BE0;
  return result;
}

void sub_22F29706C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FA66BE0;
}

uint64_t sub_22F297084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22F297090(a2, a3);
}

uint64_t sub_22F297090(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (**v3)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4[0] = &off_24FA66C28;
  v4[1] = a2;
  v5 = v4;
  sub_22E6189BC(a1, v4);
  result = (uint64_t)v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      return result;
    v3 = (uint64_t (**)(void))(*v5 + 40);
  }
  return (*v3)();
}

void sub_22F29712C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F297140(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FA66C28;
  result[1] = v3;
  return result;
}

uint64_t sub_22F297174(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FA66C28;
  a2[1] = v2;
  return result;
}

BOOL sub_22F297190(uint64_t a1, llvm::Value *a2)
{
  return sub_22F297198((uint64_t *)(a1 + 8), a2);
}

BOOL sub_22F297198(uint64_t *a1, llvm::Value *this)
{
  uint64_t v3;
  int Key;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 1;
  v3 = *a1;
  llvm::Value::getName(this);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
  {
    v6 = *(unsigned int *)(v3 + 8);
    v5 = v6;
  }
  else
  {
    v5 = Key;
    v6 = *(unsigned int *)(v3 + 8);
  }
  return v5 == v6;
}

double sub_22F297208(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = v4 - 16;
    do
    {
      v8 = *(_QWORD *)&v7[v6];
      *(_QWORD *)&v7[v6] = 0;
      if (v8)
      {
        v9 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v9, 0x10B2C407FF26C1CLL);
      }
      v6 -= 16;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F29729C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F297308(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F297308(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = *(_QWORD *)result + 16 * v2;
    do
    {
      v5 = *v3;
      *v3 = 0;
      *a2 = v5;
      a2[1] = v3[1];
      v3 += 2;
      a2 += 2;
    }
    while (v3 != (uint64_t *)v4);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = *(_QWORD *)result - 16;
      do
      {
        result = *(_QWORD *)(v8 + v7);
        *(_QWORD *)(v8 + v7) = 0;
        if (result)
        {
          v9 = MEMORY[0x23489F15C](result, a2);
          result = MEMORY[0x2348A0E9C](v9, 0x10B2C407FF26C1CLL);
        }
        v7 -= 16;
      }
      while (v7);
    }
  }
  return result;
}

void **sub_22F297394(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v8 = result;
    v3 = 16 * v2;
    v4 = (char *)(v1 - 2);
    do
    {
      v5 = *(_QWORD *)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;
      if (v5)
      {
        v6 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v6, 0x10B2C407FF26C1CLL);
      }
      v3 -= 16;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_22F297424(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(result + 8);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  if ((v1 & 1) == 0)
  {
    if (!v2)
      return result;
    v3 = result;
    sub_22E3B4CBC(result, v2);
    return v3;
  }
  if (v2)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return v3;
  }
  return result;
}

double sub_22F297480@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_22E619C24(a2, a3, 0, 0, a1, a4);
}

BOOL sub_22F297498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 228)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F2974F8(uint64_t a1)
{
  uint64_t result;

  llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::ConstantExpr::getPtrToInt();
  llvm::ConstantExpr::getPtrToInt();
  result = llvm::ConstantExpr::getSub();
  if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 24))
    return llvm::ConstantExpr::getTrunc();
  return result;
}

uint64_t sub_22F2975BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  v5 = (uint64_t *)(a1 + 272);
  v6 = *(_QWORD *)(a1 + 88);
  v24 = 257;
  v7 = sub_22E3C1740((uint64_t *)(a1 + 272), 40, a3, v6, (uint64_t)v23);
  v8 = *(_QWORD *)(a1 + 88);
  v23[0] = "func_addr.int";
  v24 = 259;
  v9 = sub_22E3C1740(v5, 47, a2, v8, (uint64_t)v23);
  v21 = "global_addr.int";
  v22 = 259;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v7, v9, 0, 0);
  if (!v10)
  {
    v24 = 257;
    v11 = llvm::BinaryOperator::Create();
    v10 = sub_22E3C12C8(v5, v11, (uint64_t)&v21);
  }
  v12 = *(_QWORD *)(a1 + 104);
  v23[0] = "global_addr";
  v24 = 259;
  v13 = sub_22E3C1740(v5, 48, v10, v12, (uint64_t)v23);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(unsigned __int8 *)(a1 + 130);
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = v15;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  return sub_22E3C43AC(v5, (uint64_t)v17, "decoded_addr");
}

uint64_t sub_22F297700(uint64_t result)
{
  if ((*(_BYTE *)(result + 1865) & 0x20) != 0)
  {
    llvm::Function::addFnAttr();
    return llvm::Function::removeFnAttr();
  }
  return result;
}

uint64_t sub_22F297754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v4 + 16 * v1;
  do
  {
    v6 = *(unsigned __int8 **)v4;
    v7 = *(_QWORD *)(v4 + 8);
    v4 += 16;
    v8 = sub_22F1DD7A4(v6, v7, 1u);
    v3 |= sub_22F422BA4(v8, v9);
    v2 |= v10;
  }
  while (v4 != v5);
  return v3;
}

uint64_t sub_22F2977C0(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;
  int v7;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v4 << 16) & 0x780000) != 0)
    result = ((*(unsigned __int16 *)(a1 + 28) | (v4 << 16)) >> 19) & 0xF;
  else
    result = sub_22F1BFAD0(a1);
  if ((_DWORD)result != 1)
  {
    v6 = *(unsigned __int8 *)(a1 + 30);
    if ((~(v6 << 16) & 0x780000) != 0)
      v7 = ((*(unsigned __int16 *)(a1 + 28) | (v6 << 16)) >> 19) & 0xF;
    else
      v7 = sub_22F1BFAD0(a1);
    return v7 == 2;
  }
  return result;
}

void sub_22F297870(uint64_t a1, uint64_t a2, const char *a3)
{
  sub_22E628400(*(_QWORD *)(a1 + 144), a2, a3);
}

llvm::Instruction *sub_22F297878(uint64_t a1, unint64_t a2)
{
  llvm::Instruction *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[4];
  __int16 v12;

  v3 = 0;
  v4 = (uint64_t *)(a1 + 4112);
  v5 = a1 + 272;
  do
  {
    v6 = *(_QWORD *)(a2 + 32);
    v11[0] = *(_QWORD *)(a2 + 40);
    v7 = sub_22F25E108(v4, v11);
    v8 = v7[1];
    if (v3)
    {
      v12 = 257;
      v3 = sub_22E3BDEA8(v5, (uint64_t)v3, v8, (uint64_t)v11, 1, 0);
    }
    else
    {
      v3 = (llvm::Instruction *)v7[1];
    }
    v9 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v6);
    if (!v9)
      break;
    a2 = v9;
  }
  while (*(_BYTE *)(v9 + 16) == 5);
  return v3;
}

uint64_t sub_22F297934(uint64_t a1, uint64_t a2)
{
  Function *v4;
  llvm::BasicBlock *v5;
  __n128 v7;

  if (!*(_QWORD *)(a1 + 2896))
    sub_22F29799C(a1);
  sub_22F28C650(a1, a2, &v7);
  v4 = (Function *)v7.n128_u64[0];
  llvm::IndirectBrInst::addDestination(*(llvm::IndirectBrInst **)(a1 + 2896), (llvm::BasicBlock *)v7.n128_u64[0]);
  return llvm::BlockAddress::get(*(llvm::BlockAddress **)(a1 + 1624), v4, v5);
}

uint64_t sub_22F29799C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  llvm::BasicBlock *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD v12[4];
  __int16 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Context;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 2896);
  if (v1)
    return *(_QWORD *)(v1 + 40);
  v12[0] = "indirectgoto";
  v13 = 259;
  v5 = operator new();
  v6 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
  v14 = (char *)&v16;
  v15 = 0x200000000;
  Context = llvm::BasicBlock::getContext(v6);
  v20 = &v28;
  v21 = v29;
  v22 = 0;
  v23 = 0;
  v24 = 512;
  v25 = 7;
  v26 = 0;
  v27 = 0;
  v28 = MEMORY[0x24BED83B8] + 16;
  v29[0] = &off_24FA66C70;
  v17 = v5;
  v18 = v5 + 40;
  v29[1] = 0;
  v29[2] = a1;
  v7 = *(_QWORD *)(a1 + 96);
  v12[0] = "indirect.goto.dest";
  v13 = 259;
  v8 = sub_22E3C4B80((uint64_t *)&v14, v7, 0, (uint64_t)v12);
  v9 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489CD44](v9, v8, 10, 0);
  v13 = 257;
  (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t))(*v21 + 16))(v21, v9, v12, v17, v18);
  if ((_DWORD)v15)
  {
    v10 = v14;
    v11 = &v14[16 * v15];
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  *(_QWORD *)(a1 + 2896) = v9;
  v2 = *(_QWORD *)(v9 + 40);
  sub_22E4D6138((void **)&v14);
  return v2;
}

llvm::Instruction *sub_22F297B68(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 5)
      v4 = v3;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return sub_22F297878(a1, v4);
}

double sub_22F297BAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12[12];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v5 = sub_22EF6D84C(v4);
  v6 = *(_QWORD *)(v5 + 48);
  if (!v6)
    v6 = sub_22EF6462C(v4, v5);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
  {
    sub_22E4D8D7C(&v9);
    v8 = v11;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v8;
    result = v12[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v12;
  }
  else
  {
    sub_22E4DFD40((_QWORD *)a2, a1);
  }
  return result;
}

double sub_22F297C7C@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  double v7[12];

  sub_22E4D8D7C(&v4);
  v2 = v6;
  *a1 = v5;
  a1[1] = v2;
  result = v7[0];
  a1[2] = *(_OWORD *)v7;
  return result;
}

uint64_t sub_22F297CB8(uint64_t a1, _BYTE *a2)
{
  if ((a2[48] & 6) != 0 || *(_BYTE *)(*(_QWORD *)a2 + 16) != 67)
    return 0;
  llvm::User::operator new((llvm::User *)0x40);
  return llvm::BitCastInst::BitCastInst();
}

uint64_t sub_22F297D28(int a1, llvm::Instruction *this)
{
  uint64_t result;

  if (this)
    return llvm::Instruction::eraseFromParent(this);
  return result;
}

uint64_t sub_22F297D38(uint64_t result, llvm::Type **a2, unint64_t a3, int a4, int a5, llvm::Type **a6, llvm::Type **a7, uint64_t a8, llvm::Instruction *a9)
{
  uint64_t v16;
  llvm::LLVMContext *v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  llvm::Type **v22[4];

  v22[3] = *(llvm::Type ***)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(result + 1865) & 0x80) != 0)
  {
    v16 = result;
    result = sub_22F10ACF8(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    if ((result & 4) == 0 && (*(_BYTE *)((result & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
    {
      llvm::Instruction::removeFromParent(a9);
      *(_BYTE *)(v16 + 1880) = 1;
      if (!a7)
      {
        llvm::Type::getInt1Ty(*(llvm::Type **)(v16 + 336), v17);
        a7 = (llvm::Type **)llvm::ConstantInt::get();
      }
      v18[0] = sub_22E4DE978(v16, a4);
      v18[1] = sub_22E4DE978(v16, a5);
      v18[2] = sub_22F25E758(v16, a3);
      v22[0] = (llvm::Type **)sub_22E4E7984((_QWORD *)v16, a2);
      v22[1] = (llvm::Type **)sub_22E4E7984((_QWORD *)v16, a6);
      v22[2] = (llvm::Type **)sub_22E4E7984((_QWORD *)v16, a7);
      v20 = a8;
      v21 = xmmword_22F457650;
      sub_22E4DEC4C((_QWORD *)v16, (uint64_t)&v20, 1, 0x17u, (uint64_t)v18, 3, v22, 3);
      *(_BYTE *)(v16 + 1880) = 0;
      v19 = 257;
      return sub_22E3C12C8((uint64_t *)(v16 + 272), (uint64_t)a9, (uint64_t)v18);
    }
  }
  return result;
}

llvm::Value *sub_22F297ECC(uint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, int a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  _WORD v26[20];
  _BYTE v27[32];
  __int16 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x24BDAC8D0];
  v12 = a1 + 34;
  v13 = sub_22F299FA8(a1[18], a4, a5);
  v14 = a1[12];
  v28 = 257;
  v15 = sub_22E3C1740(v12, 49, v13, v14, (uint64_t)v27);
  v16 = sub_22F29A088(a1[18], a6);
  v17 = a1[12];
  v26[16] = 257;
  v18 = sub_22E3C1740(v12, 49, v16, v17, (uint64_t)v26);
  v19 = sub_22F29A110(a1[18], a6);
  v29 = v31;
  v31[0] = a3;
  v31[1] = v15;
  v31[2] = v18;
  v31[3] = v19;
  v30 = 0x500000004;
  if (a7)
  {
    v20 = sub_22F29A190(a1[18], a7);
    v21 = v30;
    if (v30 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = v30;
    }
    *((_QWORD *)v29 + v21) = v20;
    v22 = (v30 + 1);
    LODWORD(v30) = v30 + 1;
  }
  else
  {
    v22 = 4;
  }
  if (a2)
    v23 = *(_QWORD *)(a2 + 24);
  else
    v23 = 0;
  v28 = 257;
  v24 = sub_22E462B78(v12, v23, a2, (uint64_t)v29, v22, (uint64_t)v27, 0);
  if (v29 != v31)
    free(v29);
  return v24;
}

uint64_t sub_22F298078(uint64_t *a1, uint64_t a2, llvm::Value *a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Declaration;
  uint64_t v15;
  uint64_t Name;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  result = sub_22F255ABC(a2);
  v7 = (uint64_t *)result;
  v9 = v8;
  while (1)
  {
    v10 = v7;
    if (v7 >= v9)
    {
      if (v7 == v9)
        return result;
      v11 = v9;
      while (*(_WORD *)(*v11 + 32) != 77)
      {
        if (++v11 == v7)
          return result;
      }
      v10 = v7;
    }
    else
    {
      while (*(_WORD *)(*v10 + 32) != 77)
      {
        if (++v10 == v9)
          return result;
      }
      v11 = v9;
    }
    if (v10 == v11)
      break;
    do
    {
      v13 = *v7++;
      v12 = v13;
    }
    while (*(_WORD *)(v13 + 32) != 77);
    Declaration = llvm::Intrinsic::getDeclaration();
    v15 = *(_QWORD *)(a1[18] + 96);
    Name = llvm::Value::getName(a3);
    v20 = 261;
    v19[0] = Name;
    v19[1] = v17;
    v18 = sub_22E3C1740(a1 + 34, 49, (uint64_t)a3, v15, (uint64_t)v19);
    result = (uint64_t)sub_22F297ECC(a1, Declaration, v18, *(const void **)(v12 + 40), *(unsigned int *)(v12 + 36), *(_DWORD *)(a2 + 24), v12);
  }
  return result;
}

_QWORD *sub_22F2981C4(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  return a1;
}

void sub_22F2981F4(_QWORD *a1)
{
  *a1 = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)(a1 + 2));
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F298234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 result;
  BOOL v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  if (!a3)
    return 0;
  do
  {
    sub_22E622A1C(v8, a1, a2, v3);
    a2 = v9;
    v3 = v10;
    result = v8[0] != 0;
    if (v8[0])
      v7 = 1;
    else
      v7 = v10 == 0;
  }
  while (!v7);
  return result;
}

void **sub_22F298290(void **result)
{
  void **v1;
  llvm::IRBuilderBase *v2;
  uint64_t v3;
  void *v4[18];

  v4[17] = *(void **)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*((_QWORD *)result[18] + 23) + 38) & 0x10) != 0)
  {
    v1 = result;
    v2 = (llvm::IRBuilderBase *)(result + 34);
    sub_22E522324((uint64_t)v4, (llvm::BasicBlock *)result[40], (uint64_t)result[41], 0, 0, 0);
    llvm::IRBuilderBase::getCurrentDebugLocation(v2);
    sub_22E3CF21C((uint64_t)v4, 0, v3);
    if (v3)
      llvm::MetadataTracking::untrack();
    sub_22E637404((uint64_t)v1[18]);
    llvm::SanitizerStatReport::create();
    return sub_22E5222DC(v4);
  }
  return result;
}

uint64_t sub_22F298360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  if (*(_QWORD *)(a2 + 16))
    v4 = sub_22E42E928(a1, *(llvm::LLVMContext **)(a2 + 8));
  else
    v4 = 0;
  if (*(_DWORD *)(a2 + 32))
  {
    v5 = sub_22F24B268(a1);
    if (v4)
    {
      v8 = 257;
      return sub_22E3E49C4(a1 + 272, v4, v5, (uint64_t)v7);
    }
    return v5;
  }
  return v4;
}

void sub_22F2983F0(_QWORD *a1, llvm::Function *a2, uint64_t *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t *v22;
  const char *v23;
  __int16 v24;
  void *v25[2];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 15088) + 76);
  v25[0] = "resolver_entry";
  v27 = 259;
  v9 = operator new();
  v10 = llvm::BasicBlock::BasicBlock();
  v22 = a1 + 34;
  a1[40] = v10;
  a1[41] = v10 + 40;
  sub_22F24B598((uint64_t)a1);
  if (a4)
  {
    v11 = 168 * a4;
    v21 = MEMORY[0x24BED83B8] + 16;
    while (1)
    {
      a1[40] = v9;
      a1[41] = v9 + 40;
      v12 = sub_22F298360((uint64_t)a1, (uint64_t)a3);
      if (!v12)
        break;
      v13 = v12;
      v25[0] = "resolver_return";
      v27 = 259;
      v14 = operator new();
      v15 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
      Context = llvm::BasicBlock::getContext(v15);
      v25[0] = &v26;
      v25[1] = (void *)0x200000000;
      v30 = Context;
      v31 = &v39;
      v32 = v40;
      v33 = 0;
      v34 = 0;
      v35 = 512;
      v36 = 7;
      v37 = 0;
      v38 = 0;
      v39 = v21;
      v40[0] = &off_24FA66C70;
      v28 = v14;
      v29 = v14 + 40;
      v40[1] = 0;
      v40[2] = a1;
      v17 = *a3;
      a3 += 21;
      sub_22E621F5C(a2, (uint64_t *)v25, v17, v8 == 3);
      v23 = "resolver_else";
      v24 = 259;
      v9 = operator new();
      llvm::BasicBlock::BasicBlock();
      v18 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v18, v14, v9, v13, 0);
      v24 = 257;
      sub_22E3C12C8(v22, v18, (uint64_t)&v23);
      sub_22E4D6138(v25);
      v11 -= 168;
      if (!v11)
        goto LABEL_5;
    }
    sub_22E621F5C(a2, v22, *a3, v8 == 3);
  }
  else
  {
LABEL_5:
    v19 = a1 + 40;
    a1[40] = v9;
    a1[41] = v9 + 40;
    v20 = sub_22F260198((uint64_t)a1);
    llvm::Value::getContext(v20);
    *((_QWORD *)v20 + 8) = llvm::AttributeList::addAttributeAtIndex();
    llvm::Value::getContext(v20);
    *((_QWORD *)v20 + 8) = llvm::AttributeList::addAttributeAtIndex();
    sub_22F24866C((uint64_t)v22);
    *v19 = 0;
    v19[1] = 0;
  }
}

uint64_t sub_22F298714(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::LLVMContext *a4)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *Declaration;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[32];
  __int16 v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if ((~*(_DWORD *)a3 & 3) == 0 && (~*(_DWORD *)a4 & 3) == 0 && ((*(_DWORD *)a3 >> 2) & 1) == (*(_DWORD *)a4 & 4u) >> 2)
  {
    v9 = *a2;
    v10 = *(_QWORD *)(a1 + 88);
    LOWORD(v30) = 257;
    v12 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, (uint64_t)a2, v10, (uint64_t)v29);
    if ((*(_DWORD *)a3 & 4) != 0
      && (v13 = *(_QWORD *)(a1 + 144),
          ((*(unsigned __int16 *)(*(_QWORD *)(v13 + 152) + 16) | (*(unsigned __int8 *)(*(_QWORD *)(v13 + 152) + 18) << 16)) & 0x400000) != 0))
    {
      v23 = sub_22F29C888(v13);
      v24 = *(_QWORD *)(a1 + 88);
      LOWORD(v30) = 257;
      v25 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, v23, v24, (uint64_t)v29);
      LOWORD(v30) = 257;
      v26 = sub_22E3E49C4(a1 + 272, v12, v25, (uint64_t)v29);
      LOWORD(v30) = 257;
      v14 = sub_22E3ED05C((uint64_t *)(a1 + 272), v12, v26, (uint64_t)v29);
      v12 = v26;
    }
    else
    {
      v14 = 0;
    }
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v11);
    v15 = llvm::ConstantInt::get();
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v16);
    v17 = llvm::ConstantInt::get();
    v18 = *(_QWORD *)(a3 + 8);
    if (!v18)
      v18 = llvm::ConstantInt::get();
    v19 = *((_QWORD *)a4 + 1);
    if (!v19)
      v19 = llvm::ConstantInt::get();
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
    if (Declaration)
      v21 = *((_QWORD *)Declaration + 3);
    else
      v21 = 0;
    v29[0] = v12;
    v29[1] = v15;
    v29[2] = v18;
    v29[3] = v17;
    v30 = v19;
    v28 = 257;
    v22 = (uint64_t)sub_22E479C7C(a1, v21, Declaration, (uint64_t)v29, 5, (uint64_t)v27);
    if (v14)
    {
      LOWORD(v30) = 257;
      v22 = sub_22E3E58D4(a1 + 272, v22, v14, (uint64_t)v29);
    }
    LOWORD(v30) = 257;
    return sub_22E3C1740((uint64_t *)(a1 + 272), 48, v22, v9, (uint64_t)v29);
  }
  v7 = (uint64_t *)sub_22E622648(a1, (_DWORD *)a3, a2);
  if ((*(_BYTE *)a4 & 2) == 0)
    return (uint64_t)v7;
  return sub_22E62243C(a1, a4, v7);
}

void sub_22F2989E4(llvm::IRBuilderDefaultInserter *a1)
{
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F298A08(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  sub_22E3CB7B0(a2, (uint64_t)a3, 0);
  sub_22E5E5158((uint64_t)a2, a3, 0, 0);
}

const char *sub_22F298A48()
{
  return "__captured_stmt";
}

uint64_t sub_22F298A58(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v5 = sub_22F298AB0(v2);
    MEMORY[0x2348A0E9C](v5, 0x20C40A759441BLL);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_22F298AB0(void **a1)
{
  _QWORD *v2;
  void **v3;

  v3 = a1 + 3;
  v2 = a1[3];
  if (v2)
  {
    sub_22E622994(a1 + 3, v2);
    operator delete(*v3);
  }
  if (*a1)
  {
    sub_22E622994(a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t *sub_22F298B04(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  if (*((_BYTE *)result + 32))
  {
    v2 = *result;
    *(_DWORD *)(v2 + 96) = *((_DWORD *)result + 2);
    *(_QWORD *)(v2 + 88) = result[2];
    *(_BYTE *)(v2 + 100) = *((_BYTE *)result + 24);
    *(_WORD *)(v2 + 101) = *(_WORD *)((char *)result + 25);
  }
  *result = a2;
  *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 96);
  result[2] = *(_QWORD *)(a2 + 88);
  *((_BYTE *)result + 24) = *(_BYTE *)(a2 + 100);
  *(_WORD *)((char *)result + 25) = *(_WORD *)(a2 + 101);
  *((_BYTE *)result + 32) = 1;
  return result;
}

uint64_t sub_22F298B64(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  BOOL v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  const void *v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const void *v18;
  uint64_t v19;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = *((_BYTE *)a2 + 23);
    v7 = v6 < 0;
    v8 = (const void *)*a2;
    if (v6 >= 0)
      v8 = a2;
    v9 = v6 & 0x7F;
    if (v7)
      v9 = a2[1];
    v18 = v8;
    v19 = v9;
    v10 = sub_22E622CD8((const void **)(v3 + 32), (uint64_t)&v18);
    v11 = (uint64_t *)(v3 + 8);
    if (v10 >= 0)
    {
      v11 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v11;
  }
  while (*v11);
  if (v5 == v2)
    return v2;
  v12 = *(const void **)(v5 + 32);
  v13 = *(_BYTE *)(v5 + 55);
  v14 = v13;
  if (v13 >= 0)
    v12 = (const void *)(v5 + 32);
  v15 = *(_QWORD *)(v5 + 40);
  v16 = v13 & 0x7F;
  if (v14 >= 0)
    v15 = v16;
  v18 = v12;
  v19 = v15;
  if ((sub_22E622CD8((const void **)a2, (uint64_t)&v18) & 0x80000000) != 0)
    return v2;
  return v5;
}

uint64_t sub_22F298C2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((*(_DWORD *)(a1[19] + 400) - 5) > 2)
    v2 = sub_22F2765C4((uint64_t)a1);
  else
    v2 = sub_22F2753FC(a1);
  v3 = v2;
  result = a1[98];
  a1[98] = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F298C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 216);
  if (*(_DWORD *)(v2 + 64) == 1 && (*(_DWORD *)(v2 + 56) & 0xFFFFFFFE) == 0x30)
  {
    v3 = operator new();
    sub_22F27A340(v3, a1);
    result = *(_QWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 792) = v3;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v5 = operator new();
  *(_QWORD *)v5 = off_24FA65630;
  *(_QWORD *)(v5 + 8) = a1;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 44) = 0u;
  *(_DWORD *)(v5 + 60) = 16;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  result = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F298D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 64) == 1)
  {
    v2 = operator new();
    sub_22F265584(v2, a1);
    result = *(_QWORD *)(a1 + 800);
    *(_QWORD *)(a1 + 800) = v2;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24FA64258;
  v4[1] = a1;
  result = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_22F298E08(_QWORD *a1)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1[27] + 56);
  v3 = v2 > 0x2D;
  v4 = (1 << v2) & 0x300040000000;
  if (v3 || v4 == 0)
  {
    v9 = *(_QWORD *)(a1[19] + 72);
    v10 = operator new();
    if ((v9 & 0x200000000) != 0)
    {
      result = (_QWORD *)sub_22F27BC98(v10, (uint64_t)a1, (uint64_t)".", 1, (uint64_t)".", 1);
      *result = &unk_24FA65FB8;
    }
    else
    {
      result = (_QWORD *)sub_22F27BE6C(v10, (uint64_t)a1, (uint64_t)".", 1, (uint64_t)".", 1);
    }
  }
  else
  {
    v6 = operator new();
    result = (_QWORD *)sub_22F287FD4(v6, a1);
  }
  v8 = a1[101];
  a1[101] = result;
  if (v8)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  return result;
}

uint64_t sub_22F298EE8(uint64_t result)
{
  uint64_t v1;
  uint64_t *i;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t NamedValue;
  llvm::Function *v8;
  BOOL v9;
  llvm::Function *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;

  v1 = *(unsigned int *)(result + 1152);
  if ((_DWORD)v1)
  {
    for (i = *(uint64_t **)(result + 1144); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(result + 1144);
  }
  v3 = *(_QWORD *)(result + 1144) + 8 * v1;
  if (i != (uint64_t *)v3)
  {
    v5 = *i;
    do
    {
      v13 = result;
      v14 = (uint64_t *)v3;
      v6 = *(_QWORD *)(v5 + 24);
      NamedValue = llvm::Module::getNamedValue();
      if (NamedValue)
      {
        v8 = (llvm::Function *)NamedValue;
        if (*(_BYTE *)(v6 + 16))
          v9 = 1;
        else
          v9 = v6 == 0;
        v10 = (llvm::Function *)v6;
        if (v9
          && (*(_BYTE *)(v6 + 16) != 1
            ? (v10 = *(llvm::Function **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))
            : (v10 = *(llvm::Function **)(v6 - 32)),
              *((_BYTE *)v10 + 16)))
        {
          llvm::Value::replaceAllUsesWith();
        }
        else
        {
          llvm::Value::replaceAllUsesWith();
          llvm::Function::removeFromParent(v10);
          sub_22F299008((_QWORD *)(*((_QWORD *)v8 + 5) + 24), (uint64_t)v8 + 56, (uint64_t)v10);
        }
        llvm::Function::eraseFromParent(v8);
      }
      do
      {
        v11 = i[1];
        ++i;
        v5 = v11;
        if (v11)
          v12 = v5 == -8;
        else
          v12 = 1;
      }
      while (v12);
      result = v13;
      v3 = (uint64_t)v14;
    }
    while (i != v14);
  }
  return result;
}

uint64_t sub_22F299008(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if ((_QWORD *)*a1 == a1)
    v4 = (uint64_t *)a1[1];
  else
    v4 = *(uint64_t **)(a2 + 8);
  result = llvm::SymbolTableListTraits<llvm::Function>::addNodeToList();
  v6 = *v4;
  *(_QWORD *)(a3 + 56) = *v4;
  *(_QWORD *)(a3 + 64) = v4;
  v7 = a3 + 56;
  *(_QWORD *)(v6 + 8) = v7;
  *v4 = v7;
  return result;
}

uint64_t sub_22F299054(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;

  v1 = *(unint64_t **)(result + 1392);
  if (v1 != *(unint64_t **)(result + 1400))
  {
    v3 = *(unint64_t **)(result + 1400);
    v4 = result;
    do
    {
      v2 = *v1;
      if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v4 + 224) + 240))(*(_QWORD *)(v4 + 224), *v1))
      {
        sub_22F2961B8(v4 + 704, v2);
      }
      ++v1;
    }
    while (v1 != v3);
    result = v4;
    v1 = *(unint64_t **)(v4 + 1392);
  }
  *(_QWORD *)(result + 1400) = v1;
  return result;
}

uint64_t sub_22F2990E0(uint64_t result)
{
  llvm::ArrayType ***v1;
  llvm::ArrayType ***v2;

  v1 = *(llvm::ArrayType ****)(result + 1680);
  v2 = *(llvm::ArrayType ****)(result + 1688);
  if (v1 != v2)
  {
    llvm::ArrayType::get(**v1, (llvm::Type *)(v2 - v1));
    llvm::ConstantArray::get();
    llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    return llvm::GlobalObject::setSection();
  }
  return result;
}

uint64_t sub_22F2991A4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = llvm::Module::getFunction();
  if (result)
  {
    v3 = result;
    result = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)result);
    if ((result & 1) == 0 && !*(_QWORD *)(v3 + 96))
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (*(_DWORD *)(v4 + 8) <= 0xFFu)
      {
        result = llvm::Type::isIntegerTy(**(llvm::Type ***)(v4 + 16));
        if ((_DWORD)result)
        {
          v5 = llvm::GlobalAlias::create();
          return sub_22E62C508((uint64_t *)(a1 + 1416), &v5);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F299260()
{
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F29936C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  v1 = *(_QWORD *)(result + 1536);
  v2 = *(_QWORD *)(result + 1544);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      result = llvm::Module::getNamedValue();
      if (result)
        result = sub_22E636F30(v3, &v4);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_22F2993DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::Module *v3;
  llvm::NamedMDNode *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int i;
  uint64_t Operand;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(result + 184);
  if (*(char *)(v1 + 207) < 0)
    v2 = *(_QWORD *)(v1 + 192);
  else
    v2 = *(unsigned __int8 *)(v1 + 207);
  if (v2 || (*(char *)(v1 + 231) < 0 ? (v10 = *(_QWORD *)(v1 + 216)) : (v10 = *(unsigned __int8 *)(v1 + 231)), v10))
  {
    v3 = *(llvm::Module **)(result + 200);
    v11[0] = "llvm.dbg.cu";
    v12 = 259;
    result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v11);
    if (result)
    {
      v4 = (llvm::NamedMDNode *)result;
      llvm::Module::getOrInsertNamedMetadata();
      v5 = llvm::MDString::get();
      v6 = llvm::MDString::get();
      result = llvm::NamedMDNode::getNumOperands(v4);
      if ((_DWORD)result)
      {
        v7 = result;
        for (i = 0; i != v7; ++i)
        {
          Operand = llvm::NamedMDNode::getOperand(v4);
          v11[0] = v6;
          v11[1] = v5;
          v11[2] = Operand;
          llvm::MDTuple::getImpl();
          result = llvm::NamedMDNode::addOperand();
        }
      }
    }
  }
  return result;
}

double sub_22F29957C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  uint64_t v8;
  __int128 v9[2];
  uint64_t v10;

  if (*(_QWORD *)(a1 + 264))
  {
    v4 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v4;
    v10 = *(_QWORD *)(a2 + 32);
    v5 = *(_OWORD *)(a3 + 16);
    v7[0] = *(_OWORD *)a3;
    v7[1] = v5;
    v8 = *(_QWORD *)(a3 + 32);
    return sub_22E66BB68(v9, (uint64_t)v7, a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    result = 0.0;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }
  return result;
}

uint64_t sub_22F2995DC()
{
  llvm::MDTuple::getImpl();
  return llvm::Instruction::setMetadata();
}

uint64_t sub_22F29961C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;

  sub_22E628944(a1, a2, a3);
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 13 >= 0x3E)
    v6 = 0;
  else
    v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  return sub_22E628A68(a1, (llvm::GlobalValue *)a2, v6);
}

uint64_t sub_22F29966C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_22E628990(a1, a2, a3);
  return sub_22E628A68(a1, (llvm::GlobalValue *)a2, a3);
}

uint64_t sub_22F2996A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  const void *v13;
  size_t v14;
  __int128 v15;
  _BYTE v16[64];
  uint64_t v17;
  void *v18;
  __int128 v19;
  _QWORD v20[33];

  v5 = a2;
  v20[32] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a1[28] + 16);
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v18 = v20;
  v19 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v16, (uint64_t)&v18);
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(v8 + 28) & 0x7F) == 0x37)
    {
      sub_22F3E8570(v7, v8, v5 & 7, a4, (llvm::raw_ostream *)v16);
    }
    else
    {
      v12 = sub_22EFCAE04(v8);
      sub_22F096F84((uint64_t)v7, v12, a4, (llvm::raw_ostream *)v16);
    }
  }
  else
  {
    if ((a1[431] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_DWORD *)((a1[431] & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 60 >= 7)
        v9 = 0;
      else
        v9 = a1[431] & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v9 = 0;
    }
    sub_22F3E8468((uint64_t)v7, a4, v9, (llvm::raw_ostream *)v16);
  }
  v13 = *(const void **)v17;
  v14 = *(_QWORD *)(v17 + 8);
  DWORD2(v15) = 0;
  *(_QWORD *)&v15 = a4;
  v10 = *sub_22E63B828((llvm::StringMapImpl *)(a1 + 195), v13, v14, &v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v16);
  if (v18 != v20)
    free(v18);
  return v10 + 24;
}

uint64_t sub_22F299840(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 1536);
  v4 = *(_QWORD *)(a1 + 1544);
  if (v3 == v4)
    return 0;
  while (*(_QWORD *)(v3 + 24) != __n || __n && memcmp(*(const void **)(v3 + 16), __s2, __n))
  {
    v3 += 32;
    if (v3 == v4)
      return 0;
  }
  return *(_QWORD *)v3;
}

uint64_t sub_22F2998B8(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    if ((v4 & 4) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 4;
      v6 = result & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFF8;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v10;
        v7 = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t sub_22F2999C8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  sub_22E670BCC((uint64_t *)a1, *(llvm::ArrayType **)(a1 + 48));
  return sub_22F29F614(v1);
}

uint64_t sub_22F299A54@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD *v6;
  void (**v7)(_QWORD *);
  _QWORD v9[2];
  int v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0uLL;
  v14 = 0;
  v15[0] = &off_24FA66CE8;
  v15[1] = v9;
  v15[2] = v13;
  v16 = v15;
  sub_22E63BEA4(v15, v13);
  v4 = v16;
  if (v16 == v15)
  {
    v5 = (void (**)(_QWORD *))(v15[0] + 32);
    v4 = v15;
LABEL_3:
    (*v5)(v4);
    goto LABEL_4;
  }
  if (v16)
  {
    v5 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v15[0] = a1;
  if (!v14)
    sub_22E4A06C4();
  (*(void (**)(_QWORD *, _QWORD *))(*v14 + 48))(v14, v15);
  sub_22F29D1A0((uint64_t)v9);
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  v12 = 0;
  v11 = 0uLL;
  v6 = v14;
  if (v14 == v13)
  {
    v7 = (void (**)(_QWORD *))(v13[0] + 32);
    v6 = v13;
  }
  else
  {
    if (!v14)
      return sub_22F257CF8((uint64_t)v9);
    v7 = (void (**)(_QWORD *))(*v14 + 40);
  }
  (*v7)(v6);
  return sub_22F257CF8((uint64_t)v9);
}

uint64_t sub_22F299B9C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  void *v6;
  __int128 v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v6 = v8;
  v7 = xmmword_22F44E330;
  sub_22E61131C((uint64_t)&v6, a2, &a2[a3]);
  sub_22F29CBD4(v4, (char *)v6, v7, (uint64_t)&v6);
  if (v6 != v8)
    free(v6);
  return a1;
}

uint64_t sub_22F299C40(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  llvm::MDString::get();
  result = llvm::MDTuple::getImpl();
  v3 = result;
  v4 = *(_DWORD *)(a1 + 3016);
  if (v4 >= *(_DWORD *)(a1 + 3020))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a1 + 3016);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 3008) + 8 * v4) = v3;
  ++*(_DWORD *)(a1 + 3016);
  return result;
}

void sub_22F299CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t Impl;
  unsigned int v12;
  void *v13;
  __int128 v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = xmmword_22F44E330;
  v10 = sub_22E699F3C((_QWORD *)a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v10 + 176))(v10, a2, a3, a4, a5, &v13);
  if ((_QWORD)v14)
  {
    llvm::MDString::get();
    Impl = llvm::MDTuple::getImpl();
    v12 = *(_DWORD *)(a1 + 3016);
    if (v12 >= *(_DWORD *)(a1 + 3020))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 3016);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 3008) + 8 * v12) = Impl;
    ++*(_DWORD *)(a1 + 3016);
  }
  if (v13 != v15)
    free(v13);
}

void sub_22F299E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Impl;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  __int128 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 76) == 3)
  {
    v11 = (void *)llvm::MDString::get();
    Impl = llvm::MDTuple::getImpl();
    v7 = *(_DWORD *)(a1 + 3160);
    if (v7 >= *(_DWORD *)(a1 + 3164))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 3160);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 3152) + 8 * v7) = Impl;
    ++*(_DWORD *)(a1 + 3160);
  }
  else
  {
    v11 = v13;
    v12 = xmmword_22F45B820;
    v8 = sub_22E699F3C((_QWORD *)a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 168))(v8, a2, a3, &v11);
    llvm::MDString::get();
    v9 = llvm::MDTuple::getImpl();
    v10 = *(_DWORD *)(a1 + 3016);
    if (v10 >= *(_DWORD *)(a1 + 3020))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 3016);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 3008) + 8 * v10) = v9;
    ++*(_DWORD *)(a1 + 3016);
    if (v11 != v13)
      free(v11);
  }
}

uint64_t sub_22F299FA8(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_22F246F88((llvm::StringMapImpl *)(a1 + 1728), a2, a3);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 8);
  if (!v5)
  {
    llvm::ConstantDataArray::getString();
    v5 = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 32) & 0xFFFFFF3F | 0x80;
    *(_QWORD *)(v4 + 8) = v5;
  }
  return v5;
}

uint64_t sub_22F29A088(uint64_t a1, int a2)
{
  _QWORD *v3;
  const void *v5;
  size_t v6;
  size_t v7;
  char *__s;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 1992);
  sub_22F1E2F68((uint64_t)v3, a2, 1, (uint64_t)&__s);
  v5 = __s;
  if (__s)
  {
    v7 = strlen(__s);
  }
  else
  {
    v5 = sub_22F1E3690(v3, a2, 0);
    v7 = v6;
  }
  return sub_22F299FA8(a1, v5, v7);
}

uint64_t sub_22F29A110(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 1992);
  sub_22F1E2F68(v2, a2, 1, (uint64_t)&v5);
  if (!v5)
    sub_22F423CC4(v2, a2, 0);
  return llvm::ConstantInt::get();
}

uint64_t sub_22F29A190(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t BitCast;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  void *v23;
  uint64_t v24;
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29[4];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a2 + 48);
  if (!(_DWORD)v3)
    return llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 120), (llvm::PointerType *)a2);
  v4 = *(uint64_t ***)(a2 + 56);
  v26 = v28;
  v27 = 0x2000000000;
  v5 = 8 * v3;
  v6 = 8 * v3;
  v7 = v4;
  do
  {
    sub_22EFF68AC(*v7, &v18);
    sub_22F3645E0((unsigned int *)&v18, (uint64_t)&v26);
    if (v18 >= 2)
      sub_22EF53BC0((uint64_t *)&v18);
    ++v7;
    v6 -= 8;
  }
  while (v6);
  LODWORD(v18) = sub_22E3D0BF8(v26, (uint64_t)v26 + 4 * v27);
  v8 = sub_22E3C32F4(a1 + 1760, &v18);
  BitCast = *(_QWORD *)(v8 + 8);
  if (!BitCast)
  {
    v11 = v8;
    v23 = v25;
    v24 = 0x400000000;
    if (v3 >= 5)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = (_QWORD *)a1;
    v19[0] = 0;
    *(_QWORD *)((char *)v19 + 5) = 0;
    v20 = v22;
    v21 = 0x400000000;
    do
    {
      v12 = *v4;
      sub_22F0D5A50((*v4)[2]);
      v14 = v13;
      sub_22EFF68AC(v12, v29);
      v15 = sub_22F262D70(&v18, v14, (int)v29, v12[1]);
      if (LODWORD(v29[0]) >= 2)
        sub_22EF53BC0(v29);
      v16 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v24;
      }
      *((_QWORD *)v23 + v16) = v15;
      LODWORD(v24) = v24 + 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
    llvm::ConstantStruct::getTypeForElements();
    llvm::ConstantStruct::get();
    v17 = llvm::User::operator new((llvm::User *)0x58);
    v29[0] = (uint64_t)".args";
    v30 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    *(_DWORD *)(v17 + 32) = *(_DWORD *)(v17 + 32) & 0xFFFFFF3F | 0x80;
    BitCast = llvm::ConstantExpr::getBitCast();
    *(_QWORD *)(v11 + 8) = BitCast;
    if (v20 != v22)
      free(v20);
    if (v23 != v25)
      free(v23);
  }
  if (v26 != v28)
    free(v26);
  return BitCast;
}

uint64_t sub_22F29A4A4(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3, int a4)
{
  int AddressSpace;

  sub_22F299FA8(a1, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
  sub_22F29A088(a1, a4);
  sub_22F29A110(a1, a4);
  sub_22F29A190(a1, a3);
  AddressSpace = llvm::GlobalValue::getAddressSpace(a2);
  if (AddressSpace != *(_DWORD *)(llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200)) + 16))
  {
    llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
    llvm::PointerType::get();
    llvm::ConstantExpr::getAddrSpaceCast();
  }
  llvm::ConstantExpr::getBitCast();
  llvm::ConstantExpr::getBitCast();
  llvm::ConstantExpr::getBitCast();
  llvm::ConstantStruct::getTypeForElements();
  return llvm::ConstantStruct::get();
}

uint64_t sub_22F29A604(uint64_t a1, uint64_t a2, llvm::GlobalValue *a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  result = sub_22F255ABC(a2);
  v7 = (uint64_t *)result;
  v9 = v8;
  while (1)
  {
    v10 = v7;
    if (v7 >= v9)
    {
      if (v7 == v9)
        return result;
      v11 = v9;
      while (*(_WORD *)(*v11 + 32) != 77)
      {
        if (++v11 == v7)
          return result;
      }
      v10 = v7;
    }
    else
    {
      while (*(_WORD *)(*v10 + 32) != 77)
      {
        if (++v10 == v9)
          return result;
      }
      v11 = v9;
    }
    if (v10 == v11)
      break;
    do
    {
      v13 = *v7++;
      v12 = v13;
    }
    while (*(_WORD *)(v13 + 32) != 77);
    v14 = sub_22F29A4A4(a1, a3, v12, *(_DWORD *)(a2 + 24));
    v16 = v14;
    v15 = *(uint64_t **)(a1 + 1688);
    if ((unint64_t)v15 >= *(_QWORD *)(a1 + 1696))
    {
      result = (uint64_t)sub_22E4A02B0((void **)(a1 + 1680), &v16);
    }
    else
    {
      *v15 = v14;
      result = (uint64_t)(v15 + 1);
    }
    *(_QWORD *)(a1 + 1688) = result;
  }
  return result;
}

uint64_t sub_22F29A70C(uint64_t a1, llvm::Value *this, int a3)
{
  int v4;
  uint64_t v5;

  if (!a3 || (v4 = sub_22F43FB50(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2016), a3)) == 0)
  {
    llvm::Value::getName(this);
    v4 = sub_22F43F8AC();
  }
  v5 = 0;
  switch(v4)
  {
    case 0:
      return v5;
    case 1:
    case 2:
      goto LABEL_6;
    case 3:
      llvm::Function::addFnAttr();
LABEL_6:
      llvm::Function::addFnAttr();
      return 1;
    default:
      return 1;
  }
}

unint64_t sub_22F29A81C(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t GlobalVariable;
  uint64_t BitCast;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  sub_22E624994(a1, a2, 0);
  v4 = *(unsigned __int8 *)(a1 + 130);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    if (v4)
      return GlobalVariable & 0xFFFFFFFFFFFFFFF8;
    else
      return GlobalVariable;
  }
  v13 = a1;
  v14[0] = 0;
  *(_QWORD *)((char *)v14 + 5) = 0;
  v15 = v17;
  v16 = 0x400000000;
  v8 = sub_22EFD8DF4(a2);
  if (*(_DWORD *)v8)
  {
    v9 = sub_22EFD8DF4(a2);
    v10 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v10 & 8) != 0)
      v11 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v11 = 0;
    sub_22F262ED4((uint64_t)&v13, (uint64_t)v9, v11);
  }
  else
  {
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 8), (llvm::Type *)8);
    llvm::ConstantDataSequential::getImpl();
    llvm::ConstantStruct::getTypeForElements();
    llvm::ConstantStruct::get();
  }
  BitCast = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 76);
  if ((v12 - 8) >= 2 && v12 != 5)
  {
    llvm::Value::getName((llvm::Value *)BitCast);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  sub_22E62876C(a1, (llvm::GlobalValue *)BitCast);
  if (*(_DWORD *)v8)
  {
    sub_22E507758((uint64_t)&v13, BitCast);
    if (!v4)
      goto LABEL_16;
    goto LABEL_15;
  }
  sub_22E66C868(a1 + 280, *(_QWORD *)(a2 + 48), 0);
  llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)BitCast);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  if (v4)
LABEL_15:
    BitCast &= 0xFFFFFFFFFFFFFFF8;
LABEL_16:
  if (v15 != v17)
    free(v15);
  return BitCast;
}

unint64_t sub_22F29AB14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  v4 = sub_22EF5D130(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 48));
  v5 = sub_22F24C2B0(a1 + 1840, &v16);
  v6 = v5[1];
  if (v6)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v4) ^ 0x3F) >> 3);
    if (v4)
      return v7;
    else
      return v5[1];
  }
  else
  {
    v10 = v5;
    v17 = a1;
    v18[0] = 0;
    *(_QWORD *)((char *)v18 + 5) = 0;
    v19 = v21;
    v20 = 0x400000000;
    v11 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v11 & 8) != 0)
      v12 = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v12 = 0;
    sub_22F262ED4((uint64_t)&v17, a2 + 64, v12);
    v13 = llvm::User::operator new((llvm::User *)0x58);
    v14 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFFFFF3F | 0x80;
    v15 = __clz(v4);
    llvm::GlobalObject::setAlignment();
    sub_22E507758((uint64_t)&v17, v13);
    v10[1] = v13;
    if (v4)
      v8 = v13 & 0xFFFFFFFFFFFFFFF8 | ((v15 ^ 0x3Fu) >> 3);
    else
      v8 = v13;
    if (v19 != v21)
      free(v19);
  }
  return v8;
}

unint64_t sub_22F29AD00(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t GlobalVariable;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  sub_22E624994((uint64_t)a1, a2, 0);
  v4 = sub_22E62D754(a1, *(_QWORD *)(a2 + 48), 0, 0, 0);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v6 = GlobalVariable & 0xFFFFFFFFFFFFFFF8 | ((__clz(v4) ^ 0x3F) >> 3);
    if (v4)
      return v6;
    else
      return GlobalVariable;
  }
  else
  {
    v14 = a1;
    v15[0] = 0;
    *(_QWORD *)((char *)v15 + 5) = 0;
    v16 = v18;
    v17 = 0x400000000;
    v9 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v9 & 8) != 0)
      v10 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v10 = 0;
    if (sub_22F262ED4((uint64_t)&v14, a2 + 64, v10))
    {
      v11 = llvm::User::operator new((llvm::User *)0x58);
      llvm::GlobalVariable::GlobalVariable();
      v12 = *(_DWORD *)(a1[27] + 76);
      if ((v12 - 8) >= 2 && v12 != 5)
      {
        llvm::Value::getName((llvm::Value *)v11);
        llvm::Module::getOrInsertComdat();
        llvm::GlobalObject::setComdat();
      }
      sub_22E507758((uint64_t)&v14, v11);
      v13 = v11 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v4) ^ 0x3F) >> 3);
      if (v4)
        v7 = v13;
      else
        v7 = v11;
    }
    else
    {
      sub_22E6285D0((uint64_t)a1, a2, "template parameter object");
      v7 = 0;
    }
    if (v16 != v18)
      free(v16);
  }
  return v7;
}

uint64_t sub_22F29AF48(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalValue *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v4 = sub_22E63E268(v5);
  }
  else
  {
    v4 = 0;
  }
  v6 = sub_22EF5B404(*(_QWORD *)(a1 + 144), v2, 0);
  v7 = sub_22E66C868(a1 + 280, *(_QWORD *)(v2 + 48), 0);
  if (llvm::Module::getNamedValue())
  {
    sub_22EF5CF80(*(_QWORD *)(a1 + 144), *(_QWORD *)(v2 + 48));
    llvm::PointerType::get();
    result = llvm::ConstantExpr::getBitCast();
    v9 = result & 0xFFFFFFFFFFFFFFF8 | ((__clz(v6) ^ 0x3F) >> 3);
    if (v6)
      return v9;
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 40);
    v11 = *(unsigned int *)(v4 + 36);
    if (*(_BYTE *)(v7 + 8) == 14)
    {
      if (sub_22E462B18(v2))
        v2 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
      v12 = (llvm::GlobalValue *)sub_22E62D908(a1, v10, v11, v7, v2, 0, 0, 0, 0, 0, 0);
    }
    else
    {
      v12 = (llvm::GlobalValue *)sub_22E62E820(a1, v10, v11, v7, 0, 0, 0);
    }
    v13 = (unint64_t)v12;
    v14 = *((_DWORD *)v12 + 8);
    *((_DWORD *)v12 + 8) = v14 & 0xFFFFFFF0 | 9;
    if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v12) & 1) == 0)
      *(_DWORD *)(v13 + 32) |= 0x4000u;
    sub_22E3BA850(a1 + 888, (const void *)v13);
    v15 = v13 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v6) ^ 0x3F) >> 3);
    if (v6)
      return v15;
    else
      return v13;
  }
  return result;
}

unsigned __int8 *sub_22F29B130(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *result;
  unint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  _DWORD *v12;
  const char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  if (sub_22F096440(*(uint64_t **)(*(_QWORD *)(a1 + 224) + 16), a2))
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 0;
    sub_22EFC8E88(a2);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    i = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      for (i = *(uint64_t **)v7; *(_WORD *)(*i + 32) != 109; ++i)
      {
        v11 -= 8;
        if (!v11)
          return 0;
      }
    }
    if (i == &v8[v9])
      return 0;
    do
    {
      v18 = *v8++;
      v17 = v18;
    }
    while (*(_WORD *)(v18 + 32) != 109);
    v13 = *(const char **)(v17 + 40);
    v14 = *(unsigned int *)(v17 + 36);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v5 == 0)
    {
      v14 = 0;
      v13 = "";
    }
    else
    {
      v12 = *(_DWORD **)(v5 + 16);
      v15 = *v12;
      v13 = (const char *)(v12 + 4);
      v14 = v15;
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 15208);
  v19[0] = v13;
  v19[1] = v14;
  v19[2] = v16;
  result = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (result)
    return (unsigned __int8 *)sub_22E631674((uint64_t)v19, result);
  return result;
}

void sub_22F29B240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 32))(a2 & 0xFFFFFFFFFFFFFFF8)
                 + 84) & 0x10) != 0
    && sub_22EFC0D04(v6))
  {
    sub_22EFC8E88(v6);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 128)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_28;
      }
    }
    if (v19 == &v17[v18])
    {
LABEL_28:
      v21 = 0;
    }
    else
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 128);
    }
    if (*(_DWORD *)(v21 + 36))
    {
      v23 = 0;
      do
      {
        sub_22E631870();
        ++v23;
      }
      while (v23 < *(unsigned int *)(v21 + 36));
    }
  }
  else if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 84) & 0x10) != 0
         && sub_22EFC0D64(v6))
  {
    sub_22EFC8E88(v6);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 328)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_8;
      }
    }
    if (v10 == &v8[v9])
    {
LABEL_8:
      v12 = 0;
    }
    else
    {
      do
      {
        v15 = *v8++;
        v12 = v15;
      }
      while (*(_WORD *)(v15 + 32) != 328);
    }
    v13 = *(unsigned int *)(v12 + 36);
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        if (sub_22F29B454(*(_QWORD *)(v12 + 40), i))
        {
          sub_22E631870();
          v13 = *(unsigned int *)(v12 + 36);
        }
      }
    }
    sub_22E631D88(a1, a2, a3);
  }
  else
  {
    sub_22E631870();
  }
}

BOOL sub_22F29B454(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;

  if (!a2)
    return 1;
  v2 = 0;
  v3 = a1 + 16 * a2;
  v5 = *(const void **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = 16 * a2;
  v7 = (_QWORD *)(a1 + 8);
  do
  {
    v8 = *v7 == v4;
    if (v4)
    {
      if (*v7 == v4)
        v8 = memcmp((const void *)*(v7 - 1), v5, v4) == 0;
    }
    v2 += v8;
    v7 += 2;
    v6 -= 16;
  }
  while (v6);
  return v2 == 0;
}

uint64_t sub_22F29B4E4(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22F29D4E0(a1, a2, a3, a4);
  v6 = *(_QWORD *)a1 + 168 * v5;
  v7 = *a2;
  v8 = *(_BYTE **)a4;
  v9 = *(unsigned int *)(a4 + 8);
  v10 = *a3;
  *(_QWORD *)v6 = v7;
  *(_OWORD *)(v6 + 8) = v10;
  *(_QWORD *)(v6 + 32) = 0x800000000;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  result = sub_22F29D690(v6 + 24, v8, &v8[16 * v9]);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F29B568(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1 + 168 * v5;
  v7 = a2 + 168;
  if (a2 + 168 != v6)
  {
    do
    {
      *(_QWORD *)(v7 - 168) = *(_QWORD *)v7;
      *(_OWORD *)(v7 - 160) = *(_OWORD *)(v7 + 8);
      sub_22F2528D0(v7 - 144, v7 + 24);
      v7 += 168;
    }
    while (v7 != v6);
    v5 = *((_DWORD *)a1 + 2);
    v4 = *a1;
  }
  v8 = v5 - 1;
  *((_DWORD *)a1 + 2) = v8;
  v9 = v4 + 168 * v8;
  v10 = *(void **)(v9 + 24);
  if (v10 != (void *)(v9 + 40))
    free(v10);
  return a2;
}

uint64_t sub_22F29B608(uint64_t a1, uint64_t a2)
{
  llvm::Value *v3;

  v3 = (llvm::Value *)sub_22E6336F0(a1, a2, 0, 0, 0, 0, 0);
  llvm::Value::stripPointerCasts(v3);
  llvm::NoCFIValue::get();
  llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 232), 0);
  return llvm::ConstantExpr::getBitCast();
}

llvm::Value *sub_22F29B660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Value *v5;
  llvm::GlobalValue *v6;

  v5 = (llvm::Value *)sub_22E62E820(a1, a3, a4, a2, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 52) >> 30) & 1, 0, 0);
  v6 = (llvm::GlobalValue *)llvm::Value::stripPointerCasts(v5);
  sub_22E62876C(a1, v6);
  return v5;
}

uint64_t sub_22F29B6C0(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v9;
  char *v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  llvm::Value *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(result + 824);
  if (v2)
  {
    v3 = result;
    if ((*(_QWORD *)(*(_QWORD *)(result + 184) + 96) & 0x1800000000000000) != 0)
    {
      v5 = *(_QWORD *)(a2 + 48);
      v6 = sub_22E66C868(result + 280, v5, 0);
      v7 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v7 == 0)
      {
        v11 = 0;
        v10 = "";
      }
      else
      {
        v9 = *(_DWORD **)(v7 + 16);
        v12 = *v9;
        v10 = (char *)(v9 + 4);
        v11 = v12;
      }
      v13 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v13 & 8) != 0)
        v14 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        v14 = 0;
      v15 = (llvm::Value *)sub_22E62E820(v3, v10, v11, v6, v14, a2, 0);
      v16 = llvm::Value::stripPointerCasts(v15);
      return sub_22E49E51C(v2, v16, a2);
    }
  }
  return result;
}

unint64_t sub_22F29B798(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t DataLayout;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 144);
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
  sub_22E3C304C(DataLayout, a2);
  v5 = llvm::TypeSize::operator unsigned long long();
  return v5 / sub_22EF5CDF0(v3, *(_QWORD *)(*(_QWORD *)(v3 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F29B808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 152);
  if ((*(_DWORD *)(v1 + 52) & 0x40000000) != 0)
    return 3;
  v2 = *(_QWORD *)(v1 + 100);
  if ((v2 & 0x2000000000) != 0)
    return 13;
  if ((v2 & 0x400000000) != 0)
    return 19;
  if ((*(_BYTE *)(v1 + 68) & 0x40) != 0
    && (*(_WORD *)(v1 + 96) & 0x80) != 0
    && (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 56) & 0xFFFFFFFE) == 0x3A)
  {
    return 8;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 688))(*(_QWORD *)(a1 + 216));
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return 0;
}

uint64_t sub_22F29B88C(uint64_t a1, unint64_t a2, int a3)
{
  int v6;

  v6 = sub_22EF732CC(*(_QWORD **)(a1 + 144), a2);
  return sub_22E629FAC((_QWORD *)a1, a2, v6, a3);
}

void sub_22F29B8D0(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (uint64_t *)sub_22F255ABC(a2);
  v7 = v6;
  while (1)
  {
    v8 = v5;
    if (v5 >= v7)
    {
      if (v5 == v7)
        return;
      v9 = v7;
      while (*(_WORD *)(*v9 + 32) != 325)
      {
        if (++v9 == v5)
          return;
      }
      v8 = v5;
    }
    else
    {
      while (*(_WORD *)(*v8 + 32) != 325)
      {
        if (++v8 == v7)
          return;
      }
      v9 = v7;
    }
    if (v8 == v9)
      break;
    do
    {
      v11 = *v5++;
      v10 = v11;
    }
    while (*(_WORD *)(v11 + 32) != 325);
    sub_22E637630(a1, a3, v10);
  }
}

uint64_t sub_22F29B990()
{
  return llvm::Intrinsic::getDeclaration();
}

unint64_t sub_22F29B998(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 184);
  if ((*(_BYTE *)(v1 + 80) & 0x20) != 0)
    return ((unint64_t)*(unsigned __int16 *)(v1 + 64) >> 2) & 1;
  else
    return 1;
}

unint64_t sub_22F29B9B8(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 3320);
  if (result <= 0xF)
  {
    v3 = (_QWORD *)sub_22F368234(*(_QWORD *)(a1 + 144), "__objcFastEnumerationState", 0x1AuLL, 0);
    sub_22EFC3340((unint64_t)v3);
    v4 = *(_QWORD *)(a1 + 144);
    v16[0] = *(_QWORD *)(v4 + 16536);
    v5 = sub_22F36E1B8(v4);
    v6 = *(_QWORD *)(v5 + 48);
    if (v6)
      v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    else
      v7 = sub_22EF6462C(v4, v5);
    v16[1] = sub_22EF5B848(v4, v7, 0);
    v16[2] = sub_22EF5B848(*(_QWORD *)(a1 + 144), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16536), 0);
    v8 = *(_QWORD *)(a1 + 144);
    v9 = *(_QWORD *)(v8 + 16536);
    v15 = 32;
    v14 = 5;
    v16[3] = sub_22EF5FE30(v8, v9, (const llvm::APInt *)&v14, 0, 0, 0);
    if (v15 >= 0x41 && v14)
      MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
    v10 = 0;
    if (v3)
      v11 = (uint64_t)(v3 + 8);
    else
      v11 = 0;
    do
    {
      v12 = sub_22EFC2D88(*(_QWORD *)(a1 + 144), v11, 0, 0, 0, v16[v10], 0, 0, 0, 0);
      *(_DWORD *)(v12 + 28) &= 0xFFFF9FFF;
      sub_22EFCCFA0((uint64_t)(v3 + 8), v12);
      ++v10;
    }
    while (v10 != 4);
    (*(void (**)(_QWORD *))(*v3 + 104))(v3);
    v13 = v3[6];
    if (v13)
      result = v13 & 0xFFFFFFFFFFFFFFF0;
    else
      result = sub_22EF6462C(*(_QWORD *)(a1 + 144), (unint64_t)v3);
    *(_QWORD *)(a1 + 3320) = result;
  }
  return result;
}

unint64_t sub_22F29BB8C(_QWORD *a1, uint64_t a2, const char *a3)
{
  unint64_t v5;
  uint64_t String;
  uint64_t v7;
  uint64_t *v8;
  llvm::Value *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;

  v5 = sub_22EF5D1B0(a1[18], *(_QWORD *)(a1[18] + 16408));
  String = llvm::ConstantDataArray::getString();
  v18 = String;
  if ((*(_QWORD *)(a1[19] + 8) & 0x8000000000) != 0)
  {
    v7 = String;
    v8 = 0;
  }
  else
  {
    v8 = sub_22F25E108(a1 + 227, &v18) + 1;
    v12 = *v8;
    if (*v8)
    {
      v13 = *(_WORD *)(v12 + 34);
      v14 = (v13 & 0x3F) == 0;
      v15 = (v13 & 0x3F) - 1;
      if (v14)
        v15 = 0;
      v16 = 1 << v15;
      if (v14)
        v16 = 0;
      if (v5 <= v16)
      {
        result = sub_22E636614(a1, v12);
        if (!v5)
          return result;
        v17 = __clz(v5);
      }
      else
      {
        v17 = __clz(v5);
        llvm::GlobalObject::setAlignment();
        result = sub_22E636614(a1, v12);
      }
      return result & 0xFFFFFFFFFFFFFFF8 | ((v17 ^ 0x3Fu) >> 3);
    }
    v7 = v18;
  }
  if (!a3)
    a3 = ".str";
  strlen(a3);
  v9 = sub_22E6366B0(v7, 8, (uint64_t)a1);
  if (v8)
    *v8 = (uint64_t)v9;
  result = sub_22E636614(a1, (uint64_t)v9);
  v11 = result & 0xFFFFFFFFFFFFFFF8 | ((__clz(v5) ^ 0x3F) >> 3);
  if (v5)
    return v11;
  return result;
}

unint64_t sub_22F29BD48(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39[4];
  char v40;
  char v41;
  _BYTE v42[72];
  uint64_t v43;
  char v44;
  _QWORD *v45;
  _QWORD v46[3];
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  char v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53[9];
  void *v54;
  __int128 v55;
  _WORD v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a2 + 2);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
  {
    v9 = v7 + 40;
    v7 = *(_QWORD *)(v7 + 40);
    v8 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v8 = 0;
  }
  if ((unsigned __int8 *)v7 == a3)
    v10 = a2;
  else
    v10 = a3;
  v11 = *((_QWORD *)v10 + 1);
  v12 = sub_22EF5D130(a1[18], v11);
  v54 = a2;
  *(_QWORD *)&v55 = 0;
  sub_22F2543D4((uint64_t)&v43, (uint64_t)(a1 + 239), (uint64_t *)&v54, &v55);
  if (!v44)
  {
    v13 = v43;
    v14 = *(_QWORD *)(v43 + 8);
    if (!v14)
    {
      sub_22E66C868((uint64_t)(a1 + 35), v11, 0);
      v14 = llvm::User::operator new((llvm::User *)0x58);
      v56[4] = 257;
      *(_QWORD *)(v13 + 8) = llvm::GlobalVariable::GlobalVariable();
    }
    llvm::Value::stripPointerCasts((llvm::Value *)v14);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v12) ^ 0x3F) >> 3);
    if (v12)
      return v15;
    else
      return v14;
  }
  v54 = v56;
  v55 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v42, (uint64_t)&v54);
  v18 = *((_QWORD *)a2 + 2);
  if ((v18 & 4) != 0)
    v19 = *(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 56);
  else
    v19 = 0;
  (*(void (**)(_QWORD, unint64_t, uint64_t, _BYTE *))(**(_QWORD **)(a1[28] + 16) + 96))(*(_QWORD *)(a1[28] + 16), v8, v19, v42);
  v20 = *((_QWORD *)a2 + 2);
  if ((v20 & 4) != 0)
  {
    v21 = v8 != 0;
    if (sub_22F3B2674(v20 & 0xFFFFFFFFFFFFFFF8) == 3 && v8)
    {
      if (sub_22EFBCF80(v8))
      {
        v37 = sub_22F3B2724(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFF8, 0);
        v51 = 0;
        v52 = 0;
        LODWORD(v53[0]) = 0;
        if (v37)
        {
          v22 = (uint64_t *)v37;
        }
        else if (sub_22F005120(a3, (uint64_t)&v51, a1[18], 0))
        {
          if ((_BYTE)v51)
            v22 = 0;
          else
            v22 = v53;
        }
        else
        {
          v22 = 0;
        }
        goto LABEL_29;
      }
      v21 = 1;
    }
  }
  else
  {
    v21 = v8 != 0;
  }
  v51 = 0;
  v52 = 0;
  v22 = v53;
  LODWORD(v53[0]) = 0;
  if ((sub_22F005120(a3, (uint64_t)&v51, a1[18], 0) & 1) != 0)
  {
    if ((_BYTE)v51)
      v22 = 0;
    if (!v21)
      goto LABEL_59;
LABEL_29:
    v23 = sub_22E633E44((uint64_t)a1, v8);
    goto LABEL_30;
  }
  v22 = 0;
  if (v21)
    goto LABEL_29;
LABEL_59:
  v34 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v34 & 8) != 0)
    v23 = *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v23 = 0;
LABEL_30:
  LOBYTE(v45) = 0;
  v50 = 0;
  if (v22)
  {
    v45 = a1;
    v46[0] = 0;
    *(_QWORD *)((char *)v46 + 5) = 0;
    v47 = v49;
    v48 = 0x400000000;
    v50 = 1;
    sub_22F262ED4((uint64_t)&v45, (uint64_t)v22, v23);
    LODWORD(v22) = sub_22E62D664((uint64_t)a1, v11, 1);
  }
  else
  {
    sub_22E66C868((uint64_t)(a1 + 35), v11, 0);
  }
  v24 = sub_22EF732CC((_QWORD *)a1[18], v8);
  if (!sub_22E629FAC(a1, v8, v24, (int)v22))
  {
    v39[0] = 0;
    if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x40)
    {
      v35 = *(_QWORD *)(v8 + 16);
      v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if ((v35 & 4) != 0)
        v36 = *(_QWORD *)v36;
      if ((*(_WORD *)(v36 + 8) & 0x7Eu) - 34 <= 3)
        sub_22EFBC530(v8, v39);
    }
  }
  v38 = v23;
  v25 = 1;
  v16 = llvm::User::operator new((llvm::User *)0x58);
  v26 = v55;
  if ((unint64_t)(v55 + 1) > *((_QWORD *)&v55 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v26 = v55;
  }
  *((_BYTE *)v54 + v26) = 0;
  v41 = 1;
  if (*(_BYTE *)v54)
  {
    v39[0] = (uint64_t)v54;
    v25 = 3;
  }
  v40 = v25;
  v27 = llvm::GlobalVariable::GlobalVariable();
  if (v50)
    v27 = sub_22E507758((uint64_t)&v45, v16);
  sub_22E628990(v27, (unsigned int *)v16, v8);
  sub_22E628A68((uint64_t)a1, (llvm::GlobalValue *)v16, v8);
  if ((*(_DWORD *)(v16 + 32) & 0x300) == 0x200)
    *(_DWORD *)(v16 + 32) &= 0xFFFFFCFF;
  v28 = __clz(v12);
  llvm::GlobalObject::setAlignment();
  v29 = *(_DWORD *)(a1[27] + 76);
  if ((v29 - 8) >= 2
    && v29 != 5
    && (*(_DWORD *)(v16 + 32) & 0xFu) <= 0xA
    && ((1 << (*(_DWORD *)(v16 + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName((llvm::Value *)v16);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  sub_22EFBB794(v8);
  if (v30)
    sub_22E628BA0((uint64_t)a1, v16, v8);
  if (v38)
  {
    v31 = sub_22E699F3C(a1);
    v32 = llvm::PointerType::get();
    v16 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v31 + 224))(v31, a1, v16, v38, 0, v32);
  }
  v39[0] = (uint64_t)a2;
  v33 = sub_22F24C2B0((uint64_t)(a1 + 239), v39);
  if (v33[1])
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v33[1]);
  }
  v33[1] = v16;
  if (v12)
    v16 = v16 & 0xFFFFFFFFFFFFFFF8 | ((v28 ^ 0x3Fu) >> 3);
  if (v50 && v47 != v49)
    free(v47);
  if (LODWORD(v53[0]) >= 2)
    sub_22EF53BC0(v53);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v42);
  if (v54 != v56)
    free(v54);
  return v16;
}

void sub_22F29C430(uint64_t a1, uint64_t a2)
{
  if (((unsigned __int16)*(_DWORD *)(a2 + 48) >> 13) - 1 >= 2)
    sub_22E6285D0(a1, a2, "linkage spec");
  else
    sub_22E636C78(a1, a2 + 40);
}

uint64_t sub_22F29C458(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = 0;
  if (!sub_22F25AFD8((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_22F29C4C0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F2899F0(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

uint64_t sub_22F29C578(uint64_t a1, llvm::Type *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *(_QWORD *)(a1 + 152);
  if ((a3 & 1) == 0 && (*(_QWORD *)(v3 + 8) & 0x8000000000000) == 0)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 96), a2);
  if ((*(_WORD *)(v3 + 96) & 0x80) != 0)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 96), a2);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = !(_DWORD)v4 || (v4 & 0x800000000) == 0;
  if (!v5 && (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 56) & 0xFFFFFFFE) == 0x2C)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 96), a2);
  if (a3
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 32
    && *(_DWORD *)(v3 + 400) >= 5u)
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 784) + 48))(*(_QWORD *)(a1 + 784));
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 264))(*(_QWORD *)(a1 + 224));
}

uint64_t sub_22F29C610(uint64_t a1, unint64_t a2)
{
  return sub_22E6371C0(a1, a2, a1 + 3576, ".virtual", 8uLL);
}

BOOL sub_22F29C624(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 256);
  if ((v1 & 0x4000000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 184) + 1262) & 4) == 0
    || (v1 & 0x2000000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 184) + 1262) & 2) == 0
    || (v1 & 0x200000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 184) + 1261) & 0x20) == 0)
  {
    return 1;
  }
  if ((v1 & 0x1000000000000) != 0)
    return (*(_BYTE *)(*(_QWORD *)(a1 + 184) + 1262) & 1) == 0;
  return 0;
}

uint64_t sub_22F29C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MDString *v5;
  uint64_t result;

  v5 = (llvm::MDString *)sub_22E6371C0(a1, *(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0, a1 + 3552, "", 0);
  llvm::GlobalObject::addTypeMetadata();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 35) & 0x80) != 0 && sub_22E62A49C(a1, v5))
  {
    llvm::ValueAsMetadata::get();
    llvm::GlobalObject::addTypeMetadata();
  }
  result = sub_22F29C624(a1);
  if ((_DWORD)result)
  {
    llvm::MDString::get();
    return llvm::GlobalObject::addTypeMetadata();
  }
  return result;
}

llvm::Value *sub_22F29C74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  _QWORD **v11;
  _QWORD *v12[2];
  int v13;
  char v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v12[0] = *(_QWORD **)(a3 + 144);
  v12[1] = (_QWORD *)a3;
  v13 = 0;
  v14 = 0;
  v15 = v17;
  v16 = 0x400000000;
  v6 = (_QWORD **)sub_22F262DEC(v12, a2, *(_QWORD *)(a2 + 8));
  if (v15 != v17)
    free(v15);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 792) + 80))(*(_QWORD *)(a1 + 792), *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
  v12[0] = *v6;
  v7 = llvm::FunctionType::get();
  v8 = sub_22E633A04(a1, v7, "__translate_sampler_initializer", 0x1FuLL, 0, 0, 0);
  v11 = v6;
  LOWORD(v15) = 257;
  return sub_22E479C7C(a3, v8, v9, (uint64_t)&v11, 1, (uint64_t)v12);
}

uint64_t sub_22F29C888(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 3672);
  if (!result)
  {
    result = sub_22E62E820(a1, "objc_absolute_packed_isa_class_mask", 0x23uLL, *(_QWORD *)(a1 + 8), 0, 0, 0);
    *(_QWORD *)(a1 + 3672) = result;
  }
  return result;
}

uint64_t sub_22F29C8D4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 3680);
  if (!result)
  {
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_QWORD *)(result + 48) = 0;
    *(_DWORD *)(result + 56) = 1065353216;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_DWORD *)(result + 96) = 1065353216;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_DWORD *)(result + 136) = 1065353216;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_DWORD *)(result + 176) = 1065353216;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)(result + 192) = a1;
    *(_DWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    v3 = *(_QWORD *)(a1 + 3680);
    *(_QWORD *)(a1 + 3680) = result;
    if (v3)
    {
      v4 = sub_22F29CF3C(v3);
      MEMORY[0x2348A0E9C](v4, 0x10A0C40ABD8F407);
      return *(_QWORD *)(a1 + 3680);
    }
  }
  return result;
}

uint64_t sub_22F29C988(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

void *sub_22F29C9FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  char *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  const char *v8;
  size_t v9;
  void *result;

  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 >= 7)
    v5 = ".anon.";
  else
    v5 = "__static__";
  v6 = sub_22E47DAC0(a2, v5);
  v8 = (const char *)sub_22EF754D4(*(_QWORD *)(a1 + 144));
  v9 = v7;
  result = (void *)*((_QWORD *)v6 + 4);
  if (v7 > *((_QWORD *)v6 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v6, v8);
  if (v7)
  {
    result = memcpy(result, v8, v7);
    *((_QWORD *)v6 + 4) += v9;
  }
  return result;
}

uint64_t sub_22F29CAA0(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(32 * *(unsigned int *)(a1 + 56)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(32 * *(unsigned int *)(a1 + 32)));
  return a1;
}

uint64_t sub_22F29CAE8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int **v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  int v12;
  int v13;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  int v20;
  int v21;
  _BOOL4 v23;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (int **)(v2 + 16 * a2);
  if (v3[1] != (int *)7
    || ((v4 = *v3, v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1634100580) ? (v7 = v6 == 1953264993) : (v7 = 0), !v7))
  {
    if (a2)
    {
      LODWORD(result) = 0;
      v9 = 16 * a2;
      v10 = (_QWORD *)(v2 + 8);
      do
      {
        if (*v10 == 7)
        {
          v11 = (int *)*(v10 - 1);
          v12 = *v11;
          v13 = *(int *)((char *)v11 + 3);
          v15 = v12 != 1634100580 || v13 != 1953264993;
        }
        else
        {
          v15 = 1;
        }
        result = (result + v15);
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
      return result;
    }
    return 0;
  }
  v16 = *(unsigned int *)(a1 + 36);
  if (!(_DWORD)v16)
    return 0;
  LODWORD(result) = 0;
  v17 = 16 * v16;
  v18 = (_QWORD *)(v2 + 8);
  do
  {
    if (*v18 == 7)
    {
      v19 = (int *)*(v18 - 1);
      v20 = *v19;
      v21 = *(int *)((char *)v19 + 3);
      v23 = v20 != 1634100580 || v21 != 1953264993;
    }
    else
    {
      v23 = 1;
    }
    result = (result + v23);
    v18 += 2;
    v17 -= 16;
  }
  while (v17);
  return result;
}

char **sub_22F29CBD4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char **result;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (char **)sub_22E63A780(a1, &v11, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = (char *)operator new(0x58uLL);
    *((_QWORD *)v8 + 4) = v8 + 56;
    *(_OWORD *)(v8 + 40) = xmmword_22F44E330;
    if (*(_QWORD *)(a4 + 8))
      sub_22E3B2DB8((uint64_t)(v8 + 32), a4);
    v9 = v11;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v8 = *v7;
    }
    result = (char **)sub_22E49FD00(*(uint64_t **)(a1 + 8), (uint64_t *)v8);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

BOOL sub_22F29CC90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 350)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F29CCF0(_WORD *a1, _WORD *a2, __n128 *a3, char **a4)
{
  sub_22E63B3B0((uint64_t)&qword_253E4D148, 0, 0);
  byte_253E4D1C8 = 0;
  qword_253E4D1D0 = (uint64_t)&unk_24FA66D30;
  *(_QWORD *)&byte_253E4D1D8 = 0;
  qword_253E4D148 = (uint64_t)off_24FA2DF38 + 16;
  qword_253E4D1E0 = MEMORY[0x24BED8408] + 16;
  qword_253E4D1E8 = (uint64_t)&unk_24FA66D50;
  qword_253E4D200 = (uint64_t)&qword_253E4D1E8;
  sub_22F29CDA4(a1, a2, a3, a4);
  return llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_253E4D148);
}

__n128 sub_22F29CDA4(_WORD *a1, _WORD *a2, __n128 *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr();
  word_253E4D152 = word_253E4D152 & 0xFFF8 | *a1 & 7;
  word_253E4D152 = (32 * (*a2 & 3)) | word_253E4D152 & 0xFF9F;
  result = *a3;
  xmmword_253E4D168 = (__int128)*a3;
  v9 = *a4;
  byte_253E4D1C8 = **a4;
  byte_253E4D1D9 = 1;
  byte_253E4D1D8 = *v9;
  return result;
}

BOOL sub_22F29CE40(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void sub_22F29CE70()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F29CE84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24FA66D50;
  return result;
}

void sub_22F29CEAC(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24FA66D50;
}

uint64_t sub_22F29CEC8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          sub_22F284C40(v6);
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F29CF3C(uint64_t a1)
{
  void **v3;

  llvm::deallocate_buffer(*(llvm **)(a1 + 216), (void *)(16 * *(unsigned int *)(a1 + 232)));
  sub_22F2449BC(a1 + 144);
  sub_22F2449BC(a1 + 104);
  sub_22F2449BC(a1 + 64);
  sub_22F2449BC(a1 + 24);
  v3 = (void **)a1;
  sub_22E63B564(&v3);
  return a1;
}

void sub_22F29CFA4(_QWORD *a1)
{
  if (a1)
  {
    sub_22F29CFA4(*a1);
    sub_22F29CFA4(a1[1]);
    sub_22F29CFE8(a1 + 5);
    operator delete(a1);
  }
}

uint64_t *sub_22F29CFE8(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x2348A0E9C](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t sub_22F29D044(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_22E54B6D0(a1 + 200, *(_QWORD **)(a1 + 208));
  v4 = (void **)(a1 + 176);
  sub_22E63B7B0(&v4);
  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_22E49FAE8(a1 + 16);
  return a1;
}

uint64_t *sub_22F29D0A0(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 33, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 32;
  if (a3)
    memcpy((void *)(v9 + 32), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  v10[1] = 6;
  v10[2] = 0;
  v10[3] = 0;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F29D1A0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E63C00C(result);
    }
  }
  return result;
}

uint64_t sub_22F29D1F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F29D274((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F29D310(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22F29D274(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F29D310(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E63E1A8(a1, v7);
  v9 = 0;
  sub_22F29D274((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F29D3C0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22F29D274((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

char **sub_22F29D46C(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 168 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5)
        free(v5);
      v4 -= 168;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F29D4E0(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;

  v8 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v9 = v8 + 168 * *(unsigned int *)(a1 + 8);
  v10 = *(_BYTE **)a4;
  v11 = *(unsigned int *)(a4 + 8);
  v12 = *a3;
  *(_QWORD *)v9 = *a2;
  *(_OWORD *)(v9 + 8) = v12;
  *(_QWORD *)(v9 + 32) = 0x800000000;
  *(_QWORD *)(v9 + 24) = v9 + 40;
  sub_22F29D690(v9 + 24, v10, &v10[16 * v11]);
  sub_22F29D5B4((uint64_t *)a1, v8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v8;
  v13 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = 0;
  return v8 + 168 * v13 - 168;
}

void sub_22F29D5B4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 168 * v2;
    v5 = (_QWORD *)(a2 + 24);
    v6 = *a1 + 24;
    do
    {
      v7 = v6 - 24;
      *(v5 - 3) = *(_QWORD *)(v6 - 24);
      *((_OWORD *)v5 - 1) = *(_OWORD *)(v6 - 16);
      *v5 = v5 + 2;
      v5[1] = 0x800000000;
      if (*(_DWORD *)(v6 + 8))
        sub_22F2528D0((uint64_t)v5, v6);
      v5 += 21;
      v6 += 168;
    }
    while (v7 + 168 != v4);
    v8 = *((_DWORD *)a1 + 2);
    if (v8)
    {
      v9 = *a1;
      v10 = 168 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 144);
        if ((void *)(v9 + v10 - 128) != v11)
          free(v11);
        v10 -= 168;
      }
      while (v10);
    }
  }
}

uint64_t sub_22F29D690(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 4) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 16 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 4);
  return result;
}

uint64_t sub_22F29D710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = 0;
  result = sub_22F29D7A0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = sub_22F29D850(a2, a3, v11);
    v7 = result;
    v10 = *(_DWORD *)(a3 + 8);
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = v10;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F29D7A0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v17;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = *(_DWORD *)(a3 + 8);
    v6 = ((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) & (a2 - 1);
    v7 = (uint64_t *)(a1 + 16 * v6);
    v8 = *v7;
    v9 = *((_DWORD *)v7 + 2);
    if (*(_QWORD *)a3 == *v7 && v5 == v9)
    {
      v11 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v8 || v9)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v9 == 0;
        if (v15 && v8 == -1)
          v13 = v7;
        v17 = v6 + v14++;
        v6 = v17 & v4;
        v7 = (uint64_t *)(a1 + 16 * (v17 & v4));
        v8 = *v7;
        v9 = *((_DWORD *)v7 + 2);
        v11 = 1;
        if (*(_QWORD *)a3 == *v7 && v5 == v9)
          goto LABEL_8;
      }
      v11 = 0;
      if (v13)
        v7 = v13;
    }
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
LABEL_8:
  *a4 = v7;
  return v11;
}

uint64_t sub_22F29D850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E654290(a1, v6);
  v8 = 0;
  sub_22F29D7A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 | *(unsigned int *)(a3 + 8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F29D904(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  void **v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;

  v11 = *(_QWORD *)a2;
  v12 = 0;
  sub_22E6544B4((uint64_t)a1, &v11, &v12, (uint64_t)&v9);
  v4 = v9;
  v5 = (void **)(a1 + 3);
  if (!v10)
    return (uint64_t)*v5 + 16 * *(unsigned int *)(v9 + 8);
  v6 = (_OWORD *)a1[4];
  if ((unint64_t)v6 >= a1[5])
  {
    v7 = sub_22E4D6CC4(v5, a2);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  a1[4] = v7;
  *(_DWORD *)(v4 + 8) = (((unint64_t)v7 - a1[3]) >> 4) - 1;
  return (uint64_t)(v7 - 1);
}

uint64_t sub_22F29D9BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E654544((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t *sub_22F29DA68(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 25, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 24;
  if (a3)
    memcpy((void *)(v9 + 24), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = a3;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *sub_22F29DB64(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F29DC5C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F29DBCC(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -1;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F29DC5C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E654750(a1, v6);
  v8 = 0;
  sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F29DD08(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if (*a2 + 1 >= 2)
    {
      v12 = 0;
      result = sub_22F29DBCC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F29DDB0(uint64_t a1, llvm::Value *this)
{
  uint64_t Name;
  uint64_t v5;

  Name = llvm::Value::getName(this);
  sub_22E654878(a1, Name, v5, *((_DWORD *)this + 8) & 0xF);
  return llvm::createPGOFuncNameMetadata();
}

uint64_t sub_22F29DE1C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[21];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 848);
  if (v4)
  {
    if ((unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 64) + 56))(*(_QWORD *)(v4 + 64)) >= 5)
    {
      if ((unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 64) + 56))(*(_QWORD *)(v4 + 64)) < 6)
        v5 = 1;
      else
        v5 = 2;
    }
    else
    {
      v5 = 0;
    }
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 64) + 56))(*(_QWORD *)(v4 + 64));
  }
  else
  {
    v5 = 2;
    v6 = 8;
  }
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 0;
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v8)
    sub_22E65B148(v8);
  LODWORD(v13) = 0;
  v14 = 0;
  v15 = 0;
  v16 = v5;
  result = llvm::MD5::MD5((llvm::MD5 *)v17);
  v17[19] = v7;
  v17[20] = v6;
  if (a2)
  {
    v10 = *(_DWORD *)(a2 + 28);
    if ((v10 & 0x7Eu) - 52 < 6 || (v12 = v10 & 0x7F, v12 <= 0x18) && ((1 << v12) & 0x1000006) != 0)
      result = sub_22E654C58(&v13, a2);
  }
  *(_DWORD *)(a1 + 48) = v13;
  v11 = v14;
  if (v15 >= 0xB)
  {
    if (v14)
    {
      if (v16 > 1)
        v18 = v14;
      else
        LOBYTE(v18) = v14;
      llvm::MD5::update();
    }
    result = llvm::MD5::final();
    v11 = v18;
  }
  *(_QWORD *)(a1 + 56) = v11;
  return result;
}

uint64_t sub_22F29DFF0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (a3)
    ++*(_DWORD *)(v5 + 856);
  ++*(_DWORD *)(v5 + 864);
  v6 = a1 + 11;
  a1[12] = a1[11];
  llvm::IndexedInstrProfReader::getInstrProfRecord();
  if ((v20 & 1) != 0 && (v7 = (_QWORD *)v17, *(_QWORD *)&v17 = 0, v7))
  {
    v16 = v7;
    v14 = sub_22F29E440(&v16);
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    if (v14 == 9 || v14 == 15)
    {
      ++*(_DWORD *)(*a1 + 872);
    }
    else if (v14 == 13)
    {
      v15 = *a1;
      if (a3)
        ++*(_DWORD *)(v15 + 860);
      ++*(_DWORD *)(v15 + 868);
    }
  }
  else
  {
    v8 = operator new();
    *(_OWORD *)v8 = v17;
    v17 = 0uLL;
    v9 = v18;
    v10 = v19;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(v8 + 24) = v10;
    v11 = a1[10];
    a1[10] = v8;
    if (v11)
    {
      v13 = sub_22F298A58(v11);
      MEMORY[0x2348A0E9C](v13, 0x30C40C0311380);
      v8 = a1[10];
    }
    if (v6 != (_QWORD *)v8)
      sub_22E65AFAC(a1 + 11, *(char **)v8, *(char **)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  }
  if ((v20 & 1) == 0)
    return sub_22F298A58((uint64_t)&v17);
  result = v17;
  *(_QWORD *)&v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22F29E1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v5)
    sub_22E65B148(v5);
  v15 = a1;
  v16 = 0;
  v18 = (uint64_t *)v4;
  v19 = v21;
  v20 = 0x800000000;
  if (a2)
  {
    v6 = *(_DWORD *)(a2 + 28);
    if ((v6 & 0x7Eu) - 52 > 5)
    {
      v7 = v6 & 0x7F;
      if (v7 != 1)
      {
        if (v7 == 2)
        {
          v12 = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8;
          v14 = v12;
          if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 96))
          {
            v13 = *(_QWORD *)(*(_QWORD *)(a1 + 88)
                            + 8 * *((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 64), &v14) + 2));
            v4 = (uint64_t)v18;
            v12 = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v13 = 0;
          }
          v17 = v13;
          v14 = v12;
          sub_22F29E634((uint64_t *)v4, &v14)[1] = v13;
          v11 = (unsigned __int8 *)(*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_13;
        }
        if (v7 != 24)
          return;
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v8 = *(uint64_t **)(a1 + 64);
    if (v8 && *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 96))
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * *((unsigned int *)sub_22E65B0E8(v8, &v14) + 2));
    else
      v9 = 0;
    v17 = v9;
    v10 = v18;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    sub_22F29E634(v10, &v14)[1] = v9;
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
LABEL_13:
    sub_22E659DC8((uint64_t)&v15, v11);
    if (v19 != v21)
      free(v19);
  }
}

_QWORD *sub_22F29E3D4(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result[11] != result[12])
  {
    v2 = 0;
    v1 = (uint64_t *)result[8];
    if (v1)
      sub_22E65B0E8(v1, &v2);
    return (_QWORD *)llvm::Function::setEntryCount();
  }
  return result;
}

uint64_t sub_22F29E440(_QWORD **a1)
{
  _QWORD *v1;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char *v6;

  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  v3 = &v4;
  v5 = v1;
  sub_22E65AE1C(&v6, &v5, &v3);
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return v4;
}

uint64_t sub_22F29E498(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _DWORD v20[16];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a3 < 2)
    return 0;
  v5 = a2;
  v7 = a2 + 1;
  v6 = *a2;
  v8 = 8 * a3;
  v9 = 8 * a3 - 8;
  v10 = a2;
  v11 = a2 + 1;
  do
  {
    v13 = *v11++;
    v12 = v13;
    v14 = v6 >= v13;
    if (v6 <= v13)
      v6 = v12;
    if (!v14)
      v10 = v7;
    v7 = v11;
    v9 -= 8;
  }
  while (v9);
  v15 = *v10;
  if (!*v10)
    return 0;
  if (v15 >= 0xFFFFFFFF)
    v16 = v15 / 0xFFFFFFFF + 1;
  else
    v16 = 1;
  v19 = 0;
  if (a3 > 0x10)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v17 = 0;
  do
  {
    v18 = *v5;
    if (v17 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v19;
    }
    v20[v17] = v18 / v16 + 1;
    v17 = ++v19;
    ++v5;
    v8 -= 8;
  }
  while (v8);
  return llvm::MDBuilder::createBranchWeights();
}

_QWORD *sub_22F29E634(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F29E690((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F29E690(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4CEA44(a1, v6);
  v8 = 0;
  sub_22F246C54((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F29E73C(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  sub_22E63B3B0((uint64_t)&qword_253E4D208, 0, 0);
  byte_253E4D288 = 0;
  qword_253E4D290 = (uint64_t)&unk_24FA66D30;
  *(_QWORD *)&byte_253E4D298 = 0;
  qword_253E4D208 = (uint64_t)off_24FA2DF38 + 16;
  qword_253E4D2A0 = MEMORY[0x24BED8408] + 16;
  qword_253E4D2A8 = (uint64_t)&unk_24FA66D50;
  qword_253E4D2C0 = (uint64_t)&qword_253E4D2A8;
  sub_22F29E7F0(a1, a2, a3, a4);
  return llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_253E4D208);
}

__n128 sub_22F29E7F0(_WORD *a1, __n128 *a2, _WORD *a3, char **a4)
{
  __n128 result;
  char *v9;

  llvm::cl::Option::setArgStr();
  word_253E4D212 = word_253E4D212 & 0xFFF8 | *a1 & 7;
  result = *a2;
  xmmword_253E4D228 = (__int128)*a2;
  word_253E4D212 = (32 * (*a3 & 3)) | word_253E4D212 & 0xFF9F;
  v9 = *a4;
  byte_253E4D288 = **a4;
  byte_253E4D299 = 1;
  byte_253E4D298 = *v9;
  return result;
}

uint64_t sub_22F29E88C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (!result)
  {
    result = llvm::MDBuilder::createTBAARoot();
    *(_QWORD *)(a1 + 144) = result;
  }
  return result;
}

uint64_t sub_22F29E8E8@<X0>(uint64_t a1@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[432];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x23489C120](v9, *(_QWORD *)(a1 + 8));
  v6 = llvm::DataLayout::getPointerTypeSizeInBits((llvm::DataLayout *)v9, a2) >> 3;
  sub_22F29E88C(a1);
  v7 = sub_22E66AB4C(a1);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = v6;
  return MEMORY[0x23489C12C](v9);
}

uint64_t sub_22F29E99C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2[18];
  *(_QWORD *)(a1 + 16) = a2[25];
  *(_QWORD *)(a1 + 24) = a2[27];
  *(_QWORD *)(a1 + 32) = a2[28];
  v3 = *(_QWORD *)(sub_22E699F3C(a2) + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 144));
  *(_QWORD *)(a1 + 160) = a1 + 192;
  *(_QWORD *)(a1 + 168) = a1 + 192;
  *(_QWORD *)(a1 + 176) = 4;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 256;
  *(_QWORD *)(a1 + 232) = a1 + 256;
  *(_QWORD *)(a1 + 240) = 4;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0x800000000;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  return a1;
}

uint64_t sub_22F29EA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)((sub_22EF6477C(*(_QWORD *)(a1 + 8), a2) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = 0;
  v6 = v3;
  result = sub_22F25AFD8((uint64_t *)(a1 + 400), &v6, &v5);
  if ((_DWORD)result)
  {
    sub_22F278254(a1 + 376);
    return sub_22F278254(a1 + 400);
  }
  return result;
}

uint64_t sub_22F29EAD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE v14[64];
  void *v15;
  uint64_t v16;
  _QWORD v17[3];
  void *v18;
  __int128 v19;
  _QWORD v20[33];

  v20[32] = *MEMORY[0x24BDAC8D0];
  v18 = (void *)a2;
  v4 = sub_22F29ED98((uint64_t *)(a1 + 120), &v18);
  v5 = v4[1];
  if (v5)
    return v5;
  v7 = v4;
  v18 = v20;
  v19 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v14, (uint64_t)&v18);
  sub_22E47DAC0((llvm::raw_ostream *)v14, "__firebloom::wide_ptr.");
  v8 = *(_BYTE *)(a2 + 40) & 7;
  if (v8 == 2)
  {
    v9 = "bidi_indexable";
    goto LABEL_7;
  }
  if (v8 == 3)
  {
    v9 = "indexable";
LABEL_7:
    sub_22E47DAC0((llvm::raw_ostream *)v14, v9);
  }
  v10 = sub_22EF5B848(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 32), 0);
  v11 = sub_22E66CB04(a1, v10);
  v15 = v17;
  v17[0] = v11;
  v16 = 0x300000001;
  v12 = *(_DWORD *)(a2 + 40);
  v13 = v12 & 6;
  if (v13 == 2)
  {
    v17[1] = v11;
    LODWORD(v16) = 2;
  }
  else
  {
    v13 = 1;
  }
  if ((v12 & 7) == 2)
  {
    v17[v13] = v11;
    LODWORD(v16) = v13 + 1;
  }
  v5 = llvm::StructType::create();
  v7[1] = v5;
  if (v15 != v17)
    free(v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v14);
  if (v18 != v20)
    free(v18);
  return v5;
}

BOOL sub_22F29EC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 6;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_22EF5CDF0(*(_QWORD *)(a1 + 144), v3);
  return v5 != sub_22EF5CDF0(*(_QWORD *)(a1 + 144), *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F29ED04(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F25AFD8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E66E374(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F29ED98(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E66E2D8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E66E424((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F29EDF0(int a1)
{
  return *((_QWORD *)&off_24FA66D88 + a1);
}

uint64_t sub_22F29EE0C(int a1)
{
  return ((uint64_t (*)(const char *, _QWORD))((char *)nullsub_828 + 4 * byte_22F45D348[a1]))("", 0);
}

char *sub_22F29EE40@<X0>(int a1@<W8>)
{
  return off_24FA66DE0[a1 - 1];
}

const char *sub_22F29EE84()
{
  return "Converted __indexable pointer is below bounds";
}

const char *sub_22F29EE94()
{
  return "Arithmetic on __terminated_by pointer one-past-the-end of the terminator";
}

const char *sub_22F29EEA4()
{
  return "The terminator cannot be assigned";
}

const char *sub_22F29EEB4()
{
  return "Pointer and/or pointer to terminator not within the bounds of the pointer";
}

const char *sub_22F29EEC4()
{
  return "Cannot find the terminator when converting to __terminated_by pointer from an __indexable pointer";
}

uint64_t sub_22F29EED4()
{
  return nullsub_828("New lower bound less than old lower bound", 41);
}

unint64_t sub_22F29EEE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[23];

  v19[21] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 208);
  if (!v1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 144);
    *(_QWORD *)(a1 + 208) = sub_22F368234(v4, "__uniform_type_descriptor", 0x19uLL, 0);
    v19[0] = sub_22EF60A6C(v4, 64, 0);
    v19[1] = "typeID";
    v19[2] = 0;
    v19[3] = sub_22EF60A6C(v4, 32, 0);
    v19[4] = "objectSize";
    v19[5] = 0;
    v19[6] = sub_22EF60A6C(v4, 32, 0);
    v19[7] = "typeFlags";
    v19[8] = 0;
    v19[9] = sub_22EF60A6C(v4, 16, 0);
    v19[10] = "version";
    v19[11] = 0;
    v19[12] = sub_22EF60A6C(v4, 16, 0);
    v19[13] = "object_alignment";
    v19[14] = 0;
    v19[15] = sub_22EF5B848(v4, *(_QWORD *)(v4 + 16440), 0);
    v19[16] = "xnuDescription";
    v19[17] = 0;
    v19[18] = sub_22EF5B848(v4, *(_QWORD *)(v4 + 16440), 0);
    v19[19] = "jsonDescription";
    v19[20] = 0;
    sub_22EFC3340(*(_QWORD *)(a1 + 208));
    for (i = 0; i != 21; i += 3)
    {
      v6 = *(_QWORD *)(a1 + 208);
      v7 = v6 + 64;
      if (v6)
        v8 = v6 + 64;
      else
        v8 = 0;
      v9 = &v19[i];
      v10 = (const void *)v19[i + 1];
      if (v10)
        v11 = strlen((const char *)v19[i + 1]);
      else
        v11 = 0;
      v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(v4 + 15192), v10, v11);
      v13 = sub_22EFC2D88(v4, v8, 0, 0, v12, *v9, 0, 0, 0, 0);
      *(_DWORD *)(v13 + 28) &= 0xFFFF9FFF;
      v14 = v9[2];
      if (v14)
      {
        v18 = 32;
        v17 = v14;
        v15 = sub_22EF60A6C(v4, 32, 0);
        v16 = sub_22EFF8FB0(v4, (uint64_t)&v17, v15, 0);
        if (v18 >= 0x41 && v17)
          MEMORY[0x2348A0E84](v17, 0x1000C8000313F17);
        sub_22E670130(v13, v16);
      }
      sub_22EFCCFA0(v7, v13);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 104))(*(_QWORD *)(a1 + 208));
    v1 = *(_QWORD *)(a1 + 208);
  }
  return *(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F29F19C(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  float *v5;
  llvm::GlobalVariable *v6;
  unint64_t v8;

  v8 = a2;
  v5 = (float *)(a1 + 144);
  v6 = (llvm::GlobalVariable *)sub_22E670768((float *)(a1 + 144), a2, &v8)[3];
  sub_22E670768(v5, a2, &v8)[3] = a3;
  if (*a3 != *(_QWORD *)v6)
    llvm::ConstantExpr::getBitCast();
  llvm::Value::replaceAllUsesWith();
  return llvm::GlobalVariable::removeFromParent(v6);
}

uint64_t sub_22F29F228(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)sub_22E66EE2C(a1, a2);
  return sub_22E66E84C(a1, v3);
}

_QWORD *sub_22F29F250(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_22F29F33C(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_22F29F3F0(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v6 = operator new(0x20uLL);
  v6[2] = a2;
  v6[3] = a3;
  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  *v6 = 0;
  v6[1] = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  return sub_22F29F46C(a1, v6);
}

_QWORD *sub_22F29F46C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  v9 = sub_22E670418((uint64_t)a1, v8, v4);
  return sub_22F29F4E0(a1, a2, v9);
}

_QWORD *sub_22F29F4E0(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_15;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_14:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_15;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_14;
  }
LABEL_15:
  ++result[3];
  return result;
}

uint64_t sub_22F29F5C8(uint64_t a1)
{
  uint64_t result;

  result = llvm::GlobalVariable::setInitializer();
  if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
    return sub_22F29F6D8(a1);
  return result;
}

uint64_t sub_22F29F614(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setAlignment();
  sub_22F29F6D8(a1);
  return v2;
}

uint64_t sub_22F29F6D8(uint64_t result)
{
  llvm::GlobalVariable **v1;
  llvm::GlobalVariable *v2;
  llvm::GlobalVariable **v3;
  llvm::GlobalVariable **v4;
  llvm::GlobalVariable **v5;
  uint64_t v6;

  v1 = *(llvm::GlobalVariable ***)(result + 152);
  if (v1 != *(llvm::GlobalVariable ***)(result + 160))
  {
    v5 = *(llvm::GlobalVariable ***)(result + 160);
    v6 = result;
    do
    {
      llvm::ConstantExpr::getGetElementPtr();
      v2 = *v1;
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalVariable::eraseFromParent(v2);
      v1 += 7;
    }
    while (v1 != v5);
    v1 = *(llvm::GlobalVariable ***)(v6 + 152);
    v3 = *(llvm::GlobalVariable ***)(v6 + 160);
    if (v3 == v1)
    {
      result = v6;
      v1 = *(llvm::GlobalVariable ***)(v6 + 160);
    }
    else
    {
      do
      {
        v4 = (llvm::GlobalVariable **)*(v3 - 6);
        if (v3 - 4 != v4)
          free(v4);
        v3 -= 7;
      }
      while (v3 != v1);
      result = v6;
    }
  }
  *(_QWORD *)(result + 160) = v1;
  return result;
}

uint64_t sub_22F29F7BC(uint64_t a1, uint64_t a2)
{
  return sub_22F29F7D0(a1, a2);
}

uint64_t sub_22F29F7D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22F29F870(a1);
  llvm::ConstantExpr::getPtrToInt();
  llvm::ConstantExpr::getPtrToInt();
  result = llvm::ConstantExpr::getSub();
  if (*(_QWORD *)(**(_QWORD **)a1 + 88) != a2)
    return llvm::ConstantExpr::getTrunc();
  return result;
}

uint64_t sub_22F29F870(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  v3 = *(_QWORD *)a1;
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 160);
  if ((unint64_t)v4 >= *(_QWORD *)(*(_QWORD *)a1 + 168))
  {
    v5 = sub_22E670D08((uint64_t *)(v3 + 152), v2);
    v6 = *(_QWORD *)a1;
  }
  else
  {
    *v4 = v2;
    v4[1] = (uint64_t)(v4 + 3);
    v4[2] = 0x400000000;
    v5 = (uint64_t)(v4 + 7);
    v6 = v3;
  }
  *(_QWORD *)(v3 + 160) = v5;
  sub_22F29F950(a1, *(_QWORD *)(v6 + 160) - 48);
  return v2;
}

uint64_t sub_22F29F950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_22F29F950(v4, a2, *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = llvm::ConstantInt::get();
    v6 = *(_DWORD *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
    ++*(_DWORD *)(a2 + 8);
  }
  result = llvm::ConstantInt::get();
  v8 = result;
  v9 = *(_DWORD *)(a2 + 8);
  if (v9 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v8;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22F29FA48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  v3 = *(_QWORD *)a1;
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 160);
  if ((unint64_t)v4 >= *(_QWORD *)(*(_QWORD *)a1 + 168))
  {
    v5 = sub_22E670D08((uint64_t *)(v3 + 152), v2);
    v6 = *(_QWORD *)a1;
  }
  else
  {
    *v4 = v2;
    v4[1] = (uint64_t)(v4 + 3);
    v4[2] = 0x400000000;
    v5 = (uint64_t)(v4 + 7);
    v6 = v3;
  }
  *(_QWORD *)(v3 + 160) = v5;
  sub_22F29F950(a1, *(_QWORD *)(v6 + 160) - 48);
  return v2;
}

uint64_t *sub_22F29FB20(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v6 + v7 - 48) = v6 + v7 - 32;
      result = (uint64_t *)(v6 + v7 - 48);
      *(result - 1) = v8;
      result[1] = 0x400000000;
      if (*(_DWORD *)(v4 + v7 - 40))
        result = (uint64_t *)sub_22F24C77C((uint64_t)result, v4 + v7 - 48);
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_OWORD *sub_22F29FBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *result;
  unsigned int v6;
  _OWORD *v7;
  __int128 v8;

  if (byte_253E4D348
    && (v4 = *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24) != v4)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(v4 - 8)
    && (result = (_OWORD *)sub_22E670F58(*(_QWORD *)(a1 + 48), *(_DWORD *)(v4 - 12), a2), (_DWORD)result))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 32) - 12) = HIDWORD(a2);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 56);
    *(_QWORD *)&v8 = a2;
    *((_QWORD *)&v8 + 1) = v6;
    v7 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 40))
    {
      result = sub_22E67983C((void **)(a1 + 24), &v8);
    }
    else
    {
      *v7 = v8;
      result = v7 + 1;
    }
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

_OWORD *sub_22F29FCA8(uint64_t a1, uint64_t a2)
{
  return sub_22F29FBF4(a1 - 16, a2);
}

uint64_t sub_22F29FCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F29FBF4(a1, a3);
  return 0;
}

uint64_t sub_22F29FCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F29FBF4(a1 - 8, a3);
  return 0;
}

_QWORD *sub_22F29FCEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = 1;
  v4 = a1 + 19;
  for (i = 3; i != 19; i += 2)
    a1[i] = -4096;
  a1[26] = 0;
  a1[25] = a1 + 26;
  v6 = a1 + 25;
  v4[1] = 0u;
  v4[2] = 0u;
  *v4 = 0u;
  a1[27] = 0;
  v7 = *(_QWORD *)(a2 + 184);
  if (a1 + 25 != (_QWORD *)(v7 + 432))
    sub_22E679920(v6, *(__int128 **)(v7 + 432), (__int128 *)(v7 + 440));
  return a1;
}

int *sub_22F29FD74(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 34;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 8;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

uint64_t sub_22F29FDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v4 = a1 + 16;
  v5 = sub_22F29FE80(a1 + 16, a2);
  v6 = *(unsigned int *)(a1 + 16);
  if ((v6 & 1) != 0)
  {
    v7 = a1 + 24;
    v8 = 8;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned int *)(a1 + 32);
  }
  if (v7 + 16 * v8 != v5)
    return *(unsigned int *)(v5 + 8);
  v9 = (v6 >> 1) + 1;
  v12 = a2;
  v13 = v9;
  sub_22F2A09CC((uint64_t)v11, v4, &v12, &v13);
  return v9;
}

uint64_t sub_22F29FE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2A0920(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

void sub_22F29FEE0(_QWORD *a1)
{
  sub_22F2A0668(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F29FF7C(uint64_t a1)
{
  return sub_22F2A0668((_QWORD *)(a1 - 8));
}

void sub_22F29FF84(uint64_t a1)
{
  sub_22F2A0668((_QWORD *)(a1 - 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F29FFAC(uint64_t a1)
{
  return sub_22F2A0668((_QWORD *)(a1 - 16));
}

void sub_22F29FFB4(uint64_t a1)
{
  sub_22F2A0668((_QWORD *)(a1 - 16));
  JUMPOUT(0x2348A0E9CLL);
}

_DWORD *sub_22F29FFDC(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD *result;
  int v5;
  _DWORD *v6;

  if (a2 <= 8)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = (_DWORD *)MEMORY[0x23489D23C](12 * a2, 4);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[3 * v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 13;
  do
  {
LABEL_6:
    *result = 0;
    result += 3;
  }
  while (result != v6);
  return result;
}

_DWORD *sub_22F2A0064(_DWORD *result)
{
  int v1;
  unsigned int v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;

  v1 = *result;
  if (*result > 1u || result[1])
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 2;
      v4 = result + 26;
    }
    else
    {
      v2 = result[4];
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_22F2A00DC(result);
      if (!v2)
      {
        v5 = 0;
LABEL_11:
        *result = v5;
        result[1] = 0;
        return result;
      }
      v3 = (_DWORD *)*((_QWORD *)result + 1);
      v4 = &v3[3 * v2];
    }
    do
    {
      *v3 = 0;
      v3 += 3;
    }
    while (v3 != v4);
    v5 = *result & 1;
    goto LABEL_11;
  }
  return result;
}

_DWORD *sub_22F2A00DC(_DWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *result;
  v3 = __clz((*result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 2;
    *(_QWORD *)result = 1;
    v7 = result + 26;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22F29FFDC(v1, v5);
  v8 = result[4];
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(12 * v8));
    return sub_22F29FFDC(v1, v5);
  }
  *(_QWORD *)result = 0;
  if (!v5)
    return result;
  v6 = (_DWORD *)*((_QWORD *)result + 1);
  v7 = &v6[3 * v5];
  do
  {
LABEL_10:
    *v6 = 0;
    v6 += 3;
  }
  while (v6 != v7);
  return result;
}

_DWORD *sub_22F2A01A8(_DWORD *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F2A020C((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2A02B4(a1, a2, v7);
    *(_QWORD *)v5 = *a2;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F2A020C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 12 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -1;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 12 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F2A02B4(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E67939C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2A020C((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3)
    --a1[1];
  return a3;
}

uint64_t sub_22F2A036C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 + 1) >= 2)
    {
      v12 = 0;
      result = sub_22F2A020C((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *(_QWORD *)(v11 + 1) = *(_QWORD *)(a2 + 4);
      *v5 += 2;
    }
    a2 += 12;
  }
  return result;
}

_DWORD *sub_22F2A0434(_DWORD *a1)
{
  int v2;
  _DWORD *v3;
  unsigned int v4;
  _DWORD *result;
  int v6;
  _DWORD *v7;

  v2 = *a1;
  if (*a1 > 1u)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 26;
LABEL_10:
      while ((*result + 1) <= 1)
      {
        result += 3;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (_DWORD *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[3 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 8;
    }
    else
    {
      v3 = (_DWORD *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[3 * v4];
  }
  return result;
}

uint64_t sub_22F2A04B4(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2A020C(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 12 * v5;
}

uint64_t *sub_22F2A0514(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = sub_22E6796B0(a1, &v12, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = *a4;
    v9 = v12;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v9;
    *v7 = (uint64_t)v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v7;
    }
    else
    {
      v11 = v8;
    }
    result = sub_22E49FD00(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

void sub_22F2A05B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a2 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned int *)(a1 + 8);
  }
  memset_pattern16((void *)(*(_QWORD *)a1 + 8 * v4), &unk_22F45D380, 8 * a2);
  *(_DWORD *)(a1 + 8) += a2;
}

uint64_t sub_22F2A0620(uint64_t a1)
{
  void *v2;

  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(24 * *(unsigned int *)(a1 + 40)));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_22F2A0668(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  a1[1] = &unk_24FA66FB8;
  v2 = a1 + 1;
  *a1 = &off_24FA66E30;
  a1[2] = &unk_24FA66FE0;
  v3 = a1 + 2;
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  nullsub_910(v3);
  nullsub_910(v2);
  return nullsub_910(a1);
}

uint64_t sub_22F2A06D4(__n128 *a1, char **a2, _WORD *a3)
{
  sub_22E63B3B0((uint64_t)&qword_253E4D2C8, 0, 0);
  byte_253E4D348 = 0;
  qword_253E4D350 = (uint64_t)&unk_24FA66D30;
  *(_QWORD *)&byte_253E4D358 = 0;
  qword_253E4D2C8 = (uint64_t)off_24FA2DF38 + 16;
  qword_253E4D360 = MEMORY[0x24BED8408] + 16;
  qword_253E4D368 = (uint64_t)&unk_24FA66D50;
  qword_253E4D380 = (uint64_t)&qword_253E4D368;
  sub_22E679780(a1, a2, a3);
  return llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_253E4D2C8);
}

uint64_t *sub_22F2A0778(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;

  v2 = (uint64_t *)a2;
  v4 = (uint64_t **)sub_22F2A07E8(a1, &v8, (const void **)(a2 + 32));
  v5 = v8;
  *v2 = 0;
  v2[1] = 0;
  v2[2] = v5;
  *v4 = v2;
  v6 = **(_QWORD **)a1;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v2 = *v4;
  }
  result = sub_22E49FD00(*(uint64_t **)(a1 + 8), v2);
  ++*(_QWORD *)(a1 + 16);
  return result;
}

_QWORD *sub_22F2A07E8(uint64_t a1, _QWORD *a2, const void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD v15[2];

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = v4;
        v9 = (_QWORD *)v4[4];
        v7 = v4 + 4;
        v8 = v9;
        v10 = *((_BYTE *)v7 + 23);
        v11 = v10;
        if (v10 >= 0)
          v8 = v7;
        v12 = v7[1];
        v13 = v10 & 0x7F;
        if (v11 >= 0)
          v12 = v13;
        v15[0] = v8;
        v15[1] = v12;
        if ((sub_22E622CD8(a3, (uint64_t)v15) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_12;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_12:
  *a2 = v5;
  return result;
}

uint64_t *sub_22F2A0888(uint64_t a1, __int128 *a2)
{
  char *v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  v4 = (char *)operator new(0x50uLL);
  sub_22E579A24(v4 + 32, a2);
  v5 = (char **)sub_22F2A07E8(a1, &v9, (const void **)v4 + 4);
  v6 = v9;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  *v5 = v4;
  v7 = **(_QWORD **)a1;
  if (v7)
  {
    *(_QWORD *)a1 = v7;
    v4 = *v5;
  }
  result = sub_22E49FD00(*(uint64_t **)(a1 + 8), (uint64_t *)v4);
  ++*(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_22F2A0920(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22F2A09CC(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F2A0920(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F2A0A94((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F2A0A94(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E679BBC((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2A0920((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2A0B50(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2A0920((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_22F2A0C18(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[7];

  if (!a3)
  {
    v10[5] = v4;
    v10[6] = v5;
    if (a4 == 3 || !a4)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (a2 < 0)
        a2 = sub_22F1E22F0(*(_QWORD **)(a1 + 8), a2);
      v8 = a2 & 0x7FFFFFFF;
      if (sub_22E63AF88(v7, *(_DWORD *)(v7 + 304), a2 & 0x7FFFFFFF))
        v9 = *(_DWORD *)(v7 + 304);
      else
        v9 = sub_22F1E1EE8(v7, v8);
      v10[0] = sub_22E6155EC(*(_QWORD **)(a1 + 8), v9);
      if (v10[0])
        sub_22E679DA0(a1 + 16, v10);
    }
  }
}

uint64_t sub_22F2A0CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)v2 = &off_24FA67008;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v6 = v2;
  sub_22F2968D4(a1, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v2;
}

uint64_t sub_22F2A0D4C(_QWORD *a1)
{
  *a1 = &off_24FA67008;
  sub_22F257CF8((uint64_t)(a1 + 2));
  return nullsub_910(a1);
}

void sub_22F2A0D7C(_QWORD *a1)
{
  *a1 = &off_24FA67008;
  sub_22F257CF8((uint64_t)(a1 + 2));
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A0DC0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_22EF57A14(*(_QWORD *)(a1 + 144));
  if (v2 != 10)
    __asm { BR              X10 }
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = a1;
  v4 = sub_22F368DF4(*(_QWORD *)(a1 + 144), 0);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = v3 + 64;
  *(_QWORD *)(v3 + 56) = 0x800000000;
  *(_WORD *)(v3 + 192) = 0;
  *(_BYTE *)(v3 + 194) = 0;
  *(_QWORD *)v3 = off_24FA67180;
  return v3;
}

void sub_22F2A0E74()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 144) + 15088) + 56);
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = v0;
  v3 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)v2 = off_24FA67770;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = v2 + 64;
  *(_QWORD *)(v2 + 56) = 0x800000000;
  *(_WORD *)(v2 + 192) = v1 == 50;
  *(_BYTE *)(v2 + 194) = 0;
  JUMPOUT(0x22F2A0E44);
}

void sub_22F2A0F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  *(_WORD *)(v1 + 192) = 257;
  *(_BYTE *)(v1 + 194) = 0;
  JUMPOUT(0x22F2A0E40);
}

void sub_22F2A0FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  *(_WORD *)(v1 + 192) = 257;
  *(_QWORD *)v1 = off_24FA67A68;
  *(_BYTE *)(v1 + 194) = 1;
  JUMPOUT(0x22F2A0E44);
}

void sub_22F2A1020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)v1 = off_24FA67770;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  JUMPOUT(0x22F2A0F44);
}

void sub_22F2A1080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  *(_WORD *)(v1 + 192) = 257;
  *(_BYTE *)(v1 + 194) = 0;
  JUMPOUT(0x22F2A0E40);
}

void sub_22F2A10E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  *(_WORD *)(v1 + 192) = 0;
  *(_BYTE *)(v1 + 194) = 0;
  JUMPOUT(0x22F2A0E40);
}

void sub_22F2A1144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = v0;
  v2 = sub_22F368DF4(*(_QWORD *)(v0 + 144), 0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 64;
  *(_QWORD *)(v1 + 56) = 0x800000000;
  *(_WORD *)(v1 + 192) = 0;
  *(_BYTE *)(v1 + 194) = 0;
  JUMPOUT(0x22F2A0E40);
}

void sub_22F2A11A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::Value ***v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  llvm::Value **v36;
  uint64_t v37;
  _BYTE v38[64];
  uint64_t *v39;
  uint64_t v40;
  _QWORD v41[9];

  MEMORY[0x24BDAC7A8]();
  v41[8] = *MEMORY[0x24BDAC8D0];
  if (v2)
  {
    v4 = v1;
    v5 = v2;
    v6 = v3;
    v7 = v0;
    v8 = 0;
    v39 = v41;
    v40 = 0x800000000;
    v36 = (llvm::Value **)v38;
    v37 = 0x800000000;
    v9 = 1;
    do
    {
      v10 = sub_22EFBC2B0(*(_QWORD *)(v6 + 8 * v8));
      v11 = *(llvm::Value **)(v4 + 8 * v8);
      if ((v10 & 0xFFFFFFFD) != 0)
      {
        v12 = v40;
        v13 = (llvm::Value ***)&v39;
        if (v40 >= (unint64_t)HIDWORD(v40))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v40;
        }
      }
      else
      {
        v12 = v37;
        v13 = &v36;
        if (v37 >= (unint64_t)HIDWORD(v37))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v37;
        }
      }
      (*v13)[v12] = v11;
      ++*((_DWORD *)v13 + 2);
      v8 = v9;
    }
    while (v5 != v9++);
    if ((_DWORD)v37)
    {
      v15 = llvm::FunctionType::get();
      v23 = sub_22E46DE30(v7 + 280, v16, v17, v18, v19, v20, v21, v22);
      *(_QWORD *)&v33 = "__tls_init";
      v35 = 259;
      v24 = sub_22E4CF82C(v7, v15, (uint64_t)&v33, v23, 0, 1, 7);
      sub_22E618EBC((uint64_t)&v33, v7, 0);
      sub_22E4D1298((uint64_t)&v33, v24, v36, v37, 0, 0);
      sub_22E619434((uint64_t)&v33);
      v25 = v40;
      if (v40 >= HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v40;
      }
      v39[v25] = (uint64_t)v24;
      v26 = v40 + 1;
      LODWORD(v40) = v40 + 1;
    }
    else
    {
      v26 = v40;
    }
    if (v26)
    {
      v27 = v39;
      v28 = 8 * v26;
      do
      {
        v29 = *v27;
        llvm::GlobalObject::setSection();
        LODWORD(v33) = 0xFFFFFFF;
        *((_QWORD *)&v33 + 1) = v29;
        v34 = 0;
        v30 = *(_QWORD *)(v7 + 1472);
        if (v30 < *(_QWORD *)(v7 + 1480))
        {
          v32 = v33;
          *(_QWORD *)(v30 + 16) = v34;
          *(_OWORD *)v30 = v32;
          v31 = (char *)(v30 + 24);
        }
        else
        {
          v31 = sub_22E63BB48((void **)(v7 + 1464), (uint64_t)&v33);
        }
        *(_QWORD *)(v7 + 1472) = v31;
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
    if (v36 != (llvm::Value **)v38)
      free(v36);
    if (v39 != v41)
      free(v39);
  }
}

double sub_22F2A1488@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result;

  sub_22E6285D0(*(_QWORD *)(a1 + 144), a2, "thread wrappers");
  result = 0.0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 84) = 2;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  return result;
}

void sub_22F2A14E0(uint64_t a1)
{
  sub_22E684168(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A1504()
{
  return 0;
}

_QWORD *sub_22F2A150C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2891B4((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F289260(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F2A156C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v11;
  unsigned int v12;

  v5 = *a1;
  v6 = *((unsigned int *)a1 + 2);
  if (*a1 + 8 * v6 == a2)
  {
    v11 = *a3;
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v6 = *((unsigned int *)a1 + 2);
    }
    *(_QWORD *)(v5 + 8 * v6) = v11;
    v12 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v12;
    return *a1 + 8 * v12 - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v6 = *((unsigned int *)a1 + 2);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    v9 = (_QWORD *)(v5 + 8 * v6);
    *v9 = *(v9 - 1);
    if (v9 - 1 != v8)
    {
      memmove(v8 + 1, v8, (char *)(v9 - 1) - (char *)v8);
      LODWORD(v6) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

void sub_22F2A166C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3[2];
  _BYTE v4[16];
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v5[0] = v6;
  v5[1] = (void *)0x100000000;
  if (*(_DWORD *)(a1 + 8))
    sub_22F2528D0((uint64_t)v5, a1);
  v3[0] = v4;
  v3[1] = (void *)0x100000000;
  sub_22F2A1738(a2, (uint64_t)v5, (uint64_t)v3);
  if (v3[0] != v4)
    free(v3[0]);
  if (v5[0] != v6)
    free(v5[0]);
}

_QWORD *sub_22F2A1738(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F2528D0((uint64_t)a1, a2);
  a1[4] = a1 + 6;
  a1[5] = 0x100000000;
  if (*(_DWORD *)(a3 + 8))
    sub_22F2528D0((uint64_t)(a1 + 4), a3);
  return a1;
}

llvm::ValueHandleBase *sub_22F2A17B0(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v6;
  _QWORD *v7;
  llvm::ValueHandleBase *result;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return (llvm::ValueHandleBase *)sub_22F2A1850(a1, a2, a3, a4);
  v7 = (_QWORD *)(*(_QWORD *)a1 + 40 * v6);
  *v7 = *a2;
  v7[1] = 6;
  result = (llvm::ValueHandleBase *)(v7 + 1);
  v9 = *a3;
  v7[2] = 0;
  v7[3] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
  {
    result = (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToUseList(result);
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7[4] = *a4;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t sub_22F2A1850(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v12;

  v8 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v9 = &v8[5 * *(unsigned int *)(a1 + 8)];
  *v9 = *a2;
  v9[1] = 6;
  v10 = *a3;
  v9[2] = 0;
  v9[3] = v10;
  if (v10 != -8192 && v10 != -4096 && v10 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v9 + 1));
  v9[4] = *a4;
  sub_22F25C014(a1, v8);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v8;
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = 0;
  return (uint64_t)&v8[5 * v12 - 5];
}

void sub_22F2A1930(unsigned int *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *this, llvm::raw_ostream *a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  size_t v16;
  const void *v17;
  size_t v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  const void *v26;
  size_t v27;
  unsigned int v28;
  _BYTE *v29;
  _DWORD *v30;
  _QWORD *v31;
  size_t v32;
  unsigned int v33;
  void *v35;
  _BYTE *v36;
  void *v37;
  __int128 v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x24BDAC8D0];
  v9 = a1 + 4;
  v10 = *a1;
  v11 = (void *)*((_QWORD *)this + 4);
  if (v10 <= *((_QWORD *)this + 3) - (_QWORD)v11)
  {
    if (v10)
    {
      memcpy(v11, v9, v10);
      *((_QWORD *)this + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v9);
  }
  if ((*(_WORD *)(a2 + 36) & 2) != 0)
  {
    v21 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v21 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v21 + 1;
      *v21 = 40;
    }
    v22 = *(unsigned int *)(a2 + 24);
    if (!(_DWORD)v22)
      goto LABEL_45;
    v23 = *(_QWORD *)(a2 + 8);
    if ((_DWORD)v22 != 1)
    {
      v24 = 8 * v22 - 8;
      do
      {
        v25 = *(unsigned int **)(*(_QWORD *)v23 + 16);
        v28 = *v25;
        v26 = v25 + 4;
        v27 = v28;
        v29 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v28 <= *((_QWORD *)this + 3) - (_QWORD)v29)
        {
          if (v27)
          {
            memcpy(v29, v26, v27);
            v29 = (_BYTE *)(*((_QWORD *)this + 4) + v27);
            *((_QWORD *)this + 4) = v29;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, (const char *)v26);
          v29 = (_BYTE *)*((_QWORD *)this + 4);
        }
        if ((unint64_t)v29 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v29 + 1;
          *v29 = 44;
        }
        v23 += 8;
        v24 -= 8;
      }
      while (v24);
    }
    v30 = *(_DWORD **)(*(_QWORD *)v23 + 16);
    v33 = *v30;
    v31 = v30 + 4;
    v32 = v33;
    if (v33 == 11)
    {
      if (*v31 == 0x4752415F41565F5FLL && *(_QWORD *)((char *)v31 + 3) == 0x5F5F534752415F41)
      {
        sub_22E47DAC0(this, "...");
        goto LABEL_45;
      }
      v35 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v35 > 0xAuLL)
        goto LABEL_51;
    }
    else
    {
      v35 = (void *)*((_QWORD *)this + 4);
      if (v32 <= *((_QWORD *)this + 3) - (_QWORD)v35)
      {
        if (v32)
        {
LABEL_51:
          memcpy(v35, v31, v32);
          *((_QWORD *)this + 4) += v32;
        }
LABEL_45:
        if ((*(_WORD *)(a2 + 36) & 8) != 0)
          sub_22E47DAC0(this, "...");
        v36 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v36 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v36 + 1;
          *v36 = 41;
        }
        goto LABEL_4;
      }
    }
    llvm::raw_ostream::write(this, (const char *)v31);
    goto LABEL_45;
  }
LABEL_4:
  v37 = v39;
  v38 = xmmword_22F44E310;
  v12 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = 24 * v12;
    v15 = 1;
    do
    {
      if ((v15 & 1) == 0 && (*(_WORD *)(v13 + 18) & 2) != 0)
      {
        v20 = (_BYTE *)*((_QWORD *)a5 + 4);
        if ((unint64_t)v20 >= *((_QWORD *)a5 + 3))
        {
          llvm::raw_ostream::write(a5);
        }
        else
        {
          *((_QWORD *)a5 + 4) = v20 + 1;
          *v20 = 32;
        }
      }
      v17 = (const void *)sub_22F18E170(a3, v13, (uint64_t *)&v37, 0);
      v18 = v16;
      v19 = (void *)*((_QWORD *)a5 + 4);
      if (v16 <= *((_QWORD *)a5 + 3) - (_QWORD)v19)
      {
        if (v16)
        {
          memcpy(v19, v17, v16);
          *((_QWORD *)a5 + 4) += v18;
        }
      }
      else
      {
        llvm::raw_ostream::write(a5, (const char *)v17);
      }
      v15 = 0;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
    if (v37 != v39)
      free(v37);
  }
}

uint64_t sub_22F2A1C90(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 24);
  v5 = *(_DWORD *)(result + 32);
  if (v5 == 4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 1816) + 824);
LABEL_3:
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * *(unsigned int *)(v3 + 48) - 8);
  }
  else
  {
    if (!*(_DWORD *)(result + 28))
      v4 = 0;
    switch(v5)
    {
      case 0u:
        v7 = 0;
        *(_DWORD *)(result + 32) = 1;
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 1816) + 824);
        break;
      case 1u:
        *(_DWORD *)(result + 32) = 2;
        return result;
      case 2u:
        result = sub_22F2A1DE4(*(_QWORD *)(*(_QWORD *)(result + 16) + 88), a2);
        if ((result & 1) != 0)
          return result;
        v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= 3)
          *(_DWORD *)(v3 + 32) = ++v5;
LABEL_16:
        ++*(_DWORD *)(v3 + 28);
LABEL_17:
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 1816) + 824);
        if (v5 - 3 <= 1)
          goto LABEL_3;
        v7 = 0;
        break;
      case 3u:
        goto LABEL_16;
      default:
        goto LABEL_17;
    }
  }
  result = sub_22E496930(v6, v7, v4, a2);
  v8 = result;
  v9 = *(_DWORD *)(v3 + 48);
  if (v9 >= *(_DWORD *)(v3 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v3 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v9) = v8;
  ++*(_DWORD *)(v3 + 48);
  return result;
}

BOOL sub_22F2A1DE4(uint64_t a1, int a2)
{
  char *__s;

  sub_22F1E2F68(a1, a2, 1, (uint64_t)&__s);
  if (!__s || strlen(__s) != 14)
    return 0;
  return *(_QWORD *)__s == 0x646E616D6D6F633CLL && *(_QWORD *)(__s + 6) == 0x3E656E696C20646ELL;
}

uint64_t sub_22F2A1E68(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = result;
  v3 = *(_DWORD *)(result + 32);
  if (v3 != 2)
  {
    if (v3 != 3)
    {
LABEL_5:
      --*(_DWORD *)(result + 48);
      return result;
    }
    v4 = *(_DWORD *)(result + 28);
    if (v4)
    {
      *(_DWORD *)(result + 28) = v4 - 1;
      goto LABEL_5;
    }
LABEL_8:
    *(_DWORD *)(v2 + 32) = 4;
    return result;
  }
  result = sub_22E688274(*(_QWORD *)(*(_QWORD *)(result + 16) + 88), a2);
  if ((result & 1) == 0)
    goto LABEL_8;
  return result;
}

uint64_t sub_22F2A1ED4(uint64_t result, int a2, int a3)
{
  if (a3 == 1)
    return sub_22F2A1E68(result, a2);
  if (!a3)
    return sub_22F2A1C90(result, a2);
  return result;
}

uint64_t sub_22F2A1EF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_22F2A1EFC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FA68698;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  return nullsub_910(a1);
}

void sub_22F2A1F3C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FA68698;
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A1F90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = a1;
  v3 = sub_22F368DF4(*(_QWORD *)(a1 + 144), 0);
  *(_QWORD *)v2 = off_24FA68810;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 104;
  *(_QWORD *)(v2 + 80) = v2 + 104;
  *(_QWORD *)(v2 + 88) = 4;
  *(_DWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_DWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 284) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 312) = 0;
  *(_DWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  return v2;
}

uint64_t sub_22F2A205C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F2A20DC((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

_QWORD *sub_22F2A20DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F2A2198(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 2;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F2A2244((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 2;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F2A2198(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2A2244(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E694A68((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2A2198((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2A2300(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F2A2198((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_22F2A23C0(_QWORD *a1, uint64_t a2)
{
  void *v3[2];
  _BYTE v4[16];
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v5[0] = v6;
  v5[1] = (void *)0x100000000;
  v3[0] = v4;
  v3[1] = (void *)0x100000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F2528D0((uint64_t)v3, a2);
  sub_22F2A1738(a1, (uint64_t)v5, (uint64_t)v3);
  if (v3[0] != v4)
    free(v3[0]);
  if (v5[0] != v6)
    free(v5[0]);
}

_QWORD *sub_22F2A2480(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2A25E4(a1, a2, v8);
    v7 = a2[1];
    *v5 = *a2;
    v5[1] = v7;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F2A24EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == 0x8000000000000000;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_22F2A25E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E696DC8(a1, v6);
  v9 = 0;
  sub_22F2A24EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2A269C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45B630;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      v10 = v4[1];
      if ((*v4 != -4096 || v10 != 0x7FFFFFFFFFFFFFFFLL) && (v9 != -8192 || v10 != 0x8000000000000000))
      {
        v15 = 0;
        result = sub_22F2A24EC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
        v13 = v15;
        v14 = v4[1];
        *v15 = *v4;
        v13[1] = v14;
        v13[2] = v4[2];
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F2A2778(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22F2A24EC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2A25E4(a2, a3, v13);
    v9 = (_QWORD *)result;
    v12 = a3[1];
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = v12;
    *(_QWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F2A2818(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_22F2A2838(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 1808);
  *(_QWORD *)(a1 + 1808) = 0;
  return v1;
}

uint64_t sub_22F2A2864(uint64_t a1, uint64_t a2)
{
  const llvm::APInt *v4;
  unint64_t v5;
  unsigned int v6;
  llvm::Type *v7;
  int v8;
  unsigned int v9;
  llvm::APInt *v10;
  llvm::APInt *v12;
  const llvm::APInt *v13;
  uint64_t QNaN;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 15088) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15088)) < 0x40)
    v5 = -1;
  else
    v5 = 0xAAAAAAAAAAAAAAAALL;
  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 0xFE) != 0x12)
  {
    if (*(_DWORD *)(a2 + 8) == 15)
      goto LABEL_12;
    if (*(_DWORD *)(a2 + 8) != 13)
    {
      v9 = *(_DWORD *)(a2 + 8);
      v7 = (llvm::Type *)a2;
      if (v9 <= 6)
        goto LABEL_18;
      goto LABEL_35;
    }
LABEL_15:
    v10 = (llvm::APInt *)(v6 >> 8);
    if (v10 <= 0x40)
      return llvm::ConstantInt::get();
    v23 = 64;
    v22 = (void *)v5;
    llvm::APInt::getSplat(v10, (uint64_t)&v22, v4);
    QNaN = llvm::ConstantInt::get();
    if (v25 >= 0x41 && v24)
      MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
    if (v23 < 0x41)
      return QNaN;
    v15 = v22;
    if (!v22)
      return QNaN;
LABEL_33:
    MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
    return QNaN;
  }
  v7 = **(llvm::Type ***)(a2 + 16);
  v8 = *((_DWORD *)v7 + 2);
  if (v8 == 13)
  {
    v6 = *((_DWORD *)v7 + 2);
    goto LABEL_15;
  }
  if (v8 != 15)
  {
    if (v8 < 7u)
    {
LABEL_18:
      llvm::Type::getFltSemantics(v7);
      v12 = (llvm::APInt *)llvm::APFloatBase::semanticsSizeInBits();
      LODWORD(v25) = 64;
      v24 = (void *)-1;
      if (v12 >= 0x40)
      {
        llvm::APInt::getSplat(v12, (uint64_t)&v24, v13);
        if (v25 >= 0x41 && v24)
          MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
        v24 = v22;
        LODWORD(v25) = v23;
      }
      QNaN = llvm::ConstantFP::getQNaN();
      if (v25 < 0x41)
        return QNaN;
      v15 = v24;
      if (!v24)
        return QNaN;
      goto LABEL_33;
    }
    v9 = *(_DWORD *)(a2 + 8);
LABEL_35:
    if (v9 == 17)
    {
      v20 = *(_QWORD *)(a2 + 32);
      v21 = sub_22F2A2864(a1, *(_QWORD *)(a2 + 24));
      v24 = v26;
      v25 = 0x800000000;
      sub_22E4639CC((uint64_t)&v24, v20, v21);
      QNaN = llvm::ConstantArray::get();
      v19 = v24;
      if (v24 == v26)
        return QNaN;
    }
    else
    {
      v16 = *(unsigned int *)(a2 + 12);
      v24 = v26;
      v25 = 0x800000000;
      sub_22E4639CC((uint64_t)&v24, v16, 0);
      if ((_DWORD)v25)
      {
        v17 = 0;
        do
        {
          v18 = sub_22F2A2864(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v17));
          *((_QWORD *)v24 + v17++) = v18;
        }
        while (v17 != (_DWORD)v25);
      }
      QNaN = llvm::ConstantStruct::get();
      v19 = v24;
      if (v24 == v26)
        return QNaN;
    }
    free(v19);
    return QNaN;
  }
  v6 = *((_DWORD *)v7 + 2);
LABEL_12:
  if (v6 > 0xFF)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 15088) + 864))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15088), v6 >> 8);
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ConstantExpr::getIntToPtr();
}

uint64_t sub_22F2A2C10(uint64_t *a1, llvm::Value *a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  unint64_t v11;
  llvm::Type *v15;
  llvm::LLVMContext *v16;
  llvm::LLVMContext *v17;

  result = *a1;
  if ((*(_BYTE *)(*(_QWORD *)(result + 152) + 256) & 0xF9) != 0)
  {
    v11 = a6;
    sub_22E62D2F0(result, a2, a3, a6);
    LOBYTE(v11) = sub_22E62D2F0(*a1, a2, a3, v11) | a8;
    v15 = *(llvm::Type **)(*a1 + 232);
    if ((v11 & 1) == 0)
    {
      sub_22F2A2DB8((uint64_t)a1, a3);
      if (a5)
        llvm::MDString::get();
    }
    llvm::ValueAsMetadata::get();
    llvm::Type::getInt1Ty(v15, v16);
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::Type::getInt1Ty(v15, v17);
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::Module::getOrInsertNamedMetadata();
    return llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t sub_22F2A2DB8(uint64_t a1, int a2)
{
  llvm::Type *v3;
  llvm::LLVMContext *v4;
  llvm::LLVMContext *v5;
  char *__s[7];

  __s[6] = *(char **)MEMORY[0x24BDAC8D0];
  sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), a2, 1, (uint64_t)__s);
  if (!__s[0])
    return 0;
  v3 = *(llvm::Type **)(*(_QWORD *)a1 + 232);
  strlen(__s[0]);
  __s[3] = (char *)llvm::MDString::get();
  llvm::Type::getInt32Ty(v3, v4);
  llvm::ConstantInt::get();
  __s[4] = (char *)llvm::ValueAsMetadata::get();
  llvm::Type::getInt32Ty(v3, v5);
  llvm::ConstantInt::get();
  __s[5] = (char *)llvm::ValueAsMetadata::get();
  return llvm::MDTuple::getImpl();
}

uint64_t *sub_22F2A2EA8(uint64_t *result, llvm::Value *a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(*result + 152) + 256) & 0xF9) != 0)
    return (uint64_t *)sub_22F2A2C10(result, a2, 0, (uint64_t)&unk_22F5710FF, 0, 0, 0, 1);
  return result;
}

uint64_t sub_22F2A2EE0()
{
  llvm::Module::getMDKindID();
  llvm::MDTuple::getImpl();
  return llvm::Instruction::setMetadata();
}

void sub_22F2A2F4C(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t DataLayout;
  uint64_t v7;
  int8x8_t v8;

  DataLayout = llvm::Module::getDataLayout((llvm::Module *)(*a1)[25]);
  sub_22E3C304C(DataLayout, a2);
  v7 = llvm::TypeSize::operator unsigned long long();
  sub_22E698288(a1, a2, a3, v7 + a3, v8);
}

void sub_22F2A2FC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t v12;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v8 = sub_22EFC2EF4(a2, v7);
  if (v8)
  {
    v9 = a4 + v8 - 1;
    v10 = a4 / sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v11 = sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E698960(a1, 0, v10 + a3, a3 + v9 / v11 + 1, v12);
  }
}

uint64_t sub_22F2A3074(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(unsigned int *)(a3 + 32);
  v10 = sub_22E699F3C(a1);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), a2, v8, v9);
  if ((_DWORD)result)
  {
    v12 = *(_DWORD *)(a4 + 8);
    if (v12 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = a3;
    goto LABEL_5;
  }
  v13 = *(unsigned int *)(a3 + 32);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = __clz(v13);
  v16 = v15 ^ 0x1F;
  v17 = 1 << (v15 ^ 0x1F);
  v18 = v17 == v13;
  v19 = v16 - v18;
  if (v16 == v18)
  {
    LODWORD(a2) = v13;
    return sub_22F2A3804(a4, a2, v14);
  }
  v20 = a2 / v13;
  v21 = v17 >> (v17 == (_DWORD)v13);
  v22 = a2 / v13 * v21;
  LODWORD(a2) = v13;
  while (1)
  {
    v23 = sub_22E699F3C(a1);
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v23 + 8) + 128))(*(_QWORD *)(v23 + 8), v22, v14, v21) & 1) != 0)break;
    v21 = v21 >> 1;
    if (v22 >= 0)
      v24 = v22;
    else
      v24 = v22 + 1;
    v22 = v24 >> 1;
    --v19;
LABEL_14:
    if (!v19)
      return sub_22F2A3804(a4, a2, v14);
  }
  v25 = llvm::FixedVectorType::get();
  result = sub_22F2A3804(a4, a2 >> v19, v25);
  a2 = a2 - (a2 >> v19 << v19);
  if (!(_DWORD)a2)
    return result;
  if (a2 < 3
    || (v26.i32[0] = a2, v27 = (uint8x8_t)vcnt_s8(v26), v27.i16[0] = vaddlv_u8(v27), v27.i32[0] <= 1u)
    || (v28 = sub_22E699F3C(a1),
        !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v28 + 8) + 128))(*(_QWORD *)(v28 + 8), v20 * a2, v14, a2)))
  {
    do
    {
      --v19;
      v21 = v21 >> 1;
      if (v22 >= 0)
        v29 = v22;
      else
        v29 = v22 + 1;
      v22 = v29 >> 1;
    }
    while (v21 > a2);
    goto LABEL_14;
  }
  result = llvm::FixedVectorType::get();
  v30 = result;
  v31 = *(_DWORD *)(a4 + 8);
  if (v31 >= *(_DWORD *)(a4 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
LABEL_5:
  ++*(_DWORD *)(a4 + 8);
  return result;
}

uint64_t sub_22F2A32B0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  v2 = (a2 >> 8) - 1;
  if (v2 <= 0x3F && ((1 << v2) & 0x8000000080008081) != 0)
    return 1;
  if (a2 >> 8 == 128)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 48))(*(_QWORD *)(a1 + 15088));
  return 0;
}

void sub_22F2A3300(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t DataLayout;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  uint64_t v20;

  v5 = (_QWORD *)(a1 + 8);
  v6 = 3 * a2;
  v7 = sub_22E6988C8(*(_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6 + 16) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6 + 16) + 32), a3);
  v9 = v8;
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 200));
  sub_22E3C304C(DataLayout, v7);
  v18 = (unint64_t)(v11 + 7) >> 3;
  v19 = v12 == 1;
  v13 = llvm::TypeSize::operator unsigned long long();
  v14 = *v5 + 8 * v6 + 24;
  v15 = (v9 - 1);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_22F2A33FC((uint64_t)v5, v14, v15, (unint64_t)&v18);
  if (v9)
  {
    v16 = (_QWORD *)(*v5 + 24 * a2);
    v17 = *v16 + v13 + v13 * v15;
    *v16 += v13 * v15;
    v16[1] = v17;
    v16[2] = v7;
  }
}

__n128 sub_22F2A33FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  __n128 result;
  __n128 *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;

  v4 = a3;
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v9 = (__n128 *)sub_22E4EF088(a1, a4, a3);
  v11 = v9;
  v12 = *(_QWORD *)a1;
  if (v8 == a2)
  {
    v22 = *(_DWORD *)(a1 + 8);
    if (v4)
    {
      v23 = (__n128 *)(v12 + 24 * v22);
      v24 = v4;
      do
      {
        result = *v9;
        v23[1].n128_u64[0] = v9[1].n128_u64[0];
        *v23 = result;
        v23 = (__n128 *)((char *)v23 + 24);
        --v24;
      }
      while (v24);
      v22 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v22 + v4;
  }
  else
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v7) >> 3);
    v14 = (__n128 *)(v12 + 8 * ((a2 - v7) >> 3));
    v15 = *(unsigned int *)(a1 + 8);
    v16 = v12 + 24 * v15;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v14) >> 3);
    v18 = v17 - v4;
    if (v17 >= v4)
    {
      sub_22F2A390C(a1, (__int128 *)(v16 - 24 * v4), (__int128 *)v16);
      if ((__n128 *)(v16 - 24 * v4) != v14)
        memmove((char *)v14 + 24 * v4, v14, v16 - 24 * v4 - (_QWORD)v14);
      if (v14 <= v11)
      {
        if ((unint64_t)v11 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
          v25 = 0;
        else
          v25 = v4;
        v11 = (__n128 *)((char *)v11 + 24 * v25);
      }
      for (; v4; --v4)
      {
        result = *v11;
        v14[1].n128_u64[0] = v11[1].n128_u64[0];
        *v14 = result;
        v14 = (__n128 *)((char *)v14 + 24);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v15 + v4;
      if (v13 != v15)
        memcpy((void *)(v12 + 24 * (v15 + v4) - 8 * ((v16 - (uint64_t)v14) >> 3)), v14, v16 - (_QWORD)v14);
      if (v14 <= v11)
      {
        if ((unint64_t)v11 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
          v19 = 0;
        else
          v19 = v4;
        v11 = (__n128 *)((char *)v11 + 24 * v19);
      }
      if (v13 != v15)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v14) >> 3);
        do
        {
          result = *v11;
          v14[1].n128_u64[0] = v11[1].n128_u64[0];
          *v14 = result;
          v14 = (__n128 *)((char *)v14 + 24);
          --v20;
        }
        while (v20);
      }
      if (v4 != v17)
      {
        do
        {
          result = *v11;
          *(_QWORD *)(v16 + 16) = v11[1].n128_u64[0];
          *(__n128 *)v16 = result;
          v16 += 24;
        }
        while (!__CFADD__(v18++, 1));
      }
    }
  }
  return result;
}

BOOL sub_22F2A35E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;

  if ((((a1 - 1) ^ a3) & -a5) != 0)
    return 0;
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8) < 7u || (*(_DWORD *)(a2 + 8) & 0xFE) == 18)
      return 0;
  }
  if (!a4)
    return 1;
  v7 = *(unsigned __int8 *)(a4 + 8);
  return v7 >= 7 && (v7 & 0xFE) != 18;
}

uint64_t sub_22F2A3640(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    if (v2 == 1)
    {
      v5 = *(_QWORD *)(sub_22E699F3C(*a1) + 8);
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, &a1[1][3 * *((unsigned int *)a1 + 4) - 1], 1, a2);
    }
    v14 = 0;
    if (v2 <= 8)
    {
      v11 = 0;
      v9 = a1[1];
      v10 = &v9[3 * v2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *((_DWORD *)a1 + 4);
      if (!v8)
      {
LABEL_13:
        v13 = sub_22E699F3C(*a1);
        return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, uint64_t))(**(_QWORD **)(v13 + 8) + 120))(*(_QWORD *)(v13 + 8), v15, v14, a2);
      }
      v9 = a1[1];
      v10 = &v9[3 * v8];
      v11 = 0;
    }
    do
    {
      v12 = v9[2];
      if (v11 >= 8)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v12;
      v11 = ++v14;
      v9 += 3;
    }
    while (v9 != v10);
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_22F2A3804(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v5 + 8);
  }
  if (a2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 8) = v6 + a2;
  return result;
}

double sub_22F2A387C(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  _OWORD *v6;
  _BYTE v7[27];

  sub_22E6990AC((uint64_t)v7, a1, *(_QWORD *)(a2 + 40), 1);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v7;
  result = *(double *)&v7[11];
  *(_OWORD *)(a2 + 59) = *(_OWORD *)&v7[11];
  v5 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v5)
  {
    v6 = (_OWORD *)(a2 + 88);
    do
    {
      sub_22E6990AC((uint64_t)v7, a1, *((_QWORD *)v6 - 1), 0);
      *v6 = *(_OWORD *)v7;
      result = *(double *)&v7[11];
      *(_OWORD *)((char *)v6 + 11) = *(_OWORD *)&v7[11];
      v6 = (_OWORD *)((char *)v6 + 40);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22F2A390C(uint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2;
  v5 = result;
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)v5 + 24 * v7;
    do
    {
      v9 = *v4;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)v8 = v9;
      v8 += 24;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22F2A39AC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 24 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 24 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v10), (const void *)(*(_QWORD *)a2 + 24 * v10), *(_QWORD *)a2 + 24 * v11 - (*(_QWORD *)a2 + 24 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_22F2A3AD0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

BOOL sub_22F2A3AE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  unint64_t v7;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  result = 1;
  if (!sub_22F1124D8(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
  {
    v5 = *(_QWORD *)v3;
    if (!*(_QWORD *)v3 || *(_BYTE *)(*(_QWORD *)v3 + 16) != 9)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
        return 0;
      v5 = sub_22F10CF48(v5);
      if (!v5)
        return 0;
    }
    v7 = ((unint64_t)*(unsigned int *)(v5 + 32) >> 1) & 0xFFFFFF;
    if (sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16480) & 0xFFFFFFFFFFFFFFF0)) <= v7)return 0;
  }
  return result;
}

BOOL sub_22F2A3B90(uint64_t a1, uint64_t a2)
{
  return (unint64_t)(a2 - 9) < 8;
}

unint64_t sub_22F2A3BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a2 + 144);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 15088) + *(_QWORD *)(**(_QWORD **)(v2 + 15088) - 24));
  return v3 / sub_22EF5CDF0(v2, *(_QWORD *)(*(_QWORD *)(v2 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F2A3BE0()
{
  return 0;
}

uint64_t sub_22F2A3BE8()
{
  return 0;
}

llvm::raw_ostream *sub_22F2A3BF0(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::Type *v3;
  char *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22E47DAC0(v2, "(ABIArgInfo Kind=");
  switch(*((_BYTE *)a1 + 24))
  {
    case 0:
      sub_22E47DAC0(v2, "Direct Type=");
      v3 = *(llvm::Type **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_11;
      v4 = "null";
      goto LABEL_13;
    case 1:
      v4 = "Extend";
      goto LABEL_13;
    case 2:
      sub_22E47DAC0(v2, "Indirect Align=");
      v5 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      sub_22E47DAC0(v5, " ByVal=");
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      goto LABEL_7;
    case 3:
      sub_22E47DAC0(v2, "Indirect Align=");
      v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      sub_22E47DAC0(v7, " AadrSpace=");
      v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
LABEL_7:
      sub_22E47DAC0(v6, " Realign=");
      llvm::raw_ostream::operator<<();
      return sub_22E47DAC0(v2, ")\n");
    case 4:
      v4 = "Ignore";
      goto LABEL_13;
    case 5:
      v4 = "Expand";
      goto LABEL_13;
    case 6:
      sub_22E47DAC0(v2, "CoerceAndExpand Type=");
      v3 = *(llvm::Type **)a1;
LABEL_11:
      llvm::Type::print(v3, v2);
      return sub_22E47DAC0(v2, ")\n");
    case 7:
      v4 = "TargetSpecific";
LABEL_13:
      sub_22E47DAC0(v2, v4);
      break;
    case 8:
      sub_22E47DAC0(v2, "InAlloca Offset=");
      llvm::raw_ostream::operator<<();
      break;
    default:
      return sub_22E47DAC0(v2, ")\n");
  }
  return sub_22E47DAC0(v2, ")\n");
}

_QWORD *sub_22F2A3D68(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22F2A3DA8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A3DF8()
{
  return 32;
}

uint64_t sub_22F2A3E00()
{
  return 0;
}

uint64_t sub_22F2A3E08(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8) = 0;
  sub_22E61131C(a4, "-l", "");
  return sub_22E61131C(a4, a2, &a2[a3]);
}

uint64_t sub_22F2A3E58()
{
  return 76;
}

uint64_t sub_22F2A3E60(int a1, llvm::PointerType *a2, llvm::ConstantPointerNull *this)
{
  return llvm::ConstantPointerNull::get(this, a2);
}

uint64_t sub_22F2A3E68()
{
  return llvm::ConstantExpr::getPointerCast();
}

uint64_t sub_22F2A3E74()
{
  return llvm::LLVMContext::getOrInsertSyncScopeID();
}

double sub_22F2A3E88(uint64_t a1, uint64_t a2)
{
  uint64_t (**v3)();
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 216) + 56) & 0xFFFFFFFE) == 0x3A)
  {
    v5 = 75;
    v3 = &off_24FA68D70;
    v4 = a1 + 280;
    return sub_22E699D2C((uint64_t)&v3, a2);
  }
  else
  {
    v3 = &off_24FA68DF8;
    v4 = a1 + 280;
    v5 = 75;
    return sub_22E699E90((uint64_t)&v3, a2);
  }
}

uint64_t sub_22F2A3EF4()
{
  return 0;
}

uint64_t sub_22F2A3EFC()
{
  return 0;
}

uint64_t sub_22F2A3F04()
{
  return 1;
}

uint64_t sub_22F2A3F18()
{
  return 0;
}

uint64_t sub_22F2A3F20()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_22F2A3F28()
{
  return 1;
}

uint64_t sub_22F2A3F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22F2A3F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22F2A3F40()
{
  return 0;
}

uint64_t sub_22F2A3F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t sub_22F2A3F50()
{
  return 0;
}

uint64_t sub_22F2A3F5C()
{
  return 1;
}

const char *sub_22F2A3F64()
{
  return "";
}

uint64_t sub_22F2A3F74()
{
  return 0;
}

uint64_t sub_22F2A3F7C()
{
  return 0;
}

uint64_t sub_22F2A3F88()
{
  return 0;
}

uint64_t sub_22F2A3F90()
{
  return 0;
}

uint64_t sub_22F2A3F98()
{
  return 0;
}

uint64_t sub_22F2A3FA8()
{
  return 0;
}

uint64_t sub_22F2A3FB0()
{
  return 1;
}

uint64_t sub_22F2A3FBC()
{
  return 0;
}

uint64_t sub_22F2A3FC4()
{
  return 0;
}

uint64_t sub_22F2A3FCC()
{
  return 0;
}

uint64_t sub_22F2A3FD4()
{
  return 0;
}

uint64_t sub_22F2A3FDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = llvm::User::operator new((llvm::User *)0x40);
  sub_22E69BCDC(v8, a3, a2);
  llvm::Value::setName();
  sub_22F245A34(a1, v8, a4);
  return v8;
}

uint64_t sub_22F2A405C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22F2A41E8(a1, a2);
  v4 = *(_QWORD *)a1 + 40 * v3;
  v5 = *(_BYTE *)(a2 + 23);
  v6 = v5 < 0;
  v7 = *(_QWORD *)(a2 + 8);
  if (v5 < 0)
    a2 = *(_QWORD *)a2;
  v8 = v5 & 0x7F;
  if (v6)
    v8 = v7;
  *(_QWORD *)v4 = v4 + 24;
  *(_OWORD *)(v4 + 8) = xmmword_22F44E350;
  result = sub_22E61131C(v4, (_BYTE *)a2, (_BYTE *)(a2 + v8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2A40E4(uint64_t a1, char *__s)
{
  unsigned int v4;
  uint64_t v5;
  size_t v6;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_22F2A4368(a1, __s);
  v5 = *(_QWORD *)a1 + 40 * v4;
  v6 = strlen(__s);
  *(_QWORD *)v5 = v5 + 24;
  *(_OWORD *)(v5 + 8) = xmmword_22F44E350;
  result = sub_22E61131C(v5, __s, &__s[v6]);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2A4174(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
    return sub_22F2A442C(a1);
  v3 = *(_QWORD *)a1 + 40 * v2;
  *(_QWORD *)v3 = v3 + 24;
  *(_OWORD *)(v3 + 8) = xmmword_22F44E350;
  result = sub_22E61131C(v3, "triangle_data", "");
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2A41E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;

  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = v4 + 40 * *(unsigned int *)(a1 + 8);
  v6 = *(_BYTE *)(a2 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (_BYTE *)a2;
  else
    v8 = *(_BYTE **)a2;
  v9 = v6 & 0x7F;
  if (v7)
    v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = v5 + 24;
  *(_OWORD *)(v5 + 8) = xmmword_22F44E350;
  sub_22E61131C(v5, v8, &v8[v9]);
  sub_22F2A42B0(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = 0;
  return v4 + 40 * v10 - 40;
}

void sub_22F2A42B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 40 * v2;
    do
    {
      *(_QWORD *)a2 = a2 + 24;
      *(_OWORD *)(a2 + 8) = xmmword_22F44E350;
      if (*(_QWORD *)(v5 + 8))
        sub_22E3B2DB8(a2, v5);
      v5 += 40;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 40 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 40);
        if ((void *)(v8 + v9 - 16) != v10)
          free(v10);
        v9 -= 40;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F2A4368(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unsigned int v7;

  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = v4 + 40 * *(unsigned int *)(a1 + 8);
  v6 = strlen(a2);
  *(_QWORD *)v5 = v5 + 24;
  *(_OWORD *)(v5 + 8) = xmmword_22F44E350;
  sub_22E61131C(v5, a2, &a2[v6]);
  sub_22F2A42B0(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = 0;
  return v4 + 40 * v7 - 40;
}

uint64_t sub_22F2A442C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2 + 40 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v3 = v3 + 24;
  *(_OWORD *)(v3 + 8) = xmmword_22F44E350;
  sub_22E61131C(v3, "triangle_data", "");
  sub_22F2A42B0(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 40 * v4 - 40;
}

char **sub_22F2A44DC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 40];
      if (&v2[v4 - 16] != v5)
        free(v5);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

BOOL sub_22F2A4550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 356)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22F2A45B0(uint64_t a1)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 1880) = *(_QWORD *)(a1 + 1872);
  sub_22E6C3F7C((unsigned int *)(a1 + 1896));
  v2 = (_OWORD *)(a1 + 1848);
  v3 = *(std::__shared_weak_count **)(a1 + 1856);
  *v2 = 0u;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_22F2A462C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v5 = result;
    v6 = operator new();
    *(_QWORD *)v6 = &off_24FA6D098;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = a2 + 840;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 32) = a3 != 2;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    return sub_22F41A428(v5, v6, 1);
  }
  return result;
}

uint64_t sub_22F2A46A8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = a2[12];
  v14 = a2[13];
  v15 = a2[14];
  *(_OWORD *)(a1 + 235) = *(__int128 *)((char *)a2 + 235);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 192) = v13;
  v16 = *(__int128 *)((char *)a2 + 252);
  *(_QWORD *)(a1 + 265) = *(_QWORD *)((char *)a2 + 265);
  *(_OWORD *)(a1 + 252) = v16;
  if ((__int128 *)a1 != a2)
  {
    sub_22E63B120(a1 + 280, *((std::string **)a2 + 35), *((std::string **)a2 + 36), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 36) - *((_QWORD *)a2 + 35)) >> 3));
    sub_22E63B120(a1 + 304, *((std::string **)a2 + 38), *((std::string **)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 3));
    sub_22E63B120(a1 + 328, *((std::string **)a2 + 41), *((std::string **)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 42) - *((_QWORD *)a2 + 41)) >> 3));
    sub_22E63B120(a1 + 352, *((std::string **)a2 + 44), *((std::string **)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 3));
    sub_22E63B120(a1 + 376, *((std::string **)a2 + 47), *((std::string **)a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 48) - *((_QWORD *)a2 + 47)) >> 3));
  }
  v17 = a2[25];
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_OWORD *)(a1 + 400) = v17;
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)((char *)a2 + 424));
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 28));
  std::string::operator=((std::string *)(a1 + 472), (const std::string *)((char *)a2 + 472));
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 31));
  if ((__int128 *)a1 != a2)
  {
    sub_22E63B120(a1 + 520, *((std::string **)a2 + 65), *((std::string **)a2 + 66), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 66) - *((_QWORD *)a2 + 65)) >> 3));
    sub_22E63B120(a1 + 544, *((std::string **)a2 + 68), *((std::string **)a2 + 69), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 69) - *((_QWORD *)a2 + 68)) >> 3));
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    sub_22E63B120(a1 + 576, *((std::string **)a2 + 72), *((std::string **)a2 + 73), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 73) - *((_QWORD *)a2 + 72)) >> 3));
    sub_22E6C5B48((uint64_t *)(a1 + 600), *((__int128 **)a2 + 75), a2 + 38);
    sub_22E6C5CBC((void ***)(a1 + 624), *((std::string **)a2 + 78), *((std::string **)a2 + 79), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 79) - *((_QWORD *)a2 + 78)) >> 4));
  }
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)a2 + 27);
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)a2 + 28);
  v18 = *((_BYTE *)a2 + 704);
  *(_QWORD *)(a1 + 696) = *((_QWORD *)a2 + 87);
  *(_BYTE *)(a1 + 704) = v18;
  std::string::operator=((std::string *)(a1 + 712), (const std::string *)((char *)a2 + 712));
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 46));
  std::string::operator=((std::string *)(a1 + 760), (const std::string *)((char *)a2 + 760));
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 49));
  std::string::operator=((std::string *)(a1 + 808), (const std::string *)((char *)a2 + 808));
  *(_DWORD *)(a1 + 832) = *((_DWORD *)a2 + 208);
  std::string::operator=((std::string *)(a1 + 840), (const std::string *)a2 + 35);
  return a1;
}

uint64_t sub_22F2A490C(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = *a1;
  if ((*(_DWORD *)(*a1 + 52) & 0x40000000) != 0)
  {
    v4 = 7;
  }
  else if ((*(_BYTE *)(v1 + 68) & 0x20) != 0)
  {
    v4 = 9;
  }
  else if ((*(_WORD *)(v1 + 96) & 0x20) != 0)
  {
    v4 = 10;
  }
  else
  {
    if ((*(_QWORD *)v1 & 0x4000) != 0)
      v2 = 5;
    else
      v2 = 3;
    if ((*(_QWORD *)v1 & 0x4000) != 0)
      v3 = 6;
    else
      v3 = 4;
    if ((*(_QWORD *)v1 & 0x100) != 0)
      v4 = v3;
    else
      v4 = v2;
  }
  return v4 | (((*(_DWORD *)(v1 + 240) & 0xE0) == 32) << 8);
}

void sub_22F2A4980()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A4994()
{
  return 0;
}

uint64_t sub_22F2A49A4()
{
  return 0;
}

uint64_t sub_22F2A49AC()
{
  return 0;
}

uint64_t sub_22F2A49B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F2A4A24(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_22F2A4A34(uint64_t a1, int *a2, _QWORD *a3)
{
  unsigned int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_22F2A4ADC(a1, a2, a3);
  result = sub_22F1CE30C(*(_QWORD *)a1 + 96 * v4, *a2, a3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_22F2A4A8C(uint64_t a1, int a2)
{
  unsigned int v3;
  int v4;

  v3 = a2 & 0x7FFFFFFF;
  if (sub_22E63AF88(a1, *(_DWORD *)(a1 + 304), a2 & 0x7FFFFFFF))
    v4 = *(_DWORD *)(a1 + 304);
  else
    v4 = sub_22F1E1EE8(a1, v3);
  return v4 == *(_DWORD *)(a1 + 344);
}

uint64_t sub_22F2A4ADC(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F1CE30C(v6 + 96 * *(unsigned int *)(a1 + 8), *a2, a3);
  sub_22E6C5690((uint64_t *)a1, v6);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = 0;
  return v6 + 96 * v7 - 96;
}

void sub_22F2A4B84(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2A4BF0(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2A4BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 112 * v2;
    do
    {
      sub_22E6C5798(a2, v5);
      v5 += 112;
      a2 += 112;
      v6 -= 112;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 112 * v7;
      v10 = v8 - 112;
      do
      {
        sub_22E6C586C(v10 + v9);
        v9 -= 112;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F2A4C74()
{
  return 0;
}

uint64_t *sub_22F2A4C7C(uint64_t a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  v4 = (uint64_t **)sub_22F2A4CF0(a1, &v9, a2 + 4);
  v5 = v9;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = v5;
  *v4 = a2;
  v6 = **(_QWORD **)a1;
  v7 = a2;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v7 = *v4;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v7);
  ++*(_QWORD *)(a1 + 16);
  return a2;
}

_QWORD *sub_22F2A4CF0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  const void **v7;
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD v13[2];

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        v7 = (const void **)(v4 + 32);
        v8 = *((_BYTE *)a3 + 23);
        v9 = v8 < 0;
        v10 = (uint64_t *)*a3;
        if (v8 >= 0)
          v10 = a3;
        v11 = v8 & 0x7F;
        if (v9)
          v11 = a3[1];
        v13[0] = v10;
        v13[1] = v11;
        if ((sub_22E622CD8(v7, (uint64_t)v13) & 0x80000000) == 0)
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_12;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_12:
  *a2 = v5;
  return result;
}

char *sub_22F2A4D8C(uint64_t a1, __int128 *a2)
{
  char *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;

  v4 = (char *)operator new(0x50uLL);
  sub_22E579A24(v4 + 32, a2);
  v5 = (uint64_t **)sub_22F2A4CF0(a1, &v10, (uint64_t *)v4 + 4);
  v6 = v10;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  *v5 = (uint64_t *)v4;
  v7 = **(_QWORD **)a1;
  v8 = (uint64_t *)v4;
  if (v7)
  {
    *(_QWORD *)a1 = v7;
    v8 = *v5;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v8);
  ++*(_QWORD *)(a1 + 16);
  return v4;
}

uint64_t sub_22F2A4E28()
{
  return 0;
}

uint64_t *sub_22F2A4E30(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 9, 3);
  v10 = (_QWORD *)v9;
  v11 = v9 + 8;
  if (a3)
    memcpy((void *)(v9 + 8), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2A4F2C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 40) = 0;
  v6 = a1 + 40;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
    sub_22F2A4F8C(v6, (_QWORD *)a2 + 5);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a1 + 80), (const void **)(a1 + 112), (const llvm::SmallPtrSetImplBase *)(a2 + 5));
  return a1;
}

uint64_t sub_22F2A4F8C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 28))
      free(*(void **)(a1 + 16));
    *(_BYTE *)(a1 + 32) = 0;
  }
  *(_QWORD *)a1 = *a2;
  result = sub_22F0AB718(a1 + 8);
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_22F2A4FE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
        {
          v8 = *(_QWORD *)v5;
          v7 = *((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          llvm::deallocate_buffer(v5, (void *)(v8 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_22F2A5084(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A5098(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A50CC(uint64_t a1)
{
  return sub_22E3B4EF4(a1 + 24);
}

_DWORD *sub_22F2A50D8(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
  {
    if ((*result)-- == 1)
    {
      sub_22F365694();
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

_DWORD *sub_22F2A511C(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
  {
    if ((*result)-- == 1)
    {
      sub_22F41AEC4();
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

_DWORD *sub_22F2A5160(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
  {
    if ((*result)-- == 1)
    {
      sub_22F4235A0();
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

char **sub_22F2A51A4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 112 * v3;
    v5 = v2 - 112;
    do
    {
      sub_22E6C586C((uint64_t)&v5[v4]);
      v4 -= 112;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_22F2A5208(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    v5 = v2 - 96;
    do
    {
      sub_22E6C6264((uint64_t)&v5[v4]);
      v4 -= 96;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F2A526C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = llvm::CrashRecoveryContext::GetCurrent((llvm::CrashRecoveryContext *)result);
    if (result)
    {
      v2 = result;
      result = operator new();
      *(_BYTE *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = v1;
      *(_QWORD *)result = &off_24FA6D120;
      *(_QWORD *)(result + 8) = v2;
    }
  }
  return result;
}

void sub_22F2A52CC(llvm::CrashRecoveryContextCleanup *a1)
{
  llvm::CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A52F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    sub_22E6C3914(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F2A5324(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = llvm::CrashRecoveryContext::GetCurrent((llvm::CrashRecoveryContext *)result);
    if (result)
    {
      v2 = result;
      result = operator new();
      *(_BYTE *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = v1;
      *(_QWORD *)result = &off_24FA6D148;
      *(_QWORD *)(result + 8) = v2;
    }
  }
  return result;
}

void sub_22F2A5384(llvm::CrashRecoveryContextCleanup *a1)
{
  llvm::CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2A53A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A53B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A53E8(uint64_t a1)
{
  return sub_22E54B4D4(a1 + 24);
}

void sub_22F2A53F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A5404(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A5434(uint64_t a1)
{
  return sub_22E6C656C(a1 + 24);
}

void sub_22F2A5440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A5450(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A5480(uint64_t a1)
{
  return sub_22E6C6B18(a1 + 24);
}

void sub_22F2A548C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A54A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A54D4(uint64_t a1)
{
  return sub_22F4181C8(a1 + 24);
}

uint64_t sub_22F2A54E0()
{
  return 0;
}

uint64_t sub_22F2A54E8()
{
  return 0;
}

uint64_t sub_22F2A54F0()
{
  return 1;
}

uint64_t sub_22F2A54F8()
{
  return 0;
}

uint64_t sub_22F2A5504()
{
  return 0;
}

void sub_22F2A5510(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A5524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A5558(uint64_t a1)
{
  return sub_22E6C759C(a1 + 24);
}

uint64_t sub_22F2A5564(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  __n128 v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a1 + 96));
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a1 + 120));
    std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a1 + 192));
  }
  else
  {
    sub_22E6C77EC(a1 + 24, *(std::string **)(a2 + 24), *(std::string **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
    sub_22E6C7A88(a1 + 48, *(std::string **)(a2 + 48), *(std::string **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
    std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    sub_22E6C7C98((uint64_t *)(a1 + 144), *(__int128 **)(a2 + 144), (__int128 *)(a2 + 152));
    sub_22E63B120(a1 + 168, *(std::string **)(a2 + 168), *(std::string **)(a2 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3));
    std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
    v5 = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = v5;
    sub_22F2A57E0(a1 + 240, (_DWORD *)(a2 + 240));
    sub_22E6C7F6C(a1 + 504, a2 + 504, v6);
    sub_22E6C81CC((uint64_t *)(a1 + 776), *(_QWORD **)(a2 + 776), (_QWORD *)(a2 + 784));
    sub_22E63B120(a1 + 800, *(std::string **)(a2 + 800), *(std::string **)(a2 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 808) - *(_QWORD *)(a2 + 800)) >> 3));
    sub_22E63B120(a1 + 824, *(std::string **)(a2 + 824), *(std::string **)(a2 + 832), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 832) - *(_QWORD *)(a2 + 824)) >> 3));
  }
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  return a1;
}

uint64_t sub_22F2A56D0(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  v4 = (uint64_t **)sub_22F2A07E8(a1, &v9, (const void **)(a2 + 32));
  v5 = v9;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *v4 = (uint64_t *)a2;
  v6 = **(_QWORD **)a1;
  v7 = (uint64_t *)a2;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v7 = *v4;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v7);
  ++*(_QWORD *)(a1 + 16);
  return a2;
}

char *sub_22F2A5744(uint64_t a1, __int128 *a2)
{
  char *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;

  v4 = (char *)operator new(0x50uLL);
  sub_22E579A24(v4 + 32, a2);
  v5 = (uint64_t **)sub_22F2A07E8(a1, &v10, (const void **)v4 + 4);
  v6 = v10;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  *v5 = (uint64_t *)v4;
  v7 = **(_QWORD **)a1;
  v8 = (uint64_t *)v4;
  if (v7)
  {
    *(_QWORD *)a1 = v7;
    v8 = *v5;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v8);
  ++*(_QWORD *)(a1 + 16);
  return v4;
}

unsigned int *sub_22F2A57E0(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v6;

  sub_22E583128(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 16)));
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 0x11u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v6 = 16;
    else
      v6 = a2[4];
    *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v6, 8);
    *(_QWORD *)(a1 + 16) = v6;
  }
  return sub_22E6C7E0C((unsigned int *)a1, a2);
}

uint64_t sub_22F2A5884(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a1 + 80));
    std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a1 + 104));
  }
  else
  {
    sub_22E6C7A88(a1, *(std::string **)a2, *(std::string **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
    sub_22E63B120(a1 + 24, *(std::string **)(a2 + 24), *(std::string **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    sub_22E63B120(a1 + 48, *(std::string **)(a2 + 48), *(std::string **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
    std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
    sub_22E63B120(a1 + 128, *(std::string **)(a2 + 128), *(std::string **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
    v4 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 155) = *(_DWORD *)(a2 + 155);
    *(_DWORD *)(a1 + 152) = v4;
    sub_22E6C81CC((uint64_t *)(a1 + 160), *(_QWORD **)(a2 + 160), (_QWORD *)(a2 + 168));
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
    v5 = *(_DWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
    *(_DWORD *)(a1 + 192) = v5;
    sub_22E6C841C(a1 + 200, *(std::string **)(a2 + 200), *(std::string **)(a2 + 208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 4));
    sub_22E6C8628(a1 + 224, *(std::string **)(a2 + 224), *(std::string **)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 5);
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  sub_22E6C83A4((_QWORD *)(a1 + 256), (uint64_t *)(a2 + 256));
  sub_22F2A59EC((_QWORD *)(a1 + 272), (_QWORD *)(a2 + 272));
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  return a1;
}

_QWORD *sub_22F2A59EC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_22E63BEA4(v6, a1);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_7;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_7:
    (*v4)();
  }
  return a1;
}

void sub_22F2A5ACC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_22E54B71C(v3 - 48);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_22F2A5B28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A5B3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A5B70(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_22E6C97A0(a1 + 104);
  return sub_22E6D86EC(v1);
}

uint64_t sub_22F2A5B9C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_22E6C8838(a1 + 8, a2 + 8);
  sub_22E6C88B4((char *)(a1 + 72), (__int128 *)(a2 + 72));
  sub_22E617234(a1 + 216, (__int128 *)(a2 + 216));
  sub_22E6C89D4(a1 + 1944, (__int128 *)(a2 + 1944));
  sub_22E6C8BF0((char *)(a1 + 2136), (__int128 *)(a2 + 2136));
  sub_22E6C8C94(a1 + 2208, (__int128 *)(a2 + 2208));
  *(_DWORD *)(a1 + 3040) = *(_DWORD *)(a2 + 3040);
  return a1;
}

void sub_22F2A5C10(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E6C940C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t *sub_22F2A5C80(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_22E617DDC(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (uint64_t *)operator new(0x50uLL);
    sub_22E6C9544(v7 + 4, a4);
    v10 = v14;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v9 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_22F2A5D30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  sub_22E54B71C(a1 + 32);
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_22F2A5DD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2A5DF8(uint64_t a1)
{
  sub_22E6C9C58(a1 + 24, *(_QWORD *)(a1 + 24));
}

void **sub_22F2A5E04(void **a1)
{
  sub_22F2D0610(a1 + 33);
  sub_22E6C6130((uint64_t)(a1 + 19));
  if (*a1 != a1 + 3)
    free(*a1);
  return a1;
}

uint64_t *sub_22F2A5E48(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 17, 8);
  v10 = v9;
  v11 = v9 + 16;
  if (a3)
    memcpy((void *)(v9 + 16), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *(_QWORD *)v10 = a3;
  *(_DWORD *)(v10 + 8) = 0;
  *i = v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void sub_22F2A5F44(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E6C9C9C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2A5FB8(_QWORD *a1)
{
  sub_22F2A6108(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A5FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t sub_22F2A602C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_22F2A6064(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_22F2A609C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_22F2A60AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F41A6FC((_DWORD *)a1, a2);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t sub_22F2A6108(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FA6D3B0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return nullsub_910(a1);
}

uint64_t *sub_22F2A6164(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v9 = i[1];
        ++i;
        v7 = v9;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v10 = MEMORY[0x23489D23C](a3 + 17, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2A625C(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &unk_255E04EAB || a2 == &unk_255E04EB1;
  return a2 == &unk_255E04EAA || v3;
}

uint64_t sub_22F2A6290()
{
  return 0;
}

BOOL sub_22F2A6298(uint64_t a1, void *a2)
{
  return a2 == &unk_255E04EAB || a2 == &unk_255E04EB1;
}

double sub_22F2A62EC@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_22F2A6320()
{
  return 0;
}

void sub_22F2A6328(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A633C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2A6370(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 72))
    free(v2);
}

void sub_22F2A6390(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = 8 * v4;
    v7 = (_QWORD *)v2;
    do
    {
      v8 = *v3;
      *v3++ = 0;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    v9 = *(_QWORD *)a1 - 8;
    do
    {
      v10 = *(_QWORD *)(v9 + v5);
      *(_QWORD *)(v9 + v5) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v5 -= 8;
    }
    while (v5);
    v3 = *(uint64_t **)a1;
  }
  if (v3 != (uint64_t *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2A6444@<X0>(_QWORD *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 88))(*a1, a1[2], 0);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 88))(*a1, a1[2], 0);
      if (*(unsigned __int8 *)(result + v9) == a2)
        break;
      if (v8 == ++v9)
        goto LABEL_5;
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 72))(*a1, a1[2], v9);
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = a2;
    v10 = 1;
  }
  else
  {
LABEL_5:
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

llvm *sub_22F2A6508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm *result;
  llvm *v5;
  const char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  std::error_code v11;

  llvm::cas::ObjectStore::getProxy();
  result = (llvm *)v8;
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)&v8 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = result;
  }
  else
  {
    result = (llvm *)(*(uint64_t (**)())(*(_QWORD *)v8 + 80))();
    if (result
      && (result = (llvm *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, v9, (uint64_t)result - 1), result == *(llvm **)(a1 + 16)))
    {
      *(_OWORD *)a2 = v8;
      *(_QWORD *)(a2 + 16) = v9;
      *(_BYTE *)(a2 + 24) &= ~1u;
    }
    else
    {
      v5 = (llvm *)llvm::inconvertibleErrorCode(result);
      v11.__cat_ = (const std::error_category *)"not a compile job result";
      result = (llvm *)llvm::createStringError(v5, v11, v6);
      *(_BYTE *)(a2 + 24) |= 1u;
      *(_QWORD *)a2 = v7;
    }
  }
  if ((v10 & 1) != 0)
  {
    result = (llvm *)v8;
    if ((_QWORD)v8)
      return (llvm *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

uint64_t sub_22F2A6630(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 80))(*a2, a2[2]);
  if (result)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, a2[2], result - 1) == *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_22F2A668C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 80))(*a2, a2[2]);
  if (result)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, a2[2], result - 1) == *(_QWORD *)(a1 + 16);
  return result;
}

void sub_22F2A66E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

void *sub_22F2A66FC()
{
  return &unk_255E04E64;
}

uint64_t sub_22F2A6708(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == (void *)MEMORY[0x24BED67E8] || a2 == (void *)MEMORY[0x24BED7500];
  return a2 == &unk_255E04E64 || v3;
}

uint64_t sub_22F2A673C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;

  v3 = a3;
  *(_BYTE *)(a1 + 8) = a3 != 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_QWORD *)a1 = &off_24FA6D7A8;
  v6 = (_QWORD *)operator new();
  bzero(v6, 0xC38uLL);
  sub_22F2A8710(v6);
  sub_22E6D5660((uint64_t)(v6 + 10));
  *(_QWORD *)(a1 + 16) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24FA6D8D0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v14 = 0;
  v8 = (int *)sub_22E6C9C08(&v14, 0);
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
  {
    v9 = *v3 + 1;
  }
  else
  {
    v8 = (int *)operator new();
    v3 = v8;
    *v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = 0x1800000000;
    v9 = 1;
  }
  *(_QWORD *)(a1 + 184) = v3;
  *v3 = v9;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_BYTE *)(a1 + 352) = 1;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 363) = 0;
  v10 = llvm::errs((llvm *)v8);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_24FA6D7F0;
  v11[1] = v11 + 1;
  v11[2] = v11 + 1;
  v11[3] = 0;
  *(_QWORD *)(a1 + 408) = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24FA6D908;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  *(_QWORD *)(a1 + 416) = v12;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  return a1;
}

void sub_22F2A6920(uint64_t a1)
{
  sub_22E6CB49C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F2A6944(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 368))
    return *(_BYTE *)(a1 + 370) == 0;
  v1 = *(_QWORD *)(a1 + 264);
  return v1
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 120) + 56) + 20) & 0x200000000000) != 0
      && *(_BYTE *)(v1 + 7328)
      && !*(_QWORD *)(v1 + 512)
      && *(_BYTE *)(v1 + 7329)
      && (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2289) & 0x40) != 0
      && *(_BYTE *)(a1 + 370) == 0;
}

_DWORD *sub_22F2A69A8(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v4;

  if (a2)
    ++*(_DWORD *)(a2 + 8);
  result = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2;
  if (result)
  {
    v4 = result[2] - 1;
    result[2] = v4;
    if (!v4)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F2A69E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = a2;
  if (result)
  {
    sub_22E8FFA2C(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F2A6A24(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 208))
  {
    result = *(_QWORD *)(a1 + 224);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_22F2A6A84(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::value_type *__s;
  std::string::size_type __sz[2];
  _QWORD v14[33];

  v14[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v7 = *(_BYTE **)(v4 + 96);
  v5 = v4 + 96;
  v6 = v7;
  v8 = *(_BYTE *)(v5 + 23);
  if (v8 >= 0)
    v9 = (_BYTE *)v5;
  else
    v9 = v6;
  v10 = *(_QWORD *)(v5 + 8);
  if (v8 >= 0)
    v10 = v8 & 0x7F;
  __s = (std::string::value_type *)v14;
  *(_OWORD *)__sz = xmmword_22F44E320;
  sub_22E61131C((uint64_t)&__s, v9, &v9[v10]);
  v11 = __sz[0];
  if (__sz[0] && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) + 216) & 2) == 0)
  {
    llvm::sys::path::append();
    v11 = __sz[0];
  }
  std::string::__init(a2, __s, v11);
  if (__s != (std::string::value_type *)v14)
    free(__s);
}

_DWORD *sub_22F2A6BAC(uint64_t a1)
{
  uint64_t v2;
  _DWORD *result;
  int v4;

  v2 = operator new();
  *(_QWORD *)v2 = MEMORY[0x24BED8410] + 16;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 14) = 28;
  *(_DWORD *)(v2 + 8) = 1;
  result = *(_DWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v2;
  if (result)
  {
    v4 = result[2] - 1;
    result[2] = v4;
    if (!v4)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 32))(result);
  }
  return result;
}

_DWORD *sub_22F2A6C34(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = (_DWORD *)operator new();
  v4 = sub_22F365690((uint64_t)v3, **(_QWORD **)(a1 + 16), *(llvm::SpecialCaseList **)(v2 + 88), v2 + 544, v2 + 672, *(_QWORD *)(v2 + 680), *(_DWORD *)(v2 + 740));
  sub_22EF596EC(v4, *(uint64_t **)(a1 + 40), *(_QWORD *)(a1 + 48));
  return sub_22E6CBDAC(a1, v3);
}

uint64_t sub_22F2A6CA8(_QWORD *a1, _BYTE *a2, size_t a3, int a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  const char *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v40;
  uint64_t v41;

  v10 = a1[2];
  v29 = *(_DWORD *)(*(_QWORD *)(v10 + 56) + 184) != 0;
  v11 = *(uint64_t **)(v10 + 40);
  v12 = *((_BYTE *)v11 + 23);
  v13 = v11[1];
  if (v12 < 0)
    v11 = (uint64_t *)*v11;
  v31 = (const char *)v11;
  v14 = v12 & 0x7F;
  if (v12 < 0)
    v14 = v13;
  v30 = v14;
  v32 = (_DWORD *)a1[23];
  v33 = a1[24];
  v15 = a1[26];
  v16 = sub_22E6CB02C(a1);
  v17 = a1[2];
  v18 = *(_QWORD **)(v17 + 2808);
  v19 = (uint64_t)(*(_QWORD *)(v17 + 2816) - (_QWORD)v18) >> 4;
  v20 = (uint64_t *)a1[38];
  v21 = (uint64_t)(a1[39] - (_QWORD)v20) >> 4;
  v22 = (*(_DWORD *)(v17 + 2288) >> 13) & 1;
  v23 = sub_22F2A7234(a1);
  v24 = sub_22F2A7310(a1);
  v25 = *a8;
  *a8 = 0;
  v40 = v25;
  sub_22F2A6E44(a2, a3, v31, v30, a4, a5, v33, v32, &v41, v15, v16, v18, v19, v20, v21, a6, a7, v29, v22,
    v23,
    v24,
    &v40);
  v26 = a1[33];
  a1[33] = v41;
  if (v26)
  {
    v27 = *(_DWORD *)(v26 + 32) - 1;
    *(_DWORD *)(v26 + 32) = v27;
    if (!v27)
      (*(void (**)(uint64_t))(*(_QWORD *)(v26 + 24) + 8))(v26 + 24);
  }
  result = v40;
  if (v40)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  return result;
}

void sub_22F2A6E44(_BYTE *a1@<X0>, size_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _DWORD *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57;
  size_t v58;
  size_t v59;
  int v60;
  int v61;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;

  v27 = **(_QWORD **)(a7 + 104);
  v29 = operator new();
  if (a4)
    v30 = a3;
  else
    v30 = "";
  if (v30)
    v31 = strlen(v30);
  else
    v31 = 0;
  v32 = *(_WORD *)(v27 + 848);
  v70 = 0;
  sub_22E78B02C(v29, (_QWORD *)a7, a8, a10, a11, a12, a13, v28, v30, v31, a5, a6, 0, (v32 & 0x80) != 0, HIBYTE(v32) & 1, a19, &v70);
  v33 = *(_DWORD *)(v29 + 32) + 1;
  *(_DWORD *)(v29 + 32) = v33;
  v34 = v70;
  v70 = 0;
  if (v34)
  {
    v35 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v35, 0x10B2C402AE41D3ELL);
    v33 = *(_DWORD *)(v29 + 32);
  }
  *(_DWORD *)(v29 + 32) = v33 + 1;
  v36 = *(_DWORD **)(a10 + 16048);
  *(_QWORD *)(a10 + 16048) = v29 + 24;
  if (v36)
  {
    v60 = v36[2] - 1;
    v36[2] = v60;
    if (!v60)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
  }
  *(_QWORD *)(v29 + 64) = a16;
  *(_BYTE *)(v29 + 72) = a17;
  if (a15)
  {
    v38 = 16 * a15;
    do
    {
      v39 = *a14;
      a14 += 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 24))(v39, v29);
      v38 -= 16;
    }
    while (v38);
  }
  v40 = *(_QWORD *)(a7 + 48);
  v41 = (_QWORD *)operator new();
  *v41 = &off_24FA6DB28;
  v41[1] = a20;
  v41[2] = a21;
  v41[3] = a8;
  v41[4] = v40;
  v69 = v41;
  sub_22F2A73EC(v29, (uint64_t *)&v69);
  v42 = (uint64_t)v69;
  v69 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (_QWORD *)operator new();
  *v43 = &off_24FA6DBE0;
  v43[1] = a7;
  v43[2] = v43 + 4;
  v43[3] = 0x800000000;
  v66 = v43;
  sub_22E6D5B78((uint64_t)&v67, v29, &v66);
  v44 = v66;
  v66 = 0;
  if (v44)
    (*(void (**)(_QWORD *))(*v44 + 8))(v44);
  v45 = *a22;
  if (*a22)
  {
    *a22 = 0;
    v71 = v45;
    sub_22F2DFF80(v29 + 144, a1, a2, &v71);
    v46 = v71;
    v71 = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  if (a18)
    v47 = 3;
  else
    v47 = 2;
  if (sub_22E77A990(v29, a1, a2, v47, 0, 0, 0))
  {
    sub_22E6CDD84((uint64_t)v43);
    v48 = *(_DWORD **)(a10 + 16048);
    *(_QWORD *)(a10 + 16048) = 0;
    if (v48)
    {
      v61 = v48[2] - 1;
      v48[2] = v61;
      if (!v61)
        (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    }
    v49 = 0;
  }
  else
  {
    v55 = *(_BYTE *)(v29 + 11015);
    v56 = v55;
    if (v55 >= 0)
      v57 = (void *)(v29 + 10992);
    else
      v57 = *(void **)(v29 + 10992);
    v58 = v55 & 0x7F;
    if (v56 >= 0)
      v59 = v58;
    else
      v59 = *(_QWORD *)(v29 + 11000);
    sub_22E6CB154(a7, v57, v59);
    sub_22E6CDC80((uint64_t)v43);
    v49 = v29;
    v29 = 0;
  }
  *a9 = v49;
  v50 = v67;
  v51 = *(_QWORD **)(v67 + 56);
  *(_QWORD *)(v67 + 56) = 0;
  if (v68)
  {
    v52 = v51[2];
    v51[2] = 0;
    v53 = *(_QWORD *)(v50 + 56);
    *(_QWORD *)(v50 + 56) = v52;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    goto LABEL_29;
  }
  if (v51)
LABEL_29:
    (*(void (**)(_QWORD *))(*v51 + 8))(v51);
  if (v29)
  {
    v54 = *(_DWORD *)(v29 + 32) - 1;
    *(_DWORD *)(v29 + 32) = v54;
    if (!v54)
      (*(void (**)(uint64_t))(*(_QWORD *)(v29 + 24) + 8))(v29 + 24);
  }
}

uint64_t sub_22F2A7234(_QWORD *a1)
{
  uint64_t result;
  __int128 v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;

  result = a1[7];
  if (!result)
  {
    sub_22F418838((std::string *)(a1[2] + 152), a1[4], 1, (std::string::size_type *)&v13);
    v3 = v13;
    v13 = 0uLL;
    v4 = (std::__shared_weak_count *)a1[8];
    *(_OWORD *)(a1 + 7) = v3;
    if (v4)
    {
      v5 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        v8 = v5;
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v12 = v9;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return a1[7];
  }
  return result;
}

uint64_t sub_22F2A7310(_QWORD *a1)
{
  uint64_t result;
  __int128 v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;

  result = a1[9];
  if (!result)
  {
    sub_22F418928((std::string *)(a1[2] + 152), a1[4], 1, (std::string::pointer *)&v13);
    v3 = v13;
    v13 = 0uLL;
    v4 = (std::__shared_weak_count *)a1[10];
    *(_OWORD *)(a1 + 9) = v3;
    if (v4)
    {
      v5 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        v8 = v5;
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v12 = v9;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return a1[9];
  }
  return result;
}

uint64_t sub_22F2A73EC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = (_QWORD *)operator new();
    v5 = *a2;
    *a2 = 0;
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *v4 = &off_24FA71E80;
    v4[1] = v5;
    v4[2] = v6;
    v7 = *a2;
    *a2 = (uint64_t)v4;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2A7498(llvm *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  void *v6;
  size_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 24);
  v4 = *(_BYTE *)(v2 + 2599);
  v5 = v4;
  if (v4 >= 0)
    v6 = (void *)(v2 + 2576);
  else
    v6 = *(void **)(v2 + 2576);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(v2 + 2584);
  v9 = *(_DWORD *)(v2 + 2600);
  v10 = *(_DWORD *)(v2 + 2604);
  if (*((_QWORD *)a1 + 29))
  {
    result = sub_22E6CDEE0(*((_QWORD *)a1 + 24), v6, v8, *(_DWORD *)(v2 + 2600), *(_DWORD *)(v2 + 2604));
    if ((_DWORD)result)
    {
      result = *((_QWORD *)a1 + 29);
      *((_QWORD *)a1 + 29) = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v12 = (_DWORD *)(v2 + 2296);
    v13 = llvm::outs(a1);
    v14 = sub_22F2A7588(v3, v6, v8, v9, v10, v12, v13);
    result = *((_QWORD *)a1 + 29);
    *((_QWORD *)a1 + 29) = v14;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F2A7588(uint64_t a1, void *a2, size_t a3, unsigned int a4, int a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v10;

  if ((sub_22E6CDEE0(a1, a2, a3, a4, a5) & 1) != 0)
    return 0;
  v10 = operator new();
  return sub_22F2A7D84(v10, a6, a7);
}

uint64_t sub_22F2A75DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = operator new();
  MEMORY[0x23489C228](v2, "frontend", 8, "Clang front-end time report", 27);
  v3 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v2;
  if (v3)
  {
    v4 = MEMORY[0x23489C234]();
    MEMORY[0x2348A0E9C](v4, 0x10B2C402416CA65);
  }
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_WORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  llvm::Timer::init();
  result = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v5;
  if (result)
  {
    MEMORY[0x23489EEC8]();
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F2A76DC(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  size_t v16;
  size_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = operator new();
  v7 = sub_22F308980(v6, (_QWORD *)a1[24], a1[26], a1[28], a2, a3);
  v8 = a1[30];
  a1[30] = v7;
  if (v8)
  {
    v20 = sub_22E8FFA2C(v8);
    MEMORY[0x2348A0E9C](v20, 0x10F3C40F108FF96);
    v7 = a1[30];
  }
  *(_OWORD *)(v7 + 132) = *(_OWORD *)(a1[2] + 88);
  v9 = a1[2];
  v10 = *(unsigned __int8 *)(v9 + 127);
  if (*(char *)(v9 + 127) < 0)
    v11 = *(_QWORD *)(v9 + 112);
  else
    v11 = *(unsigned __int8 *)(v9 + 127);
  if (v11)
  {
    v14 = *(void **)(v9 + 104);
    v12 = (_QWORD *)(v9 + 104);
    v13 = v14;
    if ((v10 & 0x80u) == 0)
      v15 = v12;
    else
      v15 = v13;
    v16 = v12[1];
    if ((v10 & 0x80u) == 0)
      v17 = v10;
    else
      v17 = v16;
    sub_22EF27530(a1[30] + 120, v15, v17);
  }
  result = sub_22F18E3E4(a1[24]);
  if (result)
  {
    v28 = result;
    result = sub_22EF26DF4((uint64_t *)(a1[30] + 120), result, (*(_QWORD *)(*(_QWORD *)a1[2] + 192) >> 36) & 1, *(_QWORD *)(a1[2] + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1[2] + 136) - *(_QWORD *)(a1[2] + 128)) >> 3));
    v21 = a1[30];
    v22 = *(_QWORD *)(v21 + 152);
    v23 = *(_QWORD *)(v21 + 160);
    v24 = (uint64_t *)(v21 + 152);
    v25 = v23 != 0;
    v26 = v22 ? v25 + 1 : v25;
    if (v26)
    {
      v27 = 8 * v26;
      while (1)
      {
        result = sub_22F361AF8(*v24);
        if ((result & 1) != 0)
          break;
        ++v24;
        v27 -= 8;
        if (!v27)
          goto LABEL_14;
      }
      *(_WORD *)(v28 + 1344) |= 0x8000u;
    }
  }
LABEL_14:
  v19 = a1[27];
  if (v19)
  {
    sub_22F308A3C(a1[30], v19);
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[27] + 216))(a1[27], a1[30]);
  }
  return result;
}

llvm::raw_ostream *sub_22F2A7890(llvm::raw_ostream *result)
{
  llvm::raw_ostream *v1;
  llvm::raw_ostream *v2;
  uint64_t v3;
  int v4;
  int v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  char *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  char *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;

  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 2) + 32) + 5) & 2) == 0)
    return result;
  v1 = result;
  v2 = (llvm::raw_ostream *)*((_QWORD *)result + 48);
  v3 = *(_QWORD *)(*((_QWORD *)result + 4) + 48);
  v5 = *(_DWORD *)(v3 + 8);
  v4 = *(_DWORD *)(v3 + 12);
  if (v5)
  {
    v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v7 = sub_22E47DAC0(v6, " warning");
    if (v5 == 1)
      v8 = "";
    else
      v8 = "s";
    sub_22E47DAC0(v7, v8);
    if (!v4)
      goto LABEL_9;
    sub_22E47DAC0(v2, " and ");
  }
  else if (!v4)
  {
    return result;
  }
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = sub_22E47DAC0(v10, " error");
  if (v4 == 1)
    v12 = "";
  else
    v12 = "s";
  sub_22E47DAC0(v11, v12);
LABEL_9:
  sub_22E47DAC0(v2, " generated");
  v9 = **((_QWORD **)v1 + 2);
  if ((*(_BYTE *)(v9 + 68) & 0x20) != 0)
  {
    if ((*(_WORD *)(v9 + 96) & 0x80) != 0)
    {
      v13 = sub_22E47DAC0(v2, " when compiling for ");
      v14 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 16);
      v17 = *(const char **)(v14 + 48);
      v15 = v14 + 48;
      v16 = v17;
      if (*(char *)(v15 + 23) >= 0)
        v18 = (const char *)v15;
      else
        v18 = v16;
      llvm::raw_ostream::write(v13, v18);
    }
    else
    {
      sub_22E47DAC0(v2, " when compiling for host");
    }
  }
  return sub_22E47DAC0(v2, ".\n");
}

uint64_t sub_22F2A79F4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  v6 = 0;
  v3 = sub_22E6D6AF4(*(_QWORD *)(a1 + 1056), *(_DWORD *)(a1 + 1072), a2, &v6);
  result = 0;
  if (v3)
    v5 = v6 == *(_QWORD *)(a1 + 1056) + 16 * *(unsigned int *)(a1 + 1072);
  else
    v5 = 1;
  if (!v5)
    return *(_QWORD *)(v6 + 8);
  return result;
}

BOOL sub_22F2A7A64(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  v2 = *(unsigned int *)(result + 1240);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 1232) + 32 * v2 - 32);
    if (v3 == a2)
      return result;
    v4 = v3 + 1416;
  }
  else
  {
    v4 = result + 1616;
  }
  return sub_22E6D6C48(v4, &v5);
}

uint64_t sub_22F2A7AB0(_QWORD *a1, const void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7)
{
  uint64_t v14;
  uint64_t v15;

  v14 = sub_22F2A7234(a1);
  v15 = sub_22F2A7310(a1);
  return sub_22E6D4E58(a2, a3, a4, a5, a6, a7, v14, v15, a1[23], a1[4]);
}

BOOL sub_22F2A7B44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) == 0;
}

_QWORD *sub_22F2A7B54(_QWORD *a1)
{
  *a1 = &off_24FA6D7F0;
  sub_22F2A847C(a1 + 1);
  return a1;
}

void sub_22F2A7B84(_QWORD *a1)
{
  *a1 = &off_24FA6D7F0;
  sub_22F2A847C(a1 + 1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A7BC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  llvm::MemoryBuffer::getMemBuffer();
  sub_22F42393C(a1, a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2A7C2C(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_22F1D0894(a1, a2, a3, a4, a5, (uint64_t)&v8);
  v5 = sub_22E6D5834(&v8);
  if ((v9 & 1) != 0)
  {
    v6 = v8;
    v8 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5;
}

void sub_22F2A7CB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A7CC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A7CF4(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v6 = *(_QWORD *)a2;
      a2 += 8;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 3);
  return result;
}

uint64_t sub_22F2A7D84(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char *v4;

  *(_QWORD *)a1 = &unk_24FAA56F8;
  *(_DWORD *)(a1 + 8) = *a2;
  *(_QWORD *)a1 = &off_24FAA5740;
  *(_QWORD *)(a1 + 16) = a3;
  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24FA6D0E8;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 5) = v4 + 56;
  *((_DWORD *)v4 + 13) = 4;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 11) = v4 + 104;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 14) = 1;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 48) = v4 + 24;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

uint64_t sub_22F2A7E34(uint64_t a1, const char **a2, uint64_t *a3, char a4)
{
  char *v7;
  uint64_t v8;
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 16) = a4;
  v7 = (char *)operator new(0x70uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24FA6D860;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 7) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *((_DWORD *)v7 + 14) = 9;
  v7[60] = 1;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *(_OWORD *)(v7 + 92) = 0u;
  *((_DWORD *)v7 + 27) = 0xFFFF;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)a1 = v7 + 24;
  *(_QWORD *)(a1 + 8) = v7;
  v10 = v12;
  v11 = xmmword_22F44E310;
  sub_22E486DFC(a2, (uint64_t)&v10);
  *a3 = llvm::sys::fs::detail::directory_iterator_construct();
  a3[1] = v8;
  if (v10 != v12)
    free(v10);
  return a1;
}

void sub_22F2A7F50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A7F64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

const void **sub_22F2A7F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void **v3;
  const void **result;
  uint64_t v6;
  const void **v7;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  const void **v13;

  v3 = (const void **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return v3;
  v6 = a1 + 16;
  v13 = (const void **)(a1 + 8);
  v7 = (const void **)(a1 + 8);
  do
  {
    v8 = (uint64_t *)v2;
    v9 = sub_22E6D5F34(v6, (const void **)(v2 + 32), a2);
    v10 = v8 + 1;
    if (!v9)
    {
      v10 = v8;
      v7 = (const void **)v8;
    }
    v2 = *v10;
  }
  while (v2);
  v3 = v13;
  if (v7 == v13)
    return v3;
  v11 = sub_22E6D5FB8(v6, a2, v7 + 4);
  v3 = v13;
  v12 = v11;
  result = v7;
  if (v12)
    return v3;
  return result;
}

char *sub_22F2A8040()
{
  char *result;

  result = getenv("LLBUILD_TASK_ID");
  if (result)
  {
    strlen(result);
    llvm::getAsUnsignedInteger();
    return 0;
  }
  return result;
}

_QWORD *sub_22F2A80BC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E6D6AF4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2A8120(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F2A8120(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E6D6B88(a1, v6);
  v8 = 0;
  sub_22E6D6AF4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2A81D4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E6D6AF4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F2A8280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (sub_22F278508(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

void sub_22F2A82DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A82EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6D898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A831C(uint64_t a1)
{
  return sub_22E3B3AD0(a1 + 24);
}

void sub_22F2A8328(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E6D7888((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

_QWORD *sub_22F2A8398(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void (**v6)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_22E63BEA4(v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v6 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
LABEL_10:
    (*v6)(v4);
    return a1;
  }
  if (v8)
  {
    v6 = (void (**)(_QWORD *))(*v8 + 40);
    goto LABEL_10;
  }
  return a1;
}

void sub_22F2A847C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_22E6D7A48((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_22F2A84F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2A8514(uint64_t a1)
{
  sub_22E6C9C58(a1 + 24, *(_QWORD *)(a1 + 24));
}

void sub_22F2A8524(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A8548(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_22F2A8564(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6DAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A8574(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6DAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A85A4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_22F2A85B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6DAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A85C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6DAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A85F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_22F2A8604()
{
  return 0;
}

uint64_t sub_22F2A860C()
{
  return 0;
}

uint64_t sub_22F2A8614()
{
  return 0;
}

uint64_t sub_22F2A861C()
{
  return 0;
}

uint64_t sub_22F2A8628(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 152))
  {
    v7 = a2;
    v6 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 24)
      free(v6);
    *(_BYTE *)(a1 + 152) = 0;
    a2 = v7;
  }
  v3 = *(_BYTE **)a2;
  v4 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_22F44E310;
  result = sub_22E61131C(a1, v3, v4);
  *(_BYTE *)(a1 + 152) = 1;
  return result;
}

void sub_22F2A86A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_22E54B6D0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

_QWORD *sub_22F2A8710(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  v2 = operator new();
  sub_22F1D4454(v2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FA70020;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v2;
  a1[1] = v4;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_DWORD *)(v5 + 244) = 16;
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 272) = 0x1000000000;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 311) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  a1[2] = v5;
  v6 = (_QWORD *)operator new();
  *v6 = &off_24FA70058;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v5;
  a1[3] = v6;
  v7 = operator new();
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  v8 = *(_DWORD *)(v7 + 4) & 0xFF800000 | 0x6F0;
  v9 = *(_BYTE *)(v7 + 40) & 0x80;
  *(_QWORD *)(v7 + 24) = 0x100000032;
  *(_QWORD *)(v7 + 32) = 8;
  *(_QWORD *)(v7 + 8) = 0x600000000;
  *(_QWORD *)(v7 + 16) = 0xA0000000ALL;
  *(_BYTE *)(v7 + 40) = v9;
  a1[4] = v7;
  *(_DWORD *)v7 = 1;
  *(_DWORD *)(v7 + 4) = v8;
  v10 = (char *)operator new();
  a1[5] = sub_22E6C6410(v10, "/", 1uLL);
  v11 = (_QWORD *)operator new();
  *v11 = &off_24FA70090;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  a1[6] = v11;
  v12 = operator new();
  sub_22E71EF44(v12);
  a1[7] = v13;
  v14 = (_QWORD *)operator new();
  *v14 = &off_24FA700C8;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v12;
  a1[8] = v14;
  v15 = operator new();
  v16 = (_DWORD *)sub_22E71EFC0(v15);
  a1[9] = v16;
  ++*v16;
  return a1;
}

uint64_t sub_22F2A8974(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (((*(unsigned __int16 *)(a2 + 16) | (unint64_t)((uint64_t)*(char *)(a2 + 18) << 16)) & 0x8000000000000000) != 0)
  {
    if (v3 < 0)
    {
      *(_DWORD *)(a1 + 4) = (*(_QWORD *)(a2 + 208) >> 26) & 0x80 | 0x61;
      *(_QWORD *)(a1 + 8) = 0x46500000265;
      *(_DWORD *)(a1 + 16) = 1125;
      if ((*(_QWORD *)(a2 + 20) & 0x400000000) != 0)
        *(_DWORD *)(a1 + 20) = 404190181;
      *(_QWORD *)(a1 + 24) = 0x18620FE500000665;
      *(_DWORD *)(a1 + 36) = (*(unsigned __int16 *)(a2 + 16) >> 1) & 4 | (((*(unsigned __int16 *)(a2 + 16) >> 4) & 1) << 7) | 0x861;
      *(_OWORD *)(a1 + 40) = xmmword_22F45DB60;
      *(_DWORD *)(a1 + 56) = 3297;
      v6 = (*(_DWORD *)(a2 + 240) >> 3) & 3;
      if (v6)
        *(int8x8_t *)(a1 + 60) = vorr_s8((int8x8_t)vdup_n_s32(32 * v6), (int8x8_t)0x16B571850D5C318DLL);
    }
    goto LABEL_11;
  }
  if (a3 == 3)
  {
    if (v3 < 0)
    {
      *(_DWORD *)(a1 + 4) = (*(_QWORD *)(a2 + 208) >> 26) & 0x80 | 0x62;
      *(_QWORD *)(a1 + 8) = 0x6600000066;
      *(_DWORD *)(a1 + 16) = 102;
      if ((*(_QWORD *)(a2 + 20) & 0x400000000) != 0)
        *(_DWORD *)(a1 + 20) = 404186598;
      *(_QWORD *)(a1 + 24) = 0x186205E600000066;
      *(_DWORD *)(a1 + 36) = (*(unsigned __int16 *)(a2 + 16) >> 1) & 4 | (((*(unsigned __int16 *)(a2 + 16) >> 4) & 1) << 7) | 0x462;
      *(_OWORD *)(a1 + 40) = xmmword_22F45DB70;
      *(_DWORD *)(a1 + 56) = 226;
      v4 = (*(_DWORD *)(a2 + 240) >> 3) & 3;
      if (v4)
        *(int8x8_t *)(a1 + 60) = vorr_s8((int8x8_t)vdup_n_s32(32 * v4), (int8x8_t)0x16B565860D5C258ELL);
      if ((*(_QWORD *)(a2 + 20) & 0x800000000) != 0)
        *(_DWORD *)(a1 + 32) = 205456870;
    }
LABEL_11:
    *(_BYTE *)a1 = *(_BYTE *)(a2 + 16) & 1;
    *(_BYTE *)(a1 + 1) = (*(_WORD *)(a2 + 16) & 2) != 0;
    *(_BYTE *)(a1 + 2) = (*(_WORD *)(a2 + 16) & 4) != 0;
    return 1;
  }
  return 0;
}

void sub_22F2A8B30(uint64_t a1, uint64_t a2)
{
  llvm *AsSignedInteger;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  AsSignedInteger = (llvm *)llvm::getAsSignedInteger();
  if ((_DWORD)AsSignedInteger)
  {
    v5 = llvm::inconvertibleErrorCode(AsSignedInteger);
    v9 = a2;
    sub_22E722024(&v8, v5, v6, &v9);
    *(_BYTE *)(a1 + 16) |= 1u;
    v7 = v8;
  }
  else
  {
    v7 = v9;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_BYTE *)(a1 + 8) = 1;
  }
  *(_QWORD *)a1 = v7;
}

uint64_t sub_22F2A8BC8()
{
  int Key;

  sub_22F2A9524();
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)dword_253E4BD00)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(qword_253E4BCF8 + 8 * Key) + 8);
}

uint64_t sub_22F2A8C38(uint64_t a1, int a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22F2A8C5C + 4 * byte_22F45DBB0[a2]))(1);
}

uint64_t sub_22F2A8C5C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  BOOL v2;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 36);
  v2 = v1 >= 0x22;
  v3 = (0x3F0000888uLL >> v1) & 1;
  if (v2)
    return 0;
  else
    return v3;
}

uint64_t sub_22F2A8C7C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  _BOOL4 v3;

  v1 = *(_DWORD *)(a1 + 24);
  v2 = v1 - 1;
  v3 = (v1 - 3) < 3;
  return v2 < 2 || v3;
}

BOOL sub_22F2A8CA0@<W0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 24) - 3) < 3;
}

BOOL sub_22F2A8CD4@<W0>(uint64_t a1@<X8>)
{
  return *(_DWORD *)(a1 + 36) == 6;
}

BOOL sub_22F2A8CE0@<W0>(uint64_t a1@<X8>)
{
  return *(_DWORD *)(a1 + 36) == 21;
}

BOOL sub_22F2A8CEC@<W0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) == 48;
}

void sub_22F2A8CFC()
{
  JUMPOUT(0x22F2A8D08);
}

_QWORD *sub_22F2A8D10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v6;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24)) = v5;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x2348A0CB0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

uint64_t sub_22F2A8DE0(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  return sub_22F2A9D6C(a1);
}

uint64_t sub_22F2A8E74(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return a1;
}

uint64_t sub_22F2A8F00(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return sub_22E7258C8(a1);
}

void sub_22F2A8FD0(uint64_t *a1)
{
  sub_22F1D4458(*a1);
  sub_22E71E808(a1[7]);
}

void sub_22F2A8FF8(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  unsigned __int8 *v16;

  v15 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  sub_22E6EC7E4(a1 + 2216, a1 + 2288, (std::string *)(a1 + 152), a2, &v15, &v16);
  sub_22F2A90E0(a1, a2, (uint64_t *)&v16, a4);
  v7 = v16;
  if (v16)
  {
    v8 = (unsigned int *)(v16 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      v14 = v11;
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

uint64_t sub_22F2A90E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = *(_QWORD **)(a1 + 40);
  v6 = v5[100];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5[101] - v6) >> 3);
  v8 = v5[103];
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5[104] - v8) >> 3);
  v14 = *a3;
  *a3 = 0;
  sub_22E71E8E0(v6, v7, v8, v9, a2, &v14, a4);
  result = v14;
  if (v14)
  {
    v11 = (unsigned int *)(v14 + 8);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *sub_22F2A917C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_22E720494(a1, a2, &v14, &v13, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (char *)operator new(0x50uLL);
    sub_22E579A24(v7 + 32, a4);
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_22F2A922C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *result;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  result = sub_22E617DDC(a1, a2, &v12, &v11, a3);
  if (!*result)
  {
    v7 = result;
    v8 = (char *)operator new(0x50uLL);
    sub_22E579A24(v8 + 32, a4);
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t)v8;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v8 = (char *)*v7;
    }
    result = sub_22E49FD00(a1[1], (uint64_t *)v8);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

_QWORD *sub_22F2A92D0(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;

  v4 = 0;
  *a1 = 1;
  v5 = (uint64_t)(a1 + 33);
  do
  {
    v6 = &a1[v4];
    v6[1] = -4096;
    v6[2] = 0;
    v4 += 2;
  }
  while (v4 != 32);
  sub_22F2A57E0((uint64_t)a1, a2);
  a1[33] = a1 + 35;
  v7.n128_u64[0] = 0x1000000000;
  a1[34] = 0x1000000000;
  if (a2[68])
    sub_22E6C7F6C(v5, (uint64_t)(a2 + 66), v7);
  return a1;
}

void sub_22F2A9364(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9388(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t sub_22F2A93A4(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(a1 + 64);
  *(_QWORD *)a1 = *a2;
  v4 = a1 + 8;
  if (v3)
  {
    sub_22E3B2DB8(v4, (uint64_t)(a2 + 1));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a1 + 32;
    *(_OWORD *)(a1 + 16) = xmmword_22F44E330;
    if (a2[2])
      sub_22E3B2DB8(v4, (uint64_t)(a2 + 1));
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_22F2A940C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6EF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A9420(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6EF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2A9454(uint64_t a1)
{
  llvm::Regex::~Regex((llvm::Regex *)(a1 + 24));
}

uint64_t sub_22F2A9460(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *sub_22F2A9490(int a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  result = sub_22E72226C(&v8, a1);
  if (!*result)
  {
    v4 = (uint64_t **)result;
    sub_22E722334((uint64_t)&v7, a2);
    v5 = v8;
    v6 = v7;
    *v7 = 0;
    v6[1] = 0;
    v6[2] = (uint64_t)v5;
    *v4 = v6;
    if (*(_QWORD *)qword_253E4BCE0)
    {
      qword_253E4BCE0 = *(_QWORD *)qword_253E4BCE0;
      v6 = *v4;
    }
    result = sub_22E49FD00((uint64_t *)qword_253E4BCE8, v6);
    ++qword_253E4BCF0;
  }
  return result;
}

void sub_22F2A9524()
{
  unsigned __int8 v0;
  __int128 v1;
  int v2;
  const char *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_253E4BCD8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_253E4BCD8))
    {
      *(_QWORD *)&v1 = "itanium";
      *((_QWORD *)&v1 + 1) = 7;
      v2 = 0;
      v3 = "arm";
      v4 = 3;
      v5 = 1;
      v6 = "ios";
      v7 = 3;
      v8 = 2;
      v9 = "applearm64";
      v10 = 10;
      v11 = 3;
      v12 = "watchos";
      v13 = 7;
      v14 = 4;
      v15 = "aarch64";
      v16 = 7;
      v17 = 5;
      v18 = "mips";
      v19 = 4;
      v20 = 6;
      v21 = "webassembly";
      v22 = 11;
      v23 = 7;
      v24 = "fuchsia";
      v25 = 7;
      v26 = 8;
      v27 = "xl";
      v28 = 2;
      v29 = 9;
      v30 = "air";
      v31 = 3;
      v32 = 10;
      v33 = "microsoft";
      v34 = 9;
      v35 = 11;
      sub_22F2A96B4(&v1, 12);
      __cxa_atexit((void (*)(void *))sub_22F2A96B0, &qword_253E4BCF8, &dword_22E3A8000);
      __cxa_guard_release(&qword_253E4BCD8);
    }
  }
}

uint64_t sub_22F2A96B4(__int128 *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  result = llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&qword_253E4BCF8);
  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      v6 = *a1;
      v7 = *((_QWORD *)a1 + 2);
      result = sub_22F2A9730((const void *)v6, *((size_t *)&v6 + 1), &v7);
      a1 = (__int128 *)((char *)a1 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22F2A9730(const void *a1, size_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v7 = qword_253E4BCF8;
  v8 = result;
  v9 = *(_QWORD *)(qword_253E4BCF8 + 8 * result);
  if (v9 == -8)
  {
    --dword_253E4BD08;
  }
  else if (v9)
  {
    return result;
  }
  v10 = MEMORY[0x23489D23C](a2 + 17, 8);
  v11 = v10;
  v12 = v10 + 16;
  if (a2)
    memcpy((void *)(v10 + 16), a1, a2);
  *(_BYTE *)(v12 + a2) = 0;
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = *a3;
  *(_QWORD *)(v7 + 8 * v8) = v11;
  ++dword_253E4BD04;
  result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&qword_253E4BCF8);
  for (i = (_QWORD *)(qword_253E4BCF8 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_22F2A983C(int64x2_t *a1, const void *a2, size_t a3)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1->u64[1];
  if (v4 >= a1[1].i64[0])
  {
    result = sub_22E72347C(a1, a2, a3);
  }
  else
  {
    std::string::__init((std::string *)a1->i64[1], (const std::string::value_type *)a2, a3);
    result = v4 + 24;
  }
  a1->i64[1] = result;
  return result;
}

uint64_t sub_22F2A9880(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    v4 = sub_22E723D20(a1, a2);
  }
  else
  {
    std::string::__init((std::string *)a1->i64[1], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v4 = v3 + 24;
  }
  a1->i64[1] = v4;
  return v4 - 24;
}

uint64_t sub_22F2A98D0(int64x2_t *a1, const char **a2)
{
  std::string *v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  uint64_t v6;

  v3 = (std::string *)a1->i64[1];
  if ((unint64_t)v3 >= a1[1].i64[0])
  {
    v6 = sub_22E723ED4(a1, a2);
  }
  else
  {
    v4 = *a2;
    v5 = strlen(*a2);
    std::string::__init(v3, v4, v5);
    v6 = (uint64_t)&v3[1];
  }
  a1->i64[1] = v6;
  return v6 - 24;
}

void sub_22F2A9934(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6FEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2A9944(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6FEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9974(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_22F2A9984()
{
  return &unk_255E04EA8;
}

uint64_t sub_22F2A9990(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &unk_255E04EA9 || a2 == (void *)MEMORY[0x24BED7500];
  return a2 == &unk_255E04EA8 || v3;
}

uint64_t sub_22F2A99C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  char v6;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 72))(*a1, a1[2], 0);
  result = llvm::cas::ObjectStore::getProxy();
  if ((v6 & 1) != 0)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) &= ~1u;
  }
  return result;
}

uint64_t sub_22F2A9A7C(int64x2_t *a1, const void *a2, size_t a3, char a4)
{
  unint64_t v6;
  uint64_t result;

  v6 = a1->u64[1];
  if (v6 >= a1[1].i64[0])
  {
    result = sub_22E72450C(a1, a2, a3, a4);
  }
  else
  {
    std::string::__init((std::string *)a1->i64[1], (const std::string::value_type *)a2, a3);
    *(_BYTE *)(v6 + 24) = a4;
    result = v6 + 32;
  }
  a1->i64[1] = result;
  return result;
}

uint64_t sub_22F2A9AD4(int64x2_t *a1, char *__s, _DWORD *a3)
{
  unint64_t v6;
  std::string::size_type v7;
  uint64_t result;

  v6 = a1->u64[1];
  if (v6 >= a1[1].i64[0])
  {
    result = sub_22E724874(a1, __s, a3);
  }
  else
  {
    v7 = strlen(__s);
    std::string::__init((std::string *)v6, __s, v7);
    *(_DWORD *)(v6 + 24) = *a3;
    result = v6 + 32;
  }
  a1->i64[1] = result;
  return result;
}

void sub_22F2A9B4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9B70(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22E54B4D4(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22F2A9BAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9BD0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22E6C759C(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22F2A9C0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9C30(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22E6C656C(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22F2A9C6C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2A9C90(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_22E6C6B18(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F2A9CC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != a3)
  {
    do
    {
      v3 = a2;
      v4 = result;
      v5 = a3;
      llvm::MD5::update();
      llvm::MD5::update();
      result = v4;
      a3 = v5;
      a2 = v3 + 24;
    }
    while (v3 + 24 != v5);
  }
  return result;
}

uint64_t sub_22F2A9D6C(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  return sub_22F2A9DF8(a1);
}

uint64_t sub_22F2A9DF8(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return a1;
}

uint64_t sub_22F2A9EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MD5::update();
  for (; a2 != a3; a2 += 32)
    sub_22F2A9F24(a1);
  return a1;
}

uint64_t sub_22F2A9F24(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return a1;
}

uint64_t sub_22F2A9FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  llvm::MD5::update();
  if (a3 != a2)
  {
    v6 = a2 + 24;
    do
    {
      sub_22F2AA04C(a1);
      v7 = v6 + 8;
      v6 += 32;
    }
    while (v7 != a3);
  }
  return a1;
}

uint64_t sub_22F2AA04C(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  return sub_22E72584C(a1);
}

uint64_t sub_22F2AA0E0(uint64_t a1)
{
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  llvm::MD5::update();
  return a1;
}

uint64_t sub_22F2AA198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MD5::update();
  while (a2 != a3)
  {
    a2 += 8;
    llvm::MD5::update();
  }
  return a1;
}

uint64_t sub_22F2AA214(_QWORD *a1, const void *a2, size_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((_DWORD)result)
    return sub_22E72594C(a1, a2, a3);
  return result;
}

uint64_t sub_22F2AA26C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24FA702D8;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 40);
  sub_22E3B3CC8(&v4);
  sub_22E3B3AD0(v2);
  return a1;
}

uint64_t sub_22F2AA2BC(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24FA702D8;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 40);
  sub_22E3B3CC8(&v4);
  sub_22E3B3AD0(v2);
  return a1;
}

uint64_t sub_22F2AA30C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24FA702D8;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 40);
  sub_22E3B3CC8(&v4);
  sub_22E3B3AD0(v2);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C403193F71ALL);
}

uint64_t sub_22F2AA370(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24FA70378;
  v4[1] = a1;
  v4[2] = a2;
  v10 = v4;
  sub_22F2968D4(a2, (uint64_t *)&v10);
  v5 = (uint64_t)v10;
  v10 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 104);
  v7 = (_QWORD *)operator new();
  *v7 = off_24FA704F0;
  v7[1] = a1;
  v9 = v7;
  sub_22E726838(v6 + 528, (char *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F2AA438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24FA70538;
  v5[1] = a1;
  v5[2] = v4;
  v7 = v5;
  sub_22F2A73EC(a2, (uint64_t *)&v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2AA4BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 122))
    *(_WORD *)(a2 + 536) |= 4u;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FA70378;
  v4[1] = a1;
  v4[2] = a2;
  v11 = v4;
  sub_22F2968D4(a2, (uint64_t *)&v11);
  v5 = (uint64_t)v11;
  v11 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 104);
  v7 = operator new();
  v8 = *(_BYTE *)(a1 + 125);
  *(_QWORD *)v7 = off_24FA705F0;
  *(_QWORD *)(v7 + 8) = a1;
  *(_BYTE *)(v7 + 16) = v8;
  v10 = v7;
  sub_22E726838(v6 + 528, (char *)&v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_22F2AA5A8()
{
  return 0;
}

void sub_22F2AA5B4(uint64_t a1)
{
  sub_22E7268BC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AA5D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

void sub_22F2AA5E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = 8 * v4;
    v7 = (_QWORD *)v2;
    do
    {
      v8 = *v3;
      *v3++ = 0;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    v9 = *(_QWORD *)a1 - 8;
    do
    {
      v10 = *(_QWORD *)(v9 + v5);
      *(_QWORD *)(v9 + v5) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v5 -= 8;
    }
    while (v5);
    v3 = *(uint64_t **)a1;
  }
  if (v3 != (uint64_t *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2AA6A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

BOOL sub_22F2AA704(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 == a2)
    return 1;
  if ((a1 | 0x1000) == 0xFFFFFFFFFFFFF000 || (a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  do
  {
    v3 = *(_QWORD *)(a1 + 8);
    a1 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v3 & 2) != 0 && a1);
  do
  {
    v4 = *(_QWORD *)(a2 + 8);
    a2 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v4 & 2) != 0 && a2);
  return a1 == a2;
}

unint64_t *sub_22F2AA764(uint64_t a1, unint64_t *a2)
{
  char v4;
  unint64_t *v5;
  unint64_t *v7;

  v7 = 0;
  v4 = sub_22F2AA7DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2AA938(a1, a2, v7);
    *v5 = *a2;
    v5[1] = (unint64_t)(v5 + 3);
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F2AA7DC(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t *v5;
  uint64_t result;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;

  if (a2)
  {
    v9 = a2 - 1;
    v10 = (a2 - 1) & sub_22F2AA8D0(*a3);
    v11 = *a3;
    v5 = (unint64_t *)(a1 + 40 * v10);
    v12 = *v5;
    if (sub_22F2AA704(v11, *v5))
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v14 + 1;
        v10 = (v10 + v14) & v9;
        v5 = (unint64_t *)(a1 + 40 * v10);
        v12 = *v5;
        v17 = sub_22F2AA704(v11, *v5);
        result = 1;
        v14 = v16;
        if (v17)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_22F2AA8D0(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  do
  {
    v1 = *(_QWORD *)(a1 + 8);
    if ((v1 & 2) == 0)
      break;
    a1 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v1 & 0xFFFFFFFFFFFFFFFCLL) != 0);
  v2 = 0x9DDFEA08EB382D69 * ((sub_22E72796C() + ((8 * v1) & 0x7FFFFFFE0)) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (HIDWORD(v1) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69
                                                                     * (HIDWORD(v1) ^ (v2 >> 47) ^ v2)) >> 47));
}

unint64_t *sub_22F2AA938(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v5;
  unsigned int v6;
  unint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7279E4(a1, v6);
  v8 = 0;
  sub_22F2AA7DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F2AA9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  void *v11;
  unint64_t *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22F2AA7DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (unint64_t *)v4, &v12);
        v9 = v12;
        *v12 = *(_QWORD *)v4;
        v9[2] = 0x200000000;
        v9[1] = (unint64_t)(v9 + 3);
        v10 = (uint64_t)(v9 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v10, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22F2AAAE4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t *v7;
  char v8;
  uint64_t v9;
  unint64_t *v10;

  v10 = 0;
  result = sub_22F2AAB6C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2AAC5C(a2, a3, v10);
    v7 = (unint64_t *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F2AAB6C(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t *v5;
  uint64_t result;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;

  if (a2)
  {
    v9 = a2 - 1;
    v10 = (a2 - 1) & sub_22F2AA8D0(*a3);
    v11 = *a3;
    v5 = (unint64_t *)(a1 + 8 * v10);
    v12 = *v5;
    if (sub_22F2AA704(v11, *v5))
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v5;
        v16 = v14 + 1;
        v10 = (v10 + v14) & v9;
        v5 = (unint64_t *)(a1 + 8 * v10);
        v12 = *v5;
        v17 = sub_22F2AA704(v11, *v5);
        result = 1;
        v14 = v16;
        if (v17)
          goto LABEL_3;
      }
      result = 0;
      if (v13)
        v5 = v13;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t *sub_22F2AAC5C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  int v5;
  unsigned int v6;
  unint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E727AB0(a1, v6);
  v8 = 0;
  sub_22F2AAB6C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2AAD0C(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22F2AAB6C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F2AADBC(uint64_t result, uint64_t a2, _DWORD *a3)
{
  *(_QWORD *)result = off_24FA707B0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  if (a3)
    ++*a3;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_22F2AADF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v14[2];
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v14[0] = v15;
  v14[1] = (void *)0x400000000;
  sub_22E7286B0(a2, a3, a5, a6, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4, v14, a7, a8);
  if (v14[0] != v15)
    free(v14[0]);
}

uint64_t sub_22F2AAEDC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a2;
  v12 = a3;
  if (!(_DWORD)a2)
    return sub_22F2AAFAC((uint64_t)a1, *(uint64_t **)(a3 + 480), *(_DWORD *)(a3 + 488));
  result = sub_22F1E2F68(a3, a2, (*(_DWORD *)(a1[2] + 4) >> 13) & 1, (uint64_t)&v9);
  if ((_QWORD)v9)
  {
    sub_22F423080((uint64_t)&v11, (uint64_t)v7);
    if (v8)
    {
      return sub_22F2AB0DC((uint64_t)a1, v7[0], v7[1], v7[2], v8);
    }
    else
    {
      sub_22F2AAEDC(a1, HIDWORD(v10), v12);
      v5 = v9;
      v6 = v10;
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __int128 *))(*a1 + 40))(a1, v11, v12, &v5);
    }
  }
  return result;
}

uint64_t sub_22F2AAFAC(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD v15[11];

  if (a3)
  {
    v15[9] = v3;
    v15[10] = v4;
    v5 = 40 * a3;
    do
    {
      v6 = result;
      v7 = a2[3];
      v8 = a2[4];
      v14 = a2;
      if ((_DWORD)v7)
        sub_22F1E2F68(v8, v7, (*(_DWORD *)(*(_QWORD *)(result + 16) + 4) >> 13) & 1, (uint64_t)v15);
      else
        memset(v15, 0, 24);
      v9 = *((_BYTE *)v14 + 23);
      v10 = v9 < 0;
      if (v9 >= 0)
        v11 = v14;
      else
        v11 = (uint64_t *)*v14;
      v12 = v9 & 0x7F;
      if (v10)
        v13 = v14[1];
      else
        v13 = v12;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)v6 + 56))(v6, v7, v8, v15, v11, v13);
      result = v6;
      a2 = v14 + 5;
      v5 -= 40;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22F2AB078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5[4];
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  if (!(_DWORD)a2)
    return sub_22F2AAFAC(a1, *(uint64_t **)(a3 + 480), *(_DWORD *)(a3 + 488));
  sub_22F423080((uint64_t)v6, (uint64_t)v5);
  return sub_22F2AB0DC(a1, v5[0], v5[1], v5[2], v5[3]);
}

uint64_t sub_22F2AB0DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  if (a5)
  {
    v5 = result;
    if ((_DWORD)a2)
    {
      sub_22F1E2F68(a3, a2, (*(_DWORD *)(*(_QWORD *)(result + 16) + 4) >> 13) & 1, (uint64_t)&v11);
    }
    else
    {
      v11 = 0uLL;
      v12 = 0;
    }
    sub_22F423080((uint64_t)&v13, (uint64_t)v10);
    sub_22F2AB0DC(v5, v10[0], v10[1], v10[2], v10[3]);
    v8 = v11;
    v9 = v12;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v13, v14, &v8, a4, a5);
  }
  return result;
}

void sub_22F2AB188(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  const char *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  llvm::raw_ostream *v17;
  char *v18;
  llvm::raw_ostream *v19;
  _BYTE v20[64];
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  __int128 v25;
  _BYTE v26[104];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  v8 = sub_22F423044((uint64_t)&v22);
  v10 = v9;
  v27 = v29;
  v28 = 0x400000000;
  sub_22E7286B0(v22, (uint64_t)v23, a4, a5, (uint64_t)&v27);
  v24 = v26;
  v25 = xmmword_22F45DF40;
  sub_22F242C48((uint64_t)v20, (uint64_t)&v24);
  v11 = sub_22F142898(v22, v23, *(_DWORD **)(a1 + 8));
  if (v12)
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_22E47DAC0((llvm::raw_ostream *)v20, "expanded from macro '");
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (v14 <= *((_QWORD *)v15 + 3) - (_QWORD)v16)
    {
      v19 = v15;
      memcpy(v16, v13, v14);
      v17 = v19;
      *((_QWORD *)v19 + 4) += v14;
    }
    else
    {
      v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, v13);
    }
    v18 = "'";
  }
  else
  {
    v18 = "expanded from here";
    v17 = (llvm::raw_ostream *)v20;
  }
  sub_22E47DAC0(v17, v18);
  sub_22E727BA0(a1, v8, v10, 1, *v21, v21[1], v27, v28, 0, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v20);
  if (v24 != v26)
    free(v24);
  if (v27 != v29)
    free(v27);
}

uint64_t sub_22F2AB344(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if ((a2 & 0x80000000) == 0)
    return a2;
  v3 = a2;
  if (!sub_22F1E2440(a1, a2, 0))
    return sub_22F1E25A4(a1, v3);
  return sub_22F1E2500(a1, v3);
}

void sub_22F2AB3A0(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE v12[64];
  _QWORD *v13;
  void *v14;
  __int128 v15;
  _QWORD v16[26];

  v16[25] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = xmmword_22F45DF30;
  sub_22F242C48((uint64_t)v12, (uint64_t)&v14);
  v8 = sub_22E47DAC0((llvm::raw_ostream *)v12, "in file included from ");
  v9 = sub_22E47DAC0(v8, *a4);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
  {
    llvm::raw_ostream::write(v9);
  }
  else
  {
    *((_QWORD *)v9 + 4) = v10 + 1;
    *v10 = 58;
  }
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v11, ":");
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, *v13, v13[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v12);
  if (v14 != v16)
    free(v14);
}

void sub_22F2AB4BC(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, const void *a5, size_t a6)
{
  llvm::raw_ostream *v12;
  void *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  _BYTE v17[64];
  _QWORD *v18;
  void *v19;
  __int128 v20;
  _QWORD v21[26];

  v21[25] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = xmmword_22F45DF30;
  sub_22F242C48((uint64_t)v17, (uint64_t)&v19);
  v12 = sub_22E47DAC0((llvm::raw_ostream *)v17, "in module '");
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (a6 <= *((_QWORD *)v12 + 3) - (_QWORD)v13)
  {
    if (a6)
    {
      memcpy(v13, a5, a6);
      *((_QWORD *)v12 + 4) += a6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)a5);
  }
  if (*a4)
  {
    v14 = sub_22E47DAC0((llvm::raw_ostream *)v17, "' imported from ");
    v15 = sub_22E47DAC0(v14, *a4);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
    {
      llvm::raw_ostream::write(v15);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 58;
    }
    llvm::raw_ostream::operator<<();
  }
  sub_22E47DAC0((llvm::raw_ostream *)v17, ":");
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, *v18, v18[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v17);
  if (v19 != v21)
    free(v19);
}

void sub_22F2AB650(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, const void *a5, size_t a6)
{
  char *v12;
  llvm::raw_ostream *v13;
  void *v14;
  size_t v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  char *v19;
  llvm::raw_ostream *v20;
  _BYTE v21[64];
  _QWORD *v22;
  void *v23;
  __int128 v24;
  _QWORD v25[26];

  v25[25] = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = xmmword_22F45DF30;
  sub_22F242C48((uint64_t)v21, (uint64_t)&v23);
  v12 = *a4;
  v13 = sub_22E47DAC0((llvm::raw_ostream *)v21, "while building module '");
  v14 = (void *)*((_QWORD *)v13 + 4);
  v15 = *((_QWORD *)v13 + 3) - (_QWORD)v14;
  if (v12)
  {
    if (a6 <= v15)
    {
      if (a6)
      {
        memcpy(v14, a5, a6);
        *((_QWORD *)v13 + 4) += a6;
      }
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, (const char *)a5);
    }
    v16 = sub_22E47DAC0(v13, "' imported from ");
    v17 = sub_22E47DAC0(v16, *a4);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 58;
    }
    v20 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v19 = ":";
  }
  else
  {
    if (a6 <= v15)
    {
      if (a6)
      {
        memcpy(v14, a5, a6);
        *((_QWORD *)v13 + 4) += a6;
      }
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13, (const char *)a5);
    }
    v19 = "':";
    v20 = v13;
  }
  sub_22E47DAC0(v20, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, *v22, v22[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v21);
  if (v23 != v25)
    free(v23);
}

_DWORD *sub_22F2AB834(_DWORD *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F2AB894((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2AB934(a1, a2, v7);
    *(_QWORD *)v5 = *a2;
  }
  return v5;
}

uint64_t sub_22F2AB894(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & a2;
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -1;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F2AB934(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E729634((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2AB894((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3)
    --a1[1];
  return a3;
}

uint64_t sub_22F2AB9EC(uint64_t result, int *a2, int *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int *v11;
  int *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 + 1) >= 2)
    {
      v12 = 0;
      result = sub_22F2AB894((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F2ABAB0(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_22F2ABACC(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int64_t v9;
  _BYTE *v10;

  v3 = a3;
  v4 = result;
  v5 = a3 - a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 2);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    v9 = v5;
    v10 = a2;
    v8 = v3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v8;
    v5 = v9;
    a2 = v10;
    LODWORD(v7) = *(_DWORD *)(v4 + 8);
  }
  if (a2 != v3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v4 + 12 * v7), a2, v5);
    LODWORD(v7) = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(v4 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22F2ABB78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t result;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 69);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  if (result)
  {
    sub_22E6C3914(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22F2ABC00(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  llvm::Timer *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v4 = a1[13];
  v5 = *(llvm::Timer **)(v4 + 256);
  if (v5)
  {
    llvm::Timer::startTimer(*(llvm::Timer **)(v4 + 256));
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
    llvm::Timer::stopTimer(v5);
  }
  else
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  if (sub_22F2A6944(v4))
  {
    if (*(_QWORD *)(v4 + 160))
    {
      v6 = *(_QWORD *)(v4 + 192);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 104);
        v8 = *(_BYTE *)(v7 + 191);
        v9 = v8;
        v10 = v8 & 0x7F;
        if (v9 >= 0)
          v11 = v10;
        else
          v11 = *(_QWORD *)(v7 + 176);
        if (v11)
        {
          sub_22E6CB02C((_QWORD *)v4);
          sub_22E805BD8();
          if (v12)
          {
            v13 = v12;
            sub_22E6C5940(&v13, &v14);
            if (v13)
              (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
          }
        }
      }
    }
  }
  *a2 = 0;
}

uint64_t sub_22F2ABD30(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32) + 168);
}

_QWORD *sub_22F2ABD40(_QWORD *result)
{
  llvm *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = (llvm *)result[13];
  if (*((_QWORD *)v1 + 24))
  {
    v2 = result;
    if ((*(unsigned int (**)(_QWORD *))(*result + 120))(result))
    {
      v6 = *((_QWORD *)v1 + 2);
      if (*(char *)(v6 + 2599) < 0 ? *(_QWORD *)(v6 + 2584) : *(unsigned __int8 *)(v6 + 2599))
        sub_22F2A7498(v1);
    }
    v3 = *((_QWORD *)v1 + 30);
    if (!v3)
    {
      v4 = *((_QWORD *)v1 + 29);
      v5 = (*(uint64_t (**)(_QWORD *))(*v2 + 88))(v2);
      sub_22F2A76DC(v1, v5, v4);
      v3 = *((_QWORD *)v1 + 30);
    }
    return (_QWORD *)sub_22E80B400(v3, (*(_QWORD *)(*((_QWORD *)v1 + 2) + 2288) >> 3) & 1, (*(_QWORD *)(*((_QWORD *)v1 + 2) + 2288) >> 12) & 1);
  }
  return result;
}

uint64_t sub_22F2ABDF8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 88 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 88 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_22F2ABE9C(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t result;

  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *(void **)(a1 + 8);
    if (v4 != (void *)(a1 + 32))
      free(v4);
    *(_BYTE *)(a1 + 64) = 0;
  }
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  result = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_22F44E330;
  if (a2[2])
    result = sub_22E3B3B4C(result, (uint64_t)(a2 + 1));
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t sub_22F2ABF14(uint64_t a1, const void *a2, uint64_t a3, char a4)
{
  size_t v7;

  if (!*(_BYTE *)(a1 + 17))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(_BYTE *)(a1 + 16) = a4;
      *(_BYTE *)(a1 + 17) = 1;
    }
  }
  return a1;
}

uint64_t sub_22F2ABF7C(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 16) + 2291) & 0x80) != 0)
    return 0;
  else
    return sub_22F2ABD30(a1);
}

uint64_t sub_22F2ABF98(_DWORD *a1)
{
  uint64_t result;
  _DWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  result = 0;
  switch(*a1)
  {
    case 0:
      v3 = a1 + 1;
      v4 = 11;
      goto LABEL_6;
    case 2:
      v3 = a1 + 1;
      v4 = 14;
      goto LABEL_6;
    case 3:
      v3 = a1 + 1;
      v4 = 7;
      goto LABEL_6;
    case 4:
      v3 = a1 + 1;
      v4 = 5;
LABEL_6:
      v5[0] = v4;
      v5[1] = 0;
      result = sub_22E3B38EC(v3, v5) ^ 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F2AC018()
{
  return 2;
}

uint64_t sub_22F2AC020()
{
  return 0;
}

void sub_22F2AC02C(uint64_t a1)
{
  sub_22E7299B4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t *sub_22F2AC050(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v13 = i[1];
        ++i;
        v7 = v13;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v8 = MEMORY[0x23489D23C](a3 + 17, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 16;
  if (a3)
    memcpy((void *)(v8 + 16), a2, a3);
  *(_BYTE *)(v10 + a3) = 0;
  *v9 = a3;
  v9[1] = 0;
  *i = (uint64_t)v9;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void sub_22F2AC14C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E730E0C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

BOOL sub_22F2AC1B8(_BYTE *a1, uint64_t a2)
{
  if (a2 == 1)
  {
    return *a1 == 126;
  }
  else
  {
    if (a2 != 4)
      return 0;
    if (*(_DWORD *)a1 == 1819047278 || *(_DWORD *)a1 == 1819047246)
      return 1;
    return *(_DWORD *)a1 == 1280070990;
  }
}

BOOL sub_22F2AC220(uint64_t a1, uint64_t a2)
{
  if (a2 != 5)
    return a2 == 4 && (*(_DWORD *)a1 == 1702195828 || *(_DWORD *)a1 == 1702195796 || *(_DWORD *)a1 == 1163219540);
  if (*(_DWORD *)a1 == 1936482662 && *(_BYTE *)(a1 + 4) == 101)
    return 1;
  if (*(_DWORD *)a1 == 1936482630 && *(_BYTE *)(a1 + 4) == 101)
    return 1;
  return *(_DWORD *)a1 == 1397506374 && *(_BYTE *)(a1 + 4) == 69;
}

uint64_t sub_22F2AC2D4(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  size_t v7;

  if (!*(_BYTE *)(a1 + 20))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(_DWORD *)(a1 + 16) = a4;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

uint64_t sub_22F2AC330@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = sub_22F2A99C4(a1, (uint64_t)&v6);
  if ((v8 & 1) != 0)
  {
    v5 = v6;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    result = operator new();
    *(_OWORD *)(result + 8) = v6;
    v4 = v7;
    *(_QWORD *)result = off_24FA70DA8;
    *(_QWORD *)(result + 24) = v4;
    *(_QWORD *)(result + 32) = result + 48;
    *(_QWORD *)(result + 40) = 0x100000000;
    *(_BYTE *)(result + 88) = 0;
    *(_BYTE *)(a2 + 8) &= ~1u;
    LOBYTE(v4) = v8;
    *(_QWORD *)a2 = result;
    if ((v4 & 1) != 0)
    {
      result = v6;
      *(_QWORD *)&v6 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_22F2AC420(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[3];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = sub_22F2A99C4(a2, (uint64_t)v5);
  if ((v6 & 1) != 0)
  {
    v4 = v5[0];
    *(_BYTE *)(a1 + 32) |= 1u;
    *(_QWORD *)a1 = v4;
  }
  else
  {
    result = sub_22F2AC560(a1, v5);
    if ((v6 & 1) != 0)
    {
      result = v5[0];
      v5[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_22F2AC4C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  char v5;

  result = llvm::cas::ObjectStore::getProxy();
  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = v3;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) &= ~1u;
  }
  return result;
}

uint64_t sub_22F2AC560(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 72))(*a2, a2[2], 0);
  result = llvm::cas::ObjectStore::getProxy();
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(a1 + 32) |= 1u;
    *(_QWORD *)a1 = v12;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a2 + 72))(*a2, a2[2], 1);
    result = llvm::cas::ObjectStore::getProxy();
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a1 + 32) |= 1u;
      *(_QWORD *)a1 = v9;
    }
    else
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 88))(v12, v13, 0);
      v7 = v6;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 88))(v9, v10, 0);
      *(_BYTE *)(a1 + 32) &= ~1u;
      *(_QWORD *)(a1 + 16) = result;
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v7;
    }
    if ((v14 & 1) != 0)
    {
      result = v12;
      if (v12)
        return (*(uint64_t (**)())(*(_QWORD *)v12 + 8))();
    }
  }
  return result;
}

uint64_t sub_22F2AC6E0(_QWORD *a1, uint64_t a2, llvm::raw_ostream **a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;

  v6 = a1[2] + 256;
  v9[0] = a1;
  v9[1] = v6;
  v9[2] = a2;
  v9[3] = a3;
  sub_22E733274(v9, (uint64_t)"cl_khr_byte_addressable_store", 29);
  sub_22E733274(v9, (uint64_t)"cl_khr_global_int32_base_atomics", 32);
  sub_22E733274(v9, (uint64_t)"cl_khr_global_int32_extended_atomics", 36);
  sub_22E733274(v9, (uint64_t)"cl_khr_local_int32_base_atomics", 31);
  sub_22E733274(v9, (uint64_t)"cl_khr_local_int32_extended_atomics", 35);
  sub_22E73330C(v9, (uint64_t)"cl_khr_fp64", 11, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_fp16", 11, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_int64_base_atomics", 25, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_int64_extended_atomics", 29, 0x64u);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, const char *, uint64_t))(*a1 + 520))(a1, v6, "cl_khr_3d_image_writes", 22))
  {
    v7 = *(_QWORD *)(a2 + 56);
    if ((v7 & 0x100000000) != 0 || v7 >= 0x64)
    {
      v13 = 261;
      v12[0] = "cl_khr_3d_image_writes";
      v12[1] = 22;
      v10[0] = "1";
      v11 = 259;
      sub_22E7333BC(a3, (llvm::Twine *)v12, (llvm::Twine *)v10);
    }
  }
  sub_22E73330C(v9, (uint64_t)"cles_khr_int64", 14, 0x6Eu);
  sub_22E73330C(v9, (uint64_t)"cl_khr_depth_images", 19, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_gl_msaa_sharing", 22, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_mipmap_image", 19, 0xC8u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_mipmap_image_writes", 26, 0xC8u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_srgb_image_writes", 24, 0xC8u);
  sub_22E73330C(v9, (uint64_t)"cl_khr_subgroups", 16, 0xC8u);
  sub_22E73330C(v9, (uint64_t)"cl_clang_storage_class_specifiers", 33, 0x64u);
  sub_22E73330C(v9, (uint64_t)"__cl_clang_function_pointers", 28, 0x64u);
  sub_22E73330C(v9, (uint64_t)"__cl_clang_variadic_functions", 29, 0x64u);
  sub_22E73330C(v9, (uint64_t)"__cl_clang_non_portable_kernel_param_types", 42, 0x64u);
  sub_22E73330C(v9, (uint64_t)"__cl_clang_bitfields", 20, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_APPLE_BOOL_vec", 17, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_APPLE_vload_vstore_half", 26, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_amd_media_ops", 16, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_amd_media_ops2", 17, 0x64u);
  sub_22E73330C(v9, (uint64_t)"cl_arm_integer_dot_product_int8", 31, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_arm_integer_dot_product_accumulate_int8", 42, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_arm_integer_dot_product_accumulate_int16", 43, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_arm_integer_dot_product_accumulate_saturate_int8", 51, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_intel_subgroups", 18, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_intel_subgroups_short", 24, 0x78u);
  sub_22E73330C(v9, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, 0x78u);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_pipes", 16, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_generic_address_space", 32, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_atomic_order_acq_rel", 31, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_atomic_order_seq_cst", 31, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_subgroups", 20, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_3d_image_writes", 26, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_device_enqueue", 25, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_read_write_images", 28, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_program_scope_global_variables", 41, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_fp64", 15, 0x12Cu);
  sub_22E73330C(v9, (uint64_t)"__opencl_c_images", 17, 0x12Cu);
  v12[0] = "__opencl_c_int64";
  v13 = 259;
  v10[0] = "1";
  v11 = 259;
  return sub_22E7333BC(a3, (llvm::Twine *)v12, (llvm::Twine *)v10);
}

uint64_t sub_22F2ACBB8(llvm::raw_ostream *a1, llvm::Twine *this)
{
  uint64_t result;
  _BYTE *v4;

  result = llvm::Twine::print(this, a1);
  v4 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a1 + 3))
    return llvm::raw_ostream::write(a1);
  *((_QWORD *)a1 + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

uint64_t sub_22F2ACC10(llvm::raw_ostream *a1, llvm::Twine *a2)
{
  llvm::raw_ostream *v3;
  uint64_t result;
  _BYTE *v5;

  v3 = sub_22E47DAC0(a1, "#undef ");
  result = llvm::Twine::print(a2, v3);
  v5 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v3 + 3))
    return llvm::raw_ostream::write(v3);
  *((_QWORD *)v3 + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

uint64_t sub_22F2ACC78(uint64_t a1)
{
  uint64_t result;
  llvm::raw_ostream *v3;
  uint64_t v4;
  size_t **i;
  uint64_t v7;
  llvm::raw_ostream *v8;
  const void *v9;
  size_t v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t *v19;
  size_t *v20;
  BOOL v21;

  result = llvm::errs((llvm *)a1);
  v3 = (llvm::raw_ostream *)result;
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4)
  {
    for (i = *(size_t ***)(a1 + 16); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(size_t ***)(a1 + 16);
  }
  v7 = *(_QWORD *)(a1 + 16) + 8 * v4;
  while (i != (size_t **)v7)
  {
    v8 = sub_22E47DAC0(v3, "Type: blah ");
    v9 = *i + 13;
    v10 = **i;
    v11 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v11)
    {
      if (v10)
      {
        memcpy(v11, v9, **i);
        v11 = (_BYTE *)(*((_QWORD *)v8 + 4) + v10);
        *((_QWORD *)v8 + 4) = v11;
      }
    }
    else
    {
      v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)v9);
      v11 = (_BYTE *)*((_QWORD *)v8 + 4);
    }
    if ((unint64_t)v11 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v11 + 1;
      *v11 = 10;
    }
    sub_22E47DAC0(v3, "  Size:");
    v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 10;
    }
    sub_22E47DAC0(v3, "  Alignment:");
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 10;
    }
    sub_22E47DAC0(v3, "  FieldOffsets: [");
    v16 = *((unsigned int *)*i + 8);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 8 * v16;
      do
      {
        if (v17)
          sub_22E47DAC0(v3, ", ");
        llvm::raw_ostream::operator<<();
        v17 += 8;
      }
      while (v18 != v17);
    }
    result = (uint64_t)sub_22E47DAC0(v3, "]\n");
    do
    {
      v20 = i[1];
      ++i;
      v19 = v20;
      if (v20)
        v21 = v19 + 1 == 0;
      else
        v21 = 1;
    }
    while (v21);
  }
  return result;
}

uint64_t sub_22F2ACE8C(_QWORD *a1)
{
  *a1 = &off_24FA70EE0;
  sub_22F2ACF14((uint64_t)(a1 + 2));
  return nullsub_910(a1);
}

void sub_22F2ACEBC(_QWORD *a1)
{
  *a1 = &off_24FA70EE0;
  sub_22F2ACF14((uint64_t)(a1 + 2));
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22F2ACF00(uint64_t a1, void *a2)
{
  return a2 == &unk_255E04EB1;
}

uint64_t sub_22F2ACF14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v7;
  _QWORD *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
        {
          v7 = *(_QWORD *)v5;
          v8 = (_QWORD *)*((_QWORD *)v5 + 3);
          if (v8 != (_QWORD *)((char *)v5 + 40))
            free(v8);
          llvm::deallocate_buffer(v5, (void *)(v7 + 105));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_22F2ACFB4(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 105, 8);
  v11 = v10;
  v12 = v10 + 104;
  if (a3)
    memcpy((void *)(v10 + 104), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_QWORD *)(v11 + 24) = v11 + 40;
  *(_DWORD *)(v11 + 36) = 8;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *sub_22F2AD0CC(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25B4D4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

llvm::raw_ostream *sub_22F2AD12C(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char v6;
  int v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  char v13;
  int v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  char v18;
  int v19;
  uint64_t v20;
  llvm::raw_ostream *v22;
  char v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  char v28;
  BOOL v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  sub_22E47DAC0(a1, "    <dict>\n");
  v4 = sub_22E47DAC0(a1, "      <key>level</key>\n");
  sub_22E47DAC0(v4, "      ");
  sub_22F2AD500(a1, off_24FA71008[*(int *)(a2 + 88)], qword_22F45E018[*(int *)(a2 + 88)]);
  v5 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v5 + 1;
    *v5 = 10;
  }
  v6 = *(_BYTE *)(a2 + 47);
  v7 = v6;
  v8 = v6 & 0x7F;
  if (v7 < 0)
    v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v22 = sub_22E47DAC0(a1, "      <key>filename</key>\n");
    sub_22E47DAC0(v22, "      ");
    v23 = *(_BYTE *)(a2 + 47);
    if (v23 >= 0)
      v24 = (char *)(a2 + 24);
    else
      v24 = *(char **)(a2 + 24);
    if (v23 >= 0)
      v25 = v23 & 0x7F;
    else
      v25 = *(_QWORD *)(a2 + 32);
    sub_22F2AD500(a1, v24, v25);
    v26 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v26 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v26 + 1;
      *v26 = 10;
    }
  }
  if (*(_DWORD *)(a2 + 48))
  {
    v9 = sub_22E47DAC0(a1, "      <key>line</key>\n");
    sub_22E47DAC0(v9, "      ");
    sub_22E47DAC0(a1, "<integer>");
    llvm::raw_ostream::operator<<();
    sub_22E47DAC0(a1, "</integer>");
    v10 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  if (*(_DWORD *)(a2 + 52))
  {
    v11 = sub_22E47DAC0(a1, "      <key>column</key>\n");
    sub_22E47DAC0(v11, "      ");
    sub_22E47DAC0(a1, "<integer>");
    llvm::raw_ostream::operator<<();
    sub_22E47DAC0(a1, "</integer>");
    v12 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v12 + 1;
      *v12 = 10;
    }
  }
  v13 = *(_BYTE *)(a2 + 23);
  v14 = v13;
  v15 = v13 & 0x7F;
  if (v14 < 0)
    v15 = *(_QWORD *)(a2 + 8);
  if (v15)
  {
    v27 = sub_22E47DAC0(a1, "      <key>message</key>\n");
    sub_22E47DAC0(v27, "      ");
    v28 = *(_BYTE *)(a2 + 23);
    v29 = v28 < 0;
    if (v28 >= 0)
      v30 = (char *)a2;
    else
      v30 = *(char **)a2;
    v31 = v28 & 0x7F;
    if (v29)
      v32 = *(_QWORD *)(a2 + 8);
    else
      v32 = v31;
    sub_22F2AD500(a1, v30, v32);
    v33 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v33 + 1;
      *v33 = 10;
    }
  }
  v16 = sub_22E47DAC0(a1, "      <key>ID</key>\n");
  sub_22E47DAC0(v16, "      ");
  sub_22E47DAC0(a1, "<integer>");
  llvm::raw_ostream::operator<<();
  sub_22E47DAC0(a1, "</integer>");
  v17 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v17 + 1;
    *v17 = 10;
  }
  v18 = *(_BYTE *)(a2 + 87);
  v19 = v18;
  v20 = v18 & 0x7F;
  if (v19 < 0)
    v20 = *(_QWORD *)(a2 + 72);
  if (v20)
  {
    v34 = sub_22E47DAC0(a1, "      <key>WarningOption</key>\n");
    sub_22E47DAC0(v34, "      ");
    v37 = *(char **)(a2 + 64);
    v36 = a2 + 64;
    v35 = v37;
    v38 = *(_BYTE *)(v36 + 23);
    v39 = v38;
    if (v38 >= 0)
      v40 = (char *)v36;
    else
      v40 = v35;
    v41 = v38 & 0x7F;
    if (v39 >= 0)
      v42 = v41;
    else
      v42 = *(_QWORD *)(v36 + 8);
    sub_22F2AD500(a1, v40, v42);
    v43 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v43 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v43 + 1;
      *v43 = 10;
    }
  }
  return sub_22E47DAC0(a1, "    </dict>\n");
}

llvm::raw_ostream *sub_22F2AD500(llvm::raw_ostream *a1, char *a2, uint64_t a3)
{
  int v6;
  llvm::raw_ostream *v7;
  char *v8;
  char v9;
  _BYTE *v10;

  sub_22E47DAC0(a1, "<string>");
  for (; a3; --a3)
  {
    v6 = *a2;
    if (v6 <= 38)
    {
      if (v6 == 34)
      {
        v7 = a1;
        v8 = "&quot;";
      }
      else
      {
        if (v6 != 38)
        {
LABEL_16:
          v9 = *a2;
          v10 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v10 >= *((_QWORD *)a1 + 3))
          {
            llvm::raw_ostream::write(a1);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v10 + 1;
            *v10 = v9;
          }
          goto LABEL_14;
        }
        v7 = a1;
        v8 = "&amp;";
      }
    }
    else
    {
      switch(v6)
      {
        case '\'':
          v7 = a1;
          v8 = "&apos;";
          break;
        case '<':
          v7 = a1;
          v8 = "&lt;";
          break;
        case '>':
          v7 = a1;
          v8 = "&gt;";
          break;
        default:
          goto LABEL_16;
      }
    }
    sub_22E47DAC0(v7, v8);
LABEL_14:
    ++a2;
  }
  sub_22E47DAC0(a1, "</string>");
  return a1;
}

void sub_22F2AD638(uint64_t a1)
{
  sub_22E73DB40(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AD65C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

char **sub_22F2AD664(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    v5 = v2 - 96;
    do
    {
      sub_22E73DAF0((uint64_t)&v5[v4]);
      v4 -= 96;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22F2AD6C8(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E73DBB4((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2AD734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24FA710C0;
  v5[1] = a1;
  v5[2] = v4;
  v7 = v5;
  sub_22F2A73EC(a2, (uint64_t *)&v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2AD7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24FA71178;
  v5[1] = a1;
  v5[2] = v4;
  v11 = v5;
  sub_22F2968D4(a2, (uint64_t *)&v11);
  v6 = (uint64_t)v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 104);
  v8 = (_QWORD *)operator new();
  *v8 = off_24FA712F0;
  v8[1] = a1;
  v10 = v8;
  sub_22E726838(v7 + 528, (char *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_22F2AD88C(uint64_t a1)
{
  char v2;
  int v3;
  char *v4;
  size_t v5;
  size_t v6;
  llvm::vfs::YAMLVFSWriter *v7;
  char *v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t i;
  llvm::vfs::YAMLVFSWriter *v16;
  __int16 v17;
  void *v18;
  __int128 v19;
  _WORD v20[128];
  void *v21;
  __int128 v22;
  _QWORD v23[34];

  v23[32] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 108))
    return;
  v2 = *(_BYTE *)(a1 + 87);
  v3 = v2;
  if (v2 >= 0)
    v4 = (char *)(a1 + 64);
  else
    v4 = *(char **)(a1 + 64);
  v5 = v2 & 0x7F;
  if (v3 >= 0)
    v6 = v5;
  else
    v6 = *(_QWORD *)(a1 + 72);
  v7 = (llvm::vfs::YAMLVFSWriter *)(a1 + 128);
  sub_22E73DCB0(a1 + 128, v4, v6);
  v8 = &v4[v6];
  v21 = v23;
  v22 = xmmword_22F44E320;
  sub_22E61131C((uint64_t)&v21, v4, &v4[v6]);
  v18 = v20;
  v19 = xmmword_22F44E320;
  if (!llvm::sys::fs::real_path())
  {
    v16 = v7;
    v10 = (char *)v21;
    v11 = v22;
    v12 = v19;
    for (i = v22; v11; --v11)
    {
      v13 = *v10;
      if ((word_22F4ADB24[v13] & 0x40) != 0)
        v14 = v13 - 32;
      else
        v14 = *v10;
      if ((unint64_t)(v12 + 1) > *((_QWORD *)&v19 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v12 = v19;
      }
      *((_BYTE *)v18 + v12) = v14;
      v12 = v19 + 1;
      *(_QWORD *)&v19 = v19 + 1;
      ++v10;
    }
    if (llvm::sys::fs::real_path())
    {
      v7 = v16;
    }
    else
    {
      v7 = v16;
      if (!i)
      {
        v9 = 0;
        goto LABEL_10;
      }
    }
  }
  v9 = 1;
LABEL_10:
  if (v18 != v20)
    free(v18);
  if (v21 != v23)
    free(v21);
  if (!*(_BYTE *)(a1 + 153))
    *(_BYTE *)(a1 + 153) = 1;
  *(_BYTE *)(a1 + 152) = v9;
  if (!*(_BYTE *)(a1 + 157))
    *(_BYTE *)(a1 + 157) = 1;
  *(_BYTE *)(a1 + 156) = 0;
  std::system_category();
  v21 = v23;
  v22 = xmmword_22F44E320;
  sub_22E61131C((uint64_t)&v21, v4, v8);
  v18 = "vfs.yaml";
  v20[4] = 259;
  v17 = 257;
  llvm::sys::path::append();
  llvm::raw_fd_ostream::raw_fd_ostream();
  llvm::vfs::YAMLVFSWriter::write(v7, (llvm::raw_ostream *)&v18);
  MEMORY[0x23489CE04](&v18);
  if (v21 != v23)
    free(v21);
}

unint64_t sub_22F2ADBA8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  char v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t directories;
  unint64_t v15;
  void *v16;
  __int128 v17;
  _BYTE v18[256];
  void *v19[3];
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[33];

  v23[32] = *MEMORY[0x24BDAC8D0];
  llvm::FileCollector::PathCanonicalizer::canonicalize();
  v8 = *(_BYTE *)(a1 + 87);
  if (v8 >= 0)
    v9 = (_BYTE *)(a1 + 64);
  else
    v9 = *(_BYTE **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  if (v8 >= 0)
    v10 = v8 & 0x7F;
  v16 = v18;
  v17 = xmmword_22F44E320;
  sub_22E61131C((uint64_t)&v16, v9, &v9[v10]);
  if (a5)
  {
    if (llvm::sys::fs::access())
    {
      LODWORD(v11) = 0;
LABEL_9:
      std::system_category();
      v12 = 0;
      goto LABEL_10;
    }
    llvm::sys::path::append();
    v19[1] = 0;
    sub_22E61131C((uint64_t)v19, a4, &a4[a5]);
  }
  else
  {
    llvm::sys::path::relative_path();
    llvm::sys::path::append();
  }
  llvm::sys::path::parent_path();
  directories = llvm::sys::fs::create_directories();
  v12 = directories;
  if ((_DWORD)directories)
  {
    v11 = HIDWORD(directories);
  }
  else
  {
    v15 = llvm::sys::fs::copy_file();
    v12 = v15;
    v11 = HIDWORD(v15);
    if (!(_DWORD)v15)
    {
      (*(void (**)(uint64_t, void *, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 80))(a1, v21, v22, v16, v17);
      goto LABEL_9;
    }
  }
LABEL_10:
  if (v16 != v18)
    free(v16);
  if (v21 != v23)
    free(v21);
  if (v19[0] != &v20)
    free(v19[0]);
  return v12 | ((unint64_t)v11 << 32);
}

unint64_t sub_22F2ADDE4(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  unint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  if ((_DWORD)result)
  {
    result = sub_22F2ADBA8((uint64_t)a1, a2, a3, a4, a5);
    if ((_DWORD)result)
      a1[88] = 1;
  }
  return result;
}

void sub_22F2ADE5C(uint64_t a1)
{
  sub_22E73DDA4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2ADE80(uint64_t a1, const void *a2, size_t a3)
{
  char v3;

  sub_22E3B39D4((llvm::StringMapImpl *)(a1 + 96), a2, a3);
  return v3 & 1;
}

uint64_t sub_22F2ADE9C()
{
  return llvm::vfs::YAMLVFSWriter::addFileMapping();
}

uint64_t sub_22F2ADEA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_22F2ADEB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2ADF20(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2ADF90(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2ADFE4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  v4 = *(uint64_t **)(result + 16);
  if (v3 != v4)
  {
    v6 = a3;
    do
    {
      v7 = *v3++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, a2, v6);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_22F2AE038(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2AE0A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2AE118(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE164(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2AE1D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v4 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4))
  {
    v9 = *v4++;
  }
  return result;
}

uint64_t sub_22F2AE238(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2AE298(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2AE2F8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE344(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2AE3A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2AE404(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v3)
  {
    v6 = result;
    v7 = 0;
    v8 = v3 >> 3;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(v9, a2, a3);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_22F2AE474(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 3;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 152))(v7, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2AE4D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2AE528(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 160))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2AE57C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 176))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2AE5D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 184))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2AE624(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 192))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t sub_22F2AE678(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &off_24FA71478;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = (void **)(a1 + 16);
  sub_22E3B4AF8(&v5);
  return a1;
}

void sub_22F2AE6F0(uint64_t a1)
{
  sub_22F2AE678(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AE714(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE760(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE7AC(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE7F8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE844(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE890(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE8DC(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE928(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE974(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t sub_22F2AE9C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_22F2AE9C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_22F2AE9D0(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(result + 16);
  v2 = *(uint64_t **)(result + 24);
  while (v1 != v2)
  {
    v3 = *v1++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  }
  return result;
}

uint64_t sub_22F2AEA08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 == v3)
    return 1;
  LOBYTE(result) = 1;
  do
  {
    if ((result & 1) != 0)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 160))(*v2, a2);
    else
      result = 0;
    ++v2;
  }
  while (v2 != v3);
  return result;
}

void sub_22F2AEA74(_QWORD *a1)
{
  sub_22F2AEAC0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2AEA9C(_QWORD *a1)
{
  sub_22F2AEAFC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AEAC0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FA71338;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return nullsub_910(a1);
}

uint64_t sub_22F2AEAFC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FA713A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return nullsub_910(a1);
}

uint64_t *sub_22F2AEB38(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_22E3B3AD0((uint64_t)(a1 + 5));
  sub_22F2AEBA8((uint64_t)(a1 + 1));
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = sub_22E73EDA4(v3);
    MEMORY[0x2348A0E9C](v4, 0x1032C40B51677B4);
  }
  return a1;
}

uint64_t sub_22F2AEB9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_22F2AEBA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 41));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2AEC20()
{
  return 0;
}

llvm::raw_ostream *sub_22F2AEC28(llvm::raw_ostream *result, char *a2, uint64_t a3, int a4)
{
  llvm::raw_ostream *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = result;
  if (a4)
  {
    if (a3 >= 0x20)
    {
      v8 = a3;
      do
      {
        sub_22E740F64(v6, v8 & 0x1F | 0x20, 6);
        v7 = v8 >> 5;
        v9 = v8 > 0x3FF;
        v8 >>= 5;
      }
      while (v9);
    }
    else
    {
      v7 = a3;
    }
    result = sub_22E740F64(v6, v7, 6);
  }
  if (*((_DWORD *)v6 + 6))
  {
    result = sub_22E740FDC((const char ***)v6, *((_DWORD *)v6 + 7));
    *((_QWORD *)v6 + 3) = 0;
  }
  if (a3)
  {
    v10 = 8 * a3;
    do
    {
      v11 = *a2;
      a2 += 8;
      result = sub_22E742C34((const char ***)v6, v11);
      v10 -= 8;
    }
    while (v10);
  }
  while (1)
  {
    v13 = (_QWORD *)*((_QWORD *)v6 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v13)
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(*v13 + 80))(*((_QWORD *)v6 + 1));
      v12 = (char *)result + v13[4] - v13[2];
    }
    else
    {
      LOBYTE(v12) = 0;
    }
    if ((((_BYTE)v12 + (_BYTE)v14) & 3) == 0)
      break;
    result = sub_22E742C34((const char ***)v6, 0);
  }
  return result;
}

void sub_22F2AED24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F2AED38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA715D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

llvm::raw_ostream *sub_22F2AED6C(llvm::raw_ostream *result, char *a2, uint64_t a3, int a4)
{
  llvm::raw_ostream *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = result;
  if (a4)
  {
    if (a3 >= 0x20)
    {
      v8 = a3;
      do
      {
        sub_22E740F64(v6, v8 & 0x1F | 0x20, 6);
        v7 = v8 >> 5;
        v9 = v8 > 0x3FF;
        v8 >>= 5;
      }
      while (v9);
    }
    else
    {
      v7 = a3;
    }
    result = sub_22E740F64(v6, v7, 6);
  }
  if (*((_DWORD *)v6 + 6))
  {
    result = sub_22E740FDC((const char ***)v6, *((_DWORD *)v6 + 7));
    *((_QWORD *)v6 + 3) = 0;
  }
  if (a3)
  {
    v10 = 4 * a3;
    do
    {
      v11 = *a2;
      a2 += 4;
      result = sub_22E742C34((const char ***)v6, v11);
      v10 -= 4;
    }
    while (v10);
  }
  while (1)
  {
    v13 = (_QWORD *)*((_QWORD *)v6 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v13)
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(*v13 + 80))(*((_QWORD *)v6 + 1));
      v12 = (char *)result + v13[4] - v13[2];
    }
    else
    {
      LOBYTE(v12) = 0;
    }
    if ((((_BYTE)v12 + (_BYTE)v14) & 3) == 0)
      break;
    result = sub_22E742C34((const char ***)v6, 0);
  }
  return result;
}

uint64_t sub_22F2AEE68()
{
  std::system_category();
  return 0;
}

_QWORD *sub_22F2AEE84(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285464(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
    v5[2] = 0;
    v5[3] = 0;
  }
  return v5;
}

uint64_t sub_22F2AEEF4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_22F2AEF28(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

uint64_t sub_22F2AEF5C(uint64_t a1, uint64_t a2)
{
  void **v5;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      sub_22E746D80((void **)a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    sub_22E746ED0(&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_22F2AEFFC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_22F2AF034(uint64_t a1)
{
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AF058(_QWORD *a1)
{
  *a1 = &off_24FA71788;
  sub_22E748288((uint64_t)(a1 + 2));
  return nullsub_910(a1);
}

void sub_22F2AF088(_QWORD *a1)
{
  *a1 = &off_24FA71788;
  sub_22E748288((uint64_t)(a1 + 2));
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2AF0D0(uint64_t a1)
{
  sub_22E747680(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AF0F4(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
  {
    llvm::MD5::update();
    llvm::MD5::update();
    llvm::MD5::update();
    llvm::MD5::update();
    llvm::MD5::update();
    return llvm::MD5::update();
  }
  return result;
}

_QWORD *sub_22F2AF1E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24FA71800;
  result[1] = a1;
  *a2 = result;
  return result;
}

void sub_22F2AF230(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2AF29C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2AF29C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a1 + 32 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v3;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      v3 += 32;
      a2 += 32;
    }
    while (v3 != v4);
    v5 = *a1 - 24;
    v6 = 32 * v2;
    do
    {
      if (*(_QWORD *)(v5 + v6))
      {
        sub_22E3B485C((uint64_t *)(v5 + v6));
        operator delete(*(void **)(v5 + v6));
      }
      v6 -= 32;
    }
    while (v6);
  }
}

_QWORD *sub_22F2AF334(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_22F2AADBC(a1, a3, a4);
  *result = &off_24FA71828;
  result[5] = a2;
  return result;
}

void sub_22F2AF370(_QWORD *a1)
{
  sub_22E727B70(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2AF394(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, unsigned __int8 *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  llvm::raw_ostream *v22;
  int v23;
  __int128 v24;
  uint64_t v25;

  v17 = *(_QWORD **)(a1 + 40);
  v18 = (*(uint64_t (**)(_QWORD *))(*v17 + 80))(v17);
  v19 = v17[4];
  v20 = v17[2];
  if ((_DWORD)a2)
  {
    v24 = *a4;
    v25 = *((_QWORD *)a4 + 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3, &v24, a5, a9, a10);
  }
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
  if ((v21 & 0x40000) != 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
    v21 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4);
  }
  if ((v21 & 0x80) != 0)
    sub_22F2AF4E0(*(llvm::raw_ostream **)(a1 + 40), a5, (v21 >> 18) & 1);
  v22 = *(llvm::raw_ostream **)(a1 + 40);
  v23 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v22 + 80))(v22);
  sub_22E7482D0(v22, a5 == 1, a6, a7, v20 - v19 - v18 + v23 + *((_DWORD *)v22 + 8) - *((_DWORD *)v22 + 4), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 36), (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4) >> 18) & 1);
}

llvm::raw_ostream *sub_22F2AF4E0(llvm::raw_ostream *result, int a2, int a3)
{
  char *v3;
  llvm::raw_ostream *v4;
  int v5;
  char *v6;

  if (a3)
  {
    v4 = result;
    v5 = a2 - 1;
    if ((a2 - 1) < 5)
    {
      v6 = off_24FA71878[v5];
      (*(void (**)(llvm::raw_ostream *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, dword_22F45E270[v5], 1, 0);
      sub_22E47DAC0(v4, v6);
    }
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)v4 + 32))(v4);
  }
  else if (a2 == 3)
  {
    v3 = "warning: ";
    return sub_22E47DAC0(result, v3);
  }
  else
  {
    switch(a2)
    {
      case 1:
        v3 = "note: ";
        return sub_22E47DAC0(result, v3);
      case 2:
        v3 = "remark: ";
        return sub_22E47DAC0(result, v3);
      case 4:
        v3 = "error: ";
        return sub_22E47DAC0(result, v3);
      case 5:
        v3 = "fatal error: ";
        return sub_22E47DAC0(result, v3);
      default:
        return result;
    }
  }
}

void *sub_22F2AF5CC(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  llvm::raw_ostream *v4;
  void *result;
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 5) & 1) != 0)
  {
    v9 = a1;
    v10 = a3;
    v11 = a2;
    sub_22F1D07D8(*(_QWORD *)(a4 + 16), a2, a3, 0, 1, (uint64_t)&v13);
    if ((v14 & 1) == 0)
    {
      v6 = sub_22F1D20B4();
      v10 = v7;
      v11 = v6;
    }
    a3 = v10;
    a2 = v11;
    a1 = v9;
  }
  v4 = *(llvm::raw_ostream **)(a1 + 40);
  result = (void *)*((_QWORD *)v4 + 4);
  if (a3 > *((_QWORD *)v4 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v4, (const char *)a2);
  v12 = v4;
  if (a3)
  {
    v8 = a3;
    result = memcpy(result, a2, a3);
    *((_QWORD *)v12 + 4) += v8;
  }
  return result;
}

llvm::raw_ostream *sub_22F2AF6A8(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  char *v9;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 4) & 0x40) != 0 && *a4)
  {
    v5 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 40), "In file included from ");
    v6 = sub_22E47DAC0(v5, *a4);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 < *((_QWORD *)v6 + 3))
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 58;
    }
    else
    {
      llvm::raw_ostream::write(v6);
    }
    v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v9 = ":\n";
  }
  else
  {
    v8 = *(llvm::raw_ostream **)(a1 + 40);
    v9 = "In included file:\n";
  }
  return sub_22E47DAC0(v8, v9);
}

llvm::raw_ostream *sub_22F2AF738(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, const void *a5, size_t a6)
{
  llvm::raw_ostream *v8;
  void *v9;
  char *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 4) & 0x40) != 0 && *a4)
  {
    v14 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 40), "In module '");
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (a6 <= *((_QWORD *)v14 + 3) - (_QWORD)v15)
    {
      if (a6)
      {
        memcpy(v15, a5, a6);
        *((_QWORD *)v14 + 4) += a6;
      }
    }
    else
    {
      v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, (const char *)a5);
    }
    v16 = sub_22E47DAC0(v14, "' imported from ");
    v17 = sub_22E47DAC0(v16, *a4);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 58;
    }
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v10 = ":\n";
  }
  else
  {
    v8 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 40), "In module '");
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (a6 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      if (a6)
      {
        memcpy(v9, a5, a6);
        *((_QWORD *)v8 + 4) += a6;
      }
    }
    else
    {
      v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)a5);
    }
    v10 = "':\n";
    v11 = v8;
  }
  return sub_22E47DAC0(v11, v10);
}

llvm::raw_ostream *sub_22F2AF888(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, const void *a5, size_t a6)
{
  llvm::raw_ostream *v8;
  void *v9;
  char *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v14;
  void *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 4) & 0x40) != 0 && *a4)
  {
    v14 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 40), "While building module '");
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (a6 <= *((_QWORD *)v14 + 3) - (_QWORD)v15)
    {
      if (a6)
      {
        memcpy(v15, a5, a6);
        *((_QWORD *)v14 + 4) += a6;
      }
    }
    else
    {
      v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v14, (const char *)a5);
    }
    v16 = sub_22E47DAC0(v14, "' imported from ");
    v17 = sub_22E47DAC0(v16, *a4);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 58;
    }
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v10 = ":\n";
  }
  else
  {
    v8 = sub_22E47DAC0(*(llvm::raw_ostream **)(a1 + 40), "While building module '");
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (a6 <= *((_QWORD *)v8 + 3) - (_QWORD)v9)
    {
      if (a6)
      {
        memcpy(v9, a5, a6);
        *((_QWORD *)v8 + 4) += a6;
      }
    }
    else
    {
      v8 = (llvm::raw_ostream *)llvm::raw_ostream::write(v8, (const char *)a5);
    }
    v10 = "':\n";
    v11 = v8;
  }
  return sub_22E47DAC0(v11, v10);
}

uint64_t sub_22F2AF9DC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 + v6 == a2)
  {
    v12 = *a3;
    if (v6 + 1 > (unint64_t)a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v5 = *a1;
      v6 = a1[1];
    }
    *(_BYTE *)(v5 + v6) = v12;
    v13 = *a1;
    v14 = a1[1] + 1;
    a1[1] = v14;
    return v13 + v14 - 1;
  }
  else
  {
    v7 = a2 - v5;
    if (v6 + 1 > (unint64_t)a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v5 = *a1;
      v6 = a1[1];
    }
    v8 = (char *)(v5 + v7);
    *(_BYTE *)(v5 + v6) = *(_BYTE *)(v5 + v6 - 1);
    v9 = a1[1];
    v10 = *a1 + v9 - 1;
    if ((char *)v10 != v8)
    {
      memmove(v8 + 1, v8, v10 - (_QWORD)v8);
      v9 = a1[1];
    }
    a1[1] = v9 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

void sub_22F2AFAD4(uint64_t a1)
{
  sub_22F2AFAFC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AFAFC(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_24FA718B0;
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 88);
  sub_22E746E58(&v4);
  v4 = (void **)(a1 + 64);
  sub_22E746E58(&v4);
  v4 = (void **)(a1 + 40);
  sub_22E746E58(&v4);
  v4 = (void **)(a1 + 16);
  sub_22E746E58(&v4);
  return nullsub_910(a1);
}

void sub_22F2AFB8C(uint64_t a1)
{
  sub_22E74C1BC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2AFBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  sub_22F2AF334(v4, *(_QWORD *)(a1 + 16), a2, *(_DWORD **)(a1 + 24));
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2AFC24(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22F2AFC44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24FA71950;
  *(_QWORD *)(a1 + 16) = &unk_24FA719A8;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)v4 = &off_24FA718B0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 24);
  *v5 = v6;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0x1800000000;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0x8800000000;
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  v7 = *(_QWORD *)(v6 + 64);
  if (v7)
    *(_QWORD *)(a1 + 80) = v7;
  return a1;
}

uint64_t sub_22F2AFD44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24FA71950;
  *(_QWORD *)(a1 + 16) = &unk_24FA719A8;
  v2 = a1 + 16;
  *(_QWORD *)(a1 + 80) = 0;
  sub_22E74C894(a1);
  llvm::deallocate_buffer(*(llvm **)(a1 + 216), (void *)(16 * *(unsigned int *)(a1 + 232)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 192), (void *)(16 * *(unsigned int *)(a1 + 208)));
  sub_22E74F1C8((void **)(a1 + 96));
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    v7 = sub_22F2B01F0(v3);
    MEMORY[0x2348A0E9C](v7, 0x10A0C40740E6257);
  }
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  nullsub_910(v2);
  return nullsub_910(a1);
}

uint64_t sub_22F2AFE18(uint64_t a1)
{
  return sub_22F2AFD44(a1 - 16);
}

void sub_22F2AFE20(uint64_t a1)
{
  sub_22F2AFD44(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2AFE44(uint64_t a1)
{
  sub_22F2AFD44(a1 - 16);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F2AFE6C(uint64_t a1)
{
  _QWORD *result;
  int v3;
  uint64_t v4;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
  v3 = *(_DWORD *)(a1 + 88) - 1;
  *(_DWORD *)(a1 + 88) = v3;
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      sub_22F4186B4(v4, a1 + 16);
    sub_22E74CC6C(*(_QWORD *)(a1 + 56));
    result = sub_22E74C894(a1);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  return result;
}

uint64_t sub_22F2AFED4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_22E74D00C(a1 - 16, a2, a3);
  return 0;
}

_QWORD *sub_22F2AFEF0(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = result;
  v2 = (_QWORD *)*result;
  v3 = (_QWORD *)result[1];
  while (v3 != v2)
  {
    v4 = (_QWORD *)*--v3;
    result = v4;
    *v3 = 0;
    if (v4)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[1] = v2;
  v5 = (_QWORD *)v1[3];
  v6 = (_QWORD *)v1[4];
  while (v6 != v5)
  {
    v7 = (_QWORD *)*--v6;
    result = v7;
    *v6 = 0;
    if (v7)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[4] = v5;
  v8 = (_QWORD *)v1[6];
  v9 = (_QWORD *)v1[7];
  while (v9 != v8)
  {
    v10 = (_QWORD *)*--v9;
    result = v10;
    *v9 = 0;
    if (v10)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[7] = v8;
  v11 = (_QWORD *)v1[9];
  v12 = (_QWORD *)v1[10];
  while (v12 != v11)
  {
    v13 = (_QWORD *)*--v12;
    result = v13;
    *v12 = 0;
    if (v13)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[10] = v11;
  return result;
}

uint64_t *sub_22F2AFFC4(uint64_t a1, const void *a2, size_t a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v16 = 0;
  v15 = a4;
  result = sub_22F2B00E8((llvm::StringMapImpl *)(a1 + 8), a2, a3, &v15);
  v7 = *result;
  if (v8)
  {
    result = (uint64_t *)llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1)
    {
      v9 = (int)result;
      if ((int)result != (unint64_t)*(unsigned int *)(a1 + 48))
      {
        v10 = *(_QWORD *)(a1 + 40);
        v11 = *(_QWORD *)(v10 + 8 * (int)result);
        v12 = *(unsigned int *)(v11 + 16);
        if ((_DWORD)v12)
        {
          v13 = *(_QWORD *)(v11 + 8);
          v14 = 56 * v12;
          do
          {
            if (!*(_DWORD *)(v7 + 16))
              *(_DWORD *)(v7 + 16) = *(_DWORD *)(v13 + 12);
            sub_22E74F3D0(*(_QWORD *)a1, v13, a4, 0, 0);
            v13 += 56;
            v14 -= 56;
          }
          while (v14);
          v11 = *(_QWORD *)(v10 + 8 * v9);
        }
        llvm::StringMapImpl::RemoveKey();
        return (uint64_t *)sub_22E74F988((llvm *)v11);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 12) = a4;
  }
  return result;
}

uint64_t *sub_22F2B00E8(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 25, 8);
  v12 = v11;
  v13 = v11 + 24;
  if (a3)
    memcpy((void *)(v11 + 24), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  v14 = *a4;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = v14;
  *(_DWORD *)(v12 + 16) = *((_DWORD *)a4 + 2);
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2B01F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 52))
  {
    v2 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)(a1 + 40) + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          sub_22E74F988(v5);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 40));
  sub_22F244DD0(a1 + 8);
  return a1;
}

uint64_t sub_22F2B0270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22F2B02D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F2B0348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F2B03B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_22F2B043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_22F2B04AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22F2B04FC(uint64_t a1)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_22F2B0548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8))
    && (!(_DWORD)a4 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8))))
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6);
  }
  else
  {
    v12 = 0;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16))
    && (!(_DWORD)a4 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16))))
  {
    return v12 | (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
  }
  return v12;
}

uint64_t sub_22F2B0644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_22F2B06E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_22F2B0724(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  if (a3)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  else
    v3 = 0;
  return sub_22E750B9C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), v3);
}

uint64_t sub_22F2B074C(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v4;

  if (a3)
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  else
    v4 = 0;
  return sub_22E767250(a2, *(void ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 16), v4, a4);
}

uint64_t sub_22F2B0778(uint64_t a1, uint64_t a2, int a3, std::string *a4)
{
  unint64_t v4;

  if (a3)
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  else
    v4 = 0;
  return sub_22E768380(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), v4, a4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), 1);
}

uint64_t sub_22F2B07A8(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  return sub_22E768380(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 0, a4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), 0);
}

uint64_t sub_22F2B07C8(uint64_t a1, uint64_t a2, void *__s1, size_t a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  size_t v14;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = v6[13];
  v10 = *(void **)(v7 + 168);
  v8 = v7 + 168;
  v9 = v10;
  v11 = *(_BYTE *)(v8 + 23);
  if (a5)
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  else
    v12 = 0;
  if (v11 >= 0)
    v13 = (void *)v8;
  else
    v13 = v9;
  if (v11 >= 0)
    v14 = v11 & 0x7F;
  else
    v14 = *(_QWORD *)(v8 + 8);
  return sub_22E768CD8(*(_BYTE *)(a2 + 216), __s1, a4, v13, v14, v12, *(_QWORD *)(v6[7] + 20), *(unsigned __int8 *)(v6[7] + 28), *(_BYTE *)(v6[4] + 157));
}

uint64_t sub_22F2B0848(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 532) = a3;
  return result;
}

uint64_t sub_22F2B0854(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(uint64_t **)(*(_QWORD *)(*a1 + 128) + 15200);
  v6 = *a2;
  v7 = sub_22E768E34(*a1, a1[1], *(_DWORD *)(a2 + 1));
  v8 = sub_22E785944(v4, v7);
  v9 = v6 - 1;
  if (v6 == 1)
    return v8 | 2;
  if (!v6)
    return v8 | 1;
  v19[0] = v8;
  v18 = 1;
  v12 = (int *)(a2 + 3);
  do
  {
    v13 = *a1;
    v14 = *v12++;
    v15 = sub_22E768E34(*a1, a1[1], v14);
    v16 = sub_22E785944(v13, v15);
    v17 = v18;
    if (v18 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v18;
    }
    v19[v17] = v16;
    ++v18;
    --v9;
  }
  while (v9);
  return sub_22F1D3E5C(v5, v6, v19);
}

uint64_t sub_22F2B09B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x200000000;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  result = sub_22F2B0B3C(*a2, a2[1], *(_DWORD *)a3);
  v7 = *(unsigned __int16 *)(a3 + 4);
  v8 = *(unsigned __int16 *)(a3 + 6);
  v9 = (unsigned int *)(a3 + 8);
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v7 & 3;
  *(_BYTE *)(a1 + 12) = (v7 & 4) != 0;
  *(_DWORD *)(a1 + 8) = v8 & 3;
  *(_BYTE *)(a1 + 13) = (v8 & 4) != 0;
  if (v7 >= 8)
  {
    v10 = v7 >> 3;
    do
    {
      v11 = (_QWORD *)*a2;
      v12 = *v9++;
      v13 = sub_22E768FE0(*a2, a2[1], v12);
      result = sub_22E77F870(v11, v13);
      if (result)
      {
        v14 = result;
        v15 = *(unsigned int *)(a1 + 24);
        if (v15 >= *(unsigned int *)(a1 + 28))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = *(unsigned int *)(a1 + 24);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15) = v14;
        ++*(_DWORD *)(a1 + 24);
      }
      --v10;
    }
    while (v10);
  }
  if (v8 >= 8)
  {
    v16 = v8 >> 3;
    do
    {
      v17 = (_QWORD *)*a2;
      v18 = *v9++;
      v19 = sub_22E768FE0(*a2, a2[1], v18);
      result = sub_22E77F870(v17, v19);
      if (result)
      {
        v20 = result;
        v21 = *(unsigned int *)(a1 + 56);
        if (v21 >= *(unsigned int *)(a1 + 60))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = *(unsigned int *)(a1 + 56);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v21) = v20;
        ++*(_DWORD *)(a1 + 56);
      }
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_22F2B0B3C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v14;
  _DWORD *v15;

  if (!a3)
    return 0;
  if (*(_QWORD *)(a2 + 784))
    sub_22E76BB68(a1, a2);
  v5 = *(_DWORD **)(a2 + 2672);
  v6 = *(unsigned int *)(a2 + 2680);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int *)(a2 + 2680);
    v8 = *(_DWORD **)(a2 + 2672);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[2 * (v7 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v7 += ~(v7 >> 1);
      if (v12 > a3 - 1)
        v7 = v9;
      else
        v8 = v11;
    }
    while (v7);
  }
  else
  {
    v8 = *(_DWORD **)(a2 + 2672);
  }
  v14 = &v5[2 * v6];
  if (v8 == v5)
    v15 = v14;
  else
    v15 = v8 - 2;
  return (v15[1] + a3);
}

uint64_t sub_22F2B0BD8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if ((__int128 *)a1 != a2)
    sub_22E743814((uint64_t *)(a1 + 40), *((uint64_t **)a2 + 5), *((uint64_t **)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 4);
  sub_22E747DF0(a1 + 64, (uint64_t)(a2 + 4));
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  return a1;
}

uint64_t sub_22F2B0C44(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  do
  {
    v3 = *(_QWORD *)(a2 + 8);
    a2 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v3 & 2) != 0 && a2);
  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  sub_22F42393C(a1, a2, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22F2B0C98(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  BOOL v26;
  uint64_t v27;

  if (!a2)
    goto LABEL_12;
  if (a2 > 0 || (-2 - a2) >= *(_DWORD *)(a1 + 7372))
  {
    sub_22E769C10(a1, "source location entry ID out-of-range for AST file", 0x32uLL);
LABEL_12:
    v12 = 0;
    v13 = 0;
    v14 = "";
    goto LABEL_13;
  }
  v4 = *(_DWORD **)(a1 + 600);
  v5 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 608);
    v7 = *(_DWORD **)(a1 + 600);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[4 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 4;
      v6 += ~(v6 >> 1);
      if (v11 > -a2)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 600);
  }
  v15 = &v4[4 * v5];
  if (v7 == v4)
    v16 = v15;
  else
    v16 = v7 - 4;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *(_DWORD *)(v17 + 4);
  v19 = v18 > 5;
  v20 = (1 << v18) & 0x23;
  if (v19 || v20 == 0)
    goto LABEL_12;
  v24 = *(const char **)(v17 + 80);
  v23 = v17 + 80;
  v22 = v24;
  v25 = *(_BYTE *)(v23 + 23);
  v26 = v25 < 0;
  if (v25 >= 0)
    v14 = (const char *)v23;
  else
    v14 = v22;
  v13 = *(_QWORD *)(v23 + 8);
  v27 = v25 & 0x7F;
  if (!v26)
    v13 = v27;
  v12 = *(_DWORD *)(v23 + 660);
LABEL_13:
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v13;
}

void sub_22F2B0DA0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_22F2B0C98(a1 - 48, a2, a3);
}

uint64_t sub_22F2B0DA8(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  if (*(_QWORD *)(a2 + 784))
    sub_22E76BB68(a1, a2);
  v5 = *(_DWORD **)(a2 + 2544);
  v6 = *(unsigned int *)(a2 + 2552);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int *)(a2 + 2552);
    v8 = *(_DWORD **)(a2 + 2544);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[2 * (v7 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v7 += ~(v7 >> 1);
      if (v12 > a3 - 1)
        v7 = v9;
      else
        v8 = v11;
    }
    while (v7);
  }
  else
  {
    v8 = *(_DWORD **)(a2 + 2544);
  }
  v13 = &v5[2 * v6];
  if (v8 == v5)
    v14 = v13;
  else
    v14 = v8 - 2;
  return (v14[1] + a3);
}

uint64_t sub_22F2B0E38(uint64_t a1, unint64_t *a2)
{
  return sub_22E76C88C((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_22F2B0E40(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _BYTE **v6;
  _BYTE **v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_22F2BC0E4(a1, a2, (uint64_t)a3);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 32 * v4);
  v6 = (_BYTE **)*a3;
  v7 = (_BYTE **)a3[1];
  *v5 = **a2;
  v8 = *v6;
  v9 = *v7;
  v5[1] = v5 + 3;
  ++v5;
  v5[1] = 0x100000000;
  result = sub_22E5223E0((uint64_t)v5, v8, v9);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F2B0EBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(_QWORD **)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    v4 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v2[245] + 80) + 72), *(_QWORD *)(v2[245] + 80));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 48))(v3, 1, v4);
  }
  if (*(_DWORD *)(a1 + 6368) < 8u)
    goto LABEL_14;
  v5 = *(unsigned int **)(a1 + 6360);
  if (*v5 && !v2[175])
  {
    v16 = sub_22E77D8C8(a1, *v5);
    sub_22F36DB98((uint64_t)v2, v16);
    v5 = *(unsigned int **)(a1 + 6360);
  }
  v6 = v5[1];
  if (v6)
  {
    v17 = sub_22E77D8C8(a1, v6);
    if (v17 < 0x10)
    {
      v18 = "FILE type is NULL";
      v19 = 17;
LABEL_33:
      sub_22E769C10(a1, v18, v19);
      return;
    }
    if (!v2[179])
    {
      v29 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
      v30 = sub_22F10D4DC(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 24);
      }
      else
      {
        v41 = *v29;
        if ((!*v29 || (*(_DWORD *)(v41 + 16) & 0xFE) != 0x2C)
          && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
           || (v41 = sub_22F10CF48(v41)) == 0))
        {
          v18 = "Invalid FILE type in AST file";
          v19 = 29;
          goto LABEL_33;
        }
        v31 = sub_22F1104D0(v41);
      }
      v2[179] = v31;
    }
  }
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 6360) + 8);
  if (!v7)
    goto LABEL_9;
  v20 = sub_22E77D8C8(a1, v7);
  if (v20 < 0x10)
  {
    v18 = "jmp_buf type is NULL";
    v19 = 20;
    goto LABEL_33;
  }
  if (!v2[180])
  {
    v32 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v33 = sub_22F10D4DC(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0));
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 24);
    }
    else
    {
      v42 = *v32;
      if ((!*v32 || (*(_DWORD *)(v42 + 16) & 0xFE) != 0x2C)
        && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
         || (v42 = sub_22F10CF48(v42)) == 0))
      {
        v18 = "Invalid jmp_buf type in AST file";
        v19 = 32;
        goto LABEL_33;
      }
      v34 = sub_22F1104D0(v42);
    }
    v2[180] = v34;
  }
LABEL_9:
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 6360) + 12);
  if (v8)
  {
    v21 = sub_22E77D8C8(a1, v8);
    if (v21 < 0x10)
    {
      v18 = "sigjmp_buf type is NULL";
LABEL_32:
      v19 = 23;
      goto LABEL_33;
    }
    if (!v2[181])
    {
      v35 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
      v36 = sub_22F10D4DC(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 24);
      }
      else
      {
        v43 = *v35;
        if (!*v35 || (*(_DWORD *)(v43 + 16) & 0xFE) != 0x2C)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
            v43 = sub_22F10CF48(v43);
          else
            v43 = 0;
        }
        v37 = sub_22F1104D0(v43);
      }
      v2[181] = v37;
    }
  }
  v9 = *(_DWORD **)(a1 + 6360);
  v10 = v9[4];
  if (v10 && v2[165] <= 0xFuLL)
  {
    v2[165] = sub_22E77D8C8(a1, v10);
    v9 = *(_DWORD **)(a1 + 6360);
  }
  v11 = v9[5];
  if (v11 && v2[166] <= 0xFuLL)
  {
    v2[166] = sub_22E77D8C8(a1, v11);
    v9 = *(_DWORD **)(a1 + 6360);
  }
  v12 = v9[6];
  if (v12 && v2[167] <= 0xFuLL)
  {
    v2[167] = sub_22E77D8C8(a1, v12);
    v9 = *(_DWORD **)(a1 + 6360);
  }
  v13 = v9[7];
  if (!v13)
    goto LABEL_14;
  v22 = sub_22E77D8C8(a1, v13);
  if (v22 < 0x10)
  {
    v18 = "ucontext_t type is NULL";
    goto LABEL_32;
  }
  if (!v2[182])
  {
    v38 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF0);
    v39 = sub_22F10D4DC(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
    if (v39)
    {
      v40 = *(_QWORD *)(v39 + 24);
    }
    else
    {
      v44 = *v38;
      if (!*v38 || (*(_DWORD *)(v44 + 16) & 0xFE) != 0x2C)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
          v44 = sub_22F10CF48(v44);
        else
          v44 = 0;
      }
      v40 = sub_22F1104D0(v44);
    }
    v2[182] = v40;
  }
LABEL_14:
  v14 = sub_22EF5B130((uint64_t)v2);
  sub_22E77F45C(a1, v14);
  if (*(_DWORD *)(a1 + 6448))
    v2[185] = sub_22E77F870((_QWORD *)a1, **(unsigned int **)(a1 + 6440));
  v15 = *(unsigned int *)(a1 + 7272);
  if ((_DWORD)v15)
  {
    v23 = 8 * v15;
    v24 = (int *)(*(_QWORD *)(a1 + 7264) + 4);
    do
    {
      v25 = *(v24 - 1);
      if (v25)
      {
        if (*(_DWORD *)(a1 + 4208) >= v25)
        {
          v26 = v25 - 1;
          v27 = *(_QWORD *)(a1 + 4200);
          v28 = *(_QWORD *)(v27 + 8 * v26);
          if (v28)
          {
            sub_22E77A418((int32x2_t *)a1, *(_QWORD *)(v27 + 8 * v26), 1);
            if (*v24)
              sub_22F190280(*(_QWORD *)(a1 + 120), v28, *v24);
          }
        }
        else
        {
          sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
        }
      }
      v24 += 2;
      v23 -= 8;
    }
    while (v23);
  }
}

unsigned int *sub_22F2B1318(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return (unsigned int *)sub_22E5223E0((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

unint64_t sub_22F2B14A4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a2;
  v3 = *(unsigned int *)(*a1 + 8 * v2);
  v4 = *(_QWORD *)(*a1 + 8 * (v2 + 1));
  v5 = *(_QWORD *)(*a1 + 8 * (v2 + 2));
  *a2 = v2 + 3;
  v6 = v3 | ((unint64_t)(v4 - 1) << 32) | 0x8000000000000000;
  if (!(_DWORD)v5)
    v6 = ((v3 | (v4 << 32)) + 0x7FFFFFFF00000000) | 0x8000000000000000;
  if ((_DWORD)v4)
    return v6;
  else
    return v3;
}

uint64_t sub_22F2B150C(int64x2_t *a1, uint64_t a2, char a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  uint64_t result;

  v5 = a1->u64[1];
  if (v5 >= a1[1].i64[0])
  {
    result = sub_22E7912F8(a1, a2, a3);
  }
  else
  {
    v6 = *(_BYTE *)(a2 + 23);
    v7 = v6 < 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (v6 < 0)
      a2 = *(_QWORD *)a2;
    v9 = v6 & 0x7F;
    if (v7)
      v10 = v8;
    else
      v10 = v9;
    std::string::__init((std::string *)a1->i64[1], (const std::string::value_type *)a2, v10);
    *(_BYTE *)(v5 + 24) = a3;
    result = v5 + 32;
  }
  a1->i64[1] = result;
  return result;
}

uint64_t sub_22F2B1580(uint64_t a1, unsigned int a2)
{
  return sub_22E781074(a1 - 8, a2);
}

uint64_t sub_22F2B1588(uint64_t a1, int a2, char a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  _DWORD *j;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  _BOOL4 v32;
  _DWORD *i;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 220) > (a2 & 0x7FFFFFFFu))
  {
    v4 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v4)
    {
      LODWORD(result) = 0;
      v6 = *(uint64_t **)(a1 + 144);
      v7 = 8 * v4;
      do
      {
        v8 = *v6++;
        result = (*(_DWORD *)(v8 + 2584) + result);
        v7 -= 8;
      }
      while (v7);
      return result;
    }
    return 0;
  }
  v9 = *(_DWORD **)(a1 + 1640);
  v10 = *(unsigned int *)(a1 + 1648);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int *)(a1 + 1648);
    v12 = *(_DWORD **)(a1 + 1640);
    do
    {
      v13 = v11 >> 1;
      v14 = &v12[4 * (v11 >> 1)];
      v16 = *v14;
      v15 = v14 + 4;
      v11 += ~(v11 >> 1);
      if (v16 > (a2 & 0x7FFFFFFF ^ 0x7FFFFFFFu))
        v11 = v13;
      else
        v12 = v15;
    }
    while (v11);
  }
  else
  {
    v12 = *(_DWORD **)(a1 + 1640);
  }
  v17 = &v9[4 * v10];
  if (v12 == v9)
    v18 = v17;
  else
    v18 = v12 - 4;
  v19 = *((_QWORD *)v18 + 1);
  v20 = *(unsigned int *)(v19 + 2584);
  if ((_DWORD)v20)
  {
    v21 = *(int **)(v19 + 2576);
    v42 = v21;
    v43 = &v21[3 * v20];
    if ((a3 & 1) != 0)
    {
      v23 = *(int **)(v19 + 2576);
      do
      {
        v24 = &v23[3 * (v20 >> 1)];
        v26 = *v24;
        v25 = v24 + 3;
        v27 = sub_22E77BAB4(a1, v19, v26);
        if (sub_22F1E3C34(*(_QWORD **)(a1 + 80), a2, v27))
        {
          v20 >>= 1;
        }
        else
        {
          v23 = v25;
          v20 += ~(v20 >> 1);
        }
      }
      while (v20);
    }
    else
    {
      do
      {
        v23 = &v21[3 * (v20 >> 1)];
        v30 = *(_QWORD **)(a1 + 80);
        v31 = sub_22E77BAB4(a1, v19, v23[1]);
        v32 = sub_22F1E3C34(v30, v31, a2);
        if (v32)
          v20 += ~(v20 >> 1);
        else
          v20 >>= 1;
        if (v32)
          v21 = v23 + 3;
      }
      while (v20);
    }
    if (v23 != v43)
      return *(_DWORD *)(v19 + 2536) - 1431655765 * ((unint64_t)((char *)v23 - (char *)v42) >> 2);
    for (i = v18 + 4; i != (_DWORD *)(*(_QWORD *)(a1 + 1640) + 16 * *(unsigned int *)(a1 + 1648)); i += 4)
    {
      v29 = *((_QWORD *)i + 1);
      if (*(_DWORD *)(v29 + 2584))
        return *(unsigned int *)(v29 + 2536);
    }
    v38 = *(unsigned int *)(a1 + 152);
    if (!(_DWORD)v38)
      return 0;
    LODWORD(result) = 0;
    v39 = *(uint64_t **)(a1 + 144);
    v40 = 8 * v38;
    do
    {
      v41 = *v39++;
      result = (*(_DWORD *)(v41 + 2584) + result);
      v40 -= 8;
    }
    while (v40);
  }
  else
  {
    for (j = v18 + 4; j != v17; j += 4)
    {
      v29 = *((_QWORD *)j + 1);
      if (*(_DWORD *)(v29 + 2584))
        return *(unsigned int *)(v29 + 2536);
    }
    v34 = *(unsigned int *)(a1 + 152);
    if (!(_DWORD)v34)
      return 0;
    LODWORD(result) = 0;
    v35 = *(uint64_t **)(a1 + 144);
    v36 = 8 * v34;
    do
    {
      v37 = *v35++;
      result = (*(_DWORD *)(v37 + 2584) + result);
      v36 -= 8;
    }
    while (v36);
  }
  return result;
}

unint64_t sub_22F2B180C(uint64_t a1, unint64_t a2)
{
  return sub_22E7814F8(a1 - 8, a2);
}

uint64_t sub_22F2B1814(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;

  if (a3)
  {
    v5 = *(_DWORD **)(a1 + 4768);
    v6 = *(unsigned int *)(a1 + 4776);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned int *)(a1 + 4776);
      v8 = *(_DWORD **)(a1 + 4768);
      do
      {
        v9 = v7 >> 1;
        v10 = &v8[4 * (v7 >> 1)];
        v12 = *v10;
        v11 = v10 + 4;
        v7 += ~(v7 >> 1);
        if (v12 > a2)
          v7 = v9;
        else
          v8 = v11;
      }
      while (v7);
    }
    else
    {
      v8 = *(_DWORD **)(a1 + 4768);
    }
    v14 = &v5[4 * v6];
    if (v8 == v5)
      v15 = v14;
    else
      v15 = v8 - 4;
    v13 = sub_22E77BAB4(a1, *((_QWORD *)v15 + 1), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) + 2576)+ 12 * (a2 - *(_DWORD *)(*((_QWORD *)v15 + 1) + 2536))));
    if (v13)
    {
      v16 = *(_QWORD *)(a1 + 80);
      if (v13 < 0)
        v13 = sub_22F423AE4(v16, v13);
      v13 = sub_22E63AF88(v16, a3, v13 & 0x7FFFFFFF);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 | 0x100u;
}

uint64_t sub_22F2B18EC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return sub_22F2B1814(a1 - 8, a2, a3);
}

_QWORD *sub_22F2B18F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *result;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  result = sub_22E782300(*a1);
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t sub_22F2B194C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v11, v12, v9 >> 1);
  *(_DWORD *)(a3 + 4) = result;
  v15 = *a1;
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v16))
  {
    result = *(_QWORD *)(v15 + 8);
    if (*(_DWORD *)(result + 10984) == 3)
    {
      v18 = *(unsigned int *)(result + 10848);
      v17 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v18 - 8);
      *(_DWORD *)(result + 10848) = v18 - 1;
    }
    else
    {
      result = sub_22E7B94C8(result, *(_QWORD *)(v15 + 16));
      v17 = result;
    }
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a3 + 8) = v17;
  return result;
}

uint64_t sub_22F2B1A1C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a3 + 16) = sub_22E77BAB4(v6, v7, v9 >> 1);
  *(_QWORD *)(a3 + 8) = sub_22E7818B4(*a1);
  result = *(_QWORD *)(*a1 + 8);
  if (*(_DWORD *)(result + 10984) == 3)
  {
    v12 = *(unsigned int *)(result + 10848);
    v11 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v12 - 8);
    *(_DWORD *)(result + 10848) = v12 - 1;
  }
  else
  {
    result = sub_22E7B94C8(result, *(_QWORD *)(*a1 + 16));
    v11 = result;
  }
  *(_QWORD *)a3 = v11;
  return result;
}

uint64_t sub_22F2B1AB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  *(_QWORD *)(a3 + 4) = sub_22E7818B4(*a1);
  result = *(_QWORD *)(*a1 + 8);
  if (*(_DWORD *)(result + 10984) == 3)
  {
    v15 = *(unsigned int *)(result + 10848);
    v16 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v15 - 8);
    *(_DWORD *)(result + 10848) = v15 - 1;
    *(_QWORD *)(a3 + 16) = v16;
    goto LABEL_6;
  }
  v11 = sub_22E7B94C8(result, *(_QWORD *)(*a1 + 16));
  v12 = *a1;
  result = *(_QWORD *)(*a1 + 8);
  v13 = *(_DWORD *)(result + 10984);
  *(_QWORD *)(a3 + 16) = v11;
  if (v13 == 3)
  {
LABEL_6:
    v17 = *(unsigned int *)(result + 10848);
    v14 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v17 - 8);
    *(_DWORD *)(result + 10848) = v17 - 1;
    goto LABEL_4;
  }
  result = sub_22E7B94C8(result, *(_QWORD *)(v12 + 16));
  v14 = result;
LABEL_4:
  *(_QWORD *)(a3 + 24) = v14;
  return result;
}

uint64_t sub_22F2B1B84(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  a3[1] = sub_22E77BAB4(v11, v12, v9 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v15, v16, v9 >> 1);
  a3[2] = result;
  return result;
}

_QWORD *sub_22F2B1C1C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a3 + 4) = sub_22E77BAB4(v11, v12, v9 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a3 + 8) = sub_22E77BAB4(v15, v16, v9 >> 1);
  result = sub_22E782300(*a1);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

void sub_22F2B1CC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)a3 = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12))
  {
    *(_QWORD *)(a3 + 8) = sub_22E7823B4(v11);
    *(_QWORD *)(a3 + 16) = v16;
    v17 = *a1;
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = *(_QWORD *)(*a1 + 16);
    v20 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v17 + 24) = v20 + 1;
    HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
    LODWORD(v21) = HIDWORD(v21);
    *(_DWORD *)(a3 + 24) = sub_22E77BAB4(v18, v19, v21 >> 1);
    v22 = *a1;
    v23 = *(_QWORD *)(*a1 + 8);
    v24 = *(_QWORD *)(*a1 + 16);
    v25 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v22 + 24) = v25 + 1;
    HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
    LODWORD(v21) = HIDWORD(v21);
    *(_DWORD *)(a3 + 28) = sub_22E77BAB4(v23, v24, v21 >> 1);
    v26 = *(_QWORD **)(*a1 + 8);
    v27 = sub_22E779F8C((uint64_t)v26, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    *(_QWORD *)(a3 + 32) = sub_22E77F870(v26, v27);
    v28 = *a1;
    v29 = *(_QWORD *)(*a1 + 8);
    v30 = *(_QWORD *)(*a1 + 16);
    v31 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v28 + 24) = v31 + 1;
    HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v31);
    LODWORD(v21) = HIDWORD(v21);
    *(_DWORD *)(a3 + 40) = sub_22E77BAB4(v29, v30, v21 >> 1);
    v32 = *a1;
    v33 = *(_QWORD *)(*a1 + 8);
    v34 = *(_QWORD *)(*a1 + 16);
    v35 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v32 + 24) = v35 + 1;
    HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 8 * v35);
    LODWORD(v21) = HIDWORD(v21);
    *(_DWORD *)(a3 + 44) = sub_22E77BAB4(v33, v34, v21 >> 1);
    v36 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v36)
    {
      v37 = (int *)(a2 + 48);
      v38 = (_QWORD *)(a3 + 56);
      do
      {
        v39 = *v37;
        v37 += 6;
        sub_22E781A88(*a1, v39);
        *v38++ = v40;
        --v36;
      }
      while (v36);
    }
  }
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  v15 = *(_QWORD *)(v13 + 32);
  if (*(_QWORD *)(v15 + 8 * v14))
  {
    v41 = *(_QWORD *)(v13 + 8);
    v42 = *(_QWORD *)(v13 + 16);
    *(_DWORD *)(v13 + 24) = v14 + 2;
    HIDWORD(v43) = *(_QWORD *)(v15 + 8 * (v14 + 1));
    LODWORD(v43) = HIDWORD(v43);
    *(_DWORD *)(a3 + 48) = sub_22E77BAB4(v41, v42, v43 >> 1);
  }
}

uint64_t sub_22F2B1E70(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  *a3 = sub_22E77BAB4(v6, v7, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v11, v12, v9 >> 1);
  a3[1] = result;
  return result;
}

void sub_22F2B1EE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)a3 = sub_22E77BAB4(v7, v8, v10 >> 1);
  if (sub_22E7823B4(*a1))
    v12 = v11;
  else
    v12 = 0;
  *(_QWORD *)(a3 + 8) = v12;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a3 + 20) = sub_22E77BAB4(v14, v15, v17 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a3 + 16) = sub_22E77BAB4(v19, v20, v17 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a3 + 24) = sub_22E77BAB4(v23, v24, v17 >> 1);
  v26 = *a1;
  v27 = *(_QWORD *)(*a1 + 8);
  v28 = *(_QWORD *)(*a1 + 16);
  v29 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v26 + 24) = v29 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v29);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a3 + 28) = sub_22E77BAB4(v27, v28, v17 >> 1);
  v30 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v30)
  {
    v31 = (int *)(a2 + 48);
    v32 = (_QWORD *)(a3 + 32);
    do
    {
      v33 = *v31;
      v31 += 6;
      sub_22E781A88(*a1, v33);
      *v32++ = v34;
      --v30;
    }
    while (v30);
  }
}

uint64_t sub_22F2B2010(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if ((*(_BYTE *)(a2 + 32) & 0x3F) != 0)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)(*(_QWORD *)result + 8);
    v8 = *(_QWORD *)(v6 + 16);
    v9 = *(unsigned int *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v9 + 1;
    HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
    LODWORD(v10) = HIDWORD(v10);
    a3[1] = sub_22E77BAB4(v7, v8, v10 >> 1);
    v11 = *(_QWORD *)v5;
    v12 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    v13 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    v14 = *(unsigned int *)(*(_QWORD *)v5 + 24);
    *(_DWORD *)(v11 + 24) = v14 + 1;
    HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
    LODWORD(v10) = HIDWORD(v10);
    result = sub_22E77BAB4(v12, v13, v10 >> 1);
    a3[2] = result;
    v15 = *(_BYTE *)(a2 + 32);
    v16 = v15 & 0x3F;
    if ((v15 & 0x3F) != 0)
    {
      v17 = a3 + 3;
      do
      {
        v18 = *(_QWORD *)v5;
        v19 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v20 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        v21 = *(unsigned int *)(*(_QWORD *)v5 + 24);
        *(_DWORD *)(v18 + 24) = v21 + 1;
        HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
        LODWORD(v22) = HIDWORD(v22);
        result = sub_22E77BAB4(v19, v20, v22 >> 1);
        *v17++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t sub_22F2B20D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 24);
  v8 = *(_QWORD *)(*a1 + 32);
  *(_BYTE *)(a3 + 16) = *(_QWORD *)(v8 + 8 * v7) != 0;
  v9 = *(_QWORD *)(v6 + 8);
  v10 = *(_QWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  HIDWORD(v11) = *(_QWORD *)(v8 + 8 * (v7 + 1));
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)a3 = sub_22E77BAB4(v9, v10, v11 >> 1);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a3 + 4) = sub_22E77BAB4(v13, v14, v11 >> 1);
  v16 = (*(_DWORD *)(a2 + 16) >> 19) & 0x7F;
  if ((_DWORD)v16)
  {
    v17 = (_QWORD *)(a3 + 24);
    do
    {
      *v17++ = sub_22E782300(*a1);
      --v16;
    }
    while (v16);
  }
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v22) = HIDWORD(v22);
  *(_DWORD *)(a3 + 8) = sub_22E77BAB4(v19, v20, v22 >> 1);
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 8);
  v25 = *(_QWORD *)(*a1 + 16);
  v26 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v23 + 24) = v26 + 1;
  HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26);
  LODWORD(v22) = HIDWORD(v22);
  result = sub_22E77BAB4(v24, v25, v22 >> 1);
  *(_DWORD *)(a3 + 12) = result;
  v28 = *(_DWORD *)(a2 + 16) >> 26;
  if (v28)
  {
    v29 = a3 + 24;
    do
    {
      v30 = *a1;
      v31 = *(_QWORD *)(*a1 + 8);
      v32 = *(_QWORD *)(*a1 + 16);
      v33 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v30 + 24) = v33 + 1;
      HIDWORD(v34) = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8 * v33);
      LODWORD(v34) = HIDWORD(v34);
      result = sub_22E77BAB4(v31, v32, v34 >> 1);
      *(_DWORD *)(v29 + 8 * ((*(_QWORD *)(a2 + 16) >> 19) & 0x7FLL)) = result;
      v29 += 4;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_22F2B2238(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
  v6 = (unsigned int *)(a1 + 24);
  v5 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v5 + 1;
  v8 = *(_QWORD *)(v2 + 8 * v5);
  v43 = v4 + 2032;
  v44 = v4;
  result = sub_22E3CD3D4(v4 + 2032, 8 * v8, 3);
  v8 = v8;
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)result;
    v42 = result;
    do
    {
      v10 = *v6;
      *v6 = v10 + 1;
      v11 = *(_QWORD *)(*v3 + 8 * v10);
      if ((_DWORD)v11 == 2)
      {
        v12 = *(_QWORD **)(a1 + 8);
        v13 = sub_22E779F8C((uint64_t)v12, *(_QWORD *)(a1 + 16), (uint64_t)v3, v6);
        v14 = sub_22E77F870(v12, v13);
        v39 = 0;
      }
      else
      {
        switch((_DWORD)v11)
        {
          case 0:
            v41 = sub_22E782300(a1);
            v39 = 0;
            v14 = 0;
            v34 = *(unsigned int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v34 + 1;
            v40 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v34) != 0;
            goto LABEL_6;
          case 1:
            v41 = sub_22E782300(a1);
            v39 = 0;
            v14 = 0;
            v40 = 0;
            goto LABEL_6;
          case 3:
            v37 = *(_QWORD **)(a1 + 8);
            v38 = sub_22E779F8C((uint64_t)v37, *(_QWORD *)(a1 + 16), (uint64_t)v3, v6);
            v39 = sub_22E77F870(v37, v38);
            break;
          default:
            v39 = 0;
            break;
        }
        v14 = 0;
      }
      v40 = 0;
      v41 = 0;
LABEL_6:
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
      v17 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v17 + 1;
      HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v17);
      LODWORD(v18) = HIDWORD(v18);
      v19 = sub_22E77BAB4(v15, v16, v18 >> 1);
      v20 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v20 + 10984) == 3)
      {
        v35 = *(unsigned int *)(v20 + 10848);
        v45 = *(_QWORD *)(*(_QWORD *)(v20 + 10840) + 8 * v35 - 8);
        *(_DWORD *)(v20 + 10848) = v35 - 1;
      }
      else
      {
        v45 = sub_22E7B94C8(v20, *(_QWORD *)(a1 + 16));
        v20 = *(_QWORD *)(a1 + 8);
      }
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v22 + 1;
      HIDWORD(v23) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v22);
      LODWORD(v23) = HIDWORD(v23);
      v24 = sub_22E77BAB4(v20, v21, v23 >> 1);
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v27 + 1;
      HIDWORD(v23) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v27);
      LODWORD(v23) = HIDWORD(v23);
      v28 = sub_22E77BAB4(v25, v26, v23 >> 1);
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 == 1)
        {
          v36 = sub_22E3CD3D4(v43, 32, 3);
          v30 = sub_22F3B21A4(v36, v44, (uint64_t)v41, v24, v45, v28);
        }
        else
        {
          v29 = sub_22E3CD3D4(v43, 32, 3);
          if (v14)
            v30 = sub_22EFD7AC8(v29, v44, v14, v19, v24, v45, v28);
          else
            v30 = sub_22F3B2188(v29, v44, v39, v19, v24, v45, v28);
        }
      }
      else
      {
        v33 = sub_22E3CD3D4(v43, 32, 3);
        v30 = sub_22F3B2164(v33, v44, (uint64_t)v41, v40, v24, v45, v28, v19);
      }
      v31 = *v6;
      *v6 = v31 + 1;
      if (*(_QWORD *)(*v3 + 8 * v31))
      {
        v32 = *(_QWORD *)(*v3 + 8 * (v31 + 1));
        *v6 = v31 + 2;
        *(_WORD *)(v30 + 28) = *(_WORD *)(v30 + 28) & 3 | (8 * v32) | 4;
      }
      *v9++ = v30;
      --v8;
      result = v42;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22F2B2540(uint64_t a1, unint64_t a2)
{
  return sub_22E782FBC(a1 - 24, a2);
}

int *sub_22F2B2548(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int *v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;

  if (a2)
  {
    v3 = a2 - 1;
    v4 = (int *)(a1 + 32 * ((a2 - 1) & a3));
    v5 = *v4;
    if (*v4 == a3)
      return v4;
    v7 = 1;
    LODWORD(v8) = v3 & a3;
    while (v5)
    {
      v9 = v8 + v7++;
      v8 = v9 & v3;
      v5 = *(_DWORD *)(a1 + 32 * v8);
      if (v5 == a3)
        return (int *)(a1 + 32 * v8);
    }
  }
  v8 = a2;
  return (int *)(a1 + 32 * v8);
}

uint64_t sub_22F2B25A4(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  return sub_22E783B14(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_22F2B25B0(uint64_t a1, _WORD *a2)
{
  return sub_22E7845D8(a1 - 24, a2);
}

uint64_t sub_22F2B25B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 136) = a2;
  if (a2)
    sub_22E7B3158(a1);
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a1);
  return result;
}

uint64_t sub_22F2B2604(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 - 24;
  *(_QWORD *)(a1 + 112) = a2;
  if (a2)
    sub_22E7B3158(a1 - 24);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v3);
  return result;
}

uint64_t sub_22F2B2654(uint64_t a1)
{
  FILE **v2;
  char *v3;
  char *v4;
  int v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v44;
  unint64_t v45;

  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  fwrite("*** AST File Statistics:\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v3 = *(char **)(a1 + 2688);
  v4 = *(char **)(a1 + 2680);
  v5 = 0;
  v6 = v3 - v4;
  if (v3 != v4)
  {
    v7 = *(char **)(a1 + 2680);
    do
    {
      v8 = *(_QWORD *)v7;
      v7 += 8;
      if (!v8)
        ++v5;
    }
    while (v7 != v3);
  }
  v9 = *(char **)(a1 + 2792);
  v10 = *(char **)(a1 + 2784);
  v11 = 0;
  v12 = v9 - v10;
  while (v10 != v9)
  {
    v13 = *(_QWORD *)v10;
    v10 += 8;
    if (!v13)
      ++v11;
  }
  v14 = *(char **)(a1 + 3976);
  v15 = *(char **)(a1 + 3968);
  v44 = v14 - v15;
  v16 = 0;
  while (v15 != v14)
  {
    v17 = *(_QWORD *)v15;
    v15 += 8;
    if (!v17)
      ++v16;
  }
  v18 = *(char **)(a1 + 4080);
  v19 = *(char **)(a1 + 4072);
  v45 = v18 - v19;
  v20 = 0;
  while (v19 != v18)
  {
    v21 = *(_QWORD *)v19;
    v19 += 8;
    if (!v21)
      ++v20;
  }
  v22 = *(unsigned int *)(a1 + 4456);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = *(_QWORD **)(a1 + 4448);
    v25 = 8 * v22;
    do
    {
      if (!*v24++)
        ++v23;
      v25 -= 8;
    }
    while (v25);
  }
  else
  {
    v23 = 0;
  }
  v27 = *(_DWORD *)(a1 + 7372);
  if (v27)
  {
    fprintf(*v2, "  %u/%u source location entries read (%f%%)\n", *(_DWORD *)(a1 + 7368), v27, (float)((float)((float)*(unsigned int *)(a1 + 7368) / (float)v27) * 100.0));
    v4 = *(char **)(a1 + 2680);
    v3 = *(char **)(a1 + 2688);
  }
  if (v4 != v3)
    fprintf(*v2, "  %u/%u types read (%f%%)\n", (v6 >> 3) - v5, (v3 - v4) >> 3, (float)((float)((float)((v6 >> 3) - v5) / (float)(unint64_t)((v3 - v4) >> 3)) * 100.0));
  v28 = *(_QWORD *)(a1 + 2784);
  v29 = *(_QWORD *)(a1 + 2792);
  if (v28 != v29)
    fprintf(*v2, "  %u/%u declarations read (%f%%)\n", (v12 >> 3) - v11, (v29 - v28) >> 3, (float)((float)((float)((v12 >> 3) - v11) / (float)(unint64_t)((v29 - v28) >> 3)) * 100.0));
  v30 = *(_QWORD *)(a1 + 3968);
  v31 = *(_QWORD *)(a1 + 3976);
  if (v30 != v31)
    fprintf(*v2, "  %u/%u identifiers read (%f%%)\n", (v44 >> 3) - v16, (v31 - v30) >> 3, (float)((float)((float)((v44 >> 3) - v16) / (float)(unint64_t)((v31 - v30) >> 3)) * 100.0));
  v32 = *(_QWORD *)(a1 + 4072);
  v33 = *(_QWORD *)(a1 + 4080);
  if (v32 != v33)
    fprintf(*v2, "  %u/%u macros read (%f%%)\n", (v45 >> 3) - v20, (v33 - v32) >> 3, (float)((float)((float)((v45 >> 3) - v20) / (float)(unint64_t)((v33 - v32) >> 3)) * 100.0));
  v34 = *(_DWORD *)(a1 + 4456);
  if (v34)
    fprintf(*v2, "  %u/%u selectors read (%f%%)\n", v22 - v23, v34, (float)((float)((float)(v22 - v23) / (float)v34) * 100.0));
  v35 = *(_DWORD *)(a1 + 7380);
  if (v35)
    fprintf(*v2, "  %u/%u statements read (%f%%)\n", *(_DWORD *)(a1 + 7376), v35, (float)((float)((float)*(unsigned int *)(a1 + 7376) / (float)v35) * 100.0));
  v36 = *(_DWORD *)(a1 + 7388);
  if (v36)
    fprintf(*v2, "  %u/%u macros read (%f%%)\n", *(_DWORD *)(a1 + 7384), v36, (float)((float)((float)*(unsigned int *)(a1 + 7384) / (float)v36) * 100.0));
  v37 = *(_DWORD *)(a1 + 7432);
  if (v37)
    fprintf(*v2, "  %u/%u lexical declcontexts read (%f%%)\n", *(_DWORD *)(a1 + 7428), v37, (float)((float)((float)*(unsigned int *)(a1 + 7428) / (float)v37) * 100.0));
  v38 = *(_DWORD *)(a1 + 7440);
  if (v38)
    fprintf(*v2, "  %u/%u visible declcontexts read (%f%%)\n", *(_DWORD *)(a1 + 7436), v38, (float)((float)((float)*(unsigned int *)(a1 + 7436) / (float)v38) * 100.0));
  v39 = *(_DWORD *)(a1 + 7424);
  if (v39)
    fprintf(*v2, "  %u/%u method pool entries read (%f%%)\n", *(_DWORD *)(a1 + 7404), v39, (float)((float)((float)*(unsigned int *)(a1 + 7404) / (float)v39) * 100.0));
  v40 = *(_DWORD *)(a1 + 7408);
  if (v40)
    fprintf(*v2, "  %u/%u method pool lookups succeeded (%f%%)\n", *(_DWORD *)(a1 + 7412), v40, (float)((float)*(unsigned int *)(a1 + 7412) / (float)v40) * 100.0);
  v41 = *(_DWORD *)(a1 + 7416);
  if (v41)
    fprintf(*v2, "  %u/%u method pool table lookups succeeded (%f%%)\n", *(_DWORD *)(a1 + 7420), v41, (float)((float)*(unsigned int *)(a1 + 7420) / (float)v41) * 100.0);
  v42 = *(_DWORD *)(a1 + 7396);
  if (v42)
    fprintf(*v2, "  %u / %u identifier table lookups succeeded (%f%%)\n", *(_DWORD *)(a1 + 7396), *(_DWORD *)(a1 + 7392), (double)v42 * 100.0 / (double)*(unsigned int *)(a1 + 7392));
  if (*(_QWORD *)(a1 + 512))
  {
    fputc(10, *v2);
    sub_22F2DF564(*(_QWORD *)(a1 + 512));
  }
  fputc(10, *v2);
  sub_22F2B2BA0(a1);
  return fputc(10, *v2);
}

void *sub_22F2B2BA0(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  void *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  sub_22E47DAC0(v2, "*** PCH/ModuleFile Remappings:\n");
  sub_22E784B50("Global bit offset map", 0x15uLL, (uint64_t *)(a1 + 520));
  sub_22E784D28("Global source location entry map", 0x20uLL, (uint64_t *)(a1 + 600));
  sub_22E784D28("Global type map", 0xFuLL, (uint64_t *)(a1 + 2704));
  sub_22E784D28("Global declaration map", 0x16uLL, (uint64_t *)(a1 + 2808));
  sub_22E784D28("Global identifier map", 0x15uLL, (uint64_t *)(a1 + 3992));
  sub_22E784D28("Global macro map", 0x10uLL, (uint64_t *)(a1 + 4120));
  sub_22E784D28("Global submodule map", 0x14uLL, (uint64_t *)(a1 + 4232));
  sub_22E784D28("Global selector map", 0x13uLL, (uint64_t *)(a1 + 4592));
  v3 = (llvm *)sub_22E784D28("Global preprocessed entity map", 0x1EuLL, (uint64_t *)(a1 + 4768));
  v4 = (llvm::raw_ostream *)llvm::errs(v3);
  result = sub_22E47DAC0(v4, "\n*** PCH/Modules Loaded:");
  v6 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 144);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = sub_22F2DFA38(v9);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22F2B2CC0(uint64_t a1)
{
  return sub_22F2B2654(a1 - 24);
}

uint64_t sub_22F2B2CC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(unsigned int *)(result + 152);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 144);
    v5 = a2 + 1;
    v6 = 8 * v2;
    while (1)
    {
      result = *(_QWORD *)(*(_QWORD *)v4 + 344);
      if (result)
      {
        v8 = *(_QWORD *)(result + 8);
        v7 = *(_QWORD *)(result + 16);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
        v9 = a2;
        if (!(_DWORD)result)
          goto LABEL_7;
        if ((_DWORD)result == 1)
          break;
      }
LABEL_8:
      v4 += 8;
      v6 -= 8;
      if (!v6)
        return result;
    }
    v9 = v5;
LABEL_7:
    *v9 += v7 - v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_22F2B2D54(uint64_t a1, _QWORD *a2)
{
  return sub_22F2B2CC8(a1 - 24, a2);
}

void sub_22F2B2D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)(a1 + 112) = a2;
  sub_22F308A3C(a2, a1 + 24);
  v3 = *(unsigned int *)(a1 + 11048);
  if ((_DWORD)v3)
  {
    v5 = *(unsigned int **)(a1 + 11040);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      v5 += 2;
      v8 = (uint64_t *)sub_22E77F870((_QWORD *)a1, v7);
      sub_22F2B2E34(a1, v8, v8[5]);
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 11048) = 0;
  v4 = *(_QWORD *)(a1 + 112);
  if (*(_DWORD *)(a1 + 6472))
  {
    v9 = __ROR8__(**(_QWORD **)(a1 + 6464), 32);
    sub_22E51A8D0(&v10, *(_QWORD *)(v4 + 72));
    v4 = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(v4 + 56) = v10 & ~HIDWORD(v9) | HIDWORD(v9) & v9;
  }
  sub_22F2B2F48((uint64_t *)(v4 + 24), (_QWORD *)(a1 + 6824));
  sub_22E77BB44(a1);
}

unint64_t sub_22F2B2E34(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;

  v16 = a2;
  if ((a3 & 7) == 0 && (a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v10 = sub_22F2B4738(a1 + 7512, a3 & 0xFFFFFFFFFFFFFFF8);
    if (v10 != *(_QWORD *)(a1 + 7776) + 40 * *(unsigned int *)(a1 + 7784))
    {
      v11 = v10;
      v12 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(v10 + 8);
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          sub_22E8CEA58(*(_QWORD *)(a1 + 112) + 3320, v15);
          v14 -= 8;
        }
        while (v14);
      }
      *(_DWORD *)(v11 + 16) = 0;
    }
  }
  result = sub_22F30535C(*(_QWORD *)(a1 + 112) + 3320, (uint64_t)a2, a3);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(v7 + 3344);
  if ((_DWORD)result)
  {
    if (v8)
      return sub_22E3BA850(v8 + 72, a2);
  }
  else if (v8)
  {
    v9 = sub_22E8CEB58(v7 + 3320, a3);
    result = sub_22E794410(v9, &v16);
    if (result)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 3344);
      return sub_22E3BA850(v8 + 72, a2);
    }
  }
  return result;
}

uint64_t *sub_22F2B2F48(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  sub_22E78E0A8((llvm::StringMapImpl *)&v6, a2);
  v3 = *a1;
  *a1 = v6;
  v6 = v3;
  v4 = a1[1];
  a1[1] = v7;
  v7 = v4;
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v8;
  v8 = v3;
  sub_22E78E1D0((uint64_t)&v6);
  return a1;
}

void sub_22F2B2FB0(uint64_t a1, uint64_t a2)
{
  sub_22F2B2D5C(a1 - 24, a2);
}

uint64_t sub_22F2B2FB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22E792DC0(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 32 * v6;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 20) = a5;
  *(_DWORD *)(v7 + 24) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22F2B2FEC(uint64_t a1, __int128 *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22E792E28(a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)a1 + 32 * v5;
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  *(_OWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 16) = v7;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 28) = v9;
  v10 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v10;
  return *(_QWORD *)a1 + 32 * v10 - 32;
}

uint64_t sub_22F2B303C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22E792EA0(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 32 * v6;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 24) = a5;
  *(_DWORD *)(v7 + 28) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22F2B3070(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  unsigned __int16 **v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_DWORD *)(a1 + 36);
  if (v1 == *(_DWORD *)(a1 + 60))
  {
    v2 = *(unsigned int *)(a1 + 16);
    while (v2)
    {
      *(_DWORD *)(a1 + 16) = --v2;
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 8 * v2);
      if (!*(_BYTE *)(a1 + 72)
        || ((v4 = *(_DWORD *)(v3 + 4), v5 = v4 > 5, v6 = (1 << v4) & 0x23, !v5) ? (v7 = v6 == 0) : (v7 = 1), v8 = v1, v7))
      {
        v1 = 0;
        v9 = *(_QWORD *)(v3 + 1736);
        v8 = *(_DWORD *)(v9 + 4);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 48);
        *(_DWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 36) = v8;
        *(_QWORD *)(a1 + 40) = v9 + 24;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
      if (v8 != v1)
        goto LABEL_12;
    }
    return 0;
  }
  else
  {
LABEL_12:
    v10 = (unsigned __int16 **)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 24) + 2 * (*(_DWORD *)(a1 + 32) == 0) + 4;
    sub_22E78CDE0(&v13);
    sub_22E78CDE0(&v13);
    v11 = v13;
    sub_22E792C88(v10);
  }
  return v11;
}

_QWORD *sub_22F2B317C(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = sub_22E76CA14(a1);
  v3 = operator new();
  v4 = v3;
  *(_QWORD *)v3 = &off_24FA71A60;
  *(_QWORD *)(v3 + 8) = a1;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 152);
  v5 = (_OWORD *)(v3 + 24);
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)(v3 + 72) = 0;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *v5 = 0u;
  }
  else
  {
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *v5 = 0u;
    *(_BYTE *)(v3 + 72) = 1;
    v6 = sub_22F2DF6CC(*(_QWORD *)(a1 + 512));
    v7 = (_QWORD *)operator new();
    *v7 = &off_24FA721B0;
    v7[1] = v4;
    v7[2] = v6;
    return v7;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_22F2B3244(uint64_t a1)
{
  return sub_22F2B317C(a1 - 40);
}

void sub_22F2B324C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD v17[2];
  _QWORD v18[3];
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v3 = sub_22F2BDD10((uint64_t *)(a1 + 4672), &v19);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = *(_DWORD *)(a1 + 36);
  *((_BYTE *)sub_22F2BC268(a1 + 4696, &v19) + 8) = 0;
  ++*(_DWORD *)(a1 + 7408);
  v20[0] = a1;
  v20[1] = v19;
  v21 = v4;
  v22 = 0;
  v23 = 0;
  v24 = v26;
  v25 = 0x400000000;
  v27 = v29;
  v28 = 0x400000000;
  sub_22E809E0C(a1 + 144, (unsigned int (*)(uint64_t, unsigned int *))sub_22F2BDF90, (uint64_t)v20, 0);
  if (v25 | v28)
  {
    ++*(_DWORD *)(a1 + 7412);
    v5 = *(_QWORD *)(a1 + 112);
    if (v5)
    {
      v16 = v19;
      memset(v17, 0, sizeof(v17));
      sub_22F2BB6A8(v5 + 8560, &v16, v17, (uint64_t)v18);
      v6 = (int8x16_t *)(v18[0] + 8);
      v7.i64[0] = 4 * v23;
      v7.i64[1] = 2 * v22;
      v8 = vorrq_s8(vandq_s8(*(int8x16_t *)(v18[0] + 8), (int8x16_t)xmmword_22F45EDF0), v7);
      v9 = (int8x16_t *)(v18[0] + 24);
      v10 = *(int8x16_t *)(v18[0] + 24);
      *(int8x16_t *)(v18[0] + 8) = v8;
      v11.i64[0] = 4 * HIBYTE(v23);
      v11.i64[1] = 2 * HIDWORD(v22);
      *v9 = vorrq_s8(vandq_s8(v10, (int8x16_t)xmmword_22F45EDF0), v11);
      if ((_DWORD)v25)
      {
        v12 = 8 * v25;
        v13 = (char *)v24 - 8;
        do
        {
          sub_22EAFAB98(v5, v6, *(_QWORD *)&v13[v12]);
          v12 -= 8;
        }
        while (v12);
      }
      if ((_DWORD)v28)
      {
        v14 = 8 * v28;
        v15 = (char *)v27 - 8;
        do
        {
          sub_22EAFAB98(v5, v9, *(_QWORD *)&v15[v14]);
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  if (v27 != v29)
    free(v27);
  if (v24 != v26)
    free(v24);
}

void sub_22F2B3474(uint64_t a1, uint64_t a2)
{
  sub_22F2B324C(a1 - 24, a2);
}

_QWORD *sub_22F2B347C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F2BC268(a1 + 4696, &v5);
  if (*((_BYTE *)result + 8))
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, a2);
  return result;
}

_QWORD *sub_22F2B34E0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F2BC268(a1 + 4672, &v5);
  if (*((_BYTE *)result + 8))
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 24) + 208))(a1 - 24, a2);
  return result;
}

uint64_t sub_22F2B3544(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(result + 6912);
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)result;
    v5 = 0;
    v6 = 4 * v2;
    do
    {
      result = sub_22E77F870(v4, *(unsigned int *)(v4[863] + v5));
      if (result)
      {
        v7 = result;
        if ((*(_DWORD *)(result + 28) & 0x7F) == 0x10)
        {
          v8 = *(unsigned int *)(a2 + 8);
          if (v8 >= *(unsigned int *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v8 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v7;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      v5 += 4;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22F2B35F8(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3544(a1 - 24, a2);
}

uint64_t sub_22F2B3600(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v2 = *(_DWORD *)(result + 6944);
  if (v2)
  {
    v3 = 0;
    do
    {
      v7 = v2;
      v8 = a2;
      v9 = result;
      v4 = v3 + 1;
      v5 = sub_22E77F870((_QWORD *)result, *(unsigned int *)(*(_QWORD *)(result + 6936) + 4 * v3));
      v3 += 2;
      v6 = *(unsigned int *)(*(_QWORD *)(v9 + 6936) + 4 * v4);
      *(_QWORD *)&v10 = v5;
      *((_QWORD *)&v10 + 1) = v6;
      sub_22E785624(v8, &v10);
      v2 = v7;
      a2 = v8;
      result = v9;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_22F2B3678(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3600(a1 - 24, a2);
}

uint64_t sub_22F2B3680(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_DWORD *)(result + 6992);
  if (v2)
  {
    v3 = 0;
    do
    {
      v11 = v2;
      v13 = a2;
      v14 = 0;
      v4 = result;
      v14 = sub_22E77F870((_QWORD *)result, *(_QWORD *)(*(_QWORD *)(result + 6984) + 8 * v3));
      v12 = v4;
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 6984) + 8 * (v3 + 1));
      for (v3 += 2; v5; --v5)
      {
        v6 = *(_QWORD *)(v12 + 6984);
        v7 = *(unsigned int *)(v6 + 8 * v3);
        v8 = *(_QWORD *)(v6 + 8 * (v3 + 1)) != 0;
        v9 = sub_22F2B377C(v13, &v14);
        v10 = *(unsigned int *)(v9 + 8);
        if (v10 >= *(unsigned int *)(v9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *(unsigned int *)(v9 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v7 | (v8 << 32);
        ++*(_DWORD *)(v9 + 8);
        v3 += 2;
      }
      v2 = v11;
      result = v12;
      a2 = v13;
    }
    while (v3 != v11);
  }
  return result;
}

uint64_t sub_22F2B377C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = 0;
  sub_22F2611B4(a1, &v10, &v11, (uint64_t)&v8);
  v4 = v8;
  if (v9)
  {
    v12 = v14;
    v13 = 0x400000000;
    v15 = *a2;
    v16 = v18;
    v17 = 0x400000000;
    sub_22E793150(a1 + 24, (uint64_t)&v15);
    if (v16 != v18)
      free(v16);
    if (v12 != v14)
      free(v12);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = -1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v8 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 56 * v6 + 8;
}

uint64_t sub_22F2B3894(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3680(a1 - 24, a2);
}

uint64_t sub_22F2B389C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(unsigned int *)(result + 4936);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 4 * v2;
    do
    {
      v5 = a2;
      v6 = result;
      v7 = sub_22E77F870((_QWORD *)result, *(unsigned int *)(*(_QWORD *)(result + 4928) + v3));
      if (v7)
      {
        v8 = v7;
        if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 60 <= 6)
        {
          v9 = *(unsigned int *)(v5 + 8);
          if (v9 >= *(unsigned int *)(v5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = *(unsigned int *)(v5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = v8;
          ++*(_DWORD *)(v5 + 8);
        }
      }
      v3 += 4;
      result = v6;
      a2 = v5;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(result + 4936) = 0;
  return result;
}

uint64_t sub_22F2B3968(uint64_t a1, uint64_t a2)
{
  return sub_22F2B389C(a1 - 24, a2);
}

uint64_t sub_22F2B3970(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(unsigned int *)(result + 5560);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 4 * v2;
    do
    {
      v5 = a2;
      v6 = result;
      v7 = sub_22E77F870((_QWORD *)result, *(unsigned int *)(*(_QWORD *)(result + 5552) + v3));
      if (v7)
      {
        v8 = v7;
        if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 <= 0x11)
        {
          v9 = *(unsigned int *)(v5 + 8);
          if (v9 >= *(unsigned int *)(v5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = *(unsigned int *)(v5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = v8;
          ++*(_DWORD *)(v5 + 8);
        }
      }
      v3 += 4;
      result = v6;
      a2 = v5;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(result + 5560) = 0;
  return result;
}

uint64_t sub_22F2B3A3C(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3970(a1 - 24, a2);
}

uint64_t sub_22F2B3A44(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(unsigned int *)(result + 5640);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 4 * v2;
    do
    {
      v5 = a2;
      v6 = result;
      v7 = sub_22E77F870((_QWORD *)result, *(unsigned int *)(*(_QWORD *)(result + 5632) + v3));
      if (v7)
      {
        v8 = v7;
        if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x37)
        {
          v9 = *(unsigned int *)(v5 + 8);
          if (v9 >= *(unsigned int *)(v5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = *(unsigned int *)(v5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v9) = v8;
          ++*(_DWORD *)(v5 + 8);
        }
      }
      v3 += 4;
      result = v6;
      a2 = v5;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(result + 5640) = 0;
  return result;
}

uint64_t sub_22F2B3B0C(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3A44(a1 - 24, a2);
}

uint64_t sub_22F2B3B14(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 6248);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 4 * v2;
    do
    {
      v7 = a2;
      v8 = 0;
      v5 = result;
      v6 = sub_22E77F870((_QWORD *)result, *(unsigned int *)(*(_QWORD *)(result + 6240) + v3));
      if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 39 <= 2)
      {
        v8 = v6;
        sub_22F2B3BA8(v7, &v8);
      }
      v3 += 4;
      result = v5;
      a2 = v7;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(result + 6248) = 0;
  return result;
}

BOOL sub_22F2B3BA8(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_22F285E70(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

uint64_t sub_22F2B3C34(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3B14(a1 - 24, a2);
}

_DWORD *sub_22F2B3C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(a1 + 7240);
  if ((_DWORD)v3)
  {
    v5 = *(unsigned int **)(a1 + 7232);
    v6 = 4 * v3;
    do
    {
      v8 = a2;
      v7 = *v5;
      v9 = 0;
      v9 = sub_22E77F870((_QWORD *)a1, v7);
      if (v9)
        sub_22F2B3BA8(v8, &v9);
      ++v5;
      v6 -= 4;
      a2 = v8;
    }
    while (v6);
  }
  result = sub_22F2BE264((_DWORD *)(a1 + 7208));
  *(_DWORD *)(a1 + 7240) = 0;
  return result;
}

_DWORD *sub_22F2B3CC8(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3C3C(a1 - 24, a2);
}

uint64_t sub_22F2B3CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  if (!(_DWORD)a2)
    return 0;
  if (*(_DWORD *)(a1 + 4456) >= a2)
  {
    v6 = (a2 - 1);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 4448) + 8 * v6);
    if (!v4)
    {
      v7 = *(_DWORD **)(a1 + 4592);
      v8 = *(unsigned int *)(a1 + 4600);
      if ((_DWORD)v8)
      {
        v10 = *(unsigned int *)(a1 + 4600);
        v9 = *(_DWORD **)(a1 + 4592);
        do
        {
          v11 = v10 >> 1;
          v12 = &v9[4 * (v10 >> 1)];
          v14 = *v12;
          v13 = v12 + 4;
          v10 += ~(v10 >> 1);
          if (v14 > a2)
            v10 = v11;
          else
            v9 = v13;
        }
        while (v10);
      }
      else
      {
        v9 = *(_DWORD **)(a1 + 4592);
      }
      v15 = &v7[4 * v8];
      if (v9 == v7)
        v16 = v15;
      else
        v16 = v9 - 4;
      v17 = *((_QWORD *)v16 + 1);
      v19[0] = a1;
      v19[1] = v17;
      v4 = sub_22F2B0854(v19, (unsigned __int16 *)(*(_QWORD *)(v17 + 2704)+ *(unsigned int *)(*(_QWORD *)(v17 + 2656)+ 4 * (~*(_DWORD *)(v17 + 2664) + a2))));
      *(_QWORD *)(*(_QWORD *)(a1 + 4448) + 8 * v6) = v4;
      v18 = *(_QWORD *)(a1 + 64);
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 56))(v18, a2, v4);
        return *(_QWORD *)(*(_QWORD *)(a1 + 4448) + 8 * v6);
      }
    }
  }
  else
  {
    sub_22E769C10(a1, "selector ID out of range in AST file", 0x24uLL);
    return 0;
  }
  return v4;
}

uint64_t sub_22F2B3DF4(uint64_t a1, uint64_t a2)
{
  return sub_22E7857A0(a1 - 24, a2);
}

uint64_t sub_22F2B3DFC(uint64_t a1, uint64_t a2)
{
  return sub_22E785BA0(a1 - 24, a2);
}

uint64_t sub_22F2B3E04(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char **v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *(_QWORD *)a2;
  v13 = 0;
  sub_22F271708((_DWORD *)a1, &v12, &v13, (uint64_t)&v10);
  v4 = v10;
  v5 = (char **)(a1 + 24);
  if (!v11)
    return (uint64_t)&(*v5)[16 * *(unsigned int *)(v10 + 8)];
  v6 = *(_QWORD **)(a1 + 32);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
  {
    v8 = sub_22E7934C8(v5, a2);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v6[1] = v7;
    v8 = (char *)(v6 + 2);
  }
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(v4 + 8) = ((unint64_t)&v8[-*(_QWORD *)(a1 + 24)] >> 4) - 1;
  return (uint64_t)(v8 - 16);
}

void sub_22F2B3EC8(uint64_t a1, uint64_t a2)
{
  sub_22E785C5C(a1 - 24, a2);
}

uint64_t sub_22F2B3ED0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t sub_22F2B3EDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = 0;
  sub_22E6544B4(a1, &v10, &v11, (uint64_t)&v8);
  v4 = v8;
  if (v9)
  {
    v12 = v14;
    v13 = 0x400000000;
    v15 = *a2;
    v16 = v18;
    v17 = 0x400000000;
    sub_22E7935D0((uint64_t *)(a1 + 24), (uint64_t)&v15);
    if (v16 != v18)
      free(v16);
    if (v12 != v14)
      free(v12);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v5) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v8 + 8);
    v5 = *(_QWORD *)(a1 + 24);
  }
  return v5 + 40 * v6 + 8;
}

uint64_t sub_22F2B3FF4(uint64_t a1, unsigned int a2)
{
  if (!a2)
    return 0;
  if (*(_DWORD *)(a1 + 4208) >= a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 4200) + 8 * (a2 - 1));
  sub_22E769C10(a1, "submodule ID out of range in AST file", 0x25uLL);
  return 0;
}

uint64_t sub_22F2B4040(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!a2)
    return 1;
  v2 = *(_DWORD *)(a2 + 4);
  if (v2 < 2 || v2 == 5)
    return (2 * *(_DWORD *)(a2 + 2612) + 3);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(unsigned int *)(a1 + 184);
  v7 = v5 + 8 * v6;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v9 = *(_QWORD **)(a1 + 176);
    while (*v9 != a2)
    {
      ++v9;
      v5 += 8;
      v8 -= 8;
      if (!v8)
      {
        v5 = v7;
        return (unint64_t)(v5 - v7) >> 2;
      }
    }
  }
  return (unint64_t)(v5 - v7) >> 2;
}

void sub_22F2B40B0(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  sub_22E785F70(a1 - 24, a2, a3);
}

uint64_t sub_22F2B40BC(uint64_t a1, uint64_t a2)
{
  return sub_22F2B3CD0(a1 - 24, a2);
}

uint64_t sub_22F2B40C4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4456) + 1);
}

uint64_t sub_22F2B40D0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4432) + 1);
}

unint64_t sub_22F2B40DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = sub_22E779F8C((uint64_t)v2, *(_QWORD *)(a1 + 16), a1 + 32, (_DWORD *)(a1 + 24));
  v4 = sub_22E77F870(v2, v3);
  v5 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v5 + 1;
  sub_22F40A56C(&v7, v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) != 0);
  return v7;
}

uint64_t sub_22F2B414C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22E7823B4(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v6 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6);
  *(_DWORD *)(a2 + 16) = v7;
  if ((_DWORD)v7)
  {
    v8 = 0;
    *(_QWORD *)(a2 + 24) = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 128) + 2032, 8 * v7, 3);
    v9 = 8 * v7;
    do
    {
      result = (uint64_t)sub_22E78649C(a1);
      *(_QWORD *)(*(_QWORD *)(a2 + 24) + v8) = result;
      v8 += 8;
    }
    while (v9 != v8);
  }
  return result;
}

llvm::APFloatBase *sub_22F2B41DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::APFloatBase *result;
  llvm::APFloatBase *v6;
  unsigned int v7;

  sub_22E786954(a1, (llvm::APInt *)&v6);
  result = sub_22E78E4F8((llvm::APFloatBase *)(a3 + 8), a2, (uint64_t)&v6);
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      return (llvm::APFloatBase *)MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
  }
  return result;
}

_QWORD *sub_22F2B4248(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_22E779F8C(a1, a2, a3, a4);
  v6 = sub_22E77F870(a1, v5);
  return sub_22F0615C0(*(_QWORD *)(a1 + 128), v6);
}

uint64_t sub_22F2B427C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(v5 + 312) = a2;
  *(_DWORD *)(v5 + 316) = a3;
  if (*(char *)(v5 + 311) < 0)
  {
    **(_BYTE **)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 311) = 0;
  }
  return sub_22E78E558(a4, v5);
}

uint64_t sub_22F2B42B8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v5;

  v5 = a3;
  result = sub_22E3C32F4(*(_QWORD *)(a1 + 7360), &v5);
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_22F2B42F0(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return *(_QWORD *)(sub_22E3C32F4(*(_QWORD *)(a1 + 7360), &v3) + 8);
}

void sub_22F2B431C(uint64_t a1)
{
  sub_22E786A90(a1 - 24);
}

void sub_22F2B4324(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 40);
  v6 = 0;
  if ((sub_22F246C54((uint64_t *)a1, &v5, &v6) & 1) != 0)
    v2 = v6;
  else
    v2 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16));
  *v2 = -8192;
  *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 - 32);
  if (v4 != (void *)(v3 - 16))
    free(v4);
  *(_QWORD *)(a1 + 32) = v3 - 40;
}

void sub_22F2B43B4(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;

  v2 = (_QWORD *)sub_22F2BEA78(a1, (_QWORD *)(*(_QWORD *)(a1 + 56) + 96 * *(unsigned int *)(a1 + 64) - 96));
  *v2 = -8192;
  v2[1] = -8192;
  v3 = *(_DWORD *)(a1 + 4) + 1;
  *(_DWORD *)a1 -= 2;
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_DWORD *)(a1 + 64) - 1;
  *(_DWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a1 + 56) + 96 * v4;
  v6 = *(void **)(v5 + 16);
  if (v6 != (void *)(v5 + 32))
    free(v6);
}

void sub_22F2B4430(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4))
    return;
  if ((v1 & 1) != 0)
  {
    v4 = (_QWORD *)(a1 + 8);
    v5 = (_QWORD *)(a1 + 120);
    while (1)
    {
LABEL_9:
      if (*v4 == -8192)
        goto LABEL_13;
      if (*v4 != -4096)
        break;
LABEL_14:
      v4 += 7;
      if (v4 == v5)
      {
        v3 = *(_DWORD *)a1 & 1;
        goto LABEL_16;
      }
    }
    v6 = (_QWORD *)v4[1];
    if (v4 + 3 != v6)
      free(v6);
LABEL_13:
    *v4 = -4096;
    goto LABEL_14;
  }
  v2 = (2 * v1) & 0xFFFFFFFC;
  v3 = *(_DWORD *)(a1 + 16);
  if (v2 < v3 && v3 >= 0x41)
  {
    sub_22F2BF020(a1);
  }
  else
  {
    if (v3)
    {
      v4 = *(_QWORD **)(a1 + 8);
      v5 = &v4[7 * v3];
      goto LABEL_9;
    }
LABEL_16:
    *(_DWORD *)a1 = v3;
    *(_DWORD *)(a1 + 4) = 0;
  }
}

int *sub_22F2B4524(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 30;
LABEL_11:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 14;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[14 * v6];
        goto LABEL_11;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 2;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[14 * v4];
  }
  return result;
}

void sub_22F2B45A4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4))
    return;
  if ((v1 & 1) != 0)
  {
    v4 = (_QWORD *)(a1 + 8);
    v5 = (_QWORD *)(a1 + 88);
    while (1)
    {
LABEL_9:
      if (*v4 == -8192)
        goto LABEL_13;
      if (*v4 != -4096)
        break;
LABEL_14:
      v4 += 5;
      if (v4 == v5)
      {
        v3 = *(_DWORD *)a1 & 1;
        goto LABEL_16;
      }
    }
    v6 = (_QWORD *)v4[1];
    if (v4 + 3 != v6)
      free(v6);
LABEL_13:
    *v4 = -4096;
    goto LABEL_14;
  }
  v2 = (2 * v1) & 0xFFFFFFFC;
  v3 = *(_DWORD *)(a1 + 16);
  if (v2 < v3 && v3 >= 0x41)
  {
    sub_22F2BF24C(a1);
  }
  else
  {
    if (v3)
    {
      v4 = *(_QWORD **)(a1 + 8);
      v5 = &v4[5 * v3];
      goto LABEL_9;
    }
LABEL_16:
    *(_DWORD *)a1 = v3;
    *(_DWORD *)(a1 + 4) = 0;
  }
}

int *sub_22F2B4698(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 22;
LABEL_11:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 10;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[10 * v6];
        goto LABEL_11;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 2;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[10 * v4];
  }
  return result;
}

uint64_t sub_22F2B4718(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 7456);
  *(_DWORD *)(result + 7456) = v1 + 1;
  if (!v1)
  {
    result = *(_QWORD *)(result + 488);
    if (result)
      return llvm::Timer::startTimer((llvm::Timer *)result);
  }
  return result;
}

uint64_t sub_22F2B4738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v3 = sub_22F2BF39C(a1, a2);
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3)
    v6 = (unsigned int *)(a1 + 272);
  else
    v6 = (unsigned int *)(v3 + 8);
  return *(_QWORD *)(a1 + 264) + 40 * *v6;
}

uint64_t sub_22F2B479C(uint64_t a1)
{
  return sub_22E78BBA4(a1 - 8);
}

uint64_t sub_22F2B47A4(uint64_t a1)
{
  return sub_22E78BBA4(a1 - 16);
}

uint64_t sub_22F2B47AC(uint64_t a1)
{
  return sub_22E78BBA4(a1 - 24);
}

uint64_t sub_22F2B47B4(uint64_t a1)
{
  return sub_22E78BBA4(a1 - 40);
}

uint64_t sub_22F2B47BC(uint64_t a1)
{
  return sub_22E78BBA4(a1 - 48);
}

void sub_22F2B47C4(uint64_t a1)
{
  sub_22E78BBA4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2B47E8(uint64_t a1)
{
  sub_22E78BBA4(a1 - 8);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2B4810(uint64_t a1)
{
  sub_22E78BBA4(a1 - 16);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2B4838(uint64_t a1)
{
  sub_22E78BBA4(a1 - 24);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2B4860(uint64_t a1)
{
  sub_22E78BBA4(a1 - 40);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2B4888(uint64_t a1)
{
  sub_22E78BBA4(a1 - 48);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2B48B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v51;

  v2 = 0;
  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = v4 + 1;
  *(_DWORD *)(v3 + 24) = v4 + 1;
  v6 = *(_QWORD *)(v3 + 32);
  switch(*(_QWORD *)(v6 + 8 * v4))
  {
    case 0u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      break;
    case 1u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 1;
      goto LABEL_90;
    case 3u:
      v9 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC8C0(v9, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 4u:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F4559B0;
      goto LABEL_71;
    case 5u:
      v13 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EABD0(v13, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 6u:
      v14 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EB98C(v14, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 7u:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F45EEC0;
      goto LABEL_71;
    case 9u:
      v15 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v15;
      v16 = xmmword_22F45EEA0;
      goto LABEL_17;
    case 0xAu:
      sub_22F3EC9F8(a1[1]);
      goto LABEL_87;
    case 0xBu:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 11;
      goto LABEL_90;
    case 0xCu:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F4559F0;
      goto LABEL_71;
    case 0xDu:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 13;
      goto LABEL_90;
    case 0xEu:
      v17 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EAED0(v17, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0xFu:
      v18 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EAD98(v18, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x10u:
      v15 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v15;
      v16 = xmmword_22F44E350;
LABEL_17:
      *(_OWORD *)v15 = v16;
      v19 = 3;
      goto LABEL_18;
    case 0x11u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 32, 3);
      *(_OWORD *)v2 = xmmword_22F45EE50;
      *(_OWORD *)(v2 + 16) = xmmword_22F45EE60;
      break;
    case 0x12u:
      v20 = *(_QWORD *)(v6 + 8 * v5);
      *(_DWORD *)(v3 + 24) = v4 + 3;
      sub_22F3EBBC8(a1[1], v20, *(_QWORD *)(v6 + 8 * (v4 + 2)));
      goto LABEL_87;
    case 0x13u:
      sub_22F3EBA98(a1[1]);
      goto LABEL_87;
    case 0x14u:
      v21 = sub_22E3CD3D4(a1[1] + 2032, 32, 3);
      v2 = v21;
      v22 = xmmword_22F45EE20;
      goto LABEL_83;
    case 0x15u:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F45EE10;
      goto LABEL_71;
    case 0x16u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 48, 3);
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 22;
      *(_QWORD *)(v2 + 16) = 0;
      *(_OWORD *)(v2 + 24) = xmmword_22F45EE90;
      *(_QWORD *)(v2 + 40) = 0;
      break;
    case 0x18u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 56, 3);
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 24;
      *(_QWORD *)(v2 + 16) = 0;
      *(_OWORD *)(v2 + 24) = xmmword_22F45EE70;
      *(_DWORD *)(v2 + 40) = 0;
      *(_QWORD *)(v2 + 48) = 0;
      break;
    case 0x19u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 25;
      goto LABEL_90;
    case 0x1Au:
      v23 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC690(v23, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x1Bu:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 27;
      goto LABEL_75;
    case 0x1Cu:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 28;
      goto LABEL_75;
    case 0x1Du:
      v26 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EA604(v26, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x1Eu:
      v27 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EBA58(v27, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x1Fu:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EBCFC(a1[1], (uint64_t)&v51);
      goto LABEL_87;
    case 0x20u:
      v10 = sub_22F3EB848(a1[1]);
      goto LABEL_87;
    case 0x21u:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 33;
      goto LABEL_75;
    case 0x22u:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EC400(a1[1], &v51);
      goto LABEL_87;
    case 0x23u:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F45EE80;
      goto LABEL_71;
    case 0x24u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 56, 3);
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 36;
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 89;
      *(_QWORD *)(v2 + 36) = 0;
      *(_QWORD *)(v2 + 28) = 0;
      *(_QWORD *)(v2 + 44) = 89;
      break;
    case 0x25u:
      v28 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EB720(v28, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x27u:
      v29 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC5CC(v29, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x29u:
      v30 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC9B4(v30, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x2Au:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EC258(a1[1], &v51);
      goto LABEL_87;
    case 0x2Bu:
      v31 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EA824(v31, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x2Cu:
      v32 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EAAD4(v32, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x2Eu:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EBC4C(a1[1], (uint64_t)&v51);
      goto LABEL_87;
    case 0x31u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 49;
      goto LABEL_90;
    case 0x32u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 50;
      goto LABEL_90;
    case 0x33u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 51;
      goto LABEL_90;
    case 0x34u:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 52;
      goto LABEL_75;
    case 0x35u:
      v33 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC504(v33, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x37u:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 55;
      goto LABEL_75;
    case 0x38u:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 56;
      goto LABEL_75;
    case 0x39u:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 57;
      goto LABEL_75;
    case 0x3Au:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 58;
      goto LABEL_75;
    case 0x3Bu:
      v15 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v15;
      *(_OWORD *)v15 = xmmword_22F45EE40;
      v19 = 1;
      goto LABEL_18;
    case 0x3Cu:
      v34 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      v10 = sub_22F3EA2E0(v34, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x3Du:
      sub_22F3EB8C4(a1[1]);
      goto LABEL_87;
    case 0x3Eu:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 62;
      goto LABEL_75;
    case 0x3Fu:
      v35 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EA49C(v35, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x40u:
      v15 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v15;
      *(_OWORD *)v15 = xmmword_22F44E300;
      v19 = 7;
LABEL_18:
      *(_QWORD *)(v15 + 16) = v19;
      break;
    case 0x41u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 65;
      goto LABEL_90;
    case 0x42u:
      v36 = *(_QWORD *)(v6 + 8 * v5);
      *(_DWORD *)(v3 + 24) = v4 + 3;
      sub_22F3EB26C(a1[1], v36, *(_QWORD *)(v6 + 8 * (v4 + 2)));
      goto LABEL_87;
    case 0x43u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 67;
      goto LABEL_90;
    case 0x44u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 68;
      goto LABEL_90;
    case 0x45u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 69;
      goto LABEL_90;
    case 0x46u:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F45EEE0;
      goto LABEL_71;
    case 0x47u:
      v2 = sub_22E3CD3D4(a1[1] + 2032, 72, 3);
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 71;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 64) = 0;
      *(_QWORD *)(v2 + 52) = 0;
      *(_QWORD *)(v2 + 44) = 0;
      *(_OWORD *)(v2 + 24) = xmmword_22F45EEB0;
      *(_DWORD *)(v2 + 40) = 5;
      break;
    case 0x48u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 72;
      goto LABEL_90;
    case 0x49u:
      v37 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EA900(v37, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x4Au:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 74;
      goto LABEL_90;
    case 0x4Bu:
      v11 = sub_22E3CD3D4(a1[1] + 2032, 24, 3);
      v2 = v11;
      v12 = xmmword_22F45EED0;
LABEL_71:
      *(_OWORD *)v11 = v12;
      *(_QWORD *)(v11 + 16) = 0;
      break;
    case 0x4Cu:
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EB808(a1[1], *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x4Du:
      v38 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EB4E8(v38, *(_QWORD *)(v6 + 8 * v5));
      goto LABEL_87;
    case 0x4Eu:
      v24 = sub_22E3CD3D4(a1[1] + 2032, 40, 3);
      v2 = v24;
      *(_QWORD *)v24 = 0;
      v25 = 78;
LABEL_75:
      *(_DWORD *)(v24 + 8) = v25;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 89;
      *(_QWORD *)(v24 + 32) = 0;
      break;
    case 0x50u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 80;
      goto LABEL_90;
    case 0x51u:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EBCA4(a1[1], (uint64_t)&v51);
      goto LABEL_87;
    case 0x52u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 82;
      goto LABEL_90;
    case 0x53u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 83;
      goto LABEL_90;
    case 0x56u:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 86;
      goto LABEL_90;
    case 0x57u:
      v39 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      v10 = sub_22F3EA390(v39, *(_QWORD *)(v6 + 8 * v5) != 0);
      goto LABEL_87;
    case 0x58u:
      v21 = sub_22E3CD3D4(a1[1] + 2032, 32, 3);
      v2 = v21;
      v22 = xmmword_22F45EE30;
LABEL_83:
      *(_OWORD *)v21 = v22;
      *(_DWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      break;
    case 0x59u:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EC0B0(a1[1], &v51);
      goto LABEL_87;
    case 0x5Au:
      v51.n128_u32[0] = *(_QWORD *)(v6 + 8 * v5);
      v51.n128_u32[1] = *(_QWORD *)(v6 + 8 * (v4 + 2));
      v51.n128_u32[2] = *(_QWORD *)(v6 + 8 * (v4 + 3));
      *(_DWORD *)(v3 + 24) = v4 + 5;
      v51.n128_u32[3] = *(_QWORD *)(v6 + 8 * (v4 + 4));
      sub_22F3EBF04(a1[1], &v51);
      goto LABEL_87;
    case 0x5Bu:
      v40 = a1[1];
      *(_DWORD *)(v3 + 24) = v4 + 2;
      sub_22F3EC7E4(v40, *(_QWORD *)(v6 + 8 * v5));
LABEL_87:
      v2 = v10;
      break;
    case 0x5Du:
      v7 = sub_22E3CD3D4(a1[1] + 2032, 12, 3);
      v2 = v7;
      *(_QWORD *)v7 = 0;
      v8 = 93;
LABEL_90:
      *(_DWORD *)(v7 + 8) = v8;
      break;
    default:
      break;
  }
  sub_22F2B5540(a1, (_DWORD *)v2);
  v41 = *a1;
  v42 = *(_QWORD *)(*a1 + 8);
  v43 = *(_QWORD *)(*a1 + 16);
  v44 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v41 + 24) = v44 + 1;
  HIDWORD(v45) = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8 * v44);
  LODWORD(v45) = HIDWORD(v45);
  *(_DWORD *)v2 = sub_22E77BAB4(v42, v43, v45 >> 1);
  v46 = *a1;
  v47 = *(_QWORD *)(*a1 + 8);
  v48 = *(_QWORD *)(*a1 + 16);
  v49 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v46 + 24) = v49 + 1;
  HIDWORD(v45) = *(_QWORD *)(*(_QWORD *)(v46 + 32) + 8 * v49);
  LODWORD(v45) = HIDWORD(v45);
  *(_DWORD *)(v2 + 4) = sub_22E77BAB4(v47, v48, v45 >> 1);
  return v2;
}

void sub_22F2B5540(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  switch(a2[2])
  {
    case 3:
      sub_22F2BAB64(a1, a2);
      return;
    case 4:
    case 7:
      sub_22F2B58A4(a1, (uint64_t)a2);
      return;
    case 5:
      sub_22F2B7DC4(a1, a2);
      return;
    case 6:
      sub_22F2B8D1C(a1, (uint64_t)a2);
      return;
    case 9:
    case 0xA:
    case 0x10:
    case 0x3B:
    case 0x40:
      sub_22F2B5930(a1, a2);
      return;
    case 0xC:
      v2 = *a1;
      goto LABEL_3;
    case 0xE:
    case 0xF:
      sub_22F2B7F84(a1, (uint64_t)a2);
      return;
    case 0x11:
      sub_22F2B8FB8(a1, a2);
      return;
    case 0x12:
      sub_22F2B8294(a1, a2);
      return;
    case 0x13:
      v2 = *a1;
      goto LABEL_3;
    case 0x14:
    case 0x58:
      sub_22F2B5E44(a1, (uint64_t)a2);
      return;
    case 0x15:
      v2 = *a1;
      goto LABEL_3;
    case 0x16:
      sub_22F2B84BC(a1, (uint64_t)a2);
      return;
    case 0x18:
      sub_22F2B8ECC(a1, (uint64_t)a2);
      return;
    case 0x1A:
    case 0x1E:
    case 0x27:
    case 0x49:
      sub_22F2B67C0(a1, a2);
      return;
    case 0x1B:
      v3 = *a1;
      goto LABEL_23;
    case 0x1C:
      v3 = *a1;
      goto LABEL_23;
    case 0x1D:
      sub_22F2B60BC(a1, (uint64_t)a2);
      return;
    case 0x1F:
    case 0x51:
      sub_22F2B9068(a1, (uint64_t)a2);
      return;
    case 0x21:
      v3 = *a1;
      goto LABEL_23;
    case 0x22:
    case 0x2A:
      sub_22F2BA298(a1, a2);
      return;
    case 0x23:
      v2 = *a1;
      goto LABEL_3;
    case 0x24:
      sub_22F2B56A4(a1, (uint64_t)a2);
      return;
    case 0x25:
      sub_22F2B73A0(a1, (uint64_t)a2);
      return;
    case 0x29:
      sub_22F2B5C94(a1, (uint64_t)a2);
      return;
    case 0x2B:
      sub_22F2B6370(a1, (uint64_t)a2);
      return;
    case 0x2C:
      sub_22F2B7880(a1, (uint64_t)a2);
      return;
    case 0x2E:
      sub_22F2B8580(a1, (uint64_t)a2);
      return;
    case 0x34:
      v3 = *a1;
      goto LABEL_23;
    case 0x35:
      sub_22F2BA788(a1, (uint64_t)a2);
      return;
    case 0x37:
      v3 = *a1;
      goto LABEL_23;
    case 0x38:
      v3 = *a1;
      goto LABEL_23;
    case 0x39:
      v3 = *a1;
      goto LABEL_23;
    case 0x3A:
      v3 = *a1;
      goto LABEL_23;
    case 0x3C:
      sub_22F2B5AFC(a1, (uint64_t)a2);
      return;
    case 0x3D:
      v2 = *a1;
      goto LABEL_3;
    case 0x3E:
      v3 = *a1;
      goto LABEL_23;
    case 0x3F:
      sub_22F2B5ED0(a1, (uint64_t)a2);
      return;
    case 0x42:
      sub_22F2B6924(a1, (uint64_t)a2);
      return;
    case 0x46:
      v2 = *a1;
      goto LABEL_3;
    case 0x47:
      sub_22F2B59AC(a1, (uint64_t)a2);
      return;
    case 0x4B:
      v2 = *a1;
LABEL_3:
      sub_22E794758(v2, (uint64_t)a2);
      break;
    case 0x4C:
      sub_22F2B5824(a1, (uint64_t)a2);
      break;
    case 0x4D:
      sub_22F2B6F54(a1, (uint64_t)a2);
      break;
    case 0x4E:
      v3 = *a1;
LABEL_23:
      sub_22F2B5798(v3, (uint64_t)a2);
      break;
    case 0x57:
      sub_22F2B5BF8((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x59:
      sub_22F2B9DAC(a1, a2);
      break;
    case 0x5A:
      sub_22F2B9790(a1, (uint64_t)a2);
      break;
    case 0x5B:
      sub_22F2BA99C(a1, (uint64_t)a2);
      break;
    default:
      return;
  }
}

uint64_t sub_22F2B56A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v4 = a2 + 16;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 1;
  v10 = *(unsigned int *)(v5 + 24);
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  *(_DWORD *)(a2 + 44) = *(_QWORD *)(v11 + 8 * (v10 + 1));
  *(_DWORD *)(v5 + 24) = v10 + 3;
  HIDWORD(v13) = *(_QWORD *)(v11 + 8 * (v10 + 2));
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v6, v7, v13 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 40) = sub_22E77BAB4(v15, v16, v13 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(v19 + 10848);
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 10840) + 8 * v21 - 8);
  *(_DWORD *)(v19 + 10848) = v21 - 1;
  *(_QWORD *)(a2 + 32) = v22;
  v23 = *(unsigned int *)(v18 + 24);
  *(_DWORD *)(v18 + 24) = v23 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v23);
  LODWORD(v13) = HIDWORD(v13);
  result = sub_22E77BAB4(v19, v20, v13 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2B5798(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  if (a2)
    v3 = a2 + 16;
  else
    v3 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 10840);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(v6 + 8 * v7 - 8);
  v9 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v9 + 1;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = *(_QWORD *)(v10 + 8 * v9);
  v11 = *(_QWORD *)(v6 + 8 * (v7 - 1) - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 2;
  *(_QWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a1 + 24) = v9 + 2;
  HIDWORD(v12) = *(_QWORD *)(v10 + 8 * (v9 + 1));
  LODWORD(v12) = HIDWORD(v12);
  result = sub_22E77BAB4(v5, v4, v12 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2B5824(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a2 + 24);
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*a1 + 8);
      v7 = *(unsigned int *)(v6 + 10848);
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
      *(_DWORD *)(v6 + 10848) = v7 - 1;
      *v4++ = v8;
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  result = sub_22E77BAB4(v10, v11, v13 >> 1);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t sub_22F2B58A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v11 = *(unsigned int *)(v5 + 10848);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v11 - 8);
    *(_DWORD *)(v5 + 10848) = v11 - 1;
  }
  else
  {
    v6 = sub_22E7B94C8(v5, *(_QWORD *)(v4 + 16));
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 8);
  }
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v5, v7, v9 >> 1);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t sub_22F2B5930(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  a2[4] = *(_QWORD *)(v6 + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  HIDWORD(v9) = *(_QWORD *)(v6 + 8 * (v5 + 1));
  LODWORD(v9) = HIDWORD(v9);
  a2[3] = sub_22E77BAB4(v7, v8, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v11, v12, v9 >> 1);
  a2[5] = result;
  return result;
}

uint64_t sub_22F2B59AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  v4 = a2 + 16;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v6 + 10840);
  v9 = *(unsigned int *)(v6 + 10848);
  v10 = *(unsigned int *)(v5 + 24);
  v11 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)v4 = *(_QWORD *)(v8 + 8 * v9 - 8);
  *(_DWORD *)(v4 + 8) = *(_QWORD *)(v11 + 8 * v10);
  v12 = *(_QWORD *)(v11 + 8 * (v10 + 2));
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(v11 + 8 * (v10 + 1));
  *(_DWORD *)(a2 + 36) = v12;
  *(_DWORD *)(v5 + 24) = v10 + 4;
  *(_DWORD *)(a2 + 40) = *(_QWORD *)(v11 + 8 * (v10 + 3));
  v13 = *(_QWORD *)(v8 + 8 * (v9 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v9 - 2;
  *(_QWORD *)(a2 + 64) = v13;
  *(_DWORD *)(v5 + 24) = v10 + 5;
  HIDWORD(v14) = *(_QWORD *)(v11 + 8 * (v10 + 4));
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v6, v7, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 44) = sub_22E77BAB4(v16, v17, v14 >> 1);
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(*a1 + 16);
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v19 + 24) = v22 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v20, v21, v14 >> 1);
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 8);
  v25 = *(_QWORD *)(*a1 + 16);
  v26 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v23 + 24) = v26 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v24, v25, v14 >> 1);
  v27 = *a1;
  v28 = *(_QWORD *)(*a1 + 8);
  v29 = *(_QWORD *)(*a1 + 16);
  v30 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v27 + 24) = v30 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v30);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v28, v29, v14 >> 1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

uint64_t sub_22F2B5AFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_DWORD *)(a2 + 24);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = *(_QWORD *)(*a1 + 8);
      v10 = *(unsigned int *)(v9 + 10848);
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
      *(_DWORD *)(v9 + 10848) = v10 - 1;
      sub_22F3C36B0(a2, i, v11);
    }
    v12 = *(_DWORD *)(a2 + 24);
    if (v12)
    {
      for (j = 0; j != v12; ++j)
      {
        v14 = *(_QWORD *)(*a1 + 8);
        v15 = *(unsigned int *)(v14 + 10848);
        v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
        *(_DWORD *)(v14 + 10848) = v15 - 1;
        sub_22F3EA2CC(a2, j, v16);
      }
    }
  }
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  result = sub_22E77BAB4(v18, v19, v21 >> 1);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t sub_22F2B5BF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a2 + 12))
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)(*(_QWORD *)result + 8);
    v6 = *(_QWORD *)(v4 + 16);
    v7 = *(unsigned int *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v7 + 1;
    HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
    LODWORD(v8) = HIDWORD(v8);
    *(_DWORD *)(v2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
    v2 += 16;
    v9 = *(_QWORD *)v3;
    v10 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    v11 = *(_QWORD *)(*(_QWORD *)v3 + 16);
    v12 = *(unsigned int *)(*(_QWORD *)v3 + 24);
    *(_DWORD *)(v9 + 24) = v12 + 1;
    HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
    LODWORD(v8) = HIDWORD(v8);
    result = sub_22E77BAB4(v10, v11, v8 >> 1);
    *(_DWORD *)(v2 + 4) = result;
    v13 = *(_QWORD *)v3;
    v14 = *(unsigned int *)(*(_QWORD *)v3 + 24);
    *(_DWORD *)(v13 + 24) = v14 + 1;
    *(_DWORD *)(v2 + 8 * *(unsigned __int8 *)(v2 - 4)) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14);
  }
  return result;
}

void sub_22F2B5C94(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 16);
  v19 = 0;
  if (v4 < 0x11)
  {
    if (!v4)
      goto LABEL_8;
    v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = 0;
  }
  do
  {
    v6 = *(_QWORD *)(*a1 + 8);
    v7 = *(unsigned int *)(v6 + 10848);
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
    *(_DWORD *)(v6 + 10848) = v7 - 1;
    if (v5 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v19;
    }
    v20[v5] = v8;
    v5 = ++v19;
    --v4;
  }
  while (v4);
  if (v5)
    memmove((void *)(a2 + 32), v20, 8 * v5);
LABEL_8:
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  v11 = *(_QWORD *)(*a1 + 32);
  *(_BYTE *)(a2 + 24) = *(_QWORD *)(v11 + 8 * v10) != 0;
  *(_BYTE *)(a2 + 25) = *(_QWORD *)(v11 + 8 * (v10 + 1)) != 0;
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v9 + 24) = v10 + 3;
  HIDWORD(v14) = *(_QWORD *)(v11 + 8 * (v10 + 2));
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v12, v13, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v16, v17, v14 >> 1);
}

uint64_t sub_22F2B5E44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v12, v13, v10 >> 1);
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

void sub_22F2B5ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_DWORD *)(a2 + 16);
  v19 = 0;
  if (v9 < 0x11)
  {
    if (!v9)
    {
      v15 = 0;
      goto LABEL_13;
    }
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = 0;
  }
  v11 = v9;
  do
  {
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(unsigned int *)(v12 + 10848);
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v12 + 10848) = v13 - 1;
    if (v10 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v19;
    }
    v21[v10] = v14;
    v10 = ++v19;
    --v11;
  }
  while (v11);
  if (v10)
    memmove((void *)(a2 + 24), v21, 8 * v10);
  LODWORD(v15) = 0;
  v20 = 0;
  do
  {
    v16 = *(_QWORD *)(*a1 + 8);
    v17 = *(unsigned int *)(v16 + 10848);
    v18 = *(_QWORD *)(*(_QWORD *)(v16 + 10840) + 8 * v17 - 8);
    *(_DWORD *)(v16 + 10848) = v17 - 1;
    if (v15 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v15) = v20;
    }
    v21[v15] = v18;
    v15 = ++v20;
    --v9;
  }
  while (v9);
LABEL_13:
  sub_22F3EA3DC((char *)a2, v21, v15);
}

void sub_22F2B60BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(unsigned int *)(v6 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v6 + 10848) = v7 - 1;
  v9 = *(unsigned int *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = v11;
  v12 = *(_QWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 24) = v9 + 2;
  HIDWORD(v13) = *(_QWORD *)(v10 + 8 * (v9 + 1));
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v12, v13 >> 1);
  v14 = *(_DWORD *)(a2 + 16);
  v29 = 0;
  if (v14 < 0x11)
  {
    if (!v14)
    {
      sub_22F3EA4E0((char *)a2, v32, 0);
      v25 = 0;
      goto LABEL_19;
    }
    v15 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = 0;
  }
  v16 = v14;
  do
  {
    v17 = *(_QWORD *)(*a1 + 8);
    v18 = *(unsigned int *)(v17 + 10848);
    v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
    *(_DWORD *)(v17 + 10848) = v18 - 1;
    if (v15 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v29;
    }
    v32[v15] = v19;
    v15 = ++v29;
    --v16;
  }
  while (v16);
  if (v15)
    memmove((void *)(a2 + 40), v32, 8 * v15);
  LODWORD(v20) = 0;
  v30 = 0;
  v21 = v14;
  do
  {
    v22 = *(_QWORD *)(*a1 + 8);
    v23 = *(unsigned int *)(v22 + 10848);
    v24 = *(_QWORD *)(*(_QWORD *)(v22 + 10840) + 8 * v23 - 8);
    *(_DWORD *)(v22 + 10848) = v23 - 1;
    if (v20 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v20) = v30;
    }
    v32[v20] = v24;
    v20 = ++v30;
    --v21;
  }
  while (v21);
  sub_22F3EA4E0((char *)a2, v32, v20);
  LODWORD(v25) = 0;
  v31 = 0;
  do
  {
    v26 = *(_QWORD *)(*a1 + 8);
    v27 = *(unsigned int *)(v26 + 10848);
    v28 = *(_QWORD *)(*(_QWORD *)(v26 + 10840) + 8 * v27 - 8);
    *(_DWORD *)(v26 + 10848) = v27 - 1;
    if (v25 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v25) = v31;
    }
    v32[v25] = v28;
    v25 = ++v31;
    --v14;
  }
  while (v14);
LABEL_19:
  sub_22F3EA4FC((char *)a2, v32, v25);
}

void sub_22F2B6370(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _QWORD v56[17];

  v56[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v6 + 10840);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(v7 + 8 * v8 - 8);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  v13 = *(_QWORD *)(v7 + 8 * (v8 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 2;
  *(_QWORD *)(v4 + 16) = v13;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(v11 + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(unsigned int *)(*a1 + 24);
  v19 = *(_QWORD *)(*a1 + 32);
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(v19 + 8 * v18);
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_QWORD *)(v17 + 16);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  HIDWORD(v16) = *(_QWORD *)(v19 + 8 * (v18 + 1));
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v20, v21, v16 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v23, v24, v16 >> 1);
  v26 = *(_DWORD *)(a2 + 16);
  v51 = 0;
  if (v26 < 0x11)
  {
    if (!v26)
    {
      sub_22F3EA654((char *)a2, v56, 0);
      sub_22F3EA670((char *)a2, v56, 0);
      sub_22F3EA690((char *)a2, v56, 0);
      v47 = 0;
      goto LABEL_27;
    }
    v27 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = 0;
  }
  v28 = v26;
  do
  {
    v29 = *(_QWORD *)(*a1 + 8);
    v30 = *(unsigned int *)(v29 + 10848);
    v31 = *(_QWORD *)(*(_QWORD *)(v29 + 10840) + 8 * v30 - 8);
    *(_DWORD *)(v29 + 10848) = v30 - 1;
    if (v27 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v51;
    }
    v56[v27] = v31;
    v27 = ++v51;
    --v28;
  }
  while (v28);
  if (v27)
    memmove((void *)(a2 + 64), v56, 8 * v27);
  LODWORD(v32) = 0;
  v52 = 0;
  v33 = v26;
  do
  {
    v34 = *(_QWORD *)(*a1 + 8);
    v35 = *(unsigned int *)(v34 + 10848);
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 10840) + 8 * v35 - 8);
    *(_DWORD *)(v34 + 10848) = v35 - 1;
    if (v32 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v32) = v52;
    }
    v56[v32] = v36;
    v32 = ++v52;
    --v33;
  }
  while (v33);
  sub_22F3EA654((char *)a2, v56, v32);
  LODWORD(v37) = 0;
  v53 = 0;
  v38 = v26;
  do
  {
    v39 = *(_QWORD *)(*a1 + 8);
    v40 = *(unsigned int *)(v39 + 10848);
    v41 = *(_QWORD *)(*(_QWORD *)(v39 + 10840) + 8 * v40 - 8);
    *(_DWORD *)(v39 + 10848) = v40 - 1;
    if (v37 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v37) = v53;
    }
    v56[v37] = v41;
    v37 = ++v53;
    --v38;
  }
  while (v38);
  sub_22F3EA670((char *)a2, v56, v37);
  LODWORD(v42) = 0;
  v54 = 0;
  v43 = v26;
  do
  {
    v44 = *(_QWORD *)(*a1 + 8);
    v45 = *(unsigned int *)(v44 + 10848);
    v46 = *(_QWORD *)(*(_QWORD *)(v44 + 10840) + 8 * v45 - 8);
    *(_DWORD *)(v44 + 10848) = v45 - 1;
    if (v42 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v42) = v54;
    }
    v56[v42] = v46;
    v42 = ++v54;
    --v43;
  }
  while (v43);
  sub_22F3EA690((char *)a2, v56, v42);
  LODWORD(v47) = 0;
  v55 = 0;
  do
  {
    v48 = *(_QWORD *)(*a1 + 8);
    v49 = *(unsigned int *)(v48 + 10848);
    v50 = *(_QWORD *)(*(_QWORD *)(v48 + 10840) + 8 * v49 - 8);
    *(_DWORD *)(v48 + 10848) = v49 - 1;
    if (v47 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v47) = v55;
    }
    v56[v47] = v50;
    v47 = ++v55;
    --v26;
  }
  while (v26);
LABEL_27:
  sub_22F3EA6B4((char *)a2, v56, v47);
}

void sub_22F2B67C0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a2[4];
  v14 = 0;
  if (v9 < 0x11)
  {
    if (!v9)
      return;
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = 0;
  }
  do
  {
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    if (v10 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v14;
    }
    v15[v10] = v13;
    v10 = ++v14;
    --v9;
  }
  while (v9);
  if (v10)
    memmove(a2 + 6, v15, 8 * v10);
}

void sub_22F2B6924(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  void *__src;
  uint64_t v71;
  _QWORD v72[17];

  v72[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v6 + 10840);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(v7 + 8 * v8 - 8);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  v13 = *(_QWORD *)(v7 + 8 * (v8 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 2;
  *(_QWORD *)(v4 + 16) = v13;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(v11 + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v18, v19, v16 >> 1);
  v21 = *a1;
  v22 = *(_QWORD *)(*a1 + 8);
  v23 = *(_QWORD *)(*a1 + 16);
  v24 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v21 + 24) = v24 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v24);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v22, v23, v16 >> 1);
  v25 = sub_22E7823B4(*a1);
  v27 = v26;
  sub_22E786254(*a1, (uint64_t)&v68);
  *(_QWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v27;
  *(_OWORD *)(a2 + 80) = v68;
  *(_QWORD *)(a2 + 96) = v69;
  v28 = *(_DWORD *)(a2 + 16);
  __src = v72;
  v71 = 0x1000000000;
  if (v28 < 0x11)
  {
    if (!v28)
    {
      sub_22F3EAF18((char *)a2, v72, 0);
      v39 = 0;
      LODWORD(v71) = 0;
      LOBYTE(v40) = 1;
      goto LABEL_19;
    }
    v29 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = v71;
  }
  v30 = v28;
  do
  {
    v31 = *(_QWORD *)(*a1 + 8);
    v32 = *(unsigned int *)(v31 + 10848);
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 10840) + 8 * v32 - 8);
    *(_DWORD *)(v31 + 10848) = v32 - 1;
    if (v29 >= HIDWORD(v71))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = v71;
    }
    *((_QWORD *)__src + v29) = v33;
    v29 = v71 + 1;
    LODWORD(v71) = v71 + 1;
    --v30;
  }
  while (v30);
  if (v29)
    memmove((void *)(a2 + 104), __src, 8 * v29);
  LODWORD(v34) = 0;
  LODWORD(v71) = 0;
  v35 = v28;
  do
  {
    v36 = *(_QWORD *)(*a1 + 8);
    v37 = *(unsigned int *)(v36 + 10848);
    v38 = *(_QWORD *)(*(_QWORD *)(v36 + 10840) + 8 * v37 - 8);
    *(_DWORD *)(v36 + 10848) = v37 - 1;
    if (v34 >= HIDWORD(v71))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v34) = v71;
    }
    *((_QWORD *)__src + v34) = v38;
    v34 = (v71 + 1);
    LODWORD(v71) = v71 + 1;
    --v35;
  }
  while (v35);
  sub_22F3EAF18((char *)a2, __src, v34);
  LODWORD(v39) = 0;
  LODWORD(v71) = 0;
  v40 = v28;
  do
  {
    v41 = *(_QWORD *)(*a1 + 8);
    v42 = *(unsigned int *)(v41 + 10848);
    v43 = *(_QWORD *)(*(_QWORD *)(v41 + 10840) + 8 * v42 - 8);
    *(_DWORD *)(v41 + 10848) = v42 - 1;
    if (v39 >= HIDWORD(v71))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v39) = v71;
    }
    *((_QWORD *)__src + v39) = v43;
    v39 = (v71 + 1);
    LODWORD(v71) = v71 + 1;
    --v40;
  }
  while (v40);
LABEL_19:
  sub_22F3EAF34((char *)a2, __src, v39);
  LODWORD(v71) = 0;
  if ((v40 & 1) != 0)
  {
    sub_22F3EAF54((char *)a2, __src, 0);
    v44 = 0;
    LODWORD(v71) = 0;
  }
  else
  {
    LODWORD(v45) = 0;
    v46 = v28;
    do
    {
      v47 = *(_QWORD *)(*a1 + 8);
      v48 = *(unsigned int *)(v47 + 10848);
      v49 = *(_QWORD *)(*(_QWORD *)(v47 + 10840) + 8 * v48 - 8);
      *(_DWORD *)(v47 + 10848) = v48 - 1;
      if (v45 >= HIDWORD(v71))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v45) = v71;
      }
      *((_QWORD *)__src + v45) = v49;
      v45 = (v71 + 1);
      LODWORD(v71) = v71 + 1;
      --v46;
    }
    while (v46);
    sub_22F3EAF54((char *)a2, __src, v45);
    LODWORD(v44) = 0;
    LODWORD(v71) = 0;
    v50 = v28;
    do
    {
      v51 = *(_QWORD *)(*a1 + 8);
      v52 = *(unsigned int *)(v51 + 10848);
      v53 = *(_QWORD *)(*(_QWORD *)(v51 + 10840) + 8 * v52 - 8);
      *(_DWORD *)(v51 + 10848) = v52 - 1;
      if (v44 >= HIDWORD(v71))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v44) = v71;
      }
      *((_QWORD *)__src + v44) = v53;
      v44 = (v71 + 1);
      LODWORD(v71) = v71 + 1;
      --v50;
    }
    while (v50);
  }
  sub_22F3EAF78((char *)a2, __src, v44);
  if (*(_DWORD *)(a2 + 48) == 1)
  {
    LODWORD(v71) = 0;
    if ((v40 & 1) != 0)
    {
      sub_22F3EAFA0((char *)a2, __src, 0);
      v54 = 0;
      LODWORD(v71) = 0;
    }
    else
    {
      LODWORD(v55) = 0;
      v56 = v28;
      do
      {
        v57 = *(_QWORD *)(*a1 + 8);
        v58 = *(unsigned int *)(v57 + 10848);
        v59 = *(_QWORD *)(*(_QWORD *)(v57 + 10840) + 8 * v58 - 8);
        *(_DWORD *)(v57 + 10848) = v58 - 1;
        if (v55 >= HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v55) = v71;
        }
        *((_QWORD *)__src + v55) = v59;
        v55 = (v71 + 1);
        LODWORD(v71) = v71 + 1;
        --v56;
      }
      while (v56);
      sub_22F3EAFA0((char *)a2, __src, v55);
      LODWORD(v54) = 0;
      LODWORD(v71) = 0;
      v60 = v28;
      do
      {
        v61 = *(_QWORD *)(*a1 + 8);
        v62 = *(unsigned int *)(v61 + 10848);
        v63 = *(_QWORD *)(*(_QWORD *)(v61 + 10840) + 8 * v62 - 8);
        *(_DWORD *)(v61 + 10848) = v62 - 1;
        if (v54 >= HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v54) = v71;
        }
        *((_QWORD *)__src + v54) = v63;
        v54 = (v71 + 1);
        LODWORD(v71) = v71 + 1;
        --v60;
      }
      while (v60);
    }
    sub_22F3EAFCC((unsigned int *)a2, __src, v54);
    LODWORD(v71) = 0;
    if ((v40 & 1) != 0)
    {
      v64 = 0;
    }
    else
    {
      LODWORD(v64) = 0;
      do
      {
        v65 = *(_QWORD *)(*a1 + 8);
        v66 = *(unsigned int *)(v65 + 10848);
        v67 = *(_QWORD *)(*(_QWORD *)(v65 + 10840) + 8 * v66 - 8);
        *(_DWORD *)(v65 + 10848) = v66 - 1;
        if (v64 >= HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v64) = v71;
        }
        *((_QWORD *)__src + v64) = v67;
        v64 = (v71 + 1);
        LODWORD(v71) = v71 + 1;
        --v28;
      }
      while (v28);
    }
    sub_22F3EAFFC((unsigned int *)a2, __src, v64);
  }
  if (__src != v72)
    free(__src);
}

void sub_22F2B6F54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *__src;
  uint64_t v52;
  _QWORD v53[17];

  v53[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v6 + 10840);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(v7 + 8 * v8 - 8);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  v13 = *(_QWORD *)(v7 + 8 * (v8 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 2;
  *(_QWORD *)(v4 + 16) = v13;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(v11 + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v18, v19, v16 >> 1);
  v21 = sub_22E7823B4(*a1);
  v23 = v22;
  sub_22E786254(*a1, (uint64_t)&v49);
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v23;
  *(_OWORD *)(a2 + 72) = v49;
  *(_QWORD *)(a2 + 88) = v50;
  v24 = *(_DWORD *)(a2 + 16);
  __src = v53;
  v52 = 0x1000000000;
  if (v24 < 0x11)
  {
    if (!v24)
    {
      sub_22F3EB2EC((char *)a2, v53, 0);
      LODWORD(v52) = 0;
      sub_22F3EB308((char *)a2, __src, 0);
      LODWORD(v52) = 0;
      sub_22F3EB328((char *)a2, __src, 0);
      v45 = 0;
      LODWORD(v52) = 0;
      goto LABEL_27;
    }
    v25 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v52;
  }
  v26 = v24;
  do
  {
    v27 = *(_QWORD *)(*a1 + 8);
    v28 = *(unsigned int *)(v27 + 10848);
    v29 = *(_QWORD *)(*(_QWORD *)(v27 + 10840) + 8 * v28 - 8);
    *(_DWORD *)(v27 + 10848) = v28 - 1;
    if (v25 >= HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v52;
    }
    *((_QWORD *)__src + v25) = v29;
    v25 = v52 + 1;
    LODWORD(v52) = v52 + 1;
    --v26;
  }
  while (v26);
  if (v25)
    memmove((void *)(a2 + 96), __src, 8 * v25);
  LODWORD(v30) = 0;
  LODWORD(v52) = 0;
  v31 = v24;
  do
  {
    v32 = *(_QWORD *)(*a1 + 8);
    v33 = *(unsigned int *)(v32 + 10848);
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 10840) + 8 * v33 - 8);
    *(_DWORD *)(v32 + 10848) = v33 - 1;
    if (v30 >= HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v30) = v52;
    }
    *((_QWORD *)__src + v30) = v34;
    v30 = (v52 + 1);
    LODWORD(v52) = v52 + 1;
    --v31;
  }
  while (v31);
  sub_22F3EB2EC((char *)a2, __src, v30);
  LODWORD(v35) = 0;
  LODWORD(v52) = 0;
  v36 = v24;
  do
  {
    v37 = *(_QWORD *)(*a1 + 8);
    v38 = *(unsigned int *)(v37 + 10848);
    v39 = *(_QWORD *)(*(_QWORD *)(v37 + 10840) + 8 * v38 - 8);
    *(_DWORD *)(v37 + 10848) = v38 - 1;
    if (v35 >= HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v35) = v52;
    }
    *((_QWORD *)__src + v35) = v39;
    v35 = (v52 + 1);
    LODWORD(v52) = v52 + 1;
    --v36;
  }
  while (v36);
  sub_22F3EB308((char *)a2, __src, v35);
  LODWORD(v40) = 0;
  LODWORD(v52) = 0;
  v41 = v24;
  do
  {
    v42 = *(_QWORD *)(*a1 + 8);
    v43 = *(unsigned int *)(v42 + 10848);
    v44 = *(_QWORD *)(*(_QWORD *)(v42 + 10840) + 8 * v43 - 8);
    *(_DWORD *)(v42 + 10848) = v43 - 1;
    if (v40 >= HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v40) = v52;
    }
    *((_QWORD *)__src + v40) = v44;
    v40 = (v52 + 1);
    LODWORD(v52) = v52 + 1;
    --v41;
  }
  while (v41);
  sub_22F3EB328((char *)a2, __src, v40);
  LODWORD(v45) = 0;
  LODWORD(v52) = 0;
  do
  {
    v46 = *(_QWORD *)(*a1 + 8);
    v47 = *(unsigned int *)(v46 + 10848);
    v48 = *(_QWORD *)(*(_QWORD *)(v46 + 10840) + 8 * v47 - 8);
    *(_DWORD *)(v46 + 10848) = v47 - 1;
    if (v45 >= HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v45) = v52;
    }
    *((_QWORD *)__src + v45) = v48;
    v45 = (v52 + 1);
    LODWORD(v52) = v52 + 1;
    --v24;
  }
  while (v24);
LABEL_27:
  sub_22F3EB34C((char *)a2, __src, v45);
  if (__src != v53)
    free(__src);
}

void sub_22F2B73A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *__src;
  uint64_t v57;
  _QWORD v58[17];

  v58[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v6 + 10840);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(v7 + 8 * v8 - 8);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  v13 = *(_QWORD *)(v7 + 8 * (v8 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 2;
  *(_QWORD *)(v4 + 16) = v13;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(v11 + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v18, v19, v16 >> 1);
  v21 = sub_22E7823B4(*a1);
  v23 = v22;
  sub_22E786254(*a1, (uint64_t)&v54);
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v23;
  *(_OWORD *)(a2 + 72) = v54;
  *(_QWORD *)(a2 + 88) = v55;
  v24 = *(_DWORD *)(a2 + 16);
  __src = v58;
  v57 = 0x1000000000;
  if (v24 < 0x11)
  {
    if (!v24)
    {
      sub_22F3EB2EC((char *)a2, v58, 0);
      LODWORD(v57) = 0;
      sub_22F3EB308((char *)a2, __src, 0);
      LODWORD(v57) = 0;
      sub_22F3EB328((char *)a2, __src, 0);
      LODWORD(v57) = 0;
      sub_22F3EB34C((char *)a2, __src, 0);
      v50 = 0;
      LODWORD(v57) = 0;
      goto LABEL_31;
    }
    v25 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v57;
  }
  v26 = v24;
  do
  {
    v27 = *(_QWORD *)(*a1 + 8);
    v28 = *(unsigned int *)(v27 + 10848);
    v29 = *(_QWORD *)(*(_QWORD *)(v27 + 10840) + 8 * v28 - 8);
    *(_DWORD *)(v27 + 10848) = v28 - 1;
    if (v25 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v57;
    }
    *((_QWORD *)__src + v25) = v29;
    v25 = v57 + 1;
    LODWORD(v57) = v57 + 1;
    --v26;
  }
  while (v26);
  if (v25)
    memmove((void *)(a2 + 96), __src, 8 * v25);
  LODWORD(v30) = 0;
  LODWORD(v57) = 0;
  v31 = v24;
  do
  {
    v32 = *(_QWORD *)(*a1 + 8);
    v33 = *(unsigned int *)(v32 + 10848);
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 10840) + 8 * v33 - 8);
    *(_DWORD *)(v32 + 10848) = v33 - 1;
    if (v30 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v30) = v57;
    }
    *((_QWORD *)__src + v30) = v34;
    v30 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    --v31;
  }
  while (v31);
  sub_22F3EB2EC((char *)a2, __src, v30);
  LODWORD(v35) = 0;
  LODWORD(v57) = 0;
  v36 = v24;
  do
  {
    v37 = *(_QWORD *)(*a1 + 8);
    v38 = *(unsigned int *)(v37 + 10848);
    v39 = *(_QWORD *)(*(_QWORD *)(v37 + 10840) + 8 * v38 - 8);
    *(_DWORD *)(v37 + 10848) = v38 - 1;
    if (v35 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v35) = v57;
    }
    *((_QWORD *)__src + v35) = v39;
    v35 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    --v36;
  }
  while (v36);
  sub_22F3EB308((char *)a2, __src, v35);
  LODWORD(v40) = 0;
  LODWORD(v57) = 0;
  v41 = v24;
  do
  {
    v42 = *(_QWORD *)(*a1 + 8);
    v43 = *(unsigned int *)(v42 + 10848);
    v44 = *(_QWORD *)(*(_QWORD *)(v42 + 10840) + 8 * v43 - 8);
    *(_DWORD *)(v42 + 10848) = v43 - 1;
    if (v40 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v40) = v57;
    }
    *((_QWORD *)__src + v40) = v44;
    v40 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    --v41;
  }
  while (v41);
  sub_22F3EB328((char *)a2, __src, v40);
  LODWORD(v45) = 0;
  LODWORD(v57) = 0;
  v46 = v24;
  do
  {
    v47 = *(_QWORD *)(*a1 + 8);
    v48 = *(unsigned int *)(v47 + 10848);
    v49 = *(_QWORD *)(*(_QWORD *)(v47 + 10840) + 8 * v48 - 8);
    *(_DWORD *)(v47 + 10848) = v48 - 1;
    if (v45 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v45) = v57;
    }
    *((_QWORD *)__src + v45) = v49;
    v45 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    --v46;
  }
  while (v46);
  sub_22F3EB34C((char *)a2, __src, v45);
  LODWORD(v50) = 0;
  LODWORD(v57) = 0;
  do
  {
    v51 = *(_QWORD *)(*a1 + 8);
    v52 = *(unsigned int *)(v51 + 10848);
    v53 = *(_QWORD *)(*(_QWORD *)(v51 + 10840) + 8 * v52 - 8);
    *(_DWORD *)(v51 + 10848) = v52 - 1;
    if (v50 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v50) = v57;
    }
    *((_QWORD *)__src + v50) = v53;
    v50 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    --v24;
  }
  while (v24);
LABEL_31:
  sub_22F3EB550((char *)a2, __src, v50);
  if (__src != v58)
    free(__src);
}

void sub_22F2B7880(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _QWORD v70[17];

  v70[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 24;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v6 + 10840);
  v8 = *(unsigned int *)(v6 + 10848);
  v9 = *(_QWORD *)(v7 + 8 * v8 - 8);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = v9;
  *(_DWORD *)(v4 + 8) = v12;
  v13 = *(_QWORD *)(v7 + 8 * (v8 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v8 - 2;
  *(_QWORD *)(v4 + 16) = v13;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(v11 + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v6, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v18, v19, v16 >> 1);
  v21 = *a1;
  v22 = *(unsigned int *)(*a1 + 24);
  v23 = *(_QWORD *)(*a1 + 32);
  *(_DWORD *)(a2 + 48) = *(_QWORD *)(v23 + 8 * v22);
  v24 = *(_QWORD *)(v21 + 8);
  v25 = *(_QWORD *)(v21 + 16);
  *(_DWORD *)(v21 + 24) = v22 + 2;
  HIDWORD(v16) = *(_QWORD *)(v23 + 8 * (v22 + 1));
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v24, v25, v16 >> 1);
  v26 = *(_DWORD *)(a2 + 16);
  v64 = 0;
  if (v26 < 0x11)
  {
    if (!v26)
    {
      sub_22F3EA654((char *)a2, v70, 0);
      sub_22F3EA670((char *)a2, v70, 0);
      sub_22F3EA690((char *)a2, v70, 0);
      v47 = 0;
      goto LABEL_27;
    }
    v27 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = 0;
  }
  v28 = v26;
  do
  {
    v29 = *(_QWORD *)(*a1 + 8);
    v30 = *(unsigned int *)(v29 + 10848);
    v31 = *(_QWORD *)(*(_QWORD *)(v29 + 10840) + 8 * v30 - 8);
    *(_DWORD *)(v29 + 10848) = v30 - 1;
    if (v27 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v64;
    }
    v70[v27] = v31;
    v27 = ++v64;
    --v28;
  }
  while (v28);
  if (v27)
    memmove((void *)(a2 + 64), v70, 8 * v27);
  LODWORD(v32) = 0;
  v65 = 0;
  v33 = v26;
  do
  {
    v34 = *(_QWORD *)(*a1 + 8);
    v35 = *(unsigned int *)(v34 + 10848);
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 10840) + 8 * v35 - 8);
    *(_DWORD *)(v34 + 10848) = v35 - 1;
    if (v32 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v32) = v65;
    }
    v70[v32] = v36;
    v32 = ++v65;
    --v33;
  }
  while (v33);
  sub_22F3EA654((char *)a2, v70, v32);
  LODWORD(v37) = 0;
  v66 = 0;
  v38 = v26;
  do
  {
    v39 = *(_QWORD *)(*a1 + 8);
    v40 = *(unsigned int *)(v39 + 10848);
    v41 = *(_QWORD *)(*(_QWORD *)(v39 + 10840) + 8 * v40 - 8);
    *(_DWORD *)(v39 + 10848) = v40 - 1;
    if (v37 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v37) = v66;
    }
    v70[v37] = v41;
    v37 = ++v66;
    --v38;
  }
  while (v38);
  sub_22F3EA670((char *)a2, v70, v37);
  LODWORD(v42) = 0;
  v67 = 0;
  v43 = v26;
  do
  {
    v44 = *(_QWORD *)(*a1 + 8);
    v45 = *(unsigned int *)(v44 + 10848);
    v46 = *(_QWORD *)(*(_QWORD *)(v44 + 10840) + 8 * v45 - 8);
    *(_DWORD *)(v44 + 10848) = v45 - 1;
    if (v42 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v42) = v67;
    }
    v70[v42] = v46;
    v42 = ++v67;
    --v43;
  }
  while (v43);
  sub_22F3EA690((char *)a2, v70, v42);
  LODWORD(v47) = 0;
  v68 = 0;
  v48 = v26;
  do
  {
    v49 = *(_QWORD *)(*a1 + 8);
    v50 = *(unsigned int *)(v49 + 10848);
    v51 = *(_QWORD *)(*(_QWORD *)(v49 + 10840) + 8 * v50 - 8);
    *(_DWORD *)(v49 + 10848) = v50 - 1;
    if (v47 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v47) = v68;
    }
    v70[v47] = v51;
    v47 = ++v68;
    --v48;
  }
  while (v48);
LABEL_27:
  sub_22F3EA6B4((char *)a2, v70, v47);
  v52 = *(_QWORD *)(*a1 + 8);
  v53 = *(unsigned int *)(v52 + 10848);
  v54 = *(_QWORD *)(*(_QWORD *)(v52 + 10840) + 8 * v53 - 8);
  *(_DWORD *)(v52 + 10848) = v53 - 1;
  v55 = a2
      + 8 * *(unsigned int *)(a2 + 16)
      + 8 * *(unsigned int *)(a2 + 16)
      + 8 * *(unsigned int *)(a2 + 16)
      + 8 * *(unsigned int *)(a2 + 16)
      + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)(v55 + 64) = v54;
  v56 = *(_QWORD *)(*a1 + 8);
  v57 = *(unsigned int *)(v56 + 10848);
  v58 = *(_QWORD *)(*(_QWORD *)(v56 + 10840) + 8 * v57 - 8);
  *(_DWORD *)(v56 + 10848) = v57 - 1;
  *(_QWORD *)(v55 + 72) = v58;
  v69 = 0;
  if (v26 == -1)
  {
    v59 = 0;
  }
  else
  {
    LODWORD(v59) = 0;
    v60 = v26 + 1;
    do
    {
      v61 = *(_QWORD *)(*a1 + 8);
      v62 = *(unsigned int *)(v61 + 10848);
      v63 = *(_QWORD *)(*(_QWORD *)(v61 + 10840) + 8 * v62 - 8);
      *(_DWORD *)(v61 + 10848) = v62 - 1;
      if (v59 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v59) = v69;
      }
      v70[v59] = v63;
      v59 = ++v69;
      --v60;
    }
    while (v60);
  }
  sub_22F3EA940((char *)a2, v70, v59);
}

void sub_22F2B7DC4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  a2[5] = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = a2[4];
  v21 = 0;
  if (v13 < 0x11)
  {
    if (!v13)
      goto LABEL_8;
    v14 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = 0;
  }
  do
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    if (v14 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v17;
    v14 = ++v21;
    --v13;
  }
  while (v13);
  if (v14)
    memmove(a2 + 6, v22, 8 * v14);
LABEL_8:
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(unsigned int *)(v18 + 10848);
  v20 = *(_QWORD *)(*(_QWORD *)(v18 + 10840) + 8 * v19 - 8);
  *(_DWORD *)(v18 + 10848) = v19 - 1;
  *(_QWORD *)&a2[2 * a2[4] + 6] = v20;
}

void sub_22F2B7F84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  _QWORD v33[17];

  v33[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_DWORD *)(a2 + 16);
  v29 = 0;
  if (v9 < 0x11)
  {
    if (!v9)
    {
      sub_22F3EA3DC((char *)a2, v33, 0);
      sub_22F3EAC64((char *)a2, v33, 0);
      v25 = 0;
      goto LABEL_21;
    }
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = 0;
  }
  v11 = v9;
  do
  {
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(unsigned int *)(v12 + 10848);
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v12 + 10848) = v13 - 1;
    if (v10 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v29;
    }
    v33[v10] = v14;
    v10 = ++v29;
    --v11;
  }
  while (v11);
  if (v10)
    memmove((void *)(a2 + 24), v33, 8 * v10);
  LODWORD(v15) = 0;
  v30 = 0;
  v16 = v9;
  do
  {
    v17 = *(_QWORD *)(*a1 + 8);
    v18 = *(unsigned int *)(v17 + 10848);
    v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
    *(_DWORD *)(v17 + 10848) = v18 - 1;
    if (v15 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v15) = v30;
    }
    v33[v15] = v19;
    v15 = ++v30;
    --v16;
  }
  while (v16);
  sub_22F3EA3DC((char *)a2, v33, v15);
  LODWORD(v20) = 0;
  v31 = 0;
  v21 = v9;
  do
  {
    v22 = *(_QWORD *)(*a1 + 8);
    v23 = *(unsigned int *)(v22 + 10848);
    v24 = *(_QWORD *)(*(_QWORD *)(v22 + 10840) + 8 * v23 - 8);
    *(_DWORD *)(v22 + 10848) = v23 - 1;
    if (v20 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v20) = v31;
    }
    v33[v20] = v24;
    v20 = ++v31;
    --v21;
  }
  while (v21);
  sub_22F3EAC64((char *)a2, v33, v20);
  LODWORD(v25) = 0;
  v32 = 0;
  do
  {
    v26 = *(_QWORD *)(*a1 + 8);
    v27 = *(unsigned int *)(v26 + 10848);
    v28 = *(_QWORD *)(*(_QWORD *)(v26 + 10840) + 8 * v27 - 8);
    *(_DWORD *)(v26 + 10848) = v27 - 1;
    if (v25 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v25) = v32;
    }
    v33[v25] = v28;
    v25 = ++v32;
    --v9;
  }
  while (v9);
LABEL_21:
  sub_22F3EAC84((char *)a2, v33, v25);
}

void sub_22F2B8294(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  sub_22F3EBBA0((uint64_t)a2, v11);
  v12 = *a1;
  v13 = *(unsigned int *)(*a1 + 24);
  v14 = *(_QWORD *)(*a1 + 32);
  a2[5] = *(_QWORD *)(v14 + 8 * v13);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v12 + 16);
  *(_DWORD *)(v12 + 24) = v13 + 2;
  HIDWORD(v8) = *(_QWORD *)(v14 + 8 * (v13 + 1));
  LODWORD(v8) = HIDWORD(v8);
  a2[6] = sub_22E77BAB4(v15, v16, v8 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v8) = HIDWORD(v8);
  a2[7] = sub_22E77BAB4(v18, v19, v8 >> 1);
  v21 = a2[4];
  v31 = 0;
  if (v21 < 0x11)
  {
    if (!v21)
      goto LABEL_8;
    v22 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = 0;
  }
  do
  {
    v23 = *(_QWORD *)(*a1 + 8);
    v24 = *(unsigned int *)(v23 + 10848);
    v25 = *(_QWORD *)(*(_QWORD *)(v23 + 10840) + 8 * v24 - 8);
    *(_DWORD *)(v23 + 10848) = v24 - 1;
    if (v22 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = v31;
    }
    v32[v22] = v25;
    v22 = ++v31;
    --v21;
  }
  while (v21);
  if (v22)
    memmove(a2 + 10, v32, 8 * v22);
LABEL_8:
  v26 = a2[8];
  if (v26)
  {
    for (i = 0; i != v26; ++i)
    {
      v28 = *(_QWORD *)(*a1 + 8);
      v29 = *(unsigned int *)(v28 + 10848);
      v30 = *(_QWORD *)(*(_QWORD *)(v28 + 10840) + 8 * v29 - 8);
      *(_DWORD *)(v28 + 10848) = v29 - 1;
      sub_22F3EBBB0((uint64_t)a2, i, v30);
    }
  }
}

uint64_t sub_22F2B84BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v4 = a2 + 16;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v6 + 10840);
  v9 = *(unsigned int *)(v6 + 10848);
  v10 = *(unsigned int *)(v5 + 24);
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = *(_QWORD *)(v8 + 8 * v9 - 8);
  *(_DWORD *)(v4 + 8) = v12;
  *(_DWORD *)(v5 + 24) = v10 + 2;
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(v11 + 8 * (v10 + 1));
  v13 = *(_QWORD *)(v8 + 8 * (v9 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v9 - 2;
  *(_QWORD *)(a2 + 40) = v13;
  *(_DWORD *)(v5 + 24) = v10 + 3;
  HIDWORD(v14) = *(_QWORD *)(v11 + 8 * (v10 + 2));
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 36) = sub_22E77BAB4(v6, v7, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v16, v17, v14 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

void sub_22F2B8580(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void *__src;
  uint64_t v68;
  _BYTE v69[512];
  _DWORD *v70;
  uint64_t v71;
  _BYTE v72[128];
  _DWORD *v73;
  uint64_t v74;
  _BYTE v75[64];
  _QWORD *v76;
  uint64_t v77;
  _BYTE v78[128];
  _QWORD *v79;
  uint64_t v80;
  _BYTE v81[128];
  _QWORD *v82;
  uint64_t v83;
  _QWORD v84[18];

  v84[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  v9 = 0;
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  do
  {
    v10 = *a1;
    v11 = *(unsigned int *)(*a1 + 24);
    v12 = *(_QWORD *)(*a1 + 32);
    *(_DWORD *)(a2 + v9 + 80) = *(_QWORD *)(v12 + 8 * v11);
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v10 + 16);
    *(_DWORD *)(v10 + 24) = v11 + 2;
    HIDWORD(v15) = *(_QWORD *)(v12 + 8 * (v11 + 1));
    LODWORD(v15) = HIDWORD(v15);
    *(_DWORD *)(a2 + v9 + 100) = sub_22E77BAB4(v13, v14, v15 >> 1);
    v9 += 4;
  }
  while (v9 != 20);
  *(_QWORD *)(a2 + 40) = sub_22E7823B4(*a1);
  *(_QWORD *)(a2 + 48) = v16;
  sub_22E786254(*a1, (uint64_t)&v65);
  *(_OWORD *)(a2 + 56) = v65;
  *(_QWORD *)(a2 + 72) = v66;
  v17 = *a1;
  v18 = *(unsigned int *)(*a1 + 24);
  v19 = *(_QWORD *)(*a1 + 32);
  *(_DWORD *)(a2 + 120) = *(_QWORD *)(v19 + 8 * v18);
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_QWORD *)(v17 + 16);
  *(_DWORD *)(v17 + 24) = v18 + 2;
  HIDWORD(v22) = *(_QWORD *)(v19 + 8 * (v18 + 1));
  LODWORD(v22) = HIDWORD(v22);
  *(_DWORD *)(a2 + 128) = sub_22E77BAB4(v20, v21, v22 >> 1);
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 8);
  v25 = *(_QWORD *)(*a1 + 16);
  v26 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v23 + 24) = v26 + 1;
  HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26);
  LODWORD(v22) = HIDWORD(v22);
  *(_DWORD *)(a2 + 132) = sub_22E77BAB4(v24, v25, v22 >> 1);
  v27 = *(_DWORD *)(a2 + 16);
  v28 = *(_DWORD *)(a2 + 20);
  v30 = *(_DWORD *)(a2 + 24);
  v29 = *(_DWORD *)(a2 + 28);
  v82 = v84;
  v83 = 0x1000000000;
  if (v27 < 0x11)
  {
    v31 = v27;
    if (!v27)
    {
      v79 = v81;
      v80 = 0x1000000000;
      goto LABEL_21;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = v27;
  }
  do
  {
    v32 = *(_QWORD *)(*a1 + 8);
    if (*(_DWORD *)(v32 + 10984) == 3)
    {
      v59 = *(unsigned int *)(v32 + 10848);
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 10840) + 8 * v59 - 8);
      *(_DWORD *)(v32 + 10848) = v59 - 1;
    }
    else
    {
      v33 = sub_22E7B94C8(v32, *(_QWORD *)(*a1 + 16));
    }
    v34 = v83;
    if (v83 >= (unint64_t)HIDWORD(v83))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v34 = v83;
    }
    v82[v34] = v33;
    v35 = v83 + 1;
    LODWORD(v83) = v83 + 1;
    --v31;
  }
  while (v31);
  if (v35)
    memmove((void *)(a2 + 136), v82, 8 * v35);
  v79 = v81;
  v80 = 0x1000000000;
  if (v27 > 0x10)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  do
  {
    v36 = *(_QWORD *)(*a1 + 8);
    if (*(_DWORD *)(v36 + 10984) == 3)
    {
      v60 = *(unsigned int *)(v36 + 10848);
      v37 = *(_QWORD *)(*(_QWORD *)(v36 + 10840) + 8 * v60 - 8);
      *(_DWORD *)(v36 + 10848) = v60 - 1;
    }
    else
    {
      v37 = sub_22E7B94C8(v36, *(_QWORD *)(*a1 + 16));
    }
    v38 = v80;
    if (v80 >= (unint64_t)HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v80;
    }
    v79[v38] = v37;
    v39 = v80 + 1;
    LODWORD(v80) = v80 + 1;
    --v27;
  }
  while (v27);
  if (v39)
    memmove((void *)(a2 + 8 * *(unsigned int *)(a2 + 16) + 136), v79, 8 * v39);
LABEL_21:
  v76 = v78;
  v77 = 0x1000000000;
  if (v28 < 0x11)
  {
    v40 = v28;
    if (!v28)
    {
      v73 = v75;
      v74 = 0x1000000000;
      goto LABEL_40;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = v28;
  }
  do
  {
    v41 = *(_QWORD *)(*a1 + 8);
    v42 = sub_22E779F8C(v41, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v43 = sub_22E77F870(v41, v42);
    v44 = v77;
    if (v77 >= (unint64_t)HIDWORD(v77))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = v77;
    }
    v76[v44] = v43;
    v45 = v77 + 1;
    LODWORD(v77) = v77 + 1;
    --v40;
  }
  while (v40);
  if (v45)
    memmove((void *)(a2 + 8 * (2 * *(_DWORD *)(a2 + 16)) + 136), v76, 8 * v45);
  v73 = v75;
  v74 = 0x1000000000;
  if (v28 <= 0x10)
  {
    v46 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = v74;
  }
  do
  {
    v47 = *a1;
    v48 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v47 + 24) = v48 + 1;
    v49 = *(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v48);
    if (v46 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v46 = v74;
    }
    v73[v46] = v49;
    v46 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    --v28;
  }
  while (v28);
  if (v46)
    memmove((void *)(a2 + 8 * (2 * *(_DWORD *)(a2 + 16)) + 8 * *(unsigned int *)(a2 + 20) + 136), v73, 4 * v46);
LABEL_40:
  v70 = v72;
  v71 = 0x2000000000;
  if (v30 < 0x21)
  {
    if (!v30)
      goto LABEL_47;
    v50 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = v71;
  }
  do
  {
    v51 = *a1;
    v52 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v51 + 24) = v52 + 1;
    v53 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 8 * v52);
    if (v50 >= HIDWORD(v71))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = v71;
    }
    v70[v50] = v53;
    v50 = v71 + 1;
    LODWORD(v71) = v71 + 1;
    --v30;
  }
  while (v30);
  if (v50)
    memmove((void *)(a2+ 8 * (2 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * *(unsigned int *)(a2 + 20)+ 136), v70, 4 * v50);
LABEL_47:
  __src = v69;
  v68 = 0x2000000000;
  if (v29 < 0x21)
  {
    if (!v29)
      goto LABEL_56;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v64 = 0;
    v54 = *a1;
    v55 = *(_QWORD *)(*a1 + 8);
    if (*(_DWORD *)(v55 + 10984) == 3)
    {
      v61 = *(unsigned int *)(v55 + 10848);
      v56 = *(_QWORD *)(*(_QWORD *)(v55 + 10840) + 8 * v61 - 8);
      *(_DWORD *)(v55 + 10848) = v61 - 1;
    }
    else
    {
      v56 = sub_22E7B94C8(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v54 + 16));
      v54 = *a1;
      v55 = *(_QWORD *)(*a1 + 8);
    }
    v63 = 0;
    v64 = v56;
    v57 = sub_22E779F8C(v55, *(_QWORD *)(v54 + 16), v54 + 32, (_DWORD *)(v54 + 24));
    v63 = sub_22E77F870(v55, v57);
    v62 = 0;
    sub_22F2B8C7C((uint64_t)&__src, &v64, &v63, &v62);
    --v29;
  }
  while (v29);
  v58 = __src;
  if ((_DWORD)v68)
  {
    memmove((void *)((a2+ 8 * (2 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * (*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 20))+ 143) & 0xFFFFFFFFFFFFFFF8), __src, 16 * v68);
    v58 = __src;
  }
  if (v58 != v69)
    free(v58);
LABEL_56:
  if (v70 != (_DWORD *)v72)
    free(v70);
  if (v73 != (_DWORD *)v75)
    free(v73);
  if (v76 != (_QWORD *)v78)
    free(v76);
  if (v79 != (_QWORD *)v81)
    free(v79);
  if (v82 != v84)
    free(v82);
}

uint64_t sub_22F2B8C7C(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22E7947B8(a1, a2, a3, a4);
  v6 = *(_QWORD *)a1;
  v7 = *a3;
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v5) = *a2 & 0xFFFFFFFFFFFFFFFDLL | (2 * *a4);
  if (v7)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_QWORD *)a1;
  }
  else
  {
    v9 = v6;
    v8 = v5;
  }
  *(_QWORD *)(v6 + 16 * v5 + 8) = v7;
  v10 = v8 + 1;
  *(_DWORD *)(a1 + 8) = v10;
  return v9 + 16 * v10 - 16;
}

void sub_22F2B8D1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  *(_QWORD *)(a2 + 24) = v15;
  v16 = *(_DWORD *)(a2 + 16);
  v21 = 0;
  if (v16 < 0x11)
  {
    if (!v16)
      return;
    v17 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = 0;
  }
  do
  {
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = *(unsigned int *)(v18 + 10848);
    v20 = *(_QWORD *)(*(_QWORD *)(v18 + 10840) + 8 * v19 - 8);
    *(_DWORD *)(v18 + 10848) = v19 - 1;
    if (v17 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v21;
    }
    v22[v17] = v20;
    v17 = ++v21;
    --v16;
  }
  while (v16);
  if (v17)
    memmove((void *)(a2 + 40), v22, 8 * v17);
}

uint64_t sub_22F2B8ECC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v4 = a2 + 16;
  if (!a2)
    v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v6 + 10840);
  v9 = *(unsigned int *)(v6 + 10848);
  v10 = *(unsigned int *)(v5 + 24);
  v11 = *(_QWORD *)(v5 + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)v4 = *(_QWORD *)(v8 + 8 * v9 - 8);
  *(_DWORD *)(v4 + 8) = v12;
  *(_DWORD *)(v5 + 24) = v10 + 2;
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(v11 + 8 * (v10 + 1));
  v13 = *(_QWORD *)(v8 + 8 * (v9 - 1) - 8);
  *(_DWORD *)(v6 + 10848) = v9 - 2;
  *(_QWORD *)(a2 + 48) = v13;
  *(_DWORD *)(v5 + 24) = v10 + 3;
  HIDWORD(v14) = *(_QWORD *)(v11 + 8 * (v10 + 2));
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v6, v7, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 36) = sub_22E77BAB4(v16, v17, v14 >> 1);
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(*a1 + 16);
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v19 + 24) = v22 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v20, v21, v14 >> 1);
  *(_DWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_22F2B8FB8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  a2[6] = *(_QWORD *)(v6 + 8 * v5);
  a2[4] = *(_QWORD *)(v6 + 8 * (v5 + 1));
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 3;
  HIDWORD(v9) = *(_QWORD *)(v6 + 8 * (v5 + 2));
  LODWORD(v9) = HIDWORD(v9);
  a2[3] = sub_22E77BAB4(v7, v8, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  a2[5] = sub_22E77BAB4(v11, v12, v9 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v15, v16, v9 >> 1);
  a2[7] = result;
  return result;
}

void sub_22F2B9068(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[512];
  void *v69;
  uint64_t v70;
  _BYTE v71[128];
  void *v72;
  uint64_t v73;
  _BYTE v74[64];
  void *v75;
  uint64_t v76;
  _BYTE v77[128];
  void *__src;
  uint64_t v79;
  _BYTE v80[128];
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[18];

  v83[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  v9 = sub_22E77BAB4(v5, v6, v8 >> 1);
  v10 = 0;
  *(_DWORD *)(a2 + 12) = v9;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = *a1;
    v14 = *(unsigned int *)(*a1 + 24);
    v15 = *(_QWORD *)(*a1 + 32);
    v16 = a2 + 4 * v10;
    *(_DWORD *)(v16 + 80) = *(_QWORD *)(v15 + 8 * v14);
    v17 = *(_QWORD *)(v13 + 8);
    v18 = *(_QWORD *)(v13 + 16);
    *(_DWORD *)(v13 + 24) = v14 + 2;
    HIDWORD(v19) = *(_QWORD *)(v15 + 8 * (v14 + 1));
    LODWORD(v19) = HIDWORD(v19);
    v20 = sub_22E77BAB4(v17, v18, v19 >> 1);
    v11 = 0;
    *(_DWORD *)(v16 + 88) = v20;
    v10 = 1;
  }
  while ((v12 & 1) != 0);
  *(_QWORD *)(a2 + 40) = sub_22E7823B4(*a1);
  *(_QWORD *)(a2 + 48) = v21;
  sub_22E786254(*a1, (uint64_t)&v64);
  *(_OWORD *)(a2 + 56) = v64;
  *(_QWORD *)(a2 + 72) = v65;
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v26) = HIDWORD(v26);
  *(_DWORD *)(a2 + 96) = sub_22E77BAB4(v23, v24, v26 >> 1);
  v27 = *(_DWORD *)(a2 + 16);
  v28 = *(_DWORD *)(a2 + 20);
  v30 = *(_DWORD *)(a2 + 24);
  v29 = *(_DWORD *)(a2 + 28);
  v81 = v83;
  v82 = 0x1000000000;
  if (v27 < 0x11)
  {
    if (!v27)
    {
      __src = v80;
      v79 = 0x1000000000;
      goto LABEL_21;
    }
    v31 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = v82;
  }
  v32 = v27;
  do
  {
    v33 = *(_QWORD *)(*a1 + 8);
    v34 = *(unsigned int *)(v33 + 10848);
    v35 = *(_QWORD *)(*(_QWORD *)(v33 + 10840) + 8 * v34 - 8);
    *(_DWORD *)(v33 + 10848) = v34 - 1;
    if (v31 >= HIDWORD(v82))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = v82;
    }
    v81[v31] = v35;
    v31 = v82 + 1;
    LODWORD(v82) = v82 + 1;
    --v32;
  }
  while (v32);
  if (v31)
    memmove((void *)(a2 + 104), v81, 8 * v31);
  __src = v80;
  v79 = 0x1000000000;
  if (v27 <= 0x10)
  {
    v36 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = v79;
  }
  do
  {
    v37 = *(_QWORD *)(*a1 + 8);
    v38 = *(unsigned int *)(v37 + 10848);
    v39 = *(_QWORD *)(*(_QWORD *)(v37 + 10840) + 8 * v38 - 8);
    *(_DWORD *)(v37 + 10848) = v38 - 1;
    if (v36 >= HIDWORD(v79))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = v79;
    }
    *((_QWORD *)__src + v36) = v39;
    v36 = v79 + 1;
    LODWORD(v79) = v79 + 1;
    --v27;
  }
  while (v27);
  if (v36)
    memmove((void *)(a2 + 8 * *(unsigned int *)(a2 + 16) + 104), __src, 8 * v36);
LABEL_21:
  v75 = v77;
  v76 = 0x1000000000;
  if (v28 < 0x11)
  {
    v40 = v28;
    if (!v28)
    {
      v72 = v74;
      v73 = 0x1000000000;
      goto LABEL_38;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = v28;
  }
  do
  {
    v41 = *(_QWORD *)(*a1 + 8);
    v42 = sub_22E779F8C(v41, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v43 = sub_22E77F870(v41, v42);
    v44 = v76;
    if (v76 >= (unint64_t)HIDWORD(v76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = v76;
    }
    *((_QWORD *)v75 + v44) = v43;
    v45 = v76 + 1;
    LODWORD(v76) = v76 + 1;
    --v40;
  }
  while (v40);
  if (v45)
    memmove((void *)(a2 + 8 * (2 * *(_DWORD *)(a2 + 16)) + 104), v75, 8 * v45);
  v72 = v74;
  v73 = 0x1000000000;
  if (v28 <= 0x10)
  {
    v46 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = v73;
  }
  do
  {
    v47 = *a1;
    v48 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v47 + 24) = v48 + 1;
    v49 = *(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v48);
    if (v46 >= HIDWORD(v73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v46 = v73;
    }
    *((_DWORD *)v72 + v46) = v49;
    v46 = v73 + 1;
    LODWORD(v73) = v73 + 1;
    --v28;
  }
  while (v28);
  if (v46)
    memmove((void *)(a2 + 8 * (2 * *(_DWORD *)(a2 + 16)) + 8 * *(unsigned int *)(a2 + 20) + 104), v72, 4 * v46);
LABEL_38:
  v69 = v71;
  v70 = 0x2000000000;
  if (v30 < 0x21)
  {
    if (!v30)
      goto LABEL_45;
    v50 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = v70;
  }
  do
  {
    v51 = *a1;
    v52 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v51 + 24) = v52 + 1;
    v53 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 8 * v52);
    if (v50 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = v70;
    }
    *((_DWORD *)v69 + v50) = v53;
    v50 = v70 + 1;
    LODWORD(v70) = v70 + 1;
    --v30;
  }
  while (v30);
  if (v50)
    memmove((void *)(a2+ 8 * (2 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * *(unsigned int *)(a2 + 20)+ 104), v69, 4 * v50);
LABEL_45:
  v66 = v68;
  v67 = 0x2000000000;
  if (v29 < 0x21)
  {
    if (!v29)
      goto LABEL_52;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v54 = (_QWORD *)(*a1 + 32);
    v55 = *v54;
    v56 = *(_QWORD *)(*a1 + 8);
    v57 = *(unsigned int *)(v56 + 10848);
    v58 = *(_QWORD *)(*(_QWORD *)(v56 + 10840) + 8 * v57 - 8);
    *(_DWORD *)(v56 + 10848) = v57 - 1;
    v59 = *((unsigned int *)v54 - 2);
    *((_DWORD *)v54 - 2) = v59 + 1;
    v60 = *(_QWORD *)(v55 + 8 * v59) != 0;
    v61 = sub_22E779F8C(v56, *(v54 - 2), (uint64_t)v54, (_DWORD *)v54 - 2);
    v62 = sub_22E77F870(v56, v61);
    sub_22F2B9700((uint64_t)&v66, v58, v62, v60);
    --v29;
  }
  while (v29);
  v63 = v66;
  if ((_DWORD)v67)
  {
    memmove((void *)((a2+ 8 * (2 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * (*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 20))+ 111) & 0xFFFFFFFFFFFFFFF8), v66, 16 * v67);
    v63 = v66;
  }
  if (v63 != v68)
    free(v63);
LABEL_52:
  if (v69 != v71)
    free(v69);
  if (v72 != v74)
    free(v72);
  if (v75 != v77)
    free(v75);
  if (__src != v80)
    free(__src);
  if (v81 != v83)
    free(v81);
}

uint64_t sub_22F2B9700(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;

  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
    return sub_22E79485C(a1, a2, a3, a4);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v5) = a2 & 0xFFFFFFFFFFFFFFFDLL | (2 * (a4 != 0));
  if (a3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    result = 0;
    v8 = v5;
  }
  *(_QWORD *)(v6 + 16 * v5 + 8) = result;
  *(_DWORD *)(a1 + 8) = v8 + 1;
  return result;
}

void sub_22F2B9790(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  void *__src;
  uint64_t v51;
  _BYTE v52[512];
  _DWORD *v53;
  uint64_t v54;
  _BYTE v55[128];
  _DWORD *v56;
  uint64_t v57;
  _BYTE v58[64];
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[128];
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[18];

  v64[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 20);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v62 = v64;
  v63 = 0x1000000000;
  if (v9 < 0x11)
  {
    if (!v9)
    {
      sub_22F3EBD54((char *)a2, v64, 0);
      v23 = 0;
      LODWORD(v63) = 0;
      goto LABEL_17;
    }
    v13 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v63;
  }
  v14 = v9;
  do
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    if (v13 >= HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v63;
    }
    v62[v13] = v17;
    v13 = v63 + 1;
    LODWORD(v63) = v63 + 1;
    --v14;
  }
  while (v14);
  if (v13)
    memmove((void *)(a2 + 80), v62, 8 * v13);
  LODWORD(v18) = 0;
  LODWORD(v63) = 0;
  v19 = v9;
  do
  {
    v20 = *(_QWORD *)(*a1 + 8);
    v21 = *(unsigned int *)(v20 + 10848);
    v22 = *(_QWORD *)(*(_QWORD *)(v20 + 10840) + 8 * v21 - 8);
    *(_DWORD *)(v20 + 10848) = v21 - 1;
    if (v18 >= HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v18) = v63;
    }
    v62[v18] = v22;
    v18 = (v63 + 1);
    LODWORD(v63) = v63 + 1;
    --v19;
  }
  while (v19);
  sub_22F3EBD54((char *)a2, v62, v18);
  v23 = 0;
  LODWORD(v63) = 0;
  do
  {
    v24 = *(_QWORD *)(*a1 + 8);
    v25 = *(unsigned int *)(v24 + 10848);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 10840) + 8 * v25 - 8);
    *(_DWORD *)(v24 + 10848) = v25 - 1;
    if (v23 >= HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v63;
    }
    v62[v23] = v26;
    v23 = v63 + 1;
    LODWORD(v63) = v63 + 1;
    --v9;
  }
  while (v9);
LABEL_17:
  sub_22F3EBD70((char *)a2, v62, v23);
  v59 = v61;
  v60 = 0x1000000000;
  if (v10 < 0x11)
  {
    v27 = v10;
    if (!v10)
    {
      v56 = v58;
      v57 = 0x1000000000;
      goto LABEL_36;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v10;
  }
  do
  {
    v28 = *(_QWORD *)(*a1 + 8);
    v29 = sub_22E779F8C(v28, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v30 = sub_22E77F870(v28, v29);
    v31 = v60;
    if (v60 >= (unint64_t)HIDWORD(v60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = v60;
    }
    v59[v31] = v30;
    v32 = v60 + 1;
    LODWORD(v60) = v60 + 1;
    --v27;
  }
  while (v27);
  if (v32)
    memmove((void *)(a2 + 8 * (3 * *(_DWORD *)(a2 + 16)) + 80), v59, 8 * v32);
  v56 = v58;
  v57 = 0x1000000000;
  if (v10 <= 0x10)
  {
    v33 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = v57;
  }
  do
  {
    v34 = *a1;
    v35 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v34 + 24) = v35 + 1;
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v35);
    if (v33 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v33 = v57;
    }
    v56[v33] = v36;
    v33 = v57 + 1;
    LODWORD(v57) = v57 + 1;
    --v10;
  }
  while (v10);
  if (v33)
    memmove((void *)(a2 + 8 * (3 * *(_DWORD *)(a2 + 16)) + 8 * *(unsigned int *)(a2 + 20) + 80), v56, 4 * v33);
LABEL_36:
  v53 = v55;
  v54 = 0x2000000000;
  if (v12 < 0x21)
  {
    if (!v12)
      goto LABEL_43;
    v37 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v37 = v54;
  }
  do
  {
    v38 = *a1;
    v39 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v38 + 24) = v39 + 1;
    v40 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v39);
    if (v37 >= HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v54;
    }
    v53[v37] = v40;
    v37 = v54 + 1;
    LODWORD(v54) = v54 + 1;
    --v12;
  }
  while (v12);
  if (v37)
    memmove((void *)(a2+ 8 * (3 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * *(unsigned int *)(a2 + 20)+ 80), v53, 4 * v37);
LABEL_43:
  __src = v52;
  v51 = 0x2000000000;
  if (v11 < 0x21)
  {
    if (!v11)
      goto LABEL_50;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v49 = 0;
    v41 = *a1;
    v42 = *(_QWORD *)(*a1 + 8);
    v43 = *(unsigned int *)(v42 + 10848);
    v44 = *(_QWORD *)(*(_QWORD *)(v42 + 10840) + 8 * v43 - 8);
    *(_DWORD *)(v42 + 10848) = v43 - 1;
    v48 = 0;
    v49 = v44;
    v45 = sub_22E779F8C(v42, *(_QWORD *)(v41 + 16), v41 + 32, (_DWORD *)(v41 + 24));
    v48 = sub_22E77F870(v42, v45);
    v47 = 0;
    sub_22F2B8C7C((uint64_t)&__src, &v49, &v48, &v47);
    --v11;
  }
  while (v11);
  v46 = __src;
  if ((_DWORD)v51)
  {
    memmove((void *)((a2+ 8 * (3 * *(_DWORD *)(a2 + 16))+ 8 * *(unsigned int *)(a2 + 20)+ 4 * (*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 20))+ 87) & 0xFFFFFFFFFFFFFFF8), __src, 16 * v51);
    v46 = __src;
  }
  if (v46 != v52)
    free(v46);
LABEL_50:
  if (v53 != (_DWORD *)v55)
    free(v53);
  if (v56 != (_DWORD *)v58)
    free(v56);
  if (v59 != (_QWORD *)v61)
    free(v59);
  if (v62 != v64)
    free(v62);
}

void sub_22F2B9DAC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  void *__src;
  uint64_t v41;
  _BYTE v42[512];
  _DWORD *v43;
  uint64_t v44;
  _BYTE v45[128];
  _DWORD *v46;
  uint64_t v47;
  _BYTE v48[64];
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[128];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[18];

  v54[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v11 = a2[7];
  v52 = v54;
  v53 = 0x1000000000;
  if (v9 < 0x11)
  {
    if (!v9)
      goto LABEL_8;
    v13 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v53;
  }
  do
  {
    v14 = *(_QWORD *)(*a1 + 8);
    v15 = *(unsigned int *)(v14 + 10848);
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
    *(_DWORD *)(v14 + 10848) = v15 - 1;
    if (v13 >= HIDWORD(v53))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v53;
    }
    v52[v13] = v16;
    v13 = v53 + 1;
    LODWORD(v53) = v53 + 1;
    --v9;
  }
  while (v9);
  if (v13)
    memmove(a2 + 20, v52, 8 * v13);
LABEL_8:
  v49 = v51;
  v50 = 0x1000000000;
  if (v10 < 0x11)
  {
    v17 = v10;
    if (!v10)
    {
      v46 = v48;
      v47 = 0x1000000000;
      goto LABEL_27;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v10;
  }
  do
  {
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = sub_22E779F8C(v18, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v20 = sub_22E77F870(v18, v19);
    v21 = v50;
    if (v50 >= (unint64_t)HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = v50;
    }
    v49[v21] = v20;
    v22 = v50 + 1;
    LODWORD(v50) = v50 + 1;
    --v17;
  }
  while (v17);
  if (v22)
    memmove(&a2[2 * a2[4] + 20], v49, 8 * v22);
  v46 = v48;
  v47 = 0x1000000000;
  if (v10 <= 0x10)
  {
    v23 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v47;
  }
  do
  {
    v24 = *a1;
    v25 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v24 + 24) = v25 + 1;
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8 * v25);
    if (v23 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v47;
    }
    v46[v23] = v26;
    v23 = v47 + 1;
    LODWORD(v47) = v47 + 1;
    --v10;
  }
  while (v10);
  if (v23)
    memmove(&a2[2 * a2[4] + 20 + 2 * a2[5]], v46, 4 * v23);
LABEL_27:
  v43 = v45;
  v44 = 0x2000000000;
  if (v12 < 0x21)
  {
    if (!v12)
      goto LABEL_34;
    v27 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v44;
  }
  do
  {
    v28 = *a1;
    v29 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v28 + 24) = v29 + 1;
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v29);
    if (v27 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v44;
    }
    v43[v27] = v30;
    v27 = v44 + 1;
    LODWORD(v44) = v44 + 1;
    --v12;
  }
  while (v12);
  if (v27)
    memmove(&a2[2 * a2[4] + 20 + 2 * a2[5] + a2[5]], v43, 4 * v27);
LABEL_34:
  __src = v42;
  v41 = 0x2000000000;
  if (v11 < 0x21)
  {
    if (!v11)
      goto LABEL_41;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v39 = 0;
    v31 = *a1;
    v32 = *(_QWORD *)(*a1 + 8);
    v33 = *(unsigned int *)(v32 + 10848);
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 10840) + 8 * v33 - 8);
    *(_DWORD *)(v32 + 10848) = v33 - 1;
    v38 = 0;
    v39 = v34;
    v35 = sub_22E779F8C(v32, *(_QWORD *)(v31 + 16), v31 + 32, (_DWORD *)(v31 + 24));
    v38 = sub_22E77F870(v32, v35);
    v37 = 0;
    sub_22F2B8C7C((uint64_t)&__src, &v39, &v38, &v37);
    --v11;
  }
  while (v11);
  v36 = __src;
  if ((_DWORD)v41)
  {
    memmove((void *)(((unint64_t)&a2[2 * a2[4] + 21 + 2 * a2[5] + a2[6] + a2[5]] + 3) & 0xFFFFFFFFFFFFFFF8), __src, 16 * v41);
    v36 = __src;
  }
  if (v36 != v42)
    free(v36);
LABEL_41:
  if (v43 != (_DWORD *)v45)
    free(v43);
  if (v46 != (_DWORD *)v48)
    free(v46);
  if (v49 != (_QWORD *)v51)
    free(v49);
  if (v52 != v54)
    free(v52);
}

void sub_22F2BA298(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  void *__src;
  uint64_t v41;
  _BYTE v42[512];
  _DWORD *v43;
  uint64_t v44;
  _BYTE v45[128];
  _DWORD *v46;
  uint64_t v47;
  _BYTE v48[64];
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[128];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[18];

  v54[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v11 = a2[7];
  v52 = v54;
  v53 = 0x1000000000;
  if (v9 < 0x11)
  {
    if (!v9)
      goto LABEL_8;
    v13 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v53;
  }
  do
  {
    v14 = *(_QWORD *)(*a1 + 8);
    v15 = *(unsigned int *)(v14 + 10848);
    v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
    *(_DWORD *)(v14 + 10848) = v15 - 1;
    if (v13 >= HIDWORD(v53))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v53;
    }
    v52[v13] = v16;
    v13 = v53 + 1;
    LODWORD(v53) = v53 + 1;
    --v9;
  }
  while (v9);
  if (v13)
    memmove(a2 + 20, v52, 8 * v13);
LABEL_8:
  LODWORD(v53) = 0;
  v49 = v51;
  v50 = 0x1000000000;
  if (v10 < 0x11)
  {
    v17 = v10;
    if (!v10)
    {
      v46 = v48;
      v47 = 0x1000000000;
      goto LABEL_27;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v10;
  }
  do
  {
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = sub_22E779F8C(v18, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v20 = sub_22E77F870(v18, v19);
    v21 = v50;
    if (v50 >= (unint64_t)HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = v50;
    }
    v49[v21] = v20;
    v22 = v50 + 1;
    LODWORD(v50) = v50 + 1;
    --v17;
  }
  while (v17);
  if (v22)
    memmove(&a2[2 * a2[4] + 20], v49, 8 * v22);
  v46 = v48;
  v47 = 0x1000000000;
  if (v10 <= 0x10)
  {
    v23 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v47;
  }
  do
  {
    v24 = *a1;
    v25 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v24 + 24) = v25 + 1;
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8 * v25);
    if (v23 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v47;
    }
    v46[v23] = v26;
    v23 = v47 + 1;
    LODWORD(v47) = v47 + 1;
    --v10;
  }
  while (v10);
  if (v23)
    memmove(&a2[2 * a2[4] + 20 + 2 * a2[5]], v46, 4 * v23);
LABEL_27:
  v43 = v45;
  v44 = 0x2000000000;
  if (v12 < 0x21)
  {
    if (!v12)
      goto LABEL_34;
    v27 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v44;
  }
  do
  {
    v28 = *a1;
    v29 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v28 + 24) = v29 + 1;
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v29);
    if (v27 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v44;
    }
    v43[v27] = v30;
    v27 = v44 + 1;
    LODWORD(v44) = v44 + 1;
    --v12;
  }
  while (v12);
  if (v27)
    memmove(&a2[2 * a2[4] + 20 + 2 * a2[5] + a2[5]], v43, 4 * v27);
LABEL_34:
  __src = v42;
  v41 = 0x2000000000;
  if (v11 < 0x21)
  {
    if (!v11)
      goto LABEL_41;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v39 = 0;
    v31 = *a1;
    v32 = *(_QWORD *)(*a1 + 8);
    v33 = *(unsigned int *)(v32 + 10848);
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 10840) + 8 * v33 - 8);
    *(_DWORD *)(v32 + 10848) = v33 - 1;
    v38 = 0;
    v39 = v34;
    v35 = sub_22E779F8C(v32, *(_QWORD *)(v31 + 16), v31 + 32, (_DWORD *)(v31 + 24));
    v38 = sub_22E77F870(v32, v35);
    v37 = 0;
    sub_22F2B8C7C((uint64_t)&__src, &v39, &v38, &v37);
    --v11;
  }
  while (v11);
  v36 = __src;
  if ((_DWORD)v41)
  {
    memmove((void *)(((unint64_t)&a2[2 * a2[4] + 21 + 2 * a2[5] + a2[6] + a2[5]] + 3) & 0xFFFFFFFFFFFFFFF8), __src, 16 * v41);
    v36 = __src;
  }
  if (v36 != v42)
    free(v36);
LABEL_41:
  if (v43 != (_DWORD *)v45)
    free(v43);
  if (v46 != (_DWORD *)v48)
    free(v46);
  if (v49 != (_QWORD *)v51)
    free(v49);
  if (v52 != v54)
    free(v52);
}

void sub_22F2BA788(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_DWORD *)(a2 + 16);
  v20 = 0;
  if (v9 < 0x11)
  {
    if (!v9)
    {
      v15 = 1;
      goto LABEL_10;
    }
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = 0;
  }
  v11 = v9;
  do
  {
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(unsigned int *)(v12 + 10848);
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v12 + 10848) = v13 - 1;
    if (v10 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v20;
    }
    v22[v10] = v14;
    v10 = ++v20;
    --v11;
  }
  while (v11);
  if (v10)
    memmove((void *)(a2 + 24), v22, 8 * v10);
  v15 = 0;
LABEL_10:
  v21 = 0;
  if (v9 > 0x10)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v16 = 0;
  if ((v15 & 1) == 0)
  {
    do
    {
      v17 = *(_QWORD *)(*a1 + 8);
      v18 = *(unsigned int *)(v17 + 10848);
      v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
      *(_DWORD *)(v17 + 10848) = v18 - 1;
      if (v16 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v21;
      }
      v22[v16] = v19;
      v16 = ++v21;
      --v9;
    }
    while (v9);
  }
  sub_22F3EA3DC((char *)a2, v22, v16);
}

void sub_22F2BA99C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[13];

  v27[12] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_DWORD *)(a2 + 16);
  v25 = v27;
  v26 = 0x400000000;
  if (v9 < 5)
  {
    if (!v9)
    {
      v24 = 0;
      v23 = v27;
      goto LABEL_5;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  do
  {
    v10 = sub_22F2BAB24((uint64_t)&v25);
    v11 = *a1;
    v12 = *(_QWORD *)(*a1 + 8);
    v13 = *(_QWORD *)(v12 + 10840);
    v14 = *(unsigned int *)(v12 + 10848);
    *(_QWORD *)v10 = *(_QWORD *)(v13 + 8 * v14 - 8);
    v15 = *(_QWORD *)(v13 + 8 * (v14 - 1) - 8);
    *(_DWORD *)(v12 + 10848) = v14 - 2;
    *(_QWORD *)(v10 + 8) = v15;
    v16 = *(_QWORD *)(v11 + 16);
    v17 = *(unsigned int *)(v11 + 24);
    *(_DWORD *)(v11 + 24) = v17 + 1;
    HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v17);
    LODWORD(v18) = HIDWORD(v18);
    *(_DWORD *)(v10 + 16) = sub_22E77BAB4(v12, v16, v18 >> 1);
    v19 = *a1;
    v20 = *(_QWORD *)(*a1 + 8);
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v19 + 24) = v22 + 1;
    HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
    LODWORD(v18) = HIDWORD(v18);
    *(_DWORD *)(v10 + 20) = sub_22E77BAB4(v20, v21, v18 >> 1);
    --v9;
  }
  while (v9);
  v23 = v25;
  v24 = v26;
LABEL_5:
  sub_22F3EC6D0(a2, (uint64_t)v23, v24);
  if (v25 != v27)
    free(v25);
}

uint64_t sub_22F2BAB24(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22E794900(a1);
  v2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v1);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  LODWORD(v2) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v2;
  return *(_QWORD *)a1 + 24 * v2 - 24;
}

void sub_22F2BAB64(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  a2[3] = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)&a2[2 * a2[4] + 6] = v11;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v8) = HIDWORD(v8);
  a2[5] = sub_22E77BAB4(v13, v14, v8 >> 1);
  v16 = a2[4];
  v21 = 0;
  if (v16 < 5)
  {
    if (!v16)
      return;
    v17 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = 0;
  }
  do
  {
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = *(unsigned int *)(v18 + 10848);
    v20 = *(_QWORD *)(*(_QWORD *)(v18 + 10840) + 8 * v19 - 8);
    *(_DWORD *)(v18 + 10848) = v19 - 1;
    if (v17 >= 4)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v21;
    }
    v22[v17] = v20;
    v17 = ++v21;
    --v16;
  }
  while (v16);
  if (v17)
    memmove(a2 + 6, v22, 8 * v17);
}

uint64_t sub_22F2BAD1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v2 = sub_22F36FB58(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 128));
  v3 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v3 + 1;
  sub_22F2BF820(v2, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8 * v3));
  v4 = *(_DWORD *)(v2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)v2;
    v6 = *(_QWORD *)v2 + 136 * v4;
    do
    {
      v7 = *(unsigned int *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v5 = *(_QWORD *)(v8 + 8 * v7);
      *(_DWORD *)(a1 + 24) = v7 + 2;
      sub_22F2BFC6C(v5 + 8, *(unsigned int *)(v8 + 8 * (v7 + 1)));
      v9 = *(_DWORD *)(v5 + 16);
      if (v9)
      {
        v10 = *(_QWORD *)(v5 + 8);
        v11 = v10 + 56 * v9;
        do
        {
          v12 = *(unsigned int *)(a1 + 24);
          v13 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(v10 + 8) = *(_QWORD *)(v13 + 8 * v12);
          *(_QWORD *)v10 = 0;
          v14 = v12 + 2;
          *(_DWORD *)(a1 + 24) = v12 + 2;
          if (*(_QWORD *)(v13 + 8 * (v12 + 1)))
          {
            v15 = *(_QWORD *)(a1 + 8);
            if (*(_DWORD *)(v15 + 10984) == 3)
            {
              v24 = *(unsigned int *)(v15 + 10848);
              v16 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v24 - 8);
              *(_DWORD *)(v15 + 10848) = v24 - 1;
            }
            else
            {
              v16 = sub_22E7B94C8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
              v14 = *(_DWORD *)(a1 + 24);
              v13 = *(_QWORD *)(a1 + 32);
            }
            *(_QWORD *)v10 = v16;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          sub_22F2BFD54(v10 + 16, *(unsigned int *)(v13 + 8 * v14));
          v17 = *(unsigned int *)(v10 + 24);
          if ((_DWORD)v17)
          {
            v18 = *(_DWORD **)(v10 + 16);
            v19 = *(_QWORD *)(a1 + 32);
            v20 = *(_DWORD *)(a1 + 24);
            v21 = 24 * v17;
            do
            {
              v22 = *(_QWORD *)(v19 + 8 * v20++);
              *v18 = v22;
              v18 += 6;
              v21 -= 24;
            }
            while (v21);
            *(_DWORD *)(a1 + 24) = v20;
          }
          v10 += 56;
        }
        while (v10 != v11);
      }
      v5 += 136;
    }
    while (v5 != v6);
  }
  return v2;
}

void sub_22F2BAEA4(uint64_t a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 10984) == 3)
      *(_DWORD *)(a1 + 24) += 3;
    v4 = *(unsigned int *)a2;
    v20 = v22;
    v21 = 0x400000000;
    sub_22E4639CC((uint64_t)&v20, v4, 0);
    v5 = *(unsigned int *)a2;
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
        v19[0] = a1;
        v19[1] = v8;
        v9 = sub_22F2B48B0(v19);
        *(_QWORD *)((char *)v20 + v6) = v9;
        v6 += 8;
      }
      while (v7 != v6);
    }
    sub_22F3F3268(a2, v20, v21);
    if (a2[8])
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 10984) == 3)
      {
        v18 = *(unsigned int *)(v10 + 10848);
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v18 - 8);
        *(_DWORD *)(v10 + 10848) = v18 - 1;
      }
      else
      {
        v11 = sub_22E7B94C8(v10, *(_QWORD *)(a1 + 16));
      }
      v12 = *((unsigned int *)a2 + 1);
      *(_QWORD *)&a2[8 * *(unsigned int *)a2 + 16 + 8 * v12] = v11;
    }
    else
    {
      LODWORD(v12) = *((_DWORD *)a2 + 1);
    }
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      do
      {
        v15 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v15 + 10984) == 3)
        {
          v17 = *(unsigned int *)(v15 + 10848);
          v16 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v17 - 8);
          *(_DWORD *)(v15 + 10848) = v17 - 1;
        }
        else
        {
          v16 = sub_22E7B94C8(v15, *(_QWORD *)(a1 + 16));
        }
        *(_QWORD *)(sub_22F3F327C((unsigned int *)a2) + v13) = v16;
        v13 += 8;
      }
      while (v14 != v13);
    }
    if (v20 != v22)
      free(v20);
  }
}

_QWORD *sub_22F2BB05C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FA71E80;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_22F2BB0B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24FA71E80;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2BB128()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2BB140()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2BB158()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2BB16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 160))(a1 + 24);
  v5 = sub_22E785944(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 168))(v4);
  return v5;
}

uint64_t sub_22F2BB1CC(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t sub_22F2BB1D4(uint64_t result)
{
  *(_QWORD *)(result + 88) = 0;
  return result;
}

uint64_t sub_22F2BB1DC(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  if (sub_22E78C8FC((uint64_t)&v6, a1, a2))
    return 0xFFFFFFFFLL;
  else
    return sub_22E78C8FC((uint64_t)&v5, a2, a1);
}

uint64_t *sub_22F2BB230(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = a3;
  *(_BYTE *)(v11 + 24) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2BB328(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_22F41F2C8(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 40 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -2;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 40 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v10;
  return result;
}

double sub_22F2BB3F0(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 24;
    v7 = 32 * v5;
    do
    {
      if (*(_QWORD *)&v6[v7])
      {
        sub_22E3B485C((uint64_t *)&v6[v7]);
        operator delete(*(void **)&v6[v7]);
      }
      v7 -= 32;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

llvm::raw_ostream *sub_22F2BB484(int a1, llvm::raw_ostream *a2)
{
  return sub_22E47DAC0(a2, "clang diagnostic");
}

void *sub_22F2BB498()
{
  return &unk_255E04EB4;
}

BOOL sub_22F2BB4A4(uint64_t a1, void *a2)
{
  return a2 == &unk_255E04EB4 || a2 == (void *)MEMORY[0x24BED5A38];
}

char **sub_22F2BB4C4(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char **result;
  char **v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  result = (char **)sub_22E78D9CC(a1, a2, &v12, &v11, a3);
  if (!*result)
  {
    v7 = result;
    v8 = (char *)operator new(0x58uLL);
    *((_QWORD *)v8 + 4) = v8 + 56;
    *(_OWORD *)(v8 + 40) = xmmword_22F44E330;
    if (*(_QWORD *)(a4 + 8))
      sub_22E3B3B4C((uint64_t)(v8 + 32), a4);
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = v8;
    v10 = (_QWORD *)**a1;
    if (v10)
    {
      *a1 = v10;
      v8 = *v7;
    }
    result = (char **)sub_22E49FD00(a1[1], (uint64_t *)v8);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_22F2BB580(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2BB5EC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2BB5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 56 * v2;
    do
    {
      *(_QWORD *)a2 = a2 + 24;
      *(_OWORD *)(a2 + 8) = xmmword_22F44E330;
      if (*(_QWORD *)(v5 + 8))
        sub_22E3B2DB8(a2, v5);
      v5 += 56;
      a2 += 56;
      v6 -= 56;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 56 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 56);
        if ((void *)(v8 + v9 - 32) != v10)
          free(v10);
        v9 -= 56;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F2BB6A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2BB328((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2BB754(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    *(_QWORD *)(result + 16) = a3[1];
    *(_QWORD *)(result + 24) = a3[2];
    *(_QWORD *)(result + 32) = a3[3];
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F2BB754(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E78E38C(a1, v7);
  v9 = 0;
  sub_22F2BB328((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2BB800(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = -1;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_22F2BB328((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      v9[2] = a2[2];
      v9[3] = a2[3];
      v9[4] = a2[4];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 5;
  }
  return result;
}

uint64_t sub_22F2BB8CC(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(16 * *(unsigned int *)(a1 + 80)));
  sub_22E78E5D4(a1 + 16);
  return a1;
}

uint64_t sub_22F2BB908(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t i;

  *(_QWORD *)a1 = 1;
  v4 = a1 + 72;
  for (i = 8; i != 72; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  sub_22E78E718((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  if (a2[20])
    sub_22E5DE08C(v4, (uint64_t)(a2 + 18));
  return a1;
}

uint64_t sub_22F2BB990(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t i;

  *(_QWORD *)a1 = 1;
  v4 = a1 + 72;
  for (i = 8; i != 72; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  sub_22E78E718((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  if (a2[20])
    sub_22E78E918(v4, (uint64_t)(a2 + 18));
  return a1;
}

void **sub_22F2BBA18(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 96 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 80];
      if (&v6[v3 - 64] != v4)
        free(v4);
      v3 -= 96;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

uint64_t sub_22F2BBAA0(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)result & 1) == 0)
  {
    v1 = result;
    llvm::deallocate_buffer(*(llvm **)(result + 8), (void *)(24 * *(unsigned int *)(result + 16)));
    return v1;
  }
  return result;
}

void **sub_22F2BBAE8(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 40 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 32];
      if (&v6[v3 - 16] != v4)
        free(v4);
      v3 -= 40;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

uint64_t sub_22F2BBB70(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E78EAD4(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F2BBBBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

char **sub_22F2BBC04(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = sub_22F2DFA34(v6);
        MEMORY[0x2348A0E9C](v7, 0x10F2C40804127A3);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F2BBC80(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = (_DWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v6 + 1;
  v8 = *(_QWORD *)(v4 + 8 * v6);
  if (v8 > (unint64_t)a2[3])
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v8; LODWORD(v8) = v8 - 1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = sub_22E779F8C(v9, *(_QWORD *)(a1 + 16), v5, v7);
    v11 = sub_22E77F870(v9, v10);
    v12 = a2[2];
    if (v12 >= a2[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v11;
    ++a2[2];
  }
  return *(_QWORD *)a2;
}

uint64_t sub_22F2BBD68(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 16 * v9 - 4);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 16 * v10 - 4);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v10), (const void *)(*(_QWORD *)a2 + 16 * v10), *(_QWORD *)a2 + 16 * v11 - (*(_QWORD *)a2 + 16 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

_QWORD *sub_22F2BBE84(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2[1];
  if (result[1] != *result)
  {
    v9 = *result;
    v10 = result;
    v12 = result[1];
    v13 = a2[1];
    v11 = a2;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v12 + v6 - 56);
      *(_QWORD *)(v13 + v6 - 48) = v13 + v6 - 32;
      v8 = v13 + v6 - 48;
      *(_QWORD *)(v8 - 8) = v7;
      *(_QWORD *)(v8 + 8) = 0x200000000;
      if (*(_DWORD *)(v12 + v6 - 40))
        sub_22F2BBD68(v8, v12 + v6 - 48);
      v6 -= 56;
    }
    while (v12 + v6 != v9);
    v2 = v13 + v6;
    result = v10;
    a2 = v11;
  }
  a2[1] = v2;
  v3 = *result;
  *result = v2;
  a2[1] = v3;
  v4 = result[1];
  result[1] = a2[2];
  a2[2] = v4;
  v5 = result[2];
  result[2] = a2[3];
  a2[3] = v5;
  *a2 = a2[1];
  return result;
}

void sub_22F2BBF6C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E78FECC((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t *sub_22F2BBFD8(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 33, 8);
  v10 = v9;
  v11 = v9 + 32;
  if (a3)
    memcpy((void *)(v9 + 32), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *(_QWORD *)v10 = a3;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 12) = 100;
  *(_WORD *)(v10 + 24) = 0;
  *i = v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2BC0E4(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE **v8;
  _BYTE **v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = (_QWORD *)(v6 + 32 * *(unsigned int *)(a1 + 8));
  v8 = *(_BYTE ***)a3;
  v9 = *(_BYTE ***)(a3 + 8);
  *v7 = **a2;
  v10 = *v8;
  v11 = *v9;
  v7[1] = v7 + 3;
  ++v7;
  v7[1] = 0x100000000;
  sub_22E5223E0((uint64_t)v7, v10, v11);
  sub_22F2BC1A4((uint64_t *)a1, v6);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_QWORD *)(a1 + 8) = v12;
  return v6 + 32 * v12 - 32;
}

void sub_22F2BC1A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1 + 32 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x100000000;
      if (*(_DWORD *)(v6 + 8))
        sub_22F24C77C(v5 - 16, v6);
      v5 += 32;
      v6 += 32;
    }
    while (v7 + 32 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 32 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 24);
        if ((void *)(v9 + v10 - 8) != v11)
          free(v11);
        v10 -= 32;
      }
      while (v10);
    }
  }
}

_QWORD *sub_22F2BC268(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2BC2D4(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_22F2BC2D4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E791010(a1, v6);
  v8 = 0;
  sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2BC384(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_22F277304(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_22F2BC438(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E791274((__int128 **)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

double sub_22F2BC4A4(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 56 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 56];
      if (&v4[v6 - 32] != v7)
        free(v7);
      v6 -= 56;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

unint64_t sub_22F2BC530(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v2 = *a1;
  v3 = *v2;
  sub_22E786954((uint64_t)v2, (llvm::APInt *)&v14);
  v4 = *a1;
  v5 = (*a1)[1];
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v13 = *(unsigned int *)(v5 + 10848);
    v6 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v5 + 10848) = v13 - 1;
  }
  else
  {
    v6 = (unsigned __int8 *)sub_22E7B94C8(v5, v4[2]);
    v4 = *a1;
    v5 = (*a1)[1];
  }
  v7 = sub_22E78DF24(v5, v4[2], (uint64_t)(v4 + 4), (_DWORD *)v4 + 6);
  v8 = *((unsigned int *)*a1 + 6);
  v9 = (*a1)[4];
  v10 = *(_QWORD *)(v9 + 8 * v8);
  *((_DWORD *)*a1 + 6) = v8 + 2;
  v11 = sub_22EF5FE30(v3, v7, (const llvm::APInt *)&v14, v6, v10, *(_QWORD *)(v9 + 8 * (v8 + 1)) & 7);
  if (v15 >= 0x41 && v14)
    MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
  return v11;
}

unint64_t sub_22F2BC62C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  if (*(_DWORD *)(v3 + 10984) == 3)
  {
    v20 = *(unsigned int *)(v3 + 10848);
    v5 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 10840) + 8 * v20 - 8);
    *(_DWORD *)(v3 + 10848) = v20 - 1;
  }
  else
  {
    v5 = (unsigned __int8 *)sub_22E7B94C8(v3, v2[2]);
    v2 = *a1;
    v3 = (*a1)[1];
  }
  v6 = v2[2];
  v7 = *((unsigned int *)v2 + 6);
  *((_DWORD *)v2 + 6) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(v2[4] + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  v9 = sub_22E77BAB4(v3, v6, v8 >> 1);
  v10 = *a1;
  v11 = (*a1)[1];
  v12 = (*a1)[2];
  v13 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)v10 + 6) = v13 + 1;
  HIDWORD(v8) = *(_QWORD *)(v10[4] + 8 * v13);
  LODWORD(v8) = HIDWORD(v8);
  v14 = sub_22E77BAB4(v11, v12, v8 >> 1);
  v15 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v16 = *((unsigned int *)*a1 + 6);
  v17 = (*a1)[4];
  v18 = *(_QWORD *)(v17 + 8 * v16);
  *((_DWORD *)*a1 + 6) = v16 + 2;
  return sub_22EF6042C(v4, v15, v5, v18, *(_BYTE *)(v17 + 8 * (v16 + 1)) & 7, v9 | (unint64_t)(v14 << 32));
}

unint64_t sub_22F2BC734(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v4 = *v2;
  v3 = v2[1];
  if (*(_DWORD *)(v3 + 10984) == 3)
  {
    v15 = *(unsigned int *)(v3 + 10848);
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 10840) + 8 * v15 - 8);
    *(_DWORD *)(v3 + 10848) = v15 - 1;
  }
  else
  {
    v5 = sub_22E7B94C8(v2[1], v2[2]);
    v2 = *a1;
  }
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  v6 = sub_22F2BD928((uint64_t)v2, (unsigned int *)v16);
  v8 = v7;
  v9 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v10 = *((unsigned int *)*a1 + 6);
  v11 = (*a1)[4];
  v12 = *(_QWORD *)(v11 + 8 * v10);
  *((_DWORD *)*a1 + 6) = v10 + 2;
  v13 = sub_22EF6096C(v4, v9, v12, *(_QWORD *)(v11 + 8 * (v10 + 1)) & 7, v5, v6, v8);
  if (v16[0] != v17)
    free(v16[0]);
  return v13;
}

unint64_t sub_22F2BC868(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = v2[2];
  v6 = *((unsigned int *)v2 + 6);
  *((_DWORD *)v2 + 6) = v6 + 1;
  HIDWORD(v7) = *(_QWORD *)(v2[4] + 8 * v6);
  LODWORD(v7) = HIDWORD(v7);
  v8 = sub_22E77BAB4(v3, v5, v7 >> 1);
  v9 = *a1;
  v10 = (*a1)[1];
  v11 = (*a1)[2];
  v12 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)v9 + 6) = v12 + 1;
  HIDWORD(v7) = *(_QWORD *)(v9[4] + 8 * v12);
  LODWORD(v7) = HIDWORD(v7);
  v13 = sub_22E77BAB4(v10, v11, v7 >> 1);
  v14 = *a1;
  v15 = (*a1)[1];
  if (*(_DWORD *)(v15 + 10984) == 3)
  {
    v22 = *(unsigned int *)(v15 + 10848);
    v16 = *(_DWORD **)(*(_QWORD *)(v15 + 10840) + 8 * v22 - 8);
    *(_DWORD *)(v15 + 10848) = v22 - 1;
  }
  else
  {
    v16 = (_DWORD *)sub_22E7B94C8(v15, v14[2]);
    v14 = *a1;
    v15 = (*a1)[1];
  }
  v17 = sub_22E78DF24(v15, v14[2], (uint64_t)(v14 + 4), (_DWORD *)v14 + 6);
  v18 = *((unsigned int *)*a1 + 6);
  v19 = (*a1)[4];
  v20 = *(_QWORD *)(v19 + 8 * v18);
  *((_DWORD *)*a1 + 6) = v18 + 2;
  return sub_22EF60740(v4, v17, v16, v20, *(_QWORD *)(v19 + 8 * (v18 + 1)) & 7, v8 | (unint64_t)(v13 << 32));
}

unint64_t sub_22F2BC974(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v5 = *a1;
  v6 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)v5 + 6) = v6 + 1;
  return sub_22F369798(v2, *(_QWORD *)(v5[4] + 8 * v6), v3, v4);
}

unint64_t sub_22F2BC9EC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v19[2];
  _QWORD v20[25];

  v20[24] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)*a1;
  v3 = sub_22E78DF24(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v4 = (unsigned int *)(*a1 + 24);
  v5 = *v4;
  *v4 = v5 + 1;
  v6 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v5);
  v7 = (_QWORD *)*((_QWORD *)v4 - 2);
  v8 = sub_22E779F8C((uint64_t)v7, *((_QWORD *)v4 - 1), (uint64_t)(v4 + 2), v4);
  v9 = sub_22E77F870(v7, v8);
  v19[0] = v20;
  v19[1] = (void *)0x800000000;
  v10 = sub_22E78F00C(*a1, (unsigned int *)v19);
  v12 = v11;
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14);
  if (v3 >= 0x10)
    v16 = v3;
  else
    v16 = 0;
  v17 = sub_22EF67C6C(v2, v16, v6, (_DWORD)v15 != 0, v15 > 1, v9, v10, v12);
  if (v19[0] != v20)
    free(v19[0]);
  return v17;
}

unint64_t sub_22F2BCB30(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = *v2;
  sub_22E78EC0C((uint64_t)v2);
  v12 = v4;
  v5 = sub_22F0F083C(&v12);
  v6 = v12;
  v7 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v8 = *a1;
  v9 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)*a1 + 6) = v9 + 1;
  if (v5)
    v10 = 0;
  else
    v10 = v6;
  return sub_22F36D4FC(v3, v10, v7, *(_QWORD *)(v8[4] + 8 * v9) != 0);
}

unint64_t sub_22F2BCBC4(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *a1;
  v5 = (*a1)[1];
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v12 = *(unsigned int *)(v5 + 10848);
    v6 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v5 + 10848) = v12 - 1;
  }
  else
  {
    v6 = (unsigned __int8 *)sub_22E7B94C8(v5, v4[2]);
    v4 = *a1;
    v5 = (*a1)[1];
  }
  v7 = v4[2];
  v8 = *((unsigned int *)v4 + 6);
  *((_DWORD *)v4 + 6) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(v4[4] + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  v10 = sub_22E77BAB4(v5, v7, v9 >> 1);
  return sub_22F36BE34(v2, v3, v6, v10);
}

unint64_t sub_22F2BCC78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v17[2];
  _QWORD v18[25];

  v18[24] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v4);
  v6 = sub_22E78F0D8(v2);
  v7 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v10 + 1;
  v11 = sub_22E768E34(v9, v8, *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v10));
  v12 = sub_22E785944(v9, v11);
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  v13 = sub_22E78F00C(*a1, (unsigned int *)v17);
  v15 = sub_22EF65F64(v3, v5, v6, v12, v13, v14);
  if (v17[0] != v18)
    free(v17[0]);
  return v15;
}

unint64_t sub_22F2BCD90(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *a1;
  v5 = (*a1)[1];
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v14 = *(unsigned int *)(v5 + 10848);
    v6 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 10840) + 8 * v14 - 8);
    *(_DWORD *)(v5 + 10848) = v14 - 1;
  }
  else
  {
    v6 = (unsigned __int8 *)sub_22E7B94C8(v5, v4[2]);
    v4 = *a1;
    v5 = (*a1)[1];
  }
  v7 = v4[2];
  v8 = *((unsigned int *)v4 + 6);
  *((_DWORD *)v4 + 6) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(v4[4] + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  v10 = sub_22E77BAB4(v5, v7, v9 >> 1);
  v11 = *a1;
  v12 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)v11 + 6) = v12 + 1;
  return sub_22F36B994(v2, v3, v6, v10, *(_QWORD *)(v11[4] + 8 * v12));
}

unint64_t sub_22F2BCE5C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *a1;
  v5 = (*a1)[1];
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v13 = *(unsigned int *)(v5 + 10848);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v5 + 10848) = v13 - 1;
  }
  else
  {
    v6 = sub_22E7B94C8((*a1)[1], v4[2]);
    v4 = *a1;
  }
  v7 = *((unsigned int *)v4 + 6);
  *((_DWORD *)v4 + 6) = v7 + 1;
  v8 = *(_QWORD *)(v4[4] + 8 * v7) != 0;
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  v9 = sub_22F2BD928((uint64_t)v4, (unsigned int *)v14);
  v11 = sub_22F3691BC(v2, v3, v6, v8, v9, v10);
  if (v14[0] != v15)
    free(v14[0]);
  return v11;
}

unint64_t sub_22F2BCF8C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  _BYTE v18[64];
  void *v19[2];
  _QWORD v20[9];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)*a1;
  v3 = sub_22E78DF24(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 8);
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v15 = *(unsigned int *)(v5 + 10848);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v15 - 8);
    *(_DWORD *)(v5 + 10848) = v15 - 1;
  }
  else
  {
    v6 = sub_22E7B94C8(*(_QWORD *)(*a1 + 8), v4[2]);
    v4 = (_QWORD *)*a1;
    v5 = *(_QWORD *)(*a1 + 8);
    if (*(_DWORD *)(v5 + 10984) != 3)
    {
      v7 = sub_22E7B94C8(*(_QWORD *)(*a1 + 8), v4[2]);
      v4 = (_QWORD *)*a1;
      goto LABEL_4;
    }
  }
  v16 = *(unsigned int *)(v5 + 10848);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v16 - 8);
  *(_DWORD *)(v5 + 10848) = v16 - 1;
LABEL_4:
  v19[0] = v20;
  v19[1] = (void *)0x800000000;
  v8 = (uint64_t *)sub_22F2BD928((uint64_t)v4, (unsigned int *)v19);
  v10 = v9;
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  v11 = sub_22F2BD928(*a1, (unsigned int *)v17);
  v13 = sub_22F369338(v2, v3, v6, v7, v8, v10, v11, v12);
  if (v17[0] != v18)
    free(v17[0]);
  if (v19[0] != v20)
    free(v19[0]);
  return v13;
}

unint64_t sub_22F2BD130(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  unsigned __int16 v15;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *((unsigned int *)*a1 + 6);
  v5 = (*a1)[4];
  v6 = *(_QWORD *)(v5 + 8 * v4) != 0;
  v7 = *(_QWORD *)(v5 + 8 * (v4 + 1));
  v8 = *(_QWORD *)(v5 + 8 * (v4 + 2));
  v9 = *(_QWORD *)(v5 + 8 * (v4 + 3));
  v10 = *(_QWORD *)(v5 + 8 * (v4 + 4)) != 0;
  v11 = *(_QWORD *)(v5 + 8 * (v4 + 5)) != 0;
  v12 = *(_QWORD *)(v5 + 8 * (v4 + 6)) != 0;
  *((_DWORD *)*a1 + 6) = v4 + 8;
  if (v7)
    v13 = ((_WORD)v8 << 8) + 256;
  else
    v13 = 0;
  v15 = v9 | (32 * v6) | v13 | (v10 << 6) | (v11 << 7) | (v12 << 11) | ((*(_QWORD *)(v5 + 8 * (v4 + 7)) != 0) << 12);
  return sub_22F369930(v2, v3, &v15);
}

unint64_t sub_22F2BD220(uint64_t **a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *a1;
  v6 = (*a1)[1];
  v5 = v4[2];
  v7 = *((unsigned int *)v4 + 6);
  *((_DWORD *)v4 + 6) = v7 + 1;
  v8 = sub_22E768E34(v6, v5, *(_QWORD *)(v4[4] + 8 * v7));
  v9 = sub_22E785944(v6, v8);
  return sub_22F369C08(v2, v3, v9);
}

unint64_t sub_22F2BD29C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v3 = **a1;
  v2 = (*a1)[1];
  v4 = v1[2];
  v5 = *((unsigned int *)v1 + 6);
  v6 = v1[4];
  v7 = *(_QWORD *)(v6 + 8 * v5);
  *((_DWORD *)v1 + 6) = v5 + 2;
  v8 = *(_QWORD *)(v6 + 8 * (v5 + 1));
  v9 = sub_22E78DF24(v2, v4, (uint64_t)(v1 + 4), (_DWORD *)v1 + 6);
  return sub_22F36BBA8(v3, v9, v7, v8);
}

unint64_t sub_22F2BD2FC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  if (*(_DWORD *)(v3 + 10984) == 3)
  {
    v13 = *(unsigned int *)(v3 + 10848);
    v5 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 10840) + 8 * v13 - 8);
    *(_DWORD *)(v3 + 10848) = v13 - 1;
    goto LABEL_6;
  }
  v5 = (unsigned __int8 *)sub_22E7B94C8(v3, v2[2]);
  v2 = *a1;
  v3 = (*a1)[1];
  if (*(_DWORD *)(v3 + 10984) == 3)
  {
LABEL_6:
    v14 = *(unsigned int *)(v3 + 10848);
    v6 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 10840) + 8 * v14 - 8);
    *(_DWORD *)(v3 + 10848) = v14 - 1;
    goto LABEL_4;
  }
  v6 = (unsigned __int8 *)sub_22E7B94C8(v3, v2[2]);
  v2 = *a1;
  v3 = (*a1)[1];
LABEL_4:
  v7 = v2[2];
  v8 = *((unsigned int *)v2 + 6);
  *((_DWORD *)v2 + 6) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(v2[4] + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  v10 = sub_22E77BAB4(v3, v7, v9 >> 1);
  v11 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  return sub_22EF63B24(v4, v11, v5, v6, v10);
}

unint64_t sub_22F2BD3F0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *(_QWORD *)(sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6) & 0xFFFFFFFFFFFFFFF0);
  return sub_22F36A6C0(v2, v3, v4);
}

unint64_t sub_22F2BD454(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v13[2];
  _BYTE v14[64];
  void *v15[2];
  _QWORD v16[9];

  v16[8] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)*a1;
  v3 = sub_22E78DF24(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v15[0] = v16;
  v15[1] = (void *)0x800000000;
  v4 = (uint64_t *)sub_22E791FEC(*a1, (unsigned int *)v15);
  v6 = v5;
  v13[0] = v14;
  v13[1] = (void *)0x800000000;
  v7 = (uint64_t *)sub_22F2BBC80(*a1, (unsigned int *)v13);
  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  v11 = sub_22EF667E8(v2, v3, v4, v6, v7, v10, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9) != 0);
  if (v13[0] != v14)
    free(v13[0]);
  if (v15[0] != v16)
    free(v15[0]);
  return v11;
}

unint64_t sub_22F2BD58C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD **)(a1 + 8);
  v3 = sub_22E779F8C((uint64_t)v2, *(_QWORD *)(a1 + 16), a1 + 32, (_DWORD *)(a1 + 24));
  v4 = sub_22E77F870(v2, v3);
  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  return sub_22F36D148(v1, v5, 0);
}

unint64_t sub_22F2BD5E0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  void *v10[2];
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)*a1;
  v3 = *(_QWORD **)(*a1 + 8);
  v4 = sub_22E779F8C((uint64_t)v3, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v5 = sub_22E77F870(v3, v4);
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  v6 = (uint64_t *)sub_22F2BBC80(*a1, (unsigned int *)v10);
  v8 = sub_22F36CE50(v2, v5, v6, v7);
  if (v10[0] != v11)
    free(v10[0]);
  return v8;
}

unint64_t sub_22F2BD6B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *(_QWORD *)*a1;
  v3 = sub_22E78DF24(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  sub_22E7827DC(*a1);
  return sub_22F36C984(v2, *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v5);
}

unint64_t sub_22F2BD71C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v5 = *a1;
  v6 = *((unsigned int *)*a1 + 6);
  *((_DWORD *)v5 + 6) = v6 + 1;
  return sub_22F36D328(v2, v3, v4, *(_QWORD *)(v5[4] + 8 * v6));
}

unint64_t sub_22F2BD794(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD **)(a1 + 8);
  v3 = sub_22E779F8C((uint64_t)v2, *(_QWORD *)(a1 + 16), a1 + 32, (_DWORD *)(a1 + 24));
  v4 = sub_22E77F870(v2, v3);
  return sub_22EF6494C(v1, v4);
}

unint64_t sub_22F2BD7D8(uint64_t **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = **a1;
  v3 = (_QWORD *)(*a1)[1];
  v4 = sub_22E779F8C((uint64_t)v3, (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v5 = sub_22E77F870(v3, v4);
  v6 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  return sub_22F36C604(v2, v5, v6);
}

unint64_t sub_22F2BD848(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = (*a1)[1];
  if (*(_DWORD *)(v4 + 10984) == 3)
  {
    v7 = *(unsigned int *)(v4 + 10848);
    v5 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 10840) + 8 * v7 - 8);
    *(_DWORD *)(v4 + 10848) = v7 - 1;
  }
  else
  {
    v5 = (unsigned __int8 *)sub_22E7B94C8(v4, (*a1)[2]);
  }
  return sub_22F3694D0(v2, v3, v5);
}

unint64_t sub_22F2BD8CC(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = **a1;
  v3 = sub_22E78DF24((*a1)[1], (*a1)[2], (uint64_t)(*a1 + 4), (_DWORD *)*a1 + 6);
  v4 = *((unsigned int *)*a1 + 6);
  v5 = (*a1)[4];
  v6 = *(_QWORD *)(v5 + 8 * v4);
  *((_DWORD *)*a1 + 6) = v4 + 2;
  return sub_22F36B7E4(v2, v3, v6, *(_QWORD *)(v5 + 8 * (v4 + 1)));
}

uint64_t sub_22F2BD928(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  if (v5 > (unint64_t)a2[3])
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v5; LODWORD(v5) = v5 - 1)
  {
    v6 = sub_22F2B40DC(a1);
    v7 = a2[2];
    if (v7 >= a2[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
    ++a2[2];
  }
  return *(_QWORD *)a2;
}

uint64_t sub_22F2BD9E8(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;

  result = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 + (unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 8) > *(unsigned int *)(*(_QWORD *)a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(unsigned int *)(a1 + 8);
  }
  if ((_DWORD)v5)
  {
    v6 = *(int **)a1;
    v7 = 4 * v5;
    do
    {
      v8 = *v6++;
      result = (uint64_t)sub_22E7695A0(a2, v8);
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

_QWORD *sub_22F2BDA58(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2BDAD0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2BDB6C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
  }
  return v5;
}

uint64_t sub_22F2BDAD0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 88 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 88 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2BDB6C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E792CF4(a1, v6);
  v8 = 0;
  sub_22F2BDAD0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F2BDC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6;
    do
    {
      *v7 = -1;
      v7 += 11;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if (*(_QWORD *)v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = 0;
        sub_22F2BDAD0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_22F2BDD10(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2BDD74(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2BDE34((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F2BDD74(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_22F41F2C8(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 16 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -2;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 16 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v10;
  return result;
}

_QWORD *sub_22F2BDE34(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E792F08(a1, v7);
  v9 = 0;
  sub_22F2BDD74((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2BDEE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_22F2BDD74((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2BDF90(uint64_t a1, uint64_t a2)
{
  return sub_22F2BDFA0(a1, *(_DWORD *)(a2 + 340), *(_QWORD *)(a2 + 2712));
}

uint64_t sub_22F2BDFA0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t *v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    if (*(_DWORD *)(a1 + 16) >= a2)
      return 1;
    ++*(_DWORD *)(*(_QWORD *)a1 + 7416);
    v5 = (_QWORD *)(a1 + 8);
    v6 = sub_22E7506AC(*(_QWORD *)(a1 + 8));
    sub_22E792FC8((uint64_t)v11, a3, (_QWORD *)(a1 + 8), v6);
    v7 = v12;
    if (v12)
    {
      v9 = *(int32x2_t **)a1;
      v9[927].i32[1] = *(_DWORD *)(*(_QWORD *)a1 + 7420) + 1;
      v9[925] = vadd_s32(v9[925], (int32x2_t)0x100000001);
      sub_22F2B09B0((uint64_t)&v14, v13, v7);
      v10 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      if (v10)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 56))(v10, v14, *v5);
      sub_22F2BE118(a1 + 32, (uint64_t)v17 + 8 * v18, (uint64_t)v17 + 8 * v18, (uint64_t)v17, (uint64_t)v17);
      sub_22F2BE118(a1 + 80, (uint64_t)v20 + 8 * v21, (uint64_t)v20 + 8 * v21, (uint64_t)v20, (uint64_t)v20);
      *(_QWORD *)(a1 + 20) = v15;
      *(_WORD *)(a1 + 28) = v16;
      if (v20 != v22)
        free(v20);
      if (v17 != &v19)
        free(v17);
    }
  }
  return 0;
}

uint64_t sub_22F2BE118(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = a3;
  v7 = result;
  v8 = a3 - a5;
  v9 = *(unsigned int *)(result + 8);
  if (v9 + ((a3 - a5) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(unsigned int *)(v7 + 8);
  }
  if (v6 != a5)
  {
    v10 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
    do
    {
      v11 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      *v10++ = v11;
    }
    while (v6 != a5);
  }
  *(_DWORD *)(v7 + 8) = v9 + (v8 >> 3);
  return result;
}

char **sub_22F2BE198(char **result, _QWORD *a2)
{
  char **v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (char *)a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(char **)&v4[v7 - 56];
      *(_QWORD *)&v6[v7 - 48] = &v6[v7 - 32];
      result = (char **)&v6[v7 - 48];
      *(result - 1) = v8;
      result[1] = (char *)0x400000000;
      if (*(_DWORD *)&v4[v7 - 40])
        result = sub_22E793328(result, (uint64_t **)&v4[v7 - 48]);
      v7 -= 56;
    }
    while (&v4[v7] != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = (char *)a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = (char *)a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_22F2BE264(_DWORD *result)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  _DWORD *v6;

  v1 = *result;
  if (*result > 1u || result[1])
  {
    v6 = result;
    if ((v1 & 1) != 0)
    {
      v4 = result + 2;
      v5 = 16;
      goto LABEL_9;
    }
    v2 = (2 * v1) & 0xFFFFFFFC;
    v3 = result[4];
    if (v2 >= v3 || v3 < 0x41)
    {
      if (!(_DWORD)v3)
      {
LABEL_10:
        *v6 = v3;
        v6[1] = 0;
        return result;
      }
      v4 = (void *)*((_QWORD *)result + 1);
      v5 = 4 * v3;
LABEL_9:
      result = memset(v4, 255, v5);
      LODWORD(v3) = *v6 & 1;
      goto LABEL_10;
    }
    return sub_22F2BE308(result);
  }
  return result;
}

_DWORD *sub_22F2BE308(_DWORD *result)
{
  _DWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  void *v6;
  size_t v7;
  uint64_t v8;

  v1 = result;
  v2 = *result;
  v3 = __clz((*result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_QWORD *)result = 1;
    v6 = result + 2;
    v7 = 16;
    return memset(v6, 255, v7);
  }
  if ((v2 & 1) != 0)
    return sub_22E78EA48(v1, v5);
  v8 = result[4];
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(4 * v8));
    return sub_22E78EA48(v1, v5);
  }
  *(_QWORD *)result = 0;
  if (v5)
  {
    v6 = (void *)*((_QWORD *)result + 1);
    v7 = 4 * v5;
    return memset(v6, 255, v7);
  }
  return result;
}

uint64_t *sub_22F2BE3D8(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v6 + v7 - 32) = v6 + v7 - 16;
      result = (uint64_t *)(v6 + v7 - 32);
      *(result - 1) = v8;
      result[1] = 0x400000000;
      if (*(_DWORD *)(v4 + v7 - 24))
        result = (uint64_t *)sub_22E78FCDC((uint64_t)result, v4 + v7 - 32);
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_22F2BE4A4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_8;
    sub_22E793BC0(a1, v7);
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = *a3 & v16;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
      v18 = *a4;
      if (*a3 == *a4)
        goto LABEL_8;
      v12 = 0;
      v19 = 1;
      while (v18)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -1;
        if (v20)
          v12 = a4;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
        v18 = *a4;
        if (*a3 == *a4)
          goto LABEL_8;
      }
      goto LABEL_6;
    }
LABEL_23:
    a4 = 0;
    goto LABEL_8;
  }
  sub_22E793BC0(a1, 2 * v7);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_23;
  v9 = v8 - 1;
  v10 = *a3 & v9;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
  v11 = *a4;
  if (*a3 == *a4)
    goto LABEL_8;
  v12 = 0;
  v13 = 1;
  while (v11)
  {
    if (v12)
      v22 = 0;
    else
      v22 = v11 == -1;
    if (v22)
      v12 = a4;
    v23 = v10 + v13++;
    v10 = v23 & v9;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_8;
  }
LABEL_6:
  if (v12)
    a4 = v12;
LABEL_8:
  ++*(_DWORD *)(a1 + 8);
  if (*a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22F2BE60C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2475F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2BE684(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

_QWORD *sub_22F2BE684(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E793DB0(a1, v6);
  v8 = 0;
  sub_22F2475F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F2BE734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F2475F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x200000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22F2BE82C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F283C88(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F2BE8F0((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v12;
  return result;
}

_QWORD *sub_22F2BE8F0(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E793E7C((uint64_t)a1, v7);
  v9 = 0;
  sub_22F283C88((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22F2BE9AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F283C88((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2BEA78(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2BEAD8(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 2;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 24 * v5;
}

uint64_t sub_22F2BEAD8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v21;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = a2[1];
  v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
     + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v4 - 1;
  v11 = (v4 - 1) & v9;
  v12 = (_QWORD *)(v3 + 24 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*a2 == *v12 && v5 == v14)
  {
    result = 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v17 = v12;
      v21 = v11 + v18++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v3 + 24 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      result = 1;
      if (*a2 == *v12 && v5 == v14)
        goto LABEL_11;
    }
    result = 0;
    if (v17)
      v12 = v17;
  }
LABEL_11:
  *a3 = v12;
  return result;
}

_QWORD *sub_22F2BEBE4(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2BEC54((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2BED08(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F2BEC54(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 40 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2BED08(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E793FF8((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2BEC54((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_22F2BEDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 88);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_22F2BEC54(a1, v10, &v14);
        v11 = v14;
        *v14 = *(_QWORD *)v4;
        v11[2] = 0x200000000;
        v11[1] = v11 + 3;
        v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v12, v4 + 8);
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13)
          free(v13);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_22F2BEED0(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 2)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 15;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = (_QWORD *)MEMORY[0x23489D23C](56 * a2, 8);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[7 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 7;
  }
  while (result != v4);
  return result;
}

uint64_t sub_22F2BEF58(uint64_t a1)
{
  sub_22F2BEFA0(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(56 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22F2BEFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 2;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 56 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    v5 = *(v4 - 3);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
      {
        v7 = v4;
        v8 = v3;
        free(v6);
        v4 = v7;
        v3 = v8;
      }
    }
    v4 += 7;
    v3 -= 56;
  }
  while (v3);
}

void sub_22F2BF020(uint64_t a1)
{
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_DWORD *)a1;
  sub_22F2BEFA0(a1);
  v3 = __clz((v2 >> 1) - 1);
  if ((v3 & 0x3C) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((*(_DWORD *)a1 & 1) != 0 && v5 < 3)
  {
    v6 = (_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = 1;
    v7 = (_QWORD *)(a1 + 120);
    goto LABEL_10;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
LABEL_17:
    sub_22F2BEED0((_QWORD *)a1, v5);
    return;
  }
  v8 = *(unsigned int *)(a1 + 16);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(56 * v8));
    goto LABEL_17;
  }
  *(_QWORD *)a1 = 0;
  if (!v5)
    return;
  v6 = *(_QWORD **)(a1 + 8);
  v7 = &v6[7 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 7;
  }
  while (v6 != v7);
}

_QWORD *sub_22F2BF0F8(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 2)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 11;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = (_QWORD *)MEMORY[0x23489D23C](40 * a2, 8);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[5 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 5;
  }
  while (result != v4);
  return result;
}

uint64_t sub_22F2BF184(uint64_t a1)
{
  sub_22F2BF1CC(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(40 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22F2BF1CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 2;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 40 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    v5 = *(v4 - 3);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
      {
        v7 = v4;
        v8 = v3;
        free(v6);
        v4 = v7;
        v3 = v8;
      }
    }
    v4 += 5;
    v3 -= 40;
  }
  while (v3);
}

void sub_22F2BF24C(uint64_t a1)
{
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_DWORD *)a1;
  sub_22F2BF1CC(a1);
  v3 = __clz((v2 >> 1) - 1);
  if ((v3 & 0x3C) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((*(_DWORD *)a1 & 1) != 0 && v5 < 3)
  {
    v6 = (_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = 1;
    v7 = (_QWORD *)(a1 + 88);
    goto LABEL_10;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
LABEL_17:
    sub_22F2BF0F8((_QWORD *)a1, v5);
    return;
  }
  v8 = *(unsigned int *)(a1 + 16);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(40 * v8));
    goto LABEL_17;
  }
  *(_QWORD *)a1 = 0;
  if (!v5)
    return;
  v6 = *(_QWORD **)(a1 + 8);
  v7 = &v6[5 * v5];
  do
  {
LABEL_10:
    *v6 = -4096;
    v6 += 5;
  }
  while (v6 != v7);
}

_QWORD *sub_22F2BF324(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 9;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_22E794348(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[2 * v2];
    }
    do
    {
      *v3 = -4096;
      v3 += 2;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_22F2BF39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2BF3F8(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_22F2BF3F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22F2BF4A4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          sub_22F2BF518(v6);
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2BF518(llvm *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)this;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return llvm::deallocate_buffer(this, (void *)(v2 + 25));
}

void sub_22F2BF584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 40;
      v2 -= 40;
    }
    while (v2);
  }
}

uint64_t sub_22F2BF5E8(uint64_t a1)
{
  void *v2;

  sub_22E7945BC(a1 + 24);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(48 * *(unsigned int *)(a1 + 40)));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_22F2BF638(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 32 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 24];
      if (&v6[v3 - 8] != v4)
        free(v4);
      v3 -= 32;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

char **sub_22F2BF6BC(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 352 * v3;
    v5 = v2 - 352;
    do
    {
      sub_22E748288((uint64_t)&v5[v4]);
      v4 -= 352;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F2BF724(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v9 = *(_QWORD *)a1;
  v10 = result;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v11 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v11)
  {
    return result;
  }
  v12 = MEMORY[0x23489D23C](a3 + 25, 8);
  v13 = v12;
  v14 = v12 + 24;
  if (a3)
    memcpy((void *)(v12 + 24), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *(_QWORD *)v13 = a3;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(v9 + 8 * v10) = v13;
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void sub_22F2BF820(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_22F2BF970(a1);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = *(_QWORD *)a1 + 136 * a2;
        v9 = *(_QWORD *)a1 + 136 * v2;
        do
        {
          *(_OWORD *)v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(_QWORD *)(v9 + 128) = 0;
          *(_OWORD *)(v9 + 96) = 0uLL;
          *(_OWORD *)(v9 + 112) = 0uLL;
          *(_OWORD *)(v9 + 64) = 0uLL;
          *(_OWORD *)(v9 + 80) = 0uLL;
          *(_OWORD *)(v9 + 32) = 0uLL;
          *(_OWORD *)(v9 + 48) = 0uLL;
          *(_QWORD *)(v9 + 8) = v9 + 24;
          *(_DWORD *)(v9 + 20) = 2;
          v9 += 136;
        }
        while (v9 != v8);
      }
    }
    else
    {
      v5 = 17 * v2;
      v6 = (char **)(*(_QWORD *)a1 + 8 * v5 - 128);
      v7 = 136 * a2 - 8 * v5;
      do
      {
        v6 = sub_22F2BF8FC(v6) - 17;
        v7 += 136;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

char **sub_22F2BF8FC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 40];
      if (&v2[v4 - 24] != v5)
        free(v5);
      v4 -= 56;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22F2BF970(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2BF9DC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2BF9DC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)result + 136 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 16) = 0x200000000;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 24;
      result = a2 + v5 + 8;
      if (*(_DWORD *)(v6 + v5 + 16))
        result = sub_22E794970(result, v9 + 8);
      v5 += 136;
    }
    while (v9 + 136 != v7);
    v10 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)v4 - 128;
      v12 = 136 * v10;
      do
      {
        result = (uint64_t)sub_22F2BF8FC((char **)(v11 + v12));
        v12 -= 136;
      }
      while (v12);
    }
  }
  return result;
}

double sub_22F2BFA98(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 56 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 40];
      if (&v4[v6 - 24] != v7)
        free(v7);
      v6 -= 56;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F2BFB24(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2BFB90((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2BFB90(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 56 * v2;
    v5 = (_QWORD *)(a2 + 16);
    v6 = *a1 + 16;
    do
    {
      v8 = v6 - 16;
      v7 = *(_QWORD *)(v6 - 16);
      *((_DWORD *)v5 - 2) = *(_DWORD *)(v6 - 8);
      *(v5 - 2) = v7;
      *v5 = v5 + 2;
      v5[1] = 0x100000000;
      if (*(_DWORD *)(v6 + 8))
        sub_22F2A39AC((uint64_t)v5, v6);
      v5 += 7;
      v6 += 56;
    }
    while (v8 + 56 != v4);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = 56 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 40);
        if ((void *)(v10 + v11 - 24) != v12)
          free(v12);
        v11 -= 56;
      }
      while (v11);
    }
  }
}

void sub_22F2BFC6C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_22F2BFB24(a1);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = *(_QWORD *)a1 + 56 * a2;
        v9 = *(_QWORD *)a1 + 56 * v2;
        do
        {
          *(_QWORD *)(v9 + 48) = 0;
          *(_OWORD *)v9 = 0uLL;
          *(_OWORD *)(v9 + 16) = 0uLL;
          *(_OWORD *)(v9 + 32) = 0uLL;
          *(_QWORD *)(v9 + 16) = v9 + 32;
          *(_DWORD *)(v9 + 28) = 1;
          v9 += 56;
        }
        while (v9 != v8);
      }
    }
    else
    {
      v5 = 56 * v2;
      v6 = (void **)(v5 + *(_QWORD *)a1 - 40);
      v7 = 56 * a2 - v5;
      do
      {
        if (v6 + 2 != *v6)
          free(*v6);
        v6 -= 7;
        v7 += 56;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_22F2BFD54(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((-24 * v2 + 24 * a2 - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22F2BFDF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = llvm::FoldingSetBase::InsertNode();
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void sub_22F2BFE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _DWORD v80[16];
  void *v81;
  uint64_t v82;
  _QWORD v83[17];

  v83[16] = *MEMORY[0x24BDAC8D0];
  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  if (*(_QWORD *)(v7 + 8 * (v6 + 1)))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 360)
       - *(unsigned int *)(*(_QWORD *)(a1 + 16) + 2752)
       + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 2736);
    v9 = *(_QWORD *)a1 + 3768;
    v81 = (void *)a2;
    *(_QWORD *)sub_22E794D50(v9, (uint64_t *)&v81) = v8;
    *(_BYTE *)(a1 + 64) = 1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v10 = *(_QWORD *)(v5 + 8);
  v11 = sub_22E779F8C(v10, *(_QWORD *)(v5 + 16), v5 + 32, (_DWORD *)(v5 + 24));
  *(_QWORD *)(a2 + 120) = sub_22E77F870(v10, v11);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = sub_22E779F8C(v13, *(_QWORD *)(v12 + 16), v12 + 32, (_DWORD *)(v12 + 24));
  *(_QWORD *)(a2 + 128) = sub_22E77F870(v13, v14);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned int *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFDFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v16) != 0) << 17);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(unsigned int *)(v17 + 24);
  *(_DWORD *)(v17 + 24) = v18 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v18) != 0) << 18);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(unsigned int *)(v19 + 24);
  *(_DWORD *)(v19 + 24) = v20 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFF7FFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v20) != 0) << 19);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(unsigned int *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22) != 0) << 20);
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(unsigned int *)(v23 + 24);
  *(_DWORD *)(v23 + 24) = v24 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v24) != 0) << 21);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(unsigned int *)(v25 + 24);
  *(_DWORD *)(v25 + 24) = v26 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v26) != 0) << 36);
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(unsigned int *)(v27 + 24);
  *(_DWORD *)(v27 + 24) = v28 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v28) != 0) << 37);
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(unsigned int *)(v29 + 24);
  *(_DWORD *)(v29 + 24) = v30 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v30) != 0) << 22);
  v31 = *(_QWORD *)(a1 + 8);
  v32 = *(unsigned int *)(v31 + 24);
  *(_DWORD *)(v31 + 24) = v32 + 1;
  v33 = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8 * v32);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v33 != 0) << 23);
  if (v33)
  {
    v34 = *(_QWORD *)(a1 + 8);
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 128);
    v36 = *(_QWORD *)(v34 + 8);
    v37 = sub_22E779F8C(v36, *(_QWORD *)(v34 + 16), v34 + 32, (_DWORD *)(v34 + 24));
    v38 = sub_22E77F870(v36, v37);
    sub_22F368D4C(v35, a2, v38);
  }
  v39 = *(_QWORD *)(a1 + 8);
  v40 = *(unsigned int *)(v39 + 24);
  *(_DWORD *)(v39 + 24) = v40 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFCFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v39 + 32) + 8 * v40) & 3) << 24);
  v41 = *(_QWORD *)(a1 + 8);
  v42 = *(unsigned int *)(v41 + 24);
  *(_DWORD *)(v41 + 24) = v42 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFE03FFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v41 + 32) + 8 * v42) & 0x7FLL) << 26);
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *(unsigned int *)(v43 + 24);
  *(_DWORD *)(v43 + 24) = v44 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(*(_QWORD *)(*(_QWORD *)(v43 + 32) + 8 * v44) != 0) << 33);
  v45 = *(_QWORD *)(a1 + 8);
  v46 = *(unsigned int *)(v45 + 24);
  if (*(_DWORD *)(v45 + 40) <= v46)
  {
    v50 = 0;
  }
  else
  {
    v48 = *(_QWORD *)(v45 + 8);
    v47 = *(_QWORD *)(v45 + 16);
    *(_DWORD *)(v45 + 24) = v46 + 1;
    v49 = sub_22E77A180(v48, v47, *(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v46));
    v50 = sub_22E77D8C8(v48, v49);
    v45 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a2 + 80) = v50;
  *(_QWORD *)(a2 + 88) = sub_22E782300(v45);
  v51 = *(_QWORD *)(a1 + 8);
  v52 = *(_QWORD *)(v51 + 8);
  v53 = *(_QWORD *)(v51 + 16);
  v54 = *(unsigned int *)(v51 + 24);
  *(_DWORD *)(v51 + 24) = v54 + 1;
  HIDWORD(v55) = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 8 * v54);
  LODWORD(v55) = HIDWORD(v55);
  *(_DWORD *)(a2 + 108) = sub_22E77BAB4(v52, v53, v55 >> 1);
  v56 = *(_QWORD *)(a1 + 8);
  v57 = *(unsigned int *)(v56 + 24);
  *(_DWORD *)(v56 + 24) = v57 + 1;
  v58 = *(_QWORD *)(*(_QWORD *)(v56 + 32) + 8 * v57);
  v81 = v83;
  v82 = 0x1000000000;
  if (v58 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  for (; (_DWORD)v58; LODWORD(v58) = v58 - 1)
  {
    v59 = *(_QWORD *)(a1 + 8);
    v60 = *(_QWORD *)(v59 + 8);
    v61 = sub_22E779F8C(v60, *(_QWORD *)(v59 + 16), v59 + 32, (_DWORD *)(v59 + 24));
    v62 = sub_22E77F870(v60, v61);
    v63 = v82;
    if (v82 >= (unint64_t)HIDWORD(v82))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v63 = v82;
    }
    *((_QWORD *)v81 + v63) = v62;
    LODWORD(v82) = v82 + 1;
  }
  v64 = *(_QWORD *)(a1 + 8);
  v65 = *(unsigned int *)(v64 + 24);
  *(_DWORD *)(v64 + 24) = v65 + 1;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFF3FFFFFFFFLL | ((*(_QWORD *)(*(_QWORD *)(v64 + 32) + 8 * v65) & 3) << 34);
  v66 = *(_QWORD *)(a1 + 8);
  v67 = *(unsigned int *)(v66 + 24);
  *(_DWORD *)(v66 + 24) = v67 + 1;
  v68 = *(_QWORD *)(*(_QWORD *)(v66 + 32) + 8 * v67);
  v79 = 0;
  if (v68 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v68)
  {
    do
    {
      v69 = *(_QWORD *)(a1 + 8);
      v70 = *(_QWORD *)(v69 + 8);
      v71 = *(_QWORD *)(v69 + 16);
      v72 = *(unsigned int *)(v69 + 24);
      *(_DWORD *)(v69 + 24) = v72 + 1;
      HIDWORD(v73) = *(_QWORD *)(*(_QWORD *)(v69 + 32) + 8 * v72);
      LODWORD(v73) = HIDWORD(v73);
      v74 = sub_22E77BAB4(v70, v71, v73 >> 1);
      v75 = v79;
      if (v79 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v75 = v79;
      }
      v80[v75] = v74;
      v76 = ++v79;
      LODWORD(v68) = v68 - 1;
    }
    while ((_DWORD)v68);
  }
  else
  {
    v76 = 0;
  }
  sub_22F3B53AC((_QWORD *)a2, *(_QWORD *)(*(_QWORD *)a1 + 128), v81, v82, v80, v76);
  v77 = *(_QWORD *)(a1 + 8);
  v78 = *(unsigned int *)(v77 + 24);
  *(_DWORD *)(v77 + 24) = v78 + 1;
  *(_DWORD *)(a2 + 136) = *(_QWORD *)(*(_QWORD *)(v77 + 32) + 8 * v78);
  *(_QWORD *)(a2 + 56) |= 0x4000000000uLL;
  if (v81 != v83)
    free(v81);
}

uint64_t sub_22F2C044C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  sub_22E798980(a1, a2);
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_WORD *)(a2 + 88) = *(_WORD *)(a2 + 88) & 0x3FFF | ((unsigned __int16)*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) << 14);
  v6 = a1[1];
  v7 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_WORD *)(a2 + 88) = *(_WORD *)(a2 + 88) & 0xC000 | *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7) & 0x3FFF;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(unsigned int *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v11);
  LODWORD(v12) = HIDWORD(v12);
  *(_DWORD *)(a2 + 92) = sub_22E77BAB4(v9, v10, v12 >> 1);
  v13 = a1[1];
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v12) = HIDWORD(v12);
  result = sub_22E77BAB4(v14, v15, v12 >> 1);
  *(_DWORD *)(a2 + 96) = result;
  return result;
}

unint64_t sub_22F2C0508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 60) = sub_22E77BAB4(v8, v9, v11 >> 1);
  result = sub_22E7868D0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (_DWORD *)(*(_QWORD *)(a1 + 8) + 24));
  *(_QWORD *)(a2 + 80) = result;
  return result;
}

_DWORD *sub_22F2C058C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  v2 = *(unsigned int *)(v1 + 24);
  *(_DWORD *)(v1 + 24) = v2 + 1;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v2);
  if (!(_DWORD)v3)
    return 0;
  v24 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v2) >= 5uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  while (1)
  {
    v5 = a1[1];
    v6 = *(_QWORD *)(v5 + 8);
    v7 = sub_22E779F8C(v6, *(_QWORD *)(v5 + 16), v5 + 32, (_DWORD *)(v5 + 24));
    v8 = sub_22E77F870(v6, v7);
    if (!v8)
      break;
    v9 = v8;
    v10 = v24;
    if (v24 >= 4uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v24;
    }
    v25[v10] = v9;
    ++v24;
    LODWORD(v3) = v3 - 1;
    if (!(_DWORD)v3)
    {
      v11 = a1[1];
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(unsigned int *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v14 + 1;
      HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
      LODWORD(v15) = HIDWORD(v15);
      v16 = sub_22E77BAB4(v12, v13, v15 >> 1);
      v17 = a1[1];
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      v20 = *(unsigned int *)(v17 + 24);
      *(_DWORD *)(v17 + 24) = v20 + 1;
      HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
      LODWORD(v15) = HIDWORD(v15);
      v21 = sub_22E77BAB4(v18, v19, v15 >> 1);
      return sub_22F3B5AA4(*(_QWORD *)(*a1 + 128), v16, v25, v24, v21);
    }
  }
  return 0;
}

void sub_22F2C0738(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD v40[16];
  void *v41;
  uint64_t v42;
  _QWORD v43[17];

  v43[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 8) = sub_22E782300(a1[1]);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 80) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a1[1];
  v10 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_BYTE *)(a2 + 72) = (4 * (*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) & 1)) | *(_BYTE *)(a2 + 72) & 0xFB;
  v11 = a1[1];
  v12 = *(unsigned int *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  *(_DWORD *)(a2 + 76) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12);
  *(_BYTE *)(a2 + 72) |= 0x20u;
  v13 = a1[1];
  v14 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14);
  v41 = v43;
  v42 = 0x1000000000;
  if (v15 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v15)
  {
    v16 = v15;
    do
    {
      v17 = a1[1];
      v18 = *(_QWORD *)(v17 + 8);
      v19 = sub_22E779F8C(v18, *(_QWORD *)(v17 + 16), v17 + 32, (_DWORD *)(v17 + 24));
      v20 = sub_22E77F870(v18, v19);
      v21 = v42;
      if (v42 >= (unint64_t)HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = v42;
      }
      *((_QWORD *)v41 + v21) = v20;
      LODWORD(v42) = v42 + 1;
      --v16;
    }
    while (v16);
  }
  v39 = 0;
  if (v15 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v15)
  {
    v22 = v15;
    do
    {
      v23 = a1[1];
      v24 = *(_QWORD *)(v23 + 8);
      v25 = *(_QWORD *)(v23 + 16);
      v26 = *(unsigned int *)(v23 + 24);
      *(_DWORD *)(v23 + 24) = v26 + 1;
      HIDWORD(v27) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26);
      LODWORD(v27) = HIDWORD(v27);
      v28 = sub_22E77BAB4(v24, v25, v27 >> 1);
      v29 = v39;
      if (v39 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v39;
      }
      v40[v29] = v28;
      ++v39;
      --v22;
    }
    while (v22);
  }
  sub_22F3B45C4((_QWORD *)(a2 + 16), v41, v15, v40, *(_QWORD *)(*a1 + 128));
  v30 = a1[1];
  v31 = *(unsigned int *)(v30 + 24);
  *(_DWORD *)(v30 + 24) = v31 + 1;
  v32 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8 * v31);
  LODWORD(v42) = 0;
  if (v32 > (unint64_t)HIDWORD(v42))
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v32)
  {
    v33 = v32;
    do
    {
      v34 = a1[1];
      v35 = *(_QWORD *)(v34 + 8);
      v36 = sub_22E779F8C(v35, *(_QWORD *)(v34 + 16), v34 + 32, (_DWORD *)(v34 + 24));
      v37 = sub_22E77F870(v35, v36);
      v38 = v42;
      if (v42 >= (unint64_t)HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v38 = v42;
      }
      *((_QWORD *)v41 + v38) = v37;
      LODWORD(v42) = v42 + 1;
      --v33;
    }
    while (v33);
  }
  sub_22F3B455C((_QWORD *)(a2 + 40), v41, v32, *(_QWORD *)(*a1 + 128));
  if (v41 != v43)
    free(v41);
}

uint64_t sub_22F2C0A9C(unint64_t a1, unint64_t *a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15[2];

  if (a2)
    v4 = a2 + 11;
  else
    v4 = 0;
  v15[0] = sub_22E79AAB4((uint64_t *)a1, v4);
  v15[1] = v5;
  sub_22F2C0508(a1, (uint64_t)a2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(a1 + 40) = sub_22E77A180(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7));
  sub_22E79AC9C((_QWORD *)a1, v4, v15);
  a2[14] = (unint64_t)sub_22F2C058C((_QWORD *)a1);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  if (*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9))
  {
    sub_22F3B4AC4((unint64_t)a2);
    sub_22F2C0738((uint64_t *)a1, a2[15] & 0xFFFFFFFFFFFFFFF8);
    v11 = (*(uint64_t (**)(unint64_t *))(*a2 + 32))(a2);
    if (*(_QWORD *)(v11 + 120) >= 8uLL)
    {
      v12 = v11;
      sub_22E79A854(a1, v11, a2[15] & 0xFFFFFFFFFFFFFFF8);
      a2[15] = *(_QWORD *)(v12 + 120);
    }
    else
    {
      *(_QWORD *)((*(uint64_t (**)(unint64_t *))(*a2 + 32))(a2) + 120) = a2[15];
      *(_QWORD *)((a2[15] & 0xFFFFFFFFFFFFFFF8) + 64) = 0;
    }
    result = sub_22E3BA850(*(_QWORD *)a1 + 3704, a2);
    v13 = *(_QWORD *)a1;
    v14 = *(_DWORD *)(v13 + 10608);
    if (v14 >= *(_DWORD *)(v13 + 10612))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(v13 + 10608);
    }
    *(_QWORD *)(*(_QWORD *)(v13 + 10600) + 8 * v14) = a2;
    ++*(_DWORD *)(v13 + 10608);
  }
  else
  {
    result = (*(uint64_t (**)(unint64_t *))(*a2 + 32))(a2);
    a2[15] = *(_QWORD *)(result + 120);
  }
  return result;
}

uint64_t sub_22F2C0C40(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  char v8;
  __int128 v9;
  _DWORD v10[4];
  void *v11;
  uint64_t v12;
  _BYTE v13[64];
  __int128 v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[10];

  v17[9] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10[0] = 0;
  sub_22F2C3D38((uint64_t)&v7, a1, &v9, v10);
  v4 = v7;
  if (v8)
  {
    v11 = v13;
    v12 = 0x400000000;
    v14 = *a2;
    v15 = v17;
    v16 = 0x400000000;
    sub_22F2C3CCC(a1 + 56, (unint64_t)&v14);
    if (v15 != v17)
      free(v15);
    if (v11 != v13)
      free(v11);
    v5 = *(_DWORD *)(a1 + 64) - 1;
    *(_DWORD *)(v4 + 16) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v7 + 16);
  }
  return *(_QWORD *)(a1 + 56) + 96 * v5 + 16;
}

void sub_22F2C0D54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD v24[16];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  v25 = v27;
  v26 = 0x1000000000;
  if (v6 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v6)
  {
    v7 = v6;
    do
    {
      v8 = a1[1];
      v9 = *(_QWORD *)(v8 + 8);
      v10 = sub_22E779F8C(v9, *(_QWORD *)(v8 + 16), v8 + 32, (_DWORD *)(v8 + 24));
      v11 = sub_22E77F870(v9, v10);
      v12 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v26;
      }
      *((_QWORD *)v25 + v12) = v11;
      LODWORD(v26) = v26 + 1;
      --v7;
    }
    while (v7);
  }
  v23 = 0;
  if (v6 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v6)
  {
    v13 = v6;
    do
    {
      v14 = a1[1];
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 16);
      v17 = *(unsigned int *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = v17 + 1;
      HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
      LODWORD(v18) = HIDWORD(v18);
      v19 = sub_22E77BAB4(v15, v16, v18 >> 1);
      v20 = v23;
      if (v23 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v23;
      }
      v24[v20] = v19;
      ++v23;
      --v13;
    }
    while (v13);
  }
  sub_22F3B45C4((_QWORD *)(a2 + 8), v25, v6, v24, *(_QWORD *)(*a1 + 128));
  v21 = a1[1];
  v22 = *(unsigned int *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  *(_DWORD *)(a2 + 36) = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22);
  *(_BYTE *)(a2 + 32) |= 1u;
  if (v25 != v27)
    free(v25);
}

void sub_22F2C0F90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _DWORD v28[16];
  void *v29;
  uint64_t v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v6 = a1[1];
  v7 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(a3 + 40) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7);
  *(_BYTE *)(a3 + 8) |= 2u;
  v8 = a1[1];
  v9 = *(unsigned int *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9);
  v29 = v31;
  v30 = 0x1000000000;
  if (v10 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v10)
  {
    v11 = v10;
    do
    {
      v12 = a1[1];
      v13 = *(_QWORD *)(v12 + 8);
      v14 = sub_22E779F8C(v13, *(_QWORD *)(v12 + 16), v12 + 32, (_DWORD *)(v12 + 24));
      v15 = sub_22E77F870(v13, v14);
      v16 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v30;
      }
      *((_QWORD *)v29 + v16) = v15;
      LODWORD(v30) = v30 + 1;
      --v11;
    }
    while (v11);
  }
  v27 = 0;
  if (v10 >= 0x11uLL)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)v10)
  {
    v17 = v10;
    do
    {
      v18 = a1[1];
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(_QWORD *)(v18 + 16);
      v21 = *(unsigned int *)(v18 + 24);
      *(_DWORD *)(v18 + 24) = v21 + 1;
      HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
      LODWORD(v22) = HIDWORD(v22);
      v23 = sub_22E77BAB4(v19, v20, v22 >> 1);
      v24 = v27;
      if (v27 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = v27;
      }
      v28[v24] = v23;
      ++v27;
      --v17;
    }
    while (v17);
    sub_22F3B45C4((_QWORD *)(a3 + 16), v29, v10, v28, *(_QWORD *)(*a1 + 128));
    v25 = *(_QWORD *)(a2 + 104);
    if (v25)
    {
      v26 = *(_QWORD *)(a2 + 40);
      if (v26 < 8 || (v26 & 7) != 0)
        sub_22EFDAD04(v25, v29, v10, *(_QWORD *)(*a1 + 128));
    }
  }
  else
  {
    sub_22F3B45C4((_QWORD *)(a3 + 16), v29, 0, v28, *(_QWORD *)(*a1 + 128));
  }
  if (v29 != v31)
    free(v29);
}

void sub_22F2C1228(uint64_t *a1, unint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24[2];

  if (a2)
    v4 = (unint64_t *)(a2 + 88);
  else
    v4 = 0;
  v24[0] = sub_22E79AAB4(a1, v4);
  v24[1] = v5;
  sub_22F2C0508((uint64_t)a1, a2);
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(unsigned int *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 136) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = a1[1];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(unsigned int *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 140) = sub_22E77BAB4(v12, v13, v10 >> 1);
  v15 = a1[1];
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(unsigned int *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 144) = sub_22E77BAB4(v16, v17, v10 >> 1);
  sub_22E3BA850(*a1 + 10440, (const void *)a2);
  v19 = a1[1];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = sub_22E779F8C(v20, *(_QWORD *)(v19 + 16), v19 + 32, (_DWORD *)(v19 + 24));
  *(_QWORD *)(a2 + 104) = sub_22E77F870(v20, v21);
  *(_QWORD *)(a2 + 112) = sub_22F2C058C(a1);
  sub_22E79B098(a1, v4, v24);
  sub_22F3B68A0(a2);
  sub_22F2C0F90(a1, a2, *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8);
  v22 = *(_QWORD *)(a2 + 40);
  if (v22 >= 8 && (v22 & 7) == 0)
  {
    v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    sub_22E79AFB4(a1, v23, (uint64_t *)(*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(v23 + 120);
  }
}

uint64_t sub_22F2C13AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 24);
  v5 += 24;
  v7 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)v5 = v6 + 1;
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 - 16);
  v9 = sub_22E779F8C(v8, *(_QWORD *)(v5 - 8), v5 + 8, (_DWORD *)v5);
  *(_QWORD *)(a2 + 48) = sub_22E77F870(v8, v9);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v11, v12, v14 >> 1);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(unsigned int *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v16, v17, v14 >> 1);
  *(_DWORD *)(a2 + 60) = result;
  return result;
}

uint64_t sub_22F2C1470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v13, v14, v11 >> 1);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned int *)(v16 + 24);
  if (*(_DWORD *)(v16 + 40) <= v17)
  {
    v21 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    *(_DWORD *)(v16 + 24) = v17 + 1;
    v20 = sub_22E77A180(v19, v18, *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v17));
    v21 = sub_22E77D8C8(v19, v20);
    v16 = *(_QWORD *)(a1 + 8);
  }
  v22 = sub_22E782300(v16);
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v22;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(unsigned int *)(v23 + 24);
  *(_DWORD *)(v23 + 24) = v24 + 1;
  *(_DWORD *)(a2 + 72) |= *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v24) & 0x1FFFF;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(unsigned int *)(v25 + 24);
  *(_DWORD *)(v25 + 24) = v26 + 1;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a2 + 76) & 0xFFFE0000 | *(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v26) & 0x1FFFF;
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(unsigned int *)(v27 + 24);
  *(_DWORD *)(v27 + 24) = v28 + 1;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a2 + 76) & 0xFFF9FFFF | ((*(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v28) & 3) << 17);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  v30 = v29;
  v31 = *(_QWORD *)(a1 + 8);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(_QWORD *)(v31 + 16);
  v34 = *(unsigned int *)(v31 + 24);
  *(_DWORD *)(v31 + 24) = v34 + 1;
  HIDWORD(v35) = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8 * v34);
  LODWORD(v35) = HIDWORD(v35);
  v36 = sub_22E77BAB4(v32, v33, v35 >> 1);
  *(_QWORD *)(a2 + 80) = v30;
  *(_DWORD *)(a2 + 96) = v36;
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  v38 = v37;
  v39 = *(_QWORD *)(a1 + 8);
  v40 = *(_QWORD *)(v39 + 8);
  v41 = *(_QWORD *)(v39 + 16);
  v42 = *(unsigned int *)(v39 + 24);
  *(_DWORD *)(v39 + 24) = v42 + 1;
  HIDWORD(v35) = *(_QWORD *)(*(_QWORD *)(v39 + 32) + 8 * v42);
  LODWORD(v35) = HIDWORD(v35);
  v43 = sub_22E77BAB4(v40, v41, v35 >> 1);
  *(_QWORD *)(a2 + 88) = v38;
  *(_DWORD *)(a2 + 100) = v43;
  v44 = *(_QWORD *)(a1 + 8);
  v45 = *(_QWORD *)(v44 + 8);
  v46 = sub_22E779F8C(v45, *(_QWORD *)(v44 + 16), v44 + 32, (_DWORD *)(v44 + 24));
  *(_QWORD *)(a2 + 104) = sub_22E77F870(v45, v46);
  v47 = *(_QWORD *)(a1 + 8);
  v48 = *(_QWORD *)(v47 + 8);
  v49 = sub_22E779F8C(v48, *(_QWORD *)(v47 + 16), v47 + 32, (_DWORD *)(v47 + 24));
  *(_QWORD *)(a2 + 112) = sub_22E77F870(v48, v49);
  v50 = *(_QWORD *)(a1 + 8);
  v51 = *(_QWORD *)(v50 + 8);
  v52 = sub_22E779F8C(v51, *(_QWORD *)(v50 + 16), v50 + 32, (_DWORD *)(v50 + 24));
  result = sub_22E77F870(v51, v52);
  *(_QWORD *)(a2 + 120) = result;
  return result;
}

uint64_t sub_22F2C16B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  sub_22F2C0508(a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  v7 = sub_22E77F870(v5, v6);
  return sub_22F3B6BE4(a2, v7);
}

uint64_t sub_22F2C1708(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 36) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = a1[1];
  v10 = *(_QWORD *)(v9 + 8);
  v11 = sub_22E779F8C(v10, *(_QWORD *)(v9 + 16), v9 + 32, (_DWORD *)(v9 + 24));
  *(_QWORD *)(a2 + 48) = sub_22E77F870(v10, v11);
  v12 = a1[1];
  v13 = *(_QWORD *)(v12 + 8);
  v14 = sub_22E779F8C(v13, *(_QWORD *)(v12 + 16), v12 + 32, (_DWORD *)(v12 + 24));
  *(_QWORD *)(a2 + 56) = sub_22E77F870(v13, v14);
  v15 = a1[1];
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(unsigned int *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 40) = sub_22E77BAB4(v16, v17, v8 >> 1);
  v19 = a1[1];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = sub_22E779F8C(v20, *(_QWORD *)(v19 + 16), v19 + 32, (_DWORD *)(v19 + 24));
  *(_QWORD *)(a2 + 64) = sub_22E77F870(v20, v21);
  v22 = a1[1];
  v23 = *(_QWORD *)(v22 + 8);
  v24 = sub_22E779F8C(v23, *(_QWORD *)(v22 + 16), v22 + 32, (_DWORD *)(v22 + 24));
  *(_QWORD *)(a2 + 72) = sub_22E77F870(v23, v24);
  v25 = a1[1];
  result = *(_QWORD *)(v25 + 8);
  if (*(_DWORD *)(result + 10984) == 3)
  {
    v31 = *(unsigned int *)(result + 10848);
    v32 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v31 - 8);
    *(_DWORD *)(result + 10848) = v31 - 1;
    *(_QWORD *)(a2 + 80) = v32;
    goto LABEL_6;
  }
  v27 = sub_22E7B94C8(result, *(_QWORD *)(v25 + 16));
  v28 = a1[1];
  result = *(_QWORD *)(v28 + 8);
  v29 = *(_DWORD *)(result + 10984);
  *(_QWORD *)(a2 + 80) = v27;
  if (v29 == 3)
  {
LABEL_6:
    v33 = *(unsigned int *)(result + 10848);
    v30 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v33 - 8);
    *(_DWORD *)(result + 10848) = v33 - 1;
    goto LABEL_4;
  }
  result = sub_22E7B94C8(result, *(_QWORD *)(v28 + 16));
  v30 = result;
LABEL_4:
  *(_QWORD *)(a2 + 88) = v30;
  return result;
}

uint64_t sub_22F2C18A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  sub_22E79951C(a1, a2);
  v4 = a1[1];
  v6 = *(_QWORD *)(v4 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  v8 = sub_22E768E34(v6, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7));
  *(_QWORD *)(a2 + 72) = sub_22E785944(v6, v8);
  v9 = a1[1];
  v11 = *(_QWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v12 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  v13 = sub_22E768E34(v11, v10, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12));
  result = sub_22E785944(v11, v13);
  *(_QWORD *)(a2 + 80) = result;
  return result;
}

uint64_t *sub_22F2C1938(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E799460((uint64_t)a1, a2);
  v5 = *a1;
  v4 = a1[1];
  v6 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6);
  *(_DWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 56) = sub_22E3CD3D4(*(_QWORD *)(v5 + 128) + 2032, 8 * v7, 3);
  if (*(_DWORD *)(a2 + 64))
  {
    v8 = 0;
    do
    {
      v9 = a1[1];
      v10 = *(_QWORD *)(v9 + 8);
      v11 = sub_22E779F8C(v10, *(_QWORD *)(v9 + 16), v9 + 32, (_DWORD *)(v9 + 24));
      *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v8++) = sub_22E77F870(v10, v11);
    }
    while (v8 != *(_DWORD *)(a2 + 64));
  }
  return sub_22E79BF78(a1, a2);
}

uint64_t sub_22F2C19E8(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_22E79C050(a1, a2);
  if (*(_DWORD *)(a2 + 100))
  {
    v5 = 0;
    do
    {
      v6 = a1[1];
      v7 = *(_QWORD *)(v6 + 8);
      v8 = sub_22E779F8C(v7, *(_QWORD *)(v6 + 16), v6 + 32, (_DWORD *)(v6 + 24));
      result = sub_22E77F870(v7, v8);
      *(_QWORD *)(a2 + 104 + 8 * v5) = result;
      *(_QWORD *)(result + 56) = a2;
      ++v5;
    }
    while (v5 != *(_DWORD *)(a2 + 100));
  }
  return result;
}

uint64_t sub_22F2C1A68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v11 = *(unsigned int *)(v5 + 10848);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v11 - 8);
    *(_DWORD *)(v5 + 10848) = v11 - 1;
  }
  else
  {
    v6 = sub_22E7B94C8(v5, *(_QWORD *)(v4 + 16));
    v4 = a1[1];
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 40) = v6;
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v8 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v8);
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v5, v7, v9 >> 1);
  *(_DWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_22F2C1AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(unsigned int *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  result = sub_22F3AD808(a2, *(_QWORD *)(v6 + 8 * (v5 + 1)) != 0);
  if (*(_DWORD *)(a2 + 72))
  {
    v9 = 0;
    do
    {
      v10 = a1[1];
      v11 = *(_QWORD *)(v10 + 8);
      v12 = sub_22E779F8C(v11, *(_QWORD *)(v10 + 16), v10 + 32, (_DWORD *)(v10 + 24));
      result = sub_22E77F870(v11, v12);
      v13 = v9;
      if (v7 == v9)
      {
        *(_DWORD *)(a2 + 76) = v7;
        v13 = v7;
      }
      *(_QWORD *)(a2 + 88 + 8 * v13) = result;
      ++v9;
    }
    while (v9 < *(unsigned int *)(a2 + 72));
  }
  return result;
}

uint64_t sub_22F2C1BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  result = sub_22E77BAB4(v8, v9, v11 >> 1);
  *(_DWORD *)(a2 + 76) = result;
  return result;
}

_QWORD *sub_22F2C1C30(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[2];

  if (a2)
    v4 = (unint64_t *)(a2 + 48);
  else
    v4 = 0;
  v23[0] = sub_22E79C9BC((uint64_t *)a1, v4);
  v23[1] = v5;
  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  v9 = *(_QWORD *)(v7 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v9 + 8 * v8);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(unsigned int *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(v9 + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 64) = sub_22E77BAB4(v10, v11, v13 >> 1);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v14 + 16);
  v17 = *(unsigned int *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 68) = sub_22E77BAB4(v15, v16, v13 >> 1);
  *(_QWORD *)(a2 + 72) = sub_22E7823B4(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 80) = v18;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = sub_22E779F8C(v20, *(_QWORD *)(v19 + 16), v19 + 32, (_DWORD *)(v19 + 24));
  *(_QWORD *)(a2 + 88) = sub_22E77F870(v20, v21);
  return sub_22E79CBA4((_QWORD *)a1, v4, v23);
}

uint64_t *sub_22F2C1D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v8, v9, v11 >> 1);
  *(_QWORD *)(a2 + 64) = sub_22E7823B4(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = sub_22E7861C4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = sub_22E779F8C(v14, *(_QWORD *)(v13 + 16), v13 + 32, (_DWORD *)(v13 + 24));
  v16 = sub_22E77F870(v14, v15);
  v17 = *(_QWORD *)(a2 + 48) & 3;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_DWORD *)(v18 + 24);
  v18 += 24;
  *(_DWORD *)v18 = v19 + 1;
  *(_QWORD *)(a2 + 48) = v17 | v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v19) != 0));
  v20 = *(_QWORD *)(v18 - 16);
  v21 = sub_22E779F8C(v20, *(_QWORD *)(v18 - 8), v18 + 8, (_DWORD *)v18);
  v22 = sub_22E77F870(v20, v21);
  if (v22)
    sub_22F36853C(*(_QWORD *)(*(_QWORD *)a1 + 128), a2, v22);
  return sub_22E79CC60((uint64_t *)a1, a2);
}

uint64_t *sub_22F2C1E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 60) = sub_22E77BAB4(v13, v14, v11 >> 1);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = sub_22E779F8C(v17, *(_QWORD *)(v16 + 16), v16 + 32, (_DWORD *)(v16 + 24));
  *(_QWORD *)(a2 + 64) = sub_22E77F870(v17, v18);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = sub_22E779F8C(v20, *(_QWORD *)(v19 + 16), v19 + 32, (_DWORD *)(v19 + 24));
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 48) & 7 | sub_22E77F870(v20, v21);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(v22 + 8);
  v24 = sub_22E779F8C(v23, *(_QWORD *)(v22 + 16), v22 + 32, (_DWORD *)(v22 + 24));
  v25 = sub_22E77F870(v23, v24);
  if (v25)
    sub_22F3685D8(*(_QWORD *)(*(_QWORD *)a1 + 128), a2, v25);
  return sub_22E79CD38((uint64_t *)a1, a2);
}

uint64_t *sub_22F2C1F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 24);
  v5 += 24;
  v7 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)v5 = v6 + 1;
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 - 16);
  v9 = sub_22E779F8C(v8, *(_QWORD *)(v5 - 8), v5 + 8, (_DWORD *)v5);
  *(_QWORD *)(a2 + 48) = sub_22E77F870(v8, v9);
  if (*(_DWORD *)(a2 + 56))
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(v11 + 8);
      v13 = sub_22E779F8C(v12, *(_QWORD *)(v11 + 16), v11 + 32, (_DWORD *)(v11 + 24));
      *(_QWORD *)(a2 + 64 + 8 * v10++) = sub_22E77F870(v12, v13);
    }
    while (v10 != *(_DWORD *)(a2 + 56));
  }
  return sub_22E79CE10((uint64_t *)a1, a2);
}

_QWORD *sub_22F2C2068(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[2];

  if (a2)
    v4 = (unint64_t *)(a2 + 48);
  else
    v4 = 0;
  v22[0] = sub_22E79C9BC((uint64_t *)a1, v4);
  v22[1] = v5;
  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + 24);
  v7 += 24;
  v9 = *(_QWORD *)(v7 + 8);
  *(_DWORD *)v7 = v8 + 1;
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v9 + 8 * v8);
  v10 = *(_QWORD *)(v7 - 16);
  v11 = sub_22E779F8C(v10, *(_QWORD *)(v7 - 8), v7 + 8, (_DWORD *)v7);
  *(_QWORD *)(a2 + 64) = sub_22E77F870(v10, v11);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xC000FFFF | ((*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v13) & 0x3FFF) << 16);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 8);
  v16 = sub_22E779F8C(v15, *(_QWORD *)(v14 + 16), v14 + 32, (_DWORD *)(v14 + 24));
  *(_QWORD *)(a2 + 72) = sub_22E77F870(v15, v16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 8);
  v19 = sub_22E779F8C(v18, *(_QWORD *)(v17 + 16), v17 + 32, (_DWORD *)(v17 + 24));
  v20 = sub_22E77F870(v18, v19);
  if (v20)
    sub_22F368670(*(_QWORD *)(*(_QWORD *)a1 + 128), a2, v20);
  return sub_22E79CEE8((_QWORD *)a1, v4, v22);
}

uint64_t sub_22F2C219C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  sub_22F2C2068(a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 80) = sub_22E77F870(v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = sub_22E779F8C(v8, *(_QWORD *)(v7 + 16), v7 + 32, (_DWORD *)(v7 + 24));
  result = sub_22E77F870(v8, v9);
  *(_QWORD *)(a2 + 88) = result;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned int *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a2 + 96) & 0xFE | *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12) & 1;
  return result;
}

uint64_t sub_22F2C223C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_22E798084((uint64_t *)a1, a2);
  sub_22E7862BC(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(a1 + 44) = *(_QWORD *)(v7 + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v7 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v13, v14, v11 >> 1);
  *(_QWORD *)(a2 + 56) = sub_22E7823B4(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 64) = v16;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 8);
  v19 = sub_22E779F8C(v18, *(_QWORD *)(v17 + 16), v17 + 32, (_DWORD *)(v17 + 24));
  *(_QWORD *)(a2 + 72) = sub_22E77F870(v18, v19);
  result = sub_22E7B5764(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(a1 + 8) + 32, (_DWORD *)(*(_QWORD *)(a1 + 8) + 24));
  *(_QWORD *)(a2 + 80) = result;
  return result;
}

uint64_t *sub_22F2C2324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E799460((uint64_t)a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_QWORD *)(a2 + 64) = sub_22E7823B4(a1[1]);
  *(_QWORD *)(a2 + 72) = v9;
  *(_QWORD *)(a2 + 80) = sub_22E7861C4(a1[1], *(_QWORD *)(a2 + 40));
  v10 = a1[1];
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 60) = sub_22E77BAB4(v11, v12, v8 >> 1);
  return sub_22E79CFA4(a1, a2);
}

uint64_t *sub_22F2C23BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E7988F0((uint64_t)a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 60) = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_QWORD *)(a2 + 72) = sub_22E7823B4(a1[1]);
  *(_QWORD *)(a2 + 80) = v9;
  v10 = a1[1];
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 64) = sub_22E77BAB4(v11, v12, v8 >> 1);
  return sub_22E79D07C(a1, a2);
}

__n128 sub_22F2C2444(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *((_QWORD *)a2 + 7);
  v5 = *(__int128 *)((char *)a2 + 40);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = v4 & 3;
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v6 = *((_QWORD *)a2 + 10);
  v7 = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = v6 & 3;
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = v6;
  result = *(__n128 *)((char *)a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_22F2C2498(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  a2[21] = sub_22E79F080(a1[1]);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  a2[20] = sub_22E77F870(v5, v6);
  sub_22E7996A0(a1, (unint64_t)a2);
  v7 = a1[1];
  v8 = *(unsigned int *)(v7 + 24);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8);
  *(_DWORD *)(v7 + 24) = v9;
  a2[10] = a2[10] & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(v10 != 0) << 37);
}

uint64_t sub_22F2C252C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E79F108(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  result = sub_22E77F870(v5, v6);
  if (result)
  {
    v8 = result;
    v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    v10 = a1;
    v11 = v9;
    v12 = v10[1];
    result = *(_QWORD *)(v12 + 8);
    if (*(_DWORD *)(result + 10984) == 3)
    {
      v14 = *(unsigned int *)(result + 10848);
      v13 = *(_QWORD *)(*(_QWORD *)(result + 10840) + 8 * v14 - 8);
      *(_DWORD *)(result + 10848) = v14 - 1;
    }
    else
    {
      result = sub_22E7B94C8(result, *(_QWORD *)(v12 + 16));
      v13 = result;
    }
    if (!*(_QWORD *)(v11 + 160))
    {
      *(_QWORD *)(v11 + 160) = v8;
      *(_QWORD *)(v11 + 168) = v13;
    }
  }
  return result;
}

uint64_t sub_22F2C25E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  sub_22E798084(a1, a2);
  result = sub_22F2C269C(a1[1]);
  v5 = a1[1];
  v6 = *(unsigned int *)(v5 + 24);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)(v7 + 8 * v6) != 0));
  v9 = v6 + 1;
  *(_DWORD *)(v5 + 24) = v9;
  *(_QWORD *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 48) = v8;
  v10 = v7 + 8 * *(unsigned int *)(v5 + 40);
  v11 = *(unsigned int *)(v10 - 8);
  if (*(_DWORD *)(v10 - 8))
  {
    v12 = (_DWORD *)(a2 + 56);
    do
    {
      v13 = a1[1];
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *(_QWORD *)(v13 + 16);
      v16 = *(unsigned int *)(v13 + 24);
      *(_DWORD *)(v13 + 24) = v16 + 1;
      HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
      LODWORD(v17) = HIDWORD(v17);
      result = sub_22E77BAB4(v14, v15, v17 >> 1);
      *v12++ = result;
      --v11;
    }
    while (v11);
    v5 = a1[1];
    v9 = *(_DWORD *)(v5 + 24);
  }
  *(_DWORD *)(v5 + 24) = v9 + 1;
  return result;
}

uint64_t sub_22F2C269C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (*(_DWORD *)(a1 + 40) == (_DWORD)v1)
    return 0;
  *(_DWORD *)(a1 + 24) = v1 + 1;
  v4 = sub_22E76C40C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v1));
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 4208) < v5)
  {
    sub_22E769C10(v6, "submodule ID out of range in AST file", 0x25uLL);
    return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(v6 + 4200) + 8 * (v5 - 1));
}

uint64_t sub_22F2C2724(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  sub_22E798084(a1, a2);
  v5 = *a1;
  v4 = a1[1];
  v6 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v6 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6);
  *(_DWORD *)(a2 + 36) = v7;
  *(_QWORD *)(a2 + 40) = sub_22E3CD3D4(*(_QWORD *)(v5 + 128) + 2032, 8 * v7, 3);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 8 * v7;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 40) + v8) = sub_22E78649C(a1[1]);
      v8 += 8;
    }
    while (v9 != v8);
  }
  v10 = a1[1];
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v12 + 1;
  if (*(_QWORD *)(v11 + 8 * v12))
  {
    v13 = *(_QWORD *)(v10 + 8);
    v14 = sub_22E779F8C(v13, *(_QWORD *)(v10 + 16), v10 + 32, (_DWORD *)(v10 + 24));
    v15 = sub_22E77F870(v13, v14) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    v15 = (unint64_t)sub_22E782300(v10) | 4;
  }
  *(_QWORD *)(a2 + 48) = v15;
  v16 = a1[1];
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v16 + 16);
  v19 = *(unsigned int *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v20) = HIDWORD(v20);
  result = sub_22E77BAB4(v17, v18, v20 >> 1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

void sub_22F2C2828(uint64_t a1, _QWORD *a2)
{
  void *v4[2];
  _QWORD v5[17];

  v5[16] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 32) == sub_22E79F25C((uint64_t *)a1, a2))
  {
    v4[0] = v5;
    v4[1] = (void *)0x2000000000;
    sub_22E79F600(a1, (uint64_t)v4);
    sub_22E79F6B0((uint64_t)a2, (unsigned int *)v4);
    if (v4[0] != v5)
      free(v4[0]);
  }
}

uint64_t sub_22F2C28D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 40) = sub_22E77F870(v5, v6);
  result = a1[1];
  v8 = *(unsigned int *)(result + 24);
  *(_DWORD *)(result + 24) = v8 + 1;
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v8))
  {
    result = sub_22E782AE8(result);
    *(_QWORD *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_22F2C2950(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  uint64_t v5;
  unsigned int v7;

  inserted = llvm::FoldingSetBase::GetOrInsertNode();
  if (inserted)
    v5 = inserted - 104;
  else
    v5 = 0;
  if (v5 == a2)
  {
    v7 = *(_DWORD *)(a1 + 24);
    if (v7 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7) = a2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v5;
}

uint64_t sub_22F2C29E8(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  uint64_t v5;
  unsigned int v7;

  inserted = llvm::FoldingSetBase::GetOrInsertNode();
  if (inserted)
    v5 = inserted - 104;
  else
    v5 = 0;
  if (v5 == a2)
  {
    v7 = *(_DWORD *)(a1 + 24);
    if (v7 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7) = a2;
    ++*(_DWORD *)(a1 + 24);
  }
  return v5;
}

uint64_t sub_22F2C2A80(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  a2[53] = sub_22E78649C(*(_QWORD *)(a1 + 8));
  a2[54] = sub_22E782AE8(*(_QWORD *)(a1 + 8));
  result = sub_22E79FE30((uint64_t *)a1, (unint64_t)a2);
  if (*(_DWORD *)(a1 + 32) == (_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = sub_22E779F8C(v6, *(_QWORD *)(v5 + 16), v5 + 32, (_DWORD *)(v5 + 24));
    result = sub_22E77F870(v6, v7);
    v8 = a2[55] & 3;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(unsigned int *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 1;
    a2[55] = v8 | result & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) != 0));
  }
  return result;
}

_DWORD *sub_22F2C2B34(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD v14[2];

  result = sub_22E79F1E0(a1, (_QWORD *)a2);
  v5 = a1[1];
  v6 = *(unsigned int *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 64) & 0xFFF00000 | *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v6) & 0xFFFFF;
  v7 = a1[1];
  v8 = *(unsigned int *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 64) & 0xFFFFF | ((unsigned __int16)*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) << 20);
  if (*(_BYTE *)(a2 + 81))
  {
    v11 = *(unsigned int *)(a2 + 84);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)(a2 + 88);
      do
      {
        result = sub_22E78649C(a1[1]);
        *v12++ = result;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    result = (_DWORD *)a1[1];
    v9 = result[6];
    v10 = *((_QWORD *)result + 4);
    *(_BYTE *)(a2 + 80) = *(_QWORD *)(v10 + 8 * v9) != 0;
    result[6] = v9 + 2;
    if (*(_QWORD *)(v10 + 8 * (v9 + 1)))
    {
      v13 = *(_QWORD *)(*a1 + 128);
      sub_22E782760((uint64_t)result, (uint64_t)v14);
      return (_DWORD *)sub_22F3B8DA4(a2, v13, v14);
    }
  }
  return result;
}

uint64_t sub_22F2C2C30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  if (*(_DWORD *)(v5 + 10984) == 3)
  {
    v16 = *(unsigned int *)(v5 + 10848);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v5 + 10848) = v16 - 1;
    v7 = 1;
  }
  else
  {
    v6 = sub_22E7B94C8(v5, *(_QWORD *)(v4 + 16));
    v4 = a1[1];
    v5 = *(_QWORD *)(v4 + 8);
    v7 = *(_DWORD *)(v5 + 10984) == 3;
  }
  v8 = *(_QWORD *)(a2 + 40) & 1;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  v10 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(a2 + 40) = v8 | v6 & 0xFFFFFFFFFFFFFFFDLL | (2 * (*(_QWORD *)(v10 + 8 * v9) != 0));
  if (v7)
  {
    v17 = *(unsigned int *)(v5 + 10848);
    v11 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v17 - 8);
    *(_DWORD *)(v5 + 10848) = v17 - 1;
  }
  else
  {
    v11 = sub_22E7B94C8(v5, *(_QWORD *)(v4 + 16));
    v4 = a1[1];
    v5 = *(_QWORD *)(v4 + 8);
    v10 = *(_QWORD *)(v4 + 32);
  }
  *(_QWORD *)(a2 + 48) = v11;
  v12 = *(_QWORD *)(v4 + 16);
  v13 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(v10 + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v5, v12, v14 >> 1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

_QWORD *sub_22F2C2D38(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_22E798084(a1, a2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = sub_22E779F8C(v5, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 48) = sub_22E77F870(v5, v6);
  v7 = a1[1];
  v8 = *(_QWORD *)(v7 + 8);
  if (*(_DWORD *)(v8 + 10984) == 3)
  {
    v17 = *(unsigned int *)(v8 + 10848);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v17 - 8);
    *(_DWORD *)(v8 + 10848) = v17 - 1;
  }
  else
  {
    v9 = sub_22E7B94C8(v8, *(_QWORD *)(v7 + 16));
    v7 = a1[1];
  }
  *(_QWORD *)(a2 + 40) = v9;
  v10 = *(unsigned int *)(v7 + 24);
  v11 = v10 + 1;
  *(_DWORD *)(v7 + 24) = v10 + 1;
  v12 = *(_QWORD *)(v7 + 32);
  if (*(_QWORD *)(v12 + 8 * v10))
  {
    v13 = sub_22EFC72E8(a2);
    v14 = sub_22E3CD3D4(v13 + 2032, 72, 3);
    sub_22E79B154(a1[1]);
    *(_QWORD *)(a2 + 64) = v14;
    v15 = sub_22EFC72E8(a2);
    sub_22EF5908C(v15, (uint64_t)sub_22E7B7544, v14);
    v7 = a1[1];
    v11 = *(_DWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 32);
  }
  *(_DWORD *)(v7 + 24) = v11 + 1;
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(v12 + 8 * v11);
  return sub_22F2C2E50(a1, a2);
}

_QWORD *sub_22F2C2E50(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*result + 128) + 2000) + 20) & 0x200000000000) != 0)
  {
    v3 = result;
    v4 = *result + 3560;
    v5 = *(_DWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = v5;
    result = (_QWORD *)sub_22F2C4D14(v4, (uint64_t)&v8);
    v6 = result[2];
    if (v6)
    {
      v7 = *(_QWORD *)(*v3 + 128);
      v8 = a2;
      result = sub_22F25E108((uint64_t *)(v7 + 1512), &v8);
      result[1] = v6;
    }
    else
    {
      result[2] = a2;
    }
  }
  return result;
}

void sub_22F2C2EE0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v7 = sub_22EFCAD5C(a2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = sub_22F2C5934(a1 + 3536, &v10);
  v9 = v8 + 1;
  if (*((_DWORD *)v8 + 4) <= a3)
    sub_22E50D8F0((uint64_t)(v8 + 1), a3 + 1);
  if (!*(_QWORD *)(*v9 + 8 * a3))
    *(_QWORD *)(*v9 + 8 * a3) = a4;
}

uint64_t sub_22F2C2F68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = 0;
  sub_22F2C55B0((uint64_t)&v7, a1, &v9, &v10);
  v4 = v7;
  if (v8)
  {
    v11 = v13;
    v12 = 0x200000000;
    v14 = *a2;
    v15 = v17;
    v16 = 0x200000000;
    sub_22F2C5540(a1 + 264, (unint64_t)&v14);
    if (v15 != v17)
      free(v15);
    if (v11 != v13)
      free(v11);
    v5 = *(_DWORD *)(a1 + 272) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v7 + 8);
  }
  return *(_QWORD *)(a1 + 264) + 40 * v5 + 8;
}

unint64_t sub_22F2C3070(_BOOL8 a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;

  v3 = a3;
  if (a2)
    v5 = (unint64_t)(a2 - 9);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a3 + 80);
  *a2 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  a2[1] = v6;
  v7 = sub_22EFC72E8(v5);
  result = sub_22EFBBF74(v5, v7);
  if (v3 && (_DWORD)result == 2)
  {
    while (1)
    {
      v9 = sub_22EFC72E8(v3);
      if (sub_22EFBBF74(v3, v9) == 2)
        break;
      result = v3 + 72;
      if ((*(_BYTE *)(v3 + 72) & 3) == 0)
      {
        result = sub_22E3CD31C((uint64_t *)result, v3);
        v3 = result;
        if (result)
          continue;
      }
      return result;
    }
    result = sub_22E77A7D4(a1, v3, v5);
    *(_DWORD *)(v5 + 96) |= 0x100u;
  }
  return result;
}

uint64_t sub_22F2C312C(uint64_t a1, int a2, unint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  llvm *v10[2];
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v8[0] = a1;
  v8[1] = a3;
  v8[2] = a1 + 10440;
  v9 = 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v12 = a2;
  v13 = a4;
  v5 = sub_22F257E10(a3);
  if (v5)
  {
    v6 = v5;
    do
    {
      if (*(_QWORD *)(v6 + 40))
      {
        v14 = *(_QWORD *)(v6 + 40);
        sub_22F2C34F4((uint64_t)v10, &v14)[1] = v6;
      }
      v9 = v6;
      v6 = *(_QWORD *)(v6 + 128);
    }
    while (v6);
  }
  sub_22E809E0C(a1 + 144, (unsigned int (*)(uint64_t, unsigned int *))sub_22E7B7CD4, (uint64_t)v8, 0);
  return llvm::deallocate_buffer(v10[0], (void *)(16 * v11));
}

void sub_22F2C31E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = a1;
  v3 = *(char **)(a1 + 16);
  if (v3 == *(char **)(a1 + 24))
  {
    v21 = a2;
    v5 = *(char **)a1;
    v4 = *(char **)(a1 + 8);
    if ((unint64_t)v4 <= *(_QWORD *)a1)
    {
      if (v3 == v5)
        v13 = 1;
      else
        v13 = (v3 - v5) >> 2;
      if (v13 >> 61)
        sub_22E3B3F8C();
      v14 = (char *)operator new(8 * v13);
      v15 = &v14[8 * (v13 >> 2)];
      v17 = v3 - v4;
      v16 = v3 == v4;
      v3 = v15;
      if (!v16)
      {
        v3 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = &v14[8 * (v13 >> 2)];
        do
        {
          v20 = *(_QWORD *)v4;
          v4 += 8;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      a2 = v21;
      v2 = a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = &v14[8 * v13];
      if (v5)
      {
        operator delete(v5);
        a2 = v21;
        v2 = a1;
        v3 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v6 = (uint64_t)&v4[-*(_QWORD *)a1] >> 3;
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -(v7 >> 1);
      v9 = v7 >> 1;
      v10 = &v4[-8 * v9];
      v11 = v3 - v4;
      if (v3 != v4)
      {
        memmove(&v4[-8 * v9], v4, v3 - v4);
        v3 = *(char **)(a1 + 8);
      }
      v12 = &v3[8 * v8];
      v3 = &v10[v11];
      a2 = v21;
      v2 = a1;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = &v10[v11];
    }
  }
  *(_QWORD *)v3 = *a2;
  *(_QWORD *)(v2 + 16) += 8;
}

void sub_22F2C331C(const void **a1, _QWORD *a2)
{
  const void **v2;
  char *v3;
  char *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char *__dst;
  _QWORD *v22;
  _QWORD *__src;

  v2 = a1;
  v3 = (char *)a1[1];
  if (v3 == *a1)
  {
    __src = a1[1];
    v22 = a2;
    v6 = a1[2];
    v5 = a1[3];
    if (v6 >= v5)
    {
      v11 = v5 - v3;
      v10 = v11 == 0;
      v12 = v11 >> 2;
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      if (v13 >> 61)
        sub_22E3B3F8C();
      v14 = (char *)operator new(8 * v13);
      v15 = &v14[(2 * v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v4 = v15;
      v16 = v6 - (_BYTE *)__src;
      if (v6 != (_BYTE *)__src)
      {
        v15 += v16 & 0xFFFFFFFFFFFFFFF8;
        v17 = 8 * (v16 >> 3);
        v18 = &v14[(2 * v13 + 6) & 0xFFFFFFFFFFFFFFF8];
        v19 = __src;
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          v17 -= 8;
        }
        while (v17);
      }
      a2 = v22;
      v2 = a1;
      *a1 = v14;
      a1[1] = v4;
      a1[2] = v15;
      a1[3] = &v14[8 * v13];
      if (__src)
      {
        operator delete(__src);
        a2 = v22;
        v2 = a1;
        v4 = (char *)a1[1];
      }
    }
    else
    {
      v7 = (v5 - v6) >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      __dst = &v3[8 * (v8 >> 1)];
      if (v6 != v3)
      {
        memmove(__dst, v3, v6 - v3);
        __src = a1[2];
      }
      a2 = v22;
      v2 = a1;
      v4 = __dst;
      a1[1] = __dst;
      a1[2] = &__src[v9];
    }
  }
  else
  {
    v4 = (char *)a1[1];
  }
  *((_QWORD *)v4 - 1) = *a2;
  v2[1] = (char *)v2[1] - 8;
}

unint64_t *sub_22F2C3480(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a3 + 72) & 6) != 2)
    v4 = 0;
  if (v4)
    v5 = v4;
  else
    v5 = a3;
  if (*result < 8)
  {
    v7 = 2;
  }
  else
  {
    result = (unint64_t *)sub_22F3B85F8(a2);
    v6 = *v3 & 0xFFFFFFFFFFFFFFF8;
    *result = v5;
    result[1] = v6;
    v7 = 4;
    v5 = (unint64_t)result;
  }
  *v3 = v5 & 0xFFFFFFFFFFFFFFF9 | v7;
  return result;
}

_QWORD *sub_22F2C34F4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2C355C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2C35F0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F2C355C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2C35F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B51BC(a1, v6);
  v8 = 0;
  sub_22F2C355C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2C36A0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = 0;
      result = sub_22F2C355C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F2C3748(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E793870(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2C37A8((uint64_t)a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_22F2C37A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B527C(a1, v6);
  v8 = 0;
  sub_22E793870((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2C3854(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E793870((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2C3900(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E4D6980(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_22F2C39AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E7B5BA4(a2, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

_QWORD *sub_22F2C39E4(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2C3A54((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2C3B08(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F2C3A54(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 56 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 56 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2C3B08(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E7B5D8C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2C3A54((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_22F2C3BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 120);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[7 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 7;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_22F2C3A54(a1, v10, &v14);
        v11 = v14;
        *v14 = *(_QWORD *)v4;
        v11[2] = 0x200000000;
        v11[1] = v11 + 3;
        v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22E5DE08C(v12, v4 + 8);
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13)
          free(v13);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

unint64_t sub_22F2C3CCC(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_22E7B6240(a1, a2);
  v4 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)result;
  *(_QWORD *)(v4 + 24) = 0x400000000;
  *(_QWORD *)(v4 + 16) = v4 + 32;
  v5 = v4 + 16;
  if (*(_DWORD *)(result + 24))
    result = sub_22E5DE08C(v5, result + 16);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2C3D38(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F2BEAD8(a2, a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 2;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 24 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F2C3E08((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_DWORD *)(result + 16) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 2;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
    }
    v13 = v14 + 24 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F2C3E08(_DWORD *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    sub_22E7B6080((uint64_t)a1, v6);
    v8 = 0;
    sub_22F2BEAD8((uint64_t)a1, a2, &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*a3 != -4096 || a3[1] != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2C3ED0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  int64x2_t *v7;
  int64x2_t *v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v7 = (int64x2_t *)(result + 8);
    v8 = (int64x2_t *)(result + 56);
  }
  else
  {
    v12 = *(_DWORD *)(result + 16);
    if (!v12)
      goto LABEL_5;
    v7 = *(int64x2_t **)(result + 8);
    v8 = (int64x2_t *)((char *)v7 + 24 * v12);
  }
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v7 = v9;
    v7 = (int64x2_t *)((char *)v7 + 24);
  }
  while (v7 != v8);
LABEL_5:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -4096) && (*(_QWORD *)a2 != -8192 || v10 != -8192))
    {
      v13 = 0;
      result = sub_22F2BEAD8((uint64_t)v5, (_QWORD *)a2, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      v11[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

void sub_22F2C3FBC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2C4028((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2C4028(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 96 * v2;
    v6 = (_QWORD *)(a2 + 16);
    v7 = v4 + 16;
    do
    {
      *((_OWORD *)v6 - 1) = *(_OWORD *)(v7 - 16);
      *v6 = v6 + 2;
      v6[1] = 0x400000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = (_QWORD *)sub_22E5DE08C((uint64_t)v6, v7);
      v8 = v7 - 16;
      v6 += 12;
      v7 += 96;
    }
    while (v8 + 96 != v5);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = 96 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 80);
        if ((void *)(v10 + v11 - 64) != v12)
          free(v12);
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t sub_22F2C40E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 56;
  if (!a2)
    v3 = 0;
  return sub_22F2C4184(a3, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
}

uint64_t sub_22F2C4100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 56;
  if (!a2)
    v5 = 0;
  sub_22F2C4184(a5, *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2C4140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 56;
  if (!a2)
    v4 = 0;
  sub_22F2C4184(a3, *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F2C4184(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = HIDWORD(a2);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = a2;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 >= v8)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = (unsigned __int16)v6;
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v11) = HIWORD(a2);
  ++*(_DWORD *)(a1 + 8);
  return sub_22E3CF554(a1, a3);
}

uint64_t sub_22F2C4270(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v4);
  if (v5 > (unint64_t)a2[3])
    sub_22F2C45E0((uint64_t)a2);
  for (; (_DWORD)v5; LODWORD(v5) = v5 - 1)
  {
    sub_22E79B154(v8, a1);
    v6 = sub_22E7B6504((uint64_t)a2, (unint64_t)v8, 1);
    sub_22EF53B28(*(_QWORD *)a2 + 72 * a2[2]++, v6);
    if (LODWORD(v8[0]) >= 2)
      sub_22EF53BC0(v8);
  }
  return *(_QWORD *)a2;
}

uint64_t sub_22F2C4364(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)a1 = 5;
  v9 = *((_DWORD *)a2 + 2);
  v8 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  v10 = *((_BYTE *)a2 + 12);
  v6 = *((_DWORD *)a3 + 2);
  v5 = *a3;
  *((_DWORD *)a3 + 2) = 0;
  v7 = *((_BYTE *)a3 + 12);
  sub_22F2C4444(a1, (uint64_t)&v8, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
    MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
  if (v9 >= 0x41 && v8)
    MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_22F2C4444(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = result;
  if (*(_DWORD *)(result + 16) >= 0x41u)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
      result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  *(_QWORD *)(v5 + 8) = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(v5 + 20) = *(_BYTE *)(a2 + 12);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
  {
    result = *(_QWORD *)(v5 + 24);
    if (result)
      result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  *(_QWORD *)(v5 + 24) = *(_QWORD *)a3;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(v5 + 36) = *(_BYTE *)(a3 + 12);
  return result;
}

uint64_t sub_22F2C44F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  v6 = a1 + 40;
  sub_22E582708(a1 + 8, 0.0);
  sub_22E582708(v6, 0.0);
  *(_DWORD *)a1 = 6;
  sub_22E7B64AC((llvm::APFloatBase *)v9, (uint64_t *)(a2 + 8));
  sub_22E7B64AC((llvm::APFloatBase *)v8, (uint64_t *)(a3 + 8));
  sub_22E51FDA0((uint64_t *)(a1 + 16), v9);
  sub_22E51FDA0((uint64_t *)(a1 + 48), v8);
  sub_22E4EEC9C(v8);
  sub_22E4EEC9C(v9);
  return a1;
}

void sub_22F2C45E0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2C464C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2C464C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 72 * v2;
    do
    {
      sub_22EF53B28(a2, v5);
      v5 += 72;
      a2 += 72;
      v6 -= 72;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 72 * v7;
      v10 = v8 - 72;
      do
      {
        if (*(_DWORD *)(v10 + v9) >= 2u)
          sub_22EF53BC0((uint64_t *)(v10 + v9));
        v9 -= 72;
      }
      while (v9);
    }
  }
}

char **sub_22F2C46D8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    v5 = v2 - 72;
    do
    {
      if (*(_DWORD *)&v5[v4] >= 2u)
        sub_22EF53BC0((uint64_t *)&v5[v4]);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F2C4748(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_DWORD *)a1 = 2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  v5 = *((_BYTE *)a2 + 12);
  if (*(_DWORD *)(a1 + 16) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
      MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 20) = v5;
  return a1;
}

unint64_t sub_22F2C47CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;

  v4 = a2 - 56;
  if (!a2)
    v4 = 0;
  v5 = (unsigned int *)(v4 + 64);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 48));
  return sub_22F3645E0(v5, a3);
}

uint64_t sub_22F2C480C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v7;

  v6 = a2 - 56;
  if (!a2)
    v6 = 0;
  v7 = (unsigned int *)(v6 + 64);
  sub_22E3CF554(a5, *(_QWORD *)(v6 + 48));
  sub_22F3645E0(v7, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2C4864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;

  v4 = a2 - 56;
  if (!a2)
    v4 = 0;
  v5 = (unsigned int *)(v4 + 64);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 48));
  sub_22F3645E0(v5, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

unint64_t sub_22F2C48B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;

  v4 = a2 - 56;
  if (!a2)
    v4 = 0;
  v5 = (unsigned int *)(v4 + 64);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
  return sub_22F3645E0(v5, a3);
}

uint64_t sub_22F2C4908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v7;

  v6 = a2 - 56;
  if (!a2)
    v6 = 0;
  v7 = (unsigned int *)(v6 + 64);
  sub_22E3CF554(a5, *(_QWORD *)(v6 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
  sub_22F3645E0(v7, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2C4970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 56;
  else
    v3 = 0;
  return sub_22F2C4984(v3, a3);
}

unint64_t sub_22F2C4984(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)(a1 + 64);
  sub_22E3CF554(a2, *(_QWORD *)(a1 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
  sub_22F3645E0(v3, a2);
  return sub_22E3D0BF8(*(_QWORD **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8));
}

uint64_t sub_22F2C49DC(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_DWORD *)(*(_QWORD *)v5 + 4 * v7);
    do
    {
      v9 = *(_DWORD *)v4;
      v4 += 4;
      *v8++ = v9;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 2);
  return result;
}

uint64_t sub_22F2C4A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
    v6 = a2 - 144;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 168);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 8);
  v10 = *(_QWORD *)(v6 + 184);
  v11 = sub_22EFC72E8(v6);
  sub_22EFEA3CC(a5, v8, v9, v10, v11);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2C4AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a2)
    v3 = a2 - 144;
  else
    v3 = 0;
  return sub_22F2C4AE4(v3, a3);
}

unint64_t sub_22F2C4AE4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = sub_22EFC72E8(a1);
  sub_22EFEA3CC(a2, v4, v5, v6, v7);
  return sub_22E3D0BF8(*(_QWORD **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8));
}

unint64_t sub_22F2C4B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (a2)
    v4 = a2 - 144;
  else
    v4 = 0;
  sub_22E7B7148(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F2C4B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
    v4 = a2 - 104;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 128);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned int *)(v5 + 8);
  v8 = *(_QWORD *)(v4 + 424);
  v9 = sub_22EFC72E8(v4);
  sub_22F3B9584(a3, v6, v7, v8, v9);
}

uint64_t sub_22F2C4BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
    v6 = a2 - 104;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 128);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 8);
  v10 = *(_QWORD *)(v6 + 424);
  v11 = sub_22EFC72E8(v6);
  sub_22F3B9584(a5, v8, v9, v10, v11);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2C4C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a2)
    v3 = a2 - 104;
  else
    v3 = 0;
  return sub_22F2C4C60(v3, a3);
}

unint64_t sub_22F2C4C60(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(a1 + 424);
  v7 = sub_22EFC72E8(a1);
  sub_22F3B9584(a2, v4, v5, v6, v7);
  return sub_22E3D0BF8(*(_QWORD **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8));
}

void sub_22F2C4CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a2)
    v3 = a2 - 104;
  else
    v3 = 0;
  sub_22E7B7364(v3, a3);
}

unint64_t sub_22F2C4CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (a2)
    v4 = a2 - 104;
  else
    v4 = 0;
  sub_22E7B7364(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F2C4D14(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_22F2C4D8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2C4E88(a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_22F2C4D8C(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_22F2C4E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B7558(a1, v6);
  v9 = 0;
  sub_22F2C4D8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2C4F44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45F5C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v14 = 0;
      result = sub_22F2C4D8C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_QWORD *)a2;
      *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
      v13[2] = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F2C5018(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E7B6870(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2C50B0(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F2C50B0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7B7628(a1, v6);
  v8 = 0;
  sub_22E7B6870(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2C5160(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7B6870(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2C5214(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2C52BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2C53AC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = a3[1];
    *(_QWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F2C52BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_22F2C53AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22E7B76E8(a1, v6);
    v8 = 0;
    sub_22F2C52BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2C5468(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_22F2C52BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      v12 = v13;
      *v13 = *a2;
      v12[1] = a2[1];
      v12[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

unint64_t sub_22F2C5540(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  _QWORD *v4;
  uint64_t v5;

  result = sub_22E7B7940(a1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8));
  *v4 = *(_QWORD *)result;
  v4[2] = 0x200000000;
  v4[1] = v4 + 3;
  v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16))
    result = sub_22F24C77C(v5, result + 8);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2C55B0(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F2BF3F8(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F2C5678((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 16;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F2C5678(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E7B77B8((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2BF3F8((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2C5734(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2BF3F8((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_22F2C57FC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2C5868((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2C5868(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 40 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        sub_22F24C77C(v5 - 16, v6);
      v5 += 40;
      v6 += 40;
    }
    while (v7 + 40 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 40 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 32);
        if ((void *)(v9 + v10 - 16) != v11)
          free(v11);
        v10 -= 40;
      }
      while (v10);
    }
  }
}

_QWORD *sub_22F2C5934(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2C59A8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2C5A44(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F2C59A8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v7 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v9 = v6;
        v13 = v5 + v10++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v8 = 0;
      if (v9)
        v6 = v9;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2C5A44(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22E7B79A8(a1, v6);
    v8 = 0;
    sub_22F2C59A8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F2C5AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F2C59A8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x200000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

unsigned int *sub_22F2C5BF0(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v8;
  unint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *__srca;

  v4 = *(_QWORD *)result;
  v5 = result[2];
  if (*(_QWORD *)result + 8 * v5 == a2)
    return (unsigned int *)sub_22F2633B0((uint64_t)result, __src, a4);
  v6 = (a2 - v4) >> 3;
  __srca = __src;
  v8 = (char *)a4 - (char *)__src;
  v9 = a4 - __src;
  v10 = result;
  if (v5 + v9 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_QWORD *)v10;
    v5 = v10[2];
  }
  v11 = (_QWORD *)(v4 + 8 * v6);
  v12 = (_BYTE *)(v4 + 8 * v5);
  v13 = (v12 - (_BYTE *)v11) >> 3;
  if (v13 >= v9)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v10, &v12[-8 * v9], (char *)(v4 + 8 * v5));
    if (&v12[-8 * v9] != (_BYTE *)v11)
      result = (unsigned int *)memmove(&v11[v9], v11, &v12[-8 * v9] - (_BYTE *)v11);
    if (__srca != a4)
      return (unsigned int *)memmove(v11, __srca, v8);
  }
  else
  {
    v14 = v5 + (v8 >> 3);
    v10[2] = v14;
    if (v6 != v5)
    {
      result = (unsigned int *)memcpy((void *)(v4 + 8 * v14 - 8 * v13), v11, v12 - (_BYTE *)v11);
      do
      {
        v15 = *__srca++;
        *v11++ = v15;
        --v13;
      }
      while (v13);
    }
    if (__srca != a4)
      return (unsigned int *)memcpy(v12, __srca, (char *)a4 - (char *)__srca);
  }
  return result;
}

uint64_t sub_22F2C5D8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  v10 = *(unsigned int *)(*a1 + 24);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v10);
  *(_DWORD *)(*a1 + 24) = v11;
  *(_WORD *)a2 = ((v12 & 1) << 8) | *(_WORD *)a2 & 0xFEFF;
  return result;
}

uint64_t sub_22F2C5E00(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  sub_22F2B42B8(*(_QWORD *)(v4 + 8), a2, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5));
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v12, v13, v10 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22F2C5E90(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  result = sub_22F2C5E00(a1, (uint64_t)a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v6);
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(unsigned int *)(v8 + 10848);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
  *(_DWORD *)(v8 + 10848) = v9 - 1;
  *((_QWORD *)a2 + 3) = v10;
  v11 = a2 + 12;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 16] = v14;
  if (v7)
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1)] = v17;
    v18 = *a1;
    v19 = *(_QWORD *)(*a1 + 8);
    v20 = *(_QWORD *)(*a1 + 16);
    v21 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v18 + 24) = v21 + 1;
    HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
    LODWORD(v22) = HIDWORD(v22);
    result = sub_22E77BAB4(v19, v20, v22 >> 1);
    v23 = 12;
    if ((*a2 & 0x100) == 0)
      v23 = 8;
    *(_DWORD *)&v11[v23] = result;
  }
  return result;
}

uint64_t sub_22F2C5F94(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v4 = (uint64_t *)(*a1 + 32);
  v5 = *v4;
  v6 = (unsigned int *)(*a1 + 24);
  v7 = *v6;
  *v6 = v7 + 1;
  v8 = *(_QWORD *)(v5 + 8 * v7) != 0;
  v9 = *(v4 - 3);
  v10 = sub_22E779F8C(v9, *(v4 - 2), (uint64_t)v4, v6);
  v11 = sub_22E77F870(v9, v10);
  *(_QWORD *)(v11 + 48) = a2;
  *(_QWORD *)(a2 + 8) = v11;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(v13 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v13 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 16) = v16;
  v17 = *(unsigned int *)(v12 + 24);
  *(_DWORD *)(v12 + 24) = v17 + 1;
  HIDWORD(v18) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v17);
  LODWORD(v18) = HIDWORD(v18);
  result = sub_22E77BAB4(v13, v14, v18 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  *(_BYTE *)(a2 + 24) = v8;
  return result;
}

void sub_22F2C6048(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  ++*(_DWORD *)(v4 + 24);
  v16 = v18;
  v17 = 0x400000000;
  sub_22E798860(v4, (uint64_t)&v16);
  if ((_DWORD)v17)
  {
    v5 = (uint64_t *)v16;
    v6 = (_QWORD *)(a2 + 16);
    v7 = 8 * v17;
    do
    {
      v8 = *v5++;
      *v6++ = v8;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 8) = v12;
  v13 = *(_QWORD *)(v9 + 16);
  v14 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v10, v13, v15 >> 1);
  if (v16 != v18)
    free(v16);
}

uint64_t sub_22F2C6150(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(_QWORD *)(v5 + 8 * v4);
  v7 = *(_QWORD *)(v5 + 8 * (v4 + 1));
  v8 = *(_QWORD *)(v5 + 8 * (v4 + 2));
  v9 = *(_QWORD *)(v5 + 8 * (v4 + 3));
  *(_DWORD *)(*a1 + 24) = v4 + 4;
  *a2 = ((v9 & 7) << 8) | *a2 & 0xF8FF;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  v13 = a2 + 8;
  *(_QWORD *)&a2[4 * ((*a2 >> 13) & 1) + 8 + 4 * ((*a2 >> 12) & 1)] = v12;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)] = v16;
  if (v6)
  {
    v31 = *(_QWORD *)(*a1 + 8);
    v32 = *(unsigned int *)(v31 + 10848);
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 10840) + 8 * v32 - 8);
    *(_DWORD *)(v31 + 10848) = v32 - 1;
    v13[((*a2 >> 13) & 1) + 2 + ((*a2 >> 12) & 1u)] = v33;
  }
  if (v7)
  {
    v41 = *(_QWORD *)(*a1 + 8);
    v42 = *(_QWORD *)(v41 + 128);
    v43 = sub_22E779F8C(v41, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v44 = sub_22E77F870(v41, v43);
    sub_22F3F2190((uint64_t)a2, v42, v44);
  }
  if (v8)
  {
    v45 = *(_QWORD *)(*a1 + 8);
    v46 = *(unsigned int *)(v45 + 10848);
    v47 = *(_QWORD *)(*(_QWORD *)(v45 + 10840) + 8 * v46 - 8);
    *(_DWORD *)(v45 + 10848) = v46 - 1;
    *v13 = v47;
  }
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  *((_DWORD *)a2 + 1) = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v21) = HIDWORD(v21);
  *((_DWORD *)a2 + 2) = sub_22E77BAB4(v23, v24, v21 >> 1);
  v26 = *a1;
  v27 = *(_QWORD *)(*a1 + 8);
  v28 = *(_QWORD *)(*a1 + 16);
  v29 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v26 + 24) = v29 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v29);
  LODWORD(v21) = HIDWORD(v21);
  result = sub_22E77BAB4(v27, v28, v21 >> 1);
  *((_DWORD *)a2 + 3) = result;
  if (v6)
  {
    v34 = *a1;
    v35 = *(_QWORD *)(*a1 + 8);
    v36 = *(_QWORD *)(*a1 + 16);
    v37 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v34 + 24) = v37 + 1;
    HIDWORD(v38) = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v37);
    LODWORD(v38) = HIDWORD(v38);
    result = sub_22E77BAB4(v35, v36, v38 >> 1);
    v39 = *a2;
    v40 = 2;
    if ((v39 & 0x800) != 0)
      v40 = 3;
    LODWORD(v13[v40 + ((v39 >> 12) & 1) + ((v39 >> 13) & 1)]) = result;
  }
  return result;
}

uint64_t sub_22F2C63B4(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t *v41;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  v8 = *(_QWORD *)(v6 + 8 * (v5 + 1));
  *(_DWORD *)(*a1 + 24) = v5 + 3;
  if (*(_QWORD *)(v6 + 8 * (v5 + 2)))
  {
    *a2 |= 0x400u;
    v4 = *a1;
  }
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)&a2[4 * (HIBYTE(*a2) & 1) + 12 + 4 * ((*a2 >> 9) & 1)] = v11;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)] = v14;
  if (v7)
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    *((_QWORD *)a2 + 3) = v17;
  }
  if (v8)
  {
    v18 = *(_QWORD *)(*a1 + 8);
    v19 = *(_QWORD *)(v18 + 128);
    v20 = sub_22E779F8C(v18, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v21 = sub_22E77F870(v18, v20);
    sub_22F3F2440((uint64_t)a2, v19, v21);
  }
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v26) = HIDWORD(v26);
  *((_DWORD *)a2 + 1) = sub_22E77BAB4(v23, v24, v26 >> 1);
  v27 = *a1;
  v28 = *(_QWORD *)(*a1 + 8);
  v29 = *(_QWORD *)(*a1 + 16);
  v30 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v27 + 24) = v30 + 1;
  HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v30);
  LODWORD(v26) = HIDWORD(v26);
  *((_DWORD *)a2 + 4) = sub_22E77BAB4(v28, v29, v26 >> 1);
  v31 = *a1;
  v32 = *(_QWORD *)(*a1 + 8);
  v33 = *(_QWORD *)(*a1 + 16);
  v34 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v31 + 24) = v34 + 1;
  HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8 * v34);
  LODWORD(v26) = HIDWORD(v26);
  result = sub_22E77BAB4(v32, v33, v26 >> 1);
  *((_DWORD *)a2 + 5) = result;
  v36 = *a1;
  v37 = *(_DWORD *)(*a1 + 40);
  v38 = *(_DWORD *)(*a1 + 24);
  if (v37 != v38)
  {
    v39 = 0;
    v40 = a2 + 4;
    do
    {
      *(_DWORD *)(v36 + 24) = v38 + 1;
      result = sub_22F2B42F0(*(_QWORD *)(v36 + 8), *(_QWORD *)(*(_QWORD *)(v36 + 32) + 8 * v38));
      v41 = (uint64_t *)(v39 + 16);
      if (!v39)
        v41 = (uint64_t *)v40;
      *v41 = result;
      v36 = *a1;
      v38 = *(_DWORD *)(*a1 + 24);
      v39 = result;
    }
    while (v37 != v38);
  }
  return result;
}

uint64_t sub_22F2C65B8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)&a2[2 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 4] = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)&a2[2 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 6] = v12;
  if (v6)
  {
    v13 = *(_QWORD *)(*a1 + 8);
    v14 = *(_QWORD *)(v13 + 128);
    v15 = sub_22E779F8C(v13, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v16 = sub_22E77F870(v13, v15);
    sub_22F3F268C((uint64_t)a2, v14, v16);
  }
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  a2[1] = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v21) = HIDWORD(v21);
  a2[2] = sub_22E77BAB4(v23, v24, v21 >> 1);
  v26 = *a1;
  v27 = *(_QWORD *)(*a1 + 8);
  v28 = *(_QWORD *)(*a1 + 16);
  v29 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v26 + 24) = v29 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v29);
  LODWORD(v21) = HIDWORD(v21);
  result = sub_22E77BAB4(v27, v28, v21 >> 1);
  a2[3] = result;
  return result;
}

uint64_t sub_22F2C6708(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 8) = v9;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v11, v12, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v16, v17, v14 >> 1);
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(*a1 + 16);
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v19 + 24) = v22 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v20, v21, v14 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2C67E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;

  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(v10 + 128);
  v12 = sub_22E779F8C(v10, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v13 = sub_22E77F870(v10, v12);
  sub_22F0D8004(a2, v11, v13);
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 32) = v16;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(unsigned int *)(v17 + 10848);
  v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
  *(_DWORD *)(v17 + 10848) = v18 - 1;
  *(_QWORD *)(a2 + 40) = v19;
  v20 = *a1;
  v21 = *(_QWORD *)(*a1 + 8);
  v22 = *(_QWORD *)(*a1 + 16);
  v23 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v20 + 24) = v23 + 1;
  HIDWORD(v24) = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 8 * v23);
  LODWORD(v24) = HIDWORD(v24);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v21, v22, v24 >> 1);
  v25 = *a1;
  v26 = *(_QWORD *)(*a1 + 8);
  v27 = *(_QWORD *)(*a1 + 16);
  v28 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v25 + 24) = v28 + 1;
  HIDWORD(v24) = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v28);
  LODWORD(v24) = HIDWORD(v24);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v26, v27, v24 >> 1);
  v29 = *a1;
  v30 = *(_QWORD *)(*a1 + 8);
  v31 = *(_QWORD *)(*a1 + 16);
  v32 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v29 + 24) = v32 + 1;
  HIDWORD(v24) = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v32);
  LODWORD(v24) = HIDWORD(v24);
  result = sub_22E77BAB4(v30, v31, v24 >> 1);
  *(_DWORD *)(a2 + 52) = result;
  return result;
}

uint64_t sub_22F2C6950(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 8) = sub_22E77F870(v4, v5);
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v12, v13, v10 >> 1);
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_22F2C69F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 4) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_22F2C6A84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26[17];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 40);
  v15 = (_DWORD *)(*a1 + 24);
  v16 = *v15;
  if (v14 - v16 == 1)
  {
    v17 = *(_QWORD *)(v13 + 8);
    v18 = sub_22E779F8C(v17, *(_QWORD *)(v13 + 16), v13 + 32, v15);
    *(_QWORD *)(a2 + 8) = sub_22E77F870(v17, v18);
  }
  else
  {
    v25 = 0;
    v19 = v14 - v16;
    if ((v14 - v16) >= 0x11)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (v19 < 1)
    {
      v24 = 0;
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)(*a1 + 8);
        v21 = sub_22E779F8C(v20, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
        v22 = sub_22E77F870(v20, v21);
        v23 = v25;
        if (v25 >= 0x10uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = v25;
        }
        v26[v23] = v22;
        v24 = ++v25;
        --v19;
      }
      while (v19);
    }
    *(_QWORD *)(a2 + 8) = (unint64_t)sub_22EFDA148(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128), v26, v24) | 1;
  }
}

uint64_t sub_22F2C6C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v5 + 1));
  *(_DWORD *)(a2 + 16) = *(_QWORD *)(v6 + 8 * v5);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(v4 + 24) = v5 + 3;
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(v6 + 8 * (v5 + 2));
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 4;
  HIDWORD(v10) = *(_QWORD *)(v6 + 8 * (v5 + 3));
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v8, v9, v10 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  v12 = *a1;
  v13 = *(unsigned int *)(*a1 + 24);
  v14 = *(_QWORD *)(*a1 + 32);
  *(_BYTE *)(a2 + 13) = *(_QWORD *)(v14 + 8 * v13) != 0;
  *(_DWORD *)(v12 + 24) = v13 + 2;
  *(_BYTE *)(a2 + 12) = *(_QWORD *)(v14 + 8 * (v13 + 1)) != 0;
  return result;
}

void sub_22F2C6CFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  _QWORD v45[16];
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[18];

  v54[16] = *MEMORY[0x24BDAC8D0];
  sub_22F2C6C58(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(v4 + 32);
  *(_DWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(v6 + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 40) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(unsigned int *)(v11 + 10848);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
  *(_DWORD *)(v11 + 10848) = v12 - 1;
  *(_QWORD *)(a2 + 48) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 16);
  LODWORD(v12) = *(_DWORD *)(a2 + 20);
  v14 = *(_DWORD *)(a2 + 24);
  v15 = *(_DWORD *)(a2 + 80);
  v52 = v54;
  v53 = 0x1000000000;
  v49 = v51;
  v50 = 0x1000000000;
  v46 = v48;
  v47 = 0x1000000000;
  v42 = v12;
  v43 = v13;
  for (i = v12 + v13; i; --i)
  {
    v17 = *a1;
    v19 = *(_QWORD *)(*a1 + 8);
    v18 = *(_QWORD *)(*a1 + 16);
    v20 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v17 + 24) = v20 + 1;
    v21 = sub_22E768E34(v19, v18, *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20));
    v22 = sub_22E785944(v19, v21);
    v23 = v53;
    if (v53 >= (unint64_t)HIDWORD(v53))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v53;
    }
    v52[v23] = v22;
    LODWORD(v53) = v53 + 1;
    v24 = *(_QWORD *)(*a1 + 8);
    v25 = *(unsigned int *)(v24 + 10848);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 10840) + 8 * v25 - 8);
    *(_DWORD *)(v24 + 10848) = v25 - 1;
    v27 = v50;
    if (v50 >= (unint64_t)HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v50;
    }
    *((_QWORD *)v49 + v27) = v26;
    LODWORD(v50) = v50 + 1;
    v28 = *(_QWORD *)(*a1 + 8);
    v29 = *(unsigned int *)(v28 + 10848);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 10840) + 8 * v29 - 8);
    *(_DWORD *)(v28 + 10848) = v29 - 1;
    v31 = v47;
    if (v47 >= (unint64_t)HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = v47;
    }
    *((_QWORD *)v46 + v31) = v30;
    LODWORD(v47) = v47 + 1;
  }
  v44 = 0;
  if (v14)
  {
    v32 = 0;
    v33 = v14;
    do
    {
      v34 = *(_QWORD *)(*a1 + 8);
      v35 = *(unsigned int *)(v34 + 10848);
      v36 = *(_QWORD *)(*(_QWORD *)(v34 + 10840) + 8 * v35 - 8);
      *(_DWORD *)(v34 + 10848) = v35 - 1;
      if (v32 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = v44;
      }
      v45[v32] = v36;
      v32 = ++v44;
      --v33;
    }
    while (v33);
  }
  if (v15)
  {
    v37 = v47;
    v38 = v15;
    do
    {
      v39 = *(_QWORD *)(*a1 + 8);
      v40 = *(unsigned int *)(v39 + 10848);
      v41 = *(_QWORD *)(*(_QWORD *)(v39 + 10840) + 8 * v40 - 8);
      *(_DWORD *)(v39 + 10848) = v40 - 1;
      if (v37 >= HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v47;
      }
      *((_QWORD *)v46 + v37) = v41;
      v37 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      --v38;
    }
    while (v38);
  }
  sub_22F3F1B88(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128), v52, v49, v46, v43, v42, v15, v45, v14);
  if (v46 != v48)
    free(v46);
  if (v49 != v51)
    free(v49);
  if (v52 != v54)
    free(v52);
}

uint64_t sub_22F2C70D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  v10 = 0;
  *(_DWORD *)(a2 + 8) = result;
  do
  {
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + 16 + v10) = v13;
    v10 += 8;
  }
  while (v10 != 16);
  v14 = *a1;
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | (*(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v15) != 0);
  return result;
}

uint64_t sub_22F2C7180(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_DWORD *)(a2 + 16) = result;
  for (i = 24; i != 56; i += 8)
  {
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + i) = v13;
  }
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(unsigned int *)(v15 + 10848);
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
  *(_DWORD *)(v15 + 10848) = v16 - 1;
  *(_QWORD *)(a2 + 56) = v17;
  v18 = *(unsigned int *)(v14 + 24);
  LODWORD(v17) = v18 + 1;
  v19 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v18);
  *(_DWORD *)(v14 + 24) = v17;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v19 != 0) << 18);
  return result;
}

uint64_t sub_22F2C724C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  v10 = 0;
  *(_DWORD *)(a2 + 16) = result;
  do
  {
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + 24 + v10) = v13;
    v10 += 8;
  }
  while (v10 != 32);
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 56) = v16;
  return result;
}

uint64_t sub_22F2C72F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  v10 = 0;
  *(_DWORD *)(a2 + 16) = result;
  do
  {
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + 24 + v10) = v13;
    v10 += 8;
  }
  while (v10 != 16);
  return result;
}

uint64_t sub_22F2C7378(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = (_DWORD *)(*a1 + 24);
  ++*v4;
  v5 = *((_QWORD *)v4 - 2);
  v6 = sub_22E779F8C(v5, *((_QWORD *)v4 - 1), (uint64_t)(v4 + 2), v4);
  v7 = sub_22E77F870(v5, v6);
  sub_22F3F2C30(a2, v7);
  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  sub_22F3F2C50(a2, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9));
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = sub_22E779F8C(v10, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 24) = sub_22E77F870(v10, v11);
  v12 = a2 + 32;
  v13 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (_QWORD *)(a2 + 32);
    do
    {
      v16 = *(_QWORD *)(*a1 + 8);
      v17 = *(unsigned int *)(v16 + 10848);
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 10840) + 8 * v17 - 8);
      *(_DWORD *)(v16 + 10848) = v17 - 1;
      *v15++ = v18;
      v14 -= 8;
    }
    while (v14);
  }
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(unsigned int *)(v19 + 10848);
  v21 = *(_QWORD *)(*(_QWORD *)(v19 + 10840) + 8 * v20 - 8);
  *(_DWORD *)(v19 + 10848) = v20 - 1;
  *(_QWORD *)(v12 + 8 * v13) = v21;
  v22 = sub_22F3F2C24(a2);
  sub_22F3AD7E8(v22, *(_QWORD *)(v12 + 8 * *(unsigned int *)(a2 + 8)));
  v23 = sub_22F3F2A44(a2);
  result = sub_22F3F2A44(a2);
  v25 = result + 16 * *(unsigned int *)(a2 + 8);
  while (v23 != v25)
  {
    v26 = *(_QWORD *)(*a1 + 8);
    v27 = sub_22E779F8C(v26, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v28 = sub_22E77F870(v26, v27);
    v29 = *a1;
    v30 = *(unsigned int *)(*a1 + 24);
    v31 = *(_QWORD *)(*a1 + 32);
    *(_QWORD *)v23 = *(_QWORD *)v23 & 1 | v28 & 0xFFFFFFFFFFFFFFF9 | (2 * *(_QWORD *)(v31 + 8 * v30));
    v32 = *(_QWORD *)(v29 + 8);
    v33 = *(_QWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 24) = v30 + 2;
    HIDWORD(v34) = *(_QWORD *)(v31 + 8 * (v30 + 1));
    LODWORD(v34) = HIDWORD(v34);
    result = sub_22E77BAB4(v32, v33, v34 >> 1);
    *(_DWORD *)(v23 + 8) = result;
    v23 += 16;
  }
  return result;
}

_QWORD *sub_22F2C7534(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v14, v15, v8 >> 1);
  result = sub_22E782300(*a1);
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

uint64_t sub_22F2C75DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFBFFFFF | ((v6 != 0) << 22);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFC3FFFF | ((*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) & 0xF) << 18);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  result = sub_22E77BAB4(v10, v11, v13 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  if (v6)
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    *(_QWORD *)(a2 + 16) = v17;
  }
  return result;
}

_QWORD *sub_22F2C76A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  unsigned int v14;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_DWORD *)(a2 + 32) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 128);
  sub_22E786954(v9, (llvm::APInt *)&v13);
  result = sub_22EFF8E88((_QWORD *)(a2 + 16), v11, (uint64_t)&v13);
  if (v14 >= 0x41)
  {
    result = v13;
    if (v13)
      return (_QWORD *)MEMORY[0x2348A0E84](v13, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F2C7764(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  _BYTE v17[8];
  uint64_t v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *a2 = *a2 & 0xFFC3FFFF | ((*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 0xF) << 18);
  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *a2 = *a2 & 0xFFBFFFFF | ((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7) != 0) << 22);
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128);
  v10 = llvm::APFloatBase::EnumToSemantics();
  sub_22F2B41DC(v8, v10, (uint64_t)v17);
  sub_22E7BE114((llvm::APFloatBase *)(a2 + 4), v9, (uint64_t)v17);
  sub_22E4EEC9C(v18);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  result = sub_22E77BAB4(v12, v13, v15 >> 1);
  a2[7] = result;
  return result;
}

uint64_t sub_22F2C7884(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(v4 + 32);
  a2[4] = *(_QWORD *)(v6 + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(v6 + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v7, v8, v10 >> 1);
  a2[5] = result;
  v12 = *a1;
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 1;
  *a2 = *a2 & 0xFFE3FFFF | ((*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v13) & 7) << 18);
  return result;
}

uint64_t sub_22F2C7908(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = v5 + 1;
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(unsigned int *)(v7 + 8 * v5);
  if (v8)
  {
    v9 = (_QWORD *)(a2 + 24);
    do
    {
      v10 = *(_QWORD *)(*a1 + 8);
      v11 = *(unsigned int *)(v10 + 10848);
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
      *(_DWORD *)(v10 + 10848) = v11 - 1;
      *v9++ = v12;
      --v8;
    }
    while (v8);
    v4 = *a1;
    v6 = *(_DWORD *)(*a1 + 24);
    v7 = *(_QWORD *)(*a1 + 32);
  }
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v6 + 1;
  HIDWORD(v15) = *(_QWORD *)(v7 + 8 * v6);
  LODWORD(v15) = HIDWORD(v15);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v13, v14, v15 >> 1);
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v15) = HIDWORD(v15);
  result = sub_22E77BAB4(v17, v18, v15 >> 1);
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t sub_22F2C79CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(*a1 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 3;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * (v5 + 2));
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v6, v7, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v10, v11, v8 >> 1);
  result = (uint64_t)sub_22E782300(*a1);
  *(_QWORD *)(a2 + 24) = result;
  v14 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v14)
  {
    v15 = (uint64_t *)(a2 + 48);
    do
    {
      v16 = *(unsigned int *)(*a1 + 24);
      v17 = *(_QWORD *)(*a1 + 32);
      v18 = *(_QWORD *)(v17 + 8 * v16);
      v19 = *(_QWORD *)(*a1 + 8);
      v20 = *(_QWORD *)(*a1 + 16);
      *(_DWORD *)(*a1 + 24) = v16 + 2;
      HIDWORD(v21) = *(_QWORD *)(v17 + 8 * (v16 + 1));
      LODWORD(v21) = HIDWORD(v21);
      v22 = sub_22E77BAB4(v19, v20, v21 >> 1);
      v23 = *a1;
      v24 = *(_QWORD *)(*a1 + 8);
      v25 = *(_QWORD *)(*a1 + 16);
      v26 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v23 + 24) = v26 + 1;
      HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26);
      LODWORD(v21) = HIDWORD(v21);
      result = sub_22E77BAB4(v24, v25, v21 >> 1);
      v27 = result;
      switch((int)v18)
      {
        case 0:
          v28 = *a1;
          v29 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v28 + 24) = v29 + 1;
          v30 = 4 * *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v29);
          v31 = v22;
          goto LABEL_13;
        case 1:
          v32 = *(_QWORD *)(*a1 + 8);
          v33 = sub_22E779F8C(v32, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
          result = sub_22E77F870(v32, v33);
          if (v22)
            v31 = v22;
          else
            v31 = v27;
          v30 = result | 1;
          goto LABEL_13;
        case 2:
          v34 = *a1;
          v36 = *(_QWORD *)(*a1 + 8);
          v35 = *(_QWORD *)(*a1 + 16);
          v37 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v34 + 24) = v37 + 1;
          v38 = sub_22E768E34(v36, v35, *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * v37));
          result = sub_22E785944(v36, v38);
          if (v22)
            v31 = v22;
          else
            v31 = v27;
          v30 = result | 2;
LABEL_13:
          v39 = v31 | (v27 << 32);
          goto LABEL_14;
        case 3:
          v40 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128) + 2032, 24, 3);
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = 0;
          *(_QWORD *)v40 = 0;
          result = sub_22E783480(*a1, (uint64_t)&v47);
          v39 = 0;
          v41 = v47;
          *(_QWORD *)(v40 + 16) = v48;
          *(_OWORD *)v40 = v41;
          v30 = v40 | 3;
LABEL_14:
          *(v15 - 1) = v39;
          *v15 = v30;
          break;
        default:
          break;
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  v42 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v42)
  {
    v43 = (_QWORD *)(a2 + 16 * *(unsigned int *)(a2 + 32) + 40);
    do
    {
      v44 = *(_QWORD *)(*a1 + 8);
      v45 = *(unsigned int *)(v44 + 10848);
      v46 = *(_QWORD *)(*(_QWORD *)(v44 + 10840) + 8 * v45 - 8);
      *(_DWORD *)(v44 + 10848) = v45 - 1;
      *v43++ = v46;
      --v42;
    }
    while (v42);
  }
  return result;
}

uint64_t sub_22F2C7C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFC3FFFF | ((*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 0xF) << 18);
  v6 = *a1;
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * *(unsigned int *)(*a1 + 24)))
  {
    *(_QWORD *)(a2 + 16) = sub_22E782300(v6);
    *(_DWORD *)a2 |= 0x400000u;
    v7 = *a1;
    v8 = *(_DWORD *)(*a1 + 24);
  }
  else
  {
    v17 = *(_QWORD *)(v6 + 8);
    v18 = *(unsigned int *)(v17 + 10848);
    v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
    *(_DWORD *)(v17 + 10848) = v18 - 1;
    *(_QWORD *)(a2 + 16) = v19;
    *(_DWORD *)a2 &= ~0x400000u;
    v7 = *a1;
    v8 = *(_DWORD *)(*a1 + 24) + 1;
    *(_DWORD *)(*a1 + 24) = v8;
  }
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v9, v10, v11 >> 1);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  result = sub_22E77BAB4(v13, v14, v11 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

void sub_22F2C7D34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  _QWORD v31[13];

  v31[12] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  *(_QWORD *)(a2 + 16) = sub_22E7823B4(v4);
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v11);
  LODWORD(v12) = HIDWORD(v12);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v9, v10, v12 >> 1);
  sub_22E786254(*a1, (uint64_t)&v24);
  *(_OWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 56) = v25;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = sub_22E779F8C(v13, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 72) = sub_22E77F870(v13, v14);
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = sub_22E779F8C(v15, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 64) = sub_22E77F870(v15, v16);
  *(_QWORD *)(a2 + 80) = sub_22E782AE8(*a1);
  v29 = (__n128 *)v31;
  v30 = 0x400000000;
  if ((_DWORD)v6)
  {
    do
    {
      sub_22E7827DC(&v24, *a1);
      v17 = sub_22E4EF088((uint64_t)&v29, (unint64_t)&v24, 1);
      v18 = (char *)v29 + 24 * v30;
      v19 = *(_OWORD *)v17;
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v18 = v19;
      v20 = (v30 + 1);
      LODWORD(v30) = v30 + 1;
      LODWORD(v6) = v6 - 1;
    }
    while ((_DWORD)v6);
    v21 = v29;
  }
  else
  {
    v20 = 0;
    v21 = (__n128 *)v31;
  }
  sub_22F3C3E00(a2, v21, v20);
  if ((*(_BYTE *)(a2 + 2) & 1) != 0)
  {
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    v22 = *a1;
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 128);
    sub_22E7B8990((uint64_t)&v24, v22);
    *(_QWORD *)(a2 + 96) = sub_22F3650F8(v23, (uint64_t)&v24);
    if (v27 != &v28)
      free(v27);
    if (v25 != &v26)
      free(v25);
  }
  if (v29 != (__n128 *)v31)
    free(v29);
}

uint64_t sub_22F2C7F50(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v11, v12, v14 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

uint64_t sub_22F2C7FE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 32) = v12;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v17) = HIDWORD(v17);
  result = sub_22E77BAB4(v14, v15, v17 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

uint64_t sub_22F2C809C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 32) = v12;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  *(_QWORD *)(a2 + 40) = v15;
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v20) = HIDWORD(v20);
  *(_DWORD *)(a2 + 48) = sub_22E77BAB4(v17, v18, v20 >> 1);
  v21 = *a1;
  v22 = *(_QWORD *)(*a1 + 8);
  v23 = *(_QWORD *)(*a1 + 16);
  v24 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v21 + 24) = v24 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v24);
  LODWORD(v20) = HIDWORD(v20);
  *(_DWORD *)(a2 + 52) = sub_22E77BAB4(v22, v23, v20 >> 1);
  v25 = *a1;
  v26 = *(_QWORD *)(*a1 + 8);
  v27 = *(_QWORD *)(*a1 + 16);
  v28 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v25 + 24) = v28 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * v28);
  LODWORD(v20) = HIDWORD(v20);
  result = sub_22E77BAB4(v26, v27, v20 >> 1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

void sub_22F2C81C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[32];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 8 * *(unsigned int *)(a2 + 24) + 32) = v9;
  v29 = v31;
  v30 = 0x400000000;
  sub_22E4639CC((uint64_t)&v29, v6, 0);
  v10 = 8 * v6;
  if (v6)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*a1 + 8);
      v13 = *(unsigned int *)(v12 + 10848);
      v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
      *(_DWORD *)(v12 + 10848) = v13 - 1;
      *(_QWORD *)((char *)v29 + v11) = v14;
      v11 += 8;
    }
    while (v10 != v11);
  }
  sub_22F3C34A0((char *)a2, v29, v30);
  v26 = v28;
  v27 = 0x400000000;
  sub_22E7BE2A4((uint64_t)&v26, v6);
  if (v6)
  {
    v15 = 0;
    do
    {
      v16 = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
      *(_QWORD *)((char *)v26 + v15) = v16;
      v15 += 8;
    }
    while (v10 != v15);
  }
  sub_22F3C34B4((_DWORD *)a2, v26, v27);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v21) = HIDWORD(v21);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v23, v24, v21 >> 1);
  if (v26 != v28)
    free(v26);
  if (v29 != v31)
    free(v29);
}

void sub_22F2C83C0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(_QWORD *)(v5 + 8 * v4);
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  *(_DWORD *)(*a1 + 24) = v4 + 2;
  HIDWORD(v9) = *(_QWORD *)(v5 + 8 * (v4 + 1));
  LODWORD(v9) = HIDWORD(v9);
  a2[4] = sub_22E77BAB4(v7, v8, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  a2[5] = sub_22E77BAB4(v11, v12, v9 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v9) = HIDWORD(v9);
  a2[6] = sub_22E77BAB4(v15, v16, v9 >> 1);
  if ((_DWORD)v6)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*a1 + 8);
      v20 = sub_22E779F8C(v19, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
      v21 = sub_22E77F870(v19, v20);
      sub_22F3C36B0((uint64_t)a2, v18, v21);
      v22 = *a1;
      v23 = *(_QWORD *)(*a1 + 8);
      v24 = *(_QWORD *)(*a1 + 16);
      v25 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v22 + 24) = v25 + 1;
      HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
      LODWORD(v26) = HIDWORD(v26);
      v27 = sub_22E77BAB4(v23, v24, v26 >> 1);
      sub_22F3C36BC((uint64_t)a2, v18, v27);
      v28 = *a1;
      v29 = *(_QWORD *)(*a1 + 8);
      v30 = *(_QWORD *)(v29 + 10840);
      v31 = *(unsigned int *)(v29 + 10848);
      v32 = *(_QWORD *)(v30 + 8 * v31 - 8);
      v33 = *(_QWORD *)(v30 + 8 * (v31 - 1) - 8);
      v34 = *(_QWORD *)(v30 + 8 * (v31 - 2) - 8);
      *(_DWORD *)(v29 + 10848) = v31 - 3;
      v35 = *(_QWORD *)(v28 + 16);
      v36 = *(unsigned int *)(v28 + 24);
      *(_DWORD *)(v28 + 24) = v36 + 1;
      HIDWORD(v26) = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v36);
      LODWORD(v26) = HIDWORD(v26);
      v37 = sub_22E77BAB4(v29, v35, v26 >> 1);
      if (v34)
      {
        v38 = *a1;
        v39 = *(_QWORD *)(*a1 + 8);
        v40 = *(_QWORD *)(*a1 + 16);
        v41 = *(unsigned int *)(*a1 + 24);
        *(_DWORD *)(v38 + 24) = v41 + 1;
        HIDWORD(v42) = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v41);
        LODWORD(v42) = HIDWORD(v42);
        v43 = sub_22E77BAB4(v39, v40, v42 >> 1);
      }
      else
      {
        v43 = 0;
      }
      sub_22F3C36DC((uint64_t)a2, v18, v32, v37, v33, v43, v34);
      v50 = 0u;
      v51 = 0u;
      v44 = *(_QWORD *)(*a1 + 8);
      v45 = sub_22E779F8C(v44, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
      *(_QWORD *)&v50 = sub_22E77F870(v44, v45);
      v46 = *(_QWORD *)(*a1 + 8);
      v47 = *(_QWORD *)(v46 + 10840);
      v48 = *(unsigned int *)(v46 + 10848);
      *((_QWORD *)&v50 + 1) = *(_QWORD *)(v47 + 8 * v48 - 8);
      *(_QWORD *)&v51 = *(_QWORD *)(v47 + 8 * (v48 - 1) - 8);
      v49 = *(_QWORD *)(v47 + 8 * (v48 - 2) - 8);
      *(_DWORD *)(v46 + 10848) = v48 - 3;
      *((_QWORD *)&v51 + 1) = v49;
      sub_22F3C37B8((uint64_t)a2, v18++, (uint64_t)&v50);
    }
    while ((_DWORD)v6 != v18);
  }
}

uint64_t sub_22F2C8634(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v5, v6, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v12, v13, v10 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  v16 = *a1;
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v17 + 1;
  *(_BYTE *)(a2 + 32) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v17) != 0;
  return result;
}

uint64_t sub_22F2C86E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  sub_22E7B8E30(a1, a2);
  *(_QWORD *)(a2 + 24) = sub_22E782300(*a1);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  v14 = *a1;
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a2 + 40) & 0xFC | *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v15) & 3;
  return result;
}

uint64_t sub_22F2C878C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  sub_22E7B8F60(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_DWORD *)(*a1 + 40);
  if (v6 <= v5)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    v9 = sub_22E77A180(v8, v7, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5));
    v10 = sub_22E77D8C8(v8, v9);
    v4 = *a1;
    LODWORD(v5) = *(_DWORD *)(*a1 + 24);
    v6 = *(_DWORD *)(*a1 + 40);
  }
  *(_QWORD *)(a2 + 32) = v10;
  if (v6 <= v5)
  {
    result = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v4 + 8);
    v11 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    v13 = sub_22E77A180(v12, v11, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5));
    result = sub_22E77D8C8(v12, v13);
  }
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_22F2C8848(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 32) = v12;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  *(_QWORD *)(a2 + 40) = v15;
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v20) = HIDWORD(v20);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v17, v18, v20 >> 1);
  v21 = *a1;
  v22 = *(_QWORD *)(*a1 + 8);
  v23 = *(_QWORD *)(*a1 + 16);
  v24 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v21 + 24) = v24 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v24);
  LODWORD(v20) = HIDWORD(v20);
  result = sub_22E77BAB4(v22, v23, v20 >> 1);
  *(_DWORD *)(a2 + 20) = result;
  if (v6)
  {
    v26 = *a1;
    v27 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v26 + 24) = v27 + 1;
    *(_QWORD *)(a2 + 48) = __ROR8__(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v27), 32);
  }
  return result;
}

uint64_t sub_22F2C8968(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(v4 + 10840);
  v6 = *(unsigned int *)(v4 + 10848);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v5 + 8 * v6 - 8);
  v7 = *(_QWORD *)(v5 + 8 * (v6 - 1) - 8);
  *(_DWORD *)(v4 + 10848) = v6 - 2;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(unsigned int *)(v8 + 10848);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
  *(_DWORD *)(v8 + 10848) = v9 - 1;
  *(_QWORD *)(a2 + 32) = v10;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(unsigned int *)(v11 + 10848);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
  *(_DWORD *)(v11 + 10848) = v12 - 1;
  *(_QWORD *)(a2 + 40) = v13;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 48) = v16;
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v21) = HIDWORD(v21);
  result = sub_22E77BAB4(v23, v24, v21 >> 1);
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t sub_22F2C8A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_22E7B8E30(a1, a2);
  *(_QWORD *)(a2 + 24) = sub_22E782300(*a1);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  return result;
}

unint64_t sub_22F2C8AFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  result = (unint64_t)sub_22E782300(*a1);
  v10 = *(_QWORD *)(a2 + 24) & 3;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  v15 = *(unsigned int *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v15 + 1;
  *(_QWORD *)(a2 + 24) = v10 | result & 0xFFFFFFFFFFFFFFFBLL | (4
                                                              * (*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v15) != 0));
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_22F2C8BA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v6 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v6 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  v10 = sub_22E768E34(v6, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9));
  *(_QWORD *)(a2 + 24) = sub_22E785944(v6, v10);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  result = sub_22E77BAB4(v12, v13, v15 >> 1);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

void sub_22F2C8C48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  _QWORD *v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  void *v88;
  uint64_t v89;
  _QWORD v90[13];

  v90[12] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = v5 + 1;
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(unsigned int *)(v7 + 8 * v5);
  if (v8)
  {
    v9 = (_QWORD *)(a2 + 32);
    do
    {
      v10 = *(_QWORD *)(*a1 + 8);
      v11 = *(unsigned int *)(v10 + 10848);
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
      *(_DWORD *)(v10 + 10848) = v11 - 1;
      *v9++ = v12;
      --v8;
    }
    while (v8);
    v4 = *a1;
    v6 = *(_DWORD *)(*a1 + 24);
    v7 = *(_QWORD *)(*a1 + 32);
  }
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v6 + 1;
  HIDWORD(v15) = *(_QWORD *)(v7 + 8 * v6);
  LODWORD(v15) = HIDWORD(v15);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v13, v14, v15 >> 1);
  v16 = *a1;
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v17 + 1;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a2 + 20) & 0xFFFFFFFE | (*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v17) != 0);
  v88 = v90;
  v89 = 0x400000000;
  v18 = *a1;
  v19 = (unsigned int *)(*a1 + 24);
  v20 = *v19;
  if (*(_DWORD *)(*a1 + 40) <= *v19)
  {
    v83 = 0;
    v82 = v90;
  }
  else
  {
    do
    {
      v21 = *(_QWORD *)(v18 + 32);
      v22 = v20 + 1;
      *(_DWORD *)(v18 + 24) = v20 + 1;
      switch(*(_QWORD *)(v21 + 8 * v20))
      {
        case 0u:
          v24 = *(_QWORD *)(v18 + 8);
          v23 = *(_QWORD *)(v18 + 16);
          *v19 = v20 + 2;
          v25 = sub_22E768E34(v24, v23, *(_QWORD *)(v21 + 8 * v22));
          v26 = sub_22E785944(v24, v25);
          v27 = *a1;
          v28 = *(_QWORD *)(*a1 + 8);
          v29 = *(_QWORD *)(*a1 + 16);
          v30 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v27 + 24) = v30 + 1;
          HIDWORD(v31) = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8 * v30);
          LODWORD(v31) = HIDWORD(v31);
          v32 = sub_22E77BAB4(v28, v29, v31 >> 1);
          v33 = *a1;
          v34 = *(_QWORD *)(*a1 + 8);
          v35 = *(_QWORD *)(*a1 + 16);
          v36 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v33 + 24) = v36 + 1;
          HIDWORD(v31) = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 8 * v36);
          LODWORD(v31) = HIDWORD(v31);
          v37 = sub_22E77BAB4(v34, v35, v31 >> 1);
          v84 = 0;
          v85 = v26 | 1;
          goto LABEL_14;
        case 1u:
          v38 = *(_QWORD *)(v18 + 8);
          v39 = sub_22E779F8C(v38, *(_QWORD *)(v18 + 16), v18 + 32, v19);
          v40 = sub_22E77F870(v38, v39);
          v41 = *a1;
          v42 = *(_QWORD *)(*a1 + 8);
          v43 = *(_QWORD *)(*a1 + 16);
          v44 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v41 + 24) = v44 + 1;
          HIDWORD(v45) = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8 * v44);
          LODWORD(v45) = HIDWORD(v45);
          v46 = sub_22E77BAB4(v42, v43, v45 >> 1);
          v47 = *a1;
          v48 = *(_QWORD *)(*a1 + 8);
          v49 = *(_QWORD *)(*a1 + 16);
          v50 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v47 + 24) = v50 + 1;
          HIDWORD(v45) = *(_QWORD *)(*(_QWORD *)(v47 + 32) + 8 * v50);
          LODWORD(v45) = HIDWORD(v45);
          v51 = sub_22E77BAB4(v48, v49, v45 >> 1);
          v52 = *(_QWORD *)(v40 + 40);
          v84 = 0;
          if ((v52 & 7) != 0)
            v53 = 1;
          else
            v53 = v52 & 0xFFFFFFFFFFFFFFF8 | 1;
          v85 = v53;
          v86 = v46;
          v87 = v51;
          v54 = sub_22E4EF088((uint64_t)&v88, (unint64_t)&v84, 1);
          v55 = (char *)v88 + 24 * v89;
          v56 = *(_OWORD *)v54;
          *((_QWORD *)v55 + 2) = *(_QWORD *)(v54 + 16);
          *(_OWORD *)v55 = v56;
          LODWORD(v89) = v89 + 1;
          *((_QWORD *)v88 + 3 * v89 - 2) = v40;
          break;
        case 2u:
          v57 = *(_QWORD *)(v21 + 8 * v22);
          v58 = *(_QWORD *)(v18 + 8);
          v59 = *(_QWORD *)(v18 + 16);
          *v19 = v20 + 3;
          HIDWORD(v60) = *(_QWORD *)(v21 + 8 * (v20 + 2));
          LODWORD(v60) = HIDWORD(v60);
          v61 = sub_22E77BAB4(v58, v59, v60 >> 1);
          v62 = *a1;
          v63 = *(_QWORD *)(*a1 + 8);
          v64 = *(_QWORD *)(*a1 + 16);
          v65 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v62 + 24) = v65 + 1;
          HIDWORD(v60) = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 8 * v65);
          LODWORD(v60) = HIDWORD(v60);
          v37 = sub_22E77BAB4(v63, v64, v60 >> 1);
          v84 = 1;
          v85 = __PAIR64__(v61, v57);
          v86 = 0;
          goto LABEL_15;
        case 3u:
          v66 = *(_QWORD *)(v21 + 8 * v22);
          v67 = *(_QWORD *)(v18 + 8);
          v68 = *(_QWORD *)(v18 + 16);
          *v19 = v20 + 3;
          HIDWORD(v69) = *(_QWORD *)(v21 + 8 * (v20 + 2));
          LODWORD(v69) = HIDWORD(v69);
          v70 = sub_22E77BAB4(v67, v68, v69 >> 1);
          v71 = *a1;
          v72 = *(_QWORD *)(*a1 + 8);
          v73 = *(_QWORD *)(*a1 + 16);
          v74 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v71 + 24) = v74 + 1;
          HIDWORD(v69) = *(_QWORD *)(*(_QWORD *)(v71 + 32) + 8 * v74);
          LODWORD(v69) = HIDWORD(v69);
          v32 = sub_22E77BAB4(v72, v73, v69 >> 1);
          v75 = *a1;
          v76 = *(_QWORD *)(*a1 + 8);
          v77 = *(_QWORD *)(*a1 + 16);
          v78 = *(unsigned int *)(*a1 + 24);
          *(_DWORD *)(v75 + 24) = v78 + 1;
          HIDWORD(v69) = *(_QWORD *)(*(_QWORD *)(v75 + 32) + 8 * v78);
          LODWORD(v69) = HIDWORD(v69);
          v37 = sub_22E77BAB4(v76, v77, v69 >> 1);
          v84 = 2;
          v85 = __PAIR64__(v70, v66);
LABEL_14:
          v86 = v32;
LABEL_15:
          v87 = v37;
          v79 = sub_22E4EF088((uint64_t)&v88, (unint64_t)&v84, 1);
          v80 = (char *)v88 + 24 * v89;
          v81 = *(_OWORD *)v79;
          *((_QWORD *)v80 + 2) = *(_QWORD *)(v79 + 16);
          *(_OWORD *)v80 = v81;
          LODWORD(v89) = v89 + 1;
          break;
        default:
          break;
      }
      v18 = *a1;
      v19 = (unsigned int *)(*a1 + 24);
      v20 = *v19;
    }
    while (*(_DWORD *)(*a1 + 40) > *v19);
    v82 = v88;
    v83 = v89;
  }
  sub_22F3C2990(a2, *(_QWORD *)(*(_QWORD *)(v18 + 8) + 128), (uint64_t)v82, v83);
  if (v88 != v90)
    free(v88);
}

uint64_t sub_22F2C908C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(unsigned int *)(v5 + 10848);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v6 - 8);
  *(_DWORD *)(v5 + 10848) = v6 - 1;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 24) & 7 | (unint64_t)sub_22E782300(v4);
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v8 + 24) = v11 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v11);
  LODWORD(v12) = HIDWORD(v12);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v9, v10, v12 >> 1);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v12) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v12) = HIDWORD(v12);
  result = sub_22E77BAB4(v14, v15, v12 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  v18 = *(unsigned int *)(*a1 + 24);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v18);
  *(_DWORD *)(*a1 + 24) = v19;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFBLL | (4 * (v20 != 0));
  return result;
}

uint64_t sub_22F2C9164(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  sub_22E7B8650(a1, a2);
  *(_QWORD *)(a2 + 24) = sub_22E7B5764(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 20) = result;
  v14 = *a1;
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFE3FFFF | ((*(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v15) & 7) << 18);
  return result;
}

uint64_t sub_22F2C9214(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = sub_22E779F8C(v14, *(_QWORD *)(v13 + 16), v13 + 32, (_DWORD *)(v13 + 24));
  result = sub_22E77F870(v14, v15);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t sub_22F2C92B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(unsigned int *)(v15 + 10848);
  v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
  *(_DWORD *)(v15 + 10848) = v16 - 1;
  *(_QWORD *)(a2 + 16) = v17;
  v18 = *(unsigned int *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v18 + 1;
  *(_DWORD *)(a2 + 4) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v18);
  return result;
}

uint64_t sub_22F2C9360(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 32) = v12;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a2 + 40) = sub_22E77BAB4(v14, v15, v17 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v17) = HIDWORD(v17);
  result = sub_22E77BAB4(v19, v20, v17 >> 1);
  *(_DWORD *)(a2 + 44) = result;
  v23 = *a1;
  v24 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v23 + 24) = v24 + 1;
  *(_BYTE *)(a2 + 48) = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v24) != 0;
  return result;
}

void sub_22F2C9464(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  sub_22E7B8650(a1, a2);
  v20 = 0;
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = 0;
    do
    {
      v8 = *(_QWORD *)(*a1 + 8);
      v9 = *(unsigned int *)(v8 + 10848);
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
      *(_DWORD *)(v8 + 10848) = v9 - 1;
      if (v7 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v7) = v20;
      }
      v21[v7] = v10;
      v7 = ++v20;
      LODWORD(v6) = v6 - 1;
    }
    while ((_DWORD)v6);
    v4 = *a1;
  }
  else
  {
    v7 = 0;
  }
  sub_22F3C2430(a2, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 128), v21, v7);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v15) = HIDWORD(v15);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v12, v13, v15 >> 1);
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v15) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v15) = HIDWORD(v15);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v17, v18, v15 >> 1);
}

_QWORD *sub_22F2C95F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 36) = sub_22E77BAB4(v10, v11, v8 >> 1);
  result = sub_22E782300(*a1);
  *(_QWORD *)(a2 + 24) = result;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

uint64_t sub_22F2C9694(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  a2[5] = *(_QWORD *)(v6 + 8 * (v5 + 1));
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(v6 + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  a2[1] = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  a2[6] = sub_22E77BAB4(v13, v14, v11 >> 1);
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v11) = HIDWORD(v11);
  result = sub_22E77BAB4(v17, v18, v11 >> 1);
  a2[7] = result;
  v21 = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_2;
  v23 = a2 + 8;
  do
  {
    v24 = *(_QWORD *)(*a1 + 8);
    v25 = *(unsigned int *)(v24 + 10848);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 10840) + 8 * v25 - 8);
    *(_DWORD *)(v24 + 10848) = v25 - 1;
    *v23++ = v26;
    --v21;
  }
  while (v21);
  if ((_DWORD)v7)
  {
LABEL_2:
    v7 = v7;
    v22 = (uint64_t *)&a2[2 * (a2[4] + 1) + 8];
    do
    {
      result = (uint64_t)sub_22E782300(*a1);
      *v22++ = result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F2C97BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_22E7B8650(a1, a2);
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(unsigned int *)(v6 + 8 * v5);
  *(_DWORD *)(*a1 + 24) = v5 + 2;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0x3FFFFFF | (*(_QWORD *)(v6 + 8 * (v5 + 1)) << 26);
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(unsigned int *)(v8 + 10848);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
  *(_DWORD *)(v8 + 10848) = v9 - 1;
  *(_QWORD *)(a2 + 16) = v10;
  if (v7)
  {
    v11 = (_QWORD *)(a2 + 24);
    do
    {
      v12 = *(_QWORD *)(*a1 + 8);
      v13 = *(unsigned int *)(v12 + 10848);
      v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
      *(_DWORD *)(v12 + 10848) = v13 - 1;
      *v11++ = v14;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F2C9868(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  a2[21] = v6;
  v7 = sub_22F3C324C(v6);
  a2[18] = v7;
  if (v7)
  {
    v8 = v7;
    v9 = a2 + 4;
    do
    {
      v10 = *(_QWORD *)(*a1 + 8);
      v11 = *(unsigned int *)(v10 + 10848);
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
      *(_DWORD *)(v10 + 10848) = v11 - 1;
      *v9++ = v12;
      --v8;
    }
    while (v8);
  }
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v17) = HIDWORD(v17);
  a2[19] = sub_22E77BAB4(v14, v15, v17 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v17) = HIDWORD(v17);
  result = sub_22E77BAB4(v19, v20, v17 >> 1);
  a2[20] = result;
  return result;
}

uint64_t sub_22F2C9938(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v5, v6, v10 >> 1);
  *(_DWORD *)(a2 + 24) = result;
  v12 = *(unsigned int *)(*a1 + 24);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v12);
  *(_DWORD *)(*a1 + 24) = v13;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v14 != 0) << 18);
  return result;
}

unint64_t sub_22F2C99CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v6 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v6 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = sub_22E779F8C(v6, v5, v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 24) = sub_22E77F870(v6, v9);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 32) = result;
  v11 = *(unsigned int *)(*a1 + 24);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v11);
  *(_DWORD *)(*a1 + 24) = v12;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v13 != 0) << 18);
  return result;
}

unint64_t sub_22F2C9A80(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(unsigned int *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  if (v6)
  {
    v7 = (_QWORD *)(a2 + 40);
    do
    {
      v8 = *(_QWORD *)(*a1 + 8);
      v9 = *(unsigned int *)(v8 + 10848);
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
      *(_DWORD *)(v8 + 10848) = v9 - 1;
      *v7++ = v10;
      --v6;
    }
    while (v6);
    v4 = *a1;
  }
  v11 = *(_QWORD *)(v4 + 8);
  v12 = sub_22E779F8C(v11, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 32) = sub_22E77F870(v11, v12);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 20) = result;
  v14 = *(unsigned int *)(*a1 + 24);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v14);
  *(_DWORD *)(*a1 + 24) = v15;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v16 != 0) << 18);
  return result;
}

unint64_t sub_22F2C9B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v24;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(unsigned int *)(v6 + 8 * v5);
  *(_DWORD *)(*a1 + 24) = v5 + 2;
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8 * (v5 + 1));
    v9 = (_QWORD *)(a2 + 48);
    v10 = (_DWORD *)(a2 + 16 * (*(_DWORD *)(a2 + 16) & 0x7FFFFFFF) + 44);
    do
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(_QWORD *)(v11 + 10840);
      v13 = *(unsigned int *)(v11 + 10848);
      *(v9 - 1) = *(_QWORD *)(v12 + 8 * v13 - 8);
      v14 = *(_QWORD *)(v12 + 8 * (v13 - 1) - 8);
      *(_DWORD *)(v11 + 10848) = v13 - 2;
      *v9 = v14;
      if (v8)
      {
        v15 = *(_QWORD *)(v4 + 16);
        v16 = *(unsigned int *)(v4 + 24);
        *(_DWORD *)(v4 + 24) = v16 + 1;
        HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v16);
        LODWORD(v17) = HIDWORD(v17);
        *(v10 - 1) = sub_22E77BAB4(v11, v15, v17 >> 1);
        v4 = *a1;
        v18 = *(unsigned int *)(*a1 + 24);
        *(_DWORD *)(v4 + 24) = v18 + 1;
        *v10 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v18);
      }
      v9 += 2;
      v10 += 2;
      --v7;
    }
    while (v7);
  }
  v19 = *(_QWORD *)(v4 + 8);
  v20 = sub_22E779F8C(v19, *(_QWORD *)(v4 + 16), v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 32) = sub_22E77F870(v19, v20);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 20) = result;
  v22 = *(unsigned int *)(*a1 + 24);
  v23 = v22 + 1;
  v24 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v22);
  *(_DWORD *)(*a1 + 24) = v23;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v24 != 0) << 18);
  return result;
}

uint64_t sub_22F2C9CC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  *(_QWORD *)(a2 + 16) = sub_22E782300(*a1);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2C9D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  v8 = sub_22F2B0B3C(v6, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7));
  *(_QWORD *)(a2 + 16) = sub_22F2B3CD0(v6, v8);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v10, v11, v13 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v13) = HIDWORD(v13);
  result = sub_22E77BAB4(v15, v16, v13 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2C9DF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v4, v5);
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v12, v13, v10 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v16, v17, v10 >> 1);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

uint64_t sub_22F2C9EC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v4, v5);
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v7, v8, v10 >> 1);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v14 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v14);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v12, v13, v10 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(unsigned int *)(v17 + 10848);
  v19 = *(_QWORD *)(*(_QWORD *)(v17 + 10840) + 8 * v18 - 8);
  *(_DWORD *)(v17 + 10848) = v18 - 1;
  *(_QWORD *)(a2 + 24) = v19;
  v20 = *(unsigned int *)(v16 + 24);
  *(_DWORD *)(v16 + 24) = v20 + 1;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a2 + 40) & 0xFE | (*(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v20) != 0);
  v21 = *a1;
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a2 + 40) & 0xFD | (2 * (*(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22) != 0));
  return result;
}

uint64_t sub_22F2C9FE4(uint64_t *a1, int8x16_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = (uint64_t *)(*a1 + 32);
  v5 = *v4;
  v6 = (unsigned int *)(*a1 + 24);
  v7 = *v6;
  v8 = *(_QWORD *)(*v4 + 8 * v7);
  *v6 = v7 + 2;
  v9 = *(_QWORD *)(v5 + 8 * (v7 + 1));
  v10 = *(v4 - 3);
  v11 = sub_22E779F8C(v10, *(v4 - 2), (uint64_t)v4, v6);
  v12 = sub_22E77F870(v10, v11);
  v13 = v12;
  if (v9)
  {
    v14 = *(_QWORD *)(*a1 + 8);
    v15 = sub_22E779F8C(v14, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
    v16 = sub_22E77F870(v14, v15) & 0xFFFFFFFFFFFFFFF9 | a2[1].i64[1] & 1 | (2 * v8);
    a2[1].i64[0] = a2[1].i64[0] & 3 | v13 | 4;
    a2[1].i64[1] = v16;
  }
  else
  {
    v37.i64[0] = v12;
    v37.i64[1] = 2 * v8;
    a2[1] = vorrq_s8(vandq_s8(a2[1], (int8x16_t)xmmword_22F45F9D0), vandq_s8(v37, (int8x16_t)xmmword_22F45F9E0));
  }
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  a2[2].i32[0] = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v25 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v22 + 24) = v25 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v25);
  LODWORD(v21) = HIDWORD(v21);
  result = sub_22E77BAB4(v23, v24, v21 >> 1);
  a2[2].i32[1] = result;
  v27 = *a1;
  v28 = (uint64_t *)(*a1 + 32);
  v29 = *v28;
  v30 = (unsigned int *)(*a1 + 24);
  v31 = *v30;
  *v30 = v31 + 1;
  v32 = *(_QWORD *)(v29 + 8 * v31);
  if (v32 == 2)
  {
    v38 = *(_QWORD *)(v27 + 8);
    v39 = sub_22E779F8C(v38, *(_QWORD *)(v27 + 16), (uint64_t)v28, v30);
    result = sub_22E77F870(v38, v39);
    v36 = result & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  else if (v32 == 1)
  {
    v41 = *(_QWORD *)(v27 + 8);
    v40 = *(_QWORD *)(v27 + 16);
    *(_DWORD *)(v27 + 24) = v31 + 2;
    v42 = sub_22E77A180(v41, v40, *(_QWORD *)(v29 + 8 * (v31 + 1)));
    result = sub_22E77D8C8(v41, v42);
    v36 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF9 | 2;
  }
  else
  {
    if (v32)
      return result;
    v33 = *(_QWORD *)(v27 + 8);
    v34 = *(unsigned int *)(v33 + 10848);
    v35 = *(_QWORD *)(*(_QWORD *)(v33 + 10840) + 8 * v34 - 8);
    *(_DWORD *)(v33 + 10848) = v34 - 1;
    v36 = v35 & 0xFFFFFFFFFFFFFFF9;
  }
  a2[2].i64[1] = v36;
  return result;
}

uint64_t sub_22F2CA1E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)(a2 + 24) = v11;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)(a2 + 32) = v14;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = sub_22E779F8C(v15, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 40) = sub_22E77F870(v15, v16);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = sub_22E779F8C(v18, *(_QWORD *)(v17 + 16), v17 + 32, (_DWORD *)(v17 + 24));
  result = sub_22E77F870(v18, v19);
  *(_QWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_22F2CA2CC(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  sub_22E7B8650(a1, a2);
  v4 = *(_DWORD *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(unsigned int *)(v5 + 8 * (v4 + 1));
  *(_DWORD *)(*a1 + 24) = v4 + 3;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) & 0xE7FFFFFF | ((*(_QWORD *)(v5 + 8 * (v4 + 2)) & 3) << 27);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) & 0xFDFFFFFF | ((*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) != 0) << 25);
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a2 + 24) & 0xFBFFFFFF | ((*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) & 1) << 26);
  v11 = *a1;
  v12 = *(unsigned int *)(*a1 + 24);
  v13 = v12 + 1;
  *(_DWORD *)(v11 + 24) = v12 + 1;
  v14 = *(_QWORD *)(v11 + 32);
  v15 = *(_QWORD *)(v14 + 8 * v12);
  if ((v15 - 2) < 2)
  {
    if (*(_DWORD *)(v11 + 40) <= v13)
    {
      v18 = 0;
    }
    else
    {
      v20 = *(_QWORD *)(v11 + 8);
      v19 = *(_QWORD *)(v11 + 16);
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v21 = sub_22E77A180(v20, v19, *(_QWORD *)(v14 + 8 * v13));
      v18 = (_QWORD *)sub_22E77D8C8(v20, v21);
      v11 = *a1;
      v13 = *(_DWORD *)(*a1 + 24);
      v14 = *(_QWORD *)(*a1 + 32);
    }
    v23 = *(_QWORD *)(v11 + 8);
    v22 = *(_QWORD *)(v11 + 16);
    *(_DWORD *)(v11 + 24) = v13 + 1;
    HIDWORD(v24) = *(_QWORD *)(v14 + 8 * v13);
    LODWORD(v24) = HIDWORD(v24);
    v25 = sub_22E77BAB4(v23, v22, v24 >> 1);
    if ((_DWORD)v15 == 3)
      v26 = 3;
    else
      v26 = 2;
    *(_BYTE *)(a2 + 26) = v26;
    *(_DWORD *)(a2 + 28) = v25;
  }
  else if ((_DWORD)v15)
  {
    if ((_DWORD)v15 != 1)
      goto LABEL_14;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(unsigned int *)(v16 + 10848);
    v18 = *(_QWORD **)(*(_QWORD *)(v16 + 10840) + 8 * v17 - 8);
    *(_DWORD *)(v16 + 10848) = v17 - 1;
    *(_BYTE *)(a2 + 26) = 1;
  }
  else
  {
    v18 = sub_22E782300(v11);
    *(_DWORD *)(a2 + 24) &= 0xFF00FFFF;
  }
  *(_QWORD *)(a2 + 40) = v18;
  v11 = *a1;
  v13 = *(_DWORD *)(*a1 + 24);
  v14 = *(_QWORD *)(*a1 + 32);
LABEL_14:
  *(_DWORD *)(v11 + 24) = v13 + 1;
  v27 = (_DWORD *)(v11 + 24);
  v29 = *(_QWORD *)(v11 + 8);
  v28 = *(_QWORD *)(v11 + 16);
  if (*(_QWORD *)(v14 + 8 * v13))
  {
    v30 = sub_22E779F8C(*(_QWORD *)(v11 + 8), v28, v11 + 32, v27);
    v31 = sub_22E77F870(v29, v30);
    v32 = *(_DWORD *)(a2 + 24) | 0x1000000;
  }
  else
  {
    *v27 = v13 + 2;
    v55 = sub_22F2B0B3C(v29, v28, *(_QWORD *)(v14 + 8 * (v13 + 1)));
    v31 = sub_22F2B3CD0(v29, v55);
    v32 = *(_DWORD *)(a2 + 24) & 0xFEFFFFFF;
  }
  *(_DWORD *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 16) = v31;
  v33 = *a1;
  v34 = *(_QWORD *)(*a1 + 8);
  v35 = *(_QWORD *)(*a1 + 16);
  v36 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v33 + 24) = v36 + 1;
  HIDWORD(v37) = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 8 * v36);
  LODWORD(v37) = HIDWORD(v37);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v34, v35, v37 >> 1);
  v38 = *a1;
  v39 = *(_QWORD *)(*a1 + 8);
  v40 = *(_QWORD *)(*a1 + 16);
  v41 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v38 + 24) = v41 + 1;
  HIDWORD(v37) = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8 * v41);
  LODWORD(v37) = HIDWORD(v37);
  result = sub_22E77BAB4(v39, v40, v37 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  v43 = *(unsigned __int16 *)(a2 + 24);
  if (*(_WORD *)(a2 + 24))
  {
    v44 = (_QWORD *)(a2 + 48);
    do
    {
      v45 = *(_QWORD *)(*a1 + 8);
      v46 = *(unsigned int *)(v45 + 10848);
      v47 = *(_QWORD *)(*(_QWORD *)(v45 + 10840) + 8 * v46 - 8);
      *(_DWORD *)(v45 + 10848) = v46 - 1;
      *v44++ = v47;
      --v43;
    }
    while (v43);
    v48 = *(unsigned __int16 *)(a2 + 24) + 1;
  }
  else
  {
    v48 = 1;
  }
  if (v6)
  {
    v49 = (_DWORD *)(a2 + 8 * v48 + 40);
    do
    {
      v50 = *a1;
      v51 = *(_QWORD *)(*a1 + 8);
      v52 = *(_QWORD *)(*a1 + 16);
      v53 = *(unsigned int *)(*a1 + 24);
      *(_DWORD *)(v50 + 24) = v53 + 1;
      HIDWORD(v54) = *(_QWORD *)(*(_QWORD *)(v50 + 32) + 8 * v53);
      LODWORD(v54) = HIDWORD(v54);
      result = sub_22E77BAB4(v51, v52, v54 >> 1);
      *v49++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22F2CA5BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 16) = v9;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 24) = v12;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(unsigned int *)(v13 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v17) = HIDWORD(v17);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v14, v15, v17 >> 1);
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(*a1 + 16);
  v21 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v17) = HIDWORD(v17);
  result = sub_22E77BAB4(v19, v20, v17 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  return result;
}

uint64_t sub_22F2CA698(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v4 = *a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v6 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v6 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = sub_22E779F8C(v6, v5, v4 + 32, (_DWORD *)(v4 + 24));
  *(_QWORD *)(a2 + 8) = sub_22E77F870(v6, v9);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v11, v12, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v16, v17, v14 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t sub_22F2CA754(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 24);
  v5 = v4 + 2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * (v4 + 1));
  *(_DWORD *)(v3 + 24) = v5;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 16) = v9;
  v10 = *(unsigned __int16 *)(a2 + 12);
  if (*(_WORD *)(a2 + 12))
  {
    v11 = (_QWORD *)(a2 + 24);
    do
    {
      v12 = *(_QWORD *)(*a1 + 8);
      v13 = *(unsigned int *)(v12 + 10848);
      v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
      *(_DWORD *)(v12 + 10848) = v13 - 1;
      *v11++ = v14;
      --v10;
    }
    while (v10);
  }
  if (v6)
  {
    v15 = *(_QWORD *)(*a1 + 8);
    v16 = *(unsigned int *)(v15 + 10848);
    v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
    *(_DWORD *)(v15 + 10848) = v16 - 1;
    *(_QWORD *)(a2 + 16 + 8 * (*(unsigned __int16 *)(a2 + 12) + 1)) = v17;
  }
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 8);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = *(unsigned int *)(v18 + 24);
  *(_DWORD *)(v18 + 24) = v21 + 1;
  HIDWORD(v22) = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v21);
  LODWORD(v22) = HIDWORD(v22);
  result = sub_22E77BAB4(v19, v20, v22 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22F2CA840(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(*a1 + 8);
  v4 = *(unsigned int *)(v3 + 10848);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 10840) + 8 * v4 - 8);
  *(_DWORD *)(v3 + 10848) = v4 - 1;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(unsigned int *)(v6 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v6 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(unsigned int *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  result = sub_22E77BAB4(v10, v11, v13 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22F2CA8CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  *(_BYTE *)(a2 + 16) = *(_QWORD *)(v6 + 8 * v5) != 0;
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  HIDWORD(v9) = *(_QWORD *)(v6 + 8 * (v5 + 1));
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v7, v8, v9 >> 1);
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

unint64_t sub_22F2CA92C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;

  sub_22E7B8650(a1, (uint64_t)a2);
  a2[10] = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[2] = sub_22F2B14A4((_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[3] = v4;
  a2[4] = sub_22F2B14A4((_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[5] = v5;
  a2[6] = sub_22F2B14A4((_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[7] = v6;
  result = sub_22F2B14A4((_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[8] = result;
  a2[9] = v8;
  return result;
}

uint64_t sub_22F2CA9B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 8) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = sub_22E779F8C(v9, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  result = sub_22E77F870(v9, v10);
  *(_QWORD *)(a2 + 16) = result;
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = *(unsigned int *)(v12 + 10848);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 10840) + 8 * v13 - 8);
  *(_DWORD *)(v12 + 10848) = v13 - 1;
  *(_QWORD *)(a2 + 24) = v14;
  return result;
}

uint64_t sub_22F2CAA54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * (v5 + 1));
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v6, v7, v8 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 16) = v12;
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = (_QWORD *)(a2 + 24);
    do
    {
      v15 = *(_QWORD *)(*a1 + 8);
      v16 = *(unsigned int *)(v15 + 10848);
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v16 - 8);
      *(_DWORD *)(v15 + 10848) = v16 - 1;
      *v14++ = v17;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_22F2CAAFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 8) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 80) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 84) = sub_22E77BAB4(v14, v15, v8 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v18, v19, v8 >> 1);
  *(_DWORD *)(a2 + 88) = result;
  v22 = *(_QWORD *)(*a1 + 8);
  v23 = *(unsigned int *)(v22 + 10848);
  v24 = *(_QWORD *)(*(_QWORD *)(v22 + 10840) + 8 * v23 - 8);
  *(_DWORD *)(v22 + 10848) = v23 - 1;
  *(_QWORD *)(a2 + 16) = v24;
  v25 = *(_QWORD *)(*a1 + 8);
  v26 = *(unsigned int *)(v25 + 10848);
  v27 = *(_QWORD *)(*(_QWORD *)(v25 + 10840) + 8 * v26 - 8);
  *(_DWORD *)(v25 + 10848) = v26 - 1;
  *(_QWORD *)(a2 + 24) = v27;
  v28 = *(_QWORD *)(*a1 + 8);
  v29 = *(unsigned int *)(v28 + 10848);
  v30 = *(_QWORD *)(*(_QWORD *)(v28 + 10840) + 8 * v29 - 8);
  *(_DWORD *)(v28 + 10848) = v29 - 1;
  *(_QWORD *)(a2 + 32) = v30;
  v31 = *(_QWORD *)(*a1 + 8);
  v32 = *(unsigned int *)(v31 + 10848);
  v33 = *(_QWORD *)(*(_QWORD *)(v31 + 10840) + 8 * v32 - 8);
  *(_DWORD *)(v31 + 10848) = v32 - 1;
  *(_QWORD *)(a2 + 40) = v33;
  v34 = *(_QWORD *)(*a1 + 8);
  v35 = *(unsigned int *)(v34 + 10848);
  v36 = *(_QWORD *)(*(_QWORD *)(v34 + 10840) + 8 * v35 - 8);
  *(_DWORD *)(v34 + 10848) = v35 - 1;
  *(_QWORD *)(a2 + 48) = v36;
  v37 = *(_QWORD *)(*a1 + 8);
  v38 = *(unsigned int *)(v37 + 10848);
  v39 = *(_QWORD *)(*(_QWORD *)(v37 + 10840) + 8 * v38 - 8);
  *(_DWORD *)(v37 + 10848) = v38 - 1;
  *(_QWORD *)(a2 + 56) = v39;
  v40 = *(_QWORD *)(*a1 + 8);
  v41 = *(unsigned int *)(v40 + 10848);
  v42 = *(_QWORD *)(*(_QWORD *)(v40 + 10840) + 8 * v41 - 8);
  *(_DWORD *)(v40 + 10848) = v41 - 1;
  *(_QWORD *)(a2 + 64) = v42;
  v43 = *(_QWORD *)(*a1 + 8);
  v44 = *(unsigned int *)(v43 + 10848);
  v45 = *(_QWORD *)(*(_QWORD *)(v43 + 10840) + 8 * v44 - 8);
  *(_DWORD *)(v43 + 10848) = v44 - 1;
  *(_QWORD *)(a2 + 72) = v45;
  return result;
}

double sub_22F2CACDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 8) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_BYTE *)(a2 + 12) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) != 0;
  *(_QWORD *)(a2 + 16) = sub_22E7823B4(v9);
  *(_QWORD *)(a2 + 24) = v11;
  sub_22E786254(*a1, (uint64_t)&v16);
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  *(_QWORD *)(a2 + 56) = v15;
  return result;
}

unint64_t sub_22F2CAD98(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(unsigned int *)(v5 + 8 * v4);
  *(_DWORD *)(*a1 + 24) = v4 + 2;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(v5 + 8 * (v4 + 1)) & 1) << 18);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF7FFFF | ((*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) & 1) << 19);
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFEFFFFF | ((*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) & 1) << 20);
  v11 = *a1;
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12) & 1) << 21);
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFBFFFFF | ((*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14) & 1) << 22);
  v15 = *a1;
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFC7FFFFF | ((*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v16) & 7) << 23);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v21) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v21) = HIDWORD(v21);
  *((_DWORD *)a2 + 1) = sub_22E77BAB4(v18, v19, v21 >> 1);
  v22 = *(_QWORD *)(*a1 + 8);
  v23 = sub_22E779F8C(v22, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *((_QWORD *)a2 + 2) = sub_22E77F870(v22, v23);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *((_QWORD *)a2 + 3) = result;
  if (v6)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)(*a1 + 8);
      v27 = *(unsigned int *)(v26 + 10848);
      v28 = *(_QWORD *)(*(_QWORD *)(v26 + 10840) + 8 * v27 - 8);
      *(_DWORD *)(v26 + 10848) = v27 - 1;
      LODWORD(v26) = *a2;
      v29 = (_DWORD)v26 == 119;
      if ((_DWORD)v26 == 119)
        v30 = a2;
      else
        v30 = 0;
      v31 = v30 + 48;
      if (!v29)
        v31 = a2 + 40;
      *(_QWORD *)&v31[v25] = v28;
      v25 += 8;
    }
    while (8 * v6 != v25);
  }
  return result;
}

uint64_t sub_22F2CAF64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v4, v5);
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v7, v8, v10 >> 1);
  *(_DWORD *)(a2 + 24) = result;
  v12 = *a1;
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 1;
  *(_BYTE *)(a2 + 28) = *(_BYTE *)(a2 + 28) & 0xFE | *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v13) & 1;
  v14 = *(unsigned int *)(*a1 + 24);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v14);
  *(_DWORD *)(*a1 + 24) = v15;
  *(_BYTE *)(a2 + 28) = (2 * (v16 & 1)) | *(_BYTE *)(a2 + 28) & 0xFD;
  return result;
}

uint64_t sub_22F2CB030(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_22E7B8650(a1, a2);
  v4 = *a1 + 24;
  ++*(_DWORD *)v4;
  *(_QWORD *)(a2 + 16) = sub_22E7868D0(*(_QWORD *)(v4 - 16), *(_QWORD *)(v4 - 8), (_QWORD *)(v4 + 8), (_DWORD *)v4);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF3FFFF | ((*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v6) & 3) << 18);
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v10 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v10);
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v8, v9, v11 >> 1);
  v12 = *a1;
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v13 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFEFFFFF | ((*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v13) & 1) << 20);
  v14 = *a1;
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v15 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v15) & 1) << 21);
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = *(_QWORD *)(*a1 + 16);
  v19 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v16 + 24) = v19 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v19);
  LODWORD(v11) = HIDWORD(v11);
  result = sub_22E77BAB4(v17, v18, v11 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  if (*(_WORD *)(a2 + 4))
  {
    v21 = (_QWORD *)(a2 + 32);
    v22 = 8 * *(unsigned __int16 *)(a2 + 4);
    do
    {
      v23 = *(_QWORD *)(*a1 + 8);
      v24 = *(unsigned int *)(v23 + 10848);
      v25 = *(_QWORD *)(*(_QWORD *)(v23 + 10840) + 8 * v24 - 8);
      *(_DWORD *)(v23 + 10848) = v24 - 1;
      *v21++ = v25;
      v22 -= 8;
    }
    while (v22);
  }
  return result;
}

unint64_t sub_22F2CB16C(uint64_t *a1, _QWORD *a2)
{
  unint64_t result;

  sub_22E7B8E30(a1, (uint64_t)a2);
  a2[3] = sub_22E782300(*a1);
  a2[4] = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  a2[5] = result;
  return result;
}

uint64_t sub_22F2CB1CC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_22E7B8650(a1, a2);
  *(_QWORD *)(a2 + 24) = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  result = *a1;
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    result = (uint64_t)sub_22E782300(result);
    v8 = result | 4;
  }
  else
  {
    v5 = *(_QWORD *)(result + 8);
    v6 = *(unsigned int *)(v5 + 10848);
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v6 - 8);
    *(_DWORD *)(v5 + 10848) = v6 - 1;
    v8 = v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t sub_22F2CB244(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  a2[1] = result;
  v10 = *(unsigned int *)(*a1 + 24);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v10);
  *(_DWORD *)(*a1 + 24) = v11;
  *a2 = *a2 & 0xFFFBFFFF | ((v12 != 0) << 18);
  return result;
}

uint64_t sub_22F2CB2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(unsigned int *)(v11 + 10848);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
  *(_DWORD *)(v11 + 10848) = v12 - 1;
  *(_QWORD *)(a2 + 16) = v13;
  v14 = *(unsigned int *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v14 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v14) & 1) << 18);
  return result;
}

uint64_t sub_22F2CB34C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v4, v5);
  *(_QWORD *)(a2 + 24) = sub_22E7B5764(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v7, v8, v10 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

_QWORD *sub_22F2CB3E0(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_22E7B8650(a1, a2);
  result = sub_22F2B4248(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = result;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(unsigned int *)(v5 + 10848);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v6 - 8);
  *(_DWORD *)(v5 + 10848) = v6 - 1;
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_22F2CB440(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  *(_QWORD *)(a2 + 16) = sub_22E782300(*a1);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

unint64_t sub_22F2CB498(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t result;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_22E7B8650(a1, a2);
  v4 = *(_DWORD *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(_QWORD *)(v5 + 8 * (v4 + 3));
  *(_DWORD *)(*a1 + 24) = v4 + 5;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(v5 + 8 * (v4 + 4)) & 1) << 18);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFEFFFFF | ((*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) & 1) << 20);
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFBFFFFF | ((*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10) & 1) << 22);
  v11 = *a1;
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFE7FFFFF | ((*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v12) & 3) << 23);
  v13 = *a1;
  v14 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v14 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v14) & 1) << 21);
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = sub_22E779F8C(v15, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v15, v16);
  v17 = *(_QWORD *)(*a1 + 8);
  v18 = sub_22E779F8C(v17, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 24) = sub_22E77F870(v17, v18);
  *(_QWORD *)(a2 + 32) = sub_22E782300(*a1);
  if (v6)
  {
    v19 = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
    v20 = ((*(_DWORD *)a2 >> 19) & 1) + *(_DWORD *)(a2 + 4);
    if ((*(_DWORD *)a2 & 0x1800000) != 0)
      ++v20;
    *(_QWORD *)(a2 + 8 * v20 + 56) = v19;
  }
  *(_QWORD *)(a2 + 40) = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 48) = result;
  v22 = ((*(_DWORD *)a2 >> 19) & 1) + *(_DWORD *)(a2 + 4);
  if ((*(_DWORD *)a2 & 0x1800000) != 0)
    v23 = v22 + 1;
  else
    v23 = v22;
  if ((_DWORD)v23)
  {
    v24 = (_QWORD *)(a2 + 56);
    v25 = 8 * v23;
    do
    {
      v26 = *(_QWORD *)(*a1 + 8);
      v27 = *(unsigned int *)(v26 + 10848);
      v28 = *(_QWORD *)(*(_QWORD *)(v26 + 10840) + 8 * v27 - 8);
      *(_DWORD *)(v26 + 10848) = v27 - 1;
      *v24++ = v28;
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_22F2CB690(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 1) << 18);
  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF7FFFF | ((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7) & 1) << 19);
  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFEFFFFF | ((*(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v9) & 1) << 20);
  v10 = *a1;
  v11 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFDFFFFF | ((*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v11) & 1) << 21);
  v12 = *(_QWORD *)(*a1 + 8);
  v13 = sub_22E779F8C(v12, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v12, v13);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(v15 + 10848);
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 10840) + 8 * v17 - 8);
  *(_DWORD *)(v15 + 10848) = v17 - 1;
  *(_QWORD *)(a2 + 24) = v18;
  v19 = *(unsigned int *)(v14 + 24);
  *(_DWORD *)(v14 + 24) = v19 + 1;
  HIDWORD(v20) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v19);
  LODWORD(v20) = HIDWORD(v20);
  result = sub_22E77BAB4(v15, v16, v20 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

uint64_t sub_22F2CB7B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(unsigned int *)(v5 + 10848);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v6 - 8);
  *(_DWORD *)(v5 + 10848) = v6 - 1;
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v8 + 1;
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v8) != 0);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v10, v11, v13 >> 1);
  *(_QWORD *)(a2 + 32) = sub_22E7823B4(*a1);
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = sub_22E782300(*a1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 56) = sub_22E77BAB4(v16, v17, v13 >> 1);
  v19 = *a1;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(*a1 + 16);
  v22 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v19 + 24) = v22 + 1;
  HIDWORD(v13) = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v22);
  LODWORD(v13) = HIDWORD(v13);
  *(_DWORD *)(a2 + 60) = sub_22E77BAB4(v20, v21, v13 >> 1);
  v23 = *a1;
  v25 = *(_QWORD *)(*a1 + 8);
  v24 = *(_QWORD *)(*a1 + 16);
  v26 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v23 + 24) = v26 + 1;
  v27 = sub_22E768E34(v25, v24, *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8 * v26));
  v28 = sub_22E785944(v25, v27);
  v29 = *a1;
  if (v28)
  {
    v31 = *(_QWORD *)(v29 + 8);
    v30 = *(_QWORD *)(v29 + 16);
    v32 = *(unsigned int *)(v29 + 24);
    *(_DWORD *)(v29 + 24) = v32 + 1;
    HIDWORD(v33) = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * v32);
    LODWORD(v33) = HIDWORD(v33);
    result = sub_22E77BAB4(v31, v30, v33 >> 1);
    *(_QWORD *)(a2 + 64) = v28 | 1;
    *(_DWORD *)(a2 + 72) = result;
  }
  else
  {
    v35 = sub_22E782300(v29);
    result = sub_22F3C5678((uint64_t)&v36, v35);
    *(_QWORD *)(a2 + 64) = v36;
    *(_DWORD *)(a2 + 72) = v37;
  }
  return result;
}

uint64_t sub_22F2CB95C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_22E7B8650(a1, a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  v7 = v6 + 1;
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v8 = *(_QWORD *)(v5 + 32);
  v6 *= 8;
  v9 = *(unsigned int *)(v8 + v6);
  if (*(_DWORD *)(v8 + v6))
  {
    v13 = (unint64_t *)(a2 + 24);
    do
    {
      v14 = *a1;
      v15 = (uint64_t *)(*a1 + 32);
      v16 = *v15;
      v17 = (unsigned int *)(*a1 + 24);
      v18 = *v17;
      *v17 = v18 + 1;
      if (*(_QWORD *)(v16 + 8 * v18))
      {
        v19 = *(_QWORD *)(v14 + 8);
        v20 = *(unsigned int *)(v19 + 10848);
        v21 = *(_QWORD *)(*(_QWORD *)(v19 + 10840) + 8 * v20 - 8);
        *(_DWORD *)(v19 + 10848) = v20 - 1;
        v22 = v21 | 4;
      }
      else
      {
        v23 = *(_QWORD *)(v14 + 8);
        v24 = sub_22E779F8C(v23, *(_QWORD *)(v14 + 16), (uint64_t)v15, v17);
        result = sub_22E77F870(v23, v24);
        v22 = result & 0xFFFFFFFFFFFFFFFBLL;
      }
      *v13++ = v22;
      --v9;
    }
    while (v9);
    v5 = *a1;
    v7 = *(_DWORD *)(*a1 + 24);
    v8 = *(_QWORD *)(*a1 + 32);
  }
  *(_DWORD *)(v5 + 24) = v7 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(v8 + 8 * v7) & 1) << 18);
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 16) = v12;
  return result;
}

double sub_22F2CBA74(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  sub_22E7B8650(a1, (uint64_t)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  v8 = v5 + 2;
  v9 = *(_QWORD *)(v6 + 8 * (v5 + 1));
  v10 = v5 + 3;
  *(_DWORD *)(*a1 + 24) = v10;
  v11 = *(_QWORD *)(v6 + 8 * v8);
  if (v7)
  {
    sub_22E7B7EB8(a1, a2 + 18, (uint64_t)&a2[4 * (((unint64_t)*a2 >> 19) & 1) + 18], v9);
    v4 = *a1;
    v10 = *(_DWORD *)(*a1 + 24);
    v6 = *(_QWORD *)(*a1 + 32);
  }
  *(_DWORD *)(v4 + 24) = v10 + 1;
  *a2 = *a2 & 0xFFFBFFFF | ((*(_QWORD *)(v6 + 8 * v10) & 1) << 18);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  a2[1] = sub_22E77BAB4(v13, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(unsigned int *)(*a1 + 24);
  if (*(_DWORD *)(*a1 + 40) <= v18)
  {
    v22 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    *(_DWORD *)(v17 + 24) = v18 + 1;
    v21 = sub_22E77A180(v20, v19, *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v18));
    v22 = sub_22E77D8C8(v20, v21);
    v17 = *a1;
  }
  *((_QWORD *)a2 + 3) = v22;
  *((_QWORD *)a2 + 4) = sub_22E7823B4(v17);
  *((_QWORD *)a2 + 5) = v23;
  v24 = *a1;
  v25 = *(_QWORD *)(*a1 + 8);
  v26 = *(unsigned int *)(v25 + 10848);
  v27 = *(_QWORD *)(*(_QWORD *)(v25 + 10840) + 8 * v26 - 8);
  *(_DWORD *)(v25 + 10848) = v26 - 1;
  *((_QWORD *)a2 + 2) = v27;
  if (v11)
  {
    v29 = sub_22E779F8C(v25, *(_QWORD *)(v24 + 16), v24 + 32, (_DWORD *)(v24 + 24));
    v30 = sub_22E77F870(v25, v29);
    v31 = a2 + 18;
    v32 = *a2;
    if ((v32 & 0x80000) != 0 && *v31)
      v33 = a2[21];
    else
      v33 = 0;
    *(_QWORD *)&v31[8 * v33 + 4 * ((v32 >> 19) & 1)] = v30;
    v24 = *a1;
  }
  sub_22E786254(v24, (uint64_t)&v34);
  result = *(double *)&v34;
  *((_OWORD *)a2 + 3) = v34;
  *((_QWORD *)a2 + 8) = v35;
  return result;
}

uint64_t sub_22F2CBC2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;

  sub_22E7B92B0(a1, (unsigned int *)a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFF7FFFF | ((*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 1) << 19);
  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFEFFFFF | ((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7) & 1) << 20);
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)(a2 + 56) = v11;
  v12 = *(unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 40) <= v12)
  {
    v15 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 24) = v12 + 1;
    v14 = sub_22E77A180(v9, v13, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v12));
    v15 = sub_22E77D8C8(v9, v14);
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 8);
    LODWORD(v12) = *(_DWORD *)(*a1 + 24);
  }
  *(_QWORD *)(a2 + 64) = v15;
  v16 = *(_QWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 24) = v12 + 1;
  HIDWORD(v17) = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v12);
  LODWORD(v17) = HIDWORD(v17);
  result = sub_22E77BAB4(v9, v16, v17 >> 1);
  *(_DWORD *)(a2 + 72) = result;
  return result;
}

_QWORD *sub_22F2CBD38(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a2 + 16) & 0xFC | *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 3;
  v6 = (uint64_t *)(*a1 + 32);
  v7 = *v6;
  v8 = (unsigned int *)(*a1 + 24);
  v9 = *v8;
  *v8 = v9 + 1;
  *(_QWORD *)(a2 + 24) = *(unsigned int *)(v7 + 8 * v9);
  *(_QWORD *)(a2 + 40) = sub_22E7868D0(*(v6 - 3), *(v6 - 2), v6, v8);
  result = sub_22E782300(*a1);
  *(_QWORD *)(a2 + 48) = result;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(unsigned int *)(v11 + 10848);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
  *(_DWORD *)(v11 + 10848) = v12 - 1;
  *(_QWORD *)(a2 + 32) = v13;
  return result;
}

unint64_t sub_22F2CBDE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0x80000000 | *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 0x7FFFFFFF;
  v6 = *a1;
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 1;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0x7FFFFFFF | ((*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v7) != 0) << 31);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(unsigned int *)(v9 + 10848);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
  *(_DWORD *)(v9 + 10848) = v10 - 1;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 20) = result;
  return result;
}

unint64_t sub_22F2CBE94(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5) & 1) << 18);
  result = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 24) = result;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_22F2CBF18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  sub_22E7B8650(a1, a2);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(_QWORD *)(*a1 + 32);
  v6 = *(unsigned int *)(v5 + 8 * v4);
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(_QWORD *)(*a1 + 16);
  *(_DWORD *)(*a1 + 24) = v4 + 2;
  HIDWORD(v9) = *(_QWORD *)(v5 + 8 * (v4 + 1));
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v7, v8, v9 >> 1);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v11, v12, v9 >> 1);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 8);
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v14 + 24) = v17 + 1;
  HIDWORD(v9) = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v17);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v15, v16, v9 >> 1);
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = sub_22E779F8C(v18, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  result = (_QWORD *)sub_22E77F870(v18, v19);
  *(_QWORD *)(a2 + 32) = result;
  if ((*(_BYTE *)(a2 + 2) & 1) != 0)
  {
    if (*(_DWORD *)(a2 + 28) && v6)
    {
      v23 = (_QWORD *)(a2 + 40);
      v24 = 24 * v6;
      do
      {
        result = sub_22E7827DC(v23, *a1);
        v23 += 3;
        v24 -= 24;
      }
      while (v24);
    }
  }
  else
  {
    v21 = *a1;
    v22 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v21 + 24) = v22 + 1;
    *(_DWORD *)(a2 + 28) = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v22);
  }
  return result;
}

_QWORD *sub_22F2CC04C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v4, v5);
  result = sub_22E7827DC(v12, *a1);
  if (LODWORD(v12[0]) == 8)
  {
    *(_QWORD *)(a2 + 24) = v12[1];
    *(_DWORD *)(a2 + 32) = HIDWORD(v12[0]);
    v7 = *a1;
    v8 = *(_QWORD *)(*a1 + 8);
    v9 = *(_QWORD *)(*a1 + 16);
    v10 = *(unsigned int *)(*a1 + 24);
    *(_DWORD *)(v7 + 24) = v10 + 1;
    HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v10);
    LODWORD(v11) = HIDWORD(v11);
    result = (_QWORD *)sub_22E77BAB4(v8, v9, v11 >> 1);
    *(_DWORD *)(a2 + 36) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_22F2CC0F8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  sub_22E7B8650(a1, a2);
  v4 = (uint64_t *)(*a1 + 32);
  v5 = *v4;
  v6 = (unsigned int *)(*a1 + 24);
  v7 = *v6;
  *v6 = v7 + 1;
  *(_DWORD *)(a2 + 28) = *(_QWORD *)(v5 + 8 * v7);
  v8 = *(v4 - 3);
  v9 = sub_22E779F8C(v8, *(v4 - 2), (uint64_t)v4, v6);
  *(_QWORD *)(a2 + 16) = sub_22E77F870(v8, v9);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v11, v12, v14 >> 1);
  *(_DWORD *)(a2 + 24) = result;
  v16 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v16)
  {
    v17 = (uint64_t *)(a2 + 32);
    do
    {
      v18 = *(_QWORD *)(*a1 + 8);
      v19 = sub_22E779F8C(v18, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
      result = sub_22E77F870(v18, v19);
      *v17++ = result;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_22F2CC1C4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  result = sub_22E7B8650(a1, a2);
  v5 = *a1;
  v6 = (uint64_t *)(*a1 + 32);
  v7 = *v6;
  v8 = (unsigned int *)(*a1 + 24);
  v9 = *v8;
  *v8 = v9 + 1;
  v10 = *(_QWORD *)(v5 + 8);
  if (*(_QWORD *)(v7 + 8 * v9))
  {
    v14 = sub_22E779F8C(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), (uint64_t)v6, v8);
    result = sub_22E77F870(v10, v14);
    v13 = result | 4;
  }
  else
  {
    v11 = *(unsigned int *)(v10 + 10848);
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
    *(_DWORD *)(v10 + 10848) = v11 - 1;
    v13 = v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

uint64_t sub_22F2CC250(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 16) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 20) = sub_22E77BAB4(v10, v11, v8 >> 1);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v13 + 24) = v16 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * v16);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v14, v15, v8 >> 1);
  *(_DWORD *)(a2 + 24) = result;
  v18 = *a1;
  v19 = *(unsigned int *)(*a1 + 24);
  v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v19);
  *(_DWORD *)(v18 + 24) = v19 + 1;
  *(_DWORD *)(a2 + 28) = v20;
  v21 = *(_QWORD *)(v18 + 8);
  v22 = *(unsigned int *)(v21 + 10848);
  v23 = *(_QWORD *)(*(_QWORD *)(v21 + 10840) + 8 * v22 - 8);
  *(_DWORD *)(v21 + 10848) = v22 - 1;
  *(_QWORD *)(a2 + 32) = v23;
  v24 = *(_QWORD *)(*a1 + 8);
  v25 = *(unsigned int *)(v24 + 10848);
  v26 = *(_QWORD *)(*(_QWORD *)(v24 + 10840) + 8 * v25 - 8);
  *(_DWORD *)(v24 + 10848) = v25 - 1;
  *(_QWORD *)(a2 + 40) = v26;
  v27 = *(_QWORD *)(*a1 + 8);
  v28 = *(unsigned int *)(v27 + 10848);
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 10840) + 8 * v28 - 8);
  *(_DWORD *)(v27 + 10848) = v28 - 1;
  *(_QWORD *)(a2 + 48) = v29;
  v30 = *a1;
  v31 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v30 + 24) = v31 + 1;
  *(_DWORD *)(a2 + 56) = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8 * v31);
  return result;
}

uint64_t sub_22F2CC38C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v9 + 1;
  HIDWORD(v10) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v9);
  LODWORD(v10) = HIDWORD(v10);
  result = sub_22E77BAB4(v5, v6, v10 >> 1);
  *(_DWORD *)(a2 + 4) = result;
  v12 = *(unsigned int *)(*a1 + 24);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v12);
  *(_DWORD *)(*a1 + 24) = v13;
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFBFFFF | ((v14 != 0) << 18);
  return result;
}

uint64_t sub_22F2CC420(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 8 * v5);
  *(_DWORD *)(*a1 + 24) = v6;
  *(_BYTE *)(a2 + 36) = v7 != 0;
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(unsigned int *)(v8 + 10848);
  v10 = *(_QWORD *)(*(_QWORD *)(v8 + 10840) + 8 * v9 - 8);
  *(_DWORD *)(v8 + 10848) = v9 - 1;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 40) = sub_22E7823B4(v4);
  *(_QWORD *)(a2 + 48) = v11;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v13, v14, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = sub_22E779F8C(v18, *(_QWORD *)(v17 + 16), v17 + 32, (_DWORD *)(v17 + 24));
  result = sub_22E77F870(v18, v19);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t sub_22F2CC4E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v11, v12, v14 >> 1);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

uint64_t sub_22F2CC574(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  sub_22E7B8650(a1, a2);
  *(_QWORD *)(a2 + 32) = sub_22E7868D0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 16), (_QWORD *)(*a1 + 32), (_DWORD *)(*a1 + 24));
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = sub_22E779F8C(v4, *(_QWORD *)(*a1 + 16), *a1 + 32, (_DWORD *)(*a1 + 24));
  *(_QWORD *)(a2 + 24) = sub_22E77F870(v4, v5);
  result = *a1;
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    result = (uint64_t)sub_22E782300(result);
    v10 = result | 4;
  }
  else
  {
    v7 = *(_QWORD *)(result + 8);
    v8 = *(unsigned int *)(v7 + 10848);
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
    *(_DWORD *)(v7 + 10848) = v8 - 1;
    v10 = v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t sub_22F2CC61C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v5, v6, v8 >> 1);
  *(_DWORD *)(a2 + 8) = result;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(unsigned int *)(v10 + 10848);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
  *(_DWORD *)(v10 + 10848) = v11 - 1;
  *(_QWORD *)(a2 + 16) = v12;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  *(_QWORD *)(a2 + 24) = v15;
  return result;
}

uint64_t sub_22F2CC6AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  *(_BYTE *)(a2 + 8) = *(_QWORD *)(v6 + 8 * v5) != 0;
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  HIDWORD(v9) = *(_QWORD *)(v6 + 8 * (v5 + 1));
  LODWORD(v9) = HIDWORD(v9);
  result = sub_22E77BAB4(v7, v8, v9 >> 1);
  *(_DWORD *)(a2 + 12) = result;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(unsigned int *)(v11 + 10848);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
  *(_DWORD *)(v11 + 10848) = v12 - 1;
  *(_QWORD *)(a2 + 16) = v13;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t sub_22F2CC750(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 24) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 28) = result;
  v14 = *(_QWORD *)(*a1 + 8);
  v15 = *(unsigned int *)(v14 + 10848);
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 10840) + 8 * v15 - 8);
  *(_DWORD *)(v14 + 10848) = v15 - 1;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

_QWORD *sub_22F2CC7E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v5);
  if (v6 != 1)
  {
    if (v6 != 2)
    {
      v7 = *(_QWORD *)(v4 + 8);
      v8 = *(unsigned int *)(v7 + 10848);
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
      *(_DWORD *)(v7 + 10848) = v8 - 1;
      *(_QWORD *)sub_22F3C1EC8(a2) = v9;
      v4 = *a1;
    }
    v10 = *(_QWORD *)(v4 + 8);
    v11 = *(unsigned int *)(v10 + 10848);
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
    *(_DWORD *)(v10 + 10848) = v11 - 1;
    *(_QWORD *)sub_22EF55B70(a2) = v12;
    v4 = *a1;
  }
  v13 = *(_QWORD *)(v4 + 8);
  v14 = *(unsigned int *)(v13 + 10848);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 10840) + 8 * v14 - 8);
  *(_DWORD *)(v13 + 10848) = v14 - 1;
  result = (_QWORD *)sub_22F3C1EC0(a2);
  *result = v15;
  return result;
}

uint64_t sub_22F2CC8BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  result = sub_22E7B8650(a1, a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 8 * v6);
  if (v7)
  {
    v8 = 0;
    v9 = 8 * v7;
    do
    {
      v10 = *(_QWORD *)(*a1 + 8);
      v11 = *(unsigned int *)(v10 + 10848);
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 10840) + 8 * v11 - 8);
      *(_DWORD *)(v10 + 10848) = v11 - 1;
      if (v8)
      {
        *(_QWORD *)(a2 + v8 + 16) = v12;
      }
      else if (v12)
      {
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(a2 + 16) = v12;
        v13 = *(_DWORD *)a2 & 0xFFFFFCFF | (((*(_DWORD *)v12 >> 8) & 3) << 8);
        *(_DWORD *)a2 = v13;
        *(_DWORD *)a2 = v13 & 0xFFFFE3FF | (((*(_DWORD *)v12 >> 10) & 7) << 10);
      }
      else
      {
        *(_QWORD *)(a2 + 8) = 0;
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t sub_22F2CC980(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *(_QWORD *)(*a1 + 8);
  v8 = *(unsigned int *)(v7 + 10848);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 10840) + 8 * v8 - 8);
  *(_DWORD *)(v7 + 10848) = v8 - 1;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v10 + 24) = v13 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * v13);
  LODWORD(v14) = HIDWORD(v14);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v11, v12, v14 >> 1);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v15 + 24) = v18 + 1;
  HIDWORD(v14) = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8 * v18);
  LODWORD(v14) = HIDWORD(v14);
  result = sub_22E77BAB4(v16, v17, v14 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  return result;
}

uint64_t sub_22F2CCA3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(v5 + 10848);
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 10840) + 8 * v7 - 8);
  *(_DWORD *)(v5 + 10848) = v7 - 1;
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(unsigned int *)(v4 + 24);
  v10 = *(_QWORD *)(v4 + 32);
  *(_DWORD *)(a2 + 24) = *(_QWORD *)(v10 + 8 * v9);
  *(_DWORD *)(v4 + 24) = v9 + 2;
  HIDWORD(v11) = *(_QWORD *)(v10 + 8 * (v9 + 1));
  LODWORD(v11) = HIDWORD(v11);
  *(_DWORD *)(a2 + 28) = sub_22E77BAB4(v5, v6, v11 >> 1);
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_QWORD *)(*a1 + 16);
  v15 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v12 + 24) = v15 + 1;
  HIDWORD(v11) = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v15);
  LODWORD(v11) = HIDWORD(v11);
  result = sub_22E77BAB4(v13, v14, v11 >> 1);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

uint64_t sub_22F2CCAD8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_22E7B8650(a1, a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  v7 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 8 * v6);
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 16);
    do
    {
      v9 = *(_QWORD *)(*a1 + 8);
      v10 = *(unsigned int *)(v9 + 10848);
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
      *(_DWORD *)(v9 + 10848) = v10 - 1;
      *v8++ = v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F2CCB4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_22E7B8650(a1, a2);
  v5 = *(unsigned int *)(*a1 + 24);
  v6 = *(_QWORD *)(*a1 + 32);
  v7 = *(unsigned int *)(v6 + 8 * v5);
  *(_DWORD *)(*a1 + 24) = v5 + 2;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a2 + 4) & 0x7FFFFFFF | (*(_QWORD *)(v6
                                                                                       + 8 * (v5 + 1)) << 31);
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 16);
    do
    {
      v9 = *(_QWORD *)(*a1 + 8);
      v10 = *(unsigned int *)(v9 + 10848);
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 10840) + 8 * v10 - 8);
      *(_DWORD *)(v9 + 10848) = v10 - 1;
      *v8++ = v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F2CCBD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  v9 = v8 + 1;
  *(_DWORD *)(v7 + 24) = v8 + 1;
  v10 = *(_QWORD *)(v7 + 32);
  if (*(_QWORD *)(v10 + 8 * v8))
  {
    v11 = *(_QWORD *)(v7 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + 24) = v13;
    v7 = *a1;
    v9 = *(_DWORD *)(*a1 + 24);
    v10 = *(_QWORD *)(*a1 + 32);
  }
  *(_BYTE *)(a2 + 32) = *(_QWORD *)(v10 + 8 * v9) != 0;
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_QWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 24) = v9 + 2;
  HIDWORD(v16) = *(_QWORD *)(v10 + 8 * (v9 + 1));
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 36) = sub_22E77BAB4(v14, v15, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  result = sub_22E77BAB4(v18, v19, v16 >> 1);
  *(_DWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_22F2CCCBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  sub_22E7B8650(a1, a2);
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(unsigned int *)(v4 + 10848);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 10840) + 8 * v5 - 8);
  *(_DWORD *)(v4 + 10848) = v5 - 1;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  v9 = v8 + 1;
  *(_DWORD *)(v7 + 24) = v8 + 1;
  v10 = *(_QWORD *)(v7 + 32);
  if (*(_QWORD *)(v10 + 8 * v8))
  {
    v11 = *(_QWORD *)(v7 + 8);
    v12 = *(unsigned int *)(v11 + 10848);
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 10840) + 8 * v12 - 8);
    *(_DWORD *)(v11 + 10848) = v12 - 1;
    *(_QWORD *)(a2 + 24) = v13;
    v7 = *a1;
    v9 = *(_DWORD *)(*a1 + 24);
    v10 = *(_QWORD *)(*a1 + 32);
  }
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_QWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 24) = v9 + 1;
  HIDWORD(v16) = *(_QWORD *)(v10 + 8 * v9);
  LODWORD(v16) = HIDWORD(v16);
  *(_DWORD *)(a2 + 32) = sub_22E77BAB4(v14, v15, v16 >> 1);
  v17 = *a1;
  v18 = *(_QWORD *)(*a1 + 8);
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v17 + 24) = v20 + 1;
  HIDWORD(v16) = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8 * v20);
  LODWORD(v16) = HIDWORD(v16);
  result = sub_22E77BAB4(v18, v19, v16 >> 1);
  *(_DWORD *)(a2 + 36) = result;
  return result;
}

uint64_t sub_22F2CCD90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_22F2BAEA4(*a1, *(char **)(a2 + 24));
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 8);
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v4 + 24) = v7 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
  LODWORD(v8) = HIDWORD(v8);
  *(_DWORD *)(a2 + 12) = sub_22E77BAB4(v5, v6, v8 >> 1);
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v9 + 24) = v12 + 1;
  HIDWORD(v8) = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v12);
  LODWORD(v8) = HIDWORD(v8);
  result = sub_22E77BAB4(v10, v11, v8 >> 1);
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_22F2CCE0C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_22F2CCD90(a1, a2);
  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v6) != 0);
  v7 = *a1;
  v8 = *(unsigned int *)(*a1 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFD | (2 * (*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * v8) != 0));
  return result;
}

uint64_t sub_22F2CCE90(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = sub_22E3CD3D4(a1 + 2032, 40, 3);
  *(_BYTE *)v1 = 20;
  if (byte_255E04EB3)
  {
    v2 = sub_22F0D3748(20);
    ++*((_DWORD *)v2 + 2);
  }
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 8) = 0u;
  return v1;
}

uint64_t sub_22F2CCEF8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return sub_22E7BE1AC(result, a2, *a3);
  v4 = (uint64_t *)(*(_QWORD *)result + 16 * v3);
  *v4 = a2;
  v4[1] = *a3 | 2;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_22F2CCF30(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return sub_22E7BE228(result, a2, *a3);
  v4 = (uint64_t *)(*(_QWORD *)result + 16 * v3);
  *v4 = a2;
  v4[1] = *a3 & 0xFFFFFFFFFFFFFFFDLL;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_22F2CCF68(uint64_t a1)
{
  char *v2;

  *(_BYTE *)a1 = -127;
  if (byte_255E04EB3)
  {
    v2 = sub_22F0D3748(129);
    ++*((_DWORD *)v2 + 2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  return a1;
}

llvm::raw_ostream *sub_22F2CCFD4(llvm::raw_ostream *a1)
{
  uint64_t v1;
  unint64_t v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  char *v10;

  v1 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 < 8uLL)
  {
    v9 = (llvm::raw_ostream *)llvm::errs(a1);
    v10 = "<null>\n";
  }
  else
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0 && v2)
    {
      do
      {
        v3 = (llvm::raw_ostream *)llvm::errs(a1);
        v4 = (_BYTE *)*((_QWORD *)v3 + 4);
        if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        {
          llvm::raw_ostream::write(v3);
        }
        else
        {
          *((_QWORD *)v3 + 4) = v4 + 1;
          *v4 = 91;
        }
        v5 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        a1 = sub_22E47DAC0(v5, "] -> ");
        v6 = *(_QWORD *)(v2 + 8);
        v2 = v6 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v6 & 4) != 0 && v2);
    }
    v7 = (llvm::raw_ostream *)llvm::errs(a1);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 91;
    }
    v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v10 = "]\n";
  }
  return sub_22E47DAC0(v9, v10);
}

void sub_22F2CD0AC(uint64_t a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  void *v4[2];
  _QWORD v5[65];

  v5[64] = *MEMORY[0x24BDAC8D0];
  v4[0] = v5;
  v4[1] = (void *)0x4000000000;
  v2 = *(_QWORD *)(a1 + 16);
  sub_22E74181C(v2, 0, 2u);
  *(_DWORD *)(v2 + 36) = -1;
  sub_22E6C61A4((uint64_t **)(v2 + 88));
  sub_22E74106C(0xFu, "CONTROL_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "METADATA", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(6u, "MODULE_NAME", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(8u, "MODULE_DIRECTORY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(7u, "MODULE_MAP_FILE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "IMPORTS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "ORIGINAL_FILE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "ORIGINAL_FILE_ID", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "INPUT_FILE_OFFSETS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(9u, "MODULE_CACHE_KEY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xAu, "CASFS_ROOT_ID", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0x11u, "OPTIONS_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "LANGUAGE_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "TARGET_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "HEADER_SEARCH_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "PREPROCESSOR_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0x10u, "INPUT_FILES_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "INPUT_FILE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "INPUT_FILE_HASH", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(8u, "AST_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "TYPE_OFFSET", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "DECL_OFFSET", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "IDENTIFIER_OFFSET", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "IDENTIFIER_TABLE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(6u, "EAGERLY_DESERIALIZED_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Cu, "MODULAR_CODEGEN_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(7u, "SPECIAL_TYPES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(8u, "STATISTICS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(9u, "TENTATIVE_DEFINITIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xBu, "SELECTOR_OFFSETS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xCu, "METHOD_POOL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xDu, "PP_COUNTER_VALUE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xEu, "SOURCE_LOCATION_OFFSETS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xFu, "SOURCE_LOCATION_PRELOADS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x10u, "EXT_VECTOR_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x11u, "UNUSED_FILESCOPED_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x12u, "PPD_ENTITIES_OFFSETS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x13u, "VTABLE_USES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x15u, "REFERENCED_SELECTOR_POOL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x16u, "TU_UPDATE_LEXICAL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x18u, "SEMA_DECL_REFS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x19u, "WEAK_UNDECLARED_IDENTIFIERS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Au, "PENDING_IMPLICIT_INSTANTIATIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Cu, "UPDATE_VISIBLE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Du, "DECL_UPDATE_OFFSETS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x31u, "DECL_UPDATES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x21u, "CUDA_SPECIAL_DECL_REFS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x22u, "HEADER_SEARCH_TABLE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x23u, "FP_PRAGMA_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x24u, "OPENCL_EXTENSIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Au, "OPENCL_EXTENSION_TYPES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Bu, "OPENCL_EXTENSION_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x25u, "DELEGATING_CTORS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x26u, "KNOWN_NAMESPACES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x27u, "MODULE_OFFSET_MAP", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x28u, "SOURCE_MANAGER_LINE_TABLE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x29u, "OBJC_CATEGORIES_MAP", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Au, "FILE_SORTED_DECLS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Bu, "IMPORTED_MODULES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Eu, "OBJC_CATEGORIES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Fu, "MACRO_OFFSET", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x30u, "INTERESTING_IDENTIFIERS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x31u, "UNDEFINED_BUT_USED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x32u, "LATE_PARSED_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x33u, "OPTIMIZE_PRAGMA_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x37u, "MSSTRUCT_PRAGMA_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x38u, "POINTERS_TO_MEMBERS_PRAGMA_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x34u, "UNUSED_LOCAL_TYPEDEF_NAME_CANDIDATES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x36u, "DELETE_EXPRS_TO_ANALYZE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x39u, "CUDA_PRAGMA_FORCE_HOST_DEVICE_DEPTH", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Eu, "PP_CONDITIONAL_STACK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x40u, "DECLS_TO_CHECK_FOR_DEFERRED_DIAGS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x42u, "PP_INCLUDED_FILES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x43u, "PP_ASSUME_NONNULL_LOC", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(9u, "SOURCE_MANAGER_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "SM_SLOC_FILE_ENTRY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "SM_SLOC_BUFFER_ENTRY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "SM_SLOC_BUFFER_BLOB", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "SM_SLOC_BUFFER_BLOB_COMPRESSED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "SM_SLOC_EXPANSION_ENTRY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0xAu, "PREPROCESSOR_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "PP_MACRO_DIRECTIVE_HISTORY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "PP_MACRO_FUNCTION_LIKE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "PP_MACRO_OBJECT_LIKE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "PP_MODULE_MACRO", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "PP_TOKEN", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0xDu, "SUBMODULE_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0, "SUBMODULE_METADATA", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "SUBMODULE_DEFINITION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "SUBMODULE_UMBRELLA_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "SUBMODULE_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "SUBMODULE_TOPHEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "SUBMODULE_UMBRELLA_DIR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(6u, "SUBMODULE_IMPORTS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x12u, "SUBMODULE_AFFECTING_MODULES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(7u, "SUBMODULE_EXPORTS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(8u, "SUBMODULE_REQUIRES", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(9u, "SUBMODULE_EXCLUDED_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xAu, "SUBMODULE_LINK_LIBRARY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xBu, "SUBMODULE_CONFIG_MACRO", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xCu, "SUBMODULE_CONFLICT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xDu, "SUBMODULE_PRIVATE_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xEu, "SUBMODULE_TEXTUAL_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xFu, "SUBMODULE_PRIVATE_TEXTUAL_HEADER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x10u, "SUBMODULE_INITIALIZERS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x11u, "SUBMODULE_EXPORT_AS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0xEu, "COMMENTS_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0, "COMMENTS_RAW_COMMENT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "COMMENTS_DECL_TO_COMMENT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0xBu, "DECLTYPES_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "TYPE_EXT_QUAL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "TYPE_COMPLEX", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "TYPE_POINTER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "TYPE_BLOCK_POINTER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(6u, "TYPE_LVALUE_REFERENCE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(7u, "TYPE_RVALUE_REFERENCE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(8u, "TYPE_MEMBER_POINTER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(9u, "TYPE_CONSTANT_ARRAY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xAu, "TYPE_INCOMPLETE_ARRAY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xBu, "TYPE_VARIABLE_ARRAY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xCu, "TYPE_VECTOR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xDu, "TYPE_EXT_VECTOR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xEu, "TYPE_FUNCTION_NO_PROTO", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0xFu, "TYPE_FUNCTION_PROTO", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x10u, "TYPE_TYPEDEF", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x11u, "TYPE_TYPEOF_EXPR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x12u, "TYPE_TYPEOF", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x13u, "TYPE_RECORD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x14u, "TYPE_ENUM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x15u, "TYPE_OBJC_INTERFACE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x16u, "TYPE_OBJC_OBJECT_POINTER", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x17u, "TYPE_DECLTYPE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x18u, "TYPE_ELABORATED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x19u, "TYPE_SUBST_TEMPLATE_TYPE_PARM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Au, "TYPE_UNRESOLVED_USING", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Bu, "TYPE_INJECTED_CLASS_NAME", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Cu, "TYPE_OBJC_OBJECT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Du, "TYPE_TEMPLATE_TYPE_PARM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Eu, "TYPE_TEMPLATE_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x1Fu, "TYPE_DEPENDENT_NAME", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x20u, "TYPE_DEPENDENT_TEMPLATE_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x21u, "TYPE_DEPENDENT_SIZED_ARRAY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Eu, "TYPE_DEPENDENT_SIZED_EXT_VECTOR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x22u, "TYPE_PAREN", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x31u, "TYPE_MACRO_QUALIFIED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x23u, "TYPE_PACK_EXPANSION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x24u, "TYPE_ATTRIBUTED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x25u, "TYPE_SUBST_TEMPLATE_TYPE_PARM_PACK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x26u, "TYPE_AUTO", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x27u, "TYPE_UNARY_TRANSFORM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x28u, "TYPE_ATOMIC", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x29u, "TYPE_DECAYED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Au, "TYPE_ADJUSTED", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x2Cu, "TYPE_OBJC_TYPE_PARAM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x32u, "LOCAL_REDECLARATIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x33u, "DECL_TYPEDEF", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x34u, "DECL_TYPEALIAS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x35u, "DECL_ENUM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x36u, "DECL_RECORD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x37u, "DECL_ENUM_CONSTANT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x38u, "DECL_FUNCTION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x39u, "DECL_OBJC_METHOD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Au, "DECL_OBJC_INTERFACE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Bu, "DECL_OBJC_PROTOCOL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Cu, "DECL_OBJC_IVAR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Du, "DECL_OBJC_AT_DEFS_FIELD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Eu, "DECL_OBJC_CATEGORY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x3Fu, "DECL_OBJC_CATEGORY_IMPL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x40u, "DECL_OBJC_IMPLEMENTATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x41u, "DECL_OBJC_COMPATIBLE_ALIAS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x42u, "DECL_OBJC_PROPERTY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x43u, "DECL_OBJC_PROPERTY_IMPL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x44u, "DECL_FIELD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x45u, "DECL_MS_PROPERTY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x48u, "DECL_VAR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x49u, "DECL_IMPLICIT_PARAM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x4Au, "DECL_PARM_VAR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x4Du, "DECL_FILE_SCOPE_ASM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x4Eu, "DECL_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x50u, "DECL_CONTEXT_LEXICAL", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x51u, "DECL_CONTEXT_VISIBLE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x53u, "DECL_NAMESPACE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x54u, "DECL_NAMESPACE_ALIAS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x55u, "DECL_USING", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x58u, "DECL_USING_SHADOW", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x5Au, "DECL_USING_DIRECTIVE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x5Bu, "DECL_UNRESOLVED_USING_VALUE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x5Cu, "DECL_UNRESOLVED_USING_TYPENAME", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x5Du, "DECL_LINKAGE_SPEC", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x5Fu, "DECL_CXX_RECORD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x61u, "DECL_CXX_METHOD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x62u, "DECL_CXX_CONSTRUCTOR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x63u, "DECL_CXX_DESTRUCTOR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x64u, "DECL_CXX_CONVERSION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x65u, "DECL_ACCESS_SPEC", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x66u, "DECL_FRIEND", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x67u, "DECL_FRIEND_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x68u, "DECL_CLASS_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x69u, "DECL_CLASS_TEMPLATE_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Au, "DECL_CLASS_TEMPLATE_PARTIAL_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Bu, "DECL_VAR_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Cu, "DECL_VAR_TEMPLATE_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Du, "DECL_VAR_TEMPLATE_PARTIAL_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Eu, "DECL_FUNCTION_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x6Fu, "DECL_TEMPLATE_TYPE_PARM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x70u, "DECL_NON_TYPE_TEMPLATE_PARM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x71u, "DECL_TEMPLATE_TEMPLATE_PARM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x73u, "DECL_CONCEPT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x82u, "DECL_REQUIRES_EXPR_BODY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x72u, "DECL_TYPE_ALIAS_TEMPLATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x75u, "DECL_STATIC_ASSERT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x76u, "DECL_CXX_BASE_SPECIFIERS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x77u, "DECL_CXX_CTOR_INITIALIZERS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x78u, "DECL_INDIRECTFIELD", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x79u, "DECL_EXPANDED_NON_TYPE_TEMPLATE_PARM_PACK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x7Au, "DECL_EXPANDED_TEMPLATE_TEMPLATE_PARM_PACK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x7Bu, "DECL_CLASS_SCOPE_FUNCTION_SPECIALIZATION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x7Cu, "DECL_IMPORT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x7Du, "DECL_OMP_THREADPRIVATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x80u, "DECL_EMPTY", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x83u, "DECL_OBJC_TYPE_PARAM", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x84u, "DECL_OMP_CAPTUREDEXPR", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x85u, "DECL_PRAGMA_COMMENT", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x86u, "DECL_PRAGMA_DETECT_MISMATCH", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x88u, "DECL_OMP_DECLARE_REDUCTION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0x7Fu, "DECL_OMP_ALLOCATE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  v3 = *(llvm::raw_ostream **)(a1 + 16);
  sub_22E741190(0x8Au, "STMT_STOP", v3, (uint64_t)v4);
  sub_22E741190(0x8Bu, "STMT_NULL_PTR", v3, (uint64_t)v4);
  sub_22E741190(0x8Cu, "STMT_REF_PTR", v3, (uint64_t)v4);
  sub_22E741190(0x8Du, "STMT_NULL", v3, (uint64_t)v4);
  sub_22E741190(0x8Eu, "STMT_COMPOUND", v3, (uint64_t)v4);
  sub_22E741190(0x8Fu, "STMT_CASE", v3, (uint64_t)v4);
  sub_22E741190(0x90u, "STMT_DEFAULT", v3, (uint64_t)v4);
  sub_22E741190(0x91u, "STMT_LABEL", v3, (uint64_t)v4);
  sub_22E741190(0x92u, "STMT_ATTRIBUTED", v3, (uint64_t)v4);
  sub_22E741190(0x93u, "STMT_IF", v3, (uint64_t)v4);
  sub_22E741190(0x94u, "STMT_SWITCH", v3, (uint64_t)v4);
  sub_22E741190(0x95u, "STMT_WHILE", v3, (uint64_t)v4);
  sub_22E741190(0x96u, "STMT_DO", v3, (uint64_t)v4);
  sub_22E741190(0x97u, "STMT_FOR", v3, (uint64_t)v4);
  sub_22E741190(0x98u, "STMT_GOTO", v3, (uint64_t)v4);
  sub_22E741190(0x99u, "STMT_INDIRECT_GOTO", v3, (uint64_t)v4);
  sub_22E741190(0x9Au, "STMT_CONTINUE", v3, (uint64_t)v4);
  sub_22E741190(0x9Bu, "STMT_BREAK", v3, (uint64_t)v4);
  sub_22E741190(0x9Cu, "STMT_RETURN", v3, (uint64_t)v4);
  sub_22E741190(0x9Du, "STMT_DECL", v3, (uint64_t)v4);
  sub_22E741190(0x9Fu, "STMT_GCCASM", v3, (uint64_t)v4);
  sub_22E741190(0xA0u, "STMT_MSASM", v3, (uint64_t)v4);
  sub_22E741190(0xA2u, "EXPR_PREDEFINED", v3, (uint64_t)v4);
  sub_22E741190(0xA3u, "EXPR_DECL_REF", v3, (uint64_t)v4);
  sub_22E741190(0xA4u, "EXPR_INTEGER_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0x179u, "EXPR_FIXEDPOINT_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xA5u, "EXPR_FLOATING_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xA6u, "EXPR_IMAGINARY_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xA7u, "EXPR_STRING_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xA8u, "EXPR_CHARACTER_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xA9u, "EXPR_PAREN", v3, (uint64_t)v4);
  sub_22E741190(0xAAu, "EXPR_PAREN_LIST", v3, (uint64_t)v4);
  sub_22E741190(0xABu, "EXPR_UNARY_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0xADu, "EXPR_SIZEOF_ALIGN_OF", v3, (uint64_t)v4);
  sub_22E741190(0xAEu, "EXPR_ARRAY_SUBSCRIPT", v3, (uint64_t)v4);
  sub_22E741190(0xB0u, "EXPR_CALL", v3, (uint64_t)v4);
  sub_22E741190(0xB1u, "EXPR_MEMBER", v3, (uint64_t)v4);
  sub_22E741190(0xB2u, "EXPR_BINARY_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0xB3u, "EXPR_COMPOUND_ASSIGN_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0xB4u, "EXPR_CONDITIONAL_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0xB5u, "EXPR_IMPLICIT_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xB6u, "EXPR_CSTYLE_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xB7u, "EXPR_COMPOUND_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xB8u, "EXPR_EXT_VECTOR_ELEMENT", v3, (uint64_t)v4);
  sub_22E741190(0xB9u, "EXPR_INIT_LIST", v3, (uint64_t)v4);
  sub_22E741190(0xBAu, "EXPR_DESIGNATED_INIT", v3, (uint64_t)v4);
  sub_22E741190(0xBBu, "EXPR_DESIGNATED_INIT_UPDATE", v3, (uint64_t)v4);
  sub_22E741190(0xBFu, "EXPR_IMPLICIT_VALUE_INIT", v3, (uint64_t)v4);
  sub_22E741190(0xBCu, "EXPR_NO_INIT", v3, (uint64_t)v4);
  sub_22E741190(0xC0u, "EXPR_VA_ARG", v3, (uint64_t)v4);
  sub_22E741190(0xC1u, "EXPR_ADDR_LABEL", v3, (uint64_t)v4);
  sub_22E741190(0xC2u, "EXPR_STMT", v3, (uint64_t)v4);
  sub_22E741190(0xC3u, "EXPR_CHOOSE", v3, (uint64_t)v4);
  sub_22E741190(0xC4u, "EXPR_GNU_NULL", v3, (uint64_t)v4);
  sub_22E741190(0xC6u, "EXPR_SHUFFLE_VECTOR", v3, (uint64_t)v4);
  sub_22E741190(0xC8u, "EXPR_BLOCK", v3, (uint64_t)v4);
  sub_22E741190(0xC9u, "EXPR_GENERIC_SELECTION", v3, (uint64_t)v4);
  sub_22E741190(0xCDu, "EXPR_OBJC_STRING_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xCEu, "EXPR_OBJC_BOXED_EXPRESSION", v3, (uint64_t)v4);
  sub_22E741190(0xCFu, "EXPR_OBJC_ARRAY_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xD0u, "EXPR_OBJC_DICTIONARY_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xD1u, "EXPR_OBJC_ENCODE", v3, (uint64_t)v4);
  sub_22E741190(0xD2u, "EXPR_OBJC_SELECTOR_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xD3u, "EXPR_OBJC_PROTOCOL_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xD4u, "EXPR_OBJC_IVAR_REF_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xD5u, "EXPR_OBJC_PROPERTY_REF_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xD7u, "EXPR_OBJC_KVC_REF_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xD8u, "EXPR_OBJC_MESSAGE_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xDBu, "STMT_OBJC_FOR_COLLECTION", v3, (uint64_t)v4);
  sub_22E741190(0xDCu, "STMT_OBJC_CATCH", v3, (uint64_t)v4);
  sub_22E741190(0xDDu, "STMT_OBJC_FINALLY", v3, (uint64_t)v4);
  sub_22E741190(0xDEu, "STMT_OBJC_AT_TRY", v3, (uint64_t)v4);
  sub_22E741190(0xDFu, "STMT_OBJC_AT_SYNCHRONIZED", v3, (uint64_t)v4);
  sub_22E741190(0xE0u, "STMT_OBJC_AT_THROW", v3, (uint64_t)v4);
  sub_22E741190(0xE2u, "EXPR_OBJC_BOOL_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xE4u, "STMT_CXX_CATCH", v3, (uint64_t)v4);
  sub_22E741190(0xE5u, "STMT_CXX_TRY", v3, (uint64_t)v4);
  sub_22E741190(0xE6u, "STMT_CXX_FOR_RANGE", v3, (uint64_t)v4);
  sub_22E741190(0xE7u, "EXPR_CXX_OPERATOR_CALL", v3, (uint64_t)v4);
  sub_22E741190(0xE8u, "EXPR_CXX_MEMBER_CALL", v3, (uint64_t)v4);
  sub_22E741190(0xE9u, "EXPR_CXX_REWRITTEN_BINARY_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0xEAu, "EXPR_CXX_CONSTRUCT", v3, (uint64_t)v4);
  sub_22E741190(0xECu, "EXPR_CXX_TEMPORARY_OBJECT", v3, (uint64_t)v4);
  sub_22E741190(0xEDu, "EXPR_CXX_STATIC_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xEEu, "EXPR_CXX_DYNAMIC_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xEFu, "EXPR_CXX_REINTERPRET_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xF0u, "EXPR_CXX_CONST_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xF1u, "EXPR_CXX_ADDRSPACE_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xF2u, "EXPR_CXX_FUNCTIONAL_CAST", v3, (uint64_t)v4);
  sub_22E741190(0xF4u, "EXPR_USER_DEFINED_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xF5u, "EXPR_CXX_STD_INITIALIZER_LIST", v3, (uint64_t)v4);
  sub_22E741190(0xF6u, "EXPR_CXX_BOOL_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xF7u, "EXPR_CXX_NULL_PTR_LITERAL", v3, (uint64_t)v4);
  sub_22E741190(0xF8u, "EXPR_CXX_TYPEID_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0xF9u, "EXPR_CXX_TYPEID_TYPE", v3, (uint64_t)v4);
  sub_22E741190(0xFAu, "EXPR_CXX_THIS", v3, (uint64_t)v4);
  sub_22E741190(0xFBu, "EXPR_CXX_THROW", v3, (uint64_t)v4);
  sub_22E741190(0xFCu, "EXPR_CXX_DEFAULT_ARG", v3, (uint64_t)v4);
  sub_22E741190(0xFDu, "EXPR_CXX_DEFAULT_INIT", v3, (uint64_t)v4);
  sub_22E741190(0xFEu, "EXPR_CXX_BIND_TEMPORARY", v3, (uint64_t)v4);
  sub_22E741190(0xFFu, "EXPR_CXX_SCALAR_VALUE_INIT", v3, (uint64_t)v4);
  sub_22E741190(0x100u, "EXPR_CXX_NEW", v3, (uint64_t)v4);
  sub_22E741190(0x101u, "EXPR_CXX_DELETE", v3, (uint64_t)v4);
  sub_22E741190(0x102u, "EXPR_CXX_PSEUDO_DESTRUCTOR", v3, (uint64_t)v4);
  sub_22E741190(0x103u, "EXPR_EXPR_WITH_CLEANUPS", v3, (uint64_t)v4);
  sub_22E741190(0x104u, "EXPR_CXX_DEPENDENT_SCOPE_MEMBER", v3, (uint64_t)v4);
  sub_22E741190(0x105u, "EXPR_CXX_DEPENDENT_SCOPE_DECL_REF", v3, (uint64_t)v4);
  sub_22E741190(0x106u, "EXPR_CXX_UNRESOLVED_CONSTRUCT", v3, (uint64_t)v4);
  sub_22E741190(0x107u, "EXPR_CXX_UNRESOLVED_MEMBER", v3, (uint64_t)v4);
  sub_22E741190(0x108u, "EXPR_CXX_UNRESOLVED_LOOKUP", v3, (uint64_t)v4);
  sub_22E741190(0x109u, "EXPR_CXX_EXPRESSION_TRAIT", v3, (uint64_t)v4);
  sub_22E741190(0x10Au, "EXPR_CXX_NOEXCEPT", v3, (uint64_t)v4);
  sub_22E741190(0x10Bu, "EXPR_OPAQUE_VALUE", v3, (uint64_t)v4);
  sub_22E741190(0x10Cu, "EXPR_BINARY_CONDITIONAL_OPERATOR", v3, (uint64_t)v4);
  sub_22E741190(0x10Du, "EXPR_TYPE_TRAIT", v3, (uint64_t)v4);
  sub_22E741190(0x10Eu, "EXPR_ARRAY_TYPE_TRAIT", v3, (uint64_t)v4);
  sub_22E741190(0x10Fu, "EXPR_PACK_EXPANSION", v3, (uint64_t)v4);
  sub_22E741190(0x110u, "EXPR_SIZEOF_PACK", v3, (uint64_t)v4);
  sub_22E741190(0x111u, "EXPR_SUBST_NON_TYPE_TEMPLATE_PARM", v3, (uint64_t)v4);
  sub_22E741190(0x112u, "EXPR_SUBST_NON_TYPE_TEMPLATE_PARM_PACK", v3, (uint64_t)v4);
  sub_22E741190(0x113u, "EXPR_FUNCTION_PARM_PACK", v3, (uint64_t)v4);
  sub_22E741190(0x114u, "EXPR_MATERIALIZE_TEMPORARY", v3, (uint64_t)v4);
  sub_22E741190(0x118u, "EXPR_CUDA_KERNEL_CALL", v3, (uint64_t)v4);
  sub_22E741190(0x126u, "EXPR_CXX_UUIDOF_EXPR", v3, (uint64_t)v4);
  sub_22E741190(0x127u, "EXPR_CXX_UUIDOF_TYPE", v3, (uint64_t)v4);
  sub_22E741190(0x173u, "EXPR_LAMBDA", v3, (uint64_t)v4);
  sub_22E74106C(0xCu, "PREPROCESSOR_DETAIL_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(0, "PPD_MACRO_EXPANSION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "PPD_MACRO_DEFINITION", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "PPD_INCLUSION_DIRECTIVE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0x12u, "EXTENSION_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "EXTENSION_METADATA", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E74106C(0x13u, "UNHASHED_CONTROL_BLOCK", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(1u, "SIGNATURE", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(2u, "AST_BLOCK_HASH", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(3u, "DIAGNOSTIC_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(4u, "HEADER_SEARCH_PATHS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(5u, "FILE_SYSTEM_OPTIONS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E741190(6u, "DIAG_PRAGMA_MAPPINGS", *(llvm::raw_ostream **)(a1 + 16), (uint64_t)v4);
  sub_22E7416F4(*(_QWORD *)(a1 + 16));
  if (v4[0] != v5)
    free(v4[0]);
}

uint64_t sub_22F2CF398(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v17[92];
  __int128 v18;
  int v19;
  uint64_t v20;

  v10 = a4 + a5;
  v11 = a2 + a3 - (a4 + a5);
  v12 = a4 + a5 - a2;
  if (a3 < v12)
    v12 = a3;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a3 <= v11)
    v13 = a2;
  else
    v13 = a2 + v12;
  if (a3 <= v11)
    v14 = 0;
  else
    v14 = v12;
  llvm::SHA1::init((llvm::SHA1 *)v17);
  MEMORY[0x23489E9D0](v17, a4, a5);
  llvm::SHA1::result((llvm::SHA1 *)v17);
  *(_DWORD *)(a1 + 16) = v19;
  *(_OWORD *)a1 = v18;
  if (a3 >= v10 - a2)
    v15 = v10 - a2;
  else
    v15 = a3;
  MEMORY[0x23489E9D0](v17, a2, v15);
  MEMORY[0x23489E9D0](v17, v13, a3 - v14);
  return llvm::SHA1::result((llvm::SHA1 *)v17);
}

void sub_22F2CF4A0(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  _QWORD v9[17];

  v9[16] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&v7, a2, &a2[a3]);
  v6 = sub_22E7C9C14(a1, &v7);
  sub_22E7BE5A4(v6, (char *)v7, v8, a4);
  if (v7 != v9)
    free(v7);
}

uint64_t sub_22F2CF54C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;

  result = sub_22E7E3BB4(a1, a2);
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    v6 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v6;
    v5 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = (int)result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void sub_22F2CF5C0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&v10, a5, &a5[a6]);
  sub_22E7C9C14(a1, &v10);
  sub_22E74241C(*(llvm::raw_ostream **)(a1 + 16), a2, a3, a4, (char *)v10, v11, 0);
  if (v10 != v12)
    free(v10);
}

int *sub_22F2CF690(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v7;
  int v8;

  if (!a2)
    return (int *)(a1 + 16 * a2);
  LODWORD(v3) = (a2 - 1) & a3;
  v4 = (int *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v7 = 1;
    while (v5)
    {
      v8 = v3 + v7++;
      v3 = v8 & (a2 - 1);
      v5 = *(_DWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (int *)(a1 + 16 * v3);
    }
    return (int *)(a1 + 16 * a2);
  }
  return v4;
}

llvm::raw_ostream *sub_22F2CF6E8(int *a1, unsigned int a2, unint64_t *a3)
{
  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  if (a2 >= 0x20)
  {
    sub_22E740F64((llvm::raw_ostream *)a1, a2 & 0x1F | 0x20, 6);
    a2 = 1;
  }
  sub_22E740F64((llvm::raw_ostream *)a1, a2, 6);
  sub_22E740F64((llvm::raw_ostream *)a1, 1u, 6);
  return sub_22E742298((llvm::raw_ostream *)a1, *a3, 6);
}

uint64_t sub_22F2CF76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  if (!a2 || (*(_WORD *)(a2 + 36) & 0x10) != 0)
    return 0;
  v6 = sub_22E7F14A0(a1 + 408, &v13);
  result = *(unsigned int *)(v6 + 8);
  if (!(_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 404);
    *(_DWORD *)(a1 + 404) = v8 + 1;
    *(_DWORD *)(v6 + 8) = v8;
    *((_QWORD *)&v11 + 1) = a2;
    *(_QWORD *)&v11 = a3;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 440);
    if (v9 >= *(_QWORD *)(a1 + 448))
    {
      v10 = sub_22E63BB48((void **)(a1 + 432), (uint64_t)&v11);
    }
    else
    {
      *(_OWORD *)v9 = v11;
      *(_QWORD *)(v9 + 16) = v12;
      v10 = (char *)(v9 + 24);
    }
    *(_QWORD *)(a1 + 440) = v10;
    return *(unsigned int *)(v6 + 8);
  }
  return result;
}

uint64_t sub_22F2CF824(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  v7 = *(_QWORD *)v5 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

unint64_t sub_22F2CF898(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = HIDWORD(a2);
  if ((_DWORD)a2)
    v4 = a2 - sub_22E7E3C1C(a1, a2 & 0x7FFFFFFF);
  else
    v4 = 0;
  if ((_DWORD)v3)
    v5 = (unint64_t)(v3 - sub_22E7E3C1C(a1, v3 & 0x7FFFFFFF)) << 32;
  else
    v5 = 0;
  return v5 | v4;
}

void sub_22F2CF904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  _BYTE v11[128];
  void *v12;
  uint64_t v13;
  _BYTE v14[32];
  void *v15[2];
  _QWORD v16[65];

  v16[64] = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v15[0] = v16;
    v15[1] = (void *)0x4000000000;
    v6 = *(_QWORD *)(a1 + 40);
    v7 = a1;
    v8 = v15;
    v9 = v11;
    v10 = 0x1000000000;
    v12 = v14;
    v13 = 0x800000000;
    do
    {
      v4 = a2;
      v5 = *(_DWORD *)(a2 + 8);
      sub_22F2CFA34((uint64_t)&v6, *(_QWORD *)a2);
      sub_22E7C9A94(v7, v5, (uint64_t)v8);
      a2 = v4 + 16;
    }
    while (v4 + 16 != a3);
    sub_22E7CA950((uint64_t)&v6, 0x15u, 0);
    if (v12 != v14)
      free(v12);
    if (v9 != v11)
      free(v9);
    if (v15[0] != v16)
      free(v15[0]);
  }
}

uint64_t sub_22F2CFA34(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_22F2D0A34(*(_QWORD *)(a1 + 8), a2);
  v4 = result;
  v5 = *(_DWORD *)(v2 + 8);
  if (v5 >= *(_DWORD *)(v2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v5) = v4;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

void sub_22F2CFA98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD v10[2];
  void *v11;
  __int128 v12;
  _QWORD v13[513];

  v0 = MEMORY[0x24BDAC7A8]();
  v13[512] = *MEMORY[0x24BDAC8D0];
  if (*v1 && *(_DWORD *)*v1 >= 2u)
  {
    v2 = (uint64_t)v1;
    v3 = v0;
    v11 = v13;
    v12 = xmmword_22F45FB10;
    sub_22E7CAB28(v0, (unint64_t)v1, (_DWORD **)&v11);
    if ((*(_WORD *)(v2 + 8) & 0x7F) == 0x10)
    {
      v4 = *(_QWORD *)(v3 + 56);
      v5 = sub_22EFCAD5C(v2);
      v6 = sub_22E7CBF08(v4, v5);
      v2 = sub_22EFCAE04(v6);
    }
    v10[0] = 28;
    v7 = sub_22EFCAD5C(v2);
    v9 = v7;
    if ((*(_BYTE *)(v7 + 29) & 0x80) != 0)
      v8 = (unsigned int *)(v7 - 4);
    else
      v8 = (unsigned int *)(sub_22E4D1AD8((uint64_t *)(v3 + 208), &v9) + 1);
    v10[1] = *v8;
    sub_22E74241C(*(llvm::raw_ostream **)(v3 + 16), *(_DWORD *)(v3 + 1836), (uint64_t)v10, 2, (char *)v11, v12, 0);
    if (v11 != v13)
      free(v11);
  }
}

void sub_22F2CFBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[65];

  v24[64] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 2000) + 52) & 0x40000000) != 0)
  {
    v21 = a1;
    v22 = v24;
    v23 = 0x4000000000;
    v2 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v2)
    {
      for (i = *(uint64_t **)(a2 + 24); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)(a2 + 24);
    }
    v5 = *(_QWORD *)(a2 + 24) + 8 * v2;
    if (i != (uint64_t *)v5)
    {
      v6 = *i;
      do
      {
        a1 = sub_22E7BE5A4(a1, (char *)(v6 + 32), *(_QWORD *)v6, (uint64_t)&v22);
        v7 = *(_BYTE *)(v6 + 8);
        v9 = *(unsigned int *)(v6 + 12);
        v8 = *(unsigned int *)(v6 + 16);
        v10 = *(unsigned int *)(v6 + 20);
        v11 = *(_BYTE *)(v6 + 24);
        v12 = *(_BYTE *)(v6 + 25);
        v13 = v23;
        if (v23 >= (unint64_t)HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v23;
        }
        *((_QWORD *)v22 + v13) = v11 & 1;
        v14 = v23 + 1;
        LODWORD(v23) = v14;
        if (v14 >= HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v23;
        }
        *((_QWORD *)v22 + v14) = v12 & 1;
        v15 = v23 + 1;
        LODWORD(v23) = v15;
        if (v15 >= HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        *((_QWORD *)v22 + v15) = v7 & 1;
        v16 = v23 + 1;
        LODWORD(v23) = v16;
        if (v16 >= HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        *((_QWORD *)v22 + v16) = v9;
        v17 = v23 + 1;
        LODWORD(v23) = v17;
        if (v17 >= HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v23;
        }
        *((_QWORD *)v22 + v17) = v8;
        v18 = v23 + 1;
        LODWORD(v23) = v18;
        if (v18 >= HIDWORD(v23))
        {
          a1 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v23;
        }
        *((_QWORD *)v22 + v18) = v10;
        LODWORD(v23) = v23 + 1;
        do
        {
          v19 = i[1];
          ++i;
          v6 = v19;
          if (v19)
            v20 = v6 == -8;
          else
            v20 = 1;
        }
        while (v20);
      }
      while (i != (uint64_t *)v5);
    }
    sub_22E742038(*(llvm::raw_ostream **)(v21 + 16), 0x24u, (uint64_t)&v22, 0);
    if (v22 != v24)
      free(v22);
  }
}

void sub_22F2CFE7C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[65];

  v14[64] = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v3 = a2;
    v12 = v14;
    v13 = 0x4000000000;
    do
    {
      v6 = v3[1];
      sub_22E7CA8EC(a1, *v3, (uint64_t)&v12);
      sub_22E7CA8EC(a1, *(_QWORD *)(v6 + 112), (uint64_t)&v12);
      v7 = *(unsigned int *)(v6 + 8);
      v8 = v13;
      if (v13 >= (unint64_t)HIDWORD(v13))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      *((_QWORD *)v12 + v8) = v7;
      LODWORD(v13) = v13 + 1;
      v9 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)v6;
        v11 = 24 * v9;
        do
        {
          sub_22E7CA170((_DWORD *)a1, v10, (uint64_t)&v12);
          v10 += 24;
          v11 -= 24;
        }
        while (v11);
      }
      v3 += 2;
    }
    while (v3 != a3);
    sub_22E742038(*(llvm::raw_ostream **)(a1 + 16), 0x32u, (uint64_t)&v12, 0);
    if (v12 != v14)
      free(v12);
  }
}

void sub_22F2CFFDC(uint64_t a1, int a2)
{
  void *v3[2];
  _QWORD v4[65];

  v4[64] = *MEMORY[0x24BDAC8D0];
  v3[0] = v4;
  v3[1] = (void *)0x4000000000;
  sub_22E7C9A94(a1, a2, (uint64_t)v3);
  sub_22E742038(*(llvm::raw_ostream **)(a1 + 16), 0x33u, (uint64_t)v3, 0);
  if (v3[0] != v4)
    free(v3[0]);
}

void sub_22F2D007C(llvm::raw_ostream *a1, unsigned __int8 a2)
{
  void *v2[2];
  _QWORD v3[65];

  v3[64] = *MEMORY[0x24BDAC8D0];
  v2[0] = v3;
  v3[0] = a2;
  v2[1] = (void *)0x4000000001;
  sub_22E742038(a1, 0x37u, (uint64_t)v2, 0);
  if (v2[0] != v3)
    free(v2[0]);
}

void sub_22F2D0108(uint64_t a1, unsigned int a2, int a3)
{
  void *v4[2];
  _QWORD v5[65];

  v5[64] = *MEMORY[0x24BDAC8D0];
  v4[0] = v5;
  v5[0] = a2;
  v4[1] = (void *)0x4000000001;
  sub_22E7C9A94(a1, a3, (uint64_t)v4);
  sub_22E742038(*(llvm::raw_ostream **)(a1 + 16), 0x38u, (uint64_t)v4, 0);
  if (v4[0] != v5)
    free(v4[0]);
}

void sub_22F2D01B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[65];

  v14[64] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 64))
  {
    v12 = v14;
    v13 = 0x4000000000;
    sub_22F2D0320((unsigned __int8 *)(a2 + 668), (uint64_t)&v12);
    v4 = a1;
    sub_22E7C9A94(a1, *(_DWORD *)(a2 + 672), (uint64_t)&v12);
    v5 = a2;
    v6 = *(unsigned int *)(a2 + 592);
    v7 = v13;
    if (v13 >= HIDWORD(v13))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v13;
    }
    *((_QWORD *)v12 + v7) = v6;
    LODWORD(v13) = v13 + 1;
    v8 = *(unsigned int *)(v5 + 592);
    if ((_DWORD)v8)
    {
      v9 = 32 * v8;
      v10 = *(_QWORD *)(v5 + 584) + 16;
      do
      {
        sub_22F2D0320((unsigned __int8 *)v10, (uint64_t)&v12);
        sub_22E7C9A94(v4, *(_DWORD *)(v10 + 4), (uint64_t)&v12);
        v11 = sub_22E7C9A94(v4, *(_DWORD *)(v10 + 8), (uint64_t)&v12);
        sub_22E7BE5A4(v11, *(char **)(v10 - 16), *(_QWORD *)(v10 - 8), (uint64_t)&v12);
        v10 += 32;
        v9 -= 32;
      }
      while (v9);
    }
    sub_22E742038(*(llvm::raw_ostream **)(v4 + 16), 0x3Du, (uint64_t)&v12, 0);
    if (v12 != v14)
      free(v12);
  }
}

unsigned __int8 *sub_22F2D0320(unsigned __int8 *result, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = result[3];
  v4 = result[1];
  v5 = *result;
  v6 = result[2];
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    result = (unsigned __int8 *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  v8 = v3 | (2 * v4);
  if (v5)
    v8 |= 8u;
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8 | (16 * v6);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22F2D03AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[65];

  v16[64] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 64))
  {
    v14 = v16;
    v16[0] = *(unsigned int *)(a2 + 1300) | ((unint64_t)*(unsigned int *)(a2 + 1296) << 32);
    v15 = 0x4000000001;
    sub_22E7C9A94(a1, *(_DWORD *)(a2 + 1304), (uint64_t)&v14);
    v4 = a2;
    v5 = *(unsigned int *)(a2 + 1216);
    v6 = v15;
    if (v15 >= HIDWORD(v15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v15;
    }
    *((_QWORD *)v14 + v6) = v5;
    LODWORD(v15) = v15 + 1;
    v7 = *(unsigned int *)(v4 + 1216);
    if ((_DWORD)v7)
    {
      v8 = 32 * v7;
      v9 = (char **)(*(_QWORD *)(v4 + 1208) + 16);
      do
      {
        v10 = *(unsigned int *)v9;
        v11 = *((unsigned int *)v9 + 1);
        v12 = v15;
        if (v15 >= (unint64_t)HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        *((_QWORD *)v14 + v12) = v11 | (v10 << 32);
        LODWORD(v15) = v15 + 1;
        sub_22E7C9A94(a1, *((_DWORD *)v9 + 2), (uint64_t)&v14);
        v13 = sub_22E7C9A94(a1, *((_DWORD *)v9 + 3), (uint64_t)&v14);
        sub_22E7BE5A4(v13, *(v9 - 2), (uint64_t)*(v9 - 1), (uint64_t)&v14);
        v9 += 4;
        v8 -= 32;
      }
      while (v8);
    }
    sub_22E742038(*(llvm::raw_ostream **)(a1 + 16), 0x41u, (uint64_t)&v14, 0);
    if (v14 != v16)
      free(v14);
  }
}

uint64_t sub_22F2D0558(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F2D3164(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

uint64_t sub_22F2D0614(uint64_t a1)
{
  return sub_22E7D35D0(a1 - 8);
}

void sub_22F2D061C(uint64_t a1)
{
  sub_22E7D35D0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2D0640(uint64_t a1)
{
  sub_22E7D35D0(a1 - 8);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2D0668(uint64_t a1, int8x16_t *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)(a1 + 121) = 1;
  *(_BYTE *)(a1 + 123) = a8;
  sub_22E740F64(*(llvm::raw_ostream **)(a1 + 16), 0x43u, 8);
  sub_22E740F64(*(llvm::raw_ostream **)(a1 + 16), 0x50u, 8);
  sub_22E740F64(*(llvm::raw_ostream **)(a1 + 16), 0x43u, 8);
  sub_22E740F64(*(llvm::raw_ostream **)(a1 + 16), 0x48u, 8);
  sub_22F2CD0AC(a1);
  *(int8x16_t *)(a1 + 40) = vextq_s8(a2[5], a2[5], 8uLL);
  *(_QWORD *)(a1 + 64) = a5;
  sub_22E7D3980();
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(char *)(a1 + 119) < 0)
  {
    **(_BYTE **)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 119) = 0;
  }
  *(_BYTE *)(a1 + 121) = 0;
  if (a9)
  {
    v14 = *(_QWORD *)(a1 + 32);
    llvm::MemoryBuffer::getMemBufferCopy();
    sub_22F2DF8D0(v14, a3, a4, &v16);
    v15 = v16;
    v16 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t sub_22F2D07C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v11 = 0;
  sub_22F2899F0(a1, &v10, &v11, (uint64_t)&v8);
  v4 = v8;
  if (v9)
  {
    v12 = v14;
    v13 = 0x100000000;
    v15 = *a2;
    v16 = v18;
    v17 = 0x100000000;
    sub_22E7F08A0((uint64_t *)(a1 + 24), (uint64_t)&v15);
    if (v16 != v18)
      free(v16);
    if (v12 != v14)
      free(v12);
    v6 = *(_QWORD *)(a1 + 24);
    v5 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v6) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v8 + 8);
    v6 = *(_QWORD *)(a1 + 24);
  }
  return v6 + 40 * v5 + 8;
}

llvm::raw_ostream *sub_22F2D08E8(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;

  v6 = *(unsigned int *)(a3 + 8);
  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  if (a2 >= 0x20)
  {
    sub_22E740F64((llvm::raw_ostream *)a1, a2 & 0x1F | 0x20, 6);
    a2 = 1;
  }
  sub_22E740F64((llvm::raw_ostream *)a1, a2, 6);
  v7 = v6;
  if (v6 >= 0x20)
  {
    v8 = v6;
    do
    {
      sub_22E740F64((llvm::raw_ostream *)a1, v8 & 0x1F | 0x20, 6);
      v7 = v8 >> 5;
      v9 = v8 > 0x3FF;
      v8 >>= 5;
    }
    while (v9);
  }
  result = sub_22E740F64((llvm::raw_ostream *)a1, v7, 6);
  if ((_DWORD)v6)
  {
    v11 = 0;
    v12 = 4 * v6;
    do
    {
      result = sub_22E742298((llvm::raw_ostream *)a1, *(unsigned int *)(*(_QWORD *)a3 + v11), 6);
      v11 += 4;
    }
    while (v12 != v11);
  }
  return result;
}

llvm::raw_ostream *sub_22F2D09C0(int *a1, uint64_t a2)
{
  uint64_t i;
  llvm::raw_ostream *result;

  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  sub_22E740F64((llvm::raw_ostream *)a1, 8u, 6);
  sub_22E740F64((llvm::raw_ostream *)a1, 4u, 6);
  for (i = 0; i != 32; i += 8)
    result = sub_22E742298((llvm::raw_ostream *)a1, *(_QWORD *)(a2 + i), 6);
  return result;
}

uint64_t sub_22F2D0A34(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v7 = a2;
  if (!a2)
    return 0;
  v5 = a1 + 568;
  v2 = *(unsigned int *)sub_22F2D0558(a1 + 568, &v7);
  if (!(_DWORD)v2)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6 || (sub_22F2B3ED0(v6), v2 = *(unsigned int *)sub_22F2D0558(v5, &v7), !(_DWORD)v2))
    {
      v2 = *(unsigned int *)(a1 + 564);
      *(_DWORD *)(a1 + 564) = v2 + 1;
      *(_DWORD *)sub_22F2D0558(v5, &v7) = v2;
    }
  }
  return v2;
}

uint64_t sub_22F2D0AD4(uint64_t a1, unint64_t *a2)
{
  return sub_22E7CA8EC(*(_QWORD *)(a1 + 8), *a2, *(_QWORD *)(a1 + 16));
}

void sub_22F2D0AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E7E3E60(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    v11 = *(_QWORD *)(a1 + 16);
    v10 = *(unsigned int *)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v10;
    v4 = v11;
    v6 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 8 * v7;
    do
    {
      sub_22E7E5100(a1, *(int **)(*(_QWORD *)(a2 + 24) + v8));
      v8 += 8;
    }
    while (v9 != v8);
  }
}

uint64_t sub_22F2D0BA4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)(result + 56) = a2;
  v2 = ((*(_QWORD *)(a2 + 2792) - *(_QWORD *)(a2 + 2784)) >> 3) + 18;
  v3 = ((*(_QWORD *)(a2 + 2688) - *(_QWORD *)(a2 + 2680)) >> 3) + 300;
  *(_DWORD *)(result + 288) = v3;
  v4 = ((*(_QWORD *)(a2 + 3976) - *(_QWORD *)(a2 + 3968)) >> 3) + 1;
  *(_DWORD *)(result + 344) = v4;
  v5 = ((*(_QWORD *)(a2 + 4080) - *(_QWORD *)(a2 + 4072)) >> 3) + 1;
  *(_DWORD *)(result + 400) = v5;
  v6 = *(_DWORD *)(a2 + 4208) + 1;
  *(_DWORD *)(result + 552) = v6;
  v7 = *(_DWORD *)(a2 + 4456) + 1;
  *(_DWORD *)(result + 560) = v7;
  *(_DWORD *)(result + 200) = v2;
  *(_DWORD *)(result + 204) = v2;
  *(_DWORD *)(result + 292) = v3;
  *(_DWORD *)(result + 348) = v4;
  *(_DWORD *)(result + 404) = v5;
  *(_DWORD *)(result + 564) = v7;
  *(_DWORD *)(result + 556) = v6;
  return result;
}

unsigned int *sub_22F2D0C38(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unsigned int *result;
  unint64_t v5;

  v5 = a3;
  result = (unsigned int *)sub_22F2D0558(a1 + 568, &v5);
  if (*result < a2)
    *result = a2;
  return result;
}

_QWORD *sub_22F2D0C7C(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a3;
  result = sub_22F29449C(a1 + 640, &v5);
  *((_DWORD *)result + 2) = a2;
  return result;
}

_QWORD *sub_22F2D0CB4(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a3;
  result = sub_22F2D2BB8(a1 + 1600, &v5);
  *((_DWORD *)result + 2) = a2;
  return result;
}

uint64_t sub_22F2D0CEC(uint64_t a1, uint64_t a2)
{
  return sub_22E7E623C(a1 - 8, a2);
}

uint64_t sub_22F2D0CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6428(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E65AC(a1 - 8, a2, a3);
}

double sub_22F2D0D04(uint64_t a1, uint64_t a2)
{
  return sub_22E7E6730(a1 - 8, a2);
}

double sub_22F2D0D0C(uint64_t a1, uint64_t a2)
{
  return sub_22E7E67C0(a1 - 8, a2);
}

double sub_22F2D0D14(uint64_t a1, uint64_t a2)
{
  return sub_22E7E6850(a1 - 8, a2);
}

uint64_t sub_22F2D0D1C(uint64_t a1, unint64_t a2)
{
  return sub_22E7E68E0(a1 - 8, a2);
}

uint64_t sub_22F2D0D24(uint64_t a1, uint64_t a2)
{
  return sub_22E7E69E8(a1 - 8, a2);
}

BOOL sub_22F2D0D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6B14(a1 - 8, a2, a3);
}

double sub_22F2D0D34(uint64_t a1, uint64_t a2)
{
  return sub_22E7E6CEC(a1 - 8, a2);
}

uint64_t sub_22F2D0D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6D7C(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6E18(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6EB4(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6F48(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6FE4(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E7100(a1 - 8, a2, a3);
}

uint64_t sub_22F2D0D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E7180(a1 - 8, a2, a3);
}

_QWORD *sub_22F2D0D74(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2D0DD4((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D0E80(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F2D0DD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2D0E80(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 64;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_22E7EBD10((uint64_t)a1, v4);
  v8 = 0;
  sub_22F2D0DD4(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2D0F40(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 1032);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2D0DD4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2D1008(uint64_t *a1, uint64_t a2)
{
  const llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v4 = (const llvm::APInt *)(a2 + 40);
  v20 = *(_DWORD *)(a2 + 48);
  if (v20 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, v4);
  else
    v19 = *(_QWORD *)v4;
  sub_22E7EBE98(*a1, (uint64_t)&v19);
  if ((*(_BYTE *)(a2 + 19) & 2) != 0)
    v5 = *(_QWORD *)(a2 + 56);
  else
    v5 = 0;
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 32);
  if (v7 >= *(_DWORD *)(*a1 + 36))
  {
    v15 = *a1;
    v17 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v15;
    v5 = v17;
    v7 = *(_DWORD *)(v15 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 32);
  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v9 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    v16 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
    v18 = *(_QWORD *)(*a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v16;
    v10 = v18;
    v11 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  v12 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 7;
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
  ++*(_DWORD *)(v13 + 8);
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      return MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F2D119C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    v14 = *(_QWORD *)(a2 + 48);
    v16 = *a1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v14;
    v5 = v16;
    v6 = *(_DWORD *)(v16 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 60), *(_QWORD *)(*a1 + 16));
  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v8 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v15 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
    v17 = *(_QWORD *)(*a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v15;
    v9 = v17;
    v10 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = (v11 >> 19) & 7;
  ++*(_DWORD *)(v12 + 8);
  return result;
}

uint64_t sub_22F2D12E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  sub_22F2D20E0(*a1, (unint64_t *)(a2 + 56), *(unsigned int *)(a2 + 48));
  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v8 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = (v11 >> 19) & 7;
  ++*(_DWORD *)(v12 + 8);
  return result;
}

uint64_t sub_22F2D1404(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 52), *(_QWORD *)(*a1 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v8 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 22) & 7;
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = *(_QWORD *)(*a1 + 16);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = (v11 >> 19) & 7;
  ++*(_DWORD *)(v12 + 8);
  return result;
}

uint64_t sub_22F2D1538(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
  result = sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 40), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v8;
    v7 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5 >> 19;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22F2D15D4(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = (a2 >> 19) & 0x1FF;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F2D1634(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 32);
  if (v7 >= *(_DWORD *)(*a1 + 36))
  {
    v8 = v5;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v8;
    v7 = *(_DWORD *)(v6 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 32);
  return result;
}

uint64_t sub_22F2D16B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a2 + 24) >= 0x10uLL)
    v4 = *(_QWORD *)(a2 + 24);
  else
    v4 = 0;
  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), v4, *(_QWORD *)(*a1 + 16));
  v5 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 3;
  v6 = *(_QWORD *)(*a1 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v13 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 3;
    v14 = *(_QWORD *)(*a1 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v13;
    v6 = v14;
    v7 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 40), *(_QWORD *)(*a1 + 16));
  result = sub_22E7EC000(*a1, (__int128 *)(a2 + 48), *(unsigned int *)(a2 + 20));
  if (*(_QWORD *)(a2 + 24) > 0xFuLL)
  {
    v10 = 0;
  }
  else
  {
    v9 = *(unsigned int *)(a2 + 16);
    if ((v9 & 0x100) != 0)
      v10 = 2;
    else
      v10 = (v9 >> 10) & 1;
  }
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  return result;
}

uint64_t sub_22F2D17D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  return sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
}

uint64_t sub_22F2D1858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    v11 = *(_QWORD *)(a2 + 40);
    v13 = *a1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v11;
    v5 = v13;
    v6 = *(_DWORD *)(v13 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  v7 = *(unsigned int *)(a2 + 56);
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v12 = *(unsigned int *)(a2 + 56);
    v14 = *(_QWORD *)(*a1 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v12;
    v8 = v14;
    v9 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  return sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 60), *(_QWORD *)(*a1 + 16));
}

uint64_t sub_22F2D1938(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(_QWORD *)(*a1 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = (v4 >> 19);
  ++*(_DWORD *)(v5 + 8);
  sub_22E7EC7EC(*a1, *(_QWORD *)(a2 + 32));
  sub_22E7CA0D0(*(_DWORD **)(*a1 + 8), *(_QWORD *)(a2 + 40), *(_QWORD *)(*a1 + 16));
  return sub_22E7EC000(*a1, (__int128 *)(a2 + 48), *(unsigned int *)(a2 + 20));
}

uint64_t sub_22F2D19D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;

  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 40), *(_QWORD *)(*a1 + 16));
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  result = sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
  v8 = *(unsigned int *)(a2 + 16);
  v9 = *(_QWORD *)(*a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = (v8 >> 19) & 0xF;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

uint64_t sub_22F2D1AAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 32);
  if (v9 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 32);
  sub_22F2D20E0(*a1, (unint64_t *)(a2 + 72), *(unsigned __int16 *)(a2 + 22));
  return sub_22F2D20E0(*a1, (unint64_t *)(a2 + 72 + (((unint64_t)*(unsigned int *)(a2 + 20) >> 13) & 0x7FFF8)), (unsigned __int16)*(_DWORD *)(a2 + 20));
}

uint64_t sub_22F2D1B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(unsigned int *)(a2 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 44);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  return sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
}

uint64_t sub_22F2D1C5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (v6 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 32);
  if (v9 >= *(_DWORD *)(*a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 32);
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 64), *(_QWORD *)(*a1 + 16));
  return sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
}

void sub_22F2D1D28(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(*a1 + 16));
  sub_22F40A854(a2, (uint64_t)&v7);
  v4 = *a1;
  v5 = v7;
  v6 = v8;
  sub_22E7EC0BC(v4, (unsigned int *)&v5);
}

uint64_t sub_22F2D1D8C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 32);
  if (v4 >= *(_DWORD *)(result + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 32);
  return result;
}

uint64_t sub_22F2D1DE8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 24), *(_QWORD *)(*(_QWORD *)a1 + 16));
  result = sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v5 = *(unsigned int *)(a2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v8;
    v7 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22F2D1E80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  sub_22E7CA8EC(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v4 = sub_22F40A754(a2);
  return sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), v4, *(_QWORD *)(*(_QWORD *)a1 + 16));
}

uint64_t sub_22F2D1EC4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22E7E1FB4(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 32);
  if (v7 >= *(_DWORD *)(*a1 + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 32);
  return result;
}

uint64_t sub_22F2D1F40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;

  result = sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(unsigned int *)(a2 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = (v8 >> 19) & 0xF;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

uint64_t sub_22F2D200C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_22E7E1FB4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 32), *(_QWORD *)(*(_QWORD *)a1 + 16));
  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v11 = *(unsigned int *)(a2 + 20);
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v11;
    v6 = v12;
    v7 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(unsigned int *)(a2 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = (v8 >> 19) & 0xF;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

uint64_t sub_22F2D20E0(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a3;
  ++*(_DWORD *)(v6 + 8);
  if (a3)
  {
    v8 = 8 * a3;
    do
    {
      v9 = *a2++;
      result = sub_22E7EBF8C(v5, v9);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22F2D216C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12))
  {
    v5 = a2;
    v6 = *(_QWORD *)(result + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v5;
    v2 = v6;
    v3 = *(_DWORD *)(v6 + 8);
  }
  v4 = (a2 + 1);
  if ((a2 & 0xFF00000000) == 0)
    v4 = 0;
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = v4;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_22F2D21DC(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a3;
  ++*(_DWORD *)(v6 + 8);
  if (a3)
  {
    v8 = 8 * a3;
    do
    {
      v9 = *a2++;
      result = sub_22E7CA8EC(*(_QWORD *)(v5 + 8), v9, *(_QWORD *)(v5 + 16));
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22F2D2268(uint64_t result, unsigned __int8 a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

_QWORD *sub_22F2D22C8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7ED0F8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D2328((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_22F2D2328(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E7ED194(a1, v7);
  v9 = 0;
  sub_22E7ED0F8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2D23D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E7ED0F8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_DWORD *sub_22F2D2484(uint64_t a1, unsigned int *a2)
{
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v7 = v3 - 1;
    v8 = (37 * *a2) & (v3 - 1);
    v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v8);
    v9 = *v5;
    if (*a2 == *v5)
      return v5;
    v10 = 0;
    v11 = 1;
    while (v9 != 0x7FFFFFFF)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == 0x80000000;
      if (v12)
        v10 = v5;
      v13 = v8 + v11++;
      v8 = v13 & v7;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v7));
      v9 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    if (v10)
      v4 = v10;
    else
      v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  v5 = sub_22F2D253C(a1, a2, v4);
  *(_QWORD *)v5 = *a2;
  return v5;
}

_DWORD *sub_22F2D253C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_22E7ED330(a1, v6);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = (37 * *a2) & v15;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v16);
      v17 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v18 = 1;
      while (v17 != 0x7FFFFFFF)
      {
        if (v12)
          v19 = 0;
        else
          v19 = v17 == 0x80000000;
        if (v19)
          v12 = a3;
        v20 = v16 + v18++;
        v16 = v20 & v15;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v16);
        v17 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_22E7ED330(a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != 0x7FFFFFFF)
  {
    if (v12)
      v21 = 0;
    else
      v21 = v11 == 0x80000000;
    if (v21)
      v12 = a3;
    v22 = v10 + v13++;
    v10 = v22 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 8 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_10:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2D26D0(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = 0x7FFFFFFF;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != 0x7FFFFFFF)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == 0x80000000;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

_DWORD *sub_22F2D27B0(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = (37 * *a3) & (v8 - 1);
    result = (_DWORD *)(*(_QWORD *)a2 + 8 * v10);
    v12 = *result;
    if (*a3 == *result)
    {
LABEL_17:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != 0x7FFFFFFF)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == 0x80000000;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 8 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_17;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_22F2D253C(a2, a3, v15);
  *result = *a3;
  result[1] = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 8 * v8;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

_DWORD *sub_22F2D289C(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    v8 = 0;
LABEL_10:
    v5 = sub_22F2D253C(a1, a2, v8);
    *(_QWORD *)v5 = *a2;
    return v5;
  }
  v3 = v2 - 1;
  v4 = (37 * *a2) & (v2 - 1);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v4);
  v6 = *v5;
  if (*a2 != *v5)
  {
    v9 = 0;
    v10 = 1;
    while (v6 != 0x7FFFFFFF)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v6 == 0x80000000;
      if (v12)
        v9 = v5;
      v13 = v4 + v10++;
      v4 = v13 & v3;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v3));
      v6 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    if (v9)
      v8 = v9;
    else
      v8 = v5;
    goto LABEL_10;
  }
  return v5;
}

_QWORD *sub_22F2D2954(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2D29BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D2A50(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F2D29BC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v6 = a2 - 1;
    v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v7);
    v8 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v4;
        v13 = v7 + v10++;
        v7 = v13 & v6;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v6));
        v8 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_8;
      }
      v5 = 0;
      if (v9)
        v4 = v9;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_8:
  *a4 = v4;
  return v5;
}

_QWORD *sub_22F2D2A50(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22E7EDF6C(a1, v6);
    v8 = 0;
    sub_22F2D29BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2D2B04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F2D29BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F2D2BB8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7EE148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D2C20(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_22F2D2C20(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7EE1DC(a1, v6);
  v8 = 0;
  sub_22E7EE148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2D2CD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7EE148(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_22F2D2D80(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 2;
      if (v14 >> 61)
        sub_22E3B3F8C();
      v15 = (char *)operator new(8 * v14);
      v16 = &v15[8 * (v14 >> 2)];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v15[8 * (v14 >> 2)];
        do
        {
          v21 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-8 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[8 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v11[v12];
    }
  }
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) += 8;
}

void sub_22F2D2EA4(void **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - (_BYTE *)v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      if (v15 >> 61)
        sub_22E3B3F8C();
      v16 = (char *)operator new(8 * v15);
      v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      v17 = v5;
      v18 = v7 - (_BYTE *)v4;
      if (v7 != (_BYTE *)v4)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        v21 = v4;
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - (_BYTE *)v4)];
      if (v7 != (_BYTE *)v4)
      {
        memmove(&v11[-(v7 - (_BYTE *)v4)], v4, v7 - (_BYTE *)v4);
        v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_QWORD *sub_22F2D2FD0(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 16;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_22E7EFA24((uint64_t)a1, v5);
  v9 = 0;
  sub_22E7EF974(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22F2D308C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E7EF974((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F2D3148(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_22F2D3164@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2BDD74((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2BDE34(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F2D31F4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D3258((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_22F2D3258(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7F07E0(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2D3304(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F246C54((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t *sub_22F2D33B8(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v6 + v7 - 32) = v6 + v7 - 16;
      result = (uint64_t *)(v6 + v7 - 32);
      *(result - 1) = v8;
      result[1] = 0x100000000;
      if (*(_DWORD *)(v4 + v7 - 24))
        result = (uint64_t *)sub_22E78F7E0((uint64_t)result, (const void **)(v4 + v7 - 32));
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_22F2D3484(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E7EE148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D2C20(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_DWORD *sub_22F2D34F0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_22E7F1D18(a1, v6);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = *a2 & v15;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v16);
      v17 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v18 = 1;
      while (v17)
      {
        if (v12)
          v19 = 0;
        else
          v19 = v17 == -1;
        if (v19)
          v12 = a3;
        v20 = v16 + v18++;
        v16 = v20 & v15;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v16);
        v17 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_22E7F1D18(a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = v8 - 1;
  v10 = *a2 & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11)
  {
    if (v12)
      v21 = 0;
    else
      v21 = v11 == -1;
    if (v21)
      v12 = a3;
    v22 = v10 + v13++;
    v10 = v22 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_10:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2D365C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5);
  }
  v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v3 + 8);
  }
  if (v2)
  {
    v7 = (unint64_t *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7++ = v2;
      v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v2);
  }
  *(_DWORD *)(v3 + 8) = v6 + v4;
  return result;
}

uint64_t sub_22F2D36E8(uint64_t a1, unint64_t a2)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;

  v4 = (char *)(a2 + 40);
  v5 = strlen((const char *)(a2 + 40));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  sub_22E7F4DC8((uint64_t *)a1, a2);
  v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), v8, *(_QWORD *)(a1 + 32));
  v9 = *(unsigned int *)(a2 + 36);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  result = sub_22E7BE5A4(*(_QWORD *)(a1 + 24), v4, v5, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 133;
  return result;
}

uint64_t sub_22F2D37EC(uint64_t a1, unint64_t a2)
{
  char *v4;
  size_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t result;

  v4 = (char *)(a2 + 48);
  v5 = strlen((const char *)(a2 + 48));
  v6 = &v4[*(_QWORD *)(a2 + 40)];
  v7 = strlen(v6);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v5 + v7 + 1;
  ++*(_DWORD *)(v8 + 8);
  sub_22E7F4DC8((uint64_t *)a1, a2);
  v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), v10, *(_QWORD *)(a1 + 32));
  sub_22E7BE5A4(*(_QWORD *)(a1 + 24), v4, v5, *(_QWORD *)(a1 + 32));
  result = sub_22E7BE5A4(*(_QWORD *)(a1 + 24), v6, v7, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 134;
  return result;
}

uint64_t sub_22F2D38E0(uint64_t a1, unint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 56) != 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v10 = *(_QWORD *)(a2 + 56) != 0;
    v11 = *(_QWORD *)(a1 + 32);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v10;
    v5 = v11;
    v6 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 56);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 48);
    if (v8 >= *(_DWORD *)(a1 + 52))
    {
      v12 = *(_QWORD *)(a2 + 56);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v12;
      v8 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8) = v7;
    ++*(_DWORD *)(a1 + 48);
  }
  result = sub_22E7EC27C(a1 + 16, a2 + 64);
  *(_DWORD *)(a1 + 232) = 55;
  return result;
}

uint64_t sub_22F2D39CC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  sub_22E7F7774(a2[21], a1 + 16);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), a2[20], *(_QWORD *)(a1 + 32));
  result = sub_22E7F664C(a1, a2);
  v5 = a2[10];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = (v5 >> 37) & 1;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 232) = 96;
  return result;
}

unint64_t sub_22F2D3A68(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int *v64;
  int v65;
  unint64_t result;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;

  sub_22E7F54E0((uint64_t *)a1, a2);
  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4 != 0;
  ++*(_DWORD *)(v5 + 8);
  if (v4)
  {
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
    v8 = *(_DWORD *)(a1 + 48);
    if (v8 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8) = v7;
    ++*(_DWORD *)(a1 + 48);
  }
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 120), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 128), *(_QWORD *)(a1 + 32));
  v9 = (*(_QWORD *)(a2 + 56) >> 17) & 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  v12 = (*(_QWORD *)(a2 + 56) >> 18) & 1;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
  ++*(_DWORD *)(v13 + 8);
  v15 = (*(_QWORD *)(a2 + 56) >> 19) & 1;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  v18 = (*(_QWORD *)(a2 + 56) >> 20) & 1;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
  ++*(_DWORD *)(v19 + 8);
  v21 = (*(_QWORD *)(a2 + 56) >> 21) & 1;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(v22 + 8);
  if (v23 >= *(_DWORD *)(v22 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(v22 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v21;
  ++*(_DWORD *)(v22 + 8);
  v24 = (*(_QWORD *)(a2 + 56) >> 36) & 1;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_DWORD *)(v25 + 8);
  if (v26 >= *(_DWORD *)(v25 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(v25 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = v24;
  ++*(_DWORD *)(v25 + 8);
  v27 = (*(_QWORD *)(a2 + 56) >> 37) & 1;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_DWORD *)(v28 + 8);
  if (v29 >= *(_DWORD *)(v28 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(v28 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v27;
  ++*(_DWORD *)(v28 + 8);
  v30 = (*(_QWORD *)(a2 + 56) >> 22) & 1;
  v31 = *(_QWORD *)(a1 + 32);
  v32 = *(_DWORD *)(v31 + 8);
  if (v32 >= *(_DWORD *)(v31 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(v31 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v31 + 8 * v32) = v30;
  ++*(_DWORD *)(v31 + 8);
  v33 = (*(_QWORD *)(a2 + 56) >> 23) & 1;
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_DWORD *)(v34 + 8);
  if (v35 >= *(_DWORD *)(v34 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v35 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v33;
  ++*(_DWORD *)(v34 + 8);
  v36 = *(_QWORD *)(a2 + 56);
  if ((v36 & 0x800000) != 0)
  {
    v37 = sub_22F368D0C(*(_QWORD *)(a1 + 8), a2);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v37, *(_QWORD *)(a1 + 32));
    v36 = *(_QWORD *)(a2 + 56);
  }
  v38 = (v36 >> 24) & 3;
  v39 = *(_QWORD *)(a1 + 32);
  v40 = *(_DWORD *)(v39 + 8);
  if (v40 >= *(_DWORD *)(v39 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(v39 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v39 + 8 * v40) = v38;
  ++*(_DWORD *)(v39 + 8);
  v41 = (*(_QWORD *)(a2 + 56) >> 26) & 0x7FLL;
  v42 = *(_QWORD *)(a1 + 32);
  v43 = *(_DWORD *)(v42 + 8);
  if (v43 >= *(_DWORD *)(v42 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = *(_DWORD *)(v42 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v42 + 8 * v43) = v41;
  ++*(_DWORD *)(v42 + 8);
  v44 = (*(_QWORD *)(a2 + 56) >> 33) & 1;
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(_DWORD *)(v45 + 8);
  if (v46 >= *(_DWORD *)(v45 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(v45 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v45 + 8 * v46) = v44;
  ++*(_DWORD *)(v45 + 8);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 80), *(_QWORD *)(a1 + 32));
  sub_22E7D2E84(a1 + 16, *(unint64_t **)(a2 + 88));
  sub_22F3B55DC(a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), v47, *(_QWORD *)(a1 + 32));
  v48 = *(unsigned int *)(a2 + 104);
  v49 = *(_QWORD *)(a1 + 32);
  v50 = *(_DWORD *)(v49 + 8);
  if (v50 >= *(_DWORD *)(v49 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = *(_DWORD *)(v49 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v49 + 8 * v50) = v48;
  ++*(_DWORD *)(v49 + 8);
  v51 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v51)
  {
    v52 = *(unint64_t **)(a2 + 96);
    v53 = 8 * v51;
    do
    {
      v54 = *v52++;
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v54, *(_QWORD *)(a1 + 32));
      v53 -= 8;
    }
    while (v53);
  }
  v55 = (*(_QWORD *)(a2 + 56) >> 34) & 3;
  v56 = *(_QWORD *)(a1 + 32);
  v57 = *(_DWORD *)(v56 + 8);
  if (v57 >= *(_DWORD *)(v56 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v57 = *(_DWORD *)(v56 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v56 + 8 * v57) = v55;
  ++*(_DWORD *)(v56 + 8);
  if ((*(_BYTE *)(a2 + 60) & 0xC) != 0 || (*(_BYTE *)(a2 + 29) & 2) != 0)
  {
    v58 = 0;
  }
  else
  {
    v70 = *(_QWORD *)(a2 + 40);
    if ((v70 & 7) == 1)
      v58 = 1;
    else
      v58 = sub_22F41F2D4(&v70);
  }
  v59 = *(_QWORD *)(a2 + 96);
  v60 = *(unsigned int *)(a2 + 104);
  v61 = v58;
  v62 = *(_QWORD *)(a1 + 32);
  v63 = *(_DWORD *)(v62 + 8);
  if (v63 >= *(_DWORD *)(v62 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v63 = *(_DWORD *)(v62 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v62 + 8 * v63) = v61;
  ++*(_DWORD *)(v62 + 8);
  if ((_DWORD)v61)
  {
    v64 = (int *)(v59 + 8 * v60);
    do
    {
      v65 = *v64++;
      sub_22E7C9A94(*(_QWORD *)(a1 + 24), v65, *(_QWORD *)(a1 + 32));
      --v61;
    }
    while (v61);
  }
  result = sub_22F3B5854(a2);
  v67 = result;
  v68 = *(_QWORD *)(a1 + 32);
  v69 = *(_DWORD *)(v68 + 8);
  if (v69 >= *(_DWORD *)(v68 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v69 = *(_DWORD *)(v68 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v68 + 8 * v69) = v67;
  ++*(_DWORD *)(v68 + 8);
  *(_DWORD *)(a1 + 232) = 57;
  return result;
}

uint64_t sub_22F2D40CC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;

  sub_22E7F55B0(a1, a2);
  v4 = (unint64_t)*(unsigned __int16 *)(a2 + 88) >> 14;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_WORD *)(a2 + 88);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7 & 0x3FFF;
  ++*(_DWORD *)(v8 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 92), *(_QWORD *)(a1 + 32));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 96), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 131;
  return result;
}

uint64_t sub_22F2D41A8(uint64_t *a1, unint64_t a2)
{
  sub_22E7F54E0(a1, a2);
  sub_22E7C9A94(a1[3], *(_DWORD *)(a2 + 60), a1[4]);
  return sub_22E7CA8AC(a1[3], *(_QWORD *)(a2 + 80), a1[4]);
}

unint64_t sub_22F2D41E0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t *v7;
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;

  v42 = a2;
  if (a2)
    v4 = a2 + 11;
  else
    v4 = 0;
  sub_22E7F7824(a1, v4);
  sub_22F2D41A8((uint64_t *)a1, (unint64_t)a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), a2[13] & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a1 + 32));
  result = sub_22F2D4540(a1, a2[14]);
  v6 = a2[15];
  if (!v6)
  {
    result = sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v6 = a2[15];
  }
  if (v6 < 8)
    v7 = 0;
  else
    v7 = *(uint64_t **)(v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v7 == a2;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = a2[15];
  if (!v11)
  {
    result = sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v11 = a2[15];
  }
  if (v11 < 8)
    v12 = 0;
  else
    v12 = *(uint64_t **)(v11 & 0xFFFFFFFFFFFFFFF8);
  if (v12 == a2)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFF8;
    v14 = (unint64_t *)sub_22F259044((unint64_t)a2);
    sub_22E7D2E84(a1 + 16, v14);
    v15 = a2[15];
    if (!v15)
    {
      sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
      v15 = a2[15];
    }
    if (v15 <= 7)
      v16 = (int *)(a2 + 3);
    else
      v16 = (int *)((v15 & 0xFFFFFFFFFFFFFFF8) + 80);
    sub_22E7C9A94(*(_QWORD *)(a1 + 24), *v16, *(_QWORD *)(a1 + 32));
    v17 = ((unint64_t)*(unsigned __int8 *)(v13 + 72) >> 2) & 1;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_DWORD *)(v18 + 8);
    if (v19 >= *(_DWORD *)(v18 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(v18 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
    ++*(_DWORD *)(v18 + 8);
    v20 = sub_22F3B4F18((uint64_t)a2);
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_DWORD *)(v21 + 8);
    if (v22 >= *(_DWORD *)(v21 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = *(_DWORD *)(v21 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v20;
    ++*(_DWORD *)(v21 + 8);
    v23 = *(unsigned int *)(v13 + 24);
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(_DWORD *)(v24 + 8);
    if (v25 >= *(_DWORD *)(v24 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(v24 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
    ++*(_DWORD *)(v24 + 8);
    v26 = (unint64_t *)sub_22F2590A8((unint64_t)a2);
    v27 = sub_22F25910C((unint64_t)a2);
    if (v26 != (unint64_t *)v27)
    {
      v28 = (unint64_t *)v27;
      do
      {
        v29 = *v26++;
        sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v29, *(_QWORD *)(a1 + 32));
      }
      while (v26 != v28);
    }
    v30 = (int *)sub_22F259178((unint64_t)a2);
    v31 = sub_22F2591DC((unint64_t)a2);
    if (v30 != (int *)v31)
    {
      v32 = (int *)v31;
      do
      {
        v33 = *v30++;
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), v33, *(_QWORD *)(a1 + 32));
      }
      while (v30 != v32);
    }
    v34 = *(unsigned int *)(v13 + 48);
    v35 = *(_QWORD *)(a1 + 32);
    v36 = *(_DWORD *)(v35 + 8);
    if (v36 >= *(_DWORD *)(v35 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = *(_DWORD *)(v35 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v35 + 8 * v36) = v34;
    ++*(_DWORD *)(v35 + 8);
    v37 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v37)
    {
      v38 = *(unint64_t **)(v13 + 40);
      v39 = 8 * v37;
      do
      {
        v40 = *v38++;
        sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v40, *(_QWORD *)(a1 + 32));
        v39 -= 8;
      }
      while (v39);
    }
    result = sub_22F257E10((unint64_t)a2);
    if (result)
    {
      v41 = result;
      sub_22E77A874((_QWORD *)(*(_QWORD *)a1 + 1344), &v42);
      do
      {
        result = sub_22E7CA3E8(*(_QWORD *)a1, v41);
        v41 = *(_QWORD *)(v41 + 128);
      }
      while (v41);
    }
  }
  *(_DWORD *)(a1 + 232) = 58;
  return result;
}

uint64_t sub_22F2D4540(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v2 = result;
  if (a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(_QWORD *)(result + 32);
    v6 = *(_DWORD *)(v5 + 8);
    if (v6 >= *(_DWORD *)(v5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(v5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
    ++*(_DWORD *)(v5 + 8);
    v7 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v7)
    {
      v8 = (unint64_t *)(a2 + 16);
      v9 = 8 * v7;
      do
      {
        v10 = *v8++;
        sub_22E7CA8EC(*(_QWORD *)(v2 + 24), v10, *(_QWORD *)(v2 + 32));
        v9 -= 8;
      }
      while (v9);
    }
    sub_22E7C9A94(*(_QWORD *)(v2 + 24), *(_DWORD *)a2, *(_QWORD *)(v2 + 32));
    return sub_22E7C9A94(*(_QWORD *)(v2 + 24), *(_DWORD *)(a2 + 4), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v11 = *(_QWORD *)(result + 32);
    v12 = *(_DWORD *)(v11 + 8);
    if (v12 >= *(_DWORD *)(v11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = 0;
    ++*(_DWORD *)(v11 + 8);
  }
  return result;
}

unint64_t sub_22F2D4638(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  if (a2)
    v4 = (uint64_t *)(a2 + 88);
  else
    v4 = 0;
  sub_22E7F7824(a1, v4);
  result = sub_22F2D41A8((uint64_t *)a1, a2);
  v6 = *(_QWORD *)(a2 + 104);
  if (!v6)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
    v6 = *(_QWORD *)(a2 + 104);
  }
  if (v6 < 8)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v7 == a2;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(_QWORD *)(a2 + 104);
  if (!v11)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
    v11 = *(_QWORD *)(a2 + 104);
  }
  if (v11 < 8)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if (v12 == a2)
  {
    if (!v11)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
      v11 = *(_QWORD *)(a2 + 104);
    }
    if (v11 < 8)
      v13 = 0;
    else
      v13 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_DWORD *)(v14 + 8);
    if (v15 >= *(_DWORD *)(v14 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(v14 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
    ++*(_DWORD *)(v14 + 8);
    v16 = sub_22F259248(a2);
    if ((unint64_t *)v16 != v17)
    {
      v18 = (unint64_t *)v16;
      v19 = v17;
      do
      {
        v20 = *v18++;
        sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v20, *(_QWORD *)(a1 + 32));
      }
      while (v18 != v19);
    }
    v21 = sub_22F2592CC(a2);
    if ((int *)v21 != v22)
    {
      v23 = (int *)v21;
      v24 = v22;
      do
      {
        v25 = *v23++;
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), v25, *(_QWORD *)(a1 + 32));
      }
      while (v23 != v24);
    }
    result = sub_22F3B64A8(a2);
    v26 = result;
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(_DWORD *)(v27 + 8);
    if (v28 >= *(_DWORD *)(v27 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = *(_DWORD *)(v27 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = v26;
    ++*(_DWORD *)(v27 + 8);
  }
  *(_DWORD *)(a1 + 232) = 59;
  return result;
}

unint64_t sub_22F2D4848(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;

  if (a2)
    v4 = (uint64_t *)(a2 + 88);
  else
    v4 = 0;
  sub_22E7F7824(a1, v4);
  sub_22F2D41A8((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 136), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 140), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 144), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 104), *(_QWORD *)(a1 + 32));
  sub_22F2D4540(a1, *(_QWORD *)(a2 + 112));
  result = sub_22F3B68F4(a2);
  v6 = result;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  v9 = *(unsigned int *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  v12 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned int *)(v12 + 24);
  if ((_DWORD)v13)
  {
    v14 = *(unint64_t **)(v12 + 16);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v16, *(_QWORD *)(a1 + 32));
      v15 -= 8;
    }
    while (v15);
    v17 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(unsigned int *)(v17 + 24);
    if ((_DWORD)v18)
    {
      v19 = *(int **)(v17 + 32);
      v20 = 4 * v18;
      do
      {
        v21 = *v19++;
        result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), v21, *(_QWORD *)(a1 + 32));
        v20 -= 4;
      }
      while (v20);
    }
  }
  *(_DWORD *)(a1 + 232) = 62;
  return result;
}

uint64_t sub_22F2D49C0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 60), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 65;
  return result;
}

uint64_t sub_22F2D4A10(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 52), *(_QWORD *)(a1 + 32));
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  sub_22E7D2E84(a1 + 16, *(unint64_t **)(a2 + 64));
  v4 = *(_DWORD *)(a2 + 72) & 0x1FFFF;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a2 + 76) & 0x1FFFF;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(unsigned int *)(a2 + 76);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = (v10 >> 17) & 3;
  ++*(_DWORD *)(v11 + 8);
  sub_22E7EC5E4(a1 + 16, *(_QWORD *)(a2 + 80));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 96), *(_QWORD *)(a1 + 32));
  sub_22E7EC5E4(a1 + 16, *(_QWORD *)(a2 + 88));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 100), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 104), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 112), *(_QWORD *)(a1 + 32));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 120), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 66;
  return result;
}

uint64_t sub_22F2D4BAC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_22F2D41A8((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 88), *(_QWORD *)(a1 + 32));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 96), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 63;
  return result;
}

uint64_t sub_22F2D4BF0(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD **v14;
  unint64_t v15;

  sub_22F2D41A8((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 88), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 96), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 104), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 108), *(_QWORD *)(a1 + 32));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 112), *(_QWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a2 + 132) & 1;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = ((unint64_t)*(unsigned __int8 *)(a2 + 132) >> 1) & 1;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(unsigned int *)(a2 + 128);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  if (*(_DWORD *)(a2 + 128))
  {
    v14 = (_QWORD **)sub_22F3B6E50(a2);
    v15 = sub_22F3B6E50(a2);
    result = sub_22E7E5758(a1 + 16, v14, (uint64_t)(v15 + 8 * *(unsigned int *)(a2 + 128) - (_QWORD)v14) >> 3);
  }
  *(_DWORD *)(a1 + 232) = 64;
  return result;
}

uint64_t sub_22F2D4D70(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 64), *(_QWORD *)(a1 + 32));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 72), *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= *(_DWORD *)(a1 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 52);
  v8 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8) = v9;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 232) = 67;
  return result;
}

_DWORD *sub_22F2D4E6C(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  sub_22E7F6524(a1, a2);
  sub_22E7CA0D0(*(_DWORD **)(a1 + 24), *(_QWORD *)(a2 + 72), *(_QWORD *)(a1 + 32));
  result = sub_22E7CA0D0(*(_DWORD **)(a1 + 24), *(_QWORD *)(a2 + 80), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 69;
  return result;
}

uint64_t sub_22F2D4EB0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  __int128 v11;
  unsigned __int8 v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v11 = *(_OWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v11;
  ++*(_DWORD *)(v4 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = WORD2(v11);
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = WORD3(v11);
  ++*(_DWORD *)(v8 + 8);
  result = sub_22E7BE524(*(_QWORD *)(a1 + 32), (unsigned __int8 *)&v11 + 8, v12);
  *(_DWORD *)(a1 + 232) = 70;
  return result;
}

uint64_t sub_22F2D5010(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  sub_22E7F54E0((uint64_t *)a1, a2);
  result = sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v8)
  {
    v9 = *(unint64_t **)(a2 + 56);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
      v10 -= 8;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 232) = 120;
  return result;
}

uint64_t sub_22F2D50B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(unsigned int *)(a2 + 100);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7F7E3C(a1, a2);
  v8 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v8)
  {
    v9 = (unint64_t *)(a2 + 104);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
      v10 -= 8;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 232) = 75;
  return result;
}

uint64_t sub_22F2D515C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7F54E0((uint64_t *)a1, a2);
  result = sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= *(_DWORD *)(a1 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 232) = 76;
  return result;
}

uint64_t sub_22F2D51D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 48);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 77;
  return result;
}

void sub_22F2D5254(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a2 + 64) != 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  v9 = *(unsigned int **)(a2 + 64);
  if (v9)
    sub_22E7FC024(a1 + 16, v9);
  v10 = *(unsigned int *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  *(_DWORD *)(a1 + 232) = 129;
}

uint64_t sub_22F2D5374(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 48);
  result = sub_22E7D2E84(a1 + 16, *(unint64_t **)(a2 + 96));
  v7 = *(unsigned int *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v10)
  {
    v11 = *(unint64_t **)(a2 + 72);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v13, *(_QWORD *)(a1 + 32));
      v12 -= 8;
    }
    while (v12);
  }
  v14 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 13) & 1;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v15 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
  ++*(_DWORD *)(v15 + 8);
  v17 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 15) & 1;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 16) & 1;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 >= *(_DWORD *)(v21 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(v21 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v20;
  ++*(_DWORD *)(v21 + 8);
  v23 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 17) & 1;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
  ++*(_DWORD *)(v24 + 8);
  v26 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 18) & 1;
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_DWORD *)(v27 + 8);
  if (v28 >= *(_DWORD *)(v27 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(v27 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = v26;
  ++*(_DWORD *)(v27 + 8);
  v29 = ((unint64_t)*(unsigned int *)(a2 + 48) >> 14) & 1;
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_DWORD *)(v30 + 8);
  if (v31 >= *(_DWORD *)(v30 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(v30 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v30 + 8 * v31) = v29;
  ++*(_DWORD *)(v30 + 8);
  v32 = *(unsigned int *)(a2 + 112);
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(_DWORD *)(v33 + 8);
  if (v34 >= *(_DWORD *)(v33 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(v33 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v33 + 8 * v34) = v32;
  ++*(_DWORD *)(v33 + 8);
  v35 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD **)(a2 + 104);
    v37 = &v36[2 * v35];
    do
    {
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *v36 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
      v38 = (*(_DWORD *)v36 >> 1) & 3;
      if (v36[1])
        v39 = v38 | 4;
      else
        v39 = v38;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(unsigned int *)(v40 + 8);
      if (v41 >= *(unsigned int *)(v40 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(v40 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v40 + 8 * v41) = v39;
      ++*(_DWORD *)(v40 + 8);
      v42 = v36[1];
      if (v42)
      {
        v43 = *(unsigned int *)(a1 + 48);
        if (v43 >= *(unsigned int *)(a1 + 52))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v43 = *(unsigned int *)(a1 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v43) = v42;
        ++*(_DWORD *)(a1 + 48);
      }
      v36 += 2;
    }
    while (v36 != v37);
  }
  *(_DWORD *)(a1 + 232) = 78;
  return result;
}

uint64_t sub_22F2D573C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v4 = *(unsigned int *)(a2 + 72);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7F4DC8((uint64_t *)a1, a2);
  v7 = *(unsigned int *)(a2 + 76);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  result = sub_22F3AD7FC(a2);
  v11 = result;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  if (*(_DWORD *)(a2 + 72))
  {
    v14 = 0;
    do
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 88 + 8 * v14++), *(_QWORD *)(a1 + 32));
    while (v14 < *(unsigned int *)(a2 + 72));
  }
  *(_DWORD *)(a1 + 232) = 79;
  return result;
}

uint64_t sub_22F2D5878(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v4;
  BOOL v5;
  uint64_t result;

  v2 = a2;
  if (a2)
    v4 = (uint64_t *)(a2 + 48);
  else
    v4 = 0;
  sub_22E7F8D1C(a1, v4);
  sub_22E7F54E0((uint64_t *)a1, v2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v2 + 64), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v2 + 68), *(_QWORD *)(a1 + 32));
  sub_22E7E3E60(a1 + 16, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
  do
  {
    v2 = *(_QWORD *)(v2 + 88);
    if (v2)
      v5 = (*(_DWORD *)(v2 + 28) & 0x7F) == 17;
    else
      v5 = 0;
  }
  while (v5);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v2, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 84;
  return result;
}

uint64_t sub_22F2D5910(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  sub_22E7E3E60(a1 + 16, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  sub_22E7E5008(a1 + 16, a2 + 80, *(_QWORD *)(a2 + 40));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = (v4 >> 2) & 1;
  ++*(_DWORD *)(v5 + 8);
  v7 = sub_22F3684DC(*(_QWORD *)(a1 + 8), a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v7, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 85;
  return result;
}

uint64_t sub_22F2D59E0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 60), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 64), *(_QWORD *)(a1 + 32));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
  v4 = sub_22F368574(*(_QWORD *)(a1 + 8), a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 86;
  return result;
}

uint64_t sub_22F2D5A58(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(unsigned int *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7F54E0((uint64_t *)a1, a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v8 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v8)
  {
    v9 = (unint64_t *)(a2 + 64);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
      v10 -= 8;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 232) = 87;
  return result;
}

uint64_t sub_22F2D5B08(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  if (a2)
    v4 = (uint64_t *)(a2 + 48);
  else
    v4 = 0;
  sub_22E7F8D1C(a1, v4);
  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 64), *(_QWORD *)(a1 + 32));
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = (v5 >> 16) & 0x3FFF;
  ++*(_DWORD *)(v6 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 72), *(_QWORD *)(a1 + 32));
  v8 = sub_22F368610(*(_QWORD *)(a1 + 8), a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v8, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 88;
  return result;
}

uint64_t sub_22F2D5BCC(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  unsigned int v7;

  sub_22F2D5B08(a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 80), *(_QWORD *)(a1 + 32));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 88), *(_QWORD *)(a1 + 32));
  v5 = *(_BYTE *)(a2 + 96);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5 & 1;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 232) = 89;
  return result;
}

uint64_t sub_22F2D5C60(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 52), *(_QWORD *)(a1 + 32));
  sub_22E7E3E60(a1 + 16, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  v4 = sub_22EFD8BB4(a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 32));
  v5 = sub_22EFCAD5C(*(_QWORD *)(a2 + 80));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 90;
  return result;
}

uint64_t sub_22F2D5CE4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  sub_22E7E3E60(a1 + 16, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  sub_22E7E5008(a1 + 16, a2 + 80, *(_QWORD *)(a2 + 40));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 60), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 91;
  return result;
}

uint64_t sub_22F2D5D5C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_22E7F5574((uint64_t *)a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 60), *(_QWORD *)(a1 + 32));
  sub_22E7E3E60(a1 + 16, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 64), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 92;
  return result;
}

uint64_t sub_22F2D5DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;

  sub_22E7F9290(a1, a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(v4 + 160), *(_QWORD *)(a1 + 32));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (*(_QWORD *)(result + 160))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v6 = *(_QWORD *)(result + 168);
    v7 = *(_DWORD *)(a1 + 48);
    if (v7 >= *(_DWORD *)(a1 + 52))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 232) = 99;
  return result;
}

uint64_t sub_22F2D5E6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_22E7F4DC8((uint64_t *)a1, (unint64_t)a2);
  v4 = sub_22E7CA298(*(_QWORD *)a1, a2[5]);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v22 = *(_QWORD *)(a1 + 32);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v22;
    v6 = *(_DWORD *)(v22 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22F3ADCBC((uint64_t)a2);
  v9 = v8 != 0;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    v21 = result;
    v23 = v8;
    v20 = *(_QWORD *)(a1 + 32);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v20;
    result = v21;
    v8 = v23;
    v11 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  if (!v8)
  {
    v12 = (*(uint64_t (**)(uint64_t *))(*a2 + 16))(a2);
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), SHIDWORD(v12), *(_QWORD *)(a1 + 32));
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_DWORD *)(v13 + 8);
    v15 = 1;
    if (v14 < *(_DWORD *)(v13 + 12))
      goto LABEL_7;
LABEL_12:
    v19 = v15;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v19;
    v14 = *(_DWORD *)(v13 + 8);
    goto LABEL_7;
  }
  v24 = v8;
  v16 = v8;
  if ((_DWORD)v8)
  {
    v17 = (int *)result;
    do
    {
      v18 = *v17++;
      result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), v18, *(_QWORD *)(a1 + 32));
      --v16;
    }
    while (v16);
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_DWORD *)(v13 + 8);
  v15 = v24;
  if (v14 >= *(_DWORD *)(v13 + 12))
    goto LABEL_12;
LABEL_7:
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v15;
  ++*(_DWORD *)(v13 + 8);
  *(_DWORD *)(a1 + 232) = 124;
  return result;
}

uint64_t sub_22F2D600C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  unint64_t v22;
  int v23;
  uint64_t v24;

  v4 = (unint64_t)*(unsigned int *)(a2 + 60) >> 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = (unint64_t)*(unsigned int *)(a2 + 60) >> 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v19;
    v5 = v18;
    v6 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7F4DC8((uint64_t *)a1, a2);
  v7 = *(_QWORD *)(a2 + 40) & 4;
  v8 = v7 == 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v24 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a2 + 40) & 4;
    v21 = v7 == 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v21;
    v7 = v20;
    v9 = v24;
    v10 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    sub_22E7D2E84(a1 + 16, (unint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8 & (v11 << 61 >> 63)));
  }
  else
  {
    if ((v11 & 4) != 0)
      v17 = 0;
    else
      v17 = v11 & 0xFFFFFFFFFFFFFFF8;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v17, *(_QWORD *)(a1 + 32));
  }
  if (*(_DWORD *)(a2 + 60) >= 2u)
  {
    v22 = 0;
    do
      sub_22E7E5100(a1 + 16, *(int **)(a2 + 64 + 8 * v22++));
    while (v22 < (unint64_t)*(unsigned int *)(a2 + 60) >> 1);
  }
  v12 = *(_QWORD *)(a2 + 48);
  if ((v12 & 1) != 0)
    v12 = sub_22F3B44EC(a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v12, *(_QWORD *)(a1 + 32));
  v13 = *(_DWORD *)(a2 + 60);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    v23 = *(_DWORD *)(a2 + 60);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LOBYTE(v13) = v23;
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13 & 1;
  ++*(_DWORD *)(v14 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 102;
  return result;
}

uint64_t sub_22F2D61FC(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  result = sub_22E7E5100(a1 + 16, *(int **)(a2 + 56));
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= *(_DWORD *)(a1 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 232) = 115;
  return result;
}

unint64_t sub_22F2D628C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v4 = a1 + 16;
  sub_22E7E5100(a1 + 16, *(int **)(a2 + 184));
  sub_22E7E52C4(v4, *(_QWORD *)(a2 + 192));
  sub_22E7F9AC4(a1, a2);
  if ((*(_BYTE *)(a2 + 96) & 3) != 0 || (result = sub_22E3CD31C((uint64_t *)(a2 + 96), a2)) == 0)
  {
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 104) + 200) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
    v6 = (*(_QWORD *)(*(_QWORD *)(a2 + 104) + 200) >> 2) & 1;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
    ++*(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(a1 + 232) = 106;
  return result;
}

void sub_22F2D6364(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD v37[17];

  v37[16] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFE9368(a2);
  v5 = *(_QWORD *)(*a1 + 56);
  if (v5)
    v6 = v5 + 24;
  else
    v6 = 0;
  if (v6 != *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 16048) && *(_QWORD *)(v4 + 8))
  {
    v15 = v4;
    sub_22EFE95D4(a2);
    v4 = v15;
  }
  v7 = *(char **)(v4 + 8);
  if (v7)
  {
    v16 = *(_DWORD *)v7;
    v7 += 4;
    v8 = v16;
  }
  else
  {
    v8 = 0;
  }
  v9 = a1[4];
  v10 = *(unsigned int *)(v9 + 8);
  v11 = v10;
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v17 = v8;
    v18 = v4;
    v19 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v17;
    v4 = v18;
    v7 = v19;
    v11 = *(unsigned int *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v11) = 0;
  ++*(_DWORD *)(v9 + 8);
  v36 = 0;
  v12 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v20 = *(uint64_t **)(v4 + 32);
    v21 = 8 * v12;
    do
    {
      v30 = v4;
      v31 = v7;
      v33 = v8;
      v22 = *v20;
      if (v13 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v36;
      }
      v37[v13] = v22;
      v13 = ++v36;
      ++v20;
      v21 -= 8;
      v4 = v30;
      v7 = v31;
      v8 = v33;
    }
    while (v21);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(unsigned int *)(v4 + 136);
  if ((_DWORD)v14)
  {
    v23 = *(uint64_t **)(v4 + 128);
    v24 = 8 * v14;
    do
    {
      v32 = v7;
      v34 = v8;
      v25 = *v23;
      if (v13 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v36;
      }
      v37[v13] = v25;
      v13 = ++v36;
      ++v23;
      v24 -= 8;
      v7 = v32;
      v8 = v34;
    }
    while (v24);
  }
  if (v13)
  {
    v26 = v37;
    v27 = 8 * v13;
    do
    {
      v35 = v8;
      v28 = *v26++;
      v29 = v7;
      sub_22E7FCEF0(a1, v28, 1);
      v8 = v35;
      v7 = v29;
      v27 -= 8;
    }
    while (v27);
  }
  sub_22E7FD160(a1[4], v7, &v7[4 * v8]);
  *(_QWORD *)(*(_QWORD *)a1[4] + 8 * v10) = *(unsigned int *)(a1[4] + 8) + ~v10;
}

unint64_t sub_22F2D65FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v4 = a1 + 16;
  sub_22E7E5100(a1 + 16, *(int **)(a2 + 424));
  sub_22E7E52C4(v4, *(_QWORD *)(a2 + 432));
  sub_22E7F9D00(a1, a2);
  if ((*(_BYTE *)(a2 + 72) & 3) != 0 || (result = sub_22E3CD31C((uint64_t *)(a2 + 72), a2)) == 0)
  {
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 80) + 440) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
    v6 = (*(_QWORD *)(*(_QWORD *)(a2 + 80) + 440) >> 2) & 1;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 >= *(_DWORD *)(v7 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
    ++*(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(a1 + 232) = 109;
  return result;
}

void sub_22F2D66D4(uint64_t a1, unint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 40), *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 48) != 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 48);
  if (v7)
    sub_22E7E52C4(a1 + 16, v7);
  *(_DWORD *)(a1 + 232) = 123;
}

uint64_t sub_22F2D6770(uint64_t a1)
{
  uint64_t result;

  result = sub_22F1104D8(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if (*(_BYTE *)(result + 16) == 14 && *(_QWORD *)(result + 40))
      return *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 84) + 88);
    else
      return 0;
  }
  return result;
}

uint64_t sub_22F2D67C8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22E7F4DC8((uint64_t *)a1, a2);
  v4 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 >= *(_DWORD *)(a1 + 52))
  {
    v13 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v13;
    v5 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 48);
  v6 = (*(_QWORD *)(a2 + 40) >> 1) & 1;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v12 = (*(_QWORD *)(a2 + 40) >> 1) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v12;
    v7 = v14;
    v8 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a1 + 48);
  if (v10 >= *(_DWORD *)(a1 + 52))
  {
    v15 = *(_QWORD *)(a2 + 48);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v15;
    v10 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v10) = v9;
  ++*(_DWORD *)(a1 + 48);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 117;
  return result;
}

uint64_t sub_22F2D68F0(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t result;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 52);
  v8 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  if (v8 >= v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v8) = v9;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 88);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11) = v12;
  v13 = *(_DWORD *)(a1 + 52);
  v14 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v14;
  v15 = *(_QWORD *)(a2 + 128);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v14) = v15;
  v16 = *(_DWORD *)(a1 + 52);
  v17 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v17;
  v18 = *(_QWORD *)(a2 + 120);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v17) = v18;
  v19 = *(_DWORD *)(a1 + 52);
  v20 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v20;
  v21 = *(_QWORD *)(a2 + 96);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v20) = v21;
  ++*(_DWORD *)(a1 + 48);
  v22 = *(unsigned __int16 *)(a2 + 64);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_DWORD *)(v23 + 8);
  if (v24 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(v23 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = (v22 >> 13) & 3;
  ++*(_DWORD *)(v23 + 8);
  v25 = sub_22F3B7D68(a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v25, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 136;
  return result;
}

uint64_t sub_22F2D6B18(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1 + 16;
  sub_22E7EBB0C(a1 + 16, *(unsigned int **)(a2 + 56));
  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7EC5E4(v4, *(_QWORD *)(a2 + 104));
  v5 = sub_22F3B8034(a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 232) = 135;
  return result;
}

uint64_t sub_22F2D6B90(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v3 = result;
  v4 = *a2;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = a2[1] & 0x1FFF;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(unsigned int *)a2;
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10 >> 29;
  ++*(_DWORD *)(v11 + 8);
  return result;
}

uint64_t sub_22F2D6C8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a3;
  ++*(_DWORD *)(v6 + 8);
  if (a3)
  {
    v8 = 72 * a3;
    do
    {
      result = sub_22E7FC024(v5, a2);
      a2 += 72;
      v8 -= 72;
    }
    while (v8);
  }
  return result;
}

_QWORD *sub_22F2D6D20(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E4D6980(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2D6D84(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F2D6D84(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E7FD1F0(a1, v6);
  v8 = 0;
  sub_22E4D6980(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2D6E38(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E4D6980(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F2D6EEC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 1), *(_QWORD *)(a1 + 24));
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = (v5 >> 8) & 1;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 224) = 141;
  return result;
}

uint64_t sub_22F2D6F74(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v12 = a2;
  v5 = sub_22F2DF148(v4 + 1560, &v12);
  v6 = *((unsigned int *)v5 + 2);
  v7 = a1[3];
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v10 = *((unsigned int *)v5 + 2);
    v11 = a1[3];
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v10;
    v7 = v11;
    v8 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  sub_22E7C9A94(a1[2], *(_DWORD *)(a2 + 4), a1[3]);
  return sub_22E7C9A94(a1[2], *(_DWORD *)(a2 + 8), a1[3]);
}

uint64_t sub_22F2D7010(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;

  sub_22F2D6F74((uint64_t *)a1, (uint64_t)a2);
  v4 = ((unint64_t)*a2 >> 8) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v21 = *(_QWORD *)(a1 + 24);
    v16 = ((unint64_t)*a2 >> 8) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v16;
    v5 = v21;
    v6 = *(_DWORD *)(v21 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = a2 + 12;
  v8 = *((_QWORD *)a2 + 3);
  result = a1 + 32;
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 >= *(_DWORD *)(a1 + 44))
  {
    v19 = *((_QWORD *)a2 + 3);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v19;
    result = a1 + 32;
    v7 = a2 + 12;
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v8;
  v11 = *(_DWORD *)(a1 + 44);
  v12 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v12;
  v13 = *(_QWORD *)&v7[4 * (((unint64_t)*a2 >> 8) & 1) + 4];
  if (v12 >= v11)
  {
    v20 = v7;
    v22 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v20;
    result = v22;
    v12 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = v13;
  v14 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v14;
  v15 = *a2;
  if ((v15 & 0x100) != 0)
  {
    v17 = *(_QWORD *)&v7[4 * ((v15 >> 8) & 1)];
    if (v14 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = v17;
    ++*(_DWORD *)(a1 + 40);
    if ((*a2 & 0x100) != 0)
      v18 = *((_DWORD *)a2 + 12);
    else
      v18 = 0;
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v18, *(_QWORD *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 224) = 143;
  return result;
}

uint64_t sub_22F2D71AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22F2D6F74((uint64_t *)a1, a2);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 144;
  return result;
}

uint64_t sub_22F2D7218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v7;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 145;
  return result;
}

uint64_t sub_22F2D72E4(uint64_t a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;

  v4 = (uint64_t *)(a2 + 4);
  v5 = a1 + 8;
  v6 = (unint64_t)*a2 >> 8;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  sub_22E7D2ED0(v5, v4, (unint64_t)*a2 >> 8);
  v9 = *((_QWORD *)a2 + 1);
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v9;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 146;
  return result;
}

uint64_t sub_22F2D73CC(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = *a2;
  if ((v4 & 0x800) != 0)
    v5 = *(_QWORD *)&a2[4 * ((v4 >> 13) & 1) + 16 + 4 * ((v4 >> 12) & 1)];
  else
    v5 = 0;
  if ((v4 & 0x1000) != 0)
    v6 = *(_QWORD *)&a2[4 * ((v4 >> 13) & 1) + 8];
  else
    v6 = 0;
  v7 = (v4 & 0x2000) != 0 && *((_QWORD *)a2 + 2) != 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v42 = *(_QWORD *)(a1 + 24);
    v46 = v6;
    v31 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v42;
    v6 = v46;
    v7 = v31;
    v9 = *(_DWORD *)(v42 + 8);
  }
  v10 = v6 != 0;
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v5 != 0;
  ++*(_DWORD *)(v8 + 8);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    v43 = *(_QWORD *)(a1 + 24);
    v47 = v6;
    v32 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v43;
    v6 = v47;
    v7 = v32;
    v12 = *(_DWORD *)(v43 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = v7;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    v44 = *(_QWORD *)(a1 + 24);
    v48 = v6;
    v33 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v44;
    v6 = v48;
    v7 = v33;
    v15 = *(_DWORD *)(v44 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  v16 = *((_BYTE *)a2 + 1) & 7;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    v45 = *(_QWORD *)(a1 + 24);
    v49 = v6;
    v34 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v45;
    v6 = v49;
    v7 = v34;
    v18 = *(_DWORD *)(v45 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  v19 = (uint64_t *)(a2 + 8);
  v20 = *(_QWORD *)&a2[4 * ((*a2 >> 13) & 1) + 8 + 4 * ((*a2 >> 12) & 1)];
  v21 = *(_DWORD *)(a1 + 40);
  if (v21 >= *(_DWORD *)(a1 + 44))
  {
    v50 = v6;
    v39 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v50;
    v7 = v39;
    v21 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v21) = v20;
  v22 = *(_DWORD *)(a1 + 44);
  v23 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v23;
  v24 = v19[((*a2 >> 12) & 1) + 1 + ((*a2 >> 13) & 1u)];
  if (v23 >= v22)
  {
    v51 = v6;
    v40 = v7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v51;
    v7 = v40;
    v23 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23) = v24;
  v25 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v25;
  if (v5)
  {
    v27 = *a2;
    if ((v27 & 0x800) != 0)
      v28 = v19[((v27 >> 13) & 1) + 2 + ((v27 >> 12) & 1)];
    else
      v28 = 0;
    if (v25 >= *(_DWORD *)(a1 + 44))
    {
      v52 = v6;
      v41 = v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v52;
      v7 = v41;
      v25 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v25) = v28;
    ++*(_DWORD *)(a1 + 40);
  }
  if (v6)
  {
    v35 = v7;
    v36 = sub_22F0D7FDC(a2);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v36, *(_QWORD *)(a1 + 24));
    v7 = v35;
  }
  if (v7)
  {
    if ((*a2 & 0x2000) != 0)
      v37 = *v19;
    else
      v37 = 0;
    v38 = *(_DWORD *)(a1 + 40);
    if (v38 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38) = v37;
    ++*(_DWORD *)(a1 + 40);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 1), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  if (v5)
  {
    v29 = *a2;
    if ((v29 & 0x800) != 0)
      v30 = v19[((v29 >> 12) & 1) + 3 + ((v29 >> 13) & 1)];
    else
      v30 = 0;
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v30, *(_QWORD *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 224) = 147;
  return result;
}

uint64_t sub_22F2D77D0(uint64_t *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t result;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;

  v4 = *a2;
  v5 = (v4 & 0x100) != 0 && *((_QWORD *)a2 + 3) != 0;
  v6 = (v4 & 0x200) != 0 && *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 12] != 0;
  v7 = v5;
  v8 = a1[3];
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v32 = a1[3];
    v35 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v35;
    v8 = v32;
    v9 = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = a1[3];
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    v33 = a1[3];
    v36 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v36;
    v10 = v33;
    v11 = *(_DWORD *)(v33 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v6;
  ++*(_DWORD *)(v10 + 8);
  v12 = ((unint64_t)*a2 >> 10) & 1;
  v13 = a1[3];
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
  {
    v34 = a1[3];
    v37 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v37;
    v13 = v34;
    v14 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
  ++*(_DWORD *)(v13 + 8);
  v15 = a2 + 12;
  v16 = *(_QWORD *)&a2[4 * (HIBYTE(*a2) & 1) + 12 + 4 * ((*a2 >> 9) & 1)];
  v17 = *((_DWORD *)a1 + 10);
  if (v17 >= *((_DWORD *)a1 + 11))
  {
    v38 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = a2 + 12;
    v5 = v38;
    v17 = *((_DWORD *)a1 + 10);
  }
  *(_QWORD *)(a1[4] + 8 * v17) = v16;
  v18 = *((_DWORD *)a1 + 11);
  v19 = *((_DWORD *)a1 + 10) + 1;
  *((_DWORD *)a1 + 10) = v19;
  v20 = v15[((*a2 >> 9) & 1) + 1 + (HIBYTE(*a2) & 1u)];
  if (v19 >= v18)
  {
    v31 = v15;
    v39 = v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v31;
    v5 = v39;
    v19 = *((_DWORD *)a1 + 10);
  }
  *(_QWORD *)(a1[4] + 8 * v19) = v20;
  v21 = *((_DWORD *)a1 + 10) + 1;
  *((_DWORD *)a1 + 10) = v21;
  if (v5)
  {
    v28 = v6;
    if ((*a2 & 0x100) != 0)
      v29 = *v15;
    else
      v29 = 0;
    if (v21 >= *((_DWORD *)a1 + 11))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *((_DWORD *)a1 + 10);
    }
    *(_QWORD *)(a1[4] + 8 * v21) = v29;
    ++*((_DWORD *)a1 + 10);
    v6 = v28;
  }
  if (v6)
  {
    v30 = sub_22F0D82C8(a2);
    sub_22E7CA8EC(a1[2], v30, a1[3]);
  }
  sub_22E7C9A94(a1[2], *((_DWORD *)a2 + 1), a1[3]);
  sub_22E7C9A94(a1[2], *((_DWORD *)a2 + 4), a1[3]);
  result = sub_22E7C9A94(a1[2], *((_DWORD *)a2 + 5), a1[3]);
  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 16))
  {
    v24 = *a1;
    v40 = i;
    v25 = *(unsigned int *)(v24 + 1568);
    result = (uint64_t)sub_22F2DF148(v24 + 1560, &v40);
    *(_DWORD *)(result + 8) = v25;
    v26 = a1[3];
    v27 = *(unsigned int *)(v26 + 8);
    if (v27 >= *(unsigned int *)(v26 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(unsigned int *)(v26 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v26 + 8 * v27) = v25;
    ++*(_DWORD *)(v26 + 8);
  }
  *((_DWORD *)a1 + 56) = 148;
  return result;
}

uint64_t sub_22F2D7B0C(uint64_t a1, unsigned __int16 *a2)
{
  _BOOL4 v4;
  _BOOL8 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v4 = (*a2 & 0x100) != 0 && *((_QWORD *)a2 + 2) != 0;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 8];
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 44);
  v11 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v11;
  v12 = *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 12];
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v12;
  ++*(_DWORD *)(a1 + 40);
  if (v5)
  {
    v13 = sub_22F0D82F0((uint64_t)a2);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v13, *(_QWORD *)(a1 + 24));
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 1), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *((_DWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 149;
  return result;
}

uint64_t sub_22F2D7C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 150;
  return result;
}

uint64_t sub_22F2D7D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  v9 = sub_22F0D8154(a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v9, *(_QWORD *)(a1 + 24));
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *(_QWORD *)(a2 + 40);
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v14;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 48), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 52), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 151;
  return result;
}

uint64_t sub_22F2D7EB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 152;
  return result;
}

uint64_t sub_22F2D7F00(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 153;
  return result;
}

uint64_t sub_22F2D7F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(unsigned int *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v14 = *(unsigned __int8 *)(a2 + 13);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v15 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
  ++*(_DWORD *)(v15 + 8);
  v17 = *(unsigned __int8 *)(a2 + 12);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  return result;
}

uint64_t sub_22F2D810C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int j;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  sub_22F2D7F84(a1, a2);
  v4 = *(unsigned int *)(a2 + 80);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      sub_22E7CA0D0(*(_DWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * i), *(_QWORD *)(a1 + 24));
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
      v14 = *(unsigned int *)(a1 + 40);
      if (v14 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = v13;
      ++*(_DWORD *)(a1 + 40);
      result = sub_22F3F1B04(a2, i);
      v15 = result;
      v16 = *(unsigned int *)(a1 + 40);
      if (v16 >= *(unsigned int *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v16) = v15;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
    }
  }
  v17 = *(_DWORD *)(a2 + 20);
  if (v17)
  {
    for (j = 0; j != v17; ++j)
    {
      sub_22E7CA0D0(*(_DWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (j + *(_DWORD *)(a2 + 16))), *(_QWORD *)(a1 + 24));
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (j + *(_DWORD *)(a2 + 16)));
      v20 = *(unsigned int *)(a1 + 40);
      if (v20 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v20) = v19;
      ++*(_DWORD *)(a1 + 40);
      result = sub_22F3F1B10(a2, j);
      v21 = result;
      v22 = *(unsigned int *)(a1 + 40);
      if (v22 >= *(unsigned int *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v22) = v21;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
    }
  }
  v23 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = 8 * v23;
    do
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v24);
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v26;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      v24 += 8;
    }
    while (v25 != v24);
  }
  v27 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v27)
  {
    v28 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 16) + 8 * *(unsigned int *)(a2 + 20));
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v30;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  *(_DWORD *)(a1 + 224) = 159;
  return result;
}

uint64_t sub_22F2D842C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int j;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  sub_22F2D7F84(a1, a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 44), *(_QWORD *)(a1 + 24));
  v4 = *(unsigned int *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7BE5A4(*(_QWORD *)(a1 + 16), *(char **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a1 + 24));
  v8 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 24 * v8;
    do
    {
      result = sub_22E7CA170(*(_DWORD **)a1, *(_QWORD *)(a2 + 72) + v9, *(_QWORD *)(a1 + 24));
      v9 += 24;
    }
    while (v10 != v9);
  }
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 16 * v11;
    do
    {
      result = sub_22E7BE5A4(*(_QWORD *)(a1 + 16), *(char **)(*(_QWORD *)(a2 + 88) + v12), *(_QWORD *)(*(_QWORD *)(a2 + 88) + v12 + 8), *(_QWORD *)(a1 + 24));
      v12 += 16;
    }
    while (v13 != v12);
  }
  v14 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v14)
  {
    v15 = 0;
    for (i = 0; i != v14; ++i)
    {
      v17 = sub_22F3F1B04(a2, i);
      v18 = *(unsigned int *)(a1 + 40);
      if (v18 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = v17;
      ++*(_DWORD *)(a1 + 40);
      result = sub_22E7BE5A4(*(_QWORD *)(a1 + 16), *(char **)(*(_QWORD *)(a2 + 80) + v15), *(_QWORD *)(*(_QWORD *)(a2 + 80) + v15 + 8), *(_QWORD *)(a1 + 24));
      v15 += 16;
    }
  }
  v19 = *(_DWORD *)(a2 + 20);
  if (v19)
  {
    for (j = 0; j != v19; ++j)
    {
      v21 = sub_22F3F1B10(a2, j);
      v22 = *(unsigned int *)(a1 + 40);
      if (v22 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v22) = v21;
      ++*(_DWORD *)(a1 + 40);
      v23 = *(_QWORD *)(a2 + 80) + 16 * (j + *(_DWORD *)(a2 + 16));
      result = sub_22E7BE5A4(*(_QWORD *)(a1 + 16), *(char **)v23, *(_QWORD *)(v23 + 8), *(_QWORD *)(a1 + 24));
    }
  }
  *(_DWORD *)(a1 + 224) = 160;
  return result;
}

uint64_t sub_22F2D8644(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;

  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
  ++*(_DWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10 & 1;
  ++*(_DWORD *)(v11 + 8);
  *(_DWORD *)(a1 + 224) = 373;
  return result;
}

uint64_t sub_22F2D874C(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = (uint64_t)sub_22E7FD334(a1, (uint64_t)a2);
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = (v5 >> 18) & 1;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 224) = 374;
  return result;
}

void sub_22F2D87C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 88);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7E3E60(a1 + 8, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  sub_22E7E50C0(a1 + 8, a2 + 40);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 72), *(_QWORD *)(a1 + 24));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 64), *(_QWORD *)(a1 + 24));
  sub_22E7E52C4(a1 + 8, *(_QWORD *)(a2 + 80));
  if ((_DWORD)v4)
  {
    v7 = (__int128 *)(a2 + 104);
    v8 = 24 * v4;
    do
    {
      v9 = *v7;
      v10 = *((_QWORD *)v7 + 2);
      sub_22E7EC0BC(a1 + 8, (unsigned int *)&v9);
      v7 = (__int128 *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    sub_22E7FD6E0(a1 + 8, *(uint64_t **)(a2 + 96));
  *(_DWORD *)(a1 + 224) = 278;
}

uint64_t sub_22F2D88E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;

  v4 = sub_22F3F2A44(a2);
  v5 = (sub_22F3F2A44(a2) + 16 * *(unsigned int *)(a2 + 8) - v4) >> 4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = sub_22F3F2C24(a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v8, *(_QWORD *)(a1 + 24));
  v9 = sub_22F3F2C44(a2);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
  ++*(_DWORD *)(v10 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(_DWORD *)(a1 + 40);
    v14 = 8 * v12;
    v15 = (uint64_t *)(a2 + 32);
    do
    {
      v16 = *v15;
      if (v13 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v16;
      v13 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v13;
      ++v15;
      v14 -= 8;
    }
    while (v14);
    v17 = *(unsigned int *)(a2 + 8);
  }
  else
  {
    v17 = 0;
    v13 = *(_DWORD *)(a1 + 40);
  }
  v18 = *(_QWORD *)(a2 + 32 + 8 * v17);
  if (v13 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v18;
  ++*(_DWORD *)(a1 + 40);
  v19 = sub_22F3F2A44(a2);
  result = sub_22F3F2A44(a2);
  v21 = result + 16 * *(unsigned int *)(a2 + 8);
  while (v19 != v21)
  {
    if (sub_22F3F2A2C((_DWORD *)v19) && sub_22F3F2A2C((_DWORD *)v19) != 3)
      v22 = sub_22F3F2A38((_QWORD *)v19);
    else
      v22 = 0;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v22, *(_QWORD *)(a1 + 24));
    v23 = sub_22F3F2A2C((_DWORD *)v19);
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(unsigned int *)(v24 + 8);
    if (v25 >= *(unsigned int *)(v24 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(unsigned int *)(v24 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
    ++*(_DWORD *)(v24 + 8);
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(v19 + 8), *(_QWORD *)(a1 + 24));
    v19 += 16;
  }
  *(_DWORD *)(a1 + 224) = 158;
  return result;
}

uint64_t sub_22F2D8B78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 224) = 378;
  return result;
}

uint64_t sub_22F2D8BE0(uint64_t a1, unsigned int *a2)
{
  _BOOL4 v4;
  _BOOL8 v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;

  sub_22E7FD480(a1, a2);
  v4 = (*((_BYTE *)a2 + 2) & 0x40) != 0 && *((_QWORD *)a2 + 2) != 0;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = ((unint64_t)*a2 >> 18) & 0xF;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  if (v5)
  {
    if ((*((_BYTE *)a2 + 2) & 0x40) != 0)
      v12 = *((_QWORD *)a2 + 2);
    else
      v12 = 0;
    v13 = *(_DWORD *)(a1 + 40);
    if (v13 >= *(_DWORD *)(a1 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
    ++*(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(a1 + 224) = 162;
  return result;
}

uint64_t sub_22F2D8D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22F257F94(a2 + 16, (llvm::APInt *)&v8);
  result = sub_22E7EBE98(a1 + 8, (uint64_t)&v8);
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      result = MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
  }
  *(_DWORD *)(a1 + 224) = 377;
  return result;
}

uint64_t sub_22F2D8DFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E7FD480(a1, (unsigned int *)a2);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 166;
  return result;
}

uint64_t sub_22F2D8E68(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  sub_22E7FD480(a1, a2);
  v4 = a2[4];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[5], *(_QWORD *)(a1 + 24));
  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = (v8 >> 18) & 7;
  ++*(_DWORD *)(v9 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)a1 + 1872);
  *(_DWORD *)(a1 + 224) = 168;
  *(_DWORD *)(a1 + 228) = v11;
  return result;
}

uint64_t sub_22F2D8F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v17 = *(unsigned int *)(a2 + 4);
    v19 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v17;
    v5 = v19;
    v6 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)(a2 + 24);
    v9 = a1 + 32;
    v10 = *(_DWORD *)(a1 + 40);
    v11 = 8 * v7;
    do
    {
      v12 = *v8;
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        v16 = *v8;
        v18 = v9;
        v14 = v11;
        v15 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v15;
        v12 = v16;
        v11 = v14;
        v9 = v18;
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v12;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 170;
  return result;
}

uint64_t sub_22F2D9050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 36);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  result = sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  if (*(_DWORD *)(a2 + 32))
  {
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(unsigned int *)(v12 + 8);
    if (v13 >= *(unsigned int *)(v12 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11 & 3;
    ++*(_DWORD *)(v12 + 8);
    sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
    sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 44), *(_QWORD *)(a1 + 24));
    __asm { BR              X9 }
  }
  v14 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v14)
  {
    v15 = a2 + 40;
    v16 = *(_DWORD *)(a1 + 40);
    do
    {
      v17 = *(_QWORD *)(v15 + 16 * *(unsigned int *)(a2 + 32));
      if (v16 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v16) = v17;
      v16 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v16;
      v15 += 8;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(a1 + 224) = 172;
  return result;
}

uint64_t sub_22F2D92C4(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  sub_22E7FD480(a1, a2);
  v4 = ((unint64_t)*a2 >> 18) & 0xF;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v12 = ((unint64_t)*a2 >> 18) & 0xF;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v12;
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if ((*((_BYTE *)a2 + 2) & 0x40) != 0)
  {
    sub_22E7D2E84(a1 + 8, *((unint64_t **)a2 + 2));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_DWORD *)(v8 + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = 0;
    ++*(_DWORD *)(v8 + 8);
    v10 = *((_QWORD *)a2 + 2);
    v11 = *(_DWORD *)(a1 + 40);
    if (v11 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
    ++*(_DWORD *)(a1 + 40);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[6], *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[7], *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 173;
  return result;
}

uint64_t sub_22F2D9400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 174;
  return result;
}

uint64_t sub_22F2D94FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *(_QWORD *)(a2 + 40);
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v14;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 48), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 52), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 366;
  return result;
}

uint64_t sub_22F2D964C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = a2 + 32;
  v5 = *(unsigned int *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 24));
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    v13 = (uint64_t *)(a2 + 32);
    do
    {
      v14 = *v13;
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v14;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      ++v13;
      v12 -= 8;
    }
    while (v12);
    v15 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v15)
    {
      v16 = (unint64_t *)(v4 + 8 * (v15 + 1));
      v17 = 8 * v15;
      do
      {
        v18 = *v16++;
        sub_22E7CA8AC(*(_QWORD *)(a1 + 16), v18, *(_QWORD *)(a1 + 24));
        v17 -= 8;
      }
      while (v17);
    }
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 367;
  return result;
}

uint64_t sub_22F2D97C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  int v8;
  unsigned int i;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 28);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v8 = *(_DWORD *)(a2 + 28);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v10 = sub_22F3C3714(a2, i);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v10, *(_QWORD *)(a1 + 24));
      v11 = sub_22F3C3750(a2, i);
      sub_22E7C9A94(*(_QWORD *)(a1 + 16), v11, *(_QWORD *)(a1 + 24));
      sub_22F3C3720(a2, i, v31);
      v12 = v31[0];
      v13 = *(unsigned int *)(a1 + 40);
      if (v13 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
      v14 = *(_DWORD *)(a1 + 44);
      v15 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v15;
      v16 = v31[1];
      if (v15 >= v14)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v15) = v16;
      v17 = *(_DWORD *)(a1 + 44);
      v18 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v18;
      v19 = v32;
      if (v18 >= v17)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = v19;
      ++*(_DWORD *)(a1 + 40);
      v20 = sub_22F3C3770(a2, i);
      sub_22E7C9A94(*(_QWORD *)(a1 + 16), v20, *(_QWORD *)(a1 + 24));
      if (v32)
      {
        v21 = sub_22F3C3794(a2, i);
        sub_22E7C9A94(*(_QWORD *)(a1 + 16), v21, *(_QWORD *)(a1 + 24));
      }
      v22 = (unint64_t *)sub_22F3C37E8(a2, i);
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *v22, *(_QWORD *)(a1 + 24));
      v23 = v22[1];
      v24 = *(unsigned int *)(a1 + 40);
      if (v24 >= *(unsigned int *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v24) = v23;
      v25 = *(_DWORD *)(a1 + 44);
      v26 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v26;
      v27 = v22[2];
      if (v26 >= v25)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v26) = v27;
      v28 = *(_DWORD *)(a1 + 44);
      v29 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v29;
      v30 = v22[3];
      if (v29 >= v28)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v29) = v30;
      ++*(_DWORD *)(a1 + 40);
    }
  }
  *(_DWORD *)(a1 + 224) = 368;
  return result;
}

uint64_t sub_22F2D9A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 217;
  return result;
}

uint64_t sub_22F2D9B64(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  result = sub_22E7FD480(a1, a2);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 218;
  return result;
}

uint64_t sub_22F2D9C20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  unsigned int v7;

  sub_22E7FDF8C(a1, (unsigned int *)a2);
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5 & 3;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 224) = 369;
  return result;
}

uint64_t sub_22F2D9CC0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FE164(a1, (unsigned int *)a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7E1FB4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 179;
  return result;
}

uint64_t sub_22F2D9D04(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  sub_22E7FD480(a1, a2);
  v4 = ((unint64_t)*a2 >> 18) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v21 = *(_QWORD *)(a1 + 24);
    v16 = ((unint64_t)*a2 >> 18) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v16;
    v5 = v21;
    v6 = *(_DWORD *)(v21 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= *(_DWORD *)(a1 + 44))
  {
    v17 = *((_QWORD *)a2 + 3);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v17;
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v7;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *((_QWORD *)a2 + 4);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *((_QWORD *)a2 + 5);
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v14;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[4], *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[5], *(_QWORD *)(a1 + 24));
  if ((*((_BYTE *)a2 + 2) & 4) != 0)
  {
    v18 = __ROR8__(*((_QWORD *)a2 + 6), 32);
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 >= *(_DWORD *)(v19 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(v19 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
    ++*(_DWORD *)(v19 + 8);
  }
  *(_DWORD *)(a1 + 224) = 180;
  return result;
}

uint64_t sub_22F2D9ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *(_QWORD *)(a2 + 40);
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v14;
  v15 = *(_DWORD *)(a1 + 44);
  v16 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v16;
  v17 = *(_QWORD *)(a2 + 48);
  if (v16 >= v15)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v16) = v17;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 268;
  return result;
}

uint64_t sub_22F2DA04C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FDF8C(a1, (unsigned int *)a2);
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 182;
  return result;
}

uint64_t sub_22F2DA09C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7D2E84(a1 + 8, (unint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 2) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 183;
  return result;
}

uint64_t sub_22F2DA178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7CA0D0(*(_DWORD **)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 184;
  return result;
}

uint64_t sub_22F2DA204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned __int16 *)(a2 + 22);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 20);
  if (v7 >= 0x10000)
  {
    v8 = v7 >> 16;
    v9 = (uint64_t *)(a2 + 32);
    v10 = *(_DWORD *)(a1 + 40);
    do
    {
      v11 = *v9;
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      ++v9;
      --v8;
    }
    while (v8);
  }
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v13 = *(_DWORD *)(a2 + 20) & 1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  if ((unsigned __int16)*(_DWORD *)(a2 + 20) >> 1)
  {
    v16 = 3 * ((unsigned __int16)*(_DWORD *)(a2 + 20) >> 1);
    v17 = *(_DWORD **)(a2 + 24);
    v18 = 8 * v16;
    do
    {
      if (*v17 == 1)
      {
        v25 = *(_QWORD *)(a1 + 24);
        v26 = *(unsigned int *)(v25 + 8);
        if (v26 >= *(unsigned int *)(v25 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = *(unsigned int *)(v25 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = 2;
        ++*(_DWORD *)(v25 + 8);
        v27 = v17[2];
        v28 = *(_QWORD *)(a1 + 24);
        v29 = *(unsigned int *)(v28 + 8);
        if (v29 >= *(unsigned int *)(v28 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = *(unsigned int *)(v28 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v27;
        ++*(_DWORD *)(v28 + 8);
        v30 = v17 + 3;
      }
      else
      {
        if (*v17)
        {
          v31 = *(_QWORD *)(a1 + 24);
          v32 = *(unsigned int *)(v31 + 8);
          if (v32 >= *(unsigned int *)(v31 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v32 = *(unsigned int *)(v31 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v31 + 8 * v32) = 3;
          ++*(_DWORD *)(v31 + 8);
          v33 = v17[2];
          v34 = *(_QWORD *)(a1 + 24);
          v35 = *(unsigned int *)(v34 + 8);
          if (v35 >= *(unsigned int *)(v34 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v35 = *(unsigned int *)(v34 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v33;
          ++*(_DWORD *)(v34 + 8);
          sub_22E7C9A94(*(_QWORD *)(a1 + 16), v17[3], *(_QWORD *)(a1 + 24));
        }
        else
        {
          v19 = *((_QWORD *)v17 + 1);
          v20 = *(_QWORD *)(a1 + 24);
          v21 = *(unsigned int *)(v20 + 8);
          v22 = *(unsigned int *)(v20 + 12);
          if (v19)
            v23 = (*((_QWORD *)v17 + 1) & 1) == 0;
          else
            v23 = 0;
          if (v23)
          {
            if (v21 >= v22)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v21 = *(unsigned int *)(v20 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = 1;
            ++*(_DWORD *)(v20 + 8);
            sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v19, *(_QWORD *)(a1 + 24));
          }
          else
          {
            if (v21 >= v22)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v21 = *(unsigned int *)(v20 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = 0;
            ++*(_DWORD *)(v20 + 8);
            v24 = sub_22F002AA8((uint64_t)v17);
            sub_22E7CA0D0(*(_DWORD **)(a1 + 16), v24, *(_QWORD *)(a1 + 24));
          }
        }
        v30 = v17 + 4;
      }
      sub_22E7C9A94(*(_QWORD *)(a1 + 16), *v30, *(_QWORD *)(a1 + 24));
      result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v17[5], *(_QWORD *)(a1 + 24));
      v17 += 6;
      v18 -= 24;
    }
    while (v18);
  }
  *(_DWORD *)(a1 + 224) = 186;
  return result;
}

uint64_t sub_22F2DA57C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = sub_22E7FD480(a1, (unsigned int *)a2);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 187;
  return result;
}

uint64_t sub_22F2DA630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  result = a1 + 32;
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    v10 = *(_QWORD *)(a2 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v10;
    result = a1 + 32;
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v4;
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 189;
  return result;
}

uint64_t sub_22F2DA6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7D2E84(a1 + 8, (unint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 2) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 192;
  return result;
}

uint64_t sub_22F2DA7CC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, a2);
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
    v5 = sub_22EFCAD5C(v4);
  else
    v5 = 0;
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v5, *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[4], *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[5], *(_QWORD *)(a1 + 24));
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 7;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 197;
  return result;
}

uint64_t sub_22F2DA880(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 193;
  return result;
}

uint64_t sub_22F2DA8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 194;
  return result;
}

uint64_t sub_22F2DA9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 44), *(_QWORD *)(a1 + 24));
  if ((**(_DWORD **)(a2 + 16) & 0x18000) != 0)
    v13 = 0;
  else
    v13 = *(unsigned __int8 *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  *(_DWORD *)(a1 + 224) = 195;
  return result;
}

uint64_t sub_22F2DAB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 40);
    v10 = 8 * v7;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v8);
      if (v9 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v11;
      v9 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v9;
      v8 += 8;
    }
    while (v10 != v8);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 198;
  return result;
}

uint64_t sub_22F2DAC08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  result = sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 199;
  return result;
}

uint64_t sub_22F2DACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t **v15;
  uint64_t v16;
  unint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  v11 = *(_DWORD *)(a2 + 16);
  v12 = (v11 + 1);
  if (v11 == -1)
  {
    v13 = 0;
    v14 = -1;
    goto LABEL_7;
  }
  v18 = *(_DWORD *)(a1 + 40);
  v19 = (uint64_t *)(a2 + 32);
  do
  {
    v20 = *v19;
    if (v18 >= *(_DWORD *)(a1 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = v20;
    v18 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v18;
    ++v19;
    --v12;
  }
  while (v12);
  v14 = *(_DWORD *)(a2 + 16);
  if (v14)
  {
    v13 = v14 + 1;
LABEL_7:
    v15 = (unint64_t **)(a2 + 32 + 8 * v13);
    v16 = v14;
    do
    {
      v17 = *v15++;
      result = sub_22E7D2E84(a1 + 8, v17);
      --v16;
    }
    while (v16);
  }
  *(_DWORD *)(a1 + 224) = 201;
  return result;
}

uint64_t sub_22F2DAE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 84);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 16);
    v9 = *(_DWORD *)(a1 + 40);
    do
    {
      v10 = *v8;
      if (v9 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v10;
      v9 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v9;
      ++v8;
      --v7;
    }
    while (v7);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 76), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 80), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 203;
  return result;
}

uint64_t sub_22F2DAF34(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, a2);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[6], *(_QWORD *)(a1 + 24));
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 205;
  return result;
}

uint64_t sub_22F2DAFFC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, a2);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 4), *(_QWORD *)(a1 + 24));
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 206;
  return result;
}

uint64_t sub_22F2DB0D0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  sub_22E7FD480(a1, a2);
  v4 = a2[4];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if (a2[4])
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 40);
    do
    {
      v9 = *(_QWORD *)&a2[2 * v7 + 10];
      if (v8 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
      v8 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v8;
      ++v7;
    }
    while (v7 < a2[4]);
  }
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 4), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 5), *(_QWORD *)(a1 + 24));
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = (v11 >> 18) & 1;
  ++*(_DWORD *)(v12 + 8);
  *(_DWORD *)(a1 + 224) = 207;
  return result;
}

uint64_t sub_22F2DB21C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 16));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 209;
  return result;
}

uint64_t sub_22F2DB26C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22F2CFA34(a1 + 8, *(_QWORD *)(a2 + 16));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 210;
  return result;
}

uint64_t sub_22F2DB2BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 211;
  return result;
}

uint64_t sub_22F2DB318(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a2 + 40) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(unsigned __int8 *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = (v10 >> 1) & 1;
  ++*(_DWORD *)(v11 + 8);
  *(_DWORD *)(a1 + 224) = 212;
  return result;
}

uint64_t sub_22F2DB440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = (*(_QWORD *)(a2 + 24) >> 1) & 3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = (*(_QWORD *)(a2 + 16) >> 2) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v10 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 24));
  if ((v10 & 4) != 0)
    sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  v12 = *(_QWORD *)(a2 + 40) & 6;
  if (v12 == 2)
  {
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_DWORD *)(v17 + 8);
    if (v18 >= *(_DWORD *)(v17 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(v17 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = 1;
    ++*(_DWORD *)(v17 + 8);
    result = sub_22E7E1FB4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a1 + 24));
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 >= *(_DWORD *)(v19 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(v19 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = 2;
    ++*(_DWORD *)(v19 + 8);
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 >= *(_DWORD *)(v13 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(v13 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = 0;
    ++*(_DWORD *)(v13 + 8);
    v15 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_DWORD *)(a1 + 40);
    if (v16 >= *(_DWORD *)(a1 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v16) = v15;
    ++*(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(a1 + 224) = 213;
  return result;
}

uint64_t sub_22F2DB688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 214;
  return result;
}

uint64_t sub_22F2DB760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t result;
  int v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t *v43;
  unsigned int v44;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned __int16 *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if ((*(_BYTE *)(a2 + 27) & 0x18) != 0)
    v7 = 0;
  else
    v7 = sub_22E80459C(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = ((unint64_t)*(unsigned int *)(a2 + 24) >> 27) & 3;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  v14 = ((unint64_t)*(unsigned int *)(a2 + 24) >> 25) & 1;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v15 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
  ++*(_DWORD *)(v15 + 8);
  v17 = ((unint64_t)*(unsigned int *)(a2 + 24) >> 26) & 1;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = *(unsigned __int8 *)(a2 + 26);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 >= *(_DWORD *)(v21 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(v21 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v20;
  ++*(_DWORD *)(v21 + 8);
  v23 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v23) - 2 < 2)
  {
    if ((v23 & 0xFE0000) == 0x20000)
      v25 = *(_QWORD *)(a2 + 40);
    else
      v25 = 0;
    sub_22E7E1FB4(*(_QWORD *)(a1 + 16), v25, *(_QWORD *)(a1 + 24));
    if ((*(_DWORD *)(a2 + 24) & 0xFE0000) == 0x20000)
      v27 = *(_DWORD *)(a2 + 28);
    else
      v27 = 0;
    sub_22E7C9A94(*(_QWORD *)(a1 + 16), v27, *(_QWORD *)(a1 + 24));
  }
  else if (BYTE2(v23))
  {
    if (BYTE2(v23) == 1)
    {
      if ((v23 & 0xFF0000) == 0x10000)
        v24 = *(_QWORD *)(a2 + 40);
      else
        v24 = 0;
      v44 = *(_DWORD *)(a1 + 40);
      if (v44 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v44 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v44) = v24;
      ++*(_DWORD *)(a1 + 40);
    }
  }
  else
  {
    if ((v23 & 0xFF0000) != 0)
      v26 = 0;
    else
      v26 = *(unint64_t **)(a2 + 40);
    sub_22E7D2E84(a1 + 8, v26);
  }
  if ((*(_BYTE *)(a2 + 27) & 1) != 0 && *(_QWORD *)(a2 + 16))
  {
    v28 = *(_QWORD *)(a1 + 24);
    v29 = *(_DWORD *)(v28 + 8);
    if (v29 >= *(_DWORD *)(v28 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(v28 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = 1;
    ++*(_DWORD *)(v28 + 8);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
      v30 = *(_QWORD *)(a2 + 16);
    else
      v30 = 0;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v30, *(_QWORD *)(a1 + 24));
  }
  else
  {
    v41 = *(_QWORD *)(a1 + 24);
    v42 = *(_DWORD *)(v41 + 8);
    if (v42 >= *(_DWORD *)(v41 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = *(_DWORD *)(v41 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v41 + 8 * v42) = 0;
    ++*(_DWORD *)(v41 + 8);
    v43 = (unint64_t *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
      v43 = (unint64_t *)(*v43 + 40);
    sub_22F2CFA34(a1 + 8, *v43);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  v32 = *(_DWORD *)(a2 + 24);
  if ((_WORD)v32)
  {
    v33 = (uint64_t *)(a2 + 48);
    v34 = *(_DWORD *)(a1 + 40);
    v35 = 8 * (unsigned __int16)*(_DWORD *)(a2 + 24);
    do
    {
      v36 = *v33;
      if (v34 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v34) = v36;
      v34 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v34;
      ++v33;
      v35 -= 8;
    }
    while (v35);
    v32 = *(_DWORD *)(a2 + 24);
    v37 = (unsigned __int16)v32 + 1;
  }
  else
  {
    v37 = 1;
  }
  if ((v32 & 0x18000000) == 0)
  {
    result = sub_22E80459C(a2);
    if ((_DWORD)result)
    {
      v38 = (int *)(a2 + 8 * v37 + 40);
      v39 = result;
      do
      {
        v40 = *v38++;
        result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v40, *(_QWORD *)(a1 + 24));
        --v39;
      }
      while (v39);
    }
  }
  *(_DWORD *)(a1 + 224) = 216;
  return result;
}

uint64_t sub_22F2DBBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  v9 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 24);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v11;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 219;
  return result;
}

uint64_t sub_22F2DBCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 220;
  return result;
}

uint64_t sub_22F2DBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 221;
  return result;
}

uint64_t sub_22F2DBDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 225;
  return result;
}

uint64_t sub_22F2DBE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *(unsigned __int16 *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
    && *(_QWORD *)(a2 + 8 * (*(unsigned __int16 *)(a2 + 12) + 1) + 16) != 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
  v12 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v12;
  v13 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
  if (*(_WORD *)(a2 + 12))
  {
    v14 = (uint64_t *)(a2 + 24);
    v15 = 8 * *(unsigned __int16 *)(a2 + 12);
    do
    {
      v16 = *v14;
      if (v12 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = v16;
      v12 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v12;
      ++v14;
      v15 -= 8;
    }
    while (v15);
    v13 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
  }
  if ((v13 & 0x10000) != 0)
  {
    v17 = *(_QWORD *)(a2 + 16 + 8 * ((unsigned __int16)v13 + 1));
    if (v17)
    {
      if (v12 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = v17;
      ++*(_DWORD *)(a1 + 40);
    }
  }
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 222;
  return result;
}

uint64_t sub_22F2DC084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 223;
  return result;
}

uint64_t sub_22F2DC140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 224;
  return result;
}

uint64_t sub_22F2DC1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 226;
  return result;
}

uint64_t sub_22F2DC240(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 80), *(_QWORD *)(a1 + 24));
  v5 = *(_OWORD *)(a2 + 16);
  sub_22E7C9B04(*(_QWORD *)(a1 + 16), &v5, *(_QWORD *)(a1 + 24));
  v5 = *(_OWORD *)(a2 + 32);
  sub_22E7C9B04(*(_QWORD *)(a1 + 16), &v5, *(_QWORD *)(a1 + 24));
  v5 = *(_OWORD *)(a2 + 48);
  sub_22E7C9B04(*(_QWORD *)(a1 + 16), &v5, *(_QWORD *)(a1 + 24));
  v5 = *(_OWORD *)(a2 + 64);
  result = sub_22E7C9B04(*(_QWORD *)(a1 + 16), &v5, *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 227;
  return result;
}

uint64_t sub_22F2DC2D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 228;
  return result;
}

uint64_t sub_22F2DC354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)(a2 + 24);
    do
    {
      v13 = *v12;
      if (v10 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v13;
      v10 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v10;
      ++v12;
      --v11;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 224) = 229;
  return result;
}

uint64_t sub_22F2DC47C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 80), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 84), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 88), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
  v10 = *(_DWORD *)(a1 + 44);
  v11 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 32);
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v12;
  v13 = *(_DWORD *)(a1 + 44);
  v14 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v14;
  v15 = *(_QWORD *)(a2 + 40);
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = v15;
  v16 = *(_DWORD *)(a1 + 44);
  v17 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v17;
  v18 = *(_QWORD *)(a2 + 48);
  if (v17 >= v16)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v17) = v18;
  v19 = *(_DWORD *)(a1 + 44);
  v20 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v20;
  v21 = *(_QWORD *)(a2 + 56);
  if (v20 >= v19)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v20) = v21;
  v22 = *(_DWORD *)(a1 + 44);
  v23 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v23;
  v24 = *(_QWORD *)(a2 + 64);
  if (v23 >= v22)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23) = v24;
  v25 = *(_DWORD *)(a1 + 44);
  v26 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v26;
  v27 = *(_QWORD *)(a2 + 72);
  if (v26 >= v25)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v26) = v27;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 230;
  return result;
}

uint64_t sub_22F2DC6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;

  v4 = a1 + 8;
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  sub_22E7E3E60(v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 48);
  result = sub_22E7E50C0(v4, (uint64_t)&v11);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v9;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 370;
  return result;
}

uint64_t sub_22F2DC7C8(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;

  sub_22E7FDD4C(a1, a2);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v8 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v8;
    v5 = v9;
    v6 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = HIDWORD(v4) & 0x3F;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 231;
  return result;
}

uint64_t sub_22F2DC858(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  result = sub_22E7FD480(a1, (unsigned int *)a2);
  v5 = HIDWORD(*(_QWORD *)a2) & 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 233;
  return result;
}

uint64_t sub_22F2DC914(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_22E7FD480(a1, a2);
  v4 = a2[8];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v48 = *(_QWORD *)(a1 + 24);
    v40 = a2[8];
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v40;
    v5 = v48;
    v6 = *(_DWORD *)(v48 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 18) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v49 = *(_QWORD *)(a1 + 24);
    v41 = ((unint64_t)*a2 >> 18) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v41;
    v8 = v49;
    v9 = *(_DWORD *)(v49 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = ((unint64_t)*a2 >> 19) & 1;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    v50 = *(_QWORD *)(a1 + 24);
    v42 = ((unint64_t)*a2 >> 19) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v42;
    v11 = v50;
    v12 = *(_DWORD *)(v50 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = ((unint64_t)*a2 >> 20) & 1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    v51 = *(_QWORD *)(a1 + 24);
    v43 = ((unint64_t)*a2 >> 20) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v43;
    v14 = v51;
    v15 = *(_DWORD *)(v51 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  v16 = ((unint64_t)*a2 >> 21) & 1;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    v52 = *(_QWORD *)(a1 + 24);
    v44 = ((unint64_t)*a2 >> 21) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = v44;
    v17 = v52;
    v18 = *(_DWORD *)(v52 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  v19 = ((unint64_t)*a2 >> 22) & 1;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_DWORD *)(v20 + 8);
  if (v21 >= *(_DWORD *)(v20 + 12))
  {
    v53 = *(_QWORD *)(a1 + 24);
    v45 = ((unint64_t)*a2 >> 22) & 1;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v45;
    v20 = v53;
    v21 = *(_DWORD *)(v53 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v19;
  ++*(_DWORD *)(v20 + 8);
  v22 = ((unint64_t)*a2 >> 23) & 7;
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_DWORD *)(v23 + 8);
  if (v24 >= *(_DWORD *)(v23 + 12))
  {
    v54 = *(_QWORD *)(a1 + 24);
    v46 = ((unint64_t)*a2 >> 23) & 7;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = v46;
    v23 = v54;
    v24 = *(_DWORD *)(v54 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = v22;
  ++*(_DWORD *)(v23 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  v26 = a2[8];
  if ((_DWORD)v26)
  {
    v27 = 0;
    v28 = a2 + 10;
    v29 = a1 + 32;
    v30 = *(_DWORD *)(a1 + 40);
    v31 = 8 * v26;
    do
    {
      v32 = *(unsigned __int8 *)a2;
      v33 = v32 == 119;
      if (v32 == 119)
        v34 = a2;
      else
        v34 = 0;
      v35 = v34 + 12;
      if (!v33)
        v35 = v28;
      v36 = *(_QWORD *)((char *)v35 + v27);
      if (v30 >= *(_DWORD *)(a1 + 44))
      {
        v55 = v29;
        v38 = v28;
        v39 = v27;
        v47 = v31;
        v37 = v36;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v37;
        v28 = v38;
        v27 = v39;
        v31 = v47;
        v29 = v55;
        v30 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v30) = v36;
      v30 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v30;
      v27 += 8;
    }
    while (v31 != v27);
  }
  *(_DWORD *)(a1 + 224) = 234;
  return result;
}

uint64_t sub_22F2DCC70(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a2 + 28) & 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(unsigned __int8 *)(a2 + 28);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = (v8 >> 1) & 1;
  ++*(_DWORD *)(v9 + 8);
  *(_DWORD *)(a1 + 224) = 235;
  return result;
}

uint64_t sub_22F2DCD4C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  sub_22E7FD480(a1, a2);
  v4 = *((unsigned __int16 *)a2 + 2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  v7 = ((unint64_t)*a2 >> 18) & 3;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[6], *(_QWORD *)(a1 + 24));
  v10 = ((unint64_t)*a2 >> 20) & 1;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = ((unint64_t)*a2 >> 21) & 1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[7], *(_QWORD *)(a1 + 24));
  if (*((_WORD *)a2 + 2))
  {
    v17 = (uint64_t *)(a2 + 8);
    v18 = *(_DWORD *)(a1 + 40);
    v19 = 8 * *((unsigned __int16 *)a2 + 2);
    do
    {
      v20 = *v17;
      if (v18 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = v20;
      v18 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v18;
      ++v17;
      v19 -= 8;
    }
    while (v19);
  }
  *(_DWORD *)(a1 + 224) = 371;
  return result;
}

uint64_t sub_22F2DCF30(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E7FD480(a1, (unsigned int *)a2);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 245;
  return result;
}

uint64_t sub_22F2DCF9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E7FDF8C(a1, (unsigned int *)a2);
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 243;
  return result;
}

uint64_t sub_22F2DCFEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;

  sub_22E7FD480(a1, (unsigned int *)a2);
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  if ((v5 & 4) != 0)
  {
    result = sub_22E7D2E84(a1 + 8, (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8));
    v8 = 249;
  }
  else
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_DWORD *)(a1 + 40);
    if (v7 >= *(_DWORD *)(a1 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 40);
    v8 = 248;
  }
  *(_DWORD *)(a1 + 224) = v8;
  return result;
}

uint64_t sub_22F2DD080(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, a2);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  v5 = *((_QWORD *)a2 + 2);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 251;
  return result;
}

uint64_t sub_22F2DD148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v5 = sub_22EFCAD5C(v4);
  else
    v5 = 0;
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v5, *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 252;
  return result;
}

uint64_t sub_22F2DD1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v5 = sub_22EFCAD5C(v4);
  else
    v5 = 0;
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v5, *(_QWORD *)(a1 + 24));
  sub_22EFF605C(a2);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v6, *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 253;
  return result;
}

uint64_t sub_22F2DD218(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7FD480(a1, (unsigned int *)a2);
  result = sub_22F2D0AD4(a1 + 8, *(unint64_t **)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 254;
  return result;
}

uint64_t sub_22F2DD290(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t result;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;

  sub_22E7FD480(a1, a2);
  v4 = ((unint64_t)*a2 >> 19) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = (*((_WORD *)a2 + 1) & 0x180) != 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = a2[1];
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = ((unint64_t)*a2 >> 25) & 1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  v16 = ((unint64_t)*a2 >> 18) & 1;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  v19 = ((unint64_t)*a2 >> 20) & 1;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_DWORD *)(v20 + 8);
  if (v21 >= *(_DWORD *)(v20 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v19;
  ++*(_DWORD *)(v20 + 8);
  v22 = ((unint64_t)*a2 >> 22) & 1;
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_DWORD *)(v23 + 8);
  if (v24 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(v23 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = v22;
  ++*(_DWORD *)(v23 + 8);
  v25 = ((unint64_t)*a2 >> 23) & 3;
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(_DWORD *)(v26 + 8);
  if (v27 >= *(_DWORD *)(v26 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(v26 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v26 + 8 * v27) = v25;
  ++*(_DWORD *)(v26 + 8);
  v28 = ((unint64_t)*a2 >> 21) & 1;
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 >= *(_DWORD *)(v29 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(v29 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = v28;
  ++*(_DWORD *)(v29 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  sub_22E7D2E84(a1 + 8, *((unint64_t **)a2 + 4));
  v31 = *a2;
  if ((*a2 & 0x2000000) != 0)
  {
    if ((v31 & 0x1800000) != 0)
      v32 = ((v31 >> 19) & 1) + 1;
    else
      v32 = (v31 >> 19) & 1;
    sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *(_QWORD *)&a2[2 * v32 + 14 + 2 * a2[1]], *(_QWORD *)(a1 + 24));
  }
  sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 5), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 6), *(_QWORD *)(a1 + 24));
  v34 = ((*a2 >> 19) & 1) + a2[1];
  if ((*a2 & 0x1800000) != 0)
    v35 = v34 + 1;
  else
    v35 = v34;
  if ((_DWORD)v35)
  {
    v36 = (uint64_t *)(a2 + 14);
    v37 = *(_DWORD *)(a1 + 40);
    v38 = 8 * v35;
    do
    {
      v39 = *v36;
      if (v37 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v37) = v39;
      v37 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v37;
      ++v36;
      v38 -= 8;
    }
    while (v38);
  }
  *(_DWORD *)(a1 + 224) = 256;
  return result;
}

uint64_t sub_22F2DD638(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;

  sub_22E7FD480(a1, a2);
  v4 = ((unint64_t)*a2 >> 18) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 19) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = ((unint64_t)*a2 >> 20) & 1;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = ((unint64_t)*a2 >> 21) & 1;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 2), *(_QWORD *)(a1 + 24));
  v16 = *((_QWORD *)a2 + 3);
  v17 = *(_DWORD *)(a1 + 40);
  if (v17 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v17) = v16;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 257;
  return result;
}

uint64_t sub_22F2DD7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unint64_t *v11;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a2 + 24) & 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  sub_22E7E3E60(a1 + 8, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 48));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 56), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 60), *(_QWORD *)(a1 + 24));
  sub_22E7CA0D0(*(_DWORD **)(a1 + 16), *(_QWORD *)(a2 + 64) & ((uint64_t)(*(_QWORD *)(a2 + 64) << 63) >> 63) & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 24));
  v9 = *(_QWORD *)(a2 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 72), *(_QWORD *)(a1 + 24));
  }
  else
  {
    if ((v9 & 1) != 0)
      v11 = 0;
    else
      v11 = (unint64_t *)(v9 & 0xFFFFFFFFFFFFFFFELL);
    result = sub_22E7D2E84(a1 + 8, v11);
  }
  *(_DWORD *)(a1 + 224) = 258;
  return result;
}

uint64_t sub_22F2DD930(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22E7FE3D0(a1, a2);
  v4 = ((unint64_t)*a2 >> 19) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v13 = ((unint64_t)*a2 >> 19) & 1;
    v15 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v13;
    v5 = v15;
    v6 = *(_DWORD *)(v15 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 20) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v14 = ((unint64_t)*a2 >> 20) & 1;
    v16 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v14;
    v8 = v16;
    v9 = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  if ((sub_22F0620C0((uint64_t)a2) & 1) != 0)
    v10 = 0;
  else
    v10 = *((_QWORD *)a2 + 7);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= *(_DWORD *)(a1 + 44))
  {
    v17 = v10;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v17;
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 8), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[18], *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 263;
  return result;
}

uint64_t sub_22F2DDA78(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t **v16;
  unint64_t *v17;
  uint64_t v18;

  sub_22E7FD480(a1, a2);
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v18 = a2[1];
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v18;
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 18);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = ((unint64_t)*a2 >> 26) & 1;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  sub_22F0D4E74((uint64_t)a2);
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), v13, *(_QWORD *)(a1 + 24));
  v15 = a2[1];
  if ((_DWORD)v15)
  {
    v16 = (unint64_t **)(a2 + 6);
    do
    {
      v17 = *v16++;
      result = sub_22E7D2E84(a1 + 8, v17);
      --v15;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 224) = 269;
  return result;
}

uint64_t sub_22F2DDBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_BYTE *)(a2 + 16) & 3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  sub_22F0D4E74(a2);
  sub_22E7CA8AC(*(_QWORD *)(a1 + 16), v10, *(_QWORD *)(a1 + 24));
  result = sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 48));
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 270;
  return result;
}

uint64_t sub_22F2DDCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = (unint64_t)*(unsigned int *)(a2 + 16) >> 31;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  sub_22F0D4E74(a2);
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), v10, *(_QWORD *)(a1 + 24));
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 265;
  return result;
}

uint64_t sub_22F2DDE04(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  sub_22E7FD480(a1, a2);
  v4 = ((unint64_t)*a2 >> 18) & 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 3), *(_QWORD *)(a1 + 24));
  v8 = *((_QWORD *)a2 + 2);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 266;
  return result;
}

uint64_t sub_22F2DDECC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22F3C6ADC(a2, (uint64_t)&v5);
  v7 = v5;
  v8 = v6;
  sub_22E7EC0BC(a1 + 8, (unsigned int *)&v7);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 274;
  return result;
}

uint64_t sub_22F2DDF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned int *)(a2 + 28);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v8 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v8)
  {
    v9 = (unint64_t *)(a2 + 32);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), v11, *(_QWORD *)(a1 + 24));
      v10 -= 8;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 224) = 275;
  return result;
}

uint64_t sub_22F2DE000(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 44);
  v11 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 40);
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v12;
  v13 = *(_DWORD *)(a1 + 44);
  v14 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v14;
  v15 = *(_QWORD *)(a2 + 48);
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = v15;
  ++*(_DWORD *)(a1 + 40);
  v16 = *(unsigned int *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  *(_DWORD *)(a1 + 224) = 277;
  return result;
}

uint64_t sub_22F2DE19C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;

  sub_22E7FD480(a1, a2);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    v10 = *((_QWORD *)a2 + 2);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v10;
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v11 = v7;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v11;
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = (v7 >> 18) & 1;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(a1 + 224) = 267;
  return result;
}

uint64_t sub_22F2DE274(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E7FDD4C(a1, (unsigned int *)a2);
  v5 = *(_QWORD *)(a2 + *(unsigned __int8 *)(a2 + 3) + 8);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 280;
  return result;
}

uint64_t sub_22F2DE2E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 281;
  return result;
}

uint64_t *sub_22F2DE36C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  unsigned int v13;

  sub_22E7FD480(a1, a2);
  if (sub_22F3C1EC8((uint64_t)a2))
    v4 = 3;
  else
    v4 = 2;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if (sub_22F3C1EC8((uint64_t)a2))
  {
    v7 = *(_QWORD *)sub_22F3C1EC8((uint64_t)a2);
    v8 = *(_DWORD *)(a1 + 40);
    if (v8 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v7;
    ++*(_DWORD *)(a1 + 40);
  }
  v9 = *(_QWORD *)sub_22EF55B70((uint64_t)a2);
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v9;
  ++*(_DWORD *)(a1 + 40);
  result = (uint64_t *)sub_22F3C1EC0((uint64_t)a2);
  v12 = *result;
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 >= *(_DWORD *)(a1 + 44))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 283;
  return result;
}

uint64_t sub_22F2DE4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 284;
  return result;
}

uint64_t sub_22F2DE5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  v6 = *(int *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 28), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 285;
  return result;
}

uint64_t sub_22F2DE678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6 != 0;
  ++*(_DWORD *)(v7 + 8);
  if (v6)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(a1 + 40);
    if (v10 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v9;
    ++*(_DWORD *)(a1 + 40);
  }
  v11 = *(unsigned __int8 *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 40), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 288;
  return result;
}

uint64_t sub_22F2DE7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6 != 0;
  ++*(_DWORD *)(v7 + 8);
  if (v6)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(a1 + 40);
    if (v10 >= *(_DWORD *)(a1 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v10) = v9;
    ++*(_DWORD *)(a1 + 40);
  }
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 36), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 289;
  return result;
}

uint64_t sub_22F2DE90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(unsigned __int8 *)(a2 + 36);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v7;
  ++*(_DWORD *)(a1 + 40);
  sub_22E7E3E60(a1 + 8, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 292;
  return result;
}

uint64_t sub_22F2DE9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  sub_22E7FD480(a1, (unsigned int *)a2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v8;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 224) = 293;
  return result;
}

uint64_t sub_22F2DEAA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7CA8AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a1 + 24));
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  if ((v5 & 4) != 0)
  {
    result = sub_22E7D2E84(a1 + 8, (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8));
    v8 = 295;
  }
  else
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_DWORD *)(a1 + 40);
    if (v7 >= *(_DWORD *)(a1 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 40);
    v8 = 294;
  }
  *(_DWORD *)(a1 + 224) = v8;
  return result;
}

uint64_t sub_22F2DEB48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  v7 = *(_DWORD *)(a1 + 44);
  v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v8) = v9;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 297;
  return result;
}

uint64_t sub_22F2DEC08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a1 + 40);
  if (v6 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 298;
  return result;
}

uint64_t sub_22F2DEC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 12), *(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  v10 = *(_DWORD *)(a1 + 44);
  v11 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 24);
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v12;
  ++*(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 224) = 299;
  return result;
}

uint64_t sub_22F2DED80(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = result;
  v3 = 0;
  v4 = a2 + 8;
  v5 = *(_DWORD *)(result + 40);
  do
  {
    v6 = *(_QWORD *)(v4 + v3);
    if (v5 >= *(_DWORD *)(v2 + 44))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(v2 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v5) = v6;
    v5 = *(_DWORD *)(v2 + 40) + 1;
    *(_DWORD *)(v2 + 40) = v5;
    v3 += 8;
  }
  while (v3 != 32);
  *(_DWORD *)(v2 + 224) = 301;
  return result;
}

uint64_t sub_22F2DEE14(uint64_t a1, uint64_t a2)
{
  sub_22E7EBB0C(a1 + 8, *(unsigned int **)(a2 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 12), *(_QWORD *)(a1 + 24));
  return sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_22F2DEE54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = *(unsigned int *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return sub_22F2DEE14(a1, a2);
}

uint64_t sub_22F2DEEC8(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;

  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  result = sub_22F2DEE14(a1, a2);
  *(_DWORD *)(a1 + 224) = 300;
  return result;
}

uint64_t sub_22F2DEF58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22F2DEE54(a1, a2);
  v5 = *(unsigned int *)(a2 + 36);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22F2DEFC8(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;

  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  result = sub_22F2DEE14(a1, a2);
  *(_DWORD *)(a1 + 224) = 320;
  return result;
}

uint64_t sub_22F2DF058(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22F2DEE14(a1, a2);
  v5 = *(unsigned int *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 224) = 334;
  return result;
}

uint64_t sub_22F2DF0D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22F2DEE14(a1, a2);
  v5 = *(unsigned int *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 224) = 335;
  return result;
}

_QWORD *sub_22F2DF148(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2DF1B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2DF244(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F2DF1B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v7 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v9 = v6;
        v13 = v5 + v10++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_8;
      }
      v8 = 0;
      if (v9)
        v6 = v9;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_8:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2DF244(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E8045F4(a1, v6);
  v8 = 0;
  sub_22F2DF1B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2DF2F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F2DF1B0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_22F2DF3B0(uint64_t a1)
{
  sub_22E804ABC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F2DF3D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t *v4;
  const void **v5;
  char v6;
  unint64_t v7;
  const void **v8;
  const void **v9;
  unint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  const void *v16;
  char v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  uint64_t v28;
  __n128 v29;
  unsigned __int32 v30;

  v1 = *(_QWORD **)(a1 + 16);
  if (*(_BYTE *)(v1[14] + 9) || *(_BYTE *)(v1[6] + 168) && !*(_BYTE *)(a1 + 2096))
    return result;
  v3 = v1[7];
  if ((*(_BYTE *)(v3 + 240) & 0xE0) != 0)
  {
    v4 = (uint64_t *)v1[13];
    v5 = (const void **)(v3 + 496);
    v6 = *(_BYTE *)(v3 + 519);
    v8 = *(const void ***)(v3 + 496);
    v7 = *(_QWORD *)(v3 + 504);
    if (v6 >= 0)
      v9 = v5;
    else
      v9 = v8;
    if (v6 >= 0)
      v10 = v6 & 0x7F;
    else
      v10 = v7;
    v11 = sub_22F138980(v4, v9, v10, 0, 0, 0);
    if (!v11)
      return result;
    v13 = v11;
    v1 = *(_QWORD **)(a1 + 16);
  }
  else
  {
    v13 = 0;
  }
  if (*(_BYTE *)(a1 + 2096))
  {
    v28 = v13;
    (*(void (**)(_QWORD))(**(_QWORD **)(v1[6] + 48) + 16))(*(_QWORD *)(v1[6] + 48));
    v13 = v28;
    v1 = *(_QWORD **)(a1 + 16);
  }
  v16 = *(const void **)(a1 + 24);
  v15 = a1 + 24;
  v14 = v16;
  v17 = *(_BYTE *)(v15 + 23);
  v18 = v17;
  if (v17 >= 0)
    v19 = (const void *)v15;
  else
    v19 = v14;
  v20 = v17 & 0x7F;
  if (v18 >= 0)
    v21 = v20;
  else
    v21 = *(_QWORD *)(v15 + 8);
  v22 = *(_BYTE *)(v15 + 47);
  v23 = v22;
  if (v22 >= 0)
    v24 = v15 + 24;
  else
    v24 = *(_QWORD *)(v15 + 24);
  v25 = v22 & 0x7F;
  if (v23 >= 0)
    v26 = v25;
  else
    v26 = *(_QWORD *)(v15 + 32);
  sub_22F2D0668(v15 + 184, *(int8x16_t **)(v15 + 48), v19, v21, v13, v24, v26, *(_BYTE *)(v1[6] + 169), *(_BYTE *)(v15 + 2073));
  v27 = *(__n128 **)(v15 + 56);
  result = v29;
  v27[1].n128_u32[0] = v30;
  *v27 = v29;
  *(_BYTE *)(*(_QWORD *)(v15 + 56) + 48) = 1;
  return result;
}

uint64_t sub_22F2DF554(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_22F2DF55C(uint64_t a1)
{
  return a1 + 208;
}

uint64_t sub_22F2DF564(uint64_t a1)
{
  FILE **v2;
  unsigned int v3;

  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  fwrite("*** Global Module Index Statistics:\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v3 = *(_DWORD *)(a1 + 1368);
  if (v3)
    fprintf(*v2, "  %u / %u identifier lookups succeeded (%f%%)\n", *(_DWORD *)(a1 + 1372), v3, (double)*(unsigned int *)(a1 + 1372) * 100.0 / (double)v3);
  return fputc(10, *v2);
}

llvm::raw_ostream *sub_22F2DF5EC(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  const char *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = sub_22E47DAC0(v2, "*** Global Module Index Dump:\n");
  v4 = (llvm::raw_ostream *)llvm::errs(v3);
  v5 = sub_22E47DAC0(v4, "Module files:\n");
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6)
  {
    v7 = 80 * v6;
    v8 = *(_QWORD *)(a1 + 16) + 16;
    do
    {
      v9 = (llvm::raw_ostream *)llvm::errs(v5);
      v10 = sub_22E47DAC0(v9, "** ");
      if (*(char *)(v8 + 15) >= 0)
        v11 = (const char *)(v8 - 8);
      else
        v11 = *(const char **)(v8 - 8);
      v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, v11);
      sub_22E47DAC0(v12, "\n");
      v13 = *(_QWORD *)(v8 - 16);
      if (v13)
      {
        v5 = (llvm *)sub_22F2DFA38(v13);
      }
      else
      {
        v14 = (llvm::raw_ostream *)llvm::errs(0);
        v5 = sub_22E47DAC0(v14, "\n");
      }
      v8 += 80;
      v7 -= 80;
    }
    while (v7);
  }
  v15 = (llvm::raw_ostream *)llvm::errs(v5);
  return sub_22E47DAC0(v15, "\n");
}

uint64_t sub_22F2DF6CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  result = operator new();
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_DWORD *)(v1 + 4);
  *(_QWORD *)result = &off_24FA725A0;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v4;
  *(_QWORD *)(result + 24) = v1 + 24;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_22F2DF724(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E7ED0F8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2D2328(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F2DF7BC(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v6 = *(_DWORD *)a2;
      a2 += 4;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 2);
  return result;
}

void sub_22F2DF848(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E8080E4(*(_QWORD *)a1, *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8), v2);
  sub_22E80808C(*(_QWORD *)a1, *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2DF8D0(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *sub_22F2DF934((llvm::StringMapImpl *)(a1 + 8), a2, a3);
  result = *a4;
  *a4 = 0;
  v7 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = result;
  if (v7)
  {
    v8 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v5 = v8;
    result = *(_QWORD *)(v8 + 8);
  }
  *(_BYTE *)(v5 + 16) = 1;
  return result;
}

uint64_t *sub_22F2DF934(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v13 = i[1];
        ++i;
        v7 = v13;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v8 = MEMORY[0x23489D23C](a3 + 25, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 24;
  if (a3)
    memcpy((void *)(v8 + 24), a2, a3);
  *(_BYTE *)(v10 + a3) = 0;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = a3;
  *i = (uint64_t)v9;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *sub_22F2DFA38(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  const char *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  llvm *v35;
  llvm::raw_ostream *v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm *v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  llvm *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm *v53;
  llvm::raw_ostream *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  llvm *v59;
  llvm::raw_ostream *v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = sub_22E47DAC0(v2, "\nModule: ");
  if (*(char *)(a1 + 31) >= 0)
    v4 = (const char *)(a1 + 8);
  else
    v4 = *(const char **)(a1 + 8);
  v5 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, v4);
  v6 = sub_22E47DAC0(v5, "\n");
  if (*(_QWORD *)(a1 + 3416) != *(_QWORD *)(a1 + 3424))
  {
    v7 = (llvm::raw_ostream *)llvm::errs(v6);
    v8 = sub_22E47DAC0(v7, "  Imports: ");
    v9 = *(_QWORD *)(a1 + 3424) - *(_QWORD *)(a1 + 3416);
    if ((v9 & 0x7FFFFFFF8) != 0)
    {
      v10 = 0;
      v11 = (v9 >> 3);
      do
      {
        if (v10)
        {
          v12 = (llvm::raw_ostream *)llvm::errs(v8);
          v8 = sub_22E47DAC0(v12, ", ");
        }
        v13 = (llvm::raw_ostream *)llvm::errs(v8);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 3416) + 8 * v10);
        v17 = *(const char **)(v14 + 8);
        v15 = v14 + 8;
        v16 = v17;
        if (*(char *)(v15 + 23) >= 0)
          v18 = (const char *)v15;
        else
          v18 = v16;
        v8 = (llvm *)llvm::raw_ostream::write(v13, v18);
        ++v10;
      }
      while (v11 != v10);
    }
    v19 = (llvm::raw_ostream *)llvm::errs(v8);
    v6 = sub_22E47DAC0(v19, "\n");
  }
  v20 = (llvm::raw_ostream *)llvm::errs(v6);
  sub_22E47DAC0(v20, "  Base source location offset: ");
  v21 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
  {
    llvm::raw_ostream::write(v21);
  }
  else
  {
    *((_QWORD *)v21 + 4) = v22 + 1;
    *v22 = 10;
  }
  v23 = (llvm *)sub_22E808808("Source location offset local -> global map", 0x2AuLL, (uint64_t *)(a1 + 1640));
  v24 = (llvm::raw_ostream *)llvm::errs(v23);
  sub_22E47DAC0(v24, "  Base identifier ID: ");
  v25 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
  {
    v25 = (llvm::raw_ostream *)llvm::raw_ostream::write(v25);
  }
  else
  {
    *((_QWORD *)v25 + 4) = v26 + 1;
    *v26 = 10;
  }
  sub_22E47DAC0(v25, "  Number of identifiers: ");
  v27 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 10;
  }
  v29 = (llvm *)sub_22E808808("Identifier ID local -> global map", 0x21uLL, (uint64_t *)(a1 + 1696));
  v30 = (llvm::raw_ostream *)llvm::errs(v29);
  sub_22E47DAC0(v30, "  Base macro ID: ");
  v31 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v32 = (_BYTE *)*((_QWORD *)v31 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
  {
    v31 = (llvm::raw_ostream *)llvm::raw_ostream::write(v31);
  }
  else
  {
    *((_QWORD *)v31 + 4) = v32 + 1;
    *v32 = 10;
  }
  sub_22E47DAC0(v31, "  Number of macros: ");
  v33 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v34 = (_BYTE *)*((_QWORD *)v33 + 4);
  if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
  {
    llvm::raw_ostream::write(v33);
  }
  else
  {
    *((_QWORD *)v33 + 4) = v34 + 1;
    *v34 = 10;
  }
  v35 = (llvm *)sub_22E808808("Macro ID local -> global map", 0x1CuLL, (uint64_t *)(a1 + 2144));
  v36 = (llvm::raw_ostream *)llvm::errs(v35);
  sub_22E47DAC0(v36, "  Base submodule ID: ");
  v37 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v38 = (_BYTE *)*((_QWORD *)v37 + 4);
  if ((unint64_t)v38 >= *((_QWORD *)v37 + 3))
  {
    v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37);
  }
  else
  {
    *((_QWORD *)v37 + 4) = v38 + 1;
    *v38 = 10;
  }
  sub_22E47DAC0(v37, "  Number of submodules: ");
  v39 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 10;
  }
  v41 = (llvm *)sub_22E808808("Submodule ID local -> global map", 0x20uLL, (uint64_t *)(a1 + 2616));
  v42 = (llvm::raw_ostream *)llvm::errs(v41);
  sub_22E47DAC0(v42, "  Base selector ID: ");
  v43 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v44 = (_BYTE *)*((_QWORD *)v43 + 4);
  if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
  {
    v43 = (llvm::raw_ostream *)llvm::raw_ostream::write(v43);
  }
  else
  {
    *((_QWORD *)v43 + 4) = v44 + 1;
    *v44 = 10;
  }
  sub_22E47DAC0(v43, "  Number of selectors: ");
  v45 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v46 = (_BYTE *)*((_QWORD *)v45 + 4);
  if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
  {
    llvm::raw_ostream::write(v45);
  }
  else
  {
    *((_QWORD *)v45 + 4) = v46 + 1;
    *v46 = 10;
  }
  v47 = (llvm *)sub_22E808808("Selector ID local -> global map", 0x1FuLL, (uint64_t *)(a1 + 2672));
  v48 = (llvm::raw_ostream *)llvm::errs(v47);
  sub_22E47DAC0(v48, "  Base preprocessed entity ID: ");
  v49 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v50 = (_BYTE *)*((_QWORD *)v49 + 4);
  if ((unint64_t)v50 >= *((_QWORD *)v49 + 3))
  {
    v49 = (llvm::raw_ostream *)llvm::raw_ostream::write(v49);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 10;
  }
  sub_22E47DAC0(v49, "  Number of preprocessed entities: ");
  v51 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v52 = (_BYTE *)*((_QWORD *)v51 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v51 + 3))
  {
    llvm::raw_ostream::write(v51);
  }
  else
  {
    *((_QWORD *)v51 + 4) = v52 + 1;
    *v52 = 10;
  }
  v53 = (llvm *)sub_22E808808("Preprocessed entity ID local -> global map", 0x2AuLL, (uint64_t *)(a1 + 2544));
  v54 = (llvm::raw_ostream *)llvm::errs(v53);
  sub_22E47DAC0(v54, "  Base type index: ");
  v55 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
  {
    v55 = (llvm::raw_ostream *)llvm::raw_ostream::write(v55);
  }
  else
  {
    *((_QWORD *)v55 + 4) = v56 + 1;
    *v56 = 10;
  }
  sub_22E47DAC0(v55, "  Number of types: ");
  v57 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v58 = (_BYTE *)*((_QWORD *)v57 + 4);
  if ((unint64_t)v58 >= *((_QWORD *)v57 + 3))
  {
    llvm::raw_ostream::write(v57);
  }
  else
  {
    *((_QWORD *)v57 + 4) = v58 + 1;
    *v58 = 10;
  }
  v59 = (llvm *)sub_22E808808("Type index local -> global map", 0x1EuLL, (uint64_t *)(a1 + 3232));
  v60 = (llvm::raw_ostream *)llvm::errs(v59);
  sub_22E47DAC0(v60, "  Base decl ID: ");
  v61 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v62 = (_BYTE *)*((_QWORD *)v61 + 4);
  if ((unint64_t)v62 >= *((_QWORD *)v61 + 3))
  {
    v61 = (llvm::raw_ostream *)llvm::raw_ostream::write(v61);
  }
  else
  {
    *((_QWORD *)v61 + 4) = v62 + 1;
    *v62 = 10;
  }
  sub_22E47DAC0(v61, "  Number of decls: ");
  v63 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v64 = (_BYTE *)*((_QWORD *)v63 + 4);
  if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
  {
    llvm::raw_ostream::write(v63);
  }
  else
  {
    *((_QWORD *)v63 + 4) = v64 + 1;
    *v64 = 10;
  }
  return sub_22E808808("Decl ID local -> global map", 0x1BuLL, (uint64_t *)(a1 + 3096));
}

uint64_t sub_22F2DFF80(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  v9 = sub_22F41B1AC(*(_QWORD *)(a1 + 120), a2, a3, *(_QWORD *)(*a4 + 16) - *(_QWORD *)(*a4 + 8), 0);
  v6 = sub_22E80A354(a1 + 152, (uint64_t *)&v9);
  v7 = *a4;
  *a4 = 0;
  result = v6[1];
  v6[1] = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

double sub_22F2DFFF4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x200000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x200000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 128) = a3;
  ++*a3;
  *(_QWORD *)(a1 + 136) = a4;
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 192;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 184) = 0x400000000;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x400000000;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  return result;
}

void sub_22F2E006C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E80A5BC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2E00D8(uint64_t a1, const void **a2, uint64_t a3, const void **a4)
{
  const void **v6;
  const void *v7;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 4;
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 != a4)
  {
    v6 = a2;
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1, v7);
    }
    while (v6 != a4);
  }
  return a1;
}

uint64_t sub_22F2E013C(uint64_t a1, unsigned int a2)
{
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x400000000;
  sub_22E80A6E8(a1 + 48, a2, 0);
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  if (*(_DWORD *)(a1 + 12) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  return a1;
}

uint64_t sub_22F2E01C4@<X0>(uint64_t *a1@<X4>, uint64_t *a2@<X5>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = operator new();
  v7 = *a1;
  *a1 = 0;
  v9 = *a2;
  v8 = a2[1];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = &off_24FA72628;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v7;
  *a3 = result;
  return result;
}

_QWORD *sub_22F2E0248(_QWORD *a1)
{
  llvm::StringMapImpl *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x1000000000;
  a1[4] = 0;
  v2 = (llvm::StringMapImpl *)(a1 + 4);
  a1[5] = 0;
  a1[6] = 0x1000000000;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24FA725C8;
  v4 = sub_22F2AC050((llvm::StringMapImpl *)a1, "raw", 3uLL);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 8);
  *(_QWORD *)(v5 + 8) = v3;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)operator new();
  *v7 = &off_24FA725F8;
  v8 = sub_22F2A6164(v2, "raw", 3uLL);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 8);
  *(_QWORD *)(v9 + 8) = v7;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_22F2E0344()
{
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F2E0358()
{
  return "raw";
}

void sub_22F2E036C()
{
  JUMPOUT(0x2348A0E9CLL);
}

const char *sub_22F2E0380()
{
  return "raw";
}

_OWORD *sub_22F2E0390(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  _OWORD *v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (void **)sub_22E80A9B4(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = operator new(0x30uLL);
    v6[2] = *a3;
    v9 = v12;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v9;
    *v8 = v6;
    v10 = **(_QWORD **)a1;
    v11 = (uint64_t *)v6;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void *sub_22F2E0438(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F2E0460((uint64_t *)a1, v2);
}

void *sub_22F2E0460(uint64_t *a1, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  void *result;
  uint64_t v12;
  uint64_t i;
  char v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
    v5 = a1[1];
  else
    v5 = *((unsigned __int8 *)a1 + 23);
  if (v5)
  {
    if ((v4 & 0x80u) == 0)
      v6 = a1;
    else
      v6 = (uint64_t *)*a1;
    if ((v4 & 0x80u) != 0)
      v4 = a1[1];
    v7 = v4 != 0;
    if (v4)
      v8 = (char *)v6 + 1;
    else
      v8 = v6;
    v9 = v4 - v7;
    v10 = (void *)*((_QWORD *)a2 + 4);
    if ((unint64_t)(v4 - v7) <= *((_QWORD *)a2 + 3) - (_QWORD)v10)
    {
      if (v4 != v7)
      {
        memcpy(v10, v8, v4 - v7);
        *((_QWORD *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)v8);
    }
  }
  else
  {
    sub_22E47DAC0(a2, ".");
  }
  result = sub_22E47DAC0(a2, ";");
  v12 = a1[9];
  for (i = a1[10]; v12 != i; v12 += 24)
  {
    v14 = *(_BYTE *)(v12 + 23);
    if (v14 >= 0)
      v15 = (_BYTE *)v12;
    else
      v15 = *(_BYTE **)v12;
    if (*v15 == 43)
    {
      v16 = v14;
      v17 = v14 & 0x7F;
      if (v16 >= 0)
        v18 = v17;
      else
        v18 = *(_QWORD *)(v12 + 8);
      v19 = sub_22E47DAC0(a2, "@");
      v20 = v19;
      v21 = v18 != 0;
      if (v18)
        v22 = v15 + 1;
      else
        v22 = v15;
      v23 = v18 - v21;
      v24 = *((_QWORD *)v19 + 3);
      result = (void *)*((_QWORD *)v19 + 4);
      if (v18 - v21 <= (unint64_t)(v24 - (_QWORD)result))
      {
        if (v18 != v21)
        {
          result = memcpy(result, v22, v18 - v21);
          *((_QWORD *)v20 + 4) += v23;
        }
      }
      else
      {
        result = (void *)llvm::raw_ostream::write(v20, (const char *)v22);
      }
    }
  }
  return result;
}

uint64_t sub_22F2E05EC(llvm *a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t *v4;
  llvm::raw_ostream *v5;

  result = llvm::errs(a1);
  v3 = *(uint64_t **)a1;
  v4 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (*(uint64_t **)a1 != v4)
  {
    v5 = (llvm::raw_ostream *)result;
    do
    {
      sub_22F2E0460(v3, v5);
      result = (uint64_t)sub_22E47DAC0(v5, "\n");
      v3 += 13;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_22F2E0650(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    v4 = result;
    if (*v1)
    {
      for (i = 16; i != 40; i += 4)
      {
        if (!*(_DWORD *)(v4 + i))
          break;
        result = llvm::opt::Option::matches();
        if ((result & 1) != 0)
          return result;
      }
      v1 = *(_QWORD **)v4;
      v2 = *(_QWORD **)(v4 + 8);
    }
    ++v1;
    result = v4;
    *(_QWORD *)v4 = v1;
  }
  return result;
}

void sub_22F2E06C8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22F2E06C8(a1, *a2);
    sub_22F2E06C8(a1, a2[1]);
    sub_22E54B71C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_22F2E0710(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22E80B11C(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *a2;
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v3) = *a2;
  if (v5)
    v5 = (const char *)strlen(v5);
  *(_QWORD *)(v4 + 16 * v3 + 8) = v5;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return v4 + 16 * (v3 + 1) - 16;
}

uint64_t *sub_22F2E0784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(a1 + 72);
  if (v3)
  {
    v4 = (v3 - 1) & (37 * a2);
    v5 = (uint64_t *)(v2 + 104 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -1)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v5 = (uint64_t *)(v2 + 104 * v4);
      v6 = *v5;
      if (*v5 == a2)
        goto LABEL_3;
    }
  }
  v5 = (uint64_t *)(v2 + 104 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 104 * v3))
    return 0;
  if (*((_BYTE *)v5 + 96))
    return v5 + 1;
  return 0;
}

uint64_t sub_22F2E081C(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 88))
  {
    v1 = result;
    result = llvm::deallocate_buffer(*(llvm **)(result + 64), (void *)(32 * *(unsigned int *)(result + 80)));
    *(_BYTE *)(v1 + 88) = 0;
  }
  return result;
}

uint64_t sub_22F2E0858(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (v2)
  {
    v4 = 104 * v2;
    v5 = (uint64_t)v3 + 8;
    do
    {
      if (*(_QWORD *)(v5 - 8) <= 0xFFFFFFFFFFFFFFFDLL)
        sub_22F2E081C(v5);
      v5 += 104;
      v4 -= 104;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 104 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

uint64_t sub_22F2E08E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = llvm::CrashRecoveryContext::GetCurrent((llvm::CrashRecoveryContext *)result);
    if (result)
    {
      v2 = result;
      result = operator new();
      *(_BYTE *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = v1;
      *(_QWORD *)result = &off_24FAA48E0;
      *(_QWORD *)(result + 8) = v2;
    }
  }
  return result;
}

void sub_22F2E0940(llvm::CrashRecoveryContextCleanup *a1)
{
  llvm::CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2E0964(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 sub_22F2E097C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  __n128 *v14;
  __n128 *v15;
  __n128 result;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  int v21;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24FAA4A70;
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = v4 + 5;
  v5 = (uint64_t)(v4 + 3);
  v4[4] = 0x400000000;
  v6 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
  v8 = *(_DWORD *)(v7 + 24);
  if (v8 >= *(_DWORD *)(v7 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8) = v4;
  ++*(_DWORD *)(v7 + 24);
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 == 63)
  {
    v10 = sub_22E4EF088(v5, a1 + 16, 1);
    v11 = v4[3] + 24 * *((unsigned int *)v4 + 8);
    v12 = *(_OWORD *)v10;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)v11 = v12;
    ++*((_DWORD *)v4 + 8);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  else if (v9 == 23)
  {
    v17 = sub_22E4EF088(v5, a1 + 16, 1);
    v18 = v4[3] + 24 * *((unsigned int *)v4 + 8);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v18 = v19;
    ++*((_DWORD *)v4 + 8);
    sub_22E80CED8(a1);
    sub_22E80F398((unsigned __int16 *)a1, 24, 24, v5, 1, 1);
    goto LABEL_6;
  }
  sub_22E80CF40(a1, v5, 1);
LABEL_6:
  v20[0] = 0;
  v20[1] = a2;
  v13 = *(_DWORD *)(a1 + 16);
  v21 = 1;
  LODWORD(v20[0]) = v13;
  v14 = (__n128 *)sub_22E4EF088(v5, (unint64_t)v20, 1);
  v15 = (__n128 *)(v4[3] + 24 * *((unsigned int *)v4 + 8));
  result = *v14;
  v15[1].n128_u64[0] = v14[1].n128_u64[0];
  *v15 = result;
  ++*((_DWORD *)v4 + 8);
  return result;
}

_QWORD *sub_22F2E0B8C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_24FAA4908;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_22F2E0BA0(_QWORD *a1)
{
  *a1 = off_24FAA4908;
  sub_22E834CB0(a1[1], a1[2]);
}

uint64_t sub_22F2E0BC8()
{
  uint64_t v0;

  return v0;
}

void sub_22F2E0BD8(_QWORD *a1)
{
  *a1 = off_24FAA4908;
  sub_22E834CB0(a1[1], a1[2]);
}

void sub_22F2E0C00()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2E0C20(uint64_t a1)
{
  sub_22E80D63C(*(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

void sub_22F2E0C2C(uint64_t a1)
{
  sub_22E80D77C(*(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

void sub_22F2E0C38(uint64_t a1)
{
  sub_22E80D938(*(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

void sub_22F2E0C44(uint64_t a1)
{
  sub_22E80DA40(*(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

void sub_22F2E0C50(uint64_t a1)
{
  sub_22E80DBA8(*(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

_WORD *sub_22F2E0C5C(uint64_t a1)
{
  return sub_22E80E970(*(_WORD **)(a1 + 8), a1);
}

uint64_t *sub_22F2E0C68(uint64_t a1)
{
  return sub_22E80EB28(*(_QWORD *)(a1 + 8), a1, 1, 0);
}

uint64_t *sub_22F2E0C7C(uint64_t a1)
{
  return sub_22F2E0C88(*(_QWORD *)(a1 + 8), a1);
}

uint64_t *sub_22F2E0C88(std::string::size_type a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
  sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)(a2 + 24), *(unsigned int *)(a2 + 32), 1, 0, 1);
  sub_22E80F0F0(a1, 1);
  v9 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = 0;
  v7 = a1 + 960;
  v8 = 0;
  sub_22E85B9CC(a1, &v9, &v5, 0, 0, 0);
  sub_22E8D1BC4(v7, (uint64_t)&v7);
  sub_22E80F94C(&v8);
  return sub_22E80F94C(&v6);
}

void sub_22F2E0D4C(uint64_t *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  sub_22F162AFC(*(_QWORD *)(*a1 + 8));
  v2 = *a1;
  v3 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v2 + 64) = v3;
  v4 = *a1;
  v5 = *(_OWORD *)(a1 + 5);
  *(_QWORD *)(v4 + 32) = a1[7];
  *(_OWORD *)(v4 + 16) = v5;
  sub_22E80FADC(*a1 + 2336, a1[8]);
  v6 = *a1;
  *(_WORD *)(v6 + 80) = *((_WORD *)a1 + 36);
  *(_DWORD *)(v6 + 82) = *(_DWORD *)((char *)a1 + 74);
  *((_BYTE *)a1 + 78) = 0;
}

uint64_t sub_22F2E0DC0(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = (unsigned int *)(a1 + 16);
  v5 = sub_22E4EF088(a2, a1 + 16, 1);
  v6 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
LABEL_2:
  v8 = *(unsigned __int16 *)(a1 + 32);
  while (v8 != 61)
  {
    if (!sub_22E80F398((unsigned __int16 *)a1, 60, 61, a2, 1, 0))
      return 0;
    v8 = *(unsigned __int16 *)(a1 + 32);
    if (v8 == 60)
    {
      if (sub_22F2E0DC0(a1, a2))
        goto LABEL_2;
      return 0;
    }
  }
  v9 = 1;
  v10 = sub_22E4EF088(a2, (unint64_t)v4, 1);
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  return v9;
}

__n128 sub_22F2E0EE4(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unsigned __int16 v14;

  sub_22F2E0D4C((uint64_t *)a1);
  v2 = *(_QWORD *)(a1 + 80);
  v14 = *(_WORD *)(a1 + 200);
  sub_22E885940(v2, &v14, 1, 3);
  v4 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = (char *)operator new[]();
    bzero(v6, v5);
    v7 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v7 == 1)
    {
      v8 = 0;
    }
    else
    {
      memmove(v6, (const void *)(*(_QWORD *)(a1 + 88) + 24), 24 * v7 - 24);
      v8 = v7 - 1;
    }
    v9 = *(_QWORD *)(a1 + 80);
    v10 = &v6[24 * v8];
    v11 = *(_QWORD *)(v9 + 32);
    *(_OWORD *)v10 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)v10 + 2) = v11;
    sub_22F1735E4(*(_QWORD *)(v9 + 8), v6, v7, 1, 1, 1);
    v13 = *(__n128 **)(a1 + 80);
    v12 = *(__n128 **)(a1 + 88);
    result = *v12;
    v13[2].n128_u64[0] = v12[1].n128_u64[0];
    v13[1] = result;
  }
  return result;
}

_QWORD *sub_22F2E0FE4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAA4950;
  v2 = (_QWORD *)a1[19];
  if (v2 != a1 + 21)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  return a1;
}

void sub_22F2E1038(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24FAA4950;
  v2 = (_QWORD *)a1[19];
  if (v2 != a1 + 21)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F2E109C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA4998;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

void sub_22F2E10DC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA4998;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F2E112C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA49E0;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

_QWORD *sub_22F2E1170(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA4A70;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

void sub_22F2E11B0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA4A70;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2E1204(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  __int16 v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)a1 = a2;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = v7;
  v8 = a2 + 2336;
  *(_QWORD *)(a1 + 64) = *(unsigned int *)(a2 + 2344);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 82);
  sub_22F1629F8(*(_QWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 78) = 1;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  *(_WORD *)(a1 + 200) = a3;
  v15 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 32);
  v9 = *(unsigned int *)(a2 + 2344);
  v10 = *(_DWORD *)(a2 + 80);
  v11 = *(_WORD *)(a2 + 84);
  sub_22F1629F8(*(_QWORD *)(a2 + 8));
  sub_22E80F398((unsigned __int16 *)a2, a3, a3, a1 + 88, 1, 0);
  sub_22F162AFC(*(_QWORD *)(a2 + 8));
  *(_OWORD *)(a2 + 48) = v15;
  *(_OWORD *)(a2 + 64) = v16;
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  sub_22E80FADC(v8, v9);
  *(_DWORD *)(a2 + 80) = v10;
  *(_WORD *)(a2 + 84) = v11;
  return a1;
}

uint64_t sub_22F2E1334(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22F2E133C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  char v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;

  v19 = (_BYTE *)(a1 + 944);
  v20 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v21 = a1;
  v22 = 1441813;
  v23 = 62;
  v25 = 0;
  v26 = 0;
  v24 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v19);
  if (*(_WORD *)(a1 + 32) == 22)
  {
    result = sub_22E811E8C((uint64_t)&v19);
    if ((result & 1) != 0)
      goto LABEL_8;
LABEL_7:
    result = sub_22E8118E4(a4, a2, a3 | ((unint64_t)HIDWORD(v26) << 32), a5, a6, 0, 0, a7, 0);
    goto LABEL_8;
  }
  v16 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, v14);
  v18 = v17;
  result = sub_22E811E8C((uint64_t)&v19);
  if ((result & 1) == 0 && !v18)
  {
    if (v16)
    {
      result = sub_22F2E1498(a4, a2, a3 | ((unint64_t)HIDWORD(v26) << 32), a5, a6, v16, a7);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  *v19 = v20;
  return result;
}

uint64_t sub_22F2E1498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;

  v14 = sub_22E8D1AC4(*(_QWORD *)(a1 + 16), 88);
  sub_22F2E2C44(v14, a2, a3, a4, a5, a6, a7);
  sub_22E828580(a1 + 24, v14);
  return sub_22E828580(a1 + 8, v14);
}

void sub_22F2E1524(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5, uint64_t a6, int a7, unsigned int a8)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE v30[32];
  _BYTE *v31;
  char v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[6];

  v42[4] = *MEMORY[0x24BDAC8D0];
  v31 = (_BYTE *)(a1 + 944);
  v32 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v33 = a1;
  v34 = 1441813;
  v35 = 62;
  v37 = 0;
  v38 = 0;
  v36 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v31);
  v16 = *(unsigned __int16 *)(a1 + 32);
  if (v16 == 5)
  {
    v29 = sub_22E811D4C(a1);
    v40 = v42;
    v41 = 0x400000000;
LABEL_5:
    v17 = *(unsigned __int16 *)(a1 + 32);
    while (v17 == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v19 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, v18);
      if (v20)
      {
        v39 = 22;
        sub_22E885940(a1, &v39, 1, 1);
        goto LABEL_26;
      }
      v21 = v19;
      if (v19)
      {
        v22 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v41;
        }
        *((_QWORD *)v40 + v22) = v21;
        LODWORD(v41) = v41 + 1;
      }
      v23 = *(_QWORD *)(a1 + 8);
      v17 = *(unsigned __int16 *)(a1 + 32);
      if ((*(_BYTE *)(*(_QWORD *)(v23 + 56) + 1) & 2) != 0 && v17 == 26)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(v23, (unsigned int *)(a1 + 16));
        goto LABEL_5;
      }
    }
    v27 = *(_DWORD *)(a1 + 16);
    if ((sub_22E8847B4(a1, 0x16u, 15, "", 0) & 1) == 0)
    {
      if (a7)
        v28 = a7;
      else
        v28 = a3;
      sub_22E812030(a4, a2, v28 | ((unint64_t)v27 << 32), a6, a7, v29, v40, v41, a8);
    }
    if (a5)
      *a5 = v27;
LABEL_26:
    if (v40 != v42)
      free(v40);
  }
  else if (v16 == 22)
  {
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1433, (uint64_t)v30);
    sub_22E3BB0B8((uint64_t)v30);
    sub_22E811E8C((uint64_t)&v31);
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v40);
    v24 = (unsigned __int8 *)v40;
    if (!v40)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC(v41);
      v40 = v24;
    }
    v24[*v24 + 1] = 4;
    v25 = v40;
    v26 = *(unsigned __int8 *)v40;
    *(_BYTE *)v40 = v26 + 1;
    v25[v26 + 2] = 5;
    sub_22E3BB0B8((uint64_t)&v40);
    LOWORD(v40) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v40, 1, 1);
  }
  *v31 = v32;
}

uint64_t sub_22F2E1828(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7, unsigned int a8)
{
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[32];
  _BYTE v38[32];
  _BYTE v39[32];
  unsigned __int8 *v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;

  v42 = (_BYTE *)(a1 + 944);
  v43 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v44 = a1;
  v45 = 1441813;
  v46 = 62;
  v48 = 0;
  v49 = 0;
  v47 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v42))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v40);
    v16 = v40;
    if (!v40)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v41);
      v40 = v16;
    }
    v16[*v16 + 1] = 4;
    v17 = v40;
    v18 = *v40;
    *v40 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = 21;
    result = sub_22E3BB0B8((uint64_t)&v40);
    goto LABEL_5;
  }
  if (*(_WORD *)(a1 + 32) != 5)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1647, (uint64_t)v39);
    v25 = (unsigned __int8 **)v39;
    goto LABEL_12;
  }
  v20 = sub_22E811D4C(a1);
  if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
  {
LABEL_13:
    LOWORD(v40) = 22;
    goto LABEL_14;
  }
  v21 = *(unsigned __int16 *)(a1 + 32);
  if (v21 == 5)
  {
    v22 = sub_22E811D4C(a1);
    if (*(_WORD *)(a1 + 32) == 61)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      v35 = v20;
      v23 = v22;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v24 = v23;
      v20 = v35;
      v21 = *(unsigned __int16 *)(a1 + 32);
      goto LABEL_16;
    }
    sub_22E884578(a1, (int *)(a1 + 16), 1648, (uint64_t)v38);
    v25 = (unsigned __int8 **)v38;
LABEL_12:
    sub_22E3BB0B8((uint64_t)v25);
    goto LABEL_13;
  }
  v24 = 0;
LABEL_16:
  if (v21 == 61)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1648, (uint64_t)v37);
    v25 = (unsigned __int8 **)v37;
    goto LABEL_12;
  }
  if (v21 != 65)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v40);
    v28 = v40;
    if (!v40)
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC(v41);
      v40 = v28;
    }
    v28[*v28 + 1] = 4;
    v29 = v40;
    v30 = *v40;
    *v40 = v30 + 1;
    *(_QWORD *)&v29[8 * v30 + 16] = 65;
    v25 = &v40;
    goto LABEL_12;
  }
  v36 = v24;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v26 = *(unsigned __int16 *)(a1 + 32);
  if (v26 != 5)
  {
    if (v26 == 22)
    {
      v27 = 0;
      goto LABEL_27;
    }
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v40);
    v32 = v40;
    if (!v40)
    {
      v32 = (unsigned __int8 *)sub_22E3B8AAC(v41);
      v40 = v32;
    }
    v32[*v32 + 1] = 4;
    v33 = v40;
    v34 = *v40;
    *v40 = v34 + 1;
    *(_QWORD *)&v33[8 * v34 + 16] = 22;
    sub_22E3BB0B8((uint64_t)&v40);
    LOWORD(v40) = 22;
LABEL_14:
    result = sub_22E885940(a1, (unsigned __int16 *)&v40, 1, 1);
    goto LABEL_5;
  }
  v27 = sub_22E811D4C(a1);
LABEL_27:
  result = sub_22E811E8C((uint64_t)&v42);
  if ((result & 1) == 0)
  {
    v31 = HIDWORD(v49);
    if (a5)
      *a5 = HIDWORD(v49);
    result = sub_22E817424(a4, a2, a3 | ((unint64_t)v31 << 32), a6, a7, v20, v36, v27, a8);
  }
LABEL_5:
  *v42 = v43;
  return result;
}

uint64_t sub_22F2E1B94(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v2 = *(unsigned int *)(a1 + 16);
  result = sub_22F2E1C14(a1);
  if ((_DWORD)result)
  {
    v4 = result;
    sub_22E88453C(a1, v2, 1961, (uint64_t)v7);
    v5 = v2 | (v4 << 32);
    v6 = v7[0];
    if (!v7[0])
    {
      v6 = sub_22E3B8AAC(v7[1]);
      v7[0] = v6;
    }
    sub_22E4D6448(v6 + 336, v5, 1);
    return sub_22E3BB0B8((uint64_t)v7);
  }
  return result;
}

uint64_t sub_22F2E1C14(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  BOOL v4;

  for (result = 0; ; result = *(unsigned int *)(a1 + 40))
  {
    v3 = *(unsigned __int16 *)(a1 + 32);
    if (v3 <= 0x172)
      break;
    if (v3 - 371 > 4)
      return result;
LABEL_12:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  v4 = v3 - 303 > 7 || ((1 << (v3 - 47)) & 0xAF) == 0;
  if (!v4 || v3 == 80 || v3 == 110)
    goto LABEL_12;
  return result;
}

unint64_t sub_22F2E1CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char v21;
  int v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v28[32];
  char v29;
  _BYTE v30[32];
  _BYTE v31[32];
  _BYTE v32[32];
  _BYTE v33[32];
  _BYTE v34[39];
  unsigned __int8 v35;
  unsigned __int8 *v36;
  _BYTE v37[36];
  int v38;
  void *v39;
  __int128 v40;
  _QWORD v41[65];

  v41[64] = *MEMORY[0x24BDAC8D0];
  v4 = (int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v6 = v5 + v3;
  if (!v5)
    v5 = *(_DWORD *)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 32) - 399 >= 0x29)
    v7 = v6;
  else
    v7 = v5;
  *a2 = v3 | (v7 << 32);
  if (*(_WORD *)(a1 + 32) != 7)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1545, (uint64_t)v37);
    sub_22E3BB0B8((uint64_t)v37);
    LODWORD(v39) = 1441857;
    sub_22E885940(a1, (unsigned __int16 *)&v39, 2, 7);
    return 0;
  }
  v39 = v41;
  v40 = xmmword_22F45DFC0;
  sub_22E4CE690(&v39, (*(_DWORD *)(a1 + 20) + 1));
  v36 = (unsigned __int8 *)v39;
  v35 = 0;
  v8 = sub_22F1414C0((uint64_t)v4, (uint64_t *)&v36, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), &v35);
  if (v35)
    goto LABEL_8;
  v11 = v8;
  if (!v8)
    goto LABEL_22;
  v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = v36[v12];
    if ((word_22F4ADB24[v14] & 8) == 0)
      break;
    v13 = (char)v14 + 10 * v13 - 48;
    if (v8 == ++v12)
    {
      LODWORD(v12) = v8;
      break;
    }
  }
  if (!(_DWORD)v12)
  {
LABEL_22:
    sub_22E884578(a1, v4, 1545, (uint64_t)v34);
    v15 = v34;
    goto LABEL_23;
  }
  if ((_DWORD)v12 == v8)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
    if (v13)
    {
      v9 = v13;
      goto LABEL_9;
    }
    sub_22E884578(a1, v4, 1782, (uint64_t)v33);
    v23 = v33;
    goto LABEL_40;
  }
  v16 = v36[v12];
  v17 = v16 == 95 || v16 == 46;
  if (!v17 || (v18 = v12 + 1, (_DWORD)v12 + 1 == v8))
  {
    sub_22E884578(a1, v4, 1545, (uint64_t)v32);
    v15 = v32;
    goto LABEL_23;
  }
  v19 = 0;
  if (v18 < v8)
  {
    v20 = &v36[v18];
    while (1)
    {
      v22 = *v20++;
      v21 = v22;
      if ((word_22F4ADB24[v22] & 8) == 0)
        break;
      v19 = (v21 + 10 * v19 - 48);
      if (v8 == ++v18)
        goto LABEL_37;
    }
  }
  if (v18 != v8)
  {
    v24 = v36[v18];
    if (v24 == 46 || v24 == 95)
    {
      if (v16 != v24)
      {
        sub_22E884578(a1, v4, 1952, (uint64_t)&v29);
        sub_22E3BB0B8((uint64_t)&v29);
      }
      v25 = v18 + 1;
      if (v25 < v11)
      {
        v26 = 0;
        while (1)
        {
          v27 = v36[v25];
          if ((word_22F4ADB24[v27] & 8) == 0)
            break;
          v26 = (char)v27 + 10 * v26 - 48;
          if (v11 == ++v25)
            goto LABEL_53;
        }
      }
      if ((_DWORD)v25 == v11)
      {
LABEL_53:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
        v9 = v13 | (unint64_t)(v19 << 32) | 0x8000000000000000;
        goto LABEL_9;
      }
      sub_22E884578(a1, v4, 1545, (uint64_t)v28);
      v15 = v28;
    }
    else
    {
      sub_22E884578(a1, v4, 1545, (uint64_t)v30);
      v15 = v30;
    }
LABEL_23:
    sub_22E3BB0B8((uint64_t)v15);
    v38 = 1441857;
    sub_22E885940(a1, (unsigned __int16 *)&v38, 2, 7);
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
LABEL_37:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  if (!(v13 | v19))
  {
    sub_22E884578(a1, v4, 1782, (uint64_t)v31);
    v23 = v31;
LABEL_40:
    sub_22E3BB0B8((uint64_t)v23);
    goto LABEL_8;
  }
  v9 = v13 | (unint64_t)(v19 << 32) | 0x8000000000000000;
LABEL_9:
  if (v39 != v41)
    free(v39);
  return v9;
}

uint64_t sub_22F2E20A4(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  _BYTE v10[32];

  v2 = sub_22E8836FC(a1, 1, 0);
  if (!v2)
    return 0;
  if (v2 != 1)
  {
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1586, (uint64_t)v10);
    sub_22E3BB0B8((uint64_t)v10);
    return 0;
  }
  v3 = sub_22E80F788(a1);
  sub_22E80F788(a1);
  LOWORD(v9[0]) = 20;
  sub_22E885940(a1, (unsigned __int16 *)v9, 1, 0);
  v4 = sub_22E80F788(a1);
  sub_22E88453C(a1, v3, 1447, (uint64_t)v9);
  v5 = v3 | (unint64_t)(v4 << 32);
  v6 = v9[0];
  if (!v9[0])
  {
    v6 = sub_22E3B8AAC(v9[1]);
    v9[0] = v6;
  }
  v7 = 1;
  sub_22E4D6448(v6 + 336, v5, 1);
  sub_22E3BB0B8((uint64_t)v9);
  return v7;
}

uint64_t sub_22F2E2198(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  __int16 *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int16 v12;
  __int16 v13;
  __int16 v14;

  v1 = result;
  while (2)
  {
    while (1)
    {
      v2 = *(unsigned __int16 *)(v1 + 32);
      if (v2 <= 0x22)
        break;
      if (*(unsigned __int16 *)(v1 + 32) <= 0x5Bu)
      {
        switch(v2)
        {
          case '#':
LABEL_17:
            if ((*(_WORD *)(v1 + 34) & 1) == 0)
              goto LABEL_31;
            break;
          case 'H':
            v4 = *(_QWORD *)(v1 + 8);
            v5 = *(_QWORD *)(v4 + 2816);
            if (v5 >= *(unsigned int *)(v4 + 2784))
              v6 = sub_22F162D2C(v4, 1u);
            else
              v6 = *(_QWORD *)(v4 + 2776) + 24 * v5;
            result = sub_22F140B7C(v6, 5);
            if (!(_DWORD)result)
              goto LABEL_31;
            break;
          case '>':
            goto LABEL_44;
          default:
            goto LABEL_31;
        }
        if (*(_BYTE *)(v1 + 2624))
          return result;
        goto LABEL_31;
      }
      if (v2 == 92)
      {
        if ((*(_WORD *)(v1 + 34) & 1) == 0)
          goto LABEL_31;
        v8 = *(_QWORD *)(v1 + 8);
        v9 = *(_QWORD *)(v8 + 2816);
        result = v9 >= *(unsigned int *)(v8 + 2784) ? sub_22F162D2C(v8, 1u) : *(_QWORD *)(v8 + 2776) + 24 * v9;
        if (*(_WORD *)(result + 16) != 139)
          goto LABEL_31;
      }
      else
      {
        if (v2 != 139)
        {
          if (v2 - 436 < 3)
            return result;
          goto LABEL_31;
        }
        if ((*(_WORD *)(v1 + 34) & 1) == 0)
          goto LABEL_31;
      }
      if (!*(_BYTE *)(v1 + 2624) || *(_QWORD *)(v1 + 2688))
        return result;
LABEL_31:
      result = sub_22E80F0F0(v1, 0);
    }
    switch(*(_WORD *)(v1 + 32))
    {
      case 0x13:
        sub_22E80F788(v1);
        v13 = 20;
        v3 = &v13;
        goto LABEL_20;
      case 0x14:
      case 0x16:
        goto LABEL_31;
      case 0x15:
        sub_22E80F720(v1);
        v14 = 22;
        v3 = &v14;
LABEL_20:
        result = sub_22E885940(v1, (unsigned __int16 *)v3, 1, 0);
        continue;
      case 0x17:
        sub_22E80CED8(v1);
        v12 = 24;
        result = sub_22E885940(v1, &v12, 1, 0);
        v7 = *(unsigned __int16 *)(v1 + 32);
        if (v7 > 0x40)
        {
          if (v7 != 65 && v7 != 151)
            return result;
          continue;
        }
        if (v7 == 23)
          continue;
        if (v7 == 62)
        {
LABEL_44:
          v11 = *(_DWORD *)(v1 + 16);
          v10 = (unsigned int *)(v1 + 16);
          v10[6] = v11;
          return sub_22F18FB4C(*((_QWORD *)v10 - 1), v10);
        }
        return result;
      case 0x18:
        return result;
      default:
        if (v2 == 32)
          goto LABEL_17;
        if (v2 == 1)
          return result;
        goto LABEL_31;
    }
  }
}

uint64_t sub_22F2E23B4(uint64_t a1, uint64_t a2, int ****a3)
{
  if ((sub_22E81CF54(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_22E81CFE4(a1, a2, a3);
}

uint64_t sub_22F2E240C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char v14;

  v14 = 0;
  if (sub_22E828854(a1, &v14))
  {
    v6 = *(_DWORD *)(a1 + 16);
    v7 = sub_22E80FC30(a1, 0, 5, 3, 0, 0);
    v8 = sub_22F32DA5C(*(_QWORD **)(a1 + 88), v6, 1u, 1, v7, a2 | ((unint64_t)*(unsigned int *)(a1 + 16) << 32));
  }
  else
  {
    v8 = sub_22F2E50C0(a1, 0);
  }
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 56) + 1) & 2) != 0 && *(_WORD *)(a1 + 32) == 26)
  {
    v12 = *(_DWORD *)(a1 + 16);
    v11 = (unsigned int *)(a1 + 16);
    v11[6] = v12;
    sub_22F18FB4C(v10, v11);
    *a3 = v11[6];
  }
  return v9;
}

uint64_t sub_22F2E24E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = (_BYTE *)(a1 + 944);
  v6 = *(_BYTE *)(a1 + 944);
  v2 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v7 = a1;
  v8 = 1441813;
  v9 = 62;
  v11 = 0;
  v12 = 0;
  v10 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v5, 15, "", 0) & 1) == 0)
  {
    v4 = sub_22F2E50C0(a1, 0);
    if ((v4 & 1) != 0)
    {
      sub_22F2F18E0((uint64_t)&v5);
      v2 = 1;
    }
    else if (sub_22E811E8C((uint64_t)&v5))
    {
      v2 = 1;
    }
    else
    {
      v2 = v4;
    }
  }
  *v5 = v6;
  return v2;
}

uint64_t sub_22F2E25BC(uint64_t a1, unint64_t *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  _BYTE *v17;
  char v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v4 = *(_DWORD *)(a1 + 40);
  v17 = (_BYTE *)(a1 + 944);
  v18 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v19 = a1;
  v20 = 1441813;
  v21 = 62;
  v23 = 0;
  v24 = 0;
  v22 = sub_22E80F720;
  result = sub_22E811DE8((uint64_t)&v17);
  if ((result & 1) == 0)
  {
    v7 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, v6);
    if (v8)
    {
      LOWORD(v16[0]) = 22;
      result = sub_22E885940(a1, (unsigned __int16 *)v16, 1, 1);
    }
    else
    {
      v9 = v7;
      result = sub_22E811E8C((uint64_t)&v17);
      v10 = HIDWORD(v24);
      if (HIDWORD(v24))
      {
        a2[17] = v24 | ((unint64_t)HIDWORD(v24) << 32);
        *((_DWORD *)a2 + 23) = v10;
        v11 = *a2;
        result = (*a2 >> 12) & 0x3F;
        if ((_DWORD)result)
        {
          if ((_DWORD)result != 50)
          {
            v12 = sub_22F2F2CB0(result);
            sub_22E88453C(a1, v4, 3658, (uint64_t)v16);
            v13 = (unsigned __int8 *)v16[0];
            if (!v16[0])
            {
              v13 = (unsigned __int8 *)sub_22E3B8AAC(v16[1]);
              v16[0] = v13;
            }
            v13[*v13 + 1] = 1;
            v14 = v16[0];
            v15 = *(unsigned __int8 *)v16[0];
            *(_BYTE *)v16[0] = v15 + 1;
            *(_QWORD *)(v14 + 8 * v15 + 16) = v12;
            result = sub_22E3BB0B8((uint64_t)v16);
          }
        }
        else
        {
          *((_DWORD *)a2 + 30) = v4;
          *((_DWORD *)a2 + 33) = v4;
          *a2 = v11 & 0xFFFFFFFFFFDC0FFFLL | 0x25000;
          a2[1] = v9;
        }
      }
    }
  }
  *v17 = v18;
  return result;
}

unint64_t sub_22F2E2774(uint64_t a1)
{
  unint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  do
  {
    while (1)
    {
      result = 0;
      v3 = *(unsigned __int16 *)(a1 + 32);
      if (v3 > 0x6A)
      {
        switch(*(_WORD *)(a1 + 32))
        {
          case 0x12F:
          case 0x130:
          case 0x131:
          case 0x132:
          case 0x133:
          case 0x134:
          case 0x136:
          case 0x138:
          case 0x139:
          case 0x13A:
          case 0x13B:
          case 0x13C:
          case 0x13E:
          case 0x13F:
          case 0x140:
          case 0x141:
          case 0x142:
          case 0x143:
          case 0x144:
          case 0x145:
          case 0x146:
          case 0x147:
          case 0x148:
          case 0x149:
          case 0x14A:
          case 0x14B:
          case 0x14C:
          case 0x14F:
          case 0x150:
          case 0x151:
          case 0x152:
          case 0x153:
          case 0x154:
          case 0x155:
          case 0x156:
          case 0x157:
          case 0x158:
          case 0x159:
          case 0x15A:
          case 0x162:
          case 0x163:
          case 0x166:
          case 0x167:
          case 0x16E:
          case 0x16F:
          case 0x170:
          case 0x171:
          case 0x172:
          case 0x173:
          case 0x174:
          case 0x177:
          case 0x17C:
          case 0x182:
          case 0x187:
          case 0x190:
            return 1;
          case 0x135:
          case 0x137:
          case 0x13D:
          case 0x14D:
          case 0x14E:
          case 0x15B:
          case 0x15C:
          case 0x15D:
          case 0x15E:
          case 0x15F:
          case 0x160:
          case 0x161:
          case 0x164:
          case 0x165:
          case 0x168:
          case 0x169:
          case 0x16A:
          case 0x16B:
          case 0x16C:
          case 0x16D:
          case 0x175:
          case 0x176:
          case 0x178:
          case 0x179:
          case 0x17A:
          case 0x17B:
          case 0x17D:
          case 0x17E:
          case 0x17F:
          case 0x180:
          case 0x181:
          case 0x183:
          case 0x184:
          case 0x185:
          case 0x186:
          case 0x188:
          case 0x189:
          case 0x18A:
          case 0x18B:
          case 0x18C:
          case 0x18D:
          case 0x18E:
          case 0x18F:
            return result;
          default:
            v4 = v3 - 107;
            if (v4 > 0x35)
              goto LABEL_32;
            if (v4 == 45)
              goto LABEL_12;
            if (((1 << (v3 - 107)) & 0x32000000AC0B8FLL) != 0)
              return 1;
            if (v4 == 35)
              return ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) >> 30) & 1;
LABEL_32:
            v12 = v3 - 176;
            if (v12 > 0x1F || ((1 << v12) & 0x816004FF) == 0)
              return result;
            return 1;
        }
      }
      v5 = v3 - 46;
      if (v5 > 0x3A)
        goto LABEL_10;
      if (v5 != 25)
        break;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 2816);
      if (v7 >= *(unsigned int *)(v6 + 2784))
        v10 = sub_22F162D2C(v6, 1u);
      else
        v10 = *(_QWORD *)(v6 + 2776) + 24 * v7;
      if (*(_WORD *)(v10 + 16) == 140)
        return 0;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 2816);
      v11 = v9 >= *(unsigned int *)(v8 + 2784) ? sub_22F162D2C(v8, 1u) : *(_QWORD *)(v8 + 2776) + 24 * v9;
      if (*(_WORD *)(v11 + 16) == 132)
        return 0;
      if ((sub_22E88B7AC(a1) & 1) != 0)
        return 1;
    }
    if (((1 << (v3 - 46)) & 0x4D7854600000000) != 0)
      return 1;
    if (v3 == 46)
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) >> 6) & 1;
LABEL_10:
    if (v3 != 5)
      return result;
    if ((sub_22E822180(a1) & 1) != 0)
      return 1;
LABEL_12:
    if ((sub_22E88B7AC(a1) & 1) != 0)
      return 1;
  }
  while (*(_WORD *)(a1 + 32) != 5);
  return 0;
}

uint64_t *sub_22F2E2950(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v5 = sub_22E828CF0(a1 + 112, a2, 1);
  v6 = *(_QWORD *)(a1 + 112) + 120 * *(unsigned int *)(a1 + 120);
  v7 = *(_QWORD *)v5;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  result = sub_22E828D58((uint64_t *)(v6 + 24), (uint64_t *)(v5 + 24));
  v9 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  v10 = *(_OWORD *)(v5 + 64);
  v11 = *(_OWORD *)(v5 + 80);
  v12 = *(_OWORD *)(v5 + 96);
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v5 + 112);
  *(_OWORD *)(v6 + 80) = v11;
  *(_OWORD *)(v6 + 96) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  ++*(_DWORD *)(a1 + 120);
  if (a3)
    *(_DWORD *)(a1 + 76) = a3;
  return result;
}

uint64_t sub_22F2E29F0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2816);
  if (v3 >= *(unsigned int *)(v2 + 2784))
    v4 = sub_22F162D2C(v2, 1u);
  else
    v4 = *(_QWORD *)(v2 + 2776) + 24 * v3;
  v5 = *(unsigned __int16 *)(v4 + 16);
  if (((v5 - 79) > 0x31 || ((1 << (v5 - 79)) & 0x2001060624221) == 0)
    && (v5 - 356) >= 2)
  {
    if (v5 != 5)
      return 0;
    v8 = *(_QWORD *)(v4 + 8);
    if (v8 != *(_QWORD *)(a1 + 368) && v8 != *(_QWORD *)(a1 + 352) && v8 != *(_QWORD *)(a1 + 360))
      return 0;
  }
  *(_WORD *)(a1 + 32) = 355;
  return 1;
}

unsigned int *sub_22F2E2AB8(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return (unsigned int *)sub_22F2633B0((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22E827EEC((uint64_t)v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t sub_22F2E2C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  char v7;
  __int16 v10;
  int v11;

  v7 = a7;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v10 = sub_22F1ACD3C(a2, a4, a7, 0);
  v11 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((v7 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v10;
  *(_BYTE *)(a1 + 30) = BYTE2(v11);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 0x200000;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  *(_QWORD *)(a1
            + 8 * (unsigned __int16)*(_QWORD *)(a1 + 48)
            + 96 * ((*(_QWORD *)(a1 + 48) >> 18) & 1)
            + 16 * ((*(_QWORD *)(a1 + 48) >> 19) & 1)
            + 16 * ((*(_QWORD *)(a1 + 48) >> 22) & 1)
            + 80) = a6;
  return a1;
}

uint64_t sub_22F2E2D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, const void *a7, uint64_t a8, unsigned int a9)
{
  __int16 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v13 = sub_22F1ACD3C(a2, a4, a9, 0);
  v14 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((a9 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v13;
  *(_BYTE *)(a1 + 30) = BYTE2(v14);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 0x400000;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = a1 + 8 * (unsigned __int16)v15 + 96 * ((v15 >> 18) & 1) + 16 * ((v15 >> 19) & 1);
  *(_QWORD *)(v16 + 80) = a6;
  v16 += 80;
  *(_DWORD *)(v16 + 8) = a8;
  memcpy((void *)(v16 + 16 * ((v15 >> 22) & 1)), a7, 8 * a8);
  return a1;
}

uint64_t sub_22F2E2DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 0;
  v8 = sub_22F1ACD3C(a2, 0, 3u, 0);
  v9 = (((*(unsigned __int8 *)(a1 + 30) >> 7) & 1) << 23) | 0x7B0000;
  *(_WORD *)(a1 + 28) = v8;
  *(_BYTE *)(a1 + 30) = BYTE2(v9);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 0x100000;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = a1 + 8 * (unsigned __int16)v10 + 96 * ((v10 >> 18) & 1) + 80;
  v12 = (v10 >> 19) & 1;
  if ((v10 & 0x400000) != 0)
    v13 = *(_DWORD *)(v11 + 16 * v12 + 8);
  else
    v13 = (v10 >> 21) & 1;
  v14 = (_QWORD *)(v11 + 16 * v12 + 16 * ((v10 >> 22) & 1) + 8 * v13);
  *v14 = a4;
  v14[1] = a5;
  return a1;
}

uint64_t sub_22F2E2EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, __int128 *a7, __int128 *a8, _OWORD *a9, int a10, uint64_t a11, unsigned int a12, int a13, int a14, uint64_t a15)
{
  __int16 v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v19 = sub_22F1ACD3C(a2, a4, a12, 0);
  v20 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((a12 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v19;
  *(_BYTE *)(a1 + 30) = BYTE2(v20);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 0x40001;
  *(_DWORD *)(a1 + 56) = a10;
  *(_QWORD *)(a1 + 64) = a11;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  *(_QWORD *)(a1 + 80) = a6 | 2;
  v21 = a1 + 80 + 8 * *(unsigned __int16 *)(a1 + 48);
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)v21 = 0u;
  *(_DWORD *)(v21 + 80) = 0;
  *(_DWORD *)(v21 + 84) = a14;
  *(_QWORD *)(v21 + 88) = a15;
  v22 = *a7;
  *(_OWORD *)(v21 + 12) = *(__int128 *)((char *)a7 + 12);
  *(_OWORD *)v21 = v22;
  v23 = *a8;
  *(_OWORD *)(v21 + 40) = *(__int128 *)((char *)a8 + 12);
  *(_OWORD *)(v21 + 28) = v23;
  v24 = *(_OWORD *)((char *)a9 + 12);
  *(_OWORD *)(v21 + 56) = *a9;
  *(_OWORD *)(v21 + 68) = v24;
  return a1;
}

uint64_t sub_22F2E2FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  __int16 v13;
  int v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v13 = sub_22F1ACD3C(a2, a4, a9, 0);
  v14 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((a9 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v13;
  *(_BYTE *)(a1 + 30) = BYTE2(v14);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 3;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  *(_QWORD *)(a1 + 80) = a6 | 2;
  *(_QWORD *)(a1 + 88) = a7 | 2;
  *(_QWORD *)(a1 + 96) = a8 | 2;
  return a1;
}

uint64_t sub_22F2E30A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char a8, char a9, unsigned int a10)
{
  __int16 v14;
  int v15;
  uint64_t v16;
  char v17;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v14 = sub_22F1ACD3C(a2, a4, a10, 0);
  v15 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((a10 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v14;
  *(_BYTE *)(a1 + 30) = BYTE2(v15);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | 0x80001;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  *(_QWORD *)(a1 + 80) = a6 | 2;
  v16 = a1 + 80 + 8 * (unsigned __int16)*(_QWORD *)(a1 + 48) + 96 * ((*(_QWORD *)(a1 + 48) >> 18) & 1);
  *(_QWORD *)v16 = a7;
  if (a9)
    v17 = 2;
  else
    v17 = 0;
  *(_BYTE *)(v16 + 8) = v17 | a8 | *(_BYTE *)(v16 + 8) & 0xFC;
  return a1;
}

void sub_22F2E3198(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2E3204((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t *sub_22F2E3204(uint64_t *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = *result;
    v4 = *result + 120 * v2;
    do
    {
      v5 = *(_QWORD *)v3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      v6 = *(_OWORD *)(v3 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 48) = v6;
      v7 = *(_OWORD *)(v3 + 64);
      v8 = *(_OWORD *)(v3 + 80);
      v9 = *(_OWORD *)(v3 + 96);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v3 + 112);
      *(_OWORD *)(a2 + 80) = v8;
      *(_OWORD *)(a2 + 96) = v9;
      *(_OWORD *)(a2 + 64) = v7;
      v3 += 120;
      a2 += 120;
    }
    while (v3 != v4);
    v10 = *((unsigned int *)result + 2);
    if ((_DWORD)v10)
    {
      v11 = *result - 96;
      v12 = 120 * v10;
      do
      {
        result = sub_22E80F94C((uint64_t *)(v11 + v12));
        v12 -= 120;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_22F2E32AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 24 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F2E3384(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

void sub_22F2E3408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = v4 + 368 * *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = v5 + 32;
  *(_QWORD *)(v5 + 24) = 0x400000000;
  v7 = *(_QWORD *)(v6 + 3200);
  *(_QWORD *)(v6 + 3200) = v5 + 8;
  *(_QWORD *)(v5 + 352) = v7;
  *(_BYTE *)(v5 + 360) = 1;
  sub_22E829060(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2E34CC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 80 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 80 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 80 * v10), (const void *)(*(_QWORD *)a2 + 80 * v10), *(_QWORD *)a2 + 80 * v11 - (*(_QWORD *)a2 + 80 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F2E35F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = sub_22E83E898(a1, 0);
  sub_22E885C30(a1, 8);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    if (*(_WORD *)(a1 + 32) == 23)
      v5 = *(_DWORD *)(a1 + 16);
    else
      v5 = 0;
    v6 = sub_22F32941C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(a2 + 88), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v5);
  }
  v22 = 0;
  v23 = 0;
  v24 = a1 + 960;
  v25 = 0;
  sub_22E8103B4(a1, &v22, 0);
  if (*(_WORD *)(a1 + 32) == 23)
  {
    if (!*(_BYTE *)(a2 + 584))
    {
      sub_22EA7E84C(*(_QWORD **)(a2 + 224), *(_QWORD *)(a2 + 576), 0);
      *(_BYTE *)(a2 + 584) = 1;
    }
    if ((_DWORD)v22 && HIDWORD(v22))
    {
      sub_22E8175C8(a1, &v22, 0);
      sub_22E820B10(&v22);
    }
    v14 = (_BYTE *)(a1 + 944);
    v15 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v16 = a1;
    v17 = 1572887;
    v18 = 62;
    v20 = 0;
    v21 = 0;
    v19 = sub_22E80CED8;
    sub_22E811DE8((uint64_t)&v14);
    v7 = 0;
    while (1)
    {
      while (1)
      {
        v8 = *(unsigned __int16 *)(a1 + 32);
        if (v8 > 0x1B3)
          break;
        if (v8 == 24)
        {
          if (!v7)
            goto LABEL_28;
        }
        else if (v8 == 1)
        {
          goto LABEL_28;
        }
LABEL_21:
        v10 = 0;
        v11 = 0;
        v12 = a1 + 960;
        v13 = 0;
        sub_22E8103B4(a1, &v10, 0);
        sub_22E887B48(a1, &v10, 0);
        sub_22E8D1BC4(v12, (uint64_t)&v12);
        sub_22E80F94C(&v13);
        sub_22E80F94C(&v11);
      }
      if (v8 != 436)
      {
        if (v8 == 438)
        {
          if (!v7)
          {
LABEL_28:
            sub_22E811E8C((uint64_t)&v14);
            if (v6)
              v6 = sub_22F329600(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v6, SHIDWORD(v21));
            *v14 = v15;
            goto LABEL_31;
          }
          --v7;
        }
        else
        {
          if (v8 != 437)
            goto LABEL_21;
          ++v7;
        }
      }
      v10 = 0;
      v26 = 5;
      sub_22E88668C(a1, &v10, &v26);
    }
  }
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)a2 |= 0x20uLL;
  sub_22E887B48(a1, &v22, a2);
  if (v6)
    v6 = sub_22F329600(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v6, 0);
LABEL_31:
  sub_22E8D1BC4(v24, (uint64_t)&v24);
  sub_22E80F94C(&v25);
  sub_22E80F94C(&v23);
  sub_22E885CF4(a1);
  return v6;
}

uint64_t sub_22F2E38C0(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];
  uint64_t v20;

  v2 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 40);
  sub_22E885C30(a1, 8);
  if (*(_WORD *)(a1 + 32) == 23)
    v4 = *v2;
  else
    v4 = 0;
  v5 = sub_22EC75368(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v3, v4);
  if (*(_WORD *)(a1 + 32) == 23)
  {
    v16 = (_BYTE *)(a1 + 944);
    LOBYTE(v17) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v18 = a1;
    LODWORD(v19[0]) = 1572887;
    WORD2(v19[0]) = 62;
    v19[2] = 0;
    v20 = 0;
    v19[1] = (uint64_t)sub_22E80CED8;
    sub_22E811DE8((uint64_t)&v16);
    if (*(_WORD *)(a1 + 32) == 24
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x400000000000) != 0)
    {
      sub_22E88453C(a1, v3, 1550, (uint64_t)&v12);
      v6 = v3 | ((unint64_t)*(unsigned int *)(a1 + 16) << 32);
      v7 = v12;
      if (!v12)
      {
        v7 = sub_22E3B8AAC(v13);
        v12 = v7;
      }
      sub_22E4D6448(v7 + 336, v6, 1);
      sub_22E3BB0B8((uint64_t)&v12);
    }
    while (1)
    {
      v8 = *(unsigned __int16 *)(a1 + 32);
      if ((v8 - 436) <= 2)
      {
        if ((sub_22F2F1928(a1) & 1) != 0)
          break;
        v8 = *(unsigned __int16 *)(a1 + 32);
      }
      if (v8 == 1 || v8 == 24)
        break;
      v12 = 0;
      v13 = 0;
      v14 = a1 + 960;
      v15 = 0;
      sub_22E8103B4(a1, &v12, 0);
      sub_22E8221D8((uint64_t *)a1, (uint64_t)&v12);
      sub_22E887B48(a1, &v12, 0);
      sub_22E8D1BC4(v14, (uint64_t)&v14);
      sub_22E80F94C(&v15);
      sub_22E80F94C(&v13);
    }
    sub_22E811E8C((uint64_t)&v16);
    v10 = sub_22EC75740(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v5, SHIDWORD(v20));
    *v16 = v17;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = a1 + 960;
    v19[0] = 0;
    sub_22E8103B4(a1, &v16, 0);
    sub_22E8221D8((uint64_t *)a1, (uint64_t)&v16);
    sub_22E887B48(a1, &v16, 0);
    v10 = sub_22EC75740(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v5, 0);
    sub_22E8D1BC4(v18, (uint64_t)&v18);
    sub_22E80F94C(v19);
    sub_22E80F94C(&v17);
  }
  sub_22E885CF4(a1);
  return v10;
}

double sub_22F2E3B50(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  _QWORD *v8;
  double result;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  BOOL v17;

  v8 = *(_QWORD **)(a1 + 8);
  if (v8[353] == v8[354])
  {
    sub_22E80F2F4((uint64_t)v8, a1 + 16, 1);
  }
  else
  {
    v13 = v8[352];
    v8[352] = v13 - 1;
    if ((*a2 & 0x3F000) == 0x32000)
    {
      v14 = v13 - 2;
      v15 = v8[347];
      v16 = (int *)(v15 + 24 * (v13 - 2));
      if (*((unsigned __int16 *)v16 + 8) - 399 > 0x28 || (a4 = *(_DWORD *)(v15 + 24 * v14 + 4)) == 0)
        a4 = *v16;
    }
  }
  *(_WORD *)(a1 + 32) = 407;
  v10 = (*(_DWORD *)a2 >> 12) & 0x3F;
  if (v10 == 31)
  {
    v11 = a2[1];
  }
  else
  {
    v17 = v10 == 34;
    v11 = 1;
    if (v17)
      v11 = 0;
  }
  *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  v12 = *(_QWORD **)(a1 + 8);
  if (v12[352])
  {
    if (v12[353] != v12[354])
      *(_QWORD *)&result = sub_22F162E18((uint64_t)v12, a1 + 16).n128_u64[0];
  }
  return result;
}

uint64_t sub_22F2E3C58(uint64_t a1, unint64_t *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE *v15;
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  unint64_t v22;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v4 = *(_DWORD *)(a1 + 40);
  v15 = (_BYTE *)(a1 + 944);
  v16 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v17 = a1;
  v18 = 1441813;
  v19 = 62;
  v21 = 0;
  v22 = 0;
  v20 = sub_22E80F720;
  result = sub_22E88C650((uint64_t)&v15, 1510, "__underlying_type", 22);
  if ((result & 1) == 0)
  {
    v6 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    if (v7)
    {
      LOWORD(v14[0]) = 22;
      result = sub_22E885940(a1, (unsigned __int16 *)v14, 1, 1);
    }
    else
    {
      v8 = v6;
      result = sub_22E811E8C((uint64_t)&v15);
      if (HIDWORD(v22))
      {
        v9 = *a2;
        result = (*a2 >> 12) & 0x3F;
        if ((_DWORD)result)
        {
          if ((_DWORD)result != 50)
          {
            v10 = sub_22F2F2CB0(result);
            sub_22E88453C(a1, v4, 3658, (uint64_t)v14);
            v11 = (unsigned __int8 *)v14[0];
            if (!v14[0])
            {
              v11 = (unsigned __int8 *)sub_22E3B8AAC(v14[1]);
              v14[0] = v11;
            }
            v11[*v11 + 1] = 1;
            v12 = v14[0];
            v13 = *(unsigned __int8 *)v14[0];
            *(_BYTE *)v14[0] = v13 + 1;
            *(_QWORD *)(v12 + 8 * v13 + 16) = v10;
            result = sub_22E3BB0B8((uint64_t)v14);
          }
        }
        else
        {
          *((_DWORD *)a2 + 30) = v4;
          *((_DWORD *)a2 + 33) = v4;
          *a2 = v9 & 0xFFFFFFFFFFDC0FFFLL | 0x20000;
          a2[1] = v8;
        }
        a2[17] = v22;
      }
    }
  }
  *v15 = v16;
  return result;
}

void sub_22F2E3E10(uint64_t a1, unint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v9 = v11;
  v10 = 0x800000000;
  while (1)
  {
    v5 = sub_22E82FA34(a1, a2);
    if ((v5 & 1) != 0)
    {
      v8 = 1507393;
      sub_22E885940(a1, (unsigned __int16 *)&v8, 2, 3);
    }
    else
    {
      v6 = v10;
      if (v10 >= (unint64_t)HIDWORD(v10))
      {
        v7 = v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = v7;
        v6 = v10;
      }
      *((_QWORD *)v9 + v6) = v5 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v10) = v10 + 1;
    }
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  }
  sub_22F327C10(*(_QWORD **)(a1 + 88), a2, (uint64_t)v9, v10);
  if (v9 != v11)
    free(v9);
}

uint64_t sub_22F2E3F64(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;

  if (*(_DWORD *)a2)
    v2 = *(_DWORD *)(a2 + 4) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    result = sub_22E8175C8(result, (uint64_t *)a2, 0);
    v4 = *(_QWORD *)(a2 + 8);
    if ((v4 & 4) != 0)
    {
      if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
        *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_22F2E3FBC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  unsigned __int8 *v32;
  uint64_t v33;

  v8 = *(_QWORD *)(a1 + 88);
  sub_22EB48CC8(v8, 6, a2, 3);
  if (*(_WORD *)(a1 + 32) != 63)
    goto LABEL_4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  *a4 = *(_DWORD *)(a1 + 40);
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 == 82)
  {
    if (a3)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1471, (uint64_t)&v32);
      v13 = v32;
      if (!v32)
      {
        v13 = (unsigned __int8 *)sub_22E3B8AAC(v33);
        v32 = v13;
      }
      v13[*v13 + 1] = 2;
      v14 = v32;
      v15 = *v32;
      *v32 = v15 + 1;
      *(_QWORD *)&v14[8 * v15 + 16] = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E88453C(a1, *(_DWORD *)(a1 + 40), 11, (uint64_t)&v32);
      v23 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 12) & 1;
      v24 = v32;
      if (!v32)
      {
        v24 = (unsigned __int8 *)sub_22E3B8AAC(v33);
        v32 = v24;
      }
      v24[*v24 + 1] = 3;
      v25 = v32;
      v26 = *v32;
      *v32 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = v23;
    }
LABEL_19:
    v22 = &v32;
LABEL_20:
    sub_22E3BB0B8((uint64_t)v22);
    v11 = 1;
    goto LABEL_9;
  }
  if (v9 != 132)
  {
LABEL_4:
    if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7F) != 0x3A)
    {
      if (*(_WORD *)(a1 + 32) == 23)
        v10 = sub_22E84AF40(a1);
      else
        v10 = sub_22E83766C(a1, 0);
      v11 = v10;
      goto LABEL_9;
    }
    sub_22E884578(a1, (int *)(a1 + 16), 1618, (uint64_t)&v32);
    v19 = v32;
    if (!v32)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC(v33);
      v32 = v19;
    }
    v19[*v19 + 1] = 11;
    v20 = v32;
    v21 = *v32;
    *v32 = v21 + 1;
    *(_QWORD *)&v20[8 * v21 + 16] = a2;
    goto LABEL_19;
  }
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(v16 + 2816);
  if (v17 >= *(unsigned int *)(v16 + 2784))
    v18 = sub_22F162D2C(v16, 1u);
  else
    v18 = *(_QWORD *)(v16 + 2776) + 24 * v17;
  if ((a3 & 1) == 0)
  {
    v30 = *(unsigned __int16 *)(v18 + 16);
    if (v30 == 1 || v30 == 62 || v30 == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E88453C(a1, *(_DWORD *)(a1 + 40), 12, (uint64_t)v31);
      v22 = (unsigned __int8 **)v31;
      goto LABEL_20;
    }
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  sub_22E88453C(a1, *(_DWORD *)(a1 + 40), 1471, (uint64_t)&v32);
  v27 = v32;
  if (!v32)
  {
    v27 = (unsigned __int8 *)sub_22E3B8AAC(v33);
    v32 = v27;
  }
  v27[*v27 + 1] = 2;
  v28 = v32;
  v29 = *v32;
  *v32 = v29 + 1;
  v11 = 1;
  *(_QWORD *)&v28[8 * v29 + 16] = 1;
  sub_22E3BB0B8((uint64_t)&v32);
LABEL_9:
  sub_22EB48E64(v8);
  return v11;
}

void sub_22F2E42B8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25[3];
  _BYTE *v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  __int128 v36;
  void *v37[2];
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v39 = 0;
  v40 = 0;
  v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v38 = 0;
  if ((sub_22E88BFB8(a1, (unsigned int *)&v34) & 1) != 0)
    goto LABEL_7;
  v26 = (_BYTE *)(a1 + 944);
  v27 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v28 = a1;
  v29 = 1572887;
  v30 = 62;
  v32 = 0;
  v33 = 0;
  v31 = sub_22E80CED8;
  if (sub_22E811DE8((uint64_t)&v26))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v24);
    v8 = v24;
    if (!v24)
    {
      v8 = (unsigned __int8 *)sub_22E3B8AAC(v25[0]);
      v24 = v8;
    }
    v8[*v8 + 1] = 4;
    v9 = v24;
    v10 = *v24;
    *v24 = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = 23;
    sub_22E3BB0B8((uint64_t)&v24);
    goto LABEL_6;
  }
  if (v41 != 1)
  {
    if (v41 != 2)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v11 = *(unsigned __int16 *)(a1 + 32);
            v12 = 2;
            if (v11 > 0x8F)
              break;
            if (*(unsigned __int16 *)(a1 + 32) <= 0x8Du)
            {
              if (v11 != 62)
              {
                if (v11 == 1 || v11 == 24)
                {
LABEL_38:
                  sub_22E811E8C((uint64_t)&v26);
                  goto LABEL_6;
                }
                goto LABEL_36;
              }
              sub_22E884DD8(a1, 1, a2);
            }
            else
            {
              if (v11 == 142)
                goto LABEL_26;
              if (v11 == 143)
              {
                v12 = 1;
                goto LABEL_26;
              }
LABEL_36:
              LODWORD(v24) = 0;
              v25[0] = 0;
              v25[1] = 0;
              sub_22E831804();
            }
          }
          if (*(unsigned __int16 *)(a1 + 32) > 0x13Au)
            break;
          if (v11 != 144)
            goto LABEL_36;
          v12 = 0;
LABEL_26:
          *a4 = v12;
          v13 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 40) = v13;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (*(_WORD *)(a1 + 32) == 61)
          {
            v14 = *(_QWORD **)(a1 + 88);
            v15 = *(_DWORD *)(a1 + 16);
            v24 = 0;
            v25[0] = 0;
            sub_22EAAB770(v14, v12, v13, v15, (uint64_t)&v24);
            sub_22E80F94C(v25);
          }
          else
          {
            sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v24);
            v16 = v24;
            if (!v24)
            {
              v16 = (unsigned __int8 *)sub_22E3B8AAC(v25[0]);
              v24 = v16;
            }
            v16[*v16 + 1] = 4;
            v17 = v24;
            v18 = *v24;
            *v24 = v18 + 1;
            *(_QWORD *)&v17[8 * v18 + 16] = 61;
            sub_22E3BB0B8((uint64_t)&v24);
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        if (v11 == 315)
          goto LABEL_26;
        if (v11 - 381 >= 2)
        {
          if (v11 - 436 < 3)
            goto LABEL_38;
          goto LABEL_36;
        }
        sub_22F2E42B8(a1, a2, a3, a4);
      }
    }
    sub_22E88453C(a1, v34, 1960, (uint64_t)&v24);
    v20 = v35;
    v21 = v24;
    if (!v24)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(v25[0]);
      v24 = v21;
    }
    v21[*v21 + 1] = 2;
    v22 = v24;
    v23 = *v24;
    *v24 = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = v20;
    sub_22E3BB0B8((uint64_t)&v24);
  }
  sub_22F2F18E0((uint64_t)&v26);
LABEL_6:
  *v26 = v27;
LABEL_7:
  if (HIDWORD(v37[1]))
    free(v37[0]);
}

char *sub_22F2E4640(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char *result;
  unsigned __int8 *v11;
  uint64_t v12;

  sub_22E88453C(a1, *(_DWORD *)(a2 + 24), 1605, (uint64_t)&v11);
  v4 = v11;
  if (!v11)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC(v12);
    v11 = v4;
  }
  v4[*v4 + 1] = 11;
  v5 = v11;
  v6 = *v11;
  *v11 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = a2;
  sub_22E3BB0B8((uint64_t)&v11);
  sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1871, (uint64_t)&v11);
  v7 = v11;
  if (!v11)
  {
    v7 = (unsigned __int8 *)sub_22E3B8AAC(v12);
    v11 = v7;
  }
  v7[*v7 + 1] = 11;
  v8 = v11;
  v9 = *v11;
  *v11 = v9 + 1;
  *(_QWORD *)&v8[8 * v9 + 16] = a2;
  sub_22E3BB0B8((uint64_t)&v11);
  sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 16) = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
  *(_WORD *)(a1 + 32) = 62;
  result = sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
  *(_WORD *)(a1 + 32) = 24;
  return result;
}

uint64_t sub_22F2E4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unint64_t *v18;
  char v19;
  char v20;
  int v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[32];
  _QWORD v27[4];
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + 104) & 0x20) != 0)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)&v28);
    v9 = v28;
    if (!v28)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v29);
      v28 = v9;
    }
    v9[*v9 + 1] = 2;
    v10 = v28;
    v11 = *v28;
    *v28 = v11 + 1;
    *(_QWORD *)&v10[8 * v11 + 16] = 11;
    sub_22E3BB0B8((uint64_t)&v28);
    v8 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v8, (unsigned int *)(a1 + 16));
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 40);
  v28 = (unsigned __int8 *)(a1 + 944);
  LOBYTE(v29) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v30 = a1;
  v31 = 1441813;
  v32 = 62;
  v34 = 0;
  v35 = 0;
  v33 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v28))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1510, (uint64_t)v27);
    v12 = (unsigned __int8 *)v27[0];
    if (!v27[0])
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v27[1]);
      v27[0] = v12;
    }
    v13 = 1;
    v12[*v12 + 1] = 1;
    v14 = v27[0];
    v15 = *(unsigned __int8 *)v27[0];
    *(_BYTE *)v27[0] = v15 + 1;
    *(_QWORD *)(v14 + 8 * v15 + 16) = "throw";
    sub_22E3BB0B8((uint64_t)v27);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)a2;
  }
  else
  {
    v17 = *(unsigned __int16 *)(a1 + 32);
    if (v17 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 0x20) == 0)
      {
        sub_22E88453C(a1, *(_DWORD *)(a1 + 40), 1810, (uint64_t)v26);
        sub_22E3BB0B8((uint64_t)v26);
      }
      sub_22E811E8C((uint64_t)&v28);
      *(_DWORD *)(a2 + 4) = HIDWORD(v35);
      sub_22E8346F8(a1, *(_QWORD *)a2, 0);
      v13 = 3;
    }
    else
    {
      v27[0] = 0;
      while (v17 != 22)
      {
        v18 = (unint64_t *)sub_22E80FC30(a1, v27, 5, 3, 0, 0, 0);
        v20 = v19;
        if (*(_WORD *)(a1 + 32) == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v21 = *(_DWORD *)(a1 + 40);
          HIDWORD(v27[0]) = v21;
          if (!v20)
          {
            v18 = sub_22F34ACC0(*(_QWORD **)(a1 + 88), (unint64_t)v18, v21);
            v20 = v22;
          }
        }
        if (!v20)
        {
          v23 = *(unsigned int *)(a3 + 8);
          if (v23 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v23 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v18;
          ++*(_DWORD *)(a3 + 8);
          v24 = v27[0];
          v25 = *(unsigned int *)(a4 + 8);
          if (v25 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v25) = v24;
          ++*(_DWORD *)(a4 + 8);
        }
        if (*(_WORD *)(a1 + 32) != 65)
          break;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v17 = *(unsigned __int16 *)(a1 + 32);
      }
      sub_22E811E8C((uint64_t)&v28);
      *(_DWORD *)(a2 + 4) = HIDWORD(v35);
      sub_22E8346F8(a1, *(_QWORD *)a2, *(_DWORD *)(a3 + 8) == 0);
      if (*(_DWORD *)(a3 + 8))
        v13 = 2;
      else
        v13 = 1;
    }
  }
  *v28 = v29;
  return v13;
}

uint64_t sub_22F2E4AE0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (a3)
    v6 = 21;
  else
    v6 = 20;
  return sub_22E80FC30(a1, a2, v6, 3, 0, 0, 0);
}

uint64_t sub_22F2E4B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[32];
  _QWORD v33[2];
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  char v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;

  v38 = (_BYTE *)(a1 + 944);
  v39 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v40 = a1;
  v41 = 1441813;
  v42 = 62;
  v44 = 0;
  v45 = 0;
  v43 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v38))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v35);
    v6 = v35;
    if (!v35)
    {
      v6 = (unsigned __int8 *)sub_22E3B8AAC(v36);
      v35 = v6;
    }
    v6[*v6 + 1] = 4;
    v7 = v35;
    v8 = *v35;
    *v35 = v8 + 1;
    *(_QWORD *)&v7[8 * v8 + 16] = 21;
    result = sub_22E3BB0B8((uint64_t)&v35);
    goto LABEL_34;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)v10 != 9
    || ((v11 = *(_QWORD *)(v10 + 16), v12 = *(unsigned __int8 *)(v10 + 24), v11 == 0x7669746365726964)
      ? (v13 = v12 == 101)
      : (v13 = 0),
        !v13))
  {
    while (1)
    {
      v14 = sub_22E834EA8(a1, &v35, 2, 0);
      if (!v14)
        break;
      v15 = v14;
      v16 = *(_QWORD *)(v14 + 16);
      if (*(_DWORD *)v16 == 3)
      {
        v17 = *(unsigned __int16 *)(v16 + 16);
        v18 = *(unsigned __int8 *)(v16 + 18);
        if (v17 == 28015 && v18 == 112 && (sub_22E8847B4(a1, 0x47u, 15, "", 0) & 1) == 0)
        {
          v15 = sub_22E834EA8(a1, &v35, 2, 0);
          if (!v15)
            break;
        }
      }
      v20 = *(_QWORD *)(v15 + 16);
      if (*(_DWORD *)v20 == 8)
      {
        if (*(_QWORD *)(v20 + 16) != 0x65636E6575716573)
          break;
      }
      else
      {
        if (*(_DWORD *)v20 != 9)
          break;
        v21 = *(_QWORD *)(v20 + 16);
        v22 = *(unsigned __int8 *)(v20 + 24);
        if (v21 != 0x7669746365726964 || v22 != 101)
          break;
      }
      sub_22F2E4B44(a1, v15, a3);
LABEL_26:
      if (*(_WORD *)(a1 + 32) != 65)
        goto LABEL_33;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1536, (uint64_t)v32);
    sub_22E3BB0B8((uint64_t)v32);
    LOWORD(v33[0]) = 22;
    sub_22E885940(a1, (unsigned __int16 *)v33, 1, 2);
    goto LABEL_26;
  }
  v35 = 0;
  v36 = 0;
  v24 = *(_DWORD *)(a1 + 16);
  v37 = 428;
  LODWORD(v35) = v24;
  v25 = sub_22E4EF088(a3, (unint64_t)&v35, 1);
  v26 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
  v27 = *(_OWORD *)v25;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v26 = v27;
  ++*(_DWORD *)(a3 + 8);
  sub_22E80F398((unsigned __int16 *)a1, 22, 22, a3, 0, 0);
  v33[0] = 0;
  v33[1] = 0;
  v28 = *(_DWORD *)(a1 + 16);
  v34 = 430;
  LODWORD(v33[0]) = v28;
  v29 = sub_22E4EF088(a3, (unint64_t)v33, 1);
  v30 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
  v31 = *(_OWORD *)v29;
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 16);
  *(_OWORD *)v30 = v31;
  ++*(_DWORD *)(a3 + 8);
LABEL_33:
  result = sub_22E811E8C((uint64_t)&v38);
LABEL_34:
  *v38 = v39;
  return result;
}

uint64_t sub_22F2E4E94(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - __src) >> 4);
  v8 = *(unsigned int *)(result + 8);
  if (v7 + v8 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 80 * v8), __src, v6);
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v8 + v7;
  return result;
}

double sub_22F2E4F2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  if (!*(_QWORD *)(a1 + 48))
  {
    v2 = (_QWORD *)operator new();
    *(_QWORD *)(a1 + 56) = sub_22F30677C(v2);
    v3 = operator new();
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)v3 &= 0xFFFFFF8000000000;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = v4;
    *(_QWORD *)(v3 + 216) = 0;
    result = 0.0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 128) = 0u;
    *(_OWORD *)(v3 + 144) = 0u;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_OWORD *)(v3 + 192) = 0u;
    *(_DWORD *)(v3 + 208) = 0;
    *(_QWORD *)(a1 + 48) = v3;
  }
  return result;
}

uint64_t sub_22F2E4FC4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = sub_22E851A7C(a1, a2);
  return sub_22E83778C(a1, v3, 1);
}

uint64_t sub_22F2E4FF4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 96);
  ++*(_BYTE *)(v4 + 4);
  v5 = sub_22E838554(a1, 0, 0, 0, 0, 0);
  --*(_BYTE *)(v4 + 4);
  if ((v5 & 1) == 0)
    v5 = sub_22EB2941C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, 12, v5 & 0xFFFFFFFFFFFFFFFELL);
  return sub_22E83778C(a1, v5, 1);
}

uint64_t sub_22F2E5080(_BYTE *a1, unsigned int a2, unsigned int a3, unint64_t a4, void *a5)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_22E85305C((uint64_t)a1, a2, a3, a4, a5);
  v7 = sub_22E8385C0(a1, v6);
  return sub_22E83778C(a1, v7, 2);
}

uint64_t sub_22F2E50C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 88);
  sub_22EB48CC8(v4, 4, 0, 3);
  v5 = sub_22E838554(a1, 0, 0, a2, 0, 0);
  v6 = sub_22E83778C(a1, v5, 3);
  v7 = sub_22EB51A84(*(_QWORD *)(a1 + 88), v6);
  sub_22EB48E64(v4);
  return v7;
}

unint64_t sub_22F2E5148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 88);
  sub_22EB48CC8(v2, 0, 0, 3);
  v3 = sub_22E838554(a1, 0, 0, 0, 0, 0);
  v4 = sub_22E83778C(a1, v3, 4);
  if (v4 >= 2)
  {
    v5 = *(_QWORD *)(a1 + 88);
    v9 = 0;
    v8 = 0uLL;
    if ((sub_22E9F3234(v5, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), &v8, 0, 0) & 1) == 0)
    {
      if ((v4 & 1) == 0)
        sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v7);
      v4 = 1;
    }
  }
  sub_22EB48E64(v2);
  return v4;
}

uint64_t sub_22F2E5220(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  char v12;
  uint64_t v13[3];
  char v14;
  char v15;

  v15 = a2;
  v3 = *(_QWORD *)(a1 + 88);
  sub_22EB48CC8(v3, 0, 0, 3);
  v14 = 0;
  v13[0] = a1;
  v13[1] = (uint64_t)&v14;
  v13[2] = (uint64_t)&v15;
  v4 = sub_22E839BC0(v13);
  if ((v4 & 1) == 0)
  {
    while (1)
    {
      v5 = v4;
      if (*(_WORD *)(a1 + 32) != 28)
        goto LABEL_11;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v6 = *(_DWORD *)(a1 + 40);
      v7 = sub_22E839BC0(v13);
      v8 = *(_QWORD **)(a1 + 88);
      if ((v7 & 1) != 0)
        break;
      v9 = (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v4 = sub_22EB1E9A8(v8, v8[1611], v6, 28, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL), v7 & 0xFFFFFFFFFFFFFFFELL);
      if (v4 <= 1)
      {
        sub_22EBBCB14(*(_QWORD *)(a1 + 88), v9, 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v12);
        if ((v5 & 1) != 0)
          goto LABEL_10;
        v8 = *(_QWORD **)(a1 + 88);
        v10 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_9:
        sub_22EBBCB14((uint64_t)v8, v10, 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v12);
        goto LABEL_10;
      }
    }
    if ((v5 & 1) != 0)
      goto LABEL_10;
    v10 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
LABEL_10:
  v5 = 1;
LABEL_11:
  sub_22EB48E64(v3);
  return v5;
}

uint64_t sub_22F2E536C(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  _DWORD *v10;
  char v12;
  char v13;
  char v14;

  v4 = sub_22F2E5220(a1, a2);
  if (v4 >= 2)
  {
    do
    {
      v5 = v4;
      if (*(_WORD *)(a1 + 32) != 58)
        return v5;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v6 = *(_DWORD *)(a1 + 40);
      v7 = sub_22F2E5220(a1, a2);
      v8 = *(_QWORD **)(a1 + 88);
      if (v7 <= 1)
      {
        if ((v5 & 1) != 0)
          return 1;
        v10 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        v9 = &v14;
        goto LABEL_11;
      }
      v4 = sub_22EB1E9A8(v8, v8[1611], v6, 58, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL), v7 & 0xFFFFFFFFFFFFFFFELL);
    }
    while (v4 > 1);
    v8 = *(_QWORD **)(a1 + 88);
    if ((v7 & 1) == 0)
    {
      sub_22EBBCB14((uint64_t)v8, (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v13);
      v8 = *(_QWORD **)(a1 + 88);
    }
    if ((v5 & 1) == 0)
    {
      v9 = &v12;
      v10 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_11:
      sub_22EBBCB14((uint64_t)v8, v10, 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v9);
    }
  }
  return 1;
}

unint64_t sub_22F2E5490(uint64_t a1)
{
  int v1;
  BOOL v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v1 = *(unsigned __int16 *)(a1 + 32);
  v2 = (v1 - 23) > 0x3E || ((1 << (v1 - 23)) & 0x4000000000000003) == 0;
  if (v2
    && ((v3 = v1 - 89, v4 = v3 > 0x3E, v5 = (1 << v3) & 0x4000000000400007, !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    return sub_22F2E54E8(a1);
  }
  else
  {
    return 1;
  }
}

unint64_t sub_22F2E54E8(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    return sub_22E881D88(a1, 1, 0) == 0;
  else
    return sub_22E81CB8C(a1, 1);
}

uint64_t sub_22F2E5528(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v4 = *(unsigned int *)(a1 + 40);
  v11 = (_BYTE *)(a1 + 944);
  v12 = *(_BYTE *)(a1 + 944);
  v5 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v13 = a1;
  v14 = 1441813;
  v15 = 62;
  v17 = 0;
  v18 = 0;
  v16 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v11, 15, "", 0) & 1) == 0)
  {
    v7 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    if (v8)
    {
      v19 = 22;
      v5 = 1;
      sub_22E885940(a1, &v19, 1, 1);
    }
    else
    {
      v9 = v7;
      v10 = *(unsigned int *)(a1 + 16);
      sub_22E811E8C((uint64_t)&v11);
      v5 = sub_22F32DA5C(*(_QWORD **)(a1 + 88), v4, a2, 1, v9, v4 | (v10 << 32));
    }
  }
  *v11 = v12;
  return v5;
}

uint64_t sub_22F2E5664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2891B4(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

char *sub_22F2E56C0(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  __int128 v5;
  uint64_t v6;

  v3 = (unsigned int *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  sub_22E80F2F4(*(_QWORD *)(a1 + 8), a2, 1);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v3);
  return sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)&v5, 1);
}

uint64_t sub_22F2E5720(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE *v27;
  char v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[96];
  unsigned __int8 *v39;
  uint64_t v40;
  _QWORD v41[14];

  v41[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if ((**(_BYTE **)(v2 + 56) & 2) == 0)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)&v39);
    v3 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
    v4 = v39;
    if (!v39)
    {
      v4 = (unsigned __int8 *)sub_22E3B8AAC(v40);
      v39 = v4;
    }
    v4[*v4 + 1] = 1;
    v5 = v39;
    v6 = *v39;
    *v39 = v6 + 1;
    *(_QWORD *)&v5[8 * v6 + 16] = v3;
    sub_22E3BB0B8((uint64_t)&v39);
    v2 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v2, (unsigned int *)(a1 + 16));
  v7 = *(_DWORD *)(a1 + 40);
  v27 = (_BYTE *)(a1 + 944);
  v28 = *(_BYTE *)(a1 + 944);
  v8 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v29 = a1;
  v30 = 1441813;
  v31 = 62;
  v33 = 0;
  v34 = 0;
  v32 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v27, 15, "", 0) & 1) == 0)
  {
    v10 = *(_QWORD *)(a1 + 88);
    sub_22EB48CC8(v10, 0, 0, 3);
    v11 = *(_QWORD *)(a1 + 88);
    v12 = sub_22E83766C(a1, 0);
    v13 = v12;
    if ((v12 & 1) == 0)
      v13 = (unint64_t)sub_22EBBCB14(v11, (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v39);
    if ((v13 & 1) != 0)
    {
      LOWORD(v39) = 22;
      v8 = 1;
      sub_22E885940(a1, (unsigned __int16 *)&v39, 1, 1);
      sub_22EB48E64(v10);
    }
    else
    {
      sub_22EB48E64(v10);
      if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
      {
        LOWORD(v39) = 22;
        v8 = 1;
        sub_22E885940(a1, (unsigned __int16 *)&v39, 1, 1);
      }
      else
      {
        v14 = 0;
        v39 = (unsigned __int8 *)v41;
        v40 = 0xC00000000;
        v36 = v38;
        v37 = 0xC00000000;
        while (1)
        {
          if (*(_WORD *)(a1 + 32) == 82)
          {
            if (v14)
            {
              sub_22E884578(a1, (int *)(a1 + 16), 1478, (uint64_t)v26);
              sub_22E3BB0B8((uint64_t)v26);
              sub_22E88453C(a1, v14, 1885, (uint64_t)v25);
              sub_22E3BB0B8((uint64_t)v25);
LABEL_32:
              v35 = 22;
              v8 = 1;
              sub_22E885940(a1, &v35, 1, 1);
              goto LABEL_33;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v15 = 0;
            v14 = *(_DWORD *)(a1 + 40);
          }
          else
          {
            v16 = *(_BYTE *)(a1 + 945);
            *(_BYTE *)(a1 + 945) = 1;
            v17 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
            if (v18)
            {
              v35 = 22;
              v8 = 1;
              sub_22E885940(a1, &v35, 1, 1);
              *(_BYTE *)(a1 + 945) = v16;
              goto LABEL_33;
            }
            v15 = v17;
            *(_BYTE *)(a1 + 945) = v16;
          }
          v19 = v40;
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v19 = v40;
          }
          *(_QWORD *)&v39[8 * v19] = v15;
          LODWORD(v40) = v40 + 1;
          if (sub_22E8847B4(a1, 0x3Du, 15, "", 0))
            goto LABEL_32;
          v20 = *(_QWORD *)(a1 + 88);
          v21 = sub_22E83766C(a1, 0);
          v22 = v21;
          if ((v21 & 1) == 0)
            v22 = (unint64_t)sub_22EBBCB14(v20, (_DWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v35);
          if ((v22 & 1) != 0)
            goto LABEL_32;
          v23 = v37;
          if (v37 >= (unint64_t)HIDWORD(v37))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v23 = v37;
          }
          *((_QWORD *)v36 + v23) = v22 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v37) = v37 + 1;
          if (*(_WORD *)(a1 + 32) != 65)
            break;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        sub_22E811E8C((uint64_t)&v27);
        if (HIDWORD(v34))
          v8 = sub_22F32D410(*(_QWORD *)(a1 + 88), v7, v14, SHIDWORD(v34), (_DWORD *)(v13 & 0xFFFFFFFFFFFFFFFELL), v39, v40, v24, (uint64_t *)v36, v37);
        else
          v8 = 1;
LABEL_33:
        if (v36 != v38)
          free(v36);
        if (v39 != (unsigned __int8 *)v41)
          free(v39);
      }
    }
  }
  *v27 = v28;
  return v8;
}

uint64_t sub_22F2E5BFC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  _BYTE *v11;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 40);
  v11 = (_BYTE *)(a1 + 944);
  v12 = *(_BYTE *)(a1 + 944);
  v3 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v13 = a1;
  v14 = 1441813;
  v15 = 62;
  v17 = 0;
  v18 = 0;
  v16 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v11, 1510, "__builtin_unsafe_forge_bidi_indexable", 0) & 1) != 0)
    goto LABEL_2;
  v5 = sub_22E83766C(a1, 0);
  if ((v5 & 1) != 0)
  {
LABEL_10:
    v3 = 1;
    goto LABEL_2;
  }
  if (!sub_22E8847B4(a1, 0x41u, 15, "", 0))
  {
    v9 = sub_22E83766C(a1, 0);
    if ((v9 & 1) == 0 && (sub_22E811E8C((uint64_t)&v11) & 1) == 0)
    {
      v3 = sub_22F32FE78(*(_QWORD **)(a1 + 88), v2, (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v9 & 0xFFFFFFFFFFFFFFFELL, SHIDWORD(v18));
      goto LABEL_2;
    }
    goto LABEL_10;
  }
  sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 15, (uint64_t)v10);
  v6 = (unsigned __int8 *)v10[0];
  if (!v10[0])
  {
    v6 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
    v10[0] = v6;
  }
  v6[*v6 + 1] = 4;
  v7 = v10[0];
  v8 = *(unsigned __int8 *)v10[0];
  *(_BYTE *)v10[0] = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 16) = 65;
  sub_22E3BB0B8((uint64_t)v10);
  LOWORD(v10[0]) = 22;
  v3 = 1;
  sub_22E885940(a1, (unsigned __int16 *)v10, 1, 1);
LABEL_2:
  *v11 = v12;
  return v3;
}

uint64_t sub_22F2E5DA8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 40);
  v6 = (_BYTE *)(a1 + 944);
  v7 = *(_BYTE *)(a1 + 944);
  v3 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v8 = a1;
  v9 = 1441813;
  v10 = 62;
  v12 = 0;
  v13 = 0;
  v11 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v6, 1510, "__builtin_unsafe_forge_single", 0) & 1) == 0)
  {
    v5 = sub_22E83766C(a1, 0);
    if ((v5 & 1) != 0 || (sub_22E811E8C((uint64_t)&v6) & 1) != 0)
      v3 = 1;
    else
      v3 = sub_22F32FEDC(*(_QWORD **)(a1 + 88), v2, (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), SHIDWORD(v13));
  }
  *v6 = v7;
  return v3;
}

uint64_t sub_22F2E5E9C(uint64_t a1, int a2)
{
  BOOL v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD *, void *, int, int);
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v11 = (_BYTE *)(a1 + 944);
  v4 = a2 == 0;
  v5 = *(unsigned int *)(a1 + 40);
  if (v4)
    v6 = "__builtin_get_pointer_lower_bound";
  else
    v6 = "__builtin_get_pointer_upper_bound";
  if (v4)
    v7 = sub_22F32FF34;
  else
    v7 = sub_22F32FF4C;
  v12 = *(_BYTE *)(a1 + 944);
  v8 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v13 = a1;
  v14 = 1441813;
  v15 = 62;
  v17 = 0;
  v18 = 0;
  v16 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v11, 1510, v6, 0) & 1) == 0)
  {
    v10 = sub_22E83766C(a1, 0);
    if ((v10 & 1) != 0 || (sub_22E811E8C((uint64_t)&v11) & 1) != 0)
      v8 = 1;
    else
      v8 = v7(*(_QWORD **)(a1 + 88), (void *)(v10 & 0xFFFFFFFFFFFFFFFELL), v5, HIDWORD(v18));
  }
  *v11 = v12;
  return v8;
}

uint64_t sub_22F2E5FB8(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, void *, uint64_t, int, int);
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = *(unsigned int *)(a1 + 40);
  if (a2)
    v6 = sub_22F3301F0;
  else
    v6 = sub_22F3301DC;
  v13 = (_BYTE *)(a1 + 944);
  if (a2)
    v7 = "__builtin_unsafe_terminated_by_to_indexable";
  else
    v7 = "__builtin_terminated_by_to_indexable";
  v14 = *(_BYTE *)(a1 + 944);
  v8 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v15 = a1;
  v16 = 1441813;
  v17 = 62;
  v19 = 0;
  v20 = 0;
  v18 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v13, 1510, v7, 0) & 1) == 0)
  {
    v10 = sub_22E83766C(a1, 0);
    if ((v10 & 1) == 0)
    {
      if (*(_WORD *)(a1 + 32) != 65)
      {
        v12 = 0;
LABEL_14:
        if ((sub_22E811E8C((uint64_t)&v13) & 1) == 0)
        {
          v8 = v6(*(_QWORD **)(a1 + 88), (void *)(v10 & 0xFFFFFFFFFFFFFFFELL), v12, v5, HIDWORD(v20));
          goto LABEL_8;
        }
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v11 = sub_22E83766C(a1, 0);
      if ((v11 & 1) == 0)
      {
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_14;
      }
    }
LABEL_15:
    v8 = 1;
  }
LABEL_8:
  *v13 = v14;
  return v8;
}

uint64_t sub_22F2E6120(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[4];
  _BYTE *v14;
  char v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;

  v2 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  v14 = (_BYTE *)(a1 + 944);
  v15 = *(_BYTE *)(a1 + 944);
  v4 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v16 = a1;
  v17 = 1441813;
  v18 = 62;
  v20 = 0;
  v21 = 0;
  v19 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v14, 1510, "__builtin_unsafe_terminated_by_from_indexable", 0) & 1) != 0)
    goto LABEL_2;
  v6 = sub_22E83766C(a1, 0);
  if ((v6 & 1) != 0)
    goto LABEL_14;
  if (!sub_22E8847B4(a1, 0x41u, 15, "", 0))
  {
    v10 = sub_22E83766C(a1, 0);
    if ((v10 & 1) == 0)
    {
      if (*(_WORD *)(a1 + 32) != 65)
      {
        v12 = 0;
LABEL_13:
        if ((sub_22E811E8C((uint64_t)&v14) & 1) == 0)
        {
          v4 = sub_22F330204(*(_QWORD **)(a1 + 88), v6 & 0xFFFFFFFFFFFFFFFELL, (void *)(v10 & 0xFFFFFFFFFFFFFFFELL), v12, v3, SHIDWORD(v21));
          goto LABEL_2;
        }
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v11 = sub_22E83766C(a1, 0);
      if ((v11 & 1) == 0)
      {
        v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_13;
      }
    }
LABEL_14:
    v4 = 1;
    goto LABEL_2;
  }
  sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 15, (uint64_t)v13);
  v7 = (unsigned __int8 *)v13[0];
  if (!v13[0])
  {
    v7 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
    v13[0] = v7;
  }
  v7[*v7 + 1] = 4;
  v8 = v13[0];
  v9 = *(unsigned __int8 *)v13[0];
  *(_BYTE *)v13[0] = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9 + 16) = 65;
  sub_22E3BB0B8((uint64_t)v13);
  LOWORD(v13[0]) = 22;
  v4 = 1;
  sub_22E885940(a1, (unsigned __int16 *)v13, 1, 1);
LABEL_2:
  *v14 = v15;
  return v4;
}

uint64_t sub_22F2E6318(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 40);
  v8 = (_BYTE *)(a1 + 944);
  v9 = *(_BYTE *)(a1 + 944);
  v3 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v10 = a1;
  v11 = 1441813;
  v12 = 62;
  v14 = 0;
  v15 = 0;
  v13 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v8, 1510, "__builtin_sycl_unique_stable_name", 0) & 1) == 0)
  {
    v5 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    if (v6)
    {
      sub_22F2F18E0((uint64_t)&v8);
    }
    else
    {
      v7 = v5;
      if ((sub_22E811E8C((uint64_t)&v8) & 1) == 0)
      {
        v3 = sub_22F32D820(*(_QWORD *)(a1 + 88), v2, v15, SHIDWORD(v15), v7);
        goto LABEL_2;
      }
    }
    v3 = 1;
  }
LABEL_2:
  *v8 = v9;
  return v3;
}

uint64_t sub_22F2E642C(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[32];
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  _QWORD v26[4];
  int v27;
  const char *v28;
  _BYTE v29[24];
  uint64_t v30[12];
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  __int128 v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v1 = a1;
  v51 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(unsigned int *)(v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 88);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v26[0] = &unk_24FAE1B70;
  v26[3] = v4;
  v27 = v3;
  v28 = "block literal parsing";
  sub_22E885C30(v1, 4194377);
  sub_22F32F84C(*(_QWORD **)(v1 + 88), v3, *(_QWORD *)(*(_QWORD *)(v1 + 88) + 12888));
  v11[0] = 0;
  v11[2] = 0;
  v12 = 0u;
  v13 = v1 + 960;
  v25 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v31 = v11;
  v35 = 0;
  v36 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v39 = 0u;
  v38 = 16;
  v40 = 0;
  v41 = &v43;
  v42 = 0x800000000;
  v45 = 0u;
  v46 = v1 + 960;
  v50 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v44 = 4;
  v37 = *v2 | ((unint64_t)*v2 << 32);
  v5 = *(unsigned __int16 *)(v1 + 32);
  if (v5 == 21)
  {
    sub_22E824CA8(v1, (uint64_t)&v31);
    v34 = 0;
    v35 = 0;
    HIDWORD(v36) = v3;
    LODWORD(v36) = v3;
    if ((v44 & 1) != 0 || (*v31 & 0x3F000) == 0x32000)
      goto LABEL_4;
    goto LABEL_11;
  }
  if (v5 == 23)
  {
    sub_22E8ACEBC(1, 0, 0, 0, 0, 0, 0, 1, (uint64_t)v29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0,
      0,
      0,
      v3,
      SHIDWORD(v3),
      v3,
      (uint64_t)&v31,
      0,
      0,
      0,
      0,
      0);
    sub_22F2E2950((uint64_t)&v31, (unint64_t)v29, v3);
    sub_22E80F94C(v30);
LABEL_11:
    sub_22E81CAF0((uint64_t *)v1, (uint64_t)&v31, 0, 0);
    sub_22EB4A904(*(_QWORD *)(v1 + 88), v3, (uint64_t)&v31, *(_QWORD *)(*(_QWORD *)(v1 + 88) + 12888));
    goto LABEL_12;
  }
  sub_22F2E6B7C(v1, v3);
LABEL_12:
  if (*(_WORD *)(v1 + 32) != 23)
  {
    sub_22E884578(v1, v2, 1499, (uint64_t)v10);
    sub_22E3BB0B8((uint64_t)v10);
LABEL_4:
    sub_22F32F928(*(_QWORD *)(v1 + 88));
LABEL_5:
    v6 = 1;
    goto LABEL_6;
  }
  v8 = sub_22E878918(v1, 0);
  sub_22E885CF4(v1);
  v9 = *(_QWORD *)(v1 + 88);
  if ((v8 & 1) != 0)
  {
    sub_22F32F928(v9);
    v1 = 0;
    goto LABEL_5;
  }
  v6 = sub_22EB4ADC8(v9, v3, (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL));
  v1 = 0;
LABEL_6:
  sub_22E827F78((uint64_t)&v31);
  sub_22E828530((uint64_t)v11);
  if (v1)
    sub_22E885CF4(v1);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v26);
  return v6;
}

uint64_t sub_22F2E6798(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;

  v2 = (_OWORD *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 64);
  v3 = a1 + 16;
  v11 = *(_OWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 2344);
  v5 = *(_WORD *)(a1 + 80);
  v6 = *(_WORD *)(a1 + 82);
  v7 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  v8 = *(unsigned __int16 *)(a1 + 32);
  while (1)
  {
    if (v8 != 19)
      goto LABEL_8;
    sub_22E80F788(a1);
    do
      v15 = 28180500;
    while (!sub_22E885940(a1, (unsigned __int16 *)&v15, 2, 3));
    if (*(_WORD *)(a1 + 32) != 20)
    {
LABEL_8:
      v9 = 0;
      goto LABEL_9;
    }
    sub_22E80F788(a1);
    v8 = *(unsigned __int16 *)(a1 + 32);
    if (v8 == 22)
      break;
    if (v8 == 430)
      goto LABEL_8;
  }
  v9 = 1;
LABEL_9:
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  *v2 = v13;
  v2[1] = v14;
  *(_OWORD *)v3 = v11;
  *(_QWORD *)(v3 + 16) = v12;
  sub_22E80FADC(a1 + 2336, v4);
  *(_WORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 82) = v6;
  *(_WORD *)(a1 + 84) = v7;
  return v9;
}

uint64_t sub_22F2E68B4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  _BYTE v9[32];

  if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 1) == 0)
  {
    sub_22E88453C(a1, a3, 1792, (uint64_t)v9);
    sub_22E3BB0B8((uint64_t)v9);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 64) = 0;
    if (a2 >= 0x10)
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    *(_QWORD *)(a1 + 56) = v7;
    *(_DWORD *)(a1 + 52) = v8;
  }
  if (*(_WORD *)(a1 + 32) == 23)
    result = sub_22E84AF40(a1);
  else
    result = sub_22E83766C(a1, 0);
  if ((result & 1) == 0)
  {
    if (a2)
      return sub_22F32DEF8(*(_QWORD *)(a1 + 88), a3, a2);
  }
  return result;
}

uint64_t sub_22F2E6994(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  _QWORD v18[4];

  if ((a2 & 1) != 0)
    goto LABEL_23;
  if (a2 < 2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = *(unsigned __int16 *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v7 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 != 22)
  {
    v13 = sub_22F1DD1BC(*(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 944), 1);
    v14 = v13 < 1 || (v13 & 0xFFFFFFF7) == 3;
    if (v14)
    {
      sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1503, (uint64_t)v18);
      sub_22E3BB0B8((uint64_t)v18);
      return 1;
    }
    if (v6)
    {
      v14 = v9 == v6;
      LOWORD(v9) = v6;
      if (!v14)
      {
        sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1556, (uint64_t)v18);
        v15 = v18[0];
        if (!v18[0])
        {
          v15 = sub_22E3B8AAC(v18[1]);
          v18[0] = v15;
        }
        sub_22E4D6448(v15 + 336, v7, 1);
        sub_22E3BB0B8((uint64_t)v18);
        LOWORD(v9) = *(_WORD *)(a1 + 32);
      }
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v16 = sub_22E83766C(a1, 0);
    v10 = sub_22E83778C(a1, v16, 1);
    LOWORD(v6) = v9;
    if ((v10 & 1) == 0)
      goto LABEL_7;
LABEL_23:
    sub_22F2F18E0(a3);
    return 1;
  }
  v10 = 0;
LABEL_7:
  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
    v11 = 1903;
  else
    v11 = 1820;
  sub_22E88453C(a1, v8, v11, (uint64_t)v17);
  sub_22E3BB0B8((uint64_t)v17);
  sub_22E811E8C(a3);
  return sub_22EE74AF4(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(a3 + 48), (unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFELL), v6, v8, (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a3 + 52));
}

char **sub_22F2E6B7C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD v6[3];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  _WORD *v31;
  uint64_t v32;
  _WORD v33[484];
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v3 + 752))
    {
      *(_BYTE *)(v3 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    return sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0xCu);
  }
  else
  {
    v6[0] = 0;
    v6[2] = 0;
    v7 = 0u;
    v8 = a1 + 960;
    v20 = 0;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    sub_22E80FF64(a1, v6, 3, 0, 0);
    v21 = v6;
    v25 = 0;
    v26 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v27 = *((_QWORD *)&v11 + 1);
    v29 = 0u;
    v28 = 16;
    v30 = 0;
    v31 = v33;
    v32 = 0x800000000;
    v34 = 0u;
    v35 = v8;
    v39 = 0;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v33[480] = ((v6[0] & 0x3F000) == 204800) | 4;
    sub_22E8227E4(a1, (uint64_t)&v21, (unint64_t)sub_22E823490, 0);
    sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v21, 0, 0);
    sub_22EB4A904(*(_QWORD *)(a1 + 88), a2, (uint64_t)&v21, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
    sub_22E827F78((uint64_t)&v21);
    return (char **)sub_22E828530((uint64_t)v6);
  }
}

uint64_t sub_22F2E6D78(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  result = **(_QWORD **)(a1 + 16);
  if (result)
  {
    v2 = *(_DWORD *)(result + 28) & 0x7F;
    v3 = v2 >= 0x2F;
    v5 = v2 == 47;
    v4 = (1 << v2) & 0xC00000060000;
    v5 = !v5 && v3 || v4 == 0;
    if (!v5)
      return sub_22EFBAEA4(result);
  }
  return result;
}

_QWORD *sub_22F2E6DBC(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2891B4((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2E6E20(a1, a2, v7);
    *v5 = *a2;
    *((_WORD *)v5 + 4) = 0;
  }
  return v5;
}

_QWORD *sub_22F2E6E20(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E8404C4((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2891B4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F2E6EDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2891B4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_WORD *)v11 + 4) = *(_WORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2E6FA4(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_22F2E6FAC(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int *v11;
  int *v12;
  int v13;
  _QWORD *v14;
  int v15;

  v3 = a2;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
  v5 = *a2;
  if (v5 < 0)
  {
    v14 = v4;
    v11 = v3;
    v12 = a3;
    v9 = sub_22F1E238C(v4, v5);
    v3 = v11;
    a3 = v12;
    v5 = v9;
    v4 = v14;
  }
  v6 = v3[1];
  v7 = *a3;
  if (*a3 < 0)
  {
    v15 = v5;
    v13 = v6;
    v10 = sub_22F1E238C(v4, v7);
    v6 = v13;
    v5 = v15;
    v7 = v10;
  }
  return v6 + v5 == v7;
}

uint64_t sub_22F2E702C(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) == 0
    || (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 60) & 4) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = v12;
    v11 = 0x400000000;
    if (sub_22E84396C(a1, (uint64_t)&v8, 0))
    {
      v7 = 20;
      v5 = 1;
      sub_22E885940(a1, &v7, 1, 1);
      v7 = 23;
      sub_22E885940(a1, &v7, 1, 1);
      v7 = 24;
      sub_22E885940(a1, &v7, 1, 1);
    }
    else
    {
      v5 = sub_22E844820(a1, (unsigned int *)&v8);
    }
    if (v10 != v12)
      free(v10);
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)&v8);
    v2 = v8;
    if (!v8)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(v9);
      v8 = v2;
    }
    v2[*v2 + 1] = 2;
    v3 = v8;
    v4 = *v8;
    *v8 = v4 + 1;
    *(_QWORD *)&v3[8 * v4 + 16] = 5;
    sub_22E3BB0B8((uint64_t)&v8);
    LOWORD(v8) = 20;
    v5 = 1;
    sub_22E885940(a1, (unsigned __int16 *)&v8, 1, 1);
    LOWORD(v8) = 23;
    sub_22E885940(a1, (unsigned __int16 *)&v8, 1, 1);
    LOWORD(v8) = 24;
    sub_22E885940(a1, (unsigned __int16 *)&v8, 1, 1);
  }
  return v5;
}

uint64_t sub_22F2E7208(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v13;
  __int128 v16;
  unint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  _BYTE v33[192];
  uint64_t v34;
  uint64_t v35;
  void *v36[2];
  _QWORD v37[27];

  v37[24] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2816);
  if (v3 >= *(unsigned int *)(v2 + 2784))
    v4 = sub_22F162D2C(v2, 1u);
  else
    v4 = *(_QWORD *)(v2 + 2776) + 24 * v3;
  v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 1)
    return 0;
  if (*(_WORD *)(a1 + 32) == 1)
  {
    v8 = a1 + 16;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 2816) + 1;
    if (v11 >= *(unsigned int *)(v10 + 2784))
      v8 = sub_22F162D2C(v10, 2u);
    else
      v8 = *(_QWORD *)(v10 + 2776) + 24 * v11;
  }
  v9 = *(unsigned __int16 *)(v8 + 16);
  if (v5 == 27)
  {
    if (v9 == 20 || v9 == 65)
      return sub_22F2E702C(a1);
LABEL_17:
    v13 = v5 == 5 && v9 == 20;
    if (v5 == 26 || v13)
      return sub_22F2E702C(a1);
    if (v5 == 5 && v9 == 5)
      return 0;
    v34 = 0;
    v35 = 0;
    v36[0] = v37;
    v36[1] = (void *)0x400000000;
    v16 = *(_OWORD *)(a1 + 64);
    v28 = *(_OWORD *)(a1 + 48);
    v29 = v16;
    v26 = *(_OWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 32);
    v17 = *(unsigned int *)(a1 + 2344);
    v18 = *(_WORD *)(a1 + 80);
    v19 = *(_WORD *)(a1 + 82);
    v20 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    v25 = 0;
    if (sub_22E84396C(a1, (uint64_t)&v34, &v25))
    {
      sub_22E80FADC(a1 + 2336, v17);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
LABEL_34:
      v6 = 1;
      goto LABEL_35;
    }
    v21 = (_OWORD *)(a1 + 48);
    v22 = (_OWORD *)(a1 + 16);
    if ((v25 - 2) < 2)
    {
      sub_22F162AFC(*(_QWORD *)(a1 + 8));
      v24 = v29;
      *v21 = v28;
      *(_OWORD *)(a1 + 64) = v24;
      *v22 = v26;
      *(_QWORD *)(a1 + 32) = v27;
      sub_22E80FADC(a1 + 2336, v17);
      v6 = 0;
      *(_WORD *)(a1 + 80) = v18;
      *(_WORD *)(a1 + 82) = v19;
      *(_WORD *)(a1 + 84) = v20;
    }
    else
    {
      if (v25)
      {
        if (v25 == 1)
        {
          sub_22F162AFC(*(_QWORD *)(a1 + 8));
          v23 = v29;
          *v21 = v28;
          *(_OWORD *)(a1 + 64) = v23;
          *v22 = v26;
          *(_QWORD *)(a1 + 32) = v27;
          sub_22E80FADC(a1 + 2336, v17);
          *(_WORD *)(a1 + 80) = v18;
          *(_WORD *)(a1 + 82) = v19;
          *(_WORD *)(a1 + 84) = v20;
          v30 = 0;
          v31 = 0;
          v32[0] = v33;
          v32[1] = (void *)0x400000000;
          v34 = 0;
          v35 = 0;
          sub_22F2E8E10((uint64_t)v36, (uint64_t)v32);
          if (v32[0] != v33)
            free(v32[0]);
          if ((sub_22E84396C(a1, (uint64_t)&v34, 0) & 1) != 0)
            goto LABEL_34;
        }
      }
      else
      {
        sub_22E80FADC(a1 + 2336, v17);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
      }
      v6 = sub_22E844820(a1, (unsigned int *)&v34);
    }
LABEL_35:
    if (v36[0] != v37)
      free(v36[0]);
    return v6;
  }
  if (v5 != 20 && v5 != 63)
    goto LABEL_17;
  return sub_22F2E702C(a1);
}

uint64_t sub_22F2E7550(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 40);
  v9 = (_BYTE *)(a1 + 944);
  v10 = *(_BYTE *)(a1 + 944);
  v3 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v11 = a1;
  v12 = 1441813;
  v13 = 62;
  v15 = 0;
  v16 = 0;
  v14 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v9, 1510, "__uuidof", 0) & 1) == 0)
  {
    LOBYTE(v17) = 0;
    if (sub_22E828854(a1, &v17))
    {
      v5 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
      v7 = v6;
      sub_22E811E8C((uint64_t)&v9);
      if (v7)
        v3 = 1;
      else
        v3 = sub_22F3312B4(*(_QWORD **)(a1 + 88), v2, v16, 1, v5, HIDWORD(v16));
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 88);
      sub_22EB48CC8(v8, 0, 0, 3);
      v3 = sub_22E837640(a1, 0);
      if ((v3 & 1) != 0)
      {
        v17 = 22;
        sub_22E885940(a1, &v17, 1, 1);
      }
      else
      {
        sub_22E811E8C((uint64_t)&v9);
        v3 = sub_22F3312B4(*(_QWORD **)(a1 + 88), v2, v16, 0, v3 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(v16));
      }
      sub_22EB48E64(v8);
    }
  }
  *v9 = v10;
  return v3;
}

uint64_t sub_22F2E76F0(uint64_t a1)
{
  int *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v2 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 - 1) + 56) + 104) & 0x20) != 0)
  {
    sub_22E884578(a1, v2, 1599, (uint64_t)v12);
    v9 = (unsigned __int8 *)v12[0];
    if (!v12[0])
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
      v12[0] = v9;
    }
    v9[*v9 + 1] = 2;
    v10 = v12[0];
    v11 = *(unsigned __int8 *)v12[0];
    *(_BYTE *)v12[0] = v11 + 1;
    *(_QWORD *)(v10 + 8 * v11 + 16) = 11;
    sub_22E3BB0B8((uint64_t)v12);
    return 1;
  }
  else
  {
    v3 = v2[6];
    v4 = *(unsigned __int16 *)(a1 + 32) - 20;
    v5 = v4 > 0x2D;
    v6 = (1 << v4) & 0x260000000015;
    if (v5 || v6 == 0)
    {
      result = sub_22E83766C(a1, 0);
      if ((result & 1) == 0)
        return sub_22EBBA6C4(*(_QWORD *)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888), v3, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
    }
    else
    {
      return sub_22EBBA6C4(*(_QWORD *)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888), v3, 0);
    }
  }
  return result;
}

uint64_t sub_22F2E7810(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  v2 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 24);
  if (*(_WORD *)(v2 + 16) == 23)
    result = sub_22E84AF40(a1);
  else
    result = sub_22E83766C(a1, 0);
  if ((result & 1) == 0)
    return sub_22F31AF0C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v3, (_DWORD *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

unint64_t sub_22F2E7898(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v6 = *(unsigned int *)(a1 + 40);
  v15 = 0;
  LODWORD(v12) = 0;
  v13 = 0;
  v14 = 0;
  v7 = sub_22E82A938(a1, a2, (uint64_t)&v12, v6, &v15, a3, 3u);
  if (v7)
  {
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x2000) != 0)
      v8 = 1918;
    else
      v8 = 1785;
    sub_22E88453C(a1, v6, v8, (uint64_t)&v12);
    v9 = v6 | ((unint64_t)v15 << 32);
    v10 = v12;
    if (!v12)
    {
      v10 = sub_22E3B8AAC(v13);
      v12 = v10;
    }
    sub_22E4D6448(v10 + 336, v9, 1);
    sub_22E3BB0B8((uint64_t)&v12);
  }
  return v7;
}

uint64_t sub_22F2E797C(uint64_t a1, uint64_t a2)
{
  sub_22E80FF64(a1, a2, 3, 2, 0);
  sub_22E8ADC50(a2, *(_QWORD *)(a1 + 88));
  return 0;
}

uint64_t sub_22F2E79C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  char v28;
  _QWORD v29[2];
  uint64_t v30[4];
  _BYTE *v31;
  char v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  __int128 v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD v92[14];

  v92[12] = *MEMORY[0x24BDAC8D0];
  v6 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v6 - 1) + 56) + 104) & 0x20) == 0)
  {
    v90 = v92;
    v91 = 0xC00000000;
    v40[0] = 0;
    v40[2] = 0;
    v41 = 0u;
    v42 = a1 + 960;
    v54 = 0;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0;
    v71 = (unsigned __int8 *)v40;
    v75 = 0;
    v72 = 0u;
    v73 = 0u;
    v74 = 0;
    v76 = 0u;
    v78 = 0u;
    v77 = 13;
    v79 = 0;
    v80 = &v82;
    v81 = 0x800000000;
    v83 = 0;
    v84 = 0u;
    v85 = a1 + 960;
    v89 = 0;
    v88 = 0u;
    v87 = 0u;
    v86 = 0u;
    if (*(_WORD *)(a1 + 32) != 21)
    {
      sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v71, 0, 0);
      sub_22E80FF64(a1, v40, 3, 2, 0);
      sub_22E8ADC50((uint64_t)v40, *(_QWORD *)(a1 + 88));
      *((_QWORD *)&v76 + 1) = *((_QWORD *)&v45 + 1);
      sub_22E8227E4(a1, (uint64_t)&v71, (unint64_t)sub_22F2E81F4, 0);
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      goto LABEL_4;
    }
    v63 = (void *)(a1 + 944);
    LOBYTE(v64) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v65 = a1;
    v66 = 1441813;
    v67 = 62;
    v70 = 0;
    v68 = sub_22E80F720;
    v69 = 0;
    sub_22E811DE8((uint64_t)&v63);
    v10 = v70;
    if (sub_22F2E80D0(a1, (uint64_t)&v90, &v71))
    {
      LOWORD(v55) = 62;
    }
    else
    {
      sub_22E811E8C((uint64_t)&v63);
      v9 = HIDWORD(v70);
      if (HIDWORD(v70))
      {
        if ((_DWORD)v91)
        {
          if (*(_WORD *)(a1 + 32) == 21)
          {
            v55 = (void *)(a1 + 944);
            LOBYTE(v56) = *(_BYTE *)(a1 + 944);
            *(_BYTE *)(a1 + 944) = 1;
            v57 = a1;
            v58 = 1441813;
            v59 = 62;
            v61 = 0;
            v62 = 0;
            v60 = sub_22E80F720;
            sub_22E811DE8((uint64_t)&v55);
            sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v71, 0, 0);
            sub_22E80FF64(a1, v40, 3, 0, 0);
            *((_QWORD *)&v76 + 1) = *((_QWORD *)&v45 + 1);
            sub_22E8227E4(a1, (uint64_t)&v71, (unint64_t)sub_22E823490, 0);
            sub_22E811E8C((uint64_t)&v55);
            v27 = v62;
            v8 = HIDWORD(v62);
            *(_BYTE *)v55 = v56;
          }
          else
          {
            sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v71, 0, 0);
            sub_22E80FF64(a1, v40, 3, 2, 0);
            sub_22E8ADC50((uint64_t)v40, *(_QWORD *)(a1 + 88));
            *((_QWORD *)&v76 + 1) = *((_QWORD *)&v45 + 1);
            sub_22E8227E4(a1, (uint64_t)&v71, (unint64_t)sub_22F2E81F4, 0);
            v27 = 0;
            v8 = 0;
          }
        }
        else
        {
          v10 = 0;
          v27 = v70;
          v8 = HIDWORD(v70);
          v9 = 0;
        }
        v7 = v27;
        *(_BYTE *)v63 = v64;
LABEL_4:
        if ((v83 & 1) != 0 || (*(_QWORD *)v71 & 0x3F000) == 0x32000)
        {
          LOWORD(v63) = 62;
          v11 = 1;
          sub_22E885940(a1, (unsigned __int16 *)&v63, 1, 3);
          goto LABEL_7;
        }
        v16 = *(unsigned __int16 *)(a1 + 32);
        if (v16 == 23)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0)
          {
            sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1932, (uint64_t)&v28);
            sub_22E3BB0B8((uint64_t)&v28);
            v11 = sub_22E84AF40(a1);
            goto LABEL_43;
          }
        }
        else if (v16 == 21)
        {
          v63 = &v65;
          v64 = 0xC00000000;
          v31 = (_BYTE *)(a1 + 944);
          v32 = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          v33 = a1;
          v34 = 1441813;
          v35 = 62;
          v37 = 0;
          v38 = 0;
          v36 = sub_22E80F720;
          sub_22E811DE8((uint64_t)&v31);
          v39 = v38;
          if (*(_WORD *)(a1 + 32) == 22)
            goto LABEL_16;
          v55 = &v57;
          v56 = 0x1400000000;
          v30[0] = a1;
          v30[1] = (uint64_t)&v71;
          v30[2] = (uint64_t)&v63;
          v30[3] = (uint64_t)&v39;
          v29[0] = a1;
          v29[1] = v30;
          v18 = sub_22E83EFC4(a1, (uint64_t)&v63, (uint64_t)&v55, (void (*)(uint64_t))sub_22E849ED0, (uint64_t)v29, 0, 0);
          v26 = v18;
          if (v18)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 864) && !*(_BYTE *)(a1 + 948))
              sub_22E847FAC(v30, v19, v20, v21, v22, v23, v24, v25);
            LOWORD(v29[0]) = 62;
            sub_22E885940(a1, (unsigned __int16 *)v29, 1, 3);
          }
          if (v55 != &v57)
            free(v55);
          if ((v26 & 1) == 0)
          {
LABEL_16:
            sub_22E811E8C((uint64_t)&v31);
            if (HIDWORD(v38))
            {
              v11 = sub_22EB367BC(*(_QWORD *)(a1 + 88), v39, SHIDWORD(v38), (uint64_t *)v63, v64);
              v17 = 1;
              goto LABEL_40;
            }
            LOWORD(v55) = 62;
            sub_22E885940(a1, (unsigned __int16 *)&v55, 1, 3);
          }
          v11 = 0;
          v17 = 0;
LABEL_40:
          *v31 = v32;
          if (v63 != &v65)
            free(v63);
          if ((v17 & 1) != 0)
          {
LABEL_43:
            if ((v11 & 1) == 0)
              goto LABEL_20;
LABEL_7:
            sub_22E827F78((uint64_t)&v71);
            sub_22E828530((uint64_t)v40);
            if (v90 != v92)
              free(v90);
            return v11;
          }
LABEL_45:
          v11 = 1;
          goto LABEL_7;
        }
        v11 = 0;
LABEL_20:
        v11 = sub_22EBBD1E4(*(uint64_t **)(a1 + 88), a3, a2, v10, (uint64_t)v90, v91, v9, v7 | (v8 << 32), (uint64_t)&v71, v11 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_7;
      }
      LOWORD(v55) = 62;
    }
    sub_22E885940(a1, (unsigned __int16 *)&v55, 1, 3);
    *(_BYTE *)v63 = v64;
    goto LABEL_45;
  }
  sub_22E884578(a1, v6, 1599, (uint64_t)&v71);
  v12 = v71;
  if (!v71)
  {
    v12 = (unsigned __int8 *)sub_22E3B8AAC(v72);
    v71 = v12;
  }
  v12[*v12 + 1] = 2;
  v13 = v71;
  v14 = *v71;
  *v71 = v14 + 1;
  *(_QWORD *)&v13[8 * v14 + 16] = 6;
  sub_22E3BB0B8((uint64_t)&v71);
  return 1;
}

BOOL sub_22F2E80D0(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  void *v8[2];
  _QWORD v9[11];

  v9[10] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v8[0]) = 0;
  if (sub_22E828854(a1, v8))
  {
    sub_22E80FF64(a1, *(_QWORD *)a3, 3, 0, 0);
    *((_QWORD *)a3 + 9) = *(_QWORD *)(*(_QWORD *)a3 + 88);
    sub_22E8227E4(a1, (uint64_t)a3, (unint64_t)sub_22E823490, 0);
    return (a3[544] & 1) != 0 || (**(_QWORD **)a3 & 0x3F000) == 204800;
  }
  else
  {
    v8[0] = v9;
    v8[1] = (void *)0x1400000000;
    v6 = sub_22E83EFC4(a1, a2, (uint64_t)v8, 0, 0, 0, 0);
    if (v8[0] != v9)
      free(v8[0]);
  }
  return v6;
}

uint64_t sub_22F2E81F4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v3 = result;
  v27 = *MEMORY[0x24BDAC8D0];
  v4 = 1;
  while (*(_WORD *)(v3 + 32) == 19)
  {
    result = sub_22E827B60(v3);
    if ((result & 1) == 0)
    {
      v12 = (_BYTE *)(v3 + 944);
      v13 = *(_BYTE *)(v3 + 944);
      *(_BYTE *)(v3 + 944) = 1;
      v14 = v3;
      v15 = 1310739;
      v16 = 62;
      v18 = 0;
      v19 = 0;
      v17 = sub_22E80F788;
      sub_22E811DE8((uint64_t)&v12);
      if ((v4 & 1) != 0)
      {
        if (*(_WORD *)(v3 + 32) == 20)
        {
          v5 = 0;
          goto LABEL_9;
        }
        v6 = sub_22E837640(v3, 0);
      }
      else
      {
        v6 = sub_22F2E50C0(v3, 0);
      }
      v5 = v6;
      if ((v6 & 1) != 0)
      {
        LOWORD(v20) = 20;
        result = sub_22E885940(v3, (unsigned __int16 *)&v20, 1, 1);
        *v12 = v13;
        return result;
      }
LABEL_9:
      sub_22E811E8C((uint64_t)&v12);
      v8 = 0;
      v9 = 0;
      v10 = v3 + 960;
      v11 = 0;
      sub_22E8103B4(v3, &v8, 0);
      v22 = 0;
      v23 = 0;
      v20 = 2;
      v21 = v19;
      v24 &= 0xFE00u;
      v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
      v26 = 0;
      sub_22E824ABC(a2, (unint64_t)&v20, (uint64_t)&v8, SHIDWORD(v19));
      sub_22E80F94C(&v23);
      v7 = HIDWORD(v19);
      sub_22E8D1BC4(v10, (uint64_t)&v10);
      sub_22E80F94C(&v11);
      result = (uint64_t)sub_22E80F94C(&v9);
      v4 = 0;
      *v12 = v13;
      if (!v7)
        return result;
    }
  }
  return result;
}

uint64_t sub_22F2E83F8(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;

  v2 = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  v16 = (_BYTE *)(a1 + 944);
  v17 = *(_BYTE *)(a1 + 944);
  v4 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v18 = a1;
  v19 = 1441813;
  v20 = 62;
  v22 = 0;
  v23 = 0;
  v21 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v16, 15, "", 0) & 1) == 0)
  {
    v6 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    if (v7)
    {
      v24 = 65;
      v4 = 1;
      sub_22E885940(a1, &v24, 1, 1);
      v24 = 22;
LABEL_5:
      sub_22E885940(a1, &v24, 1, 1);
      goto LABEL_2;
    }
    v8 = v6;
    if (v2 == 278)
    {
      sub_22E811E8C((uint64_t)&v16);
      v9 = *(_QWORD **)(a1 + 88);
      v10 = HIDWORD(v23);
      v11 = 0;
      v12 = v3;
      v13 = v8;
      v14 = 0;
    }
    else
    {
      if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
      {
        v24 = 22;
        v4 = 1;
        goto LABEL_5;
      }
      v15 = sub_22E837640(a1, 0);
      sub_22E811E8C((uint64_t)&v16);
      v9 = *(_QWORD **)(a1 + 88);
      v14 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v10 = HIDWORD(v23);
      v11 = 1;
      v12 = v3;
      v13 = v8;
    }
    v4 = sub_22F331EBC(v9, v11, v12, v13, v14, v10);
  }
LABEL_2:
  *v16 = v17;
  return v4;
}

uint64_t sub_22F2E85B0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  v8 = (_BYTE *)(a1 + 944);
  v9 = *(_BYTE *)(a1 + 944);
  v4 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v10 = a1;
  v11 = 1441813;
  v12 = 62;
  v14 = 0;
  v15 = 0;
  v13 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v8, 15, "", 0) & 1) == 0)
  {
    v5 = v2 != 252;
    v6 = sub_22E837640(a1, 0);
    sub_22E811E8C((uint64_t)&v8);
    v4 = sub_22F331F54(*(_QWORD *)(a1 + 88), v5, v3, v6 & 0xFFFFFFFFFFFFFFFELL, SHIDWORD(v15));
  }
  *v8 = v9;
  return v4;
}

uint64_t sub_22F2E86A0(uint64_t a1, _DWORD *a2, unint64_t *a3, uint64_t a4, _BYTE *a5)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[14];

  v70[12] = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v68 = (char *)v70;
  v69 = 0x400000000;
  if ((sub_22E80F398((unsigned __int16 *)a1, 22, 22, (uint64_t)&v68, 1, 1) & 1) == 0)
  {
    sub_22E811E8C(a4);
    goto LABEL_12;
  }
  v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 == 23)
  {
    v11 = 3;
LABEL_4:
    v12 = 1;
    goto LABEL_5;
  }
  LOBYTE(v49) = 0;
  if (v10 == 21)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(_QWORD *)(v29 + 2816);
    v31 = v30 >= *(unsigned int *)(v29 + 2784) ? sub_22F162D2C(v29, 1u) : *(_QWORD *)(v29 + 2776) + 24 * v30;
    if (*(_WORD *)(v31 + 16) == 22)
    {
      v11 = 0;
      goto LABEL_4;
    }
  }
  *(_BYTE *)(*(_QWORD *)a5 + 945) = a5[8];
  v12 = sub_22E839DA4(a1, 0, 0, &v49, 2, 0, 0);
  v11 = 4 * ((_BYTE)v49 == 0);
LABEL_5:
  v47[0] = 0;
  v47[1] = v68;
  v13 = *(_DWORD *)(a1 + 16);
  v48 = 1;
  LODWORD(v47[0]) = v13;
  v14 = sub_22E4EF088((uint64_t)&v68, (unint64_t)v47, 1);
  v15 = &v68[24 * v69];
  v16 = *(_OWORD *)v14;
  *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)v15 = v16;
  LODWORD(v69) = v69 + 1;
  v17 = sub_22E4EF088((uint64_t)&v68, a1 + 16, 1);
  v18 = &v68[24 * v69];
  v19 = *(_OWORD *)v17;
  *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
  *(_OWORD *)v18 = v19;
  LODWORD(v69) = v69 + 1;
  sub_22F1735E4(*(_QWORD *)(a1 + 8), v68, v69, 1, 0, 1);
  sub_22E80F0F0(a1, 0);
  if (v11 < 3)
  {
    *a2 = 0;
    v12 = sub_22E837640(a1, 0);
    if ((v12 & 1) == 0 && *(_WORD *)(a1 + 32) == 22)
      v12 = sub_22EB27A20(*(_QWORD **)(a1 + 88), *(_DWORD *)(a4 + 48), *(_DWORD *)(a1 + 16), v12 & 0xFFFFFFFFFFFFFFFELL);
    if ((v12 & 1) == 0)
    {
      sub_22E811E8C(a4);
      sub_22E80F0F0(a1, 0);
      goto LABEL_13;
    }
    while (*(_WORD *)(a1 + 32) != 1)
      sub_22E80F0F0(a1, 0);
    sub_22E80F0F0(a1, 0);
LABEL_12:
    v12 = 1;
    goto LABEL_13;
  }
  v32[0] = 0;
  v32[2] = 0;
  v33 = 0u;
  v34 = a1 + 960;
  v46 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v49 = v32;
  v53 = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v54 = 0u;
  v56 = 0u;
  v55 = 5;
  v57 = 0;
  v58 = &v60;
  v59 = 0x800000000;
  v61 = 0;
  v62 = 0u;
  v63 = a1 + 960;
  v67 = 0;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v20 = *(_BYTE *)(a1 + 945);
  *(_BYTE *)(a1 + 945) = 1;
  sub_22E80FF64(a1, v32, 3, 0, 0);
  sub_22E8227E4(a1, (uint64_t)&v49, (unint64_t)sub_22E823490, 0);
  *(_BYTE *)(a1 + 945) = v20;
  sub_22E811E8C(a4);
  *(_BYTE *)(*(_QWORD *)a5 + 945) = a5[8];
  sub_22E80F0F0(a1, 0);
  if (v11 != 3)
  {
    if ((v61 & 1) == 0 && (*v49 & 0x3F000) != 0x32000)
    {
      if ((v12 & 1) != 0)
        goto LABEL_29;
      v27 = sub_22EB360B4(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(a4 + 48), (uint64_t)&v49, a3, *(unsigned int *)(a4 + 52), v12 & 0xFFFFFFFFFFFFFFFELL, v25);
      goto LABEL_10;
    }
LABEL_28:
    v12 = 1;
    goto LABEL_29;
  }
  *a2 = 3;
  if ((v61 & 1) != 0 || (*v49 & 0x3F000) == 0x32000)
    goto LABEL_28;
  v26 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v49, v21, v22, v23, v24, v25);
  v27 = sub_22F2E68B4(a1, v26, *(_DWORD *)(a4 + 48));
LABEL_10:
  v12 = v27;
LABEL_29:
  sub_22E827F78((uint64_t)&v49);
  sub_22E828530((uint64_t)v32);
LABEL_13:
  if (v68 != (char *)v70)
    free(v68);
  return v12;
}

uint64_t sub_22F2E8B0C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 40);
  v28 = (_BYTE *)(a1 + 944);
  v29 = *(_BYTE *)(a1 + 944);
  v3 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v30 = a1;
  v31 = 1441813;
  v32 = 62;
  v34 = 0;
  v35 = 0;
  v33 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v28, 1510, "__builtin_bit_cast", 0) & 1) == 0)
  {
    v13[0] = 0;
    v13[2] = 0;
    v14 = 0u;
    v15 = a1 + 960;
    v27 = 0;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0;
    sub_22E80FF64(a1, v13, 3, 0, 0);
    v36 = v13;
    v40 = 0;
    v41 = 0;
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
    v42 = *((_QWORD *)&v18 + 1);
    v44 = 0u;
    v43 = 5;
    v45 = 0;
    v46 = &v48;
    v47 = 0x800000000;
    v49 = (v13[0] & 0x3F000) == 204800;
    v50 = 0u;
    v51 = v15;
    v55 = 0;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    sub_22E8227E4(a1, (uint64_t)&v36, (unint64_t)sub_22E823490, 0);
    if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
    {
      sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 15, (uint64_t)v12);
      v4 = (unsigned __int8 *)v12[0];
      if (!v12[0])
      {
        v4 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
        v12[0] = v4;
      }
      v4[*v4 + 1] = 4;
      v5 = v12[0];
      v6 = *(unsigned __int8 *)v12[0];
      *(_BYTE *)v12[0] = v6 + 1;
      *(_QWORD *)(v5 + 8 * v6 + 16) = 65;
      sub_22E3BB0B8((uint64_t)v12);
      LOWORD(v12[0]) = 22;
      v3 = 1;
      sub_22E885940(a1, (unsigned __int16 *)v12, 1, 1);
    }
    else
    {
      v8 = sub_22E837640(a1, 0);
      v3 = 1;
      if ((sub_22E811E8C((uint64_t)&v28) & 1) == 0 && (v8 & 1) == 0)
      {
        if ((v49 & 1) != 0 || (*v36 & 0x3F000) == 0x32000)
          v3 = 1;
        else
          v3 = sub_22F30C66C(*(_QWORD *)(a1 + 88), v2, (uint64_t)&v36, v8, HIDWORD(v35), v9, v10, v11);
      }
    }
    sub_22E827F78((uint64_t)&v36);
    sub_22E828530((uint64_t)v13);
  }
  *v28 = v29;
  return v3;
}

uint64_t sub_22F2E8E10(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 48 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 48 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 48 * v10), (const void *)(*(_QWORD *)a2 + 48 * v10), *(_QWORD *)a2 + 48 * v11 - (*(_QWORD *)a2 + 48 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

BOOL sub_22F2E8F34(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(_QWORD);
  BOOL v17;
  int v18;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  __int128 v37;
  void *v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v40 = 0;
  v41 = 0;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 0;
  v6 = 0;
  if ((sub_22E88BFB8(a1, (unsigned int *)&v35) & 1) == 0)
  {
    v27 = (_BYTE *)(a1 + 944);
    v28 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v29 = a1;
    v30 = 1572887;
    v31 = 62;
    v33 = 0;
    v34 = 0;
    v32 = sub_22E80CED8;
    if (sub_22E811DE8((uint64_t)&v27))
    {
      sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v25);
      v7 = v25;
      if (!v25)
      {
        v7 = (unsigned __int8 *)sub_22E3B8AAC(v26);
        v25 = v7;
      }
      v7[*v7 + 1] = 4;
      v8 = v25;
      v9 = *v25;
      *v25 = v9 + 1;
      *(_QWORD *)&v8[8 * v9 + 16] = 23;
      sub_22E3BB0B8((uint64_t)&v25);
      goto LABEL_6;
    }
    if (v42 == 1)
    {
LABEL_16:
      sub_22F2F18E0((uint64_t)&v27);
LABEL_6:
      v6 = 0;
LABEL_7:
      *v27 = v28;
      goto LABEL_8;
    }
    if (v42 == 2)
    {
      sub_22E88453C(a1, v35, 1960, (uint64_t)&v25);
      v11 = v36;
      v12 = v25;
      if (!v25)
      {
        v12 = (unsigned __int8 *)sub_22E3B8AAC(v26);
        v25 = v12;
      }
      v12[*v12 + 1] = 2;
      v13 = v25;
      v14 = *v25;
      *v25 = v14 + 1;
      *(_QWORD *)&v13[8 * v14 + 16] = v11;
      sub_22E3BB0B8((uint64_t)&v25);
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a1 + 48) || *(_DWORD *)(a1 + 52) != (_DWORD)v34)
      goto LABEL_22;
    v15 = *(_QWORD *)(a1 + 56);
    if (v15 > 0xF)
      goto LABEL_23;
    v16 = *(uint64_t (**)(_QWORD))(a1 + 64);
    if (v16)
      v15 = v16(*(_QWORD *)(a1 + 72));
    else
LABEL_22:
      v15 = 0;
LABEL_23:
    v17 = 0;
    v18 = *(unsigned __int16 *)(a1 + 32);
    do
    {
      if ((v18 - 436) < 3 || v18 == 1)
        break;
      if (sub_22E84A0FC(a1))
      {
        v20 = sub_22E84A334(a1, a2, v15);
      }
      else if (*(_WORD *)(a1 + 32) == 23)
      {
        v20 = sub_22E84AF40(a1);
      }
      else
      {
        v20 = sub_22E83766C(a1, 0);
      }
      if (*(_WORD *)(a1 + 32) == 26)
      {
        v21 = *(_QWORD **)(a1 + 88);
        v22 = v20 & 0xFFFFFFFFFFFFFFFELL;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v20 = sub_22EE739C0(v21, v22, *(_DWORD *)(a1 + 40), 0);
      }
      if ((v20 & 1) != 0)
      {
        *a3 = 0;
      }
      else
      {
        v23 = *(unsigned int *)(a2 + 8);
        if (v23 >= *(unsigned int *)(a2 + 12))
        {
          v24 = v20;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v24;
          v23 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v23) = v20 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a2 + 8);
      }
      v18 = *(unsigned __int16 *)(a1 + 32);
      v17 = v18 == 65;
      if (v18 == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v18 = *(unsigned __int16 *)(a1 + 32);
      }
    }
    while (v18 != 24);
    sub_22E811E8C((uint64_t)&v27);
    v6 = !v17;
    goto LABEL_7;
  }
LABEL_8:
  if (HIDWORD(v38[1]))
    free(v38[0]);
  return v6;
}

uint64_t *sub_22F2E9284(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[32];
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1 + 960;
  v13 = 0;
  v14 = 0;
  v15 = v3;
  v16 = 0;
  if (*(_WORD *)(a1 + 32) == 186)
  {
    v5 = (int *)(a1 + 16);
    if (a2 == 10 || a2 == 7)
    {
      sub_22E884578(a1, v5, 1640, (uint64_t)v12);
      v6 = (unsigned __int8 *)v12[0];
      if (!v12[0])
      {
        v6 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
        v12[0] = v6;
      }
      v6[*v6 + 1] = 2;
      v7 = v12[0];
      v8 = *(unsigned __int8 *)v12[0];
      *(_BYTE *)v12[0] = v8 + 1;
      *(_QWORD *)(v7 + 8 * v8 + 16) = a2 == 10;
      v9 = v12;
    }
    else
    {
      sub_22E884578(a1, v5, 1639, (uint64_t)v11);
      v9 = v11;
    }
    sub_22E3BB0B8((uint64_t)v9);
    sub_22E810414(a1, &v13, 0, 0, 0);
    v3 = v15;
  }
  sub_22E8D1BC4(v3, (uint64_t)&v15);
  sub_22E80F94C(&v16);
  return sub_22E80F94C(&v14);
}

unint64_t sub_22F2E93A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[36];
  int v19;

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) == 3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v5 + 752))
    {
      *(_BYTE *)(v5 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v5 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F316684(*(_QWORD *)(a1 + 88));
    return 0;
  }
  v7 = *(unsigned int *)(v4 + 24);
  v8 = sub_22F140BE0(v4);
  if (v8 > 22)
  {
    if (v8 == 23)
    {
      sub_22E84CD58(a1, v7);
    }
    else if (v8 == 24)
    {
      sub_22E84CFAC(a1, v7);
    }
    else
    {
      if (v8 == 25)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
        if ((*(_QWORD *)(v9 + 20) & 0x200000000000) != 0 || (*(_QWORD *)(v9 + 140) & 0x20000000000000) != 0)
        {
          v19 = 5;
          return sub_22E887218(a1, v7, &v19);
        }
        if ((*(_BYTE *)(v9 + 1) & 1) != 0)
        {
          v10 = v18;
          v11 = v18;
          v12 = a1;
          v13 = v7;
          v14 = 1441;
        }
        else
        {
          v10 = v17;
          v11 = v17;
          v12 = a1;
          v13 = v7;
          v14 = 1440;
        }
        sub_22E88453C(v12, v13, v14, (uint64_t)v11);
        v15 = v10;
      }
      else
      {
LABEL_23:
        sub_22E88453C(a1, v7, 1759, (uint64_t)v16);
        v15 = v16;
      }
      sub_22E3BB0B8((uint64_t)v15);
      LOWORD(v19) = 62;
      sub_22E885940(a1, (unsigned __int16 *)&v19, 1, 0);
    }
    return 0;
  }
  switch(v8)
  {
    case 1:
      result = sub_22E84B554(a1, v7);
      break;
    case 2:
      result = sub_22E84CC18(a1, v7);
      break;
    case 5:
      sub_22F2E95D8(a1, v7 | (v7 << 32));
      return 0;
    case 6:
      result = sub_22E84C368(a1, v7, a2);
      break;
    case 7:
      result = sub_22E84B80C(a1, v7, a2);
      break;
    case 10:
      result = sub_22E84BFB8(a1, v7, a2);
      break;
    default:
      goto LABEL_23;
  }
  return result;
}

void sub_22F2E95D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BYTE v6[32];

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = *(uint64_t **)(v4 + 2672);
  if (v5)
  {
    sub_22F2E9710(v5, a2);
  }
  else
  {
    sub_22E88453C(a1, a2, 1517, (uint64_t)v6);
    sub_22E3BB0B8((uint64_t)v6);
  }
}

_DWORD *sub_22F2E965C(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8[0] = v9;
  v8[1] = (void *)0x100000000;
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = v1;
  v6 = 0;
  v2 = sub_22E84D518(a1, (uint64_t)&v4, (int *)&v7 + 1, (uint64_t *)v8, (unsigned int *)&v7, 0);
  if (v6)
    sub_22EAF4E7C(v4, v5, v6);
  if (v8[0] != v9)
    free(v8[0]);
  return v2;
}

void sub_22F2E9710(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  _QWORD *v7;
  uint64_t v8;

  sub_22F33B824(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 12888), a1[1], a2);
  if (*((_DWORD *)a1 + 8))
  {
    v4 = 0;
    do
      sub_22E850EA4(*a1, *(_QWORD *)(a1[3] + 8 * v4++), 1);
    while (v4 < *((unsigned int *)a1 + 8));
  }
  sub_22EAFC148(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 12888), a2, 0, 0, 0, 0);
  v5 = *((unsigned int *)a1 + 8);
  if (*((_BYTE *)a1 + 16))
  {
    if (!(_DWORD)v5)
      goto LABEL_13;
    for (i = 0; i < v5; ++i)
    {
      sub_22E850EA4(*a1, *(_QWORD *)(a1[3] + 8 * i), 0);
      v5 = *((unsigned int *)a1 + 8);
    }
  }
  if ((_DWORD)v5)
  {
    v7 = (_QWORD *)a1[3];
    v8 = 8 * v5;
    do
    {
      if (*v7)
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
LABEL_13:
  *((_DWORD *)a1 + 8) = 0;
  *((_BYTE *)a1 + 104) = 1;
}

void sub_22F2E9810(uint64_t a1, unint64_t a2, int a3, int a4)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  _BYTE v19[32];
  _QWORD v20[3];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE *v23;
  char v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int16 v32;
  _QWORD v33[6];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD v48[41];
  char v49;
  void *v50[2];
  _QWORD v51[34];

  v51[32] = *MEMORY[0x24BDAC8D0];
  v31 = a3;
  v50[0] = v51;
  v50[1] = (void *)0x2000000000;
  sub_22E885C30(a1, 40);
  v23 = (_BYTE *)(a1 + 944);
  v24 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v25 = a1;
  v26 = 1572887;
  v27 = 62;
  v29 = 0;
  v30 = 0;
  v28 = sub_22E80CED8;
  sub_22E811DE8((uint64_t)&v23);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = *(unsigned __int16 *)(a1 + 32);
          if (v5 <= 0x77)
            break;
          if (v5 != 120 && v5 != 165)
          {
            if (v5 - 436 < 3)
              goto LABEL_33;
            goto LABEL_9;
          }
          LODWORD(v33[0]) = 0;
          sub_22E82BC2C(a1, v33);
        }
        if (*(unsigned __int16 *)(a1 + 32) > 0x3Du)
          break;
        if (v5 == 3)
        {
          v10 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v10 + 752))
          {
            *(_BYTE *)(v10 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v10 + 48) + 6) = 1;
          }
          *(_WORD *)(a1 + 32) = 1;
          sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 4u);
          goto LABEL_30;
        }
        if (v5 == 1 || v5 == 24)
        {
LABEL_33:
          v11 = a2;
          v12 = a4;
          v13 = a1;
          v14 = 0;
LABEL_34:
          sub_22F2EA324(v13, v11, v12, (uint64_t)&v23, (uint64_t)v50, v14);
          goto LABEL_30;
        }
LABEL_9:
        v20[0] = a1;
        v20[1] = &v31;
        v20[2] = v50;
        memset(&v33[2], 0, 24);
        v33[0] = 0;
        v33[5] = a1 + 960;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0;
        v7 = *(_QWORD *)(a1 + 88);
        v45 = 0;
        v46 = v7;
        v47[0] = 0;
        v47[1] = v48;
        v47[2] = 0x400000000;
        v8 = *(_QWORD *)(v7 + 3200);
        *(_QWORD *)(v7 + 3200) = v47;
        v48[40] = v8;
        v49 = 0;
        sub_22E82161C(a1, (unint64_t)v33, (void (*)(uint64_t, unint64_t *, uint64_t *))sub_22E853C24, (uint64_t)v20, 0);
        if (*(_WORD *)(a1 + 32) == 62)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        else
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1532, (uint64_t)v19);
          sub_22E3BB0B8((uint64_t)v19);
          v32 = 24;
          sub_22E885940(a1, &v32, 1, 3);
        }
        sub_22E828C30((uint64_t)&v46);
        sub_22E828530((uint64_t)v33);
      }
      if (v5 != 62)
        break;
      sub_22E884DD8(a1, 2, 0);
    }
    if (v5 != 72)
      goto LABEL_9;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if (*(_WORD *)(a1 + 32) == 3)
      break;
    v9 = sub_22F140BE0(a1 + 16);
    if (v9 > 0x14)
      goto LABEL_26;
    if (((1 << v9) & 0x100B00) != 0)
    {
      v31 = sub_22F140BE0(a1 + 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    else
    {
      if (v9 == 5)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1644, (uint64_t)v22);
        sub_22E3BB0B8((uint64_t)v22);
        v16 = *(_DWORD *)(a1 + 16) - 1;
        *(_WORD *)(a1 + 32) = 72;
        *(_DWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 20) = 1;
        sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
        v11 = a2;
        v12 = a4;
        v13 = a1;
        v14 = 1;
        goto LABEL_34;
      }
LABEL_26:
      sub_22E884578(a1, (int *)(a1 + 16), 1636, (uint64_t)v21);
      sub_22E3BB0B8((uint64_t)v21);
    }
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v15 + 752))
  {
    *(_BYTE *)(v15 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v15 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  sub_22F316878(*(_QWORD *)(a1 + 88));
LABEL_30:
  *v23 = v24;
  sub_22E885CF4(a1);
  if (v50[0] != v51)
    free(v50[0]);
}

unint64_t sub_22F2E9C3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[39];
  char v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v44 = (_BYTE *)(a1 + 944);
  v45 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v46 = a1;
  v47 = 1441813;
  v48 = 62;
  v50 = 0;
  v51 = 0;
  v49 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v44);
  sub_22E8287D8((uint64_t)&v40, a1);
  sub_22E850968((char **)a1, (int *)a2, a3);
  v8 = *(_DWORD *)(a1 + 16);
  if ((sub_22F2E2774(a1) & 1) != 0 || sub_22E8210F4(a1))
  {
    v25[0] = 0;
    v25[2] = 0;
    v26 = 0u;
    v27 = a1 + 960;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
    v39 = a2;
    sub_22E80FF64(a1, v25, 3, 8 * (a3 == 2), 0);
    v52 = v25;
    v56 = 0;
    v57 = 0;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    v58 = *((_QWORD *)&v30 + 1);
    v60 = 0u;
    v59 = a3;
    v61 = 0;
    v62 = &v64;
    v63 = 0x800000000;
    v65 = (v25[0] & 0x3F000) == 204800;
    v66 = 0u;
    v67 = v27;
    v71 = 0;
    v70 = 0u;
    v69 = 0u;
    v68 = 0u;
    sub_22E8227E4(a1, (uint64_t)&v52, (unint64_t)sub_22E823490, 0);
    v14 = 0;
    if ((v65 & 1) == 0)
    {
      if ((*v52 & 0x3F000) == 0x32000)
      {
        v14 = 0;
      }
      else
      {
        v24 = 0;
        if ((*(_DWORD *)a2 & 0x40) != 0)
          sub_22E850B50(*(_QWORD *)(a1 + 88), (uint64_t *)&v52, HIBYTE(*(_DWORD *)a2) & 3, *(_DWORD *)(a2 + 4), &v24);
        v16 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v52, v9, v10, v11, v12, v13);
        if (v17)
          v14 = 0;
        else
          v14 = v16;
        if (a3 == 3)
        {
          sub_22E8D1C2C(a4 + 16, (uint64_t)&v67);
          if ((v68 & 4) != 0)
          {
            if ((v68 & 0xFFFFFFFFFFFFFFF8) != 0)
              *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
          }
          else
          {
            *(_QWORD *)&v68 = 0;
          }
          v18 = (uint64_t)v52;
          sub_22E8D1C2C(a4 + 16, (uint64_t)(v52 + 5));
          v19 = *(_QWORD *)(v18 + 48);
          if ((v19 & 4) != 0)
          {
            v22 = v19 & 0xFFFFFFFFFFFFFFF8;
            if (v22)
              *(_DWORD *)(v22 + 8) = 0;
          }
          else
          {
            *(_QWORD *)(v18 + 48) = 0;
          }
          sub_22E853888(a4, v52 + 3);
          sub_22E853888(a4, &v66);
          if ((_DWORD)v63)
          {
            v20 = 0;
            v21 = 120 * v63;
            do
            {
              sub_22E853888(a4, &v62[v20 / 8 + 2]);
              v20 += 120;
            }
            while (v21 != v20);
          }
        }
      }
    }
    sub_22E827F78((uint64_t)&v52);
    sub_22E828530((uint64_t)v25);
  }
  else
  {
    v14 = 0;
  }
  if (*(_WORD *)(a1 + 32) == 22 || *(_DWORD *)(a1 + 16) != v8)
  {
    sub_22E811E8C((uint64_t)&v44);
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1542, (uint64_t)v23);
    sub_22E3BB0B8((uint64_t)v23);
    LOWORD(v52) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v52, 1, 1);
  }
  if (v41)
    sub_22F31E524(*(_QWORD *)(v40 + 88), v41);
  *v42 = v43;
  *v44 = v45;
  return v14;
}

void sub_22F2E9FF8(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, _DWORD *a5, int *a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned __int8 a10)
{
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  sub_22E84EEEC(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, (uint64_t)a9, a10, 0);
  v14 = *(unsigned __int16 *)(a1 + 32);
  if (v14 == 1)
    return;
  if (a10)
  {
    if (v14 != 46)
      return;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(v15 + 2816);
  if (v16 >= *(unsigned int *)(v15 + 2784))
    v17 = sub_22F162D2C(v15, 1u);
  else
    v17 = *(_QWORD *)(v15 + 2776) + 24 * v16;
  if (*(_WORD *)(v17 + 16) == 46)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_11:
    if (*(_DWORD *)(a7 + 8))
    {
      if (a10)
        v18 = 0;
      else
        v18 = 2;
      sub_22E884578(a1, (int *)(a1 + 16), 1643, (uint64_t)v21);
      v19 = *a6 | ((unint64_t)*a9 << 32);
      v20 = v21[0];
      if (!v21[0])
      {
        v20 = sub_22E3B8AAC(v21[1]);
        v21[0] = v20;
      }
      sub_22E4D6448(v20 + 336, v19, 1);
      sub_22E3BB0B8((uint64_t)v21);
      LODWORD(v21[0]) = 3407923;
      sub_22E885940(a1, (unsigned __int16 *)v21, 2, v18);
    }
    else
    {
      sub_22E84DB88(a1, a7, a8, 0, 0, a6, a9, a10);
    }
  }
}

unint64_t sub_22F2EA184(uint64_t a1, unsigned int a2, unint64_t a3, int a4, _DWORD *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[16];
  void *v18;
  uint64_t v19;
  _BYTE v20[32];
  unint64_t *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  v21 = v23;
  v22 = 0x400000000;
  v18 = v20;
  v19 = 0x400000000;
  v15 = v17;
  v16 = 0x400000000;
  sub_22F2E9FF8(a1, a3, (int *)&v14 + 1, (uint64_t)&v21, &v14, (int *)&v13 + 1, (uint64_t)&v18, (uint64_t)&v15, (unsigned int *)&v13, a4);
  if (*(_WORD *)(a1 + 32) == 1)
  {
    v10 = 0;
  }
  else
  {
    v11 = 16;
    if (a4)
      v11 = 40;
    *a5 = *(_DWORD *)(a1 + v11);
    v10 = sub_22EE7D0A4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, a3, HIDWORD(v14), v21, v22, v14, HIDWORD(v13), (uint64_t *)v18, v19, (int *)v15, v16, v13);
  }
  if (v15 != v17)
    free(v15);
  if (v18 != v20)
    free(v18);
  if (v21 != v23)
    free(v21);
  return v10;
}

uint64_t *sub_22F2EA324(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  if ((a6 & 1) == 0)
    sub_22E811E8C(a4);
  sub_22EA3903C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a4 + 52), a5);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(v11 + 12888);
  v13 = *(uint64_t **)a5;
  v14 = *(unsigned int *)(a5 + 8);
  v15 = *(_DWORD *)(a4 + 48);
  v16 = *(_DWORD *)(a4 + 52);
  v18 = 0;
  v19 = 0;
  sub_22EA39224(v11, v12, a3, a2, v13, v14, v15, v16, (uint64_t)&v18);
  return sub_22E80F94C(&v19);
}

uint64_t sub_22F2EA3BC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v7;

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) == 62)
  {
    v5 = 0;
LABEL_3:
    sub_22E8847B4(a1, 0x3Eu, 16, "@throw", 6uLL);
    return sub_22F344640(*(_QWORD **)(a1 + 88), a2, v5 & 0xFFFFFFFFFFFFFFFELL, *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888));
  }
  v5 = sub_22E837640(a1, 0);
  if ((v5 & 1) == 0)
    goto LABEL_3;
  v7 = 62;
  sub_22E885940(a1, &v7, 1, 0);
  return 1;
}

uint64_t sub_22F2EA488(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) == 21)
  {
    sub_22E80F720(a1);
    v5 = sub_22E837640(a1, 0);
    v6 = v5;
    if (*(_WORD *)(a1 + 32) == 22)
    {
      sub_22E80F720(a1);
      v7 = v6 & 1;
    }
    else
    {
      v7 = v5 & 1;
      if ((v5 & 1) == 0)
      {
        sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v20);
        v13 = v20;
        if (!v20)
        {
          v13 = (unsigned __int8 *)sub_22E3B8AAC(v21);
          v20 = v13;
        }
        v13[*v13 + 1] = 4;
        v14 = v20;
        v15 = *v20;
        *v20 = v15 + 1;
        *(_QWORD *)&v14[8 * v15 + 16] = 22;
        sub_22E3BB0B8((uint64_t)&v20);
      }
      LOWORD(v20) = 23;
      sub_22E885940(a1, (unsigned __int16 *)&v20, 1, 3);
    }
    if (*(_WORD *)(a1 + 32) == 23)
    {
      if (!v7)
        v6 = sub_22ED36D40(*(uint64_t **)(a1 + 88), a2, v6 & 0xFFFFFFFFFFFFFFFELL);
      sub_22E885C30(a1, 4194312);
      v16 = sub_22E878918(a1, 0);
      sub_22E885CF4(a1);
      if ((v6 & 1) == 0)
      {
        if ((v16 & 1) != 0)
          v16 = sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
        return sub_22F344708(*(_QWORD *)(a1 + 88), a2, v6 & 0xFFFFFFFFFFFFFFFELL, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else if (!v7)
    {
      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v20);
      v17 = v20;
      if (!v20)
      {
        v17 = (unsigned __int8 *)sub_22E3B8AAC(v21);
        v20 = v17;
      }
      v17[*v17 + 1] = 4;
      v18 = v20;
      v19 = *v20;
      *v20 = v19 + 1;
      *(_QWORD *)&v18[8 * v19 + 16] = 23;
      sub_22E3BB0B8((uint64_t)&v20);
    }
    return 1;
  }
  sub_22E884578(a1, (int *)v4, 1510, (uint64_t)&v20);
  v8 = v20;
  if (!v20)
  {
    v8 = (unsigned __int8 *)sub_22E3B8AAC(v21);
    v20 = v8;
  }
  v9 = 1;
  v8[*v8 + 1] = 1;
  v10 = v20;
  v11 = *v20;
  *v20 = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = "@synchronized";
  sub_22E3BB0B8((uint64_t)&v20);
  return v9;
}

uint64_t sub_22F2EA6EC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) == 23)
  {
    sub_22E885C30(a1, 4194312);
    v5 = sub_22E878918(a1, 0);
    sub_22E885CF4(a1);
    if ((v5 & 1) != 0)
      v5 = sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
    return sub_22F344820(*(_QWORD *)(a1 + 88), a2, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    sub_22E884578(a1, (int *)v4, 15, (uint64_t)v10);
    v7 = (unsigned __int8 *)v10[0];
    if (!v10[0])
    {
      v7 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      v10[0] = v7;
    }
    v7[*v7 + 1] = 4;
    v8 = v10[0];
    v9 = *(unsigned __int8 *)v10[0];
    *(_BYTE *)v10[0] = v9 + 1;
    *(_QWORD *)(v8 + 8 * v9 + 16) = 23;
    sub_22E3BB0B8((uint64_t)v10);
    return 1;
  }
}

uint64_t sub_22F2EA800(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (*(_BYTE *)(a1 + 2625)
    && (!a2 || sub_22EA30968(*(_QWORD *)(a1 + 88), a2))
    && sub_22E87A070(a1))
  {
    return sub_22F31E348(*(_QWORD *)(a1 + 88), a2);
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24FAA49E0;
  *(_QWORD *)(v5 + 8) = a1;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = v5 + 40;
  v6 = v5 + 24;
  *(_QWORD *)(v5 + 32) = 0x400000000;
  *(_BYTE *)(v5 + 136) = 0;
  v7 = *(_QWORD *)(a1 + 2688);
  v8 = *(_DWORD *)(v7 + 32);
  if (v8 >= *(_DWORD *)(v7 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v8) = v5;
  ++*(_DWORD *)(v7 + 32);
  v9 = sub_22E4EF088(v6, a1 + 16, 1);
  v10 = *(_QWORD *)(v5 + 24) + 24 * *(unsigned int *)(v5 + 32);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(v5 + 32);
  v12 = *(unsigned __int16 *)(a1 + 32);
  if (v12 == 61)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    while (*(_WORD *)(a1 + 32) != 23)
    {
      sub_22E80F398((unsigned __int16 *)a1, 21, 21, v6, 0, 1);
      sub_22E80F398((unsigned __int16 *)a1, 22, 22, v6, 0, 1);
    }
  }
  else
  {
    if (v12 != 151)
      goto LABEL_18;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if (*(_WORD *)(a1 + 32) == 61)
    {
      v13 = sub_22E4EF088(v6, a1 + 16, 1);
      v14 = *(_QWORD *)(v5 + 24) + 24 * *(unsigned int *)(v5 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v5 + 32);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      while (*(_WORD *)(a1 + 32) != 23)
      {
        sub_22E80F398((unsigned __int16 *)a1, 21, 21, v6, 0, 1);
        sub_22E80F398((unsigned __int16 *)a1, 22, 22, v6, 0, 1);
      }
    }
  }
  v16 = sub_22E4EF088(v6, a1 + 16, 1);
  v17 = *(_QWORD *)(v5 + 24) + 24 * *(unsigned int *)(v5 + 32);
  v18 = *(_OWORD *)v16;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
  *(_OWORD *)v17 = v18;
  ++*(_DWORD *)(v5 + 32);
LABEL_18:
  sub_22E80CED8(a1);
  while (1)
  {
    result = sub_22E80F398((unsigned __int16 *)a1, 24, 24, v6, 0, 1);
    if (*(_WORD *)(a1 + 32) != 129)
      break;
    sub_22E80F398((unsigned __int16 *)a1, 23, 23, v6, 0, 1);
  }
  return result;
}

unint64_t sub_22F2EAAE8(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;

  if (*(_WORD *)(a1 + 32) == 3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v4 + 752))
    {
      *(_BYTE *)(v4 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + 6) = 1;
    }
    v5 = 1;
    *(_WORD *)(a1 + 32) = 1;
    sub_22F316A20(*(_QWORD *)(a1 + 88));
    return v5;
  }
  if (sub_22F140B7C(a1 + 16, 14))
    return sub_22E8510C0(a1, a2);
  if (sub_22F140B7C(a1 + 16, 13))
    return sub_22F2EA3BC(a1, a2);
  if (sub_22F140B7C(a1 + 16, 17))
    return sub_22F2EA488(a1, a2);
  if (!sub_22F140B7C(a1 + 16, 18))
  {
    if (sub_22F140B7C(a1 + 16, 25)
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 140) & 0x20000000000000) != 0)
    {
      v10 = 62;
      sub_22E885940(a1, &v10, 1, 0);
      return sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
    }
    else
    {
      *(_DWORD *)(a1 + 2628) = a2;
      v9 = sub_22F2E4FC4(a1, a2);
      if ((v9 & 1) == 0)
      {
        sub_22E884BB4(a1, 1527);
        return sub_22E87872C(a1, v9, a3);
      }
      v11 = 62;
      v5 = 1;
      sub_22E885940(a1, &v11, 1, 0);
    }
    return v5;
  }
  return sub_22F2EA6EC(a1, a2);
}

uint64_t sub_22F2EACCC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_22EB25910(*(_QWORD *)(a1 + 88), a1 + 16, 0);
  v5 = result;
  if ((result & 1) == 0)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    return sub_22EC27798(*(_QWORD *)(a1 + 88), a2, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return result;
}

uint64_t sub_22F2EAD44(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_22EB261F0(*(_QWORD *)(a1 + 88), a1 + 16, 0);
  v5 = result;
  if ((result & 1) == 0)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    return sub_22EC27798(*(_QWORD *)(a1 + 88), a2, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  return result;
}

uint64_t sub_22F2EADBC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;

  if (*(_WORD *)(a1 + 32) == 21)
  {
    v12 = (unsigned __int8 *)(a1 + 944);
    LOBYTE(v13) = *(_BYTE *)(a1 + 944);
    v4 = 1;
    *(_BYTE *)(a1 + 944) = 1;
    v14 = a1;
    v15 = 1441813;
    v16 = 62;
    v18 = 0;
    v19 = 0;
    v17 = sub_22E80F720;
    sub_22E811DE8((uint64_t)&v12);
    v5 = sub_22E83766C(a1, 0);
    if ((sub_22E811E8C((uint64_t)&v12) & 1) == 0 && (v5 & 1) == 0)
    {
      v6 = HIDWORD(v19);
      v7 = sub_22EB27A20(*(_QWORD **)(a1 + 88), v19, HIDWORD(v19), v5 & 0xFFFFFFFFFFFFFFFELL);
      v4 = sub_22EC27DFC(*(_QWORD **)(a1 + 88), a2 | ((unint64_t)v6 << 32), (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
    }
    *v12 = v13;
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1510, (uint64_t)&v12);
    v8 = v12;
    if (!v12)
    {
      v8 = (unsigned __int8 *)sub_22E3B8AAC(v13);
      v12 = v8;
    }
    v4 = 1;
    v8[*v8 + 1] = 1;
    v9 = v12;
    v10 = *v12;
    *v12 = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = "@";
    sub_22E3BB0B8((uint64_t)&v12);
  }
  return v4;
}

uint64_t sub_22F2EAF04(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) == 21)
  {
    v5 = *(unsigned int *)(v4 + 24);
    v14 = (unsigned __int8 *)(a1 + 944);
    LOBYTE(v15) = *(_BYTE *)(a1 + 944);
    v6 = 1;
    *(_BYTE *)(a1 + 944) = 1;
    v16 = a1;
    v17 = 1441813;
    v18 = 62;
    v20 = 0;
    v21 = 0;
    v19 = sub_22E80F720;
    sub_22E811DE8((uint64_t)&v14);
    v7 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    v9 = v8;
    sub_22E811E8C((uint64_t)&v14);
    if (!v9)
      v6 = sub_22F3342A0(*(_QWORD *)(a1 + 88), a2, v5, v21, v7, SHIDWORD(v21));
    *v14 = v15;
  }
  else
  {
    sub_22E884578(a1, (int *)v4, 1510, (uint64_t)&v14);
    v10 = v14;
    if (!v14)
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC(v15);
      v14 = v10;
    }
    v6 = 1;
    v10[*v10 + 1] = 1;
    v11 = v14;
    v12 = *v14;
    *v14 = v12 + 1;
    *(_QWORD *)&v11[8 * v12 + 16] = "@encode";
    sub_22E3BB0B8((uint64_t)&v14);
  }
  return v6;
}

BOOL sub_22F2EB074(uint64_t a1, _BYTE *a2, unint64_t *a3)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD v21[5];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  int v44;
  _WORD *v45;
  uint64_t v46;
  _WORD v47[484];
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 947);
  *(_BYTE *)(a1 + 947) = 1;
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 <= 0x97)
  {
    if (v7 != 5 && v7 != 71)
      goto LABEL_8;
LABEL_7:
    sub_22E88B7AC(a1);
    v7 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_8;
  }
  if (v7 == 399 || v7 == 152)
    goto LABEL_7;
LABEL_8:
  if ((sub_22F31CD8C(*(_QWORD *)(a1 + 88), v7) & 1) != 0)
  {
    v21[0] = 0;
    memset(&v21[2], 0, 24);
    v22 = a1 + 960;
    v34 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
    sub_22E847974(a1, (uint64_t)v21);
    if (*(_WORD *)(a1 + 32) == 21)
    {
      v14 = sub_22E846914(a1, v21, v8, v9, v10, v11, v12, v13);
      if ((v14 & 1) == 0)
        v14 = sub_22E8385C0((_BYTE *)a1, v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) == 0)
        v14 = sub_22E83778C(a1, v14 & 0xFFFFFFFFFFFFFFFELL, 1);
      v15 = 1;
      if ((v14 & 1) == 0)
      {
        *a2 = 1;
        *a3 = v14 & 0xFFFFFFFFFFFFFFFELL;
        v15 = 0;
      }
    }
    else
    {
      v35 = v21;
      v39 = 0;
      v40 = 0;
      v36 = 0u;
      v37 = 0u;
      v38 = 0;
      v41 = *((_QWORD *)&v25 + 1);
      v43 = 0u;
      v42 = 5;
      v44 = 0;
      v45 = v47;
      v46 = 0x800000000;
      v47[480] = (v21[0] & 0x3F000) == 204800;
      v48 = 0u;
      v49 = v22;
      v53 = 0;
      v52 = 0u;
      v51 = 0u;
      v50 = 0u;
      v18 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v35, v9, v10, v11, v12, v13);
      v15 = v19 != 0;
      if (!v19)
      {
        *a2 = 0;
        *a3 = v18;
      }
      sub_22E827F78((uint64_t)&v35);
    }
    sub_22E828530((uint64_t)v21);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 88);
    v17 = sub_22E837640(a1, 0);
    if ((v17 & 1) == 0)
      v17 = (uint64_t)sub_22EBBCB14(v16, (_DWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v35);
    v15 = 1;
    if ((v17 & 1) == 0)
    {
      *a2 = 1;
      *a3 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v15 = 0;
    }
  }
  *(_BYTE *)(a1 + 947) = v6;
  return v15;
}

BOOL sub_22F2EB2D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (*(_WORD *)(a1 + 32) == 1)
  {
    v2 = a1 + 16;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(v5 + 2816);
    if (v6 >= *(unsigned int *)(v5 + 2784))
      v2 = sub_22F162D2C(v5, 1u);
    else
      v2 = *(_QWORD *)(v5 + 2776) + 24 * v6;
  }
  if (*(_WORD *)(v2 + 16) != 5)
    return 0;
  if (*(_WORD *)(a1 + 32) == 1)
  {
    v3 = a1 + 16;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(v7 + 2816) + 1;
    if (v8 >= *(unsigned int *)(v7 + 2784))
      v3 = sub_22F162D2C(v7, 2u);
    else
      v3 = *(_QWORD *)(v7 + 2776) + 24 * v8;
  }
  return *(unsigned __int16 *)(v3 + 16) == 5;
}

void sub_22F2EB398(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2EB404((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t *sub_22F2EB404(uint64_t *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = *result;
    v4 = *result + 72 * v2;
    do
    {
      v5 = *(_OWORD *)v3;
      v6 = *(_OWORD *)(v3 + 16);
      v7 = *(_OWORD *)(v3 + 32);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(v3 + 48);
      *(_OWORD *)(a2 + 16) = v6;
      *(_OWORD *)(a2 + 32) = v7;
      *(_OWORD *)a2 = v5;
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(v3 + 56);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      v3 += 72;
      a2 += 72;
    }
    while (v3 != v4);
    v8 = *((unsigned int *)result + 2);
    if ((_DWORD)v8)
    {
      v9 = *result - 8;
      v10 = 72 * v8;
      do
      {
        result = sub_22E80F94C((uint64_t *)(v9 + v10));
        v10 -= 72;
      }
      while (v10);
    }
  }
  return result;
}

unint64_t sub_22F2EB494(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _BYTE v15[32];
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  _WORD v43[484];
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[2] = 0;
  v17 = 0u;
  v18 = a1 + 960;
  v30 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  sub_22E80FF64(a1, v16, a4, 2, 0);
  v31 = v16;
  v35 = 0;
  v36 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v37 = *((_QWORD *)&v21 + 1);
  v39 = 0u;
  v38 = 1;
  v40 = 0;
  v41 = v43;
  v42 = 0x800000000;
  v43[480] = (v16[0] & 0x3F000) == 204800;
  v44 = 0u;
  v45 = v18;
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  sub_22E8102D8(a1, (uint64_t)&v31);
  *a2 = v37;
  if (v34 || !v35)
  {
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1674, (uint64_t)v15);
    sub_22E3BB0B8((uint64_t)v15);
    v12 = 0;
  }
  else
  {
    sub_22EA12DAC(*(_QWORD *)(a1 + 88), (uint64_t)&v31);
    *a3 = v14;
    v12 = sub_22F33FE5C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v31, v7, v8, v9, v10, v11);
  }
  sub_22E827F78((uint64_t)&v31);
  sub_22E828530((uint64_t)v16);
  return v12;
}

uint64_t sub_22F2EB66C(uint64_t result)
{
  uint64_t v1;
  void *OpenMPDirectiveName;
  size_t v3;
  unsigned __int8 *v4[4];

  if (*(_WORD *)(result + 32) != 430)
  {
    v1 = result;
    sub_22E884578(result, (int *)(result + 16), 1980, (uint64_t)v4);
    OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
    sub_22E3B89A8(v4, OpenMPDirectiveName, v3);
    result = sub_22E3BB0B8((uint64_t)v4);
    while (*(_WORD *)(v1 + 32) != 430)
      result = sub_22E80F0F0(v1, 0);
  }
  return result;
}

unint64_t sub_22F2EB6F4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::StringMapImpl *a4)
{
  int v6;
  void *v7;
  size_t v8;
  void *OpenMPContextTraitSetName;
  size_t v10;
  void *v11;
  size_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 *v23;
  uint64_t OpenMPContextTraitSelectorName;
  uint64_t v25;
  __int16 v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v27 = *(_WORD *)(a1 + 80);
  v28 = a1;
  v6 = *(_DWORD *)(a1 + 16);
  sub_22E857F0C(a1, a2, a3, a4);
  if (*(_DWORD *)(a2 + 8))
  {
    v26 = 0;
    if ((llvm::omp::isValidTraitSelectorForTraitSet() & 1) != 0)
    {
      LODWORD(v23) = llvm::omp::getOpenMPContextTraitPropertyForSelector();
      OpenMPContextTraitSelectorName = llvm::omp::getOpenMPContextTraitSelectorName();
      v25 = v19;
      result = sub_22E4EF088(a2 + 16, (unint64_t)&v23, 1);
      v21 = *(_QWORD *)(a2 + 16) + 24 * *(unsigned int *)(a2 + 24);
      v22 = *(_OWORD *)result;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a2 + 24);
      return result;
    }
    sub_22E88453C(a1, v6, 1972, (uint64_t)&v23);
    v7 = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
    sub_22E3B89A8(&v23, v7, v8);
    OpenMPContextTraitSetName = (void *)llvm::omp::getOpenMPContextTraitSetName();
    sub_22E3B89A8(&v23, OpenMPContextTraitSetName, v10);
    sub_22E3BB0B8((uint64_t)&v23);
    sub_22E88453C(a1, v6, 1876, (uint64_t)&v23);
    v11 = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
    sub_22E3B89A8(&v23, v11, v12);
    llvm::omp::getOpenMPContextTraitSetForSelector();
    v13 = (void *)llvm::omp::getOpenMPContextTraitSetName();
    sub_22E3B89A8(&v23, v13, v14);
    v15 = v26;
    v16 = v23;
    if (!v23)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(OpenMPContextTraitSelectorName);
      v23 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = v23;
    v18 = *v23;
    *v23 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15;
    sub_22E3BB0B8((uint64_t)&v23);
  }
  return sub_22E858484(&v27);
}

uint64_t sub_22F2EBCF4(uint64_t a1, char *__s, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v13 = (_BYTE *)(a1 + 944);
  v14 = *(_BYTE *)(a1 + 944);
  v8 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v15 = a1;
  v16 = 1441813;
  v17 = 430;
  v19 = 0;
  v20 = 0;
  v18 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v13, 1510, __s, 0) & 1) == 0)
  {
    v9 = *(_DWORD *)(a1 + 16);
    v10 = sub_22E838554(a1, 0, a5, 0, 0, 0);
    v11 = sub_22E83778C(a1, v10, 3);
    v8 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v11 & 0xFFFFFFFFFFFFFFFELL, v9, 0, 0);
    *a4 = *(_DWORD *)(a1 + 16);
    if ((sub_22E811E8C((uint64_t)&v13) & 1) == 0)
      *a4 = HIDWORD(v20);
  }
  *v13 = v14;
  return v8;
}

unint64_t sub_22F2EBDFC(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_22E86147C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)result;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 24) = 0x100000000;
  *(_QWORD *)(v4 + 16) = v4 + 32;
  v6 = v4 + 16;
  if (*(_DWORD *)(result + 24))
    result = sub_22F2E32AC(v6, result + 16);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22F2EBE78(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_22E8614E4(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v4 = *(_DWORD *)result;
  *(_QWORD *)(v4 + 16) = 0x200000000;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  v5 = v4 + 8;
  if (*(_DWORD *)(result + 16))
    result = sub_22E86154C(v5, (uint64_t **)(result + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F2EBEE8(uint64_t a1, int a2)
{
  _BYTE v3[32];

  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 12688))
    return sub_22F33C99C(*(_QWORD *)(a1 + 88));
  sub_22E88453C(a1, a2, 1486, (uint64_t)v3);
  return sub_22E3BB0B8((uint64_t)v3);
}

uint64_t sub_22F2EBF34(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v7;
  char *OpenMPDirectiveName;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, __int128 *, __int128 *);
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  void *v28[2];
  _BYTE *v29;
  char v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v29 = (_BYTE *)(a1 + 944);
  v30 = *(_BYTE *)(a1 + 944);
  v7 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v31 = a1;
  v32 = 1441813;
  v33 = 430;
  v35 = 0;
  v36 = 0;
  v34 = sub_22E80F720;
  OpenMPDirectiveName = (char *)llvm::omp::getOpenMPDirectiveName();
  if ((sub_22E88C650((uint64_t)&v29, 1510, OpenMPDirectiveName, 0) & 1) != 0)
    goto LABEL_28;
  v9 = 1;
  v10 = 1;
  while (1)
  {
    v11 = *(unsigned __int16 *)(a1 + 32);
    if (v11 == 22 || v11 == 430)
      break;
    v27 = 0u;
    *(_OWORD *)v28 = 0u;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v12 = *(unsigned int *)(a1 + 16);
    if (a4
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0
      && sub_22E8408AC(a1, (uint64_t)&v27, 0, 0, 0, 0, 0, 0, 0, 0)
      || sub_22E842CDC(a1, (uint64_t)&v27, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v37))
    {
      LODWORD(v25) = 1441857;
      WORD2(v25) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v25, 3, 2);
LABEL_10:
      v10 = 0;
      goto LABEL_11;
    }
    v13 = *(unsigned __int16 *)(a1 + 32);
    if (v13 != 22 && v13 != 65 && v13 != 430)
    {
      LODWORD(v25) = 1441857;
      WORD2(v25) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v25, 3, 2);
      sub_22E88453C(a1, v12, 15, (uint64_t)&v25);
      v16 = (unsigned __int8 *)v25;
      if (!(_QWORD)v25)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v25 + 1));
        *(_QWORD *)&v25 = v16;
      }
      v16[*v16 + 1] = 4;
      v17 = v25;
      v18 = *(unsigned __int8 *)v25;
      *(_BYTE *)v25 = v18 + 1;
      *(_QWORD *)(v17 + 8 * v18 + 16) = 5;
      sub_22E4D6448(v17 + 336, v12 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32), 1);
      sub_22E3BB0B8((uint64_t)&v25);
      goto LABEL_10;
    }
    sub_22EA12DB4(*(_QWORD *)(a1 + 88), (uint64_t)&v37);
    v15 = *(void (**)(uint64_t, __int128 *, __int128 *))a3;
    v14 = *(_QWORD *)(a3 + 8);
    v25 = v23;
    v26 = v24;
    v15(v14, &v27, &v25);
LABEL_11:
    if (*(_WORD *)(a1 + 32) == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    if (HIDWORD(v28[1]))
      free(v28[0]);
    v9 = 0;
  }
  if ((v9 & 1) != 0)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v27);
    v19 = (unsigned __int8 *)v27;
    if (!(_QWORD)v27)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v27 + 1));
      *(_QWORD *)&v27 = v19;
    }
    v19[*v19 + 1] = 4;
    v20 = v27;
    v21 = *(unsigned __int8 *)v27;
    *(_BYTE *)v27 = v21 + 1;
    *(_QWORD *)(v20 + 8 * v21 + 16) = 5;
    sub_22E3BB0B8((uint64_t)&v27);
    v10 = 0;
  }
  v7 = sub_22E811E8C((uint64_t)&v29) | v10 ^ 1;
LABEL_28:
  *v29 = v30;
  return v7 & 1;
}

uint64_t sub_22F2EC278(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v4;
  uint64_t result;
  int v6;

  v4 = (unsigned int *)(a1 + 16);
  result = sub_22E85B7F0(a1, a2, 25, 25, a3, *(_DWORD *)(a1 + 16), 0);
  if (*(_WORD *)(a1 + 32) == 430)
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v6;
    return sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  }
  return result;
}

_DWORD *sub_22F2EC2E0(uint64_t a1)
{
  int *v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[4];
  _BYTE *v14;
  char v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v2 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  v21 = 0;
  v22 = v24;
  v23 = 0x400000000;
  v14 = (_BYTE *)(a1 + 944);
  v15 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v16 = a1;
  v17 = 1441813;
  v18 = 430;
  v19 = sub_22E80F720;
  v20 = 0;
  if ((sub_22E811DE8((uint64_t)&v14) & 1) != 0)
  {
    sub_22E884578(a1, v2, 15, (uint64_t)v13);
    v4 = (unsigned __int8 *)v13[0];
    if (!v13[0])
    {
      v4 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      v13[0] = v4;
    }
    v4[*v4 + 1] = 4;
    v5 = v13[0];
    v6 = *(unsigned __int8 *)v13[0];
    *(_BYTE *)v13[0] = v6 + 1;
    *(_QWORD *)(v5 + 8 * v6 + 16) = 21;
    sub_22E3BB0B8((uint64_t)v13);
    goto LABEL_5;
  }
  v9 = sub_22F2E50C0(a1, 0);
  if (v9 < 2)
  {
LABEL_16:
    sub_22F2F18E0((uint64_t)&v14);
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v10 = v9;
  while (1)
  {
    v11 = v23;
    if (v23 >= (unint64_t)HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v23;
    }
    *((_QWORD *)v22 + v11) = v10 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v23) = v23 + 1;
    v12 = *(unsigned __int16 *)(a1 + 32);
    if (v12 == 22 || v12 == 430)
      break;
    sub_22E8847B4(a1, 0x41u, 15, "", 0);
    v10 = sub_22F2E50C0(a1, 0);
    if (v10 <= 1)
      goto LABEL_16;
  }
  sub_22E811E8C((uint64_t)&v14);
  v7 = sub_22ECA137C(*(_QWORD **)(a1 + 88), (_DWORD **)v22, v23, v3, v21, SHIDWORD(v21));
LABEL_6:
  *v14 = v15;
  if (v22 != v24)
    free(v22);
  return v7;
}

_DWORD *sub_22F2EC514(uint64_t a1)
{
  int v2;
  int *v3;
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[14];

  v38[12] = *MEMORY[0x24BDAC8D0];
  v3 = (int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  sub_22E80F0F0(a1, 0);
  v26 = (_BYTE *)(a1 + 944);
  v27 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v28 = a1;
  v29 = 1441813;
  v30 = 430;
  v32 = 0;
  v33 = 0;
  v31 = sub_22E80F720;
  v4 = 0;
  if ((sub_22E88C650((uint64_t)&v26, 1510, "uses_allocator", 0) & 1) != 0)
    goto LABEL_2;
  v36 = v38;
  v37 = 0x400000000;
  while (1)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      v6 = sub_22E8438BC(a1, 0);
    else
      v6 = sub_22E837640(a1, 0);
    v7 = v6;
    if ((v6 & 1) != 0)
    {
      LODWORD(v18) = 1441857;
      WORD2(v18) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v18, 3, 2);
      goto LABEL_25;
    }
    v8 = (_QWORD *)sub_22F2BAB24((uint64_t)&v36);
    *v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v9 = *(unsigned __int16 *)(a1 + 32);
    if (v9 == 21)
      break;
LABEL_14:
    if (v9 != 22 && v9 != 65)
    {
      sub_22E884578(a1, v3, 1666, (uint64_t)&v18);
      v13 = v18;
      if (!v18)
      {
        v13 = (unsigned __int8 *)sub_22E3B8AAC(v19);
        v18 = v13;
      }
      v13[*v13 + 1] = 1;
      v14 = v18;
      v15 = *v18;
      *v18 = v15 + 1;
      *(_QWORD *)&v14[8 * v15 + 16] = "uses_allocators";
      v14[(v15 + 1) + 1] = 2;
      v16 = v18;
      v17 = *v18;
      *v18 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = 0;
      sub_22E3BB0B8((uint64_t)&v18);
      v9 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v9 == 65)
    {
      sub_22E80F0F0(a1, 0);
      v9 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v9 == 430 || v9 == 22)
      goto LABEL_25;
  }
  v10 = v8;
  v18 = (unsigned __int8 *)(a1 + 944);
  LOBYTE(v19) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v20 = a1;
  v21 = 1441813;
  v22 = 430;
  v24 = 0;
  v25 = 0;
  v23 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v18);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    v11 = sub_22E8438BC(a1, 0);
  else
    v11 = sub_22E837640(a1, 0);
  v12 = v11;
  sub_22E811E8C((uint64_t)&v18);
  if ((v12 & 1) == 0)
  {
    v10[1] = v12 & 0xFFFFFFFFFFFFFFFELL;
    v10[2] = v25;
    *v18 = v19;
    v9 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_14;
  }
  v34 = 1441857;
  v35 = 430;
  sub_22E885940(a1, (unsigned __int16 *)&v34, 3, 2);
  *v18 = v19;
LABEL_25:
  sub_22E811E8C((uint64_t)&v26);
  v4 = sub_22ECB0F9C(*(_QWORD *)(a1 + 88), v2, v33, SHIDWORD(v33), (uint64_t)v36, v37);
  if (v36 != v38)
    free(v36);
LABEL_2:
  *v26 = v27;
  return v4;
}

uint64_t sub_22F2EC860(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F2ED698(a1);
  v2 = (_OWORD *)(*(_QWORD *)a1 + (v1 << 6));
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v3 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + (v3 << 6) - 64;
}

uint64_t *sub_22F2EC8A0(llvm::StringMapImpl *a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 17, 8);
  v12 = v11;
  v13 = v11 + 16;
  if (a3)
    memcpy((void *)(v11 + 16), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  *(_DWORD *)(v12 + 8) = *a4;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2EC9A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 184);
  if (v2 != (void *)(a1 + 200))
    free(v2);
  v3 = *(void **)(a1 + 160);
  if (v3 != (void *)(a1 + 176))
    free(v3);
  v4 = *(void **)(a1 + 120);
  if (v4 != (void *)(a1 + 136))
    free(v4);
  v5 = *(void **)(a1 + 80);
  if (v5 != (void *)(a1 + 96))
    free(v5);
  if (*(_DWORD *)(a1 + 44))
    free(*(void **)(a1 + 32));
  return a1;
}

_QWORD *sub_22F2ECA24(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  sub_22E622C5C((uint64_t)(a1 + 24));
  v2 = (_QWORD *)a1[23];
  if (v2 == a1 + 20)
  {
    v3 = 4;
    v2 = a1 + 20;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (_QWORD *)a1[19];
  if (v4 == a1 + 16)
  {
    v5 = 4;
    v4 = a1 + 16;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  *a1 = &unk_24FAA4C58;
  v6 = (_QWORD *)a1[10];
  if (v6 != a1 + 12)
    free(v6);
  v7 = (_QWORD *)a1[1];
  if (v7 != a1 + 3)
    free(v7);
  return a1;
}

_QWORD *sub_22F2ECAE4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_24FAA4C58;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  return a1;
}

void sub_22F2ECB3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_24FAA4C58;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 3)
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2ECBA4()
{
  return 0;
}

uint64_t sub_22F2ECBAC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_22F2ECC10(a1 + 264);
  v2 = *(void **)(a1 + 216);
  if (v2 != (void *)(a1 + 232))
    free(v2);
  v3 = *(void **)(a1 + 72);
  if (v3 != (void *)(a1 + 88))
    free(v3);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2ECC10(uint64_t a1)
{
  sub_22F2ECC54(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(24 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F2ECC54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v2 = result + 8;
    v1 = 4;
  }
  else
  {
    v1 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v1)
      return result;
    v2 = *(_QWORD *)(result + 8);
  }
  v3 = 24 * v1;
  v4 = v2 + 8;
  do
  {
    if (*(_DWORD *)(v4 - 8) <= 0xFFFFFFFD && *(_DWORD *)(v4 + 8) >= 0x41u)
    {
      result = *(_QWORD *)v4;
      if (*(_QWORD *)v4)
        result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
    }
    v4 += 24;
    v3 -= 24;
  }
  while (v3);
  return result;
}

_BYTE *sub_22F2ECCD8(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22E5223E0(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_22F246808(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      *(_DWORD *)(a1 + 8) = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

void sub_22F2ECE34(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2ECEA0(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2ECEA0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(_DWORD **)result;
    v6 = 368 * v2;
    do
    {
      result = sub_22F2ECF20(a2, v5);
      v5 += 92;
      a2 += 368;
      v6 -= 368;
    }
    while (v6);
    v7 = *(_DWORD *)(v4 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 368 * v7;
      v10 = v8 - 368;
      do
      {
        result = sub_22F2ECBAC(v10 + v9);
        v9 -= 368;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_22F2ECF20(uint64_t a1, _DWORD *a2)
{
  uint64_t i;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (a2[2])
    sub_22E861AD8(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_DWORD *)(a1 + 64) = a2[16];
  *(_QWORD *)(a1 + 80) = 0x800000000;
  if (a2[20])
    sub_22F2528D0(a1 + 72, (uint64_t)(a2 + 18));
  *(_QWORD *)(a1 + 216) = a1 + 232;
  *(_QWORD *)(a1 + 224) = 0x800000000;
  if (a2[56])
    sub_22F28CB40(a1 + 216, (uint64_t)(a2 + 54));
  *(_QWORD *)(a1 + 264) = 1;
  for (i = 272; i != 368; i += 24)
    *(_DWORD *)(a1 + i) = -1;
  sub_22F2ECFF4((unsigned int *)(a1 + 264), a2 + 66);
  return a1;
}

unsigned int *sub_22F2ECFF4(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v11 = 0;
    while (1)
    {
      v12 = (int *)&result[v11];
      v13 = (int *)&a2[v11];
      v14 = result[v11 + 2];
      v15 = a2[v11 + 2];
      if (v14 > 0xFFFFFFFD || v15 > 0xFFFFFFFD)
      {
        v12[2] = v15;
        v13[2] = v14;
        if (v14 <= 0xFFFFFFFD)
        {
          v17 = (int *)&a2[v11];
          v18 = (int *)&result[v11];
          goto LABEL_24;
        }
        if (v15 <= 0xFFFFFFFD)
        {
          v17 = (int *)&result[v11];
          v18 = (int *)&a2[v11];
LABEL_24:
          v17[6] = v18[6];
          *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
          v18[6] = 0;
        }
      }
      else
      {
        v19 = v12[6];
        v20 = *((_QWORD *)v12 + 2);
        v12[6] = 0;
        v12[2] = v15;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        v12[6] = v13[6];
        v13[2] = v14;
        *((_QWORD *)v13 + 2) = v20;
        v13[6] = v19;
      }
      v11 += 6;
      if (v11 == 24)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v21 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = &v6[v7];
    v9 = (int *)&result[v7];
    v10 = result[v7 + 2];
    v6[v7 + 2] = v10;
    if (v10 <= 0xFFFFFFFD)
    {
      v8[6] = v9[6];
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      v9[6] = 0;
    }
    v7 += 6;
  }
  while (v7 != 24);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v21;
  return result;
}

uint64_t sub_22F2ED178(uint64_t a1, _DWORD *a2)
{
  uint64_t i;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (a2[2])
    sub_22E861BFC(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_DWORD *)(a1 + 64) = a2[16];
  *(_QWORD *)(a1 + 80) = 0x800000000;
  if (a2[20])
    sub_22F2ED24C((_QWORD *)(a1 + 72), (uint64_t)(a2 + 18));
  *(_QWORD *)(a1 + 216) = a1 + 232;
  *(_QWORD *)(a1 + 224) = 0x800000000;
  if (a2[56])
    sub_22F2ED344(a1 + 216, (uint64_t)(a2 + 54));
  *(_QWORD *)(a1 + 264) = 1;
  for (i = 272; i != 368; i += 24)
    *(_DWORD *)(a1 + i) = -1;
  sub_22F2ED40C(a1 + 264, a2 + 66);
  return a1;
}

_QWORD *sub_22F2ED24C(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;

  if (result != (_QWORD *)a2)
  {
    v2 = *(unsigned int *)(a2 + 8);
    v3 = *((_DWORD *)result + 2);
    if (v3 >= v2)
    {
      if (!(_DWORD)v2)
      {
LABEL_4:
        *((_DWORD *)result + 2) = v2;
        return result;
      }
      v8 = result;
      v7 = *(_DWORD *)(a2 + 8);
      memmove((void *)*result, *(const void **)a2, 16 * v2);
LABEL_12:
      LODWORD(v2) = v7;
      result = v8;
      goto LABEL_4;
    }
    v6 = *((unsigned int *)result + 2);
    v8 = result;
    v7 = *(_DWORD *)(a2 + 8);
    if (*((_DWORD *)result + 3) >= v2)
    {
      if (v3)
      {
        memmove((void *)*result, *(const void **)a2, 16 * v6);
        goto LABEL_9;
      }
    }
    else
    {
      *((_DWORD *)result + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v6 = 0;
LABEL_9:
    v4 = *(unsigned int *)(a2 + 8);
    result = v8;
    LODWORD(v2) = v7;
    if (v6 == v4)
      goto LABEL_4;
    memcpy((void *)(*v8 + 16 * v6), (const void *)(*(_QWORD *)a2 + 16 * v6), *(_QWORD *)a2 + 16 * v4 - (*(_QWORD *)a2 + 16 * v6));
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_22F2ED344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

_DWORD *sub_22F2ED40C(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  sub_22F2ECC54(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(24 * *(unsigned int *)(a1 + 16)));
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 4;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * (v5 + 2 * v5), 8);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_22F2ED4B0((_DWORD *)a1, a2);
}

_DWORD *sub_22F2ED4B0(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  const llvm::APInt *v14;
  unsigned int v15;

  v3 = result;
  v4 = 0;
  v5 = *a2 & 0xFFFFFFFE | *result & 1;
  *result = v5;
  result[1] = a2[1];
  v6 = result + 2;
  v7 = a2 + 2;
  v8 = 2;
  while ((v5 & 1) == 0)
  {
    if (v4 >= v3[4])
      return result;
    v9 = (_QWORD *)*v6;
LABEL_6:
    v10 = v7;
    if ((*(_BYTE *)a2 & 1) == 0)
      v10 = (_QWORD *)*v7;
    LODWORD(v9[v8 - 2]) = v10[v8 - 2];
    if ((*(_BYTE *)v3 & 1) != 0)
    {
      v12 = v6[v8 - 2];
      v11 = v6;
    }
    else
    {
      v11 = (_QWORD *)*v6;
      v12 = *(_DWORD *)(*v6 + v8 * 8 - 16);
    }
    if (v12 <= 0xFFFFFFFD)
    {
      v13 = v7;
      if ((*(_BYTE *)a2 & 1) == 0)
        v13 = (_QWORD *)*v7;
      result = &v11[v8 - 1];
      v14 = (const llvm::APInt *)&v13[v8 - 1];
      v15 = v13[v8];
      LODWORD(v11[v8]) = v15;
      if (v15 > 0x40)
        result = (_DWORD *)llvm::APInt::initSlowCase((llvm::APInt *)result, v14);
      else
        *(_QWORD *)result = *(_QWORD *)v14;
    }
    ++v4;
    v5 = *((_DWORD *)v6 - 2);
    v8 += 3;
  }
  v9 = v6;
  if (v4 < 4)
    goto LABEL_6;
  return result;
}

void sub_22F2ED5C8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3)
  {
    if (v1 <= 3)
    {
      if (*(_DWORD *)(a1 + 12) > 2u
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(), v1 = *(_DWORD *)(a1 + 8), v1 != 3))
      {
        bzero((void *)(*(_QWORD *)a1 + 4 * v1), 12 - 4 * v1);
      }
    }
    *(_DWORD *)(a1 + 8) = 3;
  }
}

uint64_t sub_22F2ED640(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(v1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v1 + 4 * v2) = 0;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

uint64_t sub_22F2ED698(uint64_t a1)
{
  __int128 *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[4];

  memset(v9, 0, sizeof(v9));
  v2 = (__int128 *)sub_22E3CD564(a1, (unint64_t)v9);
  v3 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[3];
  v3[2] = v2[2];
  v3[3] = v6;
  *v3 = v4;
  v3[1] = v5;
  v7 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + (v7 << 6) - 64;
}

_QWORD *sub_22F2ED704(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_22F1843AC(a1[1], 0, 0);
  v2 = a1[72];
  a1[72] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_22F1843AC(a1[1], (uint64_t)"GCC", 3);
  v3 = a1[73];
  a1[73] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_22F1843AC(a1[1], 0, 0);
  v4 = a1[74];
  a1[74] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_22F1843AC(a1[1], 0, 0);
  v5 = a1[75];
  a1[75] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_22F1843AC(a1[1], 0, 0);
  v6 = a1[76];
  a1[76] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_22F1843AC(a1[1], 0, 0);
  v7 = a1[77];
  a1[77] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_22F1843AC(a1[1], 0, 0);
  v8 = a1[78];
  a1[78] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_22F1843AC(a1[1], 0, 0);
  v9 = a1[79];
  a1[79] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[1];
  if ((*(_DWORD *)(*(_QWORD *)(v10 + 56) + 52) & 0x40000000) != 0)
  {
    sub_22F1843AC(v10, (uint64_t)"OPENCL", 6);
    v35 = a1[81];
    a1[81] = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    sub_22F1843AC(a1[1], (uint64_t)"OPENCL", 6);
    v10 = a1[1];
  }
  sub_22F1843AC(v10, 0, 0);
  v11 = a1[82];
  a1[82] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a1[1];
  if ((**(_BYTE **)(v12 + 56) & 0x20) != 0 || *(_DWORD *)(*(_QWORD *)(v12 + 64) + 76) == 3)
  {
    sub_22F1843AC(v12, 0, 0);
    v34 = a1[84];
    a1[84] = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v13 = a1[83];
  a1[83] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_22F1843AC(a1[1], 0, 0);
  v14 = a1[87];
  a1[87] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a1[1];
  if ((**(_BYTE **)(v15 + 56) & 0x20) != 0)
  {
    sub_22F1843AC(v15, 0, 0);
    v36 = a1[85];
    a1[85] = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    sub_22F1843AC(a1[1], 0, 0);
    v37 = a1[88];
    a1[88] = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    sub_22F1843AC(a1[1], 0, 0);
    v38 = a1[89];
    a1[89] = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    sub_22F1843AC(a1[1], 0, 0);
    v39 = a1[90];
    a1[90] = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    sub_22F1843AC(a1[1], 0, 0);
    v40 = a1[91];
    a1[91] = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    sub_22F1843AC(a1[1], 0, 0);
    v41 = a1[92];
    a1[92] = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    sub_22F1843AC(a1[1], 0, 0);
    v42 = a1[93];
    a1[93] = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    sub_22F1843AC(a1[1], 0, 0);
    v43 = a1[94];
    a1[94] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    sub_22F1843AC(a1[1], 0, 0);
    v44 = a1[95];
    a1[95] = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    sub_22F1843AC(a1[1], 0, 0);
    v45 = a1[96];
    a1[96] = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    sub_22F1843AC(a1[1], 0, 0);
    v46 = a1[97];
    a1[97] = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    sub_22F1843AC(a1[1], 0, 0);
    v47 = a1[98];
    a1[98] = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    sub_22F1843AC(a1[1], 0, 0);
    v48 = a1[99];
    a1[99] = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  v16 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v16 + 56) + 68) & 0x20) != 0)
  {
    sub_22F1843AC(v16, (uint64_t)"clang", 5);
    v49 = a1[100];
    a1[100] = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  sub_22F1843AC(a1[1], (uint64_t)"STDC", 4);
  v17 = a1[80];
  a1[80] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_22F1843AC(a1[1], (uint64_t)"STDC", 4);
  v18 = a1[108];
  a1[108] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_22F1843AC(a1[1], (uint64_t)"STDC", 4);
  v19 = a1[109];
  a1[109] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_22F1843AC(a1[1], (uint64_t)"STDC", 4);
  v20 = a1[110];
  a1[110] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_22F1843AC(a1[1], (uint64_t)"STDC", 4);
  v21 = a1[111];
  a1[111] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v22 = a1[101];
  a1[101] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v23 = a1[102];
  a1[102] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_22F1843AC(a1[1], 0, 0);
  sub_22F1843AC(a1[1], (uint64_t)"GCC", 3);
  v24 = a1[103];
  a1[103] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_22F1843AC(a1[1], 0, 0);
  sub_22F1843AC(a1[1], (uint64_t)"GCC", 3);
  v25 = a1[104];
  a1[104] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_22F1843AC(a1[1], 0, 0);
  v26 = a1[105];
  a1[105] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_22F1843AC(a1[1], 0, 0);
  v27 = a1[106];
  a1[106] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v28 = a1[107];
  a1[107] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v29 = a1[112];
  a1[112] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v30 = a1[113];
  a1[113] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  sub_22F1843AC(a1[1], (uint64_t)"clang", 5);
  v31 = a1[114];
  a1[114] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  result = (_QWORD *)a1[1];
  if ((*(_BYTE *)(result[7] + 104) & 0x20) != 0)
  {
    sub_22F1843AC((uint64_t)result, (uint64_t)"METAL", 5);
    v33 = a1[115];
    a1[115] = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    sub_22F1843AC(a1[1], (uint64_t)"METAL", 5);
    result = (_QWORD *)a1[116];
    a1[116] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_22F2EDFA0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  v3 = *(_DWORD *)(a1 + 16);
  v1 = *(_DWORD *)(a1 + 20);
  v2 = a1 + 16;
  if (!v1)
    v1 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v1;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
  sub_22E90F058(*(_QWORD **)(v2 + 72), (unsigned int *)v2, *(_QWORD **)(*(_QWORD *)(v2 + 72) + 12888), v3);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)v2;
  return sub_22F18FB4C(*(_QWORD *)(v2 - 8), (unsigned int *)v2);
}

void sub_22F2EDFFC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 20);
  if (!v4)
    v4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v4;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  sub_22F30B074(*(unsigned int **)(v1 + 72), v3, v2);
}

uint64_t sub_22F2EE050(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_WORD *)(v4 + 40) != 7)
  {
    v5 = 0;
    goto LABEL_5;
  }
  v5 = sub_22EB261F0(*(_QWORD *)(a1 + 88), v4 + 24, 0);
  if ((v5 & 1) == 0)
LABEL_5:
    sub_22E90E208(*(_QWORD *)(a1 + 88), v3, *(_DWORD *)v4, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16), v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v6 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v6;
  return sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
}

uint64_t sub_22F2EE0DC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;

  sub_22F30A544(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 24));
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = (unsigned int *)(a1 + 16);
  if (v3)
    v2 = v3;
  v4[6] = v2;
  return sub_22F18FB4C(*((_QWORD *)v4 - 1), v4);
}

uint64_t sub_22F2EE11C(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 16);
  sub_22F30A264(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 16));
  v2 = *v1;
  if (v1[1])
    v2 = v1[1];
  v1[6] = v2;
  return sub_22F18FB4C(*((_QWORD *)v1 - 1), v1);
}

uint64_t sub_22F2EE160(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 16);
  sub_22F338D9C(*(_QWORD *)(a1 + 88), *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = *v1;
  if (v1[1])
    v2 = v1[1];
  v1[6] = v2;
  return sub_22F18FB4C(*((_QWORD *)v1 - 1), v1);
}

_DWORD *sub_22F2EE1A8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 24);
  if (v1 == 2)
    v2 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 244) >> 2) & 3;
  else
    v2 = v1 == 0;
  v5 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = a1 + 16;
  if (!v3)
    v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v3;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  return sub_22F30B114(*(_QWORD *)(v4 + 72), v5, v2);
}

unsigned int *sub_22F2EE220(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = HIWORD(*(_DWORD *)(a1 + 24));
  v4 = (unsigned __int16)*(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 20))
    v5 = *(_DWORD *)(a1 + 20);
  else
    v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v5;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  return sub_22F30A854(*(_QWORD **)(v1 + 72), v2, v3, v4);
}

uint64_t sub_22F2EE27C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _BOOL4 v3;
  int v4;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 20))
    v4 = *(_DWORD *)(a1 + 20);
  else
    v4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v4;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  return sub_22F30B264(*(_QWORD *)(v1 + 72), v2, v3);
}

_DWORD *sub_22F2EE2D4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(char *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 20);
  if (!v4)
    v4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v4;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  return sub_22E910B90(*(_QWORD *)(v1 + 72), v2, v3);
}

uint64_t sub_22F2EE328(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 24);
  if (!v3)
    v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v3;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  return sub_22F30AB1C(*(_QWORD *)(v1 + 72), v4, v2);
}

uint64_t sub_22F2EE378(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = a1 + 16;
  v2 = *(_DWORD *)(a1 + 16);
  v3 = HIWORD(*(_DWORD *)(a1 + 24));
  v4 = (unsigned __int16)*(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 20))
    v5 = *(_DWORD *)(a1 + 20);
  else
    v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v5;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v1);
  return sub_22F30AB28(*(_QWORD *)(v1 + 72), v3, v2, v4);
}

uint64_t sub_22F2EE3D4(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  _DWORD *v4;
  int v5;

  v3 = (unsigned int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD **)(a1 + 24);
  if (*v4 == 1)
  {
    sub_22F30B39C(*(_QWORD *)(a1 + 88), v2, v4[1]);
  }
  else if (!*v4)
  {
    sub_22F30B114(*(_QWORD *)(a1 + 88), v2, v4[1]);
  }
  v5 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v5 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v5;
  return sub_22F18FB4C(*(_QWORD *)(a1 + 8), v3);
}

uint64_t sub_22F2EE440(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;

  sub_22F30B454(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 24) != 0);
  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = (unsigned int *)(a1 + 16);
  if (v3)
    v2 = v3;
  v4[6] = v2;
  return sub_22F18FB4C(*((_QWORD *)v4 - 1), v4);
}

uint64_t sub_22F2EE488(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 12))
    sub_22E910A74(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_DWORD *)(v2 + 8) == 1);
  if (*(_BYTE *)(v2 + 4))
    sub_22F30B114(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_DWORD *)v2);
  if (*(_BYTE *)(v2 + 20))
    sub_22F30B394(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_DWORD *)(v2 + 16));
  if (*(_BYTE *)(v2 + 28))
    sub_22F30A6A4(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_DWORD *)(v2 + 24));
  v3 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v3 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v3;
  return sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
}

BOOL sub_22F2EE534(unint64_t a1, llvm *a2)
{
  uint64_t v4[3];

  if ((*(_QWORD *)a2 & 0x2000000) == 0)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x200000000000) == 0)
    return 1;
  sub_22E6D719C(a1, a2, v4);
  return v4[0] > 7uLL || v4[2] != 0;
}

uint64_t sub_22F2EE58C(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_22F2EE628(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2EE6C8(a2, a3, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_QWORD *)(result + 4) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F2EE628(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 12 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != 0x7FFFFFFF)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == 0x80000000;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F2EE6C8(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E873B28(a1, v6);
  v8 = 0;
  sub_22F2EE628(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2EE77C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 12 * v6;
    do
    {
      *v7 = 0x7FFFFFFF;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if ((*(_DWORD *)v4 - 0x7FFFFFFF) >= 2)
      {
        v11 = 0;
        result = sub_22F2EE628(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
        v10 = v11;
        *v11 = *(_DWORD *)v4;
        *(_QWORD *)(v10 + 1) = *(_QWORD *)(v4 + 4);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22F2EE83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[4];
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  __int128 v28;
  void *v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v31 = 0;
  v32 = 0;
  v28 = 0u;
  *(_OWORD *)v29 = 0u;
  v30 = 0;
  if ((sub_22E88BFB8(a1, (unsigned int *)&v26) & 1) == 0)
  {
    if (v33 == 2)
    {
      if (*(_WORD *)(a1 + 32) == 23)
      {
        v4 = sub_22E8788D0(a1, 0, 4194312);
        if ((v4 & 1) == 0)
        {
          v5 = sub_22F344B74(*(_QWORD *)(a1 + 88), v26, v27, (uint64_t)&v28, (uint64_t)&v30, v4 & 0xFFFFFFFFFFFFFFFELL);
          if (v5 >= 2)
          {
            v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
            v7 = *(_DWORD *)(a2 + 8);
            if (v7 >= *(_DWORD *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v7 = *(_DWORD *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
            ++*(_DWORD *)(a2 + 8);
          }
        }
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v18);
        v11 = v18;
        if (!v18)
        {
          v11 = (unsigned __int8 *)sub_22E3B8AAC(v19);
          v18 = v11;
        }
        v11[*v11 + 1] = 4;
        v12 = v18;
        v13 = *v18;
        *v18 = v13 + 1;
        *(_QWORD *)&v12[8 * v13 + 16] = 23;
        sub_22E3BB0B8((uint64_t)&v18);
      }
    }
    else
    {
      v18 = (unsigned __int8 *)(a1 + 944);
      LOBYTE(v19) = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v20 = a1;
      v21 = 1572887;
      v22 = 62;
      v24 = 0;
      v25 = 0;
      v23 = sub_22E80CED8;
      if (sub_22E811DE8((uint64_t)&v18))
      {
        sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)v17);
        v8 = (unsigned __int8 *)v17[0];
        if (!v17[0])
        {
          v8 = (unsigned __int8 *)sub_22E3B8AAC(v17[1]);
          v17[0] = v8;
        }
        v8[*v8 + 1] = 4;
        v9 = v17[0];
        v10 = *(unsigned __int8 *)v17[0];
        *(_BYTE *)v17[0] = v10 + 1;
        *(_QWORD *)(v9 + 8 * v10 + 16) = 23;
        sub_22E3BB0B8((uint64_t)v17);
      }
      else if (v33 == 1)
      {
        sub_22F2F18E0((uint64_t)&v18);
      }
      else
      {
        while (*(_WORD *)(a1 + 32) != 24)
        {
          v14 = sub_22E873D2C(a1, a2, 3, 0);
          if (v14 >= 2)
          {
            v15 = v14;
            v16 = *(unsigned int *)(a2 + 8);
            if (v16 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v16 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v15 & 0xFFFFFFFFFFFFFFFELL;
            ++*(_DWORD *)(a2 + 8);
          }
        }
        sub_22E811E8C((uint64_t)&v18);
      }
      *v18 = v19;
    }
  }
  if (HIDWORD(v29[1]))
    free(v29[0]);
}

uint64_t sub_22F2EEB18(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 24);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 - 8) + 56) + 104) & 0x20) == 0)
    return sub_22E879D7C(a1, *(_DWORD *)(v2 + 24), 0);
  LOWORD(v8[0]) = 23;
  sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
  LOWORD(v8[0]) = 24;
  sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
  if (*(_WORD *)(a1 + 32) == 129)
  {
    LOWORD(v8[0]) = 21;
    sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
    LOWORD(v8[0]) = 22;
    sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
    LOWORD(v8[0]) = 23;
    sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
    LOWORD(v8[0]) = 24;
    sub_22E885940(a1, (unsigned __int16 *)v8, 1, 0);
  }
  sub_22E88453C(a1, v3, 1599, (uint64_t)v8);
  v5 = (unsigned __int8 *)v8[0];
  if (!v8[0])
  {
    v5 = (unsigned __int8 *)sub_22E3B8AAC(v8[1]);
    v8[0] = v5;
  }
  v5[*v5 + 1] = 2;
  v6 = v8[0];
  v7 = *(unsigned __int8 *)v8[0];
  *(_BYTE *)v8[0] = v7 + 1;
  *(_QWORD *)(v6 + 8 * v7 + 16) = 12;
  sub_22E3BB0B8((uint64_t)v8);
  return 1;
}

uint64_t sub_22F2EEC9C(uint64_t a1, int a2)
{
  unint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;

  v4 = *(unint64_t **)(a1 + 240);
  if (v4)
  {
    v5 = (*v4 >> 29) & 1;
    v6 = (*v4 >> 5) & 0x80000000;
    if ((*v4 & 0x81A000000) != 0)
      v6 = 0x80000000;
    *v4 = v6 | *v4 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(unint64_t **)(a1 + 248);
  if (v7)
  {
    v8 = (*v7 >> 29) & 1;
    v9 = (*v7 >> 5) & 0x80000000;
    if ((*v7 & 0x81A000000) != 0)
      v9 = 0x80000000;
    *v7 = v9 | *v7 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v8 = 0;
  }
  v10 = *(unint64_t **)(a1 + 256);
  if (v10)
  {
    v11 = (*v10 >> 29) & 1;
    v12 = (*v10 >> 5) & 0x80000000;
    if ((*v10 & 0x81A000000) != 0)
      v12 = 0x80000000;
    *v10 = v12 | *v10 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v11 = 0;
  }
  if ((sub_22E8847B4(a1, 0x15u, 15, "", 0) & 1) != 0)
  {
    v13 = 1;
    goto LABEL_15;
  }
  sub_22E885C30(a1, 1048600);
  if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 0x80) != 0)
  {
    v24 = *(unint64_t **)(a1 + 264);
    v25 = (*v24 >> 5) & 0x80000000;
    if ((*v24 & 0x81A000000) != 0)
      v25 = 0x80000000;
    *v24 = v25 | *v24 & 0xFFFFFFFF5FFFFFFFLL;
    v26 = *(unint64_t **)(a1 + 272);
    v27 = (*v26 >> 5) & 0x80000000;
    if ((*v26 & 0x81A000000) != 0)
      v27 = 0x80000000;
    *v26 = v27 | *v26 & 0xFFFFFFFF5FFFFFFFLL;
    v28 = *(unint64_t **)(a1 + 280);
    v29 = (*v28 >> 5) & 0x80000000;
    if ((*v28 & 0x81A000000) != 0)
      v29 = 0x80000000;
    *v28 = v29 | *v28 & 0xFFFFFFFF5FFFFFFFLL;
  }
  sub_22E885D90((uint64_t)v36, a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) + 8) | 0x200000, 1);
  v30 = *(_QWORD *)(a1 + 88);
  v31 = sub_22E837640(a1, 0);
  v32 = v31;
  if ((v31 & 1) == 0)
    v32 = (unint64_t)sub_22EBBCB14(v30, (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v37);
  sub_22E885DDC((uint64_t)v36);
  if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 0x80) != 0)
  {
    **(_QWORD **)(a1 + 264) |= 0xA0000000uLL;
    **(_QWORD **)(a1 + 272) |= 0xA0000000uLL;
    **(_QWORD **)(a1 + 280) |= 0xA0000000uLL;
  }
  if ((v32 & 1) == 0 && (sub_22E8847B4(a1, 0x16u, 15, "", 0) & 1) == 0)
  {
    if (*(_WORD *)(a1 + 32) == 23)
    {
      v13 = sub_22E8788D0(a1, 0, 4194312);
      if ((v13 & 1) == 0)
        v13 = sub_22F3448B8(*(_QWORD **)(a1 + 88), a2, v32 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_49;
    }
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)v36);
    v33 = (unsigned __int8 *)v36[0];
    if (!v36[0])
    {
      v33 = (unsigned __int8 *)sub_22E3B8AAC(v36[1]);
      v36[0] = v33;
    }
    v33[*v33 + 1] = 4;
    v34 = v36[0];
    v35 = *(unsigned __int8 *)v36[0];
    *(_BYTE *)v36[0] = v35 + 1;
    *(_QWORD *)(v34 + 8 * v35 + 16) = 23;
    sub_22E3BB0B8((uint64_t)v36);
  }
  v13 = 1;
LABEL_49:
  sub_22E885CF4(a1);
LABEL_15:
  if (v10)
  {
    v14 = (*v10 >> 5) & 0x80000000;
    if (*v10 & 0x81A000000 | ((v11 & 1) << 29) & 0x3A000000)
      v14 = 0x80000000;
    v15 = v14 | *v10 & 0xFFFFFFFF5FFFFFFFLL | ((v11 & 1) << 29) & 0x7FFFFFFF;
    v16 = *v10 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v11 & 1) << 29) | 0x80000000;
    if (!v11)
      v16 = v15;
    *v10 = v16;
  }
  if (v7)
  {
    v17 = (*v7 >> 5) & 0x80000000;
    if (*v7 & 0x81A000000 | ((v8 & 1) << 29) & 0x3A000000)
      v17 = 0x80000000;
    v18 = v17 | *v7 & 0xFFFFFFFF5FFFFFFFLL | ((v8 & 1) << 29) & 0x7FFFFFFF;
    v19 = *v7 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v8 & 1) << 29) | 0x80000000;
    if (!v8)
      v19 = v18;
    *v7 = v19;
  }
  if (v4)
  {
    v20 = (*v4 >> 5) & 0x80000000;
    if (*v4 & 0x81A000000 | ((v5 & 1) << 29) & 0x3A000000)
      v20 = 0x80000000;
    v21 = v20 | *v4 & 0xFFFFFFFF5FFFFFFFLL | ((v5 & 1) << 29) & 0x7FFFFFFF;
    v22 = *v4 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v5 & 1) << 29) | 0x80000000;
    if (!v5)
      v22 = v21;
    *v4 = v22;
  }
  return v13;
}

uint64_t sub_22F2EF0A8(uint64_t a1, int a2)
{
  unint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[4];

  v4 = *(unint64_t **)(a1 + 288);
  if (v4)
  {
    v5 = (*v4 >> 29) & 1;
    v6 = (*v4 >> 5) & 0x80000000;
    if ((*v4 & 0x81A000000) != 0)
      v6 = 0x80000000;
    *v4 = v6 | *v4 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(unint64_t **)(a1 + 296);
  if (v7)
  {
    v8 = (*v7 >> 29) & 1;
    v9 = (*v7 >> 5) & 0x80000000;
    if ((*v7 & 0x81A000000) != 0)
      v9 = 0x80000000;
    *v7 = v9 | *v7 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v8 = 0;
  }
  v10 = *(unint64_t **)(a1 + 304);
  if (v10)
  {
    v11 = (*v10 >> 29) & 1;
    v12 = 0x80000000;
    if ((*v10 & 0x81A000000) == 0)
      v12 = (*v10 >> 5) & 0x80000000;
    *v10 = v12 | *v10 & 0xFFFFFFFF5FFFFFFFLL;
  }
  else
  {
    v11 = 0;
  }
  if (*(_WORD *)(a1 + 32) == 23)
  {
    sub_22E885C30(a1, 0);
    sub_22F34496C(*(_QWORD *)(a1 + 88));
    v13 = sub_22E8788D0(a1, 0, 4194312);
    v14 = *(_QWORD *)(a1 + 88);
    if ((v13 & 1) != 0)
      sub_22F3449CC(v14);
    else
      v13 = sub_22F3449DC(v14, a2, v13 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E885CF4(a1);
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)v28);
    v15 = (unsigned __int8 *)v28[0];
    if (!v28[0])
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v28[1]);
      v28[0] = v15;
    }
    v15[*v15 + 1] = 4;
    v16 = v28[0];
    v17 = *(unsigned __int8 *)v28[0];
    *(_BYTE *)v28[0] = v17 + 1;
    *(_QWORD *)(v16 + 8 * v17 + 16) = 23;
    sub_22E3BB0B8((uint64_t)v28);
    v13 = 1;
  }
  if (v10)
  {
    v18 = (*v10 >> 5) & 0x80000000;
    if (*v10 & 0x81A000000 | ((v11 & 1) << 29) & 0x3A000000)
      v18 = 0x80000000;
    v19 = v18 | *v10 & 0xFFFFFFFF5FFFFFFFLL | ((v11 & 1) << 29) & 0x7FFFFFFF;
    v20 = *v10 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v11 & 1) << 29) | 0x80000000;
    if (!v11)
      v20 = v19;
    *v10 = v20;
  }
  if (v7)
  {
    v21 = (*v7 >> 5) & 0x80000000;
    if (*v7 & 0x81A000000 | ((v8 & 1) << 29) & 0x3A000000)
      v21 = 0x80000000;
    v22 = v21 | *v7 & 0xFFFFFFFF5FFFFFFFLL | ((v8 & 1) << 29) & 0x7FFFFFFF;
    v23 = *v7 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v8 & 1) << 29) | 0x80000000;
    if (!v8)
      v23 = v22;
    *v7 = v23;
  }
  if (v4)
  {
    v24 = (*v4 >> 5) & 0x80000000;
    if (*v4 & 0x81A000000 | ((v5 & 1) << 29) & 0x3A000000)
      v24 = 0x80000000;
    v25 = v24 | *v4 & 0xFFFFFFFF5FFFFFFFLL | ((v5 & 1) << 29) & 0x7FFFFFFF;
    v26 = *v4 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)(v5 & 1) << 29) | 0x80000000;
    if (!v5)
      v26 = v25;
    *v4 = v26;
  }
  return v13;
}

uint64_t sub_22F2EF340(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  unint64_t v8;
  int v9;
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2816);
  if (v3 < *(unsigned int *)(v2 + 2784))
    v4 = *(_QWORD *)(v2 + 2776) + 24 * v3;
  else
    v4 = sub_22F162D2C(v2, 1u);
  v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 19)
    goto LABEL_8;
  if (v5 == 61)
    return 1;
  if (v5 != 157)
    return 0;
LABEL_8:
  v13 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 2344);
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  sub_22E8360CC(a1);
  v6 = *(unsigned __int16 *)(a1 + 32) == 61;
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  sub_22E80FADC(a1 + 2336, v8);
  *(_DWORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 84) = v10;
  return v6;
}

unint64_t sub_22F2EF460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  if (*(_DWORD *)(v1 + 72))
  {
    v3 = a1;
    sub_22EC80540(*(_QWORD *)(a1 + 88));
    a1 = v3;
    v1 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 56);
  }
  if ((*(_BYTE *)(v1 + 1) & 1) == 0)
    return sub_22E81CB8C(a1, 1);
  if (*(_WORD *)(a1 + 32) == 154)
    return 1;
  return sub_22E881C3C(a1, 1);
}

uint64_t sub_22F2EF4E0(uint64_t a1, int a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  int v55;
  _WORD *v56;
  uint64_t v57;
  _WORD v58[484];
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 40);
  v38 = (_BYTE *)(a1 + 944);
  v39 = *(_BYTE *)(a1 + 944);
  v6 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v40 = a1;
  v41 = 1441813;
  v42 = 62;
  v44 = 0;
  v45 = 0;
  v43 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v38, 15, "", 0) & 1) == 0)
  {
    if (a2)
      v7 = 16793624;
    else
      v7 = 16777240;
    sub_22E885C30(a1, v7);
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v8 = 0;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = a1 + 960;
      v37 = 0;
      sub_22E8103B4(a1, &v34, 0);
      v19[0] = 0;
      v19[2] = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = a1 + 960;
      v33 = 0;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      sub_22E82103C((uint64_t)v20, (uint64_t)&v34);
      v9 = sub_22F2E797C(a1, (uint64_t)v19);
      v8 = 0;
      if ((v9 & 1) == 0)
      {
        v46 = (unsigned __int8 *)v19;
        v50 = 0;
        v51 = 0;
        v47 = 0u;
        v48 = 0u;
        v49 = 0;
        v52 = *((_QWORD *)&v24 + 1);
        v56 = v58;
        v58[480] = (v19[0] & 0x3F000) == 204800;
        v54 = 0u;
        v53 = 14;
        v55 = 0;
        v57 = 0x800000000;
        v59 = 0u;
        v60 = v21;
        v64 = 0;
        v63 = 0u;
        v62 = 0u;
        v61 = 0u;
        sub_22E8102D8(a1, (uint64_t)&v46);
        v8 = sub_22EACEBA8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v46, v10, v11, v12, v13, v14);
        sub_22E827F78((uint64_t)&v46);
      }
      sub_22E828530((uint64_t)v19);
      sub_22E8D1BC4(v36, (uint64_t)&v36);
      sub_22E80F94C(&v37);
      sub_22E80F94C(&v35);
      if ((v9 & 1) != 0)
        goto LABEL_18;
    }
    sub_22E811E8C((uint64_t)&v38);
    if (HIDWORD(v45))
    {
      if (*(_WORD *)(a1 + 32) == 23)
      {
        v6 = sub_22E8788D0(a1, 0, 4194312);
        if ((v6 & 1) == 0)
          v6 = sub_22F3447A4(*(_QWORD *)(a1 + 88), v5, v8, v6 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_19;
      }
      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v46);
      v15 = v46;
      if (!v46)
      {
        v15 = (unsigned __int8 *)sub_22E3B8AAC(v47);
        v46 = v15;
      }
      v15[*v15 + 1] = 4;
      v16 = v46;
      v17 = *v46;
      *v46 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = 23;
      sub_22E3BB0B8((uint64_t)&v46);
    }
LABEL_18:
    v6 = 1;
LABEL_19:
    sub_22E885CF4(a1);
  }
  *v38 = v39;
  return v6;
}

uint64_t sub_22F2EF844(uint64_t (*a1)(uint64_t, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
    return a1(a2, 0, 0);
  v3 = operator new();
  bzero((void *)(v3 + 16), 0x390uLL);
  v4 = MEMORY[0x24BED83C8];
  *(_OWORD *)(v3 + 920) = 0u;
  *(_QWORD *)v3 = v4 + 16;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  bzero((void *)(v3 + 24), 0x329uLL);
  *(_BYTE *)(v3 + 864) = 0;
  *(_QWORD *)(v3 + 856) = 0;
  *(_OWORD *)(v3 + 840) = 0u;
  llvm::MCObjectFileInfo::initMCObjectFileInfo();
  return v3;
}

uint64_t sub_22F2EF90C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a2;
  *a2 = 0;
  v8[0] = v4;
  v8[1] = 0;
  v8[2] = a3;
  if (a1[1] >= (unint64_t)a1[2])
    v5 = sub_22E87CD04(a1);
  else
    v5 = llvm::SourceMgr::SrcBuffer::SrcBuffer() + 24;
  a1[1] = v5;
  v6 = -1431655765 * ((unint64_t)(v5 - *a1) >> 3);
  MEMORY[0x23489FBDC](v8);
  return v6;
}

uint64_t sub_22F2EF990(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 184), (void *)(8 * *(unsigned int *)(a1 + 200)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 160), (void *)(8 * *(unsigned int *)(a1 + 176)));
  return a1;
}

uint64_t sub_22F2EF9D8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  char v10;
  int v11;
  uint64_t v12;

  v4 = a2;
  v5 = result;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 16 * v7);
    do
    {
      if (*((char *)v4 + 23) >= 0)
        v9 = v4;
      else
        v9 = (uint64_t *)*v4;
      *v8 = v9;
      v10 = *((_BYTE *)v4 + 23);
      v11 = v10;
      v12 = v10 & 0x7F;
      if (v11 < 0)
        v12 = v4[1];
      v8[1] = v12;
      v4 += 3;
      v8 += 2;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

unint64_t sub_22F2EFA94(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD v17[41];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 88);
  v16[0] = 0;
  v16[1] = v17;
  v16[2] = 0x400000000;
  v7 = *(_QWORD *)(v15 + 3200);
  *(_QWORD *)(v15 + 3200) = v16;
  v17[40] = v7;
  v18 = 0;
  v10 = 3;
  v11 = 0;
  v12 = a3;
  v13 = a4;
  v14 = 0;
  v8 = sub_22E87DF50(a1, a2, &v10, (uint64_t)&v15, a5, a6, a7);
  sub_22E828C30((uint64_t)&v15);
  return v8;
}

void sub_22F2EFB48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[32];
  void *v57;
  uint64_t v58;
  _QWORD v59[6];

  v59[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 112);
  if (!v3)
    return;
  v5 = sub_22EFC7910(v3);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 1960) + 80);
  v8 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
  v9 = v8 + 40;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v6 + 216);
  v11 = *(_QWORD *)(v6 + 3200);
  *(_QWORD *)(v6 + 3200) = 0;
  v47 = *(_QWORD *)(v6 + 10288);
  v48 = v11;
  v45 = *(_DWORD *)(v6 + 2192);
  v46 = *(_DWORD *)(v6 + 1944);
  *(_QWORD *)(v6 + 216) = v9;
  *(_QWORD *)(v6 + 10288) = 0;
  *(_DWORD *)(v6 + 1944) = *(_DWORD *)(v6 + 1904);
  *(_DWORD *)(v6 + 2192) = *(_DWORD *)(v6 + 1960);
  v52 = v10;
  v57 = v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  v12 = v5 + 72;
  if (v5)
    v13 = v5 + 72;
  else
    v13 = 0;
  v49 = v13;
  v14 = sub_22EA044C0(*(_QWORD *)(a1 + 88), v13);
  if (v5)
  {
    v15 = v14;
    do
    {
      if ((*(_WORD *)(v12 + 8) & 0x7F) == 0x53)
        break;
      v16 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v55;
      }
      *((_QWORD *)v54 + v16) = v12 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v12 == v15));
      LODWORD(v55) = v55 + 1;
      if (v12 == v15)
        v15 = sub_22EA044C0(*(_QWORD *)(a1 + 88), v12);
      v17 = *(_QWORD *)(sub_22EFCAD5C(v12) + 16);
      v12 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  v51 = v5;
  if ((_DWORD)v55)
  {
    v18 = 0;
    v19 = 8 * v55;
    v20 = (char *)v54 - 8;
    do
    {
      v21 = *(_QWORD *)&v20[v19];
      v22 = (_QWORD *)operator new();
      *v22 = a1;
      sub_22E885C30(a1, 128);
      v23 = v58;
      if (v58 >= (unint64_t)HIDWORD(v58))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = v58;
      }
      *((_QWORD *)v57 + v23) = v22;
      LODWORD(v58) = v58 + 1;
      v24 = *(_QWORD *)(a1 + 88);
      v25 = *(_QWORD *)(v24 + 12888);
      v26 = sub_22EFCAD5C(v21 & 0xFFFFFFFFFFFFFFF8);
      v27 = sub_22EABF260(v24, v25, v26);
      *(_DWORD *)(a1 + 952) += v27;
      if ((v21 & 4) != 0)
      {
        v28 = (_QWORD *)operator new();
        *v28 = a1;
        sub_22E885C30(a1, 8);
        v29 = v58;
        if (v58 >= (unint64_t)HIDWORD(v58))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v58;
        }
        *((_QWORD *)v57 + v29) = v28;
        LODWORD(v58) = v58 + 1;
        sub_22F31D050(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v21 & 0xFFFFFFFFFFFFFFF8);
      }
      v18 += v27;
      v19 -= 8;
    }
    while (v19);
  }
  else
  {
    v18 = 0;
  }
  v30 = sub_22E4EF088(a2, a1 + 16, 1);
  v31 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v32 = *(_OWORD *)v30;
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v30 + 16);
  *(_OWORD *)v31 = v32;
  v33 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v33;
  sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)a2, v33, 1, 0, 1);
  sub_22E80F0F0(a1, 1);
  v53 = a1;
  sub_22E885C30(a1, 4194313);
  v34 = *(_QWORD *)(a1 + 88);
  v35 = sub_22EA044C0(v34, v49);
  v36 = *(_QWORD *)(v34 + 216);
  v50 = *(_QWORD *)(v34 + 3200);
  *(_QWORD *)(v34 + 3200) = 0;
  v37 = *(_QWORD *)(v34 + 10288);
  v38 = *(_DWORD *)(v34 + 1944);
  v39 = *(_DWORD *)(v34 + 2192);
  *(_QWORD *)(v34 + 216) = v35;
  *(_QWORD *)(v34 + 10288) = 0;
  *(_DWORD *)(v34 + 1944) = *(_DWORD *)(v34 + 1904);
  *(_DWORD *)(v34 + 2192) = *(_DWORD *)(v34 + 1960);
  sub_22EA2F2FC(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v51, 0, 0);
  v40 = *(unsigned __int16 *)(a1 + 32);
  if (v40 == 61)
  {
    sub_22E8338EC(a1, *(_QWORD *)(a2 + 112));
    goto LABEL_32;
  }
  if (v40 != 151)
  {
    sub_22EAB2DB0(*(_QWORD **)(a1 + 88), *(_QWORD *)(a2 + 112));
LABEL_32:
    if (*(_WORD *)(a1 + 32) == 23)
    {
      sub_22E8798D0(a1, *(_QWORD *)(a2 + 112), &v53);
      sub_22F346DA4(*(_QWORD *)(a1 + 88), v51);
    }
    else
    {
      sub_22EA30A30(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 112), 0);
    }
    goto LABEL_35;
  }
  sub_22E879A28(a1, *(_QWORD *)(a2 + 112), &v53);
LABEL_35:
  if (v53)
  {
    sub_22E885CF4(v53);
    v53 = 0;
  }
  if ((_DWORD)v58)
  {
    v41 = (char *)v57;
    v42 = (char *)v57 + 8 * v58;
    do
    {
      v44 = (uint64_t *)*((_QWORD *)v42 - 1);
      v42 -= 8;
      v43 = v44;
      if (v44)
      {
        if (*v43)
        {
          sub_22E885CF4(*v43);
          *v43 = 0;
        }
        MEMORY[0x2348A0E9C](v43, 0x20C4093837F09);
        v41 = (char *)v57;
      }
    }
    while (v42 != v41);
  }
  if (v36)
  {
    *(_QWORD *)(v34 + 216) = v36;
    *(_QWORD *)(v34 + 3200) = v50;
    *(_QWORD *)(v34 + 10288) = v37;
    *(_DWORD *)(v34 + 1944) = v38;
    *(_DWORD *)(v34 + 2192) = v39;
  }
  if (v53)
    sub_22E885CF4(v53);
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
  if (v52)
  {
    *(_QWORD *)(v6 + 216) = v52;
    *(_QWORD *)(v6 + 3200) = v48;
    *(_QWORD *)(v6 + 10288) = v47;
    *(_DWORD *)(v6 + 1944) = v46;
    *(_DWORD *)(v6 + 2192) = v45;
  }
  *(_DWORD *)(a1 + 952) -= v18;
  if (*(_DWORD *)(a1 + 2200) && (*(_WORD *)(a1 + 32) == 1 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1048)))
    sub_22E8864CC(a1);
}

uint64_t sub_22F2F00B4(unsigned __int16 *a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = a1[16];
  result = sub_22E80C35C((uint64_t)a1, a2);
  if ((result & 1) == 0)
    result = sub_22E80F398(a1, 24, 24, a2, 0, 1);
  if (v4 == 151)
  {
    while (a1[16] == 129)
    {
      sub_22E80F398(a1, 23, 23, a2, 0, 1);
      result = sub_22E80F398(a1, 24, 24, a2, 0, 1);
    }
  }
  return result;
}

uint64_t sub_22F2F0154(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  __int16 v17;

  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 2344);
  v7 = *(_WORD *)(a1 + 80);
  v8 = *(_WORD *)(a1 + 82);
  v9 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  v16 = 3407923;
  v17 = 74;
  v10 = sub_22E885940(a1, (unsigned __int16 *)&v16, 3, 3);
  if ((_DWORD)v10)
  {
    sub_22E80FADC(a1 + 2336, v6);
    sub_22F414580(*(_QWORD *)(a1 + 8));
    v16 = 0;
    sub_22E8809B8(a1, a3, &v16, 1, 0);
    sub_22ED57748(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, a3, v16);
  }
  else
  {
    sub_22F162AFC(*(_QWORD *)(a1 + 8));
    *(_OWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    sub_22E80FADC(a1 + 2336, v6);
    *(_WORD *)(a1 + 80) = v7;
    *(_WORD *)(a1 + 82) = v8;
    *(_WORD *)(a1 + 84) = v9;
  }
  return v10;
}

uint64_t sub_22F2F028C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6 = *(unsigned __int16 *)(a3 + 16);
  if (v6 == 65)
  {
    if (sub_22E83F964(a1) && (sub_22F2F0154(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8)) & 1) != 0)
      goto LABEL_14;
    v6 = *(unsigned __int16 *)(a3 + 16);
  }
  if (v6 == 51)
  {
    if (*(_WORD *)(a1 + 32) != 21)
    {
LABEL_4:
      v7 = 0;
LABEL_5:
      sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
      return v7;
    }
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 2816);
    if (v10 >= *(unsigned int *)(v9 + 2784))
      v11 = sub_22F162D2C(v9, 1u);
    else
      v11 = *(_QWORD *)(v9 + 2776) + 24 * v10;
    if (*(_WORD *)(v11 + 16) == 22)
    {
      sub_22ED57748(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_DWORD *)a3);
LABEL_14:
      v7 = 1;
      goto LABEL_5;
    }
    v6 = *(unsigned __int16 *)(a3 + 16);
    if (v6 == 51)
      goto LABEL_4;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0)
    return 0;
  v7 = 0;
  if (v6 == 74 || v6 == 52)
    goto LABEL_5;
  return v7;
}

void sub_22F2F03AC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2F0418((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2F0418(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 56 * v2;
    v6 = (_QWORD *)(a2 + 24);
    v7 = v4 + 24;
    do
    {
      *(_OWORD *)(v6 - 3) = *(_OWORD *)(v7 - 24);
      *(v6 - 1) = *(_QWORD *)(v7 - 8);
      v8 = sub_22F0AB560(v6, v7);
      v8[3] = *(_QWORD *)(v7 + 24);
      v6 = v8 + 7;
      v9 = v7 + 32;
      v7 += 56;
    }
    while (v9 != v5);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 56 * v10;
      do
      {
        if (*(_DWORD *)(v11 + v12 - 12))
          free(*(void **)(v11 + v12 - 24));
        v12 -= 56;
      }
      while (v12);
    }
  }
}

uint64_t sub_22F2F04BC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v2 + 16) != 5)
    return 3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
  v3 = *(unsigned __int16 *)(a1 + 32);
  v4 = 3;
  if (v3 == 65)
    goto LABEL_5;
  if (v3 == 51)
  {
    v4 = 2;
LABEL_5:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
  }
  return v4;
}

uint64_t sub_22F2F0554(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned __int16 v4;

  for (result = sub_22E882CE0(a1, 0, 1, 0); (_DWORD)result == 2; result = sub_22E882CE0(a1, 0, 1, 0))
  {
    v3 = *(unsigned __int16 *)(a1 + 32);
    if (v3 > 0x16)
    {
      result = 0;
      if (*(unsigned __int16 *)(a1 + 32) > 0x7Eu)
      {
        if (v3 == 127 || v3 == 186)
          return result;
      }
      else if (v3 == 23 || v3 == 63)
      {
        return result;
      }
    }
    else if (v3 == 21)
    {
      sub_22E80F720(a1);
      v4 = 22;
      if ((sub_22E885940(a1, &v4, 1, 1) & 1) == 0)
        return 3;
      goto LABEL_8;
    }
    if (sub_22E850930(a1))
      return 0;
LABEL_8:
    if (*(_WORD *)(a1 + 32) != 65)
      return 2;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  return result;
}

void sub_22F2F0674(_BYTE *a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  a1[8] = 0;
  if (a1[10] + a1[9] + a1[11] >= 2)
  {
    v2 = *(_QWORD *)a1;
    v3 = (__int128 *)(*(_QWORD *)a1 + 48);
    v19 = *v3;
    v20 = *(_OWORD *)(*(_QWORD *)a1 + 64);
    v4 = (__int128 *)(*(_QWORD *)a1 + 16);
    v17 = *v4;
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v5 = *(unsigned int *)(*(_QWORD *)a1 + 2344);
    v6 = *(_WORD *)(*(_QWORD *)a1 + 80);
    v7 = *(_WORD *)(*(_QWORD *)a1 + 82);
    v8 = *(_WORD *)(*(_QWORD *)a1 + 84);
    sub_22F1629F8(*(_QWORD *)(*(_QWORD *)a1 + 8));
    if (a1[11])
    {
      v9 = 0;
      while (1)
      {
        v10 = *(_QWORD *)a1;
        v21[0] = 0x3D003C003E0016;
        sub_22E885940(v10, (unsigned __int16 *)v21, 4, 2);
        v11 = *(_QWORD *)a1;
        v12 = *(unsigned __int16 *)(*(_QWORD *)a1 + 32);
        if (v12 == 60)
        {
          v13 = 1;
        }
        else
        {
          if (v12 != 61)
          {
            a1[11] = 0;
            goto LABEL_11;
          }
          if (!v9)
          {
            *(_WORD *)(a1 + 9) = 0;
            goto LABEL_14;
          }
          v13 = -1;
        }
        v9 += v13;
        v15 = *(_DWORD *)(v11 + 16);
        v14 = (unsigned int *)(v11 + 16);
        v14[6] = v15;
        sub_22F18FB4C(*((_QWORD *)v14 - 1), v14);
      }
    }
    v16 = *(_QWORD *)a1;
    LODWORD(v21[0]) = 4063254;
    sub_22E885940(v16, (unsigned __int16 *)v21, 2, 2);
    v12 = *(unsigned __int16 *)(*(_QWORD *)a1 + 32);
LABEL_11:
    if (v12 == 22 || (a1[11] = 0, a1[9] = 0, v12 != 62))
      a1[10] = 0;
LABEL_14:
    sub_22F162AFC(*(_QWORD *)(v2 + 8));
    *v3 = v19;
    v3[1] = v20;
    *v4 = v17;
    *(_QWORD *)(v2 + 32) = v18;
    sub_22E80FADC(v2 + 2336, v5);
    *(_WORD *)(v2 + 80) = v6;
    *(_WORD *)(v2 + 82) = v7;
    *(_WORD *)(v2 + 84) = v8;
  }
}

unint64_t sub_22F2F0840(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v2 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(unsigned __int16 *)(v2 + 16);
  if ((v3 - 27) < 0x21)
    goto LABEL_2;
  if (*(unsigned __int16 *)(v2 + 16) > 0x45u)
  {
    if (*(unsigned __int16 *)(v2 + 16) > 0x8Bu)
    {
      if (v3 == 169)
        goto LABEL_2;
      if (v3 != 140)
        goto LABEL_31;
    }
    else
    {
      if (v3 == 70)
        goto LABEL_2;
      if (v3 != 132)
        goto LABEL_31;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
    if (*(_WORD *)(a1 + 32) != 19)
      return 0;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v8 + 2816);
    v10 = v9 >= *(unsigned int *)(v8 + 2784) ? sub_22F162D2C(v8, 1u) : *(_QWORD *)(v8 + 2776) + 24 * v9;
    if (*(_WORD *)(v10 + 16) != 20)
      return 0;
    goto LABEL_30;
  }
  if ((v3 - 63) < 3)
  {
LABEL_2:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
    return 0;
  }
  if (v3 == 19)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v11 + 2816);
    if (v12 >= *(unsigned int *)(v11 + 2784))
      v13 = sub_22F162D2C(v11, 1u);
    else
      v13 = *(_QWORD *)(v11 + 2776) + 24 * v12;
    if (*(_WORD *)(v13 + 16) != 20)
      goto LABEL_31;
LABEL_30:
    sub_22E80F788(a1);
    sub_22E80F788(a1);
    return 0;
  }
  if (v3 == 21)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(v5 + 2816);
    v7 = v6 >= *(unsigned int *)(v5 + 2784) ? sub_22F162D2C(v5, 1u) : *(_QWORD *)(v5 + 2776) + 24 * v6;
    if (*(_WORD *)(v7 + 16) == 22)
    {
      sub_22E80F720(a1);
      sub_22E80F720(a1);
      return 0;
    }
  }
LABEL_31:
  v14 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v14 + 56) + 1) & 2) != 0)
  {
    v17 = *(unsigned __int16 *)(a1 + 32);
    if (v17 <= 0x12 && ((1 << v17) & 0x76000) != 0)
    {
      v18 = 0;
      while (1)
      {
        v18 |= (*(_WORD *)(a1 + 34) & 0x20) >> 5;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(v14, (unsigned int *)v2);
        v19 = *(unsigned __int16 *)(a1 + 32);
        if (v19 > 0x12 || ((1 << v19) & 0x76000) == 0)
          break;
        v14 = *(_QWORD *)(a1 + 8);
      }
      if ((v18 & 1) != 0)
        return 0;
      if (v19 != 5)
        return 3;
      goto LABEL_2;
    }
  }
  v15 = 0;
  do
  {
    result = sub_22E881D88(a1, 1, 0);
    if ((_DWORD)result == 3)
      break;
    if ((_DWORD)result == 1)
    {
      if ((v15 & 1) == 0)
        return 3;
      return sub_22E883BBC(a1);
    }
    v16 = sub_22E8829B4(a1);
    v15 = 1;
    result = 3;
  }
  while (v16 != 3);
  return result;
}

uint64_t sub_22F2F0ADC(uint64_t a1)
{
  uint64_t result;
  unsigned int *i;
  int v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;

  result = sub_22E883ED8(a1, 0, 0);
  if ((_DWORD)result == 2)
  {
    if (*(_WORD *)(a1 + 32) == 22)
      result = 2;
    else
      result = 1;
  }
  if ((result & 0xFFFFFFFD) != 1)
  {
    v9 = 22;
    if (!sub_22E885940(a1, &v9, 1, 1))
      return 3;
    for (i = (unsigned int *)(a1 + 16); ; i = v7)
    {
      v4 = *(unsigned __int16 *)(a1 + 32);
      v5 = (v4 - 80) > 0x1E || ((1 << (v4 - 80)) & 0x40040001) == 0;
      if (v5 && v4 != 310)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      v7 = i;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
    }
    if ((v4 - 27) <= 1)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      v8 = i;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
      i = v8;
      v4 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v4 == 149)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      v6 = i;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
      if (*(_WORD *)(a1 + 32) != 21)
        return 3;
      sub_22E80F720(a1);
      v10 = 22;
      if (!sub_22E885940(a1, &v10, 1, 1))
        return 3;
      v4 = *(unsigned __int16 *)(a1 + 32);
      i = v6;
    }
    if (v4 == 163)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
      if (*(_WORD *)(a1 + 32) == 21)
      {
        sub_22E80F720(a1);
        v11 = 22;
        if (!sub_22E885940(a1, &v11, 1, 1))
          return 3;
      }
    }
    return 2;
  }
  return result;
}

uint64_t sub_22F2F0C8C(uint64_t a1)
{
  uint64_t v2;
  int v4;

  sub_22E80F788(a1);
  if (*(_WORD *)(a1 + 32) != 23)
  {
    v4 = 4259860;
    v2 = 3;
    if (!sub_22E885940(a1, (unsigned __int16 *)&v4, 2, 3))
      return v2;
    if (*(_WORD *)(a1 + 32) == 20)
    {
      sub_22E80F788(a1);
      return 2;
    }
  }
  return 1;
}

BOOL sub_22F2F0D0C(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if (v2 > 249)
  {
    if ((v2 - 335) < 0xC)
      return result;
    v5 = (v2 - 358) > 0x31 || ((1 << (v2 - 102)) & 0x20C0210400003) == 0;
    if (!v5 || v2 == 250)
      return result;
    return 0;
  }
  v4 = (v2 - 76);
  if (v4 <= 0x36)
  {
    if (((1 << (v2 - 76)) & 0x500003931E1508) != 0)
      return result;
    if (v2 == 76)
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) >> 1) & 1;
    if (v4 == 38)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 2816);
      if (v7 >= *(unsigned int *)(v6 + 2784))
        v8 = sub_22F162D2C(v6, 1u);
      else
        v8 = *(_QWORD *)(v6 + 2776) + 24 * v7;
      return *(unsigned __int16 *)(v8 + 16) == 21;
    }
  }
  if ((v2 - 156) > 0x33 || ((1 << (v2 + 100)) & 0xC160000300019) == 0)
    return 0;
  return result;
}

uint64_t sub_22F2F0E30(uint64_t a1, int a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  int v15;
  __int16 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v2 = a2;
  if (!a2)
  {
    if (*(_WORD *)(a1 + 32) != 46)
      return 1;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(v4 + 2816);
    if (v5 >= *(unsigned int *)(v4 + 2784))
      v6 = sub_22F162D2C(v4, 1u);
    else
      v6 = *(_QWORD *)(v4 + 2776) + 24 * v5;
    if (*(_WORD *)(v6 + 16) == 51)
      return 0;
  }
  v7 = *(_OWORD *)(a1 + 64);
  v20 = *(_OWORD *)(a1 + 48);
  v21 = v7;
  v18 = *(_OWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 2344);
  v9 = *(_WORD *)(a1 + 80);
  v10 = *(_WORD *)(a1 + 82);
  v11 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  for (; v2; --v2)
    sub_22E80F0F0(a1, 0);
  if (*(_WORD *)(a1 + 32) == 46)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v17 = 0;
    if (sub_22E881D88(a1, 1, &v17))
    {
      v12 = 1;
      if (!v17)
      {
        v15 = 3407923;
        v16 = 74;
        if (sub_22E885940(a1, (unsigned __int16 *)&v15, 3, 3))
          v12 = 2;
        else
          v12 = 1;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  v13 = v21;
  *(_OWORD *)(a1 + 48) = v20;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 32) = v19;
  sub_22E80FADC(a1 + 2336, v8);
  *(_WORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 82) = v10;
  *(_WORD *)(a1 + 84) = v11;
  return v12;
}

uint64_t sub_22F2F0FD8(uint64_t a1)
{
  __int128 v2;
  unint64_t v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v2 = *(_OWORD *)(a1 + 64);
  v23 = *(_OWORD *)(a1 + 48);
  v24 = v2;
  v21 = *(_OWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 2344);
  v4 = *(_WORD *)(a1 + 80);
  v5 = *(_WORD *)(a1 + 82);
  v6 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  do
    sub_22E80F720(a1);
  while (*(_WORD *)(a1 + 32) == 21);
  if (sub_22E849D9C(a1) && (sub_22E88BDA8(a1, 0) & 1) != 0)
  {
    v7 = 3;
    goto LABEL_24;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 == 399)
  {
    v9 = *(unsigned int *)(a1 + 16);
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
    if ((_DWORD)v10)
      v10 = v10;
    else
      v10 = v9;
    sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v9 | (v10 << 32), (uint64_t)&v19);
    v11 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v11 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v11;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v8 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v8 == 401)
  {
LABEL_16:
    v12 = (uint64_t *)(a1 + 24);
    if (v8 != 5)
      v12 = (uint64_t *)(*v12 + 8);
    if (sub_22EAA974C(*(_QWORD *)(a1 + 88), *v12, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v19))
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(_QWORD *)(v13 + 2816);
      if (v14 >= *(unsigned int *)(v13 + 2784))
        v15 = sub_22F162D2C(v13, 1u);
      else
        v15 = *(_QWORD *)(v13 + 2776) + 24 * v14;
      if (*(_WORD *)(v15 + 16) != 22)
      {
        v18 = (!(_DWORD)v19 || !DWORD1(v19)) && *((_QWORD *)&v19 + 1) == 0;
        v7 = 0;
        if (!sub_22E820B78(a1, v18, 0))
          goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_21:
    v7 = 0;
    goto LABEL_22;
  }
  if (v8 != 141)
  {
    if (v8 != 5)
      goto LABEL_21;
    goto LABEL_16;
  }
LABEL_27:
  v7 = 2;
LABEL_22:
  if (HIDWORD(v20[1]))
    free(v20[0]);
LABEL_24:
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  v16 = v24;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 32) = v22;
  sub_22E80FADC(a1 + 2336, v3);
  *(_WORD *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 82) = v5;
  *(_WORD *)(a1 + 84) = v6;
  return v7;
}

uint64_t sub_22F2F11E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 312);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if ((**(_BYTE **)(v3 + 56) & 0xA0) != 0)
    {
      result = sub_22E3CB704((llvm::StringMapImpl *)(v3 + 544), "__except", 8uLL);
      *(_QWORD *)(a1 + 312) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F2F124C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 88);
  v3 = v2 + 12888;
  while (1)
  {
    v3 = *(_QWORD *)v3;
    if (!v3)
    {
      v6 = 0;
      v5 = *(_QWORD *)(a1 + 8);
      if (!*(_QWORD *)(v5 + 752))
        goto LABEL_11;
      goto LABEL_10;
    }
    v4 = *(_DWORD *)(v3 + 8);
    if ((v4 & 1) != 0)
      break;
    if ((v4 & 0x20) != 0)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = 1;
      if (!*(_QWORD *)(v5 + 752))
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 11;
  if (!*(_QWORD *)(v5 + 752))
    goto LABEL_11;
LABEL_10:
  *(_BYTE *)(v5 + 864) = 1;
  *(_BYTE *)(*(_QWORD *)(v5 + 48) + 6) = 1;
LABEL_11:
  *(_WORD *)(a1 + 32) = 1;
  sub_22F313608(v2, *(_QWORD *)(v2 + 12888), v6);
  return *(unsigned int *)(a1 + 40);
}

void sub_22F2F12F0(uint64_t a1)
{
  sub_22E885E10(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2F1314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  sub_22E885C30(a1, 8);
  sub_22F3088CC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 56) + 1) & 0x40) != 0)
  {
    *(_QWORD *)(a1 + 2696) = sub_22E3CB704((llvm::StringMapImpl *)(v2 + 544), "in", 2uLL);
    *(_QWORD *)(a1 + 2704) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "out", 3uLL);
    *(_QWORD *)(a1 + 2712) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "inout", 5uLL);
    *(_QWORD *)(a1 + 2720) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "oneway", 6uLL);
    *(_QWORD *)(a1 + 2728) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "bycopy", 6uLL);
    *(_QWORD *)(a1 + 2736) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "byref", 5uLL);
    *(_QWORD *)(a1 + 2744) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "nonnull", 7uLL);
    *(_QWORD *)(a1 + 2752) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "nullable", 8uLL);
    *(_QWORD *)(a1 + 2760) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "null_unspecified", 0x10uLL);
    v2 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 336) = sub_22E3CB704((llvm::StringMapImpl *)(v2 + 544), "super", 5uLL);
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0xC0000000000) != 0)
  {
    *(_QWORD *)(a1 + 344) = sub_22E3CB704((llvm::StringMapImpl *)(v3 + 544), "vector", 6uLL);
    *(_QWORD *)(a1 + 352) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "BOOL", 4uLL);
    *(_QWORD *)(a1 + 360) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "_Bool", 5uLL);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v4 + 8);
  }
  if ((v5 & 0x40000000000) != 0)
  {
    *(_QWORD *)(a1 + 368) = sub_22E3CB704((llvm::StringMapImpl *)(v3 + 544), "pixel", 5uLL);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 56);
  }
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  if ((*(_BYTE *)v4 & 0x80) != 0)
  {
    *(_QWORD *)(a1 + 264) = sub_22E3CB704((llvm::StringMapImpl *)(v3 + 544), "_exception_info", 0xFuLL);
    *(_QWORD *)(a1 + 272) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "__exception_info", 0x10uLL);
    *(_QWORD *)(a1 + 280) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "GetExceptionInformation", 0x17uLL);
    *(_QWORD *)(a1 + 240) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "_exception_code", 0xFuLL);
    *(_QWORD *)(a1 + 248) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "__exception_code", 0x10uLL);
    *(_QWORD *)(a1 + 256) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "GetExceptionCode", 0x10uLL);
    *(_QWORD *)(a1 + 288) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "_abnormal_termination", 0x15uLL);
    *(_QWORD *)(a1 + 296) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "__abnormal_termination", 0x16uLL);
    *(_QWORD *)(a1 + 304) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "AbnormalTermination", 0x13uLL);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 240), 59);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 248), 59);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 256), 59);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 264), 60);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 272), 60);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 280), 60);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 288), 61);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 296), 61);
    sub_22F418190(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 304), 61);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 56);
  }
  if ((*(_QWORD *)(v4 + 20) & 0x800000000000) != 0)
  {
    *(_QWORD *)(a1 + 488) = sub_22E3CB704((llvm::StringMapImpl *)(v3 + 544), "import", 6uLL);
    *(_QWORD *)(a1 + 496) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "module", 6uLL);
  }
  sub_22E8FD98C(*(_QWORD *)(a1 + 88));
  v7 = *(_DWORD *)(a1 + 16);
  v6 = (unsigned int *)(a1 + 16);
  v6[6] = v7;
  return sub_22F18FB4C(*((_QWORD *)v6 - 1), v6);
}

void sub_22F2F173C(uint64_t a1)
{
  int v2;
  unsigned __int16 v3;
  void *v4[2];
  _QWORD v5[13];

  v5[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 *)(a1 + 32);
  if (v2 == 63)
  {
    LOWORD(v4[0]) = 62;
    sub_22E885940(a1, (unsigned __int16 *)v4, 1, 0);
  }
  else
  {
    if (v2 == 151)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    v4[0] = v5;
    v4[1] = (void *)0x400000000;
    if (sub_22E80C35C(a1, (uint64_t)v4))
    {
      sub_22F2E2198(a1);
    }
    else
    {
      v3 = 24;
      sub_22E885940(a1, &v3, 1, 0);
      if (v2 == 151 && *(_WORD *)(a1 + 32) == 129)
      {
        do
        {
          v3 = 23;
          sub_22E885940(a1, &v3, 1, 0);
          v3 = 24;
          sub_22E885940(a1, &v3, 1, 0);
        }
        while (*(_WORD *)(a1 + 32) == 129);
      }
    }
    if (v4[0] != v5)
      free(v4[0]);
  }
}

char **sub_22F2F1894(uint64_t a1, int a2)
{
  return sub_22F3180CC(*(_QWORD *)(a1 + 88), a2);
}

char **sub_22F2F189C(uint64_t a1)
{
  return sub_22F3190C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
}

char **sub_22F2F18A8(uint64_t a1, int a2)
{
  return sub_22F3190D4(*(_QWORD *)(a1 + 88), a2);
}

char **sub_22F2F18B0(uint64_t a1)
{
  return sub_22F31943C(*(_QWORD *)(a1 + 88));
}

uint64_t sub_22F2F18B8(uint64_t a1)
{
  return nullsub_910(*(_QWORD *)(a1 + 88));
}

void sub_22F2F18D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_22E9D7B08(*(_QWORD *)(a1 + 88), a2, a3, a4);
}

void sub_22F2F18D8(uint64_t a1)
{
  sub_22F319738(*(_QWORD *)(a1 + 88));
}

uint64_t sub_22F2F18E0(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_WORD *)(a1 + 26);
  sub_22E885940(v2, &v4, 1, 2);
  return sub_22E811E8C(a1);
}

uint64_t sub_22F2F1928(uint64_t a1)
{
  unsigned int *i;
  int v3;
  int v4;
  int v5;

  for (i = (unsigned int *)(a1 + 16); ; sub_22F18FB4C(*(_QWORD *)(a1 + 8), i))
  {
    while (1)
    {
      v3 = *(unsigned __int16 *)(a1 + 32);
      if (v3 != 437)
        break;
      sub_22F33AA8C(*(__n128 **)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      v5 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v5 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v5;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
      ++*(_WORD *)(a1 + 86);
    }
    if (v3 == 438)
      break;
    if (v3 != 436)
      return 0;
    sub_22F33AA40(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
LABEL_6:
    v4 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v4 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v4;
  }
  if (*(_WORD *)(a1 + 86))
  {
    --*(_WORD *)(a1 + 86);
    sub_22F33AC7C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_22F2F1A00(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xF0 | 1;
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v5 = *(_QWORD *)(v4 + 32);
  if (sub_22F1CF68C(v5, 0x1BBDu, 0, v4) == 1
    && sub_22F1CF68C(v5, 0x1BBEu, 0, v4) == 1
    && sub_22F1CF68C(v5, 0x1BC2u, 0, v4) == 1)
  {
    v6 = 2 * (sub_22F1CF68C(v5, 0x1BC1u, 0, v4) != 1);
  }
  else
  {
    v6 = 2;
  }
  v7 = *(_BYTE *)(a1 + 8) & 0xFD | v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = v7 & 0xFB | (4 * (sub_22F1CF68C(*(_QWORD *)(v4 + 32), 0x197Au, 0, v4) != 1));
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 8) = v8 & 0xF7 | (8 * (sub_22F1CF68C(*(_QWORD *)(v4 + 32), 0x1BE9u, 0, v4) != 1));
  return a1;
}

uint64_t sub_22F2F1B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = sub_22E8A8E54(v2);
    MEMORY[0x2348A0E9C](v3, 0x1020C405AF6BDC9);
  }
  return a1;
}

llvm::raw_ostream *sub_22F2F1BB4(llvm *a1)
{
  llvm::raw_ostream *v1;
  llvm *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;

  v1 = (llvm::raw_ostream *)llvm::errs(a1);
  v2 = sub_22E47DAC0(v1, "\n*** Analysis Based Warnings Stats:\n");
  llvm::errs(v2);
  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v3, " functions analyzed (");
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v5 = sub_22E47DAC0(v4, " w/o CFGs).\n");
  sub_22E47DAC0(v5, "  ");
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v7 = sub_22E47DAC0(v6, " CFG blocks built.\n");
  sub_22E47DAC0(v7, "  ");
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = sub_22E47DAC0(v8, " average CFG blocks per function.\n");
  sub_22E47DAC0(v9, "  ");
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = sub_22E47DAC0(v10, " max CFG blocks per function.\n");
  llvm::errs(v11);
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = sub_22E47DAC0(v12, " functions analyzed for uninitialiazed variables\n");
  sub_22E47DAC0(v13, "  ");
  v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v15 = sub_22E47DAC0(v14, " variables analyzed.\n");
  sub_22E47DAC0(v15, "  ");
  v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v17 = sub_22E47DAC0(v16, " average variables per function.\n");
  sub_22E47DAC0(v17, "  ");
  v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v19 = sub_22E47DAC0(v18, " max variables per function.\n");
  sub_22E47DAC0(v19, "  ");
  v20 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v21 = sub_22E47DAC0(v20, " block visits.\n");
  sub_22E47DAC0(v21, "  ");
  v22 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v23 = sub_22E47DAC0(v22, " average block visits per function.\n");
  sub_22E47DAC0(v23, "  ");
  v24 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  return sub_22E47DAC0(v24, " max block visits per function.\n");
}

_QWORD *sub_22F2F1D6C(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22E8902B8(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2F1DD0((uint64_t)a1, (uint64_t)a2, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F2F1DD0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E890354(a1, v7);
  v9 = 0;
  sub_22E8902B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_22F2F1E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void **v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      sub_22E8902B8((uint64_t *)a1, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(void **)a2;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(void **)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(a1 + 8);
      v10 = (void **)(a2 + 8);
      sub_22E890414(&v10);
    }
    a2 += 32;
  }
}

void sub_22F2F1F4C(unint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E89252C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F2F1FB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_22E892D64((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void **sub_22F2F2028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
  {
    v3 = sub_22F2F206C(v2);
    MEMORY[0x2348A0E9C](v3, 0x1060C40194CB704);
  }
  return sub_22F2F20B4((void **)a1);
}

uint64_t sub_22F2F206C(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(16 * *(unsigned int *)(a1 + 56)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(16 * *(unsigned int *)(a1 + 32)));
  return a1;
}

void **sub_22F2F20B4(void **a1)
{
  void *v2;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  if (*a1)
  {
    sub_22E8939A4((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_22F2F20FC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E893D34((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2F2168(uint64_t a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (uint64_t *)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (uint64_t *)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  v9 = *a2 | ((unint64_t)*a2 << 32);
  v10 = 1;
  sub_22E8907D4(v4, (uint64_t)&v9);
  return a1;
}

uint64_t sub_22F2F2210(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22E3B89A8(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  return a1;
}

unint64_t sub_22F2F22A4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
    return sub_22F2F2500(a1, a2);
  v3 = *(_QWORD *)a1 + 32 * v2;
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

_QWORD *sub_22F2F22EC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2F2364(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

_QWORD *sub_22F2F2364(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E899718(a1, v6);
  v8 = 0;
  sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F2F2414(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 88 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22F28619C((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        v10[2] = 0x200000000;
        v10[1] = v10 + 3;
        v11 = (unint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22E892224(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22E89277C((char **)(v4 + 8));
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F2F2500(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = v4 + 32 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v5 = *(_DWORD *)a2;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_22E89252C(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v6 = (*(_DWORD *)(a1 + 8) + 1);
  *(_QWORD *)(a1 + 8) = v6;
  return v4 + 32 * v6 - 32;
}

int32x2_t sub_22F2F25AC(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  uint64_t v5;

  v5 = 0;
  if (sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = (_QWORD *)v5;
    sub_22E89277C((char **)(v5 + 8));
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void sub_22F2F2614()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F2F2628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9[24];
  uint64_t v10;

  v10 = a2;
  sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(a2 + 24), 0x1BC4u, 0, (uint64_t)v9);
  sub_22E890024((uint64_t)v9, &v10);
  LODWORD(v8) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16) != 39;
  sub_22E8900C4((uint64_t)v9, (int *)&v8);
  LODWORD(v8) = *(_DWORD *)(v10 + 24);
  HIDWORD(v8) = v8;
  sub_22E8906A0((uint64_t)v9, &v8);
  v4 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_DWORD **)a3;
    v6 = 56 * v4;
    do
    {
      sub_22E890748((uint64_t)v9, v5);
      v5 += 14;
      v6 -= 56;
    }
    while (v6);
  }
  return sub_22E903BEC(v9);
}

uint64_t sub_22F2F26F8(uint64_t result, int a2, const char *a3)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = &unk_22F5A9A16;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      goto LABEL_2;
    case 7:
      a3 = "(";
      goto LABEL_2;
    case 8:
      a3 = ")";
      goto LABEL_2;
    case 9:
      a3 = "[";
      goto LABEL_2;
    case 10:
      a3 = "]";
      goto LABEL_2;
    case 11:
      a3 = "{";
      goto LABEL_2;
    case 12:
      a3 = "}";
      goto LABEL_2;
    case 13:
      a3 = "<";
      goto LABEL_2;
    case 14:
      a3 = ">";
      goto LABEL_2;
    case 15:
      a3 = ", ";
      goto LABEL_2;
    case 16:
      a3 = ":";
      goto LABEL_2;
    case 17:
      a3 = ";";
      goto LABEL_2;
    case 18:
      a3 = " = ";
      goto LABEL_2;
    case 19:
      a3 = " ";
      goto LABEL_2;
    case 20:
      a3 = "\n";
LABEL_2:
      *(_QWORD *)(result + 8) = a3;
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_22F2F27DC(uint64_t a1, const char **a2)
{
  const char *v3;
  size_t v4;
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = xmmword_22F44E310;
  v3 = sub_22E486DFC(a2, (uint64_t)&v9);
  v5 = v4;
  v6 = (_BYTE *)sub_22E3CD3D4(a1, v4 + 1, 0);
  v7 = v6;
  if (v5)
    memmove(v6, v3, v5);
  v7[v5] = 0;
  if (v9 != v11)
    free(v9);
  return v7;
}

uint64_t sub_22F2F28A4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;

  result = sub_22E3CD3D4(*(_QWORD *)a1, 16 * *(unsigned int *)(a1 + 56) + 8 * *(unsigned int *)(a1 + 136) + 32, 3);
  v3 = *(unsigned int *)(a1 + 56);
  v4 = *(uint64_t **)(a1 + 128);
  v5 = *(unsigned int *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(__int128 **)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)result = *(_QWORD *)result & 0xFFFC000000000000 | (unsigned __int16)*(_DWORD *)(a1 + 56) | ((unint64_t)*(unsigned __int16 *)(a1 + 16) << 32) | ((unint64_t)(*(_DWORD *)(a1 + 20) & 3) << 48) | ((_DWORD)v5 << 16);
  *(_OWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 24) = v7;
  if ((_DWORD)v3)
  {
    v9 = (_OWORD *)(result + 32);
    v10 = v3;
    do
    {
      v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((_DWORD)v5)
  {
    v12 = (_QWORD *)(result + 32 + 16 * v3);
    do
    {
      v13 = *v4++;
      *v12++ = v13;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_22F2F2968(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_WORD *)(a2 + 8) & 0x7F;
  if (v2 != 83)
  {
    v3 = v2 > 0x18 || ((1 << v2) & 0x1000006) == 0;
    if (v3 && v2 - 58 <= 0xFFFFFFF9 && v2 - 13 <= 0x3D)
    {
      v4 = result;
      result = sub_22E8A94E0(*(_QWORD *)(result + 8), a2);
      *(_QWORD *)(v4 + 24) = result;
      *(_QWORD *)(v4 + 32) = v5;
    }
  }
  return result;
}

uint64_t sub_22F2F29D8(unsigned int *a1)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_918 + 4 * byte_22F462DC2[*a1]))(0);
}

uint64_t sub_22F2F2A00@<X0>(uint64_t a1@<X8>)
{
  return sub_22E49A914(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F2F2A20@<X0>(uint64_t a1@<X8>)
{
  return nullsub_918(*(_QWORD *)(a1 + 8));
}

void sub_22F2F2A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

BOOL sub_22F2F2A64(int a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  size_t v14;
  const void *v15;
  unint64_t v16;
  unsigned int *v18;
  const void *v19;
  unsigned int v20;

  v16 = *(_QWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(*(_QWORD *)a4 + 40) & 7) != 0 || v16 == 0)
    return 1;
  v18 = *(unsigned int **)(v16 + 16);
  v20 = *v18;
  v19 = v18 + 4;
  if (v20 < v14)
    return 1;
  if (v14)
    return memcmp(v19, v15, v14) != 0;
  return 0;
}

_QWORD *sub_22F2F2B64(_QWORD *a1)
{
  *a1 = &off_24FAA5740;
  sub_22F2A49B4((uint64_t)(a1 + 3));
  return a1;
}

void sub_22F2F2B94(_QWORD *a1)
{
  *a1 = &off_24FAA5740;
  sub_22F2A49B4((uint64_t)(a1 + 3));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2F2BD4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_22F2F2BDC(uint64_t a1)
{
  return a1 + 24;
}

_QWORD *sub_22F2F2BE4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F28501C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2850B8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

_BYTE *sub_22F2F2C50(unint64_t *a1, uint64_t a2, unsigned int a3)
{
  _BYTE *result;

  result = sub_22F0AB958((uint64_t)(a1 + 1), a2, a3);
  *a1 = a3 | ((unint64_t)a3 << 32);
  return result;
}

void sub_22F2F2C84(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  sub_22F0AB9D8((uint64_t)(a1 + 1), a2, a3, a4);
  *a1 = a4;
}

uint64_t sub_22F2F2CB0(int a1)
{
  return ((uint64_t (*)(const char *))((char *)sub_22F2F2CD8 + 4 * byte_22F462DF0[a1]))("unspecified");
}

const char *sub_22F2F2CD8()
{
  return "typeof";
}

const char *sub_22F2F2CE4()
{
  return "void";
}

const char *sub_22F2F2CF0()
{
  return "char";
}

const char *sub_22F2F2CFC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 4) & 4) != 0)
    return "__wchar_t";
  else
    return "wchar_t";
}

const char *sub_22F2F2DFC()
{
  return "_Decimal32";
}

const char *sub_22F2F2E08()
{
  return "_Decimal64";
}

const char *sub_22F2F2E14()
{
  return "_Decimal128";
}

const char *sub_22F2F2E20()
{
  return "enum";
}

const char *sub_22F2F2E2C()
{
  return "union";
}

const char *sub_22F2F2E38()
{
  return "struct";
}

const char *sub_22F2F2E44()
{
  return "class";
}

const char *sub_22F2F2E50()
{
  return "__interface";
}

const char *sub_22F2F2E5C()
{
  return "type-name";
}

const char *sub_22F2F2E68()
{
  return "(decltype)";
}

const char *sub_22F2F2E74()
{
  return "__underlying_type";
}

const char *sub_22F2F2E80()
{
  return "auto";
}

const char *sub_22F2F2E8C()
{
  return "decltype(auto)";
}

const char *sub_22F2F2E98()
{
  return "__auto_type";
}

const char *sub_22F2F2EA4()
{
  return "__unknown_anytype";
}

const char *sub_22F2F2EB0()
{
  return "_Atomic";
}

const char *sub_22F2F2EBC()
{
  return "image1d_t";
}

const char *sub_22F2F2EC8()
{
  return "image1d_array_t";
}

const char *sub_22F2F2ED4()
{
  return "image1d_buffer_t";
}

const char *sub_22F2F2EE0()
{
  return "image2d_t";
}

const char *sub_22F2F2EEC()
{
  return "image2d_array_t";
}

const char *sub_22F2F2EF8()
{
  return "image2d_depth_t";
}

const char *sub_22F2F2F04()
{
  return "image2d_array_depth_t";
}

const char *sub_22F2F2F10()
{
  return "image2d_msaa_t";
}

const char *sub_22F2F2F1C()
{
  return "image2d_array_msaa_t";
}

const char *sub_22F2F2F28()
{
  return "image2d_msaa_depth_t";
}

const char *sub_22F2F2F34()
{
  return "image2d_array_msaa_depth_t";
}

const char *sub_22F2F2F40()
{
  return "image3d_t";
}

const char *sub_22F2F2F4C()
{
  return "(error)";
}

const char *sub_22F2F2F58(int a1)
{
  const char *result;
  const char *v4;

  result = "unspecified";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "const";
      break;
    case 2:
      result = "restrict";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      __break(1u);
      break;
    case 4:
      result = "volatile";
      break;
    case 8:
      result = "__unaligned";
      break;
    default:
      v4 = "coherent(device)";
      if (a1 != 32)
        v4 = "coherent(system)";
      if (a1 == 16)
        result = "_Atomic";
      else
        result = v4;
      break;
  }
  return result;
}

BOOL sub_22F2F2FE8(uint64_t a1, int a2, int a3, const char **a4, int *a5)
{
  unsigned int v5;
  const char *v7;
  int v8;

  v5 = (*(_QWORD *)a1 >> 10) & 3;
  if (v5)
  {
    v7 = "signed";
    if (v5 == 2)
      v7 = "unsigned";
    *a4 = v7;
    if (v5 == a2)
      v8 = 94;
    else
      v8 = 3658;
    *a5 = v8;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFF3FFLL | ((a2 & 3) << 10);
    *(_DWORD *)(a1 + 116) = a3;
  }
  return v5 != 0;
}

uint64_t sub_22F2F3048(uint64_t a1)
{
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  return 0;
}

uint64_t sub_22F2F3078(unint64_t *a1, int a2, unint64_t a3, uint64_t *a4, _DWORD *a5)
{
  unint64_t v6;
  uint64_t result;

  v6 = *a1;
  result = (*a1 >> 12) & 0x3F;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 50)
    {
      return 0;
    }
    else
    {
      *a4 = sub_22F2F2CB0(result);
      *a5 = 3658;
      return 1;
    }
  }
  else
  {
    *((_DWORD *)a1 + 30) = a2;
    *((_DWORD *)a1 + 33) = a2;
    *a1 = v6 & 0xFFFFFFFFFFDC0FFFLL | 0x9000;
    a1[1] = a3;
  }
  return result;
}

uint64_t sub_22F2F30F4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(unsigned __int8 **)(a1 + 32);
    if (!v4)
    {
      v4 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v4;
    }
    v4[*v4 + 1] = 1;
    v5 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v8 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v14 = v9;
    v10 = sub_22F2F1D6C(v8, &v14)[1] + 32 * *(unsigned int *)(a1 + 88);
    v13 = *(unsigned __int8 **)(v10 + 8);
    v12 = (_QWORD *)(v10 + 8);
    v11 = v13;
    if (!v13)
    {
      v11 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
      *v12 = v11;
    }
    v11[*v11 + 1] = 1;
    v5 = (_BYTE *)*v12;
  }
  v6 = *v5;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = a2;
  return a1;
}

_DWORD *sub_22F2F31DC(_DWORD *result, int a2, int a3, const char **a4)
{
  int v4;
  const char *v5;

  if (!result[5])
    result[5] = a3;
  result[6] = a3;
  result[1] = a2;
  v4 = *result & a2;
  if (v4)
  {
    v5 = "override";
    switch(a2)
    {
      case 1:
        break;
      case 2:
        v5 = "final";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_15;
      case 4:
        v5 = "sealed";
        break;
      case 8:
        v5 = "__final";
        break;
      default:
        v5 = "abstract";
        break;
    }
    *a4 = v5;
    return (_DWORD *)(v4 != 0);
  }
  else
  {
    *result |= a2;
    switch(a2)
    {
      case 1:
        result[2] = a3;
        return (_DWORD *)(v4 != 0);
      case 2:
      case 4:
      case 8:
        result[3] = a3;
        return (_DWORD *)(v4 != 0);
      case 3:
      case 5:
      case 6:
      case 7:
LABEL_15:
        __break(1u);
        break;
      default:
        result[4] = a3;
        return (_DWORD *)(v4 != 0);
    }
  }
  return result;
}

void *sub_22F2F32AC@<X0>(int a1@<W0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, const void *a9, size_t a10, char a11, char a12)
{
  void *v16;
  void *v17;
  void *result;

  *(_WORD *)a8 = 0;
  *(_DWORD *)(a8 + 4) = *a2;
  *(_QWORD *)(a8 + 8) = a4;
  *(_QWORD *)(a8 + 16) = a5;
  *(_QWORD *)(a8 + 24) = a6;
  *(_QWORD *)(a8 + 32) = a7;
  if (a10)
  {
    v16 = (void *)operator new[]();
    memcpy(v16, a9, a10);
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(a8 + 40) = v16;
  *(_QWORD *)(a8 + 48) = a10;
  v17 = (void *)operator new[]();
  *(_QWORD *)(a8 + 56) = v17;
  result = memcpy(v17, a2, 4 * a3);
  *(_QWORD *)(a8 + 64) = a3;
  *(_DWORD *)(a8 + 72) = a1;
  *(_BYTE *)(a8 + 76) = a11;
  *(_BYTE *)(a8 + 77) = a12;
  return result;
}

uint64_t sub_22F2F3394(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v17[3];

  v3 = a3;
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    v6 = 0;
    v7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 39;
    v8 = 1;
    do
    {
      if (v7 && (*(_BYTE *)(v3 + 1) & 3) != 0)
      {
        v9 = *a1;
        if (*(_QWORD *)(*a1 + 1296) == *(_QWORD *)(*a1 + 1288))
          v10 = 0;
        else
          v10 = *(_QWORD *)(v9 + 1296);
        v3 = (uint64_t)sub_22EFFB64C(*(_QWORD *)(v9 + 88), *(_QWORD *)(v3 + 8), 4, v3, 0, 0, v10);
      }
      v11 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v6);
      v12 = *(_QWORD *)(*a1 + 88);
      v13 = *(_QWORD *)(v11 + 48);
      v14 = ((unint64_t)*(unsigned int *)(v11 + 28) >> 13) & 3 | v11;
      memset(v17, 0, sizeof(v17));
      v3 = sub_22EFFAF50(v12, v3, v7, 0, 0, 0, 0, v11, v14, (uint64_t)v17, 0, v13, 1, 0, 0, 0, 0);
      v7 = 0;
      v6 = v8;
    }
    while ((unint64_t)*(unsigned int *)(a2 + 8) - 1 > v8++);
  }
  return v3;
}

void sub_22F2F34EC(uint64_t *a1, int *a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22F2F46DC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x67:
        sub_22F2F474C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x68:
        sub_22F2F47D0((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x69:
      case 0x6A:
      case 0xA5:
      case 0xBE:
        sub_22F2F4854();
      case 0x6B:
        sub_22F2F4858(a1, (uint64_t)a2);
        break;
      case 0x6C:
        sub_22F2F48E8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x6D:
        sub_22F2F498C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22F2F49F4((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x6F:
        sub_22F2F49FC(a1, (uint64_t)a2);
        break;
      case 0x70:
        sub_22F2F4AF4(a1, a2);
        break;
      case 0x71:
        sub_22F2F4C54(a1, a2, a3);
        break;
      case 0x72:
        sub_22E8BBD84(a1, (uint64_t)a2);
        break;
      case 0x73:
        sub_22F2F4D24((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x74:
        sub_22F2F4E0C(a1, (uint64_t)a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        sub_22F2F4E68((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x76:
        sub_22E8BC010((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22F2F4E70((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22F2F507C((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x79:
        sub_22F2F5124(a1, (uint64_t)a2);
        break;
      case 0x7A:
        sub_22E8BC480((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x7B:
        sub_22F2F51D8((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7C:
        sub_22E8BC520(a1, (uint64_t)a2);
        break;
      case 0x7D:
        sub_22F2F54B0((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x7E:
        sub_22E8BC720((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7F:
        sub_22F2F5580(a1, (uint64_t)a2);
        break;
      case 0x81:
        sub_22E8BCA04((unsigned int **)a1, (uint64_t)a2);
        break;
      case 0x82:
        sub_22E8BCC84((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22F2F5600((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x85:
        sub_22F2F5688(a1, a2);
        break;
      case 0x86:
        sub_22F2F56C0(a1, (uint64_t)a2);
        break;
      case 0x87:
        sub_22E8BCED0(a1, (uint64_t)a2);
        break;
      case 0x88:
        sub_22F2F570C(a1, (uint64_t)a2);
        break;
      case 0x89:
        sub_22F2F58A8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x8A:
        sub_22F2F5968(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22F2F5B18(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22F2F5C4C(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22E8BD00C(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22F2F5C50(a1, (uint64_t)a2);
        break;
      case 0x90:
        sub_22F2F5CBC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x91:
        sub_22F2F5D30(a1, (uint64_t)a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22F2F5DB8();
        break;
      case 0x98:
        sub_22F2F5DBC(a1, (uint64_t)a2);
        break;
      case 0x99:
        sub_22F2F5E34((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22F2F5E60(a1, (uint64_t)a2);
        break;
      case 0x9C:
        sub_22F2F5EE4((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x9D:
        sub_22F2F5F74(a1, (uint64_t)a2);
        break;
      case 0x9E:
        sub_22F2F605C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x9F:
        sub_22F2F60C8(a1, (uint64_t)a2);
        break;
      case 0xA0:
        sub_22F2F611C(a1, (uint64_t)a2);
        break;
      case 0xA1:
        sub_22E8BD2E8((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xA2:
        sub_22F2F6168(a1, (uint64_t)a2);
        break;
      case 0xA3:
        sub_22F2F61D8(a1, (unsigned int *)a2);
        break;
      case 0xA4:
        sub_22E8BD554((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xA6:
        sub_22F2F61E4(a1, (uint64_t)a2);
        break;
      case 0xA7:
        sub_22F2F6268((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xA8:
        sub_22F2F62FC((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22F2F6328((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xB0:
        sub_22F2F63C0(a1, (uint64_t)a2);
        break;
      case 0xB1:
        sub_22E8BD8F8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xB3:
        sub_22F2F65E0((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xB4:
        sub_22F2F6638(a1, (unint64_t)a2);
        break;
      case 0xB6:
        sub_22E8BD9C0(a1, (uint64_t)a2);
        break;
      case 0xB7:
        sub_22F2F6780((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xB8:
        sub_22F2F688C(a1, (uint64_t)a2);
        break;
      case 0xB9:
        sub_22F2F690C((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xBA:
        sub_22F2F69FC((uint64_t)a1, (uint64_t)a2);
        break;
      case 0xBB:
        sub_22F2F6A10((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xBC:
        sub_22E8BE6A8((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xBD:
        sub_22F2F6A94((uint64_t **)a1, (uint64_t)a2);
        break;
      case 0xBF:
        sub_22F2F6C88((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xC0:
        sub_22E8BE9BC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xC1:
        sub_22E8BEB48((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xC4:
        sub_22F2F6D68(a1, (uint64_t)a2);
        break;
      case 0xC6:
        sub_22F2F6DB0((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xC7:
        sub_22F2F6DFC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xC8:
        sub_22E8BEE70(a1, (uint64_t)a2);
        break;
      case 0xC9:
        sub_22F2F6E54(a1, (uint64_t)a2);
        break;
      case 0xCA:
        sub_22F2F6F1C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xCB:
        sub_22F2F6F64(a1, (uint64_t)a2);
        break;
      case 0xCC:
        sub_22F2F7204(a1, (uint64_t)a2);
        break;
      case 0xCD:
        sub_22F2F720C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xD0:
        sub_22F2F72E4(a1, (uint64_t)a2);
        break;
      case 0xD1:
        sub_22E8BF194(a1, (uint64_t)a2);
        break;
      case 0xD2:
        sub_22F2F7354((uint64_t)a1, a2);
        break;
      case 0xD3:
        sub_22E8BF364(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22E8BF730((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22E8BFAF0((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xD6:
        sub_22F2F73B8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xD7:
        sub_22F2F7400(a1, (uint64_t)a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, a2);
        break;
      case 0xD9:
        sub_22E8BFB4C(a1, (uint64_t)a2);
        break;
      case 0xDA:
        sub_22F2F74E4(a1, (uint64_t)a2);
        break;
      case 0xDB:
        sub_22E8BFBC4(a1, (uint64_t)a2);
        break;
      case 0xDC:
        sub_22F2F7614(a1, (uint64_t)a2);
        break;
      case 0xDD:
        sub_22F2F7670(a1, (uint64_t)a2);
        break;
      case 0xDE:
        sub_22E8BFF78(a1, (uint64_t)a2);
        break;
      case 0xDF:
        sub_22F2F7758(a1, (uint64_t)a2);
        break;
      case 0xE0:
        sub_22F2F7778(a1, (uint64_t)a2);
        break;
      case 0xE4:
        sub_22F2F77DC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xE5:
        sub_22F2F78A0((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xE6:
        sub_22E8C0468((_QWORD **)a1, a2);
        break;
      case 0xE8:
        sub_22F2F7954(a1, (uint64_t)a2);
        break;
      case 0xE9:
        sub_22E8C0AB8(a1, (uint64_t)a2);
        break;
      case 0xEA:
        sub_22F2F7AB8((_QWORD **)a1, (uint64_t)a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22F2F3734(uint64_t a1, void **a2)
{
  unsigned __int8 **v4;
  char v5;
  BOOL v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v11 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v13 = v12;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v11, &v13)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  v5 = *((_BYTE *)a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  v8 = v5 & 0x7F;
  if (v6)
    v9 = (size_t)a2[1];
  else
    v9 = v8;
  sub_22E3B89A8(v4, v7, v9);
  return a1;
}

uint64_t sub_22F2F37E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = a1 + 32;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v7 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v9 = v8;
    v4 = sub_22F2F1D6C(v7, &v9)[1] + 32 * *(unsigned int *)(a1 + 88) + 8;
  }
  v5 = *a2;
  v10 = 7;
  v11 = v5;
  sub_22F0EFFCC(v4, (uint64_t)&v10);
  return a1;
}

uint64_t sub_22F2F3884(uint64_t a1, __int16 *a2)
{
  unsigned __int8 **v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22F41A35C(v4, *a2);
  return a1;
}

void sub_22F2F3918(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v5;

  sub_22F24FB88((_QWORD *)a1, a2);
  v5 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v5 + 1) > *(_QWORD *)(a1 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = *(_QWORD *)(a1 + 8);
  }
  *(_BYTE *)(*(_QWORD *)a1 + v5) = a3;
  ++*(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = a3 != 0;
}

uint64_t sub_22F2F3990(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  char *v12;
  unsigned int v13;
  char v14;

  *(_BYTE *)a1 = 125;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(125);
    ++*((_DWORD *)v12 + 2);
  }
  v13 = *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a2;
  if (a6)
    v14 = 2;
  else
    v14 = 0;
  *(_BYTE *)(a1 + 28) = v14 | a5 | *(_BYTE *)(a1 + 28) & 0xFC;
  *(_DWORD *)a1 = v13;
  return a1;
}

uint64_t sub_22F2F3A38(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = (_QWORD *)sub_22F2F3B70(a1, a2);
  v4[178] = *(_QWORD *)(a2 + 1424);
  v4[179] = v4 + 181;
  v4[180] = 0x400000000;
  if (*(_DWORD *)(a2 + 1440))
    sub_22F24C890(a1 + 1432, a2 + 1432);
  *(_QWORD *)a1 = &unk_24FAA5878;
  v5 = *(_OWORD *)(a2 + 1480);
  v6 = *(_OWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1509) = *(_QWORD *)(a2 + 1509);
  *(_OWORD *)(a1 + 1480) = v5;
  *(_OWORD *)(a1 + 1496) = v6;
  *(_QWORD *)(a1 + 1520) = a1 + 1536;
  *(_QWORD *)(a1 + 1528) = 0x400000000;
  if (*(_DWORD *)(a2 + 1528))
    sub_22F24C890(a1 + 1520, a2 + 1520);
  v7 = *(_OWORD *)(a2 + 1568);
  *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
  *(_OWORD *)(a1 + 1568) = v7;
  *(_QWORD *)(a1 + 1592) = a1 + 1608;
  *(_QWORD *)(a1 + 1600) = 0x400000000;
  if (*(_DWORD *)(a2 + 1600))
    sub_22F24C890(a1 + 1592, a2 + 1592);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a1 + 1640), (const void **)(a1 + 1672), (const llvm::SmallPtrSetImplBase *)(a2 + 1640));
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  sub_22E873BF4(a1 + 1736, a2 + 1736);
  *(_QWORD *)(a1 + 1760) = a1 + 1776;
  *(_QWORD *)(a1 + 1768) = 0x400000000;
  if (*(_DWORD *)(a2 + 1768))
    sub_22F252404(a1 + 1760, a2 + 1760);
  *(_DWORD *)(a1 + 1840) = *(_DWORD *)(a2 + 1840);
  return a1;
}

uint64_t sub_22F2F3B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F3C28(a1, a2);
  *(_QWORD *)v4 = &unk_24FAA5898;
  *(_DWORD *)(v4 + 1224) = *(_DWORD *)(a2 + 1224);
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  sub_22E5D08E0(v4 + 1232, a2 + 1232);
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1264) = a1 + 1280;
  *(_QWORD *)(a1 + 1272) = 0x400000000;
  if (*(_DWORD *)(a2 + 1272))
    sub_22F2F42A8(a1 + 1264, a2 + 1264);
  *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 1408);
  return a1;
}

void sub_22F2F3C04(uint64_t a1)
{
  sub_22F2F43D0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2F3C28(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;

  *(_QWORD *)a1 = &off_24FAB6968;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  v7 = a1 + 48;
  *(_QWORD *)(v7 - 8) = v6;
  *(_OWORD *)(v7 - 24) = v5;
  *(_OWORD *)(v7 - 40) = v4;
  *(_QWORD *)(v7 + 8) = 0x800000000;
  if (*(_DWORD *)(a2 + 56))
    sub_22F24C890(v7, a2 + 48);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  if (*(_DWORD *)(a2 + 136))
    sub_22F24C890(a1 + 128, a2 + 128);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  sub_22F2F3DAC((_QWORD *)(a1 + 184), (_DWORD *)(a2 + 184));
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = a1 + 376;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 4;
  if (*(_QWORD *)(a2 + 360))
    sub_22F2F3E84(a1 + 352, a2 + 352);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a1 + 384), (const void **)(a1 + 416), (const llvm::SmallPtrSetImplBase *)(a2 + 384));
  sub_22F2F3F4C((uint64_t *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_QWORD *)(a1 + 432) = a1 + 448;
  *(_QWORD *)(a1 + 440) = 0x400000000;
  if (*(_DWORD *)(a2 + 440))
    sub_22E8BB45C(a1 + 432, a2 + 432);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(a1 + 608), (const void **)(a1 + 640), (const llvm::SmallPtrSetImplBase *)(a2 + 608));
  *(_QWORD *)(a1 + 704) = 1;
  for (i = 712; i != 1224; i += 64)
  {
    v9 = (_QWORD *)(a1 + i);
    *v9 = 0;
    v9[1] = 0;
  }
  sub_22F2F40D8(a1 + 704, (_DWORD *)(a2 + 704));
  return a1;
}

void sub_22F2F3D88(uint64_t a1)
{
  sub_22F2F4378(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F2F3DAC(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t i;

  *a1 = 1;
  v4 = (uint64_t)(a1 + 9);
  for (i = 1; i != 9; i += 2)
    a1[i] = -4096;
  sub_22E8BB2D8((uint64_t)a1, a2);
  a1[9] = a1 + 11;
  a1[10] = 0x400000000;
  if (a2[20])
    sub_22E8BB370(v4, (uint64_t)(a2 + 18));
  return a1;
}

void *sub_22F2F3E34(unsigned int *a1, _DWORD *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;

  v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  v4 = a1 + 2;
  if (!v3)
    v4 = (_QWORD *)*v4;
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 64;
  else
    v7 = 16 * a1[4];
  return memcpy(v4, v5, v7);
}

uint64_t sub_22F2F3E84(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, 2 * v4);
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) >= v4)
      {
        if (v5)
          memmove(*(void **)a1, *(const void **)a2, 2 * v5);
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v5 = 0;
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 2 * v5), (const void *)(*(_QWORD *)a2 + 2 * v5), *(_QWORD *)a2 + 2 * v6 - (*(_QWORD *)a2 + 2 * v5));
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t *sub_22F2F3F4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 4) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v5 = (_QWORD *)operator new();
      v6 = (unint64_t)v5;
      *v5 = v5 + 2;
      v5[1] = 0x400000000;
      if (*(_DWORD *)(v4 + 8))
        sub_22F24C890((uint64_t)v5, v4);
      *a1 = v6 | 4;
    }
  }
  return a1;
}

void sub_22F2F3FD8(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2F4048((unint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

unint64_t *sub_22F2F4048(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(*result + 32);
    v4 = 40 * v2;
    do
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = *((_DWORD *)v3 - 4);
      *(_OWORD *)a2 = *((_OWORD *)v3 - 2);
      *(v3 - 4) = 0;
      *(_DWORD *)(a2 + 24) = *((_DWORD *)v3 - 2);
      *(_QWORD *)(a2 + 32) = *v3;
      *v3 = 0;
      v3 += 5;
      a2 += 40;
      v4 -= 40;
    }
    while (v4);
    v5 = *((unsigned int *)result + 2);
    if ((_DWORD)v5)
    {
      v6 = 40 * v5;
      v7 = *result - 40;
      do
      {
        result = sub_22E8BB7E0((unint64_t *)(v7 + v6));
        v6 -= 40;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_22F2F40D8(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  sub_22E8BB87C(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)((unint64_t)*(unsigned int *)(a1 + 16) << 6));
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 9u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 8;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C]((unint64_t)v5 << 6, 8);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_22F2F4174(a1, a2);
}

uint64_t sub_22F2F4174(uint64_t result, _DWORD *a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  _QWORD *v17;

  v3 = (unsigned int *)result;
  v4 = 0;
  v5 = *a2 & 0xFFFFFFFE | *(_DWORD *)result & 1;
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = a2[1];
  v6 = (_QWORD *)(result + 8);
  v7 = a2 + 2;
  v8 = 16;
  while ((v5 & 1) == 0)
  {
    if (v4 >= v3[4])
      return result;
    v9 = (_QWORD *)*v6;
LABEL_6:
    v10 = v7;
    if ((*(_BYTE *)a2 & 1) == 0)
      v10 = (_QWORD *)*v7;
    *(_OWORD *)&v9[(unint64_t)v8 / 8 - 2] = *(_OWORD *)&v10[(unint64_t)v8 / 8 - 2];
    if ((*(_BYTE *)v3 & 1) != 0)
    {
      v16 = (*(_QWORD *)&v3[(unint64_t)v8 / 4 - 2] & 0xFFFFFFFFFFFFFFFBLL) == 0
         && *(_QWORD *)&v3[(unint64_t)v8 / 4] == 0;
      v11 = v6;
      if (v16)
        goto LABEL_23;
    }
    else
    {
      v11 = (_QWORD *)*v6;
      v12 = *v6 + v8;
      v14 = *(_QWORD *)(v12 - 16);
      v13 = *(_QWORD *)(v12 - 8);
      if ((v14 & 0xFFFFFFFFFFFFFFFBLL) == 0 && v13 == 0)
        goto LABEL_23;
    }
    v17 = v7;
    if ((*(_BYTE *)a2 & 1) == 0)
      v17 = (_QWORD *)*v7;
    result = (uint64_t)&v11[(unint64_t)v8 / 8];
    *(_QWORD *)result = &v11[(unint64_t)v8 / 8 + 2];
    *(_QWORD *)(result + 8) = 0x400000000;
    if (LODWORD(v17[(unint64_t)v8 / 8 + 1]))
      result = sub_22F24C890(result, (uint64_t)&v17[(unint64_t)v8 / 8]);
LABEL_23:
    ++v4;
    v5 = *v3;
    v8 += 64;
  }
  v9 = v6;
  if (v4 < 8)
    goto LABEL_6;
  return result;
}

uint64_t sub_22F2F42A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 32 * v4 - 7);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 32 * v5 - 7);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v5), (const void *)(*(_QWORD *)a2 + 32 * v5), *(_QWORD *)a2 + 32 * v6 - (*(_QWORD *)a2 + 32 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F2F4378(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24FAA5898;
  v2 = *(void **)(a1 + 1264);
  if (v2 != (void *)(a1 + 1280))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1232), (void *)(16 * *(unsigned int *)(a1 + 1248)));
  return sub_22E8FC178(a1);
}

uint64_t sub_22F2F43D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 1760);
  if (v2 != (void *)(a1 + 1776))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1736), (void *)(12 * *(unsigned int *)(a1 + 1752)));
  v3 = *(void **)(a1 + 1648);
  if (v3 != *(void **)(a1 + 1640))
    free(v3);
  v4 = *(void **)(a1 + 1592);
  if (v4 != (void *)(a1 + 1608))
    free(v4);
  v5 = *(void **)(a1 + 1520);
  if (v5 != (void *)(a1 + 1536))
    free(v5);
  v6 = *(void **)(a1 + 1432);
  if (v6 != (void *)(a1 + 1448))
    free(v6);
  return sub_22F2F4378(a1);
}

uint64_t sub_22F2F446C(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 8))
  {
    sub_22E904AD8(*(_QWORD *)a1, 0, 0, 0, (uint64_t *)&v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      sub_22E905138((uint64_t)&v5, v2);
  }
  return a1;
}

uint64_t sub_22F2F44CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v17;

  *(_BYTE *)a1 = -73;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(183);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | ((a6 & 3) << 8);
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = a9;
  *(_BYTE *)(a1 + 36) = a4;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AABAC(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F2F4590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, int a7, uint64_t a8)
{
  char *v16;

  *(_BYTE *)a1 = -51;
  if (byte_255E04EB3)
  {
    v16 = sub_22F0D3748(205);
    ++*((_DWORD *)v16 + 2);
  }
  *(_DWORD *)a1 = ((a5 & 3) << 8) & 0xE3FF | ((a6 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2 | 4;
  *(_QWORD *)(a1 + 24) = a3 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a8 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD08(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F2F4658(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22E8BBD0C(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 16 * v3);
  *v5 = *a2;
  v5[1] = *a3;
  v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t sub_22F2F4694(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(a1 + 32))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

uint64_t sub_22F2F46DC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 48));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2F474C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 40));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2F47D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 24);
  v6 = v4;
  v7 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7)
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v7 + 8);
  }
  if (v4)
    return sub_22F32F628(*(_QWORD *)a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v4);
  else
    return 1;
}

uint64_t sub_22F2F4858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v6 & 1) != 0)
    return 1;
  sub_22F0D5A50(*(_QWORD *)(a2 + 16));
  v7 = *(_DWORD *)(a2 + 4);
  v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, (uint64_t *)&v9, 1, v7);
}

uint64_t sub_22F2F48E8(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = sub_22F2F7B28(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v6 = v4;
  v7 = *a1;
  sub_22EB48CC8((uint64_t)*a1, 0, 0, 3);
  v8 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v7);
  if ((v8 & 1) != 0)
    return 1;
  else
    return sub_22EBC8B4C(*a1, *(_BYTE *)(a2 + 16) & 3, *(_DWORD *)(a2 + 40), v6, v8 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22F2F498C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22F2F49F4(uint64_t a1, uint64_t a2)
{
  return sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22F2F49FC(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 72);
  }
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 80);
    v7 = *(unsigned int *)(a2 + 76) | (unint64_t)(v6 << 32);
    v5 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(a2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v5;
}

uint64_t sub_22F2F4AF4(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = sub_22F2F34EC(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *((_QWORD *)a2 + 3));
  v7 = v6;
  if ((v6 & 1) != 0)
    return 1;
  v8 = *a2;
  if (((*a2 >> 18) & 0x3E) - 22 <= 9)
    return sub_22EB4785C(*a1, 0, a2[1], (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 56);
  v11 = *(_QWORD *)(*a1 + 1296);
  v16 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  if ((v8 & 0x1000000) != 0)
  {
    v13 = 8;
    if (*a2 == 113)
      v13 = 12;
    v12 = *(_QWORD *)&a2[v13];
  }
  else
  {
    v12 = 0;
  }
  sub_22E51A8D0(&v17, *(_QWORD *)(v9 + 72));
  v14 = *a1;
  *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
  *(_QWORD *)(v14 + 1296) = v12;
  result = sub_22EB4785C(*a1, 0, a2[1], (*a2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 1296) = v11;
  v15 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v15 + 520) = v16;
  *(_DWORD *)(v15 + 528) = v16;
  return result;
}

__n128 sub_22F2F4C54(uint64_t *a1, int *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22F2F4AF4(a1, a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22F2F4D24(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22F2F4E0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22F2F4E68(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22F2F4E70(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  char v15;
  uint64_t v16;
  unsigned int v18;
  BOOL v19;
  uint64_t v20[2];
  char v21;
  void *v22[2];
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22F3010F0((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v20[0] = v7;
  v22[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v20, v22)
    && v22[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v22[0] + 1);
  }
  if (!v7)
    return 1;
  v21 = 0;
  v22[0] = v23;
  v22[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) != 0
    && ((v18 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v18 <= 3)
      ? (v19 = v18 == 2)
      : (v19 = 1),
        !v19 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0))
  {
    sub_22EB48CC8(*(_QWORD *)a1, 1, 0, 3);
    v10 = 0;
    v9 = *a2;
  }
  else
  {
    v10 = 1;
  }
  v11 = v9 == 119;
  if (v9 == 119)
    v12 = a2;
  else
    v12 = 0;
  v13 = (unsigned __int8 **)(v12 + 48);
  if (v11)
    v14 = v13;
  else
    v14 = v4;
  v15 = sub_22E8C47DC((uint64_t *)a1, v14, *((_DWORD *)a2 + 8), 1, (uint64_t)v22, &v21);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v15 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v20[0] = *v6;
    v20[1] = (uint64_t)(v6 + 1);
    sub_22F1167E8(v20);
    sub_22F3C57CC(a2);
    v16 = sub_22EBBC368();
  }
  if (v22[0] != v23)
    free(v22[0]);
  return v16;
}

uint64_t sub_22F2F507C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = v4;
  v11 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v10, &v11)
    && v11 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v11 + 8);
  }
  if (!v4)
    return 1;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 216);
  v8 = sub_22E3CD3D4(v6 + 2032, 32, 3);
  return sub_22E8BB138(v8, 120, v5, v4, v7);
}

uint64_t sub_22F2F5124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  v12 = v4;
  v13 = 0;
  if (sub_22E793870(a1 + 1, &v12, &v13) && v13 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v13 + 8);
  if (!v4)
    return 1;
  sub_22EFF605C(a2);
  v6 = v5;
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 88);
  v9 = *(_QWORD *)(v7 + 216);
  v10 = sub_22E3CD3D4(v8 + 2032, 32, 3);
  return sub_22F3C5FA4(v10, v8, v6, v4, *(_QWORD *)(v4 + 48), v9);
}

uint64_t sub_22F2F51D8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __n128 v28;
  void *v29[2];
  _DWORD v30[66];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 2)) & 1) == 0)
  {
    v24 = sub_22F2F34EC(a1, v4);
    if ((v24 & 1) != 0)
      return 1;
    v29[0] = 0;
    v28.n128_u8[0] = 0;
    v25 = (*a2 & 0x40000) != 0 ? 36 : 25;
    v26 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v24 & 0xFFFFFFFFFFFFFFFELL, a2[1], v25, (unint64_t *)v29, &v28);
    if ((v26 & 1) != 0)
      return 1;
    v8 = v29[0];
    v7 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22F2FAD70(a1, *((_QWORD *)a2 + 3));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *a2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = a2 + 18;
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = a2[21];
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v28.n128_u64[0] = v10;
  v29[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v28, v29)
    && v29[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v29[0] + 1);
  }
  v13 = *((_QWORD *)a2 + 4);
  if (v13)
  {
    v14 = sub_22E8C1D88((uint64_t *)a1, v13, *((void **)a2 + 5), (unint64_t)v8, v10);
    if (!v14)
      return 1;
    v16 = v14;
    v17 = v15;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  if ((*((_BYTE *)a2 + 2) & 8) != 0)
    v18 = a2[20];
  else
    v18 = 0;
  sub_22E8C64D0(a1, (__n128 *)a2 + 3, &v28);
  if (!v28.n128_u64[0])
    return 1;
  v19 = *a2;
  if ((v19 & 0x80000) == 0)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v19 >> 18) & 1, a2[1], v16, v17, v18, v10, (uint64_t)&v28, 0);
  v20 = a2[18];
  if (!v20)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v19 >> 18) & 1, a2[1], v16, v17, v18, v10, (uint64_t)&v28, 0);
  v21 = a2[19];
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  v30[64] = v20;
  v30[65] = v21;
  v22 = (uint64_t)&a2[4 * ((v19 >> 19) & 1) + 18];
  if ((sub_22E8C9A74(a1, v22, v22 + 32 * a2[21]) & 1) != 0)
    v23 = 1;
  else
    v23 = sub_22F3012E8((_QWORD **)a1, v7, v5, (*a2 >> 18) & 1, a2[1], v16, v17, v18, v10, (uint64_t)&v28, (uint64_t)v29);
  if (v29[0] != v30)
    free(v29[0]);
  return v23;
}

uint64_t sub_22F2F54B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22F2FAD70(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v6 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v13 = v7;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14))
  {
    if (v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      v7 = *(_QWORD *)(v14 + 8);
  }
  if (!v7)
    return 1;
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 28);
  v10 = v9 & 1;
  v11 = (v9 >> 1) & 1;
  v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
  return sub_22F2F3990(v12, v8, v6, v7, v10, v11);
}

uint64_t sub_22F2F5580(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  sub_22EB48CC8(*a1, 0, 0, 3);
  v5 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    v6 = 1;
  else
    v6 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v5 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(*(_QWORD *)(a2 + 24)));
  sub_22EB48E64(v4);
  return v6;
}

uint64_t sub_22F2F5600(_QWORD **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v4[2];

  v2 = sub_22F2F7B28(a1, *(uint64_t **)(a2 + 16));
  if (!v2)
    return 1;
  v4[0] = *v2;
  v4[1] = (uint64_t)(v2 + 1);
  sub_22F1167E8(v4);
  return sub_22EBBC368();
}

unsigned int *sub_22F2F5688(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;

  v4 = sub_22EBBB18C(*a1);
  return sub_22EBBC14C(*a1, a2[1], v4, (*a2 >> 18) & 1);
}

uint64_t sub_22F2F56C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EBBA860(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22F2F570C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  char v10;
  void *v11[2];
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  if (!sub_22F3010F0(a1, *(uint64_t **)(a2 + 16)))
    return 1;
  v10 = 0;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a2 + 24)
    || ((v6 = *a1, v7 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576), v7 <= 3)
      ? (v8 = v7 == 2)
      : (v8 = 1),
        v8 || (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 2) == 0))
  {
    v4 = 1;
    if ((sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v11, &v10) & 1) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v4 = 1;
  sub_22EB48CC8(*a1, 1, 0, 3);
  v9 = sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v11, &v10);
  sub_22EB48E64(v6);
  if ((v9 & 1) == 0)
LABEL_6:
    v4 = sub_22EBBC368();
LABEL_7:
  if (v11[0] != v12)
    free(v11[0]);
  return v4;
}

uint64_t sub_22F2F58A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v8 = (uint64_t *)sub_22F2F7B28(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v8)
      return sub_22EBBA098(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v8, *(_DWORD *)(a2 + 36));
    return 1;
  }
  else
  {
    v5 = *a1;
    sub_22EB48CC8((uint64_t)*a1, 0, 0, 3);
    v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 1) != 0)
      v7 = 1;
    else
      v7 = sub_22EBBA3E8(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    sub_22EB48E64(v5);
  }
  return v7;
}

uint64_t sub_22F2F5968(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2F34EC(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v19 = 0;
  v21 = v23;
  v22 = 0x800000000;
  v5 = 1;
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v21, &v19) & 1) == 0)
  {
    v6 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = v7;
    v9 = *a1;
    v10 = *(_DWORD *)(*a1 + 56);
    v11 = *(_QWORD *)(*a1 + 1296);
    v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    v12 = *a2;
    v13 = *a1;
    if ((v12 & 0x100000) != 0)
    {
      v14 = *(_QWORD *)((char *)&a2[2 * ((v12 >> 18) & 1) + 2 + 2 * a2[4]] + (v12 >> 24));
      sub_22E51A8D0(&v20, *(_QWORD *)(v9 + 72));
      v15 = *a1;
      *(_DWORD *)(v15 + 56) = v20 & ~HIDWORD(v14) | HIDWORD(v14) & v14;
      *(_QWORD *)(v15 + 1296) = v14;
      v13 = *a1;
    }
    v5 = sub_22EB33018(v13, 0, v6, v8, (uint64_t)v21, v22, a2[5], 0);
    *(_DWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 1296) = v11;
    v16 = *(_QWORD *)(v9 + 80);
    *(_QWORD *)(v16 + 520) = v18;
    *(_DWORD *)(v16 + 528) = v18;
  }
  if (v21 != v23)
    free(v21);
  return v5;
}

uint64_t sub_22F2F5B18(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2F34EC(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v7 = sub_22F2F5968(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v7 & 1) != 0)
    return 1;
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v5 = 1;
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v10, &v9) & 1) == 0)
  {
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v5 = sub_22EB33018(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, (uint64_t)v10, v11, a2[5], v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v10 != v12)
    free(v10);
  return v5;
}

uint64_t sub_22F2F5C50(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v6 = (uint64_t *)v4;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v6, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22F2F5CBC(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v6;
  unsigned __int8 *v7;
  uint64_t v8;

  v4 = sub_22F2F7B28(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v6 = v4;
  v7 = sub_22EFFB374((unsigned __int8 *)a2);
  v8 = sub_22F2F34EC(a1, v7);
  if ((v8 & 1) != 0)
    return 1;
  else
    return sub_22E95CFA4(*a1, *(unsigned int *)(a2 + 32), v6, *(unsigned int *)(a2 + 36), v8 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2F5D30(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v5;

  if (!sub_22F3010F0(a1, *(uint64_t **)(a2 + 24)))
    return 1;
  v5 = sub_22EFFB374((unsigned __int8 *)a2);
  if ((sub_22F2F34EC(a1, v5) & 1) != 0)
    return 1;
  else
    return sub_22EBBC368();
}

uint64_t sub_22F2F5DBC(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v6 = (uint64_t *)v4;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22EC33F14(*a1, *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 40) & 3, *(_DWORD *)(a2 + 36), v6, (void *)(v7 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22F2F5E34(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22F2F34EC(a1, v3);
}

uint64_t sub_22F2F5E60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22EB4A774(*a1, *(_DWORD *)(a2 + 40), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22F2F5EE4(_QWORD **a1, uint64_t a2)
{
  if (!sub_22F2F7B28(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
    || (sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32)) & 1) != 0)
  {
    return 1;
  }
  sub_22F0D60E4(*(_QWORD *)(a2 + 32));
  return sub_22EB34874();
}

uint64_t sub_22F2F5F74(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[34];

  v15[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v14[0] = v15;
  v5 = *v4;
  v14[1] = (void *)0x800000000;
  v15[32] = v5;
  if ((sub_22E8C9A74((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 56);
    v6 = sub_22F3016B4(a1, v8, v9, v10, &v12, v11, *(_QWORD *)(a2 + 72), (uint64_t)v14);
  }
  if (v14[0] != v15)
    free(v14[0]);
  return v6;
}

uint64_t sub_22F2F605C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v6;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = (uint64_t *)sub_22F2F7B28(a1, *(uint64_t **)(a2 + 24));
  if (!v6)
    return 1;
  else
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 36));
}

uint64_t sub_22F2F60C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22F2F611C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2F6168(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22E8BF364(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22F2F61D8(uint64_t *a1, unsigned int *a2)
{
  return sub_22F3013A4(a1, a2, 0, 0);
}

uint64_t sub_22F2F61E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  sub_22EB48CC8(*a1, 0, 0, 3);
  v5 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v4);
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24));
}

uint64_t sub_22F2F6268(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v6;
  unsigned int v7;
  _BOOL8 v8;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = *a1;
  sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  LODWORD(v6) = sub_22F141A3C(v7, 0, (_QWORD *)v6[14], (_DWORD *)v6[9]);
  v8 = sub_22F002798(a2);
  return sub_22F3017D4(a1, v4 & 0xFFFFFFFFFFFFFFFELL, (int)v6, v8, *(_DWORD *)(a2 + 32), *(_QWORD *)(a2 + 24));
}

uint64_t sub_22F2F62FC(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22F2F34EC(a1, v3);
}

uint64_t sub_22F2F6328(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22F2F34EC(a1, v5);
    if ((v6 & 1) == 0)
      goto LABEL_4;
    return 1;
  }
  v6 = 0;
LABEL_4:
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(v2 + 24) != v7)
    return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7);
  return v2;
}

uint64_t sub_22F2F63C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    do
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v17 = sub_22F2F7B28((_QWORD **)a1, v12);
        if (!v17)
          goto LABEL_21;
        v18 = v23;
        if (v23 >= 4uLL)
        {
          v22 = v17;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v22;
          v18 = v23;
        }
        v24[v18] = v17;
      }
      else
      {
        v13 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v23;
        }
        v24[v13] = 0;
      }
      ++v23;
      v14 = sub_22F2F34EC(a1, v11);
      if ((v14 & 1) != 0)
        goto LABEL_21;
      v15 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v26;
      }
      *((_QWORD *)v25 + v15) = v14 & 0xFFFFFFFFFFFFFFFELL;
      v16 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
    }
    while (v9);
    v20 = v23;
    v21 = (uint64_t *)v25;
  }
  else
  {
    v16 = 0;
    v20 = 0;
    v21 = v27;
  }
  v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v16);
LABEL_21:
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22F2F65E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_22F2FAD70(a1, *(_QWORD *)(a2 + 8));
  if (v3 < 0x10)
    return 1;
  v5 = v3;
  v6 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
  return sub_22E5018F0(v6, v5);
}

uint64_t sub_22F2F6638(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v10 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  v6 = v5 > 3 || v5 == 2;
  if (!v6 && (*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
  {
    sub_22EB48CC8(*a1, 1, 0, 3);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v11 = v13;
  v12 = 0x400000000;
  if ((sub_22E8C47DC(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v11, &v10) & 1) != 0)v8 = 1;
  else
    v8 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v11, v12, *(_DWORD *)(v3 + 44));
  if (v11 != v13)
    free(v11);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v8;
}

uint64_t sub_22F2F6780(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22E8C1D88((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v11 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
    if ((v11 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v11 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22F2F688C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  unint64_t v8;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v6 & 1) != 0)
    return 1;
  v7 = *(_DWORD *)(a2 + 32);
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, (uint64_t *)&v8, 1, v7);
}

uint64_t sub_22F2F690C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v12 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v12)
    {
      v13 = (void **)(a2 + 24);
      v14 = 8 * v12;
      do
      {
        v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v13);
        v16 = *(_QWORD *)(a1 + 40);
        if (v16 == *(_QWORD *)(a1 + 32))
          v17 = 52;
        else
          v17 = 48;
        if (v15 != (void **)(v16 + 8 * *(unsigned int *)(a1 + v17)))
        {
          *v15 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  return v9;
}

uint64_t sub_22F2F69FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22F2F34EC(a1, v3);
}

uint64_t sub_22F2F6A10(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22EB2AC58(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F2F6A94(uint64_t **a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[32];
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22F2F34EC(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22F2F7B28(a1, *(uint64_t **)(a2 + 16));
  if (!v5)
    return 1;
  v6 = v5;
  v14 = 0;
  v18 = v20;
  v19 = 0x400000000;
  v7 = 1;
  if ((sub_22E8C47DC((uint64_t *)a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)&v18, &v14) & 1) == 0)
  {
    v15 = v17;
    v16 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v11 = 0;
      v9 = 0;
      v12 = 8 * v8;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v11) + 8);
        if (v9 >= HIDWORD(v16))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v16;
        }
        *((_QWORD *)v15 + v9) = v13;
        v9 = v16 + 1;
        LODWORD(v16) = v16 + 1;
        v11 += 8;
      }
      while (v12 != v11);
      v10 = (uint64_t *)v15;
    }
    else
    {
      v9 = 0;
      v10 = (uint64_t *)v17;
    }
    v7 = sub_22F301D2C(a1, v6, v10, v9, (unsigned __int8 **)v18, v19, *(_QWORD *)(a2 + 24));
    if (v15 != v17)
      free(v15);
  }
  if (v18 != v20)
    free(v18);
  return v7;
}

uint64_t sub_22F2F6C88(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = sub_22F2F34EC(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = sub_22F2F34EC(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 40);
  if (!v9)
  {
    v10 = 0;
LABEL_8:
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
    return sub_22EB29E14(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v11, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 56));
  }
  v10 = sub_22F2F34EC(a1, v9);
  if ((v10 & 1) == 0)
    goto LABEL_8;
  return 1;
}

uint64_t sub_22F2F6D68(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v4)
    return sub_22EC2A5E0(*a1, *(_DWORD *)(a2 + 24), v4, *(_DWORD *)(a2 + 28));
  else
    return 1;
}

uint64_t sub_22F2F6DB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F301E88(a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), *(unsigned __int8 *)(a2 + 32));
}

unint64_t sub_22F2F6DFC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F301F4C(a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 40) & 1, (*(unsigned __int8 *)(a2 + 40) >> 1) & 1);
}

uint64_t sub_22F2F6E54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = 0x800000000;
  v6 = 0;
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v7, &v6) & 1) != 0)
    v4 = 1;
  else
    v4 = sub_22EC28BF4((_QWORD *)*a1, *(_QWORD *)(a2 + 20), (uint64_t *)v7, v8);
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_22F2F6F1C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EC27DFC(*a1, *(_QWORD *)(a2 + 32), (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22F2F6F64(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  int v35;
  _QWORD *v36;
  _QWORD v37[2];
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  int v46;
  char v47;
  char v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[34];

  v51[32] = *MEMORY[0x24BDAC8D0];
  v4 = v51;
  v49 = v51;
  v50 = 0x800000000;
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(a2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_7;
      v14 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v15 = *(_DWORD *)(v14 + 40);
      LODWORD(v14) = *(_DWORD *)(v14 + 44);
      v16 = v8 & 0xFFFFFF0000000000 | (v14 - 1) | 0x100000000;
      if ((_DWORD)v14)
        v12 = v16;
      if (v15)
      {
        v36 = v4;
        v44 = &v46;
        v45 = 0x200000000;
        v22 = *a1;
        v42 = 7;
        v43 = v11;
        sub_22EE7377C(v22, (uint64_t)&v42, (uint64_t)&v44);
        v23 = *a1;
        v40 = 7;
        v41 = v10;
        sub_22EE7377C(v23, (uint64_t)&v40, (uint64_t)&v44);
        v24 = *a1;
        v35 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v25 = sub_22F2F34EC(a1, v11);
        if ((v25 & 1) != 0 || (v31 = sub_22F2F34EC(a1, v10), (v31 & 1) != 0))
        {
          v26 = 0;
        }
        else
        {
          v37[0] = v25 & 0xFFFFFFFFFFFFFFFELL;
          v37[1] = v31 & 0xFFFFFFFFFFFFFFFELL;
          v38 = v15;
          v39 = v12;
          v26 = 1;
          v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v49, (unint64_t)v37, 1);
          v33 = (char *)v49 + 32 * v50;
          v34 = v32[1];
          *v33 = *v32;
          v33[1] = v34;
          LODWORD(v50) = v50 + 1;
        }
        *(_DWORD *)(v24 + 11992) = v35;
        if (v44 != &v46)
          free(v44);
        v4 = v36;
        if (!v26)
        {
LABEL_17:
          v27 = 1;
          goto LABEL_20;
        }
      }
      else
      {
LABEL_7:
        v17 = sub_22F2F34EC(a1, *(v7 - 1));
        if ((v17 & 1) != 0)
          goto LABEL_17;
        v18 = sub_22F2F34EC(a1, v10);
        if ((v18 & 1) != 0)
          goto LABEL_17;
        v44 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        v45 = v18 & 0xFFFFFFFFFFFFFFFELL;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v19 = (_OWORD *)sub_22E78DF7C((uint64_t)&v49, (unint64_t)&v44, 1);
        v20 = (char *)v49 + 32 * v50;
        v21 = v19[1];
        *v20 = *v19;
        v20[1] = v21;
        LODWORD(v50) = v50 + 1;
      }
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
      {
        v29 = v49;
        v30 = v50;
        goto LABEL_19;
      }
    }
  }
  v30 = 0;
  v29 = v51;
LABEL_19:
  v27 = sub_22EC297B0((_QWORD *)*a1, *(_QWORD *)(a2 + 20), (uint64_t)v29, v30);
LABEL_20:
  if (v49 != v4)
    free(v49);
  return v27;
}

uint64_t sub_22F2F7204(uint64_t *a1, uint64_t a2)
{
  return sub_22EBCC6C0(*a1, a2);
}

uint64_t sub_22F2F720C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) != 0)
    return v2;
  v6 = sub_22F2F34EC(a1, v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 1) != 0)
    return 1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v7 & 4) != 0)
  {
    v9 = (*a1)[11];
    v10 = *(_QWORD *)(v9 + 16872);
    v11 = v7 & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_DWORD *)(v2 + 32);
    v2 = sub_22E3CD3D4(v9 + 2032, 48, 3);
    sub_22F2F4590(v2, v11, v12, v10, 1, 3, v13, v8);
    return v2;
  }
  return sub_22F3020A0(a1, v8, v7 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v2 + 32));
}

uint64_t sub_22F2F72E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22F3341E8(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
}

uint64_t sub_22F2F7354(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22F2F34EC(a1, a2[2]);
}

unint64_t sub_22F2F73B8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EB27A20(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2F7400(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = v9;
  v8 = 0x400000000;
  v4 = 1;
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v7, &v6) & 1) == 0)
    v4 = sub_22EB367BC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (uint64_t *)v7, v8);
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_22F2F74C4(uint64_t *a1, _DWORD *a2)
{
  if ((*a2 & 0x8000) != 0)
    return sub_22EB254F4(*a1, a2[1], (*a2 >> 18) & 0xF);
  else
    return (uint64_t)a2;
}

uint64_t sub_22F2F74E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)(a2 + 32);
    v6 = 8 * v4;
    v7 = 1;
    while (1)
    {
      v8 = sub_22F2F34EC(a1, *v5);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
    }
  }
  else
  {
    v10 = 0;
    return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
  }
  return v7;
}

uint64_t sub_22F2F7614(uint64_t *a1, uint64_t a2)
{
  int *v2;
  unint64_t *v5;

  v2 = (int *)a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) == 0)
    return (uint64_t)v2;
  v5 = sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 32));
  if (!v5)
    return 1;
  return sub_22F32D80C(*a1, v2[4], v2[5], v2[6], (uint64_t)v5);
}

uint64_t sub_22F2F7670(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8 = v10;
  v9 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 32);
  }
  if ((sub_22E8C47DC(a1, *(unsigned __int8 ***)(a2 + 24), v4, 0, (uint64_t)&v8, &v7) & 1) != 0)
    v5 = 1;
  else
    v5 = sub_22F3022B8(a1, *(_DWORD *)(a2 + 16), (uint64_t)v8, v9, *(_DWORD *)(a2 + 20));
  if (v8 != v10)
    free(v8);
  return v5;
}

unsigned int *sub_22F2F7758(uint64_t *a1, uint64_t a2)
{
  return sub_22F32FAE8(*a1, (*(_DWORD *)a2 >> 18) & 7, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(*a1 + 216));
}

uint64_t sub_22F2F7778(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F32F6E0(*a1);
  v4 = sub_22E8C629C(a1, *(unsigned int **)(a2 + 16), 1);
  if ((v4 & 1) == 0)
    return sub_22EB497A8(*a1, *(_DWORD *)(a2 + 24), (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
  sub_22F32F704(*a1);
  return 1;
}

uint64_t sub_22F2F77DC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v12 = sub_22F2F34EC(a1, v6);
    if ((v12 & 1) == 0)
    {
      v7 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_4;
    }
    return 1;
  }
  v7 = 0;
LABEL_4:
  v8 = *(_DWORD *)(a2 + 32);
  if (!v8)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v8 = v9;
  }
  LODWORD(v10) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v10)
  {
    v10 = *(_QWORD *)(a2 + 24);
    if (v10)
      sub_22F0D60E4(v10);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v7, v8, v10);
}

uint64_t sub_22F2F78A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v11 = sub_22F2F34EC(a1, v5);
    if ((v11 & 1) == 0)
    {
      v6 = v11 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_4;
    }
    return 1;
  }
  v6 = 0;
LABEL_4:
  v7 = *(_DWORD *)(a2 + 36);
  if (!v7)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v7 = v8;
  }
  v9 = *(_DWORD *)(a2 + 40);
  if (!v9)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v6, *(_BYTE *)(a2 + 32), v7, v9);
}

uint64_t sub_22F2F7954(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t *v20;

  if ((*(_BYTE *)(a2 + 2) & 0x40) == 0)
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v20 = 0;
    v5 = *(unsigned __int8 **)(a2 + 16);
    if (*v5 == 214 && (v6 = (unsigned int *)*((_QWORD *)v5 + 3), *(unsigned __int8 *)v6 == 163))
    {
      v7 = sub_22F30245C(a1, (uint64_t)v5, v6, 0, &v20);
      v8 = v20;
      if (v20)
      {
        v9 = *(_DWORD *)(a2 + 24);
        v10 = (*(_DWORD *)a2 >> 18) & 0xF;
        sub_22F0D4E74(a2);
        v12 = sub_22EB28664(*a1, v8, v9, v10, v11);
LABEL_14:
        sub_22EB48E64(v4);
        return v12;
      }
    }
    else
    {
      v7 = sub_22F2F34EC(a1, v5);
    }
    if ((v7 & 1) != 0)
    {
      v12 = 1;
    }
    else
    {
      v19 = sub_22EB28F24((_QWORD *)*a1, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), (*(_DWORD *)a2 >> 18) & 0xF);
      if ((v19 & 1) != 0)
        v12 = 1;
      else
        v12 = v19;
    }
    goto LABEL_14;
  }
  v13 = sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v13)
  {
    v14 = v13;
    v15 = *(_DWORD *)(a2 + 24);
    v16 = (*(_DWORD *)a2 >> 18) & 0xF;
    sub_22F0D4E74(a2);
    return sub_22EB28664(*a1, v14, v15, v16, v17);
  }
  return 1;
}

uint64_t sub_22F2F7AB8(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = sub_22F2F7B28(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v6 = (uint64_t *)v4;
  v7 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22EB4B7A8(*a1, *(_DWORD *)(a2 + 32), v7 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 36));
}

unint64_t *sub_22F2F7B28(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  int64x2_t v12;
  _QWORD v13[6];

  v2 = (unint64_t *)a2;
  v13[5] = *MEMORY[0x24BDAC8D0];
  v4 = (unint64_t)(a2 + 1);
  v11 = (_QWORD *)*a2;
  v12.i64[0] = (uint64_t)(a2 + 1);
  sub_22F116708((uint64_t *)&v11);
  v5 = *v2;
  if (*v2 >= 0x10)
  {
    v11 = v13;
    v12 = vdupq_n_s64(0x20uLL);
    v13[4] = 0;
    v7 = sub_22F11598C(v5);
    if (v12.i64[0] < (unint64_t)v7)
      sub_22EEB52C0((uint64_t *)&v11, v7);
    v8 = sub_22F2F7C74(a1, (uint64_t)&v11, v5, v4);
    if (v8 > 0xF)
    {
      v10 = v12.i64[0] - v12.i64[1];
      v2 = sub_22EF5DB78((*a1)[11], v8, v12.i32[0] - v12.i32[2]);
      v9 = v11;
      memcpy(v2 + 1, (char *)v11 + v12.i64[1], v10);
    }
    else
    {
      v2 = 0;
      v9 = v11;
    }
    if (v9 != v13 && v9)
      MEMORY[0x2348A0E84](v9, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22F2F7C74(_QWORD **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t i;
  unsigned int v8;

  for (i = a3; (i & 0xF) == 0; a4 = (a4 + v8 - 1) / v8 * v8)
  {
    if (*(_BYTE *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16))
      __asm { BR              X10 }
    i = *(_QWORD *)(i + 32);
    v8 = sub_22F115954(i);
  }
  return sub_22F2F83A0(a1, a2, i);
}

unint64_t sub_22F2F7DF8()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2FA170(v3, v2, v1, v0);
}

unint64_t sub_22F2F7E18()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA8BC(v3, v2, v1, v0);
}

unint64_t sub_22F2F7E38()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FABF4(v3, v2, v1, v0);
}

unint64_t sub_22F2F7E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2F8D24(v3, v2, v1, v0);
}

unint64_t sub_22F2F7E78()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9370(v3, v2, v1, v0);
}

unint64_t sub_22F2F7E98()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9484(v3, v2, v1, v0);
}

unint64_t sub_22F2F7EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9598(v3, v2, v1, v0);
}

unint64_t sub_22F2F7ED8()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FA300(v3, v2, v1, v0);
}

unint64_t sub_22F2F7EF8()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA758(v3, v2, v1, v0);
}

unint64_t sub_22F2F7F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F8438(v3, v2, v1, v0);
}

unint64_t sub_22F2F7F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F84D0(v3, v2, v1, v0);
}

unint64_t sub_22F2F7F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F860C(v3, v2, v1, v0);
}

unint64_t sub_22F2F7F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F8744(v3, v2, v1, v0);
}

unint64_t sub_22F2F7F98()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F8A2C(v3, v2, v1, v0);
}

uint64_t sub_22F2F7FB8()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2F8B4C(v3, v2, v1, v0);
}

unint64_t sub_22F2F7FD8()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2F9060(v3, v2, v1, v0);
}

unint64_t sub_22F2F7FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9158(v3, v2, v1, v0);
}

uint64_t sub_22F2F8018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2FC098(v3, v2, v1, v0, 0);
}

unint64_t sub_22F2F803C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F998C(v3, v2, v1, v0);
}

unint64_t sub_22F2F805C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9A40(v3, v2, v1, v0);
}

unint64_t sub_22F2F807C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9CF4(v3, v2, v1, v0);
}

unint64_t sub_22F2F809C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FA21C(v3, v2, v1, v0);
}

unint64_t sub_22F2F80BC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA3FC(v3, v2, v1, v0);
}

unint64_t sub_22F2F80DC()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2FA554(v3, v2, v1, v0);
}

unint64_t sub_22F2F80FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2FAA54(v3, v2, v1, v0);
}

unint64_t sub_22F2F811C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FACB0(v3, v2, v1, v0);
}

unint64_t sub_22F2F813C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F881C(v3, v2, v1, v0);
}

unint64_t sub_22F2F815C()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F8974(v3, v2, v1, v0);
}

unint64_t sub_22F2F817C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F8A9C(v3, v2, v1, v0);
}

unint64_t sub_22F2F819C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F8C58(v3, v2, v1, v0);
}

uint64_t sub_22F2F81BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F9E20(v3, v2, v1, v0);
}

unint64_t sub_22F2F81DC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F9F7C(v3, v2, v1, v0);
}

unint64_t sub_22F2F81FC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA488(v3, v2, v1, v0);
}

unint64_t sub_22F2F821C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FA6C4(v3, v2, v1, v0);
}

unint64_t sub_22F2F823C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F9298(v3, v2, v1, v0);
}

unint64_t sub_22F2F825C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F966C(v3, v2, v1, v0);
}

unint64_t sub_22F2F827C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2F976C(v3, v2, v1, v0);
}

unint64_t sub_22F2F829C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2F9AE0(v3, v2, v1, v0);
}

unint64_t sub_22F2F82BC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2F9BA4(v3, v2, v1, v0);
}

uint64_t sub_22F2F82DC()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA024(v3, v2, v1, v0);
}

uint64_t sub_22F2F82FC()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA970(v3, v2, v1, v0);
}

unint64_t sub_22F2F831C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2F9C5C(v3, v2, v1, v0);
}

unint64_t sub_22F2F833C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_22F2FA488(v3, v2, v1, v0);
}

unint64_t sub_22F2F835C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  return sub_22F2FA5F8(v3, v2, v1, v0);
}

unint64_t sub_22F2F837C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  return sub_22F2FA81C(v3, v2, v1, v0);
}

unint64_t sub_22F2F83A0(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t result;

  sub_22F115954(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22F2F7C74(a1, a2);
  if (v6 < 0x10)
    return 0;
  result = sub_22E8C1750(a1, v6, a3);
  if (result < 0x10)
    return 0;
  return result;
}

unint64_t sub_22F2F8438(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  v7 = *(_QWORD *)(a3 + 32);
  v8 = sub_22F115954(v7);
  v9 = sub_22F2F7C74(a1, a2, v7, (a4 + (unint64_t)v8 - 1) / v8 * v8);
  if (v9 < 0x10)
    return 0;
  v10 = sub_22F36A2BC((*a1)[11], v9);
  sub_22EEB5360(a2, v10, 0, 1);
  return v10;
}

unint64_t sub_22F2F84D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 + 15) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = *(int **)(a4 + 8);
  if (v14)
    goto LABEL_10;
  v15 = *(_DWORD *)(a3 + 16);
  if ((v15 & 0x2000000) == 0)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v14 = *(int **)(a3 + 56);
  if (v14)
  {
LABEL_10:
    v18 = (_QWORD *)*a1;
    sub_22EB48CC8(*a1, 4, 0, 3);
    sub_22F2F34EC(a1, v14, v19);
    v14 = (int *)(sub_22EB51A84(*a1, v20 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
    sub_22EB48E64((uint64_t)v18);
    v15 = *(_DWORD *)(a3 + 16);
  }
LABEL_7:
  v16 = sub_22E8C1C2C((uint64_t)a1, v13, (v15 >> 22) & 7, a3 + 40, (unint64_t)v14, (v15 >> 19) & 7, *(_QWORD *)a4);
  if (v16 >= 0x10)
  {
    v11 = v16;
    sub_22EEB5360(a2, v16, 0x10uLL, 8);
    *(_DWORD *)v17 = *(_DWORD *)a4;
    *(_DWORD *)(v17 + 4) = *(_DWORD *)(a4 + 4);
    *(_QWORD *)(v17 + 8) = v14;
    return v11;
  }
  return 0;
}

unint64_t sub_22F2F860C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 + 15) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = (_QWORD *)*a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  v16 = *(int **)(a4 + 8);
  if (!v16)
    v16 = *(int **)(a3 + 48);
  sub_22F2F34EC(a1, v16, v15);
  v18 = sub_22EB51A84(*a1, v17);
  if ((v18 & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v20 = sub_22EE7E810((_QWORD *)*a1, v13, (*(_DWORD *)(a3 + 16) >> 22) & 7, v18 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)(a3 + 16) >> 19) & 7, *(_QWORD *)a4, 0);
    v11 = 0;
    if (v20 >= 0x10)
    {
      v21 = v20;
      sub_22EEB5360(a2, v20, 0x10uLL, 8);
      *(_DWORD *)v22 = *(_DWORD *)a4;
      *(_DWORD *)(v22 + 4) = *(_DWORD *)(a4 + 4);
      *(_QWORD *)(v22 + 8) = v19;
      v11 = v21;
    }
  }
  sub_22EB48E64((uint64_t)v14);
  return v11;
}

unint64_t sub_22F2F8744(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, (a4 + (unint64_t)v9 + 15) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v12 = sub_22EE7E810(*a1, v10, (*(_DWORD *)(a3 + 16) >> 22) & 7, 0, (*(_DWORD *)(a3 + 16) >> 19) & 7, *(_QWORD *)a4, 0);
  result = 0;
  if (v12 >= 0x10)
  {
    sub_22EEB5360(a2, v12, 0x10uLL, 8);
    *(_DWORD *)v13 = *(_DWORD *)a4;
    *(_DWORD *)(v13 + 4) = *(_DWORD *)(a4 + 4);
    *(_QWORD *)(v13 + 8) = 0;
    return v12;
  }
  return result;
}

unint64_t sub_22F2F881C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 + 15) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v12 = v10;
  v13 = (_QWORD *)*a1;
  sub_22EB48CC8(*a1, 6, 0, 3);
  sub_22F2F34EC(a1, *(int **)(a3 + 40), v14);
  v16 = v15;
  sub_22EB48E64((uint64_t)v13);
  result = 0;
  if ((v16 & 1) == 0)
  {
    v17 = (_QWORD *)*a1;
    v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
    if (v18)
    {
      sub_22EFF605C(v18);
      v20 = v19;
    }
    else
    {
      v20 = 0;
    }
    v21 = sub_22EBCF22C((uint64_t)v17, v18, v20, 0, 0);
    if ((v21 & 1) != 0)
      return 0;
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    v23 = sub_22EE7E810((_QWORD *)*a1, v12, (*(_DWORD *)(a3 + 16) >> 22) & 7, v21 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)(a3 + 16) >> 19) & 7, *(_QWORD *)a4, 0);
    result = 0;
    if (v23 >= 0x10)
    {
      sub_22EEB5360(a2, v23, 0x10uLL, 8);
      *(_DWORD *)v24 = *(_DWORD *)a4;
      *(_DWORD *)(v24 + 4) = *(_DWORD *)(a4 + 4);
      *(_QWORD *)(v24 + 8) = v22;
      return v23;
    }
  }
  return result;
}

unint64_t sub_22F2F8974(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;

  v7 = *(_QWORD *)(a3 + 32);
  v8 = sub_22F115954(v7);
  v9 = sub_22F2F7C74(a1, a2, v7, ((unint64_t)a4 + v8 + 11) / v8 * v8);
  if (v9 < 0x10)
    return 0;
  v10 = sub_22EE7D9BC(*a1, v9, *a4);
  if (v10 < 0x10)
    return 0;
  v11 = v10;
  sub_22EEB5360(a2, v10, 0xCuLL, 4);
  *v13 = *a4;
  v13[1] = a4[1];
  v13[2] = a4[2];
  return v11;
}

unint64_t sub_22F2F8A2C(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v6;
  unint64_t v7;
  int *v8;

  v6 = sub_22F2FADC8(a1, *(_DWORD *)(a3 + 32) & 1, (*(_DWORD *)(a3 + 32) >> 1) & 0xFFFFFF, *a4);
  if (v6 < 0x10)
    return 0;
  v7 = v6;
  sub_22EEB5360(a2, v6, 4uLL, 4);
  *v8 = *a4;
  return v7;
}

unint64_t sub_22F2F8A9C(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  int *v12;

  v7 = *(_QWORD *)(a3 + 32);
  v8 = sub_22F115954(v7);
  v9 = sub_22F2F7C74(a1, a2, v7, ((unint64_t)a4 + v8 + 3) / v8 * v8);
  if (v9 < 0x10)
    return 0;
  v11 = sub_22F34B664(*a1, v9, *a4);
  result = 0;
  if (v11 >= 0x10)
  {
    sub_22EEB5360(a2, v11, 4uLL, 4);
    *v12 = *a4;
    return v11;
  }
  return result;
}

uint64_t sub_22F2F8B4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[0] = a3;
  v24[1] = 0;
  v7 = sub_22E8BADE8((uint64_t)v24);
  v8 = sub_22EEB5360(a2, a3, v7, 4);
  *v9 = *a4 | ((unint64_t)*a4 << 32);
  v10 = (*(_DWORD *)(a3 + 16) >> 19) & 0x1FF;
  v11 = v10 - 173;
  v12 = v10 - 181;
  if ((v10 - 173) < 5 || v12 < 0x25 || v10 == 179 || v10 == 168)
  {
    v14 = v12 < 0x25 || v10 == 179 || v10 == 168;
    v15 = 4;
    if (!v14)
      v15 = 1;
    if (v11 >= 5)
      v16 = v15;
    else
      v16 = 4;
    v17 = (v16 + 7) & -v16;
    v18 = (*(_DWORD *)(v8 + 16) >> 19) & 0x1FF;
    v19 = v18 - 173;
    v21 = (v18 - 181) < 0x25 || v18 == 168 || v18 == 179;
    v22 = 4;
    if (!v21)
      v22 = 1;
    if (v19 < 5)
      v22 = 4;
    *(_DWORD *)((char *)v9 + ((v22 + 7) & -v22)) = *(unsigned int *)((char *)a4 + v17);
  }
  return a3;
}

unint64_t sub_22F2F8C58(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v20;

  v8 = *a1;
  sub_22EB48CC8(*a1, 0, 0, 0);
  sub_22F2F34EC(a1, *(int **)(a3 + 24), v9);
  v10 = 0;
  if ((v11 & 1) == 0)
  {
    v12 = sub_22EBCCD68(*a1);
    if ((v12 & 1) != 0
      || (v18 = sub_22EE8C8BC(*a1, (unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL), 1, v13, v14, v15, v16, v17),
          v18 < 0x10))
    {
      v10 = 0;
    }
    else
    {
      v10 = v18;
      sub_22EEB5360(a2, v18, 8uLL, 4);
      *v20 = *a4;
      v20[1] = a4[1];
    }
  }
  sub_22EB48E64(v8);
  return v10;
}

unint64_t sub_22F2F8D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[96];
  void *v40;
  uint64_t v41;
  _BYTE v42[256];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v34 = a3;
  v35 = a4;
  v8 = *(_QWORD *)(a3 + 24);
  if (v8 >= 0x10)
  {
    v9 = sub_22F2FAD70(a1, v8);
    if (v9 < 0x10)
      return 0;
  }
  else
  {
    v9 = 0;
  }
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v10 = *(_QWORD *)(a3 + 40);
  if (!v10)
    goto LABEL_4;
  v36 = *(_QWORD *)(a3 + 40);
  v37 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v36, &v37)
    && v37 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v37 + 1);
  }
  v43 = *(_QWORD *)(a4 + 40);
  v23 = 0;
  if ((sub_22F2FAE84((uint64_t *)a1, &v34, 0, &v34, *(_DWORD *)(a3 + 20), (uint64_t)&v40, 0) & 1) != 0)
    goto LABEL_15;
  v30 = *(_QWORD *)(v35 + 8);
  if (v30)
  {
    v31 = sub_22E8C1D88((uint64_t *)a1, v30, *(void **)(v35 + 16), 0, 0);
    if (!v31)
      goto LABEL_14;
    v11 = v31;
    v12 = v32;
  }
  else
  {
LABEL_4:
    v11 = 0;
    v12 = 0;
  }
  v37 = v39;
  v38 = 0x400000000;
  v13 = v41;
  if (v41 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v41;
  }
  if (v13)
  {
    v33 = v12;
    v14 = v9;
    v15 = v11;
    v16 = a2;
    v17 = (char *)v40;
    v18 = 32 * v13;
    do
    {
      v19 = sub_22E4EF088((uint64_t)&v37, (unint64_t)v17, 1);
      v20 = (char *)v37 + 24 * v38;
      v21 = *(_OWORD *)v19;
      *((_QWORD *)v20 + 2) = *(_QWORD *)(v19 + 16);
      *(_OWORD *)v20 = v21;
      v22 = v38 + 1;
      LODWORD(v38) = v38 + 1;
      v17 += 32;
      v18 -= 32;
    }
    while (v18);
    a2 = v16;
    v11 = v15;
    v9 = v14;
    v12 = v33;
  }
  else
  {
    v22 = v38;
  }
  v23 = sub_22EF67944(*(_QWORD *)(*(_QWORD *)a1 + 88), v9, (*(_DWORD *)(a3 + 16) >> 19) & 3, 0, 0, v10, (uint64_t)v37, v22, 0);
  if (v23 >= 0x10)
  {
    if (v37 != v39)
      free(v37);
    v25 = sub_22EEB5360(a2, v23, (8 * *(_DWORD *)(v23 + 20) + 56), 8);
    *(_DWORD *)v26 = *(_DWORD *)v35;
    *(_QWORD *)(v26 + 8) = v11;
    *(_QWORD *)(v26 + 16) = v12;
    v27 = v35;
    *(_DWORD *)(v26 + 24) = *(_DWORD *)(v35 + 24);
    *(_DWORD *)(v26 + 28) = *(_DWORD *)(v27 + 28);
    *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
    *(_DWORD *)(v26 + 40) = *(_DWORD *)(v27 + 40);
    *(_DWORD *)(v26 + 44) = *(_DWORD *)(v27 + 44);
    *(_DWORD *)(v26 + 48) = *(_DWORD *)(v27 + 48);
    if (*(_DWORD *)(v25 + 20))
    {
      v28 = 0;
      v29 = 24;
      do
      {
        *(_QWORD *)(v26 + 56 + 8 * v28++) = *(_QWORD *)((char *)v40 + v29);
        v29 += 32;
      }
      while (v28 < *(unsigned int *)(v25 + 20));
    }
    goto LABEL_15;
  }
  if (v37 != v39)
    free(v37);
LABEL_14:
  v23 = 0;
LABEL_15:
  if (v40 != v42)
    free(v40);
  return v23;
}

unint64_t sub_22F2F9060(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  __int128 v16;
  void *v17[2];

  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  v8 = sub_22E8C2AA8(a1, (uint64_t)&v16, *(_QWORD *)(a3 + 40), *a4, 0, 0, 0);
  v9 = 0;
  if (v8 >= 8)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a3 + 24);
    if (v12 >= 0x10)
    {
      v13 = sub_22F2FAD70(a1, v12);
      if (v13 < 0x10)
        goto LABEL_8;
    }
    else
    {
      v13 = 0;
    }
    v14 = sub_22F36D4FC(*(_QWORD *)(*(_QWORD *)a1 + 88), v11, v13, 0);
    if (v14 >= 0x10)
    {
      v9 = v14;
      sub_22EEB5360(a2, v14, 4uLL, 4);
      *v15 = *a4;
      goto LABEL_2;
    }
LABEL_8:
    v9 = 0;
  }
LABEL_2:
  if (HIDWORD(v17[1]))
    free(v17[0]);
  return v9;
}

unint64_t sub_22F2F9158(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;

  v8 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(a3 + 48));
  if (v8 < 0x10)
    return 0;
  v11 = v8;
  v12 = *a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  sub_22F2F34EC(a1, *(int **)(a3 + 40), v13);
  v15 = sub_22EB51A84(*a1, v14);
  v9 = 0;
  if ((v15 & 1) == 0)
  {
    v16 = *(_DWORD *)(a3 + 56);
    v20 = v11;
    v17 = sub_22F34B9D4((_QWORD *)*a1, &v20, (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL), v16);
    if (v17 >= 0x10)
    {
      v9 = v17;
      if (*(_BYTE *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 16) == 16)
      {
        sub_22EEB5360(a2, v17, 0x18uLL, 8);
        *(_QWORD *)(v18 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)v18 = *(_QWORD *)a4;
        *(_DWORD *)(v18 + 16) = *(_DWORD *)(a4 + 16);
      }
      else
      {
        v19 = sub_22EF579A8(*(_QWORD *)(*a1 + 88), v17, 0);
        sub_22F2F7C74((_QWORD **)a1, a2, *v19, (unint64_t)(v19 + 1));
      }
    }
    else
    {
      v9 = 0;
    }
  }
  sub_22EB48E64(v12);
  return v9;
}

unint64_t sub_22F2F9298(uint64_t *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;

  v8 = *a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  sub_22F2F34EC(a1, (int *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFFCLL), v9);
  v11 = sub_22EB51A84(*a1, v10);
  v12 = 0;
  if ((v11 & 1) == 0)
  {
    v13 = sub_22F408B60(a3);
    v14 = sub_22F34B490((_QWORD *)*a1, v13, (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFFELL), *a4);
    if (v14 >= 0x10)
    {
      v12 = v14;
      sub_22EEB5360(a2, v14, 4uLL, 4);
      *v15 = *a4;
    }
    else
    {
      v12 = 0;
    }
  }
  sub_22EB48E64(v8);
  return v12;
}

unint64_t sub_22F2F9370(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;

  v8 = *(_QWORD *)(a3 + 48);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = (_QWORD *)*a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  sub_22F2F34EC(a1, *(int **)(a3 + 40), v15);
  v17 = sub_22EB51A84(*a1, v16);
  v11 = 0;
  if ((v17 & 1) == 0)
  {
    v18 = sub_22EE7F938((_QWORD *)*a1, v13, (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a3 + 56) != 0, *(_DWORD *)(a3 + 60));
    if (v18 >= 0x10)
    {
      v11 = v18;
      sub_22EEB5360(a2, v18, 4uLL, 4);
      *v19 = *a4;
    }
    else
    {
      v11 = 0;
    }
  }
  sub_22EB48E64((uint64_t)v14);
  return v11;
}

unint64_t sub_22F2F9484(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;

  v8 = *(_QWORD *)(a3 + 40);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = (_QWORD *)*a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  sub_22F2F34EC(a1, *(int **)(a3 + 48), v15);
  v17 = sub_22EB51A84(*a1, v16);
  v11 = 0;
  if ((v17 & 1) == 0)
  {
    v18 = sub_22EE7F62C((_QWORD *)*a1, v13, (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL), (*(_DWORD *)(a3 + 16) >> 19) & 0xF, *(_DWORD *)(a3 + 56));
    if (v18 >= 0x10)
    {
      v11 = v18;
      sub_22EEB5360(a2, v18, 4uLL, 4);
      *v19 = *a4;
    }
    else
    {
      v11 = 0;
    }
  }
  sub_22EB48E64((uint64_t)v14);
  return v11;
}

unint64_t sub_22F2F9598(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v14;
  int *v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 - 1) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v14 = v10;
  v15 = *(int **)(a3 + 56);
  if (!v15)
  {
    v16 = 0;
LABEL_6:
    v12 = sub_22EE8C328(*a1, v14, v16, *(_DWORD *)(a3 + 16) >> 31, 0, 0);
    sub_22EEB5360(a2, v12, 0, 1);
    return v12;
  }
  sub_22F2F34EC(a1, v15, v11);
  if ((v17 & 1) == 0)
  {
    v16 = (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_6;
  }
  return 0;
}

unint64_t sub_22F2F966C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 - 1) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v14 = v10;
  v15 = *(int **)(a3 + 56);
  if (v15)
  {
    sub_22F2F34EC(a1, v15, v11);
    if ((v19 & 1) != 0)
      return 0;
    v16 = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(int **)(a3 + 64);
  if (!v17)
  {
    v18 = 0;
LABEL_8:
    v12 = sub_22F369338(*(_QWORD *)(*a1 + 88), v14, v16, v18, (uint64_t *)(a3 + 72), (unint64_t)*(unsigned int *)(a3 + 20) >> 16, a3 + 72 + 8 * ((unint64_t)*(unsigned int *)(a3 + 20) >> 16), (unsigned __int16)*(_DWORD *)(a3 + 20));
    sub_22EEB5360(a2, v12, 0, 1);
    return v12;
  }
  sub_22F2F34EC(a1, v17, v11);
  if ((v20 & 1) == 0)
  {
    v18 = v20 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_8;
  }
  return 0;
}

unint64_t sub_22F2F976C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27[24];
  int v28;
  int v29;
  uint64_t v30[2];
  unsigned int v31[24];
  unint64_t v32;
  uint64_t v33;

  v8 = *(_QWORD *)(a3 + 32);
  if (v8)
  {
    v10 = sub_22E8C1D88(a1, v8, *(void **)(a4 + 8), 0, 0);
    result = 0;
    if (!v10)
      return result;
    v12 = v9;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = *(_QWORD *)(a3 + 40);
  v14 = sub_22F115954(v13);
  v15 = sub_22F2F7C74((_QWORD **)a1, a2, v13, (a4 + 15 + (unint64_t)v14) / v14 * v14);
  if (v15 < 0x10)
    return 0;
  v16 = v15;
  if ((*(_DWORD *)(a3 + 16) >> 19) - 5 >= 2)
  {
    v19 = sub_22F10D628(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
    if (v19)
    {
      v33 = *(_QWORD *)(v19 + 32);
      v20 = sub_22F0F08CC(&v33);
      if (v20)
      {
        if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x1E)
        {
          v32 = v20;
          v21 = (_QWORD *)*a1;
          v22 = *(_QWORD *)(a3 + 40);
          v23 = sub_22F115954(v22);
          v30[0] = v22;
          v30[1] = (a4 + 15 + (unint64_t)v23) / v23 * v23;
          v24 = sub_22F116708(v30);
          sub_22E8FCA40(v21, v24, 0x12A5u, 0, (uint64_t)v31);
          v25 = sub_22E890024((uint64_t)v31, (uint64_t *)&v32);
          v29 = 7;
          v26 = sub_22E8900C4(v25, &v29);
          v28 = nullsub_910((*(_DWORD *)(a3 + 16) >> 19));
          sub_22E8900C4(v26, &v28);
          sub_22E903BEC(v31);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v32 + 24), 0x64u, 0, (uint64_t)v27);
          sub_22E903BEC(v27);
        }
      }
    }
  }
  v17 = sub_22EF65684(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(a3 + 16) >> 19), v10, v16, 0);
  result = 0;
  if (v17 >= 0x10)
  {
    sub_22EEB5360(a2, v17, 0x10uLL, 8);
    *(_DWORD *)v18 = *(_DWORD *)a4;
    *(_QWORD *)(v18 + 8) = v12;
    return v17;
  }
  return result;
}

unint64_t sub_22F2F998C(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v15;
  _DWORD *v16;
  unsigned __int16 v17;

  v15 = a3;
  v16 = a4;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = sub_22E47EE80(&v15);
  v8 = sub_22F2F7C74(a1, a2, v6, v7);
  if (v8 < 0x10)
    return 0;
  v10 = v8;
  v11 = (*a1)[11];
  v17 = 0;
  v9 = sub_22F369930(v11, v10, &v17);
  sub_22E8BB094(a2, v9);
  v12 = v16;
  *v13 = *v16;
  v13[1] = v12[1];
  v13[2] = v12[2];
  v13[3] = v12[3];
  return v9;
}

unint64_t sub_22F2F9A40(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _QWORD v6[3];
  uint64_t *v7;
  _QWORD v8[2];
  void *v9[2];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v8[0] = a3;
  v8[1] = a4;
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v6[2] = v9;
  v7 = a1;
  v6[0] = &v7;
  v6[1] = v8;
  v4 = sub_22E8C2F98(a1, a2, a3, a4, 0, 0, (uint64_t)v6);
  if (v9[0] != v10)
    free(v9[0]);
  return v4;
}

unint64_t sub_22F2F9AE0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;

  v7 = sub_22F1104D0(a3);
  v12 = v7;
  v13 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v12, &v13)
    && v13 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v7 = *(_QWORD *)(v13 + 8);
  }
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  else
    v9 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 88), v7);
  sub_22EEB5360(a2, v9, 4uLL, 4);
  *v10 = *a4;
  return v9;
}

unint64_t sub_22F2F9BA4(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v8 = *(_QWORD *)(a3 + 24);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v11 = sub_22F369C08((*a1)[11], v10, *(_QWORD *)(a3 + 32));
  if (v11 < 0x10)
    return 0;
  v12 = v11;
  sub_22EEB5360(a2, v11, 4uLL, 4);
  *v14 = *a4;
  return v12;
}

unint64_t sub_22F2F9C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v8 = sub_22F2FAD70(a1, *(_QWORD *)(a3 + 32));
  if (v8 < 0x10)
    return 0;
  v9 = sub_22F36BBA8(*(_QWORD *)(*(_QWORD *)a1 + 88), v8, *(unsigned int *)(a3 + 40), *(unsigned int *)(a3 + 44));
  if (v9 < 0x10)
    return 0;
  v10 = v9;
  sub_22EEB5360(a2, v9, 0x20uLL, 8);
  *(_DWORD *)v12 = *(_DWORD *)a4;
  *(_QWORD *)(v12 + 4) = *(_QWORD *)(a4 + 4);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a4 + 16);
  return v10;
}

unint64_t sub_22F2F9CF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  int *v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v8 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(a3 + 32));
  if (v8 < 0x10)
    return 0;
  v11 = v8;
  v12 = *a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  v14 = *(int **)(a4 + 16);
  if (!v14)
    v14 = *(int **)(a3 + 48);
  v15 = *(int **)(a4 + 24);
  if (!v15)
    v15 = *(int **)(a3 + 56);
  sub_22F2F34EC(a1, v14, v13);
  v17 = sub_22EB51A84(*a1, v16);
  if ((v17 & 1) != 0
    || (sub_22F2F34EC(a1, v15, v18), v20 = sub_22EB51A84(*a1, v19), (v20 & 1) != 0)
    || (v21 = (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL),
        v22 = v20 & 0xFFFFFFFFFFFFFFFELL,
        v23 = sub_22EE7FCAC((_QWORD *)*a1, v11, v21, (unsigned __int8 *)(v20 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a3 + 64)), v23 < 0x10))
  {
    v9 = 0;
  }
  else
  {
    v9 = v23;
    sub_22EEB5360(a2, v23, 0x20uLL, 8);
    *(_DWORD *)v24 = *(_DWORD *)a4;
    *(_QWORD *)(v24 + 4) = *(_QWORD *)(a4 + 4);
    *(_QWORD *)(v24 + 16) = v21;
    *(_QWORD *)(v24 + 24) = v22;
  }
  sub_22EB48E64(v12);
  return v9;
}

uint64_t sub_22F2F9E20(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, (a4 + (unint64_t)v9 + 15) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = *(uint64_t **)(a4 + 8);
  if (v14)
  {
    v18 = sub_22F2F7B28(a1, v14);
    if (!v18)
      return 0;
    v17 = v18;
    v16 = *v18;
  }
  else
  {
    v15 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF0);
    v11 = 0;
    if (v15 < 0x10)
      return v11;
    v16 = v15;
    v17 = 0;
  }
  v19 = sub_22EE80BC8(*a1, v13, v16, *(_DWORD *)a4, 0);
  v11 = 0;
  if (v19 >= 0x10)
  {
    v11 = v19;
    v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_BYTE *)(v20 + 16) == 31;
    else
      v21 = 0;
    if (v21
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
      && (v20 = sub_22F10CF48(v20)) != 0)
    {
      v22 = *(_QWORD *)(v20 + 32);
      if (v13 != v22)
        sub_22EEB5360(a2, v22, 0, 1);
    }
    sub_22EEB5360(a2, v11, 0x10uLL, 8);
    *(_DWORD *)v23 = *(_DWORD *)a4;
    *(_QWORD *)(v23 + 8) = v17;
  }
  return v11;
}

unint64_t sub_22F2F9F7C(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;

  v7 = *(_QWORD *)(a3 + 32);
  v8 = sub_22F115954(v7);
  v9 = sub_22F2F7C74(a1, a2, v7, ((unint64_t)a4 + v8 + 3) / v8 * v8);
  if (v9 < 0x10)
    return 0;
  v10 = sub_22F36CC4C((*a1)[11], v9);
  if (v10 < 0x10)
    return 0;
  v11 = v10;
  sub_22EEB5360(a2, v10, 4uLL, 4);
  *v13 = *a4;
  return v11;
}

uint64_t sub_22F2FA024(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unint64_t v12;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 40);
  v19 = v8;
  v20 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v19, &v20)
    && v20 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v8 = *(_QWORD *)(v20 + 8);
  }
  if (v8)
  {
    if ((*(_BYTE *)(a3 + 32) & 0x3F) != 0)
    {
      v9 = a4[1];
      v10 = a4[2];
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = (int *)(a4 + 3);
    v12 = sub_22F34B1F4(*(_QWORD **)a1, v8, v9, (uint64_t *)(a3 + 48), *(_BYTE *)(a3 + 32) & 0x3F, (uint64_t)(a4 + 3), *(_BYTE *)(a3 + 32) & 0x3F, v10, 1);
    if (v12 >= 0x10)
    {
      v8 = v12;
      if ((*(_BYTE *)(v12 + 32) & 0x3F) != 0)
        v14 = 4 * (*(_BYTE *)(v12 + 32) & 0x3F) + 12;
      else
        v14 = 4;
      sub_22EEB5360(a2, v12, v14, 4);
      if ((*(_BYTE *)(a3 + 32) & 0x3F) != 0)
      {
        v15[1] = a4[1];
        v16 = *(_BYTE *)(a3 + 32) & 0x3F;
        if ((*(_BYTE *)(a3 + 32) & 0x3F) != 0)
        {
          v17 = v15 + 3;
          do
          {
            v18 = *v11++;
            *v17++ = v18;
            --v16;
          }
          while (v16);
          if ((*(_BYTE *)(a3 + 32) & 0x3F) != 0)
            LODWORD(v16) = a4[2];
          else
            LODWORD(v16) = 0;
        }
        v15[2] = v16;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

unint64_t sub_22F2FA170(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;

  v7 = *(_QWORD *)(a3 + 32);
  v8 = sub_22F115954(v7);
  v9 = sub_22F2F7C74((_QWORD **)a1, a2, v7, ((unint64_t)a4 + v8 + 7) / v8 * v8);
  if (v9 < 0x10)
    return 0;
  v10 = sub_22EE7DB70(*a1, v9);
  if (v10 < 0x10)
    return 0;
  v11 = v10;
  sub_22EEB5360(a2, v10, 8uLL, 4);
  *v13 = *a4;
  v13[1] = a4[1];
  return v11;
}

unint64_t sub_22F2FA21C(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  _DWORD *v18;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  v14 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 38)
    v14 = sub_22F10CF48(v14);
  v15 = *(unsigned __int8 *)(v14 + 40);
  v16 = *a1;
  v17 = v15 ? sub_22F34B478((uint64_t)v16, v13) : sub_22F34B484((uint64_t)v16, v13);
  v11 = v17;
  if (v17 < 0x10)
    return 0;
  sub_22EEB5360(a2, v17, 4uLL, 4);
  *v18 = *a4;
  return v11;
}

unint64_t sub_22F2FA300(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v13 = v10;
  if (sub_22E4EBB74(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0)))
  {
    v11 = sub_22F36CC4C((*a1)[11], v13);
  }
  else
  {
    v15 = sub_22EE7DDA0(*a1, v13, *(_DWORD *)(a3 + 40), *a4, 0);
    v11 = 0;
    if (v15 < 0x10)
      return v11;
    v16 = v15;
    sub_22F10ACF8(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
    v11 = v16;
  }
  sub_22EEB5360(a2, v11, 4uLL, 4);
  *v14 = *a4;
  return v11;
}

unint64_t sub_22F2FA3FC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v8 = sub_22F2FAD70(a1, *(_QWORD *)(a3 + 8));
  if (v8 < 0x10)
    return 0;
  v9 = sub_22EF64A1C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a3 + 32), *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7);
  sub_22EEB5360(a2, v9, 4uLL, 4);
  *v10 = *a4;
  return v9;
}

unint64_t sub_22F2FA488(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;

  v7 = sub_22F114198(*(_QWORD *)(a3 + 24));
  v12 = v7;
  v13 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v12, &v13)
    && v13 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v7 = *(_QWORD *)(v13 + 8);
  }
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v7 + 48);
  v9 = v8 ? v8 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 88), v7);
  if (v9 < 0x10)
    return 0;
  sub_22EEB5360(a2, v9, 4uLL, 4);
  *v11 = *a4;
  return v9;
}

unint64_t sub_22F2FA554(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  void *v12[2];

  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  v8 = sub_22E8C2AA8((uint64_t)a1, (uint64_t)&v11, *(_QWORD *)(a3 + 32), *a4, 0, 0, 0);
  v9 = 0;
  if (v8 >= 8)
    v9 = sub_22F2FB6DC(a1, a2, a3, (uint64_t)a4, v8);
  if (HIDWORD(v12[1]))
    free(v12[0]);
  return v9;
}

unint64_t sub_22F2FA5F8(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  __n128 v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v15;

  v8 = *a1;
  sub_22EB4DECC(*a1, 0, 0, 3);
  sub_22F2F34EC(a1, *(int **)(a3 + 24), v9);
  if ((v10 & 1) != 0
    || (v11 = sub_22EB4E43C(*a1), (v11 & 1) != 0)
    || (v12 = sub_22EE8C264(*a1, v11 & 0xFFFFFFFFFFFFFFFELL), v12 < 0x10))
  {
    v13 = 0;
  }
  else
  {
    v13 = v12;
    sub_22EEB5360(a2, v12, 0xCuLL, 4);
    *v15 = *a4;
    v15[1] = a4[1];
    v15[2] = a4[2];
  }
  sub_22EB48E64(v8);
  return v13;
}

unint64_t sub_22F2FA6C4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v7 = (uint64_t *)sub_22F2F7B28(a1, *(uint64_t **)(a4 + 16));
  if (!v7)
    return 0;
  v8 = v7;
  v9 = sub_22F36D25C((*a1)[11], *v7);
  if (v9 < 0x10)
    return 0;
  v10 = v9;
  sub_22EEB5360(a2, v9, 0x18uLL, 8);
  *(_DWORD *)v12 = *(_DWORD *)a4;
  *(_DWORD *)(v12 + 4) = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(v12 + 16) = v8;
  return v10;
}

unint64_t sub_22F2FA758(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;

  v7 = *(_QWORD *)(a3 + 24);
  v11 = v7;
  v12 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v11, &v12)
    && v12 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v7 = *(_QWORD *)(v12 + 8);
  }
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 48);
    if (v8)
      v7 = v8 & 0xFFFFFFFFFFFFFFF0;
    else
      v7 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)a1 + 88), v7);
    if (v7 >= 0x10)
    {
      sub_22EEB5360(a2, v7, 4uLL, 4);
      *v9 = *a4;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

unint64_t sub_22F2FA81C(_QWORD **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t *v10;

  v5 = a3;
  if ((*(_BYTE *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    v10 = (uint64_t *)sub_22F2F7B28(a1, *(uint64_t **)(a4 + 16));
    v5 = sub_22F34BC1C(*a1, *v10, *(unsigned int *)(v5 + 40), *(_DWORD *)a4);
    if (v5 < 0x10)
      return 0;
  }
  sub_22EEB5360(a2, v5, 0x18uLL, 8);
  *(_DWORD *)v7 = *(_DWORD *)a4;
  *(_QWORD *)(v7 + 4) = *(_QWORD *)(a4 + 4);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a4 + 16);
  return v5;
}

unint64_t sub_22F2FA8BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 + 24);
  v12 = v7;
  v13 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v12, &v13)
    && v13 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v7 = *(_QWORD *)(v13 + 8);
  }
  if (!v7)
    return 0;
  v8 = sub_22E8C4608((_QWORD **)a1, *a4, v7);
  if (v8 < 0x10)
    return 0;
  v9 = v8;
  sub_22EEB5360(a2, v8, 4uLL, 4);
  *v11 = *a4;
  return v9;
}

uint64_t sub_22F2FA970(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 32);
  v14 = v8;
  v15 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v14, &v15)
    && v15 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v8 = *(_QWORD *)(v15 + 8);
  }
  if (v8)
  {
    v10 = sub_22F40A754(a3);
    v11 = sub_22F2FAD70(a1, v10);
    if (v11 < 0x10)
      return 0;
    v12 = sub_22F36C604(*(_QWORD *)(*(_QWORD *)a1 + 88), v8, v11);
    if (v12 < 0x10)
    {
      return 0;
    }
    else
    {
      v8 = v12;
      sub_22EEB5360(a2, v12, 4uLL, 4);
      *v13 = *a4;
    }
  }
  return v8;
}

unint64_t sub_22F2FAA54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  __n128 v20;
  int *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74((_QWORD **)a1, a2, v8, (a4 + (unint64_t)v9 - 1) / v9 * v9);
  if (v10 >= 0x10)
  {
    v13 = v10;
    v14 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v17 = v16 > 0x27;
    v18 = (1 << v16) & 0x8000000014;
    v19 = v17 || v18 == 0;
    if (!v19 && !sub_22F409964(v15))
    {
      v21 = *(int **)(a3 + 40);
      if (!v21)
      {
        v22 = 0;
LABEL_11:
        v11 = sub_22F3694D0(*(_QWORD *)(*a1 + 88), v13, v22);
        sub_22EEB5360(a2, v11, 0, 1);
        return v11;
      }
      sub_22F2F34EC(a1, v21, v20);
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if ((v23 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v25 = *v14;
        if ((!*v14 || *(_BYTE *)(v25 + 16) != 39)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
           || (v25 = sub_22F10CF48(v25)) == 0))
        {
          v25 = sub_22EF5C728(*(_QWORD *)(*a1 + 88), v13);
        }
        v26 = *(_QWORD *)(v25 + 32);
        v28 = v24;
        v27 = sub_22EB3547C(*a1, &v28, v26);
        v22 = (unsigned __int8 *)(sub_22E90092C(*a1, v24, v26, v27, 0, 0) & 0xFFFFFFFFFFFFFFFELL);
        if (v22)
          goto LABEL_11;
      }
    }
  }
  return 0;
}

unint64_t sub_22F2FABF4(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v11 = sub_22F36B7E4((*a1)[11], v10, *(unsigned int *)(a3 + 20), (*(_DWORD *)(a3 + 16) >> 19) & 0xF);
  if (v11 < 0x10)
    return 0;
  v12 = v11;
  sub_22EEB5360(a2, v11, 4uLL, 4);
  *v14 = *a4;
  return v12;
}

unint64_t sub_22F2FACB0(_QWORD **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  _DWORD *v13;

  v8 = *(_QWORD *)(a3 + 32);
  v9 = sub_22F115954(v8);
  v10 = sub_22F2F7C74(a1, a2, v8, ((unint64_t)a4 + v9 + 3) / v9 * v9);
  if (v10 < 0x10)
    return 0;
  v12 = sub_22F2FC708(a1, v10, *(_DWORD *)(a3 + 20), (*(_DWORD *)(a3 + 16) >> 19) & 0xF, 0);
  result = 0;
  if (v12 >= 0x10)
  {
    sub_22EEB5360(a2, v12, 4uLL, 4);
    *v13 = *a4;
    return v12;
  }
  return result;
}

unint64_t sub_22F2FAD70(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2 >= 0x10)
  {
    v4 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v5 = sub_22F2F7B28(a1, v4);
    if (v5)
      return *(_QWORD *)v5;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22F2FADC8(_QWORD **a1, int a2, unsigned int a3, int a4)
{
  unsigned int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;

  v8 = sub_22EF6A330((*a1)[11], *(_QWORD *)((*a1)[11] + 16480));
  sub_22E49FA8C((llvm::APInt *)&v12, v8, a3);
  v9 = (unsigned __int8 *)sub_22EFF8FB0((*a1)[11], (uint64_t)&v12, *(_QWORD *)((*a1)[11] + 16480), a4);
  v10 = sub_22F34B490(*a1, a2, v9, a4);
  if (v13 >= 0x41 && v12)
    MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_22F2FAE84(uint64_t *a1, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5, uint64_t a6, unsigned int a7)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  int v27;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  _QWORD v43[6];

  v43[4] = *MEMORY[0x24BDAC8D0];
  if (a2 == a4 && a3 == a5)
    return 0;
  v27 = a5 - 1;
  while (1)
  {
    v12 = a3;
    LODWORD(v40) = 0;
    *((_QWORD *)&v40 + 1) = 0;
    *((_QWORD *)&v41 + 1) = 0;
    v13 = *a2 + 24 * a3;
    v14 = *(_QWORD *)(a2[1] + 8 * a3 + 56);
    v15 = *(_QWORD *)(v13 + 64);
    v38 = *(_OWORD *)(v13 + 48);
    *(_QWORD *)&v39 = v15;
    *((_QWORD *)&v39 + 1) = v14;
    if ((_DWORD)v38 != 8)
      break;
    if ((sub_22F2FB13C(a1, a1, *((uint64_t *)&v38 + 1), (uint64_t)a1, *((_QWORD *)&v38 + 1) + 24 * DWORD1(v38), a6, a7) & 1) != 0)
      return 1;
LABEL_15:
    a3 = v12 + 1;
    if (a2 == a4 && v27 == v12)
      return 0;
  }
  if (!sub_22F0EEC64((int *)&v38))
  {
    if (sub_22E8C2534(a1, (uint64_t)&v38, (uint64_t)&v40, a7))
      return 1;
    v21 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v22 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v23 = v21[1];
    *v22 = *v21;
    v22[1] = v23;
    ++*(_DWORD *)(a6 + 8);
    goto LABEL_15;
  }
  v37 = 0;
  LOBYTE(v36) = 0;
  BYTE4(v36) = 0;
  v16 = *a1;
  v34[0] = v38;
  v34[1] = v39;
  sub_22EE7465C(v16, (uint64_t)v34);
  v42[0] = v43;
  v42[1] = (void *)0x200000000;
  v33[0] = v35[0];
  v33[1] = v35[1];
  *(_QWORD *)&v31 = v42;
  BYTE8(v31) = 0;
  HIDWORD(v31) = -1;
  sub_22EE735B0((uint64_t)&v31, (unsigned int *)v33);
  v17 = v36;
  LODWORD(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *((_QWORD *)&v32 + 1) = 0;
  v18 = *a1;
  v19 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  if (sub_22E8C2534(a1, (uint64_t)v35, (uint64_t)&v31, a7)
    || (v29[0] = v31,
        v29[1] = v32,
        sub_22E8C298C((uint64_t)a1, (int *)v29, v37, v17, (uint64_t)v30),
        v40 = v30[0],
        v41 = v30[1],
        !LODWORD(v30[0])))
  {
    v20 = 1;
  }
  else
  {
    v24 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v20 = 0;
    v25 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v26 = v24[1];
    *v25 = *v24;
    v25[1] = v26;
    ++*(_DWORD *)(a6 + 8);
  }
  *(_DWORD *)(v18 + 11992) = v19;
  if (v42[0] != v43)
    free(v42[0]);
  if ((v20 & 1) == 0)
    goto LABEL_15;
  return 1;
}

uint64_t sub_22F2FB13C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v9;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD v27[2];
  _OWORD v28[2];
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    v9 = a3;
    v12 = &v41;
    do
    {
      LODWORD(v38) = 0;
      *((_QWORD *)&v38 + 1) = 0;
      *((_QWORD *)&v39 + 1) = 0;
      LODWORD(v36) = 0;
      *((_QWORD *)&v36 + 1) = 0;
      *((_QWORD *)&v37 + 1) = 0;
      sub_22EDC0108(*a2, v9, 0, (uint64_t)&v40);
      v36 = v40;
      v37 = v41;
      if ((_DWORD)v40 == 8)
      {
        if ((sub_22F2FB13C(a1, a1, *((_QWORD *)&v36 + 1), a1, *((_QWORD *)&v36 + 1) + 24 * DWORD1(v36), a6, a7) & 1) != 0)
          return 1;
      }
      else if (sub_22F0EEC64((int *)&v36))
      {
        v35 = 0;
        LOBYTE(v34) = 0;
        BYTE4(v34) = 0;
        v13 = *a1;
        v32[0] = v36;
        v32[1] = v37;
        sub_22EE7465C(v13, (uint64_t)v32);
        v14 = v12;
        *(_QWORD *)&v40 = v12;
        *((_QWORD *)&v40 + 1) = 0x200000000;
        v31[0] = v33[0];
        v31[1] = v33[1];
        *(_QWORD *)&v29 = &v40;
        BYTE8(v29) = 0;
        HIDWORD(v29) = -1;
        sub_22EE735B0((uint64_t)&v29, (unsigned int *)v31);
        v15 = v34;
        LODWORD(v29) = 0;
        *((_QWORD *)&v29 + 1) = 0;
        *((_QWORD *)&v30 + 1) = 0;
        v16 = *a1;
        v17 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        if (sub_22E8C2534(a1, (uint64_t)v33, (uint64_t)&v29, a7)
          || (v27[0] = v29,
              v27[1] = v30,
              sub_22E8C298C((uint64_t)a1, (int *)v27, v35, v15, (uint64_t)v28),
              v38 = v28[0],
              v39 = v28[1],
              !LODWORD(v28[0])))
        {
          v18 = 1;
        }
        else
        {
          v22 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v38, 1);
          v18 = 0;
          v23 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
          v24 = v22[1];
          *v23 = *v22;
          v23[1] = v24;
          ++*(_DWORD *)(a6 + 8);
        }
        *(_DWORD *)(v16 + 11992) = v17;
        v12 = v14;
        if ((__int128 *)v40 != v14)
          free((void *)v40);
        if ((v18 & 1) != 0)
          return 1;
      }
      else
      {
        if (sub_22E8C2534(a1, (uint64_t)&v36, (uint64_t)&v38, a7))
          return 1;
        v19 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v38, 1);
        v20 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
        v21 = v19[1];
        *v20 = *v19;
        v20[1] = v21;
        ++*(_DWORD *)(a6 + 8);
      }
      v9 += 24;
    }
    while (v9 != a5);
  }
  return 0;
}

unint64_t sub_22F2FB3E0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unint64_t a6, uint64_t a7, char a8)
{
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = a4;
  v12 = a5;
  v13 = a5;
  v9 = 0;
  sub_22ED66924(*a1, 0, a2, a3, (uint64_t)&v10, a6, 0, &v9, a8);
  return v9;
}

unint64_t sub_22F2FB460(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, int a5, unint64_t a6, char a7)
{
  unint64_t v13;
  _DWORD v14[3];
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14[2] = a5;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v14[0] = a5;
  v14[1] = a5;
  sub_22E8AEE20((uint64_t)&v15, a5, a4, (uint64_t)v14);
  v13 = 0;
  sub_22ED66924(*a1, 0, a2, a3, (uint64_t)&v15, a6, 0, &v13, a7);
  return v13;
}

_QWORD *sub_22F2FB528(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  int64x2_t v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = vdupq_n_s64(0x20uLL);
  v19[4] = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 46)
  {
    v11 = sub_22E8C2AA8((uint64_t)a1, a6, *(_QWORD *)(a2 + 32), *(_DWORD *)a3, a4, a5, 1);
    if (v11 < 8)
      goto LABEL_3;
    v15 = sub_22F2FB6DC(a1, (uint64_t)&v17, a2, a3, v11);
  }
  else if (v10 == 20)
  {
    v14 = sub_22F2FB3E0(a1, a6, *(_DWORD *)(a3 + 20), *(_QWORD *)(a2 + 40), *(_DWORD *)(a3 + 16), a4, a5, 1);
    if (v14 < 8)
      goto LABEL_3;
    v15 = sub_22F2FB8CC(a1, (uint64_t)&v17, a2, a3, v14, a6);
  }
  else
  {
    v15 = sub_22F2F7C74(a1, &v17);
  }
  if (v15 >= 0x10)
  {
    v16 = v18.i64[0] - v18.i64[1];
    v12 = sub_22EF5DB78(*(_QWORD *)(*a1 + 88), v15, v18.i32[0] - v18.i32[2]);
    memcpy(v12 + 1, (char *)v17 + v18.i64[1], v16);
    goto LABEL_4;
  }
LABEL_3:
  v12 = 0;
LABEL_4:
  if (v17 != v19 && v17)
    MEMORY[0x2348A0E84]();
  return v12;
}

unint64_t sub_22F2FB6DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[256];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = a3;
  v23 = (unsigned int *)a4;
  v24 = v26;
  v25 = 0x800000000;
  v27 = 0;
  v27 = *(_QWORD *)(a4 + 8);
  v8 = 0;
  if ((sub_22F2FBB28(a1, &v22, 0, &v22, *(_DWORD *)(a3 + 20), (uint64_t)&v24, 0) & 1) == 0)
  {
    v9 = sub_22ED60904((_QWORD *)*a1, a5, *v23, (uint64_t)&v24);
    v8 = v9;
    if (v9 >= 0x10)
    {
      v11 = 8 * *(_DWORD *)(v9 + 20);
      if (*(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
      {
        sub_22EEB5360(a2, v9, (v11 + 32), 8);
        *(_DWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        v13 = v23;
        *(_DWORD *)(v12 + 20) = v23[1];
        *(_DWORD *)(v12 + 16) = *v13;
        *(_DWORD *)(v12 + 24) = v13[2];
        *(_DWORD *)(v12 + 28) = v13[3];
        if ((_DWORD)v25)
        {
          v14 = 0;
          v15 = (_QWORD *)(v12 + 32);
          v16 = 32 * v25;
          do
          {
            *v15++ = *(_QWORD *)((char *)v24 + v14 + 24);
            v14 += 32;
          }
          while (v16 != v14);
        }
      }
      else
      {
        sub_22EEB5360(a2, v9, (v11 + 16), 8);
        v18 = v23;
        v17[1] = v23[1];
        *v17 = *v18;
        v17[2] = v18[2];
        v17[3] = v18[3];
        if ((_DWORD)v25)
        {
          v19 = 0;
          v20 = v17 + 4;
          v21 = 32 * v25;
          do
          {
            *v20++ = *(_QWORD *)((char *)v24 + v19 + 24);
            v19 += 32;
          }
          while (v21 != v19);
        }
      }
    }
  }
  if (v24 != v26)
    free(v24);
  return v8;
}

unint64_t sub_22F2FB8CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[256];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v27 = a3;
  v28 = (_DWORD *)a4;
  v29 = v31;
  v30 = 0x800000000;
  v32 = 0;
  v32 = *(_QWORD *)(a4 + 24);
  v10 = 0;
  if ((sub_22F2FBDE0(a1, &v27, 0, &v27, *(_DWORD *)(a3 + 20), (uint64_t)&v29, 0) & 1) == 0)
  {
    if ((~(_BYTE)a5 & 6) != 0 || (a5 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      v21 = sub_22ED60904((_QWORD *)*a1, a5, v28[4], (uint64_t)&v29);
      v10 = v21;
      if (v21 >= 0x10)
      {
        sub_22EEB5360(a2, v21, (8 * *(_DWORD *)(v21 + 20) + 16), 8);
        v23 = v28;
        v22[1] = v28[5];
        *v22 = v23[4];
        v22[2] = v23[6];
        v22[3] = v23[7];
        if ((_DWORD)v30)
        {
          v24 = 0;
          v25 = v22 + 4;
          v26 = 32 * v30;
          do
          {
            *v25++ = *(_QWORD *)((char *)v29 + v24 + 24);
            v24 += 32;
          }
          while (v26 != v24);
        }
      }
    }
    else
    {
      v10 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v27 + 16) >> 19), *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v29);
      sub_22EEB5360(a2, v10, (8 * *(_DWORD *)(v10 + 20) + 32), 8);
      v13 = v12;
      *v12 = *v28;
      v15 = *(_QWORD *)(a6 + 8);
      v14 = (uint64_t *)(a6 + 8);
      if (!v15 || !sub_22F0ABC50(v14, *(_QWORD *)(*a1 + 88)))
        v16 = 0;
      *((_QWORD *)v13 + 1) = v16;
      v17 = v28;
      v13[5] = v28[5];
      v13[4] = v17[4];
      v13[6] = v17[6];
      v13[7] = v17[7];
      if ((_DWORD)v30)
      {
        v18 = 0;
        v19 = v13 + 8;
        v20 = 32 * v30;
        do
        {
          *v19++ = *(_QWORD *)((char *)v29 + v18 + 24);
          v18 += 32;
        }
        while (v20 != v18);
      }
    }
  }
  if (v29 != v31)
    free(v29);
  return v10;
}

uint64_t sub_22F2FBB28(uint64_t *a1, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5, uint64_t a6, unsigned int a7)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  int v27;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  _QWORD v43[6];

  v43[4] = *MEMORY[0x24BDAC8D0];
  if (a2 == a4 && a3 == a5)
    return 0;
  v27 = a5 - 1;
  while (1)
  {
    v12 = a3;
    LODWORD(v40) = 0;
    *((_QWORD *)&v40 + 1) = 0;
    *((_QWORD *)&v41 + 1) = 0;
    v13 = *a2 + 24 * a3;
    v14 = *(_QWORD *)(a2[1] + 8 * a3 + 16);
    v15 = *(_QWORD *)(v13 + 56);
    v38 = *(_OWORD *)(v13 + 40);
    *(_QWORD *)&v39 = v15;
    *((_QWORD *)&v39 + 1) = v14;
    if ((_DWORD)v38 != 8)
      break;
    if ((sub_22F2FB13C(a1, a1, *((uint64_t *)&v38 + 1), (uint64_t)a1, *((_QWORD *)&v38 + 1) + 24 * DWORD1(v38), a6, a7) & 1) != 0)
      return 1;
LABEL_15:
    a3 = v12 + 1;
    if (a2 == a4 && v27 == v12)
      return 0;
  }
  if (!sub_22F0EEC64((int *)&v38))
  {
    if (sub_22E8C2534(a1, (uint64_t)&v38, (uint64_t)&v40, a7))
      return 1;
    v21 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v22 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v23 = v21[1];
    *v22 = *v21;
    v22[1] = v23;
    ++*(_DWORD *)(a6 + 8);
    goto LABEL_15;
  }
  v37 = 0;
  LOBYTE(v36) = 0;
  BYTE4(v36) = 0;
  v16 = *a1;
  v34[0] = v38;
  v34[1] = v39;
  sub_22EE7465C(v16, (uint64_t)v34);
  v42[0] = v43;
  v42[1] = (void *)0x200000000;
  v33[0] = v35[0];
  v33[1] = v35[1];
  *(_QWORD *)&v31 = v42;
  BYTE8(v31) = 0;
  HIDWORD(v31) = -1;
  sub_22EE735B0((uint64_t)&v31, (unsigned int *)v33);
  v17 = v36;
  LODWORD(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *((_QWORD *)&v32 + 1) = 0;
  v18 = *a1;
  v19 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  if (sub_22E8C2534(a1, (uint64_t)v35, (uint64_t)&v31, a7)
    || (v29[0] = v31,
        v29[1] = v32,
        sub_22E8C298C((uint64_t)a1, (int *)v29, v37, v17, (uint64_t)v30),
        v40 = v30[0],
        v41 = v30[1],
        !LODWORD(v30[0])))
  {
    v20 = 1;
  }
  else
  {
    v24 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v20 = 0;
    v25 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v26 = v24[1];
    *v25 = *v24;
    v25[1] = v26;
    ++*(_DWORD *)(a6 + 8);
  }
  *(_DWORD *)(v18 + 11992) = v19;
  if (v42[0] != v43)
    free(v42[0]);
  if ((v20 & 1) == 0)
    goto LABEL_15;
  return 1;
}

uint64_t sub_22F2FBDE0(uint64_t *a1, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5, uint64_t a6, unsigned int a7)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  int v27;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  _QWORD v43[6];

  v43[4] = *MEMORY[0x24BDAC8D0];
  if (a2 == a4 && a3 == a5)
    return 0;
  v27 = a5 - 1;
  while (1)
  {
    v12 = a3;
    LODWORD(v40) = 0;
    *((_QWORD *)&v40 + 1) = 0;
    *((_QWORD *)&v41 + 1) = 0;
    v13 = *a2 + 24 * a3;
    v14 = *(_QWORD *)(a2[1] + 8 * a3 + 32);
    v15 = *(_QWORD *)(v13 + 64);
    v38 = *(_OWORD *)(v13 + 48);
    *(_QWORD *)&v39 = v15;
    *((_QWORD *)&v39 + 1) = v14;
    if ((_DWORD)v38 != 8)
      break;
    if ((sub_22F2FB13C(a1, a1, *((uint64_t *)&v38 + 1), (uint64_t)a1, *((_QWORD *)&v38 + 1) + 24 * DWORD1(v38), a6, a7) & 1) != 0)
      return 1;
LABEL_15:
    a3 = v12 + 1;
    if (a2 == a4 && v27 == v12)
      return 0;
  }
  if (!sub_22F0EEC64((int *)&v38))
  {
    if (sub_22E8C2534(a1, (uint64_t)&v38, (uint64_t)&v40, a7))
      return 1;
    v21 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v22 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v23 = v21[1];
    *v22 = *v21;
    v22[1] = v23;
    ++*(_DWORD *)(a6 + 8);
    goto LABEL_15;
  }
  v37 = 0;
  LOBYTE(v36) = 0;
  BYTE4(v36) = 0;
  v16 = *a1;
  v34[0] = v38;
  v34[1] = v39;
  sub_22EE7465C(v16, (uint64_t)v34);
  v42[0] = v43;
  v42[1] = (void *)0x200000000;
  v33[0] = v35[0];
  v33[1] = v35[1];
  *(_QWORD *)&v31 = v42;
  BYTE8(v31) = 0;
  HIDWORD(v31) = -1;
  sub_22EE735B0((uint64_t)&v31, (unsigned int *)v33);
  v17 = v36;
  LODWORD(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *((_QWORD *)&v32 + 1) = 0;
  v18 = *a1;
  v19 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  if (sub_22E8C2534(a1, (uint64_t)v35, (uint64_t)&v31, a7)
    || (v29[0] = v31,
        v29[1] = v32,
        sub_22E8C298C((uint64_t)a1, (int *)v29, v37, v17, (uint64_t)v30),
        v40 = v30[0],
        v41 = v30[1],
        !LODWORD(v30[0])))
  {
    v20 = 1;
  }
  else
  {
    v24 = (_OWORD *)sub_22E78DF7C(a6, (unint64_t)&v40, 1);
    v20 = 0;
    v25 = (_OWORD *)(*(_QWORD *)a6 + 32 * *(unsigned int *)(a6 + 8));
    v26 = v24[1];
    *v25 = *v24;
    v25[1] = v26;
    ++*(_DWORD *)(a6 + 8);
  }
  *(_DWORD *)(v18 + 11992) = v19;
  if (v42[0] != v43)
    free(v42[0]);
  if ((v20 & 1) == 0)
    goto LABEL_15;
  return 1;
}

uint64_t sub_22F2FC098(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = sub_22E8C1D88(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  v12 = 0;
  if (v10)
  {
    v14 = v11;
    v15 = sub_22F2FC1E0(a1, (*(_DWORD *)(a3 + 16) >> 19), *(_DWORD *)a4, v10, v11, *(_QWORD *)(a3 + 40), *(_DWORD *)(a4 + 16), a5);
    if (v15 >= 0x10)
    {
      v12 = v15;
      v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
      if (v16)
        v17 = *(_BYTE *)(v16 + 16) == 24;
      else
        v17 = 0;
      if (v17
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
        && (v16 = sub_22F10CF48(v16)) != 0)
      {
        sub_22EEB5360(a2, *(_QWORD *)(v16 + 40), 4uLL, 4);
        *v18 = *(_DWORD *)(a4 + 16);
        sub_22EEB5360(a2, v12, 0x10uLL, 8);
        *(_DWORD *)v19 = *(_DWORD *)a4;
        *(_QWORD *)(v19 + 8) = v14;
      }
      else
      {
        sub_22EEB5360(a2, v12, 0x18uLL, 8);
        *(_DWORD *)v20 = *(_DWORD *)a4;
        *(_QWORD *)(v20 + 8) = v14;
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(a4 + 16);
      }
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

unint64_t sub_22F2FC1E0(uint64_t *a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  unint64_t v16;
  unint64_t v17;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34[24];
  _BYTE v35[96];
  unsigned int v36[25];
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unint64_t v44[2];
  unsigned int v45;
  _QWORD *v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v44[0] = a4;
  v44[1] = a5;
  v43 = a6;
  v41 = 0u;
  *(_OWORD *)v42 = 0u;
  sub_22E8ACE30((uint64_t)&v41, a4, a5);
  if (sub_22F0AAD70(a4) && !sub_22E958204(*a1, (uint64_t)&v41, 0))
  {
    v16 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), a2, a4, a6, 0);
    goto LABEL_5;
  }
  if ((a2 - 5) <= 1)
  {
    v16 = sub_22ED717D8((_QWORD *)*a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
    v17 = v16;
    goto LABEL_6;
  }
  v19 = nullsub_910(a2);
  v40 = v19;
  v20 = a7;
  sub_22E8BAEE4((uint64_t)&v47, *a1, a6, a7, 1, 0);
  v21 = sub_22E958204(*a1, (uint64_t)&v41, 0);
  v39 = v21;
  if (v21)
  {
    v22 = v21;
    if ((sub_22E958490((_QWORD *)*a1, (uint64_t)&v41, v21) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v47, v22, 0);
      if (v47 != 5)
      {
        if (v47 != 2)
          goto LABEL_24;
        v23 = *v48 & 0xFFFFFFFFFFFFFFFCLL;
        v24 = *(_DWORD *)(v23 + 28) & 0x7F;
        if (v24 <= 0x2F && ((1 << v24) & 0xC00000060000) != 0)
        {
          v23 = sub_22EFBAEA4(*v48 & 0xFFFFFFFFFFFFFFFCLL);
          v24 = *(_DWORD *)(v23 + 28) & 0x7F;
        }
        if (v24 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v23, v19, 0, v20, a6) & 1) != 0)
          {
            v26 = *(_QWORD *)(v23 + 48);
            if (v26)
              v27 = v26 & 0xFFFFFFFFFFFFFFF0;
            else
              v27 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v23);
            v17 = sub_22EF65684(*(_QWORD *)(*a1 + 88), a2, a4, v27, 0);
            goto LABEL_29;
          }
          sub_22E8FCA40((_QWORD *)*a1, a3, 0x13E0u, 0, (uint64_t)&v45);
          sub_22E8BAE44((uint64_t)&v45, &v43);
          sub_22E903BEC(&v45);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v23 + 24), 0x6Fu, 0, (uint64_t)v34);
          sub_22E903BEC(v34);
        }
        else
        {
LABEL_24:
          sub_22E8BAEE4((uint64_t)&v45, *a1, a6, v20, 1, 0);
          sub_22EC611AC(*a1, &v45, v22, 0);
          if (v45 - 2 > 2)
          {
            sub_22E8FCA40((_QWORD *)*a1, v20, 0xFDFu, 0, (uint64_t)v36);
            v31 = sub_22E8900C4((uint64_t)v36, &v40);
            v32 = sub_22E8BAE44(v31, &v43);
            v33 = sub_22E894FB4(v32, &v39);
            v38 = sub_22F0AB0EC(v44);
            sub_22E8906A0(v33, (uint64_t *)&v38);
            v30 = v36;
          }
          else
          {
            v38 = *v46 & 0xFFFFFFFFFFFFFFFCLL;
            v37 = sub_22F31E40C(*a1, v38, v19);
            sub_22E8FCA40((_QWORD *)*a1, v20, 0x12A5u, 0, (uint64_t)v36);
            v28 = sub_22E890024((uint64_t)v36, (uint64_t *)&v38);
            v29 = sub_22E8900C4(v28, &v37);
            sub_22E8900C4(v29, &v40);
            sub_22E903BEC(v36);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v38 + 24), 0x64u, 0, (uint64_t)v35);
            v30 = (unsigned int *)v35;
          }
          sub_22E903BEC(v30);
          sub_22E8BAFF0((uint64_t)&v45);
        }
      }
    }
  }
  v17 = 0;
LABEL_29:
  sub_22E8BAFF0((uint64_t)&v47);
LABEL_6:
  if (HIDWORD(v42[1]))
    free(v42[0]);
  return v17;
}

unint64_t sub_22F2FC5D0(uint64_t *a1, unsigned int a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  void *v27[2];

  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  sub_22E8ACE30((uint64_t)&v26, a3, a4);
  v16 = a5;
  v17 = a7;
  v18 = sub_22F2FB3E0(a1, (uint64_t)&v26, v16, a6, a7, 0, 0, a9);
  v19 = 0;
  if (v18 < 8)
    goto LABEL_2;
  v21 = v18;
  v22 = ~(_BYTE)v18;
  v23 = (_QWORD *)*a1;
  if ((v22 & 6) == 0)
  {
    v24 = sub_22F36CB1C(v23[11], a2, a3, a6, a8);
LABEL_7:
    v19 = v24;
    goto LABEL_2;
  }
  v25 = sub_22ED60904(v23, v21, v17, a8);
  if (v25 < 0x10)
  {
    v19 = 0;
    goto LABEL_2;
  }
  v19 = v25;
  if (a2 != 6 || a3)
  {
    v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), a2, a3, v25, 0);
    goto LABEL_7;
  }
LABEL_2:
  if (HIDWORD(v27[1]))
    free(v27[0]);
  return v19;
}

unint64_t sub_22F2FC708(_QWORD **a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  unsigned int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v10 = sub_22EF6A330((*a1)[11], *(_QWORD *)((*a1)[11] + 16480));
  sub_22E49FA8C((llvm::APInt *)&v14, v10, a3);
  v11 = (unsigned __int8 *)sub_22EFF8FB0((*a1)[11], (uint64_t)&v14, *(_QWORD *)((*a1)[11] + 16480), a5);
  v12 = sub_22EE7F938(*a1, a2, v11, a4, a5);
  if (v15 >= 0x41 && v14)
    MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
  return v12;
}

unint64_t sub_22F2FC7D4(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t result;

  if (!a2)
    return (unint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22F2FCED4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22E8C4F88(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = sub_22F2F4E68((uint64_t)a1, (uint64_t)a2);
      break;
    case 4u:
      result = sub_22E8C5158((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22E8C5214(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22E8C5454(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22F2FD3A0(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22F2FD5B4(a1, (unsigned int *)a2);
      break;
    case 0xAu:
      result = sub_22F2FD5BC(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22E8C559C(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22E8C5894(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22F2FD610(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22E8C5A24(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22F2FD688((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22E8C5B90((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22F2FD710(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22F2FD768(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22F2FD950((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22F2FD95C(a1, a2);
      break;
    case 0x16u:
      result = sub_22F2FD9C8(a1, a2);
      break;
    case 0x17u:
      result = sub_22F2FDA34(a1, a2);
      break;
    case 0x18u:
      result = sub_22F2FDAA0(a1, a2);
      break;
    case 0x19u:
      result = sub_22F2FDB0C(a1, a2);
      break;
    case 0x1Au:
      result = sub_22F2FDB7C(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22F2FDBE8(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22F2FDC54(a1, a2);
      break;
    case 0x1Du:
      result = sub_22F2FDCC0(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22F2FDD2C(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22F2FDD98(a1, a2);
      break;
    case 0x20u:
      result = sub_22F2FDE04(a1, a2);
      break;
    case 0x21u:
      result = sub_22F2FDE70(a1, a2);
      break;
    case 0x22u:
      result = sub_22F2FDEDC(a1, a2);
      break;
    case 0x23u:
      result = sub_22F2FDF48(a1, a2);
      break;
    case 0x24u:
      result = sub_22F2FDFB4(a1, a2);
      break;
    case 0x25u:
      result = sub_22F2FE020(a1, a2);
      break;
    case 0x26u:
      result = sub_22F2FE08C(a1, a2);
      break;
    case 0x27u:
      result = sub_22F2FE0F8(a1, a2);
      break;
    case 0x28u:
      result = sub_22F2FE164(a1, a2);
      break;
    case 0x29u:
      result = sub_22F2FE1D0(a1, a2);
      break;
    case 0x2Au:
      result = sub_22F2FE23C(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22F2FE2A8(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22F2FE314(a1, a2);
      break;
    case 0x2Du:
      result = sub_22F2FE380(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22F2FE3EC(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22F2FE458(a1, a2);
      break;
    case 0x30u:
      result = sub_22F2FE4C4(a1, a2);
      break;
    case 0x31u:
      result = sub_22F2FE530(a1, a2);
      break;
    case 0x32u:
      result = sub_22F2FE59C(a1, a2);
      break;
    case 0x33u:
      result = sub_22F2FE608(a1, a2);
      break;
    case 0x34u:
      result = sub_22F2FE674(a1, a2);
      break;
    case 0x35u:
      result = sub_22F2FE6E0(a1, a2);
      break;
    case 0x36u:
      result = sub_22F2FE74C(a1, a2);
      break;
    case 0x37u:
      result = sub_22F2FE7B8(a1, a2);
      break;
    case 0x38u:
      result = sub_22F2FE824(a1, a2);
      break;
    case 0x39u:
      result = sub_22F2FE890(a1, a2);
      break;
    case 0x3Au:
      result = sub_22F2FE8FC(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22F2FE968(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22F2FE9D4(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22F2FEA40(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22F2FEAAC(a1, a2);
      break;
    case 0x40u:
      result = sub_22F2FEB18((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x41u:
      result = sub_22F2FEB78(a1, a2);
      break;
    case 0x42u:
      result = sub_22F2FEBE4(a1, a2);
      break;
    case 0x43u:
      result = sub_22F2FEC50(a1, a2);
      break;
    case 0x44u:
      result = sub_22F2FECBC(a1, a2);
      break;
    case 0x45u:
      result = sub_22F2FED28(a1, a2);
      break;
    case 0x46u:
      result = sub_22F2FED94(a1, a2);
      break;
    case 0x47u:
      result = sub_22F2FEE00(a1, a2);
      break;
    case 0x48u:
      result = sub_22F2FEE6C(a1, a2);
      break;
    case 0x49u:
      result = sub_22F2FEED8(a1, a2);
      break;
    case 0x4Au:
      result = sub_22F2FEF44(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22F2FEFB0(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22F2FF01C(a1, a2);
      break;
    case 0x4Du:
      result = sub_22F2FF088(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22F2FF0F4(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22F2FF160(a1, a2);
      break;
    case 0x50u:
      result = sub_22F2FF1CC(a1, a2);
      break;
    case 0x51u:
      result = sub_22F2FF238(a1, a2);
      break;
    case 0x52u:
      result = sub_22F2FF2A4(a1, a2);
      break;
    case 0x53u:
      result = sub_22F2FF310(a1, a2);
      break;
    case 0x54u:
      result = sub_22F2FF37C(a1, a2);
      break;
    case 0x55u:
      result = sub_22F2FF3E8(a1, a2);
      break;
    case 0x56u:
      result = sub_22F2FF454((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22F2FF544(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22F2FF590((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22F2FF614((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22E8C5E08(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22F2FF668(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22E8C5FBC(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22F2FF6B4(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22F2FF704(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22F2FF770(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22E8C6048(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22F2FF7B8(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22F2FF8E4(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22F2FF934(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22F2FFA4C(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22F2F34EC(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22F2FFBA0((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22F2FFC4C(a1, a2);
      break;
    default:
      return (unint64_t)a2;
  }
  return result;
}

uint64_t sub_22F2FCED4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  unsigned int v44;
  _QWORD v45[8];
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  void *v49;
  uint64_t v50;
  _BYTE v51[64];
  char *v52;
  uint64_t v53;
  _QWORD v54[10];

  v54[8] = *MEMORY[0x24BDAC8D0];
  v52 = (char *)v54;
  v53 = 0x800000000;
  v49 = v51;
  v50 = 0x800000000;
  v46 = v48;
  v47 = 0x400000000;
  v44 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v11);
      v14 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v47;
      }
      *((_QWORD *)v46 + v14) = v13;
      LODWORD(v47) = v47 + 1;
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v11);
      v16 = v53;
      if (v53 >= (unint64_t)HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v53;
      }
      *(_QWORD *)&v52[8 * v16] = v15;
      LODWORD(v53) = v53 + 1;
      v17 = sub_22F3F1B04(a2, v11);
      v18 = sub_22F2F34EC(a1, v17);
      if ((v18 & 1) != 0)
        break;
      v19 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v50;
      }
      *((_QWORD *)v49 + v19) = v18 & 0xFFFFFFFFFFFFFFFELL;
      v20 = v50 + 1;
      LODWORD(v50) = v50 + 1;
      if (v10 == ++v11)
        goto LABEL_11;
    }
  }
  else
  {
    v20 = 0;
LABEL_11:
    v21 = *(_DWORD *)(a2 + 20);
    if (v21)
    {
      v22 = 0;
      v12 = 1;
      while (1)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v22 + *(_DWORD *)(a2 + 16)));
        v24 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = v47;
        }
        *((_QWORD *)v46 + v24) = v23;
        LODWORD(v47) = v47 + 1;
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v22 + *(_DWORD *)(a2 + 16)));
        v26 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v53;
        }
        *(_QWORD *)&v52[8 * v26] = v25;
        LODWORD(v53) = v53 + 1;
        v27 = sub_22F3F1B10(a2, v22);
        v28 = sub_22F2F34EC(a1, v27);
        if ((v28 & 1) != 0)
          break;
        v29 = v50;
        if (v50 >= (unint64_t)HIDWORD(v50))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v50;
        }
        *((_QWORD *)v49 + v29) = v28 & 0xFFFFFFFFFFFFFFFELL;
        v20 = v50 + 1;
        LODWORD(v50) = v50 + 1;
        if (v21 == ++v22)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v30 = *(_DWORD *)(a2 + 80);
      if (v30)
      {
        v31 = 0;
        v12 = 1;
        while (1)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v31 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v33 = v47;
          if (v47 >= (unint64_t)HIDWORD(v47))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v33 = v47;
          }
          *((_QWORD *)v46 + v33) = v32;
          LODWORD(v47) = v47 + 1;
          v34 = sub_22F3F1B24(a2, v31);
          v35 = sub_22F2F34EC(a1, v34);
          if ((v35 & 1) != 0)
            break;
          sub_22F3F1B24(a2, v31);
          v36 = v50;
          if (v50 >= (unint64_t)HIDWORD(v50))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v50;
          }
          *((_QWORD *)v49 + v36) = v35 & 0xFFFFFFFFFFFFFFFELL;
          v20 = v50 + 1;
          LODWORD(v50) = v50 + 1;
          if (v30 == ++v31)
            goto LABEL_29;
        }
      }
      else
      {
LABEL_29:
        v37 = *(unsigned int *)(a2 + 24);
        v38 = 0;
        if ((_DWORD)v37)
        {
          v39 = 0;
          v40 = 8 * v37;
          do
          {
            v41 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v39);
            if (v38 >= 8)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v38 = v44;
            }
            v45[v38] = v41;
            v38 = ++v44;
            v39 += 8;
          }
          while (v40 != v39);
          v20 = v50;
        }
        v12 = sub_22ED4E804(*a1, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v46, a8, v52, v53, (uint64_t *)v49, v20, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v45, v38, 0, *(_DWORD *)(a2 + 80), v43, *(_DWORD *)(a2 + 40));
      }
    }
  }
  if (v46 != v48)
    free(v46);
  if (v49 != v51)
    free(v49);
  if (v52 != (char *)v54)
    free(v52);
  return v12;
}

uint64_t sub_22F2FD3A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  _DWORD *v21;
  uint64_t v22;
  const char *v23;
  unsigned int v24;
  unint64_t v25;
  int v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[14];

  v33[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v27 = v5;
  v6 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned int *)(v6 + 72);
  v8 = *(unsigned int *)(v6 + 76);
  v31 = v33;
  v32 = 0x400000000;
  if ((_DWORD)v7)
  {
    v15 = v6 + 88;
    do
    {
      if (v8)
      {
        v19 = *(_QWORD *)(*(_QWORD *)v15 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v15 + 40) & 7) != 0 || v19 == 0)
        {
          v22 = 0;
          v23 = "";
        }
        else
        {
          v21 = *(_DWORD **)(v19 + 16);
          v24 = *v21;
          v23 = (const char *)(v21 + 4);
          v22 = v24;
        }
        v25 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v15 + 48));
        v28 = v23;
        v29 = v22;
        v30 = v25;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
      }
      v16 = sub_22E4EF088((uint64_t)&v31, (unint64_t)&v28, 1);
      v17 = (char *)v31 + 24 * v32;
      v18 = *(_OWORD *)v16;
      *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v17 = v18;
      LODWORD(v32) = v32 + 1;
      v15 += 8;
      --v8;
      --v7;
    }
    while (v7);
  }
  v9 = *a1;
  v10 = sub_22F3F2C44(a2);
  sub_22ED379B0(v9, v27, 0, v10, (uint64_t)v31, v32, 0);
  v11 = *a1;
  sub_22E905168(*a1, 0);
  v12 = sub_22F2FC7D4(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 1896) + 8 * *(unsigned int *)(v11 + 1904) - 8);
  --*(_QWORD *)(v13 + 360);
  if ((v12 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v14 = 1;
  }
  else
  {
    v14 = sub_22ED37CF8((_QWORD *)*a1, v12 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v31 != v33)
    free(v31);
  return v14;
}

uint64_t sub_22F2FD5B4(uint64_t *a1, unsigned int *a2)
{
  return sub_22E8C629C(a1, a2, 0);
}

uint64_t sub_22F2FD5BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22F2FD610(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22F3440A8(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), *(unsigned int *)(a2 + 24), (unsigned __int8 *)(v6 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22F2FD688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4;
  v7 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7)
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v7 + 8);
  }
  if (v4)
    return sub_22F344258(*(_QWORD *)a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 16), v4);
  else
    return 1;
}

uint64_t sub_22F2FD710(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return sub_22ED343AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), (unint64_t)v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FD768(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  void *v18[2];
  __int128 v19;
  void *v20;
  __int128 v21;
  void *v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22E8C1D88(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v19 = *(_OWORD *)(a2 + 32);
  v20 = *(void **)(a2 + 48);
  if ((_QWORD)v19)
  {
    sub_22E8C64D0((uint64_t)a1, (__n128 *)&v19, (__n128 *)&v17);
    v19 = v17;
    v20 = v18[0];
    if (!(_QWORD)v17)
      return 1;
  }
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  sub_22E8ACE30((uint64_t)&v17, v7, v8);
  v9 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v17, (uint64_t *)&v19))
  {
    case 0u:
      if (*(_BYTE *)(a2 + 12))
        goto LABEL_17;
      goto LABEL_9;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_17;
LABEL_9:
      v9 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v10 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v9 = 19;
      if (byte_255E04EB3)
      {
        v11 = sub_22F0D3748(19);
        ++*((_DWORD *)v11 + 2);
      }
      *(_WORD *)v9 &= ~0x100u;
      *(_DWORD *)(v9 + 4) = v10;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_18;
    case 3u:
      break;
    default:
LABEL_17:
      v13 = 1;
LABEL_18:
      v14 = sub_22F2FD5B4(a1, *(unsigned int **)(a2 + 56));
      if ((v14 & 1) != 0)
        v9 = 1;
      else
        v9 = v14;
      if ((v13 & 1) == 0 && (v14 & 1) == 0)
      {
        v15 = *(_DWORD *)(a2 + 8);
        v16 = *(_BYTE *)(a2 + 12);
        v21 = v19;
        v22 = v20;
        v9 = sub_22F344AB0(*a1, v15, v16, v7, v8, &v21, v14 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v9;
}

uint64_t sub_22F2FD950(uint64_t a1, uint64_t a2)
{
  return sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22F2FD95C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FD9C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDA34(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDAA0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDB0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDB7C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDBE8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDC54(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDCC0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDD2C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDD98(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDE04(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDE70(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDEDC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDF48(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FDFB4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE020(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE08C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE0F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE164(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE1D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE23C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE2A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE314(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE380(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE3EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE458(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE4C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE530(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE59C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE608(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE674(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE6E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE74C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE7B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE824(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE890(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE8FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE968(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FE9D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEA40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEAAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEB18(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  unsigned int v5[24];

  sub_22E8FCA40(*a1, *(_DWORD *)(a2 + 12), 0x108Du, 0, (uint64_t)v5);
  v4[0] = llvm::omp::getOpenMPDirectiveName();
  v4[1] = v2;
  sub_22F2F2210((uint64_t)v5, (uint64_t)v4);
  sub_22E903BEC(v5);
  return 1;
}

uint64_t sub_22F2FEB78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEBE4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEC50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FECBC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FED28(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FED94(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEE00(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEE6C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEED8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEF44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FEFB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF01C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF088(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF0F4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF160(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF1CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF238(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF2A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF310(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF37C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF3E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22E8C66D8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22F2FF454(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v7 = *(_QWORD *)(v4 + 56);
    if ((v7 & 4) != 0)
    {
      v8 = *(uint64_t **)((v7 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v8)
        goto LABEL_10;
    }
    else if (v7 >= 8)
    {
      v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
LABEL_10:
      v12 = sub_22F2F7B28(a1, v8);
      if (!v12)
        return 1;
      v11 = (uint64_t)v12;
      v10 = *v12;
LABEL_12:
      v13 = *(_QWORD *)(v4 + 40);
      if ((v13 & 7) != 0)
        v14 = 0;
      else
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      v15 = sub_22EB001B8(*a1, v11, v10, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v14, 0);
      if (!v15)
        return 1;
      v4 = v15;
      goto LABEL_2;
    }
    v9 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v9 < 0x10)
      return 1;
    v10 = v9;
    v11 = 0;
    goto LABEL_12;
  }
LABEL_2:
  v5 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22F2FF544(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344474(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF590(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v7 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF614(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v5 = 0;
    return sub_22ED36B94(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  v5 = sub_22F2F34EC(a1, v4);
  if ((v5 & 1) == 0)
    return sub_22ED36B94(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22F2FF668(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344820(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF6B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22F2FF704(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2FD5B4(a1, *(unsigned int **)(a2 + 24));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF770(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2FD5B4(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF7B8(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  v5 = a2 + 12;
  v6 = sub_22F2F34EC(a1, *((_QWORD *)a2 + 3));
  v7 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v6);
  if ((v7 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v10 = *a2;
    if ((v10 & 0x100) != 0)
      v11 = *(_QWORD *)&v5[4 * ((v10 >> 8) & 1)];
    else
      v11 = 0;
    v12 = sub_22F2F34EC(a1, v11);
    v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
    sub_22EB48E64(v4);
    if ((v13 & 1) == 0)
    {
      v14 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v15 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v7 & 0xFFFFFFFFFFFFFFFELL, v14, v13 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v15 & 1) == 0)
      {
        v16 = sub_22F2FC7D4(a1, *(_QWORD *)&v5[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v16 & 1) == 0)
        {
          v8 = v15 & 0xFFFFFFFFFFFFFFFELL;
          sub_22ED2C598(*a1, (unsigned __int16 *)(v15 & 0xFFFFFFFFFFFFFFFELL), v16 & 0xFFFFFFFFFFFFFFFELL);
          return v8;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22F2FF8E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FF934(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22F2FC7D4(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v7 = *((_DWORD *)a2 + 1);
  v8 = sub_22F0D82C8(a2);
  sub_22F2FFD88((uint64_t)a1, v7, v8, *(_QWORD *)&a2[4 * (HIBYTE(*a2) & 1) + 12 + 4 * ((*a2 >> 9) & 1)], 2, (uint64_t)&v10);
  if ((_BYTE)v11)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v12 = v10;
  v13 = v11;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v12, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22F2FC7D4(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22F2FFA4C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v8 = 0;
    v9 = 8 * (v6 >> 8);
    do
    {
      v10 = *v7;
      if (*v7)
      {
        if (v8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = v13;
        }
        v14[v8] = v10;
        v8 = ++v13;
      }
      ++v7;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = sub_22F2FC7D4(a1, *((_QWORD *)v4 + 1), a3);
  if ((v11 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v11 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v11 & 0xFFFFFFFFFFFFFFFELL);
    return v11;
  }
  return (uint64_t)v4;
}

uint64_t sub_22F2FFBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F2FFC4C(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v4 = a2[1];
  v5 = sub_22F0D82F0((uint64_t)a2);
  sub_22F2FFD88((uint64_t)a1, v4, v5, *(_QWORD *)&a2[2 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 4], 0, (uint64_t)&v10);
  if ((_BYTE)v11)
    return 1;
  v7 = sub_22F2FC7D4(a1, *(_QWORD *)&a2[2 * (((unint64_t)*(unsigned __int16 *)a2 >> 8) & 1) + 6], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = a2[1];
  v9 = a2[2];
  v12 = v10;
  v13 = v11;
  return sub_22F343FAC(*a1, v8, v9, (uint64_t)&v12, a2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22F2FFD08(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;

  v7 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
  *(_BYTE *)v7 = 4;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(4);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  return v7;
}

uint64_t sub_22F2FFD88@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = result;
  if (!a3)
  {
    if (!a4)
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_DWORD *)(a6 + 15) = 0;
      return result;
    }
    result = sub_22F2F34EC(result, a4);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)v8, a2, result & 0xFFFFFFFFFFFFFFFELL, a5, 1, a6);
    goto LABEL_11;
  }
  v10 = a3;
  v11 = a3;
  v12 = 0;
  result = sub_22E793870((uint64_t *)(result + 8), &v11, &v12);
  if ((_DWORD)result)
  {
    if (v12 != *(_QWORD *)(v8 + 8) + 16 * *(unsigned int *)(v8 + 24))
    {
      v10 = *(_QWORD *)(v12 + 8);
      if (!v10)
      {
LABEL_11:
        *(_QWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
        *(_WORD *)(a6 + 16) = 1;
        *(_BYTE *)(a6 + 18) = 0;
        return result;
      }
    }
  }
  return sub_22F331C88(*(_QWORD *)v8, v10, a2, a5, a6);
}

void sub_22F2FFE8C(uint64_t *a1, __n128 *a2)
{
  if (a2)
  {
    switch(a2->n128_u32[2])
    {
      case 0u:
      case 1u:
      case 0xBu:
      case 0xDu:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x41u:
      case 0x43u:
      case 0x44u:
      case 0x48u:
      case 0x4Au:
      case 0x50u:
      case 0x56u:
      case 0x57u:
      case 0x5Du:
        sub_22F2F4E68((uint64_t)a1, (uint64_t)a2);
        break;
      case 3u:
        sub_22F300000(a1, a2);
        break;
      case 4u:
        sub_22F30017C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 5u:
        sub_22E8C6A50(a1, (unsigned int *)a2);
        break;
      case 6u:
        sub_22E8C6BC8((uint64_t **)a1, (uint64_t)a2);
        break;
      case 7u:
        sub_22F3001C8((uint64_t **)a1, (uint64_t)a2);
        break;
      case 9u:
      case 0x19u:
      case 0x45u:
      case 0x52u:
      case 0x53u:
        sub_22F2F4854();
      case 0xAu:
        sub_22F300214((_QWORD **)a1, (int *)a2);
        break;
      case 0xCu:
        sub_22F30022C((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0xEu:
        sub_22E8C6D4C((_QWORD **)a1, (int *)a2);
        break;
      case 0xFu:
        sub_22E8C6E98((_QWORD **)a1, (int *)a2);
        break;
      case 0x10u:
        sub_22F300278(a1, (uint64_t)a2);
        break;
      case 0x11u:
        sub_22F300290((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x12u:
        sub_22E8C6FE4(a1, (uint64_t)a2);
        break;
      case 0x13u:
        sub_22F3002AC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x14u:
        sub_22F3002F8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x15u:
        sub_22F300350(a1, (uint64_t)a2);
        break;
      case 0x16u:
        sub_22F3003A8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x18u:
        sub_22F3003F8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x1Au:
        sub_22E8C7178((_QWORD **)a1, (int *)a2);
        break;
      case 0x1Bu:
        sub_22F300448(a1, (uint64_t)a2);
        break;
      case 0x1Cu:
        sub_22F300494(a1, (uint64_t)a2);
        break;
      case 0x1Du:
        sub_22E8C72C4((uint64_t)a1, (uint64_t)a2);
        break;
      case 0x1Eu:
        sub_22E8C7410((uint64_t)a1, (int *)a2);
        break;
      case 0x1Fu:
        sub_22F3004E0((_QWORD **)a1, (int *)a2);
        break;
      case 0x20u:
        sub_22F300628(a1, (int *)a2);
        break;
      case 0x21u:
        sub_22F300638((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x22u:
        sub_22E8C7564((_QWORD **)a1, a2);
        break;
      case 0x23u:
        sub_22F300684((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x24u:
        sub_22F3006D0(a1, (uint64_t)a2);
        break;
      case 0x25u:
        sub_22E8C76BC(a1, (uint64_t)a2);
        break;
      case 0x27u:
        sub_22E8C7AF8((_QWORD **)a1, (int *)a2);
        break;
      case 0x29u:
        sub_22E8C7C44((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x2Au:
        sub_22E8C7DD8((_QWORD **)a1, a2);
        break;
      case 0x2Bu:
        sub_22E8C7F30((_QWORD **)a1, a2);
        break;
      case 0x2Cu:
        sub_22E8C8088((_QWORD **)a1, (int *)a2);
        break;
      case 0x2Eu:
        sub_22F300724((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x34u:
        sub_22F3008CC(a1, (uint64_t)a2);
        break;
      case 0x35u:
        sub_22E8C8218((_QWORD **)a1, (int *)a2);
        break;
      case 0x37u:
        sub_22F300918(a1, (uint64_t)a2);
        break;
      case 0x38u:
        sub_22F300964((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x39u:
        sub_22F3009B0((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x3Au:
        sub_22F3009FC((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x3Bu:
        sub_22F300A48((_QWORD **)a1, (int *)a2);
        break;
      case 0x3Cu:
        sub_22F300A60((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x3Du:
        sub_22F300AB8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x3Eu:
        sub_22F300B04((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x3Fu:
        sub_22E8C8364((_QWORD **)a1, (int *)a2);
        break;
      case 0x40u:
        sub_22F300B50((_QWORD **)a1, (int *)a2);
        break;
      case 0x42u:
        sub_22E8C84B0(a1, a2);
        break;
      case 0x46u:
        sub_22F300B68((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x47u:
        sub_22F300BB4((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x49u:
        sub_22E8C88F4((_QWORD **)a1, (int *)a2);
        break;
      case 0x4Bu:
        sub_22F300C18((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x4Cu:
        sub_22E8C8A40((_QWORD **)a1, (int *)a2);
        break;
      case 0x4Du:
        sub_22E8C8BA4(a1, (uint64_t)a2);
        break;
      case 0x4Eu:
        sub_22F300C64((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x51u:
        sub_22F300CB0((_QWORD **)a1, (int *)a2);
        break;
      case 0x58u:
        sub_22F300DF8((_QWORD **)a1, (uint64_t)a2);
        break;
      case 0x59u:
        sub_22E8C8FE0((_QWORD **)a1, a2);
        break;
      case 0x5Au:
        sub_22E8C9138((_QWORD **)a1, a2);
        break;
      case 0x5Bu:
        sub_22F300E44(a1, (int *)a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22F300000(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (v6)
  {
    v14 = sub_22F2F34EC(a1, v6);
    if ((v14 & 1) != 0)
      return 0;
    v8 = a2[4];
    v7 = v14 & 0xFFFFFFFFFFFFFFFELL;
    v4 = a2[4];
  }
  else
  {
    v7 = 0;
    v8 = v4;
  }
  if (v4)
  {
    v9 = 8 * v8;
    do
    {
      v10 = sub_22F2F34EC(a1, *v5);
      if ((v10 & 1) == 0)
      {
        v11 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v15;
        }
        v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v9 -= 8;
    }
    while (v9);
  }
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v7, v16, v15);
}

uint64_t sub_22F30017C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3001C8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300214(_QWORD **a1, int *a2)
{
  return sub_22ECA0F50(*a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22F30022C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

void sub_22F300278(uint64_t *a1, uint64_t a2)
{
  sub_22ECA0930(*a1, *(_DWORD *)(a2 + 16));
}

_DWORD *sub_22F300290(_QWORD **a1, uint64_t a2)
{
  return sub_22ECA1BE0(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 24), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3002AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3002F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    v5 = 0;
    return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
  }
  v5 = sub_22F2F34EC(a1, v4);
  if ((v5 & 1) == 0)
    return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
  return 0;
}

uint64_t sub_22F300350(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v5 = 0;
    return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
  }
  v5 = sub_22F2F34EC(a1, v4);
  if ((v5 & 1) == 0)
    return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
  return 0;
}

uint64_t sub_22F3003A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3003F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300448(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE38(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300494(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F3004E0(_QWORD **a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  void *v11[2];
  int v12[3];
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2[3];
  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v4;
  v12[2] = v5;
  v16 = v18;
  v17 = 0x1000000000;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  v8.n128_u64[0] = 0;
  v8.n128_u32[2] = 0;
  v9 = 0;
  v13 = v15;
  v14 = 0x1000000000;
  v6 = 0;
  if ((sub_22E8C9290((uint64_t)a1, (uint64_t)a2, (uint64_t)&v16, (uint64_t)&v10, &v8, (uint64_t)&v13) & 1) == 0)
    v6 = sub_22ECA7F24(*a1, a2 + 20, 2u, a2 + 22, 2, (uint64_t)&v10, (__int128 *)&v8, a2[24], (uint64_t)v16, v17, v12, (unsigned __int8 **)v13, v14);
  if (v13 != v15)
    free(v13);
  if (HIDWORD(v11[1]))
    free(v11[0]);
  if (v16 != v18)
    free(v16);
  return v6;
}

_DWORD *sub_22F300628(uint64_t *a1, int *a2)
{
  return sub_22F33E5F4(*a1, *a2, a2[1]);
}

uint64_t sub_22F300638(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300684(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3006D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300724(_QWORD **a1, uint64_t a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  void *v18[2];
  int v19[3];
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 4);
  v19[0] = *(_DWORD *)a2;
  v19[1] = v4;
  v19[2] = v5;
  v23 = v25;
  v24 = 0x1000000000;
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  *(_QWORD *)&v15 = 0;
  DWORD2(v15) = 0;
  v16 = 0;
  v20 = v22;
  v21 = 0x1000000000;
  v6 = 0;
  if ((sub_22E8C9658((uint64_t)a1, a2, (uint64_t)&v23, (uint64_t)&v17, (__n128 *)&v15, (uint64_t)&v20) & 1) == 0)
  {
    v11 = v17;
    sub_22F0AB718(&v12);
    v9 = v15;
    v10 = v16;
    v6 = sub_22EC94100(*a1, a2 + 80, 5u, a2 + 100, 5, (uint64_t)&v11, &v9, *(_DWORD *)(a2 + 120), *(_BYTE *)(a2 + 124), v8, *(_DWORD *)(a2 + 128), *(unsigned int *)(a2 + 132), (uint64_t)v23, v24, v19, 0, (unsigned __int8 **)v20, v21);
    if (v14)
      free(v13);
  }
  if (v20 != v22)
    free(v20);
  if (HIDWORD(v18[1]))
    free(v18[0]);
  if (v23 != v25)
    free(v23);
  return v6;
}

uint64_t sub_22F3008CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300918(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300964(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3009B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F3009FC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300A48(_QWORD **a1, int *a2)
{
  return sub_22ECA0CE8(*a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22F300A60(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v5 = 0;
    return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  }
  v5 = sub_22F2F34EC(a1, v4);
  if ((v5 & 1) == 0)
    return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return 0;
}

uint64_t sub_22F300AB8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E49C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300B04(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300B50(_QWORD **a1, int *a2)
{
  return sub_22ECA0A68(*a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22F300B68(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300BB4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300C18(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22F300C64(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300CB0(_QWORD **a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  void *v11[2];
  int v12[3];
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2[3];
  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v4;
  v12[2] = v5;
  v16 = v18;
  v17 = 0x1000000000;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  v8.n128_u64[0] = 0;
  v8.n128_u32[2] = 0;
  v9 = 0;
  v13 = v15;
  v14 = 0x1000000000;
  v6 = 0;
  if ((sub_22E8C9290((uint64_t)a1, (uint64_t)a2, (uint64_t)&v16, (uint64_t)&v10, &v8, (uint64_t)&v13) & 1) == 0)
    v6 = sub_22ECA7CAC(*a1, a2 + 20, 2u, a2 + 22, 2, (uint64_t)&v10, (__int128 *)&v8, a2[24], (uint64_t)v16, v17, v12, (unsigned __int8 **)v13, v14);
  if (v13 != v15)
    free(v13);
  if (HIDWORD(v11[1]))
    free(v11[0]);
  if (v16 != v18)
    free(v16);
  return v6;
}

uint64_t sub_22F300DF8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22F300E44(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22F2F34EC(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22F2F34EC(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_22F300FB4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, uint64_t a14)
{
  char v22;
  uint64_t v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  if ((sub_22EACCC94(*a1) & 1) != 0)
    return 1;
  else
    return sub_22EACC4D8(*a1, a3, a2, a4, a5, v23, 0, a8, a9, a10, a11, v22, a13, a14);
}

unint64_t *sub_22F3010F0(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  int64x2_t v16;
  _QWORD v17[6];

  v2 = (unint64_t *)a2;
  v17[5] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22F2F7B28((_QWORD **)a1, a2);
  v4 = (uint64_t)(a2 + 1);
  v15 = (_QWORD *)*a2;
  v16.i64[0] = (uint64_t)(a2 + 1);
  sub_22F116708((uint64_t *)&v15);
  v5 = *v2;
  if (*v2 >= 0x10)
  {
    v15 = v17;
    v16 = vdupq_n_s64(0x20uLL);
    v17[4] = 0;
    v7 = sub_22F11598C(v5);
    if (v16.i64[0] < (unint64_t)v7)
      sub_22EEB52C0((uint64_t *)&v15, v7);
    v8 = v5 & 0xF;
    if ((v5 & 0xF) != 0)
      v9 = v5;
    else
      v9 = 0;
    if ((v5 & 0xF) != 0)
    {
      v5 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
      v10 = sub_22F115954(v5 & 0xFFFFFFFFFFFFFFF0);
      v4 = (v4 + (unint64_t)v10 - 1) / v10 * v10;
    }
    v11 = sub_22F2FC098(a1, (uint64_t)&v15, v5, v4, 1);
    if (v11 < 0x10 || (v12 = v11, v8) && (v12 = sub_22E8C1750((_QWORD **)a1, v11, v9), v12 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v13 = *(_QWORD *)(*a1 + 88);
      v14 = v16.i64[0] - v16.i64[1];
      v2 = sub_22EF5DB78(v13, v12, v16.i32[0] - v16.i32[2]);
      memcpy(v2 + 1, (char *)v15 + v16.i64[1], v14);
    }
    if (v15 != v17)
    {
      if (v15)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22F3012E8(_QWORD **a1, uint64_t a2, uint64_t a3, _BOOL8 a4, int a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  __int128 v19;
  void *v20[2];

  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, a6, a7);
  v17 = sub_22EC225CC(*a1, a2, a3, a5, a4, (uint64_t)&v19, a8, a9, a10, a11, 0, 0);
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v17;
}

uint64_t sub_22F3013A4(uint64_t *a1, unsigned int *a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  void *v20[2];
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E8C1D88(a1, *((_QWORD *)a2 + 2), *((void **)a2 + 3), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*((_BYTE *)a2 + 2) & 4) != 0 ? a2[16] : 0;
  sub_22E8C64D0((uint64_t)a1, (__n128 *)a2 + 2, &v19);
  if (!v19.n128_u64[0])
    return 1;
  v13 = *a2;
  if ((v13 & 0x40000) == 0)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v14 = a2[14];
  if (!v14)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v15 = a2[15];
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  v21[64] = v14;
  v21[65] = v15;
  v16 = (uint64_t)&a2[4 * ((v13 >> 18) & 1) + 14];
  if ((sub_22E8C9A74((uint64_t)a1, v16, v16 + 32 * a2[17]) & 1) != 0)
    v17 = 1;
  else
    v17 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, (uint64_t)v20, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  return v17;
}

uint64_t sub_22F301540(_QWORD **a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, char a7, _QWORD *a8)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  void *v19[2];

  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  sub_22E8ACE30((uint64_t)&v18, a2, a3);
  v14 = *a1;
  if (a6 || a4)
    v15 = sub_22ED665B8(v14, (uint64_t *)&v18, a4, a5, a6);
  else
    v15 = sub_22EB23760((uint64_t)v14, (unsigned int *)&v18, a5, a7, 0, a8);
  v16 = v15;
  if (HIDWORD(v19[1]))
    free(v19[0]);
  return v16;
}

uint64_t sub_22F3015EC(uint64_t *a1, unsigned __int8 *a2)
{
  unint64_t *v4;
  uint64_t *v6;
  int *v7;
  __n128 v8;
  uint64_t v9;

  v4 = sub_22F2F7B28((_QWORD **)a1, *((uint64_t **)a2 + 3));
  if (!v4)
    return 1;
  v6 = (uint64_t *)v4;
  v7 = (int *)sub_22EFFB374(a2);
  sub_22F2F34EC(a1, v7, v8);
  if ((v9 & 1) != 0)
    return 1;
  else
    return sub_22F301678((_QWORD **)a1, *((_DWORD *)a2 + 8), *a2, *((_QWORD *)a2 + 5), v6, HIDWORD(*((_QWORD *)a2 + 5)), HIDWORD(*((_QWORD *)a2 + 5)), v9 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 9));
}

uint64_t sub_22F301678(_QWORD **a1, unsigned int a2, int a3, unsigned int a4, uint64_t *a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9)
{
  return sub_22E95ADCC(*a1, a2, word_22F463858[a3 - 146], a5, a8, a4 | ((unint64_t)a6 << 32), a7 | ((unint64_t)a9 << 32));
}

uint64_t sub_22F3016B4(uint64_t *a1, unint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  __int128 v16;
  void *v17[2];

  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  sub_22E8ACE30((uint64_t)&v16, a2, a3);
  v14 = sub_22F345EB4(*a1, (unsigned int *)&v16, a4, a5, a6, a7, a8);
  if (HIDWORD(v17[1]))
    free(v17[0]);
  if ((v14 & 1) != 0)
    return 1;
  else
    return v14;
}

uint64_t sub_22F301748(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  __int128 v14;
  void *v15[2];

  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  sub_22E8ACE30((uint64_t)&v14, a2, a3);
  v12 = sub_22EB24A3C(*a1, &v14, a5, a4, a6, a7, 0);
  if (HIDWORD(v15[1]))
    free(v15[0]);
  return v12;
}

uint64_t sub_22F3017D4(_QWORD **a1, uint64_t a2, int a3, _BOOL8 a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v12 = a6;
  v13 = a5;
  sub_22EFC6D6C((uint64_t)&v14, a6);
  v10 = sub_22EC225CC(*a1, a2, *(_QWORD *)(a2 + 8), a3, a4, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
  if (HIDWORD(v16[1]))
    free(v16[0]);
  return v10;
}

void sub_22F301878(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_22F30195C(a1);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v7 = *(_QWORD *)a1 + 88 * a2;
        v8 = *(_QWORD *)a1 + 88 * v2;
        do
        {
          *(_OWORD *)v8 = 0uLL;
          *(_OWORD *)(v8 + 16) = 0uLL;
          *(_QWORD *)(v8 + 80) = 0;
          *(_OWORD *)(v8 + 48) = 0uLL;
          *(_OWORD *)(v8 + 64) = 0uLL;
          *(_OWORD *)(v8 + 32) = 0uLL;
          *(_QWORD *)(v8 + 8) = v8 + 24;
          *(_DWORD *)(v8 + 20) = 4;
          v8 += 88;
        }
        while (v8 != v7);
      }
    }
    else
    {
      v5 = (void **)(*(_QWORD *)a1 + 88 * v2 - 80);
      v6 = 88 * a2 - 88 * v2;
      do
      {
        if (v5 + 2 != *v5)
          free(*v5);
        v5 -= 11;
        v6 += 88;
      }
      while (v6);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_22F30195C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F3019C8((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F3019C8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 88 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 16) = 0x400000000;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_22E5DE08C(a2 + v5 + 8, v9 + 8);
      v5 += 88;
    }
    while (v9 + 88 != v7);
    v10 = *((_DWORD *)a1 + 2);
    if (v10)
    {
      v11 = *a1;
      v12 = 88 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 80);
        if ((void *)(v11 + v12 - 64) != v13)
          free(v13);
        v12 -= 88;
      }
      while (v12);
    }
  }
}

char **sub_22F301A90(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F301B04(uint64_t *a1, _QWORD *a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v25;
  __int128 v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  __int16 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v19 = sub_22EC2624C(*a1, a2, a4);
  if (*(_QWORD *)(a9 + 40))
  {
    v26 = 0u;
    *(_OWORD *)v27 = 0u;
    sub_22E8ACE30((uint64_t)&v26, a5, a6);
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((_DWORD)a4
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v22 = 1;
    }
    else
    {
      v21 = *a1;
      *(_QWORD *)&v28 = 0;
      *((_QWORD *)&v28 + 1) = (char *)&v29 + 8;
      *(_QWORD *)&v29 = 0x800000000;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v21;
      v34 = *a8;
      v35 = *((_QWORD *)a8 + 2);
      v36 = xmmword_22F463A40;
      v37 = 16842752;
      v38 = 0;
      v39 = 0;
      sub_22EC56024((uint64_t)&v28);
      sub_22E8BB8FC((uint64_t)&v28, a10);
      sub_22EC561E4((uint64_t)&v28);
      v22 = sub_22EC24AB8(*a1, v19 & 0xFFFFFFFFFFFFFFFELL, v20, a3, a4, (uint64_t *)&v26, a7, a12, (uint64_t)&v28, a11, 0, 0, 0);
      sub_22E8BAFF0((uint64_t)&v28);
    }
    if (HIDWORD(v27[1]))
    {
      v23 = v27[0];
LABEL_7:
      free(v23);
    }
  }
  else
  {
    v25 = (unint64_t)sub_22EB24398(*a1, v19 & 0xFFFFFFFFFFFFFFFELL, a5, a10, a9);
    if ((v25 & 1) != 0)
      return 1;
    v28 = 0u;
    v29 = 0u;
    v22 = sub_22EC25974(*a1, v25 & 0xFFFFFFFFFFFFFFFELL, a4, a3, &v28, a9, ((unint64_t)*(unsigned int *)(a10 + 28) >> 13) & 3 | a10, a8);
    if (HIDWORD(v29))
    {
      v23 = (void *)v29;
      goto LABEL_7;
    }
  }
  return v22;
}

uint64_t sub_22F301D2C(uint64_t **a1, _QWORD *a2, uint64_t *a3, unsigned int a4, unsigned __int8 **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v10 = a4;
  if (a4)
  {
    v13 = 1;
    while (1)
    {
      v14 = *a3++;
      v15 = sub_22ECFABE8(*a1, *a5, v14, 1, 0);
      if ((v15 & 1) != 0)
        break;
      v16 = v18;
      if (v18 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v18;
      }
      v19[v16] = v15 & 0xFFFFFFFFFFFFFFFELL;
      ++v18;
      ++a5;
      if (!--v10)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v13 = sub_22E3CD3D4((*a1)[11] + 2032, 48, 3);
    sub_22F0615BC(v13, (*a1)[11], a2, v19, v18, a7);
  }
  return v13;
}

uint64_t sub_22F301E88(_QWORD **a1, uint64_t a2, int a3, int a4, _BOOL8 a5)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v12 = sub_22E3CB704(*(llvm::StringMapImpl **)((*a1)[11] + 15192), "isa", 3uLL);
  v13 = a3;
  sub_22EFC6D6C((uint64_t)&v14, v12);
  v10 = sub_22EC225CC(*a1, a2, *(_QWORD *)(a2 + 8), a4, a5, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
  if (HIDWORD(v16[1]))
    free(v16[0]);
  return v10;
}

unint64_t sub_22F301F4C(_QWORD **a1, uint64_t a2, uint64_t a3, int a4, _BOOL8 a5, int a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  void *v18[2];

  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v14 = *(_QWORD *)(a3 + 40);
  v15 = a4;
  sub_22EFC6D6C((uint64_t)&v16, v14);
  v11 = sub_22EC225CC(*a1, a2, *(_QWORD *)(a2 + 8), a4, a5, (uint64_t)&v17, 0, 0, (uint64_t)&v14, 0, 0, 0);
  v12 = v11;
  if (a6 && v11 >= 2)
    *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v12;
}

uint64_t sub_22F302010(_QWORD **a1, unsigned int a2, uint64_t a3, int *a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 **a9, unint64_t a10, unsigned int a11)
{
  _QWORD *v11;

  v11 = *a1;
  if ((*(_BYTE *)(a7 + 58) & 2) != 0)
    return sub_22EC2DA20((uint64_t)v11, 0, a6, a2, a3, a7, a8, a8, a4, a5, a11, (uint64_t)a9, a10, 0);
  else
    return sub_22EC2F730(v11, 0, a6, a2, a3, a7, a8, a8, a4, a5, a11, a9, a10, SHIDWORD(a10), 0);
}

uint64_t sub_22F3020A0(_QWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];

  v12 = 0u;
  *(_OWORD *)v13 = 0u;
  v9 = *(_QWORD *)(a3 + 40);
  v10 = a4;
  sub_22EFC6D6C((uint64_t)&v11, v9);
  v7 = sub_22EC225CC(*a1, a2, *(_QWORD *)(a2 + 8), a4, 0, (uint64_t)&v12, 0, 0, (uint64_t)&v9, 0, 0, 0);
  if (HIDWORD(v13[1]))
    free(v13[0]);
  return v7;
}

uint64_t sub_22F302138(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  __int128 v19;
  void *v20[2];

  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, a6, a7);
  v17 = sub_22EC24AB8(*a1, a2, a3, a4, a5, (uint64_t *)&v19, a8, a9, a10, a11, 0, 0, 0);
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v17;
}

unint64_t *sub_22F3021FC(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t *result;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3 == 1)
    return (unint64_t *)sub_22F332794(*a1, (uint64_t)v4);
  result = sub_22F2F7B28((_QWORD **)a1, v4);
  if (result)
    return (unint64_t *)sub_22F3325E4(*a1, (unint64_t)result);
  return result;
}

uint64_t sub_22F30225C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v3 & 2) != 0)
    return sub_22F332940(*a1, v4);
  v6 = sub_22F2F34EC(a1, v4);
  if ((v6 & 1) != 0)
    return 0;
  else
    return sub_22F3327E4(*a1, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F3022B8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  uint64_t v27;

  v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
  v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
  v13 = sub_22EFCE144(v12 + 40, v10);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0 && v14)
    v14 = (_QWORD *)*v14;
  v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
  v16 = *(_QWORD *)(*a1 + 88);
  v17 = *(_QWORD *)(v16 + 16864);
  v27 = 0;
  sub_22EFF6AD4(v15, v16, (uint64_t)v14, 0, v17, 0, a2, &v27, 0);
  v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
  v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
  v20 = *(_QWORD *)(*a1 + 88);
  v21 = sub_22E8BBA74((unint64_t)v14);
  v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
  if (v22)
    v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
  else
    v23 = 0;
  if (!v23)
    v22 = sub_22F10CF48(v22);
  v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
  v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, a3, a4, v21, v24, a5, 0, 0, 0);
  return sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
}

unint64_t sub_22F30245C(uint64_t *a1, uint64_t a2, unsigned int *a3, char a4, _QWORD *a5)
{
  unint64_t result;

  result = sub_22F3013A4(a1, a3, a4, a5);
  if (result >= 2)
    return sub_22EB27A20((_QWORD *)*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), result & 0xFFFFFFFFFFFFFFFELL);
  return result;
}

uint64_t sub_22F3024AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  v6 = a2[2];
  if ((!v6 || sub_22E8AF4BC(a1, v6, a3))
    && sub_22E8AF4BC(a1, a2[8], a3)
    && (v7 = sub_22F3F2E44((uint64_t)a2), sub_22E8AF4BC(a1, v7, a3)))
  {
    return sub_22E8AF4BC(a1, a2[9], a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F302540(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 48);
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (v3 & 4) != 0)
    a2 = v3 & 0xFFFFFFFFFFFFFFF8;
  return sub_22E8CE528(a1, a2, a3);
}

uint64_t sub_22F302564(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) == 0)
    return 1;
  if (*(_QWORD *)(a2 + 152))
    return (sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 152), 0) & 1) != 0;
  result = sub_22E8CC128(a1, a2 + 80);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22F3025B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  if (sub_22EFCB718(a2))
    v4 = sub_22EFCAE04(a2);
  else
    v4 = 0;
  result = sub_22E8CCCCC(a1, v4);
  if ((_DWORD)result)
  {
    v6 = sub_22F255ABC(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v7;
      v9 = v6 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t sub_22F302640(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unint64_t **)(a2 + 96);
  if (!v4 || (result = sub_22E8CC284(a1, *v4, (uint64_t)(v4 + 1)), (_DWORD)result))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    result = sub_22E8AF4BC(a1, v6, 0);
    if ((_DWORD)result)
    {
      v7 = *(unsigned int *)(a2 + 112);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
        while (1)
        {
          if (*v9)
          {
            result = sub_22E8AF4BC(a1, *v9, 0);
            if (!(_DWORD)result)
              break;
          }
          v9 += 2;
          v8 -= 16;
          if (!v8)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        v10 = sub_22F255ABC(a2);
        if (v10 == v11)
        {
          return 1;
        }
        else
        {
          v12 = v11;
          v13 = v10 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v13 - 8));
            if ((_DWORD)result)
              v14 = v13 == v12;
            else
              v14 = 1;
            v13 += 8;
          }
          while (!v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302718(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = sub_22F3AD7DC(a2);
  result = sub_22E8AF4BC(a1, v4, 0);
  if ((_DWORD)result)
  {
    v6 = sub_22F255ABC(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v7;
      v9 = v6 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t sub_22F302798(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22E8CCCCC(a1, a2 + 40);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F302808(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F3028A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    if ((sub_22E8CC284(a1, *v5, (uint64_t)(v5 + 1)) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_22E8CAC80(a1);
    if (!(_DWORD)result)
      return result;
  }
  if (sub_22EFCB718(a2))
    v7 = sub_22EFCAE04(a2);
  else
    v7 = 0;
  result = sub_22E8CCCCC(a1, v7);
  if ((_DWORD)result)
  {
    v8 = sub_22F255ABC(a2);
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      v10 = v9;
      v11 = v8 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
        if ((_DWORD)result)
          v12 = v11 == v10;
        else
          v12 = 1;
        v11 += 8;
      }
      while (!v12);
    }
  }
  return result;
}

uint64_t sub_22F302974(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  result = sub_22F303F6C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 40);
    v14 = v5;
    v15 = v6;
    result = sub_22E8CC1C8(a1, &v13);
    if ((_DWORD)result)
    {
      v7 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22E8CCCCC(a1, v7);
      if ((_DWORD)result)
      {
        v8 = sub_22F255ABC(a2);
        if (v8 == v9)
        {
          return 1;
        }
        else
        {
          v10 = v9;
          v11 = v8 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
            if ((_DWORD)result)
              v12 = v11 == v10;
            else
              v12 = 1;
            v11 += 8;
          }
          while (!v12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302A44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22E8CCCCC(a1, a2 + 48);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F302AB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F303F6C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F302B28(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unint64_t **)(a2 + 88);
  if (!v4 || (result = sub_22E8CC284(a1, *v4, (uint64_t)(v4 + 1)), (_DWORD)result))
  {
    v6 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a2 + 96);
      v8 = 8 * v6;
      while ((sub_22E8CAC80(a1) & 1) != 0)
      {
        v7 += 8;
        v8 -= 8;
        if (!v8)
          goto LABEL_7;
      }
      return 0;
    }
    else
    {
LABEL_7:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2)
        || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2),
            result = sub_22E8AF4BC(a1, v9, 0),
            (_DWORD)result))
      {
        v10 = sub_22F255ABC(a2);
        if (v10 == v11)
        {
          return 1;
        }
        else
        {
          v12 = v11;
          v13 = v10 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v13 - 8));
            if ((_DWORD)result)
              v14 = v13 == v12;
            else
              v14 = 1;
            v13 += 8;
          }
          while (!v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302C10(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;

  v4 = *(unint64_t **)(a2 + 64);
  if (v4)
  {
    if ((sub_22E8CC284(a1, *v4, (uint64_t)(v4 + 1)) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 56));
    if (!(_DWORD)result)
      return result;
  }
  v5 = sub_22F255ABC(a2);
  if (v5 == v6)
    return 1;
  v7 = v6;
  v8 = v5 + 8;
  do
  {
    result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
    if ((_DWORD)result)
      v10 = v8 == v7;
    else
      v10 = 1;
    v8 += 8;
  }
  while (!v10);
  return result;
}

uint64_t sub_22F302CA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F304E64(a1, *(_QWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F302D44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F304E64(a1, *(_QWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 64), 0);
    if ((_DWORD)result)
    {
      v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22E8CCCCC(a1, v5);
      if ((_DWORD)result)
      {
        v6 = sub_22F255ABC(a2);
        if (v6 == v7)
        {
          return 1;
        }
        else
        {
          v8 = v7;
          v9 = v6 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
            if ((_DWORD)result)
              v10 = v9 == v8;
            else
              v10 = 1;
            v9 += 8;
          }
          while (!v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302DF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F304E64(a1, *(_QWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    result = sub_22E8CAC80(a1);
    if ((_DWORD)result)
    {
      v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22E8CCCCC(a1, v5);
      if ((_DWORD)result)
      {
        v6 = sub_22F255ABC(a2);
        if (v6 == v7)
        {
          return 1;
        }
        else
        {
          v8 = v7;
          v9 = v6 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
            if ((_DWORD)result)
              v10 = v9 == v8;
            else
              v10 = 1;
            v9 += 8;
          }
          while (!v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302EA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22E8CAC80(a1);
  if ((_DWORD)result)
  {
    result = sub_22F304E64(a1, *(_QWORD *)(a2 + 56));
    if ((_DWORD)result)
    {
      v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22E8CCCCC(a1, v5);
      if ((_DWORD)result)
      {
        v6 = sub_22F255ABC(a2);
        if (v6 == v7)
        {
          return 1;
        }
        else
        {
          v8 = v7;
          v9 = v6 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
            if ((_DWORD)result)
              v10 = v9 == v8;
            else
              v10 = 1;
            v9 += 8;
          }
          while (!v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F302F50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = sub_22E8CAC80(a1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 72) < 8uLL || (*(_QWORD *)(a2 + 72) & 6) == 2;
    if (v5 || (v7 = sub_22F259350(a2), result = sub_22E8CCBB0(a1, (uint64_t)v7), (_DWORD)result))
    {
      result = sub_22F304E64(a1, *(_QWORD *)(a2 + 56));
      if ((_DWORD)result)
      {
        v6 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
        result = sub_22E8CCCCC(a1, v6);
        if ((_DWORD)result)
        {
          v8 = sub_22F255ABC(a2);
          if (v8 == v9)
          {
            return 1;
          }
          else
          {
            v10 = v9;
            v11 = v8 + 8;
            do
            {
              result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
              if ((_DWORD)result)
                v12 = v11 == v10;
              else
                v12 = 1;
              v11 += 8;
            }
            while (!v12);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F303030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 120);
  if ((v4 & 4) != 0)
  {
    v14 = 0;
    while (1)
    {
      v15 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v14 >= *(unsigned int *)(v15 + 16))
        break;
      sub_22F304E64(a1, *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * v14++));
      v4 = *(_QWORD *)(a2 + 120);
      if ((v4 & 4) == 0)
        goto LABEL_2;
    }
    v5 = *(_QWORD *)v15;
    v6 = *(_QWORD *)(v15 + 8);
  }
  else
  {
LABEL_2:
    v5 = 0;
    v6 = 0;
  }
  result = sub_22F303F6C(a1, v5, v6);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a2 + 128);
    if ((v8 & 4) == 0
      || (v8 & 0xFFFFFFFFFFFFFFF8) == 0
      || (result = sub_22E8CC284(a1, *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) + 8),
          (_DWORD)result))
    {
      result = sub_22E8CCCCC(a1, a2 + 64);
      if ((_DWORD)result)
      {
        v9 = sub_22F255ABC(a2);
        if (v9 == v10)
        {
          return 1;
        }
        else
        {
          v11 = v10;
          v12 = v9 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v11;
            else
              v13 = 1;
            v12 += 8;
          }
          while (!v13);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F30311C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F304F08(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22E8CCCCC(a1, a2 + 64);
    if ((_DWORD)result)
    {
      v5 = sub_22F255ABC(a2);
      if (v5 == v6)
      {
        return 1;
      }
      else
      {
        v7 = v6;
        v8 = v5 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
          if ((_DWORD)result)
            v9 = v8 == v7;
          else
            v9 = 1;
          v8 += 8;
        }
        while (!v9);
      }
    }
  }
  return result;
}

uint64_t sub_22F303198(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F304F80(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22E8CCCCC(a1, a2 + 64);
    if ((_DWORD)result)
    {
      v5 = sub_22F255ABC(a2);
      if (v5 == v6)
      {
        return 1;
      }
      else
      {
        v7 = v6;
        v8 = v5 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
          if ((_DWORD)result)
            v9 = v8 == v7;
          else
            v9 = 1;
          v8 += 8;
        }
        while (!v9);
      }
    }
  }
  return result;
}

uint64_t sub_22F303214(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unint64_t ***)(a2 + 160);
  if (!v4 || !*v4 || (result = sub_22E8CC284(a1, **v4, (uint64_t)(*v4 + 1)), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 120);
    if ((v6 & 4) != 0)
    {
      v9 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      v7 = *v9;
      v8 = v9[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    result = sub_22F303F6C(a1, v7, v8);
    if ((_DWORD)result)
    {
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E8CCCCC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      v10 = sub_22F255ABC(a2);
      if (v10 == v11)
        return 1;
      v12 = v11;
      v13 = v10 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v13 - 8));
        if ((_DWORD)result)
          v14 = v13 == v12;
        else
          v14 = 1;
        v13 += 8;
      }
      while (!v14);
    }
  }
  return result;
}

uint64_t sub_22F3032E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_20;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E8CC284(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_20:
    if (sub_22EFCB718(a2))
      v7 = sub_22EFCAE04(a2);
    else
      v7 = 0;
    result = sub_22E8CCCCC(a1, v7);
    if ((_DWORD)result)
    {
      v8 = sub_22F255ABC(a2);
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
          if ((_DWORD)result)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F30339C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E8CC284(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
    v7 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v7);
    if ((_DWORD)result)
    {
      v8 = sub_22F255ABC(a2);
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
          if ((_DWORD)result)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F30344C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F303F6C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F3034EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F303F6C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F30358C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22E8CD0B4(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F3035F8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F304FF8(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F303690(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F3050CC(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F303728(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  result = sub_22F3050CC(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 100);
    if ((_DWORD)v5)
    {
      v6 = a2 + 104;
      v7 = 8 * v5;
      while ((sub_22E8CAC80(a1) & 1) != 0)
      {
        v6 += 8;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
      return 0;
    }
    else
    {
LABEL_6:
      if (sub_22EFCB718(a2))
        v8 = sub_22EFCAE04(a2);
      else
        v8 = 0;
      result = sub_22E8CCCCC(a1, v8);
      if ((_DWORD)result)
      {
        v9 = sub_22F255ABC(a2);
        if (v9 == v10)
        {
          return 1;
        }
        else
        {
          v11 = v10;
          v12 = v9 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v11;
            else
              v13 = 1;
            v12 += 8;
          }
          while (!v13);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F3037F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;

  result = sub_22F3050CC(a1, a2);
  if ((_DWORD)result)
  {
    if (!sub_22EFBF4CC(a2)
      || (*(_DWORD *)(a2 + 96) & 0x600) != 0x400
      || (v5 = sub_22F3AC2AC(a2), result = sub_22E8AF4BC(a1, v5, 0), (_DWORD)result))
    {
      if (!sub_22EFBF4CC(a2) || (*(_DWORD *)(a2 + 96) & 0x600) == 0x200 || (*(_DWORD *)(a2 + 96) & 0x600) == 0x400)
        goto LABEL_29;
      v12 = sub_22EFBC5B4(a2);
      v13 = v12;
      if (v12 && (*(_BYTE *)v12 & 0xFE) == 0xAC)
        v13 = *(_QWORD *)(v12 + 16);
      result = sub_22E8AF4BC(a1, v13, 0);
      if ((_DWORD)result)
      {
LABEL_29:
        if (sub_22EFCB718(a2))
          v6 = sub_22EFCAE04(a2);
        else
          v6 = 0;
        result = sub_22E8CCCCC(a1, v6);
        if ((_DWORD)result)
        {
          v7 = sub_22F255ABC(a2);
          if (v7 == v8)
          {
            return 1;
          }
          else
          {
            v9 = v8;
            v10 = v7 + 8;
            do
            {
              result = sub_22E8CCD68(a1, *(_QWORD *)(v10 - 8));
              if ((_DWORD)result)
                v11 = v10 == v9;
              else
                v11 = 1;
              v10 += 8;
            }
            while (!v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F303924(uint64_t a1, unint64_t a2)
{
  unint64_t **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(unint64_t ***)(a2 + 120);
  if (!v4 || !*v4 || (result = sub_22E8CC284(a1, **v4, (uint64_t)(*v4 + 1)), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if ((v6 & 4) != 0)
    {
      v9 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      v7 = *v9;
      v8 = v9[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    result = sub_22F303F6C(a1, v7, v8);
    if ((_DWORD)result)
    {
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      if (sub_22EFCB718(a2))
        v10 = sub_22EFCAE04(a2);
      else
        v10 = 0;
      result = sub_22E8CCCCC(a1, v10);
      if (!(_DWORD)result)
        return result;
      v11 = sub_22F255ABC(a2);
      if (v11 == v12)
        return 1;
      v13 = v12;
      v14 = v11 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v14 - 8));
        if ((_DWORD)result)
          v15 = v14 == v13;
        else
          v15 = 1;
        v14 += 8;
      }
      while (!v15);
    }
  }
  return result;
}

uint64_t sub_22F303A10(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 56), 0);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22E8CCCCC(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F303AB0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(_DWORD **)(a2 + 56);
  v7 = *v4;
  v6 = (uint64_t *)(v4 + 4);
  v5 = v7;
  if (!v7)
    return sub_22E8CC828(a1, *(_QWORD *)(a2 + 48));
  v8 = 8 * v5;
  while ((sub_22E8CD478(a1, *v6) & 1) != 0)
  {
    ++v6;
    v8 -= 8;
    if (!v8)
      return sub_22E8CC828(a1, *(_QWORD *)(a2 + 48));
  }
  return 0;
}

uint64_t sub_22F303B20(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;

  if (sub_22E8AF4BC(a1, a2[11], 0) && ((v4 = a2[12]) == 0 || sub_22E8AF4BC(a1, v4, 0)))
    return sub_22E8CC828(a1, a2[6]);
  else
    return 0;
}

uint64_t sub_22F303B80(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v4 = (_QWORD *)sub_22F3F327C(*(unsigned int **)(a2 + 40));
  v5 = sub_22F3F327C(*(unsigned int **)(a2 + 40));
  v6 = *(_DWORD **)(a2 + 40);
  v7 = (_QWORD *)(v5 + 8 * v6[1]);
  if (v7 != v4)
  {
    while ((sub_22E8AF4BC(a1, *v4, 0) & 1) != 0)
    {
      if (++v4 == v7)
      {
        v6 = *(_DWORD **)(a2 + 40);
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:
  v10 = *v6;
  v9 = (uint64_t *)(v6 + 4);
  v8 = v10;
  if (v10)
  {
    v11 = 8 * v8;
    while ((sub_22E8CD478(a1, *v9) & 1) != 0)
    {
      ++v9;
      v11 -= 8;
      if (!v11)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  if (sub_22EFCB718(a2))
    v12 = sub_22EFCAE04(a2);
  else
    v12 = 0;
  result = sub_22E8CCCCC(a1, v12);
  if ((_DWORD)result)
  {
    v14 = sub_22F255ABC(a2);
    if (v14 == v15)
    {
      return 1;
    }
    else
    {
      v16 = v15;
      v17 = v14 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v17 - 8));
        if ((_DWORD)result)
          v18 = v17 == v16;
        else
          v18 = 1;
        v17 += 8;
      }
      while (!v18);
    }
  }
  return result;
}

uint64_t sub_22F303C94(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(_DWORD **)(a2 + 40);
  v7 = *v4;
  v6 = (uint64_t *)(v4 + 4);
  v5 = v7;
  if (v7)
  {
    v8 = 8 * v5;
    while ((sub_22E8CD478(a1, *v6) & 1) != 0)
    {
      ++v6;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (sub_22EFCB718(a2))
      v9 = sub_22EFCAE04(a2);
    else
      v9 = 0;
    result = sub_22E8CCCCC(a1, v9);
    if ((_DWORD)result)
    {
      v11 = sub_22F255ABC(a2);
      if (v11 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v12;
        v14 = v11 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v14 - 8));
          if ((_DWORD)result)
            v15 = v14 == v13;
          else
            v15 = 1;
          v14 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t sub_22F303D58(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = (_QWORD *)sub_22F3F327C(*(unsigned int **)(a2 + 40));
  v5 = sub_22F3F327C(*(unsigned int **)(a2 + 40)) + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 40) + 4);
  if ((_QWORD *)v5 == v4)
  {
LABEL_4:
    if (sub_22EFCB718(a2))
      v6 = sub_22EFCAE04(a2);
    else
      v6 = 0;
    result = sub_22E8CCCCC(a1, v6);
    if ((_DWORD)result)
    {
      v8 = sub_22F255ABC(a2);
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          result = sub_22E8CCD68(a1, *(_QWORD *)(v11 - 8));
          if ((_DWORD)result)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
      }
    }
  }
  else
  {
    while ((sub_22E8AF4BC(a1, *v4, 0) & 1) != 0)
    {
      if (++v4 == (_QWORD *)v5)
        goto LABEL_4;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F303E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = sub_22EFCAE04(a2);
  result = sub_22E8CCCCC(a1, v4);
  if ((_DWORD)result)
  {
    v6 = sub_22F255ABC(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v7;
      v9 = v6 + 8;
      do
      {
        result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t sub_22F303EB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
  if ((_DWORD)result)
  {
    result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 48), 0);
    if ((_DWORD)result)
    {
      v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22E8CCCCC(a1, v5);
      if ((_DWORD)result)
      {
        v6 = sub_22F255ABC(a2);
        if (v6 == v7)
        {
          return 1;
        }
        else
        {
          v8 = v7;
          v9 = v6 + 8;
          do
          {
            result = sub_22E8CCD68(a1, *(_QWORD *)(v9 - 8));
            if ((_DWORD)result)
              v10 = v9 == v8;
            else
              v10 = 1;
            v9 += 8;
          }
          while (!v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F303F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22F303F6C(a1, v5), (_DWORD)result))
  {
    v6 = sub_22F0AAB60(a2);
    if (v6 > 6)
      return 1;
    v7 = v6;
    result = 1;
    if (((1 << v7) & 0x67) == 0)
    {
      v9 = sub_22F0AB4E0((uint64_t)v11);
      result = sub_22E8CC284(a1, v9, v10);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22F304008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  result = sub_22E8CC284(a1, v5, (a3 + (unint64_t)v6 + 15) / v6 * v6);
  if ((_DWORD)result)
    return sub_22E8AF4BC(a1, *(_QWORD *)(a3 + 8), 0);
  return result;
}

uint64_t sub_22F30407C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22E8CC284(a1, v5, (a3 + (unint64_t)v6 + 11) / v6 * v6);
}

uint64_t sub_22F3040CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22E8CC284(a1, v5, (a3 + (unint64_t)v6 + 7) / v6 * v6);
}

uint64_t sub_22F30411C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22E8CC284(a1, v5, (a3 + (unint64_t)v6 + 3) / v6 * v6);
}

uint64_t sub_22F30416C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)(a2 + 40))
      return 1;
    result = sub_22F303F6C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
    if ((_DWORD)result)
    {
      sub_22F40B320(&v17, (uint64_t)v16);
      result = sub_22E8CC1C8(a1, v16);
      if ((_DWORD)result)
      {
        v7 = *(_DWORD *)(v17 + 20);
        if (!v7)
          return 1;
        v8 = 0;
        v9 = 24 * v7 - 24;
        v10 = 56;
        do
        {
          v11 = *(_QWORD *)(v18 + v10);
          v13 = *(_OWORD *)(v17 + v8 + 48);
          v14 = *(_QWORD *)(v17 + v8 + 64);
          v15 = v11;
          result = sub_22E8CCBB0(a1, (uint64_t)&v13);
          if (!(_DWORD)result)
            break;
          v10 += 8;
          v12 = v9 == v8;
          v8 += 24;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F30424C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 32);
  if (!v6 || (result = sub_22F303F6C(a1, v6, *(_QWORD *)(a3 + 8)), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = sub_22F115954(v7);
    return sub_22E8CC284(a1, v7, (a3 + (unint64_t)v8 + 15) / v8 * v8);
  }
  return result;
}

uint64_t sub_22F3042C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v19 = a3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = sub_22E47EE80(&v18);
  result = sub_22E8CC284(a1, v4, v5);
  if ((_DWORD)result)
  {
    v7 = v18;
    v8 = *(_QWORD *)(v18 + 16);
    if (*(_BYTE *)(v18 + 16) != 25 && (v8 & 0x3FFFC000000000) != 0)
    {
      v16 = 0;
      v17 = (unsigned __int16)(v8 >> 38);
      do
      {
        if (*(_QWORD *)(v19 + 8 * v16 + 16))
        {
          if ((sub_22E8CAC80(a1) & 1) == 0)
            return 0;
        }
        else if (v16 < (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38))
        {
          result = sub_22E8CC828(a1, *(_QWORD *)(v7 + 40 + 8 * v16));
          if (!(_DWORD)result)
            return result;
        }
        ++v16;
      }
      while (v17 != v16);
      v8 = *(_QWORD *)(v7 + 16);
    }
    if ((v8 & 0x3C0000000000000) == 0x80000000000000
      && (v10 = (_DWORD *)((v7 + 8 * (unsigned __int16)(v8 >> 38) + 4 * ((v8 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8),
          v13 = *v10,
          v12 = (unint64_t *)(v10 + 2),
          (v11 = v13) != 0))
    {
      v14 = 8 * v11;
      while ((sub_22E8CC828(a1, *v12) & 1) != 0)
      {
        ++v12;
        v14 -= 8;
        if (!v14)
          goto LABEL_12;
      }
      return 0;
    }
    else
    {
LABEL_12:
      v15 = sub_22F257D3C(v7);
      if (!v15)
        return 1;
      result = sub_22E8AF4BC(a1, v15, 0);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22F30441C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = sub_22F115954(v5);
  return sub_22E8CC284(a1, v5, (a3 + (unint64_t)v6 + 3) / v6 * v6);
}

uint64_t sub_22F30446C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_22E8AF4BC(a1, *(_QWORD *)(a3 + 16), 0)
    && sub_22E8AF4BC(a1, *(_QWORD *)(a3 + 24), 0))
  {
    return sub_22E8CC828(a1, *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F3044D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;

  v6 = *(_QWORD **)(a3 + 8);
  if (v6)
  {
    if ((sub_22E8CC284(a1, *v6, v6 + 1) & 1) != 0)
    {
LABEL_3:
      v7 = *(_QWORD *)(a2 + 32);
      v8 = sub_22F115954(v7);
      return sub_22E8CC284(a1, v7, (a3 + (unint64_t)v8 + 15) / v8 * v8);
    }
  }
  else if (sub_22E8CC828(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_22F30456C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v15;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) == a2
    || (v7 = ((HIWORD(*(_DWORD *)(a2 + 16)) & 0x3F8u) + 4 * (*(_DWORD *)(a2 + 16) >> 26) + 31) & 0x7F8,
        v8 = sub_22F115954(*(_QWORD *)(a2 + 24)),
        result = sub_22E8CC284(a1, v6, (a3 + (unint64_t)v8 + v7 - 1) / v8 * v8),
        (_DWORD)result))
  {
    v10 = (*(_DWORD *)(a2 + 16) >> 19) & 0x7F;
    if ((_DWORD)v10)
    {
      v11 = (_QWORD *)(a3 + 24);
      v12 = v10 - 1;
      do
      {
        v13 = (_QWORD *)*v11++;
        result = sub_22E8CC284(a1, *v13, v13 + 1);
        v15 = v12-- != 0;
      }
      while ((_DWORD)result && v15);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F30463C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_22F304A24(a1, *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    v7 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)(a2 + 40);
      v9 = (uint64_t *)(a3 + 16);
      v10 = v7 - 1;
      do
      {
        v11 = *v9++;
        v14 = *v8;
        v15 = *((_QWORD *)v8 + 2);
        v16 = v11;
        result = sub_22E8CCBB0(a1, (uint64_t)&v14);
        v13 = v10-- != 0;
        if (!(_DWORD)result)
          break;
        v8 = (__int128 *)((char *)v8 + 24);
      }
      while (v13);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F3046CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 48);
    if (!v5)
      return 1;
    result = sub_22E8AF4BC(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22F304714(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = (unsigned __int16)(v5 >> 38);
    if ((unsigned __int16)(v5 >> 38))
    {
      v7 = 8 * v6;
      v8 = (_QWORD *)(a2 + 40);
      while ((sub_22E8CC828(a1, *v8) & 1) != 0)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          v5 = *(_QWORD *)(a2 + 16);
          v6 = (unsigned __int16)(v5 >> 38);
          goto LABEL_7;
        }
      }
      return 0;
    }
LABEL_7:
    if ((v5 & 0x3C0000000000000) == 0x80000000000000)
    {
      v9 = (_DWORD *)((a2 + 40 + 8 * v6 + 4 * ((v5 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      v12 = *v9;
      v11 = v9 + 2;
      v10 = v12;
      if (v12)
      {
        v13 = 8 * v10;
        while ((sub_22E8CC828(a1, *v11) & 1) != 0)
        {
          ++v11;
          v13 -= 8;
          if (!v13)
            goto LABEL_12;
        }
        return 0;
      }
    }
LABEL_12:
    v14 = sub_22F257D3C(a2);
    if (!v14)
      return 1;
    result = sub_22E8AF4BC(a1, v14, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22F304804(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[6];
  if (v4 && !sub_22E8AF4BC(a1, v4, 0))
    return 0;
  v5 = a2[7];
  if (v5 && !sub_22E8AF4BC(a1, v5, 0))
    return 0;
  else
    return sub_22E8CC828(a1, a2[4]);
}

uint64_t sub_22F30486C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = a2[3];
  if (*(_QWORD **)(v4 & 0xFFFFFFFFFFFFFFF0) == a2 || (result = sub_22E8CC828(a1, v4), (_DWORD)result))
  {
    v6 = (a2[2] >> 19) & 0x7FLL;
    if (v6)
    {
      v7 = a2 + 6;
      v8 = 8 * v6 - 8;
      do
      {
        v9 = *v7++;
        result = sub_22E8CC828(a1, v9);
        if ((_DWORD)result)
          v10 = v8 == 0;
        else
          v10 = 1;
        v8 -= 8;
      }
      while (!v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F3048F0(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((*(_BYTE *)(a2 + 18) & 0x10) != 0)
  {
    do
    {
      a2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (a2)
      {
        v4 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0xFE) == 0x28)
          continue;
      }
      a2 = sub_22F10CF48(a2);
      v4 = *(_DWORD *)(a2 + 16);
    }
    while ((v4 & 0x100000) != 0);
  }
  return sub_22E8CC828(a1, *(_QWORD *)(a2 + 32));
}

uint64_t sub_22F304958(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22F304A24(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22F304958(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F304A24(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 6 && v2 != 0)
  {
    v5 = sub_22F304A84(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  if ((a2 & 6) != 4)
    return 1;
  if (!v2)
    return 1;
  result = sub_22F304A84(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22F304A84(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t result;
  unint64_t v8;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22F304A84(a1, v4), (_DWORD)result))
  {
    v5 = sub_22F0AAB60(a2);
    if (v5 > 6)
      return 1;
    v6 = v5;
    result = 1;
    if (((1 << v6) & 0x67) == 0)
    {
      v8 = (*(_BYTE *)(a2 + 8) & 4) != 0 ? *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0 : 0;
      result = sub_22E8CC828(a1, v8);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22F304B20(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t result;

  v2 = *(unint64_t **)(a2 + 40);
  if (*(_BYTE *)(a2 + 35))
  {
    return (sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0) & 1) != 0;
  }
  else
  {
    if (!v2)
      return 1;
    result = sub_22E8CC284(a1, *v2, (uint64_t)(v2 + 1));
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22F304B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;

  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 56);
    v6 = 8 * v4;
    while ((sub_22E8AF4BC(a1, *v5, 0) & 1) != 0)
    {
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    v7 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)(a2 + 72);
      v9 = 8 * v7 - 8;
      do
      {
        v10 = *v8++;
        result = sub_22E8AF4BC(a1, v10, 0);
        if ((_DWORD)result)
          v12 = v9 == 0;
        else
          v12 = 1;
        v9 -= 8;
      }
      while (!v12);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F304C08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(a2 + 56);
      v7 = 8 * v5 - 8;
      do
      {
        v8 = *v6++;
        result = sub_22E8AF4BC(a1, v8, 0);
        if ((_DWORD)result)
          v9 = v7 == 0;
        else
          v9 = 1;
        v7 -= 8;
      }
      while (!v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F304C7C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(a2 + 56);
      v7 = 8 * v5;
      while ((sub_22E8AF4BC(a1, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
      return 0;
    }
LABEL_6:
    v8 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(a2 + 72);
      v10 = 8 * v8;
      while ((sub_22E8AF4BC(a1, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v11 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a2 + 88);
      v13 = 8 * v11;
      while ((sub_22E8AF4BC(a1, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_14;
      }
      return 0;
    }
LABEL_14:
    v14 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)(a2 + 104);
      v16 = 8 * v14;
      while ((sub_22E8AF4BC(a1, *v15, 0) & 1) != 0)
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_18;
      }
      return 0;
    }
LABEL_18:
    v17 = *(unsigned int *)(a2 + 128);
    if ((_DWORD)v17)
    {
      v18 = *(uint64_t **)(a2 + 136);
      v19 = 8 * v17 - 8;
      do
      {
        v20 = *v18++;
        result = sub_22E8AF4BC(a1, v20, 0);
        if ((_DWORD)result)
          v21 = v19 == 0;
        else
          v21 = 1;
        v19 -= 8;
      }
      while (!v21);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F304DB8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(a2 + 64);
      v7 = 8 * v5;
      while ((sub_22E8AF4BC(a1, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
      return 0;
    }
    else
    {
LABEL_6:
      v8 = *(unsigned int *)(a2 + 72);
      if ((_DWORD)v8)
      {
        v9 = *(uint64_t **)(a2 + 80);
        v10 = 8 * v8 - 8;
        do
        {
          v11 = *v9++;
          result = sub_22E8AF4BC(a1, v11, 0);
          if ((_DWORD)result)
            v12 = v10 == 0;
          else
            v12 = 1;
          v10 -= 8;
        }
        while (!v12);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22F304E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22E8CAC80(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v9 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v9)
      return 1;
    result = sub_22E8AF4BC(a1, v9, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22F304F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v8 = 0;
    while (1)
    {
      v9 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v8 >= *(unsigned int *)(v9 + 16))
        break;
      sub_22F304E64(a1, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * v8++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_2;
    }
    v4 = *(_QWORD *)v9;
    v5 = *(_QWORD *)(v9 + 8);
  }
  else
  {
LABEL_2:
    v4 = 0;
    v5 = 0;
  }
  return sub_22F303F6C(a1, v4, v5);
}

uint64_t sub_22F304F80(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22F304F08(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E8CC284(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F304FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v9 = 0;
    while (1)
    {
      v10 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v9 >= *(unsigned int *)(v10 + 16))
        break;
      sub_22F304E64(a1, *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8 * v9++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_2;
    }
    v5 = *(_QWORD *)v10;
    v6 = *(_QWORD *)(v10 + 8);
  }
  else
  {
LABEL_2:
    v5 = 0;
    v6 = 0;
  }
  result = sub_22F303F6C(a1, v5, v6);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a2 + 56);
    if ((v8 & 4) != 0)
    {
      v11 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (!v11)
      {
LABEL_6:
        result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 48));
        if (!(_DWORD)result)
          return result;
        return 1;
      }
    }
    else
    {
      if (v8 < 8)
        goto LABEL_6;
      v11 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    }
    return (sub_22E8CC284(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
  }
  return result;
}

uint64_t sub_22F3050CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22F304FF8(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E8AF4BC(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22F30512C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = (uint64_t *)(a2 + 24);
  result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6 - 8;
      do
      {
        v8 = *v4++;
        result = sub_22E8AF4BC(a1, v8, 0);
        if ((_DWORD)result)
          v9 = v7 == 0;
        else
          v9 = 1;
        v7 -= 8;
      }
      while (!v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F3051A4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;

  if (sub_22F3C6428(a2, a3))
  {
    if ((sub_22E8CAC80(a1, *a3 & 0xFFFFFFFFFFFFFFF8) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_22E8AF4BC(a1, a4, 0);
    if (!(_DWORD)result)
      return result;
  }
  return 1;
}

