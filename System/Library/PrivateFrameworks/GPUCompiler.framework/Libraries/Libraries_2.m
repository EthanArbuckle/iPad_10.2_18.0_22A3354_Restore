uint64_t sub_22E4FC000(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = a1 & 0xFFFFFFFFFFFFFFF0;
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v2 && *(_BYTE *)(v2 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && (v2 = sub_22F10CF48(v2)) != 0)
  {
    v1 = *(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
  return sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
}

unint64_t sub_22E4FC06C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19[8];
  uint64_t v20;
  __int128 v21[8];
  uint64_t v22;

  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9 && *(_BYTE *)(v9 + 16) == 45)
    v8 = (*(unsigned __int8 *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 75) >> 2) & 1;
  v10 = *(_OWORD *)(a2 + 112);
  v21[6] = *(_OWORD *)(a2 + 96);
  v21[7] = v10;
  v22 = *(_QWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v21[4] = *(_OWORD *)(a2 + 64);
  v21[5] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v13;
  v14 = *(_OWORD *)(a3 + 112);
  v19[6] = *(_OWORD *)(a3 + 96);
  v19[7] = v14;
  v20 = *(_QWORD *)(a3 + 128);
  v15 = *(_OWORD *)(a3 + 48);
  v19[2] = *(_OWORD *)(a3 + 32);
  v19[3] = v15;
  v16 = *(_OWORD *)(a3 + 80);
  v19[4] = *(_OWORD *)(a3 + 64);
  v19[5] = v16;
  v17 = *(_OWORD *)(a3 + 16);
  v19[0] = *(_OWORD *)a3;
  v19[1] = v17;
  return sub_22E4EF4B8(a1, v21, v19, a4, 1, v8);
}

BOOL sub_22E4FC14C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[8];
  uint64_t v19;
  _QWORD v20[6];
  char v21;
  _OWORD v22[8];
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  __int128 v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30[2];
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35[2];
  __int128 v36;
  uint64_t v37[2];
  uint64_t v38[2];
  __int128 v39;
  uint64_t v40;
  uint64_t v41[2];
  uint64_t v42[2];
  void *v43[2];
  _OWORD v44[5];
  uint64_t v45;
  uint64_t v46[2];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  LODWORD(v46[0]) = 0;
  v6 = sub_22F0092DC(a2, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v46, 0);
  if (v6)
  {
    v7 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v7)
      v8 = (*(_DWORD *)(v7 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v7;
    else
      v8 = 0;
    v9 = a3[1];
    *(_OWORD *)v35 = *a3;
    v36 = v9;
    *(_OWORD *)v37 = a3[2];
    v10 = *(_QWORD *)(a2 + 8);
    sub_22E6281E0(*(_QWORD **)(a1 + 144), v10, (uint64_t)v33);
    *(_OWORD *)v41 = *(_OWORD *)v35;
    *(_OWORD *)v42 = v36;
    *(_OWORD *)v43 = *(_OWORD *)v37;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    *(_OWORD *)v38 = v33[0];
    v39 = v33[1];
    v40 = v34;
    v25[0] = 0;
    v25[1] = 0;
    LODWORD(v26[0]) = 0;
    v24[1] = 0;
    v26[1] = 0;
    *(_QWORD *)&v27 = 0;
    v28[0] = 0;
    v28[1] = 0;
    *(_QWORD *)((char *)&v29 + 4) = 2;
    LODWORD(v24[0]) = 0;
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    sub_22E3C113C((uint64_t)v24, (__int128 *)v41, v10, 2, (__int128 *)v38, v11);
    v12 = sub_22EFC3B90(v8);
    if (v12)
    {
      v13 = v12;
      v14 = 0;
LABEL_9:
      v41[0] = *(_QWORD *)(a1 + 144);
      v41[1] = a1;
      LODWORD(v42[0]) = 0;
      BYTE4(v42[0]) = 0;
      v43[0] = v44;
      v43[1] = (void *)0x400000000;
      v15 = *(_QWORD *)(v13 + 48);
      LOBYTE(v42[0]) = 1;
      v16 = sub_22E50650C(v41, v46[1] + 72 * (v47 + v14), v15);
      LOBYTE(v42[0]) = 0;
      if (v43[0] != v44)
        free(v43[0]);
      v22[6] = *(_OWORD *)v30;
      v22[7] = v31;
      v23 = v32;
      v22[2] = *(_OWORD *)v26;
      v22[3] = v27;
      v22[4] = *(_OWORD *)v28;
      v22[5] = v29;
      v22[0] = *(_OWORD *)v24;
      v22[1] = *(_OWORD *)v25;
      sub_22E4DD05C(a1, (uint64_t)v22, v13, (uint64_t)v41);
      v20[0] = v16;
      v20[1] = 0;
      v21 &= 0xF8u;
      v18[6] = v44[3];
      v18[7] = v44[4];
      v19 = v45;
      v18[2] = *(_OWORD *)v43;
      v18[3] = v44[0];
      v18[4] = v44[1];
      v18[5] = v44[2];
      v18[0] = *(_OWORD *)v41;
      v18[1] = *(_OWORD *)v42;
      sub_22E4DAAE0(a1, v20, v18, 1, *(double *)v42);
      ++v14;
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v13)
          break;
        if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_9;
      }
    }
  }
  if (LODWORD(v46[0]) >= 2)
    sub_22EF53BC0(v46);
  return v6;
}

void sub_22E4FC408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  llvm::LLVMContext *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Constant *v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::LLVMContext *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _OWORD v63[4];
  _OWORD v64[3];
  _OWORD v65[4];
  _OWORD v66[4];
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  _OWORD v70[3];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char v75[32];
  __int16 v76;
  _QWORD v77[3];
  int v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[2];
  __int16 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *__p;
  uint64_t *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD v103[5];

  v103[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 16);
  if ((*(_DWORD *)a2 & 0x400000) == 0 || (*(_BYTE *)(a3 + 56) & 4) != 0)
    goto LABEL_32;
  v7 = (*(_DWORD *)a2 >> 23) & 7;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 3 || v7 == 0)
    {
      v9 = *(_OWORD *)(a3 + 16);
      v70[0] = *(_OWORD *)a3;
      v70[1] = v9;
      v70[2] = *(_OWORD *)(a3 + 32);
      sub_22E620824(a1, (uint64_t)v70, *(_QWORD *)(a2 + 8));
    }
    goto LABEL_32;
  }
  v69 = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  v67 = *(_OWORD *)(a3 + 24);
  v68 = *(_QWORD *)(a3 + 40);
  v11 = *(_WORD *)(v6 + 80) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 != 83)
    {
      if (v11 == 71)
      {
        v12 = -56;
        goto LABEL_26;
      }
      if (v11 == 81)
        goto LABEL_26;
LABEL_21:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_20;
    if (v11 != 16)
    {
      if (((1 << v11) & 0x1066) != 0)
        goto LABEL_26;
      if (v11 != 24)
      {
LABEL_20:
        if (v11 == 70)
        {
          v12 = -64;
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }
    v12 = -48;
  }
LABEL_26:
  v16 = *(_QWORD *)(v6 + 72 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v18 = (unint64_t)(v17 - 8);
  else
    v18 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
  if ((**(_QWORD **)(v18 + 128) & 0x200) == 0)
  {
    v100 = v69;
    v98 = v67;
    v99 = v68;
    v90 = v69;
    v92 = v67;
    v58 = v10;
    v59 = (uint64_t *)(a1 + 272);
    v91 = v10;
    v93 = v68;
    v36 = *(_QWORD *)(a1 + 8);
    WORD4(v85) = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), &v90, v36, (uint64_t)&v83, (uint64_t)&v94);
    v69 = v94;
    v67 = v96;
    v60 = v95;
    v68 = v97;
    v56 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v18);
    v89 = **(_QWORD **)(v56 + 72);
    v101 = v103;
    v102 = 0x100000000;
    sub_22F26267C((uint64_t)&v101, 0, &v89);
    v61 = *(unsigned __int8 *)(a1 + 130);
    (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224)
                                                                          + 608))(&__p, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), v18);
    v37 = (uint64_t *)__p;
    v38 = v88;
    if (__p != v88)
    {
      v39 = v89;
      do
      {
        v40 = *v37;
        if (*v37 >= v39)
          break;
        v41 = (char *)&v101[2 * v102];
        v42 = *((_QWORD *)v41 - 2);
        v43 = *((_QWORD *)v41 - 1);
        LODWORD(v102) = v102 - 1;
        *(_QWORD *)&v94 = v40 - v42;
        if (v40 != v42)
          sub_22F26267C((uint64_t)&v101, v42, (uint64_t *)&v94);
        *(_QWORD *)&v83 = v43 - (v40 + v61);
        if (v43 != v40 + v61)
          sub_22F26267C((uint64_t)&v101, v40 + v61, (uint64_t *)&v83);
        ++v37;
      }
      while (v37 != v38);
    }
    v44 = (llvm::Constant *)sub_22E508C2C(*(_QWORD *)(a1 + 144), v18, 0);
    if ((llvm::Constant::isNullValue(v44) & 1) != 0)
    {
      if ((_DWORD)v102)
      {
        v45 = v101;
        v62 = &v101[2 * v102];
        do
        {
          v46 = *v45;
          v45 += 2;
          llvm::ConstantInt::get();
          v83 = v69;
          v84 = v60;
          v85 = v67;
          v86 = v68;
          v82 = 257;
          sub_22F24D74C(v59, (uint64_t)&v83, v46, (uint64_t)v81, (uint64_t)&v94);
          llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v47);
          llvm::ConstantInt::get();
          sub_22F2483D8((uint64_t)v59, &v94);
        }
        while (v45 != v62);
      }
    }
    else
    {
      v49 = (uint64_t *)llvm::User::operator new((llvm::User *)0x58);
      WORD4(v96) = 257;
      llvm::GlobalVariable::GlobalVariable();
      v50 = *(_QWORD *)(*(_QWORD *)(v56 + 72) + 8);
      if (v50 <= v60)
        v50 = v60;
      v57 = v50;
      llvm::GlobalObject::setAlignment();
      v55 = sub_22F25E214((_QWORD *)a1, v49);
      if ((_DWORD)v102)
      {
        v51 = v101;
        v53 = &v101[2 * v102];
        v54 = *(_QWORD *)(a1 + 8);
        do
        {
          v52 = *v51;
          v51 += 2;
          llvm::ConstantInt::get();
          v83 = v69;
          v84 = v60;
          v85 = v67;
          v86 = v68;
          WORD4(v73) = 257;
          sub_22F24D74C(v59, (uint64_t)&v83, v52, (uint64_t)&v71, (uint64_t)&v94);
          v77[0] = v55;
          v77[1] = v54;
          v77[2] = v57;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v76 = 257;
          sub_22F24D74C(v59, (uint64_t)v77, v52, (uint64_t)v75, (uint64_t)v81);
          sub_22E3E4F38((uint64_t)v59, &v94, v81);
        }
        while (v51 != v53);
      }
    }
    v48 = *(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0;
    if (sub_22EF5EB64(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v48))
    {
      v71 = v100;
      v72 = v58;
      v73 = v98;
      v74 = v99;
      sub_22E620200((_QWORD *)a1, &v71, v48);
    }
    if (__p)
    {
      v88 = (uint64_t *)__p;
      operator delete(__p);
    }
    if (v101 != v103)
      free(v101);
  }
LABEL_32:
  if ((*(_BYTE *)(v6 + 82) & 0x80) == 0 || sub_22EFC0EB8(v6))
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 140) & 0x800000000) != 0
      && (*(_DWORD *)a2 & 0x40000) != 0)
    {
      v26 = *(_DWORD *)a2;
      v27 = v26 == 119;
      if (v26 == 119)
        v28 = a2;
      else
        v28 = 0;
      v29 = (uint64_t *)(v28 + 48);
      if (!v27)
        v29 = (uint64_t *)(a2 + 40);
      v30 = *v29;
      v31 = *(_OWORD *)(a3 + 16);
      v66[0] = *(_OWORD *)a3;
      v66[1] = v31;
      v32 = *(_OWORD *)(a3 + 48);
      v66[2] = *(_OWORD *)(a3 + 32);
      v66[3] = v32;
      sub_22E4EF100(a1, v30, v66);
    }
    else if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)|| (v19 = *(_OWORD *)(a3 + 16), v65[0] = *(_OWORD *)a3, v65[1] = v19, v20 = *(_OWORD *)(a3 + 48), v65[2] = *(_OWORD *)(a3 + 32), v65[3] = v20, !sub_22E4FC14C(a1, a2, v65)))
    {
      v21 = (llvm::LLVMContext *)sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(a2 + 8));
      if (v21)
      {
        v35 = *(_OWORD *)(a3 + 16);
        v64[0] = *(_OWORD *)a3;
        v64[1] = v35;
        v64[2] = *(_OWORD *)(a3 + 32);
        sub_22F250FD0(a1, v6, v21, v64, a2, (*(unsigned __int8 *)(a3 + 56) >> 5) & 1, 0);
        return;
      }
      v22 = (*(_DWORD *)a2 >> 23) & 7;
      if (v22 == 1)
      {
        v24 = 0;
      }
      else
      {
        if (v22 != 2)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          if (v22 == 3)
          {
            v24 = 0;
            v23 = *(_DWORD *)(a1 + 1688) & 7;
            v25 = 1;
          }
          goto LABEL_52;
        }
        v24 = 1;
      }
      v25 = 0;
      v23 = 1;
LABEL_52:
      v33 = *(_OWORD *)(a3 + 16);
      v63[0] = *(_OWORD *)a3;
      v63[1] = v33;
      v34 = *(_OWORD *)(a3 + 48);
      v63[2] = *(_OWORD *)(a3 + 32);
      v63[3] = v34;
      sub_22E48393C((_QWORD *)a1, v6, v23, v24, v25, (uint64_t *)v63, a2);
    }
  }
}

void sub_22E4FCB7C(uint64_t a1, _OWORD *a2, __int128 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16[3];
  __int128 v17[3];
  _OWORD v18[3];

  v4 = a4;
  if (*a4 == 173)
    v4 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
  v8 = *((_QWORD *)v4 + 2);
  v9 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v10 = *(_QWORD *)(a1 + 2312);
  v11 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v12 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v9;
  if ((v4[2] & 0x40) != 0)
  {
    v13 = a2[1];
    v18[0] = *a2;
    v18[1] = v13;
    v18[2] = a2[2];
    sub_22E620824(a1, (uint64_t)v18, *((_QWORD *)v4 + 1));
  }
  v14 = a2[1];
  v17[0] = *a2;
  v17[1] = v14;
  v17[2] = a2[2];
  v15 = a3[1];
  v16[0] = *a3;
  v16[1] = v15;
  v16[2] = a3[2];
  sub_22F2513C0(a1, v8, v17, v16, v4);
  *(_BYTE *)(a1 + 2893) = v11;
  sub_22E48B274((_QWORD *)a1, v9, v10, 0, 0);
  *(_QWORD *)(a1 + 2872) = v12;
}

uint64_t sub_22E4FCC80(uint64_t *a1)
{
  uint64_t v2;
  llvm::LLVMContext *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[3];
  _QWORD v12[4];
  __int16 v13;

  v2 = *a1;
  v4 = sub_22E66DE5C(*(_QWORD *)(*a1 + 144) + 280, *(_QWORD *)a1[1]);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)a1[2];
    if (*(_DWORD *)a1[3])
    {
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 144), *(_QWORD *)(*(_QWORD *)a1[1] & 0xFFFFFFFFFFFFFFF0), (uint64_t)v12);
      v7 = llvm::ConstantInt::get();
      v13 = 257;
      sub_22E3E48CC(v2 + 272, v6, v7, (uint64_t)v12, 0, 0);
    }
    v8 = (_OWORD *)a1[4];
    v10 = v8[1];
    v9 = v8[2];
    v11[0] = *v8;
    v11[1] = v10;
    v11[2] = v9;
    llvm::Type::getInt8Ty(*(llvm::Type **)(v2 + 336), v3);
    llvm::ConstantInt::get();
    sub_22F2483D8(v2 + 272, v11);
  }
  return v4;
}

uint64_t sub_22E4FCD94(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[3];
  unint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v8 = sub_22E619D68(a3);
  if (v8)
  {
    if (v8 == 2)
    {
      v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v9 & 8) != 0)
      {
        v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      v15 = a4[1];
      v18[0] = *a4;
      v18[1] = v15;
      v18[2] = a4[2];
      v19 = v10 | v11 | (v9 | a3) & 7;
      v20 = 33;
      return sub_22E4EF100(a1, a2, v18);
    }
    else
    {
      v16 = a4[1];
      v48 = *a4;
      v49 = v16;
      v50 = a4[2];
      sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)&v45);
      v54 = v48;
      v55 = v49;
      v56 = v50;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v51 = v45;
      v52 = v46;
      v53 = v47;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v22 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 2;
      v21 = 0;
      v31 = 0u;
      v32 = 0u;
      sub_22E3C113C((uint64_t)&v21, &v54, a3, 2, &v51, v17);
      return sub_22F262998(a1, a2, (uint64_t)&v21, 1);
    }
  }
  else
  {
    v12 = a4[1];
    v48 = *a4;
    v49 = v12;
    v50 = a4[2];
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)&v45);
    v54 = v48;
    v55 = v49;
    v56 = v50;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v51 = v45;
    v52 = v46;
    v53 = v47;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v34 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 2;
    v33 = 0;
    v43 = 0u;
    v44 = 0u;
    sub_22E3C113C((uint64_t)&v33, &v54, a3, 2, &v51, v13);
    return sub_22E4C7674(a1, a2, 0, &v33, 0);
  }
}

void sub_22E4FCF9C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18[2];
  _BYTE v19[1216];
  void *v20;
  uint64_t v21;
  _BYTE v22[192];
  void *v23;
  uint64_t v24;
  _BYTE v25[16];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[5] = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  v20 = v22;
  v21 = 0x100000000;
  v23 = v25;
  v24 = 0x100000000;
  v26 = v28;
  v27 = 0x200000000;
  v28[4] = 0;
  v9 = (uint64_t)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24);
  sub_22E477B1C(a1, (uint64_t)v18, a2 & 0xFFFFFFFFFFFFFFFBLL, v9, (unint64_t *)(v9 + 8 * a3[4]), 0, 0, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v11 = 16;
  if (a4)
    v11 = 32;
  v12 = (v10 + v11 + 15280) | 6;
  v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80));
  v14 = sub_22EFCE144(v13 + 40, v12);
  if (v14)
  {
    while (1)
    {
      v15 = (v14 & 4) == 0;
      v16 = (unint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 0xFFFFFFFFFFFFFFF8) == 0)
        v15 = 1;
      v17 = v14 & 0xFFFFFFFFFFFFFFF8;
      if (!v15)
        v17 = *v16;
      if (v17
        && (*(_DWORD *)(v17 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA
        && (*(_QWORD *)(v17 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF0) + 8)) == *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8))
      {
        break;
      }
      if (!v15)
      {
        v14 = v16[1];
        if (v14)
          continue;
      }
      goto LABEL_15;
    }
    sub_22E4FD1B4(a5, a1, v17, a2, (unsigned int *)v18);
  }
LABEL_15:
  if (v26 != v28)
    free(v26);
  if (v23 != v25)
    free(v23);
  if (v20 != v22)
    free(v20);
  if (v18[0] != v19)
    free(v18[0]);
}

uint64_t sub_22E4FD1B4(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  llvm::Value *v19;
  _QWORD v20[4];
  int v21;
  uint64_t v22;
  llvm::Value *v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v10 = *(_QWORD *)(a2 + 144);
  if (sub_22E462B18(a3))
    v11 = a3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a3) + 96) & 0x80) == 0);
  else
    v11 = a3;
  v12 = sub_22E6336F0(v10, v11, 0, 0, 0, 0, 0);
  if (sub_22E462B18(a3))
    v15 = a3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a3) + 96) & 0x80) == 0);
  else
    v15 = a3;
  v23 = 0;
  v20[0] = v12;
  v20[1] = 0;
  v20[2] = v15;
  v20[3] = 0;
  v21 = 0;
  v22 = 0;
  v16 = sub_22E46D9A0(*(_QWORD *)(a2 + 144) + 280, *(_QWORD **)(*(_QWORD *)(a2 + 144) + 280), a5, a4, 0, 0, v13, v14);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_22E47A004(a1, a2, v16, v20, v24, a5, &v23, 0, 0, 0);
  if (*(_BYTE *)(v12 + 16))
    v17 = 0;
  else
    v17 = v12;
  result = sub_22EFBFDCC(a3, 0, 0);
  if ((_DWORD)result && v17)
  {
    result = llvm::Function::hasFnAttribute();
    if ((_DWORD)result)
    {
      v19 = v23;
      llvm::Value::getContext(v23);
      result = llvm::AttributeList::addAttributeAtIndex();
      *((_QWORD *)v19 + 8) = result;
    }
  }
  return result;
}

llvm::Constant **sub_22E4FD34C(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t LaunderInvariantGroup;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unsigned int v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  int v128;
  llvm::Instruction *v129;
  uint64_t v130;
  unsigned int *v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  int v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  _QWORD *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BOOL4 v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BOOL4 v184;
  unsigned int v185;
  llvm::Type *v186;
  unint64_t *v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD *v190;
  _BOOL4 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  __int128 *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  llvm::LLVMContext *v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  _QWORD *v210;
  unsigned int v211;
  char *v212;
  uint64_t v213;
  __int128 v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  __int128 *v225;
  uint64_t v226;
  uint64_t Declaration;
  uint64_t v228;
  uint64_t v229;
  llvm::Value *v230;
  unsigned int v231;
  __int128 *v232;
  uint64_t v233;
  unsigned int v234;
  __int128 *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  llvm::Value *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  _QWORD *v244;
  llvm::Type *v245;
  int v246;
  unsigned int v247;
  __int128 *v248;
  uint64_t AllOnesValue;
  unsigned int v250;
  __int128 *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  unsigned __int8 *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  _BOOL4 v281;
  unsigned __int8 **v282;
  uint64_t v283;
  uint64_t v285;
  unsigned __int8 *v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  llvm::GetElementPtrInst *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  llvm::PHINode *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  llvm::Constant **v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  llvm::PHINode *v306;
  llvm::Type *v307;
  uint64_t NullValue;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  llvm::Type *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  int v333;
  int v334;
  uint64_t v335;
  llvm::LLVMContext *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  unint64_t v342;
  llvm::Instruction *v343;
  int v344;
  _QWORD *v345;
  uint64_t v346;
  _QWORD *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  llvm::LLVMContext *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t Select;
  uint64_t *v363;
  uint64_t v364;
  llvm::Instruction *v365;
  uint64_t v366;
  unsigned int *v367;
  _QWORD *v368;
  unint64_t v369;
  unint64_t v370;
  void *v371;
  const char *v372;
  _QWORD *v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  _OWORD v377[3];
  __int128 v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  _BYTE v384[48];
  _QWORD v385[3];
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  _QWORD v393[3];
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  __int128 v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  char v409;
  __int128 v410;
  __int128 v411;
  _BYTE v412[32];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416[2];
  unsigned int v417;
  uint64_t v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422[3];
  __int128 v423;
  __int128 v424;
  __int128 v425;
  BOOL v426[16];
  __int128 v427;
  __int128 v428;
  const char *v429;
  unint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  uint64_t v438[5];
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD v442[4];
  __int16 v443;
  void *v444;
  uint64_t v445;
  int v446;
  char v447;
  uint64_t v448;
  void *v449;
  uint64_t v450;
  _BYTE v451[1184];
  void *v452;
  uint64_t v453;
  _BYTE v454[192];
  void *v455;
  uint64_t v456;
  _BYTE v457[16];
  void *v458;
  uint64_t v459;
  _QWORD v460[5];
  __int128 v461;
  __int128 v462;
  _BYTE v463[32];
  __int16 v464;
  uint64_t v465;
  uint64_t v466;

  v2 = a2;
  v466 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || *(_BYTE *)(v5 + 16) != 39)
    v5 = sub_22F10CF48(v5);
  v6 = sub_22EF5BA38(v4, *(_QWORD *)(v5 + 32));
  LODWORD(v7) = 0;
  v405 = v6;
  v8 = (_QWORD *)*((_QWORD *)v2 + 2);
  v9 = *v2;
  if ((v9 & 0x80000) != 0 && (v9 & 0x1800000) != 0)
  {
    v10 = *(_QWORD **)&v2[2 * ((v9 >> 19) & 1) + 14];
    if (*(unsigned __int8 *)v10 == 180)
    {
      if (sub_22F3C2220(v10))
      {
        v169 = *(_QWORD *)(v10[1] & 0xFFFFFFFFFFFFFFF0);
        if (v169)
          v170 = (*(_DWORD *)(v169 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v170 = 0;
        if (!v170)
          v169 = sub_22F10CF48(v169);
        v171 = (_QWORD *)(v169 + 40);
        if (*(_DWORD *)(v169 + 48) >= 0x41u)
          v171 = (_QWORD *)*v171;
        LODWORD(v7) = *(_DWORD *)v171;
      }
      else
      {
        v7 = (v10[3] - v10[2]) >> 3;
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  v11 = *(_QWORD *)(*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v11 || *(_BYTE *)(v11 + 16) != 39)
    v11 = sub_22F10CF48(v11);
  v12 = *(_QWORD *)(v11 + 32);
  v367 = v2;
  v347 = v8;
  if ((*((_BYTE *)v2 + 2) & 8) == 0)
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v444);
    v13 = 0;
    Select = llvm::ConstantInt::get();
    v364 = Select;
    goto LABEL_13;
  }
  v111 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8);
  v112 = v111 >> 8;
  if (sub_22EFBFCDC(*((_QWORD **)v2 + 2)))
    v113 = 0;
  else
    v113 = (*(uint64_t (**)(_QWORD, unsigned int *))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 632))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), v2);
  DWORD2(v410) = v111 >> 8;
  v162 = v111 >> 8;
  if (v111 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v410);
  }
  else
  {
    v163 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v111);
    if (v111 <= 0xFF)
      v163 = 0;
    *(_QWORD *)&v410 = v163 & v113;
  }
  v444 = *(void **)(a1 + 144);
  v445 = a1;
  v446 = 0;
  v447 = 0;
  v449 = v451;
  v450 = 0x400000000;
  if ((*((_BYTE *)v2 + 2) & 8) != 0)
    v164 = *((_QWORD *)v2 + 7);
  else
    v164 = 0;
  v165 = *((_QWORD *)v2 + 1);
  LOBYTE(v446) = 1;
  v166 = sub_22F262C28(&v444, v164, v165);
  LOBYTE(v446) = 0;
  if (v449 == v451)
  {
    if (!v166)
    {
LABEL_173:
      if ((*((_BYTE *)v2 + 2) & 8) != 0)
        v168 = *((_QWORD *)v2 + 7);
      else
        v168 = 0;
      v444 = (void *)a1;
      v445 = a1 + 272;
      LOBYTE(v446) = 0;
      v448 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v166 = sub_22E50E974(&v444, v168, v167);
    }
  }
  else
  {
    free(v449);
    if (!v166)
      goto LABEL_173;
  }
  v178 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 7) + 8) & 0xFFFFFFFFFFFFFFF0));
  v179 = v166;
  v180 = *(_DWORD *)(*(_QWORD *)v166 + 8);
  DWORD2(v406) = v111 >> 8;
  if (v162 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v406);
  }
  else
  {
    if (v111 <= 0xFF)
      LOBYTE(v181) = 0;
    else
      v181 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v111);
    *(_QWORD *)&v406 = v181 & 1;
  }
  while (1)
  {
    v182 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v12);
    if (!v182 || *(_BYTE *)(v182 + 16) != 2)
      break;
    v12 = *(_QWORD *)(v182 + 32);
    llvm::APInt::operator*=();
  }
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v444);
  DWORD2(v435) = v111 >> 8;
  v371 = v444;
  if (v162 > 0x40)
  {
    v184 = v178;
    llvm::APInt::initSlowCase((llvm::APInt *)&v435);
  }
  else
  {
    if (v111 <= 0xFF)
      v183 = 0;
    else
      v183 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v111);
    v184 = v178;
    *(_QWORD *)&v435 = v183 & (unint64_t)v444;
  }
  v185 = v180 >> 8;
  llvm::APInt::operator*=();
  v13 = v179;
  if (*(_BYTE *)(v179 + 16) != 16)
  {
    v8 = v347;
    if (v185 <= v112)
    {
      if (v184)
      {
        if (v185 < v112)
        {
          v198 = *(_QWORD *)(a1 + 88);
          LOWORD(v449) = 257;
          v13 = sub_22E3C1740((uint64_t *)(a1 + 272), 40, v13, v198, (uint64_t)&v444);
        }
        v199 = DWORD2(v435);
        if (DWORD2(v435) >= 0x41
          && v199 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v435) > 0x40)
        {
          goto LABEL_376;
        }
        v200 = (__int128 *)v435;
        if (v199 < 0x41)
          v200 = &v435;
        if (*(_QWORD *)v200 == 1)
        {
          v201 = llvm::ConstantInt::get();
          LOWORD(v449) = 257;
          v193 = sub_22E3C18F4(a1 + 272, 40, (uint64_t *)v13, v201, (uint64_t)&v444);
          if (!(_DWORD)v7)
            goto LABEL_254;
        }
        else
        {
LABEL_376:
          v193 = 0;
          if (!(_DWORD)v7)
            goto LABEL_254;
        }
LABEL_249:
        if (!v193)
        {
          v223 = llvm::ConstantInt::get();
          LOWORD(v449) = 257;
          v222 = sub_22E3C18F4(a1 + 272, 36, (uint64_t *)v13, v223, (uint64_t)&v444);
          goto LABEL_253;
        }
        if (v185 > v112)
        {
          v220 = llvm::ConstantInt::get();
          LOWORD(v449) = 257;
          v221 = sub_22E3C18F4(a1 + 272, 36, (uint64_t *)v13, v220, (uint64_t)&v444);
          *(_WORD *)v463 = 257;
          v222 = sub_22E3E58D4(a1 + 272, v193, v221, (uint64_t)&v461);
LABEL_253:
          v193 = v222;
        }
LABEL_254:
        v224 = DWORD2(v435);
        if (DWORD2(v435) >= 0x41
          && v224 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v435) > 0x40)
        {
          goto LABEL_260;
        }
        v225 = (__int128 *)v435;
        if (v224 < 0x41)
          v225 = &v435;
        if (*(_QWORD *)v225 == 1)
        {
          Select = v13;
          v226 = v193;
        }
        else
        {
LABEL_260:
          v444 = *(void **)(a1 + 88);
          Declaration = llvm::Intrinsic::getDeclaration();
          v228 = llvm::ConstantInt::get();
          if (Declaration)
            v229 = *(_QWORD *)(Declaration + 24);
          else
            v229 = 0;
          *(_QWORD *)&v461 = v13;
          *((_QWORD *)&v461 + 1) = v228;
          LOWORD(v449) = 257;
          v230 = sub_22E462B78((uint64_t *)(a1 + 272), v229, Declaration, (uint64_t)&v461, 2, (uint64_t)&v444, 0);
          LODWORD(v461) = 1;
          LOWORD(v449) = 257;
          v226 = sub_22E3C2EA8(a1 + 272, (uint64_t)v230, (uint64_t)&v461, 1, (uint64_t)&v444);
          if (v193)
          {
            LOWORD(v449) = 257;
            v226 = sub_22E3E58D4(a1 + 272, v193, v226, (uint64_t)&v444);
          }
          LODWORD(v461) = 0;
          LOWORD(v449) = 257;
          Select = sub_22E3C2EA8(a1 + 272, (uint64_t)v230, (uint64_t)&v461, 1, (uint64_t)&v444);
          v231 = DWORD2(v406);
          if (DWORD2(v406) >= 0x41
            && v231 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v406) > 0x40)
          {
            goto LABEL_270;
          }
          v232 = (__int128 *)v406;
          if (v231 < 0x41)
            v232 = &v406;
          if (*(_QWORD *)v232 != 1)
          {
LABEL_270:
            if (v371 == (void *)1)
            {
              v13 = Select;
            }
            else
            {
              v233 = llvm::ConstantInt::get();
              LOWORD(v449) = 257;
              v13 = (uint64_t)sub_22E3BDEA8(a1 + 272, v13, v233, (uint64_t)&v444, 0, 0);
            }
          }
        }
        v234 = DWORD2(v410);
        if (DWORD2(v410) >= 0x41
          && v234 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v410) > 0x40)
        {
          goto LABEL_278;
        }
        v235 = (__int128 *)v410;
        if (v234 < 0x41)
          v235 = &v410;
        if (*(_QWORD *)v235)
        {
LABEL_278:
          v444 = *(void **)(a1 + 88);
          v236 = llvm::Intrinsic::getDeclaration();
          v237 = llvm::ConstantInt::get();
          if (v236)
            v238 = *(_QWORD *)(v236 + 24);
          else
            v238 = 0;
          *(_QWORD *)&v461 = Select;
          *((_QWORD *)&v461 + 1) = v237;
          LOWORD(v449) = 257;
          v239 = sub_22E462B78((uint64_t *)(a1 + 272), v238, v236, (uint64_t)&v461, 2, (uint64_t)&v444, 0);
          LODWORD(v461) = 1;
          LOWORD(v449) = 257;
          v240 = sub_22E3C2EA8(a1 + 272, (uint64_t)v239, (uint64_t)&v461, 1, (uint64_t)&v444);
          if (v226)
          {
            LOWORD(v449) = 257;
            v240 = sub_22E3E58D4(a1 + 272, v226, v240, (uint64_t)&v444);
          }
          LODWORD(v461) = 0;
          LOWORD(v449) = 257;
          v241 = sub_22E3C2EA8(a1 + 272, (uint64_t)v239, (uint64_t)&v461, 1, (uint64_t)&v444);
          v242 = Select;
          Select = v241;
          v364 = v242;
          v226 = v240;
        }
        else
        {
          v364 = 0;
        }
        if (v226)
        {
          llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 88), v186);
          LOWORD(v449) = 257;
          Select = llvm::IRBuilderBase::CreateSelect();
        }
        goto LABEL_317;
      }
      if (v185 < v112)
      {
        v219 = *(_QWORD *)(a1 + 88);
        LOWORD(v449) = 257;
        v13 = sub_22E3C1740((uint64_t *)(a1 + 272), 39, v13, v219, (uint64_t)&v444);
      }
      v193 = 0;
    }
    else
    {
      DWORD2(v461) = v180 >> 8;
      if (v185 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v461);
      else
        *(_QWORD *)&v461 = 1;
      sub_22E463264((llvm::APInt *)&v461, v111 >> 8);
      v192 = llvm::ConstantInt::get();
      LOWORD(v449) = 257;
      v193 = sub_22E3C18F4(a1 + 272, 35, (uint64_t *)v13, v192, (uint64_t)&v444);
      v194 = *(_QWORD *)(a1 + 88);
      LOWORD(v449) = 257;
      v13 = sub_22E3C1740((uint64_t *)(a1 + 272), 38, v13, v194, (uint64_t)&v444);
      if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
        MEMORY[0x2348A0E84](v461, 0x1000C8000313F17);
    }
    if (!(_DWORD)v7)
      goto LABEL_254;
    goto LABEL_249;
  }
  v187 = (unint64_t *)(v179 + 24);
  v8 = v347;
  if (!v184)
    goto LABEL_220;
  v188 = *(_DWORD *)(v13 + 32);
  v189 = v188 - 1;
  v190 = (_QWORD *)(v13 + 24);
  if (v188 >= 0x41)
    v190 = (_QWORD *)(*v187 + 8 * (v189 >> 6));
  if (((*v190 >> v189) & 1) != 0)
  {
    v191 = 1;
  }
  else
  {
LABEL_220:
    v158 = v185 >= v112;
    v195 = v185 - v112;
    if (v195 != 0 && v158)
    {
      v196 = *(_DWORD *)(v13 + 32);
      if (v196 > 0x40)
        v197 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v13 + 24));
      else
        v197 = v196 + __clz(*v187) - 64;
      v191 = v195 > v197;
    }
    else
    {
      v191 = 0;
    }
  }
  llvm::APInt::zextOrTrunc((llvm::APInt *)(v13 + 24));
  v243 = v445;
  if (v445 < 0x41
    || v243 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v444) <= 0x40)
  {
    v244 = v444;
    if (v243 < 0x41)
      v244 = &v444;
    if (*v244 < (unint64_t)v7)
      v191 = 1;
  }
  llvm::APInt::operator*();
  v13 = llvm::ConstantInt::get();
  if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
    MEMORY[0x2348A0E84](v461, 0x1000C8000313F17);
  v426[0] = 0;
  llvm::APInt::umul_ov((llvm::APInt *)&v444, (const llvm::APInt *)&v435, v426);
  v246 = v191 || v426[0];
  v247 = DWORD2(v410);
  if (DWORD2(v410) >= 0x41 && v247 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v410) > 0x40)
    goto LABEL_303;
  v248 = (__int128 *)v410;
  if (v247 < 0x41)
    v248 = &v410;
  if (*(_QWORD *)v248)
  {
LABEL_303:
    v364 = llvm::ConstantInt::get();
    llvm::APInt::uadd_ov((llvm::APInt *)&v461, (const llvm::APInt *)&v410, v426);
    if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
      MEMORY[0x2348A0E84](v461, 0x1000C8000313F17);
    *(_QWORD *)&v461 = v429;
    DWORD2(v461) = v430;
    v246 |= v426[0];
  }
  else
  {
    v364 = 0;
  }
  if (v246)
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(a1 + 88), v245);
  else
    AllOnesValue = llvm::ConstantInt::get();
  Select = AllOnesValue;
  if (DWORD2(v461) >= 0x41 && (_QWORD)v461)
    MEMORY[0x2348A0E84](v461, 0x1000C8000313F17);
  if (v445 >= 0x41 && v444)
    MEMORY[0x2348A0E84](v444, 0x1000C8000313F17);
LABEL_317:
  v250 = DWORD2(v410);
  if (DWORD2(v410) < 0x41 || v250 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v410) <= 0x40)
  {
    v251 = (__int128 *)v410;
    if (v250 < 0x41)
      v251 = &v410;
    v146 = *(_QWORD *)v251 == 0;
    v252 = v364;
    if (v146)
      v252 = Select;
    v364 = v252;
  }
  if (DWORD2(v435) >= 0x41 && (_QWORD)v435)
    MEMORY[0x2348A0E84](v435, 0x1000C8000313F17);
  if (DWORD2(v406) >= 0x41 && (_QWORD)v406)
    MEMORY[0x2348A0E84](v406, 0x1000C8000313F17);
  if (DWORD2(v410) >= 0x41 && (_QWORD)v410)
    MEMORY[0x2348A0E84](v410, 0x1000C8000313F17);
  v6 = v405;
LABEL_13:
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v369 = v6;
  v15 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_22EF5C8B8(v14, *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_22EF5CDF0(v14, *(_QWORD *)(*(_QWORD *)(v14 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v444 = &v446;
  v445 = 0x800000000;
  v452 = v454;
  v453 = 0x100000000;
  v456 = 0x100000000;
  v455 = v457;
  v458 = v460;
  v459 = 0x200000000;
  v460[4] = 0;
  v18 = v16 / v17;
  v358 = v13;
  if (sub_22EFBFCDC(v8))
  {
    if ((*v2 & 0x1800000) != 0)
      v19 = ((*v2 >> 19) & 1) + 1;
    else
      v19 = (*v2 >> 19) & 1;
    v20 = *(_QWORD *)&v2[2 * v19 + 14];
    LODWORD(v410) = 2;
    sub_22E4DFD40(&v461, a1);
    v21 = v461;
    v22 = DWORD2(v462);
    v353 = HIDWORD(v462);
    v360 = *(_QWORD *)&v463[8];
    v23 = *(_QWORD *)v463;
    if ((_DWORD)v410)
      v24 = v18;
    else
      v24 = v462;
    v25 = (_QWORD *)*((_QWORD *)v2 + 3);
    v26 = v369;
    if (v25 && !sub_22EFBFCDC(v25))
    {
      v27 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
      v461 = (unint64_t)Select;
      v463[16] = 0;
      v464 = 0;
      v465 = v27;
      v28 = sub_22E3C187C((uint64_t)&v444, (unint64_t)&v461, 1);
      v29 = (char *)v444 + 152 * v445;
      v30 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v28;
      *((_OWORD *)v29 + 1) = v30;
      v31 = *(_QWORD *)(v28 + 144);
      v32 = *(_OWORD *)(v28 + 128);
      v33 = *(_OWORD *)(v28 + 96);
      *((_OWORD *)v29 + 7) = *(_OWORD *)(v28 + 112);
      *((_OWORD *)v29 + 8) = v32;
      *((_QWORD *)v29 + 18) = v31;
      *((_OWORD *)v29 + 6) = v33;
      v34 = *(_OWORD *)(v28 + 80);
      v35 = *(_OWORD *)(v28 + 32);
      v36 = *(_OWORD *)(v28 + 48);
      *((_OWORD *)v29 + 4) = *(_OWORD *)(v28 + 64);
      *((_OWORD *)v29 + 5) = v34;
      *((_OWORD *)v29 + 2) = v35;
      *((_OWORD *)v29 + 3) = v36;
      LODWORD(v445) = v445 + 1;
      v37 = v21;
      v399 = v21;
      v400 = v24;
      v401 = v22;
      v402 = v353;
      v403 = v23;
      v404 = v360;
      if ((v22 & 3) != 0)
        v37 = sub_22F28ABCC(&v399, a1);
      v38 = *(_QWORD *)(v20 + 8);
      v461 = (unint64_t)v37;
      v463[16] = 0;
      v464 = 0;
      v465 = v38;
      v39 = sub_22E3C187C((uint64_t)&v444, (unint64_t)&v461, 1);
      v40 = (char *)v444 + 152 * v445;
      v41 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)v40 = *(_OWORD *)v39;
      *((_OWORD *)v40 + 1) = v41;
      v42 = *(_QWORD *)(v39 + 144);
      v43 = *(_OWORD *)(v39 + 128);
      v44 = *(_OWORD *)(v39 + 96);
      *((_OWORD *)v40 + 7) = *(_OWORD *)(v39 + 112);
      *((_OWORD *)v40 + 8) = v43;
      *((_QWORD *)v40 + 18) = v42;
      *((_OWORD *)v40 + 6) = v44;
      v45 = *(_OWORD *)(v39 + 80);
      v46 = *(_OWORD *)(v39 + 32);
      v47 = *(_OWORD *)(v39 + 48);
      *((_OWORD *)v40 + 4) = *(_OWORD *)(v39 + 64);
      *((_OWORD *)v40 + 5) = v45;
      *((_OWORD *)v40 + 2) = v46;
      *((_OWORD *)v40 + 3) = v47;
      LODWORD(v445) = v445 + 1;
    }
    v48 = *((_QWORD *)&v21 + 1);
    v49 = v21;
    goto LABEL_59;
  }
  v50 = *(_QWORD *)(v8[6] & 0xFFFFFFFFFFFFFFF0);
  if (!v50 || *(_BYTE *)(v50 + 16) != 26)
    v50 = sub_22F10CF48(v50);
  v26 = v369;
  v51 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
  v461 = (unint64_t)Select;
  v463[16] = 0;
  v464 = 0;
  v465 = v51;
  v52 = sub_22E3C187C((uint64_t)&v444, (unint64_t)&v461, 1);
  v53 = (char *)v444 + 152 * v445;
  v54 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v52;
  *((_OWORD *)v53 + 1) = v54;
  v55 = *(_QWORD *)(v52 + 144);
  v56 = *(_OWORD *)(v52 + 128);
  v57 = *(_OWORD *)(v52 + 96);
  *((_OWORD *)v53 + 7) = *(_OWORD *)(v52 + 112);
  *((_OWORD *)v53 + 8) = v56;
  *((_QWORD *)v53 + 18) = v55;
  *((_OWORD *)v53 + 6) = v57;
  v58 = *(_OWORD *)(v52 + 80);
  v59 = *(_OWORD *)(v52 + 32);
  v60 = *(_OWORD *)(v52 + 48);
  *((_OWORD *)v53 + 4) = *(_OWORD *)(v52 + 64);
  *((_OWORD *)v53 + 5) = v58;
  *((_OWORD *)v53 + 2) = v59;
  *((_OWORD *)v53 + 3) = v60;
  LODWORD(v445) = v445 + 1;
  if (Select != v364 && v18 <= *(unsigned __int8 *)(a1 + 131))
    v18 = *(unsigned __int8 *)(a1 + 131);
  if ((*v2 & 0x100000) != 0)
  {
    if ((*(_DWORD *)(v50 + 20) & 0x3FFF80) != 0)
    {
      v51 = *(_QWORD *)(v50 + 48);
      v61 = 2;
    }
    else
    {
      v61 = 1;
    }
LABEL_38:
    v461 = (unint64_t)llvm::ConstantInt::get();
    v463[16] = 0;
    v464 = 0;
    v465 = v51;
    v62 = sub_22E3C187C((uint64_t)&v444, (unint64_t)&v461, 1);
    v63 = (char *)v444 + 152 * v445;
    v64 = *(_OWORD *)(v62 + 16);
    *(_OWORD *)v63 = *(_OWORD *)v62;
    *((_OWORD *)v63 + 1) = v64;
    v65 = *(_QWORD *)(v62 + 144);
    v66 = *(_OWORD *)(v62 + 128);
    v67 = *(_OWORD *)(v62 + 96);
    *((_OWORD *)v63 + 7) = *(_OWORD *)(v62 + 112);
    *((_OWORD *)v63 + 8) = v66;
    *((_QWORD *)v63 + 18) = v65;
    *((_OWORD *)v63 + 6) = v67;
    v68 = *(_OWORD *)(v62 + 80);
    v69 = *(_OWORD *)(v62 + 32);
    v70 = *(_OWORD *)(v62 + 48);
    *((_OWORD *)v63 + 4) = *(_OWORD *)(v62 + 64);
    *((_OWORD *)v63 + 5) = v68;
    *((_OWORD *)v63 + 2) = v69;
    *((_OWORD *)v63 + 3) = v70;
    LODWORD(v445) = v445 + 1;
    goto LABEL_39;
  }
  if ((*v2 & 0x200000) != 0)
  {
    v177 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 64, 0);
    if ((*(_DWORD *)(v50 + 20) & 0x3FFF80) != 0)
    {
      v51 = *(_QWORD *)(v50 + 48);
      v61 = 2;
    }
    else
    {
      v51 = v177;
      v61 = 1;
    }
    sub_22F368F30(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v369);
    goto LABEL_38;
  }
  v61 = 1;
LABEL_39:
  if ((*v367 & 0x1800000) != 0)
    v71 = ((*v367 >> 19) & 1) + 1;
  else
    v71 = (*v367 >> 19) & 1;
  v72 = v61;
  v2 = v367;
  sub_22E477B1C(a1, (uint64_t)&v444, v50 & 0xFFFFFFFFFFFFFFFBLL, (uint64_t)&v367[2 * v71 + 14], (unint64_t *)&v367[2 * v71 + 14 + 2 * v367[1]], 0, v72, 0);
  sub_22E4FD1B4(&v461, a1, (unint64_t)v8, v50, (unsigned int *)&v444);
  if (!*(_BYTE *)(a1 + 2892))
  {
    v105 = *(uint64_t **)(a1 + 2880);
    if (v105)
    {
      v106 = v461;
      v107 = *(unsigned __int8 *)(v461 + 16);
      if (v107 >= 0x1C)
      {
        v108 = v107 - 33;
        if (v108 <= 0x33 && ((1 << v108) & 0x8000000000041) != 0)
        {
          sub_22EFF605C((uint64_t)v367);
          sub_22E494448(v105, v106, v369, v109);
        }
      }
    }
  }
  v24 = v18;
  if ((*((_BYTE *)v367 + 2) & 0x10) == 0)
  {
    v24 = v18;
    if (sub_22EFBFDCC((unint64_t)v8, 0, 0))
    {
      v73 = *(_QWORD *)(a1 + 152) + *(_QWORD *)(**(_QWORD **)(a1 + 152) - 24);
      v74 = *(unsigned __int16 *)(v73 + 44);
      if (!*(_WORD *)(v73 + 44))
      {
        v75 = *(unsigned __int8 *)(v73 + 15);
        v76 = *(unsigned __int8 *)(v73 + 23);
        if (v75 <= v76)
          v74 = v76;
        else
          v74 = v75;
      }
      v77 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v15);
      if (v77 >= v74)
        v78 = v74;
      else
        v78 = v77;
      v79 = (1 << ~__clz(v78));
      if (v78)
        v80 = v79;
      else
        v80 = 0;
      v81 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      if (v18 <= (uint64_t)(v80 / v81))
        v24 = v80 / v81;
      else
        v24 = v18;
    }
  }
  v22 = 0;
  v23 = 0;
  v360 = 0;
  v49 = v461;
  v48 = *(_QWORD *)(a1 + 8);
LABEL_59:
  v356 = v23;
  if (sub_22F060280((uint64_t)v2))
  {
    if (!sub_22F111438(&v405, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144))
      || (*((_WORD *)v2 + 1) & 0x180) != 0)
    {
      v82 = *(_QWORD *)(a1 + 320);
      v398 = v82;
LABEL_63:
      v350 = v18;
      v83 = v48;
      v346 = v82;
      if (!*(_QWORD *)(a1 + 5832))
        *(_QWORD *)(a1 + 5832) = &v398;
      *(_QWORD *)&v461 = "new.notnull";
      *(_WORD *)v463 = 259;
      v84 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v461 = "new.cont";
      *(_WORD *)v463 = 259;
      v85 = operator new();
      llvm::BasicBlock::BasicBlock();
      v393[0] = v49;
      v393[1] = v83;
      v393[2] = v24;
      v394 = v22;
      v395 = v353;
      v396 = v356;
      v397 = v360;
      *(_QWORD *)&v461 = "new.isnull";
      *(_WORD *)v463 = 259;
      v86 = sub_22E47EF74(a1 + 272, (uint64_t)v393, (uint64_t)&v461);
      v87 = llvm::User::operator new((llvm::User *)0x40);
      v345 = (_QWORD *)v85;
      MEMORY[0x23489C09C](v87, v85, v84, v86, 0);
      *(_WORD *)v463 = 257;
      sub_22E3C12C8((uint64_t *)(a1 + 272), v87, (uint64_t)&v461);
      v88 = (_QWORD *)v84;
      v48 = v83;
      sub_22E5ED9B4((_QWORD *)a1, v88, 0);
      v89 = 1;
      v2 = v367;
      v26 = v369;
      v18 = v350;
      goto LABEL_67;
    }
    v110 = *(_QWORD *)(a1 + 1864);
    v82 = *(_QWORD *)(a1 + 320);
    v398 = v82;
    if ((v110 & 0x10042008000) != 0)
      goto LABEL_63;
    v89 = 0;
    v345 = 0;
    v346 = 0;
  }
  else
  {
    v89 = 0;
    v345 = 0;
    v346 = 0;
    v398 = *(_QWORD *)(a1 + 320);
  }
LABEL_67:
  v90 = (_QWORD *)*((_QWORD *)v2 + 3);
  if (v90 && !sub_22EFBFCDC(v90))
  {
    *(_QWORD *)&v390 = v49;
    *((_QWORD *)&v390 + 1) = v48;
    *(_QWORD *)&v391 = v24;
    *((_QWORD *)&v391 + 1) = __PAIR64__(v353, v22);
    *(_QWORD *)&v392 = v356;
    *((_QWORD *)&v392 + 1) = v360;
    v114 = v22;
    v115 = v2;
    v116 = *v2;
    if ((v116 & 0x100000) != 0)
      v117 = 2;
    else
      v117 = 1;
    v341 = v114;
    v335 = v49;
    v338 = v48;
    if (*(_QWORD *)(a1 + 5832))
    {
      v172 = (v116 >> 21) & 1;
      v436 = v391;
      v435 = v390;
      v437 = v392;
      if ((BYTE8(v391) & 3) != 0)
        v173 = sub_22F28ABCC(&v435, a1);
      else
        v173 = v435;
      v410 = (unint64_t)v173;
      v412[16] = 0;
      sub_22F252D74(a1, &v410, (uint64_t)&v461);
      v406 = (unint64_t)Select;
      v409 = 0;
      sub_22F252D74(a1, &v406, (uint64_t)&v410);
      v202 = *((_QWORD *)v367 + 3);
      v203 = v367[1];
      v204 = *v367 >> 20;
      v205 = sub_22E4899EC(a1 + 1984, 1, 72 * v203 + 160);
      *(_QWORD *)v205 = off_24FA63EA0;
      *(_DWORD *)(v205 + 8) = v203 & 0x7FFFFFFF | (v204 << 31);
      *(_QWORD *)(v205 + 16) = v202;
      *(_OWORD *)(v205 + 24) = v461;
      *(_OWORD *)(v205 + 40) = v462;
      *(_OWORD *)(v205 + 56) = *(_OWORD *)v463;
      *(_OWORD *)(v205 + 72) = *(_OWORD *)&v463[16];
      v207 = v411;
      *(_OWORD *)(v205 + 88) = v410;
      *(_OWORD *)(v205 + 104) = v207;
      v208 = *(_OWORD *)&v412[16];
      *(_OWORD *)(v205 + 120) = *(_OWORD *)v412;
      *(_OWORD *)(v205 + 136) = v208;
      *(_QWORD *)(v205 + 152) = v18;
      v209 = v367[1];
      if ((_DWORD)v209)
      {
        v210 = (_QWORD *)(v205 + 224);
        v211 = v117 + v172;
        do
        {
          v212 = (char *)v444 + 152 * v211;
          sub_22E479748((uint64_t)v212, a1, (uint64_t)&v461);
          sub_22F252D74(a1, &v461, (uint64_t)&v410);
          v213 = *((_QWORD *)v212 + 18);
          *(_OWORD *)v463 = *(_OWORD *)v412;
          *(_OWORD *)&v463[9] = *(_OWORD *)&v412[9];
          v214 = v411;
          *((_OWORD *)v210 - 4) = v410;
          *((_OWORD *)v210 - 3) = v214;
          *((_OWORD *)v210 - 2) = *(_OWORD *)v463;
          *((_OWORD *)v210 - 1) = *(_OWORD *)&v463[16];
          *v210 = v213;
          v210 += 9;
          ++v211;
          --v209;
        }
        while (v209);
      }
      v215 = sub_22E489C10(a1, v206);
      sub_22F2531F0(a1, v215, v216);
    }
    else
    {
      v344 = (v116 >> 21) & 1;
      v118 = v49;
      v119 = v115[1];
      v352 = *((_QWORD *)v115 + 3);
      if ((v114 & 3) != 0)
      {
        v118 = sub_22F28ABCC(&v390, a1);
        v116 = *v115;
      }
      v120 = sub_22E4899EC(a1 + 1984, 1, (v119 << 6) | 0x30);
      *(_QWORD *)v120 = off_24FA63E78;
      *(_DWORD *)(v120 + 8) = v119 & 0x7FFFFFFF | ((v116 >> 20) << 31);
      *(_QWORD *)(v120 + 16) = v352;
      *(_QWORD *)(v120 + 24) = v118;
      *(_QWORD *)(v120 + 32) = Select;
      *(_QWORD *)(v120 + 40) = v18;
      v121 = v115[1];
      if ((_DWORD)v121)
      {
        v122 = (_QWORD *)(v120 + 104);
        v123 = v117 + v344;
        do
        {
          v124 = (char *)v444 + 152 * v123;
          sub_22E479748((uint64_t)v124, a1, (uint64_t)&v410);
          v125 = *((_QWORD *)v124 + 18);
          v463[16] = v412[16];
          v127 = v411;
          v126 = *(_OWORD *)v412;
          *(_OWORD *)(v122 - 7) = v410;
          *(_OWORD *)(v122 - 5) = v127;
          *(_OWORD *)(v122 - 3) = v126;
          *(v122 - 1) = *(_QWORD *)&v463[16];
          *v122 = v125;
          v122 += 8;
          ++v123;
          --v121;
        }
        while (v121);
      }
    }
    v351 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v343 = (llvm::Instruction *)sub_22F24866C(a1 + 272);
    v2 = v367;
    v26 = v369;
    v22 = v341;
    v49 = v335;
    v48 = v338;
  }
  else
  {
    v343 = 0;
    v351 = -1;
  }
  v91 = v89;
  if (Select == v364)
  {
    v93 = v2;
    v98 = v26;
    v96 = v356;
    v94 = v24;
    v97 = v360;
    v95 = v353;
  }
  else
  {
    v92 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
    v385[0] = v49;
    v385[1] = v48;
    v385[2] = v24;
    v386 = v22;
    v387 = v353;
    v388 = v356;
    v389 = v360;
    v93 = v2;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD *, uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v92 + 640))(&v461, v92, a1, v385, v358, v2, v26);
    v48 = *((_QWORD *)&v461 + 1);
    v49 = v461;
    v94 = v462;
    v22 = DWORD2(v462);
    v95 = HIDWORD(v462);
    v97 = *(_QWORD *)&v463[8];
    v96 = *(_QWORD *)v463;
    v98 = v405;
  }
  v370 = v98;
  v99 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v98, 0);
  *(_QWORD *)&v378 = v49;
  *((_QWORD *)&v378 + 1) = v48;
  v379 = v94;
  v380 = v22;
  v381 = v95;
  v382 = v96;
  v383 = v97;
  *(_WORD *)v463 = 257;
  v357 = (llvm::LLVMContext *)v99;
  sub_22E3BEE6C((uint64_t *)(a1 + 272), &v378, v99, (uint64_t)&v461, (uint64_t)v384);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 39) & 4) != 0 && sub_22EFBFCDC(v347))
  {
    v461 = *(_OWORD *)&v384[8];
    v462 = *(_OWORD *)&v384[24];
    *(_QWORD *)v463 = *(_QWORD *)&v384[40];
    LaunderInvariantGroup = llvm::IRBuilderBase::CreateLaunderInvariantGroup();
    *(_OWORD *)&v384[8] = v461;
    *(_OWORD *)&v384[24] = v462;
    *(_QWORD *)v384 = LaunderInvariantGroup;
    *(_QWORD *)&v384[40] = *(_QWORD *)v463;
  }
  v363 = (uint64_t *)(a1 + 272);
  v361 = v91;
  if (v91)
    v101 = 0x2000000;
  else
    v101 = 0;
  v102 = **((_QWORD **)v93 + 4);
  for (i = v102; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_90;
      v104 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v104 <= 0x39)
        break;
LABEL_85:
      if (sub_22F115668(i))
        v102 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_111;
    }
    if (v104 == 24)
      goto LABEL_110;
    if (v104 == 26)
      break;
    if (((1 << v104) & 0x20000000200003CLL) == 0)
      goto LABEL_85;
LABEL_90:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_90;
LABEL_110:
  v102 = i;
LABEL_111:
  v128 = sub_22F115668(v102);
  v377[0] = *(_OWORD *)v384;
  v377[1] = *(_OWORD *)&v384[16];
  v377[2] = *(_OWORD *)&v384[32];
  v129 = (llvm::Instruction *)v358;
  sub_22E484AD4(a1, 5u, v128, (uint64_t)v377, v370, *(unint64_t *)&v384[16], v101, 0, v358);
  v130 = v405;
  v374 = *(_OWORD *)v384;
  v375 = *(_OWORD *)&v384[16];
  v376 = *(_OWORD *)&v384[32];
  v416[0] = 0;
  v416[1] = a1;
  v131 = v367;
  sub_22EFF605C((uint64_t)v367);
  sub_22E48EE24(v416, v132, 0);
  v133 = *v367;
  if ((v133 & 0x80000) == 0)
  {
    if ((v133 & 0x1800000) != 0)
    {
      v134 = *(_QWORD *)&v367[2 * ((v133 >> 19) & 1) + 14];
      if (v134)
      {
        v135 = *(_QWORD *)(*((_QWORD *)v367 + 1) & 0xFFFFFFFFFFFFFFF0);
        if (!v135 || *(_BYTE *)(v135 + 16) != 39)
          v135 = sub_22F10CF48(v135);
        v136 = *(_QWORD *)(v135 + 32);
        v461 = v374;
        v462 = v375;
        *(_OWORD *)v463 = v376;
        sub_22E4FCD94(a1, v134, v136, &v461);
      }
    }
    goto LABEL_412;
  }
  v413 = v374;
  v414 = v375;
  v415 = v376;
  v441 = v130;
  v440 = v364;
  if ((v133 & 0x1800000) == 0)
    goto LABEL_412;
  v410 = v374;
  v411 = v375;
  *(_OWORD *)v412 = v376;
  v439 = 0;
  v137 = *(unsigned int **)&v367[2 * ((v133 >> 19) & 1) + 14];
  v138 = sub_22F115260(v130);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v130 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v461);
  v139 = v461;
  v140 = (v414 | v139) & -(uint64_t)(v414 | v139);
  v438[0] = a1;
  v438[1] = (uint64_t)&v441;
  v438[2] = (uint64_t)&v440;
  v438[3] = (uint64_t)&v439;
  v438[4] = (uint64_t)&v410;
  if (*(unsigned __int8 *)v137 != 180)
  {
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = -1;
    goto LABEL_121;
  }
  if (sub_22F3C2220(v137))
  {
    v174 = *(_QWORD *)((v441 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v174 & 8) != 0)
    {
      v176 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v175 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v175 = 0;
      v176 = 0;
    }
    v272 = **((_QWORD **)v137 + 2);
    v461 = v410;
    v462 = v411;
    *(_OWORD *)v463 = *(_OWORD *)v412;
    *(_QWORD *)&v463[16] = v175 | v176 | (v174 | v441) & 7;
    v463[24] = 33;
    sub_22E4EF100(a1, v272, &v461);
    v273 = *(_QWORD *)(*((_QWORD *)v137 + 1) & 0xFFFFFFFFFFFFFFF0);
    if (!v273 || (*(_DWORD *)(v273 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
      v273 = sub_22F10CF48(v273);
    v274 = (_QWORD *)(v273 + 40);
    if (*(_DWORD *)(v273 + 48) >= 0x41u)
      v274 = (_QWORD *)*v274;
    v439 = *v274;
    v435 = v410;
    v436 = v411;
    v437 = *(_OWORD *)v412;
    v429 = "string.init.end";
    LOWORD(v433) = 259;
    sub_22F2486C4(v363, (uint64_t)&v435, v439, (uint64_t)&v429, (uint64_t)&v406);
    v410 = v406;
    v411 = v407;
    *(_OWORD *)v412 = v408;
    if (v358 && *(_BYTE *)(v358 + 16) == 16)
    {
      v275 = v439;
      v276 = (_QWORD *)(v358 + 24);
      v277 = *(_DWORD *)(v358 + 32);
      if (v277 < 0x41)
      {
LABEL_374:
        if (*v276 == v275)
          goto LABEL_412;
      }
      else if (v277 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v358 + 24)) <= 0x40)
      {
        v276 = (_QWORD *)*v276;
        goto LABEL_374;
      }
    }
    sub_22E4FCC80(v438);
    goto LABEL_412;
  }
  v439 = (*((_QWORD *)v137 + 3) - *((_QWORD *)v137 + 2)) >> 3;
  v217 = *(_QWORD *)(*((_QWORD *)v367 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (v217 && *(_BYTE *)(v217 + 16) == 39)
  {
    v218 = v140;
  }
  else
  {
    v218 = v140;
    v217 = sub_22F10CF48(v217);
  }
  v253 = *(_QWORD *)(v217 + 32);
  v254 = *(_QWORD *)(v253 & 0xFFFFFFFFFFFFFFF0);
  if (v254 && (*(_DWORD *)(v254 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
  {
    v329 = *(_DWORD *)(v254 + 16);
LABEL_477:
    if (v329 == 2)
    {
      v330 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v253, 0);
      v406 = v410;
      v407 = v411;
      v408 = *(_OWORD *)v412;
      LOWORD(v437) = 257;
      v357 = (llvm::LLVMContext *)v330;
      sub_22E3BEE6C(v363, &v406, v330, (uint64_t)&v435, (uint64_t)&v461);
      v410 = v461;
      v411 = v462;
      *(_OWORD *)v412 = *(_OWORD *)v463;
      v331 = sub_22EF6A060(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v254);
      v439 *= v331;
    }
  }
  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v254 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v332 = sub_22F10CF48(*(_QWORD *)(v253 & 0xFFFFFFFFFFFFFFF0));
    if (v332)
    {
      v254 = v332;
      v329 = *(unsigned __int8 *)(v332 + 16);
      goto LABEL_477;
    }
  }
  v333 = v138;
  v355 = v218;
  if (sub_22F245DD4(a1, v138))
  {
    v316 = v413;
    v317 = (llvm::Type *)llvm::PointerType::get();
    v318 = *(unsigned __int8 *)(a1 + 130);
    *(_QWORD *)&v461 = "array.init.end";
    *(_WORD *)v463 = 259;
    v319 = sub_22E4D83CC(a1, v317, v318, (uint64_t)&v461, 0, 0);
    v321 = 0;
    v322 = v319 & 0xFFFFFFFFFFFFFFF8;
    if (v319 <= 7)
      v322 = 0;
    v372 = (const char *)v322;
    v323 = v320 & 0xFFFFFFFFFFFFFFF8;
    if (v319 <= 7)
      v323 = 0;
    v342 = v323;
    v324 = v218;
    if (v319 >= 8)
      v321 = 1 << (v320 & 7 | (8 * (v319 & 7)));
    v339 = v321;
    v325 = v316;
    v326 = BYTE8(v414) & 3;
    if ((BYTE8(v414) & 3) != 0)
      v325 = sub_22F28ABCC(&v413, a1);
    *(_QWORD *)&v461 = v372;
    *((_QWORD *)&v461 + 1) = v342;
    *(_QWORD *)&v462 = v339;
    DWORD2(v462) = 0;
    *(_OWORD *)v463 = 0uLL;
    v366 = sub_22E3BEDDC(v363, v325, &v461, 0);
    if (v326)
      v316 = sub_22F28ABCC(&v413, a1);
    *(_QWORD *)&v435 = v372;
    *((_QWORD *)&v435 + 1) = v342;
    *(_QWORD *)&v436 = v339;
    DWORD2(v436) = 0;
    v437 = 0uLL;
    sub_22F25A7E8(a1, v316, &v435, v441, v324, (uint64_t)off_24FA63F08[v138 - 1]);
    v255 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  }
  else
  {
    v372 = 0;
    v339 = 0;
    v342 = 0;
    v366 = 0;
    v255 = -1;
  }
  v337 = v255;
  v256 = *((_QWORD *)v137 + 3) - *((_QWORD *)v137 + 2);
  if ((v256 & 0x7FFFFFFF8) != 0)
  {
    v257 = 0;
    v349 = v411;
    v258 = (v256 >> 3);
    v259 = v139;
    do
    {
      if (v372)
      {
        if ((BYTE8(v411) & 3) != 0)
          v260 = sub_22F28ABCC(&v410, a1);
        else
          v260 = v410;
        v261 = llvm::PointerType::get();
        LOWORD(v425) = 257;
        v262 = sub_22E3C1740(v363, 49, v260, v261, (uint64_t)&v423);
        v429 = v372;
        v430 = v342;
        v431 = v339;
        v432 = 0;
        v433 = 0;
        v434 = 0;
        sub_22E3BEDDC(v363, v262, &v429, 0);
      }
      v263 = *(_QWORD *)(*((_QWORD *)v137 + 2) + 8 * v257);
      v264 = *(_QWORD *)(v263 + 8);
      *(_OWORD *)v426 = v410;
      v427 = v411;
      v428 = *(_OWORD *)v412;
      sub_22E4FCD94(a1, v263, v264, (__int128 *)v426);
      v265 = *((_QWORD *)&v410 + 1);
      if ((BYTE8(v411) & 3) != 0)
        v266 = (uint64_t *)sub_22F28ABCC(&v410, a1);
      else
        v266 = (uint64_t *)v410;
      v267 = (uint64_t *)llvm::ConstantInt::get();
      *(_QWORD *)&v423 = "array.exp.next";
      LOWORD(v425) = 259;
      *(_QWORD *)&v410 = sub_22E3E5044(v363, v265, v266, v267, (uint64_t)&v423);
      *(_QWORD *)&v411 = (v259 | v349) & -(v259 | v349);
      ++v257;
      DWORD2(v411) = 0;
      *(_OWORD *)v412 = 0uLL;
      v259 += v139;
    }
    while (v258 != v257);
  }
  v268 = *((_QWORD *)v137 + 7);
  v137 = 0;
  if ((v268 & 2) != 0)
  {
    v131 = v367;
    v141 = v372;
    v129 = (llvm::Instruction *)v358;
    v270 = (uint64_t *)(a1 + 272);
    v138 = v333;
    v140 = v355;
    v143 = v339;
    v142 = v342;
  }
  else
  {
    v269 = (unsigned __int8 *)(v268 & 0xFFFFFFFFFFFFFFFCLL);
    v131 = v367;
    v141 = v372;
    v129 = (llvm::Instruction *)v358;
    v270 = (uint64_t *)(a1 + 272);
    v138 = v333;
    v140 = v355;
    v143 = v339;
    v142 = v342;
    if (v269)
    {
      while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v269 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) == 2
           && *v269 == 180)
      {
        v137 = 0;
        v271 = *((_QWORD *)v269 + 7);
        if ((v271 & 2) == 0)
        {
          v269 = (unsigned __int8 *)(v271 & 0xFFFFFFFFFFFFFFFCLL);
          if (v269)
            continue;
        }
        goto LABEL_456;
      }
      v137 = (unsigned int *)v269;
    }
  }
LABEL_456:
  v422[0] = v410;
  v422[1] = v411;
  v422[2] = *(_OWORD *)v412;
  LOWORD(v421) = 257;
  sub_22E3BEE6C(v270, v422, *((uint64_t *)&v413 + 1), (uint64_t)&v419, (uint64_t)&v423);
  v410 = v423;
  v411 = v424;
  *(_OWORD *)v412 = v425;
  v144 = v366;
  v145 = v337;
LABEL_121:
  if (v129)
    v146 = *((_BYTE *)v129 + 16) == 16;
  else
    v146 = 0;
  v147 = !v146;
  if (!v146)
    goto LABEL_132;
  v148 = (_QWORD *)((char *)v129 + 24);
  if (*((_DWORD *)v129 + 8) >= 0x41u)
    v148 = (_QWORD *)*v148;
  if (*v148 <= (unint64_t)v439)
  {
    if (v144)
      sub_22F25343C((_QWORD *)a1, (llvm::LLVMContext *)v145, v144);
  }
  else
  {
LABEL_132:
    if ((*(_BYTE *)v137 & 0xFE) == 0x76)
    {
      v149 = *((_QWORD *)v137 + 2);
      v150 = *(_QWORD *)(v149 + 80);
      if ((v150 & 0x800000) == 0)
        goto LABEL_134;
      if ((*((_BYTE *)v137 + 2) & 0x40) == 0)
        goto LABEL_412;
      v160 = v150 & 0x7F;
      v161 = -40;
      if (v160 > 70)
      {
        if (v160 != 83)
        {
          if (v160 == 71)
          {
            v161 = -56;
          }
          else if (v160 != 81)
          {
            goto LABEL_441;
          }
        }
      }
      else
      {
        if (v160 > 0x18)
          goto LABEL_440;
        if (v160 == 16)
          goto LABEL_162;
        if (((1 << v160) & 0x1066) == 0)
        {
          if (v160 == 24)
          {
LABEL_162:
            v161 = -48;
          }
          else
          {
LABEL_440:
            if (v160 == 70)
            {
              v161 = -64;
            }
            else
            {
LABEL_441:
              v310 = v160 - 52;
              v158 = (v160 - 33) >= 5;
              v311 = -48;
              if (!v158)
                v311 = -64;
              if (v310 >= 6)
                v161 = v311;
              else
                v161 = -72;
            }
          }
        }
      }
      v312 = v143;
      v313 = *(_QWORD *)(v149 + 72 + v161 + 16);
      v314 = (_QWORD *)(v313 & 0xFFFFFFFFFFFFFFF8);
      if ((v313 & 4) != 0)
        v314 = (_QWORD *)*v314;
      if (v314)
        v315 = v314 - 8;
      else
        v315 = 0;
      sub_22E3CD31C((uint64_t *)(v315[13] + 96), v315[13]);
      if ((*(_QWORD *)v315[16] & 0x200) == 0)
      {
        v143 = v312;
        if ((sub_22E4FCC80(v438) & 1) == 0)
        {
LABEL_134:
          if (v141)
          {
            if ((BYTE8(v411) & 3) != 0)
              v151 = sub_22F28ABCC(&v410, a1);
            else
              v151 = v410;
            *(_QWORD *)&v423 = v141;
            *((_QWORD *)&v423 + 1) = v142;
            *(_QWORD *)&v424 = v143;
            DWORD2(v424) = 0;
            v425 = 0uLL;
            sub_22E3BEDDC(v363, v151, &v423, 0);
          }
          if (v439)
          {
            v152 = llvm::ConstantInt::get();
            LOWORD(v421) = 257;
            v129 = sub_22E3E48CC((uint64_t)v363, (uint64_t)v129, v152, (uint64_t)&v419, 0, 0);
          }
          v419 = v410;
          v420 = v411;
          v421 = *(_OWORD *)v412;
          sub_22E483158(a1, v149, (uint64_t)v129, (uint64_t)&v419, (uint64_t)v137, 1, (*v137 >> 22) & 1);
        }
      }
    }
    else
    {
      v348 = v147;
      v354 = v140;
      v336 = (llvm::LLVMContext *)v145;
      v365 = (llvm::Instruction *)v144;
      v153 = v441;
      LOBYTE(v417) = -77;
      if (byte_255E04EB3)
        sub_22F3F189C(179);
      v154 = v417;
      v418 = v153;
      v417 = v417 & 0xFFFC00FF | (((*(_DWORD *)(*(_QWORD *)(v153 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
      v155 = *(unsigned __int8 *)v137;
      if (v155 == 179)
      {
        if ((sub_22E4FCC80(v438) & 1) != 0)
          goto LABEL_412;
        v155 = v154;
        v137 = &v417;
      }
      if (v155 != 180)
        goto LABEL_396;
      if (((*((_QWORD *)v137 + 3) - *((_QWORD *)v137 + 2)) & 0x7FFFFFFF8) == 0)
      {
        if ((sub_22E4FCC80(v438) & 1) != 0)
          goto LABEL_412;
        if (*(unsigned __int8 *)v137 != 180)
          goto LABEL_396;
      }
      v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v137 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v156 || *(_BYTE *)(v156 + 16) != 45 || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v156 + 24)) + 73) & 0xE0) != 0)
        goto LABEL_396;
      v157 = sub_22F114198(*(_QWORD *)(v156 + 24));
      if (v157)
        v158 = (*(_DWORD *)(v157 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v158 = 0;
      if (v158)
      {
        v278 = v157;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v157 + 104) + 96), *(_QWORD *)(v157 + 104));
        v159 = *(_DWORD *)(*(_QWORD *)(v278 + 128) + 16);
      }
      else
      {
        v159 = 0;
      }
      v279 = sub_22F114198(*(_QWORD *)(v156 + 24));
      v280 = sub_22EFC3B90(v279);
      if (v280)
      {
LABEL_381:
        v281 = (*(_BYTE *)(v280 + 68) & 1) != 0 && *(_QWORD *)(v280 + 40) == 0;
        v159 += !v281;
        while (1)
        {
          v280 = *(_QWORD *)(v280 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v280)
            break;
          if ((*(_DWORD *)(v280 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_381;
        }
      }
      v282 = (unsigned __int8 **)*((_QWORD *)v137 + 2);
      v283 = (*((_QWORD *)v137 + 3) - (_QWORD)v282) >> 3;
      if (v159 == (_DWORD)v283 && (_DWORD)v283 != 0)
      {
        v285 = v159;
        do
        {
          v286 = *v282++;
          v159 -= *v286 != 179;
          --v285;
        }
        while (v285);
      }
      if (v159 != (_DWORD)v283 || (sub_22E4FCC80(v438) & 1) == 0)
      {
LABEL_396:
        v334 = v138;
        v340 = *(_QWORD *)(a1 + 320);
        *(_QWORD *)&v423 = "new.loop";
        LOWORD(v425) = 259;
        v373 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)&v423 = "new.loop.end";
        LOWORD(v425) = 259;
        v368 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v287 = *((_QWORD *)&v413 + 1);
        v288 = (uint64_t *)v129;
        if ((BYTE8(v414) & 3) != 0)
          v289 = (uint64_t *)sub_22F28ABCC(&v413, a1);
        else
          v289 = (uint64_t *)v413;
        *(_QWORD *)&v423 = "array.end";
        LOWORD(v425) = 259;
        v290 = (uint64_t *)(a1 + 272);
        v291 = sub_22E3E5044(v363, v287, v289, v288, (uint64_t)&v423);
        if (v348)
        {
          if ((BYTE8(v411) & 3) != 0)
            v292 = (uint64_t *)sub_22F28ABCC(&v410, a1);
          else
            v292 = (uint64_t *)v410;
          *(_QWORD *)&v423 = "array.isempty";
          LOWORD(v425) = 259;
          v290 = (uint64_t *)(a1 + 272);
          v293 = sub_22E3C18F4((uint64_t)v363, 32, v292, (uint64_t)v291, (uint64_t)&v423);
          sub_22E3D26FC(v363, v293, (uint64_t)v368, (uint64_t)v373, 0, 0);
        }
        v359 = (uint64_t)v291;
        sub_22E5ED9B4((_QWORD *)a1, v373, 0);
        v294 = llvm::PointerType::get();
        *(_QWORD *)&v423 = "array.cur";
        LOWORD(v425) = 259;
        v295 = (llvm::PHINode *)sub_22E3C4B80(v290, v294, 2, (uint64_t)&v423);
        if ((BYTE8(v411) & 3) != 0)
          v296 = sub_22F28ABCC(&v410, a1);
        else
          v296 = v410;
        sub_22E3C4C50(v295, v296, v340);
        *(_QWORD *)&v410 = v295;
        *(_QWORD *)&v411 = v354;
        DWORD2(v411) = 0;
        *(_OWORD *)v412 = 0uLL;
        if (v141)
        {
          *(_QWORD *)&v423 = v141;
          *((_QWORD *)&v423 + 1) = v142;
          *(_QWORD *)&v424 = v143;
          DWORD2(v424) = 0;
          v425 = 0uLL;
          sub_22E3BEDDC(v363, v295, &v423, 0);
        }
        if (!v365)
        {
          if (sub_22F245DD4(a1, v334))
          {
            if ((BYTE8(v414) & 3) != 0)
              v327 = sub_22F28ABCC(&v413, a1);
            else
              v327 = v413;
            if ((BYTE8(v411) & 3) != 0)
              v328 = sub_22F28ABCC(&v410, a1);
            else
              v328 = v410;
            sub_22F25A708(a1, v327, v328, v441, v354, (uint64_t)off_24FA63F08[v334 - 1]);
            v336 = (llvm::LLVMContext *)(*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000));
            v365 = (llvm::Instruction *)sub_22F24866C((uint64_t)v363);
          }
          else
          {
            v365 = 0;
          }
        }
        v297 = *((_QWORD *)v137 + 1);
        v419 = v410;
        v420 = v411;
        v421 = *(_OWORD *)v412;
        sub_22E4FCD94(a1, (uint64_t)v137, v297, &v419);
        if (v365)
        {
          sub_22F25343C((_QWORD *)a1, v336, (uint64_t)v365);
          llvm::Instruction::eraseFromParent(v365);
        }
        if ((BYTE8(v411) & 3) != 0)
          v298 = (uint64_t *)sub_22F28ABCC(&v410, a1);
        else
          v298 = (uint64_t *)v410;
        v442[0] = "array.next";
        v443 = 259;
        v299 = (uint64_t *)sub_22E3E51B0(v363, v357, v298, 1, (uint64_t)v442);
        v442[0] = "array.atend";
        v443 = 259;
        v300 = sub_22E3C18F4((uint64_t)v363, 32, v299, v359, (uint64_t)v442);
        v301 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v301, v368, v373, v300, 0);
        v443 = 257;
        sub_22E3C12C8(v363, v301, (uint64_t)v442);
        sub_22E3C4C50(v295, (uint64_t)v299, *(_QWORD *)(a1 + 320));
        sub_22E5ED9B4((_QWORD *)a1, v368, 0);
      }
    }
  }
LABEL_412:
  sub_22E48F084(v416);
  if ((v384[24] & 3) != 0)
    v302 = (llvm::Constant **)sub_22F28ABCC(v384, a1);
  else
    v302 = *(llvm::Constant ***)v384;
  if ((*((_BYTE *)v131 + 2) & 8) != 0)
  {
    v303 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *((_QWORD *)v131 + 1), 0);
    if (*v302 != (llvm::Constant *)v303)
    {
      *(_WORD *)v463 = 257;
      v302 = (llvm::Constant **)sub_22E3C1740(v363, 49, (uint64_t)v302, v303, (uint64_t)&v461);
    }
  }
  if ((v351 & 0x8000000000000000) == 0)
  {
    sub_22F25343C((_QWORD *)a1, (llvm::LLVMContext *)v351, (uint64_t)v343);
    llvm::Instruction::eraseFromParent(v343);
  }
  if (v361)
  {
    if (*(uint64_t **)(a1 + 5832) == &v398)
      *(_QWORD *)(a1 + 5832) = 0;
    v304 = *(_QWORD *)(a1 + 320);
    sub_22E5ED9B4((_QWORD *)a1, v345, 0);
    v305 = (uint64_t)*v302;
    *(_WORD *)v463 = 257;
    v306 = (llvm::PHINode *)sub_22E3C4B80(v363, v305, 2, (uint64_t)&v461);
    sub_22E3C4C50(v306, (uint64_t)v302, v304);
    NullValue = llvm::Constant::getNullValue(*v302, v307);
    sub_22E3C4C50(v306, NullValue, v346);
    v302 = (llvm::Constant **)v306;
  }
  if (v458 != v460)
    free(v458);
  if (v455 != v457)
    free(v455);
  if (v452 != v454)
    free(v452);
  if (v444 != &v446)
    free(v444);
  return v302;
}

uint64_t sub_22E4FFE1C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  _BOOL4 v15;
  _QWORD *v16;
  int v17;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 26;
  else
    v3 = 0;
  if (!v3)
    v2 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0));
  v4 = v2 + 8 * (unsigned __int16)(*(_QWORD *)(v2 + 16) >> 38) + 40;
  v5 = v2 + 48;
  v6 = sub_22EFC06D0(a1);
  v7 = 48;
  if (v6)
  {
    v7 = 56;
    v5 = v2 + 56;
  }
  if (v5 == v4)
  {
    v13 = 0;
    v14 = 0;
    return v13 | v6 | v14;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + v7) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v8 + 16);
  if (v8)
    v10 = v9 == 11;
  else
    v10 = 0;
  if (v10)
  {
    v15 = ((*(_DWORD *)(v8 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  }
  else
  {
    if (!v8 || v9 != 44)
    {
      v12 = v9 == 9;
LABEL_21:
      v15 = v12;
      goto LABEL_24;
    }
    v11 = sub_22F114198(*(_QWORD *)(v8 + 24));
    if ((*(_BYTE *)(v11 + 74) & 1) != 0 || *(_QWORD *)(v11 + 128) >= 8uLL)
    {
      v12 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v8 + 24)) + 76) & 0x80) == 0;
      goto LABEL_21;
    }
    v15 = 0;
  }
LABEL_24:
  v16 = (_QWORD *)(v5 + 8 * v15);
  if (v16 == (_QWORD *)v4)
  {
    v13 = 0;
    v14 = 0;
    if (!v15)
      return v13 | v6 | v14;
    goto LABEL_29;
  }
  v17 = sub_22F112268(*(_QWORD *)(*v16 & 0xFFFFFFFFFFFFFFF0));
  v14 = 0;
  if (v17)
    v13 = 0x10000;
  else
    v13 = 0;
  if (v15)
LABEL_29:
    v14 = 256;
  return v13 | v6 | v14;
}

_QWORD *sub_22E4FFF90(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  llvm::GetElementPtrInst *v50;
  uint64_t (*v51)();
  int v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[3];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[3];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[3];
  _OWORD v76[3];
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  sub_22E4DFD40(&v72, a1);
  *(_QWORD *)&v82 = "delete.notnull";
  LOWORD(v84) = 259;
  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v82 = "delete.end";
  LOWORD(v84) = 259;
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v71[0] = v72;
  v71[1] = v73;
  v71[2] = v74;
  *(_QWORD *)&v82 = "isnull";
  LOWORD(v84) = 259;
  v6 = sub_22E47EF74(a1 + 272, (uint64_t)v71, (uint64_t)&v82);
  v7 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v7, v5, v4, v6, 0);
  LOWORD(v84) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v7, (uint64_t)&v82);
  sub_22E5ED9B4((_QWORD *)a1, v4, 0);
  v8 = sub_22F0602E8(a2);
  if (sub_22EFC06D0(*(_QWORD *)(a2 + 16)))
  {
    v68 = v72;
    v69 = v73;
    v70 = v74;
    v10 = sub_22F10C2A4(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
    if (v10 && (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3)
      v10 = 0;
    v11 = sub_22EFD10F8(v10);
    if (!v11
      || (v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11),
          (*(_BYTE *)(v12 + 82) & 0xC) == 0)
      && !sub_22EFD7260(v12))
    {
      v47 = *(_QWORD *)(a2 + 16);
      if ((BYTE8(v69) & 3) != 0)
        v48 = sub_22F28ABCC(&v68, a1);
      else
        v48 = v68;
      sub_22F261F20(a1, v47, v48, v8, 0, 0);
      return (_QWORD *)sub_22E5ED9B4((_QWORD *)a1, v5, 0);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
    v82 = v68;
    v83 = v69;
    v84 = v70;
    v14 = *(void (**)(void))(*(_QWORD *)v13 + 208);
    goto LABEL_9;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 2)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v9);
    v15 = llvm::ConstantInt::get();
    *(_QWORD *)&v82 = &v83;
    *(_QWORD *)&v83 = v15;
    *((_QWORD *)&v82 + 1) = 0x800000001;
    while (1)
    {
      v16 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v8);
      if (!v16 || *(_BYTE *)(v16 + 16) != 2)
        break;
      v8 = *(_QWORD *)(v16 + 32);
      v17 = DWORD2(v82);
      if (DWORD2(v82) >= (unint64_t)HIDWORD(v82))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = DWORD2(v82);
      }
      *(_QWORD *)(v82 + 8 * v17) = v15;
      ++DWORD2(v82);
    }
    v67[0] = v72;
    v67[1] = v73;
    v67[2] = v74;
    v18 = (unsigned __int8 **)v82;
    v19 = DWORD2(v82);
    v20 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v8, 0);
    *(_QWORD *)&v77[0] = "del.first";
    LOWORD(v78) = 259;
    sub_22E480FFC((uint64_t *)(a1 + 272), (uint64_t)v67, v18, v19, v20, v73, (const char **)v77, (uint64_t)&v79);
    v72 = v79;
    v73 = v80;
    v74 = v81;
    if ((__int128 *)v82 != &v83)
      free((void *)v82);
  }
  if ((*(_BYTE *)(a2 + 2) & 8) != 0)
  {
    v64 = v72;
    v65 = v73;
    v66 = v74;
    *(_QWORD *)&v77[0] = 0;
    *(_QWORD *)&v76[0] = 0;
    *(_QWORD *)&v75[0] = 0;
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
    v82 = v72;
    v83 = v73;
    v84 = v74;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *))(*(_QWORD *)v33 + 648))(v33, a1, &v82, a2, v8, v77, v76, v75);
    v34 = *(_QWORD *)(a2 + 16);
    v35 = *(_QWORD *)&v76[0];
    v36 = *(_QWORD *)&v77[0];
    v37 = *(_QWORD *)&v75[0];
    v38 = (_QWORD *)sub_22E4899EC(a1 + 1984, 3, 48);
    *v38 = off_24FA63EC8;
    v38[1] = v35;
    v38[2] = v34;
    v38[3] = v36;
    v38[4] = v8;
    v38[5] = v37;
    v39 = sub_22F115260(v8);
    if (v39)
    {
      v40 = v39;
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v79);
      v41 = (v65 | v79) & -(uint64_t)(v65 | v79);
      if ((BYTE8(v65) & 3) != 0)
        v42 = (uint64_t *)sub_22F28ABCC(&v64, a1);
      else
        v42 = (uint64_t *)v64;
      *(_QWORD *)&v79 = "delete.end";
      LOWORD(v81) = 259;
      v50 = sub_22E3E5044((uint64_t *)(a1 + 272), *((uint64_t *)&v64 + 1), v42, *(uint64_t **)&v77[0], (uint64_t)&v79);
      v51 = off_24FA63F08[v40 - 1];
      v52 = sub_22F245DD4(a1, v40);
      sub_22F25A3F8((_QWORD *)a1, v42, (uint64_t)v50, v8, v41, (void (*)(_QWORD *, void **, uint64_t))v51, 1, v52);
    }
    goto LABEL_51;
  }
  v61 = v72;
  v62 = v73;
  v63 = v74;
  sub_22EFF605C(a2);
  v79 = v72;
  v80 = v73;
  v81 = v74;
  sub_22E484AD4(a1, 4u, v21, (uint64_t)&v79, v8, 0, 0, 0, 0);
  v22 = 0;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24 && *(_BYTE *)(v24 + 16) == 45)
  {
    v25 = sub_22F114198(*(_QWORD *)(v24 + 24));
    v26 = v25;
    if (!*(_QWORD *)(v25 + 128)
      && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104)), !*(_QWORD *)(v26 + 128))
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v26 + 104) + 96), *(_QWORD *)(v26 + 104)),
          (**(_QWORD **)(v26 + 128) & 0x100000000000) != 0))
    {
      v22 = 0;
      goto LABEL_37;
    }
    v27 = sub_22EFD10F8(v26);
    v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27);
    if ((*(_BYTE *)(v28 + 82) & 0xC) == 0 && !sub_22EFD7260(v28))
    {
      v22 = v27;
      goto LABEL_37;
    }
    v29 = *(_QWORD *)(a2 + 24);
    v30 = sub_22EFD6C34(v27, (unsigned __int8 *)v29, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) & 0x2000000000) != 0);
    if (!v30 || (v22 = v30, (*(_DWORD *)(v30 + 28) & 0x7F) != 0x39))
    {
LABEL_79:
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
      v77[0] = v61;
      v77[1] = v62;
      v78 = v63;
      v14 = *(void (**)(void))(*(_QWORD *)v59 + 208);
LABEL_9:
      v14();
      return (_QWORD *)sub_22E5ED9B4((_QWORD *)a1, v5, 0);
    }
    v31 = *(_WORD *)(v30 + 80) & 0x7F;
    v32 = -40;
    if (v31 > 0x46)
    {
      switch(v31)
      {
        case 'S':
          goto LABEL_69;
        case 'G':
          v32 = -56;
          goto LABEL_69;
        case 'Q':
LABEL_69:
          v53 = *(_QWORD *)(v30 + 72 + v32 + 16);
          v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8);
          if ((v53 & 4) != 0)
            v54 = (_QWORD *)*v54;
          v55 = v54 - 8;
          if (!v54)
            v55 = 0;
          v60 = v55;
          v56 = sub_22E4FC000(*(_QWORD *)(v29 + 8));
          if (v54)
            v57 = v56 == 0;
          else
            v57 = 1;
          if (v57)
            goto LABEL_79;
          if ((_QWORD *)v56 != v60)
          {
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
            if (v58 != (*(uint64_t (**)(_QWORD *))(*v60 + 32))(v60))
              goto LABEL_79;
          }
          goto LABEL_37;
      }
    }
    else
    {
      if (v31 <= 0x18)
      {
        if (v31 == 16)
        {
LABEL_32:
          v32 = -48;
          goto LABEL_69;
        }
        if (((1 << v31) & 0x1066) != 0)
          goto LABEL_69;
        if (v31 == 24)
          goto LABEL_32;
      }
      if (v31 == 70)
      {
LABEL_67:
        v32 = -64;
        goto LABEL_69;
      }
    }
    if (v31 - 52 >= 6)
    {
      if (v31 - 33 >= 5)
        goto LABEL_32;
      goto LABEL_67;
    }
    v32 = -72;
    goto LABEL_69;
  }
LABEL_37:
  if ((BYTE8(v62) & 3) != 0)
    v43 = sub_22F28ABCC(&v61, a1);
  else
    v43 = v61;
  v44 = (_QWORD *)sub_22E4899EC(a1 + 1984, 3, 32);
  *v44 = off_24FA63EF0;
  v44[1] = v43;
  v44[2] = v23;
  v44[3] = v8;
  if (v22)
  {
    v82 = v61;
    v83 = v62;
    v84 = v63;
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, __int128 *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 472))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, v22, 1, 0, 0, &v82, v8);
  }
  else
  {
    v45 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v45 & 8) != 0)
    {
      v46 = (*(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
      if (v46 == 3)
      {
        v75[0] = v61;
        v75[1] = v62;
        v75[2] = v63;
        sub_22E56455C((_QWORD *)a1, (uint64_t)v75);
      }
      else if (v46 == 2)
      {
        v76[0] = v61;
        v76[1] = v62;
        v76[2] = v63;
        sub_22E564168((uint64_t *)a1, (uint64_t)v76, 1);
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x40) == 0)
  {
LABEL_51:
    sub_22E48A190(a1, 0);
    return (_QWORD *)sub_22E5ED9B4((_QWORD *)a1, v5, 0);
  }
  sub_22E5ED9B4((_QWORD *)a1, v5, 0);
  return sub_22E48A190(a1, 0);
}

uint64_t sub_22E500874(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t *v21;
  _OWORD v22[2];
  __int128 v23;
  _OWORD v24[3];
  _BYTE v25[112];
  __int128 v26;
  __int128 v27;
  __int128 v28;

  sub_22E66CB04((llvm::Type ***)(a1[18] + 280), *(llvm::LLVMContext **)(a2 + 8));
  v4 = llvm::PointerType::get();
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v18 = a1[18];
    v19 = (llvm::Type *)sub_22F3C5464(a2, *(_QWORD *)(v18 + 144));
    v20 = sub_22F29C578(v18, v19, 0);
    v21 = a1 + 34;
    *(_WORD *)&v25[32] = 257;
    return sub_22E3C1740(v21, 49, v20, v4, (uint64_t)v25);
  }
  v5 = sub_22F3C53E4(a2);
  v6 = a1[18];
  if (!v5 || sub_22F05FEE4(a2, *(_QWORD *)(v6 + 144)))
  {
    v20 = sub_22F29C578(v6, *(llvm::Type **)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) + 8), 0);
    *(_WORD *)&v25[32] = 257;
    v21 = a1 + 34;
    return sub_22E3C1740(v21, 49, v20, v4, (uint64_t)v25);
  }
  v7 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
  sub_22E4D8D7C(v25);
  v26 = *(_OWORD *)&v25[8];
  v27 = *(_OWORD *)&v25[24];
  v28 = *(_OWORD *)&v25[40];
  v8 = *(_QWORD *)(v7 + 8);
  sub_22EFF605C(v7);
  *(_OWORD *)v25 = v26;
  *(_OWORD *)&v25[16] = v27;
  *(_OWORD *)&v25[32] = v28;
  sub_22E484AD4((uint64_t)a1, 0xBu, v9, (uint64_t)v25, v8, 0, 0, 0, 0);
  v10 = *(_QWORD *)(a1[18] + 224);
  v11 = sub_22E50217C((unsigned __int8 *)v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 288))(v10, v11, v8))
  {
    v12 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v13 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v24[0] = v26;
    v24[1] = v27;
    v24[2] = v28;
    LOWORD(v23) = 257;
    v14 = sub_22E47EF74((uint64_t)(a1 + 34), (uint64_t)v24, (uint64_t)v22);
    v15 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v15, v12, v13, v14, 0);
    LOWORD(v23) = 257;
    sub_22E3C12C8(a1 + 34, v15, (uint64_t)v22);
    sub_22E5ED9B4(a1, v12, 0);
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1[18] + 224) + 296))(*(_QWORD *)(a1[18] + 224), a1);
    sub_22E5ED9B4(a1, v13, 0);
  }
  v16 = *(_QWORD *)(a1[18] + 224);
  v22[0] = v26;
  v22[1] = v27;
  v23 = v28;
  return (*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, _OWORD *, uint64_t))(*(_QWORD *)v16 + 304))(v16, a1, v8, v22, v4);
}

llvm::Constant **sub_22E500B7C(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  llvm::Constant *v21;
  llvm::Type *v22;
  uint64_t NullValue;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _QWORD *v27;
  llvm::Constant **v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  llvm::Constant *v43;
  llvm::PHINode *v44;
  llvm::Type *v45;
  uint64_t v46;
  int v48;
  unint64_t v49;
  llvm::LLVMContext *v50;
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _QWORD v55[4];
  __int16 v56;

  sub_22E4DFCE0(a1[18], a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  v50 = **(llvm::LLVMContext ***)(a3 + 24);
  v7 = (unint64_t)v50 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v8 + 16);
  if (v8 && *(_DWORD *)(v8 + 16) == 39)
  {
LABEL_5:
    v11 = *(_QWORD *)(v8 + 32);
    v10 = (uint64_t *)(v8 + 32);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
      v13 = *(_DWORD *)(v12 + 16) == 11;
    else
      v13 = 0;
    v14 = v13 && (*(_DWORD *)(v12 + 16) & 0xFF80000) == 86507520;
    v15 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (!v15 || *(_BYTE *)(v15 + 16) != 39)
      v15 = sub_22F10CF48(v15);
    v16 = *(_QWORD *)(v15 + 32);
    goto LABEL_25;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v8 = sub_22F10CF48(*(_QWORD *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF0));
    if (v8)
      goto LABEL_5;
    v8 = *(_QWORD *)v7;
    v9 = *(_DWORD *)(*(_QWORD *)v7 + 16);
  }
  if ((v9 & 0xFE) != 0x28)
  {
    v8 = sub_22F10CF48(v8);
    v9 = *(_DWORD *)(v8 + 16);
  }
  if ((v9 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v8)
          break;
        v17 = *(_DWORD *)(v8 + 16);
        if ((v17 & 0xFE) != 0x28)
          break;
        if ((v17 & 0x100000) == 0)
          goto LABEL_24;
      }
      v8 = sub_22F10CF48(v8);
    }
    while ((*(_DWORD *)(v8 + 16) & 0x100000) != 0);
  }
LABEL_24:
  v14 = 0;
  v10 = (uint64_t *)(v8 + 32);
  v16 = v6;
LABEL_25:
  v18 = *v10;
  sub_22EFF605C(a3);
  v19 = a2[1];
  v54[0] = *a2;
  v54[1] = v19;
  v54[2] = a2[2];
  sub_22E484AD4((uint64_t)a1, 0xBu, v20, (uint64_t)v54, v16, 0, 0, 0, 0);
  if (!sub_22F061168(a3))
    goto LABEL_31;
  v21 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(a1[18] + 280), v50);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    NullValue = llvm::Constant::getNullValue(v21, v22);
  }
  else
  {
    if (!(*(unsigned int (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1[18] + 224) + 336))(*(_QWORD *)(a1[18] + 224), a1))goto LABEL_31;
    v55[0] = "dynamic_cast.end";
    v56 = 259;
    v24 = v18;
    v25 = v14;
    v26 = operator new();
    llvm::BasicBlock::BasicBlock();
    v27 = (_QWORD *)v26;
    v14 = v25;
    v18 = v24;
    sub_22E5ED9B4(a1, v27, 0);
    NullValue = llvm::UndefValue::get();
  }
  v28 = (llvm::Constant **)NullValue;
  if (!NullValue)
  {
LABEL_31:
    v49 = v16;
    v29 = (*(uint64_t (**)(_QWORD, BOOL, unint64_t))(**(_QWORD **)(a1[18] + 224) + 312))(*(_QWORD *)(a1[18] + 224), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 16) == 39, v16);
    v55[0] = "dynamic_cast.end";
    v56 = 259;
    v30 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v31 = 0;
    v32 = 0;
    if (v29)
    {
      v55[0] = "dynamic_cast.null";
      v56 = 259;
      v48 = v29;
      v33 = operator new();
      llvm::BasicBlock::BasicBlock();
      v55[0] = "dynamic_cast.notnull";
      v56 = 259;
      v31 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v34 = a2[1];
      v53[0] = *a2;
      v53[1] = v34;
      v53[2] = a2[2];
      v56 = 257;
      v35 = v18;
      v36 = sub_22E47EF74((uint64_t)(a1 + 34), (uint64_t)v53, (uint64_t)v55);
      v37 = llvm::User::operator new((llvm::User *)0x40);
      v38 = v33;
      v39 = v36;
      v18 = v35;
      v32 = (_QWORD *)v33;
      v29 = v48;
      MEMORY[0x23489C09C](v37, v38, v31, v39, 0);
      v56 = 257;
      sub_22E3C12C8(a1 + 34, v37, (uint64_t)v55);
      sub_22E5ED9B4(a1, v31, 0);
    }
    v40 = *(_QWORD *)(a1[18] + 224);
    if (v14)
    {
      v41 = a2[1];
      v52[0] = *a2;
      v52[1] = v41;
      v52[2] = a2[2];
      v28 = (llvm::Constant **)(*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, unint64_t, llvm::LLVMContext *))(*(_QWORD *)v40 + 328))(v40, a1, v52, v49, v50);
      if (!v29)
      {
LABEL_35:
        sub_22E5ED9B4(a1, v30, 0);
        return v28;
      }
    }
    else
    {
      v42 = a2[1];
      v51[0] = *a2;
      v51[1] = v42;
      v51[2] = a2[2];
      v28 = (llvm::Constant **)(*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, unint64_t, llvm::LLVMContext *, uint64_t, _QWORD *))(*(_QWORD *)v40 + 320))(v40, a1, v51, v49, v50, v18, v30);
      v31 = (_QWORD *)a1[40];
      if (!v29)
        goto LABEL_35;
    }
    sub_22E5EDA70((uint64_t)a1);
    sub_22E5ED9B4(a1, v32, 0);
    sub_22E5EDA70((uint64_t)a1);
    sub_22E5ED9B4(a1, v30, 0);
    v43 = *v28;
    v56 = 257;
    v44 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, (uint64_t)v43, 2, (uint64_t)v55);
    sub_22E3C4C50(v44, (uint64_t)v28, (uint64_t)v31);
    v46 = llvm::Constant::getNullValue(*v28, v45);
    sub_22E3C4C50(v44, v46, (uint64_t)v32);
    return (llvm::Constant **)v44;
  }
  return v28;
}

uint64_t sub_22E5010F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_22E5011A4(a1, *(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 8), *(char **)a2, (char *)(*(_QWORD *)a2 + 152 * *(unsigned int *)(a2 + 8)));
  sub_22E501398(a1 + 1232, *(_QWORD *)(a1 + 1232) + 192 * *(unsigned int *)(a1 + 1240), *(__int128 **)(a2 + 1232), (__int128 *)(*(_QWORD *)(a2 + 1232) + 192 * *(unsigned int *)(a2 + 1240)));
  sub_22E50157C(a1 + 1440, *(_QWORD *)(a1 + 1440) + 16 * *(unsigned int *)(a1 + 1448), *(_BYTE **)(a2 + 1440), (_BYTE *)(*(_QWORD *)(a2 + 1440) + 16 * *(unsigned int *)(a2 + 1448)));
  result = sub_22E50157C(a1 + 1472, *(_QWORD *)(a1 + 1472) + 16 * *(unsigned int *)(a1 + 1480), *(_BYTE **)(a2 + 1472), (_BYTE *)(*(_QWORD *)(a2 + 1472) + 16 * *(unsigned int *)(a2 + 1480)));
  if (!*(_QWORD *)(a1 + 1520))
    *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  return result;
}

uint64_t sub_22E5011A4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v10;
  unint64_t v11;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE *__src;
  char *v24;

  v5 = *(_QWORD *)a1;
  v6 = 0x86BCA1AF286BCA1BLL * ((a2 - *(_QWORD *)a1) >> 3);
  v7 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 152 * v7 == a2)
  {
    sub_22E501700(a1, a3, a4);
    return *(_QWORD *)a1 + 152 * v6;
  }
  v24 = a3;
  v10 = a4 - a3;
  v11 = 0x86BCA1AF286BCA1BLL * ((a4 - a3) >> 3);
  if (v11 + v7 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 8);
  }
  v13 = (_BYTE *)(v5 + 152 * v7);
  __src = (_BYTE *)(v5 + 152 * v6);
  v14 = 0x86BCA1AF286BCA1BLL * ((v13 - __src) >> 3);
  if (v14 < v11)
  {
    *(_DWORD *)(a1 + 8) = v7 + v11;
    if (v6 != v7)
    {
      v15 = v5 + 152 * v6;
      memcpy((void *)(v5 + 152 * (v7 + v11) - 8 * ((v13 - __src) >> 3)), __src, v13 - __src);
      do
      {
        v16 = *((_OWORD *)v24 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v24;
        *(_OWORD *)(v15 + 16) = v16;
        v17 = *((_OWORD *)v24 + 2);
        v18 = *((_OWORD *)v24 + 3);
        v19 = *((_OWORD *)v24 + 5);
        *(_OWORD *)(v15 + 64) = *((_OWORD *)v24 + 4);
        *(_OWORD *)(v15 + 80) = v19;
        *(_OWORD *)(v15 + 32) = v17;
        *(_OWORD *)(v15 + 48) = v18;
        v20 = *((_OWORD *)v24 + 6);
        v21 = *((_OWORD *)v24 + 7);
        v22 = *((_OWORD *)v24 + 8);
        *(_QWORD *)(v15 + 144) = *((_QWORD *)v24 + 18);
        *(_OWORD *)(v15 + 112) = v21;
        *(_OWORD *)(v15 + 128) = v22;
        *(_OWORD *)(v15 + 96) = v20;
        v15 += 152;
        v24 += 152;
        --v14;
      }
      while (v14);
    }
    if (v24 != a4)
      memcpy(v13, v24, a4 - v24);
    return (uint64_t)__src;
  }
  sub_22F262468(a1, (uint64_t)&v13[-152 * v11], (uint64_t)v13);
  if (&v13[-152 * v11] != __src)
    memmove(&__src[152 * v11], __src, &v13[-152 * v11] - __src);
  if (v24 == a4)
    return (uint64_t)__src;
  memmove(__src, v24, v10);
  return (uint64_t)__src;
}

uint64_t sub_22E501398(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v10;
  unint64_t v11;
  _BYTE *v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE *__src;
  __int128 *v26;

  v5 = *(_QWORD *)a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(_QWORD *)a1) >> 6);
  v7 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 192 * v7 == a2)
  {
    sub_22E5017A8(a1, a3, a4);
    return *(_QWORD *)a1 + 192 * v6;
  }
  v26 = a3;
  v10 = (char *)a4 - (char *)a3;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a4 - (char *)a3) >> 6);
  if (v11 + v7 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 8);
  }
  v13 = (_BYTE *)(v5 + 192 * v7);
  __src = (_BYTE *)(v5 + 192 * v6);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - __src) >> 6);
  if (v14 < v11)
  {
    *(_DWORD *)(a1 + 8) = v7 + v11;
    if (v6 != v7)
    {
      v15 = (_OWORD *)(v5 + 192 * v6);
      memcpy((void *)(v5 + 192 * (v7 + v11) - ((v13 - __src) >> 6 << 6)), __src, v13 - __src);
      do
      {
        v16 = *v26;
        v17 = v26[1];
        v18 = v26[3];
        v15[2] = v26[2];
        v15[3] = v18;
        *v15 = v16;
        v15[1] = v17;
        v19 = v26[4];
        v20 = v26[5];
        v21 = v26[7];
        v15[6] = v26[6];
        v15[7] = v21;
        v15[4] = v19;
        v15[5] = v20;
        v22 = v26[8];
        v23 = v26[9];
        v24 = v26[11];
        v15[10] = v26[10];
        v15[11] = v24;
        v15[8] = v22;
        v15[9] = v23;
        v15 += 12;
        v26 += 12;
        --v14;
      }
      while (v14);
    }
    if (v26 != a4)
      memcpy(v13, v26, (char *)a4 - (char *)v26);
    return (uint64_t)__src;
  }
  sub_22F262534(a1, &v13[-192 * v11], v13);
  if (&v13[-192 * v11] != __src)
    memmove(&__src[192 * v11], __src, &v13[-192 * v11] - __src);
  if (v26 == a4)
    return (uint64_t)__src;
  memmove(__src, v26, v10);
  return (uint64_t)__src;
}

uint64_t sub_22E50157C(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v10;
  unint64_t v11;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  _BYTE *__src;
  _OWORD *v18;

  v5 = *(_QWORD *)a1;
  v6 = (a2 - *(_QWORD *)a1) >> 4;
  v7 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 16 * v7 == a2)
  {
    sub_22E501850(a1, a3, a4);
    return *(_QWORD *)a1 + 16 * v6;
  }
  v18 = a3;
  v10 = a4 - a3;
  v11 = (a4 - a3) >> 4;
  if (v7 + v11 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 8);
  }
  v13 = (_BYTE *)(v5 + 16 * v7);
  __src = (_BYTE *)(v5 + 16 * v6);
  v14 = (v13 - __src) >> 4;
  if (v14 < v11)
  {
    v15 = v7 + (v10 >> 4);
    *(_DWORD *)(a1 + 8) = v15;
    if (v6 != v7)
    {
      v16 = (_OWORD *)(v5 + 16 * v6);
      memcpy((void *)(v5 + 16 * v15 - 16 * v14), __src, v13 - __src);
      do
      {
        *v16++ = *v18++;
        --v14;
      }
      while (v14);
    }
    if (v18 != (_OWORD *)a4)
      memcpy(v13, v18, a4 - (_BYTE *)v18);
    return (uint64_t)__src;
  }
  sub_22F2625F8(a1, &v13[-16 * v11], (char *)(v5 + 16 * v7));
  if (&v13[-16 * v11] != __src)
    memmove(&__src[16 * v11], __src, &v13[-16 * v11] - __src);
  if (v18 == (_OWORD *)a4)
    return (uint64_t)__src;
  memmove(__src, v18, v10);
  return (uint64_t)__src;
}

uint64_t sub_22E501700(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int64_t v9;
  _BYTE *v10;

  v3 = a3;
  v4 = result;
  v5 = a3 - a2;
  v6 = 0x86BCA1AF286BCA1BLL * (v5 >> 3);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    v9 = v5;
    v10 = a2;
    v8 = v3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v8;
    v5 = v9;
    a2 = v10;
    LODWORD(v7) = *(_DWORD *)(v4 + 8);
  }
  if (a2 != v3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v4 + 152 * v7), a2, v5);
    LODWORD(v7) = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(v4 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22E5017A8(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *__src;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  v4 = a3 - a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 6);
  v6 = *(unsigned int *)(result + 8);
  if (v5 + v6 > *(unsigned int *)(result + 12))
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 6);
    v12 = result;
    v8 = v4;
    __src = a2;
    v7 = v3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = v10;
    result = v12;
    v3 = v7;
    v4 = v8;
    a2 = __src;
    LODWORD(v6) = *(_DWORD *)(v12 + 8);
  }
  if (a2 != v3)
  {
    v11 = v5;
    v13 = result;
    memcpy((void *)(*(_QWORD *)result + 192 * v6), a2, v4);
    LODWORD(v5) = v11;
    result = v13;
    LODWORD(v6) = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(result + 8) = v6 + v5;
  return result;
}

uint64_t sub_22E501850(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  size_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 4) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v9 = result;
    v6 = a2;
    v7 = a3 - a2;
    v5 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v5;
    a2 = v6;
    v3 = v7;
    result = v9;
    LODWORD(v4) = *(_DWORD *)(v9 + 8);
  }
  if (a2 != a3)
  {
    v10 = result;
    v8 = v3;
    memcpy((void *)(*(_QWORD *)result + 16 * v4), a2, v3);
    v3 = v8;
    result = v10;
    LODWORD(v4) = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 4);
  return result;
}

uint64_t sub_22E5018F0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)result = -77;
  if (byte_255E04EB3)
  {
    v3 = a2;
    v4 = result;
    sub_22F3F189C(179);
    a2 = v3;
    result = v4;
  }
  v2 = *(_DWORD *)result & 0xFFFC00FF;
  *(_DWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)result = v2 & 0xFFFFBFFF | (((*(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
  return result;
}

void sub_22E50195C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[3];
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[1216];
  void *v62;
  uint64_t v63;
  _BYTE v64[192];
  void *v65;
  uint64_t v66;
  _BYTE v67[16];
  void *v68;
  uint64_t v69;
  _QWORD v70[7];

  v70[5] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0xFFFFFFFFFFFFFFF0));
  v59 = v61;
  v60 = 0x800000000;
  v62 = v64;
  v63 = 0x100000000;
  v65 = v67;
  v66 = 0x100000000;
  v68 = v70;
  v69 = 0x200000000;
  v70[4] = 0;
  v6 = *(_QWORD *)(v4 + 40);
  v55[0] = *(unint64_t *)(a1 + 24);
  LOBYTE(v56) = 0;
  v57 = 0;
  v58 = v6;
  v7 = sub_22E3C187C((uint64_t)&v59, (unint64_t)v55, 1);
  v8 = (char *)v59 + 152 * v60;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *((_OWORD *)v8 + 1) = v9;
  v10 = *(_QWORD *)(v7 + 144);
  v11 = *(_OWORD *)(v7 + 128);
  v12 = *(_OWORD *)(v7 + 96);
  *((_OWORD *)v8 + 7) = *(_OWORD *)(v7 + 112);
  *((_OWORD *)v8 + 8) = v11;
  *((_QWORD *)v8 + 18) = v10;
  *((_OWORD *)v8 + 6) = v12;
  v13 = *(_OWORD *)(v7 + 80);
  v14 = *(_OWORD *)(v7 + 32);
  v15 = *(_OWORD *)(v7 + 48);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(v7 + 64);
  *((_OWORD *)v8 + 5) = v13;
  *((_OWORD *)v8 + 2) = v14;
  *((_OWORD *)v8 + 3) = v15;
  LODWORD(v60) = v60 + 1;
  v16 = *(_DWORD *)(a1 + 8);
  if ((v16 & 0x7FFFFFFF) != 0)
  {
    v17 = v16 >> 31;
  }
  else
  {
    v18 = sub_22E4FFE1C(*(_QWORD *)(a1 + 16));
    v17 = BYTE2(v18);
    if ((v18 & 0xFF00) != 0)
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144));
      v55[0] = v19;
      LOBYTE(v56) = 0;
      v57 = 0;
      v58 = v20;
      v21 = sub_22E3C187C((uint64_t)&v59, (unint64_t)v55, 1);
      v22 = (char *)v59 + 152 * v60;
      v23 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v21;
      *((_OWORD *)v22 + 1) = v23;
      v24 = *(_QWORD *)(v21 + 144);
      v25 = *(_OWORD *)(v21 + 128);
      v26 = *(_OWORD *)(v21 + 96);
      *((_OWORD *)v22 + 7) = *(_OWORD *)(v21 + 112);
      *((_OWORD *)v22 + 8) = v25;
      *((_QWORD *)v22 + 18) = v24;
      *((_OWORD *)v22 + 6) = v26;
      v27 = *(_OWORD *)(v21 + 80);
      v28 = *(_OWORD *)(v21 + 32);
      v29 = *(_OWORD *)(v21 + 48);
      *((_OWORD *)v22 + 4) = *(_OWORD *)(v21 + 64);
      *((_OWORD *)v22 + 5) = v27;
      *((_OWORD *)v22 + 2) = v28;
      *((_OWORD *)v22 + 3) = v29;
      LODWORD(v60) = v60 + 1;
    }
  }
  if (v17)
  {
    v30 = llvm::ConstantInt::get();
    v31 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144));
    v55[0] = (unint64_t)v30;
    LOBYTE(v56) = 0;
    v57 = 0;
    v58 = v31;
    v32 = sub_22E3C187C((uint64_t)&v59, (unint64_t)v55, 1);
    v33 = (char *)v59 + 152 * v60;
    v34 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v33 = *(_OWORD *)v32;
    *((_OWORD *)v33 + 1) = v34;
    v35 = *(_QWORD *)(v32 + 144);
    v36 = *(_OWORD *)(v32 + 128);
    v37 = *(_OWORD *)(v32 + 96);
    *((_OWORD *)v33 + 7) = *(_OWORD *)(v32 + 112);
    *((_OWORD *)v33 + 8) = v36;
    *((_QWORD *)v33 + 18) = v35;
    *((_OWORD *)v33 + 6) = v37;
    v38 = *(_OWORD *)(v32 + 80);
    v39 = *(_OWORD *)(v32 + 32);
    v40 = *(_OWORD *)(v32 + 48);
    *((_OWORD *)v33 + 4) = *(_OWORD *)(v32 + 64);
    *((_OWORD *)v33 + 5) = v38;
    *((_OWORD *)v33 + 2) = v39;
    *((_OWORD *)v33 + 3) = v40;
    LODWORD(v60) = v60 + 1;
  }
  if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
  {
    v41 = 0;
    do
    {
      v42 = a1 + 48 + ((unint64_t)v41 << 6);
      v43 = *(_OWORD *)(v42 + 16);
      v55[0] = *(_OWORD *)v42;
      v55[1] = v43;
      v55[2] = *(_OWORD *)(v42 + 32);
      v45 = *(_QWORD *)(v42 + 48);
      v44 = *(_QWORD *)(v42 + 56);
      v56 = v45;
      v57 = 0;
      v58 = v44;
      v46 = sub_22E3C187C((uint64_t)&v59, (unint64_t)v55, 1);
      v47 = (char *)v59 + 152 * v60;
      v49 = *(_OWORD *)(v46 + 112);
      v48 = *(_OWORD *)(v46 + 128);
      v50 = *(_OWORD *)(v46 + 96);
      *((_QWORD *)v47 + 18) = *(_QWORD *)(v46 + 144);
      *((_OWORD *)v47 + 7) = v49;
      *((_OWORD *)v47 + 8) = v48;
      *((_OWORD *)v47 + 6) = v50;
      v51 = *(_OWORD *)(v46 + 80);
      v53 = *(_OWORD *)(v46 + 32);
      v52 = *(_OWORD *)(v46 + 48);
      *((_OWORD *)v47 + 4) = *(_OWORD *)(v46 + 64);
      *((_OWORD *)v47 + 5) = v51;
      *((_OWORD *)v47 + 2) = v53;
      *((_OWORD *)v47 + 3) = v52;
      v54 = *(_OWORD *)(v46 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v46;
      *((_OWORD *)v47 + 1) = v54;
      LODWORD(v60) = v60 + 1;
      ++v41;
    }
    while (v41 != (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF));
  }
  sub_22E4FD1B4(v55, a2, *(_QWORD *)(a1 + 16), v4, (unsigned int *)&v59);
  if (v68 != v70)
    free(v68);
  if (v65 != v67)
    free(v65);
  if (v62 != v64)
    free(v62);
  if (v59 != v61)
    free(v59);
}

void sub_22E501D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[4];
  _OWORD v59[3];
  uint64_t v60;
  _OWORD v61[4];
  _OWORD v62[3];
  uint64_t v63;
  _OWORD v64[4];
  _OWORD v65[3];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[1216];
  void *v76;
  uint64_t v77;
  _BYTE v78[192];
  void *v79;
  uint64_t v80;
  _BYTE v81[16];
  void *v82;
  uint64_t v83;
  _QWORD v84[8];

  v84[5] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0xFFFFFFFFFFFFFFF0));
  v73 = v75;
  v74 = 0x800000000;
  v76 = v78;
  v77 = 0x100000000;
  v79 = v81;
  v80 = 0x100000000;
  v82 = v84;
  v83 = 0x200000000;
  v84[4] = 0;
  v6 = *(_OWORD *)(a1 + 40);
  v64[0] = *(_OWORD *)(a1 + 24);
  v64[1] = v6;
  v7 = *(_OWORD *)(a1 + 72);
  v64[2] = *(_OWORD *)(a1 + 56);
  v64[3] = v7;
  sub_22F252EBC((uint64_t)v64, a2, (uint64_t)v65);
  v8 = *(_QWORD *)(v4 + 40);
  v67 = v65[0];
  v68 = v65[1];
  v69 = v65[2];
  v70 = v66;
  v71 = 0;
  v72 = v8;
  v9 = sub_22E3C187C((uint64_t)&v73, (unint64_t)&v67, 1);
  v10 = (char *)v73 + 152 * v74;
  v12 = *(_OWORD *)(v9 + 112);
  v11 = *(_OWORD *)(v9 + 128);
  v13 = *(_OWORD *)(v9 + 96);
  *((_QWORD *)v10 + 18) = *(_QWORD *)(v9 + 144);
  *((_OWORD *)v10 + 7) = v12;
  *((_OWORD *)v10 + 8) = v11;
  *((_OWORD *)v10 + 6) = v13;
  v14 = *(_OWORD *)(v9 + 80);
  v16 = *(_OWORD *)(v9 + 32);
  v15 = *(_OWORD *)(v9 + 48);
  *((_OWORD *)v10 + 4) = *(_OWORD *)(v9 + 64);
  *((_OWORD *)v10 + 5) = v14;
  *((_OWORD *)v10 + 2) = v16;
  *((_OWORD *)v10 + 3) = v15;
  v17 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v9;
  *((_OWORD *)v10 + 1) = v17;
  LODWORD(v74) = v74 + 1;
  v18 = *(_DWORD *)(a1 + 8);
  if ((v18 & 0x7FFFFFFF) != 0)
  {
    if (v18 >= 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v19 = sub_22E4FFE1C(*(_QWORD *)(a1 + 16));
  v20 = BYTE2(v19);
  if ((v19 & 0xFF00) == 0)
  {
    if (!BYTE2(v19))
      goto LABEL_12;
    goto LABEL_11;
  }
  v46 = *(_OWORD *)(a1 + 104);
  v61[0] = *(_OWORD *)(a1 + 88);
  v61[1] = v46;
  v47 = *(_OWORD *)(a1 + 136);
  v61[2] = *(_OWORD *)(a1 + 120);
  v61[3] = v47;
  sub_22F252EBC((uint64_t)v61, a2, (uint64_t)v62);
  v48 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144));
  v67 = v62[0];
  v68 = v62[1];
  v69 = v62[2];
  v70 = v63;
  v71 = 0;
  v72 = v48;
  v49 = sub_22E3C187C((uint64_t)&v73, (unint64_t)&v67, 1);
  v50 = (char *)v73 + 152 * v74;
  v52 = *(_OWORD *)(v49 + 112);
  v51 = *(_OWORD *)(v49 + 128);
  v53 = *(_OWORD *)(v49 + 96);
  *((_QWORD *)v50 + 18) = *(_QWORD *)(v49 + 144);
  *((_OWORD *)v50 + 7) = v52;
  *((_OWORD *)v50 + 8) = v51;
  *((_OWORD *)v50 + 6) = v53;
  v54 = *(_OWORD *)(v49 + 80);
  v56 = *(_OWORD *)(v49 + 32);
  v55 = *(_OWORD *)(v49 + 48);
  *((_OWORD *)v50 + 4) = *(_OWORD *)(v49 + 64);
  *((_OWORD *)v50 + 5) = v54;
  *((_OWORD *)v50 + 2) = v56;
  *((_OWORD *)v50 + 3) = v55;
  v57 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v49;
  *((_OWORD *)v50 + 1) = v57;
  LODWORD(v74) = v74 + 1;
  if (v20)
  {
LABEL_11:
    v21 = llvm::ConstantInt::get();
    v22 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144));
    v67 = (unint64_t)v21;
    LOBYTE(v70) = 0;
    v71 = 0;
    v72 = v22;
    v23 = sub_22E3C187C((uint64_t)&v73, (unint64_t)&v67, 1);
    v24 = (char *)v73 + 152 * v74;
    v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v24 = *(_OWORD *)v23;
    *((_OWORD *)v24 + 1) = v25;
    v26 = *(_QWORD *)(v23 + 144);
    v27 = *(_OWORD *)(v23 + 128);
    v28 = *(_OWORD *)(v23 + 96);
    *((_OWORD *)v24 + 7) = *(_OWORD *)(v23 + 112);
    *((_OWORD *)v24 + 8) = v27;
    *((_QWORD *)v24 + 18) = v26;
    *((_OWORD *)v24 + 6) = v28;
    v29 = *(_OWORD *)(v23 + 80);
    v30 = *(_OWORD *)(v23 + 32);
    v31 = *(_OWORD *)(v23 + 48);
    *((_OWORD *)v24 + 4) = *(_OWORD *)(v23 + 64);
    *((_OWORD *)v24 + 5) = v29;
    *((_OWORD *)v24 + 2) = v30;
    *((_OWORD *)v24 + 3) = v31;
    LODWORD(v74) = v74 + 1;
  }
LABEL_12:
  if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
  {
    v32 = 0;
    do
    {
      v33 = a1 + 160 + 72 * v32;
      v34 = *(_OWORD *)(v33 + 16);
      v58[0] = *(_OWORD *)v33;
      v58[1] = v34;
      v35 = *(_OWORD *)(v33 + 48);
      v58[2] = *(_OWORD *)(v33 + 32);
      v58[3] = v35;
      v36 = *(_QWORD *)(v33 + 64);
      sub_22F252EBC((uint64_t)v58, a2, (uint64_t)v59);
      v67 = v59[0];
      v68 = v59[1];
      v69 = v59[2];
      v70 = v60;
      v71 = 0;
      v72 = v36;
      v37 = sub_22E3C187C((uint64_t)&v73, (unint64_t)&v67, 1);
      v38 = (char *)v73 + 152 * v74;
      v40 = *(_OWORD *)(v37 + 112);
      v39 = *(_OWORD *)(v37 + 128);
      v41 = *(_OWORD *)(v37 + 96);
      *((_QWORD *)v38 + 18) = *(_QWORD *)(v37 + 144);
      *((_OWORD *)v38 + 7) = v40;
      *((_OWORD *)v38 + 8) = v39;
      *((_OWORD *)v38 + 6) = v41;
      v42 = *(_OWORD *)(v37 + 80);
      v44 = *(_OWORD *)(v37 + 32);
      v43 = *(_OWORD *)(v37 + 48);
      *((_OWORD *)v38 + 4) = *(_OWORD *)(v37 + 64);
      *((_OWORD *)v38 + 5) = v42;
      *((_OWORD *)v38 + 2) = v44;
      *((_OWORD *)v38 + 3) = v43;
      v45 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)v38 = *(_OWORD *)v37;
      *((_OWORD *)v38 + 1) = v45;
      LODWORD(v74) = v74 + 1;
      ++v32;
    }
    while (v32 != (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF));
  }
  sub_22E4FD1B4(&v67, a2, *(_QWORD *)(a1 + 16), v4, (unsigned int *)&v73);
  if (v82 != v84)
    free(v82);
  if (v79 != v81)
    free(v79);
  if (v76 != v78)
    free(v76);
  if (v73 != v75)
    free(v73);
}

uint64_t sub_22E502164(uint64_t a1, uint64_t a2)
{
  return sub_22F261F20(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40));
}

uint64_t sub_22E50217C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  unsigned __int8 **v7;

  while (1)
  {
    while (1)
    {
      do
      {
        v1 = a1;
        LODWORD(v2) = *a1;
        if (v2 > 0xD5)
        {
          if ((_DWORD)v2 == 233)
          {
            LODWORD(v2) = *(_DWORD *)a1;
            v4 = *(_DWORD *)a1 & 0x7C0000;
            if (v4 != 3145728)
              goto LABEL_34;
            v3 = a1 + 16;
          }
          else
          {
            if ((_DWORD)v2 != 214)
              break;
            v3 = a1 + 24;
          }
        }
        else if ((_DWORD)v2 == 155)
        {
          if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
            return 0;
          v3 = a1 + 24;
          if (!a1[48])
            v3 = a1 + 32;
          LOBYTE(v2) = -101;
        }
        else
        {
          if ((_DWORD)v2 != 176)
            break;
          v2 = *((unsigned int *)a1 + 5);
          if ((_DWORD)v2 == -1)
            return 0;
          v3 = &a1[8 * v2 + 40];
          LOBYTE(v2) = -80;
        }
        a1 = *(unsigned __int8 **)v3;
      }
      while (*(unsigned __int8 **)v3 != v1);
      v5 = (v2 + 102);
      v6 = v5 < 0xF5;
      if (v5 < 0xF5)
        break;
      a1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if ((a1[1] & 3) == 0)
        return v6;
    }
    if (v2 == 210)
    {
      v7 = (unsigned __int8 **)(v1 + 16);
      goto LABEL_30;
    }
    if ((v2 & 0xFE) == 0x66)
    {
      if (v2 == 103)
      {
        if ((sub_22E50217C(*((_QWORD *)v1 + 4)) & 1) != 0)
          return v6;
        v7 = (unsigned __int8 **)(v1 + 40);
      }
      else
      {
        if ((sub_22E50217C(*((_QWORD *)v1 + 5)) & 1) != 0)
          return v6;
        v7 = (unsigned __int8 **)(v1 + 48);
      }
      goto LABEL_30;
    }
    if ((v2 & 0xFE) != 0x70)
      break;
    if ((*(_DWORD *)v1 & 0xFC0000) != 0x800000)
      return 0;
    v7 = (unsigned __int8 **)(v1 + 24);
LABEL_30:
    a1 = *v7;
  }
  if (v2 == 107)
    return 1;
  if (v2 == 233)
  {
    v4 = *(_DWORD *)v1 & 0x7C0000;
LABEL_34:
    if (v4 == 1310720)
      return 1;
  }
  return 0;
}

uint64_t sub_22E502308(uint64_t a1, uint64_t a2)
{
  return sub_22F261F20(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), 0, 0);
}

uint64_t sub_22E502324(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  __int16 v16;
  uint64_t v17[5];

  v15[0] = a1;
  v15[1] = a1 + 272;
  v16 = 0;
  do
  {
    v4 = (unsigned int *)a2;
    v5 = *a2;
    if (v5 > 0xD5)
    {
      if (v5 == 233)
      {
        v8 = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_22;
        v5 = *(_DWORD *)a2;
        v7 = a2 + 16;
      }
      else
      {
        if (v5 != 214)
          break;
        v7 = a2 + 24;
      }
    }
    else if (v5 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_29;
      v7 = a2 + 24;
      if (!a2[48])
        v7 = a2 + 32;
      v5 = 155;
    }
    else
    {
      if (v5 != 176)
        break;
      v6 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v6 == -1)
        goto LABEL_29;
      v7 = &a2[8 * v6 + 40];
      v5 = 176;
    }
    a2 = *(unsigned __int8 **)v7;
  }
  while (*(unsigned int **)v7 != v4);
  if ((v5 & 0xFE) != 0x70)
  {
    if (v5 == 233)
    {
      v8 = *v4;
LABEL_22:
      v10 = (v8 >> 18) & 0x1F;
      if (v10 == 6)
        return sub_22E5040EC(v15, (uint64_t)v4, a3);
      if (v10 == 7)
        return sub_22E503F9C((uint64_t)v15, (uint64_t)v4, a3);
    }
LABEL_29:
    v17[0] = 0;
    v17[1] = a1;
    sub_22EFF605C((uint64_t)v4);
    sub_22E48EE24(v17, v11, 0);
    v12 = sub_22E5048E4(v15, v4);
    v14 = v13;
    sub_22E48F084(v17);
    return sub_22F262860(v15[0], v12, v14, a3);
  }
  switch((*v4 >> 18) & 0x3F)
  {
    case 2u:
      sub_22E503220(v17, v15, v4, a3);
      result = (uint64_t)sub_22E5033B8(v15, v17);
      break;
    case 3u:
      sub_22E503220(v17, v15, v4, a3);
      result = (uint64_t)sub_22E503A6C(v15, (uint64_t)v17);
      break;
    case 5u:
      sub_22E503220(v17, v15, v4, a3);
      result = sub_22E503064((uint64_t)v15, v17);
      break;
    case 6u:
      sub_22E503220(v17, v15, v4, a3);
      result = sub_22E50328C((uint64_t)v15, v17);
      break;
    default:
      goto LABEL_29;
  }
  return result;
}

uint64_t sub_22E50255C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  v8[0] = 0;
  v8[1] = v4;
  sub_22EFF605C(a2);
  sub_22E48EE24(v8, v5, 0);
  v6 = sub_22E5048E4(a1, a2);
  sub_22E48F084(v8);
  return v6;
}

uint64_t sub_22E5025C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t Name;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  _OWORD v32[3];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];
  _OWORD v40[8];
  uint64_t v41;
  _QWORD v42[6];
  char v43;
  _OWORD v44[8];
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  llvm::Value *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 6)
    goto LABEL_6;
  if ((a5 & 1) != 0)
    goto LABEL_4;
  v10 = *a1;
  v11 = *(_OWORD *)(a4 + 112);
  v44[6] = *(_OWORD *)(a4 + 96);
  v44[7] = v11;
  v45 = *(_QWORD *)(a4 + 128);
  v12 = *(_OWORD *)(a4 + 48);
  v44[2] = *(_OWORD *)(a4 + 32);
  v44[3] = v12;
  v13 = *(_OWORD *)(a4 + 80);
  v44[4] = *(_OWORD *)(a4 + 64);
  v44[5] = v13;
  v14 = *(_OWORD *)(a4 + 16);
  v44[0] = *(_OWORD *)a4;
  v44[1] = v14;
  if (sub_22E3BF6AC(v10, (uint64_t)v44))
  {
LABEL_6:
    v26 = *a1;
    v42[0] = a2;
    v42[1] = a3;
    v43 = 2;
    v27 = *(_OWORD *)(a4 + 112);
    v40[6] = *(_OWORD *)(a4 + 96);
    v40[7] = v27;
    v41 = *(_QWORD *)(a4 + 128);
    v28 = *(_OWORD *)(a4 + 48);
    v40[2] = *(_OWORD *)(a4 + 32);
    v40[3] = v28;
    v29 = *(_OWORD *)(a4 + 80);
    v40[4] = *(_OWORD *)(a4 + 64);
    v40[5] = v29;
    v30 = *(_OWORD *)(a4 + 16);
    v40[0] = *(_OWORD *)a4;
    v40[1] = v30;
    return sub_22F2453C8(v26, v42, v40, a5);
  }
  else
  {
LABEL_4:
    v15 = *(_OWORD *)(a4 + 32);
    v33 = *(_OWORD *)(a4 + 16);
    v34 = v15;
    v16 = *(llvm::Value **)(a4 + 8);
    v35 = *(_QWORD *)(a4 + 48);
    v17 = *a1;
    v49 = v33;
    v50 = *(_OWORD *)(a4 + 32);
    v18 = (uint64_t *)(v17 + 272);
    v51 = *(_QWORD *)(a4 + 48);
    v48 = v16;
    LOWORD(v38) = 773;
    *(_QWORD *)&v36 = llvm::Value::getName(v16);
    *((_QWORD *)&v36 + 1) = v19;
    *(_QWORD *)&v37 = ".realp";
    sub_22E3C408C(v18, (uint64_t)&v48, 0, (uint64_t)&v36, (uint64_t)v39);
    v20 = (uint64_t *)(*a1 + 272);
    v49 = v33;
    v50 = v34;
    v48 = v16;
    v51 = v35;
    Name = llvm::Value::getName(v16);
    v47 = 773;
    v46[0] = Name;
    v46[1] = v22;
    v46[2] = ".imagp";
    sub_22E3C408C(v20, (uint64_t)&v48, 1, (uint64_t)v46, (uint64_t)&v36);
    v23 = a1[1];
    v32[0] = v39[0];
    v32[1] = v39[1];
    v32[2] = v39[2];
    sub_22E3BEDDC(v23, a2, v32, (*(_DWORD *)(a4 + 72) >> 2) & 1);
    v24 = a1[1];
    v31[0] = v36;
    v31[1] = v37;
    v31[2] = v38;
    return sub_22E3BEDDC(v24, a3, v31, (*(_DWORD *)(a4 + 72) >> 2) & 1);
  }
}

uint64_t sub_22E5027E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  llvm::Value *v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[3];
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _OWORD v43[8];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t Name;
  uint64_t v50;
  const char *v51;
  __int16 v52;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 6)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_OWORD *)(a2 + 112);
    v43[6] = *(_OWORD *)(a2 + 96);
    v43[7] = v24;
    v44 = *(_QWORD *)(a2 + 128);
    v25 = *(_OWORD *)(a2 + 48);
    v43[2] = *(_OWORD *)(a2 + 32);
    v43[3] = v25;
    v26 = *(_OWORD *)(a2 + 80);
    v43[4] = *(_OWORD *)(a2 + 64);
    v43[5] = v26;
    v27 = *(_OWORD *)(a2 + 16);
    v43[0] = *(_OWORD *)a2;
    v43[1] = v27;
    v36 = 0uLL;
    v38 = 0;
    v37 = 0;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v42 = 0;
    sub_22F24512C(v23, (uint64_t)v43, a3, &v36, (uint64_t)&v45);
    return v45;
  }
  else
  {
    v4 = *(llvm::Value **)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 32);
    v33 = *(_OWORD *)(a2 + 16);
    v34 = v5;
    v35 = *(_QWORD *)(a2 + 48);
    v6 = *(_DWORD *)(a2 + 72);
    if (!*(_BYTE *)(a1 + 16) || (v6 & 4) != 0)
    {
      v8 = *(_QWORD *)a1;
      v9 = *(_OWORD *)(a2 + 32);
      v46 = *(_OWORD *)(a2 + 16);
      v47 = v9;
      v10 = (uint64_t *)(v8 + 272);
      v48 = *(_QWORD *)(a2 + 48);
      v45 = (uint64_t)v4;
      v52 = 773;
      Name = llvm::Value::getName(v4);
      v50 = v11;
      v51 = ".realp";
      sub_22E3C408C(v10, (uint64_t)&v45, 0, (uint64_t)&Name, (uint64_t)&v30);
      v12 = *(uint64_t **)(a1 + 8);
      v29[0] = v30;
      v29[1] = v31;
      v29[2] = v32;
      v13 = llvm::Value::getName(v4);
      WORD4(v47) = 773;
      v45 = v13;
      *(_QWORD *)&v46 = v14;
      *((_QWORD *)&v46 + 1) = ".real";
      v7 = sub_22E485864(v12, (uint64_t)v29, (v6 >> 2) & 1, (uint64_t)&v45);
    }
    else
    {
      v7 = 0;
    }
    if (!*(_BYTE *)(a1 + 17) || (v6 & 4) != 0)
    {
      v15 = *(_QWORD *)a1;
      v46 = v33;
      v47 = v34;
      v16 = (uint64_t *)(v15 + 272);
      v48 = v35;
      v45 = (uint64_t)v4;
      v17 = llvm::Value::getName(v4);
      v52 = 773;
      Name = v17;
      v50 = v18;
      v51 = ".imagp";
      sub_22E3C408C(v16, (uint64_t)&v45, 1, (uint64_t)&Name, (uint64_t)&v30);
      v19 = *(uint64_t **)(a1 + 8);
      v28[0] = v30;
      v28[1] = v31;
      v28[2] = v32;
      v20 = llvm::Value::getName(v4);
      WORD4(v47) = 773;
      v45 = v20;
      *(_QWORD *)&v46 = v21;
      *((_QWORD *)&v46 + 1) = ".imag";
      sub_22E485864(v19, (uint64_t)v28, (v6 >> 2) & 1, (uint64_t)&v45);
    }
  }
  return v7;
}

uint64_t sub_22E502A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[8];
  uint64_t v21;
  uint64_t v22[2];

  *(_WORD *)(a1 + 16) = 0;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)a1;
  v22[0] = 0;
  v22[1] = v8;
  sub_22EFF605C(v7);
  sub_22E48EE24(v22, v9, 0);
  v10 = sub_22E5048E4(a1, v7);
  v12 = v11;
  sub_22E48F084(v22);
  *a3 = v10;
  a3[1] = v12;
  sub_22E4D8D7C((_QWORD *)a4);
  v13 = *a3;
  v14 = a3[1];
  v15 = *(_OWORD *)(a4 + 112);
  v20[6] = *(_OWORD *)(a4 + 96);
  v20[7] = v15;
  v21 = *(_QWORD *)(a4 + 128);
  v16 = *(_OWORD *)(a4 + 48);
  v20[2] = *(_OWORD *)(a4 + 32);
  v20[3] = v16;
  v17 = *(_OWORD *)(a4 + 80);
  v20[4] = *(_OWORD *)(a4 + 64);
  v20[5] = v17;
  v18 = *(_OWORD *)(a4 + 16);
  v20[0] = *(_OWORD *)a4;
  v20[1] = v18;
  return sub_22E5025C8((uint64_t *)a1, v13, v14, (uint64_t)v20, 0);
}

uint64_t sub_22E502B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD *, llvm::Value **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  llvm::Value *v38;
  llvm::Value *v39;
  uint64_t v40;
  llvm::Value *v41;
  uint64_t v42;
  _QWORD *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t result;
  char v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  llvm::Value *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD v74[8];
  uint64_t v75;
  _OWORD v76[8];
  uint64_t v77;
  _OWORD v78[8];
  uint64_t v79;
  _OWORD v80[8];
  uint64_t v81;
  llvm::Value *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char v93;
  __int16 v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  *(_WORD *)(a1 + 16) = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(_BYTE *)(v13 + 16) == 6;
  else
    v14 = 0;
  if (v14
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
    && (v13 = sub_22F10CF48(v13)) != 0)
  {
    v12 = *(_QWORD *)(v13 + 32);
  }
  v87 = *(_QWORD *)a1;
  v88 = 4;
  LOBYTE(v90) = 0;
  v95 = 0;
  v15 = sub_22F0013BC((unsigned int *)a2, *(_QWORD *)(*(_QWORD *)(v87 + 144) + 152));
  sub_22E61990C((uint64_t)&v87, v15);
  v82 = 0;
  v83 = 0;
  v16 = sub_22E5056CC(a1, *(_QWORD *)(a2 + 40));
  if (v16 <= 0xF)
    v16 = *(_QWORD *)(a2 + 40);
  v86 = v16;
  v73 = *(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 32);
  v17 = sub_22E5056CC(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
  v19 = (llvm::LLVMContext *)v17;
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_DWORD *)(v21 + 16) == 11;
  else
    v22 = 0;
  if (v22 && ((*(_DWORD *)(v21 + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    v23 = *(_QWORD *)a1;
    if ((unint64_t)v19 >= 0x10)
    {
      v24 = sub_22E50FD80(v23, *(unsigned __int8 **)(a2 + 24), v19, v18);
    }
    else
    {
      v96 = *(_QWORD *)a1;
      v97 = v23 + 272;
      v98 = 0;
      v99 = *(_QWORD *)(*(_QWORD *)(v23 + 144) + 232);
      v24 = sub_22E50E974(&v96, v20, v18);
    }
    v27 = v24;
    v29 = 0;
  }
  else if (v17 >= 0x10)
  {
    v27 = sub_22E502324(*(_QWORD *)a1, *(unsigned __int8 **)(a2 + 24), v17);
    v29 = v30;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    v96 = 0;
    v97 = v25;
    sub_22EFF605C(v20);
    sub_22E48EE24(&v96, v26, 0);
    v27 = sub_22E5048E4(a1, v20);
    v29 = v28;
    sub_22E48F084(&v96);
  }
  v84 = v27;
  v85 = v29;
  sub_22E4D8D7C((_QWORD *)a6);
  v31 = *(_DWORD *)(a2 + 4);
  v32 = sub_22E5056CC(a1, *(_QWORD *)(a2 + 32));
  v33 = v12 & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    v34 = *(_OWORD *)(a6 + 112);
    v80[6] = *(_OWORD *)(a6 + 96);
    v80[7] = v34;
    v81 = *(_QWORD *)(a6 + 128);
    v35 = *(_OWORD *)(a6 + 48);
    v80[2] = *(_OWORD *)(a6 + 32);
    v80[3] = v35;
    v36 = *(_OWORD *)(a6 + 80);
    v80[4] = *(_OWORD *)(a6 + 64);
    v80[5] = v36;
    v37 = *(_OWORD *)(a6 + 16);
    v80[0] = *(_OWORD *)a6;
    v80[1] = v37;
    v39 = (llvm::Value *)sub_22E5027E0(a1, (uint64_t)v80, v31);
    if (v32 >= 0x10)
      v40 = v32;
    else
      v40 = v16;
    v41 = sub_22E5061F4((uint64_t *)a1, v39, v38, v12, v40, v31);
    goto LABEL_28;
  }
  v62 = *(_QWORD *)a1;
  v63 = *(_OWORD *)(a6 + 112);
  v78[6] = *(_OWORD *)(a6 + 96);
  v78[7] = v63;
  v79 = *(_QWORD *)(a6 + 128);
  v64 = *(_OWORD *)(a6 + 48);
  v78[2] = *(_OWORD *)(a6 + 32);
  v78[3] = v64;
  v65 = *(_OWORD *)(a6 + 80);
  v78[4] = *(_OWORD *)(a6 + 64);
  v78[5] = v65;
  v66 = *(_OWORD *)(a6 + 16);
  v78[0] = *(_OWORD *)a6;
  v78[1] = v66;
  v67 = (llvm::Value *)sub_22F25F748(v62, (uint64_t)v78, v31);
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v68 || (v69 = *(_DWORD *)(v68 + 16), v69 != 11) || ((v69 >> 19) & 0x1FE) - 210 > 7)
  {
    v41 = (llvm::Value *)sub_22E506154((uint64_t *)a1, v67, v12, v16, v31);
LABEL_28:
    v82 = v41;
    goto LABEL_29;
  }
  if (v32 < 0x10)
  {
    v70 = v73;
    if (*(_QWORD *)(*(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_46;
    goto LABEL_45;
  }
  v70 = *(_QWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 32);
  if (*(_QWORD *)(*(_QWORD *)((v70 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_45:
    v71 = *(_QWORD *)a1 + 272;
    v96 = *(_QWORD *)a1;
    v97 = v71;
    v98 = 0;
    v99 = *(_QWORD *)(*(_QWORD *)(v96 + 144) + 232);
    v67 = sub_22E50EA80(&v96, v67, v12, v70, v31, 0);
  }
LABEL_46:
  v42 = 0;
  v82 = v67;
LABEL_29:
  v83 = v42;
  v43 = (_QWORD *)(a1 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, llvm::Value **))(*v43 + a3);
  v45 = (llvm::Value *)a3(v43, &v82);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    v46 = sub_22E5061F4((uint64_t *)a1, v45, v44, v86, v12, v31);
    v48 = v47;
    v49 = *(_OWORD *)(a6 + 112);
    v76[6] = *(_OWORD *)(a6 + 96);
    v76[7] = v49;
    v77 = *(_QWORD *)(a6 + 128);
    v50 = *(_OWORD *)(a6 + 48);
    v76[2] = *(_OWORD *)(a6 + 32);
    v76[3] = v50;
    v51 = *(_OWORD *)(a6 + 80);
    v76[4] = *(_OWORD *)(a6 + 64);
    v76[5] = v51;
    v52 = *(_OWORD *)(a6 + 16);
    v76[0] = *(_OWORD *)a6;
    v76[1] = v52;
    result = sub_22E5025C8((uint64_t *)a1, (uint64_t)v46, v47, (uint64_t)v76, 0);
    v54 = 2;
  }
  else
  {
    v55 = *(_QWORD *)a1 + 272;
    v96 = *(_QWORD *)a1;
    v97 = v55;
    v98 = 0;
    v99 = *(_QWORD *)(*(_QWORD *)(v96 + 144) + 232);
    v46 = sub_22E50FC50(&v96, v45, v44, v86, v12, v31);
    v56 = *(_QWORD *)a1;
    v57 = *(_OWORD *)(a6 + 112);
    v74[6] = *(_OWORD *)(a6 + 96);
    v74[7] = v57;
    v75 = *(_QWORD *)(a6 + 128);
    v58 = *(_OWORD *)(a6 + 48);
    v74[2] = *(_OWORD *)(a6 + 32);
    v74[3] = v58;
    v59 = *(_OWORD *)(a6 + 80);
    v74[4] = *(_OWORD *)(a6 + 64);
    v74[5] = v59;
    v60 = *(_OWORD *)(a6 + 16);
    v74[0] = *(_OWORD *)a6;
    v74[1] = v60;
    result = sub_22E4E87FC(v56, v46, v74, 0);
    v48 = 0;
    v54 = 0;
  }
  *(_QWORD *)a5 = v46;
  *(_QWORD *)(a5 + 8) = v48;
  *(_BYTE *)(a5 + 48) = v54;
  v61 = v87;
  *(_DWORD *)(v87 + 2788) = v88;
  *(_WORD *)(v61 + 373) = v89;
  if (v95)
  {
    v72 = v90;
    *(_DWORD *)(v90 + 96) = v91;
    *(_QWORD *)(v72 + 88) = v92;
    *(_BYTE *)(v72 + 100) = v93;
    *(_WORD *)(v72 + 101) = v94;
  }
  return result;
}

uint64_t sub_22E503064(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2[2];
  if (*(unsigned __int8 *)(*(_QWORD *)*a2 + 8) > 6u)
  {
    v17[0] = "add.r";
    v18 = 259;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v5 + 72) + 16))(*(_QWORD *)(v5 + 72), v4, v6, 0, 0);
    if (!v7)
    {
      v20 = 257;
      v11 = llvm::BinaryOperator::Create();
      v7 = sub_22E3C12C8((uint64_t *)v5, v11, (uint64_t)v17);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v13 = a2[1];
    v14 = a2[3];
    v17[0] = "add.i";
    v18 = 259;
    if (!(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v12 + 72) + 16))(*(_QWORD *)(v12 + 72), v13, v14, 0, 0))
    {
      v20 = 257;
      v15 = llvm::BinaryOperator::Create();
      sub_22E3C12C8((uint64_t *)v12, v15, (uint64_t)v17);
    }
  }
  else
  {
    v19[0] = "add.r";
    v20 = 259;
    v7 = sub_22E42067C(v5, v4, v6, (uint64_t)v19, 0);
    v8 = a2[1];
    v9 = a2[3];
    if (v8 && v9)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v19[0] = "add.i";
      v20 = 259;
      sub_22E42067C(v10, v8, v9, (uint64_t)v19, 0);
    }
  }
  return v7;
}

uint64_t sub_22E503220(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t a4, __n128 a5)
{
  unint64_t v5;
  uint64_t v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;

  v5 = a4;
  *(_WORD *)(a2 + 16) = 0;
  *a1 = sub_22E50417C((uint64_t *)a2, a3[2], a4, a5);
  a1[1] = v9;
  result = sub_22E50417C((uint64_t *)a2, a3[3], v5, v10);
  a1[2] = result;
  a1[3] = v12;
  if (v5 <= 0xF)
    v5 = a3[1];
  a1[4] = v5;
  return result;
}

uint64_t sub_22E50328C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2[2];
  if (*(unsigned __int8 *)(*(_QWORD *)v4 + 8) > 6u)
  {
    v17[0] = "sub.r";
    v18 = 259;
    v7 = (uint64_t)sub_22E3E48CC(v5, v4, v6, (uint64_t)v17, 0, 0);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = a2[1];
    v13 = a2[3];
    v17[0] = "sub.i";
    v18 = 259;
    sub_22E3E48CC(v11, v12, v13, (uint64_t)v17, 0, 0);
  }
  else
  {
    v17[0] = "sub.r";
    v18 = 259;
    v7 = sub_22E4208FC(v5, v4, v6, (uint64_t)v17, 0);
    v8 = a2[1];
    if (v8)
    {
      v9 = a2[3];
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 8);
        v17[0] = "sub.i";
        v18 = 259;
        sub_22E4208FC(v10, v8, v9, (uint64_t)v17, 0);
      }
    }
    else
    {
      v14 = *(uint64_t **)(a1 + 8);
      v15 = a2[3];
      v17[0] = "sub.i";
      v18 = 259;
      sub_22E3E39A4(v14, v15, (uint64_t)v17, 0);
    }
  }
  return v7;
}

llvm::PHINode *sub_22E5033B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t FCmpHelper;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  llvm::PHINode *v40;
  uint64_t *v41;
  uint64_t v42;
  llvm::PHINode *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Instruction *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Instruction *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Instruction *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Instruction *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v69;
  uint64_t *v70;
  _QWORD v71[4];
  __int16 v72;
  uint64_t v73;
  _QWORD v74[4];
  __int16 v75;

  v73 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 232);
  v4 = *a2;
  if (*(unsigned __int8 *)(*(_QWORD *)v4 + 8) > 6u)
  {
    v44 = a1[1];
    v45 = a2[2];
    v74[0] = "mul.rl";
    v75 = 259;
    v46 = sub_22E3BDEA8(v44, v4, v45, (uint64_t)v74, 0, 0);
    v47 = a1[1];
    v48 = a2[1];
    v49 = a2[3];
    v74[0] = "mul.rr";
    v75 = 259;
    v50 = sub_22E3BDEA8(v47, v48, v49, (uint64_t)v74, 0, 0);
    v51 = a1[1];
    v74[0] = "mul.r";
    v75 = 259;
    v40 = sub_22E3E48CC(v51, (uint64_t)v46, (uint64_t)v50, (uint64_t)v74, 0, 0);
    v52 = a1[1];
    v53 = a2[1];
    v54 = a2[2];
    v74[0] = "mul.il";
    v75 = 259;
    v55 = sub_22E3BDEA8(v52, v53, v54, (uint64_t)v74, 0, 0);
    v56 = a1[1];
    v57 = *a2;
    v58 = a2[3];
    v74[0] = "mul.ir";
    v75 = 259;
    v59 = sub_22E3BDEA8(v56, v57, v58, (uint64_t)v74, 0, 0);
    v60 = a1[1];
    v71[0] = "mul.i";
    v72 = 259;
    if (!(*(uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Instruction *, _QWORD, _QWORD))(**(_QWORD **)(v60 + 72) + 16))(*(_QWORD *)(v60 + 72), v55, v59, 0, 0))
    {
      v75 = 257;
      v61 = llvm::BinaryOperator::Create();
      sub_22E3C12C8((uint64_t *)v60, v61, (uint64_t)v71);
    }
  }
  else if (a2[1] && a2[3])
  {
    v5 = a1[1];
    v6 = a2[2];
    v74[0] = "mul_ac";
    v75 = 259;
    v7 = sub_22E4207BC(v5, v4, v6, (uint64_t)v74, 0);
    v8 = a1[1];
    v9 = a2[1];
    v10 = a2[3];
    v74[0] = "mul_bd";
    v75 = 259;
    v11 = sub_22E4207BC(v8, v9, v10, (uint64_t)v74, 0);
    v12 = a1[1];
    v13 = *a2;
    v14 = a2[3];
    v74[0] = "mul_ad";
    v75 = 259;
    v15 = sub_22E4207BC(v12, v13, v14, (uint64_t)v74, 0);
    v16 = a1[1];
    v17 = a2[1];
    v18 = a2[2];
    v74[0] = "mul_bc";
    v75 = 259;
    v19 = sub_22E4207BC(v16, v17, v18, (uint64_t)v74, 0);
    v20 = a1[1];
    v74[0] = "mul_r";
    v75 = 259;
    v21 = sub_22E4208FC(v20, v7, v11, (uint64_t)v74, 0);
    v22 = a1[1];
    v74[0] = "mul_i";
    v75 = 259;
    v23 = (uint64_t *)sub_22E42067C(v22, v15, v19, (uint64_t)v74, 0);
    v74[0] = "isnan_cmp";
    v75 = 259;
    v70 = (uint64_t *)v21;
    FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
    v74[0] = "complex_mul_cont";
    v75 = 259;
    v25 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v74[0] = "complex_mul_imag_nan";
    v75 = 259;
    v26 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v27 = (uint64_t *)a1[1];
    v28 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v28, v26, v25, FCmpHelper, 0);
    v75 = 257;
    v69 = *(_QWORD *)(sub_22E3C12C8(v27, v28, (uint64_t)v74) + 40);
    llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)&v73);
    llvm::Instruction::setMetadata();
    sub_22E5ED9B4((_QWORD *)*a1, v26, 0);
    v74[0] = "isnan_cmp";
    v75 = 259;
    v29 = llvm::IRBuilderBase::CreateFCmpHelper();
    v74[0] = "complex_mul_libcall";
    v75 = 259;
    v30 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v31 = (uint64_t *)a1[1];
    v32 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v32, v30, v25, v29, 0);
    v75 = 257;
    sub_22E3C12C8(v31, v32, (uint64_t)v74);
    llvm::Instruction::setMetadata();
    sub_22E5ED9B4((_QWORD *)*a1, v30, 0);
    v33 = sub_22E504298(a1, (uint64_t)off_24FA63F28[*(char *)(*(_QWORD *)*a2 + 8)], 8, a2);
    v35 = v34;
    v36 = (uint64_t *)a1[1];
    v37 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v75 = 257;
    sub_22E3C12C8(v36, v37, (uint64_t)v74);
    sub_22E5ED9B4((_QWORD *)*a1, v25, 0);
    v38 = (uint64_t *)a1[1];
    v39 = *v70;
    v74[0] = "real_mul_phi";
    v75 = 259;
    v40 = (llvm::PHINode *)sub_22E3C4B80(v38, v39, 3, (uint64_t)v74);
    sub_22E3C4C50(v40, (uint64_t)v70, v69);
    sub_22E3C4C50(v40, (uint64_t)v70, (uint64_t)v26);
    sub_22E3C4C50(v40, v33, (uint64_t)v30);
    v41 = (uint64_t *)a1[1];
    v42 = *v23;
    v74[0] = "imag_mul_phi";
    v75 = 259;
    v43 = (llvm::PHINode *)sub_22E3C4B80(v41, v42, 3, (uint64_t)v74);
    sub_22E3C4C50(v43, (uint64_t)v23, v69);
    sub_22E3C4C50(v43, (uint64_t)v23, (uint64_t)v26);
    sub_22E3C4C50(v43, v35, (uint64_t)v30);
  }
  else
  {
    v62 = a1[1];
    v63 = a2[2];
    v74[0] = "mul.rl";
    v75 = 259;
    v40 = (llvm::PHINode *)sub_22E4207BC(v62, v4, v63, (uint64_t)v74, 0);
    v64 = a2[1];
    v65 = a1[1];
    if (v64)
    {
      v66 = a2[2];
      v74[0] = "mul.il";
      v75 = 259;
      v67 = v74;
    }
    else
    {
      v64 = *a2;
      v66 = a2[3];
      v71[0] = "mul.ir";
      v72 = 259;
      v67 = v71;
    }
    sub_22E4207BC(v65, v64, v66, (uint64_t)v67, 0);
  }
  return v40;
}

unsigned __int8 *sub_22E503A6C(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t NullValue;
  uint64_t v6;
  llvm::Constant **v7;
  unsigned __int8 *result;
  int v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  llvm::Instruction *v13;
  uint64_t v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Instruction *v20;
  uint64_t v21;
  llvm::Instruction *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  uint64_t v28;
  llvm::Instruction *v29;
  uint64_t v30;
  llvm::Instruction *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[32];
  __int16 v64;
  _OWORD v65[2];
  uint64_t v66;

  v4 = *(unsigned __int8 ***)a2;
  NullValue = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(llvm::Constant ***)(a2 + 24);
  result = **(unsigned __int8 ***)a2;
  v9 = result[8];
  if (!v7)
  {
    v38 = a1[1];
    LOWORD(v66) = 257;
    v35 = sub_22E42E65C(v38, (uint64_t)v4, v6, (uint64_t)v65, 0);
    v39 = a1[1];
    LOWORD(v66) = 257;
    v40 = NullValue;
    v41 = v6;
LABEL_21:
    sub_22E42E65C(v39, v40, v41, (uint64_t)v65, 0);
    return (unsigned __int8 *)v35;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 52) & 0x400) != 0)
  {
    if (!NullValue)
      NullValue = llvm::Constant::getNullValue(*v7, (llvm::Type *)a2);
    v42 = a1[1];
    LOWORD(v66) = 257;
    v43 = sub_22E4207BC(v42, (uint64_t)v4, v6, (uint64_t)v65, 0);
    v44 = a1[1];
    LOWORD(v66) = 257;
    v45 = sub_22E4207BC(v44, NullValue, (uint64_t)v7, (uint64_t)v65, 0);
    v46 = a1[1];
    LOWORD(v66) = 257;
    v47 = sub_22E42067C(v46, v43, v45, (uint64_t)v65, 0);
    v48 = a1[1];
    LOWORD(v66) = 257;
    v49 = sub_22E4207BC(v48, v6, v6, (uint64_t)v65, 0);
    v50 = a1[1];
    LOWORD(v66) = 257;
    v51 = sub_22E4207BC(v50, (uint64_t)v7, (uint64_t)v7, (uint64_t)v65, 0);
    v52 = a1[1];
    LOWORD(v66) = 257;
    v53 = sub_22E42067C(v52, v49, v51, (uint64_t)v65, 0);
    v54 = a1[1];
    LOWORD(v66) = 257;
    v55 = sub_22E4207BC(v54, NullValue, v6, (uint64_t)v65, 0);
    v56 = a1[1];
    LOWORD(v66) = 257;
    v57 = sub_22E4207BC(v56, (uint64_t)v4, (uint64_t)v7, (uint64_t)v65, 0);
    v58 = a1[1];
    LOWORD(v66) = 257;
    v59 = sub_22E4208FC(v58, v55, v57, (uint64_t)v65, 0);
    v60 = a1[1];
    LOWORD(v66) = 257;
    v35 = sub_22E42E65C(v60, v47, v53, (uint64_t)v65, 0);
    v39 = a1[1];
    LOWORD(v66) = 257;
    v40 = v59;
    v41 = v53;
    goto LABEL_21;
  }
  v10 = *(_OWORD *)(a2 + 16);
  v65[0] = *(_OWORD *)a2;
  v65[1] = v10;
  v66 = *(_QWORD *)(a2 + 32);
  if (!NullValue)
  {
    result = (unsigned __int8 *)llvm::Constant::getNullValue((llvm::Constant *)result, (llvm::Type *)a2);
    *((_QWORD *)&v65[0] + 1) = result;
    v9 = *((_DWORD *)*v4 + 2);
  }
  v11 = "__divhc3";
  switch(v9)
  {
    case 0:
      goto LABEL_26;
    case 1:
      __break(1u);
      return result;
    case 2:
      v11 = "__divsc3";
      goto LABEL_26;
    case 3:
      v11 = "__divdc3";
      goto LABEL_26;
    case 4:
      v11 = "__divxc3";
      goto LABEL_26;
    case 5:
    case 6:
      v11 = "__divtc3";
LABEL_26:
      v35 = sub_22E504298(a1, (uint64_t)v11, 8, (uint64_t *)v65);
      break;
    default:
      v12 = a1[1];
      LOWORD(v66) = 257;
      v13 = sub_22E3BDEA8(v12, (uint64_t)v4, v6, (uint64_t)v65, 0, 0);
      v14 = a1[1];
      LOWORD(v66) = 257;
      v62 = NullValue;
      v15 = sub_22E3BDEA8(v14, NullValue, (uint64_t)v7, (uint64_t)v65, 0, 0);
      v16 = a1[1];
      v64 = 257;
      v17 = (*(uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Instruction *, _QWORD, _QWORD))(**(_QWORD **)(v16 + 72) + 16))(*(_QWORD *)(v16 + 72), v13, v15, 0, 0);
      if (!v17)
      {
        LOWORD(v66) = 257;
        v18 = llvm::BinaryOperator::Create();
        v17 = sub_22E3C12C8((uint64_t *)v16, v18, (uint64_t)v63);
      }
      v61 = v17;
      v19 = a1[1];
      LOWORD(v66) = 257;
      v20 = sub_22E3BDEA8(v19, v6, v6, (uint64_t)v65, 0, 0);
      v21 = a1[1];
      LOWORD(v66) = 257;
      v22 = sub_22E3BDEA8(v21, (uint64_t)v7, (uint64_t)v7, (uint64_t)v65, 0, 0);
      v23 = a1[1];
      v64 = 257;
      v24 = (*(uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Instruction *, _QWORD, _QWORD))(**(_QWORD **)(v23 + 72) + 16))(*(_QWORD *)(v23 + 72), v20, v22, 0, 0);
      if (!v24)
      {
        LOWORD(v66) = 257;
        v25 = llvm::BinaryOperator::Create();
        v24 = sub_22E3C12C8((uint64_t *)v23, v25, (uint64_t)v63);
      }
      v26 = a1[1];
      LOWORD(v66) = 257;
      v27 = sub_22E3BDEA8(v26, v62, v6, (uint64_t)v65, 0, 0);
      v28 = a1[1];
      LOWORD(v66) = 257;
      v29 = sub_22E3BDEA8(v28, (uint64_t)v4, (uint64_t)v7, (uint64_t)v65, 0, 0);
      v30 = a1[1];
      LOWORD(v66) = 257;
      v31 = sub_22E3E48CC(v30, (uint64_t)v27, (uint64_t)v29, (uint64_t)v65, 0, 0);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v32 || *(_BYTE *)(v32 + 16) != 12)
        v32 = sub_22F10CF48(v32);
      v33 = sub_22F110B50(*(_QWORD *)(*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0));
      v34 = a1[1];
      LOWORD(v66) = 257;
      if (v33)
      {
        v35 = sub_22E4DF3BC(v34, v61, v24, (uint64_t)v65, 0);
        v36 = a1[1];
        LOWORD(v66) = 257;
        sub_22E4DF3BC(v36, (uint64_t)v31, v24, (uint64_t)v65, 0);
      }
      else
      {
        v35 = sub_22E5047C0(v34, v61, v24, (uint64_t)v65, 0);
        v37 = a1[1];
        LOWORD(v66) = 257;
        sub_22E5047C0(v37, (uint64_t)v31, v24, (uint64_t)v65, 0);
      }
      return (unsigned __int8 *)v35;
  }
  return (unsigned __int8 *)v35;
}

uint64_t sub_22E503F9C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16[4];
  __int16 v17;

  *(_WORD *)(a1 + 16) = 0;
  if (a3 >= 0x10)
  {
    v7 = sub_22E502324(*(_QWORD *)a1, *(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)a1;
    v16[0] = 0;
    v16[1] = v5;
    sub_22EFF605C(v4);
    sub_22E48EE24(v16, v6, 0);
    v7 = sub_22E5048E4(a1, v4);
    v9 = v8;
    sub_22E48F084(v16);
  }
  v11 = *(uint64_t **)(a1 + 8);
  if (*(unsigned __int8 *)(*(_QWORD *)v7 + 8) > 6u)
  {
    v16[0] = (uint64_t)"neg.r";
    v17 = 259;
    v12 = (uint64_t)sub_22E42E798((uint64_t)v11, v7, (uint64_t)v16, 0, 0);
    v14 = *(_QWORD *)(a1 + 8);
    v16[0] = (uint64_t)"neg.i";
    v17 = 259;
    sub_22E42E798(v14, v9, (uint64_t)v16, 0, 0);
  }
  else
  {
    v16[0] = (uint64_t)"neg.r";
    v17 = 259;
    v12 = sub_22E3E39A4(v11, v7, (uint64_t)v16, 0);
    v13 = *(uint64_t **)(a1 + 8);
    v16[0] = (uint64_t)"neg.i";
    v17 = 259;
    sub_22E3E39A4(v13, v9, (uint64_t)v16, 0);
  }
  return v12;
}

uint64_t sub_22E5040EC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9[2];

  *((_WORD *)a1 + 8) = 0;
  if (a3 >= 0x10)
    return sub_22E502324(*a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  v9[0] = 0;
  v9[1] = v5;
  sub_22EFF605C(v4);
  sub_22E48EE24(v9, v6, 0);
  v7 = sub_22E5048E4(a1, v4);
  sub_22E48F084(v9);
  return v7;
}

uint64_t sub_22E50417C(uint64_t *a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 12)
  {
    if (a3 >= 0x10)
    {
      return sub_22E502324(*a1, (unsigned __int8 *)a2, a3);
    }
    else
    {
      v6 = *a1;
      v14 = 0;
      v15 = v6;
      sub_22EFF605C(a2);
      sub_22E48EE24(&v14, v7, 0);
      v8 = sub_22E5048E4(a1, a2);
      sub_22E48F084(&v14);
    }
  }
  else if (a3 >= 0x10)
  {
    v11 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v11)
      v12 = *(_BYTE *)(v11 + 16) == 12;
    else
      v12 = 0;
    if (!v12)
      v11 = sub_22F10CF48(v11);
    return sub_22E50FD80(*a1, (unsigned __int8 *)a2, *(llvm::LLVMContext **)(v11 + 32), a4);
  }
  else
  {
    v9 = *a1 + 272;
    v14 = *a1;
    v15 = v9;
    v16 = 0;
    v17 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 232);
    return sub_22E50E974(&v14, a2, a4);
  }
  return v8;
}

uint64_t sub_22E504298(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  char v88;
  __int16 v89;
  uint64_t v90;
  _QWORD v91[3];
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  void *v96;
  uint64_t v97;
  uint64_t v98[4];
  void *v99;
  uint64_t v100;
  _BYTE v101[1216];
  void *v102;
  uint64_t v103;
  _BYTE v104[192];
  void *v105;
  uint64_t v106;
  _BYTE v107[16];
  void *v108;
  uint64_t v109;
  _QWORD v110[7];

  v110[5] = *MEMORY[0x24BDAC8D0];
  v99 = v101;
  v100 = 0x800000000;
  v102 = v104;
  v103 = 0x100000000;
  v105 = v107;
  v106 = 0x100000000;
  v108 = v110;
  v109 = 0x200000000;
  v110[4] = 0;
  v8 = *a4;
  v9 = *(_QWORD *)(a4[4] & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 12;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = *(_QWORD *)(v9 + 32);
  v82 = v8;
  v83 = 0;
  v88 = 0;
  v89 = 0;
  v90 = v11;
  v12 = sub_22E3C187C((uint64_t)&v99, (unint64_t)&v82, 1);
  v13 = (char *)v99 + 152 * v100;
  v14 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *((_OWORD *)v13 + 1) = v14;
  v15 = *(_QWORD *)(v12 + 144);
  v16 = *(_OWORD *)(v12 + 128);
  v17 = *(_OWORD *)(v12 + 96);
  *((_OWORD *)v13 + 7) = *(_OWORD *)(v12 + 112);
  *((_OWORD *)v13 + 8) = v16;
  *((_QWORD *)v13 + 18) = v15;
  *((_OWORD *)v13 + 6) = v17;
  v18 = *(_OWORD *)(v12 + 80);
  v19 = *(_OWORD *)(v12 + 32);
  v20 = *(_OWORD *)(v12 + 48);
  *((_OWORD *)v13 + 4) = *(_OWORD *)(v12 + 64);
  *((_OWORD *)v13 + 5) = v18;
  *((_OWORD *)v13 + 2) = v19;
  *((_OWORD *)v13 + 3) = v20;
  LODWORD(v100) = v100 + 1;
  v21 = a4[1];
  v22 = *(_QWORD *)(a4[4] & 0xFFFFFFFFFFFFFFF0);
  if (!v22 || *(_BYTE *)(v22 + 16) != 12)
    v22 = sub_22F10CF48(v22);
  v23 = *(_QWORD *)(v22 + 32);
  v82 = v21;
  v83 = 0;
  v88 = 0;
  v89 = 0;
  v90 = v23;
  v24 = sub_22E3C187C((uint64_t)&v99, (unint64_t)&v82, 1);
  v25 = (char *)v99 + 152 * v100;
  v26 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v24;
  *((_OWORD *)v25 + 1) = v26;
  v27 = *(_QWORD *)(v24 + 144);
  v28 = *(_OWORD *)(v24 + 128);
  v29 = *(_OWORD *)(v24 + 96);
  *((_OWORD *)v25 + 7) = *(_OWORD *)(v24 + 112);
  *((_OWORD *)v25 + 8) = v28;
  *((_QWORD *)v25 + 18) = v27;
  *((_OWORD *)v25 + 6) = v29;
  v30 = *(_OWORD *)(v24 + 80);
  v31 = *(_OWORD *)(v24 + 32);
  v32 = *(_OWORD *)(v24 + 48);
  *((_OWORD *)v25 + 4) = *(_OWORD *)(v24 + 64);
  *((_OWORD *)v25 + 5) = v30;
  *((_OWORD *)v25 + 2) = v31;
  *((_OWORD *)v25 + 3) = v32;
  LODWORD(v100) = v100 + 1;
  v33 = a4[2];
  v34 = *(_QWORD *)(a4[4] & 0xFFFFFFFFFFFFFFF0);
  if (!v34 || *(_BYTE *)(v34 + 16) != 12)
    v34 = sub_22F10CF48(v34);
  v35 = *(_QWORD *)(v34 + 32);
  v82 = v33;
  v83 = 0;
  v88 = 0;
  v89 = 0;
  v90 = v35;
  v36 = sub_22E3C187C((uint64_t)&v99, (unint64_t)&v82, 1);
  v37 = (char *)v99 + 152 * v100;
  v38 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v36;
  *((_OWORD *)v37 + 1) = v38;
  v39 = *(_QWORD *)(v36 + 144);
  v40 = *(_OWORD *)(v36 + 128);
  v41 = *(_OWORD *)(v36 + 96);
  *((_OWORD *)v37 + 7) = *(_OWORD *)(v36 + 112);
  *((_OWORD *)v37 + 8) = v40;
  *((_QWORD *)v37 + 18) = v39;
  *((_OWORD *)v37 + 6) = v41;
  v42 = *(_OWORD *)(v36 + 80);
  v43 = *(_OWORD *)(v36 + 32);
  v44 = *(_OWORD *)(v36 + 48);
  *((_OWORD *)v37 + 4) = *(_OWORD *)(v36 + 64);
  *((_OWORD *)v37 + 5) = v42;
  *((_OWORD *)v37 + 2) = v43;
  *((_OWORD *)v37 + 3) = v44;
  LODWORD(v100) = v100 + 1;
  v45 = a4[3];
  v46 = *(_QWORD *)(a4[4] & 0xFFFFFFFFFFFFFFF0);
  if (!v46 || *(_BYTE *)(v46 + 16) != 12)
    v46 = sub_22F10CF48(v46);
  v47 = *(_QWORD *)(v46 + 32);
  v82 = v45;
  v83 = 0;
  v88 = 0;
  v89 = 0;
  v90 = v47;
  v48 = sub_22E3C187C((uint64_t)&v99, (unint64_t)&v82, 1);
  v49 = (char *)v99 + 152 * v100;
  v50 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v48;
  *((_OWORD *)v49 + 1) = v50;
  v51 = *(_QWORD *)(v48 + 144);
  v52 = *(_OWORD *)(v48 + 128);
  v53 = *(_OWORD *)(v48 + 96);
  *((_OWORD *)v49 + 7) = *(_OWORD *)(v48 + 112);
  *((_OWORD *)v49 + 8) = v52;
  *((_QWORD *)v49 + 18) = v51;
  *((_OWORD *)v49 + 6) = v53;
  v54 = *(_OWORD *)(v48 + 80);
  v55 = *(_OWORD *)(v48 + 32);
  v56 = *(_OWORD *)(v48 + 48);
  *((_OWORD *)v49 + 4) = *(_OWORD *)(v48 + 64);
  *((_OWORD *)v49 + 5) = v54;
  *((_OWORD *)v49 + 2) = v55;
  *((_OWORD *)v49 + 3) = v56;
  LODWORD(v100) = v100 + 1;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0x500000000;
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v77 = 0u;
  v78 = 0u;
  v57 = a4[4];
  v58 = *(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0);
  if (!v58 || *(_BYTE *)(v58 + 16) != 12)
  {
    v58 = sub_22F10CF48(v58);
    v57 = a4[4];
  }
  v59 = *(_QWORD *)(v58 + 32);
  v96 = v98;
  v98[0] = v59;
  v98[1] = v59;
  v98[2] = v59;
  v98[3] = v59;
  v97 = 0x400000004;
  v60 = (uint64_t *)(sub_22EF63D8C(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), v57, v98, 4uLL, (__int128 *)&v73, 0) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_22E46D9A0(*(_QWORD *)(*a1 + 144) + 280, *(_QWORD **)(*(_QWORD *)(*a1 + 144) + 280), (unsigned int *)&v99, *v60, 0, 0, v61, v62);
  v64 = sub_22E46F2EC(*(_QWORD *)(*a1 + 144) + 280, v63);
  sub_22E633A04(*(_QWORD *)(*a1 + 144), v64, a2, a3, 0, 1, 0);
  v66 = v65;
  v67 = *v60;
  if (!*v60 || *(_BYTE *)(v67 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v67 = sub_22F10CF48(v67);
    else
      v67 = 0;
  }
  v82 = v66;
  v83 = v67;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v72 = 0;
  v68 = *a1;
  memset(v91, 0, sizeof(v91));
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  sub_22E47A004(&v71, v68, v63, &v82, v91, &v99, &v72, 0, 0, 0);
  *(_WORD *)(v72 + 18) = *(_WORD *)(v72 + 18) & 0xF003 | (4 * *(_WORD *)(*(_QWORD *)(*a1 + 144) + 136));
  v69 = v71;
  if (v96 != v98)
    free(v96);
  if (v108 != v110)
    free(v108);
  if (v105 != v107)
    free(v105);
  if (v102 != v104)
    free(v102);
  if (v99 != v101)
    free(v99);
  return v69;
}

uint64_t sub_22E5047C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t *v13;
  uint64_t v14;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72));
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
    else
      v8 = 0;
    if (v8)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v7, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v9 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)a1;
        v11 = v10 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata();
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v12 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v12);
      v13 = (uint64_t *)a1;
      v14 = (uint64_t)v12;
    }
    else
    {
      v14 = llvm::BinaryOperator::Create();
      v13 = (uint64_t *)a1;
    }
    return sub_22E3C12C8(v13, v14, a4);
  }
  return v7;
}

uint64_t sub_22E5048E4(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  uint64_t (*v31)(_QWORD *, llvm::Value **);
  uint64_t v32;
  uint64_t v33;
  int v34;
  __n128 v35;
  unsigned int v36;
  __int128 *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 4:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x18:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        return sub_22E505BE4((uint64_t)a1, (uint64_t)a2);
      case 2:
        v6 = sub_22E5056CC((uint64_t)a1, *((_QWORD *)a2 + 1));
        sub_22E503220((uint64_t *)&v49, (uint64_t)a1, a2, v6, v7);
        v8 = (uint64_t)sub_22E5033B8(a1, (uint64_t *)&v49);
        goto LABEL_39;
      case 3:
        v6 = sub_22E5056CC((uint64_t)a1, *((_QWORD *)a2 + 1));
        sub_22E503220((uint64_t *)&v49, (uint64_t)a1, a2, v6, v30);
        v8 = (uint64_t)sub_22E503A6C(a1, (uint64_t)&v49);
        goto LABEL_39;
      case 5:
        v6 = sub_22E5056CC((uint64_t)a1, *((_QWORD *)a2 + 1));
        sub_22E503220((uint64_t *)&v49, (uint64_t)a1, a2, v6, v29);
        v8 = sub_22E503064((uint64_t)a1, (uint64_t *)&v49);
        goto LABEL_39;
      case 6:
        v6 = sub_22E5056CC((uint64_t)a1, *((_QWORD *)a2 + 1));
        sub_22E503220((uint64_t *)&v49, (uint64_t)a1, a2, v6, v35);
        v8 = sub_22E50328C((uint64_t)a1, (uint64_t *)&v49);
LABEL_39:
        v11 = v8;
        v26 = v9;
        if (v6 < 0x10)
          return v11;
        v27 = *a1;
        v28 = *((_QWORD *)a2 + 1);
        goto LABEL_41;
      case 0x15:
        v39 = 0uLL;
        sub_22E502A30((uint64_t)a1, (uint64_t)a2, (uint64_t *)&v39, (uint64_t)&v49);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 1) & 1) == 0 || (BYTE8(v53) & 4) == 0)
          return v39;
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        v40 = v49;
        v41 = v50;
        v36 = *((_DWORD *)a2 + 1);
        v37 = &v40;
        break;
      case 0x16:
        v31 = (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E5033B8;
        return sub_22E50579C((uint64_t)a1, (uint64_t)a2, v31, 0);
      case 0x17:
        v31 = (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E503A6C;
        return sub_22E50579C((uint64_t)a1, (uint64_t)a2, v31, 0);
      case 0x19:
        v31 = (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E503064;
        return sub_22E50579C((uint64_t)a1, (uint64_t)a2, v31, 0);
      case 0x1A:
        v31 = (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E50328C;
        return sub_22E50579C((uint64_t)a1, (uint64_t)a2, v31, 0);
      case 0x20:
        sub_22E4D89CC(*a1);
        v32 = *((_QWORD *)a2 + 3);
        v33 = *a1;
        *(_QWORD *)&v49 = 0;
        *((_QWORD *)&v49 + 1) = v33;
        sub_22EFF605C(v32);
        sub_22E48EE24((uint64_t *)&v49, v34, 0);
        v11 = sub_22E5048E4(a1, v32);
        sub_22E48F084(&v49);
        return v11;
      default:
        goto LABEL_9;
    }
    return sub_22E5027E0((uint64_t)a1, (uint64_t)v37, v36);
  }
  else
  {
    if (!a2 || v4 != 233)
LABEL_10:
      __asm { BR              X10 }
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
        sub_22E4D8D7C(&v49);
        v22 = *a1;
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        v40 = v49;
        v41 = v50;
        v23 = (uint64_t)a2;
        v24 = 1;
        goto LABEL_20;
      case 1:
        sub_22E4D8D7C(&v49);
        v22 = *a1;
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        v40 = v49;
        v41 = v50;
        v23 = (uint64_t)a2;
        v24 = 0;
LABEL_20:
        v25 = 0;
        return sub_22F25E99C(v22, v23, (uint64_t)&v40, v24, v25);
      case 2:
        sub_22E4D8D7C(&v49);
        v22 = *a1;
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        v40 = v49;
        v41 = v50;
        v23 = (uint64_t)a2;
        v24 = 1;
        goto LABEL_25;
      case 3:
        sub_22E4D8D7C(&v49);
        v22 = *a1;
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        v40 = v49;
        v41 = v50;
        v23 = (uint64_t)a2;
        v24 = 0;
LABEL_25:
        v25 = 1;
        return sub_22F25E99C(v22, v23, (uint64_t)&v40, v24, v25);
      case 4:
      case 9:
      case 0xA:
      case 0xB:
        return sub_22E505BE4((uint64_t)a1, (uint64_t)a2);
      case 5:
        sub_22E4D8D7C(&v49);
        sub_22EFF605C((uint64_t)a2);
        v36 = v38;
        v37 = &v49;
        return sub_22E5027E0((uint64_t)a1, (uint64_t)v37, v36);
      case 6:
        v19 = sub_22E5056CC((uint64_t)a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v20 = sub_22E5040EC(a1, (uint64_t)a2, v19);
        goto LABEL_22;
      case 7:
        v19 = sub_22E5056CC((uint64_t)a1, *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v20 = sub_22E503F9C((uint64_t)a1, (uint64_t)a2, v19);
LABEL_22:
        v11 = v20;
        v26 = v21;
        if (v19 < 0x10)
          return v11;
        v27 = *a1;
        v28 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
LABEL_41:
        v10 = sub_22F262790(v27, v11, v26, v28);
        break;
      case 8:
        *((_WORD *)a1 + 8) = 0;
        v13 = *((_QWORD *)a2 + 2);
        v14 = *a1;
        *(_QWORD *)&v49 = 0;
        *((_QWORD *)&v49 + 1) = v14;
        sub_22EFF605C(v13);
        sub_22E48EE24((uint64_t *)&v49, v15, 0);
        v11 = sub_22E5048E4(a1, v13);
        v17 = v16;
        sub_22E48F084(&v49);
        v18 = (uint64_t *)a1[1];
        if (*(unsigned __int8 *)(*(_QWORD *)v17 + 8) > 6u)
        {
          *(_QWORD *)&v49 = "conj.i";
          LOWORD(v51) = 259;
          sub_22E42E798((uint64_t)v18, v17, (uint64_t)&v49, 0, 0);
        }
        else
        {
          *(_QWORD *)&v49 = "conj.i";
          LOWORD(v51) = 259;
          sub_22E3E39A4(v18, v17, (uint64_t)&v49, 0);
        }
        return v11;
      case 0xC:
      case 0xD:
        return sub_22E50255C(a1, *((_QWORD *)a2 + 2));
      default:
LABEL_9:
        v4 = v5;
        goto LABEL_10;
    }
  }
  return v10;
}

void sub_22E5055E4(llvm *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = llvm::errs(a1);
  sub_22EF80E70(v1, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 144) + 144));
  __break(1u);
  JUMPOUT(0x22E505604);
}

uint64_t sub_22E505614(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFFA9C0((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144)) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) & 0xFE) == 0x28)
  {
    sub_22E4D8D7C(&v13);
    sub_22EFF605C((uint64_t)a2);
    return sub_22E5027E0(a1, (uint64_t)&v13, v4);
  }
  else
  {
    v6 = *(uint64_t **)a1;
    v8 = 0;
    v7 = 0uLL;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    sub_22E4ECB90(v6, a2, &v7, &v13);
    return v13;
  }
}

unint64_t sub_22E5056CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 12;
  else
    v4 = 0;
  if ((v4
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12
     && (v3 = sub_22F10CF48(v3)) != 0)
    && (v7 = *(_QWORD *)(v3 + 32), (sub_22F10E474(&v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144)) & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144);
    return sub_22F369F4C(v6, *(_QWORD *)(v6 + 16560));
  }
  else if (sub_22F10E474(&v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144)))
  {
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 144) + 16560);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22E50579C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *, llvm::Value **), uint64_t a4)
{
  _OWORD v7[8];
  uint64_t v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[0] = 0;
  v15[1] = 0;
  sub_22E502B04(a1, a2, a3, a4, (uint64_t)v15, (uint64_t)v9);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 152) + 1) & 1) == 0 || (BYTE8(v10) & 4) == 0)
    return v15[0];
  v7[6] = v12;
  v7[7] = v13;
  v8 = v14;
  v7[2] = v9[2];
  v7[3] = v9[3];
  v7[4] = v10;
  v7[5] = v11;
  v7[0] = v9[0];
  v7[1] = v9[1];
  return sub_22E5027E0(a1, (uint64_t)v7, *(_DWORD *)(a2 + 4));
}

llvm::PHINode *sub_22E505838(uint64_t *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  llvm::PHINode *v34;
  uint64_t *v35;
  uint64_t v36;
  llvm::PHINode *v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  const char *v43;
  uint64_t v44;
  __int16 v45;

  *((_WORD *)a1 + 8) = 0;
  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v5 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v43 = "cond.end";
  v45 = 259;
  v6 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v7 = (_QWORD *)*a1;
  v41 = *a1;
  v42[0] = 0;
  v42[2] = 0;
  if (*a2 == 103)
  {
    v40 = v7[40];
LABEL_3:
    v8 = (unsigned __int8 **)(a2 + 24);
    goto LABEL_4;
  }
  sub_22F253B0C((uint64_t)v7, *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 3), (uint64_t)v42);
  v39 = *a2;
  v7 = (_QWORD *)*a1;
  v40 = *(_QWORD *)(*a1 + 320);
  if (v39 == 103)
    goto LABEL_3;
  v8 = (unsigned __int8 **)(a2 + 32);
LABEL_4:
  v9 = *v8;
  v10 = sub_22E3CF180((uint64_t)(v7 + 488), (uint64_t)a2);
  if (v11)
    v12 = v10;
  else
    v12 = 0;
  sub_22E61F8F8(v7, v9, (uint64_t)v4, (uint64_t)v5, v12, 0);
  v13 = (_QWORD *)*a1;
  if (!*(_QWORD *)(*a1 + 5832))
    v13[729] = &v40;
  sub_22E5ED9B4(v13, v4, 0);
  sub_22E3CB7B0((_QWORD *)*a1, (uint64_t)a2, 0);
  v14 = 40;
  if (*a2 == 103)
    v14 = 32;
  v15 = *(_QWORD *)&a2[v14];
  v16 = *a1;
  v43 = 0;
  v44 = v16;
  sub_22EFF605C(v15);
  sub_22E48EE24((uint64_t *)&v43, v17, 0);
  v18 = (uint64_t *)sub_22E5048E4(a1, v15);
  v20 = v19;
  sub_22E48F084(&v43);
  v21 = *(_QWORD *)(a1[1] + 48);
  sub_22E5EDA70(*a1);
  v22 = (_QWORD *)*a1;
  v23 = *(uint64_t **)(*a1 + 5832);
  if (v23 == &v40 || !v23)
    v22[729] = &v40;
  sub_22E5ED9B4(v22, v5, 0);
  v24 = 48;
  if (*a2 == 103)
    v24 = 40;
  v25 = *(_QWORD *)&a2[v24];
  v26 = *a1;
  v43 = 0;
  v44 = v26;
  sub_22EFF605C(v25);
  sub_22E48EE24((uint64_t *)&v43, v27, 0);
  v28 = sub_22E5048E4(a1, v25);
  v30 = v29;
  sub_22E48F084(&v43);
  v31 = *(_QWORD *)(a1[1] + 48);
  sub_22E5ED9B4((_QWORD *)*a1, v6, 0);
  if (*(uint64_t **)(*a1 + 5832) == &v40)
    *(_QWORD *)(*a1 + 5832) = 0;
  v32 = (uint64_t *)a1[1];
  v33 = *v18;
  v43 = "cond.r";
  v45 = 259;
  v34 = (llvm::PHINode *)sub_22E3C4B80(v32, v33, 2, (uint64_t)&v43);
  sub_22E3C4C50(v34, (uint64_t)v18, v21);
  sub_22E3C4C50(v34, v28, v31);
  v35 = (uint64_t *)a1[1];
  v36 = *v18;
  v43 = "cond.i";
  v45 = 259;
  v37 = (llvm::PHINode *)sub_22E3C4B80(v35, v36, 2, (uint64_t)&v43);
  sub_22E3C4C50(v37, v20, v21);
  sub_22E3C4C50(v37, v30, v31);
  if (v42[0])
    sub_22F254324((uint64_t)v42, v41);
  return v34;
}

uint64_t sub_22E505BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  sub_22E628400(*(_QWORD *)(*(_QWORD *)a1 + 144), a2, "complex expression");
  v4 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 12;
  else
    v5 = 0;
  if (!v5)
    v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 280), *(llvm::LLVMContext **)(v4 + 32));
  return llvm::UndefValue::get();
}

uint64_t sub_22E505C64(uint64_t *a1, uint64_t a2)
{
  if ((*(_BYTE *)a2 + 103) >= 0xF6u)
    sub_22E4DFCE0(*(_QWORD *)(*a1 + 144), a2);
  return sub_22E505CB8(a1, (*(_DWORD *)a2 >> 18) & 0x7F, *(_QWORD *)(a2 + 16), *(llvm::LLVMContext **)(a2 + 8));
}

uint64_t sub_22E505CB8(uint64_t *a1, unsigned int a2, uint64_t a3, llvm::LLVMContext *a4)
{
  unsigned int v7;
  uint64_t v8;
  int v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __n128 v21;
  llvm::Value *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _OWORD v40[8];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67[3];
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  if (a2 <= 0x3E)
  {
    if (((1 << a2) & 0x6000000000100030) != 0)
    {
      v16 = *a1;
      v68 = 0;
      *(_QWORD *)&v69 = v16;
      sub_22EFF605C(a3);
      sub_22E48EE24(&v68, v17, 0);
      v18 = sub_22E5048E4(a1, a3);
      sub_22E48F084(&v68);
      return v18;
    }
    if (((1 << a2) & 0x18C000000000000) != 0)
    {
      v68 = *a1;
      LODWORD(v69) = 4;
      BYTE8(v69) = 0;
      BYTE8(v71) = 0;
      v7 = sub_22F0013BC((unsigned int *)a3, *(_QWORD *)(*(_QWORD *)(v68 + 144) + 152));
      sub_22E61990C((uint64_t)&v68, v7);
      v8 = *a1;
      *(_QWORD *)&v42 = 0;
      *((_QWORD *)&v42 + 1) = v8;
      sub_22EFF605C(a3);
      sub_22E48EE24((uint64_t *)&v42, v9, 0);
      v10 = (llvm::Value *)sub_22E5048E4(a1, a3);
      v12 = v11;
      sub_22E48F084(&v42);
      v13 = *(_QWORD *)(a3 + 8);
      sub_22EFF605C(a3);
      v15 = sub_22E5061F4(a1, v10, v12, v13, (uint64_t)a4, v14);
      goto LABEL_8;
    }
    if (((1 << a2) & 0x10800000000000) != 0)
    {
      v68 = *a1;
      LODWORD(v69) = 4;
      BYTE8(v69) = 0;
      BYTE8(v71) = 0;
      v19 = sub_22F0013BC((unsigned int *)a3, *(_QWORD *)(*(_QWORD *)(v68 + 144) + 152));
      sub_22E61990C((uint64_t)&v68, v19);
      v20 = *a1 + 272;
      *(_QWORD *)&v42 = *a1;
      *((_QWORD *)&v42 + 1) = v20;
      LOBYTE(v43) = 0;
      *((_QWORD *)&v43 + 1) = *(_QWORD *)(*(_QWORD *)(v42 + 144) + 232);
      v22 = (llvm::Value *)sub_22E50E974(&v42, a3, v21);
      v23 = *(_QWORD *)(a3 + 8);
      sub_22EFF605C(a3);
      v15 = sub_22E506154(a1, v22, v23, (uint64_t)a4, v24);
LABEL_8:
      v18 = (uint64_t)v15;
      v25 = v68;
      *(_DWORD *)(v68 + 2788) = v69;
      *(_WORD *)(v25 + 373) = WORD2(v69);
      if (BYTE8(v71))
      {
        v26 = *((_QWORD *)&v69 + 1);
        *(_DWORD *)(*((_QWORD *)&v69 + 1) + 96) = v70;
        *(_QWORD *)(v26 + 88) = *((_QWORD *)&v70 + 1);
        *(_BYTE *)(v26 + 100) = v71;
        *(_WORD *)(v26 + 101) = *(_WORD *)((char *)&v71 + 1);
      }
      return v18;
    }
  }
  if (a2 == 2)
  {
    sub_22E4D8D7C(&v68);
    v74 = v69;
    v75 = v70;
    v76 = v71;
    v67[0] = v69;
    v67[1] = v70;
    v67[2] = v71;
    v27 = (uint64_t *)a1[1];
    v28 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), a4);
    LOWORD(v44) = 257;
    sub_22E3BEE6C(v27, v67, v28, (uint64_t)&v42, (uint64_t)&v74);
    v29 = *a1;
    v80 = v74;
    v81 = v75;
    v82 = v76;
    sub_22E6281E0(*(_QWORD **)(v29 + 144), (uint64_t)a4, (uint64_t)&v77);
    v42 = v80;
    v43 = v81;
    v44 = v82;
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 144) + 144);
    v52 = v77;
    v53 = v78;
    *(_QWORD *)&v54 = v79;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v56 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 2;
    v55 = 0;
    v65 = 0u;
    v66 = 0u;
    sub_22E3C113C((uint64_t)&v55, &v42, (uint64_t)a4, 2, &v52, v30);
    sub_22EFF605C(a3);
    v32 = v31;
    v33 = &v55;
  }
  else
  {
    sub_22E4D8D7C(&v68);
    v51[0] = v69;
    v51[1] = v70;
    v51[2] = v71;
    v34 = (uint64_t *)a1[1];
    v35 = sub_22E66C868(*(_QWORD *)(*a1 + 144) + 280, (uint64_t)a4, 0);
    LOWORD(v44) = 257;
    sub_22E3BEE6C(v34, v51, v35, (uint64_t)&v42, (uint64_t)&v52);
    v36 = *a1;
    v74 = v52;
    v75 = v53;
    v76 = v54;
    sub_22E6281E0(*(_QWORD **)(v36 + 144), (uint64_t)a4, (uint64_t)v72);
    v80 = v74;
    v81 = v75;
    v82 = v76;
    v37 = *(_QWORD *)(*(_QWORD *)(v36 + 144) + 144);
    v77 = v72[0];
    v78 = v72[1];
    v79 = v73;
    v43 = 0uLL;
    LODWORD(v44) = 0;
    *((_QWORD *)&v42 + 1) = 0;
    *((_QWORD *)&v44 + 1) = 0;
    *(_QWORD *)&v45 = 0;
    v46 = 0uLL;
    *(_QWORD *)((char *)&v47 + 4) = 2;
    LODWORD(v42) = 0;
    v48 = 0u;
    v49 = 0u;
    sub_22E3C113C((uint64_t)&v42, &v80, (uint64_t)a4, 2, &v77, v37);
    DWORD2(v47) = 1;
    v48 = 0u;
    v49 = 0u;
    v41 = v50;
    v40[2] = v44;
    v40[3] = v45;
    v40[0] = v42;
    v40[1] = v43;
    v40[4] = v46;
    v40[5] = v47;
    memset(&v40[6], 0, 32);
    sub_22EFF605C(a3);
    v32 = v38;
    v33 = (int *)v40;
  }
  return sub_22E5027E0((uint64_t)a1, (uint64_t)v33, v32);
}

llvm::Constant **sub_22E506154(uint64_t *a1, llvm::Value *a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  llvm::Constant **v13;
  llvm::Type *v14;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 12;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = *(_QWORD *)(v9 + 32);
  v12 = *a1 + 272;
  v16[0] = *a1;
  v16[1] = v12;
  v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(v16[0] + 144) + 232);
  v13 = (llvm::Constant **)sub_22E50EA80(v16, a2, a3, v11, a5, 0);
  llvm::Constant::getNullValue(*v13, v14);
  return v13;
}

llvm::Value *sub_22E5061F4(uint64_t *a1, llvm::Value *a2, llvm::Value *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 12;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v13 = *(_QWORD *)(v11 + 32);
  v14 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 12;
  else
    v15 = 0;
  if (!v15)
    v14 = sub_22F10CF48(v14);
  v16 = *(_QWORD *)(v14 + 32);
  if (a2)
  {
    v17 = *a1 + 272;
    v20 = *a1;
    v21 = v17;
    v22 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 144) + 232);
    a2 = sub_22E50EA80(&v20, a2, v13, v16, a6, 0);
  }
  if (a3)
  {
    v18 = *a1 + 272;
    v20 = *a1;
    v21 = v18;
    v22 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 144) + 232);
    sub_22E50EA80(&v20, a3, v13, v16, a6, 0);
  }
  return a2;
}

uint64_t sub_22E506304(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  llvm::Constant *v3;
  uint64_t AggregateElement;
  unsigned int v7;
  _BYTE v9[136];

  if ((a2 & 4) != 0)
  {
    sub_22E619C24(a2 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a3 + 8), 0, 1, *a1, (uint64_t)v9);
    sub_22EFF605C(a3);
    return sub_22E5027E0((uint64_t)a1, (uint64_t)v9, v7);
  }
  else
  {
    v3 = (llvm::Constant *)(a2 & 0xFFFFFFFFFFFFFFF8);
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)(a2 & 0xFFFFFFFFFFFFFFF8));
    llvm::Constant::getAggregateElement(v3);
  }
  return AggregateElement;
}

void sub_22E506394(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned __int8 *v6;
  llvm::Constant *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  if (!sub_22E3CB5E0(a2)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(*(_QWORD *)(*a1 + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0)
                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 45
    && (v8 = sub_22EFBC5B4(a2)) != 0
    && (*(_BYTE *)v8 & 0xFE) == 0x76
    && (v9 = *(_QWORD *)(v8 + 16), (*(_BYTE *)(v9 + 82) & 0x80) != 0)
    && sub_22EFD3AD4(v9))
  {
    sub_22E507208((_QWORD *)*a1, *(_QWORD *)(a2 + 48));
  }
  else
  {
    *((_BYTE *)a1 + 20) = sub_22EFBCCBC(a2);
    v4 = *(_QWORD *)(a2 + 48);
    v5 = sub_22EFBCF80(a2);
    if (v5)
    {
      sub_22E507554(a1, (uint64_t)v5, v4);
    }
    else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 16) & 0xFE) != 0x28)
    {
      v6 = (unsigned __int8 *)sub_22EFBC5B4(a2);
      sub_22E50794C(*a1, v4);
      v10[0] = *a1;
      v10[1] = a1;
      v10[2] = *(_QWORD *)(v10[0] + 232);
      v7 = (llvm::Constant *)sub_22E507A30((uint64_t)v10, v6);
      if (v7)
        sub_22E5082B4(*a1, v7, v4);
    }
  }
}

void sub_22E50650C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = (*(_DWORD *)(v3 + 16) & 0xFF800FF) == 127401995;
  else
    v4 = 0;
  if (!v4)
    __asm { BR              X11 }
  __asm { BR              X3 }
}

uint64_t sub_22E507114(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11[10];

  v11[9] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 0xF0) == 0)
    return 0;
  v6 = *(unsigned __int8 **)(a2 + 16);
  v7 = sub_22EFFED0C(v6);
  if ((*v7 + 113) >= 0xFBu)
  {
    v8 = sub_22EFFA9C0((uint64_t)v7, (*a1)[18]);
    v6 = *(unsigned __int8 **)(a2 + 16);
  }
  else
  {
    v8 = *((_QWORD *)v7 + 1);
  }
  sub_22F0D5A50((uint64_t)v6);
  v10 = v9;
  sub_22EFF68AC((uint64_t *)a2, v11);
  v2 = sub_22F262D70(a1, v10, (int)v11, v8);
  if (LODWORD(v11[0]) >= 2)
    sub_22EF53BC0(v11);
  return v2;
}

uint64_t sub_22E507208(_QWORD *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::Constant *v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  llvm::Constant *v22;
  llvm::Type *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28[2];
  _QWORD v29[9];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v5 && *(_BYTE *)(v5 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && (v5 = sub_22F10CF48(v5)) != 0)
  {
    v6 = *(_BYTE *)(v5 + 40) & 7;
    v7 = v6 > 4;
    v8 = (1 << v6) & 0x13;
    if (!v7 && v8 != 0)
    {
      v10 = sub_22E66C868((uint64_t)(a1 + 35), a2, 0);
      v11 = sub_22E699F3C(a1);
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v11 + 192))(v11, a1, v10, a2);
    }
    v13 = (uint64_t)(a1 + 35);
    goto LABEL_20;
  }
  if (sub_22E66DE5C((uint64_t)(a1 + 35), a2))
  {
    v13 = (uint64_t)(a1 + 35);
LABEL_20:
    v22 = (llvm::Constant *)sub_22E66C868(v13, a2, 0);
    return llvm::Constant::getNullValue(v22, v23);
  }
  v14 = sub_22EF5C728(a1[18], a2);
  if (v14 && (v15 = v14, *(_BYTE *)(v14 + 16) == 2))
  {
    sub_22E66C868((uint64_t)(a1 + 35), a2, 0);
    v16 = *(_QWORD *)(v15 + 32);
    v17 = (llvm::Constant *)sub_22E507208(a1, v16);
    v18 = sub_22E5082B4((uint64_t)a1, v17, v16);
    v19 = (unsigned int *)(v15 + 40);
    if (*(_DWORD *)(v15 + 48) >= 0x41u)
      v19 = *(unsigned int **)v19;
    v20 = *v19;
    v28[0] = v29;
    v28[1] = (void *)0x800000000;
    sub_22E4639CC((uint64_t)v28, v20, v18);
    v21 = llvm::ConstantArray::get();
    if (v28[0] != v29)
      free(v28[0]);
    return v21;
  }
  else
  {
    v24 = *v4;
    v25 = *(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v25 && *(_BYTE *)(v25 + 16) == 45)
    {
      v26 = sub_22F114198(*(_QWORD *)(v25 + 24));
      return sub_22E508C2C((uint64_t)a1, v26, 1);
    }
    else
    {
      v27 = a1[28];
      if (*(_BYTE *)(v24 + 16) != 31)
        v24 = sub_22F10CF48(*v4);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 160))(v27, v24);
    }
  }
}

void sub_22E5074F8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0)
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 17) = 1;
  *(_DWORD *)(a1 + 24) = v4;
  sub_22E506394((uint64_t *)a1, a2);
  if (!v5)
    *(_BYTE *)(a1 + 19) = 1;
}

void sub_22E507554(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Constant *v7;

  v6 = sub_22E50794C(*a1, a3);
  sub_22E50650C((uint64_t)a1, a2, v6);
  if (v7)
    sub_22E5082B4(*a1, v7, a3);
}

uint64_t sub_22E5075BC(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;

  v2 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a1 + 40);
  }
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v3);
  *v4 = 0;
  v4[1] = v2;
  ++*(_DWORD *)(a1 + 40);
  return v2;
}

uint64_t sub_22E507698(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  if (a2 && *(_BYTE *)(a2 + 16) == 5)
  {
    while (1)
    {
      v4 = *(unsigned __int16 *)(v2 + 18);
      if ((v4 - 47) >= 3)
      {
        if (v4 != 34)
          goto LABEL_15;
        v6 = *(_DWORD *)(v2 + 20) & 0x7FFFFFF;
        v7 = v6 - 1;
        if (v6 != 1)
          break;
      }
LABEL_4:
      v2 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      if (v2)
        v5 = *(_BYTE *)(v2 + 16) == 5;
      else
        v5 = 0;
      if (!v5)
        goto LABEL_15;
    }
    v8 = v2 + 32;
    while (1)
    {
      result = llvm::Constant::isNullValue(*(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)));
      if ((result & 1) == 0)
        break;
      v8 += 32;
      if (!--v7)
        goto LABEL_4;
    }
  }
LABEL_15:
  *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16 * *(unsigned int *)(v3 + 40) - 16) = v2;
  return result;
}

uint64_t sub_22E507758(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  llvm::GlobalVariable **v8;
  uint64_t v9;
  llvm::GlobalVariable **v10;
  llvm::GlobalVariable **v11;
  llvm::GlobalVariable **v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[2];
  uint64_t v16;
  llvm *v17[2];
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  _DWORD v24[8];
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(result + 18) = 1;
  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v13 = result;
    v4 = *(_QWORD **)(result + 32);
    v15[0] = *(_QWORD *)result;
    v15[1] = a2;
    v5 = a2;
    v16 = 0;
    v6 = &v4[2 * v3];
    sub_22E508FD4((uint64_t)v17, v3);
    do
    {
      sub_22F2630F0((uint64_t)v14, (uint64_t)v17, v4, v4 + 1);
      v4 += 2;
    }
    while (v4 != v6);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = v24;
    v25 = v27;
    v7 = *(uint64_t **)(v5 - 32);
    v16 = *v7;
    v24[0] = 0;
    v23 = 0x800000001;
    v27[0] = 0;
    v26 = 0x800000001;
    sub_22E509054((uint64_t)v15, (uint64_t)v7);
    v8 = (llvm::GlobalVariable **)((char *)v19 + 16 * v21);
    if ((_DWORD)v20)
    {
      if (v21)
      {
        v9 = 16 * v21;
        v10 = (llvm::GlobalVariable **)v19;
        while (((unint64_t)*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          v9 -= 16;
          if (!v9)
            goto LABEL_9;
        }
      }
      else
      {
        v10 = (llvm::GlobalVariable **)v19;
      }
    }
    else
    {
LABEL_9:
      v10 = (llvm::GlobalVariable **)((char *)v19 + 16 * v21);
    }
    v11 = (llvm::GlobalVariable **)((char *)v19 + 16 * v21);
LABEL_11:
    while (v10 != v11)
    {
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalVariable::eraseFromParent(*v10);
      v12 = v10 + 2;
      v10 = v8;
      if (v12 != v8)
      {
        v10 = v12;
        while (((unint64_t)*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            goto LABEL_11;
          }
        }
      }
    }
    if (v25 != v27)
      free(v25);
    if (v22 != v24)
      free(v22);
    llvm::deallocate_buffer(v19, (void *)(16 * v21));
    result = llvm::deallocate_buffer(v17[0], (void *)(16 * v18));
    *(_DWORD *)(v13 + 40) = 0;
  }
  return result;
}

uint64_t sub_22E50794C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;

  v2 = a2;
  v4 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 6;
  else
    v6 = 0;
  if (v6
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6 && (v5 = sub_22F10CF48(v5)) != 0)
  {
    v7 = *(_QWORD *)(v4 + 8);
    if ((v7 & 8) != 0)
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v10 = *(_QWORD *)(v5 + 32);
    v11 = v9 | (v7 | v2) & 7;
    if (((v11 | v8) & 0xCFFFFFFF8) != 0)
    {
      v12 = *(_QWORD *)(a1 + 144);
      v15 = v11 | v8;
      v13 = sub_22E491354((unsigned int *)&v15, v10);
      return sub_22EF5DBC4(v12, v13, v15);
    }
    else
    {
      return v11 & 7 | v10;
    }
  }
  return v2;
}

uint64_t sub_22E507A30(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned int v4;

  while (1)
  {
    v3 = *a2;
    if ((v3 & 0xFE) == 0x70)
      break;
    if (v3 != 233)
      goto LABEL_12;
    v3 = *(_DWORD *)a2;
    v4 = (*(_DWORD *)a2 >> 18) & 0x1F;
    if (v4 != 12)
    {
      if (v4 >= 0xC && v4 != 13)
        goto LABEL_3;
      return 0;
    }
    a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  }
  v3 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0xFC0000u) >= 0x840000)
  {
LABEL_3:
    v3 = v3;
LABEL_12:
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_22E5082B4(uint64_t a1, llvm::Constant *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t AggregateElement;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  unsigned int v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 6;
  else
    v7 = 0;
  if (v7)
    goto LABEL_7;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
  {
    v6 = sub_22F10CF48(v6);
    if (v6)
    {
LABEL_7:
      v9 = *(_QWORD *)(v6 + 32);
      a2 = (llvm::Constant *)sub_22E5082B4(a1, a2, v9);
      v10 = sub_22EF5CDF0(*(_QWORD *)(a1 + 144), *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      v11 = sub_22EF5CDF0(*(_QWORD *)(a1 + 144), *v5);
      if (v11 != v10)
      {
        llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 8), (llvm::Type *)((unint64_t)(v11 - v10) >> 3));
        llvm::ConstantAggregateZero::get();
        llvm::ConstantStruct::getTypeForElements();
        return llvm::ConstantStruct::get();
      }
      return (uint64_t)a2;
    }
    v6 = *v5;
  }
  v13 = sub_22E3E4B64(v6);
  if (v13 && (*(_DWORD *)(v13 + 16) & 0x780000) == 0x80000)
  {
    v14 = sub_22E3E4B64(*v5);
    v15 = 0;
    v16 = *(_QWORD *)(v14 + 32);
    v17 = (llvm::Type *)*(unsigned int *)(v14 + 20);
    v22 = 0;
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement(a2);
      v19 = sub_22E5082B4(a1, AggregateElement, v16);
      v20 = v22;
      if (v22 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v22;
      }
      v23[v20] = v19;
      ++v22;
      ++v15;
    }
    while ((_DWORD)v17 != v15);
    llvm::ArrayType::get(*(llvm::ArrayType **)v23[0], v17);
    v21 = (llvm::Value *)llvm::ConstantArray::get();
    a2 = v21;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 133) & 2) == 0)
    {
      llvm::Value::getContext(v21);
      llvm::ConstantStruct::getTypeForElements();
      return llvm::ConstantStruct::get();
    }
    return (uint64_t)a2;
  }
  if ((llvm::Type::isIntegerTy(*(llvm::Type **)a2) & 1) == 0
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 104) & 0x20) == 0
     || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12
     || !llvm::Type::isIntegerTy(*(llvm::Type **)(*(_QWORD *)a2 + 24))))
  {
    return (uint64_t)a2;
  }
  sub_22E66C868(a1 + 280, a3, 0);
  return llvm::ConstantExpr::getZExt();
}

BOOL sub_22E508590(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;

  v6 = 64;
  v5 = a2;
  v7 = 0;
  v2 = sub_22E4634B4(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    v4 = v2;
    MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
    v2 = v4;
  }
  return v2 != 0;
}

uint64_t sub_22E508600(int a1, uint64_t a2, llvm::ArrayType *a3, unsigned int a4, uint64_t a5, llvm::Constant *this)
{
  uint64_t v8;
  unsigned int v11;
  unsigned int i;
  int isNullValue;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[17];

  LODWORD(v8) = a4;
  v25[16] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a5 + 8);
  i = a4;
  if (v11 < a4)
  {
    isNullValue = llvm::Constant::isNullValue(this);
    v11 = *(_DWORD *)(a5 + 8);
    if (isNullValue)
      i = *(_DWORD *)(a5 + 8);
    else
      i = v8;
  }
  if (i && v11 == i)
  {
    for (i = v11; ; --i)
    {
      v14 = i - 1;
      if (!llvm::Constant::isNullValue(*(llvm::Constant **)(*(_QWORD *)a5 + 8 * v14)))
        break;
      if (!v14)
        return llvm::ConstantAggregateZero::get();
    }
  }
  else if (!i)
  {
    return llvm::ConstantAggregateZero::get();
  }
  v15 = (llvm::Type *)(v8 - i);
  if (v15 >= 8)
  {
    if (a3 && i >= 8)
    {
      llvm::ArrayType::get(a3, (llvm::Type *)i);
      v16 = llvm::ConstantArray::get();
      sub_22E50D8F0(a5, 2uLL);
      **(_QWORD **)a5 = v16;
    }
    else
    {
      sub_22E50D8F0(a5, i + 1);
      if (!a3)
        a3 = *(llvm::ArrayType **)(a2 + 24);
    }
    llvm::ArrayType::get(a3, v15);
    v19 = llvm::ConstantAggregateZero::get();
    v8 = *(unsigned int *)(a5 + 8);
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v8 - 8) = v19;
LABEL_23:
    v24 = 0;
    if (v8 < 0x11)
    {
      v20 = 0;
      if (!(_DWORD)v8)
      {
LABEL_31:
        llvm::StructType::get();
        return llvm::ConstantStruct::get();
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v8) = *(_DWORD *)(a5 + 8);
      v20 = 0;
      if (!(_DWORD)v8)
        goto LABEL_31;
    }
    v21 = *(uint64_t ***)a5;
    v22 = 8 * v8;
    do
    {
      v23 = **v21;
      if (v20 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v24;
      }
      v25[v20] = v23;
      v20 = ++v24;
      ++v21;
      v22 -= 8;
    }
    while (v22);
    goto LABEL_31;
  }
  v18 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v18 != (_DWORD)v8)
  {
    if (v18 <= v8)
    {
      sub_22E50D87C(a5, v8 - v18, (uint64_t)this);
      if (!a3)
        goto LABEL_38;
    }
    else
    {
      *(_DWORD *)(a5 + 8) = v8;
      if (!a3)
        goto LABEL_38;
    }
    if (*(llvm::ArrayType **)this == a3)
      goto LABEL_37;
LABEL_38:
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
    goto LABEL_23;
  }
  if (!a3)
    goto LABEL_23;
LABEL_37:
  llvm::ArrayType::get(a3, (llvm::Type *)v8);
  return llvm::ConstantArray::get();
}

unint64_t sub_22E508918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  char v24;
  int v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[10];

  v28[8] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22EF5D130(*(_QWORD *)(a1 + 144), *(_QWORD *)(a3 + 8));
  v22[0] = 0;
  if ((sub_22F24C318(*(_QWORD *)(a1 + 3328), *(_DWORD *)(a1 + 3344), a3, v22) & 1) != 0
    && (v7 = *(_QWORD *)(v22[0] + 8)) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v6) ^ 0x3F) >> 3);
    if (v6)
      return v8;
    else
      return *(_QWORD *)(v22[0] + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v12 & 8) != 0)
      v13 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v13 = 0;
    v22[0] = a1;
    v22[1] = a2;
    v23 = 0;
    v24 = 0;
    v26 = v28;
    v27 = 0x400000000;
    v14 = *(unsigned __int8 **)(a3 + 32);
    BYTE1(v23) = 1;
    v25 = v13;
    if (sub_22F262E6C(v22, v14, v11))
    {
      v15 = a1 + 3328;
      v16 = llvm::User::operator new((llvm::User *)0x58);
      sub_22E62D664(a1, *(_QWORD *)(a3 + 8), 1);
      v18 = ".compoundliteral";
      v19 = 259;
      llvm::GlobalVariable::GlobalVariable();
      sub_22E507758((uint64_t)v22, v16);
      v17 = __clz(v6);
      llvm::GlobalObject::setAlignment();
      v20 = a3;
      v21 = v16;
      sub_22F2543D4((uint64_t)&v18, v15, &v20, &v21);
      if (v6)
        v9 = v16 & 0xFFFFFFFFFFFFFFF8 | ((v17 ^ 0x3Fu) >> 3);
      else
        v9 = v16;
    }
    else
    {
      v9 = 0;
      HIBYTE(v23) = 1;
    }
    if (v26 != v28)
      free(v26);
  }
  return v9;
}

uint64_t sub_22E508B88(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
  else
    v5 = 0;
  if (v5)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 168))(*(_QWORD *)(a1 + 224));
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22F0CBBE4(*(_QWORD *)(a1 + 144), v4);
  v8 = v7
     / sub_22EF5CDF0(*(_QWORD *)(a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 224) + 176))(*(_QWORD *)(a1 + 224), v6, v8);
}

uint64_t sub_22E508C2C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  llvm::Type *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  llvm::Type *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v6 = sub_22E66DD94(a1 + 280, a2);
  v7 = v6;
  v8 = v6 + 8;
  if (a3)
    v8 = v6;
  v9 = *(_QWORD *)v8;
  v10 = *(unsigned int *)(*(_QWORD *)v8 + 12);
  v40 = v10;
  v39 = a3;
  if ((_DWORD)v10)
  {
    v11 = (char *)operator new(8 * v10);
    bzero(v11, 8 * v10);
  }
  else
  {
    v11 = 0;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
    v12 = 0;
  else
    v12 = a2;
  if (v12)
  {
    v13 = sub_22E46A3A0(v12);
    if (v13 != v14)
    {
      v15 = v13;
      v16 = v14;
      v17 = (uint64_t *)(v7 + 64);
      do
      {
        if ((*(_BYTE *)(v15 + 12) & 1) == 0)
        {
          v18 = *(_QWORD *)(**(_QWORD **)(v15 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v18 + 8) & 0xF) != 0)
            v18 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v15 + 16));
          v19 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 104) + 96), *(_QWORD *)(v19 + 104));
          if ((**(_QWORD **)(v19 + 128) & 0x200) == 0 && **(_QWORD **)(sub_22F0C975C(*(_QWORD *)(a1 + 144), v19) + 72))
          {
            v41 = 0;
            v42 = v19;
            v38 = v17;
            v20 = sub_22F246C54(v17, &v42, &v41);
            v21 = 0;
            if (v20)
              v21 = *(unsigned int *)(v41 + 8);
            *(_QWORD *)&v11[8 * v21] = sub_22E50D964(a1, *(llvm::Constant **)(*(_QWORD *)(v9 + 16) + 8 * v21), v19);
            v17 = v38;
          }
        }
        v15 += 24;
      }
      while (v15 != v16);
    }
  }
  v22 = sub_22EFC3B90(a2);
  if (v22)
  {
    v24 = v22;
LABEL_24:
    if ((*(_BYTE *)(v24 + 68) & 1) == 0 && (sub_22EFC2FDC(v24, *(_QWORD *)(a1 + 144)) & 1) == 0)
    {
      v25 = sub_22E4EC264(v7, v24);
      *(_QWORD *)&v11[8 * v25] = sub_22E507208(a1, *(_QWORD *)(v24 + 48));
    }
    if ((*(_DWORD *)(a2 + 72) & 0xE000) != 0x4000
      || (*(_QWORD *)(v24 + 40) >= 8uLL ? (v26 = (*(_QWORD *)(v24 + 40) & 7) == 0) : (v26 = 0),
          !v26
       && ((v27 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0))) == 0
        || (*(_DWORD *)(v27 + 28) & 0x7Eu) - 34 > 3
        || !sub_22EFC4258(v27))))
    {
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v24)
          break;
        if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_24;
      }
    }
  }
  if (v12)
  {
    if (v39)
    {
      v28 = sub_22E483108(v12);
      if ((llvm::Type *)v28 != v23)
      {
        v29 = v28;
        v30 = v23;
        v31 = (uint64_t *)(v7 + 88);
        do
        {
          v32 = *(_QWORD *)(**(_QWORD **)(v29 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v32 + 8) & 0xF) != 0)
            v32 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v29 + 16));
          v33 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v33 + 104) + 96), *(_QWORD *)(v33 + 104));
          if ((**(_QWORD **)(v33 + 128) & 0x200) == 0)
          {
            v41 = 0;
            v42 = v33;
            v34 = 0;
            if (sub_22F246C54(v31, &v42, &v41))
              v34 = *(unsigned int *)(v41 + 8);
            if (!*(_QWORD *)&v11[8 * v34])
              *(_QWORD *)&v11[8 * v34] = sub_22E50D964(a1, *(llvm::Constant **)(*(_QWORD *)(v9 + 16) + 8 * v34), v33);
          }
          v29 += 24;
        }
        while ((llvm::Type *)v29 != v30);
      }
    }
  }
  if ((_DWORD)v40)
  {
    v35 = 0;
    do
    {
      if (!*(_QWORD *)&v11[v35])
        *(_QWORD *)&v11[v35] = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v9 + 16) + v35), v23);
      v35 += 8;
    }
    while (8 * v40 != v35);
  }
  v36 = llvm::ConstantStruct::get();
  if (v11)
    operator delete(v11);
  return v36;
}

_QWORD *sub_22E508FD4(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
  *(_DWORD *)(a1 + 16) = v4;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v4, 8);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = 16 * v6;
    do
    {
      *result = -4096;
      result += 2;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22E509054(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t BitCast;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  v3 = result;
  if (a2 && *(unsigned __int8 *)(a2 + 16) - 11 >= 0xFFFFFFFD)
  {
    v4 = *(_DWORD *)(a2 + 20);
    v5 = v4 & 0x7FFFFFF;
    if ((v4 & 0x7FFFFFF) != 0)
    {
      v6 = 0;
      v7 = *(_DWORD *)(result + 80);
      v8 = a2;
      do
      {
        if (v7 >= *(_DWORD *)(v3 + 84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = *(_DWORD *)(v3 + 80);
        }
        *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * v7) = v6;
        ++*(_DWORD *)(v3 + 80);
        v9 = *(unsigned int *)(v3 + 128);
        if (v9 >= *(unsigned int *)(v3 + 132))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(unsigned int *)(v3 + 128);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v9) = 0;
        ++*(_DWORD *)(v3 + 128);
        result = sub_22E509054(v3, *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)));
        --*(_DWORD *)(v3 + 128);
        v7 = *(_DWORD *)(v3 + 80) - 1;
        *(_DWORD *)(v3 + 80) = v7;
        ++v6;
        v8 += 32;
      }
      while (v5 != v6);
    }
  }
  else
  {
    v21[0] = 0;
    v10 = sub_22F24C318(*(_QWORD *)(result + 24), *(_DWORD *)(result + 40), a2, v21);
    v11 = v21[0];
    result = *(_QWORD *)(v3 + 24);
    v12 = *(unsigned int *)(v3 + 40);
    if (v10)
      v13 = v21[0] == result + 16 * v12;
    else
      v13 = 1;
    if (v13)
    {
      while (*(_BYTE *)(v2 + 16) == 5 && v2 != 0)
      {
        v2 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
        v21[0] = 0;
        v15 = sub_22F24C318(result, v12, v2, v21);
        v11 = v21[0];
        result = *(_QWORD *)(v3 + 24);
        v12 = *(unsigned int *)(v3 + 40);
        if (v15)
          v16 = v21[0] == result + 16 * v12;
        else
          v16 = 1;
        if (!v16)
          goto LABEL_24;
      }
    }
    else
    {
LABEL_24:
      v17 = *(_QWORD *)(v11 + 8);
      v18 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v18)
      {
        v19 = v18 - 1;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v19))
            break;
          *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v19--) = llvm::ConstantInt::get();
        }
        while (v19 != -1);
      }
      llvm::ConstantExpr::getGetElementPtr();
      BitCast = llvm::ConstantExpr::getBitCast();
      v22 = v17;
      v23 = BitCast;
      return sub_22F2543D4((uint64_t)v21, v3 + 48, &v22, &v23);
    }
  }
  return result;
}

uint64_t sub_22E5092AC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24))
  {
    llvm::ConstantInt::get();
    llvm::PointerType::get();
    llvm::ConstantExpr::getBitCast();
    llvm::ConstantExpr::getGetElementPtr();
    return llvm::ConstantExpr::getPointerCast();
  }
  return a2;
}

uint64_t sub_22E509374(uint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Value *v22;
  unsigned int v24;
  uint64_t v25;
  unint64_t v27;
  llvm::Value *v28;

  v5 = a1[3];
  v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    if ((v8 & 0xC00000000) != 0)
    {
      v27 = HIDWORD(v8);
      v28 = (llvm::Value *)sub_22E5092AC((uint64_t)a1, a2);
      return sub_22F262FD8(a1[1], v28, v27);
    }
  }
  if ((a3 & 1) != 0)
  {
    v24 = sub_22F289B84(*a1, v5);
    if ((v24 & 3) == 0)
      return a2;
    if (*(_QWORD *)(a1[2] + 24))
      return 0;
    v21 = v25;
    v20 = v24;
    goto LABEL_32;
  }
  v9 = *v6;
  if (!*v6 || (v10 = *(_DWORD *)(v9 + 16), (v10 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_16;
    v9 = sub_22F10CF48(v9);
    if (!v9)
    {
      v5 = a1[3];
      goto LABEL_16;
    }
    v10 = *(_DWORD *)(v9 + 16);
  }
  v11 = *(_QWORD *)(*a1 + 144);
  if ((v10 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v9)
          break;
        v12 = *(_DWORD *)(v9 + 16);
        if ((v12 & 0xFE) != 0x28)
          break;
        if ((v12 & 0x100000) == 0)
          goto LABEL_15;
      }
      v9 = sub_22F10CF48(v9);
    }
    while ((*(_DWORD *)(v9 + 16) & 0x100000) != 0);
  }
LABEL_15:
  v5 = sub_22EF5B848(v11, *(_QWORD *)(v9 + 32), 0);
  a1[3] = v5;
LABEL_16:
  v13 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v14 == 39
    || ((v15 = *(_QWORD *)(*a1 + 144), v16 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v13 + 16) == 32)
     || v14 == 32 && (v16 = sub_22F10CF48(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && sub_22E509ED0(v16)
    || ((v17 = v13, *(_BYTE *)(v13 + 16) == 32)
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v17 = sub_22F10CF48(v13)) != 0)
    && sub_22E509F54(v17)
    || sub_22F40AAC0(v13, v15))
  {
    if (((v18 = *(_QWORD *)(a1[3] & 0xFFFFFFFFFFFFFFF0)) == 0 || *(_BYTE *)(v18 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v18 = sub_22F10CF48(v18)) == 0)
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 >= 2)
    {
      v20 = sub_22E5DE8CC(*a1, a1[3]);
      if ((v20 & 3) != 0)
      {
        v21 = v19;
LABEL_32:
        v22 = (llvm::Value *)sub_22E5092AC((uint64_t)a1, a2);
        return sub_22E5DF610((uint64_t *)*a1, v22, v20 >> 4, 0, v21);
      }
    }
  }
  return a2;
}

uint64_t sub_22E509614(int a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19)
{
  int v19;

  v19 = *(unsigned __int8 *)a2;
  if ((v19 & 0xFE) != 0x70)
  {
    if (v19 == 233)
      return 0;
LABEL_5:
    __asm { BR              X10 }
  }
  if ((*a2 & 0xFC0000u) >= 0x840000)
    goto LABEL_5;
  return 0;
}

BOOL sub_22E509ED0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  if ((*(_BYTE *)(v1 + 19) & 0xFC) == 0
    && ((v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v4 = *(_DWORD *)(v3 + 16) == 11)
      : (v4 = 0),
        v4))
  {
    return (*(_DWORD *)(v3 + 16) & 0xFF80000) == 115343360;
  }
  else
  {
    return 0;
  }
}

BOOL sub_22E509F54(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  if ((*(_BYTE *)(v1 + 19) & 0xFC) != 0
    && ((v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v4 = *(_DWORD *)(v3 + 16) == 11)
      : (v4 = 0),
        v4))
  {
    return (*(_DWORD *)(v3 + 16) & 0xFF80000) == 115343360;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_22E509FD8(uint64_t **a1, unsigned int *a2)
{
  int v4;
  int v5;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  int v19;
  uint64_t **v20;
  uint64_t *v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  _QWORD v32[3];
  void *v33;
  uint64_t v34;
  _BYTE v35[64];
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFFA8F0((uint64_t)a2);
  if (v4 == 1228)
  {
    v11 = (uint64_t)*a1;
    v12 = sub_22F3C0ED0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), *(_QWORD *)(v11 + 144));
    return sub_22F29B608(v11, v12);
  }
  else
  {
    v5 = v4;
    if (v4 == 1258)
    {
      v13 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
      v36 = 0;
      v37 = 0;
      LODWORD(v38) = 0;
      sub_22F005120((unsigned __int8 *)v13, (uint64_t)&v36, (*a1)[18], 0);
      v14 = v39;
      v15 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v39 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v15 + 28) & 0x7Eu) - 52 <= 5)
      {
        v16 = (uint64_t)*a1;
        if (sub_22E462B18(v39 & 0xFFFFFFFFFFFFFFFCLL))
          v15 = v14 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v15) + 96) & 0x80) == 0);
        v17 = (llvm::Value *)sub_22E4E9988(v16, v15, 0, 0);
      }
      else
      {
        v18 = a1[1][1];
        v31 = *a1;
        v32[0] = v18;
        LODWORD(v32[1]) = 0;
        BYTE4(v32[1]) = 0;
        v33 = v35;
        v34 = 0x400000000;
        sub_22EFF605C(v13);
        v17 = (llvm::Value *)sub_22F262D70(&v31, v19, (int)&v38, *(_QWORD *)(v13 + 8));
        if (v33 != v35)
          free(v33);
      }
      if (v38 >= 2)
        sub_22EF53BC0(&v38);
      sub_22F007D7C(*(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), (*a1)[18], 0, (uint64_t)&v31);
      if (LODWORD(v32[0]) >= 0x41)
        v20 = (uint64_t **)v31;
      else
        v20 = &v31;
      v21 = *v20;
      if (LODWORD(v32[0]) >= 0x41 && v31)
        MEMORY[0x2348A0E84]();
      v22 = *(unsigned int **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6] + ((unint64_t)*a2 >> 24));
      do
      {
        v23 = v22;
        LODWORD(v24) = *(unsigned __int8 *)v22;
        if (v24 > 0xD5)
        {
          if ((_DWORD)v24 == 233)
          {
            LODWORD(v24) = *v22;
            if ((*v22 & 0x7C0000) != 0x300000)
              break;
            v25 = (unsigned __int8 *)(v22 + 4);
          }
          else
          {
            if ((_DWORD)v24 != 214)
              break;
            v25 = (unsigned __int8 *)(v22 + 6);
          }
        }
        else if ((_DWORD)v24 == 155)
        {
          if ((**((_DWORD **)v22 + 2) & 0x18000) != 0)
            goto LABEL_49;
          v25 = (unsigned __int8 *)(v22 + 6);
          if (!*((_BYTE *)v23 + 48))
            v25 = (unsigned __int8 *)(v23 + 8);
          LOBYTE(v24) = -101;
        }
        else
        {
          if ((_DWORD)v24 != 176)
            break;
          v24 = v22[5];
          if ((_DWORD)v24 == -1)
            goto LABEL_49;
          v25 = (unsigned __int8 *)&v22[2 * v24 + 10];
          LOBYTE(v24) = -80;
        }
        v22 = *(unsigned int **)v25;
      }
      while (v22 != v23);
      if ((v24 + 113) >= 0xFBu && sub_22EFFA8F0((uint64_t)v23) == 1257)
      {
        v31 = *a1;
        memset(v32, 0, 13);
        v33 = v35;
        v34 = 0x400000000;
        v26 = *(_QWORD *)((char *)&v23[2 * (((unint64_t)*v23 >> 18) & 1) + 2] + ((unint64_t)*v23 >> 24));
        v27 = sub_22F262DEC(&v31, v26, *(_QWORD *)(v26 + 8));
        if (v33 != v35)
          free(v33);
        v31 = *a1;
        memset(v32, 0, 13);
        v33 = v35;
        v34 = 0x400000000;
        v28 = *(_QWORD *)((char *)&v23[2 * (((unint64_t)*v23 >> 18) & 1) + 4] + ((unint64_t)*v23 >> 24));
        v29 = sub_22F262DEC(&v31, v28, *(_QWORD *)(v28 + 8));
        if (v33 != v35)
          free(v33);
        return sub_22E5DF610(*a1, v17, (int)v21, v27, v29);
      }
LABEL_49:
      v31 = *a1;
      memset(v32, 0, 13);
      v33 = v35;
      v34 = 0x400000000;
      v29 = sub_22F262DEC(&v31, (uint64_t)v23, *((_QWORD *)v23 + 1));
      if (v33 != v35)
        free(v33);
      v30 = *(unsigned __int8 *)(*(_QWORD *)v29 + 8);
      if (v30 == 15)
        v27 = v29;
      else
        v27 = 0;
      if (v30 == 15)
        v29 = 0;
      return sub_22E5DF610(*a1, v17, (int)v21, v27, v29);
    }
    else if ((v4 - 406) >= 0xFFFFFFFE)
    {
      v7 = sub_22EFFBBCC(*(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]
                                             + ((unint64_t)*a2 >> 24)));
      v8 = *a1;
      if (v5 == 405)
      {
        v9 = v8[98];
        if (!v9)
        {
          sub_22F298C2C(v8);
          v9 = v8[98];
        }
        v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 64))(v9, v7);
      }
      else
      {
        v10 = sub_22E63559C((uint64_t)v8, v7);
      }
      return v10 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      return 0;
    }
  }
}

unint64_t sub_22E50A470(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v6 = a3[98];
  if (!v6)
  {
    sub_22F298C2C(a3);
    v6 = a3[98];
  }
  v9[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a1);
  v9[1] = v7;
  sub_22E66C868((uint64_t)(a3 + 35), a2, 0);
  return sub_22F25BEB0((uint64_t)v9) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22E50A4F0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __n128 *v27;
  unsigned int v28;
  int64_t v29;
  __n128 *v30;
  const std::nothrow_t *v31;
  unint64_t v32;
  void *v33;
  BOOL v34;
  __n128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Type **v47;
  unint64_t v48;
  unint64_t v49;
  __n128 *v50;
  unint64_t v51;
  _QWORD v52[2];
  int v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[26];

  v56[24] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)a1 + 144), a3);
  v11 = v10;
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 40) & 1) != 0)
    {
      v12 = (llvm::Value *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 504))(*(_QWORD *)(*(_QWORD *)a1 + 224), a3, a5, a4);
      v13 = sub_22E5DFBAC(*(_QWORD *)a1, a4);
      if ((v13 & 0xFF00000000) != 0)
      {
        result = sub_22F262FD8(*(_QWORD *)(a1 + 8), v12, v13);
        v12 = (llvm::Value *)result;
        if (!result)
          return result;
      }
      result = sub_22E50B354(*(unsigned int **)(a1 + 16), (llvm::Type **)v12, *(_QWORD *)(a1 + 24) + a5);
      if (!(_DWORD)result)
        return result;
    }
    v54 = v56;
    v55 = 0x800000000;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 104) + 96), *(_QWORD *)(a3 + 104));
    if (*(_DWORD *)(*(_QWORD *)(a3 + 128) + 16) > 8u)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 104) + 96), *(_QWORD *)(a3 + 104));
    v15 = *(_QWORD *)(a3 + 128);
    v16 = *(_QWORD *)(v15 + 24);
    if ((v16 & 1) != 0)
      v16 = sub_22EFCF510(v15);
    v17 = sub_22F24CD30(a3);
    if (v16 == v17)
    {
      v28 = v55;
    }
    else
    {
      v19 = v17;
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)(**(_QWORD **)(v16 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
          v21 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v16 + 16));
        v22 = sub_22F10C2A4(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
        if (v22)
        {
          if ((*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 >= 3)
            v23 = 0;
          else
            v23 = v22;
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22E46A3EC(v11, v23);
        v52[0] = v23;
        v52[1] = v24;
        v53 = v20;
        v25 = (char *)v54;
        if (v55 >= HIDWORD(v55))
        {
          if (v54 <= v52 && (char *)v54 + 24 * v55 > (char *)v52)
          {
            v29 = (char *)v52 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = (char *)v54;
            v26 = (char *)v54 + v29;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = (char *)v52;
            v25 = (char *)v54;
          }
        }
        else
        {
          v26 = (char *)v52;
        }
        v27 = (__n128 *)&v25[24 * v55];
        v18 = *(__n128 *)v26;
        v27[1].n128_u64[0] = *((_QWORD *)v26 + 2);
        *v27 = v18;
        v28 = v55 + 1;
        LODWORD(v55) = v55 + 1;
        v16 += 24;
        ++v20;
      }
      while (v16 != v19);
    }
    v30 = (__n128 *)v54;
    v51 = v28;
    v50 = (__n128 *)((char *)v54 + 24 * v28);
    if (v28 < 0x81)
    {
LABEL_34:
      v35 = sub_22E50C758(v30, v50, v51, 0, 0, v18);
    }
    else
    {
      v31 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v32 = v28;
      while (1)
      {
        v33 = operator new(24 * v32, v31);
        if (v33)
          break;
        v34 = v32 > 1;
        v32 >>= 1;
        if (!v34)
          goto LABEL_34;
      }
      v36 = v33;
      sub_22E50C758(v30, v50, v51, (uint64_t)v33, v32, v18);
      operator delete(v36);
    }
    if ((_DWORD)v55)
    {
      v37 = 0;
      v38 = 24 * v55;
      do
      {
        sub_22E50A4F0(a1, *(_QWORD *)(a2 + 8) + 72 * *(unsigned int *)((char *)v54 + v37 + 16), *(_QWORD *)((char *)v54 + v37), a4, *(_QWORD *)((char *)v54 + v37 + 8) + a5, v35);
        v37 += 24;
      }
      while (v38 != v37);
    }
    if (v54 != v56)
      free(v54);
  }
  v39 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_22EFC3B90(a3);
  if (!v40)
    return 1;
  v41 = v40;
  v42 = 0;
  v43 = v39 * a5;
LABEL_43:
  if ((*(_DWORD *)(a3 + 72) & 0xE000) == 0x4000
    && ((v44 = *(_QWORD *)(a2 + 8)) == 0
     || v44 != v41
     && (v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44),
         v45 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v41 + 32))(v41)))
    || (*(_BYTE *)(v41 + 68) & 1) != 0 && !*(_QWORD *)(v41 + 40)
    || (sub_22EFC2FDC(v41, *(_QWORD *)(*(_QWORD *)a1 + 144)) & 1) != 0)
  {
LABEL_58:
    while (1)
    {
      v41 = *(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v41)
        return 1;
      if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 49 <= 2)
      {
        ++v42;
        goto LABEL_43;
      }
    }
  }
  if ((*(_DWORD *)(a3 + 72) & 0xE000) == 0x4000)
    v46 = *(_QWORD *)(a2 + 16);
  else
    v46 = *(_QWORD *)(a2 + 8) + 72 * (*(_DWORD *)(a2 + 16) + v42);
  result = sub_22E507554(*(_QWORD *)(a1 + 8), v46, *(_QWORD *)(v41 + 48));
  if (result)
  {
    v47 = (llvm::Type **)result;
    v48 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v42) + v43;
    if ((*(_BYTE *)(v41 + 68) & 1) != 0)
    {
      result = sub_22E50AB24((_QWORD *)a1, v41, *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v42) + v43, result);
      if ((_DWORD)result)
        goto LABEL_58;
    }
    else
    {
      v49 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      result = sub_22E50B354(*(unsigned int **)(a1 + 16), v47, *(_QWORD *)(a1 + 24) + v48 / v49);
      if ((_DWORD)result)
      {
        sub_22E4EF458(v41);
        goto LABEL_58;
      }
    }
  }
  return result;
}

uint64_t sub_22E50AA18(_QWORD *a1, llvm::LLVMContext *a2)
{
  llvm::LLVMContext *v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unint64_t v11;

  v2 = a2;
  v4 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF0;
  v5 = *(_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || (v6 = *(_DWORD *)(v5 + 16), (v6 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v11 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF0;
    v5 = sub_22F10CF48(v5);
    if (!v5)
    {
      v4 = v11;
      goto LABEL_4;
    }
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 0x100000) != 0)
  {
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v5)
      {
        v10 = *(_DWORD *)(v5 + 16);
        if ((v10 & 0xFE) == 0x28)
          continue;
      }
      v5 = sub_22F10CF48(v5);
      v10 = *(_DWORD *)(v5 + 16);
    }
    while ((v10 & 0x100000) != 0);
  }
  v2 = *(llvm::LLVMContext **)(v5 + 32);
  v4 = (unint64_t)v2 & 0xFFFFFFFFFFFFFFF0;
LABEL_4:
  sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  v7 = sub_22E66CB04((llvm::Type ***)(*a1 + 280), v2);
  v8 = a1[2];
  return sub_22E50D270(*(_QWORD *)v8, *(llvm::Type **)(v8 + 8), *(unsigned int *)(v8 + 16), *(_QWORD **)(v8 + 280), *(unsigned int *)(v8 + 288), 0, *(_QWORD *)(v8 + 552), *(unsigned __int8 *)(v8 + 560), v7);
}

uint64_t sub_22E50AB24(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::APInt *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  llvm::Type **v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  llvm::Type **v47;
  const llvm::APInt *v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;

  v6 = a2;
  v8 = *a1 + 280;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 4) != 0)
    v10 = *(_QWORD *)v10;
  v11 = (*(_WORD *)(v10 + 8) & 0x7E) - 34;
  if (v10)
    v12 = v10 - 64;
  else
    v12 = 0;
  if (v11 >= 4)
    v13 = 0;
  else
    v13 = v12;
  v14 = sub_22E66DD94(v8, v13);
  if ((*(_BYTE *)(v6 + 29) & 0x80) != 0)
    v6 = sub_22EFB5D7C(v6);
  v15 = sub_22E47ED6C(v14 + 40, v6);
  v16 = (const llvm::APInt *)(a4 + 24);
  v17 = *(_DWORD *)(a4 + 32);
  v58 = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v16);
    v17 = v58;
  }
  else
  {
    v57 = *(_QWORD *)v16;
  }
  v18 = *(_WORD *)(v15 + 10) & 0x7FFF;
  if (v18 > v17)
  {
    llvm::APInt::zext((llvm::APInt *)&v57);
    if (v58 >= 0x41 && v57)
      MEMORY[0x2348A0E84](v57, 0x1000C8000313F17);
    v57 = v67;
    v17 = v68;
    v58 = v68;
    v18 = *(_WORD *)(v15 + 10) & 0x7FFF;
  }
  if (v18 < v17)
  {
    llvm::APInt::trunc((llvm::APInt *)&v57);
    if (v58 >= 0x41 && v57)
      MEMORY[0x2348A0E84](v57, 0x1000C8000313F17);
    v57 = v67;
    v17 = v68;
    v58 = v68;
  }
  v19 = a1[2];
  v56 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v55, (const llvm::APInt *)&v57);
  else
    v55 = v57;
  v20 = *(_QWORD *)(*a1 + 144);
  v21 = a1[3];
  v22 = a3 + sub_22EF5CDF0(v20, *(_QWORD *)(*(_QWORD *)(v20 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v21;
  v23 = *(_QWORD *)(*(_QWORD *)v19 + 144);
  v24 = sub_22EF5CDF0(v23, *(_QWORD *)(*(_QWORD *)(v23 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v25 = v22 % v24;
  v26 = (v22 - (v22 % v24))
      / sub_22EF5CDF0(v23, *(_QWORD *)(*(_QWORD *)(v23 + 16408) & 0xFFFFFFFFFFFFFFF0));
  do
  {
    v27 = v56;
    v28 = v24 - v25;
    if (v28 >= v56)
      v29 = v56;
    else
      v29 = v24 - v25;
    v68 = v56;
    if (v56 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const llvm::APInt *)&v55);
      v27 = v68;
    }
    else
    {
      v67 = v55;
    }
    if (v24 > v27)
    {
      llvm::APInt::zext((llvm::APInt *)&v67);
      if (v68 >= 0x41 && v67)
        MEMORY[0x2348A0E84](v67, 0x1000C8000313F17);
      v67 = v65;
      v68 = v66;
    }
    if (*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v19 + 200)))
    {
      v30 = v56 - v24 + v25;
      if (v30 >= 1)
      {
        v31 = v68;
        if (v68 > 0x40)
        {
          llvm::APInt::lshrSlowCase((llvm::APInt *)&v67);
          v30 = v68;
          goto LABEL_58;
        }
        if (v68 == v30)
        {
          v67 = 0;
          goto LABEL_58;
        }
        v67 >>= v30;
LABEL_57:
        v30 = v31;
        goto LABEL_58;
      }
      v31 = v68;
      if ((v30 & 0x80000000) == 0)
        goto LABEL_57;
      v66 = v68;
      if (v68 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v65, (const llvm::APInt *)&v67);
      else
        v65 = v67;
      v32 = -v30;
    }
    else
    {
      v66 = v68;
      if (v68 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v65, (const llvm::APInt *)&v67);
      else
        v65 = v67;
      v32 = v25;
    }
    sub_22E463264((llvm::APInt *)&v65, v32);
    if (v68 >= 0x41 && v67)
      MEMORY[0x2348A0E84](v67, 0x1000C8000313F17);
    v67 = v65;
    v30 = v66;
    v68 = v66;
LABEL_58:
    if (v24 < v30)
    {
      llvm::APInt::trunc((llvm::APInt *)&v67);
      if (v68 >= 0x41 && v67)
        MEMORY[0x2348A0E84](v67, 0x1000C8000313F17);
      v67 = v65;
      v68 = v66;
    }
    if (v29 == v24)
    {
      v33 = (llvm::Type **)llvm::ConstantInt::get();
      sub_22E50B354((unsigned int *)v19, v33, v26);
      goto LABEL_65;
    }
    v36 = sub_22E50B608(v19, v26);
    if (!v37 || (v38 = v36, v39 = sub_22E50B608(v19, v26 + 1), !v40))
    {
      LOBYTE(v34) = 0;
LABEL_91:
      v35 = 0;
      goto LABEL_100;
    }
    v41 = v39;
    v66 = v24;
    if (v24 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v65);
    else
      v65 = 0;
    if (*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v19 + 200)))
    {
      v42 = v28 - v29;
      v43 = v24 - v25;
    }
    else
    {
      v43 = v25 + v29;
      v42 = v25;
    }
    sub_22E4EEDA4((llvm::APInt *)&v65, v42, v43);
    if (v68 > 0x40)
      llvm::APInt::andAssignSlowCase((llvm::APInt *)&v67, (const llvm::APInt *)&v65);
    else
      v67 &= v65;
    if (v38 != v41 && (llvm::Constant::isNullValue(*(llvm::Constant **)(*(_QWORD *)(v19 + 8) + 8 * v38)) & 1) == 0)
    {
      v44 = *(_QWORD *)(v19 + 8);
      v45 = *(_QWORD *)(v44 + 8 * v38);
      v46 = *(unsigned __int8 *)(v45 + 16);
      if ((v46 - 11) > 1)
      {
        if (v46 != 16)
        {
          v34 = 0;
          goto LABEL_87;
        }
        v48 = (const llvm::APInt *)(v45 + 24);
        v49 = v66;
        v60 = v66;
        if (v66 >= 0x41)
        {
          v50 = &v59;
          llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const llvm::APInt *)&v65);
          v49 = v60;
          if (v60 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v59);
            v49 = v60;
            v52 = v59;
            v62 = v60;
            v61 = v59;
            v60 = 0;
            if (v62 > 0x40)
            {
              llvm::APInt::andAssignSlowCase((llvm::APInt *)&v61, v48);
              v49 = v62;
              v53 = v61;
              goto LABEL_114;
            }
LABEL_113:
            v53 = *(_QWORD *)v48 & v52;
            v61 = v53;
LABEL_114:
            v64 = v49;
            v63 = v53;
            v62 = 0;
            if (v68 > 0x40)
            {
              llvm::APInt::orAssignSlowCase((llvm::APInt *)&v67, (const llvm::APInt *)&v63);
              v49 = v64;
            }
            else
            {
              v67 |= v53;
            }
            if (v49 >= 0x41 && v63)
              MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
            if (v62 >= 0x41 && v61)
              MEMORY[0x2348A0E84](v61, 0x1000C8000313F17);
            if (v60 >= 0x41 && v59)
              MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
            *(_QWORD *)(v44 + 8 * v38) = llvm::ConstantInt::get();
            goto LABEL_86;
          }
        }
        else
        {
          v50 = &v65;
        }
        if (v49)
          v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
        else
          v51 = 0;
        v52 = v51 & ~*v50;
        v59 = v52;
        v60 = 0;
        goto LABEL_113;
      }
    }
    v47 = (llvm::Type **)llvm::ConstantInt::get();
    sub_22E50B354((unsigned int *)v19, v47, v26);
LABEL_86:
    v34 = 1;
LABEL_87:
    if (v66 >= 0x41 && v65)
      MEMORY[0x2348A0E84](v65, 0x1000C8000313F17);
    if (!v34)
      goto LABEL_91;
LABEL_65:
    if (v56 == (_DWORD)v29)
    {
      LOBYTE(v34) = 0;
      v35 = 1;
    }
    else
    {
      if (!*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)v19 + 200)))
      {
        if (v56 > 0x40)
        {
          llvm::APInt::lshrSlowCase((llvm::APInt *)&v55);
        }
        else if (v56 == (_DWORD)v29)
        {
          v55 = 0;
        }
        else
        {
          v55 >>= v29;
        }
      }
      llvm::APInt::trunc((llvm::APInt *)&v55);
      if (v56 >= 0x41 && v55)
        MEMORY[0x2348A0E84](v55, 0x1000C8000313F17);
      v35 = 0;
      LODWORD(v25) = 0;
      v55 = v65;
      v56 = v66;
      LOBYTE(v34) = 1;
    }
LABEL_100:
    if (v68 >= 0x41 && v67)
      MEMORY[0x2348A0E84](v67, 0x1000C8000313F17);
    ++v26;
  }
  while ((v34 & 1) != 0);
  if (v56 >= 0x41 && v55)
    MEMORY[0x2348A0E84](v55, 0x1000C8000313F17);
  if (v58 >= 0x41 && v57)
    MEMORY[0x2348A0E84](v57, 0x1000C8000313F17);
  return v35;
}

uint64_t sub_22E50B354(unsigned int *a1, llvm::Type **a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  llvm::DataLayout *DataLayout;
  unint64_t ABITypeAlignment;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 69) <= a3)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 200));
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, *a2);
    v15 = *((_QWORD *)a1 + 69);
    v16 = (ABITypeAlignment + v15 - 1) / ABITypeAlignment * ABITypeAlignment;
    if (v16 <= a3 && (a3 + ABITypeAlignment - 1) / ABITypeAlignment * ABITypeAlignment == a3)
    {
      if (v16 < a3)
      {
        if (a3 - v15 >= 2)
          llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)a1 + 80), (llvm::Type *)(a3 - v15));
        v17 = llvm::UndefValue::get();
        v18 = a1[4];
        if (v18 >= a1[5])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = a1[4];
        }
        *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v18) = v17;
        ++a1[4];
        v19 = *((_QWORD *)a1 + 69);
        v20 = a1[72];
        if (v20 >= a1[73])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = a1[72];
        }
        *(_QWORD *)(*((_QWORD *)a1 + 35) + 8 * v20) = v19;
        ++a1[72];
      }
    }
    else
    {
      *((_BYTE *)a1 + 560) = 0;
    }
    v21 = a1[4];
    if (v21 >= a1[5])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = a1[4];
    }
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v21) = a2;
    ++a1[4];
    v22 = a1[72];
    if (v22 >= a1[73])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = a1[72];
    }
    *(_QWORD *)(*((_QWORD *)a1 + 35) + 8 * v22) = a3;
    ++a1[72];
    *((_QWORD *)a1 + 69) = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), *a2) + a3;
  }
  else
  {
    v6 = sub_22E50B608((uint64_t)a1, a3);
    if (!v7)
      return 0;
    v8 = v6;
    v9 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), *a2) + a3;
    v10 = sub_22E50B608((uint64_t)a1, v9);
    if (!v11)
      return 0;
    v23 = v10;
    v27 = (uint64_t)a2;
    v25 = *((_QWORD *)a1 + 1);
    v24 = a1 + 2;
    sub_22F263188(v24, (uint64_t *)(v25 + 8 * v8), (uint64_t *)(v25 + 8 * v10), &v27, &v28);
    v27 = a3;
    sub_22F263188(v24 + 68, (uint64_t *)(*((_QWORD *)v24 + 34) + 8 * v8), (uint64_t *)(*((_QWORD *)v24 + 34) + 8 * v23), &v27, &v28);
    v26 = *((_QWORD *)v24 + 68);
    if (v26 <= v9)
      v26 = v9;
    *((_QWORD *)v24 + 68) = v26;
    *((_BYTE *)v24 + 552) = 0;
  }
  return 1;
}

unint64_t sub_22E50B608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *i;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::Type ***v15;
  llvm::Type **v16;
  char *v17;
  int v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Type **v24;
  _BYTE *v25;
  int64_t v26;
  unint64_t v27;
  llvm::Type *TypeAtIndex;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t StructLayout;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  llvm::Type *ElementType;
  unsigned int NumElements;
  uint64_t v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64x2_t v87;
  int32x2_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  char *v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int8x16_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  char *v117;
  char *v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  char *v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64x2_t v140;
  int32x2_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64x2_t v146;
  int32x2_t v147;
  uint64_t v148;
  uint64_t v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  size_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64x2_t v157;
  int32x2_t v158;
  uint64_t v159;
  uint64_t v160;
  size_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64x2_t v164;
  int32x2_t v165;
  uint64_t v167;
  unsigned int *v168;
  unsigned int *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t __src;
  uint64_t v175;
  uint64_t v176;

  v2 = a1;
  v176 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 552) <= a2)
  {
    v13 = *(unsigned int *)(a1 + 288);
LABEL_228:
    v3 = v13 >> 8;
  }
  else
  {
    v3 = *(unsigned int *)(a1 + 288);
    if ((_DWORD)v3)
    {
      i = (unsigned int *)(a1 + 280);
      v168 = (unsigned int *)(a1 + 8);
      v169 = (unsigned int *)(a1 + 280);
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v6 = *(char **)i;
            v7 = *(char **)i;
            do
            {
              v8 = (unint64_t)v3 >> 1;
              v9 = (uint64_t *)&v7[8 * ((unint64_t)v3 >> 1)];
              v11 = *v9;
              v10 = (char *)(v9 + 1);
              v3 += ~((unint64_t)v3 >> 1);
              if (v11 > a2)
                v3 = v8;
              else
                v7 = v10;
            }
            while (v3);
            v3 = v7 - v6;
            if (v7 == v6)
            {
LABEL_230:
              LOBYTE(v13) = 0;
              return v13 | (unint64_t)(v3 << 8);
            }
            v12 = v3 >> 3;
            v13 = (v3 >> 3) - 1;
            if (*(_QWORD *)&v6[8 * v13] == a2)
              goto LABEL_228;
            if (*(_QWORD *)&v6[8 * v13]
               + sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)v2 + 200), **(llvm::Type ***)(*(_QWORD *)(v2 + 8) + 8 * v13)) <= a2)
            {
              v3 = v12 >> 8;
              LOBYTE(v13) = v12;
              return v13 | (unint64_t)(v3 << 8);
            }
            *(_BYTE *)(v2 + 560) = 0;
            v14 = *(_QWORD *)(v2 + 8);
            v15 = (llvm::Type ***)(v14 + 8 * v13);
            v16 = *v15;
            v17 = *(char **)(v2 + 280);
            v18 = *((unsigned __int8 *)*v15 + 16);
            v170 = *(_QWORD *)&v17[8 * v13];
            if (!*v15 || (v18 - 11) < 0xFDu)
              break;
            v19 = *((_DWORD *)v16 + 5);
            v171 = v12;
            v20 = (_BYTE *)(v14 + 8 * v12);
            v21 = v19 & 0x7FFFFFF;
            if ((v19 & 0x7FFFFFF) == 0)
            {
LABEL_19:
              v25 = (_BYTE *)(v14 + 8 * *(unsigned int *)(v2 + 16));
              v26 = v25 - v20;
              if (v25 != v20)
              {
                memmove(v15, v20, v25 - v20);
                v14 = *(_QWORD *)v168;
              }
              v27 = ((unint64_t)v15 + v26 - v14) >> 3;
LABEL_22:
              *(_DWORD *)(v2 + 16) = v27;
              goto LABEL_23;
            }
            v22 = 0;
            v23 = 0;
            v24 = *v15;
            while (v22 != 8)
            {
              v15[v23] = (llvm::Type **)v24[-4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)];
              v22 += 8;
              v24 += 4;
              if (v21 == ++v23)
              {
                v14 = *(_QWORD *)v168;
                v15 = (llvm::Type ***)((char *)v15 + v22);
                goto LABEL_19;
              }
            }
            v77 = *(_QWORD *)(v2 + 8);
            v27 = *(unsigned int *)(v2 + 16);
            v78 = *(unsigned int *)(v2 + 20);
            v79 = v27 + v21 - v23;
            if ((_BYTE *)(v77 + 8 * v27) == v20)
            {
              if (v79 > v78)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v77 = *(_QWORD *)(v2 + 8);
                v27 = *(unsigned int *)(v2 + 16);
              }
              if (v21 != v23)
              {
                v104 = 0;
                do
                {
                  *(_QWORD *)(v77 + 8 * v27 + 8 * v104) = *(&v16[4 * (v23 + v104)]
                                                          - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
                  ++v104;
                }
                while (v23 - v21 + v104);
              }
              LODWORD(v27) = v27 + v21 - v23;
              goto LABEL_22;
            }
            if (v79 <= v78)
            {
              v80 = *(_QWORD *)(v2 + 8);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v80 = *(_QWORD *)(v2 + 8);
              v27 = *(unsigned int *)(v2 + 16);
            }
            v105 = (uint64_t)&v20[-v77] >> 3;
            v106 = (_BYTE *)(v80 + 8 * v105);
            v107 = (char *)(v80 + 8 * v27);
            v108 = (v107 - v106) >> 3;
            if (v108 >= v21 - v23)
            {
              v150 = 8 * v27 - 8 * v105 - 8 * v21 + 8;
              sub_22F246808((uint64_t)v168, &v107[-8 * v21 + 8], v107);
              if (v150)
                memmove(&v107[-v150], v106, v150);
              if (v21 != v23)
              {
                v151 = 0;
                do
                {
                  *(_QWORD *)&v106[8 * v151] = *(&v16[4 * (v23 + v151)]
                                               - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
                  ++v151;
                }
                while (v23 - v21 + v151);
              }
            }
            else
            {
              v109 = v27 + v21 - v23;
              *(_DWORD *)(a1 + 16) = v109;
              if (v105 != v27)
              {
                memcpy((void *)(v80 + 8 * v109 - 8 * v108), (const void *)(v80 + 8 * v105), v107 - v106);
                v110 = 0;
                do
                {
                  *(_QWORD *)&v106[8 * v110] = *(&v16[4 * (v23 + v110)]
                                               - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
                  ++v110;
                }
                while (v108 != v110);
                v23 += v110;
              }
              for (; v21 != v23; ++v23)
              {
                *(_QWORD *)v107 = *(&v16[4 * v23] - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
                v107 += 8;
              }
            }
LABEL_23:
            if (*((_DWORD *)*v16 + 2) == 17 || (*((_DWORD *)*v16 + 2) & 0xFE) == 18)
            {
              TypeAtIndex = (llvm::Type *)llvm::GetElementPtrInst::getTypeAtIndex();
              v2 = a1;
              v30 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), TypeAtIndex);
              v31 = *((_DWORD *)v16 + 5);
              v32 = *(char **)(a1 + 280);
              v33 = &v32[8 * v13];
              v34 = v31 & 0x7FFFFFF;
              if ((v31 & 0x7FFFFFF) != 0)
              {
                v35 = v30;
                v36 = 0;
                v37 = 0;
                v38 = v170;
                v39 = v170;
                while (v36 != 8)
                {
                  *(_QWORD *)&v33[8 * v37] = v39;
                  v36 += 8;
                  v39 += v30;
                  if (v34 == ++v37)
                  {
LABEL_48:
                    v33 += v36;
                    v2 = a1;
                    goto LABEL_49;
                  }
                }
                v81 = *(unsigned int *)(a1 + 288);
                v82 = v81 + v34 - v37;
                v83 = *(unsigned int *)(a1 + 292);
                if (v171 != v81)
                {
                  if (v82 > v83)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v32 = *(char **)(a1 + 280);
                    v81 = *(unsigned int *)(a1 + 288);
                  }
                  v111 = (int8x16_t)xmmword_22F4555C0;
                  v112 = &v32[8 * v171];
                  v113 = &v32[8 * v81];
                  v114 = (v113 - v112) >> 3;
                  if (v114 >= v34 - v37)
                  {
                    v154 = 8 - (8 * v171 + 8 * v34) + 8 * v81;
                    sub_22F246808((uint64_t)v169, &v113[-8 * v34 + 8], v113);
                    if (v154)
                      memmove(&v113[-v154], v112, v154);
                    if (v34 != v37)
                    {
                      v155 = 0;
                      v156 = v34 - ((_DWORD)v34 != 1);
                      v157 = (uint64x2_t)vdupq_n_s64(v156 - 1);
                      do
                      {
                        v158 = vmovn_s64((int64x2_t)vcgeq_u64(v157, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v155), (int8x16_t)xmmword_22F4555C0)));
                        if ((v158.i8[0] & 1) != 0)
                          *(_QWORD *)&v112[8 * v155] = v170 + (v37 + v155) * v35;
                        if ((v158.i8[4] & 1) != 0)
                          *(_QWORD *)&v112[8 * v155 + 8] = v170 + (v37 + v155 + 1) * v35;
                        v155 += 2;
                      }
                      while (((v156 + 1) & 0xFFFFFFFFFFFFFFFELL) != v155);
                    }
                  }
                  else
                  {
                    v115 = v81 + v34 - v37;
                    *(_DWORD *)(a1 + 288) = v115;
                    if (v171 == v81)
                    {
                      v116 = v170;
                    }
                    else
                    {
                      memcpy(&v32[8 * v115 + -8 * v114], v112, v113 - v112);
                      v137 = 0;
                      v116 = v170;
                      do
                      {
                        *(_QWORD *)&v112[8 * v137] = v170 + (v37 + v137) * v35;
                        ++v137;
                      }
                      while (v114 != v137);
                      v37 += v137;
                      v111 = (int8x16_t)xmmword_22F4555C0;
                    }
                    v138 = v34 - v37;
                    if (v34 != v37)
                    {
                      v139 = 0;
                      v140 = (uint64x2_t)vdupq_n_s64(v138 - 1);
                      do
                      {
                        v141 = vmovn_s64((int64x2_t)vcgeq_u64(v140, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v139), v111)));
                        if ((v141.i8[0] & 1) != 0)
                          *(_QWORD *)&v113[8 * v139] = v116 + (v37 + v139) * v35;
                        if ((v141.i8[4] & 1) != 0)
                          *(_QWORD *)&v113[8 * v139 + 8] = v116 + (v37 + v139 + 1) * v35;
                        v139 += 2;
                      }
                      while (((v138 + 1) & 0xFFFFFFFFFFFFFFFELL) != v139);
                    }
                  }
                  goto LABEL_186;
                }
                if (v82 > v83)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v38 = v170;
                  v32 = *(char **)(a1 + 280);
                  LODWORD(v81) = *(_DWORD *)(a1 + 288);
                  v171 = v81;
                }
                if (v34 != v37)
                {
                  v84 = 0;
                  v85 = &v32[8 * v171];
                  v86 = v34 - ((_DWORD)v34 != 1);
                  v87 = (uint64x2_t)vdupq_n_s64(v86 - 1);
                  do
                  {
                    v88 = vmovn_s64((int64x2_t)vcgeq_u64(v87, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v84), (int8x16_t)xmmword_22F4555C0)));
                    if ((v88.i8[0] & 1) != 0)
                      *(_QWORD *)&v85[8 * v84] = v38 + (v37 + v84) * v35;
                    if ((v88.i8[4] & 1) != 0)
                      *(_QWORD *)&v85[8 * v84 + 8] = v38 + (v37 + v84 + 1) * v35;
                    v84 += 2;
                  }
                  while (((v86 + 1) & 0xFFFFFFFFFFFFFFFELL) != v84);
                  LODWORD(v81) = *(_DWORD *)(a1 + 288);
                }
                LODWORD(v3) = v81 + v34 - v37;
                v2 = a1;
                goto LABEL_156;
              }
LABEL_49:
              v53 = &v32[8 * v171];
              v54 = *(unsigned int *)(v2 + 288);
              v55 = 8 * v54 - 8 * v171;
              i = v169;
              if (v171 != v54)
              {
LABEL_50:
                memmove(v33, v53, v55);
                v32 = *(char **)i;
              }
LABEL_51:
              v46 = &v33[v55] - v32;
              goto LABEL_52;
            }
            v2 = a1;
            llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a1 + 200));
            StructLayout = llvm::DataLayout::getStructLayout();
            v48 = *((_DWORD *)v16 + 5);
            v32 = *(char **)(a1 + 280);
            v33 = &v32[8 * v13];
            v49 = v48 & 0x7FFFFFF;
            if ((v48 & 0x7FFFFFF) == 0)
              goto LABEL_49;
            v36 = 0;
            v50 = 0;
            v51 = StructLayout + 16;
            v52 = v170;
            while (v36 != 8)
            {
              *(_QWORD *)&v33[8 * v50] = *(_QWORD *)(v51 + 8 * v50) + v170;
              v36 += 8;
              if (v49 == ++v50)
                goto LABEL_48;
            }
            v89 = *(unsigned int *)(a1 + 288);
            v90 = v89 + v49 - v50;
            v91 = *(unsigned int *)(a1 + 292);
            if (v171 != v89)
            {
              if (v90 > v91)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v32 = *(char **)(a1 + 280);
                v89 = *(unsigned int *)(a1 + 288);
              }
              v117 = &v32[8 * v171];
              v118 = &v32[8 * v89];
              v119 = (v118 - v117) >> 3;
              if (v119 >= v49 - v50)
              {
                v159 = 8 * v171 + 8 * v49;
                sub_22F246808((uint64_t)v169, &v118[-8 * v49 + 8], v118);
                if (8 * v89 - v159 != -8)
                  memmove(&v118[-(8 - v159) + -8 * v89], v117, 8 - v159 + 8 * v89);
                if (v49 != v50)
                {
                  v160 = 0;
                  do
                  {
                    *(_QWORD *)&v117[8 * v160] = *(_QWORD *)(v51 + 8 * (v50 + v160)) + v170;
                    ++v160;
                  }
                  while (v50 - v49 + v160);
                }
              }
              else
              {
                v120 = v89 + v49 - v50;
                *(_DWORD *)(a1 + 288) = v120;
                if (v171 == v89)
                {
                  v121 = v170;
                }
                else
                {
                  memcpy(&v32[8 * v120 + -8 * v119], v117, v118 - v117);
                  v142 = 0;
                  v121 = v170;
                  do
                  {
                    *(_QWORD *)&v117[8 * v142] = *(_QWORD *)(v51 + 8 * (v50 + v142)) + v170;
                    ++v142;
                  }
                  while (v119 != v142);
                  v50 += v142;
                }
                for (; v49 != v50; ++v50)
                {
                  *(_QWORD *)v118 = *(_QWORD *)(v51 + 8 * v50) + v121;
                  v118 += 8;
                }
              }
              goto LABEL_186;
            }
            if (v90 > v91)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v52 = v170;
              v89 = *(unsigned int *)(a1 + 288);
            }
            if (v49 == v50)
            {
              v2 = a1;
            }
            else
            {
              v135 = 0;
              v136 = *(_QWORD *)v169 + 8 * v89;
              do
              {
                *(_QWORD *)(v136 + 8 * v135) = *(_QWORD *)(v51 + 8 * (v50 + v135)) + v52;
                ++v135;
              }
              while (v50 - v49 + v135);
              v2 = a1;
              LODWORD(v89) = *(_DWORD *)(a1 + 288);
            }
            LODWORD(v3) = v89 + v49 - v50;
LABEL_156:
            *(_DWORD *)(v2 + 288) = v3;
            v3 = v3;
LABEL_187:
            i = v169;
            if (!v3)
              goto LABEL_230;
          }
          if (v16 && (v18 & 0xFE) == 14)
            break;
          if (v18 == 13)
          {
            v148 = *(_QWORD *)&v17[8 * v13];
            v149 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)v2 + 200), *v16);
            llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)v2 + 80), (llvm::Type *)(a2 - v148));
            __src = llvm::ConstantAggregateZero::get();
            llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)v2 + 80), (llvm::Type *)(v148 - a2 + v149));
            v175 = llvm::ConstantAggregateZero::get();
            sub_22F263188(v168, (uint64_t *)(*(_QWORD *)(v2 + 8) + 8 * v13), (uint64_t *)(*(_QWORD *)(v2 + 8) + 8 * v12), &__src, &v176);
            __src = v148;
            v175 = a2;
            sub_22F263188(i, (uint64_t *)(*(_QWORD *)(v2 + 280) + 8 * v13), (uint64_t *)(*(_QWORD *)(v2 + 280) + 8 * v12), &__src, &v176);
LABEL_186:
            v2 = a1;
            v3 = *(unsigned int *)(a1 + 288);
            goto LABEL_187;
          }
          if ((v18 - 11) > 1u)
          {
            LOBYTE(v13) = 0;
            v3 = 0;
            return v13 | (unint64_t)(v3 << 8);
          }
          v41 = *(unsigned int *)(v2 + 16);
          v42 = 8 * v41 - 8 * v12;
          if (v12 != v41)
          {
            memmove((void *)(v14 + 8 * v13), (const void *)(v14 + 8 * v12), 8 * v41 - 8 * v12);
            v14 = *(_QWORD *)v168;
            v17 = *(char **)i;
          }
          *(_DWORD *)(v2 + 16) = ((unint64_t)v15 + v42 - v14) >> 3;
          v43 = &v17[8 * v13];
          v44 = *(unsigned int *)(v2 + 288);
          v45 = 8 * v44 - 8 * v12;
          if (v12 != v44)
          {
            memmove(&v17[8 * v13], &v17[8 * v12], 8 * v44 - 8 * v12);
            v17 = *(char **)i;
          }
          v46 = &v43[v45] - v17;
LABEL_52:
          v56 = v46 >> 3;
          v3 = (v46 >> 3);
          *(_DWORD *)(v2 + 288) = v56;
          if (!v3)
            goto LABEL_230;
        }
        ElementType = (llvm::Type *)llvm::ConstantDataSequential::getElementType((llvm::ConstantDataSequential *)v16);
        v167 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)v2 + 200), ElementType);
        NumElements = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)v16);
        v59 = *(_QWORD *)(v2 + 8);
        v60 = (char *)(v59 + 8 * v13);
        v61 = (_BYTE *)(v59 + 8 * v12);
        v172 = v12;
        if (!NumElements)
          break;
        v62 = 0;
        v63 = 0;
        v64 = NumElements;
        while (v62 != -8)
        {
          *(_QWORD *)&v60[8 * v63] = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v16);
          v62 -= 8;
          if (v64 == ++v63)
          {
            v59 = *(_QWORD *)v168;
            v60 -= v62;
            i = v169;
            goto LABEL_59;
          }
        }
        v92 = *(_QWORD *)(a1 + 8);
        v67 = *(unsigned int *)(a1 + 16);
        v93 = *(unsigned int *)(a1 + 20);
        v94 = v64 + v67 - v63;
        if ((_BYTE *)(v92 + 8 * v67) == v61)
        {
          v68 = a1;
          if (v94 > v93)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v92 = *(_QWORD *)(a1 + 8);
            v67 = *(unsigned int *)(a1 + 16);
          }
          i = v169;
          if (v64 != v63)
          {
            v127 = 0;
            v128 = v92 + 8 * v67;
            do
              *(_QWORD *)(v128 + 8 * v127++) = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v16);
            while (v63 - v64 + v127);
            v68 = a1;
            LODWORD(v67) = *(_DWORD *)(a1 + 16);
          }
          LODWORD(v67) = v64 + v67 - v63;
          goto LABEL_62;
        }
        if (v94 <= v93)
        {
          v95 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v95 = *(_QWORD *)(a1 + 8);
          v67 = *(unsigned int *)(a1 + 16);
        }
        v129 = (uint64_t)&v61[-v92] >> 3;
        v130 = (_BYTE *)(v95 + 8 * v129);
        v131 = (char *)(v95 + 8 * v67);
        v132 = (v131 - v130) >> 3;
        if (v132 >= v64 - v63)
        {
          v152 = 8 * v67 - 8 * v129 - 8 * v64;
          sub_22F246808((uint64_t)v168, &v131[-8 * v64 + 8], v131);
          if (v152 != -8)
            memmove(&v131[-v152 - 8], v130, v152 + 8);
          i = v169;
          if (v64 != v63)
          {
            v153 = 0;
            do
              *(_QWORD *)&v130[8 * v153++] = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v16);
            while (v63 - v64 + v153);
          }
        }
        else
        {
          v133 = v64 + v67 - v63;
          *(_DWORD *)(a1 + 16) = v133;
          if (v129 != v67)
          {
            memcpy((void *)(v95 + 8 * v133 - 8 * v132), (const void *)(v95 + 8 * v129), v131 - v130);
            v134 = 0;
            do
              *(_QWORD *)&v130[8 * v134++] = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v16);
            while (v132 != v134);
            v63 += v134;
          }
          for (i = v169; v64 != v63; ++v63)
          {
            *(_QWORD *)v131 = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v16);
            v131 += 8;
          }
        }
LABEL_63:
        v69 = llvm::ConstantDataSequential::getNumElements((llvm::ConstantDataSequential *)v16);
        v32 = *(char **)i;
        v33 = (char *)(*(_QWORD *)i + 8 * v13);
        if (!v69)
        {
LABEL_68:
          v2 = a1;
          v53 = &v32[8 * v172];
          v76 = *(unsigned int *)(a1 + 288);
          v55 = 8 * v76 - 8 * v172;
          if (v172 != v76)
            goto LABEL_50;
          goto LABEL_51;
        }
        v70 = 0;
        v71 = 0;
        v72 = v170;
        v73 = v170;
        v74 = v69;
        v75 = (int8x16_t)xmmword_22F4555C0;
        while (v70 != 8)
        {
          *(_QWORD *)&v33[8 * v71] = v73;
          v70 += 8;
          v73 += v167;
          if (v69 == ++v71)
          {
            v33 += v70;
            goto LABEL_68;
          }
        }
        v96 = *(unsigned int *)(a1 + 288);
        v97 = v69 + v96 - v71;
        v98 = *(unsigned int *)(a1 + 292);
        if (v172 != v96)
        {
          if (v97 > v98)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v75 = (int8x16_t)xmmword_22F4555C0;
            v32 = *(char **)(a1 + 280);
            v96 = *(unsigned int *)(a1 + 288);
          }
          v122 = &v32[8 * v172];
          v123 = &v32[8 * v96];
          v124 = (v123 - v122) >> 3;
          if (v124 >= v74 - v71)
          {
            v161 = 8 - (8 * v172 + 8 * v74) + 8 * v96;
            sub_22F246808((uint64_t)i, &v123[-8 * v74 + 8], v123);
            if (v161)
              memmove(&v123[-v161], v122, v161);
            if (v74 != v71)
            {
              v162 = 0;
              v163 = v74 - ((_DWORD)v74 != 1);
              v164 = (uint64x2_t)vdupq_n_s64(v163 - 1);
              do
              {
                v165 = vmovn_s64((int64x2_t)vcgeq_u64(v164, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v162), (int8x16_t)xmmword_22F4555C0)));
                if ((v165.i8[0] & 1) != 0)
                  *(_QWORD *)&v122[8 * v162] = v170 + (v71 + v162) * v167;
                if ((v165.i8[4] & 1) != 0)
                  *(_QWORD *)&v122[8 * v162 + 8] = v170 + (v71 + v162 + 1) * v167;
                v162 += 2;
              }
              while (((v163 + 1) & 0xFFFFFFFFFFFFFFFELL) != v162);
            }
          }
          else
          {
            v125 = v74 + v96 - v71;
            *(_DWORD *)(a1 + 288) = v125;
            if (v172 == v96)
            {
              v126 = v170;
            }
            else
            {
              memcpy(&v32[8 * v125 + -8 * v124], v122, v123 - v122);
              v143 = 0;
              v126 = v170;
              do
              {
                *(_QWORD *)&v122[8 * v143] = v170 + (v71 + v143) * v167;
                ++v143;
              }
              while (v124 != v143);
              v71 += v143;
              v75 = (int8x16_t)xmmword_22F4555C0;
            }
            v144 = v74 - v71;
            if (v74 != v71)
            {
              v145 = 0;
              v146 = (uint64x2_t)vdupq_n_s64(v144 - 1);
              do
              {
                v147 = vmovn_s64((int64x2_t)vcgeq_u64(v146, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v145), v75)));
                if ((v147.i8[0] & 1) != 0)
                  *(_QWORD *)&v123[8 * v145] = v126 + (v71 + v145) * v167;
                if ((v147.i8[4] & 1) != 0)
                  *(_QWORD *)&v123[8 * v145 + 8] = v126 + (v71 + v145 + 1) * v167;
                v145 += 2;
              }
              while (((v144 + 1) & 0xFFFFFFFFFFFFFFFELL) != v145);
            }
          }
          goto LABEL_186;
        }
        if (v97 > v98)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v72 = v170;
          v75 = (int8x16_t)xmmword_22F4555C0;
          v32 = *(char **)(a1 + 280);
          LODWORD(v96) = *(_DWORD *)(a1 + 288);
          v172 = v96;
        }
        if (v74 != v71)
        {
          v99 = 0;
          v100 = &v32[8 * v172];
          v101 = v74 - ((_DWORD)v74 != 1);
          v102 = (uint64x2_t)vdupq_n_s64(v101 - 1);
          do
          {
            v103 = vmovn_s64((int64x2_t)vcgeq_u64(v102, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v99), v75)));
            if ((v103.i8[0] & 1) != 0)
              *(_QWORD *)&v100[8 * v99] = v72 + (v71 + v99) * v167;
            if ((v103.i8[4] & 1) != 0)
              *(_QWORD *)&v100[8 * v99 + 8] = v72 + (v71 + v99 + 1) * v167;
            v99 += 2;
          }
          while (((v101 + 1) & 0xFFFFFFFFFFFFFFFELL) != v99);
          LODWORD(v96) = *(_DWORD *)(a1 + 288);
        }
        LODWORD(v3) = v74 + v96 - v71;
        v2 = a1;
        *(_DWORD *)(a1 + 288) = v3;
        v3 = v3;
        if (!(_DWORD)v3)
          goto LABEL_230;
      }
LABEL_59:
      v65 = (_BYTE *)(v59 + 8 * *(unsigned int *)(a1 + 16));
      v66 = v65 - v61;
      if (v65 != v61)
      {
        memmove(v60, v61, v65 - v61);
        v59 = *(_QWORD *)v168;
      }
      v67 = (unint64_t)&v60[v66 - v59] >> 3;
      v68 = a1;
LABEL_62:
      *(_DWORD *)(v68 + 16) = v67;
      goto LABEL_63;
    }
    LOBYTE(v13) = 0;
    v3 = 0;
  }
  return v13 | (unint64_t)(v3 << 8);
}

uint64_t sub_22E50C6E0(llvm::Module *a1, llvm::Type *a2)
{
  llvm::DataLayout *DataLayout;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(a1);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)a2);
  llvm::DataLayout::getABITypeAlignment(DataLayout, a2);
  return llvm::TypeSize::operator unsigned long long();
}

__n128 sub_22E50C758(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  unint64_t v8;
  unsigned __int32 v9;
  unint64_t *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  int64_t v15;
  unint64_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 *v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  uint64_t v32;
  __n128 *v33;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if ((int64_t)a2[-1].n128_u64[0] < (int64_t)a1->n128_u64[1])
      {
        result = *a1;
        v8 = a1[1].n128_u64[0];
        v9 = a2[-1].n128_u32[2];
        *a1 = *(__n128 *)((char *)a2 - 24);
        a1[1].n128_u32[0] = v9;
        a2[-1].n128_u32[2] = v8;
        *(__n128 *)((char *)a2 - 24) = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = a4;
      v23 = a3 >> 1;
      v24 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v26 = sub_22E50C9EC((uint64_t)a1, v24, v25, a4, result);
        v27 = v22 + 24 * v23;
        result.n128_u64[0] = sub_22E50C9EC((uint64_t)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v27, v26).n128_u64[0];
        v28 = (__n128 *)(v22 + 24 * a3);
        v29 = (__n128 *)v27;
        while (v29 != v28)
        {
          if ((int64_t)v29->n128_u64[1] >= *(_QWORD *)(v22 + 8))
          {
            result = *(__n128 *)v22;
            v7[1].n128_u32[0] = *(_DWORD *)(v22 + 16);
            *v7 = result;
            v22 += 24;
          }
          else
          {
            result = *v29;
            v7[1].n128_u32[0] = v29[1].n128_u32[0];
            *v7 = result;
            v29 = (__n128 *)((char *)v29 + 24);
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v22 == v27)
          {
            if (v29 != v28)
            {
              v30 = 0;
              do
              {
                v31 = (__n128 *)((char *)v7 + v30);
                result = *(__n128 *)((char *)v29 + v30);
                v31[1].n128_u32[0] = v29[1].n128_u32[v30 / 4];
                *v31 = result;
                v30 += 24;
              }
              while ((__n128 *)((char *)v29 + v30) != v28);
            }
            return result;
          }
        }
        if (v22 != v27)
        {
          v32 = 0;
          do
          {
            v33 = (__n128 *)((char *)v7 + v32);
            result = *(__n128 *)(v22 + v32);
            v33[1].n128_u32[0] = *(_DWORD *)(v22 + v32 + 16);
            *v33 = result;
            v32 += 24;
          }
          while (v22 + v32 != v27);
        }
      }
      else
      {
        sub_22E50C758(a1, v24, v25, a4, a5);
        sub_22E50C758((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v22, a5);
        sub_22E50CC7C((char *)v7, (char *)v7 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v22, a5);
      }
    }
    else if (a1 != a2)
    {
      v11 = &a1[1].n128_u64[1];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v14 = (__n128 *)v11;
          v15 = v13[2].n128_i64[0];
          if (v15 < (int64_t)v13->n128_u64[1])
          {
            v16 = v14->n128_u64[0];
            v17 = v13[2].n128_u32[2];
            v18 = v12;
            while (1)
            {
              v19 = (char *)a1 + v18;
              result = *(__n128 *)((char *)a1 + v18);
              *(__n128 *)(v19 + 24) = result;
              *((_DWORD *)v19 + 10) = *(unsigned __int32 *)((char *)a1[1].n128_u32 + v18);
              if (!v18)
                break;
              v18 -= 24;
              if (v15 >= *((_QWORD *)v19 - 2))
              {
                v20 = (uint64_t)&a1[1].n128_i64[1] + v18;
                goto LABEL_15;
              }
            }
            v20 = (uint64_t)a1;
LABEL_15:
            *(_QWORD *)v20 = v16;
            *(_QWORD *)(v20 + 8) = v15;
            *(_DWORD *)(v20 + 16) = v17;
          }
          v11 = &v14[1].n128_u64[1];
          v12 += 24;
          v13 = v14;
        }
        while (&v14[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

__n128 sub_22E50C9EC(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = (__n128 *)a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if ((int64_t)a2[-1].n128_u64[0] >= *(_QWORD *)(a1 + 8))
      {
        v19 = *(__n128 *)a1;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *(__n128 *)a1;
        v11 = *(_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)(a1 + 24 * (a3 >> 1));
      sub_22E50C758(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_22E50C758((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if ((int64_t)v21->n128_u64[1] >= (int64_t)v8->n128_u64[1])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      result = *(__n128 *)a1;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
      *(__n128 *)a4 = result;
      v12 = (__n128 *)(a1 + 24);
      if ((__n128 *)(a1 + 24) != a2)
      {
        v13 = 0;
        v14 = (__n128 *)a4;
        do
        {
          v15 = v12;
          v16 = (__n128 *)((char *)v14 + 24);
          if ((int64_t)v8[2].n128_u64[0] >= (int64_t)v14->n128_u64[1])
          {
            result = *v12;
            v14[2].n128_u64[1] = v12[1].n128_u64[0];
            *v16 = result;
          }
          else
          {
            *v16 = *v14;
            v14[2].n128_u64[1] = v14[1].n128_u64[0];
            v17 = a4;
            if (v14 != (__n128 *)a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = a4 + v18;
                if ((int64_t)v8[2].n128_u64[0] >= *(_QWORD *)(a4 + v18 - 16))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)(v17 - 24);
                *(_DWORD *)(v17 + 16) = *(_DWORD *)(v17 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            result = *v15;
            *(_DWORD *)(v17 + 16) = v15[1].n128_u32[0];
            *(__n128 *)v17 = result;
          }
          v12 = (__n128 *)((char *)v15 + 24);
          v13 += 24;
          v14 = v16;
          v8 = v15;
        }
        while (&v15[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

char *sub_22E50CC7C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char *v71;
  __int128 v72;
  unint64_t v73;
  char *v74;
  __int128 v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = -a4;
      while (1)
      {
        v11 = &result[v9];
        if (*((_QWORD *)a2 + 1) < *(_QWORD *)&result[v9 + 8])
          break;
        v9 += 24;
        if (__CFADD__(v10++, 1))
          return result;
      }
      v13 = -v10;
      if (-v10 >= v7)
      {
        if (v10 == -1)
        {
          v79 = &result[v9];
          v100 = *((_QWORD *)v79 + 2);
          v95 = *(_OWORD *)v79;
          v80 = *(_OWORD *)a2;
          *((_DWORD *)v79 + 4) = *((_DWORD *)a2 + 4);
          *(_OWORD *)v79 = v80;
          *((_DWORD *)a2 + 4) = v100;
          *(_OWORD *)a2 = v95;
          return result;
        }
        if (v10 > 0)
          v13 = 1 - v10;
        v23 = v13 >> 1;
        v22 = a3;
        if (a3 != a2)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v22 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v22[24 * (v24 >> 1)];
            v27 = *((_QWORD *)v26 + 1);
            v28 = v26 + 24;
            v24 += ~(v24 >> 1);
            if (v27 < *(_QWORD *)&result[24 * v23 + 8 + v9])
              v22 = v28;
            else
              v24 = v25;
          }
          while (v24);
        }
        v16 = &result[24 * v23 + v9];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a2) >> 3);
      }
      else
      {
        if (v7 >= 0)
          v14 = v7;
        else
          v14 = v7 + 1;
        v15 = v14 >> 1;
        v16 = a2;
        if (v11 != a2)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v9) >> 3);
          v16 = &result[v9];
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[24 * (v17 >> 1)];
            v20 = *((_QWORD *)v19 + 1);
            v21 = v19 + 24;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)&a2[24 * v15 + 8] < v20)
              v17 = v18;
            else
              v16 = v21;
          }
          while (v17);
        }
        v22 = &a2[24 * v15];
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v16 - result - v9) >> 3);
      }
      v29 = v22;
      if (v16 != a2)
      {
        v29 = v16;
        if (a2 != v22)
        {
          if (v16 + 24 == a2)
          {
            v97 = *((_QWORD *)v16 + 2);
            v92 = *(_OWORD *)v16;
            v35 = (char *)(v22 - a2);
            v86 = v15;
            v88 = a3;
            v84 = a6;
            v36 = a7;
            v37 = v23;
            memmove(v16, a2, v22 - a2 - 4);
            v23 = v37;
            v15 = v86;
            a3 = v88;
            a7 = v36;
            a6 = v84;
            v29 = &v35[(_QWORD)v16];
            *(_OWORD *)v29 = v92;
            *((_DWORD *)v29 + 4) = v97;
          }
          else if (a2 + 24 == v22)
          {
            v29 = v16 + 24;
            v98 = *((_QWORD *)v22 - 1);
            v93 = *(_OWORD *)(v22 - 24);
            if (v22 - 24 != v16)
            {
              v87 = v15;
              v89 = a3;
              v85 = a6;
              v38 = a7;
              v39 = v23;
              memmove(v16 + 24, v16, v22 - 24 - v16 - 4);
              v23 = v39;
              v15 = v87;
              a3 = v89;
              a7 = v38;
              a6 = v85;
            }
            *((_DWORD *)v16 + 4) = v98;
            *(_OWORD *)v16 = v93;
          }
          else
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v16) >> 3);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * ((v22 - a2) >> 3))
            {
              v31 = 0;
              do
              {
                v32 = &a2[v31];
                v33 = &v16[v31];
                v96 = *(_QWORD *)&v16[v31 + 16];
                v91 = *(_OWORD *)&v16[v31];
                v34 = *(_OWORD *)&a2[v31];
                *((_DWORD *)v33 + 4) = *(_DWORD *)&a2[v31 + 16];
                *(_OWORD *)v33 = v34;
                *((_DWORD *)v32 + 4) = v96;
                *(_OWORD *)v32 = v91;
                if (&v16[v31 + 24] == a2)
                  break;
                v31 += 24;
              }
              while (v32 + 24 != v22);
              v29 = a2;
            }
            else
            {
              v40 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a2) >> 3);
              v41 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v16) >> 3);
              do
              {
                v42 = v41;
                v41 = v40;
                v40 = v42 % v40;
              }
              while (v40);
              if (v41)
              {
                v43 = &v16[24 * v41];
                do
                {
                  v44 = *(_OWORD *)(v43 - 24);
                  v45 = *((_QWORD *)v43 - 1);
                  v43 -= 24;
                  v99 = v45;
                  v94 = v44;
                  v46 = &v43[8 * ((a2 - v16) >> 3)];
                  v47 = v43;
                  do
                  {
                    v48 = v47;
                    v47 = v46;
                    v49 = *(_OWORD *)v46;
                    *((_DWORD *)v48 + 4) = *((_DWORD *)v46 + 4);
                    *(_OWORD *)v48 = v49;
                    v50 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v46) >> 3);
                    v51 = __OFSUB__(v30, v50);
                    v52 = v30 - v50;
                    v70 = (v52 < 0) ^ v51;
                    v46 = &v16[24 * v52];
                    if (v70)
                      v46 = &v47[8 * ((a2 - v16) >> 3)];
                  }
                  while (v46 != v43);
                  *((_DWORD *)v47 + 4) = v99;
                  *(_OWORD *)v47 = v94;
                }
                while (v43 != v16);
              }
              v29 = &v16[8 * ((v22 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v23 + v10);
      v53 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v10)
      {
        v90 = v23;
        v58 = -(v23 + v10);
        v59 = v15;
        v60 = v7 - v15;
        v61 = a6;
        v62 = a7;
        sub_22E50CC7C(v29, v22, a3, v58, v60);
        a7 = v62;
        a6 = v61;
        v22 = v16;
        v53 = v59;
        a4 = v90;
        a3 = v29;
      }
      else
      {
        v54 = v11;
        v55 = a3;
        v56 = a6;
        v57 = a7;
        sub_22E50CC7C(v54, v16, v29, v23, v15);
        a7 = v57;
        a3 = v55;
        a6 = v56;
        v11 = v29;
      }
      v7 = v53;
      result = v11;
      a2 = v22;
      if (!v53)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v73 = 0;
        do
        {
          v74 = &a6[v73];
          v75 = *(_OWORD *)&result[v73];
          *((_QWORD *)v74 + 2) = *(_QWORD *)&result[v73 + 16];
          *(_OWORD *)v74 = v75;
          v73 += 24;
        }
        while (&result[v73] != a2);
        if (v73)
        {
          v76 = a6;
          while (a2 != a3)
          {
            if (*((_QWORD *)a2 + 1) >= *((_QWORD *)v76 + 1))
            {
              v78 = *(_OWORD *)v76;
              *((_DWORD *)result + 4) = *((_DWORD *)v76 + 4);
              *(_OWORD *)result = v78;
              v76 += 24;
            }
            else
            {
              v77 = *(_OWORD *)a2;
              *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
              *(_OWORD *)result = v77;
              a2 += 24;
            }
            result += 24;
            if (&a6[v73] == v76)
              return result;
          }
          return (char *)memmove(result, v76, a6 - v76 + v73 - 4);
        }
      }
    }
    else if (a2 != a3)
    {
      v63 = 0;
      do
      {
        v64 = &a6[v63];
        v65 = *(_OWORD *)&a2[v63];
        *((_QWORD *)v64 + 2) = *(_QWORD *)&a2[v63 + 16];
        *(_OWORD *)v64 = v65;
        v63 += 24;
      }
      while (&a2[v63] != a3);
      if (v63)
      {
        v66 = &a6[v63];
        v67 = a3 - 24;
        while (a2 != result)
        {
          v68 = *((_QWORD *)v66 - 2);
          v69 = *((_QWORD *)a2 - 2);
          v70 = v68 < v69;
          if (v68 >= v69)
            v71 = v66 - 24;
          else
            v71 = a2 - 24;
          if (v70)
            a2 -= 24;
          else
            v66 -= 24;
          v72 = *(_OWORD *)v71;
          *((_DWORD *)v67 + 4) = *((_DWORD *)v71 + 4);
          *(_OWORD *)v67 = v72;
          v67 -= 24;
          if (v66 == a6)
            return result;
        }
        if (v66 != a6)
        {
          v81 = 0;
          do
          {
            v82 = &v67[v81];
            v83 = *(_OWORD *)&v66[v81 - 24];
            *((_DWORD *)v82 + 4) = *(_DWORD *)&v66[v81 - 8];
            *(_OWORD *)v82 = v83;
            v81 -= 24;
          }
          while (&v66[v81] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E50D270(uint64_t a1, llvm::Type *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  llvm::Type *v9;
  uint64_t v11;
  llvm::Constant **v12;
  BOOL v14;
  llvm::Constant *v15;
  llvm::Constant *NullValue;
  uint64_t v17;
  llvm::Constant **v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::Constant *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  llvm::Type **v31;
  llvm::DataLayout *DataLayout;
  uint64_t ABITypeAlignment;
  int64_t v34;
  int64_t v35;
  llvm::Type *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  llvm::Type **v40;
  llvm::DataLayout *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  llvm::Type *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Constant *v51;
  llvm::Type **v52;
  llvm::Type *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int64_t v58;
  unsigned int v62;
  _QWORD v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[34];

  v9 = (llvm::Type *)a9;
  v66[32] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return llvm::UndefValue::get();
  v11 = a3;
  v12 = (llvm::Constant **)a2;
  if (a9)
    v14 = *(_BYTE *)(a9 + 8) == 17;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_23;
  v15 = **(llvm::Constant ***)a2;
  NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v15, a2);
  v17 = sub_22E50C6E0(*(llvm::Module **)(a1 + 200), *(llvm::Type **)(a9 + 24));
  v64 = v66;
  v65 = 0x2000000000;
  v18 = v12;
  v19 = a4;
  v20 = v11;
  while ((llvm::Constant::isNullValue(*v18) & 1) != 0)
  {
LABEL_16:
    ++v19;
    ++v18;
    if (!--v20)
    {
      v9 = (llvm::Type *)a9;
      v17 = sub_22E508600(a1, a9, v15, *(_DWORD *)(a9 + 32), (uint64_t)&v64, NullValue);
      v25 = 1;
      goto LABEL_20;
    }
  }
  v21 = *v18;
  if (*(llvm::Constant **)*v18 == v15)
  {
    v22 = *v19 - a6;
    if (!(v22 % v17))
    {
      v23 = v22 / v17 + 1;
      v24 = v65;
      if (v23 != v65)
      {
        if (v23 >= v65)
        {
          sub_22E50D87C((uint64_t)&v64, v23 - v65, (uint64_t)NullValue);
          v21 = *v18;
          v24 = v65;
        }
        else
        {
          v24 = v23;
          LODWORD(v65) = v23;
        }
      }
      *((_QWORD *)v64 + v24 - 1) = v21;
      goto LABEL_16;
    }
  }
  v25 = 0;
  v9 = (llvm::Type *)a9;
LABEL_20:
  if (v64 != v66)
    free(v64);
  if ((v25 & 1) == 0)
  {
LABEL_23:
    v27 = v9;
    v28 = sub_22E50C6E0(*(llvm::Module **)(a1 + 200), v9);
    v29 = 0;
    v30 = 1;
    do
    {
      v31 = (llvm::Type **)v12[v29];
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
      ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, *v31);
      if ((uint64_t)v30 <= ABITypeAlignment)
        v30 = ABITypeAlignment;
      ++v29;
    }
    while (v11 != v29);
    if (v28 <= a7)
      v34 = a7;
    else
      v34 = v28;
    v35 = (a7 + v30 - 1) / v30 * v30;
    v64 = v66;
    v65 = 0x2000000000;
    if (v34 < v35 || (v34 + v30 - 1) / v30 * v30 != v34)
    {
      v58 = v34;
      v62 = 0;
      v38 = 1;
      v36 = v27;
      v37 = a4;
      goto LABEL_36;
    }
    v36 = v27;
    if (v34 > v35)
    {
      sub_22F2633B0((uint64_t)&v64, v12, &v12[v11]);
      v37 = a4;
      if (v34 - a7 >= 2)
        llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 80), (llvm::Type *)(v34 - a7));
      v58 = v34;
      v56 = llvm::UndefValue::get();
      v57 = v65;
      if (v65 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v57 = v65;
      }
      *((_QWORD *)v64 + v57) = v56;
      LODWORD(v65) = v65 + 1;
      v62 = 0;
      if (!a8)
      {
        v38 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      v62 = 0;
      v37 = a4;
      if (a8)
        goto LABEL_53;
      v58 = v34;
      v38 = 0;
LABEL_36:
      v39 = 0;
      do
      {
        v40 = (llvm::Type **)*v12;
        v41 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1 + 200));
        v42 = llvm::DataLayout::getABITypeAlignment(v41, *v40);
        v43 = *v37++;
        v44 = v43 - a6;
        v45 = v43 - a6 != (v39 + v42 - 1) / v42 * v42;
        v46 = (llvm::Type *)(v43 - a6 - v39);
        if (v43 - a6 == v39)
        {
          v47 = v62;
        }
        else
        {
          v48 = v37;
          if ((uint64_t)v46 >= 2)
            llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 80), v46);
          v49 = llvm::UndefValue::get();
          v50 = v62;
          if (v62 >= 0x20uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v50 = v62;
          }
          v63[v50] = v49;
          v47 = ++v62;
          v37 = v48;
        }
        v51 = *v12;
        if (v47 >= 0x20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v47 = v62;
        }
        v38 |= v45;
        v63[v47] = v51;
        ++v62;
        v52 = (llvm::Type **)*v12++;
        v39 = sub_22E50C6E0(*(llvm::Module **)(a1 + 200), *v52) + v44;
        --v11;
      }
      while (v11);
      v53 = (llvm::Type *)(v58 - v39);
      if ((v38 & (v58 > v39)) != 0)
      {
        if ((uint64_t)v53 >= 2)
          llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 80), v53);
        v54 = llvm::UndefValue::get();
        v55 = v62;
        if (v62 >= 0x20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v55 = v62;
        }
        v63[v55] = v54;
      }
    }
LABEL_53:
    llvm::ConstantStruct::getTypeForElements();
    if (v36 && *((_BYTE *)v36 + 8) == 16)
      llvm::StructType::isLayoutIdentical();
    v17 = llvm::ConstantStruct::get();
    if (v64 != v66)
      free(v64);
  }
  return v17;
}

uint64_t sub_22E50D87C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v5 + 8);
  }
  if (a2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 8) = v6 + a2;
  return result;
}

void sub_22E50D8F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22E50D964(uint64_t a1, llvm::Constant *a2, unint64_t a3)
{
  llvm::Type *v6;

  if ((*(_BYTE *)(sub_22E66DD94(a1 + 280, a3) + 112) & 2) != 0)
    return llvm::Constant::getNullValue(a2, v6);
  else
    return sub_22E508C2C(a1, a3, 0);
}

uint64_t sub_22E50D9C4(_QWORD **a1, unsigned __int8 *a2, unint64_t a3)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v7;
  _QWORD *v8;

  if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 82) & 0x80) == 0)
    return 0;
  if (!*((_DWORD *)a2 + 8))
    return sub_22E507208(*a1, a3);
  v4 = a2 + 40;
  v5 = *a2;
  v6 = v5 == 119;
  if (v5 == 119)
    v7 = a2;
  else
    v7 = 0;
  v8 = v7 + 48;
  if (v6)
    v4 = v8;
  return sub_22E507A30(a1, *v4);
}

void sub_22E50DA0C(uint64_t *a1, _BYTE *a2)
{
  if ((*a2 + 103) >= 0xF6u)
    sub_22E4DFCE0(*a1, (uint64_t)a2, *(_QWORD *)(a1[1] + 8));
  __asm { BR              X10 }
}

uint64_t sub_22E50DA90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_22E50DF0C(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char v15;
  llvm::Type **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char v23;
  int v24;
  llvm::Type **v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[4];

  v6 = a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
  {
    v28[0] = *(_QWORD *)a1;
    v28[1] = a1;
    v28[2] = a2;
    v28[3] = a3;
    return sub_22E50E324(v28, a5, 1);
  }
  result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 144), a4);
  if (result)
  {
    v10 = result;
    if (*(_BYTE *)(result + 16) != 2)
      return 0;
    v11 = *(_QWORD *)(result + 32);
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v28);
    v12 = v28[0];
    v27 = sub_22E66C868(*(_QWORD *)a1 + 280, v11, 0);
    v13 = a5[7];
    if ((v13 & 2) != 0
      || (v14 = (unsigned __int8 *)(v13 & 0xFFFFFFFFFFFFFFFCLL), (v13 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      || *v14 == 190)
    {
      v15 = 0;
      v16 = 0;
      v17 = (a5[3] - a5[2]) >> 3;
    }
    else
    {
      result = (uint64_t)sub_22F262EE8(a1, (uint64_t)v14, v11);
      if (!result)
        return result;
      v16 = (llvm::Type **)result;
      v26 = (_QWORD *)(v10 + 40);
      if (*(_DWORD *)(v10 + 48) >= 0x41u)
        v26 = (_QWORD *)*v26;
      LODWORD(v17) = *(_DWORD *)v26;
      v15 = 1;
    }
    v18 = v17;
    if ((_DWORD)v17)
    {
      v19 = 0;
      v20 = v15 ^ 1;
      do
      {
        v21 = a5[2];
        if (v19 >= ((unint64_t)(a5[3] - v21) >> 3))
          v22 = 0;
        else
          v22 = *(unsigned __int8 **)(v21 + 8 * v19);
        if (v22)
          v23 = 1;
        else
          v23 = v20;
        if ((v23 & 1) != 0)
        {
          if (v22)
          {
            v24 = *v22;
            if (v24 != 190)
            {
              if (v24 == 180)
              {
                result = sub_22E50DF0C(a1, a2, v6, v11, v22);
                if (!(_DWORD)result)
                  return result;
                sub_22E50E134(a2, v6, v27);
              }
              else
              {
                v25 = (llvm::Type **)sub_22F262E6C(a1, v22, v11);
                result = sub_22E50B354(a2, v25, v6);
                if (!(_DWORD)result)
                  return result;
              }
            }
          }
        }
        else if ((sub_22E50B354(a2, v16, v6) & 1) == 0)
        {
          return 0;
        }
        ++v19;
        v6 += v12;
      }
      while (v18 != v19);
    }
    return 1;
  }
  return result;
}

unsigned int *sub_22E50E134(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *result;
  char v8;
  unsigned int *v9;
  char v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t __src;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), (llvm::Type *)a3);
  result = (unsigned int *)sub_22E50B608((uint64_t)a1, a2);
  if (v8)
  {
    v9 = result;
    result = (unsigned int *)sub_22E50B608((uint64_t)a1, v6 + a2);
    if (v10)
    {
      v11 = result;
      v12 = (char *)result - (char *)v9;
      if (result != v9)
      {
        if (v12 == 1
          && *(_QWORD *)(*((_QWORD *)a1 + 35) + 8 * (_QWORD)v9) == a2
          && (result = (unsigned int *)sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), **(llvm::Type ***)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9)), result == (unsigned int *)v6))
        {
          if (a3
            && *(_BYTE *)(a3 + 8) == 16
            && *(_DWORD *)(a3 + 12) == 1
            && **(_QWORD **)(a3 + 16) == **(_QWORD **)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9))
          {
            __src = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9);
            result = (unsigned int *)llvm::ConstantStruct::get();
            *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9) = result;
          }
        }
        else
        {
          v13 = *(_QWORD *)a1;
          v14 = (llvm::Type *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9);
          v15 = (_QWORD *)(*((_QWORD *)a1 + 35) + 8 * (_QWORD)v9);
          v16 = sub_22E50C6E0(*(llvm::Module **)(*(_QWORD *)a1 + 200), (llvm::Type *)a3);
          __src = sub_22E50D270(v13, v14, v12, v15, v12, a2, v16, 0, a3);
          sub_22F263188(a1 + 2, (uint64_t *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v9), (uint64_t *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v11), &__src, &v18);
          __src = a2;
          return sub_22F263188(a1 + 70, (uint64_t *)(*((_QWORD *)a1 + 35) + 8 * (_QWORD)v9), (uint64_t *)(*((_QWORD *)a1 + 35) + 8 * (_QWORD)v11), &__src, &v18);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E50E324(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::Constant *v29;
  uint64_t v30;
  llvm::Type **v31;
  unint64_t v32;
  unint64_t v33;

  v6 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v7 = sub_22F0C975C(*(_QWORD *)(*a1 + 144), v6);
  if (v6)
    v8 = (*(_DWORD *)(v6 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v8 = 0;
  if (v8)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v6 + 128) + 16))
      return 0;
  }
  v10 = sub_22EFC3B90(v6);
  if (!v10)
    return 1;
  v11 = v10;
  v12 = 0;
  v13 = -1;
LABEL_10:
  ++v13;
  if ((*(_DWORD *)(v6 + 72) & 0xE000) == 0x4000
    && ((v14 = a2[7], (v14 & 2) == 0)
     || (v15 = v14 & 0xFFFFFFFFFFFFFFFCLL, (v14 & 0xFFFFFFFFFFFFFFFCLL) == 0)
     || v11 != v15
     && (v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 32))(v15),
         v16 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 32))(v11)))
    || (*(_BYTE *)(v11 + 68) & 1) != 0 && !*(_QWORD *)(v11 + 40)
    || (sub_22EFC2FDC(v11, *(_QWORD *)(*a1 + 144)) & 1) != 0)
  {
LABEL_42:
    while (1)
    {
      v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v11)
        return 1;
      if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_10;
    }
  }
  v17 = a2[2];
  if (v12 >= ((unint64_t)(a2[3] - v17) >> 3))
  {
    v18 = 0;
    v19 = 1;
  }
  else
  {
    v18 = *(unsigned __int8 **)(v17 + 8 * v12);
    if (v18)
    {
      if (*v18 == 190)
      {
        ++v12;
        goto LABEL_42;
      }
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    ++v12;
  }
  v20 = *(_QWORD *)(v11 + 48);
  if ((a3 & 1) != 0)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16) != 45
       && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) & 0xFEu)
        - 2 > 3;
    if (!v21 && *v18 == 180)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
      v23 = v22
          / sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      if ((sub_22E50DF0C(a1[1], a1[2], a1[3] + v23, *(_QWORD *)(v11 + 48), v18) & 1) != 0)
      {
        v24 = (unsigned int *)a1[2];
        v25 = a1[3] + v23;
        v26 = sub_22E66C868(*a1 + 280, *(_QWORD *)(v11 + 48), 0);
        sub_22E50E134(v24, v25, v26);
        a3 = 1;
        goto LABEL_42;
      }
      return 0;
    }
  }
  v27 = (uint64_t *)a1[1];
  if ((v19 & 1) != 0)
  {
    v28 = *v27;
    v29 = (llvm::Constant *)sub_22E507208((_QWORD *)*v27, *(_QWORD *)(v11 + 48));
    v30 = sub_22E5082B4(v28, v29, v20);
  }
  else
  {
    v30 = sub_22F262E6C(v27, v18, *(_QWORD *)(v11 + 48));
  }
  v31 = (llvm::Type **)v30;
  if (!v30)
    return 0;
  if ((*(_BYTE *)(v11 + 68) & 1) != 0)
  {
    if (*(_BYTE *)(v30 + 16) == 16
      && (sub_22E50AB24(a1, v11, *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13), v30) & 1) != 0)
    {
      goto LABEL_42;
    }
    return 0;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
  v33 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  result = sub_22E50B354((unsigned int *)a1[2], v31, a1[3] + v32 / v33);
  if ((_DWORD)result)
  {
    a3 |= sub_22E4EF458(v11);
    goto LABEL_42;
  }
  return result;
}

uint64_t sub_22E50E650(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;

  do
  {
LABEL_1:
    v2 = a2;
    LODWORD(v3) = *a2;
    if (v3 > 0xD5)
    {
      if ((_DWORD)v3 == 233)
      {
        LODWORD(v3) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_20;
        v4 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v3 != 214)
          break;
        v4 = a2 + 24;
      }
    }
    else if ((_DWORD)v3 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        return 0;
      v4 = a2 + 24;
      if (!a2[48])
        v4 = a2 + 32;
      LOBYTE(v3) = -101;
    }
    else
    {
      if ((_DWORD)v3 != 176)
        break;
      v3 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v3 == -1)
        return 0;
      v4 = &a2[8 * v3 + 40];
      LOBYTE(v3) = -80;
    }
    a2 = *(unsigned __int8 **)v4;
  }
  while (*(unsigned __int8 **)v4 != v2);
  if (v3 == 233)
  {
    LODWORD(v3) = *(_DWORD *)v2;
LABEL_20:
    if ((v3 & 0x7C0000) == 0x100000)
      goto LABEL_23;
  }
  else if (v3 == 133)
  {
    return 1;
  }
  if ((v3 + 102) < 0xF5u || (*(_DWORD *)v2 & 0x1F80000) != 0x300000)
    return 0;
LABEL_23:
  v5 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
  do
  {
    v6 = v5;
    v7 = *v5;
    if (v7 > 0xD5)
    {
      if (v7 == 233)
      {
        v7 = *(_DWORD *)v5;
        if ((*(_DWORD *)v5 & 0x7C0000) != 0x300000)
          goto LABEL_41;
        v7 = *(_DWORD *)v5;
        v9 = v5 + 16;
      }
      else
      {
        if (v7 != 214)
          break;
        v9 = v5 + 24;
      }
    }
    else if (v7 == 155)
    {
      if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
        return 0;
      v9 = v5 + 24;
      if (!v6[48])
        v9 = v6 + 32;
      v7 = 155;
    }
    else
    {
      if (v7 != 176)
        break;
      v8 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v8 == -1)
        return 0;
      v9 = &v5[8 * v8 + 40];
      v7 = 176;
    }
    v5 = *(unsigned __int8 **)v9;
  }
  while (v5 != v6);
  if (v7 != 233)
    goto LABEL_44;
  v7 = *(_DWORD *)v6;
LABEL_41:
  if ((v7 & 0x7C0000) == 0x140000)
  {
    a2 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    goto LABEL_1;
  }
  v7 = v7;
LABEL_44:
  if (v7 != 188)
  {
    if (v7 == 161)
    {
      v10 = *((_QWORD *)v6 + 2);
      return sub_22EFBCB70(v10) ^ 1;
    }
    return 0;
  }
  v10 = *((_QWORD *)v6 + 3);
  if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 < 3)
    return 1;
  return sub_22EFBCB70(v10) ^ 1;
}

BOOL sub_22E50E85C(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  BOOL v7;

  if ((*(_DWORD *)a1 & 0x1FC0000) == 0x200000)
    return 0;
  v2 = *(unsigned __int8 **)(a1 + 16);
  do
  {
    v3 = *v2;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)v2 & 0x7C0000) != 0x300000)
          goto LABEL_21;
        v3 = *(_DWORD *)v2;
        v5 = v2 + 16;
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = v2 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v2 + 2) & 0x18000) != 0)
        goto LABEL_21;
      v5 = v2 + 24;
      if (!v2[48])
        v5 = v2 + 32;
      v3 = 155;
    }
    else
    {
      if (v3 != 176)
        break;
      v4 = *((unsigned int *)v2 + 5);
      if ((_DWORD)v4 == -1)
        goto LABEL_21;
      v5 = &v2[8 * v4 + 40];
      v3 = 176;
    }
    v6 = *(unsigned __int8 **)v5;
    v7 = v6 == v2;
    v2 = v6;
  }
  while (!v7);
  if (v3 == 133)
    return 0;
LABEL_21:
  v7 = (*(_DWORD *)a1 & 0x300) != 0 && *(_DWORD *)a1 == 153;
  return !v7;
}

uint64_t sub_22E50E93C(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  _QWORD v5[2];
  char v6;
  uint64_t v7;

  v5[0] = a1;
  v5[1] = a1 + 272;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  return sub_22E50E974(v5, a2, a4);
}

llvm::Value *sub_22E50E974(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  llvm::Value *v10;
  _QWORD v12[3];
  char v13;
  llvm::Value *v14;
  uint64_t v15[2];
  unsigned __int8 *v16;
  uint64_t vars0;

  v16 = a2;
  v4 = *a1;
  v15[0] = 0;
  v15[1] = v4;
  sub_22EFF605C((uint64_t)a2);
  sub_22E48EE24(v15, v5, 0);
  v14 = 0;
  v12[0] = &v14;
  v12[1] = a1;
  v12[2] = &v16;
  v7 = *(_QWORD *)off_255E04E38(&off_255E04E38, v6);
  if (!v7)
    goto LABEL_5;
  v9 = (uint64_t)&vars0 - v7;
  if (v9 < 0)
    v9 = -v9;
  if ((unint64_t)(v9 - 8126464) <= 0x40000)
  {
    sub_22F4247F4((uint64_t)nullsub_29, (uint64_t)&v13, (uint64_t)sub_22E514600, (uint64_t)v12);
    v10 = v14;
  }
  else
  {
LABEL_5:
    v10 = sub_22E514634(a1, a2, v8);
  }
  sub_22E48F084(v15);
  return v10;
}

llvm::Value *sub_22E50EA40(uint64_t a1, llvm::Value *a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v6[2];
  char v7;
  uint64_t v8;

  v6[0] = a1;
  v6[1] = a1 + 272;
  v7 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  return sub_22E50EA80(v6, a2, a3, a4, a5, 0);
}

llvm::Value *sub_22E50EA80(uint64_t *a1, llvm::Value *a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  llvm::Type **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  llvm::LLVMContext *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  llvm::Type *v31;
  BOOL v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  llvm::Value *v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t NullValue;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::APFloatBase *v78;
  llvm::Type *v79;
  uint64_t v80;
  llvm::DataLayout *DataLayout;
  uint64_t IntPtrType;
  _BOOL8 v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t Declaration;
  uint64_t v87;
  uint64_t v88;
  llvm::Value *v89;
  unsigned __int8 *v90;
  llvm::Type **PrimitiveSizeInBits;
  llvm::Value *v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  llvm::Value *v99;
  uint64_t v100;
  uint64_t FCmpHelper;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  llvm::Value *v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  llvm::Value *v116;
  int v117;
  int v118;
  llvm::Type **v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int ScalarSizeInBits;
  unsigned int v129;
  BOOL v130;
  _BOOL4 v131;
  uint64_t *v132;
  llvm::LLVMContext *v133;
  uint64_t *v134;
  uint64_t *v135;
  _BOOL4 v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  llvm::Type *v140;
  llvm::Type *v141;
  unint64_t v142;
  uint64_t *v143;
  llvm::Value *v146[2];
  llvm::Type *v147;
  llvm::Value *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  llvm::Type **v155;
  const char *v156;
  llvm::Value *v157;
  __int128 v158;
  __int16 v159;
  llvm::Type **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  llvm::Value *v164;
  _QWORD v165[4];

  v8 = (llvm::Type **)a2;
  v9 = a1;
  v165[2] = *MEMORY[0x24BDAC8D0];
  v148 = a2;
  v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_DWORD *)(v11 + 16) == 11;
  else
    v12 = 0;
  if (v12 && ((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 186 <= 0x17)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v14 = *(_DWORD *)(v13 + 16);
    if (v13)
      v15 = (v14 & 0xFF800FF) == 87031819;
    else
      v15 = 0;
    if (!v15)
    {
      v16 = *(_DWORD *)(v13 + 16);
      if (v13)
        v17 = v16 == 11;
      else
        v17 = 0;
      if (v17 && ((v14 >> 19) & 0x1FE) - 186 < 0x18)
        return sub_22E51EE74(v9, v8, a3, a4);
      if (v16 != 44)
        return sub_22E51EE74(v9, v8, a3, a4);
      v18 = sub_22F114198(*(_QWORD *)(v13 + 24));
      if ((*(_BYTE *)(v18 + 74) & 1) == 0 && *(_QWORD *)(v18 + 128) < 8uLL)
        return sub_22E51EE74(v9, v8, a3, a4);
      v19 = *(_QWORD *)(v13 + 24);
      goto LABEL_69;
    }
    v49 = a1[1];
    v156 = "toBOOL";
    v159 = 259;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, a2);
    return (llvm::Value *)sub_22E3C18F4(v49, 33, (uint64_t *)v8, NullValue, (uint64_t)&v156);
  }
  v20 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_DWORD *)(v21 + 16) == 11;
  else
    v22 = 0;
  if (v22 && ((*(_DWORD *)(v21 + 16) >> 19) & 0x1FEu) - 186 <= 0x17)
  {
    if (*(_DWORD *)(v11 + 16) != 44)
      return sub_22E51EE74(v9, v8, a3, a4);
    v60 = sub_22F114198(*(_QWORD *)(v11 + 24));
    if ((*(_BYTE *)(v60 + 74) & 1) == 0 && *(_QWORD *)(v60 + 128) < 8uLL)
      return sub_22E51EE74(v9, v8, a3, a4);
    v19 = *(_QWORD *)(v11 + 24);
LABEL_69:
    sub_22F114198(v19);
    return sub_22E51EE74(v9, v8, a3, a4);
  }
  v23 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v24 = v23 | a3 & 7;
  v25 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  v26 = (llvm::LLVMContext *)(v25 | a4 & 7);
  if ((llvm::LLVMContext *)v24 != v26)
  {
    v27 = v25 & 0xFFFFFFFFFFFFFFF0;
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v29 = *(_DWORD *)(v28 + 16) & 0xFF800FF;
    if (v28)
      v30 = v29 == 86507531;
    else
      v30 = 0;
    if (v30)
      return 0;
    v31 = *v8;
    v147 = *v8;
    if (v28)
      v32 = v29 == 87031819;
    else
      v32 = 0;
    if (v32)
    {
      v51 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
      v52 = *(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v52)
        v53 = *(_DWORD *)(v52 + 16) == 11;
      else
        v53 = 0;
      if (v53 && ((*(_DWORD *)(v52 + 16) >> 19) & 0x1FEu) - 210 <= 7)
        return (llvm::Value *)sub_22E51ED04((uint64_t)a1, v8);
      if (*(_BYTE *)(v51 + 16) == 31)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 224);
        return (llvm::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 200))(v59);
      }
      else if (*((_BYTE *)v31 + 8) == 13)
      {
        return (llvm::Value *)sub_22E51EC50((uint64_t)a1, (uint64_t)v8);
      }
      else
      {
        v64 = *(_QWORD **)(*a1 + 144);
        v65 = sub_22E699F3C(v64);
        v66 = (*(uint64_t (**)(uint64_t, _QWORD *, llvm::Type *, unint64_t))(*(_QWORD *)v65 + 192))(v65, v64, v31, v23 | a3 & 7);
        v67 = v9[1];
        v156 = "toBOOL";
        v159 = 259;
        return (llvm::Value *)sub_22E3C18F4(v67, 33, (uint64_t *)v8, v66, (uint64_t)&v156);
      }
    }
    v143 = (uint64_t *)v27;
    v142 = (unint64_t)v26;
    v33 = (unsigned __int8 *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), v26);
    v34 = (uint64_t)v33;
    v146[1] = (llvm::Value *)v33;
    v35 = v23 & 0xFFFFFFFFFFFFFFF0;
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v36)
      v37 = (*(_DWORD *)(v36 + 16) & 0xFF800FF) == 110100491;
    else
      v37 = 0;
    if (!v37
      || (v38 = *(_QWORD *)(*(_QWORD *)(*v9 + 144) + 144), (*(_BYTE *)(*(_QWORD *)(v38 + 2000) + 68) & 8) != 0))
    {
      v42 = (llvm::Value *)v8;
      v43 = v24;
      v44 = a5;
      v45 = (unsigned __int8 *)v31;
    }
    else
    {
      v39 = v23 & 0xFFFFFFFFFFFFFFF0;
      v140 = (llvm::Type *)v33;
      v40 = v33[8];
      v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38 + 15088) + 248))(*(_QWORD *)(v38 + 15088));
      if (v40 > 6)
      {
        v85 = (uint64_t *)v9[1];
        if (v41)
        {
          Declaration = llvm::Intrinsic::getDeclaration();
          if (Declaration)
            v87 = *(_QWORD *)(Declaration + 24);
          else
            v87 = 0;
          v159 = 257;
          v89 = sub_22E462B78(v85, v87, Declaration, (uint64_t)&v148, 1, (uint64_t)&v156, 0);
        }
        else
        {
          v88 = *(_QWORD *)(*(_QWORD *)(*v9 + 144) + 56);
          v156 = "conv";
          v159 = 259;
          v89 = (llvm::Value *)sub_22E3E6054((uint64_t)v85, (uint64_t)v8, v88, (uint64_t)&v156);
        }
        v42 = v89;
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + 144) + 144) + 16560);
        v45 = *(unsigned __int8 **)(*v9 + 56);
        v147 = (llvm::Type *)v45;
        v148 = v89;
        v44 = a5;
        v34 = (uint64_t)v140;
        v35 = v39;
      }
      else
      {
        v42 = (llvm::Value *)v8;
        v43 = v24;
        v44 = a5;
        v34 = (uint64_t)v140;
        v45 = (unsigned __int8 *)v31;
        v35 = v39;
        if (v41)
        {
          v46 = (uint64_t *)v9[1];
LABEL_47:
          v47 = llvm::Intrinsic::getDeclaration();
          if (v47)
            v48 = *(_QWORD *)(v47 + 24);
          else
            v48 = 0;
          v159 = 257;
          return sub_22E462B78(v46, v48, v47, (uint64_t)&v148, 1, (uint64_t)&v156, 0);
        }
      }
    }
    if (v45 == (unsigned __int8 *)v34)
    {
      if ((a6 & 0x10000) != 0)
      {
        sub_22E51F12C((uint64_t **)v9, v42, a3, v42, a4, v44);
        return v148;
      }
      return v42;
    }
    v55 = *(unsigned __int8 *)(v34 + 8);
    v56 = v45[8];
    if (v34 && v55 == 15)
    {
      if (v56 != 15)
      {
        v79 = (llvm::Type *)v34;
        v80 = v43;
        DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*v9 + 144) + 200));
        IntPtrType = llvm::DataLayout::getIntPtrType(DataLayout, v79);
        v83 = sub_22F110A40(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0));
        v84 = (uint64_t *)v9[1];
        v156 = "conv";
        v159 = 259;
        v62 = sub_22E3BF45C(v84, (uint64_t)v148, IntPtrType, v83, (uint64_t)&v156);
        v57 = (uint64_t *)v9[1];
        v156 = "conv";
        v159 = 259;
        v58 = 48;
        v63 = (uint64_t)v79;
        return (llvm::Value *)sub_22E3C1740(v57, v58, v62, v63, (uint64_t)&v156);
      }
      v57 = (uint64_t *)v9[1];
      v156 = "conv";
      v159 = 259;
      v58 = 49;
LABEL_77:
      v62 = (uint64_t)v42;
      v63 = v34;
      return (llvm::Value *)sub_22E3C1740(v57, v58, v62, v63, (uint64_t)&v156);
    }
    if (v56 == 15)
    {
      v57 = (uint64_t *)v9[1];
      v156 = "conv";
      v159 = 259;
      v58 = 47;
      goto LABEL_77;
    }
    v68 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v143 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v69 = *(_QWORD *)(*(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    if (v68 == 56 && *(unsigned __int8 *)(*(_QWORD *)v69 + 16) - 55 >= 2)
    {
      v156 = "splat";
      v159 = 259;
      return (llvm::Value *)llvm::IRBuilderBase::CreateVectorSplat();
    }
    v70 = v68 - 29;
    if (*(unsigned __int8 *)(*(_QWORD *)v69 + 16) - 29 <= 1 && v70 <= 1)
      return sub_22E51F674(v9, (uint64_t)v42, v43, v142, (uint64_t)v45, v34, a6 & 0xFFFFFF);
    v141 = (llvm::Type *)v34;
    if ((v55 & 0xFE) == 0x12 || (v56 & 0xFE) == 0x12)
    {
      v90 = v45;
      PrimitiveSizeInBits = (llvm::Type **)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v45);
      v93 = (int)v92;
      v163 = (uint64_t)PrimitiveSizeInBits;
      v164 = v92;
      v160 = (llvm::Type **)llvm::Type::getPrimitiveSizeInBits(v141);
      v161 = v94;
      if (PrimitiveSizeInBits == v160 && v93 == (_DWORD)v94)
      {
        v57 = (uint64_t *)v9[1];
        v156 = "conv";
        v159 = 259;
        v58 = 49;
        v62 = (uint64_t)v42;
        v63 = (uint64_t)v141;
        return (llvm::Value *)sub_22E3C1740(v57, v58, v62, v63, (uint64_t)&v156);
      }
      if (*(_BYTE *)(*((_QWORD *)v90 + 3) + 8) == 13)
      {
        v95 = (uint64_t *)v9[1];
        v156 = "conv";
        v159 = 259;
        return (llvm::Value *)sub_22E3BF45C(v95, (uint64_t)v42, (uint64_t)v141, 0, (uint64_t)&v156);
      }
      v96 = llvm::TypeSize::operator unsigned long long();
      v97 = llvm::TypeSize::operator unsigned long long();
      v98 = v9[1];
      v99 = v148;
      if (v96 <= v97)
      {
        v156 = "conv";
        v159 = 259;
        return (llvm::Value *)sub_22E3E6054(v98, (uint64_t)v148, (uint64_t)v141, (uint64_t)&v156);
      }
      v156 = "conv";
      v159 = 259;
      return (llvm::Value *)sub_22E3E5FFC(v98, (uint64_t)v99, (uint64_t)v141, (uint64_t)&v156);
    }
    v72 = (uint64_t *)v35;
    v139 = (uint64_t)v45;
    v73 = v43;
    v74 = sub_22E699F3C(*(_QWORD **)(*v9 + 144));
    v42 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t, unint64_t))(*(_QWORD *)v74 + 240))(v74, *v9, v148, v73, v142);
    if (v42)
      return v42;
    v146[0] = 0;
    v75 = (uint64_t *)*v9;
    if ((*(_BYTE *)(*v9 + 1866) & 0x10) == 0 || !sub_22F10E0EC(*v72) || (v155 = v8, *((_BYTE *)v141 + 8) != 13))
    {
LABEL_149:
      v106 = *(_QWORD *)(*(_QWORD *)(*v143 + 8) & 0xFFFFFFFFFFFFFFF0);
      v107 = (uint64_t)v141;
      if (v106)
      {
        v107 = (uint64_t)v141;
        if ((*(_DWORD *)(v106 + 16) & 0xFF800FF) == 0x690000B)
        {
          v108 = *(_QWORD *)(*(_QWORD *)(*v9 + 144) + 144);
          v107 = (uint64_t)v141;
          if ((*(_BYTE *)(*(_QWORD *)(v108 + 2000) + 68) & 8) == 0)
          {
            if (*(unsigned __int8 *)(v139 + 8) <= 6u)
            {
              v109 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v108 + 15088) + 248))(*(_QWORD *)(v108 + 15088));
              v46 = (uint64_t *)v9[1];
              if (v109)
                goto LABEL_47;
              v99 = v148;
              v159 = 257;
              v98 = (uint64_t)v46;
              return (llvm::Value *)sub_22E3E5FFC(v98, (uint64_t)v99, (uint64_t)v141, (uint64_t)&v156);
            }
            v107 = *(_QWORD *)(*v9 + 56);
          }
        }
      }
      v110 = sub_22E51F674(v9, (uint64_t)v148, v73, v142, v139, v107, a6 & 0xFFFFFF);
      v146[0] = v110;
      if ((llvm::Type *)v107 != v141)
      {
        v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + 144) + 144) + 15088);
        v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 248))(v111);
        v113 = (uint64_t *)v9[1];
        if (v112)
        {
          v114 = llvm::Intrinsic::getDeclaration();
          if (v114)
            v115 = *(_QWORD *)(v114 + 24);
          else
            v115 = 0;
          v159 = 257;
          v116 = sub_22E462B78(v113, v115, v114, (uint64_t)v146, 1, (uint64_t)&v156, 0);
        }
        else
        {
          v156 = "conv";
          v159 = 259;
          v116 = (llvm::Value *)sub_22E3E5FFC((uint64_t)v113, (uint64_t)v110, (uint64_t)v141, (uint64_t)&v156);
        }
        v110 = v116;
        v146[0] = v116;
      }
      v118 = a6;
      v117 = a5;
      if ((a6 & 0x100) != 0 && (*(_BYTE *)(*v9 + 1871) & 3) != 0)
      {
        v119 = (llvm::Type **)v148;
        v120 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
        v121 = *(_DWORD *)(v120 + 16);
        if (v120 && v121 == 11)
        {
          if (((*(_DWORD *)(v120 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_196;
        }
        else if (v120 && v121 == 44)
        {
          v122 = sub_22F114198(*(_QWORD *)(v120 + 24));
          v118 = a6;
          v117 = a5;
          if ((*(_BYTE *)(v122 + 74) & 1) == 0 && *(_QWORD *)(v122 + 128) <= 7uLL)
            goto LABEL_196;
          v123 = sub_22F114198(*(_QWORD *)(v120 + 24));
          v118 = a6;
          v117 = a5;
          if ((*(_BYTE *)(v123 + 76) & 0x80) != 0)
            goto LABEL_196;
        }
        else
        {
          v118 = a6;
          v117 = a5;
          if (v121 != 9)
            goto LABEL_196;
        }
        v124 = *(_QWORD *)(*(_QWORD *)(*v20 + 8) & 0xFFFFFFFFFFFFFFF0);
        v125 = *(_DWORD *)(v124 + 16);
        if (v124 && v125 == 11)
        {
          if (((*(_DWORD *)(v124 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_196;
LABEL_189:
          ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*v119);
          v129 = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v110);
          v118 = a6;
          v117 = a5;
          if (ScalarSizeInBits > v129)
          {
            v130 = sub_22F110A40(*v10);
            v131 = sub_22F110A40(*v20);
            v118 = a6;
            v117 = a5;
            v132 = (uint64_t *)*v9;
            if ((*(_BYTE *)(*v9 + 1871) & 8) == 0 || v130 || !v131)
            {
              *((_BYTE *)v132 + 1880) = 1;
              sub_22E51F9BC((uint64_t)&v156, (uint64_t *)v119, a3, (uint64_t)v110, a4, (uint64_t *)v9[1]);
              if ((*(_OWORD *)(*v9 + 1864) & v158) != 0)
              {
                v163 = sub_22E4DE978(*v9, a5);
                v164 = sub_22F25E758(*v9, a3);
                v165[0] = sub_22F25E758(*v9, a4);
                llvm::Type::getInt8Ty(*(llvm::Type **)(v9[1] + 64), v133);
                v165[1] = llvm::ConstantInt::get();
                v134 = (uint64_t *)*v9;
                v160 = v119;
                v161 = (uint64_t)v110;
                sub_22E4DEC4C(v134, (uint64_t)&v157, 1, 7u, (uint64_t)&v163, 4, &v160, 2);
              }
              *((_BYTE *)v132 + 1880) = 0;
              v118 = a6;
              v117 = a5;
            }
          }
          goto LABEL_196;
        }
        if (!v124 || v125 != 44)
        {
          v118 = a6;
          v117 = a5;
          if (v125 != 9)
            goto LABEL_196;
          goto LABEL_189;
        }
        v126 = sub_22F114198(*(_QWORD *)(v124 + 24));
        v118 = a6;
        v117 = a5;
        if ((*(_BYTE *)(v126 + 74) & 1) != 0 || *(_QWORD *)(v126 + 128) > 7uLL)
        {
          v127 = sub_22F114198(*(_QWORD *)(v124 + 24));
          v118 = a6;
          v117 = a5;
          if ((*(_BYTE *)(v127 + 76) & 0x80) == 0)
            goto LABEL_189;
        }
      }
LABEL_196:
      v42 = v146[0];
      if ((v118 & 0x10000) != 0)
      {
        sub_22E51F12C((uint64_t **)v9, v148, a3, v146[0], a4, v117);
        return v146[0];
      }
      return v42;
    }
    *((_BYTE *)v75 + 1880) = 1;
    v135 = v75;
    v76 = sub_22EF5B2E0(*(_QWORD *)(v75[18] + 144), v24);
    v137 = v9;
    v77 = sub_22EF6A330(*(_QWORD *)(*(_QWORD *)(*v9 + 144) + 144), v142);
    v136 = sub_22F110C5C(*v143);
    v78 = (llvm::APFloatBase *)sub_22E51FAEC(v77, v136, (uint64_t)&v153);
    v138 = llvm::APFloatBase::PPCDoubleDouble(v78);
    if (v138 == v76)
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    if ((sub_22E51FB5C((llvm::APFloatBase *)&v163) & 4) != 0)
    {
      if (v138 == v76)
        llvm::detail::DoubleAPFloat::DoubleAPFloat();
      else
        llvm::detail::IEEEFloat::IEEEFloat();
      sub_22E46320C(&v156);
      sub_22E51FDA0((uint64_t *)&v164, (uint64_t *)&v157);
    }
    else
    {
      if (v138 == v76)
        llvm::detail::DoubleAPFloat::DoubleAPFloat();
      else
        llvm::detail::IEEEFloat::IEEEFloat();
      sub_22E51FBD8((llvm::APFloatBase *)&v163);
    }
    if ((llvm::Value *)v138 == v157)
      sub_22E463170((llvm::APFloatBase *)&v158);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v157);
    sub_22E51FC38(v77, v136, (uint64_t)&v151);
    if (v138 == v76)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
      if ((sub_22E51FB5C((llvm::APFloatBase *)&v160) & 4) == 0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat();
        goto LABEL_130;
      }
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat();
      if ((sub_22E51FB5C((llvm::APFloatBase *)&v160) & 4) == 0)
      {
        llvm::detail::IEEEFloat::IEEEFloat();
LABEL_130:
        sub_22E51FCBC((llvm::APFloatBase *)&v160);
LABEL_133:
        if ((llvm::Value *)v138 == v157)
          sub_22E463170((llvm::APFloatBase *)&v158);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v157);
        v100 = *(_QWORD *)(*(_QWORD *)(*v72 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v100 && (*(_DWORD *)(v100 + 16) & 0xFF800FF) == 0x690000B)
        {
          sub_22EF5B2E0(*(_QWORD *)(*(_QWORD *)(*v137 + 144) + 144), v73);
          LOBYTE(v156) = 0;
          llvm::APFloat::convert();
          llvm::APFloat::convert();
        }
        llvm::ConstantFP::get();
        v159 = 257;
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
        llvm::ConstantFP::get();
        v159 = 257;
        v102 = llvm::IRBuilderBase::CreateFCmpHelper();
        v103 = v137[1];
        v159 = 257;
        v104 = sub_22E3E49C4(v103, FCmpHelper, v102, (uint64_t)&v156);
        v156 = (const char *)sub_22E4DE978(*v137, a5);
        v157 = sub_22F25E758(*v137, v24);
        *(_QWORD *)&v158 = sub_22F25E758(*v137, v142);
        v105 = (_QWORD *)*v137;
        v149 = v104;
        v150 = xmmword_22F4583D8;
        sub_22E4DEC4C(v105, (uint64_t)&v149, 1, 5u, (uint64_t)&v156, 3, &v155, 1);
        if (v138 == v161)
          sub_22E463170((llvm::APFloatBase *)&v162);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v161);
        if (v152 >= 0x41 && v151)
          MEMORY[0x2348A0E84](v151, 0x1000C8000313F17);
        if ((llvm::Value *)v138 == v164)
          sub_22E463170((llvm::APFloatBase *)v165);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v164);
        if (v154 >= 0x41 && v153)
          MEMORY[0x2348A0E84](v153, 0x1000C8000313F17);
        *((_BYTE *)v135 + 1880) = 0;
        v9 = v137;
        goto LABEL_149;
      }
      llvm::detail::IEEEFloat::IEEEFloat();
    }
    sub_22E46320C(&v156);
    sub_22E51FDA0(&v161, (uint64_t *)&v157);
    goto LABEL_133;
  }
  return (llvm::Value *)v8;
}

llvm::Value *sub_22E50FC50(uint64_t *a1, llvm::Value *a2, llvm::Value *a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;

  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 12;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v13 = *(_QWORD *)(v11 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 87031819;
  else
    v15 = 0;
  if (!v15)
    return sub_22E50EA80(a1, a2, v13, a5, a6, 0);
  v17 = sub_22E50EA80(a1, a2, v13, a5, a6, 0);
  v18 = sub_22E50EA80(a1, a3, v13, a5, a6, 0);
  v19 = a1[1];
  v20 = "toBOOL";
  v21 = 259;
  return (llvm::Value *)sub_22E3E58D4(v19, (uint64_t)v17, (uint64_t)v18, (uint64_t)&v20);
}

uint64_t sub_22E50FD80(uint64_t a1, unsigned __int8 *a2, llvm::LLVMContext *a3, __n128 a4)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14[2];
  char v15;
  uint64_t v16;
  uint64_t *v17[2];
  char v18;
  uint64_t v19;
  __int16 v20;

  if ((unint64_t)a3 >= 0x10)
  {
    v14[0] = (const char *)a1;
    v14[1] = (const char *)(a1 + 272);
    v15 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    do
    {
      v6 = (uint64_t)a2;
      v7 = *a2;
      if (v7 > 0xD5)
      {
        if (v7 == 233)
        {
          v10 = *(_DWORD *)a2;
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_24;
          v7 = *(_DWORD *)a2;
          v9 = a2 + 16;
        }
        else
        {
          if (v7 != 214)
            break;
          v9 = a2 + 24;
        }
      }
      else if (v7 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_26;
        v9 = a2 + 24;
        if (!a2[48])
          v9 = a2 + 32;
        v7 = 155;
      }
      else
      {
        if (v7 != 176)
          break;
        v8 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v8 == -1)
          goto LABEL_26;
        v9 = &a2[8 * v8 + 40];
        v7 = 176;
      }
      a2 = *(unsigned __int8 **)v9;
    }
    while (*(_QWORD *)v9 != v6);
    if ((v7 & 0xFE) == 0x70)
    {
      switch((*(_DWORD *)v6 >> 18) & 0x3F)
      {
        case 2:
          sub_22E51A7D0((uint64_t)v17, v14, v6, (unint64_t)a3);
          result = (uint64_t)sub_22E512324((uint64_t *)v14, (uint64_t)v17);
          break;
        case 3:
          sub_22E51A7D0((uint64_t)v17, v14, v6, (unint64_t)a3);
          result = (uint64_t)sub_22E51262C((uint64_t)v14, v17);
          break;
        case 5:
          sub_22E51A7D0((uint64_t)v17, v14, v6, (unint64_t)a3);
          result = (uint64_t)sub_22E512C30((uint64_t *)v14, v17);
          break;
        case 6:
          sub_22E51A7D0((uint64_t)v17, v14, v6, (unint64_t)a3);
          result = (uint64_t)sub_22E512F48(v14, v17);
          break;
        default:
          goto LABEL_26;
      }
    }
    else
    {
      if (v7 != 233)
      {
LABEL_26:
        result = sub_22E50E974(v14, v6, a4);
        if (result)
        {
          v11 = result;
          v12 = v14[0] + 272;
          v13 = sub_22E66CB04((llvm::Type ***)(*((_QWORD *)v14[0] + 18) + 280), a3);
          v17[0] = (uint64_t *)"ext";
          v20 = 259;
          return sub_22E3E6054((uint64_t)v12, v11, v13, (uint64_t)v17);
        }
        return result;
      }
      v10 = *(_DWORD *)v6;
LABEL_24:
      switch((v10 >> 18) & 0x1F)
      {
        case 6u:
          result = sub_22E50FD80(a1, *(_QWORD *)(v6 + 16), a3);
          break;
        case 7u:
          result = (uint64_t)sub_22E51BF14((uint64_t)v14, v6, (unint64_t)a3, a4);
          break;
        case 0xAu:
          result = sub_22E51C004((uint64_t *)v14, v6, (unint64_t)a3, a4);
          break;
        case 0xBu:
          result = sub_22E51C120((uint64_t *)v14, v6, (unint64_t)a3, a4);
          break;
        default:
          goto LABEL_26;
      }
    }
  }
  else
  {
    v17[0] = (uint64_t *)a1;
    v17[1] = (uint64_t *)(a1 + 272);
    v18 = 0;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    return sub_22E50E974(v17, a2, a4);
  }
  return result;
}

uint64_t sub_22E51001C(uint64_t *a1, uint64_t a2, __int128 *a3, int a4, int a5)
{
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t True;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  llvm::PHINode *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  llvm::LLVMContext *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  const char *v88;
  uint64_t v89;
  int v90;
  _BOOL4 v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t *v97;
  char v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t *v106;
  uint64_t Declaration;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  char v112;
  uint64_t v113;
  unsigned int v114;
  llvm::Type **v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  const char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  int v210;
  llvm::APFloatBase *v211;
  uint64_t v212;
  llvm::APFloatBase *v213;
  uint64_t v214;
  llvm::APFloatBase *v215;
  uint64_t v216;
  llvm::APFloatBase *v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  _QWORD *v234;
  unint64_t v236;
  _OWORD v237[8];
  uint64_t v238;
  _QWORD v239[6];
  char v240;
  _OWORD v241[8];
  uint64_t v242;
  uint64_t v243[6];
  char v244;
  __int128 v245;
  char v246;
  __int128 v247;
  char v248;
  _OWORD v249[8];
  uint64_t v250;
  __int32 v251;
  _OWORD v252[3];
  uint64_t *v253;
  uint64_t *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  unsigned __int32 v264[6];
  __int128 v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  v10 = (_QWORD *)*a1;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v254 = 0;
  v253 = 0;
  if (a4)
    v12 = 1;
  else
    v12 = -1;
  v236 = v11;
  v13 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 6;
  else
    v15 = 0;
  if (v15)
    goto LABEL_10;
  v16 = v10;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
  {
    v14 = sub_22F10CF48(v14);
    if (v14)
    {
LABEL_10:
      v236 = *(_QWORD *)(v14 + 32);
      v13 = (uint64_t *)(v236 & 0xFFFFFFFFFFFFFFF0);
      v17 = *(_QWORD *)(v236 & 0xFFFFFFFFFFFFFFF0);
      v18 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0;
      if (a4
        && (*(_QWORD *)v18 ? (v19 = (*(_DWORD *)(*(_QWORD *)v18 + 16) & 0xFF800FF) == 87031819) : (v19 = 0), v19))
      {
        v23 = *a1;
        True = llvm::ConstantInt::getTrue();
        v25 = (uint64_t *)sub_22E4E7F50(v23, True, v236);
        v26 = a1[1];
        if (a5)
        {
          v27 = *(__int128 *)((char *)a3 + 24);
          v252[0] = *(__int128 *)((char *)a3 + 8);
          v252[1] = v27;
          v252[2] = *(__int128 *)((char *)a3 + 40);
          v28 = sub_22E3BEDDC(v26, v25, v252, (*((_DWORD *)a3 + 18) >> 2) & 1);
          *(_WORD *)(v28 + 18) |= 0x380u;
          *(_BYTE *)(v28 + 60) = 1;
          v29 = llvm::ConstantInt::getTrue();
        }
        else
        {
          v146 = *a1;
          v147 = *((_QWORD *)a3 + 8);
          v148 = *(__int128 *)((char *)a3 + 24);
          v265 = *(__int128 *)((char *)a3 + 8);
          v266 = v148;
          v267 = *(__int128 *)((char *)a3 + 40);
          sub_22E5E0440(v146, (uint64_t)&v265, v147, &v255);
          v29 = sub_22F245AA0(v26, 0, v255, v25, 0);
        }
      }
      else
      {
        v232 = v12;
        v234 = v10;
        v20 = *(_QWORD *)v18;
        v21 = *(_DWORD *)(*(_QWORD *)v18 + 16);
        if (v20)
          v22 = (v21 & 0xFF800FF) == 87031819;
        else
          v22 = 0;
        if (v22)
          goto LABEL_36;
        if (v21 != 9)
        {
          if (v21 == 44)
          {
            v40 = sub_22F114198(*(_QWORD *)(v20 + 24));
            if ((*(_BYTE *)(v40 + 74) & 1) == 0 && *(_QWORD *)(v40 + 128) < 8uLL
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v20 + 24)) + 76) & 0x80) != 0)
            {
              goto LABEL_36;
            }
            v17 = *v13;
          }
          else if (v21 != 11 || ((v21 >> 19) & 0x1FE) - 166 >= 0x14)
          {
LABEL_36:
            v233 = a5;
            v44 = a3[7];
            v261 = a3[6];
            v262 = v44;
            v263 = *((_QWORD *)a3 + 16);
            v45 = a3[3];
            v257 = a3[2];
            v258 = v45;
            v46 = a3[5];
            v259 = a3[4];
            v260 = v46;
            v47 = a3[1];
            v255 = *a3;
            v256 = v47;
            sub_22E4D7B28((_QWORD *)*a1, (uint64_t)&v255, *(_DWORD *)(a2 + 4), (uint64_t)&v265);
            v254 = (uint64_t *)v265;
            v253 = (uint64_t *)v265;
            v48 = *(_QWORD *)(a1[1] + 48);
            *(_QWORD *)&v255 = "atomic_op";
            LOWORD(v257) = 259;
            v49 = operator new();
            llvm::BasicBlock::BasicBlock();
            v254 = (uint64_t *)sub_22E4E7F50(*a1, (uint64_t)v254, v236);
            v50 = (uint64_t *)a1[1];
            v51 = llvm::User::operator new((llvm::User *)0x40);
            llvm::BranchInst::BranchInst();
            LOWORD(v257) = 257;
            sub_22E3C12C8(v50, v51, (uint64_t)&v255);
            v52 = a1[1];
            *(_QWORD *)(v52 + 48) = v49;
            *(_QWORD *)(v52 + 56) = v49 + 40;
            v53 = (uint64_t *)a1[1];
            v54 = *v254;
            LOWORD(v257) = 257;
            v39 = (llvm::PHINode *)sub_22E3C4B80(v53, v54, 2, (uint64_t)&v255);
            sub_22E3C4C50(v39, (uint64_t)v254, v48);
            v55 = *a1;
            v56 = sub_22F10ACF8(*v13);
            *(_QWORD *)&v255 = sub_22E5DE820(*(_QWORD *)(v55 + 144), v56);
            *((_QWORD *)&v255 + 1) = v57;
            v38 = (uint64_t *)sub_22E622648(v55, &v255, (uint64_t *)v39);
            goto LABEL_37;
          }
        }
        v41 = sub_22F110B50(v17);
        v42 = *a1;
        if (v41 && (*(_BYTE *)(v42 + 1869) & 2) != 0)
          goto LABEL_36;
        v43 = *(_QWORD *)(v42 + 144);
        if ((*(_WORD *)(*(_QWORD *)(v43 + 152) + 248) & 0xC00) == 0x800)
          goto LABEL_36;
        v154 = a5;
        if (a4)
          v155 = 1;
        else
          v155 = 2;
        sub_22E66CB04((llvm::Type ***)(v43 + 280), (llvm::LLVMContext *)v236);
        v156 = llvm::ConstantInt::get();
        v157 = (uint64_t *)sub_22E4E7F50(v42, v156, v236);
        v158 = *a1;
        v159 = a1[1];
        v160 = *((_QWORD *)a3 + 8);
        v161 = *(__int128 *)((char *)a3 + 24);
        v265 = *(__int128 *)((char *)a3 + 8);
        v266 = v161;
        v267 = *(__int128 *)((char *)a3 + 40);
        sub_22E5E0440(v158, (uint64_t)&v265, v160, &v255);
        v30 = sub_22F245AA0(v159, v155, v255, v157, 0);
        v10 = v234;
        if (!v154)
          goto LABEL_202;
        if (a4)
          v162 = 13;
        else
          v162 = 15;
        v163 = a1[1];
        LOWORD(v257) = 257;
        v29 = sub_22E3BEBE4(v163, v162, v30, (uint64_t)v157, (uint64_t)&v255, 0);
      }
      v30 = v29;
      goto LABEL_202;
    }
    v16 = (_QWORD *)*a1;
  }
  v232 = v12;
  v233 = a5;
  v234 = v10;
  v31 = a3[7];
  v261 = a3[6];
  v262 = v31;
  v263 = *((_QWORD *)a3 + 16);
  v32 = a3[3];
  v257 = a3[2];
  v258 = v32;
  v33 = a3[5];
  v259 = a3[4];
  v260 = v33;
  v34 = a3[1];
  v255 = *a3;
  v256 = v34;
  sub_22E4D7B28(v16, (uint64_t)&v255, *(_DWORD *)(a2 + 4), (uint64_t)&v265);
  v254 = (uint64_t *)v265;
  v253 = (uint64_t *)v265;
  v35 = *a1;
  v36 = sub_22F10ACF8(*v13);
  *(_QWORD *)&v255 = sub_22E5DE820(*(_QWORD *)(v35 + 144), v36);
  *((_QWORD *)&v255 + 1) = v37;
  v38 = (uint64_t *)sub_22E622648(v35, &v255, v254);
  v39 = 0;
LABEL_37:
  v254 = v38;
  v58 = *v13;
  v59 = *(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (!a4 || (*(_QWORD *)v59 ? (v60 = (*(_DWORD *)(*(_QWORD *)v59 + 16) & 0xFF800FF) == 87031819) : (v60 = 0), !v60))
  {
    v61 = *(_QWORD *)v59;
    v62 = *(_DWORD *)(*(_QWORD *)v59 + 16);
    if (*(_QWORD *)v59)
      v63 = v62 == 11;
    else
      v63 = 0;
    if (!v63)
    {
      if (v61 && v62 == 44)
      {
        v64 = sub_22F114198(*(_QWORD *)(v61 + 24));
        if ((*(_BYTE *)(v64 + 74) & 1) != 0 || *(_QWORD *)(v64 + 128) > 7uLL)
        {
          v65 = sub_22F114198(*(_QWORD *)(v61 + 24));
          v58 = *v13;
          if ((*(_BYTE *)(v65 + 76) & 0x80) != 0)
            goto LABEL_68;
LABEL_56:
          if (!sub_22F1124D8(v58))
            goto LABEL_138;
          v67 = sub_22EF6A4D4(*(uint64_t **)(*(_QWORD *)(*a1 + 144) + 144), v236);
          v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 8);
          v69 = v13[1];
          v70 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
          v71 = *(_DWORD *)(v70 + 16);
          if (v70 && v71 == 11)
          {
            if (((*(_DWORD *)(v70 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_138;
          }
          else if (v70 && v71 == 44)
          {
            v72 = sub_22F114198(*(_QWORD *)(v70 + 24));
            if ((*(_BYTE *)(v72 + 74) & 1) == 0 && *(_QWORD *)(v72 + 128) <= 7uLL
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v70 + 24)) + 76) & 0x80) != 0)
            {
              goto LABEL_138;
            }
          }
          else if (v71 != 9)
          {
            goto LABEL_138;
          }
          v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v90 = *(_DWORD *)(v89 + 16);
          if (v89 && v90 == 11)
          {
            v91 = ((*(_DWORD *)(v89 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
          }
          else
          {
            if (v89 && v90 == 44)
            {
              v92 = sub_22F114198(*(_QWORD *)(v89 + 24));
              if ((*(_BYTE *)(v92 + 74) & 1) == 0 && *(_QWORD *)(v92 + 128) < 8uLL)
                goto LABEL_138;
              v93 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v89 + 24)) + 76) & 0x80) == 0;
            }
            else
            {
              v93 = v90 == 9;
            }
            v91 = v93;
          }
          if ((*(_BYTE *)(*a1 + 1871) & 0xA) != 0 && (v69 | v236 & 7) != (v68 | v67 & 7) && v91)
          {
            v254 = (uint64_t *)sub_22E50EA80(a1, (llvm::Value *)v254, v236, v67, *(_DWORD *)(a2 + 4), 0);
            v122 = 1;
            v123 = llvm::ConstantInt::get();
            v124 = a1[1];
            v125 = "dec";
            if (a4)
              v125 = "inc";
            BYTE1(v267) = 1;
            if (*v125)
            {
              *(_QWORD *)&v265 = v125;
              v122 = 3;
            }
            LOBYTE(v267) = v122;
            v126 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v124 + 72) + 16))(*(_QWORD *)(v124 + 72), v254, v123, 0, 0);
            if (!v126)
            {
              LOWORD(v257) = 257;
              v127 = llvm::BinaryOperator::Create();
              v126 = (uint64_t *)sub_22E3C12C8((uint64_t *)v124, v127, (uint64_t)&v265);
            }
            v254 = v126;
            v66 = (uint64_t *)sub_22E50EA80(a1, (llvm::Value *)v126, v67, v236, *(_DWORD *)(a2 + 4), (*(_QWORD *)(*a1 + 1864) >> 43) & 0x10000 | (((*(_QWORD *)(*a1 + 1864) & 0x300000000000000) != 0) << 8));
            goto LABEL_194;
          }
LABEL_138:
          if ((*(_BYTE *)(a2 + 2) & 0x80) == 0)
          {
LABEL_139:
            v128 = 1;
            v94 = llvm::ConstantInt::get();
            v95 = a1[1];
            v97 = v254;
            v129 = "dec";
            if (a4)
              v129 = "inc";
            BYTE1(v267) = 1;
            if (*v129)
            {
              *(_QWORD *)&v265 = v129;
              v128 = 3;
            }
            LOBYTE(v267) = v128;
LABEL_144:
            v66 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v95 + 72) + 16))(*(_QWORD *)(v95 + 72), v97, v94, 0, 0);
            if (v66)
              goto LABEL_194;
            LOWORD(v257) = 257;
            v130 = llvm::BinaryOperator::Create();
            v131 = (uint64_t *)v95;
LABEL_146:
            v66 = (uint64_t *)sub_22E3C12C8(v131, v130, (uint64_t)&v265);
            goto LABEL_194;
          }
          if (sub_22F110A40(*v13))
          {
            v132 = v254;
            if (a4)
              v133 = "inc";
            else
              v133 = "dec";
            v134 = llvm::ConstantInt::get();
            v135 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152);
            v136 = (*(unsigned __int16 *)(v135 + 248) >> 10) & 3;
            if (v136)
            {
              if (v136 != 2)
              {
                v137 = a1[1];
                LOWORD(v267) = 261;
                *(_QWORD *)&v265 = v133;
                *((_QWORD *)&v265 + 1) = 3;
                v66 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v137 + 72) + 16))(*(_QWORD *)(v137 + 72), v254, v134, 0, 0);
                if (v66)
                  goto LABEL_194;
                LOWORD(v257) = 257;
                v130 = llvm::BinaryOperator::Create();
                v131 = (uint64_t *)v137;
                goto LABEL_146;
              }
            }
            else if ((*(_BYTE *)(*a1 + 1868) & 0x20) == 0)
            {
LABEL_161:
              v138 = a1[1];
              LOWORD(v257) = 261;
              *(_QWORD *)&v255 = v133;
              *((_QWORD *)&v255 + 1) = 3;
              v66 = (uint64_t *)sub_22E520468(v138, (uint64_t)v254, v134, (uint64_t)&v255);
              goto LABEL_194;
            }
            if ((*(_BYTE *)(a2 + 2) & 0x80) == 0)
              goto LABEL_161;
          }
          else
          {
            if ((*(_BYTE *)(a2 + 2) & 0x80) == 0 || !sub_22F110B50(*v13) || (*(_BYTE *)(*a1 + 1869) & 2) == 0)
              goto LABEL_139;
            v132 = v254;
            v135 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152);
          }
          v170 = sub_22F2641E4(a2, v135);
          *(_QWORD *)&v255 = v132;
          v171 = llvm::ConstantInt::get();
          v172 = *(_QWORD *)(a2 + 8);
          *((_QWORD *)&v255 + 1) = v171;
          *(_QWORD *)&v256 = v172;
          if (a4)
            v173 = 5;
          else
            v173 = 6;
          *((_QWORD *)&v256 + 1) = __PAIR64__(v170, v173);
          *(_QWORD *)&v257 = a2;
          v66 = (uint64_t *)sub_22E51FF00(a1, (uint64_t)&v255);
          goto LABEL_194;
        }
        v58 = *v13;
      }
      else if (v62 == 9)
      {
        goto LABEL_56;
      }
LABEL_68:
      v73 = a4 ^ 1;
      if (v58 && *(_BYTE *)(v58 + 16) == 39)
        goto LABEL_72;
      v74 = *(_QWORD *)(v58 + 8);
      v75 = *(unsigned __int8 *)(*(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v75 == 39)
      {
        v58 = sub_22F10CF48(v58);
        if (v58)
        {
LABEL_72:
          v76 = *(_QWORD *)(v58 + 32);
          v77 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), v76);
          if (v77)
          {
            v79 = v77;
            if (*(_BYTE *)(v77 + 16) == 5)
            {
              v149 = (uint64_t *)sub_22F297878(*a1, v77);
              *(_QWORD *)&v265 = v149;
              if ((a4 & 1) == 0)
              {
                v150 = a1[1];
                *(_QWORD *)&v255 = "vla.negsize";
                LOWORD(v257) = 259;
                v149 = (uint64_t *)sub_22E42E798(v150, (uint64_t)v149, (uint64_t)&v255, 0, 1);
                *(_QWORD *)&v265 = v149;
              }
              v81 = sub_22E66C868(*(_QWORD *)(*a1 + 144) + 280, *(_QWORD *)(v79 + 32), 0);
              v82 = *a1;
              if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 248) & 0xC00) == 0x400)
              {
                v83 = (uint64_t *)a1[1];
                v84 = v254;
                *(_QWORD *)&v255 = "vla.inc";
                LOWORD(v257) = 259;
                v85 = v149;
                goto LABEL_77;
              }
              v86 = v254;
              v87 = *(_DWORD *)(a2 + 4);
              v88 = "vla.inc";
LABEL_79:
              *(_QWORD *)&v255 = v88;
              LOWORD(v257) = 259;
              v66 = (uint64_t *)sub_22E513CE8(v82, v81, v86, (uint64_t **)&v265, 1, 0, v73, v87, (uint64_t)&v255);
              goto LABEL_194;
            }
          }
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 > 1)
          {
            llvm::Type::getInt32Ty(*(llvm::Type **)(a1[1] + 64), v78);
            v80 = llvm::ConstantInt::get();
            *(_QWORD *)&v265 = v80;
            v81 = sub_22E66C868(*(_QWORD *)(*a1 + 144) + 280, v76, 0);
            v82 = *a1;
            if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 248) & 0xC00) == 0x400)
            {
              v83 = (uint64_t *)a1[1];
              v84 = v254;
              *(_QWORD *)&v255 = "incdec.ptr";
              LOWORD(v257) = 259;
              v85 = (uint64_t *)v80;
LABEL_77:
              v66 = (uint64_t *)sub_22E42129C(v83, v81, v84, v85, (uint64_t)&v255);
              goto LABEL_194;
            }
            v86 = v254;
            v87 = *(_DWORD *)(a2 + 4);
            v88 = "incdec.ptr";
            goto LABEL_79;
          }
          llvm::Type::getInt32Ty(*(llvm::Type **)(a1[1] + 64), v78);
          v139 = llvm::ConstantInt::get();
          *(_QWORD *)&v265 = v139;
          v140 = (uint64_t *)sub_22F25E214((_QWORD *)*a1, v254);
          v254 = v140;
          v141 = *a1;
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 248) & 0xC00) != 0x400)
          {
            v151 = *(_QWORD *)(v141 + 8);
            v152 = *(_DWORD *)(a2 + 4);
            *(_QWORD *)&v255 = "incdec.funcptr";
            LOWORD(v257) = 259;
            v153 = (uint64_t *)sub_22E513CE8(v141, v151, v140, (uint64_t **)&v265, 1, 0, a4 ^ 1u, v152, (uint64_t)&v255);
LABEL_193:
            v176 = (uint64_t)v153;
            v254 = v153;
            v177 = (uint64_t *)a1[1];
            v178 = *v253;
            LOWORD(v257) = 257;
            v66 = (uint64_t *)sub_22E3C1740(v177, 49, v176, v178, (uint64_t)&v255);
            goto LABEL_194;
          }
          v142 = (uint64_t *)a1[1];
          v143 = *(_QWORD *)(v141 + 8);
          *(_QWORD *)&v255 = "incdec.funcptr";
          LOWORD(v257) = 259;
          v144 = v142;
          v145 = (uint64_t *)v139;
LABEL_185:
          v153 = (uint64_t *)sub_22E42129C(v144, v143, v140, v145, (uint64_t)&v255);
          goto LABEL_193;
        }
        v58 = *v13;
        v74 = *(_QWORD *)(*v13 + 8);
        v75 = *(unsigned __int8 *)(*(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if ((v75 - 55) <= 1)
      {
        if (!sub_22F1105F0(v58))
        {
          v109 = a1[1];
          v110 = llvm::ConstantFP::get();
          v111 = "inc";
          if (!a4)
            v111 = "dec";
          v112 = 1;
          BYTE1(v257) = 1;
          if (*v111)
          {
            *(_QWORD *)&v255 = v111;
            v112 = 3;
          }
          LOBYTE(v257) = v112;
          v66 = (uint64_t *)sub_22E42067C(v109, (uint64_t)v254, v110, (uint64_t)&v255, 0);
          goto LABEL_194;
        }
        v94 = llvm::ConstantInt::get();
        v95 = a1[1];
        v96 = "inc";
        v97 = v254;
        if (!a4)
          v96 = "dec";
        v98 = 1;
        BYTE1(v267) = 1;
        if (*v96)
        {
          *(_QWORD *)&v265 = v96;
          v98 = 3;
        }
        LOBYTE(v267) = v98;
        goto LABEL_144;
      }
      v99 = *(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0);
      if (v99)
      {
        v100 = *(_DWORD *)(v99 + 16);
        if (v100 == 11)
        {
          v101 = (v100 >> 19) & 0x1FE;
          if ((v101 - 210) <= 7)
          {
            *(_QWORD *)&v255 = *a1;
            DWORD2(v255) = 4;
            LOBYTE(v256) = 0;
            LOBYTE(v258) = 0;
            v102 = sub_22F0013BC((unsigned int *)a2, *(_QWORD *)(*(_QWORD *)(v255 + 144) + 152));
            sub_22E61990C((uint64_t)&v255, v102);
            v103 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v103)
            {
              if ((*(_DWORD *)(v103 + 16) & 0xFF800FF) == 0x690000B)
              {
                v104 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
                if ((*(_BYTE *)(*(_QWORD *)(v104 + 2000) + 68) & 8) == 0)
                {
                  v105 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v104 + 15088) + 248))(*(_QWORD *)(v104 + 15088));
                  v106 = (uint64_t *)a1[1];
                  if (v105)
                  {
                    Declaration = llvm::Intrinsic::getDeclaration();
                    if (Declaration)
                      v108 = *(_QWORD *)(Declaration + 24);
                    else
                      v108 = 0;
                    *(_QWORD *)&v265 = "incdec.conv";
                    LOWORD(v267) = 259;
                    v169 = (uint64_t *)sub_22E462B78(v106, v108, Declaration, (uint64_t)&v253, 1, (uint64_t)&v265, 0);
                  }
                  else
                  {
                    v168 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 56);
                    *(_QWORD *)&v265 = "incdec.conv";
                    LOWORD(v267) = 259;
                    v169 = (uint64_t *)sub_22E3E6054((uint64_t)v106, (uint64_t)v253, v168, (uint64_t)&v265);
                  }
                  v254 = v169;
                }
              }
            }
            v210 = *(unsigned __int8 *)(*v254 + 8);
            if (v210 == 3)
            {
              v213 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v264, (double)v232);
              v212 = llvm::APFloatBase::IEEEdouble(v213);
            }
            else
            {
              if (v210 != 2)
              {
                v215 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v264, (float)v232);
                v216 = llvm::APFloatBase::IEEEsingle(v215);
                MEMORY[0x23489F4E0]((char *)&v265 + 8, v264, v216);
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v264);
                LOBYTE(v264[0]) = 0;
                llvm::APFloat::convert();
                v217 = (llvm::APFloatBase *)llvm::ConstantFP::get();
                v218 = *((_QWORD *)&v265 + 1);
                if (llvm::APFloatBase::PPCDoubleDouble(v217) != v218)
                  goto LABEL_221;
                goto LABEL_238;
              }
              v211 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v264, (float)v232);
              v212 = llvm::APFloatBase::IEEEsingle(v211);
            }
            MEMORY[0x23489F4E0]((char *)&v265 + 8, v264, v212);
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v264);
            v217 = (llvm::APFloatBase *)llvm::ConstantFP::get();
            v214 = *((_QWORD *)&v265 + 1);
            if (llvm::APFloatBase::PPCDoubleDouble(v217) != v214)
            {
LABEL_221:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v265 + 8));
LABEL_222:
              v219 = a1[1];
              v220 = "inc";
              if (!a4)
                v220 = "dec";
              v221 = 1;
              BYTE1(v267) = 1;
              if (*v220)
              {
                *(_QWORD *)&v265 = v220;
                v221 = 3;
              }
              LOBYTE(v267) = v221;
              v254 = (uint64_t *)sub_22E42067C(v219, (uint64_t)v254, (uint64_t)v217, (uint64_t)&v265, 0);
              v222 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v222)
              {
                if ((*(_DWORD *)(v222 + 16) & 0xFF800FF) == 0x690000B)
                {
                  v223 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
                  if ((*(_BYTE *)(*(_QWORD *)(v223 + 2000) + 68) & 8) == 0)
                  {
                    v224 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v223 + 15088) + 248))(*(_QWORD *)(v223 + 15088));
                    v225 = (uint64_t *)a1[1];
                    if (v224)
                    {
                      v226 = llvm::Intrinsic::getDeclaration();
                      if (v226)
                        v227 = *(_QWORD *)(v226 + 24);
                      else
                        v227 = 0;
                      *(_QWORD *)&v265 = "incdec.conv";
                      LOWORD(v267) = 259;
                      v229 = (uint64_t *)sub_22E462B78(v225, v227, v226, (uint64_t)&v254, 1, (uint64_t)&v265, 0);
                    }
                    else
                    {
                      v228 = *v253;
                      *(_QWORD *)&v265 = "incdec.conv";
                      LOWORD(v267) = 259;
                      v229 = (uint64_t *)sub_22E3E5FFC((uint64_t)v225, (uint64_t)v254, v228, (uint64_t)&v265);
                    }
                    v254 = v229;
                  }
                }
              }
              v230 = v255;
              *(_DWORD *)(v255 + 2788) = DWORD2(v255);
              *(_WORD *)(v230 + 373) = WORD6(v255);
              if ((_BYTE)v258)
              {
                v231 = v256;
                *(_DWORD *)(v256 + 96) = DWORD2(v256);
                *(_QWORD *)(v231 + 88) = v257;
                *(_BYTE *)(v231 + 100) = BYTE8(v257);
                *(_WORD *)(v231 + 101) = *(_WORD *)((char *)&v257 + 9);
              }
              goto LABEL_195;
            }
LABEL_238:
            sub_22E463170((llvm::APFloatBase *)&v266);
            goto LABEL_222;
          }
          if ((v101 - 186) <= 0x17)
          {
            *(_QWORD *)&v257 = a2;
            v113 = *(_QWORD *)(a2 + 8);
            if (a4)
              v114 = 5;
            else
              v114 = 6;
            *((_QWORD *)&v256 + 1) = v114 | 0x400000000;
            *(_QWORD *)&v256 = v113;
            *(_QWORD *)&v255 = v254;
            v115 = (llvm::Type **)llvm::ConstantInt::get();
            v116 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v116)
            {
              v117 = *(_DWORD *)(v116 + 16);
              if (v117 == 11)
              {
                if ((v118 = (v117 >> 19) & 0x1FF, (v118 - 186) <= 0xE)
                  && ((1 << (v118 + 70)) & 0x71C7) != 0
                  || (v118 - 204) <= 2)
                {
                  if (a4)
                    v119 = 6;
                  else
                    v119 = 5;
                  DWORD2(v256) = v119;
                  v120 = a1[1];
                  LOWORD(v267) = 257;
                  v115 = (llvm::Type **)sub_22E42E798(v120, (uint64_t)v115, (uint64_t)&v265, 0, 0);
                }
              }
            }
            v121 = *a1;
            *(_QWORD *)&v265 = a1[1];
            v251 = sub_22EF74318(*(_QWORD *)(*(_QWORD *)(v121 + 144) + 144), v113);
            v264[0] = (unsigned __int16)llvm::Type::getScalarSizeInBits(*v115) | 0x20000000;
            *((_QWORD *)&v255 + 1) = sub_22E51B708((uint64_t *)&v265, v115, v264, &v251, 0);
            v66 = (uint64_t *)sub_22E51B474(a1, (uint64_t)&v255);
            goto LABEL_194;
          }
        }
      }
      if (*(_BYTE *)(v58 + 16) != 32)
        v58 = sub_22F10CF48(v58);
      v254 = (uint64_t *)sub_22F25E214((_QWORD *)*a1, v254);
      v164 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
      v165 = *(_QWORD *)(*(_QWORD *)(v58 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v165 || *(unsigned __int8 *)(v165 + 16) - 35 <= 0xFFFFFFFD)
        v165 = sub_22F10CF48(v165);
      sub_22EF5CCD0(v164, v165, (uint64_t)&v255);
      v145 = (uint64_t *)llvm::ConstantInt::get();
      *(_QWORD *)&v265 = v145;
      v166 = *a1;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 248) & 0xC00) != 0x400)
      {
        v174 = *(_QWORD *)(v166 + 8);
        v175 = *(_DWORD *)(a2 + 4);
        *(_QWORD *)&v255 = "incdec.objptr";
        LOWORD(v257) = 259;
        v153 = (uint64_t *)sub_22E513CE8(v166, v174, v254, (uint64_t **)&v265, 1, 0, a4 ^ 1u, v175, (uint64_t)&v255);
        goto LABEL_193;
      }
      v167 = (uint64_t *)a1[1];
      v143 = *(_QWORD *)(v166 + 8);
      v140 = v254;
      *(_QWORD *)&v255 = "incdec.objptr";
      LOWORD(v257) = 259;
      v144 = v167;
      goto LABEL_185;
    }
    if (((v62 >> 19) & 0x1FE) - 166 >= 0x14)
      goto LABEL_68;
    goto LABEL_56;
  }
  v66 = (uint64_t *)llvm::ConstantInt::getTrue();
LABEL_194:
  v254 = v66;
LABEL_195:
  if (v39)
  {
    v194 = *(_QWORD *)(a1[1] + 48);
    *(_QWORD *)&v255 = "atomic_cont";
    LOWORD(v257) = 259;
    v195 = operator new();
    llvm::BasicBlock::BasicBlock();
    v196 = *a1;
    v197 = sub_22F10ACF8(*v13);
    v254 = (uint64_t *)sub_22E6223E4(v196, v197, (uint64_t)v254);
    v198 = *a1;
    v199 = a3[7];
    v249[6] = a3[6];
    v249[7] = v199;
    v250 = *((_QWORD *)a3 + 16);
    v200 = a3[3];
    v249[2] = a3[2];
    v249[3] = v200;
    v201 = a3[5];
    v249[4] = a3[4];
    v249[5] = v201;
    v202 = a3[1];
    v249[0] = *a3;
    v249[1] = v202;
    v247 = (unint64_t)v39;
    v248 = 0;
    v245 = (unint64_t)v254;
    v246 = 0;
    sub_22F245468(v198, (int *)v249, &v247, &v245, 7, 7, 0, (uint64_t)&v255);
    v203 = sub_22E4E7F50(*a1, v255, v236);
    v204 = *((_QWORD *)&v258 + 1);
    sub_22E3C4C50(v39, v203, v194);
    v205 = (uint64_t *)a1[1];
    v206 = *((_QWORD *)v39 + 5);
    v207 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v207, v195, v206, v204, 0);
    LOWORD(v267) = 257;
    sub_22E3C12C8(v205, v207, (uint64_t)&v265);
    v208 = a1[1];
    *(_QWORD *)(v208 + 48) = v195;
    *(_QWORD *)(v208 + 56) = v195 + 40;
    v209 = (uint64_t *)&v253;
    if (v233)
      v209 = (uint64_t *)&v254;
    v30 = *v209;
    v10 = v234;
  }
  else
  {
    v179 = *a1;
    v180 = sub_22F10ACF8(*v13);
    v181 = (uint64_t *)sub_22E6223E4(v179, v180, (uint64_t)v254);
    v254 = v181;
    v182 = *a1;
    if (*(_DWORD *)a3 == 2)
    {
      v243[0] = (uint64_t)v181;
      v243[1] = 0;
      v244 = 0;
      v183 = a3[7];
      v241[6] = a3[6];
      v241[7] = v183;
      v242 = *((_QWORD *)a3 + 16);
      v184 = a3[3];
      v241[2] = a3[2];
      v241[3] = v184;
      v185 = a3[5];
      v241[4] = a3[4];
      v241[5] = v185;
      v186 = a3[1];
      v241[0] = *a3;
      v241[1] = v186;
      sub_22E4E9128(v182, v243, (uint64_t)v241, (uint64_t *)&v254);
    }
    else
    {
      v239[0] = v181;
      v239[1] = 0;
      v240 = 0;
      v187 = a3[7];
      v237[6] = a3[6];
      v237[7] = v187;
      v238 = *((_QWORD *)a3 + 16);
      v188 = a3[3];
      v237[2] = a3[2];
      v237[3] = v188;
      v189 = a3[5];
      v237[4] = a3[4];
      v237[5] = v189;
      v190 = a3[1];
      v237[0] = *a3;
      v237[1] = v190;
      sub_22E4DAAE0(v182, v239, v237, 0, *(double *)&v190);
    }
    v10 = v234;
    v191 = (uint64_t *)&v253;
    if (v233)
      v191 = (uint64_t *)&v254;
    v30 = *v191;
  }
LABEL_202:
  v192 = v10[18];
  if (*(_DWORD *)(*(_QWORD *)(v192 + 152) + 72))
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(v192 + 808) + 616))(*(_QWORD *)(v192 + 808), v10, *(_QWORD *)(a2 + 16));
  return v30;
}

void sub_22E51186C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[6];
  _OWORD v29[2];
  uint64_t v30;
  __int128 v31[2];
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v6 + 1) & 3) != 0)
  {
    sub_22E4D8D7C(&v25);
    v7 = *((_QWORD *)&v25 + 1);
    v8 = v26;
    v9 = v27;
    v10 = *(_QWORD *)&v28[0];
    v11 = *(_OWORD *)((char *)v28 + 8);
  }
  else
  {
    v12 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0));
    v8 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v12, 0);
    *(_QWORD *)&v25 = a1;
    *((_QWORD *)&v25 + 1) = a1 + 272;
    LOBYTE(v26) = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v7 = sub_22E50E974(&v25, v6, v13);
    v9 = *(unsigned __int8 *)(a1 + 130);
    v10 = 0;
    v11 = 0uLL;
  }
  *(_QWORD *)&v21 = v7;
  *((_QWORD *)&v21 + 1) = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  v14 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
  LOWORD(v32) = 257;
  sub_22E3BEE6C((uint64_t *)(a1 + 272), &v21, v14, (uint64_t)v31, (uint64_t)&v25);
  v15 = v26;
  v16 = v27;
  v19 = v25;
  v20 = v28[0];
  v17 = *(_QWORD *)(a2 + 8);
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v17, (uint64_t)v29);
  v25 = v19;
  v26 = v15;
  v27 = v16;
  v28[0] = v20;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v31[0] = v29[0];
  v31[1] = v29[1];
  v32 = v30;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 84) = 2;
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  sub_22E3C113C(a3, &v25, v17, 2, v31, v18);
}

void sub_22E511A28(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5[2];
  char v6;
  uint64_t v7;

  v5[0] = a1;
  v5[1] = a1 + 272;
  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v4 = 0;
  v3 = (*a2 >> 18) & 0x3F;
  if (v3 != 25)
    __asm { BR              X11 }
  sub_22E511B30(v5, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))sub_22E512C30, 0, &v4, a3);
}

void sub_22E511AAC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511ABC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511ACC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511ADC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511AEC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511AFC()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511B0C()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511B1C()
{
  JUMPOUT(0x22E511A6CLL);
}

void sub_22E511B30(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD *, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  llvm::LLVMContext *v15;
  __n128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  llvm::PHINode *v30;
  llvm::PHINode *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v80;
  _OWORD v82[8];
  uint64_t v83;
  _QWORD v84[6];
  char v85;
  _OWORD v86[8];
  uint64_t v87;
  uint64_t v88[6];
  char v89;
  __int128 v90;
  char v91;
  __int128 v92;
  char v93;
  _OWORD v94[8];
  uint64_t v95;
  _QWORD v96[3];
  int v97;
  unsigned int v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  llvm::PHINode *v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  __int16 v116;
  char v117;
  char v118[32];
  __int16 v119;

  v10 = *(_QWORD *)(a2 + 40);
  v11 = *a1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    sub_22F262B8C(v11, a2);
    return;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v13 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 144), v10);
  if (v13 <= 0xF)
    v13 = *(_QWORD *)(a2 + 40);
  v14 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(a2 + 32));
  v15 = (llvm::LLVMContext *)sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
  if ((unint64_t)v15 >= 0x10)
    v17 = sub_22E50FD80(*a1, *(unsigned __int8 **)(a2 + 24), v15, v16);
  else
    v17 = sub_22E50E974(a1, *(_QWORD *)(a2 + 24), v16);
  v96[1] = v17;
  v96[2] = v13;
  v18 = (*(_DWORD *)a2 >> 18) & 0x3F;
  v97 = v18;
  v80 = sub_22E51A864((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152));
  v98 = v80;
  v99 = a2;
  sub_22E4E0888(*a1, *(unsigned __int8 **)(a2 + 16), 1u, a6);
  v19 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (v19 && *(_BYTE *)(v19 + 16) == 6
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
    && (v19 = sub_22F10CF48(v19)) != 0)
  {
    v77 = v14;
    v78 = v12;
    v20 = *(_QWORD *)(v19 + 32);
    v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    if (v22)
      v24 = (v23 & 0xFF800FF) == 87031819;
    else
      v24 = 0;
    if (v24)
      goto LABEL_29;
    v25 = *(_DWORD *)(v22 + 16);
    if (v25 != 9)
    {
      if (v25 == 44)
      {
        v32 = sub_22F114198(*(_QWORD *)(v22 + 24));
        if ((*(_BYTE *)(v32 + 74) & 1) == 0 && *(_QWORD *)(v32 + 128) < 8uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v22 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_29;
        }
        v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
      }
      else if (v25 != 11 || ((v23 >> 19) & 0x1FE) - 166 >= 0x14)
      {
LABEL_29:
        v35 = *(_QWORD *)(a1[1] + 48);
        *(_QWORD *)&v100 = "atomic_op";
        LOWORD(v102) = 259;
        v36 = operator new();
        llvm::BasicBlock::BasicBlock();
        v37 = *(_OWORD *)(a6 + 112);
        v106 = *(_OWORD *)(a6 + 96);
        v107 = v37;
        v108 = *(_QWORD *)(a6 + 128);
        v38 = *(_OWORD *)(a6 + 48);
        v102 = *(_OWORD *)(a6 + 32);
        v103 = v38;
        v39 = *(_OWORD *)(a6 + 80);
        v104 = *(_OWORD *)(a6 + 64);
        v105 = v39;
        v40 = *(_OWORD *)(a6 + 16);
        v100 = *(_OWORD *)a6;
        v101 = v40;
        sub_22E4D7B28((_QWORD *)*a1, (uint64_t)&v100, *(_DWORD *)(a2 + 4), (uint64_t)&v109);
        v41 = (uint64_t *)sub_22E4E7F50(*a1, (uint64_t)v109, v20);
        v96[0] = v41;
        v42 = (uint64_t *)a1[1];
        v43 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        LOWORD(v102) = 257;
        sub_22E3C12C8(v42, v43, (uint64_t)&v100);
        v44 = a1[1];
        *(_QWORD *)(v44 + 48) = v36;
        *(_QWORD *)(v44 + 56) = v36 + 40;
        v45 = (uint64_t *)a1[1];
        v46 = *v41;
        LOWORD(v102) = 257;
        v31 = (llvm::PHINode *)sub_22E3C4B80(v45, v46, 2, (uint64_t)&v100);
        sub_22E3C4C50(v31, (uint64_t)v41, v35);
        v30 = v31;
        v14 = v77;
        v12 = v78;
        goto LABEL_30;
      }
    }
    v33 = sub_22F110B50(v21);
    v34 = *a1;
    if ((!v33 || (*(_BYTE *)(v34 + 1869) & 2) == 0)
      && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 144) + 152) + 248) & 0xC00) != 0x800)
    {
      __asm { BR              X10 }
    }
    goto LABEL_29;
  }
  v26 = *(_OWORD *)(a6 + 112);
  v106 = *(_OWORD *)(a6 + 96);
  v107 = v26;
  v108 = *(_QWORD *)(a6 + 128);
  v27 = *(_OWORD *)(a6 + 48);
  v102 = *(_OWORD *)(a6 + 32);
  v103 = v27;
  v28 = *(_OWORD *)(a6 + 80);
  v104 = *(_OWORD *)(a6 + 64);
  v105 = v28;
  v29 = *(_OWORD *)(a6 + 16);
  v100 = *(_OWORD *)a6;
  v101 = v29;
  sub_22E4D7B28((_QWORD *)*a1, (uint64_t)&v100, *(_DWORD *)(a2 + 4), (uint64_t)&v109);
  v30 = 0;
  v31 = v109;
LABEL_30:
  v109 = (llvm::PHINode *)*a1;
  v110 = 4;
  LOBYTE(v112) = 0;
  v117 = 0;
  sub_22E61990C((uint64_t)&v109, v80);
  v47 = *(_DWORD *)(a2 + 4);
  if (v14 <= 0xF)
    v14 = *(_QWORD *)(a2 + 32);
  v96[0] = sub_22E50EA80(a1, v31, v12, v14, *(_DWORD *)(a2 + 4), 0);
  v48 = (uint64_t *)((char *)a1 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v49 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*v48 + a3))(v48, v96);
  else
    v49 = (llvm::Value *)a3(v48, v96);
  *a5 = (uint64_t)v49;
  v50 = sub_22E50EA80(a1, v49, v13, v12, v47, (*(_QWORD *)(*a1 + 1864) >> 43) & 0x10000 | (((*(_QWORD *)(*a1 + 1864) & 0x300000000000000) != 0) << 8));
  *a5 = (uint64_t)v50;
  if (v30)
  {
    v63 = *(_QWORD *)(a1[1] + 48);
    *(_QWORD *)&v100 = "atomic_cont";
    LOWORD(v102) = 259;
    v64 = operator new();
    llvm::BasicBlock::BasicBlock();
    v65 = *a1;
    v66 = *(_OWORD *)(a6 + 112);
    v94[6] = *(_OWORD *)(a6 + 96);
    v94[7] = v66;
    v95 = *(_QWORD *)(a6 + 128);
    v67 = *(_OWORD *)(a6 + 48);
    v94[2] = *(_OWORD *)(a6 + 32);
    v94[3] = v67;
    v68 = *(_OWORD *)(a6 + 80);
    v94[4] = *(_OWORD *)(a6 + 64);
    v94[5] = v68;
    v69 = *(_OWORD *)(a6 + 16);
    v94[0] = *(_OWORD *)a6;
    v94[1] = v69;
    v92 = (unint64_t)v30;
    v93 = 0;
    v90 = (unint64_t)*a5;
    v91 = 0;
    sub_22F245468(v65, (int *)v94, &v92, &v90, 7, 7, 0, (uint64_t)&v100);
    v70 = sub_22E4E7F50(*a1, v100, v12);
    v71 = *((_QWORD *)&v103 + 1);
    sub_22E3C4C50(v30, v70, v63);
    v72 = (uint64_t *)a1[1];
    v73 = *((_QWORD *)v30 + 5);
    v74 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v74, v64, v73, v71, 0);
    v119 = 257;
    sub_22E3C12C8(v72, v74, (uint64_t)v118);
    v75 = a1[1];
    *(_QWORD *)(v75 + 48) = v64;
    *(_QWORD *)(v75 + 56) = v64 + 40;
  }
  else
  {
    v51 = (uint64_t)v50;
    v52 = *a1;
    if (*(_DWORD *)a6 == 2)
    {
      v88[0] = v51;
      v88[1] = 0;
      v89 = 0;
      v53 = *(_OWORD *)(a6 + 112);
      v86[6] = *(_OWORD *)(a6 + 96);
      v86[7] = v53;
      v87 = *(_QWORD *)(a6 + 128);
      v54 = *(_OWORD *)(a6 + 48);
      v86[2] = *(_OWORD *)(a6 + 32);
      v86[3] = v54;
      v55 = *(_OWORD *)(a6 + 80);
      v86[4] = *(_OWORD *)(a6 + 64);
      v86[5] = v55;
      v56 = *(_OWORD *)(a6 + 16);
      v86[0] = *(_OWORD *)a6;
      v86[1] = v56;
      sub_22E4E9128(v52, v88, (uint64_t)v86, a5);
    }
    else
    {
      v84[0] = v51;
      v84[1] = 0;
      v85 = 0;
      v57 = *(_OWORD *)(a6 + 112);
      v82[6] = *(_OWORD *)(a6 + 96);
      v82[7] = v57;
      v83 = *(_QWORD *)(a6 + 128);
      v58 = *(_OWORD *)(a6 + 48);
      v82[2] = *(_OWORD *)(a6 + 32);
      v82[3] = v58;
      v59 = *(_OWORD *)(a6 + 80);
      v82[4] = *(_OWORD *)(a6 + 64);
      v82[5] = v59;
      v60 = *(_OWORD *)(a6 + 16);
      v82[0] = *(_OWORD *)a6;
      v82[1] = v60;
      sub_22E4DAAE0(v52, v84, v82, 0, *(double *)&v60);
    }
    v61 = *(_QWORD *)(*a1 + 144);
    if (*(_DWORD *)(*(_QWORD *)(v61 + 152) + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 808) + 616))(*(_QWORD *)(v61 + 808));
  }
  v62 = (uint64_t)v109;
  *((_DWORD *)v109 + 697) = v110;
  *(_WORD *)(v62 + 373) = v111;
  if (v117)
  {
    v76 = v112;
    *(_DWORD *)(v112 + 96) = v113;
    *(_QWORD *)(v76 + 88) = v114;
    *(_BYTE *)(v76 + 100) = v115;
    *(_WORD *)(v76 + 101) = v116;
  }
}

llvm::Instruction *sub_22E512324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  llvm::Instruction *result;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  const char *v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  char v46;
  uint64_t *v47;

  if (!sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0)))
    goto LABEL_6;
  v4 = *(_QWORD *)(*a1 + 144);
  v5 = (*(unsigned __int16 *)(*(_QWORD *)(v4 + 152) + 248) >> 10) & 3;
  switch(v5)
  {
    case 0:
      if ((*(_BYTE *)(*a1 + 1868) & 0x20) == 0)
        goto LABEL_23;
      goto LABEL_22;
    case 2:
LABEL_22:
      if (!sub_22E520888(*(_QWORD *)(v4 + 144), a2))
        return (llvm::Instruction *)sub_22E51FF00(a1, a2);
LABEL_23:
      v6 = a1[1];
      v7 = *(_QWORD **)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v38 = "mul";
      LOWORD(v43) = 259;
      v20 = 1;
      return sub_22E3BDEA8(v6, (uint64_t)v7, v8, (uint64_t)&v38, 0, v20);
    case 1:
      v6 = a1[1];
      v7 = *(_QWORD **)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v38 = "mul";
      LOWORD(v43) = 259;
LABEL_20:
      v20 = 0;
      return sub_22E3BDEA8(v6, (uint64_t)v7, v8, (uint64_t)&v38, 0, v20);
  }
LABEL_6:
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
  {
    v21 = *a1;
    v47 = (uint64_t *)a1[1];
    v22 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(v22 + 16);
    v23 = *(_QWORD *)(v22 + 24);
    v25 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v25 + 16) == 29)
      v26 = v25;
    else
      v26 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v27 + 16) == 29)
      v28 = v27;
    else
      v28 = 0;
    v29 = *(_DWORD *)(a2 + 28);
    v38 = (const char *)v21;
    v39 = 4;
    LOBYTE(v41) = 0;
    v46 = 0;
    sub_22E61990C((uint64_t)&v38, v29);
    v30 = *(_QWORD *)a2;
    v31 = *(_QWORD *)(a2 + 8);
    if (v26)
      v32 = v28 == 0;
    else
      v32 = 1;
    if (v32)
    {
      result = sub_22F264768((uint64_t *)&v47, v30, v31);
    }
    else
    {
      v33 = *(unsigned int *)(v26 + 40);
      v34 = *(unsigned int *)(v26 + 44);
      v35 = *(unsigned int *)(v28 + 44);
      v37 = 257;
      result = sub_22F264628(&v47, v30, v31, v33, v34, v35, (uint64_t)v36);
    }
    goto LABEL_15;
  }
  if (sub_22F110B50(v9)
    && (*(_BYTE *)(*a1 + 1869) & 2) != 0
    && !sub_22E520888(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a2))
  {
    return (llvm::Instruction *)sub_22E51FF00(a1, a2);
  }
  v10 = *(_QWORD **)a2;
  v11 = **(_QWORD **)a2;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
    v12 = *(unsigned __int8 *)(**(_QWORD **)(v11 + 16) + 8);
  else
    v12 = *(_DWORD *)(v11 + 8);
  if (v12 > 6)
  {
    if (sub_22E51B3BC(*(unsigned __int8 **)(a2 + 32)))
      return sub_22E51B474(a1, a2);
    v6 = a1[1];
    v8 = *(_QWORD *)(a2 + 8);
    v38 = "mul";
    LOWORD(v43) = 259;
    v7 = v10;
    goto LABEL_20;
  }
  v13 = *(_DWORD *)(a2 + 28);
  v38 = (const char *)*a1;
  v39 = 4;
  LOBYTE(v41) = 0;
  v46 = 0;
  sub_22E61990C((uint64_t)&v38, v13);
  v14 = a1[1];
  v15 = *(_QWORD **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v36[0] = "mul";
  v37 = 259;
  result = (llvm::Instruction *)sub_22E4207BC(v14, (uint64_t)v15, v16, (uint64_t)v36, 0);
LABEL_15:
  v18 = v38;
  *((_DWORD *)v38 + 697) = v39;
  *(_WORD *)(v18 + 373) = v40;
  if (v46)
  {
    v19 = v41;
    *(_DWORD *)(v41 + 96) = v42;
    *(_QWORD *)(v19 + 88) = v43;
    *(_BYTE *)(v19 + 100) = v44;
    *(_WORD *)(v19 + 101) = v45;
  }
  return result;
}

llvm::Instruction *sub_22E51262C(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  llvm::Constant *v8;
  llvm::Type *v9;
  llvm::Constant **NullValue;
  uint64_t v11;
  llvm::LLVMContext *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::Constant *v19;
  llvm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  _BOOL4 v41;
  const char *v42;
  uint64_t v44;
  uint64_t v45[4];
  __int16 v46;
  const char *FCmpHelper;
  __int128 v48;
  int v49;
  uint64_t v50;
  char v51;
  __int16 v52;
  char v53;

  v3 = (uint64_t *)a1;
  v4 = *(_QWORD *)a1;
  *(_BYTE *)(v4 + 1880) = 1;
  if ((*(_QWORD *)(v4 + 1864) & 0x2000800000) == 0)
    goto LABEL_18;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = v6 == 11;
  else
    v7 = 0;
  if (v7)
  {
    if (((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_18;
  }
  else if (v5 && v6 == 44)
  {
    a1 = sub_22F114198(*(_QWORD *)(v5 + 24));
    if ((*(_BYTE *)(a1 + 74) & 1) == 0 && *(_QWORD *)(a1 + 128) <= 7uLL)
      goto LABEL_18;
    a1 = sub_22F114198(*(_QWORD *)(v5 + 24));
    if ((*(_BYTE *)(a1 + 76) & 0x80) != 0)
      goto LABEL_18;
  }
  else if (v6 != 9)
  {
    goto LABEL_18;
  }
  if (sub_22E520C44((uint64_t)a2[1], *((_DWORD *)a2 + 6)) || (a1 = sub_22E5209A0((uint64_t)a2), (_DWORD)a1))
  {
    v8 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*v3 + 144) + 280), (llvm::LLVMContext *)a2[2]);
    NullValue = (llvm::Constant **)llvm::Constant::getNullValue(v8, v9);
    sub_22E520CB8(v3, a2, NullValue);
    goto LABEL_34;
  }
LABEL_18:
  v11 = *v3;
  if ((*(_BYTE *)(*v3 + 1866) & 0x20) != 0)
  {
    v12 = (llvm::LLVMContext *)a2[2];
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v14 = v13 && *(_DWORD *)(v13 + 16) == 11;
    if (v14 && ((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      if ((v15 = *((_DWORD *)a2 + 6), v15 > 0x18)
        || ((1 << v15) & 0x1800018) == 0
        || (v16 = a2[1]) == 0
        || *((_BYTE *)v16 + 16) != 17
        || ((v17 = v16[4], llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v17)
          ? (v18 = (_QWORD *)v16[5])
          : (v18 = v16 + 3),
            (*((_BYTE *)v18 + 28) & 7) == 3))
      {
        v19 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v11 + 144) + 280), v12);
        llvm::Constant::getNullValue(v19, v20);
        LOWORD(v50) = 257;
        FCmpHelper = (const char *)llvm::IRBuilderBase::CreateFCmpHelper();
        v48 = xmmword_22F458438;
        sub_22E52050C(v3, (uint64_t)&FCmpHelper, 1, (uint64_t)a2);
      }
    }
  }
LABEL_34:
  *(_BYTE *)(v4 + 1880) = 0;
  v21 = *(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
  {
    v37 = *v3;
    v45[0] = v3[1];
    v38 = *((_DWORD *)a2 + 7);
    FCmpHelper = (const char *)v37;
    LODWORD(v48) = 4;
    BYTE8(v48) = 0;
    v53 = 0;
    sub_22E61990C((uint64_t)&FCmpHelper, v38);
    v39 = *a2;
    v40 = (uint64_t)a2[1];
    v41 = sub_22F110D38(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0));
    v28 = sub_22F2648E0(v45, (uint64_t)v39, v40, v41);
LABEL_55:
    v42 = FCmpHelper;
    *((_DWORD *)FCmpHelper + 697) = v48;
    *(_WORD *)(v42 + 373) = WORD2(v48);
    if (v53)
    {
      v44 = *((_QWORD *)&v48 + 1);
      *(_DWORD *)(*((_QWORD *)&v48 + 1) + 96) = v49;
      *(_QWORD *)(v44 + 88) = v50;
      *(_BYTE *)(v44 + 100) = v51;
      *(_WORD *)(v44 + 101) = v52;
    }
    return (llvm::Instruction *)v28;
  }
  v22 = **a2;
  if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(**(_QWORD **)(v22 + 16) + 8);
  else
    v23 = *(_DWORD *)(v22 + 8);
  if (v23 <= 6)
  {
    v24 = *((_DWORD *)a2 + 7);
    FCmpHelper = (const char *)*v3;
    LODWORD(v48) = 4;
    BYTE8(v48) = 0;
    v53 = 0;
    sub_22E61990C((uint64_t)&FCmpHelper, v24);
    v25 = v3[1];
    v26 = *a2;
    v27 = (uint64_t)a2[1];
    v45[0] = (uint64_t)"div";
    v46 = 259;
    v28 = sub_22E42E65C(v25, (uint64_t)v26, v27, (uint64_t)v45, 0);
    v29 = *(_QWORD *)(*v3 + 144);
    v30 = *(_QWORD *)(v29 + 152);
    if ((*(_DWORD *)(v30 + 52) & 0x40000000) != 0 && (*(_BYTE *)(*(_QWORD *)(v29 + 184) + 31) & 0x20) == 0
      || (*(_BYTE *)(v30 + 68) & 0x40) != 0
      && (*(_WORD *)(v30 + 96) & 0x80) != 0
      && (*(_BYTE *)(*(_QWORD *)(v29 + 184) + 31) & 0x40) == 0)
    {
      v31 = *(unsigned __int8 *)(*(_QWORD *)v28 + 8);
      if (v31 == 2 || (v31 & 0xFE) == 0x12 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v28 + 24) + 8) == 2)
        sub_22F2610E0(*v3, v28, 2.5);
    }
    goto LABEL_55;
  }
  if (sub_22E51B3BC((unsigned __int8 *)a2[4]))
    return sub_22E51B474(v3, (uint64_t)a2);
  v33 = sub_22F110D38(v21);
  v34 = v3[1];
  v35 = *a2;
  v36 = (uint64_t)a2[1];
  FCmpHelper = "div";
  LOWORD(v50) = 259;
  if (v33)
    return (llvm::Instruction *)sub_22E4DF3BC(v34, (uint64_t)v35, v36, (uint64_t)&FCmpHelper, 0);
  else
    return (llvm::Instruction *)sub_22E5047C0(v34, (uint64_t)v35, v36, (uint64_t)&FCmpHelper, 0);
}

uint64_t sub_22E512AB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Constant *v9;
  llvm::Type *v10;
  llvm::Constant **NullValue;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;

  if ((*(_QWORD *)(*a1 + 1864) & 0x2000800000) == 0)
    goto LABEL_18;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_DWORD *)(v4 + 16);
  if (v4)
    v6 = v5 == 11;
  else
    v6 = 0;
  if (v6)
  {
    if (((*(_DWORD *)(v4 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_18;
  }
  else if (v4 && v5 == 44)
  {
    v7 = sub_22F114198(*(_QWORD *)(v4 + 24));
    if ((*(_BYTE *)(v7 + 74) & 1) == 0 && *(_QWORD *)(v7 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v4 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_18;
    }
  }
  else if (v5 != 9)
  {
    goto LABEL_18;
  }
  if (sub_22E520C44(*(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24)) || sub_22E5209A0(a2))
  {
    v8 = *a1;
    *(_BYTE *)(v8 + 1880) = 1;
    v9 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v8 + 144) + 280), *(llvm::LLVMContext **)(a2 + 16));
    NullValue = (llvm::Constant **)llvm::Constant::getNullValue(v9, v10);
    sub_22E520CB8(a1, (uint64_t **)a2, NullValue);
    *(_BYTE *)(v8 + 1880) = 0;
  }
LABEL_18:
  v12 = sub_22F110D38(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0));
  v13 = (uint64_t *)a1[1];
  v14 = *(uint64_t **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v17[0] = "rem";
  v18 = 259;
  if (v12)
    return sub_22E520FA0(v13, (uint64_t)v14, v15, (uint64_t)v17);
  else
    return sub_22F2649B8(v13, (uint64_t)v14, v15, (uint64_t)v17);
}

llvm::Instruction *sub_22E512C30(uint64_t *a1, uint64_t **a2)
{
  llvm::Instruction *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  char v33;
  uint64_t v34[4];
  __int16 v35;

  if (*(_BYTE *)(**a2 + 8) == 15 || *(_BYTE *)(*a2[1] + 8) == 15)
    return (llvm::Instruction *)sub_22E521020(*a1, (uint64_t)a2, 0);
  if (!sub_22F110A40(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0)))
    goto LABEL_9;
  v5 = *(_QWORD *)(*a1 + 144);
  v6 = (*(unsigned __int16 *)(*(_QWORD *)(v5 + 152) + 248) >> 10) & 3;
  switch(v6)
  {
    case 0:
      if ((*(_BYTE *)(*a1 + 1868) & 0x20) == 0)
        goto LABEL_26;
      goto LABEL_25;
    case 2:
LABEL_25:
      if (!sub_22E520888(*(_QWORD *)(v5 + 144), (uint64_t)a2))
        return (llvm::Instruction *)sub_22E51FF00(a1, (uint64_t)a2);
LABEL_26:
      v18 = a1[1];
      v19 = (uint64_t)*a2;
      v20 = (uint64_t)a2[1];
      v25 = "add";
      LOWORD(v30) = 259;
      return sub_22E520468(v18, v19, v20, (uint64_t)&v25);
    case 1:
      v7 = a1[1];
      v8 = (uint64_t)*a2;
LABEL_22:
      v16 = a2[1];
      v34[0] = (uint64_t)"add";
      v35 = 259;
      result = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v7 + 72) + 16))(*(_QWORD *)(v7 + 72), v8, v16, 0, 0);
      if (!result)
      {
        LOWORD(v30) = 257;
        v17 = llvm::BinaryOperator::Create();
        return (llvm::Instruction *)sub_22E3C12C8((uint64_t *)v7, v17, (uint64_t)v34);
      }
      return result;
  }
LABEL_9:
  v9 = *(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
  {
    v21 = *a1;
    v34[0] = a1[1];
    v22 = *((_DWORD *)a2 + 7);
    v25 = (const char *)v21;
    v26 = 4;
    LOBYTE(v28) = 0;
    v33 = 0;
    sub_22E61990C((uint64_t)&v25, v22);
    result = (llvm::Instruction *)sub_22F264A38(v34, (uint64_t)*a2, (uint64_t)a2[1]);
    goto LABEL_29;
  }
  if (sub_22F110B50(v9)
    && (*(_BYTE *)(*a1 + 1869) & 2) != 0
    && !sub_22E520888(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), (uint64_t)a2))
  {
    return (llvm::Instruction *)sub_22E51FF00(a1, (uint64_t)a2);
  }
  v8 = (uint64_t)*a2;
  v10 = **a2;
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
    v11 = *(unsigned __int8 *)(**(_QWORD **)(v10 + 16) + 8);
  else
    v11 = *(_DWORD *)(v10 + 8);
  if (v11 > 6)
  {
    if (sub_22E51B3BC((unsigned __int8 *)a2[4]))
      return sub_22E51B474(a1, (uint64_t)a2);
    v7 = a1[1];
    goto LABEL_22;
  }
  v12 = *((_DWORD *)a2 + 7);
  v25 = (const char *)*a1;
  v26 = 4;
  LOBYTE(v28) = 0;
  v33 = 0;
  sub_22E61990C((uint64_t)&v25, v12);
  result = (llvm::Instruction *)sub_22E5214C4((llvm::CallBase **)a2, *a1, a1[1], 0);
  if (!result)
  {
    v13 = a1[1];
    v14 = (uint64_t)*a2;
    v15 = (uint64_t)a2[1];
    v34[0] = (uint64_t)"add";
    v35 = 259;
    result = (llvm::Instruction *)sub_22E42067C(v13, v14, v15, (uint64_t)v34, 0);
  }
LABEL_29:
  v23 = v25;
  *((_DWORD *)v25 + 697) = v26;
  *(_WORD *)(v23 + 373) = v27;
  if (v33)
  {
    v24 = v28;
    *(_DWORD *)(v28 + 96) = v29;
    *(_QWORD *)(v24 + 88) = v30;
    *(_BYTE *)(v24 + 100) = v31;
    *(_WORD *)(v24 + 101) = v32;
  }
  return result;
}

llvm::Instruction *sub_22E512F48(const char **a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  llvm::Instruction *v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unsigned int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];
  __int16 v47;
  const char *v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  __int16 v55;
  char v56;

  v4 = (uint64_t)*a2;
  if (*(_BYTE *)(**a2 + 8) != 15)
  {
    if (!sub_22F110A40(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0)))
    {
LABEL_19:
      v28 = *(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
      {
        v39 = *a1;
        v46[0] = (uint64_t)a1[1];
        v40 = *((_DWORD *)a2 + 7);
        v48 = v39;
        v49 = 4;
        LOBYTE(v51) = 0;
        v56 = 0;
        sub_22E61990C((uint64_t)&v48, v40);
        v37 = (uint64_t)sub_22F264BAC(v46, (uint64_t)*a2, (uint64_t)a2[1]);
        goto LABEL_41;
      }
      if (!sub_22F110B50(v28)
        || ((*a1)[1869] & 2) == 0
        || sub_22E520888(*(_QWORD *)(*((_QWORD *)*a1 + 18) + 144), (uint64_t)a2))
      {
        v29 = (uint64_t)*a2;
        v30 = **a2;
        if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
          v31 = *(unsigned __int8 *)(**(_QWORD **)(v30 + 16) + 8);
        else
          v31 = *(_DWORD *)(v30 + 8);
        if (v31 > 6)
        {
          if (sub_22E51B3BC((unsigned __int8 *)a2[4]))
            return sub_22E51B474(a1, (uint64_t)a2);
          v25 = (uint64_t)a1[1];
          v27 = (uint64_t)a2[1];
          v48 = "sub";
          LOWORD(v53) = 259;
          v26 = v29;
          goto LABEL_33;
        }
        v33 = *((_DWORD *)a2 + 7);
        v48 = *a1;
        v49 = 4;
        LOBYTE(v51) = 0;
        v56 = 0;
        sub_22E61990C((uint64_t)&v48, v33);
        v13 = sub_22E5214C4((llvm::CallBase **)a2, (uint64_t)*a1, (uint64_t)a1[1], 1);
        if (v13)
        {
LABEL_42:
          v41 = v48;
          *((_DWORD *)v48 + 697) = v49;
          *(_WORD *)(v41 + 373) = v50;
          if (v56)
          {
            v45 = v51;
            *(_DWORD *)(v51 + 96) = v52;
            *(_QWORD *)(v45 + 88) = v53;
            *(_BYTE *)(v45 + 100) = v54;
            *(_WORD *)(v45 + 101) = v55;
          }
          return (llvm::Instruction *)v13;
        }
        v34 = (uint64_t)a1[1];
        v35 = (uint64_t)*a2;
        v36 = (uint64_t)a2[1];
        v46[0] = (uint64_t)"sub";
        v47 = 259;
        v37 = sub_22E4208FC(v34, v35, v36, (uint64_t)v46, 0);
LABEL_41:
        v13 = v37;
        goto LABEL_42;
      }
      return (llvm::Instruction *)sub_22E51FF00((uint64_t *)a1, (uint64_t)a2);
    }
    v23 = *((_QWORD *)*a1 + 18);
    v24 = (*(unsigned __int16 *)(*(_QWORD *)(v23 + 152) + 248) >> 10) & 3;
    if (v24)
    {
      if (v24 != 2)
      {
        if (v24 == 1)
        {
          v25 = (uint64_t)a1[1];
          v26 = (uint64_t)*a2;
          v27 = (uint64_t)a2[1];
          v48 = "sub";
          LOWORD(v53) = 259;
LABEL_33:
          v38 = 0;
          return sub_22E3E48CC(v25, v26, v27, (uint64_t)&v48, 0, v38);
        }
        goto LABEL_19;
      }
    }
    else if (((*a1)[1868] & 0x20) == 0)
    {
      goto LABEL_36;
    }
    if (!sub_22E520888(*(_QWORD *)(v23 + 144), (uint64_t)a2))
      return (llvm::Instruction *)sub_22E51FF00((uint64_t *)a1, (uint64_t)a2);
LABEL_36:
    v25 = (uint64_t)a1[1];
    v26 = (uint64_t)*a2;
    v27 = (uint64_t)a2[1];
    v48 = "sub";
    LOWORD(v53) = 259;
    v38 = 1;
    return sub_22E3E48CC(v25, v26, v27, (uint64_t)&v48, 0, v38);
  }
  if (*(_BYTE *)(*a2[1] + 8) != 15)
    return (llvm::Instruction *)sub_22E521020((uint64_t)*a1, (uint64_t)a2, 1);
  v5 = (uint64_t *)a1[1];
  v6 = *((_QWORD *)*a1 + 11);
  v48 = "sub.ptr.lhs.cast";
  LOWORD(v53) = 259;
  v7 = sub_22E3C1740(v5, 47, v4, v6, (uint64_t)&v48);
  v8 = (uint64_t)a2[1];
  v9 = (uint64_t *)a1[1];
  v10 = *((_QWORD *)*a1 + 11);
  v48 = "sub.ptr.rhs.cast";
  LOWORD(v53) = 259;
  v11 = sub_22E3C1740(v9, 47, v8, v10, (uint64_t)&v48);
  v12 = (uint64_t)a1[1];
  v48 = "sub.ptr.sub";
  LOWORD(v53) = 259;
  v13 = (uint64_t)sub_22E3E48CC(v12, v7, v11, (uint64_t)&v48, 0, 0);
  v14 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2[4][2] + 8) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_22EF5C728(*(_QWORD *)(*((_QWORD *)*a1 + 18) + 144), v14);
  if (v15 && *(_BYTE *)(v15 + 16) == 5)
  {
    v20 = sub_22F297878((uint64_t)*a1, v15);
    sub_22EF5CCD0(*(_QWORD *)(*((_QWORD *)*a1 + 18) + 144), *(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v48);
    if (v48 == (const char *)1)
      goto LABEL_13;
    v43 = (uint64_t)(*a1 + 272);
    v44 = llvm::ConstantInt::get();
    LOWORD(v53) = 257;
    v19 = (uint64_t)sub_22E3BDEA8(v43, v44, (uint64_t)v20, (uint64_t)&v48, 1, 0);
  }
  else
  {
    v16 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v17)
      v18 = (*(_DWORD *)(v17 + 16) & 0xFF800FF) == 86507531;
    else
      v18 = 0;
    if (v18)
      return (llvm::Instruction *)v13;
    if (*(_DWORD *)(v17 + 16) - 25 < 2)
      return (llvm::Instruction *)v13;
    sub_22EF5CCD0(*(_QWORD *)(*((_QWORD *)*a1 + 18) + 144), v16, (uint64_t)&v48);
    if (v48 == (const char *)1)
      return (llvm::Instruction *)v13;
    v19 = llvm::ConstantInt::get();
  }
  v20 = (llvm::Instruction *)v19;
LABEL_13:
  v21 = (uint64_t)a1[1];
  v48 = "sub.ptr.div";
  LOWORD(v53) = 259;
  return (llvm::Instruction *)sub_22E5047C0(v21, v13, (uint64_t)v20, (uint64_t)&v48, 1);
}

llvm::Instruction *sub_22E513434(uint64_t *a1, uint64_t a2)
{
  int8x8_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  llvm::Instruction *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::PHINode *v42;
  uint64_t True;
  __int128 *v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int128 v55;
  __int16 v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[16];
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (sub_22E51B3BC(*(unsigned __int8 **)(a2 + 32)))
    return sub_22E51B474(a1, a2);
  v6 = *(_QWORD **)(a2 + 8);
  v7 = **(_QWORD **)a2;
  if (v7 != *v6)
  {
    v8 = (uint64_t *)a1[1];
    v57 = "sh_prom";
    v60 = 259;
    v6 = (_QWORD *)sub_22E3BF45C(v8, (uint64_t)v6, v7, 0, (uint64_t)&v57);
  }
  v9 = (_BYTE *)*a1;
  v12 = (*(_BYTE *)(*a1 + 1868) & 4) != 0
     && (v10 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0)), v9 = (_BYTE *)*a1, v10)
     && (v11 = *(_QWORD *)(*((_QWORD *)v9 + 18) + 152), (*(_WORD *)(v11 + 248) & 0xC00) != 0x400)
     && (*(_BYTE *)(v11 + 1) & 0x10) == 0;
  v13 = *((_QWORD *)v9 + 233);
  if ((v13 & 0x40000000000) != 0)
  {
    v14 = sub_22F110D38(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0));
    v9 = (_BYTE *)*a1;
    v13 = *(_QWORD *)(*a1 + 1864);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)(*((_QWORD *)v9 + 18) + 152);
  if ((*(_DWORD *)(v15 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v15 + 104) & 0x20) != 0)
  {
    v27 = *(uint64_t **)a2;
    v57 = "shl.mask";
    v60 = 259;
    v6 = (_QWORD *)sub_22E5219B8((uint64_t)a1, *v27, (uint64_t)v6, (uint64_t)&v57, v4);
  }
  else if (((v12 || v14) | (v13 >> 35) & 1) == 1 && *(_BYTE *)(**(_QWORD **)a2 + 8) == 13)
  {
    v9[1880] = 1;
    v57 = v59;
    v58 = 0x200000000;
    v16 = llvm::ConstantInt::get();
    v17 = a1[1];
    v18 = *(uint64_t **)(a2 + 8);
    v56 = 257;
    v19 = sub_22E3C18F4(v17, 37, v18, v16, (uint64_t)&v54);
    v20 = v19;
    if ((v13 & 0x800000000) != 0)
    {
      v54 = (const char *)v19;
      v55 = xmmword_22F458468;
      v21 = sub_22E4EF088((uint64_t)&v57, (unint64_t)&v54, 1);
      v22 = (char *)v57 + 24 * v58;
      v23 = *(_OWORD *)v21;
      *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
      *(_OWORD *)v22 = v23;
      LODWORD(v58) = v58 + 1;
    }
    if (v12 || v14)
    {
      v48 = v16;
      v50 = *(_QWORD *)(a1[1] + 48);
      v54 = "cont";
      v56 = 259;
      v24 = operator new();
      llvm::BasicBlock::BasicBlock();
      v54 = "check";
      v56 = 259;
      v25 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      v51 = (uint64_t)v25;
      v49 = (_QWORD *)v24;
      sub_22E3D26FC((uint64_t *)a1[1], v20, (uint64_t)v25, v24, 0, 0);
      if (v6 == *(_QWORD **)(a2 + 8))
        v26 = v48;
      else
        v26 = llvm::ConstantInt::get();
      sub_22E5ED9B4((_QWORD *)*a1, v25, 0);
      v31 = a1[1];
      v32 = *(uint64_t **)a2;
      v54 = "shl.zeros";
      v56 = 259;
      v33 = sub_22E3E48CC(v31, v26, (uint64_t)v6, (uint64_t)&v54, 1, 1);
      v52 = "shl.check";
      v53 = 259;
      v34 = (uint64_t *)sub_22E3E4A40(v31, (uint64_t)v32, (uint64_t)v33, (uint64_t)&v52, 0);
      if (v14 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 1) & 1) != 0)
      {
        v35 = llvm::ConstantInt::get();
        v36 = a1[1];
        v56 = 257;
        v34 = (uint64_t *)sub_22E3E4A40(v36, (uint64_t)v34, v35, (uint64_t)&v54, 0);
      }
      v37 = llvm::ConstantInt::get();
      v38 = a1[1];
      v56 = 257;
      v39 = (uint64_t *)sub_22E3C18F4(v38, 32, v34, v37, (uint64_t)&v54);
      sub_22E5ED9B4((_QWORD *)*a1, v49, 0);
      v40 = (uint64_t *)a1[1];
      v41 = *v39;
      v56 = 257;
      v42 = (llvm::PHINode *)sub_22E3C4B80(v40, v41, 2, (uint64_t)&v54);
      True = llvm::ConstantInt::getTrue();
      sub_22E3C4C50(v42, True, v50);
      sub_22E3C4C50(v42, (uint64_t)v39, v51);
      v44 = (__int128 *)&unk_22F458458;
      if (v12)
        v44 = (__int128 *)&unk_22F458448;
      v55 = *v44;
      v54 = (const char *)v42;
      v45 = sub_22E4EF088((uint64_t)&v57, (unint64_t)&v54, 1);
      v46 = (char *)v57 + 24 * v58;
      v47 = *(_OWORD *)v45;
      *((_QWORD *)v46 + 2) = *(_QWORD *)(v45 + 16);
      *(_OWORD *)v46 = v47;
      v30 = v58 + 1;
      LODWORD(v58) = v58 + 1;
    }
    else
    {
      v30 = v58;
    }
    sub_22E52050C(a1, (uint64_t)v57, v30, a2);
    if (v57 != v59)
      free(v57);
    v9[1880] = 0;
  }
  v28 = a1[1];
  v29 = *(_QWORD *)a2;
  v57 = "shl";
  v60 = 259;
  return sub_22E3ED744(v28, v29, (uint64_t)v6, (uint64_t)&v57, 0, 0);
}

llvm::Instruction *sub_22E513A28(uint64_t *a1, uint64_t **a2)
{
  int8x8_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  __int16 v19;

  if (sub_22E51B3BC((unsigned __int8 *)a2[4]))
    return sub_22E51B474(a1, (uint64_t)a2);
  v6 = a2[1];
  v7 = **a2;
  if (v7 != *v6)
  {
    v8 = (uint64_t *)a1[1];
    v17 = "sh_prom";
    v19 = 259;
    v6 = (uint64_t *)sub_22E3BF45C(v8, (uint64_t)v6, v7, 0, (uint64_t)&v17);
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152);
  if ((*(_DWORD *)(v10 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v10 + 104) & 0x20) != 0)
  {
    v13 = *a2;
    v17 = "shr.mask";
    v19 = 259;
    v6 = (uint64_t *)sub_22E5219B8((uint64_t)a1, *v13, (uint64_t)v6, (uint64_t)&v17, v4);
  }
  else if ((*(_BYTE *)(v9 + 1868) & 8) != 0 && *(_BYTE *)(**a2 + 8) == 13)
  {
    *(_BYTE *)(v9 + 1880) = 1;
    v11 = a1[1];
    v12 = llvm::ConstantInt::get();
    v19 = 257;
    v17 = (const char *)sub_22E3C18F4(v11, 37, v6, v12, (uint64_t)&v17);
    v18 = xmmword_22F458468;
    sub_22E52050C(a1, (uint64_t)&v17, 1, (uint64_t)a2);
    *(_BYTE *)(v9 + 1880) = 0;
  }
  v14 = sub_22F110D38(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[1];
  v16 = (uint64_t)*a2;
  v17 = "shr";
  v19 = 259;
  if (v14)
    return (llvm::Instruction *)sub_22E3E4A40(v15, v16, (uint64_t)v6, (uint64_t)&v17, 0);
  else
    return (llvm::Instruction *)sub_22E3EA5BC(v15, v16, (uint64_t)v6, (uint64_t)&v17, 0);
}

uint64_t sub_22E513C28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = "and";
  v7 = 259;
  return sub_22E3E49C4(v2, v4, v3, (uint64_t)&v6);
}

uint64_t sub_22E513C68(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = *(uint64_t **)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = "xor";
  v7 = 259;
  return sub_22E3ED05C(v2, v4, v3, (uint64_t)&v6);
}

uint64_t sub_22E513CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = "or";
  v7 = 259;
  return sub_22E3E58D4(v2, v4, v3, (uint64_t)&v6);
}

llvm::GetElementPtrInst *sub_22E513CE8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, int a6, char a7, int a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::GetElementPtrInst *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  llvm::DataLayout *DataLayout;
  llvm::Constant *IntPtrType;
  uint64_t v23;
  uint64_t v24;
  llvm::DataLayout *v25;
  llvm::DataLayout *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::Type *v32;
  uint64_t False;
  int v34;
  llvm::Type ***v35;
  llvm::Type *v36;
  uint64_t SourceElementType;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  llvm::Type *TypeAtIndex;
  uint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t ABITypeAlignment;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t NullValue;
  llvm::Type **v57;
  llvm::Type *v58;
  llvm::Constant **v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t *v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t Select;
  uint64_t v71;
  uint64_t v72;
  llvm::Constant *v73;
  char v74;
  int v75;
  llvm::GetElementPtrInst *v76;
  uint64_t v77;
  int v78;
  int v79;
  _BOOL4 v80;
  _BOOL4 v81;
  llvm::Type **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t Declaration;
  void *v89;
  uint64_t v90;
  _QWORD v91[2];
  uint64_t *v92;
  unint64_t v93;
  llvm::Constant **v94;
  __int16 v95;
  llvm::Constant *v96[3];

  v13 = a1;
  v96[1] = *(llvm::Constant **)MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v15 = (uint64_t *)(a1 + 272);
  v16 = sub_22E486CB4((uint64_t *)(a1 + 272), a2, a3, a4, a5, a9);
  if ((*(_BYTE *)(v13 + 1867) & 0x80) != 0)
  {
    v17 = *(_DWORD *)(v14 + 8);
    if ((v17 & 0xFE) == 0x12)
      v17 = *(_DWORD *)(**(_QWORD **)(v14 + 16) + 8);
    v18 = (llvm::NullPointerIsDefined(*(llvm **)(*(_QWORD *)(v13 + 320) + 56), (const Function *)(v17 >> 8)) & 1) == 0
       && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 152) + 237) & 0x20) == 0;
    if (*((unsigned __int8 *)v16 + 16) >= 0x15u)
    {
      v20 = *(_DWORD *)(v14 + 8);
      if ((v20 & 0xFE) == 0x12)
        v20 = *(_DWORD *)(**(_QWORD **)(v14 + 16) + 8);
      v19 = v20 < 0x100;
    }
    else
    {
      v19 = 0;
    }
    if (v18 || v19)
    {
      v80 = v18;
      v81 = v19;
      v82 = (llvm::Type **)a3;
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v13 + 144) + 200));
      *(_BYTE *)(v13 + 1880) = 1;
      IntPtrType = (llvm::Constant *)llvm::DataLayout::getIntPtrType(DataLayout, (llvm::Type *)v14);
      v23 = *(_QWORD *)(v13 + 144);
      v24 = *(_QWORD *)(v23 + 232);
      v25 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v23 + 200));
      v26 = v25;
      v83 = v15;
      v74 = a7;
      v75 = a6;
      if (*((unsigned __int8 *)v16 + 16) <= 0x14u)
      {
        v27 = llvm::DataLayout::getIntPtrType(v25, *v82);
        LOWORD(v92) = 257;
        v28 = sub_22E3C1740(v15, 47, (uint64_t)v82, v27, (uint64_t)&v89);
        v29 = llvm::DataLayout::getIntPtrType(v26, *(llvm::Type **)v16);
        LOWORD(v92) = 257;
        v30 = sub_22E3C1740(v15, 47, (uint64_t)v16, v29, (uint64_t)&v89);
        LOWORD(v92) = 257;
        v31 = (uint64_t *)sub_22E3E48CC((uint64_t)v15, v30, v28, (uint64_t)&v89, 0, 0);
        False = llvm::ConstantInt::getFalse();
LABEL_48:
        NullValue = llvm::Constant::getNullValue(IntPtrType, v32);
        if ((uint64_t *)NullValue != v31 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 144) + 152) + 1) & 1) == 0)
        {
          LOWORD(v92) = 257;
          v57 = (llvm::Type **)sub_22E3C1740(v15, 47, (uint64_t)v82, (uint64_t)IntPtrType, (uint64_t)&v89);
          v95 = 257;
          v59 = (llvm::Constant **)(*(uint64_t (**)(_QWORD, llvm::Type **, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v13 + 344) + 16))(*(_QWORD *)(v13 + 344), v57, v31, 0, 0);
          if (!v59)
          {
            LOWORD(v92) = 257;
            v60 = llvm::BinaryOperator::Create();
            v59 = (llvm::Constant **)sub_22E3C12C8(v83, v60, (uint64_t)&v93);
          }
          v89 = v91;
          v90 = 0x200000000;
          if (v80)
          {
            v95 = 257;
            v62 = llvm::Constant::getNullValue(*v82, v58);
            v63 = (uint64_t *)sub_22E3C18F4((uint64_t)v83, 33, (uint64_t *)v82, v62, (uint64_t)&v93);
            v95 = 257;
            v65 = llvm::Constant::getNullValue(*v59, v64);
            v66 = sub_22E3C18F4((uint64_t)v83, 33, (uint64_t *)v59, v65, (uint64_t)&v93);
            if ((**(_QWORD **)(*(_QWORD *)(v13 + 144) + 152) & 0x100) != 0)
            {
              v95 = 257;
              v67 = sub_22E3C18F4((uint64_t)v83, 32, v63, v66, (uint64_t)&v93);
            }
            else
            {
              v95 = 257;
              v67 = sub_22E3E49C4((uint64_t)v83, (uint64_t)v63, v66, (uint64_t)&v93);
            }
            sub_22F26346C((unint64_t)&v89, v67);
          }
          if (v81)
          {
            v79 = a8;
            v95 = 257;
            v68 = (uint64_t)v83;
            v69 = sub_22E3BECF4((uint64_t)v83, False, (uint64_t)&v93);
            if (v75)
            {
              v95 = 257;
              sub_22E3C18F4((uint64_t)v83, 35, (uint64_t *)v59, (uint64_t)v57, (uint64_t)&v93);
              v95 = 257;
              sub_22E3C18F4((uint64_t)v83, 39, v31, NullValue, (uint64_t)&v93);
              v95 = 257;
              sub_22E3C18F4((uint64_t)v83, 36, (uint64_t *)v59, (uint64_t)v57, (uint64_t)&v93);
              v95 = 257;
              Select = llvm::IRBuilderBase::CreateSelect();
            }
            else
            {
              v95 = 257;
              v68 = (uint64_t)v83;
              if ((v74 & 1) != 0)
                v71 = 37;
              else
                v71 = 35;
              Select = sub_22E3C18F4((uint64_t)v83, v71, (uint64_t *)v59, (uint64_t)v57, (uint64_t)&v93);
            }
            v95 = 257;
            v72 = sub_22E3E49C4(v68, Select, v69, (uint64_t)&v93);
            sub_22F26346C((unint64_t)&v89, v72);
            a8 = v79;
          }
          v96[0] = (llvm::Constant *)sub_22E4DE978(v13, a8);
          v93 = (unint64_t)v57;
          v94 = v59;
          sub_22E4DEC4C((_QWORD *)v13, (uint64_t)v89, v90, 0x13u, (uint64_t)v96, 1, (llvm::Type ***)&v93, 2);
          if (v89 != v91)
            free(v89);
        }
        *(_BYTE *)(v13 + 1880) = 0;
        return v16;
      }
      v34 = *((_DWORD *)v16 + 5);
      if ((v34 & 0x40000000) != 0)
        v35 = (llvm::Type ***)*((_QWORD *)v16 - 1);
      else
        v35 = (llvm::Type ***)((char *)v16 - 32 * (v34 & 0x7FFFFFF));
      v96[0] = (llvm::Constant *)llvm::DataLayout::getIntPtrType(v25, **v35);
      v84 = llvm::Constant::getNullValue(v96[0], v36);
      Declaration = llvm::Intrinsic::getDeclaration();
      v87 = llvm::Intrinsic::getDeclaration();
      v86 = llvm::ConstantInt::getFalse();
      v89 = &v86;
      v90 = (uint64_t)v15;
      v91[0] = v24;
      v91[1] = &Declaration;
      v92 = &v87;
      SourceElementType = llvm::GEPOperator::getSourceElementType(v16);
      v38 = *((_DWORD *)v16 + 5);
      if ((v38 & 0x40000000) != 0)
      {
        v40 = (char *)*((_QWORD *)v16 - 1);
        v39 = v38 & 0x7FFFFFF;
      }
      else
      {
        v39 = v38 & 0x7FFFFFF;
        v40 = (char *)v16 - 32 * v39;
      }
      v73 = IntPtrType;
      v77 = v13;
      v78 = a8;
      v76 = v16;
      if (v39 == 1)
      {
        v31 = 0;
LABEL_47:
        False = v86;
        v16 = v76;
        v13 = v77;
        a8 = v78;
        IntPtrType = v73;
        goto LABEL_48;
      }
      v31 = 0;
      v41 = (uint64_t *)(v40 + 32);
      v42 = SourceElementType | 4;
      v43 = 32 * v39 - 32;
      while (1)
      {
        v44 = *v41;
        v45 = v42 & 0xFFFFFFFFFFFFFFF8;
        if ((v42 & 4) != 0 || !v45)
        {
          v85 = v31;
          if ((v42 & 4) == 0 || (TypeAtIndex = (llvm::Type *)(v42 & 0xFFFFFFFFFFFFFFF8), !v45))
            TypeAtIndex = (llvm::Type *)llvm::StructType::getTypeAtIndex();
          sub_22E3C304C((uint64_t)v26, (uint64_t)TypeAtIndex);
          v49 = (unint64_t)(v48 + 7) >> 3;
          v51 = v50 == 1;
          ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(v26, TypeAtIndex);
          v93 = (ABITypeAlignment + v49 - 1) / ABITypeAlignment * ABITypeAlignment;
          v94 = (llvm::Constant **)v51;
          llvm::TypeSize::operator unsigned long long();
          v53 = llvm::ConstantInt::get();
          v95 = 257;
          v15 = v83;
          v54 = sub_22E3BF45C(v83, v44, (uint64_t)v96[0], 1, (uint64_t)&v93);
          v46 = sub_22E521A88((uint64_t **)&v89, 2, v53, v54);
          v31 = v85;
          if (!v85)
            goto LABEL_35;
        }
        else
        {
          llvm::DataLayout::getStructLayout();
          v46 = llvm::ConstantInt::get();
          if (!v31)
            goto LABEL_35;
        }
        if (v31 != (uint64_t *)v84)
        {
          v31 = (uint64_t *)sub_22E521A88((uint64_t **)&v89, 5, (uint64_t)v31, v46);
          if ((v42 & 4) == 0)
            goto LABEL_37;
          goto LABEL_36;
        }
LABEL_35:
        v31 = (uint64_t *)v46;
        if ((v42 & 4) == 0)
          goto LABEL_37;
LABEL_36:
        if (!v45)
LABEL_37:
          v45 = llvm::StructType::getTypeAtIndex();
        v55 = *(unsigned __int8 *)(v45 + 8);
        if (v45 && v55 == 17 || v45 && (v55 & 0xFE) == 0x12)
        {
          v42 = *(_QWORD *)(v45 + 24) | 4;
        }
        else if (v55 == 16)
        {
          v42 = v45 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v42 = 0;
        }
        v41 += 4;
        v43 -= 32;
        if (!v43)
          goto LABEL_47;
      }
    }
  }
  return v16;
}

void sub_22E51449C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, const char **a11)
{
  __int128 v16;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];

  if ((*(_BYTE *)(a1 + 1867) & 0x80) != 0)
  {
    v20 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    {
      v30 = *(_QWORD *)(a2 + 8);
      v29 = sub_22F28ABCC(a2, a1);
      v20 = v30;
      v21 = (uint64_t *)v29;
    }
    else
    {
      v21 = *(uint64_t **)a2;
    }
    v22 = (unint64_t)sub_22E513CE8(a1, v20, v21, a3, a4, a6, a7, a8, (uint64_t)a11);
    v23 = __clz(a10) ^ 0x3F;
    v24 = v22 & 0xFFFFFFFFFFFFFFF8 | (v23 >> 3);
    v25 = a5 & 0xFFFFFFFFFFFFFFF8 | v23 & 7;
    if (!a10)
    {
      v25 = a5;
      v24 = v22;
    }
    v26 = v24 & 0xFFFFFFFFFFFFFFF8;
    if (v24 <= 7)
      v26 = 0;
    v27 = v25 & 0xFFFFFFFFFFFFFFF8;
    if (v24 <= 7)
      v27 = 0;
    *(_QWORD *)a9 = v26;
    *(_QWORD *)(a9 + 8) = v27;
    v28 = 1 << (v25 & 7 | (8 * (v24 & 7)));
    if (v24 < 8)
      v28 = 0;
    *(_QWORD *)(a9 + 16) = v28;
    *(_DWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 32) = 0;
    *(_QWORD *)(a9 + 40) = 0;
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 16);
    v31[0] = *(_OWORD *)a2;
    v31[1] = v16;
    v31[2] = *(_OWORD *)(a2 + 32);
    sub_22E480FFC((uint64_t *)(a1 + 272), (uint64_t)v31, (unsigned __int8 **)a3, a4, a5, a10, a11, a9);
  }
}

llvm::Value *sub_22E514600(uint64_t a1, __n128 a2)
{
  llvm::Value *result;

  result = sub_22E514634(*(uint64_t **)(a1 + 8), **(unsigned __int8 ***)(a1 + 16), a2);
  **(_QWORD **)a1 = result;
  return result;
}

llvm::Value *sub_22E514634(uint64_t *a1, unsigned __int8 *a2, __n128 a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t FCmpHelper;
  llvm::LLVMContext *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  __n128 v28;
  __n128 v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  llvm::LLVMContext *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  llvm::LLVMContext *v44;
  _QWORD *v45;
  __n128 v46;
  uint64_t *v47;
  __n128 v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Type **v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::LLVMContext *v63;
  _QWORD *v64;
  __n128 v65;
  uint64_t *v66;
  __n128 v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Constant *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  llvm::LLVMContext *v83;
  llvm::User *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  _QWORD *v90;
  llvm::Value *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Constant **v130;
  llvm::Type *v131;
  uint64_t NullValue;
  unsigned int v133;
  uint64_t True;
  uint64_t v135;
  unsigned int v136;
  BOOL v137;
  uint64_t *v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  llvm::LLVMContext *v143;
  uint64_t *v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  const char *v149;
  llvm::Type *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  unsigned __int8 *v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  llvm::LLVMContext *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  BOOL v162;
  _QWORD *v164;
  llvm::Value *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t False;
  uint64_t v175;
  unsigned int v176;
  BOOL v177;
  unsigned int v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  llvm::Type **v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD v204[3];
  char v205;
  _OWORD v206[3];
  char v207;
  _OWORD v208[3];
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _BYTE v214[32];
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  _BYTE v218[64];
  _BYTE v219[32];
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  if (!a2 || (v9 & 0xFE) != 0x70)
  {
    if (!a2 || v9 != 233)
LABEL_10:
      __asm { BR              X10 }
    v10 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
        sub_22E4D8D7C(v218);
        v215 = v220;
        v216 = v221;
        v217 = v222;
        v212 = *(_OWORD *)&v218[32];
        v213 = *(_OWORD *)&v218[48];
        *(_OWORD *)v214 = *(_OWORD *)v219;
        *(_OWORD *)&v214[16] = *(_OWORD *)&v219[16];
        v210 = *(_OWORD *)v218;
        v211 = *(_OWORD *)&v218[16];
        v25 = a1;
        v26 = (uint64_t)a2;
        v27 = 1;
        goto LABEL_22;
      case 1:
        sub_22E4D8D7C(v218);
        v215 = v220;
        v216 = v221;
        v217 = v222;
        v212 = *(_OWORD *)&v218[32];
        v213 = *(_OWORD *)&v218[48];
        *(_OWORD *)v214 = *(_OWORD *)v219;
        *(_OWORD *)&v214[16] = *(_OWORD *)&v219[16];
        v210 = *(_OWORD *)v218;
        v211 = *(_OWORD *)&v218[16];
        v25 = a1;
        v26 = (uint64_t)a2;
        v27 = 0;
LABEL_22:
        v30 = 0;
        return (llvm::Value *)sub_22E51001C(v25, v26, &v210, v27, v30);
      case 2:
        sub_22E4D8D7C(v218);
        v215 = v220;
        v216 = v221;
        v217 = v222;
        v212 = *(_OWORD *)&v218[32];
        v213 = *(_OWORD *)&v218[48];
        *(_OWORD *)v214 = *(_OWORD *)v219;
        *(_OWORD *)&v214[16] = *(_OWORD *)&v219[16];
        v210 = *(_OWORD *)v218;
        v211 = *(_OWORD *)&v218[16];
        v25 = a1;
        v26 = (uint64_t)a2;
        v27 = 1;
        goto LABEL_29;
      case 3:
        sub_22E4D8D7C(v218);
        v215 = v220;
        v216 = v221;
        v217 = v222;
        v212 = *(_OWORD *)&v218[32];
        v213 = *(_OWORD *)&v218[48];
        *(_OWORD *)v214 = *(_OWORD *)v219;
        *(_OWORD *)&v214[16] = *(_OWORD *)&v219[16];
        v210 = *(_OWORD *)v218;
        v211 = *(_OWORD *)&v218[16];
        v25 = a1;
        v26 = (uint64_t)a2;
        v27 = 0;
LABEL_29:
        v30 = 1;
        return (llvm::Value *)sub_22E51001C(v25, v26, &v210, v27, v30);
      case 4:
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
          return (llvm::Value *)sub_22E508B88(*(_QWORD *)(*a1 + 144), (uint64_t)a2);
        sub_22E4D8D7C(v218);
        v71 = *a1;
        v206[0] = *(_OWORD *)&v218[8];
        v206[1] = *(_OWORD *)&v218[24];
        v206[2] = *(_OWORD *)&v218[40];
        sub_22E5E0440(v71, (uint64_t)v206, *(unint64_t *)v219, &v210);
        return (llvm::Value *)v210;
      case 5:
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v31)
          v32 = (*(_DWORD *)(v31 + 16) & 0xFF800FF) == 86507531;
        else
          v32 = 0;
        if (v32)
          goto LABEL_8;
        return (llvm::Value *)sub_22E51A3C0(a1, a2);
      case 6:
        v37 = (llvm::LLVMContext *)sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        *((_BYTE *)a1 + 16) = 0;
        if ((unint64_t)v37 <= 0xF)
          goto LABEL_8;
        v38 = sub_22E50FD80(*a1, *((unsigned __int8 **)a2 + 2), v37, a3);
        if (!v38)
          return (llvm::Value *)v38;
        goto LABEL_67;
      case 7:
        v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v12 = (uint64_t)sub_22E51BF14((uint64_t)a1, (uint64_t)a2, v11, v29);
        goto LABEL_65;
      case 8:
        *((_BYTE *)a1 + 16) = 0;
        v35 = sub_22E50E974(a1, *((_QWORD *)a2 + 2), a3);
        v36 = a1[1];
        *(_QWORD *)v218 = "neg";
        *(_WORD *)&v218[32] = 259;
        return (llvm::Value *)sub_22E3BECF4(v36, v35, (uint64_t)v218);
      case 9:
        v15 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1)
          goto LABEL_16;
        v16 = *(_DWORD *)(v15 + 16);
        if (v16 - 57 <= 0xFFFFFFFD)
          v16 = *(_DWORD *)(sub_22F10CF48(v15) + 16);
        if ((v16 & 0x780000) != 0)
        {
LABEL_16:
          v17 = sub_22E4D86E0((_QWORD *)*a1, *((_QWORD *)a2 + 2));
          v18 = a1[1];
          *(_QWORD *)v218 = "lnot";
          *(_WORD *)&v218[32] = 259;
          FCmpHelper = sub_22E3BECF4(v18, (uint64_t)v17, (uint64_t)v218);
          v20 = (llvm::LLVMContext *)*((_QWORD *)a2 + 1);
          v21 = (uint64_t *)a1[1];
          v22 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), v20);
          *(_QWORD *)v218 = "lnot.ext";
          *(_WORD *)&v218[32] = 259;
          v23 = v21;
          v24 = 39;
          return (llvm::Value *)sub_22E3C1740(v23, v24, FCmpHelper, v22, (uint64_t)v218);
        }
        v130 = (llvm::Constant **)sub_22E50E974(a1, *((_QWORD *)a2 + 2), a3);
        NullValue = llvm::Constant::getNullValue(*v130, v131);
        if ((*((_DWORD *)*v130 + 2) & 0xFE) == 0x12)
          v133 = *(unsigned __int8 *)(**((_QWORD **)*v130 + 2) + 8);
        else
          v133 = *((_DWORD *)*v130 + 2);
        if (v133 > 6)
        {
          v142 = a1[1];
          *(_QWORD *)v218 = "cmp";
          *(_WORD *)&v218[32] = 259;
          v120 = sub_22E3C18F4(v142, 32, (uint64_t *)v130, NullValue, (uint64_t)v218);
          goto LABEL_149;
        }
        v187 = *a1;
        v188 = sub_22F2641E4((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152));
        *(_QWORD *)v218 = v187;
        *(_DWORD *)&v218[8] = 4;
        v218[16] = 0;
        v218[48] = 0;
        sub_22E61990C((uint64_t)v218, v188);
        *(_QWORD *)&v210 = "cmp";
        LOWORD(v212) = 259;
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
        v189 = *(_QWORD *)v218;
        *(_DWORD *)(*(_QWORD *)v218 + 2788) = *(_DWORD *)&v218[8];
        *(_WORD *)(v189 + 373) = *(_WORD *)&v218[12];
        if (v218[48])
        {
          v190 = *(_QWORD *)&v218[16];
          *(_DWORD *)(*(_QWORD *)&v218[16] + 96) = *(_DWORD *)&v218[24];
          *(_QWORD *)(v190 + 88) = *(_QWORD *)&v218[32];
          *(_BYTE *)(v190 + 100) = v218[40];
          *(_WORD *)(v190 + 101) = *(_WORD *)&v218[41];
        }
        break;
      case 0xA:
        v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v12 = sub_22E51C004(a1, (uint64_t)a2, v11, v28);
        goto LABEL_65;
      case 0xB:
        v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *(_QWORD *)(*((_QWORD *)a2 + 2) + 8));
        v12 = sub_22E51C120(a1, (uint64_t)a2, v11, v34);
LABEL_65:
        v38 = v12;
        if (!v12 || v11 < 0x10)
          return (llvm::Value *)v38;
LABEL_67:
        v60 = *a1;
        v61 = *a1 + 272;
        v62 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v60 + 144) + 280), *((llvm::LLVMContext **)a2 + 1));
        *(_QWORD *)v218 = "unpromotion";
        *(_WORD *)&v218[32] = 259;
        return (llvm::Value *)sub_22E3E5FFC(v61, v38, v62, (uint64_t)v218);
      case 0xC:
      case 0xD:
LABEL_8:
        v13 = *((_QWORD *)a2 + 2);
        return (llvm::Value *)sub_22E50E974(a1, v13, a3);
      default:
LABEL_9:
        v9 = v10;
        goto LABEL_10;
    }
    goto LABEL_150;
  }
  v10 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 18) & 0x3F)
  {
    case 0:
    case 1:
      return (llvm::Value *)sub_22E51A3C0(a1, a2);
    case 2:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E512324(a1, (uint64_t)v218);
      goto LABEL_65;
    case 3:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E51262C((uint64_t)a1, (uint64_t **)v218);
      goto LABEL_65;
    case 4:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = sub_22E512AB4(a1, (uint64_t)v218);
      goto LABEL_65;
    case 5:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E512C30(a1, (uint64_t **)v218);
      goto LABEL_65;
    case 6:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E512F48((const char **)a1, (uint64_t **)v218);
      goto LABEL_65;
    case 7:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E513434(a1, (uint64_t)v218);
      goto LABEL_65;
    case 8:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)v218, a1, (uint64_t)a2, v11);
      v12 = (uint64_t)sub_22E513A28(a1, (uint64_t **)v218);
      goto LABEL_65;
    case 9:
      return (llvm::Value *)sub_22E51CC10((uint64_t)a1, (uint64_t)a2);
    case 0xA:
      v41 = 36;
      v42 = 40;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0xB:
      v41 = 34;
      v42 = 38;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0xC:
      v41 = 37;
      v42 = 41;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0xD:
      v41 = 35;
      v42 = 39;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0xE:
      v41 = 32;
      v42 = 32;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0xF:
      v41 = 33;
      v42 = 33;
      return sub_22E51A9A8(a1, (uint64_t)a2, v41, v42, a3);
    case 0x10:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)&v210, a1, (uint64_t)a2, v11);
      v40 = a1[1];
      *(_QWORD *)v218 = "and";
      *(_WORD *)&v218[32] = 259;
      v12 = sub_22E3E49C4(v40, v210, *((uint64_t *)&v210 + 1), (uint64_t)v218);
      goto LABEL_65;
    case 0x11:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)&v210, a1, (uint64_t)a2, v11);
      v43 = (uint64_t *)a1[1];
      *(_QWORD *)v218 = "xor";
      *(_WORD *)&v218[32] = 259;
      v12 = sub_22E3ED05C(v43, v210, *((uint64_t *)&v210 + 1), (uint64_t)v218);
      goto LABEL_65;
    case 0x12:
      v11 = sub_22E51A6F8(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), *((_QWORD *)a2 + 1));
      sub_22E51A7D0((uint64_t)&v210, a1, (uint64_t)a2, v11);
      v59 = a1[1];
      *(_QWORD *)v218 = "or";
      *(_WORD *)&v218[32] = 259;
      v12 = sub_22E3E58D4(v59, v210, *((uint64_t *)&v210 + 1), (uint64_t)v218);
      goto LABEL_65;
    case 0x13:
      v63 = (llvm::LLVMContext *)*((_QWORD *)a2 + 1);
      v64 = (_QWORD *)*a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v63 & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 55 > 1)
      {
        v100 = v64[18];
        v101 = *(_QWORD *)(*(_QWORD *)(v100 + 184) + 96) & 0x180000000000;
        v74 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(v100 + 280), v63);
        LOBYTE(v204[0]) = 0;
        if (sub_22E61F3B0(*a1, *((_QWORD *)a2 + 2), v204, 0))
        {
          if (LOBYTE(v204[0]))
          {
            sub_22E3CB7B0((_QWORD *)*a1, (uint64_t)a2, 0);
            v102 = sub_22E4D86E0((_QWORD *)*a1, *((_QWORD *)a2 + 3));
            if (v101 == 0x80000000000 && sub_22E61F5D8(*((unsigned __int8 **)a2 + 3)))
            {
              *(_QWORD *)v218 = "land.end";
              *(_WORD *)&v218[32] = 259;
              v103 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)v218 = "land.rhscnt";
              *(_WORD *)&v218[32] = 259;
              v104 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v105 = (uint64_t *)a1[1];
              v106 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v106, v104, v103, v102, 0);
              *(_WORD *)&v218[32] = 257;
              sub_22E3C12C8(v105, v106, (uint64_t)v218);
              sub_22E5ED9B4((_QWORD *)*a1, v104, 0);
              sub_22E3CB7B0((_QWORD *)*a1, *((_QWORD *)a2 + 3), 0);
              sub_22E5EDA70(*a1);
              sub_22E5ED9B4((_QWORD *)*a1, v103, 0);
            }
            goto LABEL_183;
          }
          if ((sub_22E61F04C(*((_QWORD *)a2 + 3), 0) & 1) == 0)
            return (llvm::Value *)llvm::Constant::getNullValue(v74, v150);
        }
        *(_QWORD *)v218 = "land.end";
        *(_WORD *)&v218[32] = 259;
        v151 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)v218 = "land.rhs";
        *(_WORD *)&v218[32] = 259;
        v152 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v153 = (_QWORD *)*a1;
        *(_QWORD *)&v210 = *(_QWORD *)(*a1 + 320);
        v154 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v155 = sub_22E3CF180((uint64_t)(v153 + 488), *((_QWORD *)a2 + 3));
        if (v156)
          v157 = v155;
        else
          v157 = 0;
        sub_22E61F8F8(v153, v154, (uint64_t)v152, (uint64_t)v151, v157, 0);
        llvm::Type::getInt1Ty((llvm::Type *)a1[3], v158);
        *(_WORD *)&v218[32] = 257;
        v102 = sub_22E51BDF0();
        v159 = v151[1];
        if (v159)
        {
          while (1)
          {
            v160 = *(_QWORD *)(v159 + 24);
            v161 = *(unsigned __int8 *)(v160 + 16);
            v162 = v160 && v161 >= 0x1C;
            if (v162 && v161 - 29 <= 0xA)
              break;
            v159 = *(_QWORD *)(v159 + 8);
            if (!v159)
              goto LABEL_170;
          }
LABEL_186:
          False = llvm::ConstantInt::getFalse();
          sub_22E3C4C50(v102, False, *(_QWORD *)(*(_QWORD *)(v159 + 24) + 40));
          while (1)
          {
            v159 = *(_QWORD *)(v159 + 8);
            if (!v159)
              break;
            v175 = *(_QWORD *)(v159 + 24);
            v176 = *(unsigned __int8 *)(v175 + 16);
            if (v175)
              v177 = v176 >= 0x1C;
            else
              v177 = 0;
            if (v177 && v176 - 29 < 0xB)
              goto LABEL_186;
          }
        }
LABEL_170:
        v164 = (_QWORD *)*a1;
        if (!*(_QWORD *)(*a1 + 5832))
          v164[729] = &v210;
        sub_22E5ED9B4(v164, v152, 0);
        sub_22E3CB7B0((_QWORD *)*a1, (uint64_t)a2, 0);
        v165 = sub_22E4D86E0((_QWORD *)*a1, *((_QWORD *)a2 + 3));
        v166 = *a1;
        if (*(__int128 **)(*a1 + 5832) == &v210)
          *(_QWORD *)(v166 + 5832) = 0;
        v167 = *(_QWORD *)(a1[1] + 48);
        if (v101 == 0x80000000000 && sub_22E61F5D8(*((unsigned __int8 **)a2 + 3)))
        {
          *(_QWORD *)v218 = "land.rhscnt";
          *(_WORD *)&v218[32] = 259;
          v168 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v169 = (uint64_t *)a1[1];
          v170 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v170, v168, v151, v165, 0);
          *(_WORD *)&v218[32] = 257;
          sub_22E3C12C8(v169, v170, (uint64_t)v218);
          sub_22E5ED9B4((_QWORD *)*a1, v168, 0);
          sub_22E3CB7B0((_QWORD *)*a1, *((_QWORD *)a2 + 3), 0);
          sub_22E5EDA70(*a1);
          sub_22E3C4C50(v102, (uint64_t)v165, (uint64_t)v168);
          v166 = *a1;
        }
        *(_QWORD *)v218 = 0;
        *(_QWORD *)&v218[8] = v166;
        sub_22E48EE24((uint64_t *)v218, 0, 1);
        sub_22E5ED9B4((_QWORD *)*a1, v151, 0);
        sub_22E48F084(v218);
        sub_22E3C4C50(v102, (uint64_t)v165, v167);
        v171 = *a1;
        *(_QWORD *)v218 = 0;
        *(_QWORD *)&v218[8] = v171;
        sub_22E48EE24((uint64_t *)v218, 0, 0);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)a1[1]);
        v172 = (_QWORD *)((char *)v102 + 48);
        if (v206 == (_OWORD *)((char *)v102 + 48))
        {
          if (*(_QWORD *)&v206[0])
            llvm::MetadataTracking::untrack();
        }
        else
        {
          if (*v172)
            llvm::MetadataTracking::untrack();
          v173 = *(_QWORD *)&v206[0];
          *v172 = *(_QWORD *)&v206[0];
          if (v173)
          {
            llvm::MetadataTracking::retrack();
            *(_QWORD *)&v206[0] = 0;
          }
        }
        sub_22E48F084(v218);
LABEL_183:
        v97 = (uint64_t *)a1[1];
        v149 = "land.ext";
        goto LABEL_184;
      }
      sub_22E3CB7B0(v64, (uint64_t)a2, 0);
      v66 = (uint64_t *)sub_22E50E974(a1, *((_QWORD *)a2 + 2), v65);
      v68 = (uint64_t *)sub_22E50E974(a1, *((_QWORD *)a2 + 3), v67);
      v69 = llvm::ConstantAggregateZero::get();
      if ((*(_DWORD *)(*v66 + 8) & 0xFE) == 0x12)
        v70 = *(unsigned __int8 *)(**(_QWORD **)(*v66 + 16) + 8);
      else
        v70 = *(_DWORD *)(*v66 + 8);
      if (v70 > 6)
      {
        v127 = a1[1];
        *(_QWORD *)v218 = "cmp";
        *(_WORD *)&v218[32] = 259;
        v123 = sub_22E3C18F4(v127, 33, v66, v69, (uint64_t)v218);
        v128 = a1[1];
        *(_QWORD *)v218 = "cmp";
        *(_WORD *)&v218[32] = 259;
        v124 = sub_22E3C18F4(v128, 33, v68, v69, (uint64_t)v218);
      }
      else
      {
        v121 = *a1;
        v122 = sub_22E51A864(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152));
        *(_QWORD *)v218 = v121;
        *(_DWORD *)&v218[8] = 4;
        v218[16] = 0;
        v218[48] = 0;
        sub_22E61990C((uint64_t)v218, v122);
        v123 = llvm::IRBuilderBase::CreateFCmpHelper();
        *(_QWORD *)&v210 = "cmp";
        LOWORD(v212) = 259;
        v124 = llvm::IRBuilderBase::CreateFCmpHelper();
        v125 = *(_QWORD *)v218;
        *(_DWORD *)(*(_QWORD *)v218 + 2788) = *(_DWORD *)&v218[8];
        *(_WORD *)(v125 + 373) = *(_WORD *)&v218[12];
        if (v218[48])
        {
          v126 = *(_QWORD *)&v218[16];
          *(_DWORD *)(*(_QWORD *)&v218[16] + 96) = *(_DWORD *)&v218[24];
          *(_QWORD *)(v126 + 88) = *(_QWORD *)&v218[32];
          *(_BYTE *)(v126 + 100) = v218[40];
          *(_WORD *)(v126 + 101) = *(_WORD *)&v218[41];
        }
      }
      v129 = a1[1];
      *(_WORD *)&v218[32] = 257;
      v120 = sub_22E3E49C4(v129, v123, v124, (uint64_t)v218);
LABEL_149:
      FCmpHelper = v120;
LABEL_150:
      v143 = (llvm::LLVMContext *)*((_QWORD *)a2 + 1);
      v144 = (uint64_t *)a1[1];
      v22 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), v143);
      *(_QWORD *)v218 = "sext";
      *(_WORD *)&v218[32] = 259;
      v23 = v144;
      v24 = 40;
      return (llvm::Value *)sub_22E3C1740(v23, v24, FCmpHelper, v22, (uint64_t)v218);
    case 0x14:
      v44 = (llvm::LLVMContext *)*((_QWORD *)a2 + 1);
      v45 = (_QWORD *)*a1;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v44 & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 55 <= 1)
      {
        sub_22E3CB7B0(v45, (uint64_t)a2, 0);
        v47 = (uint64_t *)sub_22E50E974(a1, *((_QWORD *)a2 + 2), v46);
        v49 = (uint64_t *)sub_22E50E974(a1, *((_QWORD *)a2 + 3), v48);
        v50 = llvm::ConstantAggregateZero::get();
        if ((*(_DWORD *)(*v47 + 8) & 0xFE) == 0x12)
          v51 = *(unsigned __int8 *)(**(_QWORD **)(*v47 + 16) + 8);
        else
          v51 = *(_DWORD *)(*v47 + 8);
        if (v51 > 6)
        {
          v117 = a1[1];
          *(_QWORD *)v218 = "cmp";
          *(_WORD *)&v218[32] = 259;
          v113 = sub_22E3C18F4(v117, 33, v47, v50, (uint64_t)v218);
          v118 = a1[1];
          *(_QWORD *)v218 = "cmp";
          *(_WORD *)&v218[32] = 259;
          v114 = sub_22E3C18F4(v118, 33, v49, v50, (uint64_t)v218);
        }
        else
        {
          v111 = *a1;
          v112 = sub_22E51A864(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152));
          *(_QWORD *)v218 = v111;
          *(_DWORD *)&v218[8] = 4;
          v218[16] = 0;
          v218[48] = 0;
          sub_22E61990C((uint64_t)v218, v112);
          v113 = llvm::IRBuilderBase::CreateFCmpHelper();
          *(_QWORD *)&v210 = "cmp";
          LOWORD(v212) = 259;
          v114 = llvm::IRBuilderBase::CreateFCmpHelper();
          v115 = *(_QWORD *)v218;
          *(_DWORD *)(*(_QWORD *)v218 + 2788) = *(_DWORD *)&v218[8];
          *(_WORD *)(v115 + 373) = *(_WORD *)&v218[12];
          if (v218[48])
          {
            v116 = *(_QWORD *)&v218[16];
            *(_DWORD *)(*(_QWORD *)&v218[16] + 96) = *(_DWORD *)&v218[24];
            *(_QWORD *)(v116 + 88) = *(_QWORD *)&v218[32];
            *(_BYTE *)(v116 + 100) = v218[40];
            *(_WORD *)(v116 + 101) = *(_WORD *)&v218[41];
          }
        }
        v119 = a1[1];
        *(_WORD *)&v218[32] = 257;
        v120 = sub_22E3E58D4(v119, v113, v114, (uint64_t)v218);
        goto LABEL_149;
      }
      v72 = v45[18];
      v73 = *(_QWORD *)(*(_QWORD *)(v72 + 184) + 96) & 0x180000000000;
      v74 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(v72 + 280), v44);
      LOBYTE(v206[0]) = 0;
      if (!sub_22E61F3B0(*a1, *((_QWORD *)a2 + 2), v206, 0))
        goto LABEL_84;
      if (LOBYTE(v206[0]))
      {
        if ((sub_22E61F04C(*((_QWORD *)a2 + 3), 0) & 1) == 0)
          return (llvm::Value *)llvm::ConstantInt::get();
LABEL_84:
        *(_QWORD *)v218 = "lor.end";
        *(_WORD *)&v218[32] = 259;
        v75 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)v218 = "lor.rhs";
        *(_WORD *)&v218[32] = 259;
        v76 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v77 = (_QWORD *)*a1;
        *(_QWORD *)&v210 = *(_QWORD *)(*a1 + 320);
        v78 = v77[502];
        v79 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v80 = sub_22E3CF180((uint64_t)(v77 + 488), *((_QWORD *)a2 + 3));
        if (v81)
          v82 = v80;
        else
          v82 = 0;
        sub_22E61F8F8(v77, v79, (uint64_t)v75, (uint64_t)v76, v78 - v82, 0);
        llvm::Type::getInt1Ty((llvm::Type *)a1[3], v83);
        *(_WORD *)&v218[32] = 257;
        v84 = sub_22E51BDF0();
        v85 = v75[1];
        if (v85)
        {
          while (1)
          {
            v86 = *(_QWORD *)(v85 + 24);
            v87 = *(unsigned __int8 *)(v86 + 16);
            v88 = v86 && v87 >= 0x1C;
            if (v88 && v87 - 29 <= 0xA)
              break;
            v85 = *(_QWORD *)(v85 + 8);
            if (!v85)
              goto LABEL_97;
          }
LABEL_134:
          True = llvm::ConstantInt::getTrue();
          sub_22E3C4C50(v84, True, *(_QWORD *)(*(_QWORD *)(v85 + 24) + 40));
          while (1)
          {
            v85 = *(_QWORD *)(v85 + 8);
            if (!v85)
              break;
            v135 = *(_QWORD *)(v85 + 24);
            v136 = *(unsigned __int8 *)(v135 + 16);
            if (v135)
              v137 = v136 >= 0x1C;
            else
              v137 = 0;
            if (v137 && v136 - 29 < 0xB)
              goto LABEL_134;
          }
        }
LABEL_97:
        v90 = (_QWORD *)*a1;
        if (!*(_QWORD *)(*a1 + 5832))
          v90[729] = &v210;
        sub_22E5ED9B4(v90, v76, 0);
        sub_22E3CB7B0((_QWORD *)*a1, (uint64_t)a2, 0);
        v91 = sub_22E4D86E0((_QWORD *)*a1, *((_QWORD *)a2 + 3));
        v92 = (_QWORD *)*a1;
        if (*(__int128 **)(*a1 + 5832) == &v210)
          v92[729] = 0;
        v93 = *(_QWORD *)(a1[1] + 48);
        if (v73 == 0x80000000000 && sub_22E61F5D8(*((unsigned __int8 **)a2 + 3)))
        {
          *(_QWORD *)v218 = "lor.rhscnt";
          *(_WORD *)&v218[32] = 259;
          v94 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v95 = (uint64_t *)a1[1];
          v96 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v96, v75, v94, v91, 0);
          *(_WORD *)&v218[32] = 257;
          sub_22E3C12C8(v95, v96, (uint64_t)v218);
          sub_22E5ED9B4((_QWORD *)*a1, v94, 0);
          sub_22E3CB7B0((_QWORD *)*a1, *((_QWORD *)a2 + 3), 0);
          sub_22E5EDA70(*a1);
          sub_22E3C4C50(v84, (uint64_t)v91, (uint64_t)v94);
          v92 = (_QWORD *)*a1;
        }
        sub_22E5ED9B4(v92, v75, 0);
        sub_22E3C4C50(v84, (uint64_t)v91, v93);
        v97 = (uint64_t *)a1[1];
        *(_QWORD *)v218 = "lor.ext";
        *(_WORD *)&v218[32] = 259;
        v98 = (uint64_t)v84;
      }
      else
      {
        sub_22E3CB7B0((_QWORD *)*a1, (uint64_t)a2, 0);
        v102 = sub_22E4D86E0((_QWORD *)*a1, *((_QWORD *)a2 + 3));
        if (v73 == 0x80000000000 && sub_22E61F5D8(*((unsigned __int8 **)a2 + 3)))
        {
          *(_QWORD *)v218 = "lor.end";
          *(_WORD *)&v218[32] = 259;
          v145 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)v218 = "lor.rhscnt";
          *(_WORD *)&v218[32] = 259;
          v146 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v147 = (uint64_t *)a1[1];
          v148 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v148, v145, v146, v102, 0);
          *(_WORD *)&v218[32] = 257;
          sub_22E3C12C8(v147, v148, (uint64_t)v218);
          sub_22E5ED9B4((_QWORD *)*a1, v146, 0);
          sub_22E3CB7B0((_QWORD *)*a1, *((_QWORD *)a2 + 3), 0);
          sub_22E5EDA70(*a1);
          sub_22E5ED9B4((_QWORD *)*a1, v145, 0);
        }
        v97 = (uint64_t *)a1[1];
        v149 = "lor.ext";
LABEL_184:
        *(_QWORD *)v218 = v149;
        *(_WORD *)&v218[32] = 259;
        v98 = (uint64_t)v102;
      }
      return (llvm::Value *)sub_22E3D3108(v97, v98, (uint64_t)v74, (uint64_t)v218);
    case 0x15:
      v52 = *((unsigned __int8 *)a1 + 16);
      *((_BYTE *)a1 + 16) = 0;
      v209 = 0;
      v53 = *((_QWORD *)a2 + 2);
      v54 = *(_QWORD *)((*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v54 & 8) != 0)
      {
        v99 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        if ((v99 & 0xC00000000) != 0)
        {
          v180 = v52;
          v181 = HIDWORD(v99);
          sub_22E4E0888(*a1, (unsigned __int8 *)v53, 1u, (uint64_t)v218);
          *(_DWORD *)&v219[12] = 0;
          v182 = *a1;
          v183 = *((_QWORD *)a2 + 3);
          v204[0] = *(_OWORD *)&v218[8];
          v204[1] = *(_OWORD *)&v218[24];
          v204[2] = *(_OWORD *)&v218[40];
          v184 = (llvm::Type **)sub_22F289F48(v182, v181, v183, v204, *(__n128 *)&v218[40]);
          sub_22E4C7504(*a1, *(unint64_t *)v219, v184, *((_DWORD *)a2 + 1));
          v185 = *a1;
          v206[0] = (unint64_t)v184;
          v207 = 0;
          v215 = v220;
          v216 = v221;
          v217 = v222;
          v212 = *(_OWORD *)&v218[32];
          v213 = *(_OWORD *)&v218[48];
          *(_OWORD *)v214 = *(_OWORD *)v219;
          *(_OWORD *)&v214[16] = *(_OWORD *)&v219[16];
          v210 = *(_OWORD *)v218;
          v211 = *(_OWORD *)&v218[16];
          sub_22E4DAAE0(v185, v206, &v210, 0, *(double *)&v218[16]);
          v38 = 0;
          if (v180)
            return (llvm::Value *)v38;
          v186 = *a1;
          v208[0] = *(_OWORD *)&v218[8];
          v208[1] = *(_OWORD *)&v218[24];
          v208[2] = *(_OWORD *)&v218[40];
          return (llvm::Value *)sub_22F28A088(v186, v181, (uint64_t)v184, *(uint64_t *)v219, v208, 0);
        }
        switch((v99 >> 6) & 7)
        {
          case 0u:
            goto LABEL_57;
          case 1u:
            sub_22F274020(*a1, (uint64_t)a2, v52 != 0, (uint64_t)v218, a3);
            goto LABEL_108;
          case 2u:
            sub_22E564C34((llvm::Value *)*a1, (uint64_t)a2, v52 != 0, (uint64_t)v218, a3);
            goto LABEL_108;
          case 3u:
            v139 = (uint64_t *)sub_22E50E974(a1, *((_QWORD *)a2 + 3), a3);
            sub_22E4E0888(*a1, *((unsigned __int8 **)a2 + 2), 1u, (uint64_t)v218);
            v6 = *(_DWORD *)v218;
            v4 = *(_DWORD *)&v218[4];
            v140 = *(_DWORD *)&v218[32];
            v3 = *(_DWORD *)&v218[36];
            v193 = *(_QWORD *)v219;
            v194 = *(_QWORD *)&v218[40];
            v200 = *(_OWORD *)&v218[48];
            v201 = *(_OWORD *)&v219[8];
            v198 = *(_QWORD *)&v219[24];
            v197 = v220;
            v199 = v221;
            v5 = v222;
            v141 = (_QWORD *)*a1;
            v195 = *(_QWORD *)&v218[8];
            *(_QWORD *)v218 = *(_QWORD *)&v218[8];
            v202 = *(_QWORD *)&v218[24];
            v203 = *(_QWORD *)&v218[16];
            *(_QWORD *)&v218[8] = *(_QWORD *)&v218[16];
            *(_QWORD *)&v218[16] = *(_QWORD *)&v218[24];
            *(_DWORD *)&v218[24] = *(_DWORD *)&v218[32];
            *(_DWORD *)&v218[28] = *(_DWORD *)&v218[36];
            *(_QWORD *)&v218[32] = *(_QWORD *)&v218[40];
            *(_QWORD *)&v218[40] = *(_QWORD *)&v218[48];
            v56 = v140;
            v209 = sub_22E56435C(v141, (uint64_t)v218, v139, (uint64_t *)(*(_QWORD *)(v141[18] + 832) + 336), 230, v52 != 0);
            break;
          case 4u:
            sub_22F27410C(*a1, (uint64_t)a2, (uint64_t)v218, a3);
LABEL_108:
            v6 = *(_DWORD *)v218;
            v4 = *(_DWORD *)&v218[4];
            v202 = *(_QWORD *)&v218[24];
            v203 = *(_QWORD *)&v218[16];
            v56 = *(_DWORD *)&v218[32];
            v3 = *(_DWORD *)&v218[36];
            v194 = *(_QWORD *)&v218[40];
            v195 = *(_QWORD *)&v218[8];
            v193 = *(_QWORD *)v219;
            v200 = *(_OWORD *)&v218[48];
            v201 = *(_OWORD *)&v219[8];
            v198 = *(_QWORD *)&v219[24];
            v197 = v220;
            v199 = v221;
            v5 = v222;
            v209 = v223;
            break;
          default:
            v193 = 0;
            v194 = 0;
            v56 = 0;
            v202 = 0;
            v203 = 0;
            v195 = 0;
            v199 = 0u;
            v200 = 0u;
            v201 = xmmword_22F4579A0;
            v197 = 0u;
            v198 = 0;
            break;
        }
      }
      else
      {
LABEL_57:
        v196 = v52;
        v55 = (llvm::Type **)sub_22E50E974(a1, *((_QWORD *)a2 + 3), a3);
        v209 = (uint64_t)v55;
        sub_22E4E0888(*a1, *((unsigned __int8 **)a2 + 2), 1u, (uint64_t)v218);
        v6 = *(_DWORD *)v218;
        v4 = *(_DWORD *)&v218[4];
        v202 = *(_QWORD *)&v218[24];
        v203 = *(_QWORD *)&v218[16];
        v56 = *(_DWORD *)&v218[32];
        v3 = *(_DWORD *)&v218[36];
        v57 = *(_QWORD *)v219;
        v58 = *a1;
        v194 = *(_QWORD *)&v218[40];
        v195 = *(_QWORD *)&v218[8];
        v193 = *(_QWORD *)v219;
        v200 = *(_OWORD *)&v218[48];
        v201 = *(_OWORD *)&v219[8];
        v198 = *(_QWORD *)&v219[24];
        v199 = v221;
        v197 = v220;
        if (*(_DWORD *)v218 == 2)
        {
          v204[0] = (unint64_t)v55;
          v205 = 0;
          *(_QWORD *)&v210 = __PAIR64__(*(unsigned int *)&v218[4], 2);
          *((_QWORD *)&v210 + 1) = *(_QWORD *)&v218[8];
          v211 = *(_OWORD *)&v218[16];
          v212 = *(_OWORD *)&v218[32];
          v213 = *(_OWORD *)&v218[48];
          *(_QWORD *)v214 = *(_QWORD *)v219;
          *(_OWORD *)&v214[8] = *(_OWORD *)&v219[8];
          *(_QWORD *)&v214[24] = *(_QWORD *)&v219[24];
          v215 = v220;
          v216 = v221;
          v5 = v222;
          v217 = v222;
          sub_22E4E9128(v58, (uint64_t *)v204, (uint64_t)&v210, &v209);
        }
        else
        {
          v192 = *(_QWORD *)&v218[32];
          v107 = *(_QWORD *)&v218[8];
          v108 = *(_QWORD *)&v218[40];
          v191 = v222;
          sub_22E4C7504(v58, *(unint64_t *)v219, v55, *((_DWORD *)a2 + 1));
          v109 = *a1;
          v204[0] = (unint64_t)v55;
          v205 = 0;
          *(_QWORD *)&v210 = __PAIR64__(v4, v6);
          *((_QWORD *)&v210 + 1) = v107;
          v56 = v192;
          *(_QWORD *)&v211 = v203;
          *((_QWORD *)&v211 + 1) = v202;
          *(_QWORD *)&v212 = v192;
          *((_QWORD *)&v212 + 1) = v108;
          v3 = HIDWORD(v192);
          v213 = v200;
          *(_QWORD *)v214 = v57;
          *(_OWORD *)&v214[8] = v201;
          *(_QWORD *)&v214[24] = v198;
          v215 = v197;
          v216 = v199;
          v5 = v191;
          v217 = v191;
          sub_22E4DAAE0(v109, v204, &v210, 0, *(double *)&v199);
        }
        v52 = v196;
      }
      if (v52)
        return 0;
      v110 = (_QWORD *)*a1;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152) + 1) & 1) == 0 || (v201 & 4) == 0)
        return (llvm::Value *)v209;
      v179 = *((_DWORD *)a2 + 1);
      *(_DWORD *)v218 = v6;
      *(_DWORD *)&v218[4] = v4;
      *(_QWORD *)&v218[8] = v195;
      *(_QWORD *)&v218[16] = v203;
      *(_QWORD *)&v218[24] = v202;
      *(_DWORD *)&v218[32] = v56;
      *(_DWORD *)&v218[36] = v3;
      *(_QWORD *)&v218[40] = v194;
      *(_OWORD *)&v218[48] = v200;
      *(_QWORD *)v219 = v193;
      *(_OWORD *)&v219[8] = v201;
      *(_QWORD *)&v219[24] = v198;
      v220 = v197;
      v221 = v199;
      v222 = v5;
      sub_22E4D7B28(v110, (uint64_t)v218, v179, (uint64_t)v206);
      return *(llvm::Value **)&v206[0];
    case 0x16:
      v39 = sub_22E512324;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x17:
      v39 = sub_22E51262C;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x18:
      v39 = sub_22E512AB4;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x19:
      v39 = sub_22E512C30;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1A:
      v39 = sub_22E512F48;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1B:
      v39 = sub_22E513434;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1C:
      v39 = sub_22E513A28;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1D:
      v39 = sub_22E513C28;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1E:
      v39 = sub_22E513C68;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x1F:
      v39 = sub_22E513CA8;
      return (llvm::Value *)sub_22E51BE64((uint64_t)a1, (uint64_t)a2, (uint64_t (*)(_QWORD *, _QWORD *))v39, 0);
    case 0x20:
      sub_22E4D89CC(*a1);
      sub_22E47E098(*a1);
      v13 = *((_QWORD *)a2 + 3);
      return (llvm::Value *)sub_22E50E974(a1, v13, a3);
    default:
      goto LABEL_9;
  }
}

uint64_t sub_22E519648(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  llvm::Type *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type **v17;
  uint64_t *v18;
  llvm::DataLayout *v19;
  uint64_t v20;
  llvm::Type *v21;
  uint64_t *v22;
  llvm::DataLayout *DataLayout;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  llvm::DataLayout *v29;
  _QWORD v32[2];
  char v33;
  uint64_t v34;
  __int16 v35;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *a1 + 272;
  v32[0] = *a1;
  v32[1] = v6;
  v33 = 0;
  v34 = *(_QWORD *)(*(_QWORD *)(v32[0] + 144) + 232);
  v7 = (llvm::Type **)sub_22E50E974(v32, v5, a3);
  v8 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
  v9 = 0;
  if ((*((_DWORD *)*v7 + 2) & 0xFE) == 0x12)
    v9 = *((_DWORD *)*v7 + 8);
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
    v10 = *((_DWORD *)v8 + 8);
  else
    v10 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v11 + 16) == 56)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12 && (*(_DWORD *)(v12 + 16) & 0xFF800FF) == 87031819)
    {
      v14 = *a1;
      if ((*(_BYTE *)(*(_QWORD *)(*a1 + 152) + *(_QWORD *)(**(_QWORD **)(*a1 + 152) - 24) + 160) & 0x20) != 0)
      {
        v32[0] = "astype";
        v35 = 259;
        return sub_22E6227D8(v14, (uint64_t)v7, v10, (uint64_t)v32);
      }
    }
  }
  if (v9 != 3 || v10 == 3)
  {
    if (v9 != 3 && v10 == 3)
    {
      v21 = (llvm::Type *)llvm::FixedVectorType::get();
      v22 = (uint64_t *)a1[1];
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*a1 + 144) + 200));
      v24 = sub_22E51CC9C(v22, DataLayout, v7, v21, (uint64_t)"", 0);
      v25 = a1[1];
      v35 = 257;
      v26 = llvm::PoisonValue::get();
      v20 = sub_22E3ED3CC(v25, v24, v26, (uint64_t)&unk_22F4583B8, 3, (uint64_t)v32);
      goto LABEL_19;
    }
    v28 = (uint64_t *)a1[1];
    v29 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*a1 + 144) + 200));
    return sub_22E51CC9C(v28, v29, v7, v8, (uint64_t)"astype", 6);
  }
  v15 = a1[1];
  v35 = 257;
  v16 = llvm::PoisonValue::get();
  v17 = (llvm::Type **)sub_22E3ED3CC(v15, (uint64_t)v7, v16, (uint64_t)&unk_22F4583B8, 4, (uint64_t)v32);
  v18 = (uint64_t *)a1[1];
  v19 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*a1 + 144) + 200));
  v20 = sub_22E51CC9C(v18, v19, v17, v8, (uint64_t)"", 0);
LABEL_19:
  v27 = v20;
  v32[0] = "astype";
  v35 = 259;
  llvm::Value::setName();
  return v27;
}

llvm::Type **sub_22E5198F0(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t *v5;
  llvm::Type **v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  llvm::Type **v13;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFFA9C0((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144)) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) & 0xFE) == 0x28)return sub_22E51A3C0(a1, a2);
  v5 = (uint64_t *)*a1;
  v8 = 0;
  v7 = 0uLL;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_22E4ECB90(v5, (unsigned int *)a2, &v7, &v13);
  v6 = v13;
  sub_22E51A474(a1, a2, v13);
  return v6;
}

uint64_t sub_22E5199B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  BOOL v8;
  uint64_t v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  llvm::Constant *v75;
  uint64_t v76;
  llvm::Type *v77;
  uint64_t NullValue;
  uint64_t *v79;
  uint64_t __len;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[4];
  __int16 v90;
  void *v91;
  uint64_t v92;
  _DWORD v93[4];
  __int16 v94;
  uint64_t v95;

  v2 = a2;
  v3 = a1;
  v95 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
  v5 = v4 >> 3;
  if ((*(_BYTE *)(a2 + 2) & 4) != 0)
    sub_22E628400(*(_QWORD *)(*a1 + 144), a2, "GNU array range designator extension");
  v6 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*v3 + 144) + 280), *(llvm::LLVMContext **)(v2 + 8));
  if (v6)
    v8 = (*(_DWORD *)(v6 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (!v8)
  {
    if ((_DWORD)v5)
      return sub_22E50E974(v3, **(_QWORD **)(v2 + 16), v7);
    else
      return sub_22E51CE08(v3, *(_QWORD *)(v2 + 8));
  }
  v10 = *(unsigned int *)(v6 + 32);
  v82 = v6;
  v12 = llvm::UndefValue::get();
  if ((_DWORD)v5)
  {
    v14 = 0;
    v15 = 0;
    LODWORD(v16) = 0;
    v86 = (v4 >> 3);
    __len = 4 * v10 - 4;
    v81 = v10 - 1;
    v84 = v3;
    v85 = v10;
    v17 = v10;
    v87 = v2;
    while (1)
    {
      v88 = v14;
      v18 = *(unsigned __int8 **)(*(_QWORD *)(v2 + 16) + 8 * v14);
      v19 = (_BYTE *)sub_22E50E974(v3, v18, v13);
      v21 = (uint64_t)v19;
      v91 = v93;
      v92 = 0x1000000000;
      v22 = *(_QWORD *)v19;
      if (*(_QWORD *)v19)
        v23 = (*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 18;
      else
        v23 = 0;
      if (v23)
      {
        v30 = *(unsigned int *)(v22 + 32);
        v31 = *(_DWORD *)(v22 + 32);
        if ((_DWORD)v16)
          v32 = v17;
        else
          v32 = 0;
        if (*v18 != 167 || *(_DWORD *)(**((_QWORD **)v19 - 8) + 32) != (_DWORD)v17)
          goto LABEL_57;
        v83 = *((_QWORD *)v19 - 8);
        LODWORD(v33) = 0;
        if ((_DWORD)v16)
        {
          v34 = 0;
          do
          {
            if (v15)
            {
              v35 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 4 * v34);
              if (v33 >= HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                LODWORD(v33) = v92;
              }
              *((_DWORD *)v91 + v33) = v35;
            }
            else
            {
              if (v33 >= HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                LODWORD(v33) = v92;
              }
              *((_DWORD *)v91 + v33) = v34;
            }
            LODWORD(v33) = v92 + 1;
            LODWORD(v92) = v92 + 1;
            ++v34;
          }
          while (v16 != v34);
        }
        if (v31)
        {
          v36 = 0;
          do
          {
            v37 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + v36);
            if (v37 == -1)
              v38 = -1;
            else
              v38 = v37 + v32;
            if (v33 >= HIDWORD(v92))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              LODWORD(v33) = v92;
            }
            *((_DWORD *)v91 + v33) = v38;
            LODWORD(v33) = v92 + 1;
            LODWORD(v92) = v92 + 1;
            v36 += 4;
          }
          while (4 * v30 != v36);
        }
        v3 = v84;
        v17 = v85;
        v39 = v85;
        v40 = v83;
        if ((_DWORD)v33 != (_DWORD)v85)
        {
          v41 = v33;
          v39 = v85;
          if (v33 <= v85)
          {
            v33 = v33;
            if (v85 > HIDWORD(v92))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v33 = v92;
            }
            memset((char *)v91 + 4 * v33, 255, 4 * (v85 - v41));
            v39 = v85 - v41 + v92;
            v17 = v85;
          }
          LODWORD(v92) = v39;
        }
        if (v15)
          v12 = *(_QWORD *)(v12 - 64);
        v21 = v83;
        if (!v39)
        {
LABEL_57:
          LODWORD(v42) = 0;
          if (v31)
          {
            v43 = 0;
            do
            {
              if (v42 >= HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                LODWORD(v42) = v92;
              }
              *((_DWORD *)v91 + v42) = v43;
              LODWORD(v42) = v92 + 1;
              LODWORD(v92) = v92 + 1;
              ++v43;
            }
            while ((_DWORD)v30 != v43);
          }
          v44 = v17;
          if ((_DWORD)v42 != (_DWORD)v17)
          {
            v45 = v42;
            if (v42 <= v17)
            {
              v42 = v42;
              if (v17 > HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v92;
              }
              memset((char *)v91 + 4 * v42, 255, 4 * (v85 - v45));
              v44 = (v92 + v85 - v45);
              v17 = v85;
              LODWORD(v92) = v92 + v85 - v45;
            }
            else
            {
              LODWORD(v92) = v17;
              v44 = v17;
            }
          }
          v46 = v3[1];
          v47 = v91;
          v89[0] = "vext";
          v90 = 259;
          v48 = llvm::PoisonValue::get();
          v40 = sub_22E3ED3CC(v46, v21, v48, (uint64_t)v47, v44, (uint64_t)v89);
          LODWORD(v92) = 0;
          LODWORD(v49) = 0;
          if ((_DWORD)v16)
          {
            v50 = 0;
            v3 = v84;
            do
            {
              if (v49 >= HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                LODWORD(v49) = v92;
              }
              *((_DWORD *)v91 + v49) = v50;
              LODWORD(v49) = v92 + 1;
              LODWORD(v92) = v92 + 1;
              ++v50;
            }
            while ((_DWORD)v16 != v50);
          }
          else
          {
            v3 = v84;
          }
          for (; v31; --v31)
          {
            if (v49 >= HIDWORD(v92))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              LODWORD(v49) = v92;
            }
            *((_DWORD *)v91 + v49) = v32;
            LODWORD(v49) = v92 + 1;
            LODWORD(v92) = v92 + 1;
            ++v32;
          }
          if ((_DWORD)v49 == (_DWORD)v17)
          {
            v39 = v17;
          }
          else
          {
            v51 = v49;
            v39 = v17;
            if (v49 <= v17)
            {
              v49 = v49;
              if (v17 > HIDWORD(v92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v49 = v92;
              }
              memset((char *)v91 + 4 * v49, 255, 4 * (v85 - v51));
              v39 = v85 - v51 + v92;
              v17 = v85;
            }
            LODWORD(v92) = v39;
          }
        }
        if ((_DWORD)v16)
          v52 = v40;
        else
          v52 = v12;
        if ((_DWORD)v16)
          v53 = v12;
        else
          v53 = v40;
        v54 = v3[1];
        v89[0] = "vecinit";
        v90 = 259;
        v55 = sub_22E3ED3CC(v54, v53, v52, (uint64_t)v91, v39, (uint64_t)v89);
        v12 = v55;
        v15 = *(unsigned __int8 *)(v52 + 16) - 11 <= 1 && *(_BYTE *)(v55 + 16) == 91 && v55 != 0;
        v2 = v87;
        v57 = v88;
        LODWORD(v16) = v30 + v16;
        goto LABEL_127;
      }
      if (*v18 != 167
        || v19[16] != 89
        || (v24 = (uint64_t *)(v19 - 64), *(_DWORD *)(**((_QWORD **)v19 - 8) + 32) != (_DWORD)v17))
      {
LABEL_125:
        v72 = v3[1];
        llvm::Type::getInt32Ty(*(llvm::Type **)(v72 + 64), v20);
        v73 = llvm::ConstantInt::get();
        v89[0] = "vecinit";
        v90 = 259;
        v12 = sub_22E3ED5D4((uint64_t *)v72, v12, v21, v73, (uint64_t)v89);
        v15 = 0;
        LODWORD(v16) = v16 + 1;
        goto LABEL_126;
      }
      v25 = *((_QWORD *)v19 - 4);
      v26 = (_DWORD)v16 == 0;
      if ((_DWORD)v16)
        break;
      v58 = (_QWORD *)(v25 + 24);
      if (*(_DWORD *)(v25 + 32) >= 0x41u)
        v58 = (_QWORD *)*v58;
      v93[0] = *v58;
      LODWORD(v92) = 1;
      v59 = v17;
      if (!(_DWORD)v17)
        goto LABEL_124;
      if ((_DWORD)v17 != 1)
      {
        if (v17 >= 0x11)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v92;
          v71 = v92;
        }
        else
        {
          v70 = 1;
          v71 = 1;
        }
        if (v81)
        {
          memset((char *)v91 + 4 * v70, 255, __len);
          v71 = v92;
        }
        v59 = v71 + v81;
LABEL_124:
        LODWORD(v92) = v59;
        v61 = v12;
        if (!v59)
          goto LABEL_125;
LABEL_117:
        v60 = v91;
        goto LABEL_118;
      }
      v60 = v93;
      v61 = v12;
      v59 = 1;
LABEL_118:
      v68 = *v24;
      v69 = v3[1];
      v90 = 257;
      v12 = sub_22E3ED3CC(v69, v68, v61, (uint64_t)v60, v59, (uint64_t)v89);
      LODWORD(v16) = v16 + 1;
      v15 = v26;
LABEL_126:
      v2 = v87;
      v57 = v88;
LABEL_127:
      if (v91 != v93)
        free(v91);
      v14 = v57 + 1;
      if (v14 == v86)
        goto LABEL_134;
    }
    if (!v15)
      goto LABEL_125;
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + v27);
      if (v28 >= HIDWORD(v92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v92;
      }
      *((_DWORD *)v91 + v28) = v29;
      v28 = v92 + 1;
      LODWORD(v92) = v92 + 1;
      v27 += 4;
    }
    while (4 * v16 != v27);
    v62 = (_QWORD *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u)
      v62 = (_QWORD *)*v62;
    v63 = *(_DWORD *)v62;
    if (v28 >= HIDWORD(v92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = v92;
    }
    v64 = v85 + v63;
    v17 = v85;
    *((_DWORD *)v91 + v28) = v64;
    v65 = v92;
    v66 = (v92 + 1);
    LODWORD(v92) = v66;
    v59 = v85;
    if ((_DWORD)v66 != (_DWORD)v85)
    {
      v59 = v85;
      if (v66 <= v85)
      {
        v67 = v66;
        if (v85 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v67 = v92;
        }
        memset((char *)v91 + 4 * v67, 255, 4 * (v85 - v66));
        v59 = v85 + ~v65 + v92;
        v17 = v85;
      }
      LODWORD(v92) = v59;
    }
    v61 = *v24;
    v24 = (uint64_t *)(v12 - 64);
    if (!v59)
      goto LABEL_125;
    goto LABEL_117;
  }
  LODWORD(v16) = 0;
  LODWORD(v17) = v10;
LABEL_134:
  v74 = v17 - v16;
  if (v17 > v16)
  {
    v75 = *(llvm::Constant **)(v82 + 24);
    v16 = v16;
    do
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(v3[1] + 64), v11);
      v76 = llvm::ConstantInt::get();
      NullValue = llvm::Constant::getNullValue(v75, v77);
      v79 = (uint64_t *)v3[1];
      v91 = "vecinit";
      v94 = 259;
      v12 = sub_22E3ED5D4(v79, v12, NullValue, v76, (uint64_t)&v91);
      ++v16;
      --v74;
    }
    while (v74);
  }
  return v12;
}

llvm::Type **sub_22E51A3C0(uint64_t *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned int v5;
  llvm::Type **v6;
  _OWORD v8[8];
  uint64_t v9;
  _OWORD v10[8];
  uint64_t v11;
  llvm::Type **v12;

  sub_22E4E0888(*a1, a2, 0, (uint64_t)v8);
  sub_22EFF605C((uint64_t)a2);
  v4 = (_QWORD *)*a1;
  v10[6] = v8[6];
  v10[7] = v8[7];
  v11 = v9;
  v10[2] = v8[2];
  v10[3] = v8[3];
  v10[4] = v8[4];
  v10[5] = v8[5];
  v10[0] = v8[0];
  v10[1] = v8[1];
  sub_22E4D7B28(v4, (uint64_t)v10, v5, (uint64_t)&v12);
  v6 = v12;
  sub_22E51A474(a1, a2, v12);
  return v6;
}

void sub_22E51A474(uint64_t *a1, unsigned __int8 *a2, llvm::Type **a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type **v37;
  int v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  if (*a2 == 161)
  {
    v6 = *((_QWORD *)a2 + 2);
    v7 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0;
    v8 = *(_QWORD *)v7;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v9 = *(_DWORD *)(v8 + 16);
      if ((v9 & 0xFE) != 0x28)
      {
        v8 = sub_22F10CF48(v8);
        if (!v8)
        {
LABEL_8:
          v10 = *(_QWORD *)v7;
          if (*(_QWORD *)v7)
          {
            if (*(_BYTE *)(v10 + 16) == 50)
            {
              v11 = *(_QWORD *)(v10 + 24);
              if ((*(_BYTE *)(v11 + 29) & 1) != 0)
              {
                v13.n128_f64[0] = sub_22EFC8E88(v11);
                v14 = *(uint64_t **)v12;
                v15 = *(unsigned int *)(v12 + 8);
                v16 = *(uint64_t **)v12;
                if ((_DWORD)v15)
                {
                  v17 = 8 * v15;
                  v16 = *(uint64_t **)v12;
                  while (*(_WORD *)(*v16 + 32) != 363)
                  {
                    ++v16;
                    v17 -= 8;
                    if (!v17)
                      goto LABEL_30;
                  }
                }
                if (v16 != &v14[v15])
                {
                  do
                  {
                    v26 = *v14++;
                    v24 = v26;
                  }
                  while (*(_WORD *)(v26 + 32) != 363);
                  goto LABEL_40;
                }
              }
            }
          }
          goto LABEL_30;
        }
        v9 = *(_DWORD *)(v8 + 16);
      }
      if ((v9 & 0x100000) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v8)
          {
            v38 = *(_DWORD *)(v8 + 16);
            if ((v38 & 0xFE) == 0x28)
              continue;
          }
          v8 = sub_22F10CF48(v8);
          v38 = *(_DWORD *)(v8 + 16);
        }
        while ((v38 & 0x100000) != 0);
      }
      v7 = *(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_8;
    }
    v18 = *(_DWORD *)(v6 + 28);
    if ((v18 & 0x7F) == 0x40 && (*(_BYTE *)(*a1 + 1865) & 0x80) == 0)
      return;
    if ((v18 & 0x100) != 0)
    {
      v13.n128_f64[0] = sub_22EFC8E88(*((_QWORD *)a2 + 2));
      v20 = *(uint64_t **)v19;
      v21 = *(unsigned int *)(v19 + 8);
      v22 = *(uint64_t **)v19;
      if ((_DWORD)v21)
      {
        v23 = 8 * v21;
        v22 = *(uint64_t **)v19;
        while (*(_WORD *)(*v22 + 32) != 363)
        {
          ++v22;
          v23 -= 8;
          if (!v23)
            goto LABEL_30;
        }
      }
      if (v22 != &v20[v21])
      {
        do
        {
          v25 = *v20++;
          v24 = v25;
        }
        while (*(_WORD *)(v25 + 32) != 363);
        goto LABEL_40;
      }
    }
  }
LABEL_30:
  v27 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (v27)
  {
    if (*(_BYTE *)(v27 + 16) == 50)
    {
      v28 = *(_QWORD *)(v27 + 24);
      if ((*(_BYTE *)(v28 + 29) & 1) != 0)
      {
        v13.n128_f64[0] = sub_22EFC8E88(v28);
        v30 = *(uint64_t **)v29;
        v31 = *(unsigned int *)(v29 + 8);
        i = *(uint64_t **)v29;
        if ((_DWORD)v31)
        {
          v33 = 8 * v31;
          for (i = *(uint64_t **)v29; *(_WORD *)(*i + 32) != 363; ++i)
          {
            v33 -= 8;
            if (!v33)
              return;
          }
        }
        if (i != &v30[v31])
        {
          do
          {
            v34 = *v30++;
            v24 = v34;
          }
          while (*(_WORD *)(v34 + 32) != 363);
LABEL_40:
          v35 = *(_QWORD *)(v24 + 40);
          v36 = *a1 + 272;
          v39[0] = *a1;
          v39[1] = v36;
          v40 = 0;
          v41 = *(_QWORD *)(*(_QWORD *)(v39[0] + 144) + 232);
          v37 = (llvm::Type **)sub_22E50E974(v39, v35, v13);
          sub_22E621528(*a1, a3, a2, *(_DWORD *)(v24 + 16), v37, 0);
        }
      }
    }
  }
}

unint64_t sub_22E51A6F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 12;
  else
    v5 = 0;
  if (v5
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12 && (v4 = sub_22F10CF48(v4)) != 0)
  {
    v8 = *(_QWORD *)(v4 + 32);
    if (sub_22F10E474(&v8, a1))
      return sub_22F369F4C(a1, *(_QWORD *)(a1 + 16560));
  }
  if (!sub_22F10E474(&v9, a1))
    return 0;
  v6 = sub_22E3E4B64(*v3);
  if (v6)
    return sub_22F36B7E4(a1, *(_QWORD *)(a1 + 16560), *(unsigned int *)(v6 + 20), (*(_DWORD *)(v6 + 16) >> 19) & 0xF);
  else
    return *(_QWORD *)(a1 + 16560);
}

uint64_t sub_22E51A7D0(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t result;

  v4 = a4;
  *((_BYTE *)a2 + 16) = 0;
  *(_QWORD *)a1 = sub_22E50FD80(*a2, *(_QWORD *)(a3 + 16), a4);
  *(_QWORD *)(a1 + 8) = sub_22E50FD80(*a2, *(_QWORD *)(a3 + 24), v4);
  if (v4 <= 0xF)
    v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = (*(_DWORD *)a3 >> 18) & 0x3F;
  result = sub_22E51A864((_DWORD *)a3, *(_QWORD *)(*(_QWORD *)(*a2 + 144) + 152));
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = a3;
  return result;
}

uint64_t sub_22E51A864(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if ((*a1 & 0x1000000) != 0)
  {
    v3 = 8;
    if (*a1 == 113)
      v3 = 12;
    v4 = &a1[v3];
    v5 = *v4;
    v6 = v4[1];
    sub_22E51A8D0(&v7, a2);
    return v7 & ~v6 | v6 & v5;
  }
  else
  {
    sub_22E51A8D0(&v8, a2);
    return v8;
  }
}

_DWORD *sub_22E51A8D0(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  *result = 0;
  if (((*(_DWORD *)(a2 + 244) >> 2) & 3) == 3)
    v2 = 2;
  else
    v2 = (*(_DWORD *)(a2 + 244) >> 2) & 3;
  *result = v2;
  v3 = (*(_DWORD *)(a2 + 244) >> 2) & 0x1C;
  *result = v2 | v3;
  v4 = (*(_DWORD *)(a2 + 244) >> 2) & 0x60;
  v5 = v4 | v2 | v3;
  *result = v5;
  v6 = (*(_DWORD *)(a2 + 52) >> 7) & 0x100 | v5;
  *result = v6;
  v7 = (*(_DWORD *)(a2 + 52) >> 7) & 0x200 | v6;
  *result = v7;
  v8 = v7 | (*(_DWORD *)(a2 + 52) >> 7) & 0x400;
  *result = v8;
  v9 = v8 & 0xFFFFF7FF | (((*(_DWORD *)(a2 + 52) >> 18) & 1) << 11);
  *result = v9;
  v10 = v9 & 0xFFFFEFFF | (((*(_DWORD *)(a2 + 52) >> 19) & 1) << 12);
  *result = v10;
  v11 = v10 & 0xFFFFDFFF | (((*(_DWORD *)(a2 + 52) >> 20) & 1) << 13);
  if (v2 == 1 && v3 == 28 && v4 == 64)
    v12 = v11 | 0x80;
  else
    v12 = v11 & 0xFFFFFF7F;
  *result = v12;
  return result;
}

llvm::Value *sub_22E51A9A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t v24;
  uint64_t *v25;
  llvm::Type *v26;
  uint64_t *v27;
  __n128 v28;
  uint64_t v29;
  BOOL v30;
  llvm::Constant **v31;
  llvm::Type *v32;
  uint64_t NullValue;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t FCmpHelper;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t StripInvariantGroup;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::LLVMContext *v54;
  uint64_t *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int16 v63;
  char v64;
  _QWORD v65[3];
  unsigned int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  _QWORD v69[2];
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)a1 + 16) = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v68 = v9;
  v69[0] = v8;
  v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 31;
  else
    v12 = 0;
  if (v12)
    goto LABEL_8;
  v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v15 == 31)
  {
    if (sub_22F10CF48(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
    {
      v7 = *(_QWORD *)(a2 + 16);
LABEL_8:
      v16 = *a1 + 272;
      v57 = (const char *)*a1;
      v58 = v16;
      LOBYTE(v59) = 0;
      v60 = *(_QWORD *)(*((_QWORD *)v57 + 18) + 232);
      sub_22E50E974(&v57, v7, a5);
      v17 = *(_QWORD *)(a2 + 24);
      v18 = *a1 + 272;
      v57 = (const char *)*a1;
      v58 = v18;
      LOBYTE(v59) = 0;
      v60 = *(_QWORD *)(*((_QWORD *)v57 + 18) + 232);
      sub_22E50E974(&v57, v17, v19);
      v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 224);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 192))(v20);
LABEL_9:
      v22 = (llvm::Value *)v21;
      return sub_22E50EA80(a1, v22, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144) + 16400), *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 4), 0);
    }
    v11 = *v10;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v15 == 12)
  {
    if (*(_BYTE *)(v11 + 16) == 12)
    {
LABEL_44:
      v25 = (uint64_t *)sub_22F262930(*a1, *(unsigned __int8 **)(a2 + 16), 0, 0);
      v27 = v48;
      v8 = *(_QWORD *)(v11 + 32);
LABEL_19:
      v29 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if (v29)
        v30 = *(_BYTE *)(v29 + 16) == 12;
      else
        v30 = 0;
      if (v30
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12 && sub_22F10CF48(v29))
      {
        v31 = (llvm::Constant **)sub_22F262930(*a1, *(unsigned __int8 **)(a2 + 24), 0, 0);
        NullValue = v49;
      }
      else
      {
        v31 = (llvm::Constant **)sub_22E50E974(a1, *(_QWORD *)(a2 + 24), v28);
        NullValue = llvm::Constant::getNullValue(*v31, v32);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v34)
        v35 = *(_DWORD *)(v34 + 16) == 11;
      else
        v35 = 0;
      if (v35)
      {
        v37 = a1 + 1;
        v36 = a1[1];
        if (((*(_DWORD *)(v34 + 16) >> 19) & 0x1FEu) - 210 <= 7)
        {
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
          v57 = "cmp.i";
          LOWORD(v61) = 259;
          v39 = llvm::IRBuilderBase::CreateFCmpHelper();
          goto LABEL_34;
        }
      }
      else
      {
        v37 = a1 + 1;
        v36 = a1[1];
      }
      v57 = "cmp.r";
      LOWORD(v61) = 259;
      FCmpHelper = sub_22E3C18F4(v36, a3, v25, (uint64_t)v31, (uint64_t)&v57);
      v40 = *v37;
      v57 = "cmp.i";
      LOWORD(v61) = 259;
      v39 = sub_22E3C18F4(v40, a3, v27, NullValue, (uint64_t)&v57);
LABEL_34:
      v41 = v39;
      v42 = *v37;
      if ((*(_DWORD *)a2 & 0xFC0000) == 0x380000)
      {
        v57 = "and.ri";
        LOWORD(v61) = 259;
        v21 = sub_22E3E49C4(v42, FCmpHelper, v41, (uint64_t)&v57);
      }
      else
      {
        v57 = "or.ri";
        LOWORD(v61) = 259;
        v21 = sub_22E3E58D4(v42, FCmpHelper, v41, (uint64_t)&v57);
      }
      goto LABEL_9;
    }
    v24 = sub_22F10CF48(v11);
    if (v24)
    {
      v11 = v24;
      goto LABEL_44;
    }
LABEL_18:
    v25 = (uint64_t *)sub_22E50E974(a1, *(_QWORD *)(a2 + 16), a5);
    v27 = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)*v25, v26);
    goto LABEL_19;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    if (*(_BYTE *)(v11 + 16) == 12)
      goto LABEL_44;
    goto LABEL_18;
  }
  sub_22E51A7D0((uint64_t)v65, a1, a2, 0);
  StripInvariantGroup = v65[0];
  v44 = v65[1];
  v45 = *v10;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 >= 2)
  {
    if (*(unsigned __int8 *)(v45 + 16) - 57 <= 0xFFFFFFFD)
      sub_22F10CF48(*v10);
    __asm { BR              X2 }
  }
  if (sub_22E51B3BC(v67))
  {
    v46 = (uint64_t)sub_22E51B474(a1, (uint64_t)v65);
LABEL_41:
    v22 = (llvm::Value *)v46;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(*(_QWORD *)StripInvariantGroup + 8) & 0xFE) == 0x12)
    v47 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)StripInvariantGroup + 16) + 8);
  else
    v47 = *(_DWORD *)(*(_QWORD *)StripInvariantGroup + 8);
  if (v47 > 6)
  {
    if (sub_22F110B20(v45))
    {
      v50 = a1[1];
      v57 = "cmp";
      LOWORD(v61) = 259;
      v46 = sub_22E3C18F4(v50, a4, (uint64_t *)StripInvariantGroup, v44, (uint64_t)&v57);
      goto LABEL_41;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 184) + 39) & 4) != 0
      && *(_BYTE *)(StripInvariantGroup + 16) != 19
      && *(_BYTE *)(v44 + 16) != 19)
    {
      if (sub_22F408644(v69))
        StripInvariantGroup = llvm::IRBuilderBase::CreateStripInvariantGroup();
      if (sub_22F408644(&v68))
        v44 = llvm::IRBuilderBase::CreateStripInvariantGroup();
    }
    v53 = a1[1];
    v57 = "cmp";
    LOWORD(v61) = 259;
    v22 = (llvm::Value *)sub_22E3C18F4(v53, a3, (uint64_t *)StripInvariantGroup, v44, (uint64_t)&v57);
    v10 = (uint64_t *)(v69[0] & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v57 = (const char *)*a1;
    LODWORD(v58) = 4;
    LOBYTE(v59) = 0;
    v64 = 0;
    sub_22E61990C((uint64_t)&v57, v66);
    v69[1] = "cmp";
    v70 = 259;
    v22 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
    v51 = v57;
    *((_DWORD *)v57 + 697) = v58;
    *(_WORD *)(v51 + 373) = WORD2(v58);
    if (v64)
    {
      v52 = v59;
      *(_DWORD *)(v59 + 96) = v60;
      *(_QWORD *)(v52 + 88) = v61;
      *(_BYTE *)(v52 + 100) = v62;
      *(_WORD *)(v52 + 101) = v63;
    }
  }
LABEL_60:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1)
    return sub_22E50EA80(a1, v22, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144) + 16400), *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 4), 0);
  v54 = *(llvm::LLVMContext **)(a2 + 8);
  v55 = (uint64_t *)a1[1];
  v56 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), v54);
  v57 = "sext";
  LOWORD(v61) = 259;
  return (llvm::Value *)sub_22E3C1740(v55, 40, (uint64_t)v22, v56, (uint64_t)&v57);
}

BOOL sub_22E51B3BC(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  BOOL v7;

  v1 = *a1;
  if ((v1 & 0xFE) == 0x70)
  {
    v2 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v3)
      v4 = *(_DWORD *)(v3 + 16) == 11;
    else
      v4 = 0;
    if (v4 && ((*(_DWORD *)(v3 + 16) >> 19) & 0x1FEu) - 186 < 0x18)
      return 1;
  }
  else
  {
    if (v1 != 233)
      return 0;
    v2 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_DWORD *)(v6 + 16) == 11;
  else
    v7 = 0;
  if (!v7)
    return 0;
  return ((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 186 < 0x18;
}

llvm::Instruction *sub_22E51B474(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Constant **v10;
  llvm::Constant **v11;
  int CommonSemantics;
  llvm::Constant **v13;
  uint64_t v14;
  int v15;
  unsigned __int32 *v17;
  uint64_t *v19;
  int v20;
  __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD **)(a2 + 32);
  v6 = *(unsigned __int8 *)v5;
  if ((v6 & 0xFE) == 0x70)
  {
    v7 = *(_QWORD *)(v5[3] + 8);
    if (v6 == 113)
    {
      v8 = v5[4];
      v4 = v5[5];
    }
    else
    {
      v8 = *(_QWORD *)(v5[2] + 8);
    }
  }
  else if (v6 == 233)
  {
    v8 = *(_QWORD *)(v5[2] + 8);
    v7 = v8;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144);
  v11 = *(llvm::Constant ***)a2;
  v10 = *(llvm::Constant ***)(a2 + 8);
  v23 = sub_22EF74318(v9, v8);
  v22 = sub_22EF74318(v9, v7);
  v21 = sub_22EF74318(v9, v4);
  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v13 = 0;
  v20 = CommonSemantics;
  v19 = (uint64_t *)a1[1];
  switch(*(_DWORD *)(a2 + 24))
  {
    case 2:
    case 0x16:
      v14 = (uint64_t)sub_22F263858((uint64_t *)&v19, v11, &v23, v10, &v22);
      goto LABEL_15;
    case 3:
    case 0x17:
      v14 = (uint64_t)sub_22F2639E4((uint64_t *)&v19, v11, &v23, v10, &v22);
      goto LABEL_15;
    case 5:
    case 0x19:
      v14 = (uint64_t)sub_22F263510((uint64_t *)&v19, v11, &v23, v10, &v22);
      goto LABEL_15;
    case 6:
    case 0x1A:
      v14 = (uint64_t)sub_22F263698((uint64_t *)&v19, v11, &v23, v10, &v22);
      goto LABEL_15;
    case 7:
    case 0x1B:
      v14 = (uint64_t)sub_22F263B70(&v19, (uint64_t *)v11, (uint64_t)&v23, (uint64_t)v10);
      goto LABEL_15;
    case 8:
    case 0x1C:
      v14 = sub_22F263C34(&v19, (uint64_t *)v11, &v23, (uint64_t)v10);
LABEL_15:
      v13 = (llvm::Constant **)v14;
      goto LABEL_16;
    case 0xA:
      return (llvm::Instruction *)sub_22F263CC4((uint64_t *)&v19, v11, &v23, v10, &v22);
    case 0xB:
      return (llvm::Instruction *)sub_22F263DA8((uint64_t *)&v19, v11, &v23, v10, &v22);
    case 0xC:
      return (llvm::Instruction *)sub_22F263E8C((uint64_t *)&v19, v11, &v23, v10, &v22);
    case 0xD:
      return (llvm::Instruction *)sub_22F263F70((uint64_t *)&v19, v11, &v23, v10, &v22);
    case 0xE:
      return (llvm::Instruction *)sub_22F264054((uint64_t *)&v19, v11, &v23, v10, &v22);
    case 0xF:
      return (llvm::Instruction *)sub_22F26411C((uint64_t *)&v19, v11, &v23, v10, &v22);
    default:
LABEL_16:
      v15 = *(_DWORD *)(a2 + 24);
      if ((v15 - 27) >= 2 && (v15 - 7) >= 2)
        v17 = (unsigned __int32 *)&v20;
      else
        v17 = &v23;
      return sub_22E51B708((uint64_t *)&v19, v13, v17, &v21, 0);
  }
}

llvm::Instruction *sub_22E51B708(uint64_t *a1, llvm::Constant **Select, unsigned __int32 *a3, __int32 *a4, int a5)
{
  unsigned __int32 v9;
  unsigned int v10;
  __int32 v11;
  unsigned int v12;
  unsigned int v13;
  llvm::Type *v14;
  uint64_t IntNTy;
  uint64_t NullValue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int32x2_t v42;
  unint64_t v43;
  int32x2_t v44;
  unsigned __int8 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v59;
  unsigned int v60;
  char v61;
  const char *v62;
  unsigned int v63;
  char v64;
  const char *v65;
  unsigned int v66;
  __int16 v67;
  const char *v68;
  unsigned int v69;
  __int16 v70;

  v9 = *a3;
  v10 = (unsigned __int16)*a3;
  v11 = *a4;
  v12 = HIWORD(*a3) & 0x1FFF;
  v13 = HIWORD(*a4) & 0x1FFF;
  v57 = (unsigned __int16)*a4;
  IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(*a1 + 64), (llvm::LLVMContext *)(unsigned __int16)*a4);
  if (v13 < v12)
  {
    if (a5 && (v9 & 0x20000000) != 0)
    {
      NullValue = llvm::Constant::getNullValue(*Select, v14);
      v17 = *a1;
      v70 = 257;
      sub_22E3C18F4(v17, 40, (uint64_t *)Select, NullValue, (uint64_t)&v68);
      v69 = v10;
      v55 = IntNTy;
      if (v10 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v68);
      else
        v68 = 0;
      sub_22E4EEDA4((llvm::APInt *)&v68, 0, HIWORD(v9) & 0x1FFF);
      v18 = llvm::ConstantInt::get();
      if (v69 >= 0x41 && v68)
        MEMORY[0x2348A0E84](v68, 0x1000C8000313F17);
      v19 = *a1;
      v67 = 257;
      if (!(*(uint64_t (**)(_QWORD, llvm::Constant **, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v19 + 72)
                                                                                          + 16))(*(_QWORD *)(v19 + 72), Select, v18, 0, 0))
      {
        v70 = 257;
        v20 = llvm::BinaryOperator::Create();
        sub_22E3C12C8((uint64_t *)v19, v20, (uint64_t)&v65);
      }
      v70 = 257;
      Select = (llvm::Constant **)llvm::IRBuilderBase::CreateSelect();
      IntNTy = v55;
    }
    else if ((v9 & 0x20000000) == 0)
    {
      v24 = *a1;
      v65 = "downscale";
      v67 = 259;
      v25 = llvm::ConstantInt::get();
      v23 = sub_22E3E4A40(v24, (uint64_t)Select, v25, (uint64_t)&v65, 0);
      goto LABEL_15;
    }
    v21 = *a1;
    v68 = "downscale";
    v70 = 259;
    v22 = llvm::ConstantInt::get();
    v23 = sub_22E3EA5BC(v21, (uint64_t)Select, v22, (uint64_t)&v68, 0);
LABEL_15:
    Select = (llvm::Constant **)v23;
  }
  v26 = *a4;
  if ((*a4 & 0x40000000) != 0)
  {
    v56 = IntNTy;
    v31 = v10;
    if (v13 <= v12)
    {
      v33 = v57;
    }
    else
    {
      v32 = v10 - v12 + v13;
      v33 = v57;
      if (v32 <= v57)
        v34 = v57;
      else
        v34 = v32;
      v31 = v34;
      v35 = llvm::Type::getIntNTy(*(llvm::Type **)(*a1 + 64), (llvm::LLVMContext *)v34);
      v36 = (uint64_t *)*a1;
      v68 = "resize";
      v70 = 259;
      v37 = sub_22E3BF45C(v36, (uint64_t)Select, v35, (v9 >> 29) & 1, (uint64_t)&v68);
      v38 = *a1;
      v68 = "upscale";
      v70 = 259;
      v39 = llvm::ConstantInt::get();
      Select = (llvm::Constant **)sub_22E3ED744(v38, v37, v39, (uint64_t)&v68, 0, 0);
      v26 = *a4;
    }
    v40.i32[0] = v26;
    v40.i32[1] = *a3;
    v41 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v40, (int8x8_t)0xA0000000A0000000));
    v42 = (int32x2_t)vand_s8(v40, (int8x8_t)0xFFFF0000FFFFLL);
    v43 = *(_QWORD *)&vshr_n_u32((uint32x2_t)v40, 0x10uLL) & 0xFFFF1FFFFFFF1FFFLL;
    v44 = vadd_s32((int32x2_t)vbsl_s8(v41, (int8x8_t)vneg_s32((int32x2_t)v43), vmvn_s8((int8x8_t)v43)), v42);
    v45 = vcgt_u32((uint32x2_t)vdup_lane_s32(v44, 1), (uint32x2_t)v44).u8[0];
    if ((v45 & 1) != 0)
    {
      llvm::APFixedPoint::getMax();
      sub_22F26307C(&v68, (uint64_t)&v59);
      v46 = v31;
      if (v61)
        llvm::APInt::zextOrTrunc((llvm::APInt *)&v59);
      else
        llvm::APInt::sextOrTrunc((llvm::APInt *)&v59);
      v63 = v66;
      v62 = v65;
      v64 = v61;
      v50 = llvm::ConstantInt::get();
      v47 = v56;
      if (v63 >= 0x41 && v62)
        MEMORY[0x2348A0E84](v62, 0x1000C8000313F17);
      if (v60 >= 0x41 && v59)
        MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
      if (v69 >= 0x41 && v68)
        MEMORY[0x2348A0E84](v68, 0x1000C8000313F17);
      v51 = *a1;
      v70 = 257;
      if ((v9 & 0x20000000) != 0)
        v52 = 38;
      else
        v52 = 34;
      sub_22E3C18F4(v51, v52, (uint64_t *)Select, v50, (uint64_t)&v68);
      v68 = "satmax";
      v70 = 259;
      Select = (llvm::Constant **)llvm::IRBuilderBase::CreateSelect();
    }
    else
    {
      v46 = v31;
      v47 = v56;
    }
    if ((v9 & 0x20000000) != 0 && ((v11 & 0x20000000) == 0) | v45 & 1)
    {
      llvm::APFixedPoint::getMin();
      sub_22F26307C(&v68, (uint64_t)&v59);
      if (v61)
        llvm::APInt::zextOrTrunc((llvm::APInt *)&v59);
      else
        llvm::APInt::sextOrTrunc((llvm::APInt *)&v59);
      v63 = v66;
      v62 = v65;
      v64 = v61;
      v53 = llvm::ConstantInt::get();
      if (v63 >= 0x41 && v62)
        MEMORY[0x2348A0E84](v62, 0x1000C8000313F17);
      if (v60 >= 0x41 && v59)
        MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
      if (v69 >= 0x41 && v68)
        MEMORY[0x2348A0E84](v68, 0x1000C8000313F17);
      v54 = *a1;
      v70 = 257;
      sub_22E3C18F4(v54, 40, (uint64_t *)Select, v53, (uint64_t)&v68);
      v68 = "satmin";
      v70 = 259;
      Select = (llvm::Constant **)llvm::IRBuilderBase::CreateSelect();
    }
    if (v46 != v33)
    {
      v48 = (uint64_t *)*a1;
      v68 = "resize";
      v70 = 259;
      return (llvm::Instruction *)sub_22E3BF45C(v48, (uint64_t)Select, v47, (v9 >> 29) & 1, (uint64_t)&v68);
    }
  }
  else
  {
    v27 = (uint64_t *)*a1;
    v68 = "resize";
    v70 = 259;
    Select = (llvm::Constant **)sub_22E3BF45C(v27, (uint64_t)Select, IntNTy, (v9 >> 29) & 1, (uint64_t)&v68);
    if (v13 > v12)
    {
      v28 = *a1;
      v68 = "upscale";
      v70 = 259;
      v29 = llvm::ConstantInt::get();
      return sub_22E3ED744(v28, (uint64_t)Select, v29, (uint64_t)&v68, 0, 0);
    }
  }
  return (llvm::Instruction *)Select;
}

llvm::User *sub_22E51BDF0()
{
  llvm::User *v0;

  v0 = (llvm::User *)llvm::User::operator new((llvm::User *)0x40);
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = 2;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(v0);
  return v0;
}

uint64_t sub_22E51BE64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *, _QWORD *), uint64_t a4)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[8];
  uint64_t v17;
  _QWORD v18[7];

  v6 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = 0;
  v15 = 0;
  sub_22E511B30((uint64_t *)a1, a2, a3, a4, &v15, (uint64_t)v9);
  result = 0;
  if (!v6)
  {
    v8 = *(_QWORD **)a1;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 152) + 1) & 1) != 0 && (BYTE8(v10) & 4) != 0)
    {
      v16[6] = v12;
      v16[7] = v13;
      v17 = v14;
      v16[2] = v9[2];
      v16[3] = v9[3];
      v16[4] = v10;
      v16[5] = v11;
      v16[0] = v9[0];
      v16[1] = v9[1];
      sub_22E4D7B28(v8, (uint64_t)v16, *(_DWORD *)(a2 + 4), (uint64_t)v18);
      return v18[0];
    }
    else
    {
      return v15;
    }
  }
  return result;
}

llvm::Instruction *sub_22E51BF14(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *NullValue;
  uint64_t *v13;
  uint64_t *v14[3];
  int v15;
  int v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 16) = 0;
  if (a3 >= 0x10)
    v6 = (uint64_t *)sub_22E50FD80(*(_QWORD *)a1, *(_QWORD *)(a2 + 16), a3);
  else
    v6 = (uint64_t *)sub_22E50E974(a1, *(_QWORD *)(a2 + 16), a4);
  v7 = v6;
  v8 = *v6;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  else
    v9 = *(_DWORD *)(v8 + 8);
  if (v9 > 6)
  {
    v14[1] = v7;
    NullValue = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)v8, (llvm::Type *)v7);
    v13 = *(uint64_t **)(a2 + 8);
    v14[0] = NullValue;
    v14[2] = v13;
    v15 = 6;
    v16 = sub_22F2641E4(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 152));
    v17 = a2;
    return sub_22E512F48((const char **)a1, v14);
  }
  else
  {
    v10 = *(uint64_t **)(a1 + 8);
    v14[0] = (uint64_t *)"fneg";
    LOWORD(v17) = 259;
    return (llvm::Instruction *)sub_22E3E39A4(v10, (uint64_t)v7, (uint64_t)v14, 0);
  }
}

uint64_t sub_22E51C004(uint64_t *a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[17];
  _QWORD v12[7];

  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 12)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    {
      if (a3 >= 0x10)
      {
        result = sub_22F262930(*a1, v7, *((unsigned __int8 *)a1 + 16), 1);
        if (result)
          return sub_22F262860(*a1, result, v10, a3);
      }
      else
      {
        v8 = (_QWORD *)*a1;
        sub_22E4D8D7C(v11);
        sub_22E4D7B28(v8, (uint64_t)v11, *(_DWORD *)(a2 + 4), (uint64_t)v12);
        return v12[0];
      }
    }
    else
    {
      return sub_22F262930(*a1, v7, 0, 1);
    }
  }
  else if (a3 >= 0x10)
  {
    return sub_22E50FD80(*a1, v7, a3);
  }
  else
  {
    return sub_22E50E974(a1, v7, a4);
  }
  return result;
}

uint64_t sub_22E51C120(uint64_t *a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v11;
  llvm::LLVMContext *v12;
  llvm::Type ***v13;
  llvm::Constant *v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;
  _QWORD v22[17];

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)v7 & 0x300;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 12)
  {
    if (v8)
    {
      if (a3 < 0x10)
      {
        v9 = (_QWORD *)*a1;
        sub_22E4D8D7C(v22);
        sub_22E4D7B28(v9, (uint64_t)v22, *(_DWORD *)(a2 + 4), (uint64_t)v19);
        return v19[0];
      }
      v17 = sub_22F262930(*a1, v7, 1, *((unsigned __int8 *)a1 + 16));
      if (!v18)
        return 0;
      sub_22F262860(*a1, v17, v18, a3);
    }
    else
    {
      sub_22F262930(*a1, v7, 1, 0);
    }
    return v16;
  }
  if (v8)
  {
    sub_22E4D8D7C(v19);
    if (a3 >= 0x10)
      goto LABEL_12;
  }
  else
  {
    v11 = *a1;
    if (a3 >= 0x10)
    {
      sub_22E50FD80(v11, v7, a3);
LABEL_12:
      v13 = (llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280);
      v12 = (llvm::LLVMContext *)a3;
      goto LABEL_13;
    }
    v19[0] = *a1;
    v19[1] = v11 + 272;
    v20 = 1;
    v21 = *(_QWORD *)(*(_QWORD *)(v11 + 144) + 232);
    sub_22E50E974(v19, v7, a4);
  }
  v12 = *(llvm::LLVMContext **)(a2 + 8);
  v13 = (llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280);
LABEL_13:
  v14 = (llvm::Constant *)sub_22E66CB04(v13, v12);
  return llvm::Constant::getNullValue(v14, v15);
}

uint64_t sub_22E51C294(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __n128 v21;
  uint64_t *v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  llvm::Constant *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t *v45;
  __n128 v46;
  __n128 v47;
  llvm::Constant *v48;
  llvm::Type *v49;
  uint64_t NullValue;
  uint64_t v51;
  uint64_t Select;
  uint64_t v53;
  llvm::LLVMContext *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  unsigned __int8 **v75;
  llvm::Value *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  __n128 v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  __n128 v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  llvm::PHINode *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  char v110;
  __int16 v111;
  char v112;
  uint64_t v113;
  _QWORD v114[3];
  const char *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  __int16 v119;

  *((_BYTE *)a1 + 16) = 0;
  v4 = *a1;
  v113 = *a1;
  v114[0] = 0;
  v114[2] = 0;
  if (*(_BYTE *)a2 == 103
    || (sub_22F253B0C(v4, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 24), (uint64_t)v114), *(_BYTE *)a2 == 103))
  {
    v5 = (uint64_t *)(a2 + 24);
    v6 = (uint64_t *)(a2 + 32);
    v7 = (unsigned __int8 **)(a2 + 40);
  }
  else
  {
    v5 = (uint64_t *)(a2 + 32);
    v6 = (uint64_t *)(a2 + 40);
    v7 = (unsigned __int8 **)(a2 + 48);
  }
  v8 = *v7;
  v9 = *v6;
  v10 = *v5;
  v104 = *a1;
  v105 = 4;
  LOBYTE(v107) = 0;
  v112 = 0;
  v11 = sub_22F0013BC((unsigned int *)a2, *(_QWORD *)(*(_QWORD *)(v104 + 144) + 152));
  sub_22E61990C((uint64_t)&v104, v11);
  v103 = 0;
  if (sub_22E61F3B0(*a1, v10, &v103, 0))
  {
    v12 = v103;
    v13 = v103 ? (uint64_t)v8 : v9;
    v14 = v103 ? v9 : (uint64_t)v8;
    if ((sub_22E61F04C(v13, 0) & 1) == 0)
    {
      if (v12)
        sub_22E3CB7B0((_QWORD *)*a1, a2, 0);
      v53 = sub_22E50E974(a1, v14, v15);
      if (v53)
        goto LABEL_31;
      v54 = *(llvm::LLVMContext **)(a2 + 8);
      v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v55)
        v56 = (*(_DWORD *)(v55 + 16) & 0xFF800FF) == 86507531;
      else
        v56 = 0;
      if (!v56)
      {
        sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), v54);
        Select = llvm::UndefValue::get();
        goto LABEL_30;
      }
      goto LABEL_94;
    }
  }
  v16 = (_QWORD *)*a1;
  v17 = *(_QWORD *)(*a1 + 144);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)(v17 + 152) + 52) & 0x40000000) == 0
    || *(unsigned __int8 *)(*(_QWORD *)v18 + 16) - 55 >= 2)
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)v18 + 16);
    if (v19 != 56)
    {
      if ((v19 - 55) <= 1)
      {
        sub_22E3CB7B0(v16, a2, 0);
        v43 = *a1 + 272;
        v115 = (const char *)*a1;
        v116 = v43;
        v117 = 0;
        v118 = *(_QWORD *)(*((_QWORD *)v115 + 18) + 232);
        v45 = (uint64_t *)sub_22E50E974(&v115, v10, v44);
        sub_22E50E974(a1, v9, v46);
        sub_22E50E974(a1, v8, v47);
        v48 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), *(llvm::LLVMContext **)(v10 + 8));
        NullValue = llvm::Constant::getNullValue(v48, v49);
        v51 = a1[1];
        v115 = "vector_cond";
        v119 = 259;
        sub_22E3C18F4(v51, 33, v45, NullValue, (uint64_t)&v115);
        v115 = "vector_select";
        v119 = 259;
LABEL_18:
        Select = llvm::IRBuilderBase::CreateSelect();
LABEL_30:
        v53 = Select;
        goto LABEL_31;
      }
      if (v9)
      {
        v66 = (unsigned __int8 *)v9;
        while (1)
        {
          v67 = v66;
          v68 = *v66;
          if (v68 > 213)
          {
            if (v68 == 233)
            {
              if ((*(_DWORD *)v67 & 0x7C0000) != 0x300000)
                goto LABEL_55;
              v70 = (unsigned __int8 **)(v67 + 16);
            }
            else
            {
              if (v68 != 214)
                goto LABEL_55;
              v70 = (unsigned __int8 **)(v67 + 24);
            }
          }
          else if (v68 == 155)
          {
            if ((**((_DWORD **)v67 + 2) & 0x18000) != 0)
              goto LABEL_55;
            if (v67[48])
              v70 = (unsigned __int8 **)(v67 + 24);
            else
              v70 = (unsigned __int8 **)(v67 + 32);
          }
          else
          {
            if (v68 != 176)
              goto LABEL_55;
            v69 = *((unsigned int *)v67 + 5);
            if ((_DWORD)v69 == -1)
              goto LABEL_55;
            v70 = (unsigned __int8 **)&v67[8 * v69 + 40];
          }
          v66 = *v70;
          if (v66 == v67)
            goto LABEL_55;
        }
      }
      v67 = 0;
LABEL_55:
      if (!sub_22F007CB0(v67, *(_QWORD *)(v17 + 144), 0))
        goto LABEL_80;
      if (v8)
      {
        v71 = v8;
        while (1)
        {
          v72 = v71;
          v73 = *v71;
          if (v73 > 213)
          {
            if (v73 == 233)
            {
              if ((*(_DWORD *)v72 & 0x7C0000) != 0x300000)
                goto LABEL_77;
              v75 = (unsigned __int8 **)(v72 + 16);
            }
            else
            {
              if (v73 != 214)
                goto LABEL_77;
              v75 = (unsigned __int8 **)(v72 + 24);
            }
          }
          else if (v73 == 155)
          {
            if ((**((_DWORD **)v72 + 2) & 0x18000) != 0)
              goto LABEL_77;
            if (v72[48])
              v75 = (unsigned __int8 **)(v72 + 24);
            else
              v75 = (unsigned __int8 **)(v72 + 32);
          }
          else
          {
            if (v73 != 176)
              goto LABEL_77;
            v74 = *((unsigned int *)v72 + 5);
            if ((_DWORD)v74 == -1)
              goto LABEL_77;
            v75 = (unsigned __int8 **)&v72[8 * v74 + 40];
          }
          v71 = *v75;
          if (v71 == v72)
            goto LABEL_77;
        }
      }
      v72 = 0;
LABEL_77:
      if (!sub_22F007CB0(v72, *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), 0))
      {
LABEL_80:
        v115 = "cond.true";
        v119 = 259;
        v83 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v115 = "cond.false";
        v119 = 259;
        v84 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v115 = "cond.end";
        v119 = 259;
        v85 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v86 = (_QWORD *)*a1;
        v102 = *(_QWORD *)(*a1 + 320);
        v87 = sub_22E3CF180((uint64_t)(v86 + 488), v9);
        if (v88)
          v89 = v87;
        else
          v89 = 0;
        sub_22E61F8F8(v86, (unsigned __int8 *)v10, (uint64_t)v83, (uint64_t)v84, v89, 0);
        sub_22E5ED9B4((_QWORD *)*a1, v83, 0);
        sub_22E3CB7B0((_QWORD *)*a1, a2, 0);
        if (!*(_QWORD *)(*a1 + 5832))
          *(_QWORD *)(*a1 + 5832) = &v102;
        v91 = (uint64_t *)sub_22E50E974(a1, v9, v90);
        if (*(uint64_t **)(*a1 + 5832) == &v102)
          *(_QWORD *)(*a1 + 5832) = 0;
        v92 = (uint64_t *)a1[1];
        v93 = v92[6];
        v94 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        v119 = 257;
        sub_22E3C12C8(v92, v94, (uint64_t)&v115);
        sub_22E5ED9B4((_QWORD *)*a1, v84, 0);
        if (!*(_QWORD *)(*a1 + 5832))
          *(_QWORD *)(*a1 + 5832) = &v102;
        v53 = sub_22E50E974(a1, v8, v95);
        v96 = (_QWORD *)*a1;
        if (*(uint64_t **)(*a1 + 5832) == &v102)
          v96[729] = 0;
        v97 = *(_QWORD *)(a1[1] + 48);
        sub_22E5ED9B4(v96, v85, 0);
        if (v91)
        {
          if (v53)
          {
            v98 = (uint64_t *)a1[1];
            v99 = *v91;
            v115 = "cond";
            v119 = 259;
            v100 = (llvm::PHINode *)sub_22E3C4B80(v98, v99, 2, (uint64_t)&v115);
            sub_22E3C4C50(v100, (uint64_t)v91, v93);
            sub_22E3C4C50(v100, v53, v97);
            v53 = (uint64_t)v100;
          }
          else
          {
            v53 = (uint64_t)v91;
          }
        }
        goto LABEL_31;
      }
      v76 = sub_22E4D86E0((_QWORD *)*a1, v10);
      v77 = (uint64_t *)a1[1];
      v78 = *(_QWORD *)(*a1 + 32);
      v119 = 257;
      v79 = sub_22E3D3108(v77, (uint64_t)v76, v78, (uint64_t)&v115);
      sub_22E3CB7B0((_QWORD *)*a1, a2, v79);
      v81 = sub_22E50E974(a1, v9, v80);
      sub_22E50E974(a1, v8, v82);
      if (v81)
      {
        v115 = "cond";
        v119 = 259;
        goto LABEL_18;
      }
LABEL_94:
      v53 = 0;
      goto LABEL_31;
    }
  }
  sub_22E3CB7B0(v16, a2, 0);
  v20 = *a1 + 272;
  v115 = (const char *)*a1;
  v116 = v20;
  v117 = 0;
  v118 = *(_QWORD *)(*((_QWORD *)v115 + 18) + 232);
  v22 = (uint64_t *)sub_22E50E974(&v115, v10, v21);
  v24 = sub_22E50E974(a1, v9, v23);
  v26 = sub_22E50E974(a1, v8, v25);
  v27 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), *(llvm::LLVMContext **)(v10 + 8));
  v29 = llvm::Constant::getNullValue(v27, v28);
  v30 = a1[1];
  v119 = 257;
  v31 = sub_22E3C18F4(v30, 40, v22, v29, (uint64_t)&v115);
  v32 = (uint64_t *)a1[1];
  v33 = llvm::FixedVectorType::get();
  v115 = "sext";
  v119 = 259;
  v34 = (uint64_t *)sub_22E3C1740(v32, 40, v31, v33, (uint64_t)&v115);
  v35 = a1[1];
  v119 = 257;
  v36 = (uint64_t *)sub_22E3BECF4(v35, (uint64_t)v34, (uint64_t)&v115);
  v37 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v26 + 24) + 8);
  if (v37 > 6)
  {
    v40 = v26;
  }
  else
  {
    v38 = (uint64_t *)a1[1];
    v39 = *v36;
    v119 = 257;
    v40 = sub_22E3C1740(v38, 49, v26, v39, (uint64_t)&v115);
    v41 = (uint64_t *)a1[1];
    v42 = *v34;
    v119 = 257;
    v24 = sub_22E3C1740(v41, 49, v24, v42, (uint64_t)&v115);
  }
  v57 = a1[1];
  v119 = 257;
  v58 = sub_22E3E49C4(v57, v40, (uint64_t)v36, (uint64_t)&v115);
  v59 = a1[1];
  v119 = 257;
  v60 = sub_22E3E49C4(v59, v24, (uint64_t)v34, (uint64_t)&v115);
  v61 = a1[1];
  v115 = "cond";
  v119 = 259;
  v53 = sub_22E3E58D4(v61, v58, v60, (uint64_t)&v115);
  if (v37 <= 6)
  {
    v62 = (uint64_t *)a1[1];
    v63 = *(_QWORD *)v26;
    v119 = 257;
    Select = sub_22E3C1740(v62, 49, v53, v63, (uint64_t)&v115);
    goto LABEL_30;
  }
LABEL_31:
  v64 = v104;
  *(_DWORD *)(v104 + 2788) = v105;
  *(_WORD *)(v64 + 373) = v106;
  if (v112)
  {
    v101 = v107;
    *(_DWORD *)(v107 + 96) = v108;
    *(_QWORD *)(v101 + 88) = v109;
    *(_BYTE *)(v101 + 100) = v110;
    *(_WORD *)(v101 + 101) = v111;
  }
  if (v114[0])
    sub_22F254324((uint64_t)v114, v4);
  return v53;
}

uint64_t sub_22E51CC10(uint64_t a1, uint64_t a2)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  BOOL v6;

  sub_22E628400(*(_QWORD *)(*(_QWORD *)a1 + 144), a2, "scalar expression");
  v4 = *(llvm::LLVMContext **)(a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 86507531;
  else
    v6 = 0;
  if (v6)
    return 0;
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 280), v4);
  return llvm::UndefValue::get();
}

uint64_t sub_22E51CC9C(uint64_t *a1, llvm::DataLayout *this, llvm::Type **a3, llvm::Type *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t IntPtrType;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v9 = (uint64_t *)a3;
  v10 = a1;
  v11 = *((unsigned __int8 *)*a3 + 8);
  v12 = *((unsigned __int8 *)a4 + 8);
  if (v11 == 15)
  {
    if (v12 == 15)
    {
      v19 = 261;
      v17 = a5;
      v18 = a6;
      return sub_22E3C1338(a1, (uint64_t)a3, (uint64_t)a4, (uint64_t)&v17);
    }
    else
    {
      if (v12 != 13)
      {
        IntPtrType = llvm::DataLayout::getIntPtrType(this, *a3);
        v19 = 257;
        v9 = (uint64_t *)sub_22E3C1740(v10, 47, (uint64_t)v9, IntPtrType, (uint64_t)&v17);
      }
      v19 = 261;
      v17 = a5;
      v18 = a6;
      return sub_22E3D3028(v10, v9, (uint64_t)a4, (uint64_t)&v17);
    }
  }
  else
  {
    if (v12 == 15)
    {
      if (v11 != 13)
      {
        v14 = llvm::DataLayout::getIntPtrType(this, a4);
        v19 = 257;
        v9 = (uint64_t *)sub_22E3C1740(v10, 49, (uint64_t)v9, v14, (uint64_t)&v17);
      }
      v19 = 261;
      v17 = a5;
      v18 = a6;
      a1 = v10;
      v15 = 48;
    }
    else
    {
      v19 = 261;
      v17 = a5;
      v18 = a6;
      v15 = 49;
    }
    return sub_22E3C1740(a1, v15, (uint64_t)v9, (uint64_t)a4, (uint64_t)&v17);
  }
}

uint64_t sub_22E51CE08(uint64_t *a1, unint64_t a2)
{
  llvm::Type **v4;
  uint64_t v5;
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;
  int v18;

  v4 = (llvm::Type **)sub_22E507208(*(_QWORD **)(*a1 + 144), a2);
  v5 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v5 || (*(_DWORD *)(v5 + 16) & 0x780000) != 0x80000)
    return sub_22E4E7BB4(*a1, v4, a2);
  v6 = *v4;
  if (*((_BYTE *)*v4 + 8) != 17)
  {
    v7 = *a1 + 272;
    v18 = 0;
    v17 = 257;
    v4 = (llvm::Type **)sub_22E3C2EA8(v7, (uint64_t)v4, (uint64_t)&v18, 1, (uint64_t)v16);
    v6 = *v4;
  }
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), (llvm::LLVMContext *)a2);
  v8 = llvm::UndefValue::get();
  v18 = 0;
  v9 = *((_DWORD *)v6 + 8);
  if (v9)
  {
    do
    {
      v10 = *a1 + 272;
      v17 = 257;
      v11 = sub_22E3C2EA8(v10, (uint64_t)v4, (uint64_t)&v18, 1, (uint64_t)v16);
      v12 = a1[1];
      v17 = 257;
      llvm::Type::getInt64Ty(*(llvm::Type **)(v12 + 64), v13);
      v14 = llvm::ConstantInt::get();
      v8 = sub_22E3ED5D4((uint64_t *)v12, v8, v11, v14, (uint64_t)v16);
      ++v18;
    }
    while (v18 != v9);
  }
  return v8;
}

void sub_22E51CF84(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = (*a2 >> 18) & 0x7F;
  *(_BYTE *)(a1 + 16) = 0;
  __asm { BR              X11 }
}

llvm::Value *sub_22E51CFFC()
{
  uint64_t *v0;
  unsigned int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __n128 v8;
  llvm::Value *v9;
  unint64_t v10;
  int v11;
  llvm::Value *result;
  uint64_t v13;
  uint64_t v14;

  v6 = *v0;
  *(_QWORD *)(v5 - 256) = *v0;
  *(_DWORD *)(v5 - 248) = 4;
  *(_BYTE *)(v5 - 240) = 0;
  *(_BYTE *)(v5 - 208) = 0;
  v7 = sub_22F0013BC(v1, *(_QWORD *)(*(_QWORD *)(v6 + 144) + 152));
  sub_22E61990C(v5 - 256, v7);
  v9 = (llvm::Value *)sub_22E50E974(v0, v2, v8);
  v10 = *(_QWORD *)(v2 + 8);
  sub_22EFF605C((uint64_t)v1);
  result = sub_22E50EA80(v0, v9, v10, v3, v11, 0);
  v13 = *(_QWORD *)(v5 - 256);
  *(_DWORD *)(v13 + 2788) = *(_DWORD *)(v5 - 248);
  *(_WORD *)(v13 + 373) = *(_WORD *)(v5 - 244);
  if (*(_BYTE *)(v5 - 208))
  {
    v14 = *(_QWORD *)(v5 - 240);
    *(_DWORD *)(v14 + 96) = *(_DWORD *)(v5 - 232);
    *(_QWORD *)(v14 + 88) = *(_QWORD *)(v5 - 224);
    *(_BYTE *)(v14 + 100) = *(_BYTE *)(v5 - 216);
    *(_WORD *)(v14 + 101) = *(_WORD *)(v4 + 185);
  }
  return result;
}

uint64_t sub_22E51EC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t NullValue;
  uint64_t v7;
  const char *v9;
  __int16 v10;

  if (a2
    && *(_BYTE *)(a2 + 16) == 67
    && (v4 = **(_QWORD **)(a2 - 32),
        v4 == llvm::Type::getInt1Ty(*(llvm::Type **)(*(_QWORD *)(a1 + 8) + 64), (llvm::LLVMContext *)a2)))
  {
    v7 = *(_QWORD *)(a2 - 32);
    if (!*(_QWORD *)(a2 + 8))
      llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v9 = "toBOOL";
    v10 = 259;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)a2);
    return sub_22E3C18F4(v5, 33, (uint64_t *)a2, NullValue, (uint64_t)&v9);
  }
  return v7;
}

uint64_t sub_22E51ED04(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v3;
  uint64_t result;
  llvm::Type *v5;

  v3 = sub_22E699F3C(*(_QWORD **)(*(_QWORD *)a1 + 144));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
  if (!result)
  {
    llvm::Constant::getNullValue(*a2, v5);
    return llvm::IRBuilderBase::CreateFCmpHelper();
  }
  return result;
}

uint64_t sub_22E51EDA8(uint64_t result, _DWORD *a2, uint64_t a3, char a4, char a5, int a6, int a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  int v11;
  int v12;
  _DWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)result = 109;
  if (byte_255E04EB3)
  {
    v16 = result;
    v12 = a7;
    v13 = a2;
    v15 = a3;
    v11 = a6;
    v14 = a5;
    v10 = a4;
    sub_22F3F189C(109);
    a4 = v10;
    a5 = v14;
    a6 = v11;
    a7 = v12;
    a3 = v15;
    result = v16;
    a2 = v13;
  }
  v7 = ((a4 & 3) << 8) & 0xE3FF | ((a5 & 7) << 10) | *(_DWORD *)result & 0xFFFC00FF;
  *(_DWORD *)result = v7;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = a7;
  v8 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v8 & 0x400) != 0)
    v9 = (((int)(v8 << 21) >> 24) >> 7) & 0xC | (v8 >> 8) & 0x13 | (*a2 >> 13) & 0x1F;
  else
    v9 = (((int)(v8 << 21) >> 24) >> 7) & 8 | (v8 >> 8) & 0x13 | (*a2 >> 13) & 0x1B;
  *(_DWORD *)result = v7 | (v9 << 13);
  return result;
}

llvm::Instruction *sub_22E51EE74(_QWORD *a1, llvm::Type **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int32 *v19;
  __int32 *v20;
  llvm::Constant **v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  llvm::Type *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;

  v31 = a1[1];
  v7 = a3 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_DWORD *)(v8 + 16) == 11;
  else
    v9 = 0;
  if (v9 && ((*(_DWORD *)(v8 + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    v32 = sub_22EF74318(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a4);
    return (llvm::Instruction *)sub_22F264238(&v31, a2, (unsigned __int16 *)&v32);
  }
  v10 = a4 & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_DWORD *)(v11 + 16) == 11;
  else
    v12 = 0;
  if (v12 && ((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    v32 = sub_22EF74318(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a3);
    v28 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), (llvm::LLVMContext *)a4);
    return (llvm::Instruction *)sub_22F264434(&v31, (uint64_t)a2, (uint64_t)&v32, v28);
  }
  v13 = sub_22EF74318(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a3);
  v30 = v13;
  v14 = sub_22EF74318(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), a4);
  v29 = v14;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_DWORD *)(v15 + 16);
  if (v15)
    v17 = v16 == 11;
  else
    v17 = 0;
  if (v17)
  {
    if (((*(_DWORD *)(v15 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_26;
  }
  else if (v15 && v16 == 44)
  {
    v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
    if ((*(_BYTE *)(v18 + 74) & 1) == 0 && *(_QWORD *)(v18 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v15 + 24)) + 76) & 0x80) != 0)
    {
LABEL_26:
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      v24 = *(_DWORD *)(v23 + 16);
      if (v23)
        v25 = v24 == 11;
      else
        v25 = 0;
      if (v25)
      {
        if (((*(_DWORD *)(v23 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_37;
      }
      else
      {
        if (v23 && v24 == 44)
        {
          v26 = sub_22F114198(*(_QWORD *)(v23 + 24));
          if ((*(_BYTE *)(v26 + 74) & 1) == 0 && *(_QWORD *)(v26 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v23 + 24)) + 76) & 0x80) != 0)
          {
            goto LABEL_39;
          }
LABEL_37:
          v32 = v13 & 0x20000000 | (unsigned __int16)llvm::Type::getScalarSizeInBits(*a2);
          v19 = (unsigned __int32 *)&v32;
LABEL_40:
          v20 = &v29;
          v21 = a2;
          v22 = 0;
          return sub_22E51B708(&v31, v21, v19, v20, v22);
        }
        if (v24 == 9)
          goto LABEL_37;
      }
LABEL_39:
      v19 = (unsigned __int32 *)&v30;
      goto LABEL_40;
    }
  }
  else if (v16 != 9)
  {
    goto LABEL_26;
  }
  v32 = v14 & 0x2000FFFF;
  v19 = (unsigned __int32 *)&v30;
  v20 = &v32;
  v21 = a2;
  v22 = 1;
  return sub_22E51B708(&v31, v21, v19, v20, v22);
}

void sub_22E51F12C(uint64_t **a1, llvm::Value *a2, unint64_t a3, llvm::Value *a4, unint64_t a5, int a6)
{
  llvm::Type *v11;
  llvm::Type *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int ScalarSizeInBits;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t Name;
  uint64_t v35;
  uint64_t False;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  llvm::LLVMContext *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  _BOOL4 v51;
  uint64_t *v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  _QWORD v58[2];
  const char *v59;
  __int16 v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[48];
  llvm::Type **v64[2];
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  const char *v68;
  llvm::Value *v69;
  __int128 v70;
  __int16 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)*a1 + 1871) & 8) == 0)
    return;
  v11 = *(llvm::Type **)a2;
  v12 = *(llvm::Type **)a4;
  v13 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(v14 + 16);
  if (v14)
    v16 = v15 == 11;
  else
    v16 = 0;
  if (v16)
  {
    if (((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return;
  }
  else if (v14 && v15 == 44)
  {
    v17 = a6;
    v18 = sub_22F114198(*(_QWORD *)(v14 + 24));
    if ((*(_BYTE *)(v18 + 74) & 1) == 0 && *(_QWORD *)(v18 + 128) <= 7uLL)
      return;
    v19 = sub_22F114198(*(_QWORD *)(v14 + 24));
    a6 = v17;
    if ((*(_BYTE *)(v19 + 76) & 0x80) != 0)
      return;
  }
  else if (v15 != 9)
  {
    return;
  }
  v55 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_DWORD *)(v20 + 16);
  if (v20)
    v22 = v21 == 11;
  else
    v22 = 0;
  if (v22)
  {
    if (((*(_DWORD *)(v20 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return;
  }
  else if (v20 && v21 == 44)
  {
    v53 = a6;
    v23 = sub_22F114198(*(_QWORD *)(v20 + 24));
    if ((*(_BYTE *)(v23 + 74) & 1) == 0 && *(_QWORD *)(v23 + 128) <= 7uLL)
      return;
    v24 = sub_22F114198(*(_QWORD *)(v20 + 24));
    a6 = v53;
    if ((*(_BYTE *)(v24 + 76) & 0x80) != 0)
      return;
  }
  else if (v21 != 9)
  {
    return;
  }
  v54 = a6;
  v25 = sub_22F110A40(*v13);
  v26 = sub_22F110A40(*v55);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v11);
  v28 = llvm::Type::getScalarSizeInBits(v12);
  v29 = v25 ^ v26;
  if (ScalarSizeInBits != v28)
    v29 = 1;
  if ((v25 || v26) && v29)
  {
    v30 = v28;
    if (v28 <= ScalarSizeInBits || !v26)
    {
      v32 = *a1;
      if (((ScalarSizeInBits > v28) & (*((unsigned __int8 *)*a1 + 1871) >> 1) & v25) == 0)
      {
        v51 = v25;
        *((_BYTE *)v32 + 1880) = 1;
        v57 = 0uLL;
        v56 = 0;
        v52 = v32;
        v61 = v63;
        v62 = 0x200000000;
        v33 = (uint64_t)a1[1];
        sub_22F110A40(*v13);
        sub_22F110A40(*v55);
        if (sub_22F110A40(*v13))
        {
          v48 = llvm::ConstantInt::get();
          v58[0] = "src";
          v59 = ".";
          v60 = 771;
          Name = llvm::Value::getName(a2);
          v64[0] = (llvm::Type **)v58;
          v65 = Name;
          v66 = v35;
          v67 = 1282;
          v68 = (const char *)v64;
          *(_QWORD *)&v70 = ".negativitycheck";
          v71 = 770;
          False = sub_22E3C18F4(v33, 40, (uint64_t *)a2, v48, (uint64_t)&v68);
        }
        else
        {
          False = llvm::ConstantInt::getFalse();
        }
        v49 = (uint64_t *)False;
        v50 = !v26;
        if (sub_22F110A40(*v55))
        {
          v37 = v33;
          v38 = llvm::ConstantInt::get();
          v58[0] = "dst";
          v59 = ".";
          v60 = 771;
          v39 = llvm::Value::getName(a4);
          v64[0] = (llvm::Type **)v58;
          v65 = v39;
          v66 = v40;
          v67 = 1282;
          v68 = (const char *)v64;
          *(_QWORD *)&v70 = ".negativitycheck";
          v71 = 770;
          v41 = v38;
          v33 = v37;
          v42 = sub_22E3C18F4(v37, 40, (uint64_t *)a4, v41, (uint64_t)&v68);
        }
        else
        {
          v42 = llvm::ConstantInt::getFalse();
        }
        v68 = "signchangecheck";
        v71 = 259;
        v56 = sub_22E3C18F4(v33, 32, v49, v42, (uint64_t)&v68);
        v57 = xmmword_22F4583C8;
        sub_22F264594((unint64_t)&v61, (__int128 *)&v56);
        v43 = (uint64_t)*a1;
        v44 = (*((_BYTE *)*a1 + 1871) & 2) != 0 && ScalarSizeInBits > v30;
        v45 = v51;
        if (!v44)
          v45 = 1;
        if (((v45 | v50) & 1) == 0)
        {
          sub_22E51F9BC((uint64_t)&v68, (uint64_t *)a2, a3, (uint64_t)a4, a5, a1[1]);
          v56 = (uint64_t)v69;
          v57 = v70;
          sub_22F264594((unint64_t)&v61, (__int128 *)&v56);
          v43 = (uint64_t)*a1;
        }
        v68 = (const char *)sub_22E4DE978(v43, v54);
        v69 = sub_22F25E758((uint64_t)*a1, a3);
        *(_QWORD *)&v70 = sub_22F25E758((uint64_t)*a1, a5);
        llvm::Type::getInt8Ty((llvm::Type *)a1[1][8], v46);
        *((_QWORD *)&v70 + 1) = llvm::ConstantInt::get();
        v47 = *a1;
        v64[0] = (llvm::Type **)a2;
        v64[1] = (llvm::Type **)a4;
        sub_22E4DEC4C(v47, (uint64_t)v61, v62, 7u, (uint64_t)&v68, 4, v64, 2);
        if (v61 != v63)
          free(v61);
        *((_BYTE *)v52 + 1880) = 0;
      }
    }
  }
}

llvm::Value *sub_22E51F674(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t *v25;
  uint64_t Declaration;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  _QWORD v35[4];

  v10 = a3;
  v35[3] = *MEMORY[0x24BDAC8D0];
  v35[0] = a2;
  v13 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 29 > 1)
  {
    v16 = a6;
    v17 = a5;
  }
  else
  {
    v14 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    v16 = a6;
    v17 = a5;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 29 <= 1)
    {
      v17 = *(_QWORD *)(a5 + 24);
      v16 = *(_QWORD *)(a6 + 24);
      if (*(unsigned __int8 *)(v13 + 16) - 31 <= 0xFFFFFFFD)
      {
        v13 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
        v15 = *v14;
      }
      v10 = *(_QWORD *)(v13 + 32);
      if (!v15 || *(unsigned __int8 *)(v15 + 16) - 31 <= 0xFFFFFFFD)
        v15 = sub_22F10CF48(v15);
      a4 = *(_QWORD *)(v15 + 32);
    }
  }
  v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 == 13)
  {
    v19 = sub_22F110A40(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_DWORD *)(v20 + 16) == 11;
    else
      v21 = 0;
    v22 = v21 && (*(_DWORD *)(v20 + 16) & 0xFF80000) == 87031808;
    v28 = v22 & a7 | v19;
    v29 = (uint64_t *)a1[1];
    if (*(_BYTE *)(v16 + 8) == 13)
    {
      v33[0] = "conv";
      v34 = 259;
      return (llvm::Value *)sub_22E3BF45C(v29, a2, a6, v28, (uint64_t)v33);
    }
    else
    {
      v33[0] = "conv";
      v34 = 259;
      if ((_DWORD)v28)
        return (llvm::Value *)sub_22E3ED280((uint64_t)v29, a2, a6, (uint64_t)v33);
      else
        return (llvm::Value *)sub_22E3ED228((uint64_t)v29, a2, a6, (uint64_t)v33);
    }
  }
  else
  {
    v23 = *(unsigned __int8 *)(v16 + 8);
    if (v23 == 13)
    {
      v24 = sub_22F110A40(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 184) + 32) & 8) != 0)
      {
        v32 = a1[1];
        v33[0] = "conv";
        v34 = 259;
        if (v24)
          return (llvm::Value *)sub_22E3ED374(v32, a2, a6, (uint64_t)v33);
        else
          return (llvm::Value *)sub_22E3ED31C(v32, a2, a6, (uint64_t)v33);
      }
      else
      {
        v25 = (uint64_t *)a1[1];
        v35[1] = a6;
        v35[2] = a5;
        Declaration = llvm::Intrinsic::getDeclaration();
        if (Declaration)
          v27 = *(_QWORD *)(Declaration + 24);
        else
          v27 = 0;
        v34 = 257;
        return sub_22E462B78(v25, v27, Declaration, (uint64_t)v35, 1, (uint64_t)v33, 0);
      }
    }
    else
    {
      v31 = a1[1];
      v33[0] = "conv";
      v34 = 259;
      if (v23 >= v18)
        return (llvm::Value *)sub_22E3E6054(v31, a2, a6, (uint64_t)v33);
      else
        return (llvm::Value *)sub_22E3E5FFC(v31, a2, a6, (uint64_t)v33);
    }
  }
}

double sub_22E51F9BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  BOOL v12;
  _BOOL8 v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  double result;
  _QWORD v18[4];
  __int16 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v12 = sub_22F110A40(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_22F110A40(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
  if (v12 || v13)
  {
    v20 = xmmword_22F4583E8;
    v14 = 2;
  }
  else
  {
    v20 = xmmword_22F4583F8;
    v14 = 1;
  }
  v18[0] = "anyext";
  v19 = 259;
  v15 = (uint64_t *)sub_22E3BF45C(a6, a4, v11, v13, (uint64_t)v18);
  v18[0] = "truncheck";
  v19 = 259;
  v16 = sub_22E3C18F4((uint64_t)a6, 32, v15, (uint64_t)a2, (uint64_t)v18);
  result = *(double *)&v20;
  *(_OWORD *)(a1 + 16) = v20;
  *(_BYTE *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v16;
  return result;
}

uint64_t sub_22E51FAEC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  if (a2)
  {
    v6 = result;
    if (result > 0x40)
      result = llvm::APInt::initSlowCase((llvm::APInt *)&v5);
    else
      v5 = 0;
  }
  else
  {
    result = sub_22E51FD1C(result, (llvm::APInt *)&v5);
  }
  *(_DWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 12) = v3;
  return result;
}

uint64_t sub_22E51FB5C(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v1)
    return llvm::detail::DoubleAPFloat::convertFromAPInt();
  else
    return llvm::detail::IEEEFloat::convertFromAPInt();
}

uint64_t sub_22E51FBD8(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v1)
    return llvm::detail::DoubleAPFloat::subtract();
  else
    return llvm::detail::IEEEFloat::subtract();
}

uint64_t sub_22E51FC38@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  unint64_t v5;
  unint64_t v6;
  int v7;

  v3 = a2;
  if (a2)
  {
    v7 = result;
    if (result > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)&v6);
    }
    else
    {
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)result;
      if (!(_DWORD)result)
        v5 = 0;
      v6 = v5;
    }
  }
  else
  {
    result = sub_22E51FE68(result, (llvm::APInt *)&v6);
  }
  *(_DWORD *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 12) = v3;
  return result;
}

uint64_t sub_22E51FCBC(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v1)
    return llvm::detail::DoubleAPFloat::add();
  else
    return llvm::detail::IEEEFloat::add();
}

uint64_t sub_22E51FD1C@<X0>(uint64_t result@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v2;
  int v3;
  llvm::APInt *v4;

  *((_DWORD *)a2 + 2) = result;
  if (result > 0x40)
  {
    v3 = result;
    v4 = a2;
    result = llvm::APInt::initSlowCase(a2);
    a2 = v4;
    v2 = v3 - 1;
    if (*((_DWORD *)v4 + 2) >= 0x41u)
      a2 = (llvm::APInt *)(*(_QWORD *)v4 + 8 * (v2 >> 6));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    LOBYTE(v2) = result - 1;
  }
  *(_QWORD *)a2 |= 1 << v2;
  return result;
}

uint64_t *sub_22E51FDA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *a1;
  v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v6 = *a2;
  if (v5 == v4 || v5 == v6)
  {
    v8 = v5;
    if (v5 == v4 && v5 == v6)
    {
      if (a1 == a2)
        return a1;
      sub_22E463170((llvm::APFloatBase *)(a1 + 1));
    }
    else
    {
      if (a1 == a2)
        return a1;
      if (v5 == v4)
        sub_22E463170((llvm::APFloatBase *)(a1 + 1));
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)a1);
      if (v8 != *a2)
      {
        llvm::detail::IEEEFloat::IEEEFloat();
        return a1;
      }
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
    return a1;
  }
  llvm::detail::IEEEFloat::operator=();
  return a1;
}

uint64_t sub_22E51FE68@<X0>(uint64_t result@<X0>, llvm::APInt *a2@<X8>)
{
  unint64_t v2;
  int v3;
  llvm::APInt *v4;

  *((_DWORD *)a2 + 2) = result;
  if (result > 0x40)
  {
    v3 = result;
    v4 = a2;
    result = llvm::APInt::initSlowCase(a2);
    a2 = v4;
    LODWORD(v2) = v3 - 1;
    if (*((_DWORD *)v4 + 2) >= 0x41u)
      a2 = (llvm::APInt *)(*(_QWORD *)v4 + 8 * (v2 >> 6));
  }
  else
  {
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)result;
    if (!(_DWORD)result)
      v2 = 0;
    *(_QWORD *)a2 = v2;
    LOBYTE(v2) = result - 1;
  }
  *(_QWORD *)a2 &= ~(1 << v2);
  return result;
}

uint64_t sub_22E51FF00(uint64_t *a1, uint64_t a2)
{
  _BOOL4 v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t Declaration;
  uint64_t *v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::LLVMContext *v46;
  llvm::LLVMContext *v47;
  uint64_t v48;
  llvm::Value *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  llvm::PHINode *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  __int128 v63;
  __int16 v64;
  _QWORD v65[4];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0));
  v5 = 1 << *(_DWORD *)(a2 + 24);
  if ((v5 & 0x2000020) != 0)
    v6 = 0;
  else
    v6 = 21;
  if ((v5 & 0x400004) != 0)
    v7 = 12;
  else
    v7 = v6;
  v8 = *a1;
  *(_BYTE *)(v8 + 1880) = 1;
  v61 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v8 + 144) + 280), *(llvm::LLVMContext **)(a2 + 16));
  Declaration = llvm::Intrinsic::getDeclaration();
  v10 = (uint64_t *)a1[1];
  if (Declaration)
    v11 = *(_QWORD *)(Declaration + 24);
  else
    v11 = 0;
  v66 = *(_OWORD *)a2;
  v64 = 257;
  v12 = sub_22E462B78(v10, v11, Declaration, (uint64_t)&v66, 2, (uint64_t)&v62, 0);
  v13 = a1[1];
  LODWORD(v66) = 0;
  v64 = 257;
  v14 = sub_22E3C2EA8(v13, (uint64_t)v12, (uint64_t)&v66, 1, (uint64_t)&v62);
  v15 = a1[1];
  LODWORD(v66) = 1;
  v64 = 257;
  v16 = sub_22E3C2EA8(v15, (uint64_t)v12, (uint64_t)&v66, 1, (uint64_t)&v62);
  v17 = *a1;
  v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 144) + 152);
  if (*(char *)(v18 + 471) < 0)
  {
    if (!*(_QWORD *)(v18 + 456))
    {
LABEL_12:
      if (v4)
      {
        if ((*(_BYTE *)(v17 + 1868) & 0x20) == 0)
        {
          v19 = a1[1];
          v64 = 257;
          v20 = sub_22E3BECF4(v19, v16, (uint64_t)&v62);
          sub_22E4EA298(v17, v20, v7, "", 0);
          goto LABEL_26;
        }
        v21 = &xmmword_22F458418;
      }
      else
      {
        v21 = &xmmword_22F458408;
      }
      v57 = a1[1];
      v64 = 257;
      v58 = sub_22E3BECF4(v57, v16, (uint64_t)&v62);
      v63 = *v21;
      v62 = (const char *)v58;
      sub_22E52050C(a1, (uint64_t)&v62, 1, a2);
      goto LABEL_26;
    }
  }
  else if (!*(_BYTE *)(v18 + 471))
  {
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(a1[1] + 48);
  v62 = "nooverflow";
  v64 = 259;
  v60 = v22;
  v23 = operator new();
  llvm::BasicBlock::BasicBlock();
  v62 = "overflow";
  v64 = 259;
  v24 = operator new();
  llvm::BasicBlock::BasicBlock();
  v25 = (uint64_t *)a1[1];
  v26 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v26, v24, v23, v16, 0);
  v64 = 257;
  sub_22E3C12C8(v25, v26, (uint64_t)&v62);
  v27 = a1[1];
  *(_QWORD *)(v27 + 48) = v24;
  *(_QWORD *)(v27 + 56) = v24 + 40;
  v28 = *(_QWORD *)(*a1 + 8);
  *(_QWORD *)&v66 = *(_QWORD *)(*a1 + 32);
  *((_QWORD *)&v66 + 1) = v66;
  v67 = v28;
  v68 = v28;
  v29 = llvm::FunctionType::get();
  v30 = *(_BYTE *)(v18 + 471);
  v31 = v30 < 0;
  if (v30 >= 0)
    v32 = v18 + 448;
  else
    v32 = *(_QWORD *)(v18 + 448);
  v33 = v30 & 0x7F;
  if (v31)
    v34 = *(_QWORD *)(v18 + 456);
  else
    v34 = v33;
  v35 = sub_22E633A04(*(_QWORD *)(*a1 + 144), v29, v32, v34, 0, 0, 0);
  v37 = v36;
  v38 = *(_QWORD *)a2;
  v39 = (uint64_t *)a1[1];
  v40 = *(_QWORD *)(*a1 + 32);
  v64 = 257;
  v41 = sub_22E3C1740(v39, 40, v38, v40, (uint64_t)&v62);
  v42 = *(_QWORD *)(a2 + 8);
  v43 = (uint64_t *)a1[1];
  v44 = *(_QWORD *)(*a1 + 32);
  v64 = 257;
  v45 = sub_22E3C1740(v43, 40, v42, v44, (uint64_t)&v62);
  v65[0] = v41;
  v65[1] = v45;
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1[1] + 64), v46);
  v65[2] = llvm::ConstantInt::get();
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1[1] + 64), v47);
  v65[3] = llvm::ConstantInt::get();
  v48 = *a1;
  v64 = 257;
  v49 = sub_22F24EEDC(v48, v35, v37, (uint64_t)v65, 4, (uint64_t)&v62);
  v50 = (uint64_t *)a1[1];
  v64 = 257;
  v51 = sub_22E3C1740(v50, 38, (uint64_t)v49, v61, (uint64_t)&v62);
  v52 = (uint64_t *)a1[1];
  v53 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  v64 = 257;
  sub_22E3C12C8(v52, v53, (uint64_t)&v62);
  v54 = a1[1];
  *(_QWORD *)(v54 + 48) = v23;
  *(_QWORD *)(v54 + 56) = v23 + 40;
  v55 = (uint64_t *)a1[1];
  v64 = 257;
  v56 = (llvm::PHINode *)sub_22E3C4B80(v55, v61, 2, (uint64_t)&v62);
  sub_22E3C4C50(v56, v14, v60);
  sub_22E3C4C50(v56, v51, v24);
  v14 = (uint64_t)v56;
LABEL_26:
  *(_BYTE *)(v8 + 1880) = 0;
  return v14;
}

llvm::Instruction *sub_22E520468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  if (v6)
    return (llvm::Instruction *)v6;
  v7 = llvm::BinaryOperator::Create();
  v8 = (llvm::Instruction *)sub_22E3C12C8((uint64_t *)a1, v7, a4);
  llvm::Instruction::setHasNoSignedWrap(v8);
  return v8;
}

void sub_22E52050C(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  llvm::Value *v14;
  unsigned int v15;
  llvm::Type **v16;
  int v17;
  unsigned int v18;
  int v19;
  llvm::Value *v20;
  unsigned int v21;
  llvm::Value *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  llvm::Type **v26[2];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v27 = v29;
  v28 = 0x400000000;
  v25 = 0;
  v8 = *(_DWORD *)(a4 + 24);
  if (v8 <= 28)
    v9 = -20;
  else
    v9 = -13;
  if ((v8 - 22) >= 0xA)
    v10 = 0;
  else
    v10 = v9;
  v11 = *a1;
  sub_22EFF605C(*(_QWORD *)(a4 + 32));
  *((_QWORD *)v27 + v28) = sub_22E4DE978(v11, v12);
  LODWORD(v28) = v28 + 1;
  v13 = *(unsigned __int8 **)(a4 + 32);
  if (*v13 == 233 && (*(_DWORD *)v13 & 0x7C0000) == 0x1C0000)
  {
    v14 = sub_22F25E758(*a1, *((_QWORD *)v13 + 1));
    v15 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v28;
    }
    *((_QWORD *)v27 + v15) = v14;
    LODWORD(v28) = v28 + 1;
    v16 = *(llvm::Type ***)(a4 + 8);
    v17 = 0;
    v18 = 13;
  }
  else
  {
    v19 = v10 + v8;
    if ((v10 + v8 - 7) > 1)
    {
      if ((v19 - 3) > 1)
      {
        if (v19 == 2)
        {
          v18 = 12;
        }
        else if (v19 == 5)
        {
          v18 = 0;
        }
        else
        {
          v18 = 21;
        }
        v22 = sub_22F25E758(*a1, *(_QWORD *)(a4 + 16));
        v23 = v28;
        v24 = HIDWORD(v28);
      }
      else
      {
        v22 = sub_22F25E758(*a1, *(_QWORD *)(a4 + 16));
        v23 = v28;
        v24 = HIDWORD(v28);
        v18 = 3;
      }
    }
    else
    {
      v20 = sub_22F25E758(*a1, *(_QWORD *)(*((_QWORD *)v13 + 2) + 8));
      v21 = v28;
      if (v28 >= HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = v28;
      }
      *((_QWORD *)v27 + v21) = v20;
      LODWORD(v28) = v28 + 1;
      v22 = sub_22F25E758(*a1, *(_QWORD *)(*((_QWORD *)v13 + 3) + 8));
      v23 = v28;
      v24 = HIDWORD(v28);
      v18 = 20;
    }
    if (v23 >= v24)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v28;
    }
    *((_QWORD *)v27 + v23) = v22;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(llvm::Type ***)a4;
    v17 = 1;
    v25 = 1;
    v16 = *(llvm::Type ***)(a4 + 8);
  }
  v26[v17] = v16;
  sub_22E4DEC4C((_QWORD *)*a1, a2, a3, v18, (uint64_t)v27, v28, v26, (v25 + 1));
  if (v27 != v29)
    free(v27);
}

BOOL sub_22E520888(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  int v12;
  unint64_t v13;

  if (!sub_22E5209A0(a2))
    return 1;
  v4 = *(unsigned __int8 ***)(a2 + 32);
  if (*(unsigned __int8 *)v4 == 233)
    return (*((_BYTE *)v4 + 2) & 0x80) == 0;
  v6 = sub_22E520A58(a1, v4[2]);
  if (!v7)
    return 0;
  v8 = v6;
  v9 = sub_22E520A58(a1, v4[3]);
  if (!v10)
    return 0;
  v11 = v9;
  v12 = *(_DWORD *)(a2 + 24);
  if (v12 != 22 && v12 != 2)
    return 1;
  if (!sub_22F110B50(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
    return 1;
  if (!sub_22F110B50(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0)))
    return 1;
  v13 = sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) & 0xFFFFFFFFFFFFFFF0));
  if (v13 > 2 * sub_22EF5CDF0(a1, *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
    return 1;
  return v13 > 2 * sub_22EF5CDF0(a1, *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
}

BOOL sub_22E5209A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  BOOL v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  unsigned int v9;

  if (*(_BYTE *)(*(_QWORD *)a1 + 16) == 16)
    v1 = *(_QWORD *)a1;
  else
    v1 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16) == 16)
    v2 = *(_QWORD *)(a1 + 8);
  else
    v2 = 0;
  v3 = 1;
  if (v1)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v9 = 1;
    v8 = 0;
    v5 = *(_DWORD *)(a1 + 24);
    v6 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF0));
    v3 = sub_22E520AF0(v1, v2, v5, v6, (uint64_t)&v8);
    if (v9 >= 0x41)
    {
      if (v8)
        MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
    }
  }
  return v3;
}

unint64_t sub_22E520A58(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = sub_22EFFEB40(a2);
  if (v4 == a2
    || (v5 = *((_QWORD *)v4 + 1), !sub_22F1124D8(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)))
    || (v6 = sub_22EF5CDF0(a1, *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)),
        v6 >= sub_22EF5CDF0(a1, *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0))))
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = v5 & 0xFFFFFFFFFFFFFF00;
    v8 = v5;
  }
  return v7 | v8;
}

BOOL sub_22E520AF0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  llvm::APInt *v6;
  const llvm::APInt *v7;
  llvm::APInt *v8;
  const llvm::APInt *v9;
  llvm::APInt *v10;
  const llvm::APInt *v11;
  llvm::APInt *v12;
  const llvm::APInt *v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  BOOL v18;

  v18 = 1;
  v6 = (llvm::APInt *)(a1 + 24);
  v7 = (const llvm::APInt *)(a2 + 24);
  switch(a3)
  {
    case 2:
      v10 = (llvm::APInt *)(a1 + 24);
      v11 = (const llvm::APInt *)(a2 + 24);
      if (a4)
        llvm::APInt::smul_ov(v10, v11, &v18);
      else
        llvm::APInt::umul_ov(v10, v11, &v18);
      goto LABEL_18;
    case 6:
      v12 = (llvm::APInt *)(a1 + 24);
      v13 = (const llvm::APInt *)(a2 + 24);
      if (a4)
        llvm::APInt::ssub_ov(v12, v13, &v18);
      else
        llvm::APInt::usub_ov(v12, v13, &v18);
      goto LABEL_18;
    case 5:
      v8 = (llvm::APInt *)(a1 + 24);
      v9 = (const llvm::APInt *)(a2 + 24);
      if (a4)
        llvm::APInt::sadd_ov(v8, v9, &v18);
      else
        llvm::APInt::uadd_ov(v8, v9, &v18);
      goto LABEL_18;
  }
  if ((a3 - 3) <= 1)
  {
    if (a4)
    {
      v14 = *(_DWORD *)(a2 + 32);
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) != v14)
          goto LABEL_14;
      }
      else if (*(_QWORD *)v7)
      {
LABEL_14:
        llvm::APInt::sdiv_ov(v6, v7, &v18);
LABEL_18:
        if (*(_DWORD *)(a5 + 8) >= 0x41u)
        {
          if (*(_QWORD *)a5)
            MEMORY[0x2348A0E84](*(_QWORD *)a5, 0x1000C8000313F17);
        }
        *(_QWORD *)a5 = v16;
        *(_DWORD *)(a5 + 8) = v17;
        return v18;
      }
    }
    return 0;
  }
  return v18;
}

BOOL sub_22E520C44(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;
  llvm::APInt *v4;
  unsigned int v5;

  result = 1;
  if (a2 <= 0x18 && ((1 << a2) & 0x1800018) != 0 && a1 && *(_BYTE *)(a1 + 16) == 16)
  {
    v4 = (llvm::APInt *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 32);
    if (v5 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v4) == v5;
    else
      return *(_QWORD *)v4 == 0;
  }
  return result;
}

void sub_22E520CB8(uint64_t *a1, uint64_t **a2, llvm::Constant **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t *v12;
  char v13;
  llvm::Constant *v14;
  unsigned int v15;
  const char **v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t AllOnesValue;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  const char *v33;
  __int128 v34;
  __int16 v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x24BDAC8D0];
  v38 = v40;
  v39 = 0x200000000;
  v6 = *(_QWORD *)(*a1 + 1864);
  if ((v6 & 0x800000) != 0)
  {
    v7 = a1[1];
    v8 = a2[1];
    v35 = 257;
    v36 = sub_22E3C18F4(v7, 33, v8, (uint64_t)a3, (uint64_t)&v33);
    v37 = xmmword_22F458428;
    v9 = sub_22E4EF088((uint64_t)&v38, (unint64_t)&v36, 1);
    v10 = (char *)v38 + 24 * v39;
    v11 = *(_OWORD *)v9;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)v10 = v11;
    LODWORD(v39) = v39 + 1;
    v6 = *(_QWORD *)(*a1 + 1864);
  }
  if ((v6 & 0x2000000000) == 0
    || (v12 = a2[4], !sub_22F110B20(*(_QWORD *)((unint64_t)a2[2] & 0xFFFFFFFFFFFFFFF0)))
    || (sub_22E520A58(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 144), (unsigned __int8 *)v12[2]), v13)
    || !sub_22E5209A0((uint64_t)a2))
  {
    v30 = v39;
    goto LABEL_15;
  }
  v14 = *a3;
  v15 = *((_DWORD *)v14 + 2) >> 8;
  LODWORD(v34) = v15;
  if (v15 <= 0x40)
  {
    v33 = 0;
    LOBYTE(v15) = v15 - 1;
LABEL_9:
    v16 = &v33;
    goto LABEL_10;
  }
  v32 = v15;
  llvm::APInt::initSlowCase((llvm::APInt *)&v33);
  v15 = v32 - 1;
  if (v34 < 0x41)
    goto LABEL_9;
  v16 = (const char **)&v33[8 * (v15 >> 6)];
LABEL_10:
  *v16 = (const char *)((1 << v15) | (unint64_t)*v16);
  v18 = llvm::ConstantInt::get();
  if (v34 >= 0x41 && v33)
    MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
  AllOnesValue = llvm::Constant::getAllOnesValue(v14, v17);
  v20 = a1[1];
  v21 = *a2;
  v35 = 257;
  v22 = sub_22E3C18F4(v20, 33, v21, v18, (uint64_t)&v33);
  v23 = a1[1];
  v24 = a2[1];
  v35 = 257;
  v25 = sub_22E3C18F4(v23, 33, v24, AllOnesValue, (uint64_t)&v33);
  v26 = a1[1];
  v33 = "or";
  v35 = 259;
  v33 = (const char *)sub_22E3E58D4(v26, v22, v25, (uint64_t)&v33);
  v34 = xmmword_22F458418;
  v27 = sub_22E4EF088((uint64_t)&v38, (unint64_t)&v33, 1);
  v28 = (char *)v38 + 24 * v39;
  v29 = *(_OWORD *)v27;
  *((_QWORD *)v28 + 2) = *(_QWORD *)(v27 + 16);
  *(_OWORD *)v28 = v29;
  v30 = v39 + 1;
  LODWORD(v39) = v39 + 1;
LABEL_15:
  v31 = v38;
  if (v30)
  {
    sub_22E52050C(a1, (uint64_t)v38, v30, (uint64_t)a2);
    v31 = v38;
  }
  if (v31 != v40)
    free(v31);
}

uint64_t sub_22E520FA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = sub_22E3C19FC(a1, 22, a2, a3, a4);
  if (!result)
  {
    v7 = llvm::BinaryOperator::Create();
    return sub_22E3C12C8(a1, v7, a4);
  }
  return result;
}

uint64_t sub_22E521020(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unsigned int v15;
  llvm::DataLayout *DataLayout;
  llvm::Type *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  _BOOL4 v24;
  llvm::Type **v25;
  uint64_t IndexType;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  llvm::Instruction *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Instruction *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  _QWORD v62[4];
  __int16 v63;

  v5 = *(_QWORD *)(a2 + 32);
  v7 = *(llvm::Type ***)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  if ((a3 & 1) != 0)
  {
    v59 = *(_QWORD *)(v5 + 16);
  }
  else
  {
    v10 = *((unsigned __int8 *)*v7 + 8);
    v11 = v10 == 15;
    if (v10 == 15)
      v12 = *(_QWORD *)(v5 + 24);
    else
      v12 = *(_QWORD *)(v5 + 16);
    if (v11)
      v13 = *(_QWORD *)(a2 + 8);
    else
      v13 = *(_QWORD *)a2;
    if (!v11)
      v8 = *(_QWORD *)(v5 + 24);
    v59 = v8;
    if (!v11)
      v7 = *(llvm::Type ***)(a2 + 8);
    v9 = v12;
    v6 = v13;
  }
  v14 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  v17 = *v7;
  if (!sub_22EFFBA68(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_DWORD *)(a2 + 24), *(unsigned __int8 **)(v5 + 16), *(unsigned __int8 **)(v5 + 24)))
  {
    v61 = a1;
    v22 = (uint64_t *)v7;
    if (llvm::DataLayout::getIndexTypeSizeInBits(DataLayout, v17) == v15 >> 8)
    {
      v23 = a3;
      v24 = v14;
      v25 = (llvm::Type **)v6;
    }
    else
    {
      IndexType = llvm::DataLayout::getIndexType(DataLayout, v17);
      v62[0] = "idx.ext";
      v63 = 259;
      v24 = v14;
      v25 = (llvm::Type **)sub_22E3BF45C((uint64_t *)(v61 + 272), v6, IndexType, v14, (uint64_t)v62);
      v23 = a3;
    }
    if (v23)
    {
      v62[0] = "idx.neg";
      v63 = 259;
      v25 = (llvm::Type **)sub_22E42E798(v61 + 272, (uint64_t)v25, (uint64_t)v62, 0, 0);
    }
    if ((*(_BYTE *)(v61 + 1866) & 1) != 0)
      sub_22E4DF4E0(v61, *(_QWORD *)(a2 + 32), (unsigned __int8 *)v59, v25, *(_QWORD *)(v9 + 8), 0);
    v27 = *(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0);
    v28 = *(unsigned __int8 *)(v27 + 16);
    if (v27 && v28 == 39)
      goto LABEL_27;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v27 = sub_22F10CF48(v27);
      if (v27)
      {
LABEL_27:
        v29 = *(_QWORD *)(v27 + 32);
        v30 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v61 + 144) + 144), v29);
        if (v30)
        {
          v31 = v30;
          if (*(_BYTE *)(v30 + 16) == 5)
          {
            v52 = sub_22F297878(v61, v30);
            sub_22E66C868(*(_QWORD *)(v61 + 144) + 280, *(_QWORD *)(v31 + 32), 0);
            if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 144) + 152) + 248) & 0xC00) == 0x400)
            {
              v62[0] = "vla.index";
              v63 = 259;
              v53 = (uint64_t)v25;
              v54 = (uint64_t)v52;
              v55 = 0;
            }
            else
            {
              v62[0] = "vla.index";
              v63 = 259;
              v53 = (uint64_t)v25;
              v54 = (uint64_t)v52;
              v55 = 1;
            }
            v56 = sub_22E3BDEA8(v61 + 272, v53, v54, (uint64_t)v62, 0, v55);
            v57 = *(_QWORD *)(a2 + 16);
            sub_22EFF605C(*(_QWORD *)(a2 + 32));
            v36 = v58;
            v37 = v22;
            v38 = (uint64_t *)v56;
            v39 = v57;
            v40 = v24;
            v41 = v23;
            v42 = v61;
            return sub_22E5216B8(v37, v38, v39, v40, v41, v36, v42);
          }
        }
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v32)
          v33 = (*(_DWORD *)(v32 + 16) & 0xFF800FF) == 86507531;
        else
          v33 = 0;
        if (!v33 && *(_DWORD *)(v32 + 16) - 25 > 1)
        {
          v34 = *(_QWORD *)(a2 + 16);
          sub_22EFF605C(*(_QWORD *)(a2 + 32));
          v36 = v35;
          v37 = v22;
          v38 = (uint64_t *)v25;
          v39 = v34;
          v40 = v24;
          v41 = v23;
          v42 = v61;
          return sub_22E5216B8(v37, v38, v39, v40, v41, v36, v42);
        }
        v50 = (uint64_t *)sub_22F25E214((_QWORD *)v61, v22);
        v45 = (uint64_t *)(v61 + 272);
        v51 = *(_QWORD *)(v61 + 8);
        v62[0] = "add.ptr";
        v63 = 259;
        v21 = sub_22E42129C((uint64_t *)(v61 + 272), v51, v50, (uint64_t *)v25, (uint64_t)v62);
        v19 = *v22;
        v63 = 257;
LABEL_40:
        v18 = v45;
        v20 = 49;
        return sub_22E3C1740(v18, v20, v21, v19, (uint64_t)v62);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0);
      v28 = *(unsigned __int8 *)(v27 + 16);
    }
    if (v28 != 32)
      v27 = sub_22F10CF48(v27);
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v61 + 144) + 144), *(_QWORD *)(*(_QWORD *)(v27 + 32) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v62);
    v44 = llvm::ConstantInt::get();
    v45 = (uint64_t *)(v61 + 272);
    v63 = 257;
    v46 = (uint64_t *)sub_22E3BDEA8(v61 + 272, (uint64_t)v25, v44, (uint64_t)v62, 0, 0);
    v47 = *(_QWORD *)(v61 + 96);
    v63 = 257;
    v48 = (uint64_t *)sub_22E3C1740((uint64_t *)(v61 + 272), 49, (uint64_t)v22, v47, (uint64_t)v62);
    v49 = *(_QWORD *)(v61 + 8);
    v62[0] = "add.ptr";
    v63 = 259;
    v21 = sub_22E42129C((uint64_t *)(v61 + 272), v49, v48, v46, (uint64_t)v62);
    v19 = *v22;
    v63 = 257;
    goto LABEL_40;
  }
  v18 = (uint64_t *)(a1 + 272);
  v19 = (uint64_t)*v7;
  v63 = 257;
  v20 = 48;
  v21 = v6;
  return sub_22E3C1740(v18, v20, v21, v19, (uint64_t)v62);
}

uint64_t sub_22E5214C4(llvm::CallBase **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  llvm::CallBase *v14;
  unsigned int v15;
  BOOL v18;
  llvm::CallBase *v19;
  unsigned int v20;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  llvm::CallBase *v28;
  llvm::CallBase *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD v36[2];
  _QWORD v37[2];

  v8 = *(_QWORD *)(a2 + 144);
  v9 = *((_DWORD *)a1 + 7) & 3;
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 184) + 32) & 2) != 0)
  {
    if ((v9 - 1) > 1)
      return 0;
  }
  else if (v9 != 1)
  {
    return 0;
  }
  v10 = *(_QWORD *)(v8 + 216);
  if ((*(_DWORD *)(v10 + 56) & 0xFFFFFFFE) == 0x30)
  {
    v37[0] = llvm::Triple::getAIRVersion((llvm::Triple *)(v10 + 32));
    v37[1] = v11;
    v36[0] = 0x8000000B00000001;
    v36[1] = 0;
    v12 = sub_22E3B38EC(v37, v36);
    result = 0;
    if ((v12 & 1) != 0)
      return result;
  }
  v14 = *a1;
  v15 = *((unsigned __int8 *)*a1 + 16);
  v18 = v15 == 46 && v14 != 0 && v15 >= 0x1C && v15 - 59 >= 0xFFFFFFEE;
  if (v18 && !*((_QWORD *)v14 + 1))
  {
    v29 = a1[1];
    v28 = *a1;
    goto LABEL_40;
  }
  v19 = a1[1];
  v20 = *((unsigned __int8 *)v19 + 16);
  v23 = v20 == 46 && v19 != 0 && v20 >= 0x1C && v20 - 59 >= 0xFFFFFFEE;
  if (v23 && !*((_QWORD *)v19 + 1))
  {
    v28 = a1[1];
    v29 = *a1;
LABEL_51:
    v30 = a2;
    v31 = a3;
    v32 = a4;
    v33 = 0;
    return sub_22E521804(v28, (uint64_t)v29, v30, v31, v32, v33);
  }
  if (v15 >= 0x1C)
  {
    v24 = v15 - 33;
    v25 = v24 > 0x33;
    v26 = (1 << v24) & 0x8000000000041;
    if (!v25 && v26 != 0)
    {
      if (llvm::CallBase::getIntrinsicID(*a1) == 89)
      {
        v19 = a1[1];
        if (!*((_QWORD *)v14 + 1))
        {
          v28 = v14;
          v29 = a1[1];
LABEL_40:
          v30 = a2;
          v31 = a3;
          v32 = 0;
          v33 = a4;
          return sub_22E521804(v28, (uint64_t)v29, v30, v31, v32, v33);
        }
      }
      else
      {
        v19 = a1[1];
      }
    }
  }
  v34 = *((unsigned __int8 *)v19 + 16);
  if (v34 < 0x1C)
    return 0;
  result = 0;
  v35 = v34 - 33;
  if (v35 <= 0x33 && ((1 << v35) & 0x8000000000041) != 0)
  {
    if (llvm::CallBase::getIntrinsicID(v19) != 89 || *((_QWORD *)v19 + 1))
      return 0;
    v29 = *a1;
    v28 = v19;
    goto LABEL_51;
  }
  return result;
}

uint64_t sub_22E5216B8(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, char a5, int a6, uint64_t a7)
{
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[2];
  uint64_t *v25;

  v25 = a2;
  v14 = sub_22E5DE8CC(*(_QWORD *)(a7 + 144), a3);
  v15 = v14;
  v24[0] = v14;
  v24[1] = v16;
  if ((v14 & 3) != 0)
    a1 = (uint64_t *)sub_22E622648(a7, v24, a1);
  v17 = sub_22F10ACF8(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_22E66C868(*(_QWORD *)(a7 + 144) + 280, v17, 0);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 144) + 152) + 248) & 0xC00) == 0x400)
  {
    v22[0] = "add.ptr";
    v23 = 259;
    v19 = sub_22E42129C((uint64_t *)(a7 + 272), v18, a1, a2, (uint64_t)v22);
  }
  else
  {
    v22[0] = "add.ptr";
    v23 = 259;
    v19 = (uint64_t)sub_22E513CE8(a7, v18, a1, &v25, 1, a4, a5, a6, (uint64_t)v22);
  }
  v20 = v19;
  if ((v15 & 2) != 0)
    return sub_22E62243C(a7, v24, v19, 249);
  return v20;
}

uint64_t sub_22E521804(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ConstrainedFPCall;
  uint64_t Declaration;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10 = a1[5];
  if ((v10 & 0x40000000) != 0)
    v11 = (uint64_t *)*((_QWORD *)a1 - 1);
  else
    v11 = (uint64_t *)&a1[-8 * (v10 & 0x7FFFFFF)];
  v12 = *v11;
  v13 = v11[4];
  if (a5)
  {
    v19[0] = "neg";
    v20 = 259;
    v12 = sub_22E3E39A4((uint64_t *)a4, v12, (uint64_t)v19, 0);
  }
  if (a6)
  {
    v19[0] = "neg";
    v20 = 259;
    a2 = sub_22E3E39A4((uint64_t *)a4, a2, (uint64_t)v19, 0);
  }
  if (*(_BYTE *)(a4 + 100))
  {
    llvm::Intrinsic::getDeclaration();
    v21 = v12;
    v22 = v13;
    v23 = a2;
    v20 = 257;
    ConstrainedFPCall = llvm::IRBuilderBase::CreateConstrainedFPCall();
  }
  else
  {
    Declaration = llvm::Intrinsic::getDeclaration();
    if (Declaration)
      v16 = *(_QWORD *)(Declaration + 24);
    else
      v16 = 0;
    v21 = v12;
    v22 = v13;
    v23 = a2;
    v20 = 257;
    ConstrainedFPCall = (uint64_t)sub_22E462B78((uint64_t *)a4, v16, Declaration, (uint64_t)&v21, 3, (uint64_t)v19, 0);
  }
  v17 = ConstrainedFPCall;
  llvm::Instruction::eraseFromParent((llvm::Instruction *)a1);
  return v17;
}

uint64_t sub_22E5219B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  BOOL v7;
  unsigned int v8;
  uint8x8_t v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t v12;

  if (a2)
    v7 = (*(_DWORD *)(a2 + 8) & 0xFE) == 18;
  else
    v7 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  if (v7)
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 8);
  a5.i32[0] = v8 >> 8;
  v9 = (uint8x8_t)vcnt_s8(a5);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = *(uint64_t **)(a1 + 8);
  v11 = v8 < 0x100 || v9.i32[0] > 1u;
  v12 = llvm::ConstantInt::get();
  if (v11)
    return sub_22E520FA0(v10, a3, v12, a4);
  else
    return sub_22E3E49C4((uint64_t)v10, a3, v12, a4);
}

uint64_t sub_22E521A88(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a3 && *(_BYTE *)(a3 + 16) == 16 && a4 && *(_BYTE *)(a4 + 16) == 16)
  {
    v18 = 1;
    v17 = 0;
    if (sub_22E520AF0(a3, a4, a2, 1, (uint64_t)&v17))
      **a1 = llvm::ConstantInt::getTrue();
    v5 = llvm::ConstantInt::get();
    if (v18 >= 0x41 && v17)
      MEMORY[0x2348A0E84](v17, 0x1000C8000313F17);
  }
  else
  {
    v6 = a1[1];
    v7 = 4;
    if (a2 == 5)
      v7 = 3;
    v8 = *a1[v7];
    if (v8)
      v9 = *(_QWORD *)(v8 + 24);
    else
      v9 = 0;
    v20[0] = a3;
    v20[1] = a4;
    v19 = 257;
    v10 = sub_22E462B78(v6, v9, v8, (uint64_t)v20, 2, (uint64_t)&v17, 0);
    v11 = (uint64_t)a1[1];
    v16 = 1;
    v19 = 257;
    v12 = sub_22E3C2EA8(v11, (uint64_t)v10, (uint64_t)&v16, 1, (uint64_t)&v17);
    v13 = **a1;
    v21 = 257;
    **a1 = sub_22E3E58D4(v11, v12, v13, (uint64_t)v20);
    v14 = (uint64_t)a1[1];
    LODWORD(v20[0]) = 0;
    v19 = 257;
    return sub_22E3C2EA8(v14, (uint64_t)v10, (uint64_t)v20, 1, (uint64_t)&v17);
  }
  return v5;
}

void sub_22E521C44(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t DataLayout;
  llvm::ConstantPointerNull *v24;
  llvm::PointerType *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type *v30;
  uint64_t v31;
  llvm::Type *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  llvm::GetElementPtrInst *v38;
  llvm::Type **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t Int8PtrTy;
  llvm::LLVMContext *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  char v49;
  llvm::Type *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  llvm::DataLayout *v56;
  void *v57;
  unsigned int v58;
  _BYTE v59[1216];
  void *v60;
  _BYTE v61[192];
  void *v62;
  _BYTE v63[16];
  void *v64;
  _BYTE v65[40];
  void *v66;
  uint64_t v67;
  _BYTE v68[1216];
  void *v69;
  uint64_t v70;
  _BYTE v71[192];
  void *v72;
  uint64_t v73;
  _BYTE v74[16];
  void *v75;
  uint64_t v76;
  _QWORD v77[5];
  llvm::Type **v78;
  uint64_t v79;
  _QWORD v80[2];
  __int16 v81;
  _QWORD *v82;
  uint64_t v83;
  _WORD v84[16];
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v53 = *(_QWORD *)(a2 + 144);
  v66 = v68;
  v67 = 0x800000000;
  v69 = v71;
  v70 = 0x100000000;
  v72 = v74;
  v73 = 0x100000000;
  v75 = v77;
  v76 = 0x200000000;
  v77[4] = 0;
  v9 = *a1;
  v10 = v9 >> 24;
  v11 = sub_22EFFA604(*(unsigned __int8 **)((char *)a1 + (v9 >> 24)));
  if ((*(_DWORD *)(v11 + 28) & 0x7Eu) - 52 >= 6)
    v12 = 0;
  else
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(_BYTE *)(v13 + 16) == 26;
  else
    v14 = 0;
  v55 = a5;
  v52 = a3;
  if (!v14)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v13 = sub_22F10CF48(v13);
      v9 = *a1;
      v10 = v9 >> 24;
    }
    else
    {
      v13 = 0;
    }
  }
  v54 = (uint64_t *)(a2 + 272);
  v15 = v13 & 0xFFFFFFFFFFFFFFFBLL;
  v16 = (unint64_t *)((char *)&a1[2 * ((v9 >> 18) & 1) + 2 + 2 * a1[4]] + v10);
  v17 = sub_22EFFA604(*(unsigned __int8 **)((char *)a1 + v10));
  if (v17)
  {
    if ((*(_DWORD *)(v17 + 28) & 0x7Eu) - 52 >= 6)
      v18 = 0;
    else
      v18 = v17;
  }
  else
  {
    v18 = 0;
  }
  sub_22E477B1C(a2, (uint64_t)&v66, v15, (uint64_t)&a1[2 * ((v9 >> 18) & 1) + 2] + v10, v16, v18, 0, 0);
  sub_22F2652A8(&v57, (uint64_t)&v66);
  v19 = (char *)v57 + 152;
  v20 = 152 * v58 - 152;
  while (v20)
  {
    sub_22E479748((uint64_t)v19, a2, (uint64_t)&v82);
    v19 += 152;
    v20 -= 152;
    if ((v85 & 6) != 0)
    {
      if (v64 != v65)
        free(v64);
      if (v62 != v63)
        free(v62);
      if (v60 != v61)
        free(v60);
      if (v57 != v59)
        free(v57);
      sub_22E628400(v53, (uint64_t)a1, "non-scalar arg to printf");
      v21 = llvm::ConstantInt::get();
      v22 = *(_BYTE *)(v55 + 48);
      *(_QWORD *)v55 = v21;
      *(_QWORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 48) = v22 & 0xF8;
      goto LABEL_57;
    }
  }
  if (v64 != v65)
    free(v64);
  if (v62 != v63)
    free(v62);
  if (v60 != v61)
    free(v60);
  if (v57 != v59)
    free(v57);
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
  if (v67 > 1)
  {
    v50 = *(llvm::Type **)(*(_QWORD *)(a2 + 144) + 232);
    v27 = DataLayout;
    v82 = v84;
    v83 = 0x800000000;
    v28 = 152;
    v29 = 152 * v67;
    do
    {
      sub_22E479748((uint64_t)v66 + v28, a2, (uint64_t)&v78);
      v30 = *v78;
      v31 = v83;
      if (v83 >= (unint64_t)HIDWORD(v83))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = v83;
      }
      v82[v31] = v30;
      LODWORD(v83) = v83 + 1;
      v28 += 152;
    }
    while (v29 != v28);
    v32 = (llvm::Type *)llvm::StructType::create();
    v78 = (llvm::Type **)"tmp";
    v81 = 259;
    v33 = (uint64_t *)sub_22E4D8348(a2, v32, (uint64_t)&v78, 0);
    v56 = (llvm::DataLayout *)v27;
    if (v67 >= 2)
    {
      v34 = 0;
      v35 = 152;
      v36 = 152 * v67;
      do
      {
        v81 = 257;
        v37 = v32;
        v38 = sub_22E3C4170(v54, v32, v33, 0, v34, (uint64_t)&v78);
        sub_22E479748((uint64_t)v66 + v35, a2, (uint64_t)&v78);
        v39 = v78;
        v40 = v27 & 0xFFFFFFFFFFFF0000 | llvm::DataLayout::getPrefTypeAlign(v56, *v78);
        v27 = v40 | 0x100;
        v41 = (uint64_t)v38;
        v32 = v37;
        sub_22E3C1B6C(v54, v39, v41, v40 | 0x100);
        v35 += 152;
        v34 = (v34 + 1);
      }
      while (v36 != v35);
    }
    Int8PtrTy = llvm::Type::getInt8PtrTy(v50, 0);
    v81 = 257;
    v26 = sub_22E3CA9BC(v54, (uint64_t)v33, Int8PtrTy, (uint64_t)&v78);
    sub_22E3C304C((uint64_t)v56, (uint64_t)v32);
    llvm::DataLayout::getABITypeAlignment(v56, v32);
    if (v82 != (_QWORD *)v84)
      free(v82);
  }
  else
  {
    v24 = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(*(_QWORD *)(a2 + 144) + 232), 0);
    v26 = llvm::ConstantPointerNull::get(v24, v25);
  }
  sub_22E479748((uint64_t)v66, a2, (uint64_t)&v82);
  v78 = (llvm::Type **)v80;
  v80[0] = v82;
  v80[1] = v26;
  v79 = 0x300000002;
  if (a4)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(v53 + 232), v43);
    v44 = llvm::ConstantInt::get();
    v45 = v79;
    if (v79 >= HIDWORD(v79))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = v79;
    }
    v78[v45] = (llvm::Type *)v44;
    v46 = (v79 + 1);
    LODWORD(v79) = v79 + 1;
  }
  else
  {
    v46 = 2;
  }
  if (v52)
    v47 = *(_QWORD *)(v52 + 24);
  else
    v47 = 0;
  v84[8] = 257;
  v48 = sub_22E462B78(v54, v47, v52, (uint64_t)v78, v46, (uint64_t)&v82, 0);
  v49 = *(_BYTE *)(v55 + 48);
  *(_QWORD *)v55 = v48;
  *(_QWORD *)(v55 + 8) = 0;
  *(_BYTE *)(v55 + 48) = v49 & 0xF8;
  if (v78 != v80)
    free(v78);
LABEL_57:
  if (v75 != v77)
    free(v75);
  if (v72 != v74)
    free(v72);
  if (v69 != v71)
    free(v69);
  if (v66 != v68)
    free(v66);
}

void **sub_22E5222DC(void **a1)
{
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)(a1 + 16));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 15));
  if (*a1 != a1 + 2)
    free(*a1);
  return a1;
}

uint64_t sub_22E522324(uint64_t a1, llvm::BasicBlock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Context;

  Context = llvm::BasicBlock::getContext(this);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_22E3CB840(a1, (uint64_t)this, a3);
  return a1;
}

uint64_t sub_22E5223E0(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = result;
  v4 = a3 - a2;
  v5 = *(unsigned int *)(result + 8);
  if (v5 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v6 = a3;
    v7 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v6;
    a2 = v7;
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  if (a2 != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 8 * v5), a2, v4);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v5 + (v4 >> 3);
  return result;
}

uint64_t sub_22E522468(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _BYTE *a5)
{
  llvm::Type *Context;
  unsigned int v11;
  BOOL v12;
  llvm::LLVMContext *v14;
  uint64_t Impl;
  int v16;
  uint64_t v17;
  void *v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v23;
  uint64_t v24;
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  Context = (llvm::Type *)llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  v11 = *(unsigned __int8 *)(a2 + 44);
  if (*(_BYTE *)(a2 + 44))
    v12 = 1;
  else
    v12 = __PAIR64__(*(_DWORD *)(a2 + 48), v11) == 0;
  if (v12 || *(_DWORD *)(a2 + 48) == 0)
  {
    v23 = v25;
    v24 = 0x400000000;
    if (v11)
    {
      sub_22E5223E0((uint64_t)&v23, a3, &a3[8 * a4]);
      v26 = (void *)llvm::MDString::get();
      llvm::Type::getInt1Ty(Context, v14);
      llvm::ConstantInt::get();
      v27 = llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      v16 = v24;
      if (v24 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v24;
      }
      *(_QWORD *)&v23[8 * v16] = Impl;
      a4 = (v24 + 1);
      LODWORD(v24) = v24 + 1;
      a3 = v23;
    }
    llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
    v26 = v28;
    v28[0] = 0;
    v27 = 0x400000001;
    sub_22E5223E0((uint64_t)&v26, a3, &a3[8 * a4]);
    v17 = llvm::MDTuple::getImpl();
    llvm::MDNode::replaceOperandWith();
    if (v26 != v28)
      free(v26);
    v18 = v23;
    if (v23 != v25)
      goto LABEL_22;
  }
  else
  {
    v26 = v28;
    v28[0] = 0;
    v27 = 0x400000001;
    sub_22E5223E0((uint64_t)&v26, a3, &a3[8 * a4]);
    if (*(_DWORD *)(a2 + 48))
    {
      v23 = (_BYTE *)llvm::MDString::get();
      llvm::Type::getInt32Ty(Context, v19);
      llvm::ConstantInt::get();
      v24 = llvm::ValueAsMetadata::get();
      v20 = llvm::MDTuple::getImpl();
      v21 = v27;
      if (v27 >= HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = v27;
      }
      *((_QWORD *)v26 + v21) = v20;
      LODWORD(v27) = v27 + 1;
    }
    v17 = llvm::MDTuple::getImpl();
    llvm::MDNode::replaceOperandWith();
    *a5 = 1;
    v18 = v26;
    if (v26 != v28)
LABEL_22:
      free(v18);
  }
  return v17;
}

uint64_t sub_22E522754(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t Context;
  int v11;
  llvm::Type *v13;
  _BYTE *v14;
  _BYTE *v15;
  llvm::Type *v16;
  uint64_t Impl;
  unsigned int v18;
  uint64_t v19;
  llvm::LLVMContext *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[4];
  void *v34;
  uint64_t v35;
  _QWORD v36[5];

  v36[4] = *MEMORY[0x24BDAC8D0];
  Context = llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  v11 = *(_DWORD *)(a2 + 8);
  if (v11)
  {
    if ((v11 - 2) < 2)
      return sub_22E522468(a1, a2, a3, a4, a5);
  }
  else if (!*(_DWORD *)(a2 + 32))
  {
    return sub_22E522468(a1, a2, a3, a4, a5);
  }
  v13 = (llvm::Type *)Context;
  v34 = v36;
  v35 = 0x400000000;
  v14 = &a3[8 * a4];
  v15 = a3;
  sub_22E5223E0((uint64_t)&v34, a3, v14);
  v31 = (void *)llvm::MDString::get();
  v16 = v13;
  Impl = llvm::MDTuple::getImpl();
  v18 = v35;
  if (v35 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v35;
  }
  *((_QWORD *)v34 + v18) = Impl;
  LODWORD(v35) = v35 + 1;
  v28 = 0;
  v19 = sub_22E522468(a1, a2, v34, v35, &v28);
  v31 = v33;
  v33[0] = 0;
  v32 = 0x400000001;
  sub_22E5223E0((uint64_t)&v31, v15, v14);
  if (*(_DWORD *)(a2 + 32))
  {
    v29 = llvm::MDString::get();
    llvm::Type::getInt32Ty(v16, v20);
    llvm::ConstantInt::get();
    v30 = llvm::ValueAsMetadata::get();
    v21 = llvm::MDTuple::getImpl();
    v22 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = v32;
    }
    *((_QWORD *)v31 + v22) = v21;
    LODWORD(v32) = v32 + 1;
  }
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    v29 = llvm::MDString::get();
    v23 = llvm::MDTuple::getImpl();
    v24 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v32;
    }
    *((_QWORD *)v31 + v24) = v23;
    LODWORD(v32) = v32 + 1;
  }
  if (v28)
  {
    v29 = llvm::MDString::get();
    v30 = v19;
    v25 = llvm::MDTuple::getImpl();
    v26 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v32;
    }
    *((_QWORD *)v31 + v26) = v25;
    LODWORD(v32) = v32 + 1;
  }
  v27 = llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
  *a5 = 1;
  if (v31 != v33)
    free(v31);
  if (v34 != v36)
    free(v34);
  return v27;
}

uint64_t sub_22E522B28(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t Context;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE *v15;
  llvm::Type *v16;
  _BYTE *v17;
  llvm::Type *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t Impl;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[4];
  void *v41;
  uint64_t v42;
  _QWORD v43[5];

  v43[4] = *MEMORY[0x24BDAC8D0];
  Context = llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  v11 = *(_DWORD *)(a2 + 12);
  if (v11 != 1)
  {
    if (v11 == 2)
    {
      v41 = v43;
      v42 = 0x400000000;
      sub_22E5223E0((uint64_t)&v41, a3, &a3[8 * a4]);
      v38 = (void *)llvm::MDString::get();
      Impl = llvm::MDTuple::getImpl();
      v34 = v42;
      if (v42 >= HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v42;
      }
      *((_QWORD *)v41 + v34) = Impl;
      a4 = (v42 + 1);
      LODWORD(v42) = v42 + 1;
      a3 = v41;
LABEL_5:
      v12 = sub_22E522754(a1, a2, a3, a4, a5);
      v13 = v41;
      if (v41 == v43)
        return v12;
LABEL_28:
      free(v13);
      return v12;
    }
    if (!*(_DWORD *)(a2 + 36))
    {
      v41 = v43;
      v42 = 0x400000000;
      goto LABEL_5;
    }
  }
  v41 = v43;
  v42 = 0x400000000;
  v15 = &a3[8 * a4];
  v16 = (llvm::Type *)Context;
  v17 = a3;
  sub_22E5223E0((uint64_t)&v41, a3, v15);
  v38 = (void *)llvm::MDString::get();
  v18 = v16;
  v19 = llvm::MDTuple::getImpl();
  v20 = v42;
  if (v42 >= HIDWORD(v42))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = v42;
  }
  *((_QWORD *)v41 + v20) = v19;
  LODWORD(v42) = v42 + 1;
  v35 = 0;
  v21 = sub_22E522754(a1, a2, v41, v42, &v35);
  v38 = v40;
  v40[0] = 0;
  v39 = 0x400000001;
  sub_22E5223E0((uint64_t)&v38, v17, v15);
  if (*(_DWORD *)(a2 + 36))
  {
    v36 = llvm::MDString::get();
    llvm::Type::getInt32Ty(v18, v22);
    llvm::ConstantInt::get();
    v37 = llvm::ValueAsMetadata::get();
    v23 = llvm::MDTuple::getImpl();
    v24 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v39;
    }
    *((_QWORD *)v38 + v24) = v23;
    LODWORD(v39) = v39 + 1;
  }
  if (*(_DWORD *)(a2 + 12) == 1)
  {
    v36 = llvm::MDString::get();
    v25 = llvm::MDTuple::getImpl();
    v26 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v39;
    }
    *((_QWORD *)v38 + v26) = v25;
    LODWORD(v39) = v39 + 1;
  }
  if (v35)
  {
    v36 = llvm::MDString::get();
    v37 = v21;
    v27 = llvm::MDTuple::getImpl();
    v28 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = v39;
    }
    *((_QWORD *)v38 + v28) = v27;
    LODWORD(v39) = v39 + 1;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v29 = llvm::MDString::get();
    v30 = *(_QWORD *)(a1 + 104);
    v36 = v29;
    v37 = v30;
    v31 = llvm::MDTuple::getImpl();
    v32 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = v39;
    }
    *((_QWORD *)v38 + v32) = v31;
    LODWORD(v39) = v39 + 1;
  }
  v12 = llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
  *a5 = 1;
  if (v38 != v40)
    free(v38);
  v13 = v41;
  if (v41 != v43)
    goto LABEL_28;
  return v12;
}

uint64_t sub_22E523020(uint64_t a1, int32x4_t *a2, _BYTE *a3, uint64_t a4, _BYTE *a5)
{
  llvm::Type *Context;
  __int32 v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int32 v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  llvm::LLVMContext *v21;
  uint64_t Impl;
  unsigned int v23;
  llvm::LLVMContext *v24;
  uint64_t v25;
  unsigned int v26;
  llvm::LLVMContext *v27;
  uint64_t v28;
  unsigned int v29;
  llvm::LLVMContext *v30;
  uint64_t v31;
  unsigned int v32;
  llvm::LLVMContext *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  __int32 v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[4];
  void *v49;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x24BDAC8D0];
  Context = (llvm::Type *)llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  v11 = a2->i32[1];
  if (v11 == 2)
  {
    v49 = v51;
    v50 = 0x400000000;
    sub_22E5223E0((uint64_t)&v49, a3, &a3[8 * a4]);
    v46 = (void *)llvm::MDString::get();
    llvm::Type::getInt1Ty(Context, v21);
    llvm::ConstantInt::get();
    v47 = llvm::ValueAsMetadata::get();
    Impl = llvm::MDTuple::getImpl();
    v23 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v50;
    }
    *((_QWORD *)v49 + v23) = Impl;
    a4 = (v50 + 1);
    LODWORD(v50) = v50 + 1;
    a3 = v49;
    goto LABEL_46;
  }
  if (!v11 && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(a2[1], a2[1]))) & 1) == 0)
  {
    v49 = v51;
    v50 = 0x400000000;
LABEL_46:
    v41 = sub_22E522B28(a1, (uint64_t)a2, a3, a4, a5);
    goto LABEL_47;
  }
  v49 = v51;
  v50 = 0x400000000;
  v12 = &a3[8 * a4];
  sub_22E5223E0((uint64_t)&v49, a3, v12);
  v46 = (void *)llvm::MDString::get();
  v13 = llvm::MDTuple::getImpl();
  v14 = v50;
  if (v50 >= HIDWORD(v50))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v50;
  }
  *((_QWORD *)v49 + v14) = v13;
  LODWORD(v50) = v50 + 1;
  v43 = 0;
  v15 = sub_22E522B28(a1, (uint64_t)a2, v49, v50, &v43);
  v46 = v48;
  v48[0] = 0;
  v47 = 0x400000001;
  sub_22E5223E0((uint64_t)&v46, a3, v12);
  v16 = a2[1].i32[0];
  if (v16)
  {
    v44 = 0;
    v45 = 0;
    v44 = llvm::MDString::get();
    llvm::Type::getInt1Ty(Context, v17);
    llvm::ConstantInt::get();
    v45 = llvm::ValueAsMetadata::get();
    v18 = llvm::MDTuple::getImpl();
    v19 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v47;
    }
    v20 = v16 != 1;
    *((_QWORD *)v46 + v19) = v18;
    LODWORD(v47) = v47 + 1;
  }
  else
  {
    v20 = 1;
  }
  if (a2[1].i32[1])
  {
    v44 = llvm::MDString::get();
    llvm::Type::getInt32Ty(Context, v24);
    llvm::ConstantInt::get();
    v45 = llvm::ValueAsMetadata::get();
    v25 = llvm::MDTuple::getImpl();
    v26 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v47;
    }
    *((_QWORD *)v46 + v26) = v25;
    LODWORD(v47) = v47 + 1;
  }
  if (a2[1].i32[2])
  {
    v44 = llvm::MDString::get();
    llvm::Type::getInt1Ty(Context, v27);
    llvm::ConstantInt::get();
    v45 = llvm::ValueAsMetadata::get();
    v28 = llvm::MDTuple::getImpl();
    v29 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = v47;
    }
    *((_QWORD *)v46 + v29) = v28;
    LODWORD(v47) = v47 + 1;
  }
  if (a2[1].i32[3])
  {
    v44 = llvm::MDString::get();
    llvm::Type::getInt32Ty(Context, v30);
    llvm::ConstantInt::get();
    v45 = llvm::ValueAsMetadata::get();
    v31 = llvm::MDTuple::getImpl();
    v32 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = v47;
    }
    *((_QWORD *)v46 + v32) = v31;
    LODWORD(v47) = v47 + 1;
  }
  if (a2->i32[1]
    || ((v38 = a2[1].u32[1], v38 == 1) ? (v39 = 1) : (v39 = v20),
        v39 != 1 || v38 > 1 || (v40 = a2[1].i32[2], v40 == 1) || v40 == 2 && v38 != 1))
  {
    v44 = llvm::MDString::get();
    llvm::Type::getInt1Ty(Context, v33);
    llvm::ConstantInt::get();
    v45 = llvm::ValueAsMetadata::get();
    v34 = llvm::MDTuple::getImpl();
    v35 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = v47;
    }
    *((_QWORD *)v46 + v35) = v34;
    LODWORD(v47) = v47 + 1;
  }
  if (v43)
  {
    v44 = llvm::MDString::get();
    v45 = v15;
    v36 = llvm::MDTuple::getImpl();
    v37 = v47;
    if (v47 >= HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v47;
    }
    *((_QWORD *)v46 + v37) = v36;
    LODWORD(v47) = v47 + 1;
  }
  v41 = llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
  *a5 = 1;
  if (v46 != v48)
    free(v46);
LABEL_47:
  if (v49 != v51)
    free(v49);
  return v41;
}

uint64_t sub_22E5236C8(uint64_t a1, int32x4_t *a2, _BYTE *a3, uint64_t a4, _BYTE *a5)
{
  _BYTE *v10;
  uint64_t v11;
  __int32 v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t Context;
  unsigned int v20;
  void *v21;
  uint64_t Impl;
  unsigned int v23;
  uint64_t v24;
  int v25;
  llvm::Type *v26;
  uint64_t v27;
  llvm::LLVMContext *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE *v33;
  llvm::Type *v34;
  llvm::LLVMContext *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[6];
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[6];

  v49[4] = *MEMORY[0x24BDAC8D0];
  v39 = v41;
  v40 = 0x300000000;
  if (*(_QWORD *)(a1 + 80))
  {
    v41[0] = *(_QWORD *)(a1 + 80);
    LODWORD(v40) = 1;
    if (*(_QWORD *)(a1 + 88))
    {
      v41[1] = *(_QWORD *)(a1 + 88);
      LODWORD(v40) = 2;
    }
  }
  llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  if (a2[3].i8[4])
  {
    v47 = (void *)llvm::MDString::get();
    *((_QWORD *)v39 + v40) = llvm::MDTuple::getImpl();
    LODWORD(v40) = v40 + 1;
  }
  if (a2->i8[0])
  {
    v47 = (void *)llvm::MDString::get();
    v48 = *(_QWORD *)(a1 + 72);
    Impl = llvm::MDTuple::getImpl();
    v23 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v40;
    }
    *((_QWORD *)v39 + v23) = Impl;
    LODWORD(v40) = v40 + 1;
  }
  sub_22E5223E0((uint64_t)&v39, a3, &a3[8 * a4]);
  v10 = v39;
  v11 = v40;
  llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
  v12 = a2->i32[2];
  if (v12 != 3)
  {
    if (v12 == 2)
    {
      v13 = v44;
      v42 = v44;
      v43 = 0x400000000;
      sub_22E5223E0((uint64_t)&v42, v10, &v10[8 * v11]);
      v47 = (void *)llvm::MDString::get();
      v24 = llvm::MDTuple::getImpl();
      v25 = v43;
      if (v43 >= HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v43;
      }
      v42[v25] = v24;
      v11 = (v43 + 1);
      LODWORD(v43) = v43 + 1;
      v10 = v42;
    }
    else
    {
      v13 = v44;
      v42 = v44;
      v43 = 0x400000000;
    }
    Context = llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(a1 + 8));
    v20 = a2[2].i32[2] - 1;
    if (a2[2].i32[2] == 1)
    {
      v38 = 0;
      v26 = (llvm::Type *)Context;
      v27 = sub_22E523020(a1, a2, v10, v11, &v38);
      v47 = v49;
      v49[0] = 0;
      v48 = 0x400000001;
      sub_22E5223E0((uint64_t)&v47, v10, &v10[8 * v11]);
      v45 = llvm::MDString::get();
      llvm::Type::getInt1Ty(v26, v28);
      llvm::ConstantInt::get();
      v46 = llvm::ValueAsMetadata::get();
      v29 = llvm::MDTuple::getImpl();
      v30 = v48;
      if (v48 >= HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v48;
      }
      *((_QWORD *)v47 + v30) = v29;
      LODWORD(v48) = v48 + 1;
      if (v38)
      {
        v44[4] = llvm::MDString::get();
        v44[5] = v27;
        v31 = llvm::MDTuple::getImpl();
        v32 = v48;
        if (v48 >= HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v48;
        }
        *((_QWORD *)v47 + v32) = v31;
        LODWORD(v48) = v48 + 1;
      }
      v16 = llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      *a5 = 1;
      v21 = v47;
      if (v47 == v49)
        goto LABEL_19;
    }
    else
    {
      v47 = v49;
      v48 = 0x400000000;
      if (v20 <= 1)
      {
        v33 = &v10[8 * v11];
        v34 = (llvm::Type *)Context;
        sub_22E5223E0((uint64_t)&v47, v10, v33);
        v45 = llvm::MDString::get();
        llvm::Type::getInt1Ty(v34, v35);
        llvm::ConstantInt::get();
        v46 = llvm::ValueAsMetadata::get();
        v36 = llvm::MDTuple::getImpl();
        v37 = v48;
        if (v48 >= HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = v48;
        }
        *((_QWORD *)v47 + v37) = v36;
        v11 = (v48 + 1);
        LODWORD(v48) = v48 + 1;
        v10 = v47;
      }
      v16 = sub_22E523020(a1, a2, v10, v11, a5);
      v21 = v47;
      if (v47 == v49)
        goto LABEL_19;
    }
    free(v21);
LABEL_19:
    v17 = v42;
    goto LABEL_9;
  }
  v13 = v49;
  v47 = v49;
  v49[0] = 0;
  v48 = 0x400000001;
  sub_22E5223E0((uint64_t)&v47, v10, &v10[8 * v11]);
  v42 = (_QWORD *)llvm::MDString::get();
  v14 = llvm::MDTuple::getImpl();
  v15 = v48;
  if (v48 >= HIDWORD(v48))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v48;
  }
  *((_QWORD *)v47 + v15) = v14;
  LODWORD(v48) = v48 + 1;
  v16 = llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
  *a5 = 1;
  v17 = v47;
LABEL_9:
  if (v17 != v13)
    free(v17);
  if (v39 != v41)
    free(v39);
  return v16;
}

uint64_t sub_22E523D50(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  __int8 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int32 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v19[4];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  int32x4_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[1] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)result)
  {
    v1 = result;
    v2 = *(_OWORD *)(result + 32);
    v26 = *(int32x4_t *)(result + 16);
    v27 = v2;
    v28 = *(_OWORD *)(result + 48);
    v29 = *(_QWORD *)(result + 64);
    llvm::BasicBlock::getContext(*(llvm::BasicBlock **)(result + 8));
    v3 = *(_QWORD *)(v1 + 96);
    if (v3 && (*(_DWORD *)(v3 + 28) || *(_DWORD *)(v3 + 52)))
    {
      v25 = 0;
      v20 = 0u;
      v21 = 0u;
      v22 = 0;
      v4 = *(_BYTE *)(v1 + 16);
      v19[0] = v4;
      v5 = *(_DWORD *)(v1 + 44);
      v16 = *(_DWORD *)(v1 + 56);
      v17 = *(_DWORD *)(v1 + 40);
      v7 = *(_DWORD *)(v1 + 32);
      v6 = *(_DWORD *)(v1 + 36);
      v9 = *(_DWORD *)(v1 + 20);
      v8 = *(_DWORD *)(v1 + 24);
      switch(v8)
      {
        case 0:
        case 2:
          DWORD1(v20) = *(_DWORD *)(v1 + 24);
          break;
        case 1:
          v8 = 0;
          DWORD1(v20) = 1;
          break;
        case 3:
          v8 = 3;
          break;
        default:
          v8 = 0;
          break;
      }
      v10 = *(_DWORD *)(v1 + 48);
      v11 = *(_DWORD *)(v1 + 52);
      HIDWORD(v20) = v7;
      HIDWORD(v21) = v10;
      v23 = *(_BYTE *)(v1 + 60);
      v24 = *(_DWORD *)(v1 + 64);
      v12 = *(_DWORD *)(v1 + 28);
      if (!*(_QWORD *)(v3 + 104))
      {
        v30 = v32;
        v31 = 0x100000000;
        if (v9 || v7 || v5 || v6 || v17 == 1)
        {
          v18 = llvm::MDString::get();
          v30[v31] = llvm::MDTuple::getImpl();
          v13 = (v31 + 1);
          LODWORD(v31) = v31 + 1;
          v14 = v30;
        }
        else
        {
          v13 = 0;
          v14 = v32;
        }
        LOBYTE(v18) = 0;
        v15 = sub_22E5236C8(v1, (int32x4_t *)v19, v14, v13, &v18);
        if ((_BYTE)v18)
          *(_QWORD *)(*(_QWORD *)(v1 + 96) + 104) = v15;
        if (v30 != v32)
          free(v30);
      }
      v26.i8[0] = v4;
      *(uint64_t *)((char *)v26.i64 + 4) = __PAIR64__(v8, v9);
      v26.i32[3] = v12;
      *(_QWORD *)&v27 = __PAIR64__(v6, v7);
      *((_QWORD *)&v27 + 1) = __PAIR64__(v5, v17);
      LODWORD(v28) = 0;
      *(_QWORD *)((char *)&v28 + 4) = __PAIR64__(v16, v11);
      BYTE12(v28) = 0;
      LODWORD(v29) = 0;
      BYTE4(v29) = 0;
    }
    result = sub_22E5236C8(v1, &v26, 0, 0, v19);
    if ((*(_QWORD *)(*(_QWORD *)v1 + 16) & 4) != 0)
      return llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
  }
  return result;
}

double sub_22E523FF0(char *a1, llvm::BasicBlock *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int32x4_t v17;
  llvm::MDNode *v18;
  uint64_t Impl;
  llvm::MDNode *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v8 = a1 + 56;
  v9 = operator new();
  v10 = v9;
  v11 = *((unsigned int *)a1 + 16);
  if ((_DWORD)v11)
    v12 = *(_QWORD *)(*v8 + 8 * v11 - 8);
  else
    v12 = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = a2;
  v13 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = *((_OWORD *)a1 + 2);
  *(_QWORD *)(v9 + 64) = *((_QWORD *)a1 + 6);
  *(_QWORD *)(v9 + 72) = 0;
  v14 = *a3;
  *(_QWORD *)(v9 + 80) = *a3;
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *a4;
  *(_QWORD *)(v10 + 88) = *a4;
  if (v15)
    llvm::MetadataTracking::track();
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = 0;
  v16 = *a1;
  if (*a1)
  {
    llvm::BasicBlock::getContext(a2);
    *(_QWORD *)(v10 + 72) = llvm::MDTuple::getImpl();
    v16 = *a1 != 0;
  }
  v17.i32[0] = *((_DWORD *)a1 + 9);
  v17.i32[1] = *((_DWORD *)a1 + 12);
  v17.i32[2] = *((_DWORD *)a1 + 4);
  v17.i32[3] = *((_DWORD *)a1 + 1);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*(int32x4_t *)(a1 + 20)), (int16x8_t)vceqzq_s32(v17))))) & 1) != 0|| *((_DWORD *)a1 + 2) | *((_DWORD *)a1 + 3) | *((_DWORD *)a1 + 10)|| (v16 & 1) != 0|| *a3|| a1[44]|| *a4|| a1[52])
  {
    llvm::BasicBlock::getContext(a2);
    Impl = llvm::MDTuple::getImpl();
    v20 = *(llvm::MDNode **)v10;
    *(_QWORD *)v10 = Impl;
    if (v20)
      llvm::MDNode::deleteTemporary(v20, v18);
  }
  v23 = v10;
  v21 = *((unsigned int *)a1 + 16);
  if (v21 >= *((_DWORD *)a1 + 17))
  {
    sub_22F265384((uint64_t)v8, &v23);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a1 + 7) + 8 * v21) = v10;
    *((_DWORD *)a1 + 16) = v21 + 1;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 12) = 0;
  a1[52] = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  return result;
}

void sub_22E5241F0(uint64_t a1, llvm::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v25;
  unsigned int v26;

  if (a6)
  {
    v13 = 8 * a6;
    while (1)
    {
      v14 = *a5;
      v15 = *(unsigned __int16 *)(*a5 + 32);
      if (v15 == 369)
        v16 = *a5;
      else
        v16 = 0;
      if (v15 != 42)
        v14 = 0;
      if (!(v16 | v14))
        goto LABEL_30;
      if (!v14)
        break;
      LODWORD(v17) = *(_DWORD *)(v14 + 36);
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          goto LABEL_29;
LABEL_12:
        *(_DWORD *)(a1 + 32) = v17;
      }
      else
      {
LABEL_26:
        *(_DWORD *)(a1 + 8) = 1;
      }
LABEL_30:
      ++a5;
      v13 -= 8;
      if (!v13)
        goto LABEL_51;
    }
    if (v16)
    {
      v18 = *(unsigned __int8 **)(v16 + 48);
      if (v18)
      {
        sub_22F007D7C(v18, a3, 0, (uint64_t)&v25);
        if (v26 > 0x40)
        {
          v17 = *v25;
          MEMORY[0x2348A0E84]();
        }
        else
        {
          v17 = (uint64_t)((_QWORD)v25 << -(uint64_t)v26) >> -(uint64_t)v26;
        }
      }
      else
      {
        LODWORD(v17) = 1;
      }
      v19 = *(_DWORD *)(v16 + 40);
      v20 = *(_DWORD *)(v16 + 36);
      switch(v19)
      {
        case 0:
          switch(v20)
          {
            case 0:
            case 2:
              goto LABEL_36;
            case 4:
              goto LABEL_26;
            case 6:
              *(_DWORD *)(a1 + 12) = 1;
              break;
            case 10:
              *(_DWORD *)(a1 + 40) = 1;
              break;
            case 11:
              *(_DWORD *)(a1 + 16) = 1;
              break;
            default:
              goto LABEL_30;
          }
          break;
        case 1:
          switch(v20)
          {
            case 0:
              *(_QWORD *)(a1 + 20) = 1;
              break;
            case 2:
              *(_DWORD *)(a1 + 28) = 1;
              break;
            case 4:
              goto LABEL_29;
            case 6:
              *(_DWORD *)(a1 + 12) = 2;
              break;
            case 8:
              *(_BYTE *)(a1 + 44) = 1;
              break;
            case 10:
              *(_DWORD *)(a1 + 40) = 2;
              break;
            case 11:
              *(_DWORD *)(a1 + 16) = 2;
              break;
            default:
              goto LABEL_30;
          }
          break;
        case 2:
          switch(v20)
          {
            case 3:
              *(_DWORD *)(a1 + 28) = v17;
              break;
            case 5:
              goto LABEL_12;
            case 7:
              *(_DWORD *)(a1 + 36) = v17;
              break;
            case 9:
              *(_DWORD *)(a1 + 48) = v17;
              break;
            default:
              goto LABEL_30;
          }
          break;
        case 3:
        case 4:
          if (v19 == 4)
            v21 = 1;
          else
            v21 = 2;
          *(_DWORD *)(a1 + 24) = v21;
          if (*(_QWORD *)(v16 + 48))
            *(_DWORD *)(a1 + 20) = v17;
          break;
        case 5:
          if ((v20 | 2) == 2)
          {
            *(_BYTE *)a1 = 1;
LABEL_36:
            *(_DWORD *)(a1 + 4) = 1;
          }
          break;
        case 6:
          if (v20 == 6)
          {
            *(_DWORD *)(a1 + 12) = 3;
          }
          else if (v20 == 4)
          {
            *(_DWORD *)(a1 + 8) = 3;
          }
          break;
        default:
          goto LABEL_30;
      }
      goto LABEL_30;
    }
LABEL_29:
    *(_DWORD *)(a1 + 8) = 2;
    goto LABEL_30;
  }
LABEL_51:
  *(_BYTE *)(a1 + 52) = a9;
  if ((*(_BYTE *)(a4 + 33) & 0x18) != 0
    && (*(_BYTE *)(a4 + 44) & 1) == 0
    && !*(_DWORD *)(a1 + 8)
    && !*(_DWORD *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 8) = 2;
  }
  sub_22E523FF0((char *)a1, a2, a7, a8);
}

uint64_t sub_22E5244AC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  sub_22E523D50(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *(unsigned int *)(a1 + 64) - 8));
  return sub_22E5244E0(v1);
}

uint64_t sub_22E5244E0(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::MDNode *v3;
  llvm::MDNode *v4;

  v1 = *(_DWORD *)(result + 8) - 1;
  *(_DWORD *)(result + 8) = v1;
  v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
  *(_QWORD *)(*(_QWORD *)result + 8 * v1) = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 88))
      llvm::MetadataTracking::untrack();
    v3 = *(llvm::MDNode **)(v2 + 80);
    if (v3)
      llvm::MetadataTracking::untrack();
    v4 = *(llvm::MDNode **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      llvm::MDNode::deleteTemporary(v4, v3);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22E52456C(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int NumSuccessors;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  if ((llvm::Instruction::mayReadFromMemory(this) & 1) != 0 || llvm::Instruction::mayWriteToMemory(this))
  {
    v15 = 0;
    v6 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 56);
      v9 = 8 * v6;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v8 + 72))
        {
          v13 = *(_QWORD *)(*(_QWORD *)v8 + 72);
          v14 = v9;
          if (v7 >= 4)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v7 = v15;
          }
          v16[v7] = v13;
          v7 = ++v15;
          v9 = v14;
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
      if (v7 > 1)
      {
        llvm::Value::getContext(this);
        llvm::MDTuple::getImpl();
      }
    }
    llvm::Instruction::setMetadata();
  }
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v4 - 8);
    if (*v5)
    {
      if (*((unsigned __int8 *)this + 16) - 29 <= 0xA)
      {
        NumSuccessors = llvm::Instruction::getNumSuccessors(this);
        if (NumSuccessors)
        {
          v11 = NumSuccessors;
          v12 = 0;
          while (llvm::Instruction::getSuccessor(this) != v5[1])
          {
            if (v11 == ++v12)
              return;
          }
          llvm::Instruction::setMetadata();
        }
      }
    }
  }
}

uint64_t sub_22E524758(uint64_t a1)
{
  llvm::MDNode *v2;
  llvm::MDNode *v3;

  if (*(_QWORD *)(a1 + 88))
    llvm::MetadataTracking::untrack();
  v2 = *(llvm::MDNode **)(a1 + 80);
  if (v2)
    llvm::MetadataTracking::untrack();
  v3 = *(llvm::MDNode **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    llvm::MDNode::deleteTemporary(v3, v2);
  return a1;
}

void sub_22E5247AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_22E524810()
{
  llvm::StructType::create();
  return llvm::PointerType::get();
}

uint64_t sub_22E524AFC(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  llvm::Constant *v4;
  llvm::Type *v5;

  if (*(_DWORD *)a3 == 7 && (*(_BYTE *)(a3 + 52) & 1) != 0)
  {
    v4 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), a2);
    return llvm::Constant::getNullValue(v4, v5);
  }
  else
  {
    llvm::StructType::getTypeByName();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantFP::get();
    llvm::ConstantFP::get();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    llvm::ConstantFP::get();
    llvm::ConstantStruct::get();
    llvm::User::operator new((llvm::User *)0x58);
    return llvm::GlobalVariable::GlobalVariable();
  }
}

void sub_22E524F38(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  llvm::Value *v20;
  uint64_t v21;
  const char **v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  llvm::LLVMContext *v25;
  llvm::LLVMContext **v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type size;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  char v42;
  llvm::Value *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  std::string v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  void *v55;
  uint64_t v56;
  _DWORD v57[8];
  void *v58;
  uint64_t v59;
  _BYTE v60[64];
  std::string v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v9 = sub_22EFCB008(a3, 1);
  if (!v9 || *(_BYTE *)(v9 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v9 = sub_22F10CF48(v9);
    else
      v9 = 0;
  }
  v49 = a1;
  v58 = v60;
  v59 = 0x800000000;
  v55 = v57;
  v56 = 0x800000000;
  v52 = v54;
  v53 = 0x800000000;
  v10 = a5[4];
  if (v10 < (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38))
  {
    v57[0] = -1;
    LODWORD(v56) = 1;
  }
  v11 = (llvm::LLVMContext **)(a5 + 2);
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = v9 + 40;
    do
    {
      v14 = *(_QWORD *)(v13 + 8 * v12);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v15)
        v16 = (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 137887755;
      else
        v16 = 0;
      if (v16)
      {
        v14 = (*(_QWORD **)((char *)&v11[((unint64_t)*a5 >> 18) & 1] + 8 * v12 + ((unint64_t)*a5 >> 24)))[1];
        v17 = v56;
        if (v56 >= (unint64_t)HIDWORD(v56))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v56;
        }
        *((_DWORD *)v55 + v17) = v12;
        LODWORD(v56) = v56 + 1;
      }
      v18 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v59;
      }
      *((_QWORD *)v58 + v18) = v14;
      LODWORD(v59) = v59 + 1;
      v19 = *(unsigned __int8 **)((char *)&v11[((unint64_t)*a5 >> 18) & 1]
                                + 8 * v12
                                + ((unint64_t)*a5 >> 24));
      v61.__r_.__value_.__r.__words[0] = a2;
      v61.__r_.__value_.__l.__size_ = a2 + 272;
      v61.__r_.__value_.__s.__data_[16] = 0;
      v62 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
      v20 = sub_22E50E974((uint64_t *)&v61, v19);
      v21 = v53;
      if (v53 >= (unint64_t)HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = v53;
      }
      *((_QWORD *)v52 + v21) = v20;
      LODWORD(v53) = v53 + 1;
      ++v12;
    }
    while (v10 != v12);
  }
  if (a4 > 0x7E7)
  {
    v44 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15208);
    v45 = v44[1];
    if (v45 + 2024 <= (unint64_t)a4)
    {
      v46 = a4 - v45 - 2024;
      v47 = v44[2];
    }
    else
    {
      v46 = a4 - 2024;
      v47 = *v44;
    }
    v22 = (const char **)(v47 + 48 * v46);
  }
  else
  {
    v22 = (const char **)&(&off_24FAC8C40)[6 * a4];
  }
  v23 = *v22;
  if (*v22)
    v24 = strlen(*v22);
  else
    v24 = 0;
  v25 = *v11;
  v26 = (llvm::LLVMContext **)v58;
  v27 = v59;
  v28 = (int *)v55;
  v29 = v56;
  *((_BYTE *)&v51.__r_.__value_.__s + 23) = 1;
  LOWORD(v51.__r_.__value_.__l.__data_) = 95;
  std::string::append(&v51, v23, v24);
  if ((_DWORD)v29)
  {
    v30 = 4 * v29;
    do
    {
      v31 = *v28;
      std::string::append(&v51, "_");
      v32 = (uint64_t)v25;
      if ((_DWORD)v31 != -1)
        v32 = (uint64_t)v26[v31];
      sub_22F2654BC(&v61, v49, v32);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v61;
      else
        v33 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v61.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v61.__r_.__value_.__l.__size_;
      std::string::append(&v51, (const std::string::value_type *)v33, size);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      ++v28;
      v30 -= 4;
    }
    while (v30);
  }
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61.__r_.__value_.__r.__words[2];
  v61.__r_.__value_.__l.__size_ = 0x800000000;
  if ((_DWORD)v27)
  {
    v35 = 8 * v27;
    do
    {
      v36 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v49 + 8) + 280), *v26);
      v37 = LODWORD(v61.__r_.__value_.__r.__words[1]);
      if (LODWORD(v61.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v61.__r_.__value_.__r.__words[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = LODWORD(v61.__r_.__value_.__r.__words[1]);
      }
      *(_QWORD *)(v61.__r_.__value_.__r.__words[0] + 8 * v37) = v36;
      ++LODWORD(v61.__r_.__value_.__r.__words[1]);
      ++v26;
      v35 -= 8;
    }
    while (v35);
  }
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v49 + 8) + 280), v25);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v39 = v38;
  llvm::Function::addFnAttr();
  if ((std::string::size_type *)v61.__r_.__value_.__l.__data_ != &v61.__r_.__value_.__r.__words[2])
    free(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v39)
    v40 = *(_QWORD *)(v39 + 24);
  else
    v40 = 0;
  v63 = 257;
  v41 = sub_22E462B78((uint64_t *)(a2 + 272), v40, v39, (uint64_t)v52, v53, (uint64_t)&v61, 0);
  *((_QWORD *)v41 + 8) = *(_QWORD *)(v39 + 112);
  v42 = *(_BYTE *)(a6 + 48) & 0xF8;
  if (*(_BYTE *)(*(_QWORD *)v41 + 8) == 7)
    v43 = 0;
  else
    v43 = v41;
  *(_QWORD *)a6 = v43;
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 48) = v42;
  if (v52 != v54)
    free(v52);
  if (v55 != v57)
    free(v55);
  if (v58 != v60)
    free(v58);
}

void sub_22E5254A4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = *(_DWORD *)(v6 + 16) == 11;
  else
    v8 = 0;
  if (v8)
  {
LABEL_25:
    v20 = (v7 >> 19) & 0x1FF;
    if (v20 <= 0xD1)
      __asm { BR              X10 }
    if (v20 == 210)
    {
      v21 = (llvm::raw_ostream *)a1[1];
      v44 = (_DWORD *)*((_QWORD *)v21 + 4);
      if (*((_QWORD *)v21 + 3) - (_QWORD)v44 <= 3uLL)
      {
        v23 = "half";
        goto LABEL_91;
      }
      *v44 = 1718378856;
      v55 = *((_QWORD *)v21 + 4) + 4;
    }
    else if (v20 == 211)
    {
      v21 = (llvm::raw_ostream *)a1[1];
      v22 = *((_QWORD *)v21 + 4);
      if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 4)
      {
        v23 = "float";
LABEL_91:
        llvm::raw_ostream::write(v21, v23);
        return;
      }
      *(_BYTE *)(v22 + 4) = 116;
      *(_DWORD *)v22 = 1634692198;
      v55 = *((_QWORD *)v21 + 4) + 5;
    }
    else
    {
      v21 = (llvm::raw_ostream *)a1[1];
      v45 = *((_QWORD *)v21 + 4);
      if ((unint64_t)(*((_QWORD *)v21 + 3) - v45) <= 5)
      {
        v23 = "double";
        goto LABEL_91;
      }
      *(_WORD *)(v45 + 4) = 25964;
      *(_DWORD *)v45 = 1651863396;
      v55 = *((_QWORD *)v21 + 4) + 6;
    }
    *((_QWORD *)v21 + 4) = v55;
    return;
  }
  while (1)
  {
    if (*(_BYTE *)(v4 + 16) == 39)
    {
LABEL_8:
      v10 = *(_QWORD *)(v4 + 32);
      v9 = (_QWORD *)(v4 + 32);
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v11 & 8) != 0)
        __asm { BR              X9 }
      v12 = (llvm::raw_ostream *)a1[1];
      v13 = (_DWORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 6uLL)
      {
        *(_DWORD *)((char *)v13 + 3) = 1684104562;
        *v13 = 1919448176;
        *((_QWORD *)v12 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v12, "pthread");
      }
      goto LABEL_17;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v4 = sub_22F10CF48(v4);
      if (v4)
        goto LABEL_8;
      v4 = *v3;
    }
    v14 = sub_22E3E4B64(v4);
    if (!v14)
      break;
    v15 = v14;
    v16 = (llvm::raw_ostream *)a1[1];
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if (*((_BYTE **)v16 + 3) == v17)
    {
      llvm::raw_ostream::write(v16, "v");
    }
    else
    {
      *v17 = 118;
      ++*((_QWORD *)v16 + 4);
    }
    llvm::raw_ostream::operator<<();
    v9 = (_QWORD *)(v15 + 32);
LABEL_17:
    v3 = (uint64_t *)(*v9 & 0xFFFFFFFFFFFFFFF0);
    v4 = *v3;
    v5 = *(_QWORD *)(*v3 + 8);
    v18 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_DWORD *)(v18 + 16);
    if (v18)
      v19 = *(_DWORD *)(v18 + 16) == 11;
    else
      v19 = 0;
    if (v19)
      goto LABEL_25;
  }
  v24 = sub_22F10C2A4(*v3);
  if (v24)
  {
    v25 = v24;
    if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 <= 2)
    {
      v56 = v58;
      v57 = 0x400000000;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
      if ((v26 & 4) != 0)
        v27 = (_QWORD *)*v27;
      v28 = sub_22EFCBB30((unint64_t)v27);
      if (v28)
      {
        v29 = v28;
        while (1)
        {
          v30 = *(_WORD *)(v29 + 8);
          if ((v30 & 0x7F) == 0xC)
            break;
          if ((v30 & 0x7F) == 0x53)
            goto LABEL_92;
LABEL_62:
          v37 = v57;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v37 = v57;
          }
          *((_QWORD *)v56 + v37) = v29;
          LODWORD(v57) = v57 + 1;
          v38 = *(_WORD *)(v29 + 8) & 0x7F;
          v39 = -40;
          if (v38 > 0x46)
          {
            if (v38 != 83)
            {
              if (v38 == 71)
              {
                v39 = -56;
              }
              else if (v38 != 81)
              {
                goto LABEL_75;
              }
            }
          }
          else
          {
            if (v38 > 0x18)
              goto LABEL_74;
            if (v38 == 16)
              goto LABEL_67;
            if (((1 << v38) & 0x1066) != 0)
              goto LABEL_81;
            if (v38 == 24)
            {
LABEL_67:
              v39 = -48;
            }
            else
            {
LABEL_74:
              if (v38 != 70)
              {
LABEL_75:
                v40 = v38 - 52;
                if (v38 - 33 >= 5)
                  v41 = -48;
                else
                  v41 = -64;
                if (v40 >= 6)
                  v39 = v41;
                else
                  v39 = -72;
                goto LABEL_81;
              }
              v39 = -64;
            }
          }
LABEL_81:
          v42 = *(_QWORD *)(v29 + v39 + 16);
          v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
          if ((v42 & 4) != 0)
            v43 = (_QWORD *)*v43;
          v29 = sub_22EFCBB30((unint64_t)v43);
          if (!v29)
            goto LABEL_92;
        }
        while (1)
        {
          v32 = v30 & 0x7F;
          v31 = -40;
          if (v32 > 70)
          {
            if (v32 != 83)
            {
              if (v32 == 71)
              {
                v31 = -56;
              }
              else if (v32 != 81)
              {
                goto LABEL_53;
              }
            }
          }
          else
          {
            if (v32 > 0x18)
              goto LABEL_52;
            if (v32 == 16)
              goto LABEL_45;
            if (((1 << v32) & 0x1066) != 0)
              goto LABEL_59;
            if (v32 == 24)
            {
LABEL_45:
              v31 = -48;
            }
            else
            {
LABEL_52:
              if (v32 != 70)
              {
LABEL_53:
                v33 = v32 - 52;
                if ((v32 - 33) >= 5)
                  v34 = -48;
                else
                  v34 = -64;
                if (v33 >= 6)
                  v31 = v34;
                else
                  v31 = -72;
                goto LABEL_59;
              }
              v31 = -64;
            }
          }
LABEL_59:
          v35 = *(_QWORD *)(v29 + v31 + 16);
          v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
          if ((v35 & 4) != 0)
            v36 = (_QWORD *)*v36;
          v29 = sub_22EFCBB30((unint64_t)v36);
          v30 = *(_WORD *)(v29 + 8);
          if ((v30 & 0x7F) != 0xC)
            goto LABEL_62;
        }
      }
LABEL_92:
      v46 = (llvm::raw_ostream *)a1[1];
      v47 = (_BYTE *)*((_QWORD *)v46 + 4);
      if (*((_BYTE **)v46 + 3) == v47)
      {
        llvm::raw_ostream::write(v46, "N");
      }
      else
      {
        *v47 = 78;
        ++*((_QWORD *)v46 + 4);
      }
      if ((_DWORD)v57)
      {
        v48 = 8 * v57;
        v49 = (char *)v56 - 8;
        do
        {
          v50 = *(_QWORD *)&v49[v48];
          v51 = *(_WORD *)(v50 + 8) & 0x7F;
          v52 = -40;
          if (v51 > 0x46)
          {
            if (v51 != 83)
            {
              if (v51 == 71)
              {
                v52 = -56;
              }
              else if (v51 != 81)
              {
                goto LABEL_107;
              }
            }
          }
          else
          {
            if (v51 > 0x18)
              goto LABEL_106;
            if (v51 == 16)
              goto LABEL_99;
            if (((1 << v51) & 0x1066) != 0)
              goto LABEL_112;
            if (v51 == 24)
            {
LABEL_99:
              v52 = -48;
            }
            else
            {
LABEL_106:
              if (v51 != 70)
              {
LABEL_107:
                if (v51 - 52 < 6)
                {
                  v52 = -72;
                }
                else if (v51 - 33 >= 5)
                {
                  v52 = -48;
                }
                else
                {
                  v52 = -64;
                }
                goto LABEL_112;
              }
              v52 = -64;
            }
          }
LABEL_112:
          sub_22E54B020(a1, v50 + v52);
          v48 -= 8;
        }
        while (v48);
      }
      sub_22E54B020(a1, v25);
      v53 = (llvm::raw_ostream *)a1[1];
      v54 = (_BYTE *)*((_QWORD *)v53 + 4);
      if (*((_BYTE **)v53 + 3) == v54)
      {
        llvm::raw_ostream::write(v53, "E");
      }
      else
      {
        *v54 = 69;
        ++*((_QWORD *)v53 + 4);
      }
      if (v56 != v58)
        free(v56);
    }
  }
}

uint64_t sub_22E525E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  __int128 v9;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int v15[216];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24FA63F70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = llvm::Triple::getAIRVersion((llvm::Triple *)(*(_QWORD *)(a2 + 216) + 32));
  *(_QWORD *)(a1 + 24) = v4;
  sub_22F1D4230((uint64_t)v15);
  sub_22E462F04((unint64_t *)(a1 + 32), v15);
  sub_22E54B4D4((uint64_t)v15);
  v5 = *(_QWORD *)(a2 + 232);
  v6 = *(_QWORD *)(a2 + 216);
  if (*(char *)(v6 + 55) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
    v12 = *(_QWORD *)(v6 + 48);
  }
  v13 = *(_OWORD *)(v6 + 56);
  v14 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(a1 + 48) = v5;
  v7 = (_BYTE *)(a1 + 56);
  if (SHIBYTE(v12) < 0)
  {
    sub_22E3BB2B4(v7, __p[0], (unint64_t)__p[1]);
    v8 = SHIBYTE(v12);
    v9 = v13;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
  }
  *(_QWORD *)(a1 + 472) = llvm::air::AIRFunctionInfo::createAIRFunctionInfo();
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 480));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 496));
  *(_BYTE *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_OWORD *)(a1 + 780) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_BYTE *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 32) & 0xFFFFFFFCFFBDFBFFLL | 0x300400400;
  return a1;
}

uint64_t sub_22E52610C()
{
  return llvm::air::AIRTypeFactory::getType();
}

uint64_t sub_22E526130(uint64_t a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const llvm::detail::IEEEFloat *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const llvm::detail::IEEEFloat *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const llvm::detail::IEEEFloat *v41;
  uint64_t v42;
  __int128 v45;
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD v74[8];
  uint64_t v75;
  _QWORD v76[4];

  v76[2] = *MEMORY[0x24BDAC8D0];
  v3 = (llvm::APFloatBase *)sub_22F2710C8((uint64_t)&v64);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v6 = v4 + 72 * v5;
  v7 = (_QWORD *)(v6 + 8);
  if (*(_DWORD *)(v6 + 16) >= 0x41u)
    v7 = (_QWORD *)*v7;
  v8 = *(_DWORD *)v7;
  if (v8 == 4)
    v8 = 0;
  LODWORD(v64) = v8;
  v9 = v4 + 72 * (v5 + 1);
  v10 = (_QWORD *)(v9 + 8);
  if (*(_DWORD *)(v9 + 16) >= 0x41u)
    v10 = (_QWORD *)*v10;
  v11 = *(_DWORD *)v10;
  if (v11 == 4)
    v11 = 0;
  HIDWORD(v64) = v11;
  v12 = v4 + 72 * (v5 + 2);
  v13 = (_QWORD *)(v12 + 8);
  if (*(_DWORD *)(v12 + 16) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = *(_DWORD *)v13;
  if (v14 == 4)
    v14 = 0;
  LODWORD(v65) = v14;
  v15 = v4 + 72 * (v5 + 3);
  v16 = (_QWORD *)(v15 + 8);
  if (*(_DWORD *)(v15 + 16) >= 0x41u)
    v16 = (_QWORD *)*v16;
  HIDWORD(v65) = *v16;
  v17 = v4 + 72 * (v5 + 4);
  v18 = (_QWORD *)(v17 + 8);
  if (*(_DWORD *)(v17 + 16) >= 0x41u)
    v18 = (_QWORD *)*v18;
  v66 = *v18;
  v19 = v4 + 72 * (v5 + 5);
  v20 = (_QWORD *)(v19 + 8);
  if (*(_DWORD *)(v19 + 16) >= 0x41u)
    v20 = (_QWORD *)*v20;
  v67 = *v20;
  v21 = v4 + 72 * (v5 + 6);
  v22 = (_QWORD *)(v21 + 8);
  if (*(_DWORD *)(v21 + 16) >= 0x41u)
    v22 = (_QWORD *)*v22;
  v68 = *v22;
  v23 = v4 + 72 * (v5 + 7);
  v24 = (_QWORD *)(v23 + 8);
  if (*(_DWORD *)(v23 + 16) >= 0x41u)
    v24 = (_QWORD *)*v24;
  v69 = *v24;
  v25 = v4 + 72 * (v5 + 8);
  v26 = (_QWORD *)(v25 + 8);
  if (*(_DWORD *)(v25 + 16) >= 0x41u)
    v26 = (_QWORD *)*v26;
  v70 = *v26;
  v27 = v4 + 72 * (v5 + 9);
  v29 = *(_QWORD *)(v27 + 16);
  v28 = (const llvm::detail::IEEEFloat *)(v27 + 16);
  v30 = llvm::APFloatBase::PPCDoubleDouble(v3);
  if (v30 == v29)
    MEMORY[0x23489F2A0](&v59, v28);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v59, v28);
  sub_22E535DC8((llvm::APFloatBase *)v61, (uint64_t)v58);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)&v71, (const llvm::detail::IEEEFloat *)&v62);
  v31 = *(_QWORD *)(*(_QWORD *)a2 + 8) + 72 * (*(_DWORD *)(*(_QWORD *)a2 + 16) + 10);
  v33 = *(_QWORD *)(v31 + 16);
  v32 = (const llvm::detail::IEEEFloat *)(v31 + 16);
  if (v30 == v33)
    MEMORY[0x23489F2A0](&v53, v32);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v53, v32);
  sub_22E535DC8((llvm::APFloatBase *)v55, (uint64_t)v52);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)&v73, (const llvm::detail::IEEEFloat *)&v56);
  v34 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v35 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  v36 = v34 + 72 * (v35 + 11);
  v37 = (_QWORD *)(v36 + 8);
  if (*(_DWORD *)(v36 + 16) >= 0x41u)
    v37 = (_QWORD *)*v37;
  v74[4] = *v37;
  v38 = v34 + 72 * (v35 + 12);
  v39 = (_QWORD *)(v38 + 8);
  if (*(_DWORD *)(v38 + 16) >= 0x41u)
    v39 = (_QWORD *)*v39;
  v74[5] = *v39;
  v40 = v34 + 72 * (v35 + 13);
  v42 = *(_QWORD *)(v40 + 16);
  v41 = (const llvm::detail::IEEEFloat *)(v40 + 16);
  if (v30 == v42)
    MEMORY[0x23489F2A0](&v47, v41);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v47, v41);
  sub_22E535DC8((llvm::APFloatBase *)v49, (uint64_t)v46);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v50);
  llvm::air::AIRSamplerStateEncoder::encode();
  if (v30 == v50)
    sub_22E463170((llvm::APFloatBase *)&v51);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v50);
  if (v30 == v47)
    sub_22E463170((llvm::APFloatBase *)&v48);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v47);
  if (v30 == v56)
    sub_22E463170((llvm::APFloatBase *)&v57);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v56);
  if (v30 == v53)
    sub_22E463170((llvm::APFloatBase *)&v54);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v53);
  if (v30 == v62)
    sub_22E463170((llvm::APFloatBase *)&v63);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v62);
  if (v30 == v59)
    sub_22E463170((llvm::APFloatBase *)&v60);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v59);
  if (v30 == v75)
    sub_22E463170((llvm::APFloatBase *)v76);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v75);
  if (v30 == v73)
    sub_22E463170((llvm::APFloatBase *)v74);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v73);
  if (v30 == v71)
    sub_22E463170((llvm::APFloatBase *)&v72);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v71);
  v64 = 0x8000000000000002;
  v65 = 0;
  if (sub_22E3B38EC((_DWORD *)(a1 + 16), &v64))
    return llvm::ConstantInt::get();
  else
    return sub_22F26C2A4(a1, &v45);
}

void sub_22E526670(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  int *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int *v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::LLVMContext *v74;
  llvm::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int *v99;
  char *v100;
  uint64_t v101;
  BOOL v102;
  unsigned int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  llvm::Value *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Value *v127;
  uint64_t v128;
  llvm::Value *v129;
  char v130;
  void *Name;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  llvm::Type *v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t NullValue;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  llvm::Type **v149;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  llvm::Value *v158;
  char v159;
  void *v160;
  void *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  llvm::Type *v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Type **v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  llvm::Value *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  BOOL v206;
  _BOOL4 v207;
  uint64_t v208;
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  llvm::Value *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  __int128 *v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  llvm::Value *v225;
  uint64_t v226;
  llvm::Value *v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  unsigned int *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  unsigned int *v244;
  char v245;
  uint64_t v246;
  __int128 *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  llvm::Value *v252;
  uint64_t v253;
  uint64_t v254;
  void **v255;
  size_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  unsigned int *v264;
  size_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  void **v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t *v288;
  uint64_t *v289;
  unint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  void **v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  unint64_t v334;
  unsigned int *v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  void **v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  void **v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  int v360;
  llvm::LLVMContext *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  llvm::Type *v366;
  __int16 v367;
  uint64_t v368;
  __int128 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  unint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t i;
  unsigned __int8 *v382;
  llvm::Value *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  BOOL v387;
  uint64_t v388;
  unsigned __int8 *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void **v394;
  void **v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unsigned __int8 *v399;
  unsigned __int8 *v400;
  unsigned __int8 *v401;
  uint64_t v402;
  uint64_t v403;
  void **v404;
  void **v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  __int128 *v419;
  unint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  void **v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  __int128 v455;
  __int128 v456;
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  unint64_t v465;
  unsigned int *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  void **v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  void **v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  int v490;
  llvm::LLVMContext *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v495;
  llvm::Type *v496;
  __int16 v497;
  uint64_t v498;
  __int128 v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  void *v504;
  unint64_t v505;
  void *v506;
  uint64_t *v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unsigned __int8 *v513;
  llvm::Value *v514;
  uint64_t v515;
  llvm::LLVMContext *v516;
  unsigned __int8 *v517;
  llvm::Value *v518;
  unsigned __int8 *v519;
  llvm::Value *v520;
  unsigned __int8 *v521;
  llvm::Value *v522;
  unint64_t v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v526;
  __int128 *v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unsigned __int8 *v533;
  uint64_t *v534;
  llvm::Value *v535;
  uint64_t v536;
  uint64_t v537;
  BOOL v538;
  __int128 *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unsigned __int8 *v548;
  llvm::Value *v549;
  uint64_t v550;
  uint64_t v551;
  __int128 *v552;
  size_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  __int128 *v558;
  size_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unsigned __int8 *v565;
  llvm::Value *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unsigned __int8 *v574;
  uint64_t *v575;
  unsigned __int8 *v576;
  unsigned __int8 *v577;
  uint64_t v578;
  uint64_t v579;
  void **v580;
  void **v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  uint64_t *v594;
  uint64_t *v595;
  unint64_t *v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  void **v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  __int128 v631;
  __int128 v632;
  uint64_t v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  uint64_t v640;
  unint64_t v641;
  unsigned int *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  uint64_t v647;
  uint64_t v648;
  __int128 v649;
  __int128 v650;
  void **v651;
  unint64_t v652;
  unint64_t v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  void **v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  int v667;
  llvm::LLVMContext *v668;
  uint64_t v669;
  uint64_t v670;
  llvm::Type *v672;
  __int16 v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  llvm::Value *v680;
  uint64_t v681;
  void *v682;
  uint64_t v683;
  unint64_t v684;
  void *v685;
  char **v686;
  int v687;
  char v688;
  void *v689;
  void **v690;
  void *v691;
  void *v692;
  char v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  unsigned __int8 *v698;
  llvm::Value *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  llvm::Value *v703;
  uint64_t v704;
  llvm::Value *v707;
  char v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  BOOL v712;
  uint64_t v713;
  void *v714;
  unint64_t v715;
  uint64_t v716;
  llvm::Value *v717;
  char v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  uint64_t v723;
  uint64_t v724;
  void **v725;
  uint64_t v726;
  unsigned int v727;
  uint64_t *v728;
  uint64_t *v729;
  unint64_t *v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t *v738;
  uint64_t v739;
  uint64_t *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  uint64_t v746;
  uint64_t v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  void **v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  __int128 v764;
  __int128 v765;
  uint64_t v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  uint64_t v773;
  int v774;
  unint64_t v775;
  unsigned int *v776;
  uint64_t v777;
  uint64_t v778;
  std::string::size_type v779;
  uint64_t *v780;
  int v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  __int128 v785;
  __int128 v786;
  unint64_t v787;
  unint64_t v788;
  __int128 v789;
  __int128 v790;
  void **v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  int v802;
  llvm::LLVMContext *v803;
  uint64_t v804;
  llvm::Type *v806;
  __int16 v807;
  uint64_t v808;
  uint64_t v809;
  __int128 v810;
  unint64_t v811;
  uint64_t v812;
  __int128 v813;
  llvm::LLVMContext *v814;
  llvm::LLVMContext *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  void *v820;
  unint64_t v821;
  void *v822;
  void *v823;
  llvm::Value *v824;
  char v825;
  void *v826;
  llvm::Value *v827;
  char v828;
  llvm::Value *v829;
  char v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unsigned __int8 *v836;
  llvm::Value *v837;
  uint64_t v838;
  llvm::Value *v839;
  char v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  llvm::Value *v846;
  char v847;
  uint64_t v848;
  unsigned int v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t Declaration;
  uint64_t v856;
  uint64_t v857;
  llvm::Value *v858;
  uint64_t FCmpHelper;
  char v860;
  uint64_t *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  __int128 *v866;
  size_t v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unsigned __int8 *v871;
  llvm::Value *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  llvm::LLVMContext *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t j;
  uint64_t v881;
  llvm::LLVMContext *v882;
  uint64_t v883;
  llvm::LLVMContext *v884;
  uint64_t v885;
  uint64_t Select;
  llvm::LLVMContext *v887;
  uint64_t v888;
  char v889;
  uint64_t v890;
  llvm::Value *v891;
  char v892;
  unsigned int *v893;
  uint64_t v894;
  uint64_t v895;
  unsigned __int8 *v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unsigned int *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unsigned int *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  unsigned int *v914;
  uint64_t v915;
  __int128 v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  double v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  unsigned __int8 *v925;
  llvm::Value *v926;
  uint64_t v927;
  llvm::Value *v928;
  char v929;
  llvm::Value *v930;
  char v931;
  uint64_t v932;
  uint64_t *v933;
  uint64_t v934;
  unsigned int v935;
  uint64_t v936;
  __int128 *v937;
  __int128 *v938;
  unsigned int v939;
  __int128 *v940;
  __int128 *v941;
  unint64_t v942;
  unint64_t *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unsigned int v950;
  unint64_t v951;
  unint64_t *v952;
  unint64_t v953;
  unint64_t *v954;
  __int128 v955;
  unsigned int v956;
  __int128 v957;
  unint64_t v958;
  unint64_t *v959;
  __int128 v960;
  __int128 v961;
  __int128 *v962;
  __int128 v963;
  __int128 *v964;
  __int128 v965;
  __int128 *v966;
  __int128 v967;
  __int128 *v968;
  __int128 v969;
  unint64_t v970;
  __int128 v971;
  unint64_t v972;
  __int128 v973;
  unint64_t v974;
  __int128 v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  unint64_t v980;
  __int128 v981;
  unint64_t v982;
  uint64_t v983;
  unint64_t v984;
  int v985;
  unint64_t v986;
  int v987;
  int v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  uint64_t v993;
  uint64_t *v994;
  uint64_t *v995;
  uint64_t *v996;
  uint64_t *v997;
  uint64_t v998;
  __int128 v999;
  int v1000;
  __int128 v1001;
  uint64_t v1002;
  __int128 v1003;
  uint64_t v1004;
  __int128 v1005;
  uint64_t v1006;
  unsigned __int8 *v1007;
  uint64_t v1008;
  __int128 v1009;
  uint64_t v1010;
  __int128 v1011;
  uint64_t v1012;
  __int128 v1013;
  uint64_t v1014;
  __int128 v1015;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1020;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1037;
  std::string::size_type v1038;
  std::string::size_type v1039;
  std::string::size_type v1040;
  _OWORD v1041[3];
  uint64_t v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  uint64_t v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  uint64_t v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  uint64_t v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  uint64_t v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  uint64_t v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  uint64_t v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  _OWORD v1109[2];
  uint64_t v1110;
  __int128 v1111[2];
  uint64_t v1112;
  _BYTE v1113[80];
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  uint64_t v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  void *v1121[2];
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  uint64_t v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  uint64_t v1135;
  __int128 v1136;
  __int128 v1137;
  _BYTE v1138[24];
  void *__p[2];
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  uint64_t v1147;
  __int128 v1148;
  _BYTE v1149[32];
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  uint64_t v1155;
  uint64_t v1156;

  LODWORD(v9) = a4;
  v10 = (std::string::size_type)a2;
  v11 = a1;
  v12 = a7;
  v1156 = *MEMORY[0x24BDAC8D0];
  v13 = a4 - 1314;
  switch(a4)
  {
    case 0x522u:
      v507 = a2 + 34;
      sub_22E4DFD40((uint64_t)a2, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1148);
      *(_WORD *)&v1113[32] = 257;
      v508 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(v10 + 272), (uint64_t)&v1148, (uint64_t)v1113);
      v509 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                                             + ((unint64_t)*a5 >> 24))
                                                 + 8) & 0xFFFFFFFFFFFFFFF0));
      v20 = (uint64_t)&v1113[16];
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v510 = a5[4];
      if ((_DWORD)v510)
      {
        v511 = 0;
        v512 = 8 * v510;
        do
        {
          v513 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v511 / 4]
                                     + ((unint64_t)*a5 >> 24));
          __p[0] = (void *)v10;
          __p[1] = (void *)(v10 + 272);
          LOBYTE(v1140) = 0;
          *((_QWORD *)&v1140 + 1) = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v514 = sub_22E50E974((uint64_t *)__p, v513);
          v515 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v515 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v515) = v514;
          ++*(_DWORD *)&v1113[8];
          v511 += 8;
        }
        while (v512 != v511);
      }
      __p[1] = 0;
      __p[0] = (void *)0x8000000000000002;
      if ((sub_22E3B38EC((_DWORD *)(v11 + 16), __p) & 1) == 0)
      {
        llvm::Type::getInt1Ty(*(llvm::Type **)(v10 + 336), v516);
        v848 = llvm::ConstantInt::get();
        v849 = *(_DWORD *)&v1113[8];
        if (*(_DWORD *)&v1113[8] >= *(_DWORD *)&v1113[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v849 = *(_DWORD *)&v1113[8];
        }
        *(_QWORD *)(*(_QWORD *)v1113 + 8 * v849) = v848;
        ++*(_DWORD *)&v1113[8];
      }
      v850 = *(unsigned __int8 *)(*v508 + 8);
      v851 = *(_QWORD *)((v509 & 0xFFFFFFFFFFFFFFF0) + 8);
      v852 = 77;
      if ((v851 & 8) != 0)
      {
        v853 = *(_QWORD *)((v851 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
        if (v850 == 2)
          v854 = 52;
        else
          v854 = 53;
        if (v853 == 22528)
          v852 = v854;
        else
          v852 = 77;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 472) + 64))(*(_QWORD *)(v11 + 472), v852);
      Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
      v856 = Declaration;
      if (Declaration)
        v857 = *(_QWORD *)(Declaration + 24);
      else
        v857 = 0;
      LOWORD(v1141) = 257;
      v858 = sub_22E462B78(v507, v857, Declaration, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)__p, 0);
      *((_QWORD *)v858 + 8) = *(_QWORD *)(v856 + 112);
      LOWORD(v1141) = 257;
      if (v850 == 2)
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
      else
        FCmpHelper = sub_22E3C18F4((uint64_t)v507, 32, v508, (uint64_t)v858, (uint64_t)__p);
      v860 = *(_BYTE *)(a7 + 48) & 0xF8;
      *(_QWORD *)a7 = FCmpHelper;
      *(_QWORD *)(a7 + 8) = 0;
      *(_BYTE *)(a7 + 48) = v860;
      goto LABEL_883;
    case 0x523u:
    case 0x525u:
    case 0x526u:
    case 0x527u:
    case 0x528u:
    case 0x529u:
    case 0x52Au:
    case 0x52Bu:
    case 0x52Cu:
    case 0x52Du:
    case 0x52Eu:
    case 0x52Fu:
      v9 = a1;
      v11 = a7;
      v20 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                                            + ((unint64_t)*a5 >> 24))
                                                + 8) & 0xFFFFFFFFFFFFFFF0));
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v21 = a5[4];
      if ((_DWORD)v21)
      {
        v22 = 0;
        v12 = 8 * v21;
        do
        {
          v23 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v22 / 4]
                                    + ((unint64_t)*a5 >> 24));
          *(_QWORD *)&v1148 = v10;
          *((_QWORD *)&v1148 + 1) = v10 + 272;
          v1149[0] = 0;
          *(_QWORD *)&v1149[8] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v24 = sub_22E50E974((uint64_t *)&v1148, v23);
          v25 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v25) = v24;
          ++*(_DWORD *)&v1113[8];
          v22 += 8;
        }
        while (v12 != v22);
      }
      v1148 = 0x8000000000000002;
      v26 = sub_22E3B38EC((_DWORD *)(v9 + 16), &v1148);
      if ((v26 & 1) == 0)
      {
        llvm::Type::getInt1Ty(*(llvm::Type **)(v10 + 336), v27);
        v26 = llvm::ConstantInt::get();
        v109 = v26;
        v110 = *(_DWORD *)&v1113[8];
        if (*(_DWORD *)&v1113[8] >= *(_DWORD *)&v1113[12])
        {
          v26 = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v110 = *(_DWORD *)&v1113[8];
        }
        *(_QWORD *)(*(_QWORD *)v1113 + 8 * v110) = v109;
        ++*(_DWORD *)&v1113[8];
      }
      v111 = v20 & 0xFFFFFFFFFFFFFFF0;
      v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v112 + 16) != 11)
        v112 = 0;
      switch((*(_DWORD *)(v112 + 16) >> 19) & 0x1FF)
      {
        case 0xAE:
          v113 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v113 & 8) != 0)
          {
            v42 = (*(_QWORD *)((v113 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
            v114 = 6;
            if (!v42)
              v114 = 1;
          }
          else
          {
            v114 = 1;
          }
          goto LABEL_262;
        case 0xAF:
          v155 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v155 & 8) == 0)
          {
            v114 = 3;
            goto LABEL_262;
          }
          v221 = (*(_QWORD *)((v155 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
          v114 = 3;
          v222 = 8;
          goto LABEL_260;
        case 0xB0:
        case 0xB1:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xB5:
          __break(1u);
          goto LABEL_1008;
        case 0xB6:
          v156 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v156 & 8) != 0)
          {
            v42 = (*(_QWORD *)((v156 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
            v114 = 5;
            if (!v42)
              v114 = 0;
          }
          else
          {
            v114 = 0;
          }
          goto LABEL_262;
        case 0xB7:
          v154 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v154 & 8) == 0)
          {
            v114 = 2;
            goto LABEL_262;
          }
          v221 = (*(_QWORD *)((v154 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
          v114 = 2;
          v222 = 7;
          goto LABEL_260;
        default:
          v157 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v157 & 8) != 0)
          {
            v221 = (*(_QWORD *)((v157 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 24576;
            v114 = 4;
            v222 = 9;
LABEL_260:
            if (v221)
              v114 = v222;
          }
          else
          {
            v114 = 4;
          }
LABEL_262:
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 472) + 64))(*(_QWORD *)(v9 + 472), dword_22F458E0C[10 * v13 + v114]);
          v223 = llvm::air::AIRFunctionInfo::getDeclaration();
          if (v223)
            v224 = *(_QWORD *)(v223 + 24);
          else
            v224 = 0;
          *(_WORD *)&v1149[16] = 257;
          v225 = sub_22E462B78((uint64_t *)(v10 + 272), v224, v223, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)&v1148, 0);
          *((_QWORD *)v225 + 8) = *(_QWORD *)(v223 + 112);
          v226 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(v226 + 16) & 0xFF80000) != 0x5280000
            || *(_DWORD *)(v226 + 16) != 11
            || v226 == 0)
          {
            v229 = v225;
          }
          else
          {
            v229 = 0;
          }
          v230 = *(_BYTE *)(v11 + 48);
          *(_QWORD *)v11 = v229;
          *(_QWORD *)(v11 + 8) = 0;
          *(_BYTE *)(v11 + 48) = v230 & 0xF8;
          break;
      }
      goto LABEL_275;
    case 0x530u:
      sub_22F2657E4(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x531u:
      sub_22F265A58(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x532u:
    case 0x533u:
    case 0x534u:
    case 0x535u:
    case 0x536u:
    case 0x537u:
      qmemcpy(&v1113[24], "air.atomic_compare_exchange_weak_explicit_", 42);
      *(_QWORD *)v1113 = &v1113[24];
      *(_QWORD *)&v1113[16] = 128;
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2
                                                                                  * (((unint64_t)*a5 >> 18) & 1)
                                                                                  + 2]
                                                                      + ((unint64_t)*a5 >> 24))
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v60 + 16) != 11)
        v60 = 0;
      __asm { BR              X11 }
      return;
    case 0x538u:
    case 0x539u:
    case 0x53Au:
    case 0x53Bu:
    case 0x53Cu:
    case 0x53Du:
      sub_22F2656E4(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x53Eu:
    case 0x53Fu:
    case 0x540u:
    case 0x541u:
    case 0x542u:
    case 0x543u:
    case 0x544u:
    case 0x545u:
    case 0x546u:
    case 0x547u:
    case 0x548u:
    case 0x549u:
    case 0x54Au:
    case 0x54Bu:
    case 0x54Cu:
    case 0x54Du:
    case 0x54Eu:
    case 0x54Fu:
    case 0x550u:
    case 0x551u:
    case 0x552u:
    case 0x553u:
    case 0x554u:
    case 0x555u:
    case 0x556u:
    case 0x557u:
    case 0x558u:
    case 0x559u:
    case 0x55Au:
    case 0x55Bu:
    case 0x55Cu:
    case 0x55Du:
    case 0x55Eu:
    case 0x55Fu:
    case 0x560u:
    case 0x561u:
    case 0x562u:
    case 0x563u:
    case 0x564u:
    case 0x565u:
    case 0x566u:
    case 0x567u:
      __asm { BR              X10 }
      return;
    case 0x568u:
    case 0x569u:
    case 0x56Au:
    case 0x56Bu:
    case 0x56Cu:
    case 0x56Du:
    case 0x56Eu:
    case 0x56Fu:
    case 0x570u:
    case 0x571u:
    case 0x572u:
    case 0x573u:
      v28 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v30 = *(_QWORD *)(v28 + 8);
      v29 = v28 + 8;
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v32 = a4 - 1384;
      if (a4 - 1384 > 0xB)
        v33 = 0;
      else
        v33 = qword_22F45A990[v32];
      v82 = *(unsigned int *)(v31 + 16);
      if (v32 >= 6)
        v83 = &unk_22F4595DC;
      else
        v83 = &unk_22F45953C;
      sub_22E5362CC(v12, a1, (uint64_t)a2, a5, (uint64_t)((uint64_t)v83 + 16 * ((v82 >> 19) & 0x1FF)) - 3632, *(_QWORD *)(*(_QWORD *)(v29 + 8 * v33) + 8), *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8), 0);
      return;
    case 0x574u:
    case 0x575u:
    case 0x576u:
    case 0x577u:
    case 0x578u:
    case 0x579u:
      sub_22F265738(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x57Au:
    case 0x57Bu:
    case 0x57Cu:
    case 0x57Du:
    case 0x57Eu:
    case 0x57Fu:
      sub_22F26578C(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x592u:
      v378 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                               + ((unint64_t)*a5 >> 24))
                                   + 8) & 0xFFFFFFFFFFFFFFF0);
      v379 = *v378;
      if (*v378 && *(_BYTE *)(v379 + 16) == 56
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v379 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
        && (v379 = sub_22F10CF48(v379)) != 0)
      {
        v378 = (uint64_t *)(*(_QWORD *)(v379 + 32) & 0xFFFFFFFFFFFFFFF0);
      }
      LOBYTE(__p[0]) = 0;
      LOBYTE(v1140) = 0;
      if (sub_22F10E0EC(*v378))
      {
        sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(v11 + 8) + 144), 0, (uint64_t)v1113);
        sub_22E54C490((uint64_t)__p, (uint64_t)v1113);
        if (v1113[16])
        {
          if (*(_DWORD *)&v1113[8] >= 0x41u && *(_QWORD *)v1113)
            MEMORY[0x2348A0E84](*(_QWORD *)v1113, 0x1000C8000313F17);
        }
      }
      *(_QWORD *)&v1148 = v1149;
      *((_QWORD *)&v1148 + 1) = 0x200000000;
      v380 = (uint64_t *)(v10 + 272);
      for (i = 8; i != 32; i += 8)
      {
        v382 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1)]
                                   + ((unint64_t)*a5 >> 24)
                                   + i);
        *(_QWORD *)v1113 = v10;
        *(_QWORD *)&v1113[8] = v10 + 272;
        v1113[16] = 0;
        *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
        v383 = sub_22E50E974((uint64_t *)v1113, v382);
        v384 = DWORD2(v1148);
        if (DWORD2(v1148) >= (unint64_t)HIDWORD(v1148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v384 = DWORD2(v1148);
        }
        *(_QWORD *)(v1148 + 8 * v384) = v383;
        ++DWORD2(v1148);
      }
      v385 = *v378;
      v386 = *(_QWORD *)(*(_QWORD *)(v385 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v386)
        v387 = (*(_DWORD *)(v386 + 16) & 0xFF800FF) == 110624779;
      else
        v387 = 0;
      if (v387)
      {
        v690 = __p;
        if (LODWORD(__p[1]) >= 0x41)
          v690 = (void **)__p[0];
        if (*v690)
          v388 = 399;
        else
          v388 = 6674;
      }
      else if (sub_22F10E0EC(v385))
      {
        v388 = 399;
      }
      else if (sub_22F110930(v385))
      {
        v388 = 400;
      }
      else
      {
        v388 = 401;
      }
      v841 = *(_QWORD *)(v11 + 472);
      v842 = sub_22E699F3C(*(_QWORD **)(v11 + 8));
      *(_QWORD *)v1113 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v842 + 256))(v842, *(_QWORD *)(v11 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]+ ((unint64_t)*a5 >> 24))+ 8));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v841 + 64))(v841, v388);
      v843 = llvm::air::AIRFunctionInfo::getDeclaration();
      v844 = v843;
      if (v843)
        v845 = *(_QWORD *)(v843 + 24);
      else
        v845 = 0;
      *(_WORD *)&v1113[32] = 257;
      v846 = sub_22E462B78(v380, v845, v843, v1148, DWORD2(v1148), (uint64_t)v1113, 0);
      *((_QWORD *)v846 + 8) = *(_QWORD *)(v844 + 112);
      v847 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v846;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v847 & 0xF8;
      if ((_BYTE *)v1148 != v1149)
        free((void *)v1148);
      if (!(_BYTE)v1140)
        return;
      if (LODWORD(__p[1]) < 0x41)
        return;
      v826 = __p[0];
      if (!__p[0])
        return;
      goto LABEL_935;
    case 0x594u:
      v531 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                   + ((unint64_t)*a5 >> 24))
                       + 8) & 0xFFFFFFFFFFFFFFF0;
      v532 = *(_QWORD *)v531;
      if (*(_QWORD *)v531 && *(_BYTE *)(v532 + 16) == 56
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v532 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
        && (v532 = sub_22F10CF48(v532)) != 0)
      {
        v531 = *(_QWORD *)(v532 + 32) & 0xFFFFFFFFFFFFFFF0;
      }
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(v11 + 8) + 144), 0, (uint64_t)&v1148);
      v533 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                 + ((unint64_t)*a5 >> 24));
      v534 = (uint64_t *)(v10 + 272);
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      v535 = sub_22E50E974((uint64_t *)v1113, v533);
      __p[0] = v535;
      v536 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v531 + 8) & 0xFFFFFFFFFFFFFFF0);
      v537 = 10181;
      if (v536)
        v538 = (*(_DWORD *)(v536 + 16) & 0xFF800FF) == 110624779;
      else
        v538 = 0;
      if (v538)
      {
        if (DWORD2(v1148) >= 0x41)
          v539 = (__int128 *)v1148;
        else
          v539 = &v1148;
        if (*(_QWORD *)v539)
          v537 = 10181;
        else
          v537 = 6716;
      }
      v540 = *(_QWORD *)(v11 + 472);
      *(_QWORD *)v1113 = *(_QWORD *)v535;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v540 + 64))(v540, v537);
      v541 = llvm::air::AIRFunctionInfo::getDeclaration();
      v542 = v541;
      if (v541)
        v543 = *(_QWORD *)(v541 + 24);
      else
        v543 = 0;
      *(_WORD *)&v1113[32] = 257;
      v824 = sub_22E462B78(v534, v543, v541, (uint64_t)__p, 1, (uint64_t)v1113, 0);
      *((_QWORD *)v824 + 8) = *(_QWORD *)(v542 + 112);
      v825 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v824;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v825 & 0xF8;
      if (!v1149[0])
        return;
      if (DWORD2(v1148) < 0x41)
        return;
      v826 = (void *)v1148;
      if (!(_QWORD)v1148)
        return;
      goto LABEL_935;
    case 0x598u:
      v266 = a7;
      v267 = v11;
      v268 = v10;
      v269 = a5;
      goto LABEL_303;
    case 0x599u:
      v266 = a7;
      v267 = v11;
      v268 = v10;
      v269 = a5;
LABEL_303:
      sub_22E52EE38(v266, v267, v268, v269);
      return;
    case 0x59Au:
      *(_QWORD *)v1113 = &v1113[24];
      *(_QWORD *)&v1113[24] = 0x2E746F642E726961;
      *(_OWORD *)&v1113[8] = xmmword_22F45AB80;
      v557 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v557 + 256))(v557, *(_QWORD *)(v11 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2] + ((unint64_t)*a5 >> 24))+ 8));
      llvm_utils::getMangledTypeStr();
      if (v1149[7] >= 0)
        v558 = &v1148;
      else
        v558 = (__int128 *)v1148;
      if (v1149[7] >= 0)
        v559 = v1149[7] & 0x7F;
      else
        v559 = *((_QWORD *)&v1148 + 1);
      v560 = *(_QWORD *)&v1113[8];
      if (*(_QWORD *)&v1113[16] >= *(_QWORD *)&v1113[8] + v559)
      {
        if (!v559)
          goto LABEL_563;
        goto LABEL_562;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v560 = *(_QWORD *)&v1113[8];
      if (v559)
      {
LABEL_562:
        memcpy((void *)(*(_QWORD *)v1113 + v560), v558, v559);
        v560 = *(_QWORD *)&v1113[8];
      }
LABEL_563:
      v561 = v12;
      *(_QWORD *)&v1113[8] = v560 + v559;
      if ((v1149[7] & 0x80000000) != 0)
        operator delete((void *)v1148);
      llvm::air::AIRFunctionInfo::lookupName();
      __p[0] = &v1140;
      __p[1] = (void *)0x200000000;
      v562 = a5[4];
      if ((_DWORD)v562)
      {
        v563 = 0;
        v564 = 8 * v562;
        do
        {
          v565 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v563 / 4]
                                     + ((unint64_t)*a5 >> 24));
          *(_QWORD *)&v1148 = v10;
          *((_QWORD *)&v1148 + 1) = v10 + 272;
          v1149[0] = 0;
          *(_QWORD *)&v1149[8] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v566 = sub_22E50E974((uint64_t *)&v1148, v565);
          v567 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v567 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v567) = v566;
          ++LODWORD(__p[1]);
          v563 += 8;
        }
        while (v564 != v563);
      }
      v568 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v568)
        v569 = *(_QWORD *)(v568 + 24);
      else
        v569 = 0;
      *(_WORD *)&v1149[16] = 257;
      v829 = sub_22E462B78((uint64_t *)(v10 + 272), v569, v568, (uint64_t)__p[0], LODWORD(__p[1]), (uint64_t)&v1148, 0);
      *((_QWORD *)v829 + 8) = *(_QWORD *)(v568 + 112);
      v830 = *(_BYTE *)(v561 + 48);
      *(_QWORD *)v561 = v829;
      *(_QWORD *)(v561 + 8) = 0;
      *(_BYTE *)(v561 + 48) = v830 & 0xF8;
      if (__p[0] != &v1140)
        free(__p[0]);
      v220 = *(__int128 **)v1113;
      if (*(_BYTE **)v1113 == &v1113[24])
        return;
      goto LABEL_884;
    case 0x5A3u:
      v916 = *(_OWORD *)(a6 + 16);
      v1041[0] = *(_OWORD *)a6;
      v1041[1] = v916;
      v1041[2] = *(_OWORD *)(a6 + 32);
      v1042 = *(_QWORD *)(a6 + 48);
      sub_22F265F94(a7, (uint64_t *)a1, (uint64_t)a2, a5, (uint64_t)v1041);
      return;
    case 0x5A5u:
    case 0x5A6u:
    case 0x5A7u:
    case 0x5A8u:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 5;
      goto LABEL_111;
    case 0x5A9u:
    case 0x5AAu:
    case 0x5ABu:
    case 0x5ACu:
      v55 = a7;
      v56 = v11;
      v57 = (uint64_t *)v10;
      v58 = a5;
      v59 = 4;
      goto LABEL_92;
    case 0x5ADu:
    case 0x5AEu:
    case 0x5AFu:
    case 0x5B0u:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 4;
      goto LABEL_111;
    case 0x610u:
      v901 = a7;
      v902 = v11;
      v903 = v10;
      v904 = a5;
      v905 = 7706;
      goto LABEL_960;
    case 0x611u:
      v901 = a7;
      v902 = v11;
      v903 = v10;
      v904 = a5;
      v905 = 8513;
LABEL_960:
      sub_22F266408(v901, v902, v903, v904, v905);
      return;
    case 0x613u:
      v906 = a7;
      v907 = v11;
      v908 = v10;
      v909 = a5;
      v910 = 7461;
      goto LABEL_976;
    case 0x614u:
      v906 = a7;
      v907 = v11;
      v908 = v10;
      v909 = a5;
      v910 = 7458;
      goto LABEL_976;
    case 0x615u:
      v906 = a7;
      v907 = v11;
      v908 = v10;
      v909 = a5;
      v910 = 7460;
      goto LABEL_976;
    case 0x616u:
      v906 = a7;
      v907 = v11;
      v908 = v10;
      v909 = a5;
      v910 = 7459;
      goto LABEL_976;
    case 0x617u:
      v906 = a7;
      v907 = v11;
      v908 = v10;
      v909 = a5;
      v910 = 6941;
LABEL_976:
      sub_22F2665F0(v906, v907, v908, v909, v910);
      return;
    case 0x618u:
      sub_22F2667B8(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x619u:
      *(_QWORD *)&v1118 = 0;
      v574 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6]
                                 + ((unint64_t)*a5 >> 24));
      v575 = (uint64_t *)(v10 + 272);
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *((_QWORD *)&v1118 + 1) = sub_22E50E974((uint64_t *)v1113, v574);
      v576 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *(_QWORD *)&v1119 = sub_22E50E974((uint64_t *)v1113, v576);
      v577 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *((_QWORD *)&v1119 + 1) = sub_22E50E974((uint64_t *)v1113, v577);
      sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 10] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1091);
      v578 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 10]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v1148 = v1091;
      *(_OWORD *)v1149 = v1092;
      *(_OWORD *)&v1149[16] = v1093;
      sub_22E6281E0(*(_QWORD **)(v10 + 144), v578, (uint64_t)&v1097);
      *(_OWORD *)v1113 = v1148;
      *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
      *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
      v579 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 144);
      *(_OWORD *)__p = v1097;
      v1140 = v1098;
      *(_QWORD *)&v1141 = v1099;
      LODWORD(v1063) = 0;
      *((_QWORD *)&v1061 + 1) = 0;
      v1062 = 0uLL;
      *(_QWORD *)&v1064 = 0;
      *((_QWORD *)&v1063 + 1) = 0;
      v1065 = 0uLL;
      *(_QWORD *)((char *)&v1066 + 4) = 2;
      LODWORD(v1061) = 0;
      v1067 = 0u;
      v1068 = 0u;
      sub_22E3C113C((uint64_t)&v1061, (__int128 *)v1113, v578, 2, (__int128 *)__p, v579);
      v1115 = v1067;
      v1116 = v1068;
      v1117 = v1069;
      *(_OWORD *)&v1113[32] = v1063;
      *(_OWORD *)&v1113[48] = v1064;
      v1114 = v1066;
      *(_OWORD *)&v1113[64] = v1065;
      *(_OWORD *)&v1113[16] = v1062;
      *(_OWORD *)v1113 = v1061;
      v1053 = 0u;
      v1054 = 0u;
      v1052 = 0u;
      sub_22E54E014((uint64_t)&v1052);
      v580 = (void **)*((_QWORD *)&v1052 + 1);
      v581 = (void **)v1053;
      v582 = *((_QWORD *)&v1054 + 1);
      v583 = v1054;
      v584 = *(_QWORD *)(*((_QWORD *)&v1052 + 1)
                       + ((((_QWORD)v1054 + *((_QWORD *)&v1054 + 1)) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 280 * (((_DWORD)v1054 + DWORD2(v1054)) & 0xF);
      *(_OWORD *)v584 = 0u;
      *(_OWORD *)(v584 + 16) = 0u;
      *(_OWORD *)(v584 + 32) = 0u;
      *(_OWORD *)(v584 + 48) = 0u;
      *(_OWORD *)(v584 + 64) = 0u;
      *(_OWORD *)(v584 + 76) = 0u;
      *(_DWORD *)(v584 + 92) = 2;
      *(_OWORD *)(v584 + 96) = 0u;
      *(_OWORD *)(v584 + 112) = 0u;
      *(_OWORD *)(v584 + 128) = 0u;
      *(_OWORD *)(v584 + 144) = *(_OWORD *)v1113;
      v585 = *(_OWORD *)&v1113[16];
      v586 = *(_OWORD *)&v1113[32];
      v587 = *(_OWORD *)&v1113[64];
      *(_OWORD *)(v584 + 192) = *(_OWORD *)&v1113[48];
      *(_OWORD *)(v584 + 208) = v587;
      *(_OWORD *)(v584 + 160) = v585;
      *(_OWORD *)(v584 + 176) = v586;
      v588 = v1114;
      v589 = v1115;
      v590 = v1116;
      *(_QWORD *)(v584 + 272) = v1117;
      *(_OWORD *)(v584 + 240) = v589;
      *(_OWORD *)(v584 + 256) = v590;
      *(_OWORD *)(v584 + 224) = v588;
      v591 = v582 + 1;
      *((_QWORD *)&v1054 + 1) = v582 + 1;
      if (v582 == -1)
        goto LABEL_651;
      v997 = (uint64_t *)(v10 + 272);
      v1040 = v10;
      while (1)
      {
        v1029 = v591;
        v592 = *(uint64_t *)((char *)v580 + ((v583 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v593 = v583 & 0xF;
        v594 = (uint64_t *)(v592 + 280 * (v583 & 0xF));
        v595 = v594 + 18;
        v596 = (unint64_t *)(v594 + 26);
        v597 = sub_22F10AEAC(*(_QWORD *)(v594[26] & 0xFFFFFFFFFFFFFFF0));
        if (v597
          || (v597 = sub_22F10C2A4(*(_QWORD *)(*v596 & 0xFFFFFFFFFFFFFFF0))) != 0
          && (*(_DWORD *)(v597 + 28) & 0x7Fu) - 35 <= 2)
        {
          v598 = v592 + 280 * v593;
          v953 = *(_QWORD *)(v598 + 72);
          v599 = sub_22EFC3B90(v597);
          if (v599)
          {
            v600 = v599;
            v601 = v598 + 8;
            v602 = *(_DWORD *)(v599 + 28);
            v603 = v13;
LABEL_579:
            if ((v602 & 0x100) == 0)
              goto LABEL_588;
            sub_22EFC8E88(v600);
            v605 = *(uint64_t **)v604;
            v606 = *(unsigned int *)(v604 + 8);
            v607 = *(uint64_t **)v604;
            if ((_DWORD)v606)
            {
              v608 = 8 * v606;
              v607 = *(uint64_t **)v604;
              while (*(_WORD *)(*v607 + 32) != 385)
              {
                ++v607;
                v608 -= 8;
                if (!v608)
                  goto LABEL_588;
              }
            }
            if (v607 == &v605[v606])
            {
LABEL_588:
              v1030 = 0;
            }
            else
            {
              do
              {
                v610 = *v605++;
                v609 = v610;
              }
              while (*(_WORD *)(v610 + 32) != 385);
              v1030 = *(_QWORD *)(v609 + 40);
            }
            if (v953 >= 0x10)
            {
              *(_OWORD *)__p = *(_OWORD *)v601;
              v615 = *(_OWORD *)(v601 + 16);
              v616 = *(_OWORD *)(v601 + 32);
              v617 = *(_OWORD *)(v601 + 48);
              v1143 = *(_OWORD *)(v601 + 64);
              v1142 = v617;
              v1141 = v616;
              v1140 = v615;
              v618 = *(_OWORD *)(v601 + 80);
              v619 = *(_OWORD *)(v601 + 96);
              v620 = *(_OWORD *)(v601 + 112);
              v1147 = *(_QWORD *)(v601 + 128);
              v1146 = v620;
              v1145 = v619;
              v1144 = v618;
              sub_22E4DD05C(v10, (uint64_t)__p, v600, (uint64_t)v1113);
              v948 = *(_QWORD *)v1113;
              v1002 = *(_QWORD *)&v1113[24];
              LODWORD(v947) = *(_DWORD *)&v1113[36];
              v992 = *(_DWORD *)&v1113[32];
              v967 = *(_OWORD *)&v1113[40];
              v975 = *(_OWORD *)&v1113[8];
              v946 = *(_QWORD *)&v1113[56];
              v983 = *(_QWORD *)&v1113[72];
              v611 = *(_QWORD *)&v1113[64];
              v1012 = v1114;
              v612 = DWORD2(v1114);
              LODWORD(v945) = HIDWORD(v1114);
              v960 = v1115;
              v614 = *((_QWORD *)&v1116 + 1);
              v613 = v1116;
              v944 = v1117;
            }
            else
            {
              v992 = 0;
              v1002 = 0;
              v611 = 0;
              v612 = 0;
              v613 = 0;
              v614 = 0;
              v1012 = v956 | 0x200000000;
              v975 = 0uLL;
              v983 = 0;
              v960 = 0uLL;
              v967 = 0uLL;
            }
            v1097 = *(_OWORD *)v595;
            v621 = *((_OWORD *)v595 + 1);
            v622 = *((_OWORD *)v595 + 2);
            v623 = *((_OWORD *)v595 + 3);
            v1101 = *((_OWORD *)v595 + 4);
            v1100 = v623;
            v1099 = v622;
            v1098 = v621;
            v624 = *((_OWORD *)v595 + 5);
            v625 = *((_OWORD *)v595 + 6);
            v626 = *((_OWORD *)v595 + 7);
            v1105 = v595[16];
            v1104 = v626;
            v1103 = v625;
            v1102 = v624;
            sub_22E4DD05C(v10, (uint64_t)&v1097, v600, (uint64_t)&v1148);
            v627 = (void **)v1053;
            v580 = (void **)*((_QWORD *)&v1052 + 1);
            if ((_QWORD)v1053 == *((_QWORD *)&v1052 + 1))
              v628 = 0;
            else
              v628 = 2 * (v1053 - *((_QWORD *)&v1052 + 1)) - 1;
            v629 = *((_QWORD *)&v1054 + 1);
            if (v628 == *((_QWORD *)&v1054 + 1) + (_QWORD)v1054)
            {
              sub_22E54E014((uint64_t)&v1052);
              v580 = (void **)*((_QWORD *)&v1052 + 1);
              v627 = (void **)v1053;
              v629 = *((_QWORD *)&v1054 + 1);
            }
            if (v627 == v580)
              v630 = 0;
            else
              v630 = *(uint64_t *)((char *)v580 + (((unint64_t)(v1054 + v629) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 280 * (((int)v1054 + (int)v629) & 0xF);
            v632 = v1154;
            v1115 = v1153;
            v631 = v1153;
            v1116 = v1154;
            v1117 = v1155;
            v633 = v1155;
            v635 = v1150;
            *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
            v634 = *(_OWORD *)&v1149[16];
            *(_OWORD *)&v1113[48] = v1150;
            v637 = v1151;
            v1114 = v1152;
            v636 = v1152;
            *(_OWORD *)&v1113[64] = v1151;
            v639 = v1148;
            *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
            v638 = *(_OWORD *)v1149;
            *(_OWORD *)v1113 = v1148;
            *(_QWORD *)v630 = v1030;
            *(_QWORD *)(v630 + 8) = v948;
            *(_OWORD *)(v630 + 16) = v975;
            *(_QWORD *)(v630 + 32) = v1002;
            *(_DWORD *)(v630 + 40) = v992;
            *(_DWORD *)(v630 + 44) = v947;
            *(_OWORD *)(v630 + 48) = v967;
            *(_QWORD *)(v630 + 64) = v946;
            *(_QWORD *)(v630 + 72) = v611;
            *(_QWORD *)(v630 + 80) = v983;
            *(_QWORD *)(v630 + 88) = v1012;
            *(_DWORD *)(v630 + 96) = v612;
            *(_DWORD *)(v630 + 100) = v945;
            *(_OWORD *)(v630 + 104) = v960;
            *(_QWORD *)(v630 + 120) = v613;
            *(_QWORD *)(v630 + 128) = v614;
            *(_QWORD *)(v630 + 136) = v944;
            *(_OWORD *)(v630 + 144) = v639;
            *(_OWORD *)(v630 + 160) = v638;
            *(_OWORD *)(v630 + 240) = v631;
            *(_OWORD *)(v630 + 256) = v632;
            *(_QWORD *)(v630 + 272) = v633;
            *(_OWORD *)(v630 + 176) = v634;
            *(_OWORD *)(v630 + 192) = v635;
            *(_OWORD *)(v630 + 208) = v637;
            *(_OWORD *)(v630 + 224) = v636;
            v640 = v629 + 1;
            v956 = v1012;
            *((_QWORD *)&v1054 + 1) = v629 + 1;
            while (1)
            {
              v600 = *(_QWORD *)(v600 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v600)
                break;
              v602 = *(_DWORD *)(v600 + 28);
              if ((v602 & 0x7Fu) - 49 < 3)
                goto LABEL_579;
            }
            v575 = v997;
            goto LABEL_648;
          }
          goto LABEL_647;
        }
        v641 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v596);
        if (v641 && *(_BYTE *)(v641 + 16) == 2)
        {
          v642 = (unsigned int *)(v641 + 40);
          v603 = v13;
          v627 = v581;
          v640 = v1029;
          if (*(_DWORD *)(v641 + 48) >= 0x41u)
            v642 = *(unsigned int **)v642;
          v993 = *v642;
          if (*v642)
          {
            v984 = v641;
            v643 = 0;
            v644 = v592 + 280 * v593;
            v976 = *(_QWORD *)(v644 + 72);
            v954 = (unint64_t *)(v644 + 72);
            v941 = (__int128 *)(v644 + 16);
            v968 = (__int128 *)(v644 + 152);
            do
            {
              v1031 = v640;
              if (v976 >= 0x10)
              {
                v649 = *v941;
                v650 = v941[2];
                v1044 = v941[1];
                v1045 = v650;
                v1043 = v649;
                *(_WORD *)&v1149[16] = 257;
                v651 = v627;
                sub_22E486A58(v575, (uint64_t)&v1043, v643, (uint64_t)&v1148, (uint64_t)v1113);
                v647 = *(_QWORD *)&v1113[16];
                v646 = *(_DWORD *)&v1113[24];
                v645 = *(unsigned int *)&v1113[28];
                v1003 = *(_OWORD *)&v1113[32];
                v1013 = *(_OWORD *)v1113;
                v652 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v954);
                v627 = v651;
                if (*(_BYTE *)(v652 + 16) == 2)
                  v653 = v652;
                else
                  v653 = 0;
                v648 = *(_QWORD *)(v653 + 32);
              }
              else
              {
                v645 = v603;
                v646 = 0;
                v647 = 0;
                v648 = 0;
                v1003 = 0u;
                v1013 = 0u;
              }
              v654 = *v968;
              v655 = v968[1];
              v1096 = v968[2];
              v1095 = v655;
              v1094 = v654;
              *(_WORD *)&v1113[32] = 257;
              if (v627 == v580)
                v656 = 0;
              else
                v656 = 2 * ((char *)v627 - (char *)v580) - 1;
              v657 = v627;
              sub_22E486A58(v575, (uint64_t)&v1094, v643, (uint64_t)v1113, (uint64_t)&v1106);
              v658 = *(_QWORD *)(v984 + 32);
              sub_22E6281E0(*(_QWORD **)(v1040 + 144), v648, (uint64_t)&v1070);
              *(_OWORD *)v1113 = v1013;
              *(_QWORD *)&v1113[16] = v647;
              *(_DWORD *)&v1113[24] = v646;
              *(_DWORD *)&v1113[28] = v645;
              *(_OWORD *)&v1113[32] = v1003;
              v659 = *(_QWORD *)(*(_QWORD *)(v1040 + 144) + 144);
              v1148 = v1070;
              *(_OWORD *)v1149 = v1071;
              *(_QWORD *)&v1149[16] = v1072;
              v1080 = 0uLL;
              *((_QWORD *)&v1079 + 1) = 0;
              LODWORD(v1081) = 0;
              *((_QWORD *)&v1081 + 1) = 0;
              *(_QWORD *)&v1082 = 0;
              v1083 = 0uLL;
              *(_QWORD *)((char *)&v1084 + 4) = 2;
              LODWORD(v1079) = 0;
              v1085 = 0u;
              v1086 = 0u;
              sub_22E3C113C((uint64_t)&v1079, (__int128 *)v1113, v648, 2, &v1148, v659);
              v1148 = v1106;
              *(_OWORD *)v1149 = v1107;
              *(_OWORD *)&v1149[16] = v1108;
              sub_22E6281E0(*(_QWORD **)(v1040 + 144), v658, (uint64_t)&v1130);
              *(_OWORD *)v1113 = v1148;
              *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
              *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
              v660 = *(_QWORD *)(*(_QWORD *)(v1040 + 144) + 144);
              v1088 = v1130;
              v1089 = v1131;
              *(_QWORD *)&v1090 = v1132;
              v1071 = 0uLL;
              *((_QWORD *)&v1070 + 1) = 0;
              LODWORD(v1072) = 0;
              *((_QWORD *)&v1072 + 1) = 0;
              *(_QWORD *)&v1073 = 0;
              v1074 = 0uLL;
              *(_QWORD *)((char *)&v1075 + 4) = 2;
              LODWORD(v1070) = 0;
              v1076 = 0u;
              v1077 = 0u;
              sub_22E3C113C((uint64_t)&v1070, (__int128 *)v1113, v658, 2, &v1088, v660);
              v627 = v657;
              v661 = v1031;
              v603 = v645;
              if (v656 == (_QWORD)v1054 + v1031)
              {
                sub_22E54E014((uint64_t)&v1052);
                v580 = (void **)*((_QWORD *)&v1052 + 1);
                v627 = (void **)v1053;
                v661 = *((_QWORD *)&v1054 + 1);
              }
              if (v627 == v580)
                v662 = 0;
              else
                v662 = *(uint64_t *)((char *)v580 + (((unint64_t)(v1054 + v661) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 280 * (((int)v1054 + (int)v661) & 0xF);
              v575 = v997;
              v10 = v1040;
              v1115 = v1085;
              v1116 = v1086;
              v1117 = v1087;
              *(_OWORD *)&v1113[32] = v1081;
              *(_OWORD *)&v1113[48] = v1082;
              v1114 = v1084;
              *(_OWORD *)&v1113[64] = v1083;
              *(_OWORD *)&v1113[16] = v1080;
              *(_OWORD *)v1113 = v1079;
              v1153 = v1076;
              v1154 = v1077;
              v1155 = v1078;
              *(_OWORD *)&v1149[16] = v1072;
              v1150 = v1073;
              v1151 = v1074;
              v1152 = v1075;
              v1148 = v1070;
              *(_OWORD *)v1149 = v1071;
              *(_QWORD *)v662 = 0;
              *(_OWORD *)(v662 + 8) = *(_OWORD *)v1113;
              *(_OWORD *)(v662 + 72) = *(_OWORD *)&v1113[64];
              *(_OWORD *)(v662 + 56) = *(_OWORD *)&v1113[48];
              *(_OWORD *)(v662 + 40) = *(_OWORD *)&v1113[32];
              *(_OWORD *)(v662 + 24) = *(_OWORD *)&v1113[16];
              *(_QWORD *)(v662 + 136) = v1117;
              *(_OWORD *)(v662 + 120) = v1116;
              *(_OWORD *)(v662 + 104) = v1115;
              *(_OWORD *)(v662 + 88) = v1114;
              v663 = v1154;
              *(_OWORD *)(v662 + 240) = v1153;
              *(_OWORD *)(v662 + 256) = v663;
              *(_QWORD *)(v662 + 272) = v1155;
              v664 = v1150;
              *(_OWORD *)(v662 + 176) = *(_OWORD *)&v1149[16];
              *(_OWORD *)(v662 + 192) = v664;
              v665 = v1152;
              *(_OWORD *)(v662 + 208) = v1151;
              *(_OWORD *)(v662 + 224) = v665;
              v666 = *(_OWORD *)v1149;
              *(_OWORD *)(v662 + 144) = v1148;
              *(_OWORD *)(v662 + 160) = v666;
              v640 = v661 + 1;
              *((_QWORD *)&v1054 + 1) = v640;
              ++v643;
            }
            while (v993 != v643);
          }
          goto LABEL_648;
        }
        if (!*v594)
          goto LABEL_638;
        v667 = sub_22E533554(a1, *v594);
        v669 = (uint64_t)v668;
        if (v667 != 1)
          break;
        llvm::Type::getInt32Ty(*(llvm::Type **)(v10 + 336), v668);
        v670 = llvm::ConstantInt::get();
LABEL_643:
        v675 = v594[19];
        v674 = v595[2];
        v1124 = *(_OWORD *)(v595 + 9);
        v1125 = *(_OWORD *)(v595 + 11);
        v1126 = *(_OWORD *)(v595 + 13);
        v1127 = *(_OWORD *)(v595 + 15);
        *(_OWORD *)v1121 = *(_OWORD *)(v595 + 3);
        v1122 = *(_OWORD *)(v595 + 5);
        v1123 = *(_OWORD *)(v595 + 7);
        *(_QWORD *)&v1118 = v670;
        v676 = *(_QWORD *)(a1 + 472);
        *(_QWORD *)&v1148 = v674;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v676 + 64))(v676, 9470);
        v677 = llvm::air::AIRFunctionInfo::getDeclaration();
        v678 = v677;
        if (v677)
          v679 = *(_QWORD *)(v677 + 24);
        else
          v679 = 0;
        *(_WORD *)&v1149[16] = 257;
        v680 = sub_22E462B78(v575, v679, v677, (uint64_t)&v1118, 4, (uint64_t)&v1148, 0);
        *((_QWORD *)v680 + 8) = *(_QWORD *)(v678 + 112);
        *(_QWORD *)v1113 = v675;
        *(_QWORD *)&v1113[8] = v674;
        *(_OWORD *)&v1113[16] = *(_OWORD *)v1121;
        *(_OWORD *)&v1113[32] = v1122;
        sub_22E3BEDDC((uint64_t)v575, (llvm::Type **)v680, (uint64_t)v1113);
LABEL_647:
        v603 = v13;
        v627 = v581;
        v640 = v1029;
LABEL_648:
        v581 = v627;
        v591 = v640 - 1;
        v681 = v1054;
        v583 = v1054 + 1;
        *((_QWORD *)&v1054 + 1) = v591;
        *(_QWORD *)&v1054 = v583;
        if (v583 >= 0x20)
        {
          v682 = *v580++;
          v683 = v591;
          operator delete(v682);
          v591 = v683;
          v583 = v681 - 15;
          *((_QWORD *)&v1052 + 1) = v580;
          *(_QWORD *)&v1054 = v681 - 15;
        }
        v13 = v603;
        if (!v591)
        {
LABEL_651:
          v684 = (char *)v581 - (char *)v580;
          if ((unint64_t)((char *)v581 - (char *)v580) < 0x11)
          {
            v376 = a7;
          }
          else
          {
            v376 = a7;
            do
            {
              v685 = *v580++;
              operator delete(v685);
              v684 -= 8;
            }
            while (v684 > 0x10);
          }
          *((_QWORD *)&v1052 + 1) = v580;
          while (v580 != v581)
          {
            v714 = *v580++;
            operator delete(v714);
          }
          v692 = (void *)v1052;
          if (!(_QWORD)v1052)
            goto LABEL_685;
LABEL_684:
          operator delete(v692);
          goto LABEL_685;
        }
      }
      if (v667 == 2 && v668 != 0)
      {
        v672 = (llvm::Type *)*((_QWORD *)v668 + 3);
        if ((*(_WORD *)(v669 + 34) & 0x3F) != 0)
          v673 = ((*(_WORD *)(v669 + 34) & 0x3F) + 255) | 0x100;
        else
          v673 = 0;
        *(_WORD *)&v1113[32] = 257;
        v670 = sub_22E3C3200(v575, v672, v669, v673, 0, (uint64_t)v1113);
        goto LABEL_643;
      }
LABEL_638:
      v670 = 0;
      goto LABEL_643;
    case 0x61Au:
      v1130 = 0uLL;
      v399 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *(_QWORD *)&v1131 = sub_22E50E974((uint64_t *)v1113, v399);
      v400 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *((_QWORD *)&v1131 + 1) = sub_22E50E974((uint64_t *)v1113, v400);
      v401 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *(_QWORD *)&v1132 = sub_22E50E974((uint64_t *)v1113, v401);
      sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 10] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1094);
      v402 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 10]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v1148 = v1094;
      *(_OWORD *)v1149 = v1095;
      *(_OWORD *)&v1149[16] = v1096;
      sub_22E6281E0(*(_QWORD **)(v10 + 144), v402, (uint64_t)&v1097);
      *(_OWORD *)v1113 = v1148;
      *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
      *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
      v403 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 144);
      *(_OWORD *)__p = v1097;
      v1140 = v1098;
      *(_QWORD *)&v1141 = v1099;
      LODWORD(v1063) = 0;
      *((_QWORD *)&v1061 + 1) = 0;
      v1062 = 0uLL;
      *(_QWORD *)&v1064 = 0;
      *((_QWORD *)&v1063 + 1) = 0;
      v1065 = 0uLL;
      *(_QWORD *)((char *)&v1066 + 4) = 2;
      LODWORD(v1061) = 0;
      v1067 = 0u;
      v1068 = 0u;
      sub_22E3C113C((uint64_t)&v1061, (__int128 *)v1113, v402, 2, (__int128 *)__p, v403);
      v1115 = v1067;
      v1116 = v1068;
      v1117 = v1069;
      *(_OWORD *)&v1113[32] = v1063;
      *(_OWORD *)&v1113[48] = v1064;
      v1114 = v1066;
      *(_OWORD *)&v1113[64] = v1065;
      *(_OWORD *)&v1113[16] = v1062;
      *(_OWORD *)v1113 = v1061;
      v1123 = 0u;
      v1122 = 0u;
      *(_OWORD *)v1121 = 0u;
      sub_22E54E014((uint64_t)v1121);
      v404 = (void **)v1121[1];
      v405 = (void **)v1122;
      v406 = *((_QWORD *)&v1123 + 1);
      v407 = v1123;
      v408 = *(_QWORD *)((char *)v1121[1] + ((((_QWORD)v1123 + *((_QWORD *)&v1123 + 1)) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 280 * (((_DWORD)v1123 + DWORD2(v1123)) & 0xF);
      *(_OWORD *)v408 = 0u;
      *(_OWORD *)(v408 + 16) = 0u;
      *(_OWORD *)(v408 + 32) = 0u;
      *(_OWORD *)(v408 + 48) = 0u;
      *(_OWORD *)(v408 + 64) = 0u;
      *(_OWORD *)(v408 + 76) = 0u;
      *(_DWORD *)(v408 + 92) = 2;
      *(_OWORD *)(v408 + 96) = 0u;
      *(_OWORD *)(v408 + 112) = 0u;
      *(_OWORD *)(v408 + 128) = 0u;
      *(_OWORD *)(v408 + 144) = *(_OWORD *)v1113;
      v409 = *(_OWORD *)&v1113[16];
      v410 = *(_OWORD *)&v1113[32];
      v411 = *(_OWORD *)&v1113[64];
      *(_OWORD *)(v408 + 192) = *(_OWORD *)&v1113[48];
      *(_OWORD *)(v408 + 208) = v411;
      *(_OWORD *)(v408 + 160) = v409;
      *(_OWORD *)(v408 + 176) = v410;
      v412 = v1114;
      v413 = v1115;
      v414 = v1116;
      *(_QWORD *)(v408 + 272) = v1117;
      *(_OWORD *)(v408 + 240) = v413;
      *(_OWORD *)(v408 + 256) = v414;
      *(_OWORD *)(v408 + 224) = v412;
      v415 = v406 + 1;
      *((_QWORD *)&v1123 + 1) = v406 + 1;
      if (v406 == -1)
        goto LABEL_487;
      v996 = (uint64_t *)(v10 + 272);
      v1039 = v10;
      while (1)
      {
        v416 = *(uint64_t *)((char *)v404 + ((v407 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v417 = v407 & 0xF;
        v418 = v416 + 280 * (v407 & 0xF);
        v419 = (__int128 *)(v418 + 144);
        v420 = (unint64_t *)(v418 + 208);
        v421 = sub_22F10AEAC(*(_QWORD *)(*(_QWORD *)(v418 + 208) & 0xFFFFFFFFFFFFFFF0));
        if (v421
          || (v421 = sub_22F10C2A4(*(_QWORD *)(*v420 & 0xFFFFFFFFFFFFFFF0))) != 0
          && (*(_DWORD *)(v421 + 28) & 0x7Fu) - 35 <= 2)
        {
          v422 = v416 + 280 * v417;
          v958 = *(_QWORD *)(v422 + 72);
          v423 = sub_22EFC3B90(v421);
          if (v423)
          {
            v424 = v423;
            v425 = v422 + 8;
            v426 = *(_DWORD *)(v423 + 28);
            v939 = v13;
LABEL_414:
            if ((v426 & 0x100) == 0)
              goto LABEL_423;
            sub_22EFC8E88(v424);
            v428 = *(uint64_t **)v427;
            v429 = *(unsigned int *)(v427 + 8);
            v430 = *(uint64_t **)v427;
            if ((_DWORD)v429)
            {
              v431 = 8 * v429;
              v430 = *(uint64_t **)v427;
              while (*(_WORD *)(*v430 + 32) != 385)
              {
                ++v430;
                v431 -= 8;
                if (!v431)
                  goto LABEL_423;
              }
            }
            if (v430 == &v428[v429])
            {
LABEL_423:
              v434 = 0;
            }
            else
            {
              do
              {
                v433 = *v428++;
                v432 = v433;
              }
              while (*(_WORD *)(v433 + 32) != 385);
              v434 = *(_QWORD *)(v432 + 40);
            }
            if (v958 >= 0x10)
            {
              *(_OWORD *)__p = *(_OWORD *)v425;
              v439 = *(_OWORD *)(v425 + 16);
              v440 = *(_OWORD *)(v425 + 32);
              v441 = *(_OWORD *)(v425 + 48);
              v1143 = *(_OWORD *)(v425 + 64);
              v1142 = v441;
              v1141 = v440;
              v1140 = v439;
              v442 = *(_OWORD *)(v425 + 80);
              v443 = *(_OWORD *)(v425 + 96);
              v444 = *(_OWORD *)(v425 + 112);
              v1147 = *(_QWORD *)(v425 + 128);
              v1146 = v444;
              v1145 = v443;
              v1144 = v442;
              sub_22E4DD05C(v10, (uint64_t)__p, v424, (uint64_t)v1113);
              v949 = *(_QWORD *)v1113;
              v1010 = *(_QWORD *)&v1113[24];
              LODWORD(v948) = *(_DWORD *)&v1113[36];
              v1000 = *(_DWORD *)&v1113[32];
              v973 = *(_OWORD *)&v1113[40];
              v981 = *(_OWORD *)&v1113[8];
              v947 = *(_QWORD *)&v1113[56];
              v990 = *(_QWORD *)&v1113[72];
              v435 = *(_QWORD *)&v1113[64];
              v1027 = v1114;
              v436 = DWORD2(v1114);
              LODWORD(v946) = HIDWORD(v1114);
              v965 = v1115;
              v438 = *((_QWORD *)&v1116 + 1);
              v437 = v1116;
              v945 = v1117;
            }
            else
            {
              v1000 = 0;
              v1010 = 0;
              v435 = 0;
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v1027 = v944 | 0x200000000;
              v981 = 0uLL;
              v990 = 0;
              v965 = 0uLL;
              v973 = 0uLL;
            }
            v1097 = *v419;
            v445 = v419[1];
            v446 = v419[2];
            v447 = v419[3];
            v1101 = v419[4];
            v1100 = v447;
            v1099 = v446;
            v1098 = v445;
            v448 = v419[5];
            v449 = v419[6];
            v450 = v419[7];
            v1105 = *((_QWORD *)v419 + 16);
            v1104 = v450;
            v1103 = v449;
            v1102 = v448;
            sub_22E4DD05C(v10, (uint64_t)&v1097, v424, (uint64_t)&v1148);
            v451 = (void **)v1122;
            v404 = (void **)v1121[1];
            if ((void *)v1122 == v1121[1])
              v452 = 0;
            else
              v452 = 2 * (v1122 - (unint64_t)v1121[1]) - 1;
            v453 = *((_QWORD *)&v1123 + 1);
            if (v452 == *((_QWORD *)&v1123 + 1) + (_QWORD)v1123)
            {
              sub_22E54E014((uint64_t)v1121);
              v404 = (void **)v1121[1];
              v451 = (void **)v1122;
              v453 = *((_QWORD *)&v1123 + 1);
            }
            if (v451 == v404)
              v454 = 0;
            else
              v454 = *(uint64_t *)((char *)v404 + (((unint64_t)(v1123 + v453) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 280 * (((int)v1123 + (int)v453) & 0xF);
            v456 = v1154;
            v1115 = v1153;
            v455 = v1153;
            v1116 = v1154;
            v1117 = v1155;
            v457 = v1155;
            v459 = v1150;
            *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
            v458 = *(_OWORD *)&v1149[16];
            *(_OWORD *)&v1113[48] = v1150;
            v461 = v1151;
            v1114 = v1152;
            v460 = v1152;
            *(_OWORD *)&v1113[64] = v1151;
            v463 = v1148;
            *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
            v462 = *(_OWORD *)v1149;
            *(_OWORD *)v1113 = v1148;
            *(_QWORD *)v454 = v434;
            *(_QWORD *)(v454 + 8) = v949;
            *(_OWORD *)(v454 + 16) = v981;
            *(_QWORD *)(v454 + 32) = v1010;
            *(_DWORD *)(v454 + 40) = v1000;
            *(_DWORD *)(v454 + 44) = v948;
            *(_OWORD *)(v454 + 48) = v973;
            *(_QWORD *)(v454 + 64) = v947;
            *(_QWORD *)(v454 + 72) = v435;
            *(_QWORD *)(v454 + 80) = v990;
            *(_QWORD *)(v454 + 88) = v1027;
            *(_DWORD *)(v454 + 96) = v436;
            *(_DWORD *)(v454 + 100) = v946;
            *(_OWORD *)(v454 + 104) = v965;
            *(_QWORD *)(v454 + 120) = v437;
            *(_QWORD *)(v454 + 128) = v438;
            *(_QWORD *)(v454 + 136) = v945;
            *(_OWORD *)(v454 + 144) = v463;
            *(_OWORD *)(v454 + 160) = v462;
            *(_OWORD *)(v454 + 240) = v455;
            *(_OWORD *)(v454 + 256) = v456;
            *(_QWORD *)(v454 + 272) = v457;
            *(_OWORD *)(v454 + 176) = v458;
            *(_OWORD *)(v454 + 192) = v459;
            *(_OWORD *)(v454 + 208) = v461;
            *(_OWORD *)(v454 + 224) = v460;
            v415 = v453 + 1;
            LODWORD(v944) = v1027;
            *((_QWORD *)&v1123 + 1) = v453 + 1;
            while (1)
            {
              v424 = *(_QWORD *)(v424 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v424)
                break;
              v426 = *(_DWORD *)(v424 + 28);
              if ((v426 & 0x7Fu) - 49 < 3)
                goto LABEL_414;
            }
            v464 = v939;
          }
          else
          {
            v464 = v13;
            v451 = v405;
          }
          goto LABEL_484;
        }
        v465 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v420);
        if (!v465 || *(_BYTE *)(v465 + 16) != 2)
          break;
        v466 = (unsigned int *)(v465 + 40);
        v451 = v405;
        if (*(_DWORD *)(v465 + 48) >= 0x41u)
          v466 = *(unsigned int **)v466;
        v467 = v996;
        v991 = *v466;
        if (*v466)
        {
          v982 = v465;
          v468 = 0;
          v469 = v416 + 280 * v417;
          v974 = *(_QWORD *)(v469 + 72);
          v959 = (unint64_t *)(v469 + 72);
          v940 = (__int128 *)(v469 + 16);
          v966 = (__int128 *)(v469 + 152);
          v464 = v13;
          do
          {
            if (v974 >= 0x10)
            {
              v473 = *v940;
              v474 = v940[2];
              v1053 = v940[1];
              v1054 = v474;
              v1052 = v473;
              *(_WORD *)&v1149[16] = 257;
              v475 = v451;
              sub_22E486A58(v467, (uint64_t)&v1052, v468, (uint64_t)&v1148, (uint64_t)v1113);
              v471 = *(_QWORD *)&v1113[16];
              v470 = *(_DWORD *)&v1113[24];
              v464 = *(unsigned int *)&v1113[28];
              v1001 = *(_OWORD *)&v1113[32];
              v1011 = *(_OWORD *)v1113;
              v476 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v959);
              v451 = v475;
              if (*(_BYTE *)(v476 + 16) == 2)
                v477 = v476;
              else
                v477 = 0;
              v472 = *(_QWORD *)(v477 + 32);
            }
            else
            {
              v470 = 0;
              v471 = 0;
              v472 = 0;
              v1001 = 0u;
              v1011 = 0u;
            }
            v478 = 2 * ((char *)v451 - (char *)v404) - 1;
            v479 = *v966;
            v480 = v966[1];
            v1108 = v966[2];
            v1107 = v480;
            v1106 = v479;
            *(_WORD *)&v1113[32] = 257;
            if (v451 == v404)
              v478 = 0;
            v1028 = v478;
            v481 = v451;
            sub_22E486A58(v467, (uint64_t)&v1106, v468, (uint64_t)v1113, (uint64_t)&v1043);
            v482 = *(_QWORD *)(v982 + 32);
            sub_22E6281E0(*(_QWORD **)(v1039 + 144), v472, (uint64_t)&v1070);
            *(_OWORD *)v1113 = v1011;
            *(_QWORD *)&v1113[16] = v471;
            *(_DWORD *)&v1113[24] = v470;
            *(_DWORD *)&v1113[28] = v464;
            *(_OWORD *)&v1113[32] = v1001;
            v483 = *(_QWORD *)(*(_QWORD *)(v1039 + 144) + 144);
            v1148 = v1070;
            *(_OWORD *)v1149 = v1071;
            *(_QWORD *)&v1149[16] = v1072;
            v1080 = 0uLL;
            *((_QWORD *)&v1079 + 1) = 0;
            LODWORD(v1081) = 0;
            *((_QWORD *)&v1081 + 1) = 0;
            *(_QWORD *)&v1082 = 0;
            v1083 = 0uLL;
            *(_QWORD *)((char *)&v1084 + 4) = 2;
            LODWORD(v1079) = 0;
            v1085 = 0u;
            v1086 = 0u;
            sub_22E3C113C((uint64_t)&v1079, (__int128 *)v1113, v472, 2, &v1148, v483);
            v1148 = v1043;
            *(_OWORD *)v1149 = v1044;
            *(_OWORD *)&v1149[16] = v1045;
            sub_22E6281E0(*(_QWORD **)(v1039 + 144), v482, (uint64_t)&v1088);
            *(_OWORD *)v1113 = v1148;
            *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
            *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
            v484 = *(_QWORD *)(*(_QWORD *)(v1039 + 144) + 144);
            v1091 = v1088;
            v1092 = v1089;
            *(_QWORD *)&v1093 = v1090;
            v1071 = 0uLL;
            *((_QWORD *)&v1070 + 1) = 0;
            LODWORD(v1072) = 0;
            *((_QWORD *)&v1072 + 1) = 0;
            *(_QWORD *)&v1073 = 0;
            v1074 = 0uLL;
            *(_QWORD *)((char *)&v1075 + 4) = 2;
            LODWORD(v1070) = 0;
            v1076 = 0u;
            v1077 = 0u;
            sub_22E3C113C((uint64_t)&v1070, (__int128 *)v1113, v482, 2, &v1091, v484);
            v451 = v481;
            if (v1028 == (_QWORD)v1123 + v415)
            {
              sub_22E54E014((uint64_t)v1121);
              v404 = (void **)v1121[1];
              v451 = (void **)v1122;
              v415 = *((_QWORD *)&v1123 + 1);
            }
            if (v451 == v404)
              v485 = 0;
            else
              v485 = *(uint64_t *)((char *)v404 + (((unint64_t)(v1123 + v415) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 280 * (((int)v1123 + (int)v415) & 0xF);
            v467 = v996;
            v10 = v1039;
            v1115 = v1085;
            v1116 = v1086;
            v1117 = v1087;
            *(_OWORD *)&v1113[32] = v1081;
            *(_OWORD *)&v1113[48] = v1082;
            v1114 = v1084;
            *(_OWORD *)&v1113[64] = v1083;
            *(_OWORD *)&v1113[16] = v1080;
            *(_OWORD *)v1113 = v1079;
            v1153 = v1076;
            v1154 = v1077;
            v1155 = v1078;
            *(_OWORD *)&v1149[16] = v1072;
            v1150 = v1073;
            v1151 = v1074;
            v1152 = v1075;
            v1148 = v1070;
            *(_OWORD *)v1149 = v1071;
            *(_QWORD *)v485 = 0;
            *(_OWORD *)(v485 + 8) = *(_OWORD *)v1113;
            *(_OWORD *)(v485 + 72) = *(_OWORD *)&v1113[64];
            *(_OWORD *)(v485 + 56) = *(_OWORD *)&v1113[48];
            *(_OWORD *)(v485 + 40) = *(_OWORD *)&v1113[32];
            *(_OWORD *)(v485 + 24) = *(_OWORD *)&v1113[16];
            *(_QWORD *)(v485 + 136) = v1117;
            *(_OWORD *)(v485 + 120) = v1116;
            *(_OWORD *)(v485 + 104) = v1115;
            *(_OWORD *)(v485 + 88) = v1114;
            v486 = v1154;
            *(_OWORD *)(v485 + 240) = v1153;
            *(_OWORD *)(v485 + 256) = v486;
            *(_QWORD *)(v485 + 272) = v1155;
            v487 = v1150;
            *(_OWORD *)(v485 + 176) = *(_OWORD *)&v1149[16];
            *(_OWORD *)(v485 + 192) = v487;
            v488 = v1152;
            *(_OWORD *)(v485 + 208) = v1151;
            *(_OWORD *)(v485 + 224) = v488;
            v489 = *(_OWORD *)v1149;
            *(_OWORD *)(v485 + 144) = v1148;
            *(_OWORD *)(v485 + 160) = v489;
            *((_QWORD *)&v1123 + 1) = ++v415;
            ++v468;
          }
          while (v991 != v468);
          goto LABEL_484;
        }
LABEL_483:
        v464 = v13;
LABEL_484:
        v405 = v451;
        --v415;
        v503 = v1123;
        v407 = v1123 + 1;
        *((_QWORD *)&v1123 + 1) = v415;
        *(_QWORD *)&v1123 = v407;
        if (v407 >= 0x20)
        {
          v504 = *v404++;
          operator delete(v504);
          v407 = v503 - 15;
          v1121[1] = v404;
          *(_QWORD *)&v1123 = v503 - 15;
        }
        v13 = v464;
        if (!v415)
        {
LABEL_487:
          v505 = (char *)v405 - (char *)v404;
          if ((unint64_t)((char *)v405 - (char *)v404) < 0x11)
          {
            v376 = a7;
          }
          else
          {
            v376 = a7;
            do
            {
              v506 = *v404++;
              operator delete(v506);
              v505 -= 8;
            }
            while (v505 > 0x10);
          }
          v1121[1] = v404;
          while (v404 != v405)
          {
            v691 = *v404++;
            operator delete(v691);
          }
          goto LABEL_683;
        }
      }
      if (!*(_QWORD *)v418)
        goto LABEL_473;
      v490 = sub_22E533554(a1, *(_QWORD *)v418);
      v492 = (uint64_t)v491;
      if (v490 == 1)
      {
        llvm::Type::getInt32Ty(*(llvm::Type **)(v10 + 336), v491);
        v493 = llvm::ConstantInt::get();
      }
      else
      {
        if (v490 != 2 || v491 == 0)
        {
LABEL_473:
          v495 = 0;
LABEL_479:
          v498 = *(_QWORD *)(v418 + 160);
          *(_QWORD *)v1113 = *(_QWORD *)(v418 + 152);
          *(_QWORD *)&v1113[8] = v498;
          v499 = *(_OWORD *)(v418 + 184);
          *(_OWORD *)&v1113[16] = *(_OWORD *)(v418 + 168);
          *(_OWORD *)&v1113[32] = v499;
          *(_WORD *)&v1149[16] = 257;
          *(_QWORD *)&v1130 = sub_22E3C2A7C(v996, (uint64_t)v1113, (uint64_t)&v1148);
          *((_QWORD *)&v1130 + 1) = v495;
          v500 = *(_QWORD *)(a1 + 472);
          *(_QWORD *)&v1148 = v498;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v500 + 64))(v500, 10303);
          v501 = llvm::air::AIRFunctionInfo::getDeclaration();
          if (v501)
            v502 = *(_QWORD *)(v501 + 24);
          else
            v502 = 0;
          *(_WORD *)&v1149[16] = 257;
          *((_QWORD *)sub_22E462B78(v996, v502, v501, (uint64_t)&v1130, 5, (uint64_t)&v1148, 0) + 8) = *(_QWORD *)(v501 + 112);
          v451 = v405;
          goto LABEL_483;
        }
        v496 = (llvm::Type *)*((_QWORD *)v491 + 3);
        if ((*(_WORD *)(v492 + 34) & 0x3F) != 0)
          v497 = ((*(_WORD *)(v492 + 34) & 0x3F) + 255) | 0x100;
        else
          v497 = 0;
        *(_WORD *)&v1113[32] = 257;
        v493 = sub_22E3C3200(v996, v496, v492, v497, 0, (uint64_t)v1113);
      }
      v495 = v493;
      goto LABEL_479;
    case 0x61Bu:
      v1130 = 0uLL;
      v270 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *(_QWORD *)&v1131 = sub_22E50E974((uint64_t *)v1113, v270);
      v271 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *((_QWORD *)&v1131 + 1) = sub_22E50E974((uint64_t *)v1113, v271);
      sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1094);
      v272 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v1148 = v1094;
      *(_OWORD *)v1149 = v1095;
      *(_OWORD *)&v1149[16] = v1096;
      sub_22E6281E0(*(_QWORD **)(v10 + 144), v272, (uint64_t)&v1097);
      *(_OWORD *)v1113 = v1148;
      *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
      *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
      v273 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 144);
      *(_OWORD *)__p = v1097;
      v1140 = v1098;
      *(_QWORD *)&v1141 = v1099;
      LODWORD(v1063) = 0;
      *((_QWORD *)&v1061 + 1) = 0;
      v1062 = 0uLL;
      *(_QWORD *)&v1064 = 0;
      *((_QWORD *)&v1063 + 1) = 0;
      v1065 = 0uLL;
      *(_QWORD *)((char *)&v1066 + 4) = 2;
      LODWORD(v1061) = 0;
      v1067 = 0u;
      v1068 = 0u;
      sub_22E3C113C((uint64_t)&v1061, (__int128 *)v1113, v272, 2, (__int128 *)__p, v273);
      v1115 = v1067;
      v1116 = v1068;
      v1117 = v1069;
      *(_OWORD *)&v1113[32] = v1063;
      *(_OWORD *)&v1113[48] = v1064;
      v1114 = v1066;
      *(_OWORD *)&v1113[64] = v1065;
      *(_OWORD *)&v1113[16] = v1062;
      *(_OWORD *)v1113 = v1061;
      v1123 = 0u;
      v1122 = 0u;
      *(_OWORD *)v1121 = 0u;
      sub_22E54E014((uint64_t)v1121);
      v274 = (void **)v1121[1];
      v275 = (void **)v1122;
      v276 = *((_QWORD *)&v1123 + 1);
      v277 = v1123;
      v278 = *(_QWORD *)((char *)v1121[1] + ((((_QWORD)v1123 + *((_QWORD *)&v1123 + 1)) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 280 * (((_DWORD)v1123 + DWORD2(v1123)) & 0xF);
      *(_OWORD *)v278 = 0u;
      *(_OWORD *)(v278 + 16) = 0u;
      *(_OWORD *)(v278 + 32) = 0u;
      *(_OWORD *)(v278 + 48) = 0u;
      *(_OWORD *)(v278 + 64) = 0u;
      *(_OWORD *)(v278 + 76) = 0u;
      *(_DWORD *)(v278 + 92) = 2;
      *(_OWORD *)(v278 + 96) = 0u;
      *(_OWORD *)(v278 + 112) = 0u;
      *(_OWORD *)(v278 + 128) = 0u;
      *(_OWORD *)(v278 + 144) = *(_OWORD *)v1113;
      v279 = *(_OWORD *)&v1113[16];
      v280 = *(_OWORD *)&v1113[32];
      v281 = *(_OWORD *)&v1113[64];
      *(_OWORD *)(v278 + 192) = *(_OWORD *)&v1113[48];
      *(_OWORD *)(v278 + 208) = v281;
      *(_OWORD *)(v278 + 160) = v279;
      *(_OWORD *)(v278 + 176) = v280;
      v282 = v1114;
      v283 = v1115;
      v284 = v1116;
      *(_QWORD *)(v278 + 272) = v1117;
      *(_OWORD *)(v278 + 240) = v283;
      *(_OWORD *)(v278 + 256) = v284;
      *(_OWORD *)(v278 + 224) = v282;
      v285 = v276 + 1;
      *((_QWORD *)&v1123 + 1) = v276 + 1;
      if (v276 == -1)
        goto LABEL_382;
      v994 = (uint64_t *)(v10 + 272);
      v1038 = v10;
      while (1)
      {
        v286 = *(uint64_t *)((char *)v274 + ((v277 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v287 = v277 & 0xF;
        v288 = (uint64_t *)(v286 + 280 * (v277 & 0xF));
        v289 = v288 + 18;
        v290 = (unint64_t *)(v288 + 26);
        v291 = sub_22F10AEAC(*(_QWORD *)(v288[26] & 0xFFFFFFFFFFFFFFF0));
        if (!v291)
        {
          v291 = sub_22F10C2A4(*(_QWORD *)(*v290 & 0xFFFFFFFFFFFFFFF0));
          if (!v291 || (*(_DWORD *)(v291 + 28) & 0x7Fu) - 35 > 2)
            break;
        }
        v292 = v286 + 280 * v287;
        v951 = *(_QWORD *)(v292 + 72);
        v293 = sub_22EFC3B90(v291);
        if (!v293)
        {
          v297 = v13;
LABEL_378:
          v321 = v275;
          goto LABEL_379;
        }
        v294 = v293;
        v295 = v292 + 8;
        v296 = *(_DWORD *)(v293 + 28);
        v297 = v13;
LABEL_309:
        if ((v296 & 0x100) == 0)
          goto LABEL_318;
        sub_22EFC8E88(v294);
        v299 = *(uint64_t **)v298;
        v300 = *(unsigned int *)(v298 + 8);
        v301 = *(uint64_t **)v298;
        if ((_DWORD)v300)
        {
          v302 = 8 * v300;
          v301 = *(uint64_t **)v298;
          while (*(_WORD *)(*v301 + 32) != 385)
          {
            ++v301;
            v302 -= 8;
            if (!v302)
              goto LABEL_318;
          }
        }
        if (v301 == &v299[v300])
        {
LABEL_318:
          v1025 = 0;
        }
        else
        {
          do
          {
            v304 = *v299++;
            v303 = v304;
          }
          while (*(_WORD *)(v304 + 32) != 385);
          v1025 = *(_QWORD *)(v303 + 40);
        }
        if (v951 >= 0x10)
        {
          *(_OWORD *)__p = *(_OWORD *)v295;
          v309 = *(_OWORD *)(v295 + 16);
          v310 = *(_OWORD *)(v295 + 32);
          v311 = *(_OWORD *)(v295 + 48);
          v1143 = *(_OWORD *)(v295 + 64);
          v1142 = v311;
          v1141 = v310;
          v1140 = v309;
          v312 = *(_OWORD *)(v295 + 80);
          v313 = *(_OWORD *)(v295 + 96);
          v314 = *(_OWORD *)(v295 + 112);
          v1147 = *(_QWORD *)(v295 + 128);
          v1146 = v314;
          v1145 = v313;
          v1144 = v312;
          sub_22E4DD05C(v10, (uint64_t)__p, v294, (uint64_t)v1113);
          v948 = *(_QWORD *)v1113;
          v998 = *(_QWORD *)&v1113[24];
          LODWORD(v947) = *(_DWORD *)&v1113[36];
          v988 = *(_DWORD *)&v1113[32];
          v963 = *(_OWORD *)&v1113[40];
          v971 = *(_OWORD *)&v1113[8];
          v946 = *(_QWORD *)&v1113[56];
          v979 = *(_QWORD *)&v1113[72];
          v305 = *(_QWORD *)&v1113[64];
          v1008 = v1114;
          v306 = DWORD2(v1114);
          LODWORD(v945) = HIDWORD(v1114);
          v957 = v1115;
          v308 = *((_QWORD *)&v1116 + 1);
          v307 = v1116;
          v944 = v1117;
        }
        else
        {
          v988 = 0;
          v998 = 0;
          v305 = 0;
          v306 = 0;
          v307 = 0;
          v308 = 0;
          v1008 = v956 | 0x200000000;
          v971 = 0uLL;
          v979 = 0;
          v957 = 0uLL;
          v963 = 0uLL;
        }
        v1097 = *(_OWORD *)v289;
        v315 = *((_OWORD *)v289 + 1);
        v316 = *((_OWORD *)v289 + 2);
        v317 = *((_OWORD *)v289 + 3);
        v1101 = *((_OWORD *)v289 + 4);
        v1100 = v317;
        v1099 = v316;
        v1098 = v315;
        v318 = *((_OWORD *)v289 + 5);
        v319 = *((_OWORD *)v289 + 6);
        v320 = *((_OWORD *)v289 + 7);
        v1105 = v289[16];
        v1104 = v320;
        v1103 = v319;
        v1102 = v318;
        sub_22E4DD05C(v10, (uint64_t)&v1097, v294, (uint64_t)&v1148);
        v321 = (void **)v1122;
        v274 = (void **)v1121[1];
        if ((void *)v1122 == v1121[1])
          v322 = 0;
        else
          v322 = 2 * (v1122 - (unint64_t)v1121[1]) - 1;
        v323 = *((_QWORD *)&v1123 + 1);
        if (v322 == *((_QWORD *)&v1123 + 1) + (_QWORD)v1123)
        {
          sub_22E54E014((uint64_t)v1121);
          v274 = (void **)v1121[1];
          v321 = (void **)v1122;
          v323 = *((_QWORD *)&v1123 + 1);
        }
        if (v321 == v274)
          v324 = 0;
        else
          v324 = *(uint64_t *)((char *)v274 + (((unint64_t)(v1123 + v323) >> 1) & 0x7FFFFFFFFFFFFFF8))
               + 280 * (((int)v1123 + (int)v323) & 0xF);
        v326 = v1154;
        v1115 = v1153;
        v325 = v1153;
        v1116 = v1154;
        v1117 = v1155;
        v327 = v1155;
        v329 = v1150;
        *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
        v328 = *(_OWORD *)&v1149[16];
        *(_OWORD *)&v1113[48] = v1150;
        v331 = v1151;
        v1114 = v1152;
        v330 = v1152;
        *(_OWORD *)&v1113[64] = v1151;
        v333 = v1148;
        *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
        v332 = *(_OWORD *)v1149;
        *(_OWORD *)v1113 = v1148;
        *(_QWORD *)v324 = v1025;
        *(_QWORD *)(v324 + 8) = v948;
        *(_OWORD *)(v324 + 16) = v971;
        *(_QWORD *)(v324 + 32) = v998;
        *(_DWORD *)(v324 + 40) = v988;
        *(_DWORD *)(v324 + 44) = v947;
        *(_OWORD *)(v324 + 48) = v963;
        *(_QWORD *)(v324 + 64) = v946;
        *(_QWORD *)(v324 + 72) = v305;
        *(_QWORD *)(v324 + 80) = v979;
        *(_QWORD *)(v324 + 88) = v1008;
        *(_DWORD *)(v324 + 96) = v306;
        *(_DWORD *)(v324 + 100) = v945;
        *(_OWORD *)(v324 + 104) = v957;
        *(_QWORD *)(v324 + 120) = v307;
        *(_QWORD *)(v324 + 128) = v308;
        *(_QWORD *)(v324 + 136) = v944;
        *(_OWORD *)(v324 + 144) = v333;
        *(_OWORD *)(v324 + 160) = v332;
        *(_OWORD *)(v324 + 240) = v325;
        *(_OWORD *)(v324 + 256) = v326;
        *(_QWORD *)(v324 + 272) = v327;
        *(_OWORD *)(v324 + 176) = v328;
        *(_OWORD *)(v324 + 192) = v329;
        *(_OWORD *)(v324 + 208) = v331;
        *(_OWORD *)(v324 + 224) = v330;
        v285 = v323 + 1;
        v956 = v1008;
        *((_QWORD *)&v1123 + 1) = v323 + 1;
        while (1)
        {
          v294 = *(_QWORD *)(v294 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v294)
            break;
          v296 = *(_DWORD *)(v294 + 28);
          if ((v296 & 0x7Fu) - 49 < 3)
            goto LABEL_309;
        }
LABEL_379:
        v275 = v321;
        --v285;
        v373 = v1123;
        v277 = v1123 + 1;
        *((_QWORD *)&v1123 + 1) = v285;
        *(_QWORD *)&v1123 = v277;
        if (v277 >= 0x20)
        {
          v374 = *v274++;
          operator delete(v374);
          v277 = v373 - 15;
          v1121[1] = v274;
          *(_QWORD *)&v1123 = v373 - 15;
        }
        v13 = v297;
        if (!v285)
        {
LABEL_382:
          v375 = (char *)v275 - (char *)v274;
          if ((unint64_t)((char *)v275 - (char *)v274) < 0x11)
          {
            v376 = a7;
          }
          else
          {
            v376 = a7;
            do
            {
              v377 = *v274++;
              operator delete(v377);
              v375 -= 8;
            }
            while (v375 > 0x10);
          }
          v1121[1] = v274;
          while (v274 != v275)
          {
            v689 = *v274++;
            operator delete(v689);
          }
LABEL_683:
          v692 = v1121[0];
          if (!v1121[0])
            goto LABEL_685;
          goto LABEL_684;
        }
      }
      v334 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v290);
      if (v334 && *(_BYTE *)(v334 + 16) == 2)
      {
        v335 = (unsigned int *)(v334 + 40);
        v297 = v13;
        v321 = v275;
        if (*(_DWORD *)(v334 + 48) >= 0x41u)
          v335 = *(unsigned int **)v335;
        v336 = v994;
        v989 = *v335;
        if (*v335)
        {
          v980 = v334;
          v337 = 0;
          v338 = v286 + 280 * v287;
          v972 = *(_QWORD *)(v338 + 72);
          v952 = (unint64_t *)(v338 + 72);
          v938 = (__int128 *)(v338 + 16);
          v964 = (__int128 *)(v338 + 152);
          do
          {
            if (v972 >= 0x10)
            {
              v343 = *v938;
              v344 = v938[2];
              v1053 = v938[1];
              v1054 = v344;
              v1052 = v343;
              *(_WORD *)&v1149[16] = 257;
              v345 = v321;
              sub_22E486A58(v336, (uint64_t)&v1052, v337, (uint64_t)&v1148, (uint64_t)v1113);
              v341 = *(_QWORD *)&v1113[16];
              v340 = *(_DWORD *)&v1113[24];
              v339 = *(unsigned int *)&v1113[28];
              v999 = *(_OWORD *)&v1113[32];
              v1009 = *(_OWORD *)v1113;
              v346 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v952);
              v321 = v345;
              if (*(_BYTE *)(v346 + 16) == 2)
                v347 = v346;
              else
                v347 = 0;
              v342 = *(_QWORD *)(v347 + 32);
            }
            else
            {
              v339 = v297;
              v340 = 0;
              v341 = 0;
              v342 = 0;
              v999 = 0u;
              v1009 = 0u;
            }
            v348 = 2 * ((char *)v321 - (char *)v274) - 1;
            v349 = *v964;
            v350 = v964[1];
            v1108 = v964[2];
            v1107 = v350;
            v1106 = v349;
            *(_WORD *)&v1113[32] = 257;
            if (v321 == v274)
              v348 = 0;
            v1026 = v348;
            v351 = v321;
            sub_22E486A58(v336, (uint64_t)&v1106, v337, (uint64_t)v1113, (uint64_t)&v1043);
            v352 = *(_QWORD *)(v980 + 32);
            sub_22E6281E0(*(_QWORD **)(v1038 + 144), v342, (uint64_t)&v1070);
            *(_OWORD *)v1113 = v1009;
            *(_QWORD *)&v1113[16] = v341;
            *(_DWORD *)&v1113[24] = v340;
            *(_DWORD *)&v1113[28] = v339;
            *(_OWORD *)&v1113[32] = v999;
            v353 = *(_QWORD *)(*(_QWORD *)(v1038 + 144) + 144);
            v1148 = v1070;
            *(_OWORD *)v1149 = v1071;
            *(_QWORD *)&v1149[16] = v1072;
            v1080 = 0uLL;
            *((_QWORD *)&v1079 + 1) = 0;
            LODWORD(v1081) = 0;
            *((_QWORD *)&v1081 + 1) = 0;
            *(_QWORD *)&v1082 = 0;
            v1083 = 0uLL;
            *(_QWORD *)((char *)&v1084 + 4) = 2;
            LODWORD(v1079) = 0;
            v1085 = 0u;
            v1086 = 0u;
            sub_22E3C113C((uint64_t)&v1079, (__int128 *)v1113, v342, 2, &v1148, v353);
            v1148 = v1043;
            *(_OWORD *)v1149 = v1044;
            *(_OWORD *)&v1149[16] = v1045;
            sub_22E6281E0(*(_QWORD **)(v1038 + 144), v352, (uint64_t)&v1088);
            *(_OWORD *)v1113 = v1148;
            *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
            *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
            v354 = *(_QWORD *)(*(_QWORD *)(v1038 + 144) + 144);
            v1091 = v1088;
            v1092 = v1089;
            *(_QWORD *)&v1093 = v1090;
            v1071 = 0uLL;
            *((_QWORD *)&v1070 + 1) = 0;
            LODWORD(v1072) = 0;
            *((_QWORD *)&v1072 + 1) = 0;
            *(_QWORD *)&v1073 = 0;
            v1074 = 0uLL;
            *(_QWORD *)((char *)&v1075 + 4) = 2;
            LODWORD(v1070) = 0;
            v1076 = 0u;
            v1077 = 0u;
            sub_22E3C113C((uint64_t)&v1070, (__int128 *)v1113, v352, 2, &v1091, v354);
            v321 = v351;
            v297 = v339;
            if (v1026 == (_QWORD)v1123 + v285)
            {
              sub_22E54E014((uint64_t)v1121);
              v274 = (void **)v1121[1];
              v321 = (void **)v1122;
              v285 = *((_QWORD *)&v1123 + 1);
            }
            if (v321 == v274)
              v355 = 0;
            else
              v355 = *(uint64_t *)((char *)v274 + (((unint64_t)(v1123 + v285) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 280 * (((int)v1123 + (int)v285) & 0xF);
            v336 = v994;
            v10 = v1038;
            v1115 = v1085;
            v1116 = v1086;
            v1117 = v1087;
            *(_OWORD *)&v1113[32] = v1081;
            *(_OWORD *)&v1113[48] = v1082;
            v1114 = v1084;
            *(_OWORD *)&v1113[64] = v1083;
            *(_OWORD *)&v1113[16] = v1080;
            *(_OWORD *)v1113 = v1079;
            v1153 = v1076;
            v1154 = v1077;
            v1155 = v1078;
            *(_OWORD *)&v1149[16] = v1072;
            v1150 = v1073;
            v1151 = v1074;
            v1152 = v1075;
            v1148 = v1070;
            *(_OWORD *)v1149 = v1071;
            *(_QWORD *)v355 = 0;
            *(_OWORD *)(v355 + 8) = *(_OWORD *)v1113;
            *(_OWORD *)(v355 + 72) = *(_OWORD *)&v1113[64];
            *(_OWORD *)(v355 + 56) = *(_OWORD *)&v1113[48];
            *(_OWORD *)(v355 + 40) = *(_OWORD *)&v1113[32];
            *(_OWORD *)(v355 + 24) = *(_OWORD *)&v1113[16];
            *(_QWORD *)(v355 + 136) = v1117;
            *(_OWORD *)(v355 + 120) = v1116;
            *(_OWORD *)(v355 + 104) = v1115;
            *(_OWORD *)(v355 + 88) = v1114;
            v356 = v1154;
            *(_OWORD *)(v355 + 240) = v1153;
            *(_OWORD *)(v355 + 256) = v356;
            *(_QWORD *)(v355 + 272) = v1155;
            v357 = v1150;
            *(_OWORD *)(v355 + 176) = *(_OWORD *)&v1149[16];
            *(_OWORD *)(v355 + 192) = v357;
            v358 = v1152;
            *(_OWORD *)(v355 + 208) = v1151;
            *(_OWORD *)(v355 + 224) = v358;
            v359 = *(_OWORD *)v1149;
            *(_OWORD *)(v355 + 144) = v1148;
            *(_OWORD *)(v355 + 160) = v359;
            *((_QWORD *)&v1123 + 1) = ++v285;
            ++v337;
          }
          while (v989 != v337);
        }
        goto LABEL_379;
      }
      if (*v288)
      {
        v360 = sub_22E533554(a1, *v288);
        v362 = (uint64_t)v361;
        v297 = v13;
        if (v360 == 1)
        {
          llvm::Type::getInt32Ty(*(llvm::Type **)(v10 + 336), v361);
          v363 = llvm::ConstantInt::get();
LABEL_373:
          v364 = v363;
          goto LABEL_374;
        }
        if (v360 == 2 && v361 != 0)
        {
          v366 = (llvm::Type *)*((_QWORD *)v361 + 3);
          if ((*(_WORD *)(v362 + 34) & 0x3F) != 0)
            v367 = ((*(_WORD *)(v362 + 34) & 0x3F) + 255) | 0x100;
          else
            v367 = 0;
          *(_WORD *)&v1113[32] = 257;
          v363 = sub_22E3C3200(v994, v366, v362, v367, 0, (uint64_t)v1113);
          goto LABEL_373;
        }
        v364 = 0;
      }
      else
      {
        v364 = 0;
        v297 = v13;
      }
LABEL_374:
      v368 = v289[2];
      *(_QWORD *)v1113 = v289[1];
      *(_QWORD *)&v1113[8] = v368;
      v369 = *(_OWORD *)(v289 + 5);
      *(_OWORD *)&v1113[16] = *(_OWORD *)(v289 + 3);
      *(_OWORD *)&v1113[32] = v369;
      *(_WORD *)&v1149[16] = 257;
      *(_QWORD *)&v1130 = sub_22E3C2A7C(v994, (uint64_t)v1113, (uint64_t)&v1148);
      *((_QWORD *)&v1130 + 1) = v364;
      v370 = *(_QWORD *)(a1 + 472);
      *(_QWORD *)&v1148 = v368;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v370 + 64))(v370, 10304);
      v371 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v371)
        v372 = *(_QWORD *)(v371 + 24);
      else
        v372 = 0;
      *(_WORD *)&v1149[16] = 257;
      *((_QWORD *)sub_22E462B78(v994, v372, v371, (uint64_t)&v1130, 4, (uint64_t)&v1148, 0) + 8) = *(_QWORD *)(v371 + 112);
      goto LABEL_378;
    case 0x61Cu:
      sub_22F26697C(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x61Du:
      v1135 = 0;
      v1134 = 0u;
      v1133 = 0u;
      v389 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      v995 = (uint64_t *)(v10 + 272);
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      *(_QWORD *)&v1134 = sub_22E50E974((uint64_t *)v1113, v389);
      sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1130);
      v390 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v1148 = v1130;
      *(_OWORD *)v1149 = v1131;
      *(_OWORD *)&v1149[16] = v1132;
      sub_22E6281E0(*(_QWORD **)(v10 + 144), v390, (uint64_t)&v1097);
      *(_OWORD *)v1113 = v1148;
      *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
      *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
      v391 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 144);
      *(_OWORD *)__p = v1097;
      v1140 = v1098;
      *(_QWORD *)&v1141 = v1099;
      LODWORD(v1063) = 0;
      *((_QWORD *)&v1061 + 1) = 0;
      v1062 = 0uLL;
      *(_QWORD *)&v1064 = 0;
      *((_QWORD *)&v1063 + 1) = 0;
      v1065 = 0uLL;
      *(_QWORD *)((char *)&v1066 + 4) = 2;
      LODWORD(v1061) = 0;
      v1067 = 0u;
      v1068 = 0u;
      sub_22E3C113C((uint64_t)&v1061, (__int128 *)v1113, v390, 2, (__int128 *)__p, v391);
      sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6] + ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1118);
      v392 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v1148 = v1118;
      *(_OWORD *)v1149 = v1119;
      *(_OWORD *)&v1149[16] = v1120;
      sub_22E6281E0(*(_QWORD **)(v10 + 144), v392, (uint64_t)&v1097);
      *(_OWORD *)v1113 = v1148;
      *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
      *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
      v393 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 144);
      *(_OWORD *)__p = v1097;
      v1140 = v1098;
      *(_QWORD *)&v1141 = v1099;
      LODWORD(v1123) = 0;
      v1121[1] = 0;
      v1122 = 0uLL;
      *(_QWORD *)&v1124 = 0;
      *((_QWORD *)&v1123 + 1) = 0;
      v1125 = 0uLL;
      *(_QWORD *)((char *)&v1126 + 4) = 2;
      LODWORD(v1121[0]) = 0;
      v1128 = 0u;
      v1127 = 0u;
      sub_22E3C113C((uint64_t)v1121, (__int128 *)v1113, v392, 2, (__int128 *)__p, v393);
      v1058 = v1067;
      v1059 = v1068;
      v1060 = v1069;
      v1054 = v1063;
      v1055 = v1064;
      v1056 = v1065;
      v1057 = v1066;
      v1052 = v1061;
      v1053 = v1062;
      v1049 = v1127;
      v1050 = v1128;
      v1051 = v1129;
      v1045 = v1123;
      v1046 = v1124;
      v1047 = v1125;
      v1048 = v1126;
      v1043 = *(_OWORD *)v1121;
      v1044 = v1122;
      v1108 = 0u;
      v1107 = 0u;
      v1106 = 0u;
      sub_22E54E014((uint64_t)&v1106);
      v394 = (void **)*((_QWORD *)&v1106 + 1);
      v395 = (void **)v1107;
      v396 = *((_QWORD *)&v1108 + 1);
      v397 = v1108;
      v1020 = v12;
      if ((_QWORD)v1107 == *((_QWORD *)&v1106 + 1))
        v398 = 0;
      else
        v398 = *(_QWORD *)(*((_QWORD *)&v1106 + 1)
                         + ((((_QWORD)v1108 + *((_QWORD *)&v1108 + 1)) >> 1) & 0x7FFFFFFFFFFFFFF8))
             + 280 * (((_DWORD)v1108 + DWORD2(v1108)) & 0xF);
      *(_QWORD *)v398 = 0;
      *(_OWORD *)(v398 + 88) = v1057;
      *(_OWORD *)(v398 + 104) = v1058;
      *(_OWORD *)(v398 + 120) = v1059;
      *(_QWORD *)(v398 + 136) = v1060;
      *(_OWORD *)(v398 + 24) = v1053;
      *(_OWORD *)(v398 + 40) = v1054;
      *(_OWORD *)(v398 + 56) = v1055;
      *(_OWORD *)(v398 + 72) = v1056;
      *(_OWORD *)(v398 + 8) = v1052;
      v719 = v1050;
      *(_OWORD *)(v398 + 240) = v1049;
      *(_OWORD *)(v398 + 256) = v719;
      *(_QWORD *)(v398 + 272) = v1051;
      v720 = v1046;
      *(_OWORD *)(v398 + 176) = v1045;
      *(_OWORD *)(v398 + 192) = v720;
      v721 = v1048;
      *(_OWORD *)(v398 + 208) = v1047;
      *(_OWORD *)(v398 + 224) = v721;
      v722 = v1044;
      *(_OWORD *)(v398 + 144) = v1043;
      *(_OWORD *)(v398 + 160) = v722;
      v723 = v396 + 1;
      *((_QWORD *)&v1108 + 1) = v396 + 1;
      if (v396 == -1)
        goto LABEL_815;
      v1037 = v11;
      do
      {
        v724 = v723;
        v725 = v395;
        v726 = *(uint64_t *)((char *)v394 + ((v397 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v727 = v397 & 0xF;
        v728 = (uint64_t *)(v726 + 280 * (v397 & 0xF));
        v729 = v728 + 18;
        v730 = (unint64_t *)(v728 + 26);
        v731 = sub_22F10AEAC(*(_QWORD *)(v728[26] & 0xFFFFFFFFFFFFFFF0));
        if (v731
          || (v731 = sub_22F10C2A4(*(_QWORD *)(*v730 & 0xFFFFFFFFFFFFFFF0))) != 0
          && (*(_DWORD *)(v731 + 28) & 0x7Fu) - 35 <= 2)
        {
          v732 = v726 + 280 * v727;
          v733 = *(_QWORD *)(v732 + 72);
          v734 = sub_22EFC3B90(v731);
          if (!v734)
            goto LABEL_793;
          v735 = v734;
          v736 = v732 + 8;
          v942 = v733;
          if ((*(_DWORD *)(v734 + 28) & 0x100) != 0)
          {
LABEL_744:
            sub_22EFC8E88(v735);
            v738 = *(uint64_t **)v737;
            v739 = *(unsigned int *)(v737 + 8);
            v740 = *(uint64_t **)v737;
            if ((_DWORD)v739)
            {
              v741 = 8 * v739;
              v740 = *(uint64_t **)v737;
              while (*(_WORD *)(*v740 + 32) != 385)
              {
                ++v740;
                v741 -= 8;
                if (!v741)
                  goto LABEL_752;
              }
            }
            if (v740 != &v738[v739])
            {
              do
              {
                v743 = *v738++;
                v742 = v743;
              }
              while (*(_WORD *)(v743 + 32) != 385);
              v1032 = *(_QWORD *)(v742 + 40);
LABEL_753:
              if (v733 >= 0x10)
              {
                *(_OWORD *)__p = *(_OWORD *)v736;
                v748 = *(_OWORD *)(v736 + 16);
                v749 = *(_OWORD *)(v736 + 32);
                v750 = *(_OWORD *)(v736 + 48);
                v1143 = *(_OWORD *)(v736 + 64);
                v1142 = v750;
                v1141 = v749;
                v1140 = v748;
                v751 = *(_OWORD *)(v736 + 80);
                v752 = *(_OWORD *)(v736 + 96);
                v753 = *(_OWORD *)(v736 + 112);
                v1147 = *(_QWORD *)(v736 + 128);
                v1146 = v753;
                v1145 = v752;
                v1144 = v751;
                sub_22E4DD05C(v10, (uint64_t)__p, v735, (uint64_t)v1113);
                v948 = *(_QWORD *)v1113;
                v1004 = *(_QWORD *)&v1113[24];
                LODWORD(v947) = *(_DWORD *)&v1113[36];
                v985 = *(_DWORD *)&v1113[32];
                v961 = *(_OWORD *)&v1113[40];
                v969 = *(_OWORD *)&v1113[8];
                v946 = *(_QWORD *)&v1113[56];
                v977 = *(_QWORD *)&v1113[72];
                v744 = *(_QWORD *)&v1113[64];
                v1014 = v1114;
                v745 = DWORD2(v1114);
                LODWORD(v945) = HIDWORD(v1114);
                v955 = v1115;
                v747 = *((_QWORD *)&v1116 + 1);
                v746 = v1116;
                v944 = v1117;
              }
              else
              {
                v985 = 0;
                v1004 = 0;
                v744 = 0;
                v745 = 0;
                v746 = 0;
                v747 = 0;
                v1014 = v950 | 0x200000000;
                v969 = 0uLL;
                v977 = 0;
                v955 = 0uLL;
                v961 = 0uLL;
              }
              v1097 = *(_OWORD *)v729;
              v754 = *((_OWORD *)v729 + 1);
              v755 = *((_OWORD *)v729 + 2);
              v756 = *((_OWORD *)v729 + 3);
              v1101 = *((_OWORD *)v729 + 4);
              v1100 = v756;
              v1099 = v755;
              v1098 = v754;
              v757 = *((_OWORD *)v729 + 5);
              v758 = *((_OWORD *)v729 + 6);
              v759 = *((_OWORD *)v729 + 7);
              v1105 = v729[16];
              v1104 = v759;
              v1103 = v758;
              v1102 = v757;
              sub_22E4DD05C(v10, (uint64_t)&v1097, v735, (uint64_t)&v1148);
              v394 = (void **)*((_QWORD *)&v1106 + 1);
              v760 = (void **)v1107;
              if ((_QWORD)v1107 == *((_QWORD *)&v1106 + 1))
                v761 = 0;
              else
                v761 = 2 * (v1107 - *((_QWORD *)&v1106 + 1)) - 1;
              v762 = *((_QWORD *)&v1108 + 1);
              if (v761 == *((_QWORD *)&v1108 + 1) + (_QWORD)v1108)
              {
                sub_22E54E014((uint64_t)&v1106);
                v394 = (void **)*((_QWORD *)&v1106 + 1);
                v760 = (void **)v1107;
                v762 = *((_QWORD *)&v1108 + 1);
              }
              if (v760 == v394)
                v763 = 0;
              else
                v763 = *(uint64_t *)((char *)v394 + (((unint64_t)(v1108 + v762) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 280 * (((int)v1108 + (int)v762) & 0xF);
              v765 = v1154;
              v1115 = v1153;
              v764 = v1153;
              v1116 = v1154;
              v1117 = v1155;
              v766 = v1155;
              v768 = v1150;
              *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
              v767 = *(_OWORD *)&v1149[16];
              *(_OWORD *)&v1113[48] = v1150;
              v770 = v1151;
              v1114 = v1152;
              v769 = v1152;
              *(_OWORD *)&v1113[64] = v1151;
              v772 = v1148;
              *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
              v771 = *(_OWORD *)v1149;
              *(_OWORD *)v1113 = v1148;
              *(_QWORD *)v763 = v1032;
              *(_QWORD *)(v763 + 8) = v948;
              *(_OWORD *)(v763 + 16) = v969;
              *(_QWORD *)(v763 + 32) = v1004;
              *(_DWORD *)(v763 + 40) = v985;
              *(_DWORD *)(v763 + 44) = v947;
              *(_OWORD *)(v763 + 48) = v961;
              *(_QWORD *)(v763 + 64) = v946;
              *(_QWORD *)(v763 + 72) = v744;
              *(_QWORD *)(v763 + 80) = v977;
              *(_QWORD *)(v763 + 88) = v1014;
              *(_DWORD *)(v763 + 96) = v745;
              *(_DWORD *)(v763 + 100) = v945;
              *(_OWORD *)(v763 + 104) = v955;
              *(_QWORD *)(v763 + 120) = v746;
              *(_QWORD *)(v763 + 128) = v747;
              *(_QWORD *)(v763 + 136) = v944;
              *(_OWORD *)(v763 + 144) = v772;
              *(_OWORD *)(v763 + 160) = v771;
              *(_OWORD *)(v763 + 240) = v764;
              *(_OWORD *)(v763 + 256) = v765;
              *(_QWORD *)(v763 + 272) = v766;
              *(_OWORD *)(v763 + 176) = v767;
              *(_OWORD *)(v763 + 192) = v768;
              *(_OWORD *)(v763 + 208) = v770;
              *(_OWORD *)(v763 + 224) = v769;
              v773 = v762 + 1;
              v950 = v1014;
              *((_QWORD *)&v1108 + 1) = v762 + 1;
              v395 = v760;
              while (1)
              {
                v735 = *(_QWORD *)(v735 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v735)
                  goto LABEL_812;
                v774 = *(_DWORD *)(v735 + 28);
                if ((v774 & 0x7Fu) - 49 < 3)
                {
                  v733 = v942;
                  if ((v774 & 0x100) != 0)
                    goto LABEL_744;
                  break;
                }
              }
            }
          }
LABEL_752:
          v1032 = 0;
          goto LABEL_753;
        }
        v775 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 144), *v730);
        if (!v775 || *(_BYTE *)(v775 + 16) != 2)
        {
          if (*v728)
          {
            v802 = sub_22E533554(v11, *v728);
            v804 = (uint64_t)v803;
            if (v802 == 1)
            {
              llvm::Type::getInt32Ty(*(llvm::Type **)(v10 + 336), v803);
              llvm::ConstantInt::get();
            }
            else if (v802 == 2 && v803 != 0)
            {
              v806 = (llvm::Type *)*((_QWORD *)v803 + 3);
              if ((*(_WORD *)(v804 + 34) & 0x3F) != 0)
                v807 = ((*(_WORD *)(v804 + 34) & 0x3F) + 255) | 0x100;
              else
                v807 = 0;
              *(_WORD *)&v1113[32] = 257;
              sub_22E3C3200(v995, v806, v804, v807, 0, (uint64_t)v1113);
            }
          }
          v808 = v726 + 280 * v727;
          *(_OWORD *)v1138 = *(_OWORD *)(v808 + 8);
          v809 = *(_QWORD *)(v808 + 32);
          *(_QWORD *)&v1138[16] = *(_QWORD *)(v808 + 24);
          v810 = *(_OWORD *)(v808 + 56);
          v1136 = *(_OWORD *)(v808 + 40);
          v1137 = v810;
          v811 = *(_QWORD *)(v808 + 72);
          v812 = v729[2];
          *(_QWORD *)&v1079 = v729[1];
          *((_QWORD *)&v1079 + 1) = v812;
          v813 = *(_OWORD *)(v729 + 5);
          v1080 = *(_OWORD *)(v729 + 3);
          v1081 = v813;
          *(_WORD *)&v1113[32] = 257;
          *(_QWORD *)&v1133 = sub_22E3C2A7C(v995, (uint64_t)&v1079, (uint64_t)v1113);
          v1148 = *(_OWORD *)&v1138[8];
          *(_QWORD *)v1149 = v809;
          *(_OWORD *)&v1149[8] = v1136;
          *(_QWORD *)&v1149[24] = v1137;
          sub_22E5E0440(v10, (uint64_t)&v1148, v811, v1113);
          *((_QWORD *)&v1133 + 1) = *(_QWORD *)v1113;
          llvm::Type::getInt32Ty(*(llvm::Type **)(v10 + 336), v814);
          *((_QWORD *)&v1134 + 1) = llvm::ConstantInt::get();
          llvm::Type::getInt1Ty(*(llvm::Type **)(v10 + 336), v815);
          v1135 = llvm::ConstantInt::get();
          v816 = *(_QWORD *)(v11 + 472);
          *(_QWORD *)v1113 = v812;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v816 + 64))(v816, 10302);
          v817 = llvm::air::AIRFunctionInfo::getDeclaration();
          if (v817)
            v818 = *(_QWORD *)(v817 + 24);
          else
            v818 = 0;
          v395 = v725;
          *(_WORD *)&v1113[32] = 257;
          *((_QWORD *)sub_22E462B78(v995, v818, v817, (uint64_t)&v1133, 5, (uint64_t)v1113, 0) + 8) = *(_QWORD *)(v817 + 112);
          goto LABEL_811;
        }
        v776 = (unsigned int *)(v775 + 40);
        v986 = v775;
        if (*(_DWORD *)(v775 + 48) >= 0x41u)
          v776 = *(unsigned int **)v776;
        v978 = *v776;
        if (!*v776)
        {
LABEL_793:
          v395 = v725;
LABEL_811:
          v773 = v724;
          goto LABEL_812;
        }
        v777 = 0;
        v778 = v726 + 280 * v727;
        v970 = *(_QWORD *)(v778 + 72);
        v943 = (unint64_t *)(v778 + 72);
        v937 = (__int128 *)(v778 + 16);
        v962 = (__int128 *)(v778 + 152);
        v395 = v725;
        v773 = v724;
        do
        {
          v1033 = v773;
          v779 = v10;
          v780 = v995;
          if (v970 >= 0x10)
          {
            v785 = *v937;
            v786 = v937[1];
            v1096 = v937[2];
            v1095 = v786;
            v1094 = v785;
            *(_WORD *)&v1149[16] = 257;
            sub_22E486A58(v995, (uint64_t)&v1094, v777, (uint64_t)&v1148, (uint64_t)v1113);
            v782 = *(_QWORD *)&v1113[16];
            v781 = *(_DWORD *)&v1113[24];
            v784 = *(_DWORD *)&v1113[28];
            v1005 = *(_OWORD *)&v1113[32];
            v1015 = *(_OWORD *)v1113;
            v787 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v1037 + 8) + 144), *v943);
            v780 = v995;
            if (*(_BYTE *)(v787 + 16) == 2)
              v788 = v787;
            else
              v788 = 0;
            v783 = *(_QWORD *)(v788 + 32);
          }
          else
          {
            v781 = 0;
            v782 = 0;
            v783 = 0;
            v1005 = 0u;
            v1015 = 0u;
            v784 = v987;
          }
          v789 = *v962;
          v790 = v962[1];
          v1090 = v962[2];
          v1089 = v790;
          v1088 = v789;
          *(_WORD *)&v1113[32] = 257;
          v791 = v395;
          if (v395 == v394)
            v792 = 0;
          else
            v792 = 2 * ((char *)v395 - (char *)v394) - 1;
          sub_22E486A58(v780, (uint64_t)&v1088, v777, (uint64_t)v1113, (uint64_t)&v1091);
          v793 = *(_QWORD *)(v986 + 32);
          sub_22E6281E0(*(_QWORD **)(v779 + 144), v783, (uint64_t)&v1070);
          *(_OWORD *)v1113 = v1015;
          *(_QWORD *)&v1113[16] = v782;
          *(_DWORD *)&v1113[24] = v781;
          v987 = v784;
          *(_DWORD *)&v1113[28] = v784;
          v10 = v779;
          *(_OWORD *)&v1113[32] = v1005;
          v794 = *(_QWORD *)(*(_QWORD *)(v779 + 144) + 144);
          v1148 = v1070;
          *(_OWORD *)v1149 = v1071;
          *(_QWORD *)&v1149[16] = v1072;
          v1080 = 0uLL;
          *((_QWORD *)&v1079 + 1) = 0;
          LODWORD(v1081) = 0;
          *((_QWORD *)&v1081 + 1) = 0;
          *(_QWORD *)&v1082 = 0;
          v1083 = 0uLL;
          *(_QWORD *)((char *)&v1084 + 4) = 2;
          LODWORD(v1079) = 0;
          v1085 = 0u;
          v1086 = 0u;
          sub_22E3C113C((uint64_t)&v1079, (__int128 *)v1113, v783, 2, &v1148, v794);
          v1148 = v1091;
          *(_OWORD *)v1149 = v1092;
          *(_OWORD *)&v1149[16] = v1093;
          sub_22E6281E0(*(_QWORD **)(v779 + 144), v793, (uint64_t)v1109);
          *(_OWORD *)v1113 = v1148;
          *(_OWORD *)&v1113[16] = *(_OWORD *)v1149;
          *(_OWORD *)&v1113[32] = *(_OWORD *)&v1149[16];
          v795 = *(_QWORD *)(*(_QWORD *)(v779 + 144) + 144);
          v1111[0] = v1109[0];
          v1111[1] = v1109[1];
          v1112 = v1110;
          v1071 = 0uLL;
          *((_QWORD *)&v1070 + 1) = 0;
          LODWORD(v1072) = 0;
          *((_QWORD *)&v1072 + 1) = 0;
          *(_QWORD *)&v1073 = 0;
          v1074 = 0uLL;
          *(_QWORD *)((char *)&v1075 + 4) = 2;
          LODWORD(v1070) = 0;
          v1076 = 0u;
          v1077 = 0u;
          sub_22E3C113C((uint64_t)&v1070, (__int128 *)v1113, v793, 2, v1111, v795);
          v796 = v1033;
          v42 = v792 == (_QWORD)v1108 + v1033;
          v395 = v791;
          if (v42)
          {
            sub_22E54E014((uint64_t)&v1106);
            v394 = (void **)*((_QWORD *)&v1106 + 1);
            v395 = (void **)v1107;
            v796 = *((_QWORD *)&v1108 + 1);
          }
          v11 = v1037;
          if (v395 == v394)
            v797 = 0;
          else
            v797 = *(uint64_t *)((char *)v394 + (((unint64_t)(v1108 + v796) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 280 * (((int)v1108 + (int)v796) & 0xF);
          v1115 = v1085;
          v1116 = v1086;
          v1117 = v1087;
          *(_OWORD *)&v1113[32] = v1081;
          *(_OWORD *)&v1113[48] = v1082;
          v1114 = v1084;
          *(_OWORD *)&v1113[64] = v1083;
          *(_OWORD *)&v1113[16] = v1080;
          *(_OWORD *)v1113 = v1079;
          v1153 = v1076;
          v1154 = v1077;
          v1155 = v1078;
          *(_OWORD *)&v1149[16] = v1072;
          v1150 = v1073;
          v1151 = v1074;
          v1152 = v1075;
          v1148 = v1070;
          *(_OWORD *)v1149 = v1071;
          *(_QWORD *)v797 = 0;
          *(_OWORD *)(v797 + 8) = *(_OWORD *)v1113;
          *(_OWORD *)(v797 + 72) = *(_OWORD *)&v1113[64];
          *(_OWORD *)(v797 + 56) = *(_OWORD *)&v1113[48];
          *(_OWORD *)(v797 + 40) = *(_OWORD *)&v1113[32];
          *(_OWORD *)(v797 + 24) = *(_OWORD *)&v1113[16];
          *(_QWORD *)(v797 + 136) = v1117;
          *(_OWORD *)(v797 + 120) = v1116;
          *(_OWORD *)(v797 + 104) = v1115;
          *(_OWORD *)(v797 + 88) = v1114;
          v798 = v1154;
          *(_OWORD *)(v797 + 240) = v1153;
          *(_OWORD *)(v797 + 256) = v798;
          *(_QWORD *)(v797 + 272) = v1155;
          v799 = v1150;
          *(_OWORD *)(v797 + 176) = *(_OWORD *)&v1149[16];
          *(_OWORD *)(v797 + 192) = v799;
          v800 = v1152;
          *(_OWORD *)(v797 + 208) = v1151;
          *(_OWORD *)(v797 + 224) = v800;
          v801 = *(_OWORD *)v1149;
          *(_OWORD *)(v797 + 144) = v1148;
          *(_OWORD *)(v797 + 160) = v801;
          v773 = v796 + 1;
          *((_QWORD *)&v1108 + 1) = v773;
          ++v777;
        }
        while (v978 != v777);
LABEL_812:
        v723 = v773 - 1;
        v819 = v1108;
        v397 = v1108 + 1;
        *((_QWORD *)&v1108 + 1) = v723;
        *(_QWORD *)&v1108 = v397;
        if (v397 >= 0x20)
        {
          v820 = *v394++;
          operator delete(v820);
          v397 = v819 - 15;
          *((_QWORD *)&v1106 + 1) = v394;
          *(_QWORD *)&v1108 = v819 - 15;
        }
      }
      while (v723);
LABEL_815:
      v821 = (char *)v395 - (char *)v394;
      if ((unint64_t)((char *)v395 - (char *)v394) < 0x11)
      {
        v376 = v1020;
      }
      else
      {
        v376 = v1020;
        do
        {
          v822 = *v394++;
          operator delete(v822);
          v821 -= 8;
        }
        while (v821 > 0x10);
      }
      *((_QWORD *)&v1106 + 1) = v394;
      while (v394 != v395)
      {
        v823 = *v394++;
        operator delete(v823);
      }
      v692 = (void *)v1106;
      if ((_QWORD)v1106)
        goto LABEL_684;
LABEL_685:
      v693 = *(_BYTE *)(v376 + 48);
      *(_QWORD *)v376 = 0;
      *(_QWORD *)(v376 + 8) = 0;
      *(_BYTE *)(v376 + 48) = v693 & 0xF8;
      return;
    case 0x626u:
    case 0x639u:
      sub_22F265D10(a7, a1, (uint64_t)a2, a5, a4);
      return;
    case 0x63Du:
    case 0x63Eu:
    case 0x63Fu:
    case 0x640u:
    case 0x641u:
    case 0x643u:
    case 0x645u:
    case 0x646u:
    case 0x647u:
    case 0x648u:
    case 0x649u:
    case 0x64Au:
    case 0x64Bu:
    case 0x64Cu:
    case 0x64Du:
    case 0x64Eu:
    case 0x64Fu:
    case 0x651u:
    case 0x652u:
    case 0x653u:
      goto LABEL_248;
    case 0x642u:
    case 0x644u:
    case 0x650u:
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000000000002;
      if ((sub_22E3B38EC(v1113, (_DWORD *)(a1 + 16)) & 1) == 0
        && ((v108 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 216), (*(_DWORD *)(v108 + 68) & 0xFFFFFFF7) == 3)
         || *(_DWORD *)(v108 + 72) == 21))
      {
        sub_22E524F38(v11, v10, a3, v9, a5, v12);
      }
      else
      {
LABEL_248:
        sub_22F266B48(v12, v11, v10, a5, v9);
      }
      return;
    case 0x65Cu:
      v896 = sub_22EFFA6B0(*(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                               + ((unint64_t)*a5 >> 24)));
      if (*v896 == 233 && (*(_DWORD *)v896 & 0x7C0000) == 0x100000)
        v896 = sub_22EFFA6B0(*((unsigned __int8 **)v896 + 2));
      v897 = sub_22F0017D4(v896);
      sub_22F26A954(v11, v897);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 472) + 64))(*(_QWORD *)(v11 + 472), 9336);
      v898 = llvm::air::AIRFunctionInfo::getDeclaration();
      v899 = v898;
      if (v898)
        v900 = *(_QWORD *)(v898 + 24);
      else
        v900 = 0;
      llvm::Type::getInt8PtrTy(*(llvm::Type **)(*(_QWORD *)(v10 + 144) + 232), (llvm::LLVMContext *)2);
      *(_QWORD *)&v1148 = llvm::ConstantExpr::getPointerCast();
      *(_WORD *)&v1113[32] = 257;
      v930 = sub_22E462B78((uint64_t *)(v10 + 272), v900, v899, (uint64_t)&v1148, 1, (uint64_t)v1113, 0);
      *((_QWORD *)v930 + 8) = *(_QWORD *)(v899 + 112);
      v931 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v930;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v931 & 0xF8;
      return;
    case 0x66Eu:
    case 0x66Fu:
    case 0x671u:
    case 0x672u:
    case 0x674u:
    case 0x675u:
    case 0x677u:
    case 0x67Au:
    case 0x67Bu:
    case 0x67Cu:
    case 0x67Du:
    case 0x681u:
    case 0x682u:
    case 0x683u:
    case 0x685u:
    case 0x686u:
    case 0x688u:
    case 0x689u:
    case 0x68Au:
    case 0x68Bu:
    case 0x68Cu:
    case 0x68Du:
    case 0x695u:
    case 0x696u:
    case 0x698u:
    case 0x69Cu:
    case 0x6A4u:
    case 0x6A5u:
    case 0x6A6u:
    case 0x6A7u:
    case 0x6A8u:
    case 0x6A9u:
    case 0x6AAu:
    case 0x6ABu:
    case 0x6ACu:
    case 0x6ADu:
    case 0x6AFu:
      v15 = a7;
      v16 = v11;
      v17 = v10;
      v18 = a5;
      v19 = v9;
      goto LABEL_4;
    case 0x67Eu:
      sub_22F266E4C(a7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), (uint64_t)a2, a5);
      return;
    case 0x68Eu:
      sub_22F2670B0(a7, a1, (std::string::size_type)a2, a3, a5);
      return;
    case 0x68Fu:
    case 0x691u:
      sub_22E524F38(a1, (std::string::size_type)a2, a3, a4, a5, a7);
      return;
    case 0x692u:
      v570 = 0x8000000800000001;
      v571 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v572 = *(_QWORD *)(*(_QWORD *)(v571 + 8) + 8);
      sub_22F00905C(*(_QWORD *)(v571 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v1097);
      v573 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 216);
      if ((*(_DWORD *)(v573 + 68) & 0xFFFFFFF7) != 3 && *(_DWORD *)(v573 + 72) != 21)
        v570 = 0x8000000100000002;
      *(_QWORD *)v1113 = v570;
      *(_QWORD *)&v1113[8] = 0;
      if (sub_22E3B38EC((_DWORD *)(v11 + 16), v1113))
      {
        sub_22E524F38(v11, v10, a3, 0x692u, a5, v12);
        goto LABEL_932;
      }
      *(_QWORD *)v1113 = &v1113[24];
      *(_DWORD *)&v1113[24] = 779250017;
      *(_OWORD *)&v1113[8] = xmmword_22F45AB70;
      v709 = v572 & 0xFFFFFFFFFFFFFFF0;
      v710 = *(_QWORD *)(v572 & 0xFFFFFFFFFFFFFFF0);
      if (v710 && *(_BYTE *)(v710 + 16) == 56
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v710 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
        && (v710 = sub_22F10CF48(v710)) != 0)
      {
        v709 = *(_QWORD *)(v710 + 32) & 0xFFFFFFFFFFFFFFF0;
      }
      v711 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v709 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v711)
        v712 = (*(_DWORD *)(v711 + 16) & 0xFF800FF) == 110624779;
      else
        v712 = 0;
      if (v712)
      {
        v861 = (uint64_t *)&v1097;
        if (DWORD2(v1097) >= 0x41)
          v861 = (uint64_t *)v1097;
        v862 = *v861;
        v713 = *(_QWORD *)&v1113[8];
        if (!v862)
        {
          if (*(_QWORD *)&v1113[16] < (unint64_t)(*(_QWORD *)&v1113[8] + 5))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v713 = *(_QWORD *)&v1113[8];
          }
          v863 = *(_QWORD *)v1113 + v713;
          *(_BYTE *)(v863 + 4) = 95;
          *(_DWORD *)v863 = 1953718630;
          v713 = *(_QWORD *)&v1113[8] + 5;
          *(_QWORD *)&v1113[8] += 5;
        }
      }
      else
      {
        v713 = *(_QWORD *)&v1113[8];
      }
      if (*(_QWORD *)&v1113[16] < (unint64_t)(v713 + 6))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v713 = *(_QWORD *)&v1113[8];
      }
      v864 = *(_QWORD *)v1113 + v713;
      *(_WORD *)(v864 + 4) = 11888;
      *(_DWORD *)v864 = 2019910764;
      *(_QWORD *)&v1113[8] += 6;
      v865 = sub_22E699F3C(*(_QWORD **)(v11 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v865 + 256))(v865, *(_QWORD *)(v11 + 8), v572);
      llvm_utils::getMangledTypeStr();
      if (v1149[7] >= 0)
        v866 = &v1148;
      else
        v866 = (__int128 *)v1148;
      if (v1149[7] >= 0)
        v867 = v1149[7] & 0x7F;
      else
        v867 = *((_QWORD *)&v1148 + 1);
      v868 = *(_QWORD *)&v1113[8];
      if (*(_QWORD *)&v1113[16] < *(_QWORD *)&v1113[8] + v867)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v868 = *(_QWORD *)&v1113[8];
        if (!v867)
        {
LABEL_903:
          *(_QWORD *)&v1113[8] = v868 + v867;
          if ((v1149[7] & 0x80000000) != 0)
            operator delete((void *)v1148);
          __p[0] = &v1140;
          __p[1] = (void *)0x200000000;
          if (a5[4] != 1)
          {
            v869 = 0;
            v870 = 8 * (a5[4] - 1);
            do
            {
              v871 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v869 / 4]
                                         + ((unint64_t)*a5 >> 24));
              *(_QWORD *)&v1148 = v10;
              *((_QWORD *)&v1148 + 1) = v10 + 272;
              v1149[0] = 0;
              *(_QWORD *)&v1149[8] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
              v872 = sub_22E50E974((uint64_t *)&v1148, v871);
              v873 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v873 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v873) = v872;
              ++LODWORD(__p[1]);
              v869 += 8;
            }
            while (v870 != v869);
          }
          llvm::air::AIRFunctionInfo::lookupName();
          v874 = llvm::air::AIRFunctionInfo::getDeclaration();
          if (v874)
            v875 = *(_QWORD *)(v874 + 24);
          else
            v875 = 0;
          *(_WORD *)&v1149[16] = 257;
          v891 = sub_22E462B78((uint64_t *)(v10 + 272), v875, v874, (uint64_t)__p[0], LODWORD(__p[1]), (uint64_t)&v1148, 0);
          *((_QWORD *)v891 + 8) = *(_QWORD *)(v874 + 112);
          v892 = *(_BYTE *)(v12 + 48);
          *(_QWORD *)v12 = v891;
          *(_QWORD *)(v12 + 8) = 0;
          *(_BYTE *)(v12 + 48) = v892 & 0xF8;
          if (__p[0] != &v1140)
            free(__p[0]);
          if (*(_BYTE **)v1113 != &v1113[24])
            free(*(void **)v1113);
LABEL_932:
          if ((_BYTE)v1098)
          {
            if (DWORD2(v1097) >= 0x41)
            {
              v826 = (void *)v1097;
              if ((_QWORD)v1097)
LABEL_935:
                MEMORY[0x2348A0E84](v826, 0x1000C8000313F17);
            }
          }
          return;
        }
      }
      else if (!v867)
      {
        goto LABEL_903;
      }
      memcpy((void *)(*(_QWORD *)v1113 + v868), v866, v867);
      v868 = *(_QWORD *)&v1113[8];
      goto LABEL_903;
    case 0x694u:
      v544 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v247 = &v1140;
      __p[0] = &v1140;
      __p[1] = (void *)0x200000000;
      v545 = a5[4];
      if ((_DWORD)v545)
      {
        v546 = 0;
        v547 = 8 * v545;
        do
        {
          v548 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v546 / 4]
                                     + ((unint64_t)*a5 >> 24));
          *(_QWORD *)v1113 = v10;
          *(_QWORD *)&v1113[8] = v10 + 272;
          v1113[16] = 0;
          *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v549 = sub_22E50E974((uint64_t *)v1113, v548);
          v550 = LODWORD(__p[1]);
          if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v550 = LODWORD(__p[1]);
          }
          *((_QWORD *)__p[0] + v550) = v549;
          ++LODWORD(__p[1]);
          v546 += 8;
        }
        while (v547 != v546);
      }
      *(_QWORD *)v1113 = &v1113[24];
      qmemcpy(&v1113[24], "air.lgamma_r.", 13);
      *(_OWORD *)&v1113[8] = xmmword_22F45AB60;
      v551 = sub_22E699F3C(*(_QWORD **)(v11 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v551 + 256))(v551, *(_QWORD *)(v11 + 8), v544);
      llvm_utils::getMangledTypeStr();
      if (v1149[7] >= 0)
        v552 = &v1148;
      else
        v552 = (__int128 *)v1148;
      if (v1149[7] >= 0)
        v553 = v1149[7] & 0x7F;
      else
        v553 = *((_QWORD *)&v1148 + 1);
      v554 = *(_QWORD *)&v1113[8];
      if (*(_QWORD *)&v1113[16] >= *(_QWORD *)&v1113[8] + v553)
      {
        if (!v553)
          goto LABEL_548;
        goto LABEL_547;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v554 = *(_QWORD *)&v1113[8];
      if (v553)
      {
LABEL_547:
        memcpy((void *)(*(_QWORD *)v1113 + v554), v552, v553);
        v554 = *(_QWORD *)&v1113[8];
      }
LABEL_548:
      *(_QWORD *)&v1113[8] = v554 + v553;
      if ((v1149[7] & 0x80000000) != 0)
        operator delete((void *)v1148);
      llvm::air::AIRFunctionInfo::lookupName();
      v555 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v555)
        v556 = *(_QWORD *)(v555 + 24);
      else
        v556 = 0;
      *(_WORD *)&v1149[16] = 257;
      v827 = sub_22E462B78((uint64_t *)(v10 + 272), v556, v555, (uint64_t)__p[0], LODWORD(__p[1]), (uint64_t)&v1148, 0);
      *((_QWORD *)v827 + 8) = *(_QWORD *)(v555 + 112);
      v828 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v827;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v828 & 0xF8;
      if (*(_BYTE **)v1113 != &v1113[24])
        free(*(void **)v1113);
      v220 = (__int128 *)__p[0];
      goto LABEL_552;
    case 0x69Du:
      v260 = "pown";
      v261 = a7;
      v262 = v11;
      v263 = (uint64_t *)v10;
      v264 = a5;
      v265 = 4;
      goto LABEL_515;
    case 0x69Eu:
      v15 = a7;
      v16 = v11;
      v17 = v10;
      v18 = a5;
      v19 = 1694;
      goto LABEL_4;
    case 0x69Fu:
      sub_22F26724C(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x6A1u:
      v246 = *(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                   + ((unint64_t)*a5 >> 24))
                       + 8);
      v247 = (__int128 *)v1149;
      *(_QWORD *)&v1148 = v1149;
      *((_QWORD *)&v1148 + 1) = 0x400000000;
      v248 = a5[4];
      if ((_DWORD)v248)
      {
        v249 = 0;
        v250 = 8 * v248;
        do
        {
          v251 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v249 / 4]
                                     + ((unint64_t)*a5 >> 24));
          *(_QWORD *)v1113 = v10;
          *(_QWORD *)&v1113[8] = v10 + 272;
          v1113[16] = 0;
          *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v252 = sub_22E50E974((uint64_t *)v1113, v251);
          v253 = DWORD2(v1148);
          if (DWORD2(v1148) >= (unint64_t)HIDWORD(v1148))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v253 = DWORD2(v1148);
          }
          *(_QWORD *)(v1148 + 8 * v253) = v252;
          ++DWORD2(v1148);
          v249 += 8;
        }
        while (v250 != v249);
      }
      *(_QWORD *)v1113 = &v1113[24];
      qmemcpy(&v1113[24], "air.remquo.", 11);
      *(_OWORD *)&v1113[8] = xmmword_22F45AB50;
      v254 = sub_22E699F3C(*(_QWORD **)(v11 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v254 + 256))(v254, *(_QWORD *)(v11 + 8), v246);
      llvm_utils::getMangledTypeStr();
      if ((SBYTE7(v1140) & 0x80u) == 0)
        v255 = __p;
      else
        v255 = (void **)__p[0];
      if ((SBYTE7(v1140) & 0x80u) == 0)
        v256 = BYTE7(v1140) & 0x7F;
      else
        v256 = (size_t)__p[1];
      v257 = *(_QWORD *)&v1113[8];
      if (*(_QWORD *)&v1113[16] >= *(_QWORD *)&v1113[8] + v256)
      {
        if (!v256)
          goto LABEL_296;
        goto LABEL_295;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v257 = *(_QWORD *)&v1113[8];
      if (v256)
      {
LABEL_295:
        memcpy((void *)(*(_QWORD *)v1113 + v257), v255, v256);
        v257 = *(_QWORD *)&v1113[8];
      }
LABEL_296:
      *(_QWORD *)&v1113[8] = v257 + v256;
      if (SBYTE7(v1140) < 0)
        operator delete(__p[0]);
      llvm::air::AIRFunctionInfo::lookupName();
      v258 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v258)
        v259 = *(_QWORD *)(v258 + 24);
      else
        v259 = 0;
      LOWORD(v1141) = 257;
      v717 = sub_22E462B78((uint64_t *)(v10 + 272), v259, v258, v1148, DWORD2(v1148), (uint64_t)__p, 0);
      *((_QWORD *)v717 + 8) = *(_QWORD *)(v258 + 112);
      v718 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v717;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v718 & 0xF8;
      if (*(_BYTE **)v1113 != &v1113[24])
        free(*(void **)v1113);
LABEL_737:
      v220 = (__int128 *)v1148;
LABEL_552:
      if (v220 == v247)
        return;
      goto LABEL_884;
    case 0x6A2u:
      v15 = a7;
      v16 = v11;
      v17 = v10;
      v18 = a5;
      v19 = 1698;
LABEL_4:
      sub_22E5306A0(v15, v16, v17, v18, v19);
      return;
    case 0x6A3u:
      v260 = "rootn";
      v261 = a7;
      v262 = v11;
      v263 = (uint64_t *)v10;
      v264 = a5;
      v265 = 5;
LABEL_515:
      sub_22E5309F4(v261, v262, v263, v264, v260, v265);
      return;
    case 0x6C3u:
    case 0x6C6u:
    case 0x6C7u:
    case 0x6CAu:
    case 0x6CBu:
    case 0x6CCu:
    case 0x6CDu:
    case 0x6CEu:
    case 0x6CFu:
    case 0x6D0u:
    case 0x6D1u:
    case 0x6D2u:
    case 0x6D3u:
    case 0x6D4u:
    case 0x6D5u:
    case 0x6D6u:
    case 0x6D7u:
    case 0x6D8u:
    case 0x6D9u:
    case 0x6DAu:
    case 0x6DDu:
      sub_22F267460(a7, a1, (uint64_t)a2, a5, a4);
      return;
    case 0x6DEu:
    case 0x6DFu:
    case 0x6E0u:
    case 0x6E1u:
    case 0x6E2u:
    case 0x6E3u:
    case 0x6E4u:
    case 0x6E5u:
    case 0x6E6u:
    case 0x6E7u:
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) - 4 + 2 * a5[4]] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)v1113);
      if (*(_DWORD *)&v1113[8] >= 0x41u)
        v34 = *(unsigned int **)v1113;
      else
        v34 = (unsigned int *)v1113;
      v35 = *v34;
      if (*(_DWORD *)&v1113[8] >= 0x41u && v1113[16] && *(_QWORD *)v1113)
        MEMORY[0x2348A0E84]();
      v36 = (char *)&unk_22F459F7C
          + 48
          * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2
                                                                                                * (((unint64_t)*a5 >> 18) & 1)
                                                                                                + 2]
                                                                                    + ((unint64_t)*a5 >> 24))
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) >> 19) & 0x1FF)
          + 24 * v35;
      v37 = sub_22E3E4B64(*(_QWORD *)(*((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0));
      v38 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v40 = *(_QWORD *)(v38 + 8);
      v39 = v38 + 8;
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v41)
        v42 = (*(_DWORD *)(v41 + 16) & 0xFF800FF) == 123731979;
      else
        v42 = 0;
      if (v42)
        v43 = 1;
      else
        v43 = a5[4] - 5;
      v84 = v36 - 10896;
      v85 = *(_QWORD *)(v37 + 32);
      v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8 * v43) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v86)
        v87 = (*(_DWORD *)(v86 + 16) & 0xFF800FF) == 90701835;
      else
        v87 = 0;
      if (v87)
        v88 = sub_22F26D2F0(v11) ^ 1;
      else
        v88 = 0;
      v89 = *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F10E0EC(v89))
      {
        v90 = v12;
        v91 = v88;
      }
      else
      {
        v90 = v12;
        if (sub_22F110930(v89))
          v91 = 2;
        else
          v91 = 4;
        if (v88)
          ++v91;
      }
      v115 = *(unsigned int *)&v84[4 * v91];
      v1007 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) - 2 + 2 * a5[4]]
                                  + ((unint64_t)*a5 >> 24));
      v116 = v11;
      v117 = (_DWORD *)(v11 + 16);
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000000000002;
      if (sub_22E3B38EC((_DWORD *)(v11 + 16), v1113))
        v118 = -4;
      else
        v118 = -3;
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v119 = a5[4];
      v120 = v119 + v118;
      if (v119 + v118)
      {
        v121 = 0;
        do
        {
          v122 = sub_22E536B64(v116, v10, *(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v121]+ ((unint64_t)*a5 >> 24)), v121, v9);
          v123 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v123 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v123) = v122;
          ++*(_DWORD *)&v1113[8];
          ++v121;
        }
        while (v120 != v121);
      }
      v124 = *(_QWORD *)(v116 + 472);
      v125 = sub_22E699F3C(*(_QWORD **)(v116 + 8));
      *(_QWORD *)&v1148 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v125 + 256))(v125, *(_QWORD *)(v116 + 8), *((_QWORD *)a5 + 1));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 64))(v124, v115);
      v126 = llvm::air::AIRFunctionInfo::getDeclaration();
      v127 = (llvm::Value *)v126;
      if (v126)
        v128 = *(_QWORD *)(v126 + 24);
      else
        v128 = 0;
      *(_WORD *)&v1149[16] = 257;
      v129 = sub_22E462B78((uint64_t *)(v10 + 272), v128, v126, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)&v1148, 0);
      *((_QWORD *)v129 + 8) = *((_QWORD *)v127 + 14);
      v130 = *(_BYTE *)(v90 + 48);
      *(_QWORD *)v90 = v129;
      *(_QWORD *)(v90 + 8) = 0;
      *(_BYTE *)(v90 + 48) = v130 & 0xF8;
      v1148 = 0x8000000200000002;
      if ((sub_22E3B38EC(v117, &v1148) & 1) == 0)
      {
        v1018 = v90;
        Name = (void *)llvm::Value::getName(v127);
        LOWORD(v1141) = 773;
        __p[0] = Name;
        __p[1] = v132;
        *(_QWORD *)&v1140 = ".";
        *(_QWORD *)&v1148 = __p;
        *(_QWORD *)v1149 = "store_ack";
        *(_WORD *)&v1149[16] = 770;
        v133 = operator new();
        llvm::BasicBlock::BasicBlock();
        v134 = (void *)llvm::Value::getName(v127);
        LOWORD(v1141) = 773;
        __p[0] = v134;
        __p[1] = v135;
        *(_QWORD *)&v1140 = ".";
        *(_QWORD *)&v1148 = __p;
        *(_QWORD *)v1149 = "end";
        *(_WORD *)&v1149[16] = 770;
        v136 = operator new();
        llvm::BasicBlock::BasicBlock();
        sub_22E4DFD40(v10, v1007, 0, 0, 0, 0, (uint64_t)&v1148);
        v138 = *((_QWORD *)&v1148 + 1);
        if (!(_QWORD)v1148)
          v138 = 0;
        v139 = __clz(*(unint64_t *)v1149) ^ 0x3F;
        v140 = v1148 & 0xFFFFFFFFFFFFFFF8 | (v139 >> 3);
        v141 = v138 & 0xFFFFFFFFFFFFFFF8 | v139 & 7;
        if (*(_QWORD *)v1149)
          v142 = v140;
        else
          v142 = v1148;
        if (!*(_QWORD *)v1149)
          v141 = v138;
        if ((_QWORD)v1148)
          v143 = v142;
        else
          v143 = 0;
        if ((_QWORD)v1148)
          v144 = v141;
        else
          v144 = v138;
        LOWORD(v1141) = 257;
        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v143 & 0xFFFFFFFFFFFFFFF8), v137);
        v146 = sub_22E3C18F4(v10 + 272, 33, (uint64_t *)(v143 & 0xFFFFFFFFFFFFFFF8), NullValue, (uint64_t)__p);
        v147 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v147, v133, v136, v146, 0);
        LOWORD(v1141) = 257;
        sub_22E3C12C8((uint64_t *)(v10 + 272), v147, (uint64_t)__p);
        *(_QWORD *)(v10 + 320) = v133;
        *(_QWORD *)(v10 + 328) = v133 + 40;
        LODWORD(v1097) = 1;
        LOWORD(v1141) = 257;
        v148 = sub_22E3C2EA8(v10 + 272, (uint64_t)v129, (uint64_t)&v1097, 1, (uint64_t)__p);
        LOWORD(v1141) = 257;
        v149 = (llvm::Type **)sub_22E3C1740((uint64_t *)(v10 + 272), 38, v148, v144 & 0xFFFFFFFFFFFFFFF8, (uint64_t)__p);
        v150 = 0;
        if (v143 <= 7)
          v151 = 0;
        else
          v151 = (void *)(v143 & 0xFFFFFFFFFFFFFFF8);
        if (v143 <= 7)
          v152 = 0;
        else
          v152 = (void *)(v144 & 0xFFFFFFFFFFFFFFF8);
        __p[0] = v151;
        __p[1] = v152;
        if (v143 >= 8)
          v150 = 1 << (v144 & 7 | (8 * (v143 & 7)));
        *(_QWORD *)&v1140 = v150;
        DWORD2(v1140) = 0;
        v1141 = 0uLL;
        sub_22E3BEDDC(v10 + 272, v149, (uint64_t)__p);
        v153 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        LOWORD(v1099) = 257;
        sub_22E3C12C8((uint64_t *)(v10 + 272), v153, (uint64_t)&v1097);
        *(_QWORD *)(v10 + 320) = v136;
        *(_QWORD *)(v10 + 328) = v136 + 40;
        LODWORD(v1079) = 0;
        LOWORD(v1099) = 257;
        *(_QWORD *)v1018 = sub_22E3C2EA8(v10 + 272, (uint64_t)v129, (uint64_t)&v1079, 1, (uint64_t)&v1097);
        *(_QWORD *)(v1018 + 8) = 0;
        *(_BYTE *)(v1018 + 48) = 0;
      }
LABEL_275:
      v220 = *(__int128 **)v1113;
      if (*(_BYTE **)v1113 == &v1113[16])
        return;
      goto LABEL_884;
    case 0x6E8u:
    case 0x6E9u:
    case 0x6EAu:
    case 0x6EBu:
    case 0x6ECu:
    case 0x6EDu:
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) - 2 + 2 * a5[4]] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)v1113);
      if (*(_DWORD *)&v1113[8] >= 0x41u)
        v61 = *(unsigned int **)v1113;
      else
        v61 = (unsigned int *)v1113;
      v62 = *v61;
      if (*(_DWORD *)&v1113[8] >= 0x41u && v1113[16] && *(_QWORD *)v1113)
        MEMORY[0x2348A0E84]();
      v1017 = v12;
      v63 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v64 = (unsigned int *)((char *)&unk_22F45A15C
                           + 16
                           * (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 16) >> 19) & 0x1FF)
                           + 8 * v62
                           - 3792);
      v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 8 + 8 * (a5[4] - 4)) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v65)
        v66 = (*(_DWORD *)(v65 + 16) & 0xFF800FF) == 90701835;
      else
        v66 = 0;
      if (v66)
        v64 += sub_22F26D2F0(v11) ^ 1;
      v67 = *v64;
      v68 = (_DWORD *)(v11 + 16);
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000000000002;
      if (sub_22E3B38EC((_DWORD *)(v11 + 16), v1113))
        v69 = -3;
      else
        v69 = -2;
      v20 = (uint64_t)&v1113[16];
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v70 = a5[4];
      v71 = v70 + v69;
      if (v70 + v69)
      {
        v72 = 0;
        do
        {
          v73 = v11;
          v75 = sub_22E536B64(v11, v10, *(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v72]+ ((unint64_t)*a5 >> 24)), v72, v9);
          v76 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v76 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v76) = v75;
          ++*(_DWORD *)&v1113[8];
          v11 = v73;
          if (!v72)
          {
            llvm::Type::getInt32Ty(*(llvm::Type **)(*(_QWORD *)(v73 + 8) + 232), v74);
            v77 = llvm::ConstantInt::get();
            v78 = *(unsigned int *)&v1113[8];
            if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v78 = *(unsigned int *)&v1113[8];
            }
            *(_QWORD *)(*(_QWORD *)v1113 + 8 * v78) = v77;
            ++*(_DWORD *)&v1113[8];
          }
          ++v72;
        }
        while (v71 != v72);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 472) + 64))(*(_QWORD *)(v11 + 472), v67);
      v79 = llvm::air::AIRFunctionInfo::getDeclaration();
      v80 = (llvm::Value *)v79;
      if (v79)
        v81 = *(_QWORD *)(v79 + 24);
      else
        v81 = 0;
      *(_WORD *)&v1149[16] = 257;
      v158 = sub_22E462B78((uint64_t *)(v10 + 272), v81, v79, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)&v1148, 0);
      *((_QWORD *)v158 + 8) = *((_QWORD *)v80 + 14);
      v159 = *(_BYTE *)(v1017 + 48);
      *(_QWORD *)v1017 = v158;
      *(_QWORD *)(v1017 + 8) = 0;
      *(_BYTE *)(v1017 + 48) = v159 & 0xF8;
      v1148 = 0x8000000200000002;
      if ((sub_22E3B38EC(v68, &v1148) & 1) == 0)
      {
        v160 = (void *)llvm::Value::getName(v80);
        LOWORD(v1141) = 773;
        __p[0] = v160;
        __p[1] = v161;
        *(_QWORD *)&v1140 = ".";
        *(_QWORD *)&v1148 = __p;
        *(_QWORD *)v1149 = "store_ack";
        *(_WORD *)&v1149[16] = 770;
        v162 = operator new();
        llvm::BasicBlock::BasicBlock();
        v163 = (void *)llvm::Value::getName(v80);
        LOWORD(v1141) = 773;
        __p[0] = v163;
        __p[1] = v164;
        *(_QWORD *)&v1140 = ".";
        *(_QWORD *)&v1148 = __p;
        *(_QWORD *)v1149 = "end";
        *(_WORD *)&v1149[16] = 770;
        v165 = operator new();
        llvm::BasicBlock::BasicBlock();
        sub_22E4DFD40(v10, *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 * a5[4]]+ ((unint64_t)*a5 >> 24)), 0, 0, 0, 0, (uint64_t)&v1148);
        v167 = *((_QWORD *)&v1148 + 1);
        if (!(_QWORD)v1148)
          v167 = 0;
        v168 = __clz(*(unint64_t *)v1149) ^ 0x3F;
        v169 = v1148 & 0xFFFFFFFFFFFFFFF8 | (v168 >> 3);
        v170 = v167 & 0xFFFFFFFFFFFFFFF8 | v168 & 7;
        if (*(_QWORD *)v1149)
          v171 = v169;
        else
          v171 = v1148;
        if (!*(_QWORD *)v1149)
          v170 = v167;
        if ((_QWORD)v1148)
          v172 = v171;
        else
          v172 = 0;
        if ((_QWORD)v1148)
          v173 = v170;
        else
          v173 = v167;
        LOWORD(v1141) = 257;
        v174 = llvm::Constant::getNullValue(*(llvm::Constant **)(v172 & 0xFFFFFFFFFFFFFFF8), v166);
        v175 = sub_22E3C18F4(v10 + 272, 33, (uint64_t *)(v172 & 0xFFFFFFFFFFFFFFF8), v174, (uint64_t)__p);
        v176 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v176, v162, v165, v175, 0);
        LOWORD(v1141) = 257;
        sub_22E3C12C8((uint64_t *)(v10 + 272), v176, (uint64_t)__p);
        *(_QWORD *)(v10 + 320) = v162;
        *(_QWORD *)(v10 + 328) = v162 + 40;
        LODWORD(v1097) = 1;
        LOWORD(v1141) = 257;
        v177 = sub_22E3C2EA8(v10 + 272, (uint64_t)v158, (uint64_t)&v1097, 1, (uint64_t)__p);
        LOWORD(v1141) = 257;
        v178 = (llvm::Type **)sub_22E3C1740((uint64_t *)(v10 + 272), 38, v177, v173 & 0xFFFFFFFFFFFFFFF8, (uint64_t)__p);
        v179 = 0;
        if (v172 <= 7)
          v180 = 0;
        else
          v180 = (void *)(v172 & 0xFFFFFFFFFFFFFFF8);
        if (v172 <= 7)
          v181 = 0;
        else
          v181 = (void *)(v173 & 0xFFFFFFFFFFFFFFF8);
        __p[0] = v180;
        __p[1] = v181;
        if (v172 >= 8)
          v179 = 1 << (v173 & 7 | (8 * (v172 & 7)));
        *(_QWORD *)&v1140 = v179;
        DWORD2(v1140) = 0;
        v1141 = 0uLL;
        sub_22E3BEDDC(v10 + 272, v178, (uint64_t)__p);
        v182 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        LOWORD(v1099) = 257;
        sub_22E3C12C8((uint64_t *)(v10 + 272), v182, (uint64_t)&v1097);
        *(_QWORD *)(v10 + 320) = v165;
        *(_QWORD *)(v10 + 328) = v165 + 40;
        LODWORD(v1079) = 0;
        LOWORD(v1099) = 257;
        *(_QWORD *)v1017 = sub_22E3C2EA8(v10 + 272, (uint64_t)v158, (uint64_t)&v1079, 1, (uint64_t)&v1097);
        *(_QWORD *)(v1017 + 8) = 0;
        *(_BYTE *)(v1017 + 48) = 0;
        v20 = (uint64_t)&v1113[16];
      }
      goto LABEL_883;
    case 0x6EEu:
      v911 = a7;
      v912 = v11;
      v913 = v10;
      v914 = a5;
      v915 = 22;
      goto LABEL_980;
    case 0x6EFu:
      v911 = a7;
      v912 = v11;
      v913 = v10;
      v914 = a5;
      v915 = 35;
LABEL_980:
      sub_22F267D68(v911, v912, v913, v914, v915);
      return;
    case 0x6F0u:
      v517 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      v518 = sub_22E50E974((uint64_t *)v1113, v517);
      v519 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      v520 = sub_22E50E974((uint64_t *)v1113, v519);
      v521 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 6]
                                 + ((unint64_t)*a5 >> 24));
      *(_QWORD *)v1113 = v10;
      *(_QWORD *)&v1113[8] = v10 + 272;
      v1113[16] = 0;
      *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
      v522 = sub_22E50E974((uint64_t *)v1113, v521);
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 8] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(v11 + 8) + 144), 0, (uint64_t)&v1070);
      v523 = *((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0;
      v524 = *(_QWORD *)v523;
      if (*(_QWORD *)v523 && *(_BYTE *)(v524 + 16) == 56
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v524 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
        && (v524 = sub_22F10CF48(v524)) != 0)
      {
        v523 = *(_QWORD *)(v524 + 32) & 0xFFFFFFFFFFFFFFF0;
      }
      v525 = *(_DWORD *)(v10 + 2788);
      v526 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v523 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v526 && (*(_DWORD *)(v526 + 16) & 0xFF800FF) == 0x698000B)
      {
        v527 = &v1070;
        if (DWORD2(v1070) >= 0x41)
          v527 = (__int128 *)v1070;
        v528 = v525 & 0xFFFFC0FC;
        if (*(_QWORD *)v527)
          v525 = v528 | 1;
        else
          v525 = v528 | 0x3902;
      }
      *(_QWORD *)v1113 = v10;
      *(_DWORD *)&v1113[8] = 4;
      v1113[16] = 0;
      v1113[48] = 0;
      sub_22E61990C((uint64_t)v1113, v525);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 55 <= 1
        && (v1148 = 0x8000000100000002, (sub_22E3B38EC((_DWORD *)(v11 + 16), &v1148) & 1) != 0))
      {
        v876 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v11 + 8) + 280), *((llvm::LLVMContext **)a5 + 1));
        v878 = llvm::UndefValue::get();
        v879 = *(unsigned int *)(v876 + 32);
        if ((_DWORD)v879)
        {
          for (j = 0; j != v879; ++j)
          {
            *(_WORD *)&v1149[16] = 257;
            llvm::Type::getInt64Ty(*(llvm::Type **)(v10 + 336), v877);
            v881 = llvm::ConstantInt::get();
            sub_22E420480((uint64_t *)(v10 + 272), (uint64_t)v522, v881, (uint64_t)&v1148);
            LOWORD(v1141) = 257;
            llvm::Type::getInt64Ty(*(llvm::Type **)(v10 + 336), v882);
            v883 = llvm::ConstantInt::get();
            sub_22E420480((uint64_t *)(v10 + 272), (uint64_t)v520, v883, (uint64_t)__p);
            LOWORD(v1099) = 257;
            llvm::Type::getInt64Ty(*(llvm::Type **)(v10 + 336), v884);
            v885 = llvm::ConstantInt::get();
            sub_22E420480((uint64_t *)(v10 + 272), (uint64_t)v518, v885, (uint64_t)&v1097);
            LOWORD(v1081) = 257;
            Select = llvm::IRBuilderBase::CreateSelect();
            *(_WORD *)&v1149[16] = 257;
            llvm::Type::getInt64Ty(*(llvm::Type **)(v10 + 336), v887);
            v888 = llvm::ConstantInt::get();
            v878 = sub_22E3ED5D4((uint64_t *)(v10 + 272), v878, Select, v888, (uint64_t)&v1148);
          }
        }
      }
      else
      {
        *(_WORD *)&v1149[16] = 257;
        v878 = llvm::IRBuilderBase::CreateSelect();
      }
      v889 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v878;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v889 & 0xF8;
      v890 = *(_QWORD *)v1113;
      *(_DWORD *)(*(_QWORD *)v1113 + 2788) = *(_DWORD *)&v1113[8];
      *(_WORD *)(v890 + 373) = *(_WORD *)&v1113[12];
      if (v1113[48])
      {
        v932 = *(_QWORD *)&v1113[16];
        *(_DWORD *)(*(_QWORD *)&v1113[16] + 96) = *(_DWORD *)&v1113[24];
        *(_QWORD *)(v932 + 88) = *(_QWORD *)&v1113[32];
        *(_BYTE *)(v932 + 100) = v1113[40];
        *(_WORD *)(v932 + 101) = *(_WORD *)&v1113[41];
      }
      if (!(_BYTE)v1071)
        return;
      if (DWORD2(v1070) < 0x41)
        return;
      v826 = (void *)v1070;
      if (!(_QWORD)v1070)
        return;
      goto LABEL_935;
    case 0x6F1u:
    case 0x6F2u:
    case 0x6F3u:
    case 0x6F4u:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 2;
      goto LABEL_111;
    case 0x6F5u:
    case 0x6F6u:
    case 0x6F7u:
    case 0x6F8u:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 3;
      goto LABEL_111;
    case 0x6F9u:
    case 0x6FAu:
    case 0x6FBu:
    case 0x6FCu:
    case 0x6FDu:
    case 0x6FEu:
    case 0x6FFu:
      v55 = a7;
      v56 = v11;
      v57 = (uint64_t *)v10;
      v58 = a5;
      v59 = 0;
      goto LABEL_92;
    case 0x700u:
    case 0x701u:
    case 0x702u:
    case 0x703u:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 0;
      goto LABEL_111;
    case 0x704u:
    case 0x705u:
    case 0x706u:
    case 0x707u:
    case 0x708u:
      v55 = a7;
      v56 = v11;
      v57 = (uint64_t *)v10;
      v58 = a5;
      v59 = 1;
LABEL_92:
      sub_22E52FF40(v55, v56, v57, v58, v59);
      return;
    case 0x709u:
    case 0x70Au:
    case 0x70Bu:
    case 0x70Cu:
      v92 = a7;
      v93 = v11;
      v94 = (uint64_t *)v10;
      v95 = a5;
      v96 = 1;
LABEL_111:
      sub_22E52F880(v92, v93, v94, v95, v96);
      return;
    case 0x70Du:
    case 0x70Eu:
      sub_22F2676FC(a7, a1, a2, a5, a4);
      return;
    case 0x714u:
    case 0x715u:
      v893 = (unsigned int *)((char *)&unk_22F459F34 + 12 * a4 - 21744);
      v894 = *(_QWORD *)(*((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0);
      if (!v894 || *(_BYTE *)(v894 + 16) != 56)
        v894 = sub_22F10CF48(v894);
      v895 = *(_QWORD *)(*(_QWORD *)(v894 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!sub_22F10E0EC(v895))
      {
        if (sub_22F110930(v895))
          ++v893;
        else
          v893 += 2;
      }
      v917 = *v893;
      v247 = (__int128 *)v1149;
      *(_QWORD *)&v1148 = v1149;
      *((_QWORD *)&v1148 + 1) = 0x100000000;
      v918 = a5[4];
      if ((_DWORD)v918)
      {
        v923 = 0;
        v924 = 8 * v918;
        do
        {
          v925 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v923 / 4]
                                     + ((unint64_t)*a5 >> 24));
          *(_QWORD *)v1113 = v10;
          *(_QWORD *)&v1113[8] = v10 + 272;
          v1113[16] = 0;
          *(_QWORD *)&v1113[24] = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v926 = sub_22E50E974((uint64_t *)v1113, v925);
          v927 = DWORD2(v1148);
          if (DWORD2(v1148) >= (unint64_t)HIDWORD(v1148))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v927 = DWORD2(v1148);
          }
          *(_QWORD *)(v1148 + 8 * v927) = v926;
          ++DWORD2(v1148);
          v923 += 8;
        }
        while (v924 != v923);
      }
      v919 = *(_QWORD *)(v11 + 472);
      v920 = sub_22F26D258(v1113, v11, a5);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v919 + 64))(v919, v917, v920);
      v921 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (*(_BYTE **)v1113 != &v1113[16])
        free(*(void **)v1113);
      if (v921)
        v922 = *(_QWORD *)(v921 + 24);
      else
        v922 = 0;
      *(_WORD *)&v1113[32] = 257;
      v928 = sub_22E462B78((uint64_t *)(v10 + 272), v922, v921, v1148, DWORD2(v1148), (uint64_t)v1113, 0);
      *((_QWORD *)v928 + 8) = *(_QWORD *)(v921 + 112);
      v929 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v928;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v929 & 0xF8;
      goto LABEL_737;
    case 0x716u:
    case 0x717u:
      *(_QWORD *)&v1148 = v1149;
      *((_QWORD *)&v1148 + 1) = 0x500000000;
      if (a4 == 1815)
      {
        sub_22F26C30C(v1113, a1, a5);
        sub_22E536194((uint64_t)&v1148, (uint64_t)v1113);
        if (*(_BYTE **)v1113 != &v1113[16])
          free(*(void **)v1113);
        v198 = 3;
      }
      else
      {
        if (a4 == 1814)
        {
          sub_22F26D258(v1113, a1, a5);
          sub_22E536194((uint64_t)&v1148, (uint64_t)v1113);
          if (*(_BYTE **)v1113 != &v1113[16])
            free(*(void **)v1113);
          v198 = 2;
          v199 = a5;
LABEL_220:
          v200 = *(_QWORD *)(*((_QWORD *)v199 + 1) & 0xFFFFFFFFFFFFFFF0);
          if (!v200 || *(_BYTE *)(v200 + 16) != 56)
            v200 = sub_22F10CF48(v200);
          v201 = v9 - 1814;
          v202 = *(_QWORD *)(v200 + 32);
          v203 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v198]
                                                   + ((unint64_t)*a5 >> 24))
                                       + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v203 || *(_BYTE *)(v203 + 16) != 56)
            v203 = sub_22F10CF48(v203);
          v204 = (char *)&unk_22F459F4C + 24 * v201;
          v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v205)
            v206 = *(_DWORD *)(v205 + 16) == 11;
          else
            v206 = 0;
          v207 = v206 && (*(_DWORD *)(v205 + 16) & 0xFF80000) == 91226112;
          v529 = *(_QWORD *)(v202 & 0xFFFFFFFFFFFFFFF0);
          if (sub_22F10E0EC(v529))
          {
            v530 = v207;
          }
          else
          {
            if (sub_22F110930(v529))
              v530 = 2;
            else
              v530 = 4;
            if (v207)
              ++v530;
          }
          v694 = *(unsigned int *)&v204[4 * v530];
          *(_QWORD *)v1113 = &v1113[16];
          *(_QWORD *)&v1113[8] = 0x500000000;
          v695 = a5[4];
          if ((_DWORD)v695)
          {
            v696 = 0;
            v697 = 8 * v695;
            do
            {
              v698 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + v696 / 4]
                                         + ((unint64_t)*a5 >> 24));
              __p[0] = (void *)v10;
              __p[1] = (void *)(v10 + 272);
              LOBYTE(v1140) = 0;
              *((_QWORD *)&v1140 + 1) = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
              v699 = sub_22E50E974((uint64_t *)__p, v698);
              v700 = *(unsigned int *)&v1113[8];
              if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v700 = *(unsigned int *)&v1113[8];
              }
              *(_QWORD *)(*(_QWORD *)v1113 + 8 * v700) = v699;
              ++*(_DWORD *)&v1113[8];
              v696 += 8;
            }
            while (v697 != v696);
          }
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 472) + 64))(*(_QWORD *)(v11 + 472), v694);
          v701 = llvm::air::AIRFunctionInfo::getDeclaration();
          if (v701)
            v702 = *(_QWORD *)(v701 + 24);
          else
            v702 = 0;
          LOWORD(v1141) = 257;
          v703 = sub_22E462B78((uint64_t *)(v10 + 272), v702, v701, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)__p, 0);
          *((_QWORD *)v703 + 8) = *(_QWORD *)(v701 + 112);
          v704 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(v704 + 16) & 0xFF80000) != 0x5280000
            || *(_DWORD *)(v704 + 16) != 11
            || v704 == 0)
          {
            v707 = v703;
          }
          else
          {
            v707 = 0;
          }
          v708 = *(_BYTE *)(v12 + 48);
          *(_QWORD *)v12 = v707;
          *(_QWORD *)(v12 + 8) = 0;
          *(_BYTE *)(v12 + 48) = v708 & 0xF8;
          if (*(_BYTE **)v1113 != &v1113[16])
            free(*(void **)v1113);
          v220 = (__int128 *)v1148;
          if ((_BYTE *)v1148 == v1149)
            return;
LABEL_884:
          free(v220);
          return;
        }
        v198 = 0;
      }
      v199 = *(unsigned int **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2] + ((unint64_t)*a5 >> 24));
      goto LABEL_220;
    case 0x71Bu:
    case 0x71Eu:
    case 0x71Fu:
    case 0x722u:
    case 0x723u:
    case 0x724u:
    case 0x725u:
    case 0x726u:
    case 0x727u:
    case 0x728u:
    case 0x729u:
    case 0x72Au:
    case 0x72Bu:
    case 0x72Cu:
    case 0x72Du:
    case 0x72Eu:
    case 0x72Fu:
    case 0x730u:
    case 0x731u:
    case 0x732u:
    case 0x735u:
      sub_22F267AC8(a7, a1, (uint64_t)a2, a5, a4);
      return;
    case 0x736u:
      v231 = a7;
      v232 = v11;
      v233 = (uint64_t *)v10;
      v234 = a5;
      v235 = 0;
      goto LABEL_665;
    case 0x737u:
      v231 = a7;
      v232 = v11;
      v233 = (uint64_t *)v10;
      v234 = a5;
      v235 = 1;
      goto LABEL_665;
    case 0x738u:
      v231 = a7;
      v232 = v11;
      v233 = (uint64_t *)v10;
      v234 = a5;
      v235 = 2;
LABEL_665:
      sub_22E530D40(v231, v232, v233, v234, v235);
      return;
    case 0x739u:
      v236 = a7;
      v237 = v11;
      v238 = v10;
      v239 = a5;
      v240 = 0;
      goto LABEL_663;
    case 0x73Au:
      v236 = a7;
      v237 = v11;
      v238 = v10;
      v239 = a5;
      v240 = 1;
      goto LABEL_663;
    case 0x73Bu:
      v236 = a7;
      v237 = v11;
      v238 = v10;
      v239 = a5;
      v240 = 2;
LABEL_663:
      sub_22E531204(v236, v237, v238, v239, v240);
      return;
    case 0x77Au:
    case 0x77Bu:
    case 0x77Cu:
    case 0x77Du:
    case 0x77Eu:
    case 0x77Fu:
    case 0x780u:
      sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4]
                                                      + ((unint64_t)*a5 >> 24))
                                          + 8) & 0xFFFFFFFFFFFFFFF0));
      v715 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      *(_QWORD *)v1113 = &v1113[24];
      *(_QWORD *)&v1113[16] = 64;
      qmemcpy(&v1113[24], "air.write_imageblock_slice_to_", 30);
      v716 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v715 + 8) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v716 + 16) != 11)
        v716 = 0;
      __asm { BR              X10 }
      return;
    case 0x781u:
    case 0x782u:
    case 0x783u:
    case 0x784u:
    case 0x785u:
    case 0x786u:
    case 0x787u:
    case 0x788u:
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) - 2 + 2 * a5[4]] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)v1113);
      if (*(_DWORD *)&v1113[8] >= 0x41u)
        v44 = *(int **)v1113;
      else
        v44 = (int *)v1113;
      v45 = *v44;
      if (*(_DWORD *)&v1113[8] >= 0x41u && v1113[16] && *(_QWORD *)v1113)
        MEMORY[0x2348A0E84]();
      v46 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v48 = *(_QWORD *)(v46 + 8);
      v47 = v46 + 8;
      v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v50 = ((unint64_t)*(unsigned int *)(v49 + 16) >> 19) & 0x1FF;
      if (v49)
        v51 = *(_DWORD *)(v49 + 16) == 11;
      else
        v51 = 0;
      if (v51 && (_DWORD)v50 == 236)
      {
        v52 = v11;
        v1024 = *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8);
        v53 = sub_22E3E4B64(*(_QWORD *)(v1024 & 0xFFFFFFFFFFFFFFF0));
        v54 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4] + ((unint64_t)*a5 >> 24);
      }
      else
      {
        v52 = v11;
        v1024 = *(_QWORD *)(*(_QWORD *)(v47 + 8 * (a5[4] - 5)) + 8);
        v53 = sub_22E3E4B64(*(_QWORD *)(v1024 & 0xFFFFFFFFFFFFFFF0));
        v54 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1) - 6 + 2 * a5[4]]
            + ((unint64_t)*a5 >> 24);
      }
      v97 = *(_QWORD *)(*(_QWORD *)v54 + 8);
      v1006 = *(_QWORD *)(v53 + 32);
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000300000002;
      v98 = 0;
      if ((sub_22E3B38EC((_DWORD *)(v52 + 16), v1113) & 1) == 0)
      {
        sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 * a5[4]] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(v52 + 8) + 144), 0, (uint64_t)v1113);
        v99 = *(_DWORD *)&v1113[8] >= 0x41u ? *(unsigned int **)v1113 : (unsigned int *)v1113;
        v98 = *v99;
        if (*(_DWORD *)&v1113[8] >= 0x41u)
        {
          if (*(_QWORD *)v1113)
            MEMORY[0x2348A0E84]();
        }
      }
      v100 = (char *)&unk_22F45A2E8 + 144 * v50 + 72 * v45;
      v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v97 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v101)
        v102 = (*(_DWORD *)(v101 + 16) & 0xFF800FF) == 90701835;
      else
        v102 = 0;
      if (v102)
        v103 = sub_22F26D2F0(v52) ^ 1;
      else
        v103 = 0;
      v104 = v100 - 32688;
      v105 = *(_QWORD *)(v1006 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F10E0EC(v105))
      {
        v106 = v103;
        v107 = v52;
      }
      else
      {
        v107 = v52;
        if (sub_22F110930(v105))
          v106 = 2;
        else
          v106 = 4;
        if (v103)
          ++v106;
      }
      v208 = *(unsigned int *)&v104[24 * v98 + 4 * v106];
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000000000002;
      if (sub_22E3B38EC((_DWORD *)(v52 + 16), v1113))
        v209 = -3;
      else
        v209 = -2;
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v210 = a5[4];
      v211 = v210 + v209;
      if (v210 + v209)
      {
        v212 = 0;
        do
        {
          v213 = sub_22E536B64(v107, v10, *(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v212]+ ((unint64_t)*a5 >> 24)), v212, v9);
          v214 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v214 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v214) = v213;
          ++*(_DWORD *)&v1113[8];
          ++v212;
        }
        while (v211 != v212);
      }
      v215 = *(_QWORD *)(v107 + 472);
      v216 = sub_22E699F3C(*(_QWORD **)(v107 + 8));
      *(_QWORD *)&v1148 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v216 + 256))(v216, *(_QWORD *)(v107 + 8), v1024);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v215 + 64))(v215, v208);
      v217 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v217)
        v218 = *(_QWORD *)(v217 + 24);
      else
        v218 = 0;
      *(_WORD *)&v1149[16] = 257;
      *((_QWORD *)sub_22E462B78((uint64_t *)(v10 + 272), v218, v217, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)&v1148, 0)+ 8) = *(_QWORD *)(v217 + 112);
      v219 = *(_BYTE *)(a7 + 48);
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_BYTE *)(a7 + 48) = v219 & 0xF8;
      v220 = *(__int128 **)v1113;
      if (*(_BYTE **)v1113 == &v1113[16])
        return;
      goto LABEL_884;
    case 0x789u:
    case 0x78Au:
      sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 * a5[4]] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)v1113);
      if (*(_DWORD *)&v1113[8] >= 0x41u)
        v183 = *(unsigned int **)v1113;
      else
        v183 = (unsigned int *)v1113;
      v184 = *v183;
      if (*(_DWORD *)&v1113[8] >= 0x41u && v1113[16] && *(_QWORD *)v1113)
        MEMORY[0x2348A0E84]();
      v185 = (unint64_t)&a5[2 * (((unint64_t)*a5 >> 18) & 1)] + ((unint64_t)*a5 >> 24);
      v186 = (unsigned int *)((char *)&unk_22F45A888
                            + 16
                            * (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 8) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 16) >> 19) & 0x1FF)
                            + 8 * v184
                            - 3792);
      v187 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 8 + 8 * (a5[4] - 3)) + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v187)
        v188 = (*(_DWORD *)(v187 + 16) & 0xFF800FF) == 90701835;
      else
        v188 = 0;
      if (v188)
        v186 += sub_22F26D2F0(v11) ^ 1;
      v189 = *v186;
      *(_QWORD *)&v1113[8] = 0;
      *(_QWORD *)v1113 = 0x8000000000000002;
      if (sub_22E3B38EC((_DWORD *)(v11 + 16), v1113))
        v190 = -2;
      else
        v190 = -1;
      v20 = (uint64_t)&v1113[16];
      *(_QWORD *)v1113 = &v1113[16];
      *(_QWORD *)&v1113[8] = 0x800000000;
      v191 = a5[4];
      v192 = v191 + v190;
      if (v191 + v190)
      {
        v193 = 0;
        do
        {
          v194 = sub_22E536B64(v11, v10, *(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v193]+ ((unint64_t)*a5 >> 24)), v193, v9);
          v195 = *(unsigned int *)&v1113[8];
          if (*(unsigned int *)&v1113[8] >= (unint64_t)*(unsigned int *)&v1113[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v195 = *(unsigned int *)&v1113[8];
          }
          *(_QWORD *)(*(_QWORD *)v1113 + 8 * v195) = v194;
          ++*(_DWORD *)&v1113[8];
          ++v193;
        }
        while (v192 != v193);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 472) + 64))(*(_QWORD *)(v11 + 472), v189);
      v196 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v196)
        v197 = *(_QWORD *)(v196 + 24);
      else
        v197 = 0;
      *(_WORD *)&v1149[16] = 257;
      *((_QWORD *)sub_22E462B78((uint64_t *)(v10 + 272), v197, v196, *(uint64_t *)v1113, *(unsigned int *)&v1113[8], (uint64_t)&v1148, 0)+ 8) = *(_QWORD *)(v196 + 112);
      v688 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v688 & 0xF8;
      goto LABEL_883;
    case 0x78Eu:
      v241 = a7;
      v242 = v11;
      v243 = (_QWORD *)v10;
      v244 = a5;
      v245 = 0;
      goto LABEL_656;
    case 0x78Fu:
      v241 = a7;
      v242 = v11;
      v243 = (_QWORD *)v10;
      v244 = a5;
      v245 = 1;
LABEL_656:
      sub_22E53189C(v241, v242, v243, v244, v245);
      return;
    case 0x790u:
      sub_22F2684D0(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x79Du:
      sub_22F267E88(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x79Eu:
      sub_22F2680C8(a7, (_QWORD **)a1, (uint64_t)a2, a5);
      return;
    case 0x7A0u:
      sub_22F2682DC(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x7A1u:
    case 0x7A2u:
    case 0x7A3u:
    case 0x7A4u:
    case 0x7A5u:
    case 0x7A6u:
    case 0x7A7u:
    case 0x7A8u:
    case 0x7A9u:
    case 0x7AAu:
    case 0x7ABu:
    case 0x7ACu:
    case 0x7ADu:
    case 0x7AEu:
    case 0x7AFu:
      sub_22F2686DC(a7, a1, (uint64_t)a2, a5, a4);
      return;
    case 0x7B0u:
    case 0x7B1u:
      sub_22F26892C(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x7B2u:
    case 0x7B3u:
    case 0x7B4u:
    case 0x7B5u:
    case 0x7B6u:
    case 0x7B7u:
    case 0x7B8u:
    case 0x7B9u:
    case 0x7BAu:
    case 0x7BBu:
    case 0x7BCu:
    case 0x7BDu:
    case 0x7BEu:
    case 0x7BFu:
    case 0x7C0u:
    case 0x7C1u:
    case 0x7C2u:
    case 0x7C3u:
    case 0x7C4u:
    case 0x7C5u:
    case 0x7C6u:
    case 0x7C7u:
    case 0x7C8u:
    case 0x7C9u:
    case 0x7CAu:
    case 0x7CBu:
    case 0x7CCu:
    case 0x7CDu:
    case 0x7CEu:
    case 0x7CFu:
    case 0x7D0u:
    case 0x7D1u:
    case 0x7D2u:
    case 0x7D3u:
    case 0x7D4u:
    case 0x7D5u:
      sub_22F268C0C(a7, a1, (uint64_t)a2, a5, a4);
      return;
    case 0x7D6u:
      sub_22F268E80(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x7D7u:
      sub_22F2690D8(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x7D8u:
    case 0x7D9u:
    case 0x7DAu:
    case 0x7DBu:
      sub_22F269418(a7, a1, (uint64_t)a2, a5);
      return;
    case 0x7E0u:
      sub_22F2696F8(a7, (uint64_t *)a1, a2, a5);
      return;
    case 0x7E1u:
      sub_22F269E58(a7, (uint64_t *)a1, a2, a5);
      return;
    default:
      v20 = (uint64_t)&v1113[16];
      *(_QWORD *)v1113 = &v1113[16];
      v7 = 0x800000000;
      *(_QWORD *)&v1113[8] = 0x800000000;
      LODWORD(v1079) = 0;
      v26 = *(_QWORD *)(a1 + 472);
      v111 = a4;
      if (a4 > 0x7E7)
      {
LABEL_1008:
        v933 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v10 + 144) + 144) + 15208);
        v934 = v933[1];
        if (v934 + 2024 <= v111)
        {
          v935 = v9 - v934 - 2024;
          v936 = v933[2];
        }
        else
        {
          v935 = v9 - 2024;
          v936 = *v933;
        }
        v686 = (char **)(v936 + 48 * v935);
      }
      else
      {
        v686 = &(&off_24FAC8C40)[6 * a4];
      }
      LODWORD(v1097) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v26 + 56))(v26, *v686);
      if ((_DWORD)v1097)
      {
        v687 = 0;
      }
      else
      {
        sub_22E5320D8(v11, v9, (uint64_t)a5, &v1097, (uint64_t)v1113, &v1079);
        v687 = v1079;
      }
      *(_QWORD *)&v1148 = v1149;
      *((_QWORD *)&v1148 + 1) = v7;
      v831 = a5[4];
      v832 = v831 - v687;
      if (v831 != v687)
      {
        v835 = 0;
        do
        {
          v836 = *(unsigned __int8 **)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 2 + 2 * v835]
                                     + ((unint64_t)*a5 >> 24));
          __p[0] = (void *)v10;
          __p[1] = (void *)(v10 + 272);
          LOBYTE(v1140) = 0;
          *((_QWORD *)&v1140 + 1) = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 232);
          v837 = sub_22E50E974((uint64_t *)__p, v836);
          v838 = DWORD2(v1148);
          if (DWORD2(v1148) >= (unint64_t)HIDWORD(v1148))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v838 = DWORD2(v1148);
          }
          *(_QWORD *)(v1148 + 8 * v838) = v837;
          ++DWORD2(v1148);
          ++v835;
        }
        while (v832 != v835);
      }
      v833 = llvm::air::AIRFunctionInfo::getDeclaration();
      if (v833)
        v834 = *(_QWORD *)(v833 + 24);
      else
        v834 = 0;
      LOWORD(v1141) = 257;
      v839 = sub_22E462B78((uint64_t *)(v10 + 272), v834, v833, v1148, DWORD2(v1148), (uint64_t)__p, 0);
      *((_QWORD *)v839 + 8) = *(_QWORD *)(v833 + 112);
      v840 = *(_BYTE *)(v12 + 48);
      *(_QWORD *)v12 = v839;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 48) = v840 & 0xF8;
      if ((_BYTE *)v1148 != v1149)
        free((void *)v1148);
LABEL_883:
      v220 = *(__int128 **)v1113;
      if (*(_QWORD *)v1113 != v20)
        goto LABEL_884;
      return;
  }
}

uint64_t sub_22E52EE38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  llvm::Constant **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::LLVMContext *v24;
  uint64_t *v25;
  int v26;
  uint64_t Int8Ty;
  uint64_t v28;
  uint64_t v29;
  llvm::Type *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  const void *p_p;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  size_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t NullValue;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *__p;
  size_t v58;
  char v59;
  llvm::Constant **v60;
  _QWORD *v61;
  unsigned int v62;
  char v63;
  void *v64;
  __int128 v65;
  _BYTE v66[11];
  _WORD v67[30];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)&a4[2 * (((unint64_t)*a4 >> 18) & 1)] + ((unint64_t)*a4 >> 24);
  v10 = *(_QWORD *)(v7 + 8);
  v9 = v7 + 8;
  v8 = (unsigned __int8 *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *((_QWORD *)a4 + 1);
  v13 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    v64 = (void *)a3;
    *(_QWORD *)&v65 = a3 + 272;
    BYTE8(v65) = 0;
    *(_QWORD *)v66 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
    result = (uint64_t)sub_22E50E974((uint64_t *)&v64, v8);
    v35 = *(_BYTE *)(a1 + 48);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 48) = v35 & 0xF8;
    return result;
  }
  sub_22F00905C(*(_QWORD *)(v9 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v61);
  v15 = sub_22E3E4B64(*v13);
  v16 = v11;
  if (v15)
    v16 = *(_QWORD *)(v15 + 32);
  v56 = v16;
  v17 = sub_22E3E4B64(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
  v18 = v12;
  if (v17)
    v18 = *(_QWORD *)(v17 + 32);
  v19 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v64 = (void *)a3;
  *(_QWORD *)&v65 = a3 + 272;
  BYTE8(v65) = 0;
  *(_QWORD *)v66 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v20 = (llvm::Constant **)sub_22E50E974((uint64_t *)&v64, v19);
  v60 = v20;
  v21 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 256))(v21, *(_QWORD *)(a2 + 8), v11);
  v23 = v22;
  if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12)
    v22 = **(_QWORD **)(v22 + 16);
  if (llvm::Type::isIntegerTy((llvm::Type *)v22))
  {
    v64 = (void *)0x8000000800000001;
    *(_QWORD *)&v65 = 0;
    if (sub_22E3B38EC((_DWORD *)(a2 + 16), &v64))
    {
      v55 = a1;
      v25 = v13;
      v26 = *(unsigned __int8 *)(v23 + 8);
      Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(a3 + 336), v24);
      if (v26 != 13)
        Int8Ty = llvm::FixedVectorType::get();
      v13 = v25;
      *(_WORD *)&v66[8] = 257;
      v20 = (llvm::Constant **)sub_22E3C1740((uint64_t *)(a3 + 272), 39, (uint64_t)v20, Int8Ty, (uint64_t)&v64);
      v60 = v20;
      v23 = Int8Ty;
      a1 = v55;
    }
  }
  v28 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v28 + 256))(v28, *(_QWORD *)(a2 + 8), v12);
  if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
    v29 = **(_QWORD **)(v29 + 16);
  if (!llvm::Type::isIntegerTy((llvm::Type *)v29)
    || (v64 = (void *)0x8000000100000002,
        *(_QWORD *)&v65 = 0,
        !sub_22E3B38EC((_DWORD *)(a2 + 16), &v64)))
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1)
    {
      v64 = (void *)0x8000000B00000001;
      *(_QWORD *)&v65 = 0;
      sub_22E3B38EC((_DWORD *)(a2 + 16), &v64);
    }
    v64 = v66;
    qmemcpy(v66, "air.convert", sizeof(v66));
    v65 = xmmword_22F45AB50;
    v32 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF0);
    v33 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F10E0EC(v33))
    {
      qmemcpy(v67, ".f.", 3);
    }
    else
    {
      if (sub_22F110930(v33))
      {
        v36 = v65;
        if (*((_QWORD *)&v65 + 1) < (unint64_t)(v65 + 3))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v36 = v65;
        }
        v37 = (char *)v64 + v36;
        v37[2] = 46;
        v38 = 29486;
      }
      else
      {
        sub_22F110B50(*v32);
        v39 = v65;
        if (*((_QWORD *)&v65 + 1) < (unint64_t)(v65 + 3))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v39 = v65;
        }
        v37 = (char *)v64 + v39;
        v37[2] = 46;
        v38 = 29998;
      }
      *(_WORD *)v37 = v38;
    }
    *(_QWORD *)&v65 = v65 + 3;
    llvm_utils::getMangledTypeStr();
    if (v59 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v59 >= 0)
      v41 = v59 & 0x7F;
    else
      v41 = v58;
    v42 = v65;
    if (*((_QWORD *)&v65 + 1) < (unint64_t)v65 + v41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v42 = v65;
      if (!v41)
      {
LABEL_41:
        *(_QWORD *)&v65 = v42 + v41;
        if (v59 < 0)
          operator delete(__p);
        v43 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
        if (sub_22F10E0EC(v43))
        {
          v44 = v65;
          if (*((_QWORD *)&v65 + 1) < (unint64_t)(v65 + 3))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v44 = v65;
          }
          v45 = (char *)v64 + v44;
          v45[2] = 46;
          v46 = 26158;
        }
        else if (sub_22F110930(v43))
        {
          v47 = v65;
          if (*((_QWORD *)&v65 + 1) < (unint64_t)(v65 + 3))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v47 = v65;
          }
          v45 = (char *)v64 + v47;
          v45[2] = 46;
          v46 = 29486;
        }
        else
        {
          sub_22F110B50(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0));
          v48 = v65;
          if (*((_QWORD *)&v65 + 1) < (unint64_t)(v65 + 3))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v48 = v65;
          }
          v45 = (char *)v64 + v48;
          v45[2] = 46;
          v46 = 29998;
        }
        *(_WORD *)v45 = v46;
        *(_QWORD *)&v65 = v65 + 3;
        llvm_utils::getMangledTypeStr();
        if (v59 >= 0)
          v49 = &__p;
        else
          v49 = __p;
        if (v59 >= 0)
          v50 = v59 & 0x7F;
        else
          v50 = v58;
        v51 = v65;
        if (*((_QWORD *)&v65 + 1) < (unint64_t)v65 + v50)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v51 = v65;
          if (!v50)
          {
LABEL_63:
            *(_QWORD *)&v65 = v51 + v50;
            if (v59 < 0)
              operator delete(__p);
            v52 = &v61;
            if (v62 >= 0x41)
              v52 = v61;
            __asm { BR              X10 }
          }
        }
        else if (!v50)
        {
          goto LABEL_63;
        }
        memcpy((char *)v64 + v51, v49, v50);
        v51 = v65;
        goto LABEL_63;
      }
    }
    else if (!v41)
    {
      goto LABEL_41;
    }
    memcpy((char *)v64 + v42, p_p, v41);
    v42 = v65;
    goto LABEL_41;
  }
  if ((*(_DWORD *)(v23 + 8) & 0xFE) == 0x12)
    v31 = *(unsigned __int8 *)(**(_QWORD **)(v23 + 16) + 8);
  else
    v31 = *(_DWORD *)(v23 + 8);
  if (v31 == 13)
  {
    *(_WORD *)&v66[8] = 257;
    NullValue = llvm::Constant::getNullValue(*v20, v30);
    result = sub_22E3C18F4(a3 + 272, 33, (uint64_t *)v20, NullValue, (uint64_t)&v64);
  }
  else
  {
    llvm::Constant::getNullValue((llvm::Constant *)v23, v30);
    *(_WORD *)&v66[8] = 257;
    result = llvm::IRBuilderBase::CreateFCmpHelper();
  }
  v54 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v54 & 0xF8;
  if (v63 && v62 >= 0x41)
  {
    result = (uint64_t)v61;
    if (v61)
      return MEMORY[0x2348A0E84](v61, 0x1000C8000313F17);
  }
  return result;
}

void ***sub_22E52F880(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned int a5)
{
  unsigned int v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unsigned __int8 *v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Declaration;
  llvm::Value *v22;
  uint64_t v23;
  llvm::Value *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t NullValue;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Type **v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v49;
  _QWORD v51[3];
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  unint64_t v56;
  uint64_t Name;
  uint64_t v58;
  const char *v59;
  __int16 v60;
  unint64_t v61;
  uint64_t *p_Name;
  _QWORD *v63;
  const char *v64;
  uint64_t v65;
  __int16 v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v69[12];

  v69[10] = *MEMORY[0x24BDAC8D0];
  if (a5 > 5)
    v49 = 0;
  else
    v49 = *((_DWORD *)*(&off_24FA64350 + (int)a5)
          + (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                                                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16) >> 19) & 0x1FF)
          - 237);
  v9 = a4[4];
  v61 = 0x4000000000000001;
  sub_22E54C570(&v61, v9 - 1);
  v67 = (_QWORD *)0x8000000000000002;
  v68 = 0;
  if (sub_22E3B38EC((_DWORD *)(a2 + 16), &v67))
    sub_22E54C570(&v61, v9 - 2);
  v67 = (_QWORD *)0x8000000200000002;
  v68 = 0;
  if (sub_22E3B38EC((_DWORD *)(a2 + 16), &v67))
  {
    if (a5 - 1 >= 3)
    {
      if (a5)
        goto LABEL_17;
      v13 = -3;
      goto LABEL_16;
    }
    v11 = sub_22EFFA604(*(unsigned __int8 **)((char *)a4 + *((unsigned __int8 *)a4 + 3)));
    if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Eu) - 52 >= 6)
      v11 = 0;
    v12 = sub_22EFC01DC(v11, 0) - 1777;
    if (v12 <= 0x1B && ((0xF0000FFu >> v12) & 1) != 0)
    {
      v13 = dword_22F45A9F0[v12];
LABEL_16:
      sub_22E54C570(&v61, a4[4] + v13);
    }
  }
LABEL_17:
  v67 = v69;
  v68 = 0xA00000000;
  v14 = a4[4];
  if ((_DWORD)v14)
  {
    for (i = 0; v14 != i; ++i)
    {
      if ((v61 & 1) != 0)
      {
        if (((1 << i) & (v61 >> 1) & ~(-1 << (v61 >> 58))) == 0)
        {
LABEL_23:
          v16 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * i]
                                    + ((unint64_t)*a4 >> 24));
          p_Name = a3;
          v63 = a3 + 34;
          LOBYTE(v64) = 0;
          v65 = *(_QWORD *)(a3[18] + 232);
          v17 = sub_22E50E974((uint64_t *)&p_Name, v16);
          v18 = v68;
          if (v68 >= (unint64_t)HIDWORD(v68))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v68;
          }
          v67[v18] = v17;
          LODWORD(v68) = v68 + 1;
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v61 + 8 * (i >> 6)) & (1 << i)) == 0)
      {
        goto LABEL_23;
      }
      if (i == 1)
      {
        llvm::Type::getInt32Ty(*(llvm::Type **)(*(_QWORD *)(a2 + 8) + 232), v10);
        v19 = llvm::ConstantInt::get();
        v20 = v68;
        if (v68 >= (unint64_t)HIDWORD(v68))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v68;
        }
        v67[v20] = v19;
        LODWORD(v68) = v68 + 1;
      }
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), v49);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v22 = (llvm::Value *)Declaration;
  if (Declaration)
    v23 = *(_QWORD *)(Declaration + 24);
  else
    v23 = 0;
  v66 = 257;
  v24 = sub_22E462B78(a3 + 34, v23, Declaration, (uint64_t)v67, v68, (uint64_t)&p_Name, 0);
  *((_QWORD *)v24 + 8) = *((_QWORD *)v22 + 14);
  v25 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v25 & 0xF8;
  p_Name = (uint64_t *)0x8000000200000002;
  v63 = 0;
  if ((sub_22E3B38EC((_DWORD *)(a2 + 16), &p_Name) & 1) == 0)
  {
    v60 = 773;
    Name = llvm::Value::getName(v22);
    v58 = v26;
    v59 = ".";
    p_Name = &Name;
    v64 = "store_ack";
    v66 = 770;
    v27 = operator new();
    llvm::BasicBlock::BasicBlock();
    v28 = llvm::Value::getName(v22);
    v60 = 773;
    Name = v28;
    v58 = v29;
    v59 = ".";
    p_Name = &Name;
    v64 = "end";
    v66 = 770;
    v30 = operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E4DFD40((uint64_t)a3, *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]]+ ((unint64_t)*a4 >> 24)), 0, 0, 0, 0, (uint64_t)v55);
    v32 = v55[1];
    if (!v55[0])
      v32 = 0;
    v33 = __clz(v56) ^ 0x3F;
    v34 = v55[0] & 0xFFFFFFFFFFFFFFF8 | (v33 >> 3);
    v35 = v32 & 0xFFFFFFFFFFFFFFF8 | v33 & 7;
    if (v56)
      v36 = v34;
    else
      v36 = v55[0];
    if (!v56)
      v35 = v32;
    if (v55[0])
      v37 = v36;
    else
      v37 = 0;
    if (v55[0])
      v38 = v35;
    else
      v38 = v32;
    v66 = 257;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v37 & 0xFFFFFFFFFFFFFFF8), v31);
    v40 = sub_22E3C18F4((uint64_t)(a3 + 34), 33, (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFF8), NullValue, (uint64_t)&p_Name);
    v41 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v41, v27, v30, v40, 0);
    v66 = 257;
    sub_22E3C12C8(a3 + 34, v41, (uint64_t)&p_Name);
    a3[40] = v27;
    a3[41] = v27 + 40;
    LODWORD(Name) = 1;
    v66 = 257;
    v42 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v24, (uint64_t)&Name, 1, (uint64_t)&p_Name);
    v66 = 257;
    v43 = (llvm::Type **)sub_22E3C1740(a3 + 34, 38, v42, v38 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&p_Name);
    v44 = 0;
    if (v37 <= 7)
      v45 = 0;
    else
      v45 = v37 & 0xFFFFFFFFFFFFFFF8;
    if (v37 <= 7)
      v46 = 0;
    else
      v46 = v38 & 0xFFFFFFFFFFFFFFF8;
    v51[0] = v45;
    v51[1] = v46;
    if (v37 >= 8)
      v44 = 1 << (v38 & 7 | (8 * (v37 & 7)));
    v51[2] = v44;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    sub_22E3BEDDC((uint64_t)(a3 + 34), v43, (uint64_t)v51);
    v47 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v66 = 257;
    sub_22E3C12C8(a3 + 34, v47, (uint64_t)&p_Name);
    a3[40] = v30;
    a3[41] = v30 + 40;
    LODWORD(Name) = 0;
    v66 = 257;
    *(_QWORD *)a1 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v24, (uint64_t)&Name, 1, (uint64_t)&p_Name);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (v67 != v69)
    free(v67);
  return sub_22E54C5D0((void ***)&v61);
}

void ***sub_22E52FF40(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int a5)
{
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  unsigned __int8 *v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Declaration;
  llvm::Value *v25;
  uint64_t v26;
  llvm::Value *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type *v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t NullValue;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v52;
  _QWORD v54[3];
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  unint64_t v59;
  uint64_t Name;
  uint64_t v61;
  const char *v62;
  __int16 v63;
  unint64_t v64;
  uint64_t *p_Name;
  _QWORD *v66;
  const char *v67;
  uint64_t v68;
  __int16 v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[12];

  v72[10] = *MEMORY[0x24BDAC8D0];
  switch(a5)
  {
    case 4:
      v9 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16) >> 19) & 0x1FF;
      v10 = (char *)&unk_22F45A24C;
LABEL_7:
      v8 = &v10[12 * v9 - 2748];
      goto LABEL_8;
    case 1:
      v9 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16) >> 19) & 0x1FF;
      v10 = (char *)&unk_22F45A210;
      goto LABEL_7;
    case 0:
      v8 = (char *)&unk_22F45A1BC
         + 12
         * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2
                                                                                               * (((unint64_t)*a4 >> 18) & 1)
                                                                                               + 2]
                                                                                   + ((unint64_t)*a4 >> 24))
                                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) >> 19) & 0x1FF)
         - 2724;
LABEL_8:
      v11 = 1;
      v12 = 2;
      goto LABEL_10;
  }
  v12 = 0;
  v11 = 0;
  v8 = 0;
LABEL_10:
  v13 = *(_QWORD *)(*(_QWORD *)(sub_22E3E4B64(*(_QWORD *)(*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFF0)) + 32) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F10E0EC(v13))
  {
    if (sub_22F110930(v13))
      v8 += 4 * v11;
    else
      v8 += 4 * v12;
  }
  v52 = *(_DWORD *)v8;
  v14 = sub_22EFFA604(*(unsigned __int8 **)((char *)a4 + *((unsigned __int8 *)a4 + 3)));
  if (v14 && (*(_DWORD *)(v14 + 28) & 0x7Eu) - 52 >= 6)
    v14 = 0;
  v15 = sub_22EFC01DC(v14, 0);
  v16 = a4[4];
  v64 = 0x4000000000000001;
  sub_22E54C570(&v64, v16 - 1);
  sub_22E54C570(&v64, v16 - 2);
  v70 = (_QWORD *)0x8000000000000002;
  v71 = 0;
  if (sub_22E3B38EC((_DWORD *)(a2 + 16), &v70))
    sub_22E54C570(&v64, v16 - 3);
  v70 = (_QWORD *)0x8000000200000002;
  v71 = 0;
  if (sub_22E3B38EC((_DWORD *)(a2 + 16), &v70)
    && (v15 - 1785) <= 0xF
    && ((0xF87Fu >> (v15 + 7)) & 1) != 0)
  {
    sub_22E54C570(&v64, a4[4] + dword_22F45AA60[v15 - 1785]);
  }
  v70 = v72;
  v71 = 0xA00000000;
  v17 = a4[4];
  if ((_DWORD)v17)
  {
    for (i = 0; v17 != i; ++i)
    {
      if ((v64 & 1) != 0)
      {
        if (((1 << i) & (v64 >> 1) & ~(-1 << (v64 >> 58))) == 0)
        {
LABEL_29:
          v19 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * i]
                                    + ((unint64_t)*a4 >> 24));
          p_Name = a3;
          v66 = a3 + 34;
          LOBYTE(v67) = 0;
          v68 = *(_QWORD *)(a3[18] + 232);
          v20 = sub_22E50E974((uint64_t *)&p_Name, v19);
          v21 = v71;
          if (v71 >= (unint64_t)HIDWORD(v71))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v71;
          }
          v70[v21] = v20;
          LODWORD(v71) = v71 + 1;
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v64 + 8 * (i >> 6)) & (1 << i)) == 0)
      {
        goto LABEL_29;
      }
    }
  }
  v22 = *(_QWORD *)(a2 + 472);
  v23 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  p_Name = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 256))(v23, *(_QWORD *)(a2 + 8), *((_QWORD *)a4 + 1));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 64))(v22, v52);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v25 = (llvm::Value *)Declaration;
  if (Declaration)
    v26 = *(_QWORD *)(Declaration + 24);
  else
    v26 = 0;
  v69 = 257;
  v27 = sub_22E462B78(a3 + 34, v26, Declaration, (uint64_t)v70, v71, (uint64_t)&p_Name, 0);
  *((_QWORD *)v27 + 8) = *((_QWORD *)v25 + 14);
  v28 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v28 & 0xF8;
  p_Name = (uint64_t *)0x8000000200000002;
  v66 = 0;
  if ((sub_22E3B38EC((_DWORD *)(a2 + 16), &p_Name) & 1) == 0)
  {
    v63 = 773;
    Name = llvm::Value::getName(v25);
    v61 = v29;
    v62 = ".";
    p_Name = &Name;
    v67 = "store_ack";
    v69 = 770;
    v30 = operator new();
    llvm::BasicBlock::BasicBlock();
    v31 = llvm::Value::getName(v25);
    v63 = 773;
    Name = v31;
    v61 = v32;
    v62 = ".";
    p_Name = &Name;
    v67 = "end";
    v69 = 770;
    v33 = operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E4DFD40((uint64_t)a3, *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) - 2 + 2 * a4[4]]+ ((unint64_t)*a4 >> 24)), 0, 0, 0, 0, (uint64_t)v58);
    v35 = v58[1];
    if (!v58[0])
      v35 = 0;
    v36 = __clz(v59) ^ 0x3F;
    v37 = v58[0] & 0xFFFFFFFFFFFFFFF8 | (v36 >> 3);
    v38 = v35 & 0xFFFFFFFFFFFFFFF8 | v36 & 7;
    if (v59)
      v39 = v37;
    else
      v39 = v58[0];
    if (!v59)
      v38 = v35;
    if (v58[0])
      v40 = v39;
    else
      v40 = 0;
    if (v58[0])
      v41 = v38;
    else
      v41 = v35;
    v69 = 257;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v40 & 0xFFFFFFFFFFFFFFF8), v34);
    v43 = sub_22E3C18F4((uint64_t)(a3 + 34), 33, (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFF8), NullValue, (uint64_t)&p_Name);
    v44 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v44, v30, v33, v43, 0);
    v69 = 257;
    sub_22E3C12C8(a3 + 34, v44, (uint64_t)&p_Name);
    a3[40] = v30;
    a3[41] = v30 + 40;
    LODWORD(Name) = 1;
    v69 = 257;
    v45 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v27, (uint64_t)&Name, 1, (uint64_t)&p_Name);
    v69 = 257;
    v46 = (llvm::Type **)sub_22E3C1740(a3 + 34, 38, v45, v41 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&p_Name);
    v47 = 0;
    if (v40 <= 7)
      v48 = 0;
    else
      v48 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 <= 7)
      v49 = 0;
    else
      v49 = v41 & 0xFFFFFFFFFFFFFFF8;
    v54[0] = v48;
    v54[1] = v49;
    if (v40 >= 8)
      v47 = 1 << (v41 & 7 | (8 * (v40 & 7)));
    v54[2] = v47;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    sub_22E3BEDDC((uint64_t)(a3 + 34), v46, (uint64_t)v54);
    v50 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v69 = 257;
    sub_22E3C12C8(a3 + 34, v50, (uint64_t)&p_Name);
    a3[40] = v33;
    a3[41] = v33 + 40;
    LODWORD(Name) = 0;
    v69 = 257;
    *(_QWORD *)a1 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v27, (uint64_t)&Name, 1, (uint64_t)&p_Name);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (v70 != v72)
    free(v70);
  return sub_22E54C5D0((void ***)&v64);
}

void sub_22E5306A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Declaration;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  char v28;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  __int16 v32;
  _QWORD *v33;
  unsigned int v34;
  char v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[10];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (v11 && *(_BYTE *)(v11 + 16) == 56
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && (v11 = sub_22F10CF48(v11)) != 0)
  {
    v10 = *(_QWORD *)(v11 + 32);
  }
  v12 = a5 - 1646;
  sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v33);
  v36 = v38;
  v37 = 0x800000000;
  if (a4[4] != 1)
  {
    v13 = 0;
    v14 = 8 * (a4[4] - 1);
    do
    {
      v15 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v13 / 4]
                                + ((unint64_t)*a4 >> 24));
      v29[0] = a3;
      v29[1] = a3 + 272;
      v30 = 0;
      v31 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v16 = sub_22E50E974(v29, v15);
      v17 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v37;
      }
      *((_QWORD *)v36 + v17) = v16;
      LODWORD(v37) = v37 + 1;
      v13 += 8;
    }
    while (v14 != v13);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 110624779;
  else
    v19 = 0;
  if (v19)
  {
    v20 = &v33;
    if (v34 >= 0x41)
      v20 = v33;
    __asm { BR              X11 }
  }
  v21 = dword_22F459874[4 * v12 + 3];
  v22 = *(_QWORD *)(a2 + 472);
  v23 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v29[0] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 256))(v23, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 64))(v22, v21);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v25 = Declaration;
  if (Declaration)
    v26 = *(_QWORD *)(Declaration + 24);
  else
    v26 = 0;
  v32 = 257;
  v27 = sub_22E462B78((uint64_t *)(a3 + 272), v26, Declaration, (uint64_t)v36, v37, (uint64_t)v29, 0);
  *((_QWORD *)v27 + 8) = *(_QWORD *)(v25 + 112);
  v28 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v28 & 0xF8;
  if (v36 != v38)
    free(v36);
  if (v35 && v34 >= 0x41)
  {
    if (v33)
      MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
  }
}

void sub_22E5309F4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, const void *a5, size_t __n)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  uint64_t Declaration;
  uint64_t v25;
  llvm::Value *v26;
  char v27;
  void *__p[2];
  char v30;
  __int16 v31;
  void *v32;
  __int128 v33;
  _QWORD v34[8];
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[4];

  v37[2] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v35 = v37;
  v36 = 0x200000000;
  v11 = a4[4];
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = 8 * v11;
    do
    {
      v15 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v13 / 4]
                                + ((unint64_t)*a4 >> 24));
      v32 = a3;
      *(_QWORD *)&v33 = a3 + 34;
      BYTE8(v33) = 0;
      v34[0] = *(_QWORD *)(a3[18] + 232);
      v16 = sub_22E50E974((uint64_t *)&v32, v15);
      v17 = v36;
      if (v36 >= (unint64_t)HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v36;
      }
      v35[v17] = v16;
      LODWORD(v36) = v36 + 1;
      v13 += 8;
    }
    while (v14 != v13);
  }
  v32 = v34;
  LODWORD(v34[0]) = 779250017;
  v33 = xmmword_22F45AB70;
  if (__n + 4 < 0x41)
  {
    v18 = 4;
    if (!__n)
      goto LABEL_9;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v18 = v33;
  if (__n)
  {
LABEL_8:
    memcpy((char *)v32 + v18, a5, __n);
    v18 = v33;
  }
LABEL_9:
  v19 = v18 + __n;
  *(_QWORD *)&v33 = v19;
  if (*((_QWORD *)&v33 + 1) < v19 + 1)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v19 = v33;
  }
  *((_BYTE *)v32 + v19) = 46;
  *(_QWORD *)&v33 = v33 + 1;
  v20 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 256))(v20, *(_QWORD *)(a2 + 8), v10);
  llvm_utils::getMangledTypeStr();
  if (v30 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if (v30 >= 0)
    v22 = v30 & 0x7F;
  else
    v22 = (size_t)__p[1];
  v23 = v33;
  if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33 + v22)
  {
    if (!v22)
      goto LABEL_20;
    goto LABEL_19;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v23 = v33;
  if (v22)
  {
LABEL_19:
    memcpy((char *)v32 + v23, v21, v22);
    v23 = v33;
  }
LABEL_20:
  *(_QWORD *)&v33 = v23 + v22;
  if (v30 < 0)
    operator delete(__p[0]);
  llvm::air::AIRFunctionInfo::lookupName();
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v25 = *(_QWORD *)(Declaration + 24);
  else
    v25 = 0;
  v31 = 257;
  v26 = sub_22E462B78(a3 + 34, v25, Declaration, (uint64_t)v35, v36, (uint64_t)__p, 0);
  *((_QWORD *)v26 + 8) = *(_QWORD *)(Declaration + 112);
  v27 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v27 & 0xF8;
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
}

void sub_22E530D40(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *p_p;
  size_t v23;
  uint64_t v24;
  uint64_t Declaration;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  char v34;
  char *v35;
  char *v36;
  void *__p;
  _QWORD *v38;
  char v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  uint64_t v44;
  _BYTE v45[16];
  void *v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)a4 + 1);
  v11 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4]
                                                        + ((unint64_t)*a4 >> 24))
                                            + 8) & 0xFFFFFFFFFFFFFFF0));
  v46 = &v48;
  v49 = 100;
  v48 = *(_QWORD *)"air.vload";
  v47 = xmmword_22F45AB90;
  v12 = 9;
  if (a5 != 2)
  {
    if (a5 != 1)
      goto LABEL_5;
    v50 = 97;
    v12 = 10;
  }
  v13 = (char *)&v48 + v12;
  v13[4] = 102;
  *(_DWORD *)v13 = 1818323039;
  v12 += 5;
  *(_QWORD *)&v47 = v12;
LABEL_5:
  *((_BYTE *)&v48 + v12) = 46;
  v14 = v47;
  v15 = v47 + 1;
  *(_QWORD *)&v47 = v47 + 1;
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v16 & 8) == 0)
  {
LABEL_8:
    if (*((_QWORD *)&v47 + 1) < (unint64_t)(v14 + 8))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v15 = v47;
    }
    v18 = (char *)v46 + v15;
    *(_DWORD *)((char *)v18 + 3) = 1702125942;
    *v18 = 1986622064;
    v19 = 7;
    goto LABEL_11;
  }
  v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  if (v17 > 11)
  {
    if (v17 == 12)
    {
      if (*((_QWORD *)&v47 + 1) < (unint64_t)(v14 + 6))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v15 = v47;
      }
      v35 = (char *)v46 + v15;
      v35[4] = 108;
      *(_DWORD *)v35 = 1633906540;
      v19 = 5;
    }
    else
    {
      if (*((_QWORD *)&v47 + 1) < (unint64_t)(v14 + 9))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v15 = v47;
      }
      *(_QWORD *)((char *)v46 + v15) = 0x746E6174736E6F63;
      v19 = 8;
    }
  }
  else
  {
    if (!v17)
      goto LABEL_8;
    if (*((_QWORD *)&v47 + 1) < (unint64_t)(v14 + 7))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v15 = v47;
    }
    v36 = (char *)v46 + v15;
    *((_WORD *)v36 + 2) = 27745;
    *(_DWORD *)v36 = 1651469415;
    v19 = 6;
  }
LABEL_11:
  v20 = v47 + v19;
  *(_QWORD *)&v47 = v20;
  if (*((_QWORD *)&v47 + 1) < (unint64_t)(v20 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v20 = v47;
  }
  *((_BYTE *)v46 + v20) = 46;
  *(_QWORD *)&v47 = v47 + 1;
  v21 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 256))(v21, *(_QWORD *)(a2 + 8), v10);
  llvm_utils::getMangledTypeStr();
  if (v40 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v40 >= 0)
    v23 = v40 & 0x7F;
  else
    v23 = (size_t)v38;
  v24 = v47;
  if (*((_QWORD *)&v47 + 1) >= (unint64_t)v47 + v23)
  {
    if (!v23)
      goto LABEL_22;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v24 = v47;
  if (v23)
  {
LABEL_21:
    memcpy((char *)v46 + v24, p_p, v23);
    v24 = v47;
  }
LABEL_22:
  *(_QWORD *)&v47 = v24 + v23;
  if (v40 < 0)
    operator delete(__p);
  llvm::air::AIRFunctionInfo::lookupName();
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v43 = v45;
  v44 = 0x200000000;
  if (a4[4] == 1)
  {
    v31 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 8 * (a4[4] - 1);
    do
    {
      v28 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v26 / 4]
                                + ((unint64_t)*a4 >> 24));
      __p = a3;
      v38 = a3 + 34;
      v39 = 0;
      v41 = *(_QWORD *)(a3[18] + 232);
      v29 = sub_22E50E974((uint64_t *)&__p, v28);
      v30 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v44;
      }
      *((_QWORD *)v43 + v30) = v29;
      v31 = (v44 + 1);
      LODWORD(v44) = v44 + 1;
      v26 += 8;
    }
    while (v27 != v26);
  }
  if (Declaration)
    v32 = *(_QWORD *)(Declaration + 24);
  else
    v32 = 0;
  v42 = 257;
  v33 = sub_22E462B78(a3 + 34, v32, Declaration, (uint64_t)v43, v31, (uint64_t)&__p, 0);
  *((_QWORD *)v33 + 8) = *(_QWORD *)(Declaration + 112);
  v34 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v33;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v34 & 0xF8;
  if (v43 != v45)
    free(v43);
  if (v46 != &v48)
    free(v46);
}

void sub_22E531204(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *p_p;
  char *v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t Declaration;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38[2];
  char v39;
  uint64_t v40;
  __int16 v41;
  void *__p;
  uint64_t v43;
  _BYTE v44[7];
  char v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)&a4[2 * (((unint64_t)*a4 >> 18) & 1)] + ((unint64_t)*a4 >> 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  v12 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF0));
  v46 = &v48;
  v49 = 25970;
  v48 = *(_QWORD *)"air.vstore";
  v47 = xmmword_22F45ABA0;
  v13 = 10;
  if (a5 != 2)
  {
    if (a5 != 1)
      goto LABEL_5;
    v50 = 97;
    v13 = 11;
  }
  v14 = (char *)&v48 + v13;
  v14[4] = 102;
  *(_DWORD *)v14 = 1818323039;
  v13 += 5;
  *(_QWORD *)&v47 = v13;
LABEL_5:
  *((_BYTE *)&v48 + v13) = 46;
  v15 = v47;
  v16 = v47 + 1;
  *(_QWORD *)&v47 = v47 + 1;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v17 & 8) == 0)
  {
LABEL_8:
    if (*((_QWORD *)&v47 + 1) < (unint64_t)(v15 + 8))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = v47;
    }
    v19 = (char *)v46 + v16;
    *(_DWORD *)((char *)v19 + 3) = 1702125942;
    *v19 = 1986622064;
    v20 = 7;
    goto LABEL_11;
  }
  v18 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  if (v18 > 11)
  {
    if (v18 == 12)
    {
      if (*((_QWORD *)&v47 + 1) < (unint64_t)(v15 + 6))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v16 = v47;
      }
      v23 = (char *)v46 + v16;
      v23[4] = 108;
      *(_DWORD *)v23 = 1633906540;
      v20 = 5;
    }
    else
    {
      if (*((_QWORD *)&v47 + 1) < (unint64_t)(v15 + 9))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v16 = v47;
      }
      *(_QWORD *)((char *)v46 + v16) = 0x746E6174736E6F63;
      v20 = 8;
    }
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    if (*((_QWORD *)&v47 + 1) < (unint64_t)(v15 + 7))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = v47;
    }
    v24 = (char *)v46 + v16;
    *((_WORD *)v24 + 2) = 27745;
    *(_DWORD *)v24 = 1651469415;
    v20 = 6;
  }
LABEL_11:
  v21 = v47 + v20;
  *(_QWORD *)&v47 = v21;
  if (*((_QWORD *)&v47 + 1) < (unint64_t)(v21 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v21 = v47;
  }
  *((_BYTE *)v46 + v21) = 46;
  *(_QWORD *)&v47 = v47 + 1;
  if (a4[4] == 4)
  {
    sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 8] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&__p);
    if (v43 >= 0x41)
      p_p = __p;
    else
      p_p = &__p;
    __asm { BR              X10 }
  }
  v25 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 256))(v25, *(_QWORD *)(a2 + 8), v11);
  llvm_utils::getMangledTypeStr();
  if (v45 >= 0)
    v26 = &__p;
  else
    v26 = __p;
  if (v45 >= 0)
    v27 = v45 & 0x7F;
  else
    v27 = v43;
  v28 = v47;
  if (*((_QWORD *)&v47 + 1) >= (unint64_t)v47 + v27)
  {
    if (!v27)
      goto LABEL_37;
    goto LABEL_36;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v28 = v47;
  if (v27)
  {
LABEL_36:
    memcpy((char *)v46 + v28, v26, v27);
    v28 = v47;
  }
LABEL_37:
  *(_QWORD *)&v47 = v28 + v27;
  if (v45 < 0)
    operator delete(__p);
  llvm::air::AIRFunctionInfo::lookupName();
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  __p = v44;
  v43 = 0x400000000;
  if (a4[4] == (a4[4] == 4))
  {
    v35 = 0;
  }
  else
  {
    v30 = 0;
    v31 = 8 * (a4[4] - (a4[4] == 4));
    do
    {
      v32 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v30 / 4]
                                + ((unint64_t)*a4 >> 24));
      v38[0] = a3;
      v38[1] = a3 + 272;
      v39 = 0;
      v40 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v33 = sub_22E50E974(v38, v32);
      v34 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v43;
      }
      *((_QWORD *)__p + v34) = v33;
      v35 = (v43 + 1);
      LODWORD(v43) = v43 + 1;
      v30 += 8;
    }
    while (v31 != v30);
  }
  if (Declaration)
    v36 = *(_QWORD *)(Declaration + 24);
  else
    v36 = 0;
  v41 = 257;
  *((_QWORD *)sub_22E462B78((uint64_t *)(a3 + 272), v36, Declaration, (uint64_t)__p, v35, (uint64_t)v38, 0) + 8) = *(_QWORD *)(Declaration + 112);
  v37 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v37 & 0xF8;
  if (__p != v44)
    free(__p);
  if (v46 != &v48)
    free(v46);
}

void sub_22E53189C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, char a5)
{
  _QWORD **v8;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::air::AIRFunctionInfo *v15;
  llvm::Module *v16;
  uint64_t IntersectDirectAccessDeclaration;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  int v46;
  unsigned int *v47;
  llvm::Value *v48;
  _QWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[3];
  _OWORD v61[3];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[40];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[11];

  v71[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v69);
  if (v70 >= 0x41)
    v8 = (_QWORD **)v69;
  else
    v8 = &v69;
  v53 = *(_DWORD *)v8;
  if (v70 >= 0x41 && v69 != 0)
    MEMORY[0x2348A0E84]();
  v69 = v71;
  v47 = a4 + 2;
  v70 = 0x800000000;
  if ((v53 & 2) != 0)
    v10 = a5;
  else
    v10 = 1;
  v52 = (_DWORD *)(a2 + 16);
  v11 = 2;
  while (1)
  {
    switch((int)v11)
    {
      case 7:
      case 28:
        if ((v53 & 1) == 0)
          goto LABEL_26;
        goto LABEL_23;
      case 8:
        if ((v53 & 0x60) == 0)
          goto LABEL_26;
        goto LABEL_23;
      case 10:
      case 11:
      case 12:
      case 13:
      case 30:
      case 31:
        goto LABEL_26;
      case 16:
        if ((v53 & 2) != 0)
          goto LABEL_23;
        goto LABEL_26;
      case 17:
      case 18:
        if ((v10 & 1) != 0)
          goto LABEL_26;
        goto LABEL_23;
      case 25:
      case 26:
      case 27:
        v66 = 0x8000000600000002;
        if ((sub_22E3B38EC(v52, &v66) & 1) != 0)
          goto LABEL_26;
        goto LABEL_23;
      case 32:
        v15 = *(llvm::air::AIRFunctionInfo **)(a2 + 472);
        v16 = *(llvm::Module **)(a3[18] + 200);
        if ((a5 & 1) != 0)
          IntersectDirectAccessDeclaration = llvm::air::AIRFunctionInfo::getIntersectDirectAccessDeclaration(v15, v16);
        else
          IntersectDirectAccessDeclaration = llvm::air::AIRFunctionInfo::getIntersectDeclaration(v15, v16);
        v18 = IntersectDirectAccessDeclaration;
        if (IntersectDirectAccessDeclaration)
          v19 = *(_QWORD *)(IntersectDirectAccessDeclaration + 24);
        else
          v19 = 0;
        LOWORD(v68) = 257;
        v20 = sub_22E462B78(a3 + 34, v19, IntersectDirectAccessDeclaration, (uint64_t)v69, v70, (uint64_t)&v66, 0);
        v21 = 0;
        v46 = v53 & 3;
        *((_QWORD *)v20 + 8) = *(_QWORD *)(v18 + 112);
        v22 = 31;
        v48 = v20;
        do
        {
          if ((a5 & 1) == 0)
          {
            switch((int)v22)
            {
              case '#':
                v66 = 0x8000000500000002;
                if ((sub_22E3B38EC(v52, &v66) & 1) == 0)
                  goto LABEL_67;
                goto LABEL_52;
              case '$':
                if (v46 == 3)
                  goto LABEL_70;
                goto LABEL_52;
              case '%':
                if (v46 == 1)
                  goto LABEL_70;
                goto LABEL_52;
              case '&':
                v66 = 0x8000000400000002;
                v42 = sub_22E3B38EC(v52, &v66);
                if ((v53 & 1) != 0)
                  v43 = v42;
                else
                  v43 = 1;
                if (v43 & 1 | (v53 >> 1) & 1)
                  goto LABEL_52;
LABEL_67:
                v51 = *(_QWORD *)((char *)&v47[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * v22]
                                + ((unint64_t)*a4 >> 24));
                sub_22E4DFD40((uint64_t)a3, (unsigned __int8 *)v51, 0, 0, 0, 0, (uint64_t)&v62);
                goto LABEL_38;
              case '\'':
              case '(':
                if ((v53 & 4) != 0)
                  goto LABEL_36;
                goto LABEL_52;
              case ')':
                v66 = 0x8000000600000002;
                if ((sub_22E3B38EC(v52, &v66) & 1) != 0 || (v53 & 8) == 0)
                  goto LABEL_52;
LABEL_70:
                v51 = *(_QWORD *)((char *)&v47[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * v22]
                                + ((unint64_t)*a4 >> 24));
                sub_22E4DFD40((uint64_t)a3, (unsigned __int8 *)v51, 0, 0, 0, 0, (uint64_t)&v62);
                v50 = (_QWORD *)a3[40];
                goto LABEL_39;
              case '*':
              case '+':
                v66 = 0x8000000400000002;
                if ((sub_22E3B38EC(v52, &v66) & 1) == 0 && (v53 & 0x10) != 0)
                  goto LABEL_36;
                goto LABEL_52;
              case ',':
              case '-':
                goto LABEL_52;
              default:
                goto LABEL_36;
            }
          }
          if ((v22 & 0xFFFFFFFE) == 0x2C)
          {
LABEL_36:
            v51 = *(_QWORD *)((char *)&v47[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * v22]
                            + ((unint64_t)*a4 >> 24));
            sub_22E4DFD40((uint64_t)a3, (unsigned __int8 *)v51, 0, 0, 0, 0, (uint64_t)&v62);
            v50 = (_QWORD *)a3[40];
            if (v22 <= 0x2D && ((1 << v22) & 0x2C0000000000) != 0)
            {
LABEL_38:
              v23 = (uint64_t *)v62;
              v24 = v21;
              v25 = sub_22E699F3C((_QWORD *)a3[18]);
              v26 = a3[18];
              v27 = llvm::PointerType::get();
              v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 192);
              v29 = v25;
              v21 = v24;
              v30 = v28(v29, v26, v27, *(_QWORD *)(v51 + 8));
              LOWORD(v68) = 257;
              v31 = sub_22E3C18F4((uint64_t)(a3 + 34), 33, v23, v30, (uint64_t)&v66);
              *(_QWORD *)&v66 = "intersect.nullable.output";
              LOWORD(v68) = 259;
              v32 = operator new();
              llvm::BasicBlock::BasicBlock();
              *(_QWORD *)&v66 = "intersect.nullable.cont";
              LOWORD(v68) = 259;
              v33 = operator new();
              llvm::BasicBlock::BasicBlock();
              v34 = llvm::User::operator new((llvm::User *)0x40);
              v50 = (_QWORD *)v33;
              MEMORY[0x23489C09C](v34, v32, v33, v31, 0);
              LOWORD(v68) = 257;
              sub_22E3C12C8(a3 + 34, v34, (uint64_t)&v66);
              v35 = (_QWORD *)v32;
              v20 = v48;
              sub_22E5ED9B4(a3, v35, 0);
            }
LABEL_39:
            if ((v22 & 0xFFFFFFFE) == 0x2A)
            {
              for (i = 0; i != 4; ++i)
              {
                LODWORD(v61[0]) = v21 + i;
                LOWORD(v68) = 257;
                v37 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v20, (uint64_t)v61, 1, (uint64_t)&v66);
                v60[0] = v62;
                v60[1] = v63;
                v60[2] = v64;
                LOWORD(v68) = 257;
                sub_22F26D368(a3 + 34, (uint64_t)v60, i, (uint64_t)&v66, (uint64_t)v61);
                v57 = v61[0];
                v58 = v61[1];
                v59 = v61[2];
                v38 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0));
                v66 = v57;
                v67 = v58;
                v68 = v59;
                sub_22E6281E0((_QWORD *)a3[18], v38, (uint64_t)v65);
                v39 = v38;
                v20 = v48;
                sub_22E4E8134((uint64_t)a3, v37, (uint64_t)&v66, 0, v39, 2, (uint64_t)v65, 0, 0);
              }
              v21 += 4;
            }
            else
            {
              LODWORD(v61[0]) = v21;
              LOWORD(v68) = 257;
              v40 = sub_22E3C2EA8((uint64_t)(a3 + 34), (uint64_t)v20, (uint64_t)v61, 1, (uint64_t)&v66);
              if (v22 == 36)
              {
                LOWORD(v68) = 257;
                v40 = sub_22E3C1740(a3 + 34, 39, v40, *((uint64_t *)&v62 + 1), (uint64_t)&v66);
              }
              ++v21;
              v54 = v62;
              v55 = v63;
              v56 = v64;
              v41 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0));
              v66 = v54;
              v67 = v55;
              v68 = v56;
              sub_22E6281E0((_QWORD *)a3[18], v41, (uint64_t)v61);
              sub_22E4E8134((uint64_t)a3, v40, (uint64_t)&v66, 0, v41, 2, (uint64_t)v61, 0, 0);
            }
            if (v22 <= 0x2D && ((1 << v22) & 0x2C4800000000) != 0)
            {
              sub_22E5EDA70((uint64_t)a3);
              sub_22E5ED9B4(a3, v50, 0);
            }
          }
LABEL_52:
          ++v22;
        }
        while (v22 != 46);
        v44 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 48) = v44 & 0xF8;
        if (v69 != v71)
          free(v69);
        return;
      default:
LABEL_23:
        v12 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * v11]
                                  + ((unint64_t)*a4 >> 24));
        *(_QWORD *)&v66 = a3;
        *((_QWORD *)&v66 + 1) = a3 + 34;
        LOBYTE(v67) = 0;
        *((_QWORD *)&v67 + 1) = *(_QWORD *)(a3[18] + 232);
        v13 = sub_22E50E974((uint64_t *)&v66, v12);
        v14 = v70;
        if (v70 >= (unint64_t)HIDWORD(v70))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v70;
        }
        v69[v14] = v13;
        LODWORD(v70) = v70 + 1;
LABEL_26:
        ++v11;
        break;
    }
  }
}

void sub_22E5320D8(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t (*v10)(void);
  uint64_t (*v11)(void);
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t (*v17)(void);
  uint64_t (*v18)(void);
  uint64_t (*v19)(void);
  uint64_t (*v20)(void);
  uint64_t (*v21)(void);
  void *v22[2];
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1815)
  {
    if (a2 > 1619)
    {
      switch(a2)
      {
        case 1645:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1646:
        case 1647:
        case 1649:
        case 1650:
        case 1652:
        case 1653:
        case 1655:
        case 1658:
        case 1659:
        case 1660:
        case 1661:
        case 1662:
        case 1665:
        case 1666:
        case 1667:
        case 1669:
        case 1670:
        case 1672:
        case 1673:
        case 1674:
        case 1675:
        case 1676:
        case 1677:
        case 1678:
        case 1679:
        case 1681:
        case 1682:
        case 1684:
        case 1685:
        case 1686:
        case 1688:
        case 1692:
        case 1693:
        case 1694:
        case 1695:
        case 1697:
        case 1698:
        case 1699:
        case 1700:
        case 1701:
        case 1702:
        case 1703:
        case 1704:
        case 1705:
        case 1706:
        case 1707:
        case 1708:
        case 1709:
        case 1711:
          goto LABEL_12;
        case 1648:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1651:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1654:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1656:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1657:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1663:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1664:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1668:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1671:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1680:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1683:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1687:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1689:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1690:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1691:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1696:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1710:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1712:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1713:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1714:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_51;
        case 1715:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_51;
        case 1716:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1717:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1718:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1719:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1720:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1721:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1722:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1723:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_51;
        case 1724:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_51;
        case 1725:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1726:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1727:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1728:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        default:
          switch(a2)
          {
            case 1620:
              v16 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_124;
            case 1621:
              v16 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_124;
            case 1622:
              v16 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_124;
            case 1623:
              v16 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_124:
              *a4 = v16();
              sub_22F26C634(v22, a1, (unsigned int *)a3);
              goto LABEL_130;
            case 1624:
              v21 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_129;
            case 1625:
              v21 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_129;
            case 1626:
              v21 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_129;
            case 1627:
              v21 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_129:
              *a4 = v21();
              sub_22F26C6A8(v22, a1, (unsigned int *)a3);
LABEL_130:
              sub_22E536194(a5, (uint64_t)v22);
              v15 = v22[0];
              if (v22[0] != v23)
LABEL_44:
                free(v15);
LABEL_45:
              *a6 = 1;
              break;
            default:
              goto LABEL_12;
          }
          break;
      }
      return;
    }
    if (a2 > 1428)
    {
      switch(a2)
      {
        case 1549:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1550:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1551:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1552:
        case 1553:
          goto LABEL_12;
        case 1554:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_51:
          *a4 = v11();
          goto LABEL_66;
        default:
          switch(a2)
          {
            case 1580:
              *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), 6651);
              sub_22F26C42C(v22, a1, (unsigned int *)a3);
              goto LABEL_64;
            case 1581:
              *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), 6652);
              sub_22F26C514(v22, a1, (unsigned int *)a3);
              goto LABEL_64;
            case 1582:
            case 1583:
            case 1585:
            case 1586:
            case 1587:
              goto LABEL_12;
            case 1584:
              *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), 6655);
              sub_22F26C588(v22, a1, (unsigned int *)a3);
              goto LABEL_64;
            case 1588:
              v20 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_142;
            case 1589:
              v20 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_142;
            case 1590:
              v20 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              goto LABEL_142;
            default:
              if (a2 != 1429)
                goto LABEL_12;
              v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
              break;
          }
          goto LABEL_63;
      }
    }
    switch(a2)
    {
      case 1311:
        v18 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
        break;
      case 1312:
        v18 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
        break;
      case 1427:
        v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
        goto LABEL_63;
      default:
LABEL_12:
        *a4 = 0;
        return;
    }
    *a4 = v18();
    sub_22F26C30C(v22, a1, (unsigned int *)a3);
  }
  else
  {
    if (a2 <= 1930)
    {
      switch(a2)
      {
        case 1816:
          *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), 10292);
          sub_22F26C804(v22, a1, (unsigned int *)a3);
          goto LABEL_130;
        case 1817:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1821:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1843:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1844:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1876:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1877:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1878:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_27;
        case 1879:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_27;
        case 1880:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1881:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1882:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1883:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1884:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1885:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1886:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1887:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_27;
        case 1888:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_27:
          *a4 = v12();
          goto LABEL_45;
        case 1889:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1890:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1891:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1892:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1893:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1894:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1895:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1896:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1897:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1898:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1899:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1900:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1901:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1902:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1903:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1904:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1905:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1906:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1907:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1908:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1909:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1910:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1911:
          v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_63;
        case 1912:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
          goto LABEL_43;
        case 1913:
          v10 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_43:
          *a4 = v10();
          v13 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
          v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 256))(v13, *(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + 8));
          v22[0] = v23;
          v23[0] = v14;
          v22[1] = (void *)0x800000001;
          sub_22E536194(a5, (uint64_t)v22);
          v15 = v22[0];
          if (v22[0] != v23)
            goto LABEL_44;
          goto LABEL_45;
        default:
          goto LABEL_12;
      }
    }
    if (a2 <= 1950)
    {
      if (a2 == 1931)
      {
        v19 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
      }
      else
      {
        if (a2 != 1932)
          goto LABEL_12;
        v19 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
      }
      *a4 = v19();
      sub_22F26C71C(v22, a1, (unsigned int *)a3);
      goto LABEL_64;
    }
    if (a2 == 1951)
    {
      *a4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), 10184);
      sub_22F26C634(v22, a1, (unsigned int *)a3);
      goto LABEL_64;
    }
    if (a2 != 2019)
    {
      if (a2 == 2023)
      {
        v17 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_63:
        *a4 = v17();
        sub_22F26C3B8(v22, a1, (unsigned int *)a3);
        goto LABEL_64;
      }
      goto LABEL_12;
    }
    v20 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 472) + 64);
LABEL_142:
    *a4 = v20();
    sub_22F26C6A8(v22, a1, (unsigned int *)a3);
  }
LABEL_64:
  sub_22E536194(a5, (uint64_t)v22);
  if (v22[0] != v23)
    free(v22[0]);
LABEL_66:
  *a6 = 0;
}

uint64_t sub_22E532C8C()
{
  return llvm::air::AIRFunctionInfo::getUniqueIdentifierDeclaration();
}

uint64_t sub_22E532CBC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  if (sub_22E54D73C(*(_QWORD *)v1, *(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 8)))
    return 0;
  while (1)
  {
    result = *(_QWORD *)v2;
    if (*(_WORD *)(*(_QWORD *)v2 + 32) == 210)
    {
      if (*(_BYTE *)(result + 48))
        break;
    }
    v2 += 8;
  }
  return result;
}

void sub_22E532D1C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::PHINode *v21;
  uint64_t v22;
  char v23;
  _QWORD v24[4];
  __int16 v25;

  v8 = *(_QWORD *)(a3 + 128);
  if (v8)
  {
    v12 = (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 128))(a1, a2, *(_QWORD *)(a3 + 128));
    v13 = a2[40];
    v10 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v24[0] = "fcp.guarded.cont";
    v9 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v14 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v14, v10, v9, v12, 0);
    v25 = 257;
    v15 = v14;
    v11 = v13;
    sub_22E3C12C8(a2 + 34, v15, (uint64_t)v24);
    sub_22E5ED9B4(a2, v10, 0);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  v16 = sub_22E66CB04((llvm::Type ***)(a1[1] + 280), *(llvm::LLVMContext **)(a3 + 64));
  v17 = *(_QWORD *)(a3 + 8);
  v18 = (int *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = *(int **)v18;
  sub_22F26A5CC((uint64_t)a1, (uint64_t)a2, *v18);
  v20 = v19;
  if (v8)
  {
    sub_22E5EDA70((uint64_t)a2);
    sub_22E5ED9B4(a2, v9, 0);
    v25 = 257;
    v21 = (llvm::PHINode *)sub_22E3C4B80(a2 + 34, v16, 2, (uint64_t)v24);
    v22 = llvm::UndefValue::get();
    sub_22E3C4C50(v21, v22, v11);
    sub_22E3C4C50(v21, v20, (uint64_t)v10);
    v20 = (uint64_t)v21;
  }
  v23 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 48) = v23 & 0xF8;
}

llvm::Value *sub_22E532F4C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[8];
  uint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  _OWORD v38[8];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  __int16 v69;
  _QWORD *v70;
  void *v71;
  __int128 v72;
  _QWORD v73[35];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v73[32] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F26A954(v0, v3);
  v68 = 0;
  v67 = (void *)0x8000000000000002;
  if (sub_22E3B38EC((_DWORD *)(v5 + 16), &v67))
  {
    v7 = 0;
    *(_BYTE *)(v6 + 80) |= 3u;
  }
  else
  {
    v9 = llvm::FunctionType::get();
    v71 = v73;
    v72 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)&v67, (uint64_t)&v71);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 224) + 16);
    (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)v10 + 152))(v10, v4, &v67);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v67);
    v11 = *(_QWORD *)(v5 + 8);
    v69 = 261;
    v67 = v71;
    v68 = v72;
    v13 = sub_22E46BBB8((_QWORD **)(v11 + 280), *(_QWORD *)(*(_QWORD *)(v11 + 288) + 16392), 0, 0, 0, 0, 0, v12, 0, 0, -1);
    v7 = sub_22E4CF82C(v11, v9, (uint64_t)&v67, v13, *(_DWORD *)(v4 + 24), 0, 7);
    sub_22E618EBC((uint64_t)&v67, *(_QWORD *)(v5 + 8), 0);
    v14 = *(_QWORD *)(v5 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 16392);
    v17 = sub_22E46BBB8((_QWORD **)(v14 + 280), *(_QWORD *)(*(_QWORD *)(v14 + 288) + 16392), 0, 0, 0, 0, 0, v16, 0, 0, -1);
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58[0] = &v59;
    v58[1] = (void *)0x1000000000;
    sub_22E61A8FC((uint64_t)&v67, v4, 0, v15, v7, v17, (uint64_t *)v58, *(_DWORD *)(v4 + 24), (int8x16_t)0x1000000000uLL, *(unsigned int *)(v4 + 24));
    if (v58[0] != &v59)
      free(v58[0]);
    v18 = *(_QWORD *)(v6 + 24);
    v19 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v4, 0);
    if (v19)
    {
      v20 = __clz(v19) ^ 0x3F;
      v6 = v6 & 0xFFFFFFFFFFFFFFF8 | (v20 >> 3);
      v18 = v18 & 0xFFFFFFFFFFFFFFF8 | v20 & 7;
    }
    v21 = *(_QWORD *)(v2 + 24);
    v22 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v4, 0);
    if (v22)
    {
      v23 = __clz(v22) ^ 0x3F;
      v2 = v2 & 0xFFFFFFFFFFFFFFF8 | (v23 >> 3);
      v21 = v21 & 0xFFFFFFFFFFFFFFF8 | v23 & 7;
    }
    v24 = 0;
    if (v6 <= 7)
      v25 = 0;
    else
      v25 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (v6 <= 7)
      v26 = 0;
    else
      v26 = v18 & 0xFFFFFFFFFFFFFFF8;
    if (v6 >= 8)
      v24 = 1 << (v18 & 7 | (8 * (v6 & 7)));
    v27 = *(_QWORD *)(v4 + 48);
    sub_22E6281E0(v70, v27, (uint64_t)&v55);
    *(_QWORD *)&v44 = v25;
    *((_QWORD *)&v44 + 1) = v26;
    *(_QWORD *)&v45 = v24;
    DWORD2(v45) = 0;
    v46 = 0uLL;
    v28 = v70[18];
    v40 = v55;
    v41 = v56;
    *(_QWORD *)&v42 = v57;
    v59 = 0uLL;
    v58[1] = 0;
    LODWORD(v60) = 0;
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v60 + 1) = 0;
    v62 = 0uLL;
    *(_QWORD *)((char *)&v63 + 4) = 2;
    LODWORD(v58[0]) = 0;
    v64 = 0u;
    v65 = 0u;
    sub_22E3C113C((uint64_t)v58, &v44, v27, 2, &v40, v28);
    v29 = 0;
    if (v2 <= 7)
      v30 = 0;
    else
      v30 = v2 & 0xFFFFFFFFFFFFFFF8;
    if (v2 <= 7)
      v31 = 0;
    else
      v31 = v21 & 0xFFFFFFFFFFFFFFF8;
    if (v2 >= 8)
      v29 = 1 << (v21 & 7 | (8 * (v2 & 7)));
    v32 = *(_QWORD *)(v4 + 48);
    sub_22E6281E0(v70, v32, (uint64_t)v53);
    *(_QWORD *)&v40 = v30;
    *((_QWORD *)&v40 + 1) = v31;
    *(_QWORD *)&v41 = v29;
    DWORD2(v41) = 0;
    v42 = 0uLL;
    v33 = v70[18];
    v55 = v53[0];
    v56 = v53[1];
    v57 = v54;
    *((_QWORD *)&v44 + 1) = 0;
    v45 = 0uLL;
    LODWORD(v46) = 0;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v47 = 0;
    v48 = 0uLL;
    *(_QWORD *)((char *)&v49 + 4) = 2;
    LODWORD(v44) = 0;
    v50 = 0u;
    v51 = 0u;
    sub_22E3C113C((uint64_t)&v44, &v40, v32, 2, &v55, v33);
    v38[6] = v64;
    v38[7] = v65;
    v39 = v66;
    v38[2] = v60;
    v38[3] = v61;
    v38[4] = v62;
    v38[5] = v63;
    v38[0] = *(_OWORD *)v58;
    v38[1] = v59;
    sub_22E4D7B28(&v67, (uint64_t)v38, 0, (uint64_t)&v40);
    v36[0] = v40;
    v36[1] = v41;
    v36[2] = v42;
    v37 = v43;
    v34[6] = v50;
    v34[7] = v51;
    v35 = v52;
    v34[2] = v46;
    v34[3] = v47;
    v34[4] = v48;
    v34[5] = v49;
    v34[0] = v44;
    v34[1] = v45;
    sub_22E4DAAE0((uint64_t)&v67, (uint64_t)v36, (uint64_t)v34, 0);
    sub_22E619DE8((uint64_t)&v67, 0);
    sub_22E619434((uint64_t)&v67);
    if (v71 != v73)
      free(v71);
  }
  return v7;
}

uint64_t sub_22E533458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Type ***v7;
  llvm::LLVMContext *v8;
  llvm::Type *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::Type **v20;
  _WORD v21[20];
  _BYTE v22[32];
  __int16 v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 144);
  v7 = (llvm::Type ***)(v6 + 280);
  v8 = (llvm::LLVMContext *)sub_22EF67C8C(*(_QWORD *)(v6 + 144));
  v9 = (llvm::Type *)sub_22E66CB04(v7, v8);
  v10 = sub_22E533554(a1, a3);
  if (v10 == 1)
    return llvm::ConstantInt::get();
  if (v10 == 2)
    v13 = v11;
  else
    v13 = 0;
  v14 = *(_WORD *)(v13 + 34);
  v15 = (v14 & 0x3F) - 1;
  v16 = (v14 & 0x3F) == 0;
  v17 = *(_QWORD *)(v13 + 24);
  if (v16)
    v15 = 0;
  v24[0] = v13;
  v24[1] = v17;
  v18 = 1 << v15;
  if (v16)
    v18 = 0;
  v24[2] = v18;
  v19 = (uint64_t *)(a2 + 272);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v23 = 257;
  v20 = (llvm::Type **)sub_22E3C2A7C(v19, (uint64_t)v24, (uint64_t)v22);
  v21[16] = 257;
  return sub_22E3E5C98(v19, v20, v9, (uint64_t)v21);
}

uint64_t sub_22E533554(uint64_t a1, uint64_t a2)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  llvm::StringMapImpl *v9;
  char *v10;
  BOOL v11;
  std::string *v12;
  std::string::size_type v13;
  void **v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string v25;
  uint64_t v26;
  void *__p[2];
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  sub_22F00905C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)__p);
  if (LOBYTE(v28[0]))
  {
    if (LODWORD(__p[1]) >= 0x41 && __p[0] != 0)
      MEMORY[0x2348A0E84]();
    return 1;
  }
  v26 = a2;
  __p[0] = 0;
  if ((sub_22F272228(*(_QWORD *)(a1 + 512), *(_DWORD *)(a1 + 528), a2, __p) & 1) == 0 || !*((_QWORD *)__p[0] + 1))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 1960) + 80);
    v7 = sub_22E3CD31C((uint64_t *)(v6 + 72), v6);
    v8 = *(unsigned int *)(a1 + 520);
    v9 = *(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192);
    if ((_DWORD)v8)
    {
      v10 = (char *)v28 + 5;
      do
      {
        *--v10 = (v8 % 0xA) | 0x30;
        v11 = v8 > 9;
        v8 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      v10 = (char *)v28 + 4;
      BYTE4(v28[0]) = 48;
    }
    sub_22E3B4274(&v25, v10, (char *)v28 + 5, (char *)v28 + 5 - v10);
    v12 = std::string::insert(&v25, 0, "__metal_implicit_attr_int_expr_");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v28[0] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (v28[0] >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v28[0] >= 0)
      v15 = HIBYTE(v28[0]) & 0x7F;
    else
      v15 = (size_t)__p[1];
    v16 = sub_22E3CB704(v9, v14, v15);
    if (SHIBYTE(v28[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v17 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16528), 13);
    v18 = v26;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v20 = *(_QWORD *)(v19 + 16528);
    if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v21 = (unsigned int *)sub_22E3CD3D4(v19 + 2032, 24, 3);
      sub_22F003694(v21, v20, 30, v18, 0, 0, 0);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
      v18 = (uint64_t)v21;
    }
    if (v7)
      v22 = v7 + 40;
    else
      v22 = 0;
    v23 = sub_22EFBB670(v19, v22, 0, 0, v16, v17, 0, 2);
    *(_DWORD *)(v23 + 28) |= 0x200u;
    sub_22EFBC9E4(v23, v18);
    sub_22E62F700();
    v24 = sub_22E6315B8(*(_QWORD *)(a1 + 8), v23, 0, 0);
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v24);
    sub_22F2722BC(a1 + 512, &v26)[1] = v24;
  }
  return 2;
}

uint64_t sub_22E53386C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;
  uint64_t *v10;
  llvm::Type *v11;
  unsigned int v12;
  llvm::Type *v13;
  llvm::LLVMContext *ScalarSizeInBits;
  uint64_t IntNTy;
  uint64_t NullValue;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  _WORD v28[20];
  _BYTE v29[32];
  __int16 v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = sub_22E533A54();
  v4 = *(_WORD *)(v3 + 34);
  v5 = (v4 & 0x3F) - 1;
  v6 = (v4 & 0x3F) == 0;
  v7 = *(_QWORD *)(v3 + 24);
  if (v6)
    v5 = 0;
  v31[0] = v3;
  v31[1] = v7;
  v8 = 1 << v5;
  if (v6)
    v8 = 0;
  v31[2] = v8;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v30 = 257;
  v10 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v31, (uint64_t)v29);
  v11 = (llvm::Type *)*v10;
  if ((*(_DWORD *)(*v10 + 8) & 0xFE) == 0x12)
    v12 = *(unsigned __int8 *)(**((_QWORD **)v11 + 2) + 8);
  else
    v12 = *(_DWORD *)(*v10 + 8);
  if (v12 <= 6)
  {
    v13 = *(llvm::Type **)(*(_QWORD *)(a2 + 144) + 232);
    ScalarSizeInBits = (llvm::LLVMContext *)llvm::Type::getScalarSizeInBits(v11);
    IntNTy = llvm::Type::getIntNTy(v13, ScalarSizeInBits);
    if (*v10 && *(_BYTE *)(*v10 + 8) == 18)
      IntNTy = llvm::FixedVectorType::get();
    v30 = 257;
    v10 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v10, IntNTy, (uint64_t)v29);
    v11 = (llvm::Type *)*v10;
  }
  NullValue = llvm::Constant::getNullValue(v11, v9);
  v30 = 257;
  v17 = sub_22E3C18F4(a2 + 272, 33, v10, NullValue, (uint64_t)v29);
  v19 = v17;
  v20 = *(_QWORD *)v17;
  if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) != 0x12)
    return v17;
  v22 = llvm::Constant::getNullValue(*(llvm::Constant **)(v20 + 24), v18);
  v23 = *(unsigned int *)(v20 + 32);
  if ((_DWORD)v23)
  {
    for (i = 0; i != v23; ++i)
    {
      v30 = 257;
      llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v21);
      v25 = llvm::ConstantInt::get();
      v26 = sub_22E420480((uint64_t *)(a2 + 272), v19, v25, (uint64_t)v29);
      v28[16] = 257;
      v22 = sub_22E3E58D4(a2 + 272, v26, v22, (uint64_t)v28);
    }
  }
  return v22;
}

uint64_t sub_22E533A54()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  char *v7;
  BOOL v8;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  llvm::Type *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  llvm::Constant *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t Declaration;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Constant *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE __p[23];
  char v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[28];
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  _BYTE v61[256];
  char *v62;
  __int128 v63;
  _BYTE v64[64];
  uint64_t v65;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v65 = *MEMORY[0x24BDAC8D0];
  v38 = sub_22F001848(v1);
  *(_QWORD *)__p = v38;
  v59 = 0;
  if ((sub_22F25AFD8((uint64_t *)(v3 + 632), __p, &v59) & 1) != 0)
  {
    v4 = *((_QWORD *)v59 + 1);
    if (v4)
      return v4;
  }
  *(_QWORD *)__p = 0x8000000000000002;
  *(_QWORD *)&__p[8] = 0;
  if (sub_22E3B38EC((_DWORD *)(v3 + 16), __p))
  {
    v4 = sub_22E6315B8(*(_QWORD *)(v3 + 8), v38, 0, 0);
    sub_22E6242E0(*(uint64_t **)(v3 + 8), v4);
    sub_22F272488((uint64_t *)(v3 + 632), &v38)[1] = v4;
    return v4;
  }
  v6 = *(unsigned int *)(v3 + 640);
  v62 = v64;
  qmemcpy(v64, "__metal_implicit_fc_pred_", 25);
  v63 = xmmword_22F45ABB0;
  if ((_DWORD)v6)
  {
    v7 = (char *)&v60 + 13;
    do
    {
      *--v7 = (v6 % 0xA) | 0x30;
      v8 = v6 > 9;
      v6 /= 0xAuLL;
    }
    while (v8);
  }
  else
  {
    v7 = (char *)&v60 + 12;
    BYTE12(v60) = 48;
  }
  sub_22E3B4274(__p, v7, (char *)&v60 + 13, (char *)&v60 + 13 - v7);
  if (v50 >= 0)
    v9 = __p;
  else
    v9 = *(_BYTE **)__p;
  if (v50 >= 0)
    v10 = v50 & 0x7F;
  else
    v10 = *(_QWORD *)&__p[8];
  v11 = v63;
  if (*((_QWORD *)&v63 + 1) >= (unint64_t)v63 + v10)
  {
    if (!v10)
      goto LABEL_19;
    goto LABEL_18;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v11 = v63;
  if (v10)
  {
LABEL_18:
    memcpy(&v62[v11], v9, v10);
    v11 = v63;
  }
LABEL_19:
  *(_QWORD *)&v63 = v11 + v10;
  if (v50 < 0)
    operator delete(*(void **)__p);
  sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *((_QWORD *)v2 + 1));
  v37 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(v3 + 8) + 280, *((_QWORD *)v2 + 1), 0);
  v4 = llvm::User::operator new((llvm::User *)0x58);
  llvm::Constant::getNullValue(v37, v12);
  LOWORD(v51) = 261;
  *(_QWORD *)__p = v62;
  *(_QWORD *)&__p[8] = v63;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setAlignment();
  sub_22E6242E0(*(uint64_t **)(v3 + 8), v4);
  if (!v38)
    goto LABEL_32;
  v13 = 0;
  v14 = v38;
  while (1)
  {
    v15 = sub_22EFBC5B4(v14);
    if (v15)
      break;
    if ((*(_BYTE *)(v14 + 72) & 3) != 0)
    {
      if (v13)
        goto LABEL_32;
      v13 = 1;
    }
    v16 = sub_22E3CD31C((uint64_t *)(v14 + 72), v14);
    if (v16 != v38)
    {
      v14 = v16;
      if (v16)
        continue;
    }
    goto LABEL_32;
  }
  *(_QWORD *)__p = *(_QWORD *)(v3 + 8);
  memset(&__p[8], 0, 13);
  v51 = v53;
  v52 = 0x400000000;
  v17 = sub_22F262EE8((uint64_t)__p, v15, *((_QWORD *)v2 + 1));
  if (v51 == v53)
  {
    if (!v17)
    {
LABEL_32:
      v18 = llvm::FunctionType::get();
      v59 = v61;
      v60 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)__p, (uint64_t)&v59);
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 224) + 16);
      (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v19 + 152))(v19, 0, __p);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)__p);
      v20 = *(_QWORD *)(v3 + 8);
      LOWORD(v51) = 261;
      *(_QWORD *)__p = v59;
      *(_QWORD *)&__p[8] = v60;
      v22 = sub_22E46BBB8((_QWORD **)(v20 + 280), *(_QWORD *)(*(_QWORD *)(v20 + 288) + 16392), 0, 0, 0, 0, 0, v21, 0, 0, -1);
      v23 = sub_22E4CF82C(v20, v18, (uint64_t)__p, v22, 0, 0, 7);
      sub_22E618EBC((uint64_t)__p, *(_QWORD *)(v3 + 8), 0);
      v24 = *(_QWORD *)(v3 + 8);
      v25 = *(_QWORD *)(*(_QWORD *)(v24 + 144) + 16392);
      v27 = sub_22E46BBB8((_QWORD **)(v24 + 280), *(_QWORD *)(*(_QWORD *)(v24 + 288) + 16392), 0, 0, 0, 0, 0, v26, 0, 0, -1);
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = &v41;
      v40 = 0x1000000000;
      sub_22E61A8FC((uint64_t)__p, 0, 0, v25, v23, v27, (uint64_t *)&v39, 0, (int8x16_t)0x1000000000uLL, 0);
      if (v39 != &v41)
        free(v39);
      v39 = __p;
      v40 = (uint64_t)&v54;
      LOBYTE(v41) = 0;
      *((_QWORD *)&v41 + 1) = *(_QWORD *)(v53[12] + 232);
      v28 = sub_22E50E974((uint64_t *)&v39, v2);
      v36 = sub_22E4E7F50((uint64_t)__p, (uint64_t)v28, *((_QWORD *)v2 + 1));
      v39 = (void *)0x8000000400000002;
      v40 = 0;
      if ((sub_22E3B38EC((_DWORD *)(v3 + 16), &v39) & 1) == 0)
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 472) + 64))(*(_QWORD *)(v3 + 472), 9529);
        Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
        v30 = Declaration;
        if (Declaration)
          v31 = *(_QWORD *)(Declaration + 24);
        else
          v31 = 0;
        LOWORD(v42) = 257;
        v32 = sub_22E462B78(&v54, v31, Declaration, (uint64_t)&v36, 1, (uint64_t)&v39, 0);
        *((_QWORD *)v32 + 8) = *(_QWORD *)(v30 + 112);
        v36 = (uint64_t)v32;
      }
      v33 = llvm::User::operator new((llvm::User *)0x40);
      llvm::StoreInst::StoreInst();
      LOWORD(v42) = 257;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v33, &v39, v56, v57);
      if (v55)
      {
        v34 = v54;
        v35 = v54 + 16 * v55;
        do
        {
          llvm::Instruction::setMetadata();
          v34 += 16;
        }
        while (v34 != v35);
      }
      sub_22E619DE8((uint64_t)__p, 0);
      sub_22E4D0A00(*(_QWORD **)(v3 + 8), (uint64_t)v23);
      sub_22E619434((uint64_t)__p);
      if (v59 != v61)
        free(v59);
      goto LABEL_49;
    }
  }
  else
  {
    free(v51);
    if (!v17)
      goto LABEL_32;
  }
  llvm::GlobalVariable::setInitializer();
  *(_BYTE *)(v4 + 80) |= 1u;
LABEL_49:
  sub_22F272488((uint64_t *)(v3 + 632), &v38)[1] = v4;
  if (v62 != v64)
    free(v62);
  return v4;
}

uint64_t sub_22E534160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v20;
  unsigned int v21;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (v8
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v9 = (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
  }
  else
  {
    v9 = 0;
  }
  sub_22E53827C(a1, v6, v9);
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    i = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      for (i = *(uint64_t **)v10; *(_WORD *)(*i + 32) != 424; ++i)
      {
        v14 -= 8;
        if (!v14)
          return llvm::air::AIVertexFunction::getImpl();
      }
    }
    if (i != &v11[v12])
    {
      do
      {
        v16 = *v11++;
        v15 = v16;
      }
      while (*(_WORD *)(v16 + 32) != 424);
      v17 = *(unsigned __int8 **)(v15 + 40);
      if (v17)
      {
        sub_22F007D7C(v17, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v20);
        if (v21 >= 0x41 && v20 != 0)
          MEMORY[0x2348A0E84]();
      }
      llvm::air::AIPatch::getImpl();
    }
  }
  return llvm::air::AIVertexFunction::getImpl();
}

uint64_t sub_22E534350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t *v11;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (v8)
    goto LABEL_11;
  v11 = *(unint64_t **)(a2 + 120);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v7 = sub_22F10CF48(v7);
  v6 = v11;
  if (v7)
LABEL_11:
    v9 = (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
  else
    v9 = 0;
LABEL_12:
  sub_22E53827C(a1, v6, v9);
  sub_22F26E8A8(a2);
  return llvm::air::AIFragmentFunction::getImpl();
}

uint64_t sub_22E534458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t Impl;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  llvm::Module::getOrInsertNamedMetadata();
  *(_QWORD *)(a1 + 824) = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) - 27 > 0xFFFFFFFD;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(v5);
  sub_22E537774(a1, *(_QWORD *)(v5 + 24));
  v7 = *(unint64_t **)(a3 + 120);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (v9
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && (v8 = sub_22F10CF48(v8)) != 0)
  {
    v10 = (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
  }
  else
  {
    v10 = 0;
  }
  sub_22E53827C(a1, v7, v10);
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v12 = *(uint64_t **)v11;
    if (!sub_22E54EB3C(*(uint64_t **)v11, (uint64_t *)(*(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8))))
    {
      while (1)
      {
        v14 = *v12;
        if (*(_WORD *)(*v12 + 32) == 11)
        {
          v15 = *(unsigned __int8 *)(v14 + 30);
          v16 = (~(v15 << 16) & 0x780000) != 0
              ? ((*(unsigned __int16 *)(v14 + 28) | (v15 << 16)) >> 19) & 0xF
              : sub_22F1BFAD0(v14);
          if (v16 == 1)
            break;
        }
        ++v12;
      }
      if (*v12)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v32 = 0;
        v33 = (void *)a3;
        if (sub_22E54D320(v17 + 15168, &v33, &v32))
          v18 = v32;
        else
          v18 = *(_QWORD *)(v17 + 15168) + 32 * *(unsigned int *)(v17 + 15184);
        v19 = *(uint64_t **)(v18 + 8);
        v20 = *(_QWORD *)(a3 + 48);
        v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (v21)
          v22 = *(unsigned __int8 *)(v21 + 16) - 27 > 0xFFFFFFFD;
        else
          v22 = 0;
        if (!v22)
        {
          v21 = sub_22F10CF48(v21);
          v20 = *(_QWORD *)(a3 + 48);
        }
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v23)
          v24 = (*(_DWORD *)(v23 + 16) & 0xFF800FF) == 86507531;
        else
          v24 = 0;
        if (!v24)
        {
          v25 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
          if (!v25 || *(unsigned __int8 *)(v25 + 16) - 27 <= 0xFFFFFFFD)
            v25 = sub_22F10CF48(v25);
          sub_22E548408(a1, *(_QWORD *)(v25 + 24), v19);
          v19 += 4;
          v20 = *(_QWORD *)(a3 + 48);
        }
        v33 = v35;
        v34 = 0x800000000;
        v26 = *(_QWORD *)(a3 + 120);
        v27 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (v27 && *(_BYTE *)(v27 + 16) == 26
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v27 = sub_22F10CF48(v27)) != 0)
        {
          v28 = *(_QWORD *)(v27 + 16);
          if ((v28 & 0x3FFFC000000000) != 0)
          {
            v29 = 8 * (unsigned __int16)(v28 >> 38);
            do
            {
              sub_22E548408(a1, *(_QWORD *)(*(_QWORD *)v26 + 48), v19);
              Impl = llvm::air::AIStitchingArgument::getImpl();
              v31 = v34;
              if (v34 >= (unint64_t)HIDWORD(v34))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v31 = v34;
              }
              *((_QWORD *)v33 + v31) = Impl;
              LODWORD(v34) = v34 + 1;
              v19 += 4;
              v26 += 8;
              v29 -= 8;
            }
            while (v29);
          }
        }
        llvm::air::AIStitchingInfo::getImpl();
        if (v33 != v35)
          free(v33);
      }
    }
  }
  llvm::air::AIVisibleFunction::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22E53486C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (v8
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v9 = (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
  }
  else
  {
    v9 = 0;
  }
  sub_22E53827C(a1, v6, v9);
  sub_22EFC8E88(a2);
  v11 = *v10;
  v12 = *((unsigned int *)v10 + 2);
  if ((_DWORD)v12 && *(_WORD *)(*v11 + 32) != 407)
  {
    v13 = 8 * v12 - 8;
    v14 = *v10;
    do
    {
      v15 = v14[1];
      ++v14;
      v13 -= 8;
    }
    while (*(_WORD *)(v15 + 32) != 407);
  }
  do
  {
    v17 = *v11++;
    v16 = v17;
  }
  while (*(_WORD *)(v17 + 32) != 407);
  v18 = sub_22F3A7CDC(v16);
  if (v18 == 2 && BYTE4(v18) != 0)
    v19 = 0;
  else
    v19 = BYTE4(v18);
  if (!v19)
    sub_22EFA5650(v16);
  sub_22EFA56A8(v16);
  sub_22EFA5700(v16);
  sub_22EFA5758(v16);
  sub_22EFA57B0(v16);
  sub_22EFA5808(v16);
  sub_22EFA5860(v16);
  return llvm::air::AIIntersectionFunction::getImpl();
}

void sub_22E534AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_22E534AF8
     + 4 * byte_22F458D5D[*(_QWORD *)(sub_22E54B75C(*(_QWORD *)(a2 + 144) + 15144, a3) + 8) - 1];
  __asm { BR              X10 }
}

_QWORD *sub_22E534AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t Impl;
  _QWORD *result;
  unint64_t v9;

  sub_22E54B858(v4, v6, a3, a4);
  llvm::Value::getContext(v5);
  Impl = llvm::air::AIGlobalBinding::getImpl();
  result = (_QWORD *)sub_22F26BBB0(v4 + 728, &v9);
  *result = Impl;
  return result;
}

uint64_t sub_22E534BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Impl;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string __dst;
  _QWORD *v36;
  char v37;

  v7 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22E5453EC(*v7);
  if (v8)
  {
    v31 = v8;
    v32 = sub_22F10C2A4(v8);
    if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3)
      v33 = 0;
    else
      v33 = v32;
    v34 = *(_QWORD *)(**(_QWORD **)(v33 + 168) + 8);
    sub_22F409218(v31);
    v7 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0);
  }
  v9 = sub_22E5457C4(*v7);
  if (v9)
  {
    sub_22F10C2A4(v9);
    sub_22EFC8E88(a2);
    v11 = *v10;
    v12 = *((unsigned int *)v10 + 2);
    if ((_DWORD)v12 && *(_WORD *)(*v11 + 32) != 373)
    {
      v13 = 8 * v12 - 8;
      v14 = *v10;
      do
      {
        v15 = v14[1];
        ++v14;
        v13 -= 8;
      }
      while (*(_WORD *)(v15 + 32) != 373);
    }
    do
    {
      v17 = *v11++;
      v16 = v17;
    }
    while (*(_WORD *)(v17 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v16 + 40));
  }
  v18 = *(_QWORD *)(a1 + 824);
  if (v18 && sub_22E88FFC4(v18) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v20 = *(uint64_t **)v19;
    v21 = *(unsigned int *)(v19 + 8);
    v22 = *(uint64_t **)v19;
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v22 = *(uint64_t **)v19;
      while (*(_WORD *)(*v22 + 32) != 439)
      {
        ++v22;
        v23 -= 8;
        if (!v23)
          goto LABEL_20;
      }
    }
    if (v22 != &v20[v21])
    {
      do
      {
        v25 = *v20++;
        v24 = v25;
      }
      while (*(_WORD *)(v25 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v24 + 40));
    }
  }
LABEL_20:
  sub_22E53C678(a1, a2);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v36 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, &v36) & 1) != 0)
    v26 = v36;
  else
    v26 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v26[1]);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v28 + 248))(&v36, v28, *(_QWORD *)(a1 + 8), v27, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36);
  return Impl;
}

uint64_t sub_22E534F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Impl;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string __dst;
  _QWORD *v36;
  char v37;

  v7 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22E5453EC(*v7);
  if (v8)
  {
    v31 = v8;
    v32 = sub_22F10C2A4(v8);
    if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3)
      v33 = 0;
    else
      v33 = v32;
    v34 = *(_QWORD *)(**(_QWORD **)(v33 + 168) + 8);
    sub_22F409218(v31);
    v7 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0);
  }
  v9 = sub_22E5457C4(*v7);
  if (v9)
  {
    sub_22F10C2A4(v9);
    sub_22EFC8E88(a2);
    v11 = *v10;
    v12 = *((unsigned int *)v10 + 2);
    if ((_DWORD)v12 && *(_WORD *)(*v11 + 32) != 373)
    {
      v13 = 8 * v12 - 8;
      v14 = *v10;
      do
      {
        v15 = v14[1];
        ++v14;
        v13 -= 8;
      }
      while (*(_WORD *)(v15 + 32) != 373);
    }
    do
    {
      v17 = *v11++;
      v16 = v17;
    }
    while (*(_WORD *)(v17 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v16 + 40));
  }
  v18 = *(_QWORD *)(a1 + 824);
  if (v18 && sub_22E88FFC4(v18) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v20 = *(uint64_t **)v19;
    v21 = *(unsigned int *)(v19 + 8);
    v22 = *(uint64_t **)v19;
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v22 = *(uint64_t **)v19;
      while (*(_WORD *)(*v22 + 32) != 439)
      {
        ++v22;
        v23 -= 8;
        if (!v23)
          goto LABEL_20;
      }
    }
    if (v22 != &v20[v21])
    {
      do
      {
        v25 = *v20++;
        v24 = v25;
      }
      while (*(_WORD *)(v25 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v24 + 40));
    }
  }
LABEL_20:
  sub_22E53C678(a1, a2);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v36 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, &v36) & 1) != 0)
    v26 = v36;
  else
    v26 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v26[1]);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v28 + 248))(&v36, v28, *(_QWORD *)(a1 + 8), v27, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36);
  return Impl;
}

uint64_t sub_22E53523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Impl;
  std::string __dst;
  _QWORD *v31;
  char v32;

  v7 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22E5453EC(*v7);
  if (v8)
  {
    sub_22F409218(v8);
  }
  else if (sub_22E5457C4(*v7))
  {
    sub_22EFC8E88(a2);
    v10 = *v9;
    v11 = *((unsigned int *)v9 + 2);
    if ((_DWORD)v11 && *(_WORD *)(*v10 + 32) != 373)
    {
      v12 = 8 * v11 - 8;
      v13 = *v9;
      do
      {
        v14 = v13[1];
        ++v13;
        v12 -= 8;
      }
      while (*(_WORD *)(v14 + 32) != 373);
    }
    do
    {
      v16 = *v10++;
      v15 = v16;
    }
    while (*(_WORD *)(v16 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v15 + 40));
  }
  v17 = *(_QWORD *)(a1 + 824);
  if (v17 && sub_22E88FFC4(v17) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v19 = *(uint64_t **)v18;
    v20 = *(unsigned int *)(v18 + 8);
    v21 = *(uint64_t **)v18;
    if ((_DWORD)v20)
    {
      v22 = 8 * v20;
      v21 = *(uint64_t **)v18;
      while (*(_WORD *)(*v21 + 32) != 439)
      {
        ++v21;
        v22 -= 8;
        if (!v22)
          goto LABEL_20;
      }
    }
    if (v21 != &v19[v20])
    {
      do
      {
        v24 = *v19++;
        v23 = v24;
      }
      while (*(_WORD *)(v24 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v23 + 40));
    }
  }
LABEL_20:
  sub_22E53C678(a1, a2);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v31 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, &v31) & 1) != 0)
    v25 = v31;
  else
    v25 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v25[1]);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v27 + 248))(&v31, v27, *(_QWORD *)(a1 + 8), v26, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31);
  return Impl;
}

uint64_t sub_22E535528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Impl;
  std::string __dst;
  _QWORD *v31;
  char v32;

  v7 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22E5453EC(*v7);
  if (v8)
  {
    sub_22F409218(v8);
  }
  else if (sub_22E5457C4(*v7))
  {
    sub_22EFC8E88(a2);
    v10 = *v9;
    v11 = *((unsigned int *)v9 + 2);
    if ((_DWORD)v11 && *(_WORD *)(*v10 + 32) != 373)
    {
      v12 = 8 * v11 - 8;
      v13 = *v9;
      do
      {
        v14 = v13[1];
        ++v13;
        v12 -= 8;
      }
      while (*(_WORD *)(v14 + 32) != 373);
    }
    do
    {
      v16 = *v10++;
      v15 = v16;
    }
    while (*(_WORD *)(v16 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v15 + 40));
  }
  v17 = *(_QWORD *)(a1 + 824);
  if (v17 && sub_22E88FFC4(v17) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v19 = *(uint64_t **)v18;
    v20 = *(unsigned int *)(v18 + 8);
    v21 = *(uint64_t **)v18;
    if ((_DWORD)v20)
    {
      v22 = 8 * v20;
      v21 = *(uint64_t **)v18;
      while (*(_WORD *)(*v21 + 32) != 439)
      {
        ++v21;
        v22 -= 8;
        if (!v22)
          goto LABEL_20;
      }
    }
    if (v21 != &v19[v20])
    {
      do
      {
        v24 = *v19++;
        v23 = v24;
      }
      while (*(_WORD *)(v24 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v23 + 40));
    }
  }
LABEL_20:
  sub_22E53C678(a1, a2);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v31 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, &v31) & 1) != 0)
    v25 = v31;
  else
    v25 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v25[1]);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v27 + 248))(&v31, v27, *(_QWORD *)(a1 + 8), v26, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31);
  return Impl;
}

uint64_t sub_22E535814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Impl;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string __p;
  _QWORD *v38;
  char v39;

  v7 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v8 = sub_22E5453EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  if (v8)
  {
    v34 = v8;
    v35 = sub_22F10C2A4(v8);
    if ((*(_DWORD *)(v35 + 28) & 0x7Fu) - 35 >= 3)
      v36 = 0;
    else
      v36 = v35;
    v7 = *(_QWORD *)(**(_QWORD **)(v36 + 168) + 8);
    sub_22F409218(v34);
  }
  else
  {
    v9 = sub_22E5457C4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    if (v9)
    {
      v10 = sub_22F10C2A4(v9);
      if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3)
        v11 = 0;
      else
        v11 = v10;
      v7 = *(_QWORD *)(**(_QWORD **)(v11 + 168) + 8);
      sub_22EFC8E88(a2);
      v13 = *v12;
      v14 = *((unsigned int *)v12 + 2);
      if ((_DWORD)v14 && *(_WORD *)(*v13 + 32) != 373)
      {
        v15 = 8 * v14 - 8;
        v16 = *v12;
        do
        {
          v17 = v16[1];
          ++v16;
          v15 -= 8;
        }
        while (*(_WORD *)(v17 + 32) != 373);
      }
      do
      {
        v19 = *v13++;
        v18 = v19;
      }
      while (*(_WORD *)(v19 + 32) != 373);
      sub_22E533554(a1, *(_QWORD *)(v18 + 40));
    }
  }
  v20 = sub_22E53C624(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  sub_22F10C9BC(v20);
  v21 = *(_QWORD *)(a1 + 824);
  if ((!v21 || sub_22E88FFC4(v21)) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v23 = *(uint64_t **)v22;
    v24 = *(unsigned int *)(v22 + 8);
    v25 = *(uint64_t **)v22;
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      v25 = *(uint64_t **)v22;
      while (*(_WORD *)(*v25 + 32) != 439)
      {
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_23;
      }
    }
    if (v25 != &v23[v24])
    {
      do
      {
        v28 = *v23++;
        v27 = v28;
      }
      while (*(_WORD *)(v28 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v27 + 40));
    }
  }
LABEL_23:
  sub_22E53C678(a1, a2);
  __p.__r_.__value_.__r.__words[0] = a2;
  v38 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__p, &v38) & 1) != 0)
    v29 = v38;
  else
    v29 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v29[1]);
  v30 = *(_QWORD *)(a2 + 48);
  v31 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v31 + 248))(&v38, v31, *(_QWORD *)(a1 + 8), v30, 1);
  sub_22E545858(&__p, a1, a2);
  Impl = llvm::air::AITexture::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(v38);
  return Impl;
}

uint64_t sub_22E535B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Impl;
  std::string __p;
  void *v23;
  char v24;

  v7 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22E5453EC(*v7);
  if (v8)
  {
    sub_22F409218(v8);
  }
  else if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0))
  {
    sub_22EFC8E88(a2);
    v10 = *v9;
    v11 = *((unsigned int *)v9 + 2);
    if ((_DWORD)v11 && *(_WORD *)(*v10 + 32) != 373)
    {
      v12 = 8 * v11 - 8;
      v13 = *v9;
      do
      {
        v14 = v13[1];
        ++v13;
        v12 -= 8;
      }
      while (*(_WORD *)(v14 + 32) != 373);
    }
    do
    {
      v16 = *v10++;
      v15 = v16;
    }
    while (*(_WORD *)(v16 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v15 + 40));
  }
  sub_22E53C678(a1, a2);
  __p.__r_.__value_.__r.__words[0] = a2;
  v23 = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__p, &v23) & 1) != 0)
    v17 = v23;
  else
    v17 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v17[1]);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 248))(&v23, v19, *(_QWORD *)(a1 + 8), v18, 1);
  sub_22E545858(&__p, a1, a2);
  Impl = llvm::air::AISampler::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23);
  return Impl;
}

uint64_t sub_22E535DC8(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  llvm::APFloatBase *v4;
  llvm::APFloatBase *v5;
  llvm::APFloatBase *v6;
  char v7;
  llvm::APFloatBase *v8;
  int v9;
  int v10;
  int v11;
  llvm::APFloatBase *v13;
  uint64_t v14;
  llvm::APFloatBase *v15;
  uint64_t v16;
  llvm::APFloatBase *v17;
  _BYTE v18[16];
  llvm::APFloatBase *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::APFloatBase *v22;
  _QWORD v23[4];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v4 = *(llvm::APFloatBase **)(a2 + 8);
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  v6 = v5;
  if (v5 == v4)
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 28);
  else
    v7 = *(_BYTE *)(a2 + 28);
  if ((v7 & 7u) < 2)
  {
    llvm::APFloatBase::IEEEhalf(v5);
    llvm::APFloat::convert();
    goto LABEL_50;
  }
  if (v5 == (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(v5))
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  sub_22E54C37C(&v21);
  if (v6 == v22)
    v8 = (llvm::APFloatBase *)MEMORY[0x23489F2A0](&v19, &v22);
  else
    v8 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v19, (const llvm::detail::IEEEFloat *)&v22);
  llvm::APFloatBase::IEEEsingle(v8);
  llvm::APFloat::convert();
  if (v6 == *(llvm::APFloatBase **)v3)
    v9 = llvm::detail::DoubleAPFloat::compare(v3, (const llvm::detail::DoubleAPFloat *)&v19);
  else
    v9 = llvm::detail::IEEEFloat::compare(v3, (const llvm::detail::IEEEFloat *)&v19);
  if (v9 != 2)
  {
    if (v6 == v19)
      MEMORY[0x23489F2A0](&v15, &v19);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v15, (const llvm::detail::IEEEFloat *)&v19);
    if (v6 == v15)
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v15);
    else
      llvm::detail::IEEEFloat::changeSign((llvm::detail::IEEEFloat *)&v15);
    if (v6 == v15)
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    if (v6 == *(llvm::APFloatBase **)v3)
      v10 = llvm::detail::DoubleAPFloat::compare(v3, (const llvm::detail::DoubleAPFloat *)&v17);
    else
      v10 = llvm::detail::IEEEFloat::compare(v3, (const llvm::detail::IEEEFloat *)&v17);
    v11 = v10;
    if (v6 == v17)
      sub_22E463170((llvm::APFloatBase *)v18);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v17);
    if (v6 == v15)
    {
      sub_22E463170((llvm::APFloatBase *)&v16);
      if (v11)
        goto LABEL_26;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v15);
      if (v11)
      {
LABEL_26:
        llvm::APFloat::convert();
        goto LABEL_46;
      }
    }
    if (v6 == v22)
      MEMORY[0x23489F2A0](&v13, &v22);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v13, (const llvm::detail::IEEEFloat *)&v22);
    if (v6 == v13)
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v13);
    else
      llvm::detail::IEEEFloat::changeSign((llvm::detail::IEEEFloat *)&v13);
    if (v6 == v13)
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    sub_22E51FDA0((uint64_t *)v3, (uint64_t *)&v17);
    if (v6 == v17)
      sub_22E463170((llvm::APFloatBase *)v18);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v17);
    if (v6 == v13)
      sub_22E463170((llvm::APFloatBase *)&v14);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v13);
    goto LABEL_46;
  }
  sub_22E54C3D4(v3, (const llvm::detail::IEEEFloat *)&v22);
LABEL_46:
  if (v6 == v19)
    sub_22E463170((llvm::APFloatBase *)&v20);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v19);
  if (v6 == v22)
    sub_22E463170((llvm::APFloatBase *)v23);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v22);
LABEL_50:
  if (v6 == *(llvm::APFloatBase **)v3)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    return llvm::detail::IEEEFloat::IEEEFloat();
}

uint64_t sub_22E536194(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

void sub_22E5362CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL8 v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Declaration;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  llvm::Value *v32;
  uint64_t v33;
  llvm::Value *v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40[2];
  char v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v15 = a7 & 0xFFFFFFFFFFFFFFF0;
  v16 = *(_QWORD *)(a7 & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(_BYTE *)(v16 + 16) != 56)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56 || !sub_22F10CF48(v16))
      goto LABEL_8;
    v16 = *(_QWORD *)v15;
    if (*(_BYTE *)(*(_QWORD *)v15 + 16) != 56)
      v16 = sub_22F10CF48(v16);
  }
  v15 = *(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_8:
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(_DWORD *)(v17 + 16) == 11;
  else
    v18 = 0;
  v19 = v18 && (*(_DWORD *)(v17 + 16) & 0xFF80000) == 90701824;
  v39 = a6;
  v20 = sub_22E3E4B64(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_22F110930(*(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0));
  v22 = 2;
  if (v19)
    v22 = 3;
  if (v21)
    v22 = v19;
  v23 = *(unsigned int *)(a5 + 4 * v22);
  v44 = v46;
  v45 = 0x800000000;
  v24 = a4[4];
  v25 = v24 - a8;
  if (v24 != a8)
  {
    v30 = 0;
    do
    {
      v31 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * v30]
                                + ((unint64_t)*a4 >> 24));
      v40[0] = a3;
      v40[1] = a3 + 272;
      v41 = 0;
      v42 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v32 = sub_22E50E974(v40, v31);
      v33 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = v45;
      }
      *((_QWORD *)v44 + v33) = v32;
      LODWORD(v45) = v45 + 1;
      ++v30;
    }
    while (v25 != v30);
  }
  v26 = *(_QWORD *)(a2 + 472);
  v27 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v40[0] = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 256))(v27, *(_QWORD *)(a2 + 8), v39);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 64))(v26, v23);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v29 = *(_QWORD *)(Declaration + 24);
  else
    v29 = 0;
  v43 = 257;
  v34 = sub_22E462B78((uint64_t *)(a3 + 272), v29, Declaration, (uint64_t)v44, v45, (uint64_t)v40, 0);
  *((_QWORD *)v34 + 8) = *(_QWORD *)(Declaration + 112);
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v36 = (*(_DWORD *)(v35 + 16) & 0xFF800FF) != 0x528000B || v35 == 0;
  v37 = *(_BYTE *)(a1 + 48) & 0xF8;
  if (v36)
    v38 = v34;
  else
    v38 = 0;
  *(_QWORD *)a1 = v38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v37;
  if (v44 != v46)
    free(v44);
}

llvm::Value *sub_22E5365C0(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  __int128 v12;
  __int128 v14;
  _OWORD v15[3];
  _OWORD v16[3];

  if (a5 && (*(_DWORD *)(llvm::PointerType::get() + 8) & 0xFFFFFF00) == 0x100)
  {
    v14 = a3[1];
    v16[0] = *a3;
    v16[1] = v14;
    v16[2] = a3[2];
    return sub_22F26C910(a1, a2, (uint64_t)v16, a5, a4);
  }
  else
  {
    v12 = a3[1];
    v15[0] = *a3;
    v15[1] = v12;
    v15[2] = a3[2];
    return (llvm::Value *)sub_22E485864(a2 + 34, (uint64_t)v15, a4, a6);
  }
}

llvm::Value *sub_22E536680(uint64_t a1, _QWORD *a2, llvm::Type **a3, _OWORD *a4, int a5, int a6)
{
  __int128 v12;
  __int128 v14;
  _OWORD v15[3];
  _OWORD v16[3];

  if (a6 && (*(_DWORD *)(llvm::PointerType::get() + 8) & 0xFFFFFF00) == 0x100)
  {
    v14 = a4[1];
    v16[0] = *a4;
    v16[1] = v14;
    v16[2] = a4[2];
    return sub_22F26CB8C(a1, a2, (uint64_t)a3, (uint64_t)v16, a6, a5);
  }
  else
  {
    v12 = a4[1];
    v15[0] = *a4;
    v15[1] = v12;
    v15[2] = a4[2];
    return (llvm::Value *)sub_22E3BEDDC((uint64_t)(a2 + 34), a3, (uint64_t)v15);
  }
}

uint64_t sub_22E536744(uint64_t a1, uint64_t a2, _OWORD *a3, unsigned int a4, _OWORD *a5, unsigned int a6, llvm::Constant **a7, unsigned int a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t NullValue;
  uint64_t v17;
  uint64_t v18;
  llvm::Constant *v19;
  llvm::PHINode *v20;
  llvm::Type *v21;
  uint64_t v22;
  __int128 v23;
  llvm::LLVMContext *v24;
  unint64_t Int8Ty;
  __int128 v26;
  llvm::LLVMContext *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  _OWORD v40[3];
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[2];
  __int128 v44;
  _OWORD v45[3];
  _OWORD v46[2];
  __int128 v47;
  unsigned __int8 *v48[4];
  __int16 v49;
  unsigned __int8 *v50[4];
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v12 = (uint64_t *)(a2 + 272);
  v35 = *(_QWORD *)(a2 + 320);
  v13 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v46[0] = "memcpy.coherent.continue";
  LOWORD(v47) = 259;
  v14 = operator new();
  llvm::BasicBlock::BasicBlock();
  LOWORD(v44) = 257;
  NullValue = llvm::Constant::getNullValue(*a7, v15);
  v17 = sub_22E3C18F4((uint64_t)v12, 32, (uint64_t *)a7, NullValue, (uint64_t)v43);
  v18 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v18, v14, v13, v17, 0);
  LOWORD(v47) = 257;
  sub_22E3C12C8(v12, v18, (uint64_t)v46);
  *(_QWORD *)(a2 + 320) = v13;
  *(_QWORD *)(a2 + 328) = v13 + 40;
  v19 = *a7;
  LOWORD(v47) = 257;
  v20 = (llvm::PHINode *)sub_22E3C4B80(v12, (uint64_t)v19, 2, (uint64_t)v46);
  v22 = llvm::Constant::getNullValue(*a7, v21);
  sub_22E3C4C50(v20, v22, v35);
  v23 = a5[1];
  v45[0] = *a5;
  v45[1] = v23;
  v45[2] = a5[2];
  v50[0] = (unsigned __int8 *)v20;
  Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v24);
  LOWORD(v44) = 257;
  sub_22E480FFC(v12, (uint64_t)v45, v50, 1, Int8Ty, 1uLL, (const char **)v43, (uint64_t)v46);
  v26 = a3[1];
  v42[0] = *a3;
  v42[1] = v26;
  v42[2] = a3[2];
  v48[0] = (unsigned __int8 *)v20;
  v28 = llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v27);
  v51 = 257;
  sub_22E480FFC(v12, (uint64_t)v42, v48, 1, v28, 1uLL, (const char **)v50, (uint64_t)v43);
  v41[0] = v46[0];
  v41[1] = v46[1];
  v41[2] = v47;
  v51 = 257;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD, unsigned __int8 **))(*(_QWORD *)a1 + 88))(a1, a2, v41, a8, a6, v50);
  v40[0] = v43[0];
  v40[1] = v43[1];
  v40[2] = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 96))(a1, a2, v29, v40, a8, a4);
  v30 = llvm::ConstantInt::get();
  v51 = 257;
  v31 = (uint64_t *)sub_22F26180C((uint64_t)v12, (uint64_t)v20, v30, (uint64_t)v50);
  v49 = 257;
  v32 = sub_22E3C18F4((uint64_t)v12, 35, v31, (uint64_t)a7, (uint64_t)v48);
  v33 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v33, v14, v13, v32, 0);
  v51 = 257;
  sub_22E3C12C8(v12, v33, (uint64_t)v50);
  result = sub_22E3C4C50(v20, (uint64_t)v31, v13);
  *(_QWORD *)(a2 + 320) = v14;
  *(_QWORD *)(a2 + 328) = v14 + 40;
  return result;
}

void sub_22E536AAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + 32 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      sub_22F243E90(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      sub_22F243E90(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + 32 * v6;
  v8 = *(_QWORD *)(v2 + 24);
  if (v8)
  {
    if (v8 == v2)
    {
      *(_QWORD *)(v7 + 24) = v7;
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 24))(*(_QWORD *)(v2 + 24));
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(v2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

llvm::Value *sub_22E536B64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  BOOL v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  llvm::Value *result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char *v22;
  _DWORD v23[2];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  switch(a5)
  {
    case 1758:
    case 1760:
    case 1762:
    case 1765:
    case 1768:
    case 1772:
      v8 = (a4 - 1) >= 2;
      goto LABEL_7;
    case 1759:
    case 1761:
    case 1763:
    case 1766:
    case 1769:
    case 1770:
    case 1773:
      v8 = (a4 - 1) >= 3;
      goto LABEL_7;
    case 1764:
    case 1771:
      v8 = (a4 - 1) >= 4;
LABEL_7:
      v9 = !v8;
      break;
    case 1767:
      v9 = a4 == 1;
      break;
    default:
      __asm { BR              X10 }
      return result;
  }
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (v12 && *(_BYTE *)(v12 + 16) == 56
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && (v12 = sub_22F10CF48(v12)) != 0)
  {
    v10 = *(_QWORD *)(v12 + 32);
  }
  if (!v9
    || ((v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v14 = (*(_DWORD *)(v13 + 16) & 0xFF800FF) == 90701835)
      : (v14 = 0),
        !v14 || !sub_22F26D2F0(a1)))
  {
    v26 = a2;
    v27 = a2 + 272;
    v28 = 0;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v15 = (unsigned __int8 *)a3;
    return sub_22E50E974(&v26, v15);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v18 = *(_QWORD *)(v17 + 16528);
  v19 = *v11;
  if (!*v11 || (v20 = *(_DWORD *)(v19 + 16), v20 != 56))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56
      || (v19 = sub_22F10CF48(v19)) == 0)
    {
      v21 = 7864320;
      goto LABEL_30;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v18 = *(_QWORD *)(v17 + 16528);
    v20 = *(_DWORD *)(v19 + 16);
  }
  v18 = sub_22EF63724(v17, v18, *(unsigned int *)(v19 + 20), (v20 >> 19) & 0xF);
  v21 = 7602176;
LABEL_30:
  LOBYTE(v23[0]) = -103;
  if (byte_255E04EB3)
  {
    v22 = sub_22F0D3748(153);
    ++*((_DWORD *)v22 + 2);
  }
  v24 = v18;
  v25 = a3;
  v23[0] = v23[0] & 0xF80000FF | v21;
  v23[1] = 0;
  v26 = a2;
  v27 = a2 + 272;
  v28 = 0;
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v15 = (unsigned __int8 *)v23;
  return sub_22E50E974(&v26, v15);
}

uint64_t sub_22E536DC0(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  BOOL v3;

  result = sub_22E3E4B64(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 16) & 0x780000) != 0x80000
      && ((v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v3 = (*(_DWORD *)(v2 + 16) & 0xFF800FF) == 110624779)
        : (v3 = 0),
          v3))
    {
      return *(_DWORD *)(result + 20) == 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_22E536E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 384)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

void sub_22E536E94(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Declaration;
  unsigned __int8 *v10;
  uint64_t *v11;
  llvm::Value *v12;
  unsigned __int8 *v13;
  llvm::Value *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  llvm::LLVMContext *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  _OWORD v49[8];
  uint64_t v50;
  __int128 v51[2];
  __int128 v52;
  _BYTE v53[32];
  __int16 v54;
  _OWORD v55[3];
  _OWORD v56[3];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71[2];
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v75[8] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10186);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v10 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v11 = (uint64_t *)(a2 + 272);
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = a2 + 272;
  LOBYTE(v58) = 0;
  *((_QWORD *)&v58 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v12 = sub_22E50E974((uint64_t *)&v57, v10);
  v13 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = a2 + 272;
  LOBYTE(v58) = 0;
  *((_QWORD *)&v58 + 1) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v14 = sub_22E50E974((uint64_t *)&v57, v13);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v16 = v15;
  v73 = v75;
  v75[0] = v12;
  v74 = 0x800000001;
  v17 = *(_QWORD *)(a4 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), (llvm::LLVMContext *)v17);
    v34 = llvm::ConstantInt::get();
    v35 = v74;
    if (v74 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = v74;
    }
    v73[v35] = v34;
    v36 = v74 + 1;
    LODWORD(v74) = v36;
    if (v36 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = v74;
    }
    v73[v36] = v14;
    LODWORD(v74) = v74 + 1;
    v37 = *(_OWORD *)(a5 + 112);
    v47[6] = *(_OWORD *)(a5 + 96);
    v47[7] = v37;
    v48 = *(_QWORD *)(a5 + 128);
    v38 = *(_OWORD *)(a5 + 48);
    v47[2] = *(_OWORD *)(a5 + 32);
    v47[3] = v38;
    v39 = *(_OWORD *)(a5 + 80);
    v47[4] = *(_OWORD *)(a5 + 64);
    v47[5] = v39;
    v40 = *(_OWORD *)(a5 + 16);
    v47[0] = *(_OWORD *)a5;
    v47[1] = v40;
    sub_22E4D7B28((_QWORD *)a2, (uint64_t)v47, v16, (uint64_t)&v57);
    v41 = v57;
    v42 = v74;
    if (v74 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v74;
    }
    v73[v42] = v41;
    v43 = (v74 + 1);
    LODWORD(v74) = v74 + 1;
    if (Declaration)
      v44 = *(_QWORD *)(Declaration + 24);
    else
      v44 = 0;
    LOWORD(v59) = 257;
    *((_QWORD *)sub_22E462B78(v11, v44, Declaration, (uint64_t)v73, v43, (uint64_t)&v57, 0) + 8) = *(_QWORD *)(Declaration + 112);
  }
  else
  {
    v18 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v17);
    if (*(_BYTE *)(v18 + 16) == 2)
      v19 = v18;
    else
      v19 = 0;
    v20 = (unsigned int *)(v19 + 40);
    if (*(_DWORD *)(v19 + 48) >= 0x41u)
      v20 = *(unsigned int **)v20;
    v46 = *v20;
    if (*v20)
    {
      v21 = 0;
      v22 = (_OWORD *)(a5 + 8);
      v45 = v16;
      do
      {
        v23 = v22[1];
        v55[0] = *v22;
        v55[1] = v23;
        v55[2] = v22[2];
        v54 = 257;
        sub_22E486A58((uint64_t *)(a2 + 272), (uint64_t)v55, v21, (uint64_t)v53, (uint64_t)v56);
        v24 = *(_QWORD *)(v19 + 32);
        v68 = v56[0];
        v69 = v56[1];
        v70 = v56[2];
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v24, (uint64_t)v66);
        v51[0] = v68;
        v51[1] = v69;
        v52 = v70;
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v71[0] = v66[0];
        v71[1] = v66[1];
        v72 = v67;
        v58 = 0uLL;
        *((_QWORD *)&v57 + 1) = 0;
        LODWORD(v59) = 0;
        *((_QWORD *)&v59 + 1) = 0;
        *(_QWORD *)&v60 = 0;
        v61 = 0uLL;
        *(_QWORD *)((char *)&v62 + 4) = 2;
        LODWORD(v57) = 0;
        v63 = 0u;
        v64 = 0u;
        sub_22E3C113C((uint64_t)&v57, v51, v24, 2, v71, v25);
        sub_22F24C010((uint64_t)&v73, 1uLL);
        llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v26);
        v27 = llvm::ConstantInt::get();
        v28 = v74;
        if (v74 >= (unint64_t)HIDWORD(v74))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v74;
        }
        v73[v28] = v27;
        v29 = v74 + 1;
        LODWORD(v74) = v29;
        if (v29 >= HIDWORD(v74))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v74;
        }
        v73[v29] = v14;
        LODWORD(v74) = v74 + 1;
        v49[6] = v63;
        v49[7] = v64;
        v50 = v65;
        v49[2] = v59;
        v49[3] = v60;
        v49[4] = v61;
        v49[5] = v62;
        v49[0] = v57;
        v49[1] = v58;
        sub_22E4D7B28((_QWORD *)a2, (uint64_t)v49, v45, (uint64_t)v51);
        v30 = *(_QWORD *)&v51[0];
        v31 = v74;
        if (v74 >= (unint64_t)HIDWORD(v74))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = v74;
        }
        v73[v31] = v30;
        v32 = (v74 + 1);
        LODWORD(v74) = v74 + 1;
        if (Declaration)
          v33 = *(_QWORD *)(Declaration + 24);
        else
          v33 = 0;
        LOWORD(v52) = 257;
        *((_QWORD *)sub_22E462B78((uint64_t *)(a2 + 272), v33, Declaration, (uint64_t)v73, v32, (uint64_t)v51, 0) + 8) = *(_QWORD *)(Declaration + 112);
        ++v21;
      }
      while (v46 != v21);
    }
  }
  if (v73 != v75)
    free(v73);
}

BOOL sub_22E53742C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 430)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53748C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 431)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E5374EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 434)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53754C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 436)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E5375AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 440)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E53760C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  std::string __p;
  void *v11;
  uint64_t v12;
  char v13;

  v4 = sub_22E547004(a2);
  sub_22F007D7C(*(unsigned __int8 **)(v4 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v11);
  if (v12 >= 0x41 && v11 != 0)
    MEMORY[0x2348A0E84]();
  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&v11, v7, *(_QWORD *)(a1 + 8), v6, 1);
  sub_22E545858(&__p, a1, a2);
  Impl = llvm::air::AIFunctionConstant::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v11);
  return Impl;
}

uint64_t sub_22E537774(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t Impl;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__p;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[5];

  v56[4] = *MEMORY[0x24BDAC8D0];
  v54 = v56;
  v55 = 0x400000000;
  if (sub_22EFC18B0(*(_QWORD *)(a1 + 824)))
  {
    v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = *(_DWORD *)(v5 + 16);
    if (v5)
      v7 = (v6 & 0xFF800FF) == 86507531;
    else
      v7 = 0;
    if (v7)
      goto LABEL_70;
    v8 = (1 << v6) & 0x180100000000800;
    v9 = *(_DWORD *)(v5 + 16) > 0x38u || v8 == 0;
    if (v9 && !sub_22F10B8E0(v5, "matrix", 6, 1, 0))
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
      {
        v41 = sub_22F10ACF8(*v4);
        sub_22F10AFE4(v41, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
        __p = (void *)0x8000000700000002;
        v52 = 0;
        sub_22E3B38EC((_DWORD *)(a1 + 16), &__p);
        if (!sub_22E53B738(a1, v41))
          sub_22E53BAA0(a1, v41);
        if (!getenv("AIR_INLINE_TYPE_INFO")
          || (__p = (void *)0x8000000700000002, v52 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) != 0))
        {
          v41 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v41);
          v46 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
          {
            do
            {
              v47 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
              v48 = sub_22F10ACF8(v46);
              v41 = sub_22EF5BA38(v47, v48);
              v46 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                  - 39 < 2);
          }
        }
        sub_22E53C558(a1, v41);
        sub_22E53C5C0(a1, v41);
        v49 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v49 + 248))(&__p, v49, *(_QWORD *)(a1 + 8), a2, 1);
        Impl = llvm::air::AICIPointerRet::getImpl();
        goto LABEL_11;
      }
      v42 = sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0));
      v43 = *v4;
      if (v42)
      {
        v44 = sub_22E53C624(v43);
        sub_22F10C9BC(v44);
        v45 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v45 + 248))(&__p, v45, *(_QWORD *)(a1 + 8), a2, 1);
        Impl = llvm::air::AICITextureRet::getImpl();
        goto LABEL_11;
      }
      if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)
        && !sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0))
      {
        sub_22E53BAA0(a1, a2);
        v50 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v50 + 248))(&__p, v50, *(_QWORD *)(a1 + 8), a2, 1);
        Impl = llvm::air::AICIStructRet::getImpl();
        goto LABEL_11;
      }
    }
    v10 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 248))(&__p, v10, *(_QWORD *)(a1 + 8), a2, 1);
    Impl = llvm::air::AITagOnlyReturnType::getImpl();
LABEL_11:
    v12 = Impl;
    if (v53 < 0)
      operator delete(__p);
    v13 = v55;
    if (v55 >= HIDWORD(v55))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v55;
    }
    *((_QWORD *)v54 + v13) = v12;
    LODWORD(v55) = v55 + 1;
    goto LABEL_70;
  }
  if (sub_22EFC1F80(*(_QWORD *)(a1 + 824)))
  {
    v14 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v15)
      v16 = (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 86507531;
    else
      v16 = 0;
    if (!v16)
    {
      v17 = sub_22F10C2A4(v14);
      if ((!v17
         || (*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 > 2
         || !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 224) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), v17))&& (sub_22E539C44(a1, a2) & 1) == 0)
      {
        v18 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 248))(&__p, v18, *(_QWORD *)(a1 + 8), a2, 1);
        v19 = llvm::air::AIVisibleOutput::getImpl();
        if (v53 < 0)
          operator delete(__p);
        v20 = v55;
        if (v55 >= HIDWORD(v55))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v55;
        }
        *((_QWORD *)v54 + v20) = v19;
        LODWORD(v55) = v55 + 1;
      }
    }
    goto LABEL_70;
  }
  if (sub_22E6A2F54(*(_QWORD *)(a1 + 824)))
  {
    v21 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v21)
    {
      if ((*(_DWORD *)(v21 + 16) & 0x780000) != 0x80000)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v23 = v22 && (*(_DWORD *)(v22 + 16) & 0xFF800FF) == 110624779;
        if (v23 && *(_DWORD *)(v21 + 20) == 4)
        {
          __p = (void *)sub_22E539DDC(a1, a2);
          goto LABEL_70;
        }
      }
    }
  }
  v24 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22E88FFC4(*(_QWORD *)(a1 + 824)))
  {
    v25 = *v24;
    v26 = sub_22E3E4B64(*v24);
    if (v26 && (*(_DWORD *)(v26 + 20) - 2) <= 2 && (*(_DWORD *)(v26 + 16) & 0x780000) != 0x80000)
      v25 = *(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v27
      && *(_DWORD *)(v27 + 16) == 11
      && ((*(_DWORD *)(v27 + 16) >> 19) & 0x1FFu) - 173 <= 0x26
      && ((1 << ((*(_DWORD *)(v27 + 16) >> 19) + 83)) & 0x6000000303) != 0)
    {
      __p = (void *)0x8000000B00000001;
      v52 = 0;
      sub_22E3B38EC((_DWORD *)(a1 + 16), &__p);
      v35 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v35 + 248))(&__p, v35, *(_QWORD *)(a1 + 8), a2, 1);
      v36 = llvm::air::AIRenderTargetRet::getImpl();
LABEL_67:
      v38 = (void *)v36;
      if (v53 < 0)
        operator delete(__p);
      __p = v38;
      goto LABEL_70;
    }
  }
  v29 = sub_22EFC1D94(*(_QWORD *)(a1 + 824));
  v30 = *v24;
  if (v29)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v31 && (*(_DWORD *)(v31 + 16) & 0xFF800FF) == 87031819)
    {
      v37 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v37 + 248))(&__p, v37, *(_QWORD *)(a1 + 8), a2, 1);
      v36 = llvm::air::AITagOnlyReturnType::getImpl();
      goto LABEL_67;
    }
  }
  v33 = sub_22F10C2A4(v30);
  if (v33 && (*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 <= 2)
    sub_22E539EDC(a1, v33, (uint64_t)&v54);
LABEL_70:
  v39 = llvm::MDTuple::getImpl();
  if (v54 != v56)
    free(v54);
  return v39;
}

uint64_t sub_22E53827C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t *j;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t Impl;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t k;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::string __p;
  void *v157[2];
  char v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD v161[10];

  v161[8] = *MEMORY[0x24BDAC8D0];
  v159 = v161;
  v160 = 0x800000000;
  if (sub_22EFC1F80(*(_QWORD *)(a1 + 824)))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 824) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
    else
      v7 = 0;
    if (!v7)
      v6 = sub_22F10CF48(v6);
    v8 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0));
    if (v8
      && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 <= 2
      && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 224) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), v8))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 824) + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
        v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
      else
        v10 = 0;
      if (!v10)
        v9 = sub_22F10CF48(v9);
      v159[v160] = sub_22E53D2B8(a1, *(_QWORD *)(v9 + 24));
      LODWORD(v160) = v160 + 1;
    }
  }
  if (a3)
  {
    j = &a2[a3];
    v152 = j;
    while (1)
    {
      v12 = *a2;
      v13 = v160;
      if (sub_22EFC18B0(*(_QWORD *)(a1 + 824)))
        break;
      if (!sub_22EFC1F80(*(_QWORD *)(a1 + 824)))
      {
        v22 = sub_22E54B75C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15144, v12);
        v23 = *(_QWORD *)(v22 + 8);
        v24 = *(_QWORD *)(v22 + 16);
        __p.__r_.__value_.__r.__words[0] = v23;
        __p.__r_.__value_.__l.__size_ = v24;
        switch((int)v23)
        {
          case 1:
          case 2:
          case 3:
          case 7:
          case 8:
          case 9:
            v19 = sub_22E54B858(a1, v12, v23, v24);
            goto LABEL_121;
          case 4:
          case 5:
          case 6:
            v19 = sub_22E54BD88(a1, v12, v23, v24, v23, v24);
            goto LABEL_121;
          case 10:
          case 11:
          case 12:
            v19 = sub_22E535814(a1, v12, v23, v24);
            goto LABEL_121;
          case 13:
          case 14:
          case 15:
            v19 = sub_22E535B6C(a1, v12, v23, v24);
            goto LABEL_121;
          case 16:
          case 17:
          case 18:
            v19 = sub_22E534BE8(a1, v12, v23, v24);
            goto LABEL_121;
          case 19:
          case 20:
          case 21:
            v19 = sub_22E534F04(a1, v12, v23, v24);
            goto LABEL_121;
          case 22:
          case 23:
          case 24:
            v19 = sub_22E53523C(a1, v12, v23, v24);
            goto LABEL_121;
          case 25:
          case 26:
          case 27:
            v19 = sub_22E535528(a1, v12, v23, v24);
            goto LABEL_121;
          case 28:
            sub_22E53D84C(a1, v12, (uint64_t)&v159);
            goto LABEL_124;
          case 29:
            if (sub_22E88FFC4(*(_QWORD *)(a1 + 824)))
            {
              v19 = sub_22E540CAC(a1, v12);
            }
            else if (sub_22EA1DB60(*(_QWORD *)(a1 + 824)))
            {
              v19 = sub_22E540E2C(a1, v12);
            }
            else
            {
              v95 = *(_QWORD *)(a1 + 824);
              if (sub_22E6A2F54(v95) && sub_22EAA34D4(v95))
              {
                v19 = sub_22E541020(a1, v12);
              }
              else
              {
                sub_22F3AC76C(*(_QWORD *)(a1 + 824));
                v19 = sub_22E541214(a1, v12);
              }
            }
            goto LABEL_121;
          case 30:
            v19 = sub_22E541408(a1, v12);
            goto LABEL_121;
          case 31:
            sub_22E541630(a1, *(_QWORD *)(v12 + 48), (uint64_t)&__p, (uint64_t)&v159);
            goto LABEL_124;
          case 32:
            sub_22E5421C4(a1, *(_QWORD *)(v12 + 48), (uint64_t)&v159);
            goto LABEL_124;
          case 34:
            v131 = sub_22E545730(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0));
            v132 = sub_22F10C2A4(v131);
            if ((*(_DWORD *)(v132 + 28) & 0x7Fu) - 35 >= 3)
              v133 = 0;
            else
              v133 = v132;
            v134 = *(_QWORD *)(**(_QWORD **)(v133 + 168) + 8);
            sub_22E53C7B4(a1, v134, 0);
            if ((*(_BYTE *)(v12 + 29) & 1) == 0)
              goto LABEL_243;
            sub_22EFC8E88(v12);
            v136 = *(uint64_t **)v135;
            v137 = *(unsigned int *)(v135 + 8);
            v138 = *(uint64_t **)v135;
            if (!(_DWORD)v137)
              goto LABEL_226;
            v145 = 8 * v137;
            v138 = *(uint64_t **)v135;
            while (*(_WORD *)(*v138 + 32) != 403)
            {
              ++v138;
              v145 -= 8;
              if (!v145)
                goto LABEL_243;
            }
LABEL_226:
            if (v138 != &v136[v137])
            {
              do
              {
                v140 = *v136++;
                v139 = v140;
              }
              while (*(_WORD *)(v140 + 32) != 403);
              v141 = *(unsigned __int8 *)(v139 + 30);
              if ((~(v141 << 16) & 0x780000) != 0
                 ? ((*(unsigned __int16 *)(v139 + 28) | (v141 << 16)) >> 19) & 0xF
                 : sub_22F1BFAD0(v139))
              {
                sub_22E533554(a1, *(_QWORD *)(v139 + 40));
              }
            }
LABEL_243:
            if (sub_22F40929C(v131, 0))
              sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v157);
            sub_22E53C678(a1, v12);
            sub_22E53C5C0(a1, v134);
            v147 = *(_QWORD *)(v12 + 48);
            v148 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v148 + 248))(v157, v148, *(_QWORD *)(a1 + 8), v147, 1);
            Impl = llvm::air::AIImageblockArg::getImpl();
            if (v158 < 0)
              operator delete(v157[0]);
            v71 = v160;
            v146 = v160 >= (unint64_t)HIDWORD(v160);
            j = v152;
LABEL_248:
            if (!v146)
              goto LABEL_123;
            goto LABEL_250;
          case 35:
            v60 = *(_QWORD *)(v12 + 48);
            v61 = v60;
            if ((*(_BYTE *)(v12 + 29) & 1) == 0)
              goto LABEL_145;
            sub_22EFC8E88(v12);
            v63 = *(uint64_t **)v62;
            v64 = *(unsigned int *)(v62 + 8);
            v65 = *(uint64_t **)v62;
            if (!(_DWORD)v64)
              goto LABEL_142;
            v66 = 8 * v64;
            v65 = *(uint64_t **)v62;
            break;
          case 36:
            v19 = sub_22E542348(a1, v12);
            goto LABEL_121;
          case 37:
            sub_22E53C678(a1, v12);
            sub_22F26EF4C(a1, *(_QWORD *)(v12 + 48));
            v143 = *(_QWORD *)(v12 + 48);
            v144 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v144 + 248))(v157, v144, *(_QWORD *)(a1 + 8), v143, 1);
            Impl = llvm::air::AIMesh::getImpl();
            if (v158 < 0)
              operator delete(v157[0]);
            v71 = v160;
            v146 = v160 >= (unint64_t)HIDWORD(v160);
            goto LABEL_248;
          case 38:
            sub_22E53C678(a1, v12);
            v67 = *(_QWORD *)(v12 + 48);
            v68 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v68 + 248))(v157, v68, *(_QWORD *)(a1 + 8), v67, 1);
            v69 = llvm::air::AITagOnlyArgument::getImpl();
            goto LABEL_161;
          case 39:
            v19 = sub_22E5424FC((uint64_t *)a1, *(_QWORD *)(v12 + 48));
            goto LABEL_121;
          case 40:
            v72 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0));
            if (!sub_22E5459C8(a1, v72, 0, v73))
              sub_22E545D9C(a1, v72, 0, v74);
            sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v157);
            sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v72);
            sub_22E53C678(a1, v12);
            v80 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v80 + 248))(v157, v80, *(_QWORD *)(a1 + 8), v72, 1);
            Impl = llvm::air::AIPayload::getImpl();
            if (v158 < 0)
              operator delete(v157[0]);
            v71 = v160;
            j = v152;
            if (v160 >= (unint64_t)HIDWORD(v160))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v71 = v160;
            }
            goto LABEL_123;
          case 41:
            sub_22E5426B0((uint64_t *)a1, v12, (uint64_t)&v159);
            goto LABEL_124;
          default:
            goto LABEL_124;
        }
        while (*(_WORD *)(*v65 + 32) != 404)
        {
          ++v65;
          v66 -= 8;
          if (!v66)
          {
            v61 = v60;
            goto LABEL_145;
          }
        }
LABEL_142:
        v61 = v60;
        if (v65 != &v63[v64])
        {
          do
          {
            v82 = *v63++;
            v81 = v82;
          }
          while (*(_WORD *)(v82 + 32) != 404);
          v61 = **(_QWORD **)(v81 + 40);
        }
LABEL_145:
        sub_22E53C7B4(a1, v61, 0x100u);
        if (*(_QWORD *)(*(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          sub_22E53C7B4(a1, v60, 0x101u);
        if ((*(_BYTE *)(v12 + 29) & 1) == 0)
          goto LABEL_157;
        sub_22EFC8E88(v12);
        v84 = *(uint64_t **)v83;
        v85 = *(unsigned int *)(v83 + 8);
        v86 = *(uint64_t **)v83;
        if ((_DWORD)v85)
        {
          v87 = 8 * v85;
          v86 = *(uint64_t **)v83;
          while (*(_WORD *)(*v86 + 32) != 403)
          {
            ++v86;
            v87 -= 8;
            if (!v87)
              goto LABEL_157;
          }
        }
        if (v86 == &v84[v85])
        {
LABEL_157:
          v92 = j;
        }
        else
        {
          do
          {
            v89 = *v84++;
            v88 = v89;
          }
          while (*(_WORD *)(v89 + 32) != 403);
          v90 = *(unsigned __int8 *)(v88 + 30);
          if ((~(v90 << 16) & 0x780000) != 0)
            v91 = ((*(unsigned __int16 *)(v88 + 28) | (v90 << 16)) >> 19) & 0xF;
          else
            v91 = sub_22F1BFAD0(v88);
          v92 = j;
          if (v91)
            sub_22E533554(a1, *(_QWORD *)(v88 + 40));
        }
        sub_22E53C678(a1, v12);
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v157);
        sub_22E53C5C0(a1, v61);
        v93 = *(_QWORD *)(v12 + 48);
        v94 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v94 + 248))(v157, v94, *(_QWORD *)(a1 + 8), v93, 1);
        j = v92;
        v69 = llvm::air::AIImageblockDataArg::getImpl();
LABEL_161:
        Impl = v69;
        goto LABEL_162;
      }
      v20 = *(_QWORD *)(v12 + 48);
      v21 = sub_22F10C2A4(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0));
      if (!v21
        || (v25 = v21, (*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 > 2)
        || (v26 = sub_22F10C2A4(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0))) != 0
        && (*(_DWORD *)(v26 + 28) & 0x7Fu) - 35 <= 2
        && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 224) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224), v26))
      {
        v19 = sub_22E53D768(a1, v12);
        goto LABEL_121;
      }
      if ((sub_22E539C44(a1, v20) & 1) == 0)
      {
        v27 = sub_22E66DD94(*(_QWORD *)(a1 + 8) + 280, v25);
        v151 = *(unsigned int *)(*(_QWORD *)v27 + 12);
        v153 = v13;
        if ((*(_DWORD *)(v25 + 72) & 0xE000) == 0x4000)
        {
          v28 = sub_22E53D768(a1, v12);
          v29 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v160;
          }
          v30 = v151;
          ++v13;
          v159[v29] = v28;
          LODWORD(v160) = v160 + 1;
        }
        else
        {
          v32 = v27;
          v33 = sub_22E46A3A0(v25);
          v154 = v34;
          if (v33 != v34)
          {
            v35 = v33;
            v36 = -v13;
            do
            {
              v37 = *(_QWORD *)(**(_QWORD **)(v35 + 16) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v37 + 8) & 0xF) != 0)
                v37 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v35 + 16));
              v38 = sub_22F10C2A4(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0));
              if ((*(_DWORD *)(v38 + 28) & 0x7Fu) - 35 >= 3)
                v39 = 0;
              else
                v39 = v38;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v39 + 104) + 96), *(_QWORD *)(v39 + 104));
              if ((**(_QWORD **)(v39 + 128) & 0x200) == 0)
              {
                while (1)
                {
                  v157[0] = (void *)v39;
                  __p.__r_.__value_.__r.__words[0] = 0;
                  v40 = sub_22F246C54((uint64_t *)(v32 + 64), v157, &__p);
                  v41 = 0;
                  if (v40)
                    v41 = *(unsigned int *)(__p.__r_.__value_.__r.__words[0] + 8);
                  if (v36 + v13 == v41)
                    break;
                  v42 = llvm::air::AIVisiblePadding::getImpl();
                  v43 = v160;
                  if (v160 >= (unint64_t)HIDWORD(v160))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v43 = v160;
                  }
                  v159[v43] = v42;
                  LODWORD(v160) = v160 + 1;
                  ++v13;
                }
                v44 = *(_QWORD *)(**(_QWORD **)(v35 + 16) & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(v44 + 8) & 0xF) != 0)
                  v44 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v35 + 16));
                v45 = sub_22E53D2B8(a1, v44 & 0xFFFFFFFFFFFFFFF0);
                v46 = v160;
                if (v160 >= (unint64_t)HIDWORD(v160))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v46 = v160;
                }
                ++v13;
                v159[v46] = v45;
                LODWORD(v160) = v160 + 1;
              }
              v35 += 24;
            }
            while (v35 != v154);
          }
          v47 = sub_22EFC3B90(v25);
          if (v47)
          {
            v48 = v47;
            v49 = v47;
            v30 = v151;
            do
            {
              do
                v49 = *(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v49 && (*(_DWORD *)(v49 + 28) & 0x7Fu) - 49 > 2);
              if (!sub_22EFC2F84(v48, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
              {
                v50 = sub_22E4EC264(v32, v48);
                for (i = v13 - v153; i != v50; i = v13 - v153)
                {
                  v52 = llvm::air::AIVisiblePadding::getImpl();
                  v53 = v160;
                  if (v160 >= (unint64_t)HIDWORD(v160))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v53 = v160;
                  }
                  ++v13;
                  v159[v53] = v52;
                  LODWORD(v160) = v160 + 1;
                  v50 = sub_22E4EC264(v32, v48);
                }
                v54 = v50;
                if ((*(_BYTE *)(v48 + 68) & 1) != 0)
                {
                  if (v49 && !sub_22EFC2F84(v49, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
                  {
LABEL_93:
                    if (v54 == sub_22E4EC264(v32, v49))
                    {
                      while (1)
                      {
                        v49 = *(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF8;
                        if (!v49)
                          break;
                        if ((*(_DWORD *)(v49 + 28) & 0x7Fu) - 49 <= 2)
                        {
                          if (!sub_22EFC2F84(v49, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
                            goto LABEL_93;
                          break;
                        }
                      }
                    }
                  }
                  v55 = sub_22E53D2B8(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16392));
                }
                else
                {
                  v55 = sub_22E53D768(a1, v48);
                }
                v56 = v55;
                v57 = v160;
                if (v160 >= (unint64_t)HIDWORD(v160))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v57 = v160;
                }
                v159[v57] = v56;
                LODWORD(v160) = v160 + 1;
                ++v13;
              }
              v48 = v49;
            }
            while (v49);
          }
          else
          {
            v30 = v151;
          }
        }
        for (j = v152; v30 + v153 != v13; LODWORD(v160) = v160 + 1)
        {
          v58 = llvm::air::AIVisiblePadding::getImpl();
          v59 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v59 = v160;
          }
          ++v13;
          v159[v59] = v58;
        }
      }
LABEL_124:
      if (++a2 == j)
        goto LABEL_251;
    }
    v14 = (uint64_t *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(unsigned __int8 *)(v15 + 16);
    v7 = v16 > 0x38;
    v17 = (1 << v16) & 0x180100000000800;
    if (!v7 && v17 != 0)
    {
      v19 = sub_22E54CAF0(a1, v12, v12);
      goto LABEL_121;
    }
    if (sub_22F10B8E0(v15, "matrix", 6, 1, 0))
    {
      v19 = sub_22E54CC14(a1, v12, v12);
      goto LABEL_121;
    }
    v31 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(v31 + 16) - 39 <= 1)
    {
      v19 = sub_22E53D36C(a1, v12, v12);
      goto LABEL_121;
    }
    if (sub_22F10CA40(v31))
    {
      v19 = sub_22E53D620(a1, v12, v12);
      goto LABEL_121;
    }
    if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
    {
      v19 = sub_22E54CD38(a1, v12, v12);
LABEL_121:
      Impl = v19;
LABEL_122:
      v71 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
LABEL_250:
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = v160;
      }
LABEL_123:
      v159[v71] = Impl;
      LODWORD(v160) = v160 + 1;
      goto LABEL_124;
    }
    if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0))
    {
      v75 = *(_QWORD *)(v12 + 48);
      v76 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v76 + 248))(v157, v76, *(_QWORD *)(a1 + 8), v75, 1);
      sub_22E545218(&__p, v12, v12);
      Impl = llvm::air::AITagOnlyArgument::getImpl();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_162:
      if (v158 < 0)
        operator delete(v157[0]);
      goto LABEL_122;
    }
    v77 = sub_22F10C2A4(*v14);
    v78 = v13;
    if (v77)
    {
      if ((*(_DWORD *)(v77 + 28) & 0x7Fu) - 35 >= 3)
        v79 = 0;
      else
        v79 = v77;
    }
    else
    {
      v79 = 0;
    }
    v96 = sub_22E66DD94(*(_QWORD *)(a1 + 8) + 280, v79);
    v155 = *(unsigned int *)(*(_QWORD *)v96 + 12);
    v97 = sub_22EFC3B90(v79);
    v98 = v78;
    v99 = v78;
    if (!v97)
    {
LABEL_212:
      v128 = v155 + v98;
      for (j = v152; v128 != v99; LODWORD(v160) = v160 + 1)
      {
        v129 = llvm::air::AICIPadding::getImpl();
        v130 = v160;
        if (v160 >= (unint64_t)HIDWORD(v160))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v130 = v160;
        }
        ++v99;
        v159[v130] = v129;
      }
      goto LABEL_124;
    }
    v100 = v97;
    v101 = -v78;
    v99 = v78;
LABEL_169:
    v102 = *(_QWORD *)(v100 + 48);
    v103 = sub_22E4EC264(v96, v100);
    v104 = v98;
    for (k = v99 - v98; k != v103; k = v101 + v99)
    {
      v106 = llvm::air::AICIPadding::getImpl();
      v107 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v107 = v160;
      }
      ++v99;
      v159[v107] = v106;
      LODWORD(v160) = v160 + 1;
      v103 = sub_22E4EC264(v96, v100);
    }
    v108 = v102 & 0xFFFFFFFFFFFFFFF0;
    v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v110 = *(unsigned __int8 *)(v109 + 16);
    v7 = v110 > 0x38;
    v111 = (1 << v110) & 0x180100000000800;
    if (v7 || v111 == 0)
    {
      if (sub_22F10B8E0(v109, "matrix", 6, 1, 0))
      {
        v113 = sub_22E54CC14(a1, v100, v12);
      }
      else
      {
        v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v108 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(unsigned __int8 *)(v117 + 16) - 39 > 1)
        {
          if (sub_22F10CA40(v117))
          {
            v113 = sub_22E53D620(a1, v100, v12);
          }
          else
          {
            if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v108 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
            {
              v118 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v108 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
              if (v118 == 2)
              {
                if (!sub_22E53B738(a1, *(_QWORD *)(v100 + 48)))
                  sub_22E53BAA0(a1, *(_QWORD *)(v100 + 48));
                v122 = *(_QWORD *)(v100 + 48);
                if (!getenv("AIR_INLINE_TYPE_INFO")
                  || (v157[0] = (void *)0x8000000700000002,
                      v157[1] = 0,
                      (sub_22E3B38EC((_DWORD *)(a1 + 16), v157) & 1) != 0))
                {
                  v122 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v122);
                  v123 = *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0);
                  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 16)
                     - 39 <= 1)
                  {
                    do
                    {
                      v124 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
                      v125 = sub_22F10ACF8(v123);
                      v122 = sub_22EF5BA38(v124, v125);
                      v123 = *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0);
                    }
                    while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 16)
                          - 39 < 2);
                  }
                }
                sub_22E53C558(a1, v122);
                sub_22E53C5C0(a1, v122);
                v126 = *(_QWORD *)(v100 + 48);
                v127 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
                (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v127 + 248))(v157, v127, *(_QWORD *)(a1 + 8), v126, 1);
                sub_22E545218(&__p, v100, v12);
                v121 = llvm::air::AICIArray::getImpl();
              }
              else
              {
                if (v118 != 45)
                {
                  v116 = v160;
                  goto LABEL_183;
                }
                sub_22E53BAA0(a1, *(_QWORD *)(v100 + 48));
                v119 = *(_QWORD *)(v100 + 48);
                v120 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
                (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v120 + 248))(v157, v120, *(_QWORD *)(a1 + 8), v119, 1);
                sub_22E545218(&__p, v100, v12);
                v121 = llvm::air::AICIStruct::getImpl();
              }
              v114 = v121;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v158 < 0)
                operator delete(v157[0]);
LABEL_180:
              v115 = v160;
              if (v160 >= (unint64_t)HIDWORD(v160))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v115 = v160;
              }
              v159[v115] = v114;
              v116 = v160 + 1;
              LODWORD(v160) = v160 + 1;
LABEL_183:
              v99 = v116;
              while (1)
              {
                v100 = *(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v100)
                  break;
                if ((*(_DWORD *)(v100 + 28) & 0x7Fu) - 49 < 3)
                {
                  v98 = v104;
                  goto LABEL_169;
                }
              }
              v98 = v104;
              goto LABEL_212;
            }
            v113 = sub_22E54CD38(a1, v100, v12);
          }
        }
        else
        {
          v113 = sub_22E53D36C(a1, v100, v12);
        }
      }
    }
    else
    {
      v113 = sub_22E54CAF0(a1, v100, v12);
    }
    v114 = v113;
    goto LABEL_180;
  }
LABEL_251:
  v149 = llvm::MDTuple::getImpl();
  if (v159 != v161)
    free(v159);
  return v149;
}

uint64_t sub_22E539C44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;

  result = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!result)
    return result;
  v4 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2 || (*(_BYTE *)(result + 74) & 0x80) != 0)
    return 0;
  v5 = sub_22E46A3A0(result);
  if (v5 != v6)
  {
    v7 = v5;
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)(**(_QWORD **)(v7 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
        v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v7 + 16));
      if ((sub_22E539C44(a1, v9 & 0xFFFFFFFFFFFFFFF0) & 1) == 0)
        return 0;
      v7 += 24;
    }
    while (v7 != v8);
  }
  v10 = sub_22EFC3B90(v4);
  if (!v10)
    return 1;
  v11 = v10;
LABEL_12:
  if ((*(_BYTE *)(v11 + 68) & 1) != 0 && !*(_QWORD *)(v11 + 40))
  {
LABEL_24:
    while (1)
    {
      v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v11)
        return 1;
      if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_12;
    }
  }
  for (i = *(_QWORD *)(v11 + 48); ; i = *(_QWORD *)(v14 + 32))
  {
    v13 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), i);
    if (!v13)
      break;
    v14 = v13;
    if (*(_BYTE *)(v13 + 16) != 2)
      break;
    v15 = (_QWORD *)(v13 + 40);
    v16 = *(_DWORD *)(v13 + 48);
    if (v16 >= 0x41)
    {
      if (v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v13 + 40)) > 0x40)
        continue;
      v15 = (_QWORD *)*v15;
    }
    if (!*v15)
      goto LABEL_24;
  }
  v17 = sub_22F10C2A4(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
  if (v17 && (*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 < 3)
    return 0;
  result = sub_22E539C44(a1, i);
  if ((_DWORD)result)
    goto LABEL_24;
  return result;
}

uint64_t sub_22E539DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Impl;
  void *__p;
  char v8;
  _QWORD v9[2];

  v9[0] = 0x8000000100000002;
  v9[1] = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 16), v9);
  v4 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 248))(&__p, v4, *(_QWORD *)(a1 + 8), a2, 1);
  Impl = llvm::air::AIPositionRet::getImpl();
  if (v8 < 0)
    operator delete(__p);
  return Impl;
}

void sub_22E539EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Impl;
  uint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  char v59;
  void *__p;
  uint64_t v61;
  char v62;

  v5 = sub_22EFC3B90(a2);
  if (v5)
  {
    v6 = v5;
    v7 = a3 + 16;
LABEL_3:
    if (sub_22E53AC28(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      goto LABEL_6;
    }
    if (sub_22E536E34(v6))
    {
      v11 = sub_22E53AC88(a1, v6);
LABEL_12:
      Impl = v11;
      goto LABEL_13;
    }
    if (sub_22E53B01C(v6))
    {
      v11 = sub_22E53B07C(a1, v6);
      goto LABEL_12;
    }
    if (sub_22E53B37C(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      goto LABEL_6;
    }
    if (sub_22E53B3DC(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      sub_22EFC8E88(v6);
      v14 = *v13;
      v15 = *((unsigned int *)v13 + 2);
      if ((_DWORD)v15 && *(_WORD *)(*v14 + 32) != 388)
      {
        v16 = 8 * v15 - 8;
        v17 = *v13;
        do
        {
          v18 = v17[1];
          ++v17;
          v16 -= 8;
        }
        while (*(_WORD *)(v18 + 32) != 388);
      }
      v19 = v7;
      do
        v20 = *v14++;
      while (*(_WORD *)(v20 + 32) != 388);
      v21 = *(_QWORD *)(v6 + 48);
      v22 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 248))(&__p, v22, *(_QWORD *)(a1 + 8), v21, 1);
      v7 = v19;
      Impl = llvm::air::AIDepthRet::getImpl();
      if (v62 < 0)
LABEL_7:
        operator delete(__p);
LABEL_13:
      v12 = *(unsigned int *)(a3 + 8);
      if (v12 < *(unsigned int *)(a3 + 12))
        goto LABEL_14;
      goto LABEL_74;
    }
    if (sub_22E53B43C(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      goto LABEL_6;
    }
    if (sub_22E53B49C(v6))
    {
      v23 = *(_QWORD *)(v6 + 48);
      sub_22EFC8E88(v6);
      v25 = *v24;
      v26 = *((unsigned int *)v24 + 2);
      if ((_DWORD)v26 && *(_WORD *)(*v25 + 32) != 404)
      {
        v27 = 8 * v26 - 8;
        v28 = *v24;
        do
        {
          v29 = v28[1];
          ++v28;
          v27 -= 8;
        }
        while (*(_WORD *)(v29 + 32) != 404);
      }
      do
      {
        v31 = *v25++;
        v30 = v31;
      }
      while (*(_WORD *)(v31 + 32) != 404);
      v32 = **(_QWORD **)(v30 + 40);
      sub_22E53C7B4(a1, v32, 0x100u);
      v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFF0);
      if (*(_QWORD *)(*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        sub_22E53C7B4(a1, v23, 0x101u);
      if ((*(_BYTE *)(v6 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v6);
        v35 = *(uint64_t **)v34;
        v36 = *(unsigned int *)(v34 + 8);
        v37 = *(uint64_t **)v34;
        if ((_DWORD)v36)
        {
          v38 = 8 * v36;
          v37 = *(uint64_t **)v34;
          while (*(_WORD *)(*v37 + 32) != 403)
          {
            ++v37;
            v38 -= 8;
            if (!v38)
              goto LABEL_71;
          }
        }
        if (v37 != &v35[v36])
        {
          do
          {
            v40 = *v35++;
            v39 = v40;
          }
          while (*(_WORD *)(v40 + 32) != 403);
          v41 = *(unsigned __int8 *)(v39 + 30);
          if ((~(v41 << 16) & 0x780000) != 0)
            v42 = ((*(unsigned __int16 *)(v39 + 28) | (v41 << 16)) >> 19) & 0xF;
          else
            v42 = sub_22F1BFAD0(v39);
          if (v42)
            sub_22E533554(a1, *(_QWORD *)(v39 + 40));
          v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFF0);
        }
      }
LABEL_71:
      sub_22E53C678(a1, v6);
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v33, (uint64_t)&__p);
      sub_22E53C5C0(a1, v32);
      v43 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v43 + 248))(&__p, v43, *(_QWORD *)(a1 + 8), v23, 1);
      Impl = llvm::air::AIImageblockDataRet::getImpl();
      if (v62 < 0)
        operator delete(__p);
      v12 = *(unsigned int *)(a3 + 8);
      if (v12 < *(unsigned int *)(a3 + 12))
      {
LABEL_14:
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = Impl;
        ++*(_DWORD *)(a3 + 8);
        goto LABEL_15;
      }
LABEL_74:
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(unsigned int *)(a3 + 8);
      goto LABEL_14;
    }
    if (sub_22E53742C(v6))
    {
      v11 = sub_22E54C748(a1, v6);
      goto LABEL_12;
    }
    if (sub_22E53748C(v6))
    {
      v11 = sub_22E53B4FC(a1, v6);
      goto LABEL_12;
    }
    if (sub_22E5375AC(v6))
    {
      v11 = sub_22E54C880(a1, v6);
      goto LABEL_12;
    }
    if (sub_22E53B678(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      goto LABEL_6;
    }
    if (sub_22E53B6D8(v6))
    {
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
LABEL_6:
      v8 = *(_QWORD *)(v6 + 48);
      v9 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 248))(&__p, v9, *(_QWORD *)(a1 + 8), v8, 1);
      Impl = llvm::air::AITagOnlyReturnType::getImpl();
      if ((v62 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_7;
    }
    v57 = v7;
    if (sub_22F26E334(v6))
    {
      v44 = sub_22E54C9B8(a1, v6);
LABEL_81:
      v45 = v44;
      v46 = *(unsigned int *)(a3 + 8);
      if (v46 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v45;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_15;
    }
    if (sub_22E88FFC4(*(_QWORD *)(a1 + 824)))
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
      v48 = sub_22E3E4B64(v47);
      if (v48 && (*(_DWORD *)(v48 + 20) - 2) <= 2 && (*(_DWORD *)(v48 + 16) & 0x780000) != 0x80000)
        v47 = *(_QWORD *)(*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF0);
      v49 = *(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v49)
      {
        v50 = *(_DWORD *)(v49 + 16);
        if (v50 == 11)
        {
          v51 = ((v50 >> 19) & 0x1FF) - 173;
          if (v51 <= 0x26 && ((1 << v51) & 0x6000000303) != 0)
          {
            v44 = sub_22E53B07C(a1, v6);
            goto LABEL_81;
          }
        }
      }
    }
    v52 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (v52 && (*(_DWORD *)(v52 + 28) & 0x7Fu) - 35 <= 2)
    {
      sub_22E539EDC(a1, v52, a3);
    }
    else
    {
      sub_22E6A2F54(*(_QWORD *)(a1 + 824));
      __p = (void *)0x8000000000000002;
      v61 = 0;
      if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
        sub_22E53C678(a1, v6);
      __p = (void *)0x8000000200000002;
      v61 = 0;
      if (sub_22E3B38EC((_DWORD *)(a1 + 16), &__p)
        && !sub_22F26E9C8(v6)
        && !sub_22F26EA28(v6)
        && !sub_22F26EA88(v6)
        && !sub_22F26EAE8(v6)
        && !sub_22F26EB48(v6))
      {
        sub_22F26EBA8(v6);
      }
      __p = (void *)0x8000000200000002;
      v61 = 0;
      if (sub_22E3B38EC((_DWORD *)(a1 + 16), &__p)
        && !sub_22F26E9C8(v6)
        && !sub_22F26E9C8(v6)
        && !sub_22F26EB48(v6)
        && !sub_22F26EA28(v6)
        && !sub_22F26EAE8(v6)
        && !sub_22F26EBA8(v6))
      {
        sub_22F26EC08(v6);
      }
      sub_22E53CECC(&__p, a1, v6);
      sub_22F26E908(v6);
      v53 = *(_QWORD *)(v6 + 48);
      v54 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v54 + 248))(&v58, v54, *(_QWORD *)(a1 + 8), v53, 1);
      v55 = llvm::air::AIVertexOutput::getImpl();
      if (v59 < 0)
        operator delete(v58);
      if (v62 < 0)
        operator delete(__p);
      v56 = *(unsigned int *)(a3 + 8);
      if (v56 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v56 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v56) = v55;
      ++*(_DWORD *)(a3 + 8);
      v7 = v57;
    }
LABEL_15:
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v6)
        break;
      if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
}

BOOL sub_22E53AC28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 370)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E53AC88(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t Impl;
  std::string __dst;
  std::string v24;
  std::string v25;
  _BYTE __len[24];
  _QWORD v27[7];

  v27[5] = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)(a1 + 16);
  *(_QWORD *)__len = 0x8000000000000002;
  *(_QWORD *)&__len[8] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __len) & 1) == 0)
    sub_22E53C678(a1, a2);
  *(_QWORD *)__len = 0x8000000400000002;
  *(_QWORD *)&__len[8] = 0;
  if ((sub_22E3B38EC(v4, __len) & 1) == 0)
    sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v5 = *(_QWORD *)(a2 + 48);
  v6 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 248))(&v25, v6, *(_QWORD *)(a1 + 8), v5, 1);
  *(_QWORD *)__len = 0x8000000100000002;
  *(_QWORD *)&__len[8] = 0;
  if (sub_22E3B38EC(v4, __len))
  {
    v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
    if (v7)
    {
      if (*(_BYTE *)(v7 + 16) == 2)
      {
        *(_QWORD *)__len = v27;
        *(_OWORD *)&__len[8] = xmmword_22F455490;
        llvm::APInt::toString();
        v8 = *(_QWORD *)&__len[8];
        if (*(_QWORD *)&__len[8] >= 0x7FFFFFFFFFFFFFF8uLL)
          abort();
        v9 = *(const void **)__len;
        if (*(_QWORD *)&__len[8] >= 0x17uLL)
        {
          v11 = (*(_QWORD *)&__len[8] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(_QWORD *)&__len[8] | 7) != 0x17)
            v11 = *(_QWORD *)&__len[8] | 7;
          v12 = v11 + 1;
          v13 = *(const void **)__len;
          v14 = (std::string *)operator new(v11 + 1);
          v9 = v13;
          p_dst = v14;
          __dst.__r_.__value_.__l.__size_ = v8;
          __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len[8];
          p_dst = &__dst;
          if (!*(_QWORD *)&__len[8])
            goto LABEL_16;
        }
        memmove(p_dst, v9, v8);
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v8] = 0;
        if (*(_QWORD **)__len != v27)
          free(*(void **)__len);
        v15 = std::string::insert(&__dst, 0, " [");
        v16 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&v24, "]");
        v18 = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)__len = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        *(_QWORD *)&__len[16] = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (__len[23] >= 0)
          v19 = __len;
        else
          v19 = *(const std::string::value_type **)__len;
        if (__len[23] >= 0)
          v20 = __len[23] & 0x7F;
        else
          v20 = *(_QWORD *)&__len[8];
        std::string::append(&v25, v19, v20);
        if ((__len[23] & 0x80000000) != 0)
          operator delete(*(void **)__len);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_22F26E908(a2);
  Impl = llvm::air::AIClipDistance::getImpl();
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return Impl;
}

BOOL sub_22E53B01C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 385)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E53B07C(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Impl;
  void *__p;
  uint64_t v34;
  char v35;

  v4 = (_DWORD *)(a1 + 16);
  __p = (void *)0x8000000000000002;
  v34 = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
    sub_22E53C678(a1, a2);
  if (sub_22E53B01C(a2))
  {
    sub_22EFC8E88(a2);
    v6 = *v5;
    v7 = *((unsigned int *)v5 + 2);
    if ((_DWORD)v7 && *(_WORD *)(*v6 + 32) != 385)
    {
      v8 = 8 * v7 - 8;
      v9 = *v5;
      do
      {
        v10 = v9[1];
        ++v9;
        v8 -= 8;
      }
      while (*(_WORD *)(v10 + 32) != 385);
    }
    do
    {
      v12 = *v6++;
      v11 = v12;
    }
    while (*(_WORD *)(v12 + 32) != 385);
    sub_22E533554(a1, *(_QWORD *)(v11 + 40));
  }
  __p = (void *)0x8000000B00000001;
  v34 = 0;
  if ((sub_22E3B38EC(v4, &__p) & 1) == 0 && sub_22E53D258(a2))
  {
    sub_22EFC8E88(a2);
    v14 = *v13;
    v15 = *((unsigned int *)v13 + 2);
    if ((_DWORD)v15 && *(_WORD *)(*v14 + 32) != 378)
    {
      v16 = 8 * v15 - 8;
      v17 = *v13;
      do
      {
        v18 = v17[1];
        ++v17;
        v16 -= 8;
      }
      while (*(_WORD *)(v18 + 32) != 378);
    }
    do
    {
      v20 = *v14++;
      v19 = v20;
    }
    while (*(_WORD *)(v20 + 32) != 378);
    sub_22E533554(a1, *(_QWORD *)(v19 + 40));
  }
  if (sub_22F26E968(a2))
  {
    sub_22EFC8E88(a2);
    v22 = *v21;
    v23 = *((unsigned int *)v21 + 2);
    if ((_DWORD)v23 && *(_WORD *)(*v22 + 32) != 439)
    {
      v24 = 8 * v23 - 8;
      v25 = *v21;
      do
      {
        v26 = v25[1];
        ++v25;
        v24 -= 8;
      }
      while (*(_WORD *)(v26 + 32) != 439);
    }
    do
    {
      v28 = *v22++;
      v27 = v28;
    }
    while (*(_WORD *)(v28 + 32) != 439);
    sub_22E533554(a1, *(_QWORD *)(v27 + 40));
  }
  v29 = *(_QWORD *)(a2 + 48);
  v30 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v30 + 248))(&__p, v30, *(_QWORD *)(a1 + 8), v29, 1);
  Impl = llvm::air::AIRenderTargetRet::getImpl();
  if (v35 < 0)
    operator delete(__p);
  return Impl;
}

BOOL sub_22E53B37C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 386)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E53B3DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 388)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53B43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 393)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53B49C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 404)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E53B4FC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Impl;
  void *__p[2];
  char v10;
  _QWORD v11[2];

  v4 = (_DWORD *)(a1 + 16);
  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  if (!sub_22E53D1F8(a2))
  {
    v11[0] = 0x8000000100000002;
    v11[1] = 0;
    sub_22E3B38EC(v4, v11);
  }
  sub_22F26E908(a2);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 248))(__p, v6, *(_QWORD *)(a1 + 8), v5, 1);
  Impl = llvm::air::AIPositionRet::getImpl();
  if (v10 < 0)
    operator delete(__p[0]);
  return Impl;
}

BOOL sub_22E53B678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 444)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53B6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 452)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E53B738(uint64_t a1, unint64_t a2)
{
  uint64_t Impl;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char v16;
  _QWORD v17[4];

  if (!getenv("AIR_INLINE_TYPE_INFO"))
    return 0;
  v17[0] = 0x8000000700000002;
  v17[1] = 0;
  Impl = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), v17) & 1) != 0)
    return Impl;
  v5 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  if (!v5 || *(_BYTE *)(v5 + 16) != 2)
  {
    v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if ((unint64_t)sub_22F10ACF8(*v8) >= 0x10)
    {
      v9 = sub_22F10ACF8(*v8);
      v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
      v11 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v9);
      if (v11 && *(_BYTE *)(v11 + 16) == 2)
      {
        v9 = *(_QWORD *)(v11 + 32);
        v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
      }
      if ((sub_22F1110EC(*v10, 0) & 1) == 0)
      {
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v17);
        sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v9);
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        sub_22E53BAA0(a1, v9);
      else
        sub_22E53B738(a1, v9);
      v12 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 248))(&__p, v12, *(_QWORD *)(a1 + 8), v9, 1);
      LODWORD(v17[0]) = 0;
      goto LABEL_22;
    }
    return 0;
  }
  v6 = *(_QWORD *)(v5 + 32);
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    sub_22E53BAA0(a1, v6);
  else
    sub_22E53B738(a1, v6);
  if ((sub_22F1110EC(*v7, 0) & 1) == 0)
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v7, (uint64_t)v17);
    sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6);
  }
  v13 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v13 + 248))(&__p, v13, *(_QWORD *)(a1 + 8), a2, 1);
  LODWORD(v17[0]) = 0;
LABEL_22:
  Impl = llvm::air::AIInlineTypeInfo::getImpl();
  if (v16 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E53BAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Impl;
  uint64_t v11;
  uint64_t StructLayout;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _DWORD *v65;
  unsigned int v66;
  uint64_t v67;
  const void *p_p;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  int v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *__p;
  size_t v107;
  int v108;
  char v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  void *v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  _QWORD v120[62];

  v120[60] = *MEMORY[0x24BDAC8D0];
  if (!getenv("AIR_INLINE_TYPE_INFO")
    || (v118 = (char *)0x8000000700000002, v119 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 16), &v118) & 1) != 0))
  {
    a2 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
    do
    {
      v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      v5 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0;
      if (*(unsigned __int8 *)(*(_QWORD *)v5 + 16) - 39 <= 1)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v7 = sub_22F10ACF8(v4);
        a2 = sub_22EF5BA38(v6, v7);
        v5 = *(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
      }
    }
    while (*(unsigned __int8 *)(*(_QWORD *)v5 + 16) - 39 < 2);
  }
  if (!sub_22E547738(a2))
    return 0;
  v8 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3)
      v9 = 0;
    else
      v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  v100 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v9);
  v99 = sub_22E66DD94(*(_QWORD *)(a1 + 8) + 280, v9);
  v11 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)a2);
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v104 = v11;
  StructLayout = llvm::DataLayout::getStructLayout();
  v118 = (char *)v120;
  v119 = 0x400000000;
  v13 = sub_22EFC3B90(v9);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    v97 = StructLayout;
    v98 = (_DWORD *)(a1 + 16);
    v103 = StructLayout + 16;
LABEL_16:
    v102 = sub_22E4EC264(v99, v14);
    if (getenv("AIR_INLINE_TYPE_INFO"))
    {
      __p = (void *)0x8000000700000002;
      v107 = 0;
      if ((sub_22E3B38EC(v98, &__p) & 1) == 0)
      {
        v16 = v102 - v15;
        if (v102 > v15)
        {
          v17 = 8 * v15;
          while (1)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v104 + 16) + v17);
            v112 = 0;
            __p = 0;
            v107 = 0;
            v108 = 0;
            v110 = &v112;
            v111 = xmmword_22F44E360;
            v113 = 0;
            v114 = &v116;
            v115 = xmmword_22F44E360;
            v117 = 0;
            v19 = sub_22E54E990((uint64_t)&v118, (unint64_t)&__p, 1);
            v20 = v118;
            v21 = v119;
            v22 = &v118[120 * v119];
            v23 = *(_OWORD *)v19;
            *((_DWORD *)v22 + 4) = *(_DWORD *)(v19 + 16);
            *(_OWORD *)v22 = v23;
            *((_OWORD *)v22 + 2) = xmmword_22F44E360;
            *((_QWORD *)v22 + 3) = v22 + 48;
            v24 = (uint64_t)(v22 + 24);
            if (*(_QWORD *)(v19 + 32))
              sub_22E3B2DB8(v24, v19 + 24);
            v25 = &v20[120 * v21];
            v26 = *(_DWORD *)(v19 + 56);
            *((_QWORD *)v25 + 8) = v25 + 88;
            v27 = (uint64_t)(v25 + 64);
            *(_DWORD *)(v27 - 8) = v26;
            *(_OWORD *)(v27 + 8) = xmmword_22F44E360;
            if (*(_QWORD *)(v19 + 72))
              sub_22E3B2DB8(v27, v19 + 64);
            v28 = &v20[120 * v21];
            v29 = *(_OWORD *)(v19 + 96);
            *((_QWORD *)v28 + 14) = *(_QWORD *)(v19 + 112);
            *((_OWORD *)v28 + 6) = v29;
            LODWORD(v119) = v119 + 1;
            if (v114 != &v116)
              free(v114);
            if (v110 != &v112)
              free(v110);
            v30 = &v118[120 * v119];
            *((_DWORD *)v30 - 28) = *(_QWORD *)(v103 + v17);
            *((_DWORD *)v30 - 27) = 1;
            if (*(_BYTE *)(v18 + 8) == 17)
              v31 = *(_QWORD *)(v18 + 32);
            else
              LODWORD(v31) = 0;
            *((_DWORD *)v30 - 26) = v31;
            __p = ".padding";
            LOWORD(v111) = 259;
            *((_DWORD *)v30 - 16) = 1;
            *((_QWORD *)v30 - 6) = 0;
            llvm::Twine::toVector();
            v32 = *(_QWORD **)(a1 + 8);
            v33 = *(_QWORD *)(v32[18] + 16512);
            v34 = sub_22E699F3C(v32);
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v34 + 248))(&__p, v34, *(_QWORD *)(a1 + 8), v33, 1);
            v35 = v109 >= 0 ? &__p : (void **)__p;
            v36 = v109 >= 0 ? v109 & 0x7F : v107;
            *((_QWORD *)v30 - 11) = 0;
            if (*((_QWORD *)v30 - 10) < v36)
              break;
            v37 = 0;
            v38 = 0;
            if (v36)
              goto LABEL_39;
LABEL_40:
            *((_QWORD *)v30 - 11) = v38 + v36;
            if (v109 < 0)
              operator delete(__p);
            v17 += 8;
            if (!--v16)
              goto LABEL_45;
          }
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v37 = *((_QWORD *)v30 - 11);
LABEL_39:
          memcpy((void *)(*((_QWORD *)v30 - 12) + v37), v35, v36);
          v38 = *((_QWORD *)v30 - 11);
          goto LABEL_40;
        }
      }
    }
LABEL_45:
    v39 = *(_QWORD *)(v14 + 48);
    if (!getenv("AIR_INLINE_TYPE_INFO")
      || (__p = (void *)0x8000000700000002, v107 = 0, (sub_22E3B38EC(v98, &__p) & 1) != 0))
    {
      v42 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v39);
      if (v42)
      {
        v43 = v42;
        if (*(_BYTE *)(v42 + 16) == 2)
        {
          v39 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v39);
          v101 = sub_22EF6A060(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v43);
          goto LABEL_56;
        }
      }
    }
    else
    {
      v40 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v39);
      if (v40 && *(_BYTE *)(v40 + 16) == 2)
      {
        v41 = (_QWORD *)(v40 + 40);
        if (*(_DWORD *)(v40 + 48) >= 0x41u)
          v41 = (_QWORD *)*v41;
        v39 = *(_QWORD *)(v40 + 32);
        v101 = *(_DWORD *)v41;
LABEL_56:
        v44 = sub_22E53B738(a1, v39);
        if (v44)
        {
          v45 = v44 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v46 = sub_22E53BAA0(a1, v39);
          if (v46)
            v45 = v46 | 4;
          else
            v45 = 0;
        }
        v112 = 0;
        __p = 0;
        v107 = 0;
        v108 = 0;
        v110 = &v112;
        v111 = xmmword_22F44E360;
        v113 = 0;
        v114 = &v116;
        v115 = xmmword_22F44E360;
        v117 = 0;
        v47 = sub_22E54E990((uint64_t)&v118, (unint64_t)&__p, 1);
        v48 = v118;
        v49 = v119;
        v50 = &v118[120 * v119];
        v51 = *(_OWORD *)v47;
        *((_DWORD *)v50 + 4) = *(_DWORD *)(v47 + 16);
        *(_OWORD *)v50 = v51;
        *((_OWORD *)v50 + 2) = xmmword_22F44E360;
        *((_QWORD *)v50 + 3) = v50 + 48;
        v52 = (uint64_t)(v50 + 24);
        if (*(_QWORD *)(v47 + 32))
          sub_22E3B2DB8(v52, v47 + 24);
        v53 = &v48[120 * v49];
        v54 = *(_DWORD *)(v47 + 56);
        *((_QWORD *)v53 + 8) = v53 + 88;
        v55 = (uint64_t)(v53 + 64);
        *(_DWORD *)(v55 - 8) = v54;
        *(_OWORD *)(v55 + 8) = xmmword_22F44E360;
        if (*(_QWORD *)(v47 + 72))
          sub_22E3B2DB8(v55, v47 + 64);
        v56 = &v48[120 * v49];
        v57 = *(_OWORD *)(v47 + 96);
        *((_QWORD *)v56 + 14) = *(_QWORD *)(v47 + 112);
        *((_OWORD *)v56 + 6) = v57;
        LODWORD(v119) = v119 + 1;
        if (v114 != &v116)
          free(v114);
        if (v110 != &v112)
          free(v110);
        v58 = &v118[120 * v119];
        *((_QWORD *)v58 - 15) = v45;
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v60 = *(_QWORD *)(*(_QWORD *)(v100 + 48) + 8 * sub_22EFC306C(v14));
        *((_DWORD *)v58 - 28) = v60 / sub_22EF5CDF0(v59, *(_QWORD *)(*(_QWORD *)(v59 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
        v61 = 0;
        *((_DWORD *)v58 - 27) = (_DWORD)__p;
        *((_DWORD *)v58 - 26) = v101;
        v62 = *(_QWORD *)(v14 + 40);
        v63 = "";
        if ((v62 & 7) == 0)
        {
          v64 = v62 & 0xFFFFFFFFFFFFFFF8;
          if (v64)
          {
            v65 = *(_DWORD **)(v64 + 16);
            v66 = *v65;
            v63 = (char *)(v65 + 4);
            v61 = v66;
          }
        }
        LOWORD(v111) = 261;
        __p = v63;
        v107 = v61;
        *((_DWORD *)v58 - 16) = 1;
        *((_QWORD *)v58 - 6) = 0;
        llvm::Twine::toVector();
        v67 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v67 + 248))(&__p, v67, *(_QWORD *)(a1 + 8), v39, 1);
        if (v109 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v109 >= 0)
          v69 = v109 & 0x7F;
        else
          v69 = v107;
        *((_QWORD *)v58 - 11) = 0;
        if (*((_QWORD *)v58 - 10) < v69)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v70 = *((_QWORD *)v58 - 11);
        }
        else
        {
          v70 = 0;
          v71 = 0;
          if (!v69)
            goto LABEL_81;
        }
        memcpy((void *)(*((_QWORD *)v58 - 12) + v70), p_p, v69);
        v71 = *((_QWORD *)v58 - 11);
LABEL_81:
        *((_QWORD *)v58 - 11) = v71 + v69;
        if (v109 < 0)
          operator delete(__p);
        v15 = v102 + 1;
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v14)
            break;
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_16;
        }
        StructLayout = v97;
        goto LABEL_90;
      }
    }
    v101 = 0;
    goto LABEL_56;
  }
  v15 = 0;
LABEL_90:
  if (getenv("AIR_INLINE_TYPE_INFO"))
  {
    __p = (void *)0x8000000700000002;
    v107 = 0;
    if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
    {
      v72 = *(_DWORD *)(v104 + 12);
      v73 = v72 - v15;
      if (v72 > v15)
      {
        v105 = StructLayout + 16;
        v74 = 8 * v15;
        while (1)
        {
          v75 = *(_QWORD *)(*(_QWORD *)(v104 + 16) + v74);
          v112 = 0;
          __p = 0;
          v107 = 0;
          v108 = 0;
          v110 = &v112;
          v111 = xmmword_22F44E360;
          v113 = 0;
          v114 = &v116;
          v115 = xmmword_22F44E360;
          v117 = 0;
          v76 = sub_22E54E990((uint64_t)&v118, (unint64_t)&__p, 1);
          v77 = v118;
          v78 = v119;
          v79 = &v118[120 * v119];
          v80 = *(_OWORD *)v76;
          *((_DWORD *)v79 + 4) = *(_DWORD *)(v76 + 16);
          *(_OWORD *)v79 = v80;
          *((_OWORD *)v79 + 2) = xmmword_22F44E360;
          *((_QWORD *)v79 + 3) = v79 + 48;
          v81 = (uint64_t)(v79 + 24);
          if (*(_QWORD *)(v76 + 32))
            sub_22E3B2DB8(v81, v76 + 24);
          v82 = &v77[120 * v78];
          v83 = *(_DWORD *)(v76 + 56);
          *((_QWORD *)v82 + 8) = v82 + 88;
          v84 = (uint64_t)(v82 + 64);
          *(_DWORD *)(v84 - 8) = v83;
          *(_OWORD *)(v84 + 8) = xmmword_22F44E360;
          if (*(_QWORD *)(v76 + 72))
            sub_22E3B2DB8(v84, v76 + 64);
          v85 = &v77[120 * v78];
          v86 = *(_OWORD *)(v76 + 96);
          *((_QWORD *)v85 + 14) = *(_QWORD *)(v76 + 112);
          *((_OWORD *)v85 + 6) = v86;
          LODWORD(v119) = v119 + 1;
          if (v114 != &v116)
            free(v114);
          if (v110 != &v112)
            free(v110);
          v87 = &v118[120 * v119];
          *((_DWORD *)v87 - 28) = *(_QWORD *)(v105 + v74);
          *((_DWORD *)v87 - 27) = 1;
          if (*(_BYTE *)(v75 + 8) == 17)
            v88 = *(_QWORD *)(v75 + 32);
          else
            LODWORD(v88) = 0;
          *((_DWORD *)v87 - 26) = v88;
          __p = ".padding";
          LOWORD(v111) = 259;
          *((_DWORD *)v87 - 16) = 1;
          *((_QWORD *)v87 - 6) = 0;
          llvm::Twine::toVector();
          v89 = *(_QWORD **)(a1 + 8);
          v90 = *(_QWORD *)(v89[18] + 16512);
          v91 = sub_22E699F3C(v89);
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v91 + 248))(&__p, v91, *(_QWORD *)(a1 + 8), v90, 1);
          v92 = v109 >= 0 ? &__p : (void **)__p;
          v93 = v109 >= 0 ? v109 & 0x7F : v107;
          *((_QWORD *)v87 - 11) = 0;
          if (*((_QWORD *)v87 - 10) < v93)
            break;
          v94 = 0;
          v95 = 0;
          if (v93)
            goto LABEL_113;
LABEL_114:
          *((_QWORD *)v87 - 11) = v95 + v93;
          if (v109 < 0)
            operator delete(__p);
          v74 += 8;
          if (!--v73)
            goto LABEL_119;
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v94 = *((_QWORD *)v87 - 11);
LABEL_113:
        memcpy((void *)(*((_QWORD *)v87 - 12) + v94), v92, v93);
        v95 = *((_QWORD *)v87 - 11);
        goto LABEL_114;
      }
    }
  }
LABEL_119:
  Impl = llvm::air::AIStructTypeInfo::getImpl();
  sub_22E54E900(&v118);
  return Impl;
}

uint64_t sub_22E53C558(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _DWORD v5[6];

  v3 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_22F1110EC(*v3, 0) & 1) != 0)
    return 0;
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v3, (uint64_t)v5);
  return v5[0] | 0x100000000;
}

uint64_t sub_22E53C5C0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  if ((sub_22F1110EC(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
    return 0;
  else
    return sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v3) | 0x100000000;
}

uint64_t sub_22E53C624(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10CA40(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22E53C678(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Impl;
  void *__p;
  char v10;
  void *v11;
  char v12;

  v3 = sub_22E532CBC(a2);
  if (!v3)
    return 0;
  v4 = sub_22F001848(*(unsigned __int8 **)(v3 + 40));
  sub_22E533A54();
  v5 = *(_QWORD *)(v4 + 48);
  v6 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 248))(&v11, v6, *(_QWORD *)(a1 + 8), v5, 1);
  sub_22EFB9E74(v4, &__p);
  Impl = llvm::air::AIFunctionConstant::getImpl();
  if (v10 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return Impl;
}

uint64_t sub_22E53C7B4(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t Impl;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const void *p_p;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  size_t v58;
  const void *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v65;
  size_t v66;
  char *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v84;
  unint64_t v85;
  size_t v86;
  uint64_t v87;
  void *__p;
  size_t v89;
  int v90;
  char v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  void *v96;
  __int128 v97;
  _DWORD v98[10];
  char *v99;
  uint64_t v100;
  _QWORD v101[62];

  v101[60] = *MEMORY[0x24BDAC8D0];
  if (sub_22E547738(a2))
  {
    v6 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 >= 3)
        v7 = 0;
      else
        v7 = v6;
    }
    else
    {
      v7 = 0;
    }
    v87 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v7);
    v99 = (char *)v101;
    v100 = 0x400000000;
    v9 = sub_22EFC3B90(v7);
    if (!v9)
    {
LABEL_96:
      Impl = llvm::air::AIStructTypeInfo::getImpl();
      sub_22E54E900(&v99);
      return Impl;
    }
    v10 = v9;
    v11 = a3;
    v86 = a3 & 0xFF00;
    v84 = a3;
LABEL_10:
    v12 = *(_QWORD *)(v10 + 48);
    if (getenv("AIR_INLINE_TYPE_INFO")
      && (__p = (void *)0x8000000700000002, v89 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0))
    {
      v15 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v12);
      if (v15 && *(_BYTE *)(v15 + 16) == 2)
      {
        v16 = (_QWORD *)(v15 + 40);
        if (*(_DWORD *)(v15 + 48) >= 0x41u)
          v16 = (_QWORD *)*v16;
        v12 = *(_QWORD *)(v15 + 32);
        LODWORD(v14) = *(_DWORD *)v16;
LABEL_21:
        v17 = sub_22E54755C(a1, v12, v11);
        if (v17)
        {
          v18 = v17 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v85 = v85 & 0xFFFFFFFFFFFF0000 | v11;
          v19 = sub_22E53C7B4(a1, v12, v85);
          if (v19)
            v18 = v19 | 4;
          else
            v18 = 0;
        }
        v94 = 0;
        __p = 0;
        v89 = 0;
        v90 = 0;
        v92 = &v94;
        v93 = xmmword_22F44E360;
        v95 = 0;
        v96 = v98;
        v97 = xmmword_22F44E360;
        v98[2] = 0;
        v20 = sub_22E54E990((uint64_t)&v99, (unint64_t)&__p, 1);
        v21 = v99;
        v22 = v100;
        v23 = &v99[120 * v100];
        v24 = *(_OWORD *)v20;
        *((_DWORD *)v23 + 4) = *(_DWORD *)(v20 + 16);
        *(_OWORD *)v23 = v24;
        *((_OWORD *)v23 + 2) = xmmword_22F44E360;
        *((_QWORD *)v23 + 3) = v23 + 48;
        v25 = (uint64_t)(v23 + 24);
        if (*(_QWORD *)(v20 + 32))
          sub_22E3B2DB8(v25, v20 + 24);
        v26 = &v21[120 * v22];
        v27 = *(_DWORD *)(v20 + 56);
        *((_QWORD *)v26 + 8) = v26 + 88;
        v28 = (uint64_t)(v26 + 64);
        *(_DWORD *)(v28 - 8) = v27;
        *(_OWORD *)(v28 + 8) = xmmword_22F44E360;
        if (*(_QWORD *)(v20 + 72))
          sub_22E3B2DB8(v28, v20 + 64);
        v29 = &v21[120 * v22];
        v30 = *(_OWORD *)(v20 + 96);
        *((_QWORD *)v29 + 14) = *(_QWORD *)(v20 + 112);
        *((_OWORD *)v29 + 6) = v30;
        LODWORD(v100) = v100 + 1;
        if (v96 != v98)
          free(v96);
        if (v92 != &v94)
          free(v92);
        v31 = &v99[120 * v100];
        *((_QWORD *)v31 - 15) = v18;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v33 = *(_QWORD *)(*(_QWORD *)(v87 + 48) + 8 * sub_22EFC306C(v10));
        *((_DWORD *)v31 - 28) = v33 / sub_22EF5CDF0(v32, *(_QWORD *)(*(_QWORD *)(v32 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
        *((_DWORD *)v31 - 27) = (_DWORD)__p;
        *((_DWORD *)v31 - 26) = v14;
        v34 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v34 + 248))(&__p, v34, *(_QWORD *)(a1 + 8), v12, 1);
        if (v91 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v91 >= 0)
          v36 = v91 & 0x7F;
        else
          v36 = v89;
        *((_QWORD *)v31 - 11) = 0;
        if (*((_QWORD *)v31 - 10) < v36)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v37 = *((_QWORD *)v31 - 11);
        }
        else
        {
          v37 = 0;
          v38 = 0;
          if (!v36)
            goto LABEL_43;
        }
        memcpy((void *)(*((_QWORD *)v31 - 12) + v37), p_p, v36);
        v38 = *((_QWORD *)v31 - 11);
LABEL_43:
        *((_QWORD *)v31 - 11) = v38 + v36;
        if (v91 < 0)
          operator delete(__p);
        v39 = v86;
        if (!v86)
        {
          v45 = *(_QWORD *)(v10 + 40);
          v46 = "";
          if ((v45 & 7) == 0)
          {
            v47 = v45 & 0xFFFFFFFFFFFFFFF8;
            if (v47)
            {
              v48 = *(_DWORD **)(v47 + 16);
              v49 = *v48;
              v46 = (char *)(v48 + 4);
              v39 = v49;
            }
          }
          LOWORD(v93) = 261;
          __p = v46;
          v89 = v39;
          *((_DWORD *)v31 - 16) = 1;
          *((_QWORD *)v31 - 6) = 0;
          llvm::Twine::toVector();
          if ((*(_BYTE *)(v10 + 29) & 1) == 0)
            goto LABEL_91;
          sub_22EFC8E88(v10);
          v51 = *(uint64_t **)v50;
          v52 = *(unsigned int *)(v50 + 8);
          v53 = *(uint64_t **)v50;
          if ((_DWORD)v52)
          {
            v54 = 8 * v52;
            v53 = *(uint64_t **)v50;
            while (*(_WORD *)(*v53 + 32) != 385)
            {
              ++v53;
              v54 -= 8;
              if (!v54)
                goto LABEL_91;
            }
          }
          if (v53 == &v51[v52])
            goto LABEL_91;
          do
          {
            v79 = *v51++;
            v78 = v79;
          }
          while (*(_WORD *)(v79 + 32) != 385);
          v76 = (uint64_t *)(v78 + 40);
          v77 = 4;
LABEL_87:
          v80 = sub_22E533554(a1, *v76);
          if ((_DWORD)v80)
            v82 = v77;
          else
            v82 = 0;
          *((_DWORD *)v31 - 6) = v82;
          *((_QWORD *)v31 - 2) = v80;
          *((_QWORD *)v31 - 1) = v81;
          goto LABEL_91;
        }
        if ((*(_BYTE *)(v10 + 29) & 1) == 0)
          goto LABEL_67;
        sub_22EFC8E88(v10);
        v41 = *(uint64_t **)v40;
        v42 = *(unsigned int *)(v40 + 8);
        v43 = *(uint64_t **)v40;
        if ((_DWORD)v42)
        {
          v44 = 8 * v42;
          v43 = *(uint64_t **)v40;
          while (*(_WORD *)(*v43 + 32) != 467)
          {
            ++v43;
            v44 -= 8;
            if (!v44)
              goto LABEL_67;
          }
        }
        if (v43 == &v41[v42])
        {
LABEL_67:
          v63 = *(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v10 + 40) & 7) != 0 || v63 == 0)
          {
            v66 = 0;
            v67 = "";
          }
          else
          {
            v65 = *(_DWORD **)(v63 + 16);
            v68 = *v65;
            v67 = (char *)(v65 + 4);
            v66 = v68;
          }
          LOWORD(v93) = 261;
          __p = v67;
          v89 = v66;
          *((_DWORD *)v31 - 16) = 1;
          *((_QWORD *)v31 - 6) = 0;
          llvm::Twine::toVector();
          goto LABEL_74;
        }
        do
        {
          v56 = *v41++;
          v55 = v56;
        }
        while (*(_WORD *)(v56 + 32) != 467);
        v57 = *(unsigned int **)(*(_QWORD *)(v55 + 40) + 16);
        v60 = *v57;
        v59 = v57 + 4;
        v58 = v60;
        *((_DWORD *)v31 - 16) = 2;
        *((_QWORD *)v31 - 6) = 0;
        if (*((_QWORD *)v31 - 5) < (unint64_t)v60)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v61 = *((_QWORD *)v31 - 6);
        }
        else
        {
          v61 = 0;
          v62 = 0;
          if (!v58)
          {
LABEL_66:
            *((_QWORD *)v31 - 6) = v62 + v58;
LABEL_74:
            if ((*(_BYTE *)(v10 + 29) & 1) == 0)
              goto LABEL_91;
            sub_22EFC8E88(v10);
            v70 = *(uint64_t **)v69;
            v71 = *(unsigned int *)(v69 + 8);
            v72 = *(uint64_t **)v69;
            if ((_DWORD)v71)
            {
              v73 = 8 * v71;
              v72 = *(uint64_t **)v69;
              while (*(_WORD *)(*v72 + 32) != 439)
              {
                ++v72;
                v73 -= 8;
                if (!v73)
                  goto LABEL_91;
              }
            }
            if (v72 != &v70[v71])
            {
              do
              {
                v75 = *v70++;
                v74 = v75;
              }
              while (*(_WORD *)(v75 + 32) != 439);
              if (!v84)
              {
                v76 = (uint64_t *)(v74 + 40);
                v77 = 3;
                goto LABEL_87;
              }
            }
LABEL_91:
            while (1)
            {
              v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v10)
                goto LABEL_96;
              if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_10;
            }
          }
        }
        memcpy((void *)(*((_QWORD *)v31 - 7) + v61), v59, v58);
        v62 = *((_QWORD *)v31 - 6);
        goto LABEL_66;
      }
    }
    else
    {
      v13 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v12);
      v14 = v13;
      if (!v13)
        goto LABEL_21;
      if (*(_BYTE *)(v13 + 16) == 2)
      {
        v12 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v12);
        LODWORD(v14) = sub_22EF6A060(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v14);
        goto LABEL_21;
      }
    }
    LODWORD(v14) = 0;
    goto LABEL_21;
  }
  return 0;
}

void sub_22E53CECC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  unsigned int *v14;
  const void *v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  size_t v28;
  size_t v29;
  _QWORD *v30;
  _BYTE v31[24];
  _BYTE *v32;
  void *__dst;
  void *__src;
  size_t __len[2];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  __src = v36;
  *(_OWORD *)__len = xmmword_22F44E350;
  if ((*(_BYTE *)(a3 + 29) & 1) == 0)
    goto LABEL_12;
  sub_22EFC8E88(a3);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  v9 = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v18 = 8 * v8;
    v9 = *(uint64_t **)v6;
    while (*(_WORD *)(*v9 + 32) != 467)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
        goto LABEL_12;
    }
  }
  if (v9 == &v7[v8])
  {
LABEL_12:
    v19 = *(_QWORD *)(a3 + 48);
    v20 = sub_22F26EED0(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
    if (v20)
    {
      v21 = sub_22F10C2A4(v20);
      if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3)
        v22 = 0;
      else
        v22 = v21;
      v19 = *(_QWORD *)(**(_QWORD **)(v22 + 168) + 8);
    }
    sub_22F242C48((uint64_t)v31, (uint64_t)&__src);
    v23 = __dst;
    if ((unint64_t)(v32 - (_BYTE *)__dst) > 9)
    {
      *((_WORD *)__dst + 4) = 10340;
      *v23 = *(_QWORD *)"generated(";
      __dst = (char *)__dst + 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v31, "generated(");
    }
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 224) + 16);
    v25 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
      v25 = (unint64_t)sub_22F10D2BC(v19);
    (*(void (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v24 + 208))(v24, a3, v25 & 0xFFFFFFFFFFFFFFF0, v31);
    if (v32 != __dst)
    {
      *(_BYTE *)__dst = 41;
      goto LABEL_40;
    }
LABEL_22:
    llvm::raw_ostream::write((llvm::raw_ostream *)v31, ")");
    goto LABEL_23;
  }
  do
  {
    v11 = *v7++;
    v10 = v11;
  }
  while (*(_WORD *)(v11 + 32) != 467);
  sub_22F242C48((uint64_t)v31, (uint64_t)&__src);
  v12 = __dst;
  if ((unint64_t)(v32 - (_BYTE *)__dst) > 4)
  {
    *((_BYTE *)__dst + 4) = 40;
    *v12 = 1919251317;
    v13 = (char *)__dst + 5;
    __dst = (char *)__dst + 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v31, "user(");
    v13 = __dst;
  }
  v14 = *(unsigned int **)(*(_QWORD *)(v10 + 40) + 16);
  v17 = *v14;
  v15 = v14 + 4;
  v16 = v17;
  if (v17 <= (unint64_t)(v32 - v13))
  {
    if (v16)
    {
      memcpy(v13, v15, v16);
      v13 = (char *)__dst + v16;
      __dst = (char *)__dst + v16;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v31, (const char *)v15);
    v13 = __dst;
  }
  if (v32 == v13)
    goto LABEL_22;
  *v13 = 41;
LABEL_40:
  __dst = (char *)__dst + 1;
LABEL_23:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v31);
  v26 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v27 = __src;
  if (__len[0] >= 0x17)
  {
    v28 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v28 = __len[0] | 7;
    v29 = v28 + 1;
    v30 = operator new(v28 + 1);
    a1[1] = v26;
    a1[2] = v29 | 0x8000000000000000;
    *a1 = v30;
    a1 = v30;
    goto LABEL_30;
  }
  *((_BYTE *)a1 + 23) = __len[0];
  if (v26)
LABEL_30:
    memmove(a1, v27, v26);
  *((_BYTE *)a1 + v26) = 0;
  if (__src != v36)
    free(__src);
}

BOOL sub_22E53D1F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 408)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22E53D258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 378)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E53D2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Impl;
  void *__p;
  char v8;

  v4 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 248))(&__p, v4, *(_QWORD *)(a1 + 8), a2, 1);
  Impl = llvm::air::AIVisibleInput::getImpl();
  if (v8 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E53D36C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t Impl;
  std::string __p;
  void *v15;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(a2 + 48);
  v6 = sub_22F10ACF8(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
  sub_22F10AFE4(v6, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  v15 = (void *)0x8000000700000002;
  v16 = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 16), &v15);
  if (!sub_22E53B738(a1, v6))
    sub_22E53BAA0(a1, v6);
  if (!getenv("AIR_INLINE_TYPE_INFO")
    || (v15 = (void *)0x8000000700000002, v16 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 16), &v15) & 1) != 0))
  {
    v6 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6);
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v9 = sub_22F10ACF8(v7);
        v6 = sub_22EF5BA38(v8, v9);
        v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      }
      while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 < 2);
    }
  }
  sub_22E53C558(a1, v6);
  sub_22E53C5C0(a1, v6);
  v10 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v10 + 248))(&v15, v10, *(_QWORD *)(a1 + 8), v5, 1);
  sub_22E545218(&__p, a2, a3);
  Impl = llvm::air::AICIPointer::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v15);
  return Impl;
}

uint64_t sub_22E53D620(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Impl;
  std::string __p;
  void *v12;
  char v13;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E53C624(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  sub_22F10C9BC(v7);
  v8 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 248))(&v12, v8, *(_QWORD *)(a1 + 8), v6, 1);
  sub_22E545218(&__p, a2, a3);
  Impl = llvm::air::AICITexture::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12);
  return Impl;
}

uint64_t sub_22E53D768(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Impl;
  void *__p;
  char v8;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 248))(&__p, v4, *(_QWORD *)(a1 + 8), v3, 1);
  Impl = llvm::air::AIVisibleInput::getImpl();
  if (v8 < 0)
    operator delete(__p);
  return Impl;
}

void sub_22E53D84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  void *__p;
  uint64_t v83;
  const char *v84;
  __int16 v85;
  void *v86;
  char v87;
  void *v88;
  char v89;

  if (sub_22E542BD8(a2) || sub_22E542C38(a2))
    goto LABEL_4;
  if (sub_22F26EC68(a2))
  {
    if (sub_22E88FFC4(*(_QWORD *)(a1 + 824)))
    {
      sub_22F26ECC8(a1, a2);
      sub_22F26ED80(a1, a2);
    }
    sub_22E53C678(a1, a2);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 248))(&__p, v12, *(_QWORD *)(a1 + 8), v11, 1);
    Impl = llvm::air::AIBarycentricCoord::getImpl();
    goto LABEL_6;
  }
  if (sub_22E542C98(a2) || sub_22E542CF8(a2))
    goto LABEL_4;
  if (sub_22E536E34(a2))
    return;
  if (sub_22E53B01C(a2))
  {
    v13 = sub_22E541408(a1, a2);
LABEL_21:
    v9 = v13;
LABEL_8:
    v10 = *(_DWORD *)(a3 + 8);
    if (v10 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    ++*(_DWORD *)(a3 + 8);
    return;
  }
  if (sub_22E542D58(a2)
    || sub_22E542DB8(a2)
    || sub_22E542E18(a2)
    || sub_22E542E78(a2)
    || sub_22E542ED8(a2)
    || sub_22E53B43C(a2)
    || sub_22E542F38(a2)
    || sub_22E542F98(a2)
    || sub_22E542FF8(a2))
  {
    goto LABEL_4;
  }
  if (sub_22E543058(a2))
  {
    v14 = *(_QWORD *)(a1 + 824);
    if (v14 && sub_22EFC1D94(v14))
    {
      v15 = *(_QWORD *)(a1 + 824);
      if ((*(_BYTE *)(v15 + 29) & 1) == 0)
        goto LABEL_59;
      sub_22EFC8E88(v15);
      v17 = *(uint64_t **)v16;
      v18 = *(unsigned int *)(v16 + 8);
      v19 = *(uint64_t **)v16;
      if ((_DWORD)v18)
      {
        v22 = 8 * v18;
        v19 = *(uint64_t **)v16;
        while (*(_WORD *)(*v19 + 32) != 407)
        {
          ++v19;
          v22 -= 8;
          if (!v22)
            goto LABEL_59;
        }
      }
      if (v19 == &v17[v18])
      {
LABEL_59:
        v20 = 0;
      }
      else
      {
        do
        {
          v21 = *v17++;
          v20 = v21;
        }
        while (*(_WORD *)(v21 + 32) != 407);
      }
      v23 = sub_22F3A7CDC(v20);
      if ((v23 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v23 == 2)
        {
          v24 = sub_22E5457C4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
          v25 = sub_22F10C2A4(v24);
          if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 >= 3)
            v26 = 0;
          else
            v26 = v25;
          goto LABEL_65;
        }
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16512);
        v33 = sub_22E5457C4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v35 = sub_22F10C2A4(v33);
        if ((*(_DWORD *)(v35 + 28) & 0x7Fu) - 35 >= 3)
          v36 = 0;
        else
          v36 = v35;
        v37 = sub_22EF5B848(v34, *(_QWORD *)(**(_QWORD **)(v36 + 168) + 8), 0);
        sub_22E53C678(a1, a2);
        v38 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v38 + 248))(&__p, v38, *(_QWORD *)(a1 + 8), v37, 1);
        v39 = llvm::air::AITagOnlyArgument::getImpl();
        v40 = *(_DWORD *)(a3 + 8);
        if (v40 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v40 = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = v39;
        ++*(_DWORD *)(a3 + 8);
        if (SHIBYTE(v84) < 0)
          operator delete(__p);
        v41 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v41 + 248))(&v88, v41, *(_QWORD *)(a1 + 8), v32, 1);
        v42 = 0;
        v43 = *(_QWORD *)(a2 + 40);
        v44 = "";
        if ((v43 & 7) == 0)
        {
          v45 = v43 & 0xFFFFFFFFFFFFFFF8;
          if (v45)
          {
            v46 = *(_DWORD **)(v45 + 16);
            v47 = *v46;
            v44 = (char *)(v46 + 4);
            v42 = v47;
          }
        }
        goto LABEL_79;
      }
    }
LABEL_4:
    sub_22E53C678(a1, a2);
    v6 = *(_QWORD *)(a2 + 48);
    v7 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&__p, v7, *(_QWORD *)(a1 + 8), v6, 1);
LABEL_5:
    Impl = llvm::air::AITagOnlyArgument::getImpl();
    goto LABEL_6;
  }
  if (sub_22E5430B8(a2)
    || sub_22E543118(a2)
    || sub_22E543178(a2)
    || sub_22E5431D8(a2)
    || sub_22E543238(a2)
    || sub_22E543298(a2)
    || sub_22E5432F8(a2)
    || sub_22E543358(a2)
    || sub_22E5433B8(a2)
    || sub_22E543418(a2)
    || sub_22E543478(a2)
    || sub_22E5434D8(a2)
    || sub_22E543538(a2))
  {
    goto LABEL_4;
  }
  if (sub_22E53742C(a2))
    return;
  if (sub_22E53748C(a2))
  {
    sub_22E53C678(a1, a2);
    v50 = *(_QWORD *)(a2 + 48);
    v51 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v51 + 248))(&__p, v51, *(_QWORD *)(a1 + 8), v50, 1);
    Impl = llvm::air::AIPosition::getImpl();
    goto LABEL_6;
  }
  if (sub_22E543598(a2))
    goto LABEL_4;
  if (sub_22E5374EC(a2))
    return;
  if (sub_22E5435F8(a2)
    || sub_22E53754C(a2)
    || sub_22E543658(a2)
    || sub_22E5436B8(a2)
    || sub_22E5375AC(a2)
    || sub_22E543718(a2))
  {
    goto LABEL_4;
  }
  if (sub_22E53B678(a2))
  {
    sub_22E53C678(a1, a2);
    sub_22E546FA4(a2);
    v52 = *(_QWORD *)(a2 + 48);
    v53 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v53 + 248))(&__p, v53, *(_QWORD *)(a1 + 8), v52, 1);
    Impl = llvm::air::AISampleMaskIn::getImpl();
LABEL_6:
    v9 = Impl;
    if (SHIBYTE(v84) < 0)
      operator delete(__p);
    goto LABEL_8;
  }
  if (sub_22E543778(a2) || sub_22E5437D8(a2) || sub_22E543838(a2) || sub_22E543898(a2))
    goto LABEL_4;
  if (sub_22E5438F8(a2))
  {
    __p = (void *)0x8000000400000002;
    v83 = 0;
    if ((sub_22E3B38EC(&__p, (_DWORD *)(a1 + 16)) & 1) == 0)
    {
      sub_22E53C678(a1, a2);
      v54 = *(_QWORD *)(a2 + 48);
      v55 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v55 + 248))(&__p, v55, *(_QWORD *)(a1 + 8), v54, 1);
      goto LABEL_5;
    }
    goto LABEL_119;
  }
  if (sub_22E543958(a2)
    || sub_22E5439B8(a2)
    || sub_22E543A18(a2)
    || sub_22E543A78(a2)
    || sub_22E543AD8(a2)
    || sub_22E543B38(a2)
    || sub_22E543B98(a2)
    || sub_22E543BF8(a2)
    || sub_22E543C58(a2))
  {
    goto LABEL_4;
  }
  if (sub_22E543CB8(a2))
  {
LABEL_119:
    v13 = sub_22E54CF08(a1, a2);
    goto LABEL_21;
  }
  if (sub_22E543D18(a2) || sub_22E543D78(a2))
    goto LABEL_4;
  if (!sub_22E543DD8(a2))
  {
    if (!sub_22E543E38(a2) && !sub_22F26E334(a2) && !sub_22E543E98(a2) && !sub_22E543EF8(a2))
      sub_22E543F58(a2);
    goto LABEL_4;
  }
  v56 = *(_QWORD *)(a1 + 824);
  if (!v56 || !sub_22EFC1D94(v56))
    goto LABEL_4;
  v57 = *(_QWORD *)(a1 + 824);
  if ((*(_BYTE *)(v57 + 29) & 1) == 0)
    goto LABEL_151;
  sub_22EFC8E88(v57);
  v59 = *(uint64_t **)v58;
  v60 = *(unsigned int *)(v58 + 8);
  v61 = *(uint64_t **)v58;
  if ((_DWORD)v60)
  {
    v64 = 8 * v60;
    v61 = *(uint64_t **)v58;
    while (*(_WORD *)(*v61 + 32) != 407)
    {
      ++v61;
      v64 -= 8;
      if (!v64)
        goto LABEL_151;
    }
  }
  if (v61 == &v59[v60])
  {
LABEL_151:
    v62 = 0;
  }
  else
  {
    do
    {
      v63 = *v59++;
      v62 = v63;
    }
    while (*(_WORD *)(v63 + 32) != 407);
  }
  v65 = sub_22F3A7CDC(v62);
  if ((v65 & 0xFF00000000) == 0)
    goto LABEL_4;
  if ((_DWORD)v65 == 2)
  {
    v66 = sub_22E5457C4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    v67 = sub_22F10C2A4(v66);
    if ((*(_DWORD *)(v67 + 28) & 0x7Fu) - 35 >= 3)
      v26 = 0;
    else
      v26 = v67;
LABEL_65:
    v27 = *(_QWORD *)(**(_QWORD **)(v26 + 168) + 8);
    sub_22E53C678(a1, a2);
    v28 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v28 + 248))(&__p, v28, *(_QWORD *)(a1 + 8), v27, 1);
    v29 = llvm::air::AITagOnlyArgument::getImpl();
    v30 = *(_DWORD *)(a3 + 8);
    if (v30 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v30 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v29;
    ++*(_DWORD *)(a3 + 8);
    if (SHIBYTE(v84) < 0)
    {
      v31 = __p;
LABEL_85:
      operator delete(v31);
      return;
    }
    return;
  }
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16512);
  v69 = sub_22E5457C4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v71 = sub_22F10C2A4(v69);
  if ((*(_DWORD *)(v71 + 28) & 0x7Fu) - 35 >= 3)
    v72 = 0;
  else
    v72 = v71;
  v73 = sub_22EF5B848(v70, *(_QWORD *)(**(_QWORD **)(v72 + 168) + 8), 0);
  sub_22E53C678(a1, a2);
  v74 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v74 + 248))(&__p, v74, *(_QWORD *)(a1 + 8), v73, 1);
  v75 = llvm::air::AITagOnlyArgument::getImpl();
  v76 = *(_DWORD *)(a3 + 8);
  if (v76 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v76 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v76) = v75;
  ++*(_DWORD *)(a3 + 8);
  if (SHIBYTE(v84) < 0)
    operator delete(__p);
  v77 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v77 + 248))(&v88, v77, *(_QWORD *)(a1 + 8), v68, 1);
  v42 = 0;
  v78 = *(_QWORD *)(a2 + 40);
  v44 = "";
  if ((v78 & 7) == 0)
  {
    v79 = v78 & 0xFFFFFFFFFFFFFFF8;
    if (v79)
    {
      v80 = *(_DWORD **)(v79 + 16);
      v81 = *v80;
      v44 = (char *)(v80 + 4);
      v42 = v81;
    }
  }
LABEL_79:
  v85 = 773;
  __p = v44;
  v83 = v42;
  v84 = ".size";
  llvm::Twine::str((llvm::Twine *)&__p);
  v48 = llvm::air::AITagOnlyArgument::getImpl();
  v49 = *(_DWORD *)(a3 + 8);
  if (v49 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v49 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v49) = v48;
  ++*(_DWORD *)(a3 + 8);
  if (v87 < 0)
    operator delete(v86);
  if (v89 < 0)
  {
    v31 = v88;
    goto LABEL_85;
  }
}

uint64_t sub_22E540CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p;
  char v9;
  void *v10;
  char v11;

  sub_22E53C678(a1, a2);
  sub_22E53CECC(&v10, a1, a2);
  sub_22F26ECC8(a1, a2);
  sub_22F26ED80(a1, a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(&__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AIFragmentInput::getImpl();
  if (v9 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
  return Impl;
}

uint64_t sub_22E540E2C(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t Impl;
  void *__p;
  uint64_t v18;
  char v19;

  sub_22EFC8E88(a2);
  v5 = *v4;
  v6 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v6 && *(_WORD *)(*v5 + 32) != 374)
  {
    v7 = 8 * v6 - 8;
    v8 = *v4;
    do
    {
      v9 = v8[1];
      ++v8;
      v7 -= 8;
    }
    while (*(_WORD *)(v9 + 32) != 374);
  }
  do
  {
    v11 = *v5++;
    v10 = v11;
  }
  while (*(_WORD *)(v11 + 32) != 374);
  sub_22F007D7C(*(unsigned __int8 **)(v10 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&__p);
  if (v18 >= 0x41 && __p != 0)
    MEMORY[0x2348A0E84]();
  __p = (void *)0x8000000200000002;
  v18 = 0;
  sub_22E3B38EC(&__p, (_DWORD *)(a1 + 16));
  sub_22E53C678(a1, a2);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 248))(&__p, v14, *(_QWORD *)(a1 + 8), v13, 1);
  Impl = llvm::air::AIStageIn::getImpl();
  if (v19 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E541020(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t Impl;
  void *__p;
  uint64_t v18;
  char v19;

  sub_22EFC8E88(a2);
  v5 = *v4;
  v6 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v6 && *(_WORD *)(*v5 + 32) != 374)
  {
    v7 = 8 * v6 - 8;
    v8 = *v4;
    do
    {
      v9 = v8[1];
      ++v8;
      v7 -= 8;
    }
    while (*(_WORD *)(v9 + 32) != 374);
  }
  do
  {
    v11 = *v5++;
    v10 = v11;
  }
  while (*(_WORD *)(v11 + 32) != 374);
  sub_22F007D7C(*(unsigned __int8 **)(v10 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&__p);
  if (v18 >= 0x41 && __p != 0)
    MEMORY[0x2348A0E84]();
  __p = (void *)0x8000000200000002;
  v18 = 0;
  sub_22E3B38EC(&__p, (_DWORD *)(a1 + 16));
  sub_22E53C678(a1, a2);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 248))(&__p, v14, *(_QWORD *)(a1 + 8), v13, 1);
  Impl = llvm::air::AIPatchInput::getImpl();
  if (v19 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E541214(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t Impl;
  void *__p;
  uint64_t v18;
  char v19;

  sub_22EFC8E88(a2);
  v5 = *v4;
  v6 = *((unsigned int *)v4 + 2);
  if ((_DWORD)v6 && *(_WORD *)(*v5 + 32) != 374)
  {
    v7 = 8 * v6 - 8;
    v8 = *v4;
    do
    {
      v9 = v8[1];
      ++v8;
      v7 -= 8;
    }
    while (*(_WORD *)(v9 + 32) != 374);
  }
  do
  {
    v11 = *v5++;
    v10 = v11;
  }
  while (*(_WORD *)(v11 + 32) != 374);
  sub_22F007D7C(*(unsigned __int8 **)(v10 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&__p);
  if (v18 >= 0x41 && __p != 0)
    MEMORY[0x2348A0E84]();
  __p = (void *)0x8000000200000002;
  v18 = 0;
  sub_22E3B38EC(&__p, (_DWORD *)(a1 + 16));
  sub_22E53C678(a1, a2);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 248))(&__p, v14, *(_QWORD *)(a1 + 8), v13, 1);
  Impl = llvm::air::AIVertexInput::getImpl();
  if (v19 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E541408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Impl;
  void *__p;
  char v24;

  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v5 = *(uint64_t **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    v7 = *(uint64_t **)v4;
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      v7 = *(uint64_t **)v4;
      while (*(_WORD *)(*v7 + 32) != 439)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_10;
      }
    }
    if (v7 != &v5[v6])
    {
      do
      {
        v10 = *v5++;
        v9 = v10;
      }
      while (*(_WORD *)(v10 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v9 + 40));
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_19;
  sub_22EFC8E88(a2);
  v12 = *(uint64_t **)v11;
  v13 = *(unsigned int *)(v11 + 8);
  v14 = *(uint64_t **)v11;
  if ((_DWORD)v13)
  {
    v15 = 8 * v13;
    v14 = *(uint64_t **)v11;
    while (*(_WORD *)(*v14 + 32) != 385)
    {
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_19;
    }
  }
  if (v14 == &v12[v13])
  {
LABEL_19:
    v18 = 0;
  }
  else
  {
    do
    {
      v17 = *v12++;
      v16 = v17;
    }
    while (*(_WORD *)(v17 + 32) != 385);
    v18 = *(_QWORD *)(v16 + 40);
  }
  sub_22E53C678(a1, a2);
  sub_22E533554(a1, v18);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v20 + 248))(&__p, v20, *(_QWORD *)(a1 + 8), v19, 1);
  Impl = llvm::air::AIRenderTarget::getImpl();
  if (v24 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E541630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;

  v7 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v7 && (*(_DWORD *)(v7 + 28) & 0x7Fu) - 35 >= 3)
    v7 = 0;
  result = sub_22EFC3B90(v7);
  if (result)
  {
    v9 = result;
LABEL_6:
    v10 = (uint64_t *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
    v11 = *v10;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
      && (v12 = *(_QWORD *)((sub_22F10ACF8(*v10) & 0xFFFFFFFFFFFFFFF0) + 8), (v12 & 8) != 0)
      && (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
      && (v13 = *(_QWORD *)((sub_22F10ACF8(v11) & 0xFFFFFFFFFFFFFFF0) + 8), (v13 & 8) != 0)
      && (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    {
      v14 = sub_22F10ACF8(v11);
      sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8));
      if ((v15 & 1) != 0)
        goto LABEL_128;
    }
    sub_22E5429D8(*v10);
    if ((v16 & 1) != 0)
      goto LABEL_128;
    v17 = sub_22E5457C4(*v10);
    if (v17)
    {
      v18 = sub_22F10C2A4(v17);
      v19 = (*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v18;
      if ((v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v19 + 168) + 8) & 0xFFFFFFFFFFFFFFF0),
            *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
        && (v21 = *(_QWORD *)((sub_22F10ACF8(v20) & 0xFFFFFFFFFFFFFFF0) + 8), (v21 & 8) != 0)
        && (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
        && (v22 = *(_QWORD *)((sub_22F10ACF8(v20) & 0xFFFFFFFFFFFFFFF0) + 8), (v22 & 8) != 0)
        && (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
      {
        v23 = sub_22F10ACF8(v20);
        sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8));
        if ((v24 & 1) != 0)
          goto LABEL_128;
      }
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
    {
      v25 = *(_QWORD *)((sub_22F10ACF8(*v10) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v25 & 8) != 0 && (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6000)
        goto LABEL_128;
    }
    v26 = sub_22E5453EC(*v10);
    if (v26)
    {
      v27 = sub_22F10C2A4(v26);
      v28 = (*(_DWORD *)(v27 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v27;
      v29 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v28 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
      {
        v30 = *(_QWORD *)((sub_22F10ACF8(v29) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v30 & 8) != 0 && (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6000)
          goto LABEL_128;
      }
    }
    v31 = sub_22E5457C4(*v10);
    if (v31
      && ((v32 = sub_22F10C2A4(v31), (*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3) ? (v33 = 0) : (v33 = v32),
          (v34 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v33 + 168) + 8) & 0xFFFFFFFFFFFFFFF0),
           *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
       && (v35 = *(_QWORD *)((sub_22F10ACF8(v34) & 0xFFFFFFFFFFFFFFF0) + 8), (v35 & 8) != 0)
       && (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6000))
    {
LABEL_128:
      v85 = *(_QWORD *)(a3 + 8);
      v111 = v9;
      v112 = 0;
      v86 = sub_22F251EFC((uint64_t *)v85, &v111, &v112);
      v87 = v112;
      if (!v86)
        v87 = *(_QWORD *)v85 + 24 * *(unsigned int *)(v85 + 16);
      result = sub_22E54B858(a1, v9, *(_QWORD *)(v87 + 8), *(_QWORD *)(v87 + 16));
    }
    else
    {
      v36 = *v10;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
        && (v37 = *(_QWORD *)((sub_22F10ACF8(*v10) & 0xFFFFFFFFFFFFFFF0) + 8), (v37 & 8) != 0)
        && (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
        && (v38 = *(_QWORD *)((sub_22F10ACF8(v36) & 0xFFFFFFFFFFFFFFF0) + 8), (v38 & 8) != 0)
        && (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
      {
        v39 = sub_22F10ACF8(v36);
        sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 8));
        if (!v40)
          goto LABEL_131;
      }
      if ((sub_22E542AD8(*v10) & 1) != 0)
        goto LABEL_131;
      v41 = sub_22E5457C4(*v10);
      if (!v41)
        goto LABEL_160;
      v42 = sub_22F10C2A4(v41);
      v43 = (*(_DWORD *)(v42 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v42;
      v44 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v43 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1
        || (v45 = *(_QWORD *)((sub_22F10ACF8(v44) & 0xFFFFFFFFFFFFFFF0) + 8), (v45 & 8) == 0)
        || (*(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x5800)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1)
          goto LABEL_160;
        v46 = *(_QWORD *)((sub_22F10ACF8(v44) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v46 & 8) == 0 || (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
          goto LABEL_160;
      }
      v47 = sub_22F10ACF8(v44);
      sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0) + 8));
      if ((v48 & 1) == 0)
      {
LABEL_131:
        v88 = *(_QWORD *)(a3 + 8);
        v111 = v9;
        v112 = 0;
        v89 = sub_22F251EFC((uint64_t *)v88, &v111, &v112);
        v90 = v112;
        if (!v89)
          v90 = *(_QWORD *)v88 + 24 * *(unsigned int *)(v88 + 16);
        result = sub_22E54BD88(a1, v9, *(_QWORD *)(v90 + 8), *(_QWORD *)(v90 + 16), *(_QWORD *)(v90 + 8), *(_QWORD *)(v90 + 16));
      }
      else
      {
LABEL_160:
        if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
          || (v49 = sub_22E5453EC(*v10)) != 0
          && ((v50 = sub_22F10C2A4(v49), (*(_DWORD *)(v50 + 28) & 0x7Fu) - 35 >= 3) ? (v51 = 0) : (v51 = v50),
              (sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v51 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                   + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          || (v52 = sub_22E5457C4(*v10)) != 0
          && ((v53 = sub_22F10C2A4(v52), (*(_DWORD *)(v53 + 28) & 0x7Fu) - 35 >= 3) ? (v54 = 0) : (v54 = v53),
              sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v54 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
          v91 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v92 = sub_22F251EFC((uint64_t *)v91, &v111, &v112);
          v93 = v112;
          if (!v92)
            v93 = *(_QWORD *)v91 + 24 * *(unsigned int *)(v91 + 16);
          result = sub_22E535814(a1, v9, *(_QWORD *)(v93 + 8), *(_QWORD *)(v93 + 16));
        }
        else if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0
               || (v55 = sub_22E5453EC(*v10)) != 0
               && ((v56 = sub_22F10C2A4(v55), (*(_DWORD *)(v56 + 28) & 0x7Fu) - 35 >= 3) ? (v57 = 0) : (v57 = v56),
                   (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v57 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)|| (v58 = sub_22E5457C4(*v10)) != 0&& ((v59 = sub_22F10C2A4(v58), (*(_DWORD *)(v59 + 28) & 0x7Fu) - 35 >= 3) ? (v60 = 0) : (v60 = v59), sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v60 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)))
        {
          v94 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v95 = sub_22F251EFC((uint64_t *)v94, &v111, &v112);
          v96 = v112;
          if (!v95)
            v96 = *(_QWORD *)v94 + 24 * *(unsigned int *)(v94 + 16);
          result = sub_22E535B6C(a1, v9, *(_QWORD *)(v96 + 8), *(_QWORD *)(v96 + 16));
        }
        else if ((sub_22F10CDF4(*v10) & 1) != 0
               || (v61 = sub_22E5453EC(*v10)) != 0
               && ((v62 = sub_22F10C2A4(v61), (*(_DWORD *)(v62 + 28) & 0x7Fu) - 35 >= 3) ? (v63 = 0) : (v63 = v62),
                   (sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v63 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
               || (v64 = sub_22E5457C4(*v10)) != 0
               && ((v65 = sub_22F10C2A4(v64), (*(_DWORD *)(v65 + 28) & 0x7Fu) - 35 >= 3) ? (v66 = 0) : (v66 = v65),
                   sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v66 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
          v97 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v98 = sub_22F251EFC((uint64_t *)v97, &v111, &v112);
          v99 = v112;
          if (!v98)
            v99 = *(_QWORD *)v97 + 24 * *(unsigned int *)(v97 + 16);
          result = sub_22E534BE8(a1, v9, *(_QWORD *)(v99 + 8), *(_QWORD *)(v99 + 16));
        }
        else if ((sub_22F10C510(*v10) & 1) != 0
               || (v67 = sub_22E5453EC(*v10)) != 0
               && ((v68 = sub_22F10C2A4(v67), (*(_DWORD *)(v68 + 28) & 0x7Fu) - 35 >= 3) ? (v69 = 0) : (v69 = v68),
                   (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v69 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
               || (v70 = sub_22E5457C4(*v10)) != 0
               && ((v71 = sub_22F10C2A4(v70), (*(_DWORD *)(v71 + 28) & 0x7Fu) - 35 >= 3) ? (v72 = 0) : (v72 = v71),
                   sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v72 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
          v100 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v101 = sub_22F251EFC((uint64_t *)v100, &v111, &v112);
          v102 = v112;
          if (!v101)
            v102 = *(_QWORD *)v100 + 24 * *(unsigned int *)(v100 + 16);
          result = sub_22E534F04(a1, v9, *(_QWORD *)(v102 + 8), *(_QWORD *)(v102 + 16));
        }
        else if ((sub_22F10B9F8(*v10) & 1) != 0
               || (v73 = sub_22E5453EC(*v10)) != 0
               && ((v74 = sub_22F10C2A4(v73), (*(_DWORD *)(v74 + 28) & 0x7Fu) - 35 >= 3) ? (v75 = 0) : (v75 = v74),
                   (sub_22F10B9F8(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v75 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
               || (v76 = sub_22E5457C4(*v10)) != 0
               && ((v77 = sub_22F10C2A4(v76), (*(_DWORD *)(v77 + 28) & 0x7Fu) - 35 >= 3) ? (v78 = 0) : (v78 = v77),
                   sub_22F10B9F8(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v78 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
          v103 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v104 = sub_22F251EFC((uint64_t *)v103, &v111, &v112);
          v105 = v112;
          if (!v104)
            v105 = *(_QWORD *)v103 + 24 * *(unsigned int *)(v103 + 16);
          result = sub_22E53523C(a1, v9, *(_QWORD *)(v105 + 8), *(_QWORD *)(v105 + 16));
        }
        else
        {
          if ((sub_22F10BAB0(*v10) & 1) == 0)
          {
            v79 = sub_22E5453EC(*v10);
            if (!v79
              || ((v80 = sub_22F10C2A4(v79), (*(_DWORD *)(v80 + 28) & 0x7Fu) - 35 >= 3) ? (v81 = 0) : (v81 = v80),
                  (sub_22F10BAB0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v81 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
            {
              v82 = sub_22E5457C4(*v10);
              if (!v82
                || ((v83 = sub_22F10C2A4(v82), (*(_DWORD *)(v83 + 28) & 0x7Fu) - 35 >= 3) ? (v84 = 0) : (v84 = v83),
                    !sub_22F10BAB0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v84 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                result = sub_22E541630(a1, *(_QWORD *)(v9 + 48), a3, a4);
                goto LABEL_155;
              }
            }
          }
          v106 = *(_QWORD *)(a3 + 8);
          v111 = v9;
          v112 = 0;
          v107 = sub_22F251EFC((uint64_t *)v106, &v111, &v112);
          v108 = v112;
          if (!v107)
            v108 = *(_QWORD *)v106 + 24 * *(unsigned int *)(v106 + 16);
          result = sub_22E535528(a1, v9, *(_QWORD *)(v108 + 8), *(_QWORD *)(v108 + 16));
        }
      }
    }
    v109 = result;
    v110 = *(unsigned int *)(a4 + 8);
    if (v110 >= *(unsigned int *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v110 = *(unsigned int *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v110) = v109;
    ++*(_DWORD *)(a4 + 8);
LABEL_155:
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_22E5421C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;

  v5 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
    v5 = 0;
  result = sub_22EFC3B90(v5);
  if (result)
  {
    v7 = result;
LABEL_6:
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0);
    v9 = sub_22E3E4B64(v8);
    if (v9 && (*(_DWORD *)(v9 + 20) - 2) <= 2 && (*(_DWORD *)(v9 + 16) & 0x780000) != 0x80000)
      v8 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
      v11 = *(_DWORD *)(v10 + 16) == 11;
    else
      v11 = 0;
    if (!v11
      || (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FFu) - 173 <= 0x26
        ? (v12 = ((1 << ((*(_DWORD *)(v10 + 16) >> 19) + 83)) & 0x6000000303) == 0)
        : (v12 = 1),
          v12))
    {
      result = sub_22E5421C4(a1, *(_QWORD *)(v7 + 48), a3);
    }
    else
    {
      result = sub_22E541408(a1, v7);
      v13 = result;
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
      ++*(_DWORD *)(a3 + 8);
    }
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v7)
        break;
      if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_22E542348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Impl;
  void *__p;
  char v12;
  void *v13;
  char v14;

  v4 = sub_22F26EED0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_22F10C2A4(v4);
  if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
    v6 = 0;
  else
    v6 = v5;
  v7 = *(_QWORD *)(**(_QWORD **)(v6 + 168) + 8);
  sub_22F409390(v4, 0);
  sub_22E53C678(a1, a2);
  sub_22E53CECC(&v13, a1, a2);
  v8 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 248))(&__p, v8, *(_QWORD *)(a1 + 8), v7, 1);
  Impl = llvm::air::AIFragmentInput::getImpl();
  if (v12 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  return Impl;
}

uint64_t sub_22E5424FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Impl;
  void *v14[2];
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v3 = sub_22F26EE38(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_22F10C2A4(v3);
  if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 >= 3)
    v5 = 0;
  else
    v5 = v4;
  sub_22F26CE18(a1, *(_QWORD *)(**(_QWORD **)(v5 + 168) + 8));
  llvm::air::AIControlPointFunction::getImpl();
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  v6 = sub_22F10C2A4(v3);
  if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 >= 3)
    v7 = 0;
  else
    v7 = v6;
  v8 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v7 + 168) + 8) & 0xFFFFFFFFFFFFFFF0));
  v9 = 0;
  if (v8)
  {
    if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3)
      v9 = 0;
    else
      v9 = v8;
  }
  v10 = sub_22EFC3B90(v9);
  if (v10)
  {
    v11 = v10;
LABEL_13:
    sub_22E545480((uint64_t)a1, v11, (uint64_t)v14);
    while (1)
    {
      v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v11)
        break;
      if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_13;
    }
  }
  Impl = llvm::air::AIControlPointInput::getImpl();
  if (v14[0] != v15)
    free(v14[0]);
  return Impl;
}

void sub_22E5426B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_22F271194((uint64_t)&v21, (uint64_t)a1, a2);
  v6 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 >= 3)
    v6 = 0;
  v7 = sub_22EFC3B90(v6);
  if (v7)
  {
    v8 = v7;
LABEL_6:
    v9 = *(_QWORD *)(v8 + 48);
    if (sub_22E54299C(v8))
    {
      sub_22E53D84C((uint64_t)a1, v8, a3);
      goto LABEL_15;
    }
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F10B8E0(*v10, "interpolant", 11, 1, 0))
    {
      v11 = sub_22E542348((uint64_t)a1, v8);
    }
    else if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0), "patch_control_point", 19, 1, 3))
    {
      v11 = sub_22E5424FC(a1, *(_QWORD *)(v8 + 48));
    }
    else
    {
      v14 = *v10;
      v15 = sub_22E3E4B64(v14);
      if (v15 && (*(_BYTE *)(v15 + 18) & 0x78) == 0)
        v14 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v16)
        v17 = *(_DWORD *)(v16 + 16) == 11;
      else
        v17 = 0;
      if (!v17
        || (((*(_DWORD *)(v16 + 16) >> 19) & 0x1FFu) - 166 <= 0x2D
          ? (v18 = ((1 << ((*(_DWORD *)(v16 + 16) >> 19) + 90)) & 0x30000001B185) == 0)
          : (v18 = 1),
            v18))
      {
        sub_22E5426B0(a1, v8, a3);
        goto LABEL_15;
      }
      if (sub_22E88FFC4(a1[103]))
      {
        v11 = sub_22E540CAC((uint64_t)a1, v8);
      }
      else if (sub_22EA1DB60(a1[103]))
      {
        v11 = sub_22E540E2C((uint64_t)a1, v8);
      }
      else
      {
        v19 = a1[103];
        if (sub_22E6A2F54(v19) && sub_22EAA34D4(v19))
        {
          v11 = sub_22E541020((uint64_t)a1, v8);
        }
        else
        {
          sub_22F3AC76C(a1[103]);
          v11 = sub_22E541214((uint64_t)a1, v8);
        }
      }
    }
    v12 = v11;
    v13 = *(unsigned int *)(a3 + 8);
    if (v13 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v12;
    ++*(_DWORD *)(a3 + 8);
LABEL_15:
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        break;
      if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_6;
    }
  }
  v20 = v21;
  if (v23)
  {
    if (*(_BYTE *)(v21 + 840))
    {
      *(_QWORD *)(v21 + 832) = v22;
    }
    else
    {
      *(_QWORD *)(v21 + 832) = v22;
      *(_BYTE *)(v20 + 840) = 1;
    }
  }
  else if (*(_BYTE *)(v21 + 840))
  {
    *(_BYTE *)(v21 + 840) = 0;
  }
}

BOOL sub_22E54299C(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E54E7E8(*(uint64_t **)v2, (uint64_t *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8)));
}

void sub_22E5429D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_22E5453EC(a1);
  if (v1)
  {
    v2 = sub_22F10C2A4(v1);
    v3 = (*(_DWORD *)(v2 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v2;
    if ((v4 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v3 + 168) + 8) & 0xFFFFFFFFFFFFFFF0),
          *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
      && (v5 = *(_QWORD *)((sub_22F10ACF8(v4) & 0xFFFFFFFFFFFFFFF0) + 8), (v5 & 8) != 0)
      && (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
      && (v6 = *(_QWORD *)((sub_22F10ACF8(v4) & 0xFFFFFFFFFFFFFFF0) + 8), (v6 & 8) != 0)
      && (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    {
      v7 = sub_22F10ACF8(v4);
      sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8));
    }
  }
}

uint64_t sub_22E542AD8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = sub_22E5453EC(a1);
  if (result)
  {
    v2 = sub_22F10C2A4(result);
    if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 35 >= 3)
      v3 = 0;
    else
      v3 = v2;
    v4 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v3 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
      && (v5 = *(_QWORD *)((sub_22F10ACF8(v4) & 0xFFFFFFFFFFFFFFF0) + 8), (v5 & 8) != 0)
      && (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
      && (v6 = *(_QWORD *)((sub_22F10ACF8(v4) & 0xFFFFFFFFFFFFFFF0) + 8), (v6 & 8) != 0)
      && (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    {
      v7 = sub_22F10ACF8(v4);
      sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8));
      return v8 ^ 1u;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_22E542BD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 371)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542C38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 372)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 376)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 377)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 387)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 389)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542E18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 390)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542E78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 391)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542ED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 392)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 397)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 399)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E542FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 400)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 405)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5430B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 406)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 410)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 412)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5431D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 416)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 417)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543298(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 418)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5432F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 421)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 422)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5433B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 423)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543418(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 425)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 427)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5434D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 428)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 429)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543598(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 432)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5435F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 435)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 437)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5436B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 438)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 443)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 441)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5437D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 442)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543838(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 450)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 451)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5438F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 454)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 455)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E5439B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 456)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543A18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 457)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 458)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 459)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 460)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543B98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 461)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 462)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543C58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 463)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 464)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 465)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543D78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 466)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543DD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 468)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 470)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 472)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 473)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22E543F58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 474)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E543FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Impl;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  void *v93;
  char v94;

  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
     && (v10 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8),
         (v10 & 8) != 0)
     && (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
     || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
     && (v11 = *(_QWORD *)((sub_22F10ACF8(v9) & 0xFFFFFFFFFFFFFFF0) + 8), (v11 & 8) != 0)
     && (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    && (v12 = sub_22F10ACF8(v9),
        sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8)),
        (v13 & 1) != 0)
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 122) & 4) != 0
    && getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB")
    && (sub_22E5429D8(*v8), v14))
  {
    v15 = sub_22E5453EC(*v8);
    if (v15)
      sub_22F409218(v15);
    v16 = (uint64_t *)(sub_22F10BBF4(*v8) & 0xFFFFFFFFFFFFFFF0);
    v17 = sub_22F10ACF8(*v16);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1
      || (v19 = *(_QWORD *)((sub_22F10ACF8(*v16) & 0xFFFFFFFFFFFFFFF0) + 8), (v19 & 8) == 0)
      || (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
    {
      if (sub_22F10AFE4(v17, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
      {
        for (i = v17; ; i = *(_QWORD *)(v37 + 32))
        {
          v35 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
          if (v35)
            v36 = (*(_DWORD *)(v35 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
          else
            v36 = 0;
          if (v36)
          {
            v37 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
                 || (v37 = sub_22F10CF48(v35)) == 0)
          {
            v42 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFF0);
            if ((sub_22F1110EC(*v42, 0) & 1) == 0)
            {
              v52 = sub_22F10C2A4(*v42);
              if (v52)
              {
                if ((*(_DWORD *)(v52 + 28) & 0x7Fu) - 35 <= 2)
                  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v52 + 104) + 96), *(_QWORD *)(v52 + 104));
              }
            }
            break;
          }
        }
      }
    }
    if (!sub_22E547064(a1, v17, 0, v18))
      sub_22E547C80(a1, v17, 0, v43);
    sub_22E5482FC(a1, (uint64_t)v16);
    sub_22E53C558(a1, v17);
    sub_22E53C5C0(a1, v17);
    v53 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v53 + 248))(&v93, v53, *(_QWORD *)(a1 + 8), a2, 1);
    goto LABEL_94;
  }
  v20 = *v8;
  if ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
     && (v21 = *(_QWORD *)((sub_22F10ACF8(*v8) & 0xFFFFFFFFFFFFFFF0) + 8), (v21 & 8) != 0)
     && (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
     || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1
     && (v22 = *(_QWORD *)((sub_22F10ACF8(v20) & 0xFFFFFFFFFFFFFFF0) + 8), (v22 & 8) != 0)
     && (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    && (v23 = sub_22F10ACF8(v20), sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8)), !v24)
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 122) & 4) != 0
    && getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB")
    && sub_22E542AD8(*v8))
  {
    v25 = sub_22E5453EC(*v8);
    if (v25)
      sub_22F409218(v25);
    v26 = (uint64_t *)(sub_22F10BBF4(*v8) & 0xFFFFFFFFFFFFFFF0);
    v27 = sub_22F10ACF8(*v26);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1
      || (v28 = *(_QWORD *)((sub_22F10ACF8(*v26) & 0xFFFFFFFFFFFFFFF0) + 8), (v28 & 8) == 0)
      || (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
    {
      if (sub_22F10AFE4(v27, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
      {
        for (j = v27; ; j = *(_QWORD *)(v41 + 32))
        {
          v39 = *(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0);
          if (v39)
            v40 = (*(_DWORD *)(v39 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
          else
            v40 = 0;
          if (v40)
          {
            v41 = *(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
                 || (v41 = sub_22F10CF48(v39)) == 0)
          {
            v51 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFF0);
            if ((sub_22F1110EC(*v51, 0) & 1) == 0)
            {
              v58 = sub_22F10C2A4(*v51);
              if (v58)
              {
                if ((*(_DWORD *)(v58 + 28) & 0x7Fu) - 35 <= 2)
                  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v58 + 104) + 96), *(_QWORD *)(v58 + 104));
              }
            }
            break;
          }
        }
      }
    }
    if (!sub_22E547064(a1, v27, a3, a4))
      sub_22E547C80(a1, v27, a3, a4);
    sub_22E5482FC(a1, (uint64_t)v26);
    sub_22E53C558(a1, v27);
    sub_22E53C5C0(a1, v27);
    v59 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v59 + 248))(&v93, v59, *(_QWORD *)(a1 + 8), a2, 1);
    goto LABEL_94;
  }
  if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
    || (v29 = sub_22E5453EC(*v8)) != 0
    && ((v30 = sub_22F10C2A4(v29), (*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 >= 3) ? (v31 = 0) : (v31 = v30),
        sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v31 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0))))
  {
    v32 = sub_22E5453EC(*v8);
    if (v32)
    {
      v65 = v32;
      v66 = sub_22F10C2A4(v32);
      if ((*(_DWORD *)(v66 + 28) & 0x7Fu) - 35 >= 3)
        v67 = 0;
      else
        v67 = v66;
      v68 = *(_QWORD *)(**(_QWORD **)(v67 + 168) + 8);
      sub_22F409218(v65);
      v8 = (uint64_t *)(v68 & 0xFFFFFFFFFFFFFFF0);
    }
    v33 = sub_22E53C624(*v8);
    sub_22F10C9BC(v33);
    v49 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v49 + 248))(&v93, v49, *(_QWORD *)(a1 + 8), a2, 1);
    Impl = llvm::air::AITexture::getImpl();
    goto LABEL_95;
  }
  if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0
    || (v44 = sub_22E5453EC(*v8)) != 0
    && ((v45 = sub_22F10C2A4(v44), (*(_DWORD *)(v45 + 28) & 0x7Fu) - 35 >= 3) ? (v46 = 0) : (v46 = v45),
        sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v46 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)))
  {
    v47 = sub_22E5453EC(*v8);
    if (v47)
      sub_22F409218(v47);
    v48 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v48 + 248))(&v93, v48, *(_QWORD *)(a1 + 8), a2, 1);
    Impl = llvm::air::AISampler::getImpl();
    goto LABEL_95;
  }
  if ((sub_22F10CDF4(*v8) & 1) != 0
    || (v54 = sub_22E5453EC(*v8)) != 0
    && ((v55 = sub_22F10C2A4(v54), (*(_DWORD *)(v55 + 28) & 0x7Fu) - 35 >= 3) ? (v56 = 0) : (v56 = v55),
        sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v56 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
  {
    v57 = sub_22E5453EC(*v8);
    if (!v57)
      goto LABEL_117;
    goto LABEL_146;
  }
  if ((sub_22F10C510(*v8) & 1) != 0
    || (v62 = sub_22E5453EC(*v8)) != 0
    && ((v63 = sub_22F10C2A4(v62), (*(_DWORD *)(v63 + 28) & 0x7Fu) - 35 >= 3) ? (v64 = 0) : (v64 = v63),
        sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v64 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
  {
    v57 = sub_22E5453EC(*v8);
    if (!v57)
      goto LABEL_117;
    goto LABEL_146;
  }
  if ((sub_22F10B9F8(*v8) & 1) != 0
    || (v69 = sub_22E5453EC(*v8)) != 0
    && ((v70 = sub_22F10C2A4(v69), (*(_DWORD *)(v70 + 28) & 0x7Fu) - 35 >= 3) ? (v71 = 0) : (v71 = v70),
        sub_22F10B9F8(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v71 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
  {
    v57 = sub_22E5453EC(*v8);
    if (!v57)
    {
LABEL_117:
      v72 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v72 + 248))(&v93, v72, *(_QWORD *)(a1 + 8), a2, 1);
LABEL_94:
      Impl = llvm::air::AIBuffer::getImpl();
      goto LABEL_95;
    }
LABEL_146:
    sub_22F409218(v57);
    goto LABEL_117;
  }
  if ((sub_22F10BAB0(*v8) & 1) != 0
    || (v73 = sub_22E5453EC(*v8)) != 0
    && ((v74 = sub_22F10C2A4(v73), (*(_DWORD *)(v74 + 28) & 0x7Fu) - 35 >= 3) ? (v75 = 0) : (v75 = v74),
        sub_22F10BAB0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v75 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
  {
    v57 = sub_22E5453EC(*v8);
    if (!v57)
      goto LABEL_117;
    goto LABEL_146;
  }
  if ((sub_22F10B8E0(*v8, "command_buffer", 14, 0, 0) & 1) != 0
    || (v76 = sub_22E5453EC(*v8)) != 0
    && ((v77 = sub_22F10C2A4(v76), (*(_DWORD *)(v77 + 28) & 0x7Fu) - 35 >= 3) ? (v78 = 0) : (v78 = v77),
        sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v78 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "command_buffer", 14, 0, 0)))
  {
    v79 = sub_22E5453EC(*v8);
    if (v79)
      sub_22F409218(v79);
    v80 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v80 + 248))(&v93, v80, *(_QWORD *)(a1 + 8), a2, 1);
    Impl = llvm::air::AICommandBuffer::getImpl();
    goto LABEL_95;
  }
  if ((sub_22F10B8E0(*v8, "render_pipeline_state", 21, 0, 0) & 1) != 0
    || (v81 = sub_22E5453EC(*v8)) != 0
    && ((v82 = sub_22F10C2A4(v81), (*(_DWORD *)(v82 + 28) & 0x7Fu) - 35 >= 3) ? (v83 = 0) : (v83 = v82),
        sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v83 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "render_pipeline_state", 21, 0, 0)))
  {
    v84 = sub_22E5453EC(*v8);
    if (v84)
      sub_22F409218(v84);
LABEL_155:
    v89 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v89 + 248))(&v93, v89, *(_QWORD *)(a1 + 8), a2, 1);
    Impl = llvm::air::AIPipelineState::getImpl();
    goto LABEL_95;
  }
  if ((sub_22F10B8E0(*v8, "compute_pipeline_state", 22, 0, 0) & 1) != 0
    || (v85 = sub_22E5453EC(*v8)) != 0
    && ((v86 = sub_22F10C2A4(v85), (*(_DWORD *)(v86 + 28) & 0x7Fu) - 35 >= 3) ? (v87 = 0) : (v87 = v86),
        sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v87 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "compute_pipeline_state", 22, 0, 0)))
  {
    v88 = sub_22E5453EC(*v8);
    if (v88)
      sub_22F409218(v88);
    goto LABEL_155;
  }
  v90 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v91 = *(unsigned __int8 *)(v90 + 16);
  if ((v91 > 0x38 || ((1 << v91) & 0x180000000000800) == 0) && (sub_22F10B8E0(v90, "matrix", 6, 1, 0) & 1) == 0)
    sub_22F10C8DC(*v8);
  v92 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v92 + 248))(&v93, v92, *(_QWORD *)(a1 + 8), a2, 1);
  Impl = llvm::air::AIIndirectConstant::getImpl();
LABEL_95:
  v60 = Impl;
  if (v94 < 0)
    operator delete(v93);
  return v60;
}

void sub_22E545218(std::string *this, unint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  std::string *v27;
  std::string::size_type v28;
  std::string v29;

  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v5 == 64)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    v6 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v6 == 0)
    {
      v12 = 0;
      v11 = "";
    }
    else
    {
      v10 = *(_DWORD **)(v6 + 16);
      v13 = *v10;
      v11 = (const std::string::value_type *)(v10 + 4);
      v12 = v13;
    }
    std::string::append(this, v11, v12);
    v14 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (v14)
    {
      if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 <= 2)
        std::string::append(this, ".coerce");
    }
  }
  else if (a2 && (v5 - 52) >= 0xFFFFFFFD)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    v8 = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a3 + 40) & 7) != 0 || v8 == 0)
    {
      v17 = 0;
      v16 = "";
    }
    else
    {
      v15 = *(_DWORD **)(v8 + 16);
      v18 = *v15;
      v16 = (const std::string::value_type *)(v15 + 4);
      v17 = v18;
    }
    std::string::append(this, v16, v17);
    std::string::append(this, ".coerce");
    v19 = *(_QWORD *)(a2 + 16);
    v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0)
      v20 = *(_QWORD *)v20;
    v21 = (*(_WORD *)(v20 + 8) & 0x7E) - 34;
    if (v20)
      v22 = v20 - 64;
    else
      v22 = 0;
    if (v21 >= 4)
      v23 = 0;
    else
      v23 = v22;
    v24 = sub_22EFC3B90(v23);
    if (v24)
    {
      v25 = 0;
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v24)
          break;
        if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 49 < 3)
          ++v25;
      }
      if (v25)
      {
        v26 = sub_22EFC306C(a2);
        std::to_string(&v29, v26);
        v27 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v29
            : (std::string *)v29.__r_.__value_.__r.__words[0];
        v28 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? *((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x7F
            : v29.__r_.__value_.__l.__size_;
        std::string::append(this, (const std::string::value_type *)v27, v28);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
    }
  }
}

uint64_t sub_22E5453EC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), "array", 5, 1, 0);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "array", 5, 1, 0))return 0;
  return sub_22F10CF48(v1);
}

void sub_22E545480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t Impl;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  void *__p;
  uint64_t v23;
  char v24;

  v6 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 <= 2)
  {
    v20 = sub_22EFC3B90(v6);
    if (v20)
    {
      v21 = v20;
LABEL_21:
      sub_22E545480(a1, v21, a3);
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v21)
          break;
        if ((*(_DWORD *)(v21 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_21;
      }
    }
  }
  else
  {
    __p = (void *)0x8000000000000002;
    v23 = 0;
    if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0)
      sub_22E53C678(a1, a2);
    sub_22EFC8E88(a2);
    v8 = *v7;
    v9 = *((unsigned int *)v7 + 2);
    if ((_DWORD)v9 && *(_WORD *)(*v8 + 32) != 374)
    {
      v10 = 8 * v9 - 8;
      v11 = *v7;
      do
      {
        v12 = v11[1];
        ++v11;
        v10 -= 8;
      }
      while (*(_WORD *)(v12 + 32) != 374);
    }
    do
    {
      v14 = *v8++;
      v13 = v14;
    }
    while (*(_WORD *)(v14 + 32) != 374);
    sub_22F007D7C(*(unsigned __int8 **)(v13 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&__p);
    if (v23 >= 0x41 && __p != 0)
      MEMORY[0x2348A0E84]();
    __p = (void *)0x8000000200000002;
    v23 = 0;
    sub_22E3B38EC(&__p, (_DWORD *)(a1 + 16));
    v16 = *(_QWORD *)(a2 + 48);
    v17 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 248))(&__p, v17, *(_QWORD *)(a1 + 8), v16, 1);
    Impl = llvm::air::AIFieldDesc::getImpl();
    v19 = *(_DWORD *)(a3 + 8);
    if (v19 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = Impl;
    ++*(_DWORD *)(a3 + 8);
    if (v24 < 0)
      operator delete(__p);
  }
}

uint64_t sub_22E545730(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0))return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22E5457C4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0))return 0;
  return sub_22F10CF48(v1);
}

void sub_22E545858(std::string *__dst, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  size_t v8;
  unsigned int *v9;
  const void *v10;
  unsigned int v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  std::string *v23;

  if (!a3
    || (*(_DWORD *)(a3 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9
    || (sub_22E3CEC2C(a3) & 1) != 0
    || (*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
  {
    v6 = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a3 + 40) & 7) != 0 || v6 == 0)
    {
      v8 = 0;
      *((_BYTE *)&__dst->__r_.__value_.__s + 23) = 0;
    }
    else
    {
      v9 = *(unsigned int **)(v6 + 16);
      v11 = *v9;
      v10 = v9 + 4;
      v8 = v11;
      if (v11 >= 0x17uLL)
      {
        if ((v8 | 7) == 0x17)
          v12 = (v8 & 0xFFFFFFF8) + 8;
        else
          v12 = v8 | 7;
        v13 = (std::string *)operator new(v12 + 1);
        __dst->__r_.__value_.__l.__size_ = v8;
        __dst->__r_.__value_.__r.__words[2] = v12 - 0x7FFFFFFFFFFFFFFFLL;
        __dst->__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
        __dst = v13;
      }
      else
      {
        *((_BYTE *)&__dst->__r_.__value_.__s + 23) = v8;
        if (!v8)
          goto LABEL_19;
      }
      memmove(__dst, v10, v8);
    }
LABEL_19:
    __dst->__r_.__value_.__s.__data_[v8] = 0;
    return;
  }
  __dst->__r_.__value_.__r.__words[0] = 0;
  __dst->__r_.__value_.__l.__size_ = 0;
  __dst->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(__dst, 0x40uLL);
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = MEMORY[0x24BED83D8] + 16;
  v23 = __dst;
  llvm::raw_ostream::SetBufferAndMode();
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 216))(v14, a3, &v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
}

uint64_t sub_22E5459C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Impl;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!getenv("AIR_INLINE_TYPE_INFO"))
    return 0;
  v24 = 0x8000000700000002;
  v25 = 0;
  Impl = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &v24) & 1) != 0)
    return Impl;
  v9 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  if (!v9 || *(_BYTE *)(v9 + 16) != 2)
  {
    v13 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if ((unint64_t)sub_22F10ACF8(*v13) >= 0x10)
    {
      v14 = sub_22F10ACF8(*v13);
      if ((a3 - 4) >= 3)
      {
        v16 = v14;
        v17 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
        v19 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v14);
        if (v19 && *(_BYTE *)(v19 + 16) == 2)
        {
          v16 = *(_QWORD *)(v19 + 32);
          v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
        }
        if ((sub_22F1110EC(*v17, 0) & 1) == 0)
        {
          sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v24);
          sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v16);
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
          sub_22E545D9C(a1, v16, a3, a4);
        else
          sub_22E5459C8(a1, v16, a3, a4);
        v20 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v20 + 248))(&__p, v20, *(_QWORD *)(a1 + 8), v16, 1);
        LODWORD(v24) = 0;
        goto LABEL_30;
      }
    }
    return 0;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v12 = sub_22E545D9C(a1, v10, a3, a4) | 4;
  else
    v12 = sub_22E5459C8(a1, v10, a3, a4) & 0xFFFFFFFFFFFFFFFBLL;
  if ((sub_22F1110EC(*v11, 0) & 1) == 0)
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v11, (uint64_t)&v24);
    sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v10);
  }
  if ((a3 - 4) > 2)
  {
    v18 = 0;
  }
  else if (v12 <= 7)
  {
    a4 = sub_22E543FB8(a1, v10, a3, a4);
    v18 = 1;
  }
  else
  {
    v18 = 2;
    a4 = 1;
  }
  v21 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v21 + 248))(&__p, v21, *(_QWORD *)(a1 + 8), a2, 1);
  LODWORD(v24) = v18;
  v25 = a4;
  v26 = 0;
LABEL_30:
  Impl = llvm::air::AIInlineTypeInfo::getImpl();
  if (v23 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E545D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  uint64_t Impl;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  uint64_t v45;
  const void *p_p;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::MDNode *v114;
  uint64_t v116;
  llvm::MDNode *v117;
  uint64_t v118;
  unint64_t v119;
  void *__p;
  size_t v121;
  int v122;
  char v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  void *v128;
  __int128 v129;
  _DWORD v130[10];
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134[2];
  _QWORD v135[18];

  v135[16] = *MEMORY[0x24BDAC8D0];
  if (!sub_22E547738(a2))
    return 0;
  v134[0] = v135;
  v134[1] = (void *)0x2000000000;
  sub_22E547B70((uint64_t)v134, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    Impl = llvm::air::AIStructTypeInfo::getImpl();
    v11 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2032, 32, 3);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = a2;
    *(_DWORD *)(v11 + 16) = a3;
    v116 = v11;
    v117 = (llvm::MDNode *)Impl;
    *(_QWORD *)(v11 + 24) = Impl;
    llvm::FoldingSetBase::InsertNode();
    v12 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    v13 = 0;
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
        v13 = 0;
      else
        v13 = v12;
    }
    v118 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v13);
    v131 = (char *)&v133;
    v132 = 0x400000000;
    v14 = sub_22EFC3B90(v13);
    if (!v14)
      goto LABEL_171;
    v15 = v14;
LABEL_11:
    v16 = *(_QWORD *)(v15 + 48);
    if (getenv("AIR_INLINE_TYPE_INFO")
      && (__p = (void *)0x8000000700000002, v121 = 0, (sub_22E3B38EC((_DWORD *)(a1 + 16), &__p) & 1) == 0))
    {
      v20 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v16);
      if (v20 && *(_BYTE *)(v20 + 16) == 2)
      {
        v21 = (_QWORD *)(v20 + 40);
        if (*(_DWORD *)(v20 + 48) >= 0x41u)
          v21 = (_QWORD *)*v21;
        v16 = *(_QWORD *)(v20 + 32);
        v19 = *(_DWORD *)v21;
LABEL_22:
        v22 = sub_22E5459C8(a1, v16, a3, a4);
        if (v22)
        {
          v23 = v22 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v24 = sub_22E545D9C(a1, v16, a3, a4);
          if (v24)
            v23 = v24 | 4;
          else
            v23 = 0;
        }
        v126 = 0;
        __p = 0;
        v121 = 0;
        v122 = 0;
        v124 = &v126;
        v125 = xmmword_22F44E360;
        v127 = 0;
        v128 = v130;
        v129 = xmmword_22F44E360;
        v130[2] = 0;
        v25 = sub_22E54E990((uint64_t)&v131, (unint64_t)&__p, 1);
        v26 = v131;
        v27 = v132;
        v28 = &v131[120 * v132];
        v29 = *(_OWORD *)v25;
        *((_DWORD *)v28 + 4) = *(_DWORD *)(v25 + 16);
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 2) = xmmword_22F44E360;
        *((_QWORD *)v28 + 3) = v28 + 48;
        v30 = (uint64_t)(v28 + 24);
        if (*(_QWORD *)(v25 + 32))
          sub_22E3B2DB8(v30, v25 + 24);
        v31 = &v26[120 * v27];
        v32 = *(_DWORD *)(v25 + 56);
        *((_QWORD *)v31 + 8) = v31 + 88;
        v33 = (uint64_t)(v31 + 64);
        *(_DWORD *)(v33 - 8) = v32;
        *(_OWORD *)(v33 + 8) = xmmword_22F44E360;
        if (*(_QWORD *)(v25 + 72))
          sub_22E3B2DB8(v33, v25 + 64);
        v34 = &v26[120 * v27];
        v35 = *(_OWORD *)(v25 + 96);
        *((_QWORD *)v34 + 14) = *(_QWORD *)(v25 + 112);
        *((_OWORD *)v34 + 6) = v35;
        LODWORD(v132) = v132 + 1;
        if (v128 != v130)
          free(v128);
        if (v124 != &v126)
          free(v124);
        v36 = &v131[120 * v132];
        *((_QWORD *)v36 - 15) = v23;
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        v38 = *(_QWORD *)(*(_QWORD *)(v118 + 48) + 8 * sub_22EFC306C(v15));
        *((_DWORD *)v36 - 28) = v38 / sub_22EF5CDF0(v37, *(_QWORD *)(*(_QWORD *)(v37 + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&__p);
        v39 = 0;
        *((_DWORD *)v36 - 27) = (_DWORD)__p;
        *((_DWORD *)v36 - 26) = v19;
        v40 = *(_QWORD *)(v15 + 40);
        v41 = "";
        if ((v40 & 7) == 0)
        {
          v42 = v40 & 0xFFFFFFFFFFFFFFF8;
          if (v42)
          {
            v43 = *(_DWORD **)(v42 + 16);
            v44 = *v43;
            v41 = (char *)(v43 + 4);
            v39 = v44;
          }
        }
        LOWORD(v125) = 261;
        __p = v41;
        v121 = v39;
        *((_DWORD *)v36 - 16) = 1;
        *((_QWORD *)v36 - 6) = 0;
        llvm::Twine::toVector();
        v45 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v45 + 248))(&__p, v45, *(_QWORD *)(a1 + 8), v16, 1);
        if (v123 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v123 >= 0)
          v47 = v123 & 0x7F;
        else
          v47 = v121;
        *((_QWORD *)v36 - 11) = 0;
        if (*((_QWORD *)v36 - 10) < v47)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v48 = *((_QWORD *)v36 - 11);
        }
        else
        {
          v48 = 0;
          v49 = 0;
          if (!v47)
          {
LABEL_47:
            *((_QWORD *)v36 - 11) = v49 + v47;
            if (v123 < 0)
              operator delete(__p);
            if ((a3 - 4) <= 2)
            {
              if (*((_QWORD *)v36 - 15) >= 8uLL)
              {
                v119 = v15;
                __p = 0;
                if ((sub_22E54D014((uint64_t *)a4, &v119, &__p) & 1) != 0)
                  v50 = __p;
                else
                  v50 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
                v66 = sub_22E533554(a1, v50[1]);
                *((_DWORD *)v36 - 6) = 2 * ((_DWORD)v66 != 0);
                *((_QWORD *)v36 - 2) = v66;
                *((_QWORD *)v36 - 1) = v67;
                goto LABEL_122;
              }
              v51 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48));
              v52 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFF0);
              v53 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0);
              if ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                  - 39 <= 1
                 && (v54 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0)
                                     + 8),
                     (v54 & 8) != 0)
                 && (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
                 || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                  - 39 <= 1
                 && (v55 = *(_QWORD *)((sub_22F10ACF8(v53) & 0xFFFFFFFFFFFFFFF0) + 8), (v55 & 8) != 0)
                 && (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
                && (v56 = sub_22F10ACF8(v53),
                    sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8)),
                    (v57 & 1) != 0)
                || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 122) & 4) != 0
                && getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB")
                && (sub_22E5429D8(*v52), v58))
              {
                v59 = sub_22EFC306C(v15);
                v60 = sub_22E54B858(a1, v15, a3, a4, v59);
LABEL_120:
                v86 = v60;
LABEL_121:
                *((_DWORD *)v36 - 6) = v86 != 0;
                *((_QWORD *)v36 - 2) = v86;
                goto LABEL_122;
              }
              v61 = *v52;
              if ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                  - 39 <= 1
                 && (v62 = *(_QWORD *)((sub_22F10ACF8(*v52) & 0xFFFFFFFFFFFFFFF0) + 8), (v62 & 8) != 0)
                 && (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x5800
                 || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                  - 39 <= 1
                 && (v63 = *(_QWORD *)((sub_22F10ACF8(v61) & 0xFFFFFFFFFFFFFFF0) + 8), (v63 & 8) != 0)
                 && (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
                && (v64 = sub_22F10ACF8(v61),
                    sub_22F10BAEC(*(_QWORD *)(*(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0) + 8)),
                    !v65)
                || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 122) & 4) != 0
                && getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB")
                && sub_22E542AD8(*v52))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E54BD88(a1, v15, a3, a4, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v52 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
                || (v68 = sub_22E5453EC(*v52)) != 0
                && ((v69 = sub_22F10C2A4(v68), (*(_DWORD *)(v69 + 28) & 0x7Fu) - 35 >= 3) ? (v70 = 0) : (v70 = v69),
                    sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v70 + 168)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E535814(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v52 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0
                || (v71 = sub_22E5453EC(*v52)) != 0
                && ((v72 = sub_22F10C2A4(v71), (*(_DWORD *)(v72 + 28) & 0x7Fu) - 35 >= 3) ? (v73 = 0) : (v73 = v72),
                    sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v73 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0)))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E535B6C(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10CDF4(*v52) & 1) != 0
                || (v74 = sub_22E5453EC(*v52)) != 0
                && ((v75 = sub_22F10C2A4(v74), (*(_DWORD *)(v75 + 28) & 0x7Fu) - 35 >= 3) ? (v76 = 0) : (v76 = v75),
                    sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v76 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E534BE8(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10C510(*v52) & 1) != 0
                || (v77 = sub_22E5453EC(*v52)) != 0
                && ((v78 = sub_22F10C2A4(v77), (*(_DWORD *)(v78 + 28) & 0x7Fu) - 35 >= 3) ? (v79 = 0) : (v79 = v78),
                    sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v79 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E534F04(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10B9F8(*v52) & 1) != 0
                || (v80 = sub_22E5453EC(*v52)) != 0
                && ((v81 = sub_22F10C2A4(v80), (*(_DWORD *)(v81 + 28) & 0x7Fu) - 35 >= 3) ? (v82 = 0) : (v82 = v81),
                    sub_22F10B9F8(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v82 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E53523C(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10BAB0(*v52) & 1) != 0
                || (v83 = sub_22E5453EC(*v52)) != 0
                && ((v84 = sub_22F10C2A4(v83), (*(_DWORD *)(v84 + 28) & 0x7Fu) - 35 >= 3) ? (v85 = 0) : (v85 = v84),
                    sub_22F10BAB0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v85 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                sub_22EFC306C(v15);
                v60 = sub_22E535528(a1, v15, a3, a4);
                goto LABEL_120;
              }
              if ((sub_22F10B8E0(*v52, "command_buffer", 14, 0, 0) & 1) != 0
                || (v87 = sub_22E5453EC(*v52)) != 0
                && ((v88 = sub_22F10C2A4(v87), (*(_DWORD *)(v88 + 28) & 0x7Fu) - 35 >= 3) ? (v89 = 0) : (v89 = v88),
                    sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v89 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "command_buffer", 14, 0, 0)))
              {
                sub_22EFC306C(v15);
                v90 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48));
                v91 = sub_22E5453EC(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0));
                if (v91)
                  sub_22F409218(v91);
                sub_22E53C678(a1, v15);
                v119 = v15;
                __p = 0;
                if ((sub_22E54D014((uint64_t *)a4, &v119, &__p) & 1) != 0)
                  v92 = __p;
                else
                  v92 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
                sub_22E533554(a1, v92[1]);
                v99 = *(_QWORD *)(v15 + 48);
                v100 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
                (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v100 + 248))(&__p, v100, *(_QWORD *)(a1 + 8), v99, 1);
                v101 = llvm::air::AICommandBuffer::getImpl();
              }
              else
              {
                if ((sub_22F10B8E0(*v52, "render_pipeline_state", 21, 0, 0) & 1) != 0
                  || (v93 = sub_22E5453EC(*v52)) != 0
                  && ((v94 = sub_22F10C2A4(v93), (*(_DWORD *)(v94 + 28) & 0x7Fu) - 35 >= 3) ? (v95 = 0) : (v95 = v94),
                      sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v95 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "render_pipeline_state", 21, 0, 0)))
                {
                  sub_22EFC306C(v15);
                  v96 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48));
                  v97 = sub_22E5453EC(*(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0));
                  if (v97)
                    sub_22F409218(v97);
                  sub_22E53C678(a1, v15);
                  v119 = v15;
                  __p = 0;
                  if ((sub_22E54D014((uint64_t *)a4, &v119, &__p) & 1) != 0)
                    v98 = __p;
                  else
                    v98 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
                }
                else
                {
                  if ((sub_22F10B8E0(*v52, "compute_pipeline_state", 22, 0, 0) & 1) == 0)
                  {
                    v102 = sub_22E5453EC(*v52);
                    if (!v102
                      || ((v103 = sub_22F10C2A4(v102), (*(_DWORD *)(v103 + 28) & 0x7Fu) - 35 >= 3)
                        ? (v104 = 0)
                        : (v104 = v103),
                          !sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v104 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "compute_pipeline_state", 22, 0, 0)))
                    {
                      v107 = *(_QWORD *)(*(_QWORD *)(*v52 + 8) & 0xFFFFFFFFFFFFFFF0);
                      v108 = *(unsigned __int8 *)(v107 + 16);
                      if ((v108 > 0x38 || ((1 << v108) & 0x180000000000800) == 0)
                        && (sub_22F10B8E0(v107, "matrix", 6, 1, 0) & 1) == 0)
                      {
                        sub_22F10C8DC(*v52);
                      }
                      v109 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48));
                      sub_22EFC306C(v15);
                      sub_22E53C678(a1, v15);
                      v119 = v15;
                      __p = 0;
                      if ((sub_22E54D014((uint64_t *)a4, &v119, &__p) & 1) != 0)
                        v110 = __p;
                      else
                        v110 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
                      sub_22E533554(a1, v110[1]);
                      v113 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
                      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v113 + 248))(&__p, v113, *(_QWORD *)(a1 + 8), v109, 1);
                      v101 = llvm::air::AIIndirectConstant::getImpl();
                      goto LABEL_164;
                    }
                  }
                  sub_22EFC306C(v15);
                  v105 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v15 + 48));
                  v106 = sub_22E5453EC(*(_QWORD *)(v105 & 0xFFFFFFFFFFFFFFF0));
                  if (v106)
                    sub_22F409218(v106);
                  sub_22E53C678(a1, v15);
                  v119 = v15;
                  __p = 0;
                  if ((sub_22E54D014((uint64_t *)a4, &v119, &__p) & 1) != 0)
                    v98 = __p;
                  else
                    v98 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
                }
                sub_22E533554(a1, v98[1]);
                v111 = *(_QWORD *)(v15 + 48);
                v112 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
                (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v112 + 248))(&__p, v112, *(_QWORD *)(a1 + 8), v111, 1);
                v101 = llvm::air::AIPipelineState::getImpl();
              }
LABEL_164:
              v86 = v101;
              if (v123 < 0)
                operator delete(__p);
              goto LABEL_121;
            }
LABEL_122:
            while (1)
            {
              v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v15)
                break;
              if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_11;
            }
LABEL_171:
            v9 = llvm::air::AIStructTypeInfo::getImpl();
            if ((*((_QWORD *)v117 + 2) & 4) != 0)
              llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
            *(_QWORD *)(v116 + 24) = v9;
            sub_22E54E900(&v131);
            llvm::MDNode::deleteTemporary(v117, v114);
            goto LABEL_174;
          }
        }
        memcpy((void *)(*((_QWORD *)v36 - 12) + v48), p_p, v47);
        v49 = *((_QWORD *)v36 - 11);
        goto LABEL_47;
      }
    }
    else
    {
      v17 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v16);
      if (v17)
      {
        v18 = v17;
        if (*(_BYTE *)(v17 + 16) == 2)
        {
          v16 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v16);
          v19 = sub_22EF6A060(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v18);
          goto LABEL_22;
        }
      }
    }
    v19 = 0;
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(NodeOrInsertPos + 24);
LABEL_174:
  if (v134[0] != v135)
    free(v134[0]);
  return v9;
}

BOOL sub_22E546FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 433)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22E547004(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  if (sub_22E54E894(*(_QWORD *)v1, *(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 8)))
    return 0;
  while (1)
  {
    result = *(_QWORD *)v2;
    if (*(_WORD *)(*(_QWORD *)v2 + 32) == 210 && !*(_BYTE *)(result + 48))
      break;
    v2 += 8;
  }
  return result;
}

uint64_t sub_22E547064(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Impl;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p;
  char v40;
  unint64_t v41;
  uint64_t v42;

  if (!getenv("AIR_INLINE_TYPE_INFO"))
    return 0;
  v41 = 0x8000000700000002;
  v42 = 0;
  Impl = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), &v41) & 1) == 0)
  {
    if ((a3 - 4) > 2)
      return sub_22E5459C8(a1, a2, a3, a4);
    v9 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      goto LABEL_49;
    v10 = sub_22E5453EC(*v9);
    if (v10)
    {
      v11 = sub_22F10C2A4(v10);
      v12 = (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v11;
      if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v12 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_49;
    }
    if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)
      goto LABEL_49;
    v13 = sub_22E5453EC(*v9);
    if (v13)
    {
      v14 = sub_22F10C2A4(v13);
      v15 = (*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v14;
      if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_49;
    }
    if ((sub_22F10B8E0(*v9, "command_buffer", 14, 0, 0) & 1) != 0)
      goto LABEL_49;
    v16 = sub_22E5453EC(*v9);
    if (v16)
    {
      v17 = sub_22F10C2A4(v16);
      v18 = (*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v17;
      if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v18 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "command_buffer", 14, 0, 0) & 1) != 0)goto LABEL_49;
    }
    v19 = *v9;
    if ((sub_22F10B8E0(*v9, "render_pipeline_state", 21, 0, 0) & 1) != 0
      || (sub_22F10B8E0(v19, "compute_pipeline_state", 22, 0, 0) & 1) != 0)
    {
      goto LABEL_49;
    }
    v20 = sub_22E5453EC(*v9);
    if (v20)
    {
      v21 = sub_22F10C2A4(v20);
      v22 = (*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v21;
      v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v22 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((sub_22F10B8E0(v23, "render_pipeline_state", 21, 0, 0) & 1) != 0
        || (sub_22F10B8E0(v23, "compute_pipeline_state", 22, 0, 0) & 1) != 0)
      {
        goto LABEL_49;
      }
    }
    if ((sub_22F10CDF4(*v9) & 1) != 0)
      goto LABEL_49;
    v24 = sub_22E5453EC(*v9);
    if (v24)
    {
      v25 = sub_22F10C2A4(v24);
      v26 = (*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v25;
      if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v26 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_49;
    }
    if ((sub_22F10C510(*v9) & 1) != 0)
      goto LABEL_49;
    v27 = sub_22E5453EC(*v9);
    if (v27)
    {
      v28 = sub_22F10C2A4(v27);
      v29 = (*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v28;
      if ((sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v29 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_49;
    }
    if ((sub_22F10C1B4(*v9) & 1) != 0
      || (v30 = sub_22E5453EC(*v9)) != 0
      && ((v31 = sub_22F10C2A4(v30), (*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 >= 3) ? (v32 = 0) : (v32 = v31),
          (sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v32 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      || sub_22E475308(*v9)
      || getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB")
      && (v35 = sub_22E5453EC(*v9)) != 0
      && ((v36 = sub_22F10C2A4(v35), (*(_DWORD *)(v36 + 28) & 0x7Fu) - 35 >= 3) ? (v37 = 0) : (v37 = v36),
          sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v37 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
    {
LABEL_49:
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v9, (uint64_t)&v41);
      sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
      v33 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v33 + 248))(&__p, v33, *(_QWORD *)(a1 + 8), a2, 1);
      v34 = sub_22E543FB8(a1, a2, a3, a4);
      LODWORD(v41) = 1;
      v42 = v34;
      Impl = llvm::air::AIInlineTypeInfo::getImpl();
      if (v40 < 0)
        operator delete(__p);
    }
    else
    {
      return sub_22E5459C8(a1, a2, a3, a4);
    }
  }
  return Impl;
}

uint64_t sub_22E54755C(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t Impl;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  void *__p;
  char v13;
  _QWORD v14[4];

  if (!getenv("AIR_INLINE_TYPE_INFO"))
    return 0;
  v14[0] = 0x8000000700000002;
  v14[1] = 0;
  Impl = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), v14) & 1) != 0)
    return Impl;
  v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  Impl = v7;
  if (!v7)
    return Impl;
  if (*(_BYTE *)(v7 + 16) != 2)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    sub_22E53C7B4(a1, v8, a3);
  else
    sub_22E54755C(a1, v8, a3);
  if ((sub_22F1110EC(*v9, 0) & 1) == 0)
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v9, (uint64_t)v14);
    sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8);
  }
  v11 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v11 + 248))(&__p, v11, *(_QWORD *)(a1 + 8), a2, 1);
  LODWORD(v14[0]) = 0;
  Impl = llvm::air::AIInlineTypeInfo::getImpl();
  if (v13 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E547738(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
    return 0;
  v3 = sub_22F10C2A4(v2);
  v4 = (*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v3;
  if ((*(_BYTE *)(v4 + 74) & 1) == 0 || (sub_22F10C8DC(*v1) & 1) != 0)
    return 0;
  v6 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v1 + 8) & 0xFFFFFFFFFFFFFFF0), "matrix", 6, 1, 0);
  result = 0;
  if ((v6 & 1) == 0)
  {
    if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v1 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      return 0;
    v7 = sub_22E5453EC(*v1);
    if (v7)
    {
      v8 = sub_22F10C2A4(v7);
      v9 = (*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v8;
      if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v9 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        return 0;
    }
    v10 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v1 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0);
    result = 0;
    if ((v10 & 1) == 0)
    {
      v11 = sub_22E5453EC(*v1);
      if (!v11
        || ((v12 = sub_22F10C2A4(v11), (*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3) ? (v13 = 0) : (v13 = v12),
            v14 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v13 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0), result = 0, (v14 & 1) == 0))
      {
        v15 = sub_22F10B8E0(*v1, "command_buffer", 14, 0, 0);
        result = 0;
        if ((v15 & 1) == 0)
        {
          v16 = sub_22E5453EC(*v1);
          if (!v16
            || ((v17 = sub_22F10C2A4(v16), (*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 >= 3) ? (v18 = 0) : (v18 = v17),
                v19 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v18 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "command_buffer", 14, 0, 0), result = 0, (v19 & 1) == 0))
          {
            v20 = *v1;
            v21 = sub_22F10B8E0(*v1, "render_pipeline_state", 21, 0, 0);
            result = 0;
            if ((v21 & 1) == 0)
            {
              v22 = sub_22F10B8E0(v20, "compute_pipeline_state", 22, 0, 0);
              result = 0;
              if ((v22 & 1) == 0)
              {
                v23 = sub_22E5453EC(*v1);
                if (!v23
                  || ((v24 = sub_22F10C2A4(v23), (*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3) ? (v25 = 0) : (v25 = v24),
                      (v26 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v25 + 168) + 8) & 0xFFFFFFFFFFFFFFF0),
                       v27 = sub_22F10B8E0(v26, "render_pipeline_state", 21, 0, 0),
                       result = 0,
                       (v27 & 1) == 0)
                   && (v28 = sub_22F10B8E0(v26, "compute_pipeline_state", 22, 0, 0), result = 0, (v28 & 1) == 0)))
                {
                  if ((sub_22F10CDF4(*v1) & 1) == 0)
                  {
                    v29 = sub_22E5453EC(*v1);
                    if (!v29
                      || ((v30 = sub_22F10C2A4(v29), (*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 >= 3)
                        ? (v31 = 0)
                        : (v31 = v30),
                          (sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v31 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
                    {
                      if ((sub_22F10C510(*v1) & 1) == 0)
                      {
                        v32 = sub_22E5453EC(*v1);
                        if (!v32
                          || ((v33 = sub_22F10C2A4(v32), (*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 >= 3)
                            ? (v34 = 0)
                            : (v34 = v33),
                              (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v34 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
                        {
                          if ((sub_22F10C1B4(*v1) & 1) == 0)
                          {
                            v35 = sub_22E5453EC(*v1);
                            if (!v35
                              || ((v36 = sub_22F10C2A4(v35), (*(_DWORD *)(v36 + 28) & 0x7Fu) - 35 >= 3)
                                ? (v37 = 0)
                                : (v37 = v36),
                                  (sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v37 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
                            {
                              if (!getenv("AIR_ENABLE_ARRAYS_OF_BUFFERS_AB"))
                                return 1;
                              v38 = sub_22E5453EC(*v1);
                              if (!v38)
                                return 1;
                              v39 = sub_22F10C2A4(v38);
                              v40 = (*(_DWORD *)(v39 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v39;
                              if (!sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v40 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
                                return 1;
                            }
                          }
                        }
                      }
                    }
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E547B70(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v13 = result;
    v8 = a2;
    v10 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    a3 = v10;
    result = v13;
    v3 = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a2;
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v5;
  if (v5 >= v4)
  {
    v14 = result;
    v9 = HIDWORD(a2);
    v11 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v9;
    a3 = v11;
    result = v14;
    v5 = *(_DWORD *)(v14 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = HIDWORD(a2);
  v6 = *(_DWORD *)(result + 12);
  v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6)
  {
    v15 = result;
    v12 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v12;
    result = v15;
    v7 = *(_DWORD *)(v15 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22E547C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  if (getenv("AIR_INLINE_TYPE_INFO"))
  {
    v11[0] = 0x8000000700000002;
    v11[1] = 0;
    if ((sub_22E3B38EC((_DWORD *)(a1 + 16), v11) & 1) == 0)
      return sub_22E545D9C(a1, a2, a3, a4);
  }
  a2 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1)
    return sub_22E545D9C(a1, a2, a3, a4);
  v10 = sub_22F10ACF8(v8);
  return sub_22E547C80(a1, v10, a3, a4);
}

uint64_t sub_22E547D54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10C780(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10C780(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

void sub_22E547DA8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t Impl;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;
  void *v17;
  char v18;

  v7 = sub_22EFC3B90(a2);
  if (!v7)
    return;
  v8 = v7;
LABEL_3:
  if (sub_22E536E34(v8))
  {
    v9 = sub_22E53AC88(a1, v8);
LABEL_13:
    Impl = v9;
    goto LABEL_14;
  }
  if (sub_22E53742C(v8))
  {
    v9 = sub_22E54C748(a1, v8);
    goto LABEL_13;
  }
  if (sub_22E53748C(v8))
  {
    v9 = sub_22E53B4FC(a1, v8);
    goto LABEL_13;
  }
  if (sub_22E5374EC(v8))
  {
    v9 = sub_22E54D0B0(a1, v8);
    goto LABEL_13;
  }
  if (sub_22E53754C(v8))
  {
    v9 = sub_22E54D1E8(a1, v8);
    goto LABEL_13;
  }
  v12 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 <= 2)
  {
    sub_22E547DA8(a1, v12, a3, a4);
    goto LABEL_17;
  }
  ++*a3;
  sub_22E53C678(a1, v8);
  sub_22E53CECC(&v17, a1, v8);
  sub_22F26E908(v8);
  v13 = *(_QWORD *)(v8 + 48);
  v14 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 248))(&__p, v14, *(_QWORD *)(a1 + 8), v13, 1);
  Impl = llvm::air::AIMeshVertexData::getImpl();
  if (v16 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
LABEL_14:
  v11 = *(unsigned int *)(a4 + 8);
  if (v11 >= *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(unsigned int *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = Impl;
  ++*(_DWORD *)(a4 + 8);
LABEL_17:
  while (1)
  {
    v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v8)
      break;
    if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_3;
  }
}

void sub_22E548060(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t Impl;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;
  void *v17;
  char v18;

  v7 = sub_22EFC3B90(a2);
  if (!v7)
    return;
  v8 = v7;
LABEL_3:
  if (sub_22E5374EC(v8))
  {
    v9 = sub_22E54D0B0(a1, v8);
LABEL_9:
    Impl = v9;
    goto LABEL_10;
  }
  if (sub_22E53754C(v8))
  {
    v9 = sub_22E54D1E8(a1, v8);
    goto LABEL_9;
  }
  if (sub_22E5375AC(v8))
  {
    v9 = sub_22E54C880(a1, v8);
    goto LABEL_9;
  }
  if (sub_22F26E334(v8))
  {
    v9 = sub_22E54C9B8(a1, v8);
    goto LABEL_9;
  }
  v12 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 <= 2)
  {
    sub_22E548060(a1, v12, a3, a4);
    goto LABEL_13;
  }
  ++*a3;
  sub_22E53C678(a1, v8);
  sub_22E53CECC(&v17, a1, v8);
  sub_22F26E908(v8);
  v13 = *(_QWORD *)(v8 + 48);
  v14 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 248))(&__p, v14, *(_QWORD *)(a1 + 8), v13, 1);
  Impl = llvm::air::AIMeshPrimitiveData::getImpl();
  if (v16 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
LABEL_10:
  v11 = *(unsigned int *)(a4 + 8);
  if (v11 >= *(unsigned int *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(unsigned int *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = Impl;
  ++*(_DWORD *)(a4 + 8);
LABEL_13:
  while (1)
  {
    v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v8)
      break;
    if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_3;
  }
}

uint64_t sub_22E5482FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD v16[3];

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 1;
  else
    v5 = 0;
  if (v5)
  {
LABEL_7:
    v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v4 + 32));
    if (v7)
    {
      v8 = v7;
      if (*(_BYTE *)(v7 + 16) == 2)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
LABEL_14:
        sub_22EF5CCD0(v9, v8, (uint64_t)v16);
        v13 = v16[0];
        v14 = v16[0] & 0xFFFFFF00;
        v12 = 0x100000000;
        return v13 | v12 | v14;
      }
    }
LABEL_15:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    return v13 | v12 | v14;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v6 == 1)
  {
    v4 = sub_22F10CF48(v4);
    if (v4)
      goto LABEL_7;
    v4 = *(_QWORD *)v3;
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v6 != 40)
    goto LABEL_15;
  v10 = (uint64_t *)(sub_22F10ACF8(v4) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22F1110EC(*v10, 0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if ((v11 & 1) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v8 = *v10;
    goto LABEL_14;
  }
  return v13 | v12 | v14;
}

uint64_t sub_22E548408(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_22E5484B4(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, 0);
  sub_22E54A27C(a1, *a3);
  sub_22E54A27C(a1, a3[1]);
  sub_22E54A27C(a1, a3[2]);
  sub_22E54A27C(a1, a3[3]);
  return llvm::air::AIStitchingType::getImpl();
}

uint64_t sub_22E5484B4(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  llvm::air::AIType *Impl;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int32x4_t v34;
  int32x4_t v35;
  int32x2_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::MDNode *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  llvm::MDNode *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  __int128 __p;
  _QWORD v164[16];
  _QWORD *v165;
  uint64_t v166;
  _QWORD v167[4];

  v167[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22F10D4DC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 80);
    v10 = 2 * v9;
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    v12 = v10 & 8;
    if ((a2 & 8) != 0)
    {
      v13 = v6[3] & 0xFFFFFFFF00000000;
      v14 = v6[3];
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v29 = *(_QWORD *)(v11 + v12);
    if (v14 & 0xCFFFFFFF8 | v13 & 0xCFFFFFFF8)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
      *(_QWORD *)&__p = v14 | a2 & 7 | v13;
      v31 = sub_22E491354((unsigned int *)&__p, v29);
      v32 = sub_22EF5DBC4(v30, v31, __p);
    }
    else
    {
      v32 = v14 & 7 | a2 & 7 | v29;
    }
    Impl = (llvm::air::AIType *)sub_22E5484B4(a1, v32, a3);
    if (sub_22EFC8A80(*(_QWORD *)(v8 + 24)))
    {
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      return llvm::air::AIType::getWithAlignment(Impl);
    }
    return (uint64_t)Impl;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_DWORD *)(v15 + 16);
  if (v15)
    v17 = v16 == 11;
  else
    v17 = 0;
  if (v17)
  {
    v34 = (int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(*(_DWORD *)(v15 + 16)), (int8x16_t)xmmword_22F45ABC0);
    v35 = v34;
    v35.i32[1] = v34.i32[0];
    v35.i32[2] = v34.i32[0];
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(vzip1q_s32(v34, (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL)), (int32x4_t)xmmword_22F45ABD0), (int16x8_t)vceqq_s32(v35, (int32x4_t)xmmword_22F45ABE0)))) & 1) != 0|| (v36 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL)), (int32x2_t)0x720000008000000), (v36.i8[4] & 1) != 0)|| (v36.i8[0] & 1) != 0)
    {
      v37 = a3;
      v38 = a1;
      v39 = a2;
      return sub_22E54A2FC(v38, v39, v37);
    }
    return sub_22E54A534(a1, a2, a3);
  }
  if (v16 == 11)
    return sub_22E54A534(a1, a2, a3);
  v18 = sub_22E3E4B64(*v6);
  if (v18 && (*(_DWORD *)(v18 + 16) & 0x780000) == 0x80000)
    return sub_22F26F220(a1, a2, a3);
  v19 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(v19 + 16) - 55 <= 1)
    return sub_22F26F2D4(a1, a2, a3);
  if (sub_22F10B8E0(v19, "matrix", 6, 1, 0))
    return sub_22F26F38C(a1, a2, a3);
  v20 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(unsigned __int8 *)(v20 + 16);
  if ((v21 - 25) > 1)
  {
    switch(*(_BYTE *)(v20 + 16))
    {
      case '\'':
        return sub_22F26F694(a1, a2, a3);
      case '(':
        return sub_22F26F780(a1, a2, a3);
      case ')':
        return sub_22F26F8CC(a1, a2, a3);
      case '*':
      case '+':
        goto LABEL_40;
      case ',':
        v22 = v6[1];
        v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
        if ((v22 & 8) != 0)
          v23 = (_QWORD *)*v23;
        sub_22E54A994(a1, (uint64_t)v23);
        sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
        __p = 0uLL;
        v164[0] = 0;
        sub_22F1193C0((int)v23, 0, &__p, (_OWORD *)(a1 + 32));
        v24 = *(_QWORD *)(v23[1] & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(v24 + 16) != 44)
          v24 = 0;
        v25 = sub_22F114198(*(_QWORD *)(v24 + 24));
        v26 = sub_22E496830(v25);
        sub_22E5484B4(a1, v26, 0);
        Impl = (llvm::air::AIType *)llvm::air::AIEnumType::getImpl();
        if ((SHIBYTE(v164[0]) & 0x80000000) == 0)
          return (uint64_t)Impl;
        v28 = (void *)__p;
        goto LABEL_21;
      default:
        if (v21 == 2)
        {
          v40 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
          if (v40)
          {
            if (*(_BYTE *)(v40 + 16) == 2)
              v41 = v40;
            else
              v41 = 0;
          }
          else
          {
            v41 = 0;
          }
          sub_22E54A994(a1, v41);
          sub_22E5484B4(a1, *(_QWORD *)(v41 + 32), a3);
          return llvm::air::AIArrayType::getImpl();
        }
LABEL_40:
        if (sub_22F10CA40(v20))
          return sub_22F26FA18(a1, a2, a3);
        if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
          return sub_22F271264(a1, a2, a3);
        if (sub_22F10C8DC(*v6))
          return sub_22F26FDF8(a1, a2, a3);
        if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0))return sub_22F270050(a1, a2, a3);
        if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0), "patch_control_point", 19, 1, 3))return sub_22F27014C(a1, a2, a3);
        if (sub_22F10B8E0(*v6, "command_buffer", 14, 0, 0))
          return sub_22F271300(a1, a2, a3);
        if (sub_22F10B8E0(*v6, "compute_pipeline_state", 22, 0, 0))
          return sub_22F27139C(a1, a2, a3);
        if (sub_22F10B8E0(*v6, "render_pipeline_state", 21, 0, 0))
          return sub_22F271438(a1, a2, a3);
        if (sub_22F10B8E0(*v6, "interpolant", 11, 1, 0))
          return sub_22F270228(a1, a2, a3);
        if (sub_22F10CDF4(*v6))
          return sub_22F27031C(a1, a2, a3);
        if (sub_22F10C510(*v6))
          return sub_22F2703DC(a1, a2, a3);
        if (sub_22F10C1B4(*v6))
          return sub_22F270534(a1, a2, a3);
        if (sub_22F10C780(*v6))
          return sub_22F270618(a1, a2, a3);
        if (sub_22F10B8E0(*v6, "mesh_grid_properties", 20, 0, 0))
          return sub_22F2714D4(a1, a2, a3);
        if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0), "array", 5, 1, 0))
          return sub_22F270744(a1, a2, a3);
        if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0))return sub_22F270834(a1, a2, a3);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
        {
          v38 = a1;
          v39 = a2;
          v37 = a3;
          return sub_22E54A2FC(v38, v39, v37);
        }
        v42 = v6[1];
        v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0);
        if ((v42 & 8) != 0)
          v43 = (_QWORD *)*v43;
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
        sub_22E54A994(a1, (uint64_t)v43);
        sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
        v45 = sub_22F10C2A4((uint64_t)v43);
        if (v45)
        {
          if ((*(_DWORD *)(v45 + 28) & 0x7Fu) - 35 >= 3)
            v46 = 0;
          else
            v46 = v45;
        }
        else
        {
          v46 = 0;
        }
        v161 = 0uLL;
        v162 = 0;
        sub_22F1193C0((int)v43, 0, &v161, (_OWORD *)(a1 + 32));
        if ((*(_DWORD *)(v46 + 72) & 0x10000) == 0)
        {
          Impl = (llvm::air::AIType *)llvm::air::AIRecordType::getImpl();
          goto LABEL_272;
        }
        v47 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v46);
        v48 = sub_22E66DD94(*(_QWORD *)(a1 + 8) + 280, v46);
        *(_QWORD *)&__p = v164;
        LOBYTE(v165) = a3 & 0xFE;
        v164[0] = v46;
        *((_QWORD *)&__p + 1) = 0x2000000002;
        sub_22E54D3B4(&v165, (uint64_t)&__p);
        if (llvm::FoldingSetBase::FindNodeOrInsertPos())
        {
          Impl = (llvm::air::AIType *)llvm::air::AIRecordType::getImpl();
          goto LABEL_270;
        }
        v159 = v48;
        v156 = v44;
        v49 = a3 & 0xFE;
        v50 = llvm::MDTuple::getImpl();
        v51 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2032, 32, 3);
        *(_QWORD *)v51 = 0;
        *(_QWORD *)(v51 + 8) = v46;
        v160 = v49;
        *(_BYTE *)(v51 + 16) = a3 & 0xFE;
        v154 = v51;
        v155 = (llvm::MDNode *)v50;
        *(_QWORD *)(v51 + 24) = v50;
        llvm::FoldingSetBase::InsertNode();
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
        v158 = v47;
        v52 = *(_DWORD *)(*(_QWORD *)(v46 + 128) + 16) + ((*(_QWORD *)(v47 + 56) - *(_QWORD *)(v47 + 48)) >> 3);
        if (v52)
        {
          v53 = (uint64_t *)operator new(8* (*(_DWORD *)(*(_QWORD *)(v46 + 128) + 16)+ ((*(_QWORD *)(v47 + 56) - *(_QWORD *)(v47 + 48)) >> 3)));
          v54 = &v53[v52];
        }
        else
        {
          v53 = 0;
          v54 = 0;
        }
        v157 = v46;
        v55 = sub_22E46A3A0(v46);
        if (v55 == v56)
        {
          v66 = v53;
          v67 = v48;
        }
        else
        {
          v57 = v55;
          v58 = v56;
          v59 = v53;
          do
          {
            v60 = *(_QWORD *)(**(_QWORD **)(v57 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v60 + 8) & 0xF) != 0)
              v60 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v57 + 16));
            sub_22E5484B4(a1, v60 & 0xFFFFFFFFFFFFFFF0, v49);
            v61 = *(_QWORD *)(**(_QWORD **)(v57 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v61 + 8) & 0xF) != 0)
              v61 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v57 + 16));
            v62 = sub_22F10C2A4(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0));
            if (v62)
            {
              if ((*(_DWORD *)(v62 + 28) & 0x7Fu) - 35 >= 3)
                v63 = 0;
              else
                v63 = v62;
            }
            else
            {
              v63 = 0;
            }
            sub_22E46A3EC(v158, v63);
            v64 = llvm::air::AIRecordBase::getImpl();
            v65 = v64;
            if (v59 >= v54)
            {
              v68 = v59 - v53;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61)
LABEL_274:
                abort();
              if (((char *)v54 - (char *)v53) >> 2 > v69)
                v69 = ((char *)v54 - (char *)v53) >> 2;
              if ((unint64_t)((char *)v54 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                if (v70 >> 61)
LABEL_275:
                  sub_22E3B3F8C();
                v71 = (char *)operator new(8 * v70);
              }
              else
              {
                v71 = 0;
              }
              v72 = (uint64_t *)&v71[8 * v68];
              *v72 = v65;
              v66 = v72 + 1;
              if (v59 == v53)
              {
                v67 = v159;
              }
              else
              {
                v67 = v159;
                do
                {
                  v73 = *--v59;
                  *--v72 = v73;
                }
                while (v59 != v53);
              }
              v54 = (uint64_t *)&v71[8 * v70];
              if (v53)
                operator delete(v53);
              v53 = v72;
            }
            else
            {
              *v59 = v64;
              v66 = v59 + 1;
              v67 = v159;
            }
            v57 += 24;
            v59 = v66;
          }
          while (v57 != v58);
        }
        v74 = sub_22EFC3B90(v157);
        if (!v74)
          goto LABEL_262;
        v75 = v74;
        v152 = v67 + 40;
        v76 = v167;
        v77 = v160;
        break;
    }
LABEL_133:
    if (sub_22EFC2F84(v75, v156))
      goto LABEL_182;
    sub_22E5484B4(a1, *(_QWORD *)(v75 + 48), v77);
    v165 = v76;
    v166 = 0x200000000;
    if ((v77 & 2) != 0 && sub_22F270914(v75))
    {
      sub_22EFC8E88(v75);
      v124 = *v123;
      v125 = *((unsigned int *)v123 + 2);
      if ((_DWORD)v125 && *(_WORD *)(*v124 + 32) != 374)
      {
        v126 = 8 * v125 - 8;
        v127 = *v123;
        do
        {
          v128 = v127[1];
          ++v127;
          v126 -= 8;
        }
        while (*(_WORD *)(v128 + 32) != 374);
      }
      do
      {
        v130 = *v124++;
        v129 = v130;
      }
      while (*(_WORD *)(v130 + 32) != 374);
      sub_22E533554(a1, *(_QWORD *)(v129 + 40));
      v131 = llvm::air::AILocationIndexAttr::getImpl();
      v132 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v132 = v166;
      }
      v165[v132] = v131;
      LODWORD(v166) = v166 + 1;
      LOBYTE(v77) = v160;
    }
    if ((v160 & 0xC) != 0 && sub_22E53B01C(v75))
    {
      sub_22EFC8E88(v75);
      v79 = *v78;
      v80 = *((unsigned int *)v78 + 2);
      if ((_DWORD)v80 && *(_WORD *)(*v79 + 32) != 385)
      {
        v81 = 8 * v80 - 8;
        v82 = *v78;
        do
        {
          v83 = v82[1];
          ++v82;
          v81 -= 8;
        }
        while (*(_WORD *)(v83 + 32) != 385);
      }
      do
      {
        v85 = *v79++;
        v84 = v85;
      }
      while (*(_WORD *)(v85 + 32) != 385);
      sub_22E533554(a1, *(_QWORD *)(v84 + 40));
      v86 = llvm::air::AIRenderTargetAttr::getImpl();
      v87 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v87 = v166;
      }
      v165[v87] = v86;
      LODWORD(v166) = v166 + 1;
    }
    if ((v77 & 4) != 0 && sub_22E536E34(v75))
    {
      v88 = llvm::air::AITagOnlyAttr::getImpl();
      v89 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v89 = v166;
      }
      v165[v89] = v88;
      LODWORD(v166) = v166 + 1;
    }
    if ((v77 & 0x10) != 0 && sub_22E54AA28(v75))
    {
      sub_22E532CBC(v75);
      sub_22E533A54();
      v90 = llvm::air::AIFunctionConstantPredicateAttr::getImpl();
      v91 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v91 = v166;
      }
      v165[v91] = v90;
      LODWORD(v166) = v166 + 1;
    }
    if ((v77 & 4) != 0)
    {
      if (sub_22E53742C(v75))
      {
        v133 = llvm::air::AITagOnlyAttr::getImpl();
        v134 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v134 = v166;
        }
        v165[v134] = v133;
        LODWORD(v166) = v166 + 1;
      }
      if (sub_22E53748C(v75))
      {
        v135 = llvm::air::AITagOnlyAttr::getImpl();
        v136 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v136 = v166;
        }
        v165[v136] = v135;
        LODWORD(v166) = v166 + 1;
        if (sub_22E53D1F8(v75))
        {
          v137 = llvm::air::AITagOnlyAttr::getImpl();
          v138 = v166;
          if (v166 >= (unint64_t)HIDWORD(v166))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v138 = v166;
          }
          v165[v138] = v137;
          LODWORD(v166) = v166 + 1;
        }
      }
      if (sub_22E5374EC(v75))
      {
        v139 = llvm::air::AITagOnlyAttr::getImpl();
        v140 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v140 = v166;
        }
        v165[v140] = v139;
        LODWORD(v166) = v166 + 1;
      }
      if (sub_22E53754C(v75))
      {
        v141 = llvm::air::AITagOnlyAttr::getImpl();
        v142 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v142 = v166;
        }
        v165[v142] = v141;
        LODWORD(v166) = v166 + 1;
      }
      if (sub_22E5375AC(v75))
      {
        v143 = llvm::air::AITagOnlyAttr::getImpl();
        v144 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v144 = v166;
        }
        v165[v144] = v143;
        LODWORD(v166) = v166 + 1;
      }
      LOBYTE(v77) = v160;
      if (sub_22F26E334(v75))
      {
        v145 = llvm::air::AITagOnlyAttr::getImpl();
        v146 = v166;
        if (v166 >= (unint64_t)HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v146 = v166;
        }
        v165[v146] = v145;
        LODWORD(v166) = v166 + 1;
        LOBYTE(v77) = v160;
      }
    }
    if ((v77 & 0x20) != 0 && sub_22F26E908(v75))
    {
      v147 = llvm::air::AITagOnlyAttr::getImpl();
      v148 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v148 = v166;
      }
      v165[v148] = v147;
      LODWORD(v166) = v166 + 1;
      LOBYTE(v77) = v160;
    }
    if ((v77 & 0x40) == 0 || (*(_BYTE *)(v75 + 29) & 1) == 0)
      goto LABEL_174;
    sub_22EFC8E88(v75);
    v93 = *((unsigned int *)v92 + 2);
    if ((_DWORD)v93)
    {
      v94 = 8 * v93;
      v95 = *v92;
      while (*(_WORD *)(*(_QWORD *)v95 + 32) != 467)
      {
        v95 += 8;
        v94 -= 8;
        if (!v94)
          goto LABEL_174;
      }
    }
    else
    {
      v95 = *v92;
    }
    if (v95 != *v92 + 8 * v93)
    {
      sub_22EFC8E88(v75);
      v97 = *v96;
      v98 = *((unsigned int *)v96 + 2);
      if ((_DWORD)v98 && *(_WORD *)(*v97 + 32) != 467)
      {
        v99 = 8 * v98 - 8;
        v100 = *v96;
        do
        {
          v101 = v100[1];
          ++v100;
          v99 -= 8;
        }
        while (*(_WORD *)(v101 + 32) != 467);
      }
      do
        v102 = *v97++;
      while (*(_WORD *)(v102 + 32) != 467);
      v103 = llvm::air::AIUserAttr::getImpl();
      v104 = v166;
      if (v166 >= (unint64_t)HIDWORD(v166))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v104 = v166;
      }
      v165[v104] = v103;
      v105 = v166 + 1;
      LODWORD(v166) = v166 + 1;
    }
    else
    {
LABEL_174:
      v105 = v166;
    }
    v106 = v165;
    if (v105)
    {
      llvm::MDTuple::getImpl();
      v106 = v165;
    }
    if (v106 != v76)
      free(v106);
    if ((*(_BYTE *)(v75 + 68) & 1) != 0)
    {
      v153 = v76;
      v110 = v75;
      if ((*(_BYTE *)(v75 + 29) & 0x80) != 0)
        v110 = sub_22EFB5D7C(v75);
      v111 = *(unsigned int *)(sub_22E47ED6C(v152, v110) + 12);
      v151 = v151 & 0xFFFFFF0000000000 | (v111
                                          / sub_22EF5CDF0(v156, *(_QWORD *)(*(_QWORD *)(v156 + 16408) & 0xFFFFFFFFFFFFFFF0))) | 0x100000000;
      v116 = llvm::air::AIRecordField::getImpl();
      v117 = v116;
      if (v66 < v54)
      {
        *v66 = v116;
        v109 = v66 + 1;
        goto LABEL_217;
      }
      v118 = v66 - v53;
      v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 61)
        goto LABEL_274;
      if (((char *)v54 - (char *)v53) >> 2 > v119)
        v119 = ((char *)v54 - (char *)v53) >> 2;
      if ((unint64_t)((char *)v54 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
        v114 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v114 = v119;
      if (v114)
      {
        if (v114 >> 61)
          goto LABEL_275;
        v115 = (char *)operator new(8 * v114);
      }
      else
      {
        v115 = 0;
      }
      v120 = (uint64_t *)&v115[8 * v118];
      *v120 = v117;
      v109 = v120 + 1;
      while (v66 != v53)
      {
        v122 = *--v66;
        *--v120 = v122;
      }
    }
    else
    {
      sub_22EFC306C(v75);
      sub_22EF5CDF0(v156, *(_QWORD *)(*(_QWORD *)(v156 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v107 = llvm::air::AIRecordField::getImpl();
      v108 = v107;
      if (v66 < v54)
      {
        *v66++ = v107;
LABEL_182:
        v109 = v66;
        goto LABEL_218;
      }
      v112 = v66 - v53;
      v113 = v112 + 1;
      if ((unint64_t)(v112 + 1) >> 61)
        goto LABEL_274;
      if (((char *)v54 - (char *)v53) >> 2 > v113)
        v113 = ((char *)v54 - (char *)v53) >> 2;
      if ((unint64_t)((char *)v54 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8)
        v114 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v114 = v113;
      v153 = v76;
      if (v114)
      {
        if (v114 >> 61)
          goto LABEL_275;
        v115 = (char *)operator new(8 * v114);
      }
      else
      {
        v115 = 0;
      }
      v120 = (uint64_t *)&v115[8 * v112];
      *v120 = v108;
      v109 = v120 + 1;
      while (v66 != v53)
      {
        v121 = *--v66;
        *--v120 = v121;
      }
    }
    v54 = (uint64_t *)&v115[8 * v114];
    if (v53)
      operator delete(v53);
    v53 = v120;
LABEL_217:
    v76 = v153;
LABEL_218:
    while (1)
    {
      v75 = *(_QWORD *)(v75 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v75)
        break;
      if ((*(_DWORD *)(v75 + 28) & 0x7Fu) - 49 < 3)
      {
        v66 = v109;
        v77 = v160;
        goto LABEL_133;
      }
    }
    v66 = v109;
LABEL_262:
    if (v53 == v66)
      v149 = 0;
    else
      v149 = llvm::MDTuple::getImpl();
    if ((*((_QWORD *)v155 + 2) & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith();
    *(_QWORD *)(v154 + 24) = v149;
    Impl = (llvm::air::AIType *)llvm::air::AIRecordType::getImpl();
    if (v53)
      operator delete(v53);
    llvm::MDNode::deleteTemporary(v155, v150);
LABEL_270:
    if ((_QWORD *)__p != v164)
      free((void *)__p);
LABEL_272:
    if (SHIBYTE(v162) < 0)
    {
      v28 = (void *)v161;
LABEL_21:
      operator delete(v28);
    }
    return (uint64_t)Impl;
  }
  return sub_22F26F494(a1, a2, a3);
}

unint64_t sub_22E54A27C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = a2;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (sub_22E462B18(a2))
      v2 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
    v2 = sub_22E6280CC(v4, v2, 0, 0);
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v2);
  }
  return v2;
}

uint64_t sub_22E54A2FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  __int16 v20;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if ((sub_22F1110EC((uint64_t)v7, 0) & 1) == 0)
  {
    sub_22EF5CCD0(v8, (uint64_t)v7, (uint64_t)v19);
    sub_22EF5CDF0(v8, (uint64_t)v7);
    sub_22EF5CDF0(v8, *(_QWORD *)(*(_QWORD *)(v8 + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v9 = *(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 11;
  else
    v10 = 0;
  if (v10)
  {
    sub_22F1125EC(v9);
    return llvm::air::AIOpaqueType::getImpl();
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
    v13 = sub_22F41A810(*(_QWORD *)(v12 + 32), 3, "type %0 is not supported yet in the AIR type metadata; falling back to an opaque description. PLEASE submit "
            "a bug report to http://developer.apple.com/bugreporter/ and include a small example that reproduces the issue.",
            0xDAuLL);
    v14 = *(_QWORD *)(a1 + 824);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v12 + 312) = v14;
    *(_DWORD *)(v12 + 316) = v13;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v15 = (unsigned __int8 *)(v12 + 320);
    v19[0] = v12 + 320;
    v19[1] = 0;
    v19[2] = v12;
    v20 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v16 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v12 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
      LODWORD(v16) = *v15;
    }
    *(_DWORD *)(v12 + 776) = 0;
    v15[v16 + 1] = 9;
    *(_BYTE *)(v12 + 320) = v16 + 1;
    *(_QWORD *)&v15[8 * v16 + 16] = a2;
    sub_22E3BB0B8((uint64_t)v19);
    return llvm::air::AIOpaqueType::getImpl();
  }
}

uint64_t sub_22E54A534(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if ((sub_22F1110EC((uint64_t)v7, 0) & 1) == 0)
  {
    sub_22EF5CDF0(v8, (uint64_t)v7);
    sub_22EF5CDF0(v8, *(_QWORD *)(*(_QWORD *)(v8 + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  result = sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v10 = *(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v10 + 16) != 11)
    v10 = 0;
  v11 = (*(_DWORD *)(v10 + 16) >> 19) & 0x1FF;
  switch(v11)
  {
    case 165:
    case 166:
    case 167:
    case 168:
    case 173:
    case 174:
    case 175:
    case 176:
    case 178:
    case 179:
    case 181:
    case 182:
    case 183:
    case 184:
      result = llvm::air::AIBuiltinType::getImpl();
      break;
    case 169:
    case 170:
    case 171:
    case 172:
    case 177:
    case 180:
      __break(1u);
      break;
    default:
      __asm { BR              X10 }
      return result;
  }
  return result;
}

uint64_t sub_22E54A7A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t Impl;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if ((v4 & 8) != 0)
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v5 = (_QWORD *)*v5;
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(v5[1] & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2
    || !(v6 & 0xFFFFF800 | (unint64_t)(a4 & 1)))
  {
    return 0;
  }
  Impl = llvm::air::AIAddressSpaceTypeQual::getImpl();
  return llvm::MDTuple::getImpl();
}

uint64_t sub_22E54A900(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), "matrix", 6, 1, 0);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "matrix", 6, 1, 0))return 0;
  return sub_22F10CF48(v1);
}

unint64_t sub_22E54A994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD v8[6];

  if ((sub_22F1110EC(a2, 0) & 1) != 0)
    return 0;
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2, (uint64_t)v8);
  v4 = v8[0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  sub_22EF5CDF0(v5, a2);
  return v4 | ((v6 / (unint64_t)sub_22EF5CDF0(v5, *(_QWORD *)(*(_QWORD *)(v5 + 16408) & 0xFFFFFFFFFFFFFFF0))) << 32);
}

BOOL sub_22E54AA28(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E54D73C(*(_QWORD *)v2, *(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8));
}

uint64_t sub_22E54AA64(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 7 && *(_DWORD *)v2 == 1853175922 && *(_DWORD *)(v2 + 3) == 1836216174;
  }
  return result;
}

uint64_t sub_22E54AAB4(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 7 && *(_DWORD *)v2 == 1853044850 && *(_DWORD *)(v2 + 3) == 1836216174;
  }
  return result;
}

uint64_t sub_22E54AB04(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 8 && *(_QWORD *)v2 == 0x6D726F6E75363172;
  }
  return result;
}

uint64_t sub_22E54AB4C(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 8 && *(_QWORD *)v2 == 0x6D726F6E73363172;
  }
  return result;
}

uint64_t sub_22E54AB94(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 8 && *(_QWORD *)v2 == 0x6D726F6E75386772;
  }
  return result;
}

uint64_t sub_22E54ABDC(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 8 && *(_QWORD *)v2 == 0x6D726F6E73386772;
  }
  return result;
}

uint64_t sub_22E54AC24(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 9 && *(_QWORD *)v2 == 0x726F6E7536316772 && v2[8] == 109;
  }
  return result;
}

uint64_t sub_22E54AC78(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 9 && *(_QWORD *)v2 == 0x726F6E7336316772 && v2[8] == 109;
  }
  return result;
}

uint64_t sub_22E54ACCC(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 10 && *(_QWORD *)v2 == 0x6F6E753861626772 && *((_WORD *)v2 + 4) == 28018;
  }
  return result;
}

uint64_t sub_22E54AD20(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 10 && *(_QWORD *)v2 == 0x6F6E733861626772 && *((_WORD *)v2 + 4) == 28018;
  }
  return result;
}

uint64_t sub_22E54AD74(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 11 && *(_QWORD *)v2 == 0x6E75363161626772 && *(_QWORD *)(v2 + 3) == 0x6D726F6E75363161;
  }
  return result;
}

uint64_t sub_22E54ADD4(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 11 && *(_QWORD *)v2 == 0x6E73363161626772 && *(_QWORD *)(v2 + 3) == 0x6D726F6E73363161;
  }
  return result;
}

uint64_t sub_22E54AE34(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 11 && *(_QWORD *)v2 == 0x6E75386162677273 && *(_QWORD *)(v2 + 3) == 0x6D726F6E75386162;
  }
  return result;
}

uint64_t sub_22E54AE94(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 7 && *(_DWORD *)v2 == 828532594 && *(_DWORD *)(v2 + 3) == 845230129;
  }
  return result;
}

uint64_t sub_22E54AEE4(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 8 && *(_QWORD *)v2 == 0x6630316231316772;
  }
  return result;
}

uint64_t sub_22E54AF2C(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22F270974(a1);
  if (result)
  {
    v2 = sub_22F10C83C(result);
    return v3 == 6 && *(_DWORD *)v2 == 962750322 && *((_WORD *)v2 + 2) == 13669;
  }
  return result;
}

uint64_t sub_22E54AF78(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10C510(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10C510(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22E54AFCC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10C1B4(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

void sub_22E54B020(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  llvm::raw_ostream *v19;
  _WORD *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  const void *p_p;
  size_t v29;
  uint64_t v30;
  const void *v31;
  void *__p;
  size_t v33;
  char v34;
  void *v35;
  __int128 v36;
  _WORD v37[5];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) == 0 && v5 != 0)
    goto LABEL_18;
  v7 = (v4 & 7) == 0 && v4 > 7;
  if (!v7 && (*(_DWORD *)(a2 + 28) & 0x7F) == 16)
  {
    v12 = (llvm::raw_ostream *)a1[1];
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xDuLL)
    {
      qmemcpy(v13, "12_GLOBAL__N_1", 14);
      *((_QWORD *)v12 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v12, "12_GLOBAL__N_1");
    }
    return;
  }
  v9 = *(_QWORD *)(a2 + 120);
  if ((v9 & 4) == 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 40);
      if ((v11 & 7) != 0)
        v5 = 0;
      else
        v5 = v11 & 0xFFFFFFFFFFFFFFF8;
LABEL_18:
      sub_22E54B3A4(a1[1], v5);
      return;
    }
  }
  v14 = sub_22EFB948C(a2);
  v15 = *a1;
  if (v14 >= 3)
  {
    v16 = *(_QWORD *)(v15 + 144);
    v35 = (void *)a2;
    v17 = sub_22EF7402C(v16 + 1800, (uint64_t *)&v35);
    if (*(_QWORD *)(v16 + 1832) == v17)
      v18 = 1;
    else
      v18 = *(_DWORD *)(v17 + 8);
    v19 = (llvm::raw_ostream *)a1[1];
    v20 = (_WORD *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 1uLL)
    {
      *v20 = 29781;
      *((_QWORD *)v19 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v19, "Ut");
    }
    if (v18 >= 2)
      llvm::raw_ostream::operator<<();
    v21 = (llvm::raw_ostream *)a1[1];
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
    {
      llvm::raw_ostream::write(v21);
    }
    else
    {
      *((_QWORD *)v21 + 4) = v22 + 1;
      *v22 = 95;
    }
    return;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v15 + 224) + 16);
  v24 = v23 + 80;
  v25 = *(unsigned int *)(v23 + 88);
  __p = (void *)a2;
  v33 = v25;
  sub_22F270EE0(v24, &__p, (uint64_t *)&v33, (uint64_t)&v35);
  v26 = *((unsigned int *)v35 + 2);
  v35 = v37;
  v37[0] = 24356;
  v36 = xmmword_22F45ABF0;
  if (v26)
  {
    v27 = (char *)&v39;
    do
    {
      *--v27 = (v26 % 0xA) | 0x30;
      v7 = v26 > 9;
      v26 /= 0xAuLL;
    }
    while (v7);
  }
  else
  {
    v27 = &v38;
    v38 = 48;
  }
  sub_22E3B4274(&__p, v27, (char *)&v39, (char *)&v39 - v27);
  if (v34 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v34 >= 0)
    v29 = v34 & 0x7F;
  else
    v29 = v33;
  v30 = v36;
  if (*((_QWORD *)&v36 + 1) < (unint64_t)v36 + v29)
  {
    v31 = p_p;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    p_p = v31;
    v30 = v36;
    if (!v29)
      goto LABEL_47;
    goto LABEL_46;
  }
  if (v29)
  {
LABEL_46:
    memcpy((char *)v35 + v30, p_p, v29);
    v30 = v36;
  }
LABEL_47:
  *(_QWORD *)&v36 = v30 + v29;
  if (v34 < 0)
    operator delete(__p);
  llvm::raw_ostream::operator<<();
  llvm::raw_ostream::write((llvm::raw_ostream *)a1[1], (const char *)v35);
  if (v35 != v37)
    free(v35);
}

void *sub_22E54B3A4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _DWORD *v4;
  const char *v5;
  size_t v6;
  unsigned int v7;
  void *result;

  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v4 = *(_DWORD **)(a2 + 16);
  v7 = *v4;
  v5 = (const char *)(v4 + 4);
  v6 = v7;
  result = (void *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v7 > *((_QWORD *)v3 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v3, v5);
  if (v6)
  {
    result = memcpy(result, v5, v6);
    *((_QWORD *)v3 + 4) += v6;
  }
  return result;
}

_QWORD *sub_22E54B414(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F27101C(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E54B4D4(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  if (*(char *)(a1 + 831) < 0)
    operator delete(*(void **)(a1 + 808));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  if (*(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));
  if (*(char *)(a1 + 695) < 0)
    operator delete(*(void **)(a1 + 672));
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  v3 = (void **)(a1 + 624);
  sub_22E54B658(&v3);
  sub_22E54B6D0(a1 + 600, *(_QWORD **)(a1 + 608));
  v3 = (void **)(a1 + 576);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 544);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 520);
  sub_22E3B3CC8(&v3);
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  v3 = (void **)(a1 + 376);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 352);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 328);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 304);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 280);
  sub_22E3B3CC8(&v3);
  return a1;
}

void sub_22E54B658(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E54B6D0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22E54B6D0(a1, *a2);
    sub_22E54B6D0(a1, a2[1]);
    sub_22E54B71C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_22E54B71C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E54B75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_22E54B7C0(a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22E54B7C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_22E54B858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t Impl;
  uint64_t v40;
  std::string __dst;
  void *v42[2];
  char v43;

  v7 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22E5453EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  if (v9)
  {
    sub_22F409218(v9);
  }
  else if (sub_22E5457C4(*v8))
  {
    sub_22EFC8E88(a2);
    v11 = *v10;
    v12 = *((unsigned int *)v10 + 2);
    if ((_DWORD)v12 && *(_WORD *)(*v11 + 32) != 373)
    {
      v13 = 8 * v12 - 8;
      v14 = *v10;
      do
      {
        v15 = v14[1];
        ++v14;
        v13 -= 8;
      }
      while (*(_WORD *)(v15 + 32) != 373);
    }
    do
    {
      v17 = *v11++;
      v16 = v17;
    }
    while (*(_WORD *)(v17 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v16 + 40));
  }
  v18 = (uint64_t *)(sub_22F10BBF4(*v8) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_22F10ACF8(*v18);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1
    || (v20 = *(_QWORD *)((sub_22F10ACF8(*v18) & 0xFFFFFFFFFFFFFFF0) + 8), (v20 & 8) == 0)
    || (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
  {
    if (sub_22F10AFE4(v19, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
    {
      for (i = v19; ; i = *(_QWORD *)(v24 + 32))
      {
        v22 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        if (v22)
          v23 = (*(_DWORD *)(v22 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v23 = 0;
        if (v23)
        {
          v24 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        }
        else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
               || (v24 = sub_22F10CF48(v22)) == 0)
        {
          v25 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF0);
          if ((sub_22F1110EC(*v25, 0) & 1) == 0)
          {
            v40 = sub_22F10C2A4(*v25);
            if (v40)
            {
              if ((*(_DWORD *)(v40 + 28) & 0x7Fu) - 35 <= 2)
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v40 + 104) + 96), *(_QWORD *)(v40 + 104));
            }
          }
          break;
        }
      }
    }
  }
  v42[0] = (void *)0x8000000500000002;
  v42[1] = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 16), v42);
  if (!sub_22E547064(a1, v19, 0, v26))
    sub_22E547C80(a1, v19, 0, v27);
  v28 = *(_QWORD *)(a1 + 824);
  if ((!v28 || sub_22E88FFC4(v28)) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v30 = *(uint64_t **)v29;
    v31 = *(unsigned int *)(v29 + 8);
    v32 = *(uint64_t **)v29;
    if ((_DWORD)v31)
    {
      v33 = 8 * v31;
      v32 = *(uint64_t **)v29;
      while (*(_WORD *)(*v32 + 32) != 439)
      {
        ++v32;
        v33 -= 8;
        if (!v33)
          goto LABEL_38;
      }
    }
    if (v32 != &v30[v31])
    {
      do
      {
        v35 = *v30++;
        v34 = v35;
      }
      while (*(_WORD *)(v35 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v34 + 40));
    }
  }
LABEL_38:
  sub_22E53C678(a1, a2);
  sub_22E5482FC(a1, (uint64_t)v18);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v42[0] = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, v42) & 1) != 0)
    v36 = v42[0];
  else
    v36 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v36[1]);
  sub_22E53C558(a1, v19);
  sub_22E53C5C0(a1, v19);
  v37 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v37 + 248))(v42, v37, *(_QWORD *)(a1 + 8), v7, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  return Impl;
}

uint64_t sub_22E54BD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t Impl;
  uint64_t v41;
  uint64_t v42;
  std::string __dst;
  void *v44[2];
  char v45;

  v42 = sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 48));
  v11 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22E5453EC(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0));
  if (v12)
  {
    sub_22F409218(v12);
  }
  else if (sub_22E5457C4(*v11))
  {
    sub_22EFC8E88(a2);
    v14 = *v13;
    v15 = *((unsigned int *)v13 + 2);
    if ((_DWORD)v15 && *(_WORD *)(*v14 + 32) != 373)
    {
      v16 = 8 * v15 - 8;
      v17 = *v13;
      do
      {
        v18 = v17[1];
        ++v17;
        v16 -= 8;
      }
      while (*(_WORD *)(v18 + 32) != 373);
    }
    do
    {
      v20 = *v14++;
      v19 = v20;
    }
    while (*(_WORD *)(v20 + 32) != 373);
    sub_22E533554(a1, *(_QWORD *)(v19 + 40));
  }
  v21 = (uint64_t *)(sub_22F10BBF4(*v11) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_22F10ACF8(*v21);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1
    || (v23 = *(_QWORD *)((sub_22F10ACF8(*v21) & 0xFFFFFFFFFFFFFFF0) + 8), (v23 & 8) == 0)
    || (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
  {
    if (sub_22F10AFE4(v22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144)))
    {
      for (i = v22; ; i = *(_QWORD *)(v27 + 32))
      {
        v25 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        if (v25)
          v26 = (*(_DWORD *)(v25 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v26 = 0;
        if (v26)
        {
          v27 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        }
        else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
               || (v27 = sub_22F10CF48(v25)) == 0)
        {
          v28 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
          if ((sub_22F1110EC(*v28, 0) & 1) == 0)
          {
            v41 = sub_22F10C2A4(*v28);
            if (v41)
            {
              if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 35 <= 2)
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v41 + 104) + 96), *(_QWORD *)(v41 + 104));
            }
          }
          break;
        }
      }
    }
  }
  v44[0] = (void *)0x8000000500000002;
  v44[1] = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 16), v44);
  if (!sub_22E547064(a1, v22, a5, a6))
    sub_22E547C80(a1, v22, a5, a6);
  v29 = *(_QWORD *)(a1 + 824);
  if ((!v29 || sub_22E88FFC4(v29)) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v31 = *(uint64_t **)v30;
    v32 = *(unsigned int *)(v30 + 8);
    v33 = *(uint64_t **)v30;
    if ((_DWORD)v32)
    {
      v34 = 8 * v32;
      v33 = *(uint64_t **)v30;
      while (*(_WORD *)(*v33 + 32) != 439)
      {
        ++v33;
        v34 -= 8;
        if (!v34)
          goto LABEL_38;
      }
    }
    if (v33 != &v31[v32])
    {
      do
      {
        v36 = *v31++;
        v35 = v36;
      }
      while (*(_WORD *)(v36 + 32) != 439);
      sub_22E533554(a1, *(_QWORD *)(v35 + 40));
    }
  }
LABEL_38:
  sub_22E53C678(a1, a2);
  sub_22E5482FC(a1, (uint64_t)v21);
  __dst.__r_.__value_.__r.__words[0] = a2;
  v44[0] = 0;
  if ((sub_22E54D014((uint64_t *)a4, &__dst, v44) & 1) != 0)
    v37 = v44[0];
  else
    v37 = (_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
  sub_22E533554(a1, v37[1]);
  sub_22E53C558(a1, v22);
  sub_22E53C5C0(a1, v22);
  v38 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v38 + 248))(v44, v38, *(_QWORD *)(a1 + 8), v42, 1);
  sub_22E545858(&__dst, a1, a2);
  Impl = llvm::air::AIBuffer::getImpl();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v45 < 0)
    operator delete(v44[0]);
  return Impl;
}

uint64_t sub_22E54C2C8(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v2 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    return llvm::detail::DoubleAPFloat::makeZero(v1);
  else
    return llvm::detail::IEEEFloat::makeZero(v1);
}

llvm::APFloatBase *sub_22E54C320(llvm::APFloatBase *a1, uint64_t a2)
{
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  return a1;
}

uint64_t sub_22E54C37C(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v2 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    return llvm::detail::DoubleAPFloat::makeLargest(v1);
  else
    return llvm::detail::IEEEFloat::makeLargest(v1);
}

const llvm::detail::IEEEFloat *sub_22E54C3D4(const llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v5 = llvm::APFloatBase::PPCDoubleDouble(a1);
  v6 = *(_QWORD *)a2;
  if (v5 == v4 || v5 == v6)
  {
    v8 = v5;
    if (v5 == v4 && v5 == v6)
    {
      llvm::detail::DoubleAPFloat::operator=();
    }
    else if (a1 != a2)
    {
      if (v5 == v4)
        sub_22E463170((const llvm::detail::IEEEFloat *)((char *)a1 + 8));
      else
        llvm::detail::IEEEFloat::~IEEEFloat(a1);
      if (v8 == *(_QWORD *)a2)
        MEMORY[0x23489F2A0](a1, a2);
      else
        llvm::detail::IEEEFloat::IEEEFloat(a1, a2);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::operator=();
  }
  return a1;
}

uint64_t sub_22E54C490(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = result;
      if (*(_DWORD *)(result + 8) >= 0x41u)
      {
        if (*(_QWORD *)result)
          MEMORY[0x2348A0E84](*(_QWORD *)result, 0x1000C8000313F17);
      }
      result = v4;
      *(_QWORD *)v4 = *(_QWORD *)a2;
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(v4 + 12) = *(_BYTE *)(a2 + 12);
    }
    else
    {
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
      *(_BYTE *)(result + 16) = 1;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v3 = result;
    if (*(_DWORD *)(result + 8) >= 0x41u && *(_QWORD *)result)
      MEMORY[0x2348A0E84](*(_QWORD *)result, 0x1000C8000313F17);
    result = v3;
    *(_BYTE *)(v3 + 16) = 0;
  }
  return result;
}

unint64_t *sub_22E54C570(unint64_t *result, unsigned int a2)
{
  unint64_t v2;

  v2 = *result;
  if ((*result & 1) != 0)
    *result = v2 & 0xFC00000000000000 | (2
                                         * (((v2 >> 1) & ~(-1 << (v2 >> 58)) | (1 << a2)) & ~(-1 << (v2 >> 58)))) | 1;
  else
    *(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 6)) |= 1 << a2;
  return result;
}

void ***sub_22E54C5D0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if ((*a1 & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x1080C40EF38A13ELL);
  }
  return a1;
}

void sub_22E54C62C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54C640(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA64078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E54C678(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA64078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_22E54C698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22E4D8D7C(*(_QWORD *)(a1 + 8), *(unsigned int **)(*(_QWORD *)(a1 + 16)+ ((unint64_t)**(unsigned int **)(a1 + 16) >> 24)+ 8 * (((unint64_t)**(unsigned int **)(a1 + 16) >> 18) & 1)+ 24), a2);
}

void sub_22E54C6BC()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54C6D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FA640C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E54C708(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FA640C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_22E54C728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22E4D8D7C(*(_QWORD *)(a1 + 8), *(unsigned int **)(*(_QWORD *)(a1 + 16)+ ((unint64_t)**(unsigned int **)(a1 + 16) >> 24)+ 8 * (((unint64_t)**(unsigned int **)(a1 + 16) >> 18) & 1)+ 24), a2);
}

uint64_t sub_22E54C748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p[2];
  char v9;

  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  sub_22F26E908(a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlySharedReturnType::getImpl();
  if (v9 < 0)
    operator delete(__p[0]);
  return Impl;
}

uint64_t sub_22E54C880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p[2];
  char v9;

  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  sub_22F26E908(a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlySharedReturnType::getImpl();
  if (v9 < 0)
    operator delete(__p[0]);
  return Impl;
}

uint64_t sub_22E54C9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p[2];
  char v9;

  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  sub_22F26E908(a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlySharedReturnType::getImpl();
  if (v9 < 0)
    operator delete(__p[0]);
  return Impl;
}

uint64_t sub_22E54CAF0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  std::string __p;
  void *v11;
  char v12;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&v11, v7, *(_QWORD *)(a1 + 8), v6, 1);
  sub_22E545218(&__p, a2, a3);
  Impl = llvm::air::AITagOnlyArgument::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11);
  return Impl;
}

uint64_t sub_22E54CC14(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  std::string __p;
  void *v11;
  char v12;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&v11, v7, *(_QWORD *)(a1 + 8), v6, 1);
  sub_22E545218(&__p, a2, a3);
  Impl = llvm::air::AITagOnlyArgument::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11);
  return Impl;
}

uint64_t sub_22E54CD38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Impl;
  std::string __p;
  void *v11;
  char v12;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 248))(&v11, v7, *(_QWORD *)(a1 + 8), v6, 1);
  sub_22E545218(&__p, a2, a3);
  Impl = llvm::air::AITagOnlyArgument::getImpl();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11);
  return Impl;
}

BOOL sub_22E54CE5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;

  v2 = a2;
  if (a1 >= a2)
  {
    if (a2 == a1)
    {
      v4 = a1;
      v2 = a1;
    }
    else
    {
      v6 = a2;
      while ((sub_22EFA5594(*v6) & 1) == 0)
      {
        ++v6;
        v4 = a1;
        v2 = a1;
        if (v6 == a1)
          return v2 == v4;
      }
      v2 = a1;
      v4 = v6;
    }
  }
  else
  {
    v3 = a1;
    while ((sub_22EFA5594(*v3) & 1) == 0)
    {
      ++v3;
      v4 = v2;
      if (v3 == v2)
        return v2 == v4;
    }
    v4 = v2;
    v2 = v3;
  }
  return v2 == v4;
}

uint64_t sub_22E54CF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p;
  char v9;

  sub_22E53C678(a1, a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(&__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlyArgument::getImpl();
  if (v9 < 0)
    operator delete(__p);
  return Impl;
}

uint64_t sub_22E54D014(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_9;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_22E54D0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p[2];
  char v9;

  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  sub_22F26E908(a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlySharedReturnType::getImpl();
  if (v9 < 0)
    operator delete(__p[0]);
  return Impl;
}

uint64_t sub_22E54D1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  void *__p[2];
  char v9;

  __p[0] = (void *)0x8000000000000002;
  __p[1] = 0;
  if ((sub_22E3B38EC((_DWORD *)(a1 + 16), __p) & 1) == 0)
    sub_22E53C678(a1, a2);
  sub_22F26E908(a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = sub_22E699F3C(*(_QWORD **)(a1 + 8));
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(__p, v5, *(_QWORD *)(a1 + 8), v4, 1);
  Impl = llvm::air::AITagOnlySharedReturnType::getImpl();
  if (v9 < 0)
    operator delete(__p[0]);
  return Impl;
}

uint64_t sub_22E54D320(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_BYTE *sub_22E54D3B4(_BYTE *result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *result & 1;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    v22 = *result & 1;
    v28 = result;
    v35 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = v22;
    result = v28;
    a2 = v35;
    v3 = *(_DWORD *)(v35 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v3) = v2;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  v6 = *result;
  if (v5 >= v4)
  {
    v23 = *result;
    v29 = result;
    v36 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v23;
    result = v29;
    a2 = v36;
    v5 = *(_DWORD *)(v36 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = (v6 >> 1) & 1;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = *result;
  if (v8 >= v7)
  {
    v24 = *result;
    v30 = result;
    v37 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v24;
    result = v30;
    a2 = v37;
    v8 = *(_DWORD *)(v37 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = (v9 >> 2) & 1;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *result;
  if (v11 >= v10)
  {
    v25 = *result;
    v31 = result;
    v38 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v25;
    result = v31;
    a2 = v38;
    v11 = *(_DWORD *)(v38 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v11) = (v12 >> 3) & 1;
  v13 = *(_DWORD *)(a2 + 12);
  v14 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v14;
  v15 = *result;
  if (v14 >= v13)
  {
    v26 = *result;
    v32 = result;
    v39 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v26;
    result = v32;
    a2 = v39;
    v14 = *(_DWORD *)(v39 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v14) = (v15 >> 4) & 1;
  v16 = *(_DWORD *)(a2 + 12);
  v17 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v17;
  v18 = *result;
  if (v17 >= v16)
  {
    v27 = *result;
    v33 = result;
    v40 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v27;
    result = v33;
    a2 = v40;
    v17 = *(_DWORD *)(v40 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = (v18 >> 5) & 1;
  v19 = *(_DWORD *)(a2 + 12);
  v20 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v20;
  v21 = *result;
  if (v20 >= v19)
  {
    v34 = *result;
    v41 = a2;
    result = (_BYTE *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = v34;
    a2 = v41;
    v20 = *(_DWORD *)(v41 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = (v21 >> 6) & 1;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E54D64C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24FA63F70;
  if (*(_BYTE *)(a1 + 840))
    *(_BYTE *)(a1 + 840) = 0;
  sub_22F271570(a1 + 776);
  sub_22F271570(a1 + 728);
  sub_22F2715B8(a1 + 680);
  llvm::deallocate_buffer(*(llvm **)(a1 + 656), (void *)(16 * *(unsigned int *)(a1 + 672)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 632), (void *)(16 * *(unsigned int *)(a1 + 648)));
  sub_22F244D40(a1 + 584);
  v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(_QWORD *)(a1 + 568) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 536), (void *)(32 * *(unsigned int *)(a1 + 552)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 512), (void *)(16 * *(unsigned int *)(a1 + 528)));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 496));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 480));
  v3 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

BOOL sub_22E54D73C(unint64_t a1, unint64_t a2)
{
  if (a1 >= a2)
  {
    while (a2 != a1)
    {
      if (*(_WORD *)(*(_QWORD *)a2 + 32) == 210 && *(_BYTE *)(*(_QWORD *)a2 + 48))
        return a1 == a2;
      a2 += 8;
    }
    a2 = a1;
  }
  else
  {
    while (*(_WORD *)(*(_QWORD *)a1 + 32) != 210 || !*(_BYTE *)(*(_QWORD *)a1 + 48))
    {
      a1 += 8;
      if (a1 == a2)
      {
        a1 = a2;
        return a1 == a2;
      }
    }
  }
  return a1 == a2;
}

llvm::Value *sub_22E54D7A8(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t Declaration;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _QWORD v23[3];

  v23[2] = a3;
  if (a3 && *(_BYTE *)(a3 + 8) == 18)
  {
    v23[1] = *(_QWORD *)(a3 + 24);
    (*(void (**)(_QWORD))(*(_QWORD *)**a1 + 64))(**a1);
    Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
    v6 = llvm::UndefValue::get();
    v7 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = llvm::ConstantInt::get();
        v10 = v9;
        if (Declaration)
          v11 = *(_QWORD *)(Declaration + 24);
        else
          v11 = 0;
        v12 = a1[2];
        v23[0] = v9;
        v22 = 257;
        v13 = sub_22E462B78(v12, v11, Declaration, (uint64_t)v23, 1, (uint64_t)v21, 0);
        v20 = 257;
        v6 = sub_22E3ED5D4(v12, v6, (uint64_t)v13, v10, (uint64_t)v19);
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)**a1 + 64))(**a1);
    v14 = llvm::air::AIRFunctionInfo::getDeclaration();
    v15 = v14;
    v16 = a1[2];
    if (v14)
      v17 = *(_QWORD *)(v14 + 24);
    else
      v17 = 0;
    v19[0] = llvm::ConstantInt::get();
    v22 = 257;
    return sub_22E462B78(v16, v17, v15, (uint64_t)v19, 1, (uint64_t)v21, 0);
  }
  return (llvm::Value *)v6;
}

_QWORD *sub_22E54D95C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F271848(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_OWORD *sub_22E54DA1C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E54DAEC(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F4572A0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E54DAEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F4572A0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_22F271990((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *(_OWORD *)a2;
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

char *sub_22E54DBA4(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

uint64_t sub_22E54DCBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F25AFD8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E4D1B3C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

void sub_22E54DD50()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54DD64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24FA64108;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E54DDBC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FA64108;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

double sub_22E54DDFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13[2];
  uint64_t v14;
  __int128 v15[3];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 16);
  v11 = v4;
  v12 = *(_OWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  sub_22E6281E0(*(_QWORD **)(v3 + 144), v5, (uint64_t)v8);
  v15[0] = v10;
  v15[1] = v11;
  v15[2] = v12;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v13[0] = v8[0];
  v13[1] = v8[1];
  v14 = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 84) = 2;
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)&result = sub_22E3C113C(a2, v15, v5, 2, v13, v6).n128_u64[0];
  return result;
}

void sub_22E54DEC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54DEDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v2 = &off_24FA64150;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22E54DF5C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = &off_24FA64150;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

double sub_22E54DFC4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 128);
  v9[6] = *(_OWORD *)(a1 + 112);
  v9[7] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v9[2] = *(_OWORD *)(a1 + 48);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 96);
  v9[4] = *(_OWORD *)(a1 + 80);
  v9[5] = v6;
  v7 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v7;
  return sub_22E4EC638(v3, (uint64_t)v9, v2, a2);
}

void sub_22E54E014(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_72:
      *(_QWORD *)v6 = v8;
      goto LABEL_73;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v36 = &v34[8 * v33];
        v38 = v6 - v7;
        v37 = v6 == v7;
        v6 = v35;
        if (!v37)
        {
          v6 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = 8 * (v38 >> 3);
          v40 = &v34[8 * (v33 >> 2)];
          do
          {
            v41 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
        }
        goto LABEL_30;
      }
LABEL_84:
      sub_22E3B3F8C();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_72;
  }
  v18 = *(char **)(a1 + 16);
  v19 = *(char **)(a1 + 24);
  v21 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  v22 = v18 - v20;
  v23 = (v18 - v20) >> 3;
  v24 = (uint64_t)&v19[-*(_QWORD *)a1];
  if (v23 < (unint64_t)(v24 >> 3))
  {
    v25 = operator new(0x1180uLL);
    v26 = v25;
    if (v19 != v18)
    {
      *(_QWORD *)v18 = v25;
LABEL_73:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v20 == v21)
    {
      if (v18 == v20)
        v59 = 1;
      else
        v59 = v24 >> 2;
      if (v59 >> 61)
        goto LABEL_84;
      v60 = (char *)operator new(8 * v59);
      v42 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
      v61 = v42;
      if (v18 != v20)
      {
        v62 = 8 * v23;
        v63 = &v60[(2 * v59 + 6) & 0xFFFFFFFFFFFFFFF8];
        v64 = v20;
        v61 = &v42[8 * v23];
        do
        {
          v65 = *(_QWORD *)v64;
          v64 += 8;
          *(_QWORD *)v63 = v65;
          v63 += 8;
          v62 -= 8;
        }
        while (v62);
      }
      *(_QWORD *)a1 = v60;
      *(_QWORD *)(a1 + 8) = v42;
      *(_QWORD *)(a1 + 16) = v61;
      *(_QWORD *)(a1 + 24) = &v60[8 * v59];
      if (v20)
      {
        operator delete(v20);
        v42 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v42 = v20;
    }
    *((_QWORD *)v42 - 1) = v26;
    v7 = *(char **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_72;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v66 = 1;
      else
        v66 = (v6 - v10) >> 2;
      if (!(v66 >> 61))
      {
        v34 = (char *)operator new(8 * v66);
        v35 = &v34[8 * (v66 >> 2)];
        v36 = &v34[8 * v66];
        v67 = v6 - v7;
        v37 = v6 == v7;
        v6 = v35;
        if (!v37)
        {
          v6 = &v35[v67 & 0xFFFFFFFFFFFFFFF8];
          v68 = 8 * (v67 >> 3);
          v69 = &v34[8 * (v66 >> 2)];
          do
          {
            v70 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v69 = v70;
            v69 += 8;
            v68 -= 8;
          }
          while (v68);
        }
LABEL_30:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v36;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_72;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  if (v19 == v21)
    v27 = 1;
  else
    v27 = v24 >> 2;
  if (v27 >> 61)
    goto LABEL_84;
  v28 = (char *)operator new(8 * v27);
  v29 = &v28[8 * v23];
  v30 = &v28[8 * v27];
  v31 = operator new(0x1180uLL);
  if (v23 == v27)
  {
    if (v22 < 1)
    {
      if (v18 == v20)
        v43 = 1;
      else
        v43 = v22 >> 2;
      if (v43 >> 61)
        goto LABEL_84;
      v29 = (char *)operator new(8 * v43);
      v30 = &v29[8 * v43];
      operator delete(v28);
      v20 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v29;
    }
    else
    {
      v32 = v23 + 2;
      if (v23 >= -1)
        v32 = v23 + 1;
      v29 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v29 = v31;
  v44 = v29 + 8;
  if (v18 != v20)
  {
    while (1)
    {
      if (v29 == v28)
      {
        if (v44 >= v30)
        {
          if (v30 == v29)
            v49 = 1;
          else
            v49 = (v30 - v29) >> 2;
          if (v49 >> 61)
            goto LABEL_84;
          v50 = (char *)operator new(8 * v49);
          v28 = v50;
          v45 = &v50[(2 * v49 + 6) & 0xFFFFFFFFFFFFFFF8];
          v46 = v45;
          v51 = v44 - v29;
          if (v44 != v29)
          {
            v46 = &v45[v51 & 0xFFFFFFFFFFFFFFF8];
            v52 = 8 * (v51 >> 3);
            v53 = &v50[(2 * v49 + 6) & 0xFFFFFFFFFFFFFFF8];
            v54 = v29;
            do
            {
              v55 = *(_QWORD *)v54;
              v54 += 8;
              *(_QWORD *)v53 = v55;
              v53 += 8;
              v52 -= 8;
            }
            while (v52);
          }
          v30 = &v50[8 * v49];
          operator delete(v29);
        }
        else
        {
          v47 = (v30 - v44) >> 3;
          if (v47 >= -1)
            v48 = v47 + 1;
          else
            v48 = v47 + 2;
          v46 = &v44[8 * (v48 >> 1)];
          v45 = &v29[8 * (v48 >> 1)];
          if (v44 == v29)
          {
            v28 = v44;
          }
          else
          {
            memmove(&v29[8 * (v48 >> 1)], v29, v44 - v29);
            v28 = v29;
          }
        }
      }
      else
      {
        v45 = v29;
        v46 = v44;
      }
      v56 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v45 - 1) = v56;
      v57 = v45 - 8;
      v44 = v46;
      v29 = v57;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_60;
    }
  }
  v57 = v29;
  v46 = v29 + 8;
LABEL_60:
  v58 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v57;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v30;
  if (v58)
    operator delete(v58);
}

void sub_22E54E464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    sub_22F271EAC(a1);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)a1 + 40 * v7;
    do
    {
      v9 = *(_QWORD *)(v4 + 24);
      if (v9)
      {
        if (v4 == v9)
        {
          *(_QWORD *)(v8 + 24) = v8;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 24) + 24))(*(_QWORD *)(v4 + 24), v8);
        }
        else
        {
          *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      else
      {
        *(_QWORD *)(v8 + 24) = 0;
      }
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v4 + 32);
      v4 += 40;
      v8 += 40;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

void sub_22E54E54C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54E560(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v2 = &off_24FA64198;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22E54E5E0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = &off_24FA64198;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

double sub_22E54E648@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 128);
  v9[6] = *(_OWORD *)(a1 + 112);
  v9[7] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v9[2] = *(_OWORD *)(a1 + 48);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 96);
  v9[4] = *(_OWORD *)(a1 + 80);
  v9[5] = v6;
  v7 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v7;
  return sub_22E4EC638(v3, (uint64_t)v9, v2, a2);
}

void sub_22E54E69C()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E54E6B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v2 = &off_24FA641E0;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22E54E730(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = &off_24FA641E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

double sub_22E54E798@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 128);
  v9[6] = *(_OWORD *)(a1 + 112);
  v9[7] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v9[2] = *(_OWORD *)(a1 + 48);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 96);
  v9[4] = *(_OWORD *)(a1 + 80);
  v9[5] = v6;
  v7 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v7;
  return sub_22E4EC638(v3, (uint64_t)v9, v2, a2);
}

BOOL sub_22E54E7E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;

  v2 = a2;
  if (a1 >= a2)
  {
    if (a2 == a1)
    {
      v4 = a1;
      v2 = a1;
    }
    else
    {
      v6 = a2;
      while ((sub_22EFA555C(*v6) & 1) == 0)
      {
        ++v6;
        v4 = a1;
        v2 = a1;
        if (v6 == a1)
          return v2 == v4;
      }
      v2 = a1;
      v4 = v6;
    }
  }
  else
  {
    v3 = a1;
    while ((sub_22EFA555C(*v3) & 1) == 0)
    {
      ++v3;
      v4 = v2;
      if (v3 == v2)
        return v2 == v4;
    }
    v4 = v2;
    v2 = v3;
  }
  return v2 == v4;
}

BOOL sub_22E54E894(unint64_t a1, unint64_t a2)
{
  if (a1 >= a2)
  {
    while (a2 != a1)
    {
      if (*(_WORD *)(*(_QWORD *)a2 + 32) == 210 && !*(_BYTE *)(*(_QWORD *)a2 + 48))
        return a1 == a2;
      a2 += 8;
    }
    a2 = a1;
  }
  else
  {
    while (*(_WORD *)(*(_QWORD *)a1 + 32) != 210 || *(_BYTE *)(*(_QWORD *)a1 + 48))
    {
      a1 += 8;
      if (a1 == a2)
      {
        a1 = a2;
        return a1 == a2;
      }
    }
  }
  return a1 == a2;
}

char **sub_22E54E900(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 120 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(char **)&v2[v4 - 56];
      if (&v2[v4 - 32] != v6)
        free(v6);
      v7 = (char *)*((_QWORD *)v5 - 12);
      if (v5 - 72 != v7)
        free(v7);
      v4 -= 120;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_22E54E990(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 120 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F27211C(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F27211C(a1);
    }
  }
  return v3;
}

void sub_22E54E9F8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 120 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      v10 = *(_OWORD *)(v6 + v5);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v6 + v5 + 16);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 48;
      *(_OWORD *)(v9 + 32) = xmmword_22F44E360;
      if (*(_QWORD *)(v6 + v5 + 32))
        sub_22E3B2DB8(a2 + v5 + 24, v8 + 24);
      v11 = *(_DWORD *)(v8 + 56);
      *(_QWORD *)(v9 + 64) = v9 + 88;
      v12 = v9 + 64;
      *(_DWORD *)(v12 - 8) = v11;
      *(_OWORD *)(v12 + 8) = xmmword_22F44E360;
      if (*(_QWORD *)(v8 + 72))
        sub_22E3B2DB8(v12, v6 + v5 + 64);
      v13 = a2 + v5;
      v14 = *(_OWORD *)(v8 + 96);
      *(_QWORD *)(v13 + 112) = *(_QWORD *)(v8 + 112);
      *(_OWORD *)(v13 + 96) = v14;
      v5 += 120;
    }
    while (v8 + 120 != v7);
    v15 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v15)
    {
      v16 = *a1;
      v17 = 120 * v15;
      do
      {
        v18 = v16 + v17;
        v19 = *(void **)(v16 + v17 - 56);
        if ((void *)(v16 + v17 - 32) != v19)
          free(v19);
        v20 = *(void **)(v18 - 96);
        if ((void *)(v18 - 72) != v20)
          free(v20);
        v17 -= 120;
      }
      while (v17);
    }
  }
}

BOOL sub_22E54EB3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;

  v5 = a2;
  v6 = a1;
  if (a1 >= a2)
  {
    v3 = a1;
    sub_22E54EB98((uint64_t)&v5, a1);
    v2 = v5;
  }
  else
  {
    v2 = a2;
    sub_22E54EB98((uint64_t)&v6, a2);
    v3 = v6;
  }
  return v3 == v2;
}

uint64_t sub_22E54EB98(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t **v4;
  int v5;

  v2 = *(uint64_t **)result;
  if (*(uint64_t **)result != a2)
  {
    v4 = (uint64_t **)result;
    do
    {
      result = *v2;
      if (*(_WORD *)(*v2 + 32) == 11)
      {
        v5 = *(unsigned __int8 *)(result + 30);
        if ((~(v5 << 16) & 0x780000) != 0)
          result = ((*(unsigned __int16 *)(result + 28) | (v5 << 16)) >> 19) & 0xF;
        else
          result = sub_22F1BFAD0(result);
        if ((_DWORD)result == 1)
          return result;
        v2 = *v4;
      }
      *v4 = ++v2;
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_22E54EC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  char v13;

  v6 = *(_QWORD *)(a2 + 8);
  v13 = *(_BYTE *)(a2 + 16);
  v7 = *(_DWORD *)(a5 + 8);
  if (v7 >= *(_DWORD *)(a5 + 12))
  {
    v11 = v6;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v11;
    v7 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v7) = v6;
  v8 = *(_DWORD *)(a5 + 12);
  v9 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v9;
  if (v9 >= v8)
  {
    v12 = HIDWORD(v6);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v6) = v12;
    v9 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = HIDWORD(v6);
  ++*(_DWORD *)(a5 + 8);
  sub_22E54D3B4(&v13, a5);
  return llvm::FoldingSetNodeID::operator==();
}

_QWORD *sub_22E54ECEC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2723D4(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E54EDAC(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = (_QWORD *)(a2 + 8);
  v8 = sub_22E54EEC4((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16));
  v9 = 0;
  v10 = (v4 - 1) & v8;
  for (i = 1; ; ++i)
  {
    v12 = v6 + 32 * v10;
    if (*(_DWORD *)a2 == *(_DWORD *)v12 && *v7 == *(_QWORD *)(v12 + 8) && v7[1] == *(_QWORD *)(v12 + 16))
    {
      result = 1;
      goto LABEL_27;
    }
    if (*(_DWORD *)v12)
    {
      v14 = 0;
      goto LABEL_10;
    }
    if (!*(_QWORD *)(v12 + 8) && *(_QWORD *)(v12 + 16) == 0)
      break;
    v14 = *(_QWORD *)(v12 + 8) == -1 && *(_QWORD *)(v12 + 16) == -1;
LABEL_10:
    if (v14 && v9 == 0)
      v9 = v6 + 32 * v10;
    v15 = v10 + i;
    v10 = v15 & (v4 - 1);
  }
  result = 0;
  if (v9)
    v12 = v9;
LABEL_27:
  *a3 = v12;
  return result;
}

unint64_t sub_22E54EEC4(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  unint64_t v6;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = a2;
  v18 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v5 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v6 = 0x253E4A000uLL;
  if ((v5 & 1) == 0)
  {
    v13 = a1;
    v8 = __cxa_guard_acquire(&qword_253E4AB98);
    v6 = 0x253E4A000uLL;
    v4 = a2;
    v3 = a3;
    v9 = v8;
    a1 = v13;
    if (v9)
    {
      v10 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v10 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v10;
      __cxa_guard_release(&qword_253E4AB98);
      v6 = 0x253E4A000;
      v3 = a3;
      a1 = v13;
      v4 = a2;
    }
  }
  v17 = *(_QWORD *)(v6 + 2960);
  LODWORD(v14[0]) = *a1;
  return sub_22E54EFD4((char *)v14, 0, (_OWORD *)((char *)v14 + 4), (char *)v15, v4, v3);
}

unint64_t sub_22E54EFD4(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_22E54F04C(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_22E54F04C(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_22E54F2E8(a1, *(uint64_t *)v13, v10, a4);
}

_QWORD *sub_22E54F04C(_QWORD *a1, uint64_t *a2, _QWORD *__dst, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 8 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 8 - v8);
      return (_QWORD *)((char *)a1 + 8 - v8);
    }
  }
  return a1;
}

unint64_t sub_22E54F2E8(char *__src, uint64_t a2, char *a3, char *a4)
{
  char v8;
  int64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  if (!a2)
    return sub_22E3D0FB4(__src, a3 - __src, *((_QWORD *)__src + 15));
  if (__src != a3 && a3 != a4)
  {
    if (__src + 1 == a3)
    {
      v8 = *__src;
      v9 = a4 - a3;
      memmove(__src, a3, a4 - a3);
      __src[v9] = v8;
    }
    else if (a3 + 1 == a4)
    {
      v10 = *(a4 - 1);
      if (a4 - 1 != __src)
        memmove(__src + 1, __src, a4 - 1 - __src);
      *__src = v10;
    }
    else
    {
      sub_22E54F510(__src, a3, a4);
    }
  }
  v11 = *((_QWORD *)__src + 9);
  v12 = *((_QWORD *)__src + 11);
  v13 = *((_QWORD *)__src + 1);
  v14 = 0xB492B66FBE98F273 * __ROR8__(v11 + *((_QWORD *)__src + 8) + v12 + v13, 37);
  v15 = *((_QWORD *)__src + 12);
  v16 = *((_QWORD *)__src + 13);
  v18 = *((_QWORD *)__src + 6);
  v17 = *((_QWORD *)__src + 7);
  v19 = *((_QWORD *)__src + 5);
  v20 = v19 + v12 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v11 + v18, 42);
  v21 = v16 + *((_QWORD *)__src + 10);
  v22 = *(_QWORD *)__src - 0x4B6D499041670D8DLL * v15;
  v23 = v16 + v22;
  v25 = *((_QWORD *)__src + 2);
  v24 = *((_QWORD *)__src + 3);
  v26 = v22 + v13 + v25;
  v27 = *((_QWORD *)__src + 14);
  v28 = v27 ^ v14;
  v29 = __ROR8__(v21, 33);
  v30 = __ROR8__(v23 + v24 + v28, 21) + v22 + __ROR8__(v26, 44);
  v31 = v26 + v24;
  v32 = v25 + v20;
  v33 = 0xB492B66FBE98F273 * v29 + v27 + *((_QWORD *)__src + 4);
  v34 = v19 + v18 + v33;
  v35 = __ROR8__(v34, 44) + v33 + __ROR8__(v32 + v33 + v17, 21);
  *((_QWORD *)__src + 11) = v31;
  *((_QWORD *)__src + 12) = v30;
  *((_QWORD *)__src + 13) = v34 + v17;
  *((_QWORD *)__src + 14) = v35;
  *((_QWORD *)__src + 9) = v20;
  *((_QWORD *)__src + 10) = v28;
  *((_QWORD *)__src + 8) = 0xB492B66FBE98F273 * v29;
  v36 = v28
      - 0x4B6D499041670D8DLL * (v20 ^ (v20 >> 47))
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69
        * ((v34 + v17) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * ((v34 + v17) ^ v31)))) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)))) >> 47));
  v37 = 0x9DDFEA08EB382D69
      * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)));
  v38 = 0xB492B66FBE98F273 * (v29 + ((a3 - __src + a2) ^ ((unint64_t)(a3 - __src + a2) >> 47)))
      - 0x622015F714C7D297 * (v37 ^ (v37 >> 47));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v36)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v36)))) >> 47));
}

_BYTE *sub_22E54F510(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;

  v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_BYTE *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = a3 - v15;
          v19 = __OFSUB__(v3, v18);
          v21 = v3 - v18;
          v20 = (v21 < 0) ^ v19;
          v15 = &a1[v21];
          if (v20)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t sub_22E54F5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_11:
    sub_22E54F694(a1, v7);
    v10 = 0;
    sub_22E54EDAC((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  v11 = 0;
  v12 = 0;
  if (*(_DWORD *)a4 || (*(_QWORD *)(a4 + 8) == v11 ? (v8 = *(_QWORD *)(a4 + 16) == v12) : (v8 = 0), !v8))
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22E54F694(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E54F758(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = result + 32 * v10;
      do
      {
        *(_DWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        result += 32;
      }
      while (result != v11);
    }
  }
  return result;
}

uint64_t sub_22E54F758(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 32 * v6;
    do
    {
      *(_DWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v7 += 32;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2
      || (!*(_QWORD *)(a2 + 8) ? (v11 = *(_QWORD *)(a2 + 16) == 0) : (v11 = 0),
          !v11 && (*(_QWORD *)(a2 + 8) == -1 ? (v12 = *(_QWORD *)(a2 + 16) == -1) : (v12 = 0), !v12)))
    {
      v13 = 0;
      result = sub_22E54EDAC((uint64_t *)v5, a2, &v13);
      v9 = v13;
      v10 = *(_OWORD *)a2;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v9 = v10;
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

_OWORD *sub_22E54F840(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_22E3B3F8C();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = v11 + 32;
  if (v2 != v3)
  {
    do
    {
      v14 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v11 - 1) = v14;
      v11 -= 32;
      v2 -= 32;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = &v10[32 * v9];
  if (v2)
    operator delete(v2);
  return v13;
}

void sub_22E54F920(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24[2];
  uint64_t v25;
  __int128 v26[3];

  v5 = a2[1];
  v21 = *a2;
  v22 = v5;
  v23 = a2[2];
  sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v19);
  v26[0] = v21;
  v26[1] = v22;
  v26[2] = v23;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v24[0] = v19[0];
  v24[1] = v19[1];
  v25 = v20;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 2;
  v7 = 0;
  v17 = 0u;
  v18 = 0u;
  sub_22E3C113C((uint64_t)&v7, v26, a3, 2, v24, v6);
  sub_22E54F9EC();
}

void sub_22E54F9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  char v6;
  int v7;
  void *v8;
  void **v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t Function;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t Name;
  unint64_t v26;
  const void *v27;
  size_t v28;
  __int128 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int8x16_t v38;
  void **v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  std::string *v57;
  std::string::size_type v58;
  void **v59;
  size_t v60;
  unsigned int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 *p_dst;
  void *v67[2];
  char v68;
  char v69[8];
  void *v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76[2];
  __int128 v77;
  unint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81[2];
  _QWORD v82[2];
  __int16 v83;
  _BYTE v84[32];
  __int128 v85;
  uint64_t v86;
  void *v87[2];
  _BYTE v88[128];
  __int128 __dst;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[329];
  uint64_t v95;
  unsigned int v96;
  void *__p[2];
  _QWORD v98[2];
  __int16 v99;
  uint64_t v100;

  v0 = MEMORY[0x24BDAC7A8]();
  v100 = *MEMORY[0x24BDAC8D0];
  v61 = *(_DWORD *)(v1 + 72);
  v64 = *(_OWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 24);
  v62 = *(_OWORD *)(v1 + 32);
  v63 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 64);
  sub_22E550404((uint64_t)v69, "__destructor_", v2, *(_QWORD *)(*(_QWORD *)(v0 + 144) + 144));
  v4 = v67;
  v5 = v3;
  sub_22E5504BC((uint64_t)&v70, v3, (v61 >> 2) & 1, (uint64_t)v67);
  v65 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 144);
  p_dst = 0;
  v6 = v68;
  v7 = v68;
  v9 = (void **)v67[0];
  v8 = v67[1];
  v76[0] = 0;
  v76[1] = v0;
  sub_22E48EE24(v76, 0, 0);
  v72 = v64;
  v74 = v62;
  v73 = v2;
  v75 = v63;
  v10 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 96);
  v99 = 257;
  sub_22E3BEE6C((uint64_t *)(v0 + 272), &v72, v10, (uint64_t)__p, (uint64_t)&__dst);
  v11 = v7 < 0;
  if (v7 < 0)
    v4 = v9;
  v12 = v90;
  v77 = __dst;
  v79 = v91;
  if (v11)
    v13 = (unint64_t)v8;
  else
    v13 = v6 & 0x7F;
  v80 = v92;
  v78 = v90;
  v14 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 96);
  v99 = 257;
  sub_22E3BEE6C((uint64_t *)(v0 + 272), &v77, v14, (uint64_t)__p, (uint64_t)&__dst);
  if ((v91 & 3) != 0)
    v15 = sub_22F28ABCC(&__dst, v0);
  else
    v15 = __dst;
  v86 = v15;
  v16 = *(uint64_t **)(v0 + 144);
  Function = llvm::Module::getFunction();
  v18 = v5;
  if (!Function)
  {
    v30 = v12;
    v31 = v16[18];
    __p[0] = v98;
    __p[1] = (void *)0x1000000000;
    v32 = sub_22E5532CC((uint64_t)v16, (uint64_t)__p);
    v33 = sub_22E46F2EC((uint64_t)(v16 + 35), v32);
    WORD4(v91) = 261;
    *(_QWORD *)&__dst = v4;
    *((_QWORD *)&__dst + 1) = v13;
    v34 = v16[25];
    v19 = llvm::User::operator new((llvm::User *)0x78);
    v35 = MEMORY[0x23489F6FC](v19, v33, 3, 0xFFFFFFFFLL, &__dst, v34);
    v36 = *(_DWORD *)(v35 + 32);
    v37 = v36 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v35 + 32) = v37;
    if ((v36 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v19) & 1) != 0)
      {
LABEL_27:
        sub_22E62A548((uint64_t)v16, 0, 0, v32, (llvm::Value *)v19, 0);
        sub_22E62A5F4(v16, 0, (llvm::Function *)v19);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v16, 0);
        p_dst = &__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v31 + 16392), (llvm::Value *)v19, v32, (uint64_t *)__p, 0, v38, 0);
        v81[0] = 0;
        v81[1] = (uint64_t)&__dst;
        sub_22E48EE24(v81, 0, 0);
        v39 = v87;
        v87[0] = v88;
        v87[1] = (void *)0x1000000000;
        if (LODWORD(__p[1]))
        {
          sub_22F24C890((uint64_t)v87, (uint64_t)__p);
          v39 = *(void ***)v87[0];
        }
        v82[0] = v39;
        *(_QWORD *)v84 = 0;
        v40 = sub_22E3CED3C(&v95, v82, v84);
        v41 = *(_QWORD *)v84;
        if (!v40)
          v41 = v95 + 56 * v96;
        v42 = *(_OWORD *)(v41 + 8);
        v43 = *(_OWORD *)(v41 + 40);
        *(_OWORD *)&v84[16] = *(_OWORD *)(v41 + 24);
        v85 = v43;
        *(_OWORD *)v84 = v42;
        v83 = 257;
        v44 = sub_22E3C2A7C(v94, (uint64_t)v84, (uint64_t)v82);
        v45 = v93;
        if (v87[0] != v88)
          free(v87[0]);
        v46 = v18 & 0xFFFFFFFFFFFFFFF0;
        v47 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v48 = sub_22EFC3B90(v47);
        if (v48)
        {
          v49 = v48;
          v50 = v18 | v61;
LABEL_35:
          v51 = *(_QWORD *)(v49 + 48);
          if ((v50 & 4) != 0 || (*(_BYTE *)(v46 + 8) & 4) != 0)
            v51 |= 4uLL;
          v52 = sub_22F115260(v51);
          *(_QWORD *)v84 = v44;
          *(_QWORD *)&v84[8] = v45;
          *(_QWORD *)&v84[16] = v30;
          *(_DWORD *)&v84[24] = 0;
          v85 = 0uLL;
          sub_22E5546FC(&v65, v52, v51, v49, (__int128 *)v84);
          while (1)
          {
            v49 = *(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v49)
              break;
            if ((*(_DWORD *)(v49 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_35;
          }
        }
        sub_22E619DE8((uint64_t)&__dst, 0);
        sub_22E48F084(v81);
        sub_22E619434((uint64_t)&__dst);
        if (__p[0] != v98)
          free(__p[0]);
        goto LABEL_44;
      }
      v37 = *(_DWORD *)(v19 + 32);
    }
    *(_DWORD *)(v19 + 32) = v37 | 0x4000;
    goto LABEL_27;
  }
  v19 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_19;
  if ((*(_WORD *)(Function + 18) & 1) == 0)
  {
    v20 = *(_QWORD **)(Function + 88);
LABEL_12:
    v21 = v20;
    goto LABEL_13;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v20 = *(_QWORD **)(v19 + 88);
  if ((*(_WORD *)(v19 + 18) & 1) == 0)
    goto LABEL_12;
  llvm::Function::BuildLazyArguments((llvm::Function *)v19);
  v21 = *(_QWORD **)(v19 + 88);
LABEL_13:
  v22 = &v21[5 * *(_QWORD *)(v19 + 96)];
  if (v20 == v22)
  {
LABEL_45:
    v53 = *(_QWORD *)(v19 + 24);
    WORD4(v91) = 257;
    sub_22F24EEDC(v0, v53, (llvm::Value *)v19, (uint64_t)&v86, 1, (uint64_t)&__dst);
    goto LABEL_62;
  }
  v23 = 0;
  do
  {
    v24 = *v20;
    v20 += 5;
    if (v24 != v16[13])
      v23 = 1;
  }
  while (v20 != v22);
  if ((v23 & 1) == 0)
  {
LABEL_44:
    if (!v19)
      goto LABEL_62;
    goto LABEL_45;
  }
LABEL_19:
  Name = llvm::Value::getName((llvm::Value *)v19);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v27 = (const void *)Name;
  v28 = v26;
  if (v26 >= 0x17)
  {
    v54 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v54 = v26 | 7;
    v55 = v54 + 1;
    v29 = (__int128 *)operator new(v54 + 1);
    v90 = v55 | 0x8000000000000000;
    *(_QWORD *)&__dst = v29;
    *((_QWORD *)&__dst + 1) = v28;
  }
  else
  {
    HIBYTE(v90) = v26;
    v29 = &__dst;
    if (!v26)
      goto LABEL_50;
  }
  memmove(v29, v27, v28);
LABEL_50:
  *((_BYTE *)v29 + v28) = 0;
  v56 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 24))
                  + 24);
  std::operator+<char>();
  v57 = std::string::append((std::string *)v84, " for non-trivial C struct has incorrect type");
  v58 = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v98[0] = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (v98[0] >= 0)
    v59 = __p;
  else
    v59 = (void **)__p[0];
  if (v98[0] >= 0)
    v60 = HIBYTE(v98[0]) & 0x7F;
  else
    v60 = (size_t)__p[1];
  sub_22E628310((uint64_t)v16, v56, v59, v60);
  if (SHIBYTE(v98[0]) < 0)
    operator delete(__p[0]);
  if ((v84[23] & 0x80000000) != 0)
    operator delete(*(void **)v84);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)__dst);
LABEL_62:
  sub_22E48F084(v76);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v71 < 0)
    operator delete(v70);
}

unint64_t sub_22E5500E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10[2];
  __int128 v11;
  uint64_t v12[2];
  _OWORD v13[3];
  uint64_t v14[2];
  __int128 v15[2];
  __int128 v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a1 + 144);
  v14[0] = *(_QWORD *)(v4 + 144);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)v10 = *(_OWORD *)(a2 + 8);
  v11 = v5;
  *(_OWORD *)v12 = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(v4 + 96);
  LOWORD(v16) = 257;
  sub_22E3BEE6C((uint64_t *)(a1 + 272), (__int128 *)v10, v6, (uint64_t)v15, (uint64_t)v13);
  v14[1] = a1;
  v7 = *(_QWORD *)(a2 + 64) | *(_DWORD *)(a2 + 72) & 4;
  v15[0] = v13[0];
  v15[1] = v13[1];
  v16 = v13[2];
  v17 = v7;
  v8 = sub_22F111C54(&v17);
  return sub_22E551C8C(v14, v8, v7, 0, 0, v15);
}

void sub_22E550194(uint64_t a1@<X0>, std::string::size_type a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  void *__p;
  char v10;

  sub_22E550210((uint64_t)&v8, "", 0, a2, a2, a4);
  sub_22E550330((uint64_t)&__p, a1, a3, a5);
  if (v10 < 0)
    operator delete(__p);
}

uint64_t sub_22E550210(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, std::string::size_type a4, uint64_t a5, uint64_t a6)
{
  std::string *v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  void **v13;
  std::string::size_type v14;
  std::string v16;
  void *__p[2];
  uint64_t v18;

  *(_QWORD *)a1 = a6;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::append((std::string *)(a1 + 24), a2, a3);
  v16.__r_.__value_.__r.__words[0] = a4;
  sub_22E3CE31C((uint64_t)__p);
  if (v18 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v18 >= 0)
    v10 = HIBYTE(v18) & 0x7F;
  else
    v10 = (std::string::size_type)__p[1];
  std::string::append(v8, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  sub_22E3CE31C((uint64_t)&v16);
  v11 = std::string::insert(&v16, 0, "_");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v18 >= 0)
    v14 = HIBYTE(v18) & 0x7F;
  else
    v14 = (std::string::size_type)__p[1];
  std::string::append(v8, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return a1;
}

void sub_22E550330(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
    a2 |= 4uLL;
  sub_22E55356C((std::string *)(a1 - 24), a2, 0);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  }
}

void sub_22E550394(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  void *__p;
  char v10;

  sub_22E550404((uint64_t)&v8, "", a2, a4);
  sub_22E5504BC((uint64_t)&__p, a1, a3, a5);
  if (v10 < 0)
    operator delete(__p);
}

uint64_t sub_22E550404(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  std::string::size_type v7;
  void **v8;
  std::string::size_type v9;
  void *__p[2];
  char v12;

  if (__s)
    v7 = strlen(__s);
  else
    v7 = 0;
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::append((std::string *)(a1 + 8), __s, v7);
  sub_22E3CE31C((uint64_t)__p);
  if (v12 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if (v12 >= 0)
    v9 = v12 & 0x7F;
  else
    v9 = (std::string::size_type)__p[1];
  std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v8, v9);
  if (v12 < 0)
    operator delete(__p[0]);
  return a1;
}

void *sub_22E5504BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (a3)
    a2 |= 4uLL;
  result = (void *)sub_22E554208(a1 - 8, a2, 0);
  if (*(char *)(a1 + 23) < 0)
    return sub_22E3BB2B4((_BYTE *)a4, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void sub_22E550520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char v34;
  char v35[24];
  void *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44[3];
  uint64_t v45[2];
  char v46[32];
  __int16 v47;
  __int128 v48[3];
  _QWORD v49[3];
  char v50;
  __int16 v51;
  _QWORD v52[2];
  _QWORD v53[4];

  v53[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 72) & 4) != 0)
    v4 = 1;
  else
    v4 = (*(unsigned __int8 *)(a3 + 72) >> 2) & 1;
  v25 = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v26[24] = *(_QWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 24);
  *(_OWORD *)&v28[8] = *(_OWORD *)(a3 + 32);
  *(_QWORD *)&v28[24] = *(_QWORD *)(a3 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  sub_22E550210((uint64_t)v35, "__copy_constructor_", 0x13uLL, v5, v6, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
  sub_22E550330((uint64_t)&v36, v7, v4, (uint64_t)&__p);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)v26 = v5;
  *(_QWORD *)v28 = v6;
  v45[0] = 0;
  v45[1] = a1;
  sub_22E48EE24(v45, 0, 0);
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = (__int128 *)&v26[48 * v8 - 16];
    v12 = v11[1];
    v44[0] = *v11;
    v44[1] = v12;
    v44[2] = v11[2];
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v51 = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v44, v13, (uint64_t)v49, (uint64_t)&v38);
    v9 = 0;
    v14 = v39;
    *v11 = v38;
    v11[1] = v14;
    v11[2] = v40;
    v8 = 1;
  }
  while ((v10 & 1) != 0);
  v15 = 0;
  v40 = *(_OWORD *)&v26[16];
  v41 = v27;
  v42 = *(_OWORD *)v28;
  v43 = *(_OWORD *)&v28[16];
  v38 = v25;
  v39 = *(_OWORD *)v26;
  v16 = 1;
  v52[0] = 0;
  v52[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  do
  {
    v17 = v16;
    v18 = &v38 + 3 * v15;
    v52[v15] = *((_QWORD *)v18 + 2);
    v19 = v18[1];
    v20 = v18[2];
    v48[0] = *v18;
    v48[1] = v19;
    v48[2] = v20;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v47 = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v48, v21, (uint64_t)v46, (uint64_t)v49);
    if ((v50 & 3) != 0)
      v22 = sub_22F28ABCC(v49, a1);
    else
      v22 = v49[0];
    v16 = 0;
    v53[v15] = v22;
    v15 = 1;
  }
  while ((v17 & 1) != 0);
  v23 = (llvm::Value *)sub_22E554D8C();
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 3);
    v51 = 257;
    sub_22F24EEDC(a1, v24, v23, (uint64_t)v53, 2, (uint64_t)v49);
  }
  sub_22E48F084(v45);
  if (v34 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(v36);
}

void sub_22E55081C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  char v21;
  char v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t Function;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t Name;
  unint64_t v40;
  const void *v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  std::string *v61;
  std::string::size_type v62;
  void **v63;
  size_t v64;
  void *v65;
  void **v66;
  int v67;
  __int128 v68;
  _BYTE v69[32];
  __int128 v70;
  _BYTE v71[32];
  uint64_t v72[3];
  __int128 *p_dst;
  void *v74[2];
  char v75;
  char v76[24];
  void *v77;
  char v78;
  _OWORD v79[6];
  __int128 v80[3];
  uint64_t v81[2];
  __int128 v82[3];
  uint64_t v83;
  uint64_t v84;
  __int128 v85[6];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92[2];
  _BYTE v93[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD v98[2];
  void *v99[2];
  _BYTE v100[128];
  __int128 __dst;
  __int128 v102;
  __int128 v103;
  void *__p[2];
  _QWORD v105[2];
  __int16 v106;
  uint64_t v107;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v0;
  v107 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v1 + 72) & 4) != 0)
    v4 = 1;
  else
    v4 = (*(unsigned __int8 *)(v2 + 72) >> 2) & 1;
  v68 = *(_OWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)&v69[8] = *(_OWORD *)(v1 + 32);
  *(_QWORD *)&v69[24] = *(_QWORD *)(v1 + 48);
  v70 = *(_OWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 24);
  *(_OWORD *)&v71[8] = *(_OWORD *)(v2 + 32);
  *(_QWORD *)&v71[24] = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v1 + 64);
  sub_22E550210((uint64_t)v76, "__copy_assignment_", 0x12uLL, v5, v6, *(_QWORD *)(*(_QWORD *)(v0 + 144) + 144));
  v67 = v4;
  sub_22E550330((uint64_t)&v77, v7, v4, (uint64_t)v74);
  v8 = v75;
  v9 = (void **)v74[0];
  v10 = v74[1];
  if (v75 >= 0)
    v9 = v74;
  v66 = v9;
  v72[0] = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v72[1] = 0;
  v72[2] = 0;
  p_dst = 0;
  v11 = (void *)(v75 & 0x7F);
  *(_QWORD *)v69 = v5;
  *(_QWORD *)v71 = v6;
  v81[0] = 0;
  v81[1] = v3;
  sub_22E48EE24(v81, 0, 0);
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = v13;
    v15 = (__int128 *)&v69[48 * v12 - 16];
    v16 = v15[1];
    v80[0] = *v15;
    v80[1] = v16;
    v80[2] = v15[2];
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 96);
    v106 = 257;
    sub_22E3BEE6C((uint64_t *)(v3 + 272), v80, v17, (uint64_t)__p, (uint64_t)&__dst);
    v13 = 0;
    v18 = v102;
    *v15 = __dst;
    v15[1] = v18;
    v15[2] = v103;
    v12 = 1;
  }
  while ((v14 & 1) != 0);
  v19 = 0;
  if (v8 >= 0)
    v20 = v11;
  else
    v20 = v10;
  v65 = v20;
  v79[2] = *(_OWORD *)&v69[16];
  v79[3] = v70;
  v79[4] = *(_OWORD *)v71;
  v79[5] = *(_OWORD *)&v71[16];
  v79[0] = v68;
  v79[1] = *(_OWORD *)v69;
  v21 = 1;
  v83 = 0;
  v84 = 0;
  v98[1] = 0;
  v98[0] = 0;
  do
  {
    v22 = v21;
    v23 = &v79[3 * v19];
    *(&v83 + v19) = *((_QWORD *)v23 + 2);
    v24 = v23[1];
    v25 = v23[2];
    v82[0] = *v23;
    v82[1] = v24;
    v82[2] = v25;
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 96);
    v106 = 257;
    sub_22E3BEE6C((uint64_t *)(v3 + 272), v82, v26, (uint64_t)__p, (uint64_t)&__dst);
    if ((BYTE8(v102) & 3) != 0)
      v27 = sub_22F28ABCC(&__dst, v3);
    else
      v27 = __dst;
    v21 = 0;
    v98[v19] = v27;
    v19 = 1;
  }
  while ((v22 & 1) != 0);
  if (v67)
    v28 = v7 | 4;
  else
    v28 = v7;
  v29 = v83;
  v30 = v84;
  v31 = *(uint64_t **)(v3 + 144);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v44 = v31[18];
    __p[0] = v105;
    __p[1] = (void *)0x1000000000;
    v45 = sub_22E555294((uint64_t)v31, (uint64_t)__p);
    v46 = sub_22E46F2EC((uint64_t)(v31 + 35), v45);
    LOWORD(v103) = 261;
    *(_QWORD *)&__dst = v66;
    *((_QWORD *)&__dst + 1) = v65;
    v47 = v31[25];
    v33 = llvm::User::operator new((llvm::User *)0x78);
    v48 = MEMORY[0x23489F6FC](v33, v46, 3, 0xFFFFFFFFLL, &__dst, v47);
    v49 = *(_DWORD *)(v48 + 32);
    v50 = v49 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v48 + 32) = v50;
    if ((v49 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v33) & 1) != 0)
      {
LABEL_39:
        sub_22E62A548((uint64_t)v31, 0, 0, v45, (llvm::Value *)v33, 0);
        sub_22E62A5F4(v31, 0, (llvm::Function *)v33);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v31, 0);
        p_dst = &__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v44 + 16392), (llvm::Value *)v33, v45, (uint64_t *)__p, 0, v51, 0);
        v92[0] = 0;
        v92[1] = (uint64_t)&__dst;
        sub_22E48EE24(v92, 0, 0);
        v99[0] = v100;
        v99[1] = (void *)0x1000000000;
        if (LODWORD(__p[1]))
          sub_22F24C890((uint64_t)v99, (uint64_t)__p);
        sub_22E55541C((uint64_t)&v86, v29, v30, (_QWORD **)v99, (uint64_t)&__dst);
        if (v99[0] != v100)
          free(v99[0]);
        v85[2] = v88;
        v85[3] = v89;
        v85[4] = v90;
        v85[5] = v91;
        v85[0] = v86;
        v85[1] = v87;
        v52 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v53 = sub_22EFC3B90(v52);
        if (v53)
        {
          v54 = v53;
LABEL_45:
          v55 = *(_QWORD *)(v54 + 48);
          if ((v28 & 4) != 0 || (*(_BYTE *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v55 |= 4uLL;
          *(_QWORD *)v93 = v55;
          v56 = sub_22F111B38(v93);
          sub_22E556CA0(v72, v56, v55, v54, v85);
          while (1)
          {
            v54 = *(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v54)
              break;
            if ((*(_DWORD *)(v54 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_45;
          }
        }
        v94 = v88;
        v95 = v89;
        v96 = v90;
        v97 = v91;
        *(_OWORD *)v93 = v86;
        *(_OWORD *)&v93[16] = v87;
        sub_22E55556C(v72, (__int128 *)v93);
        sub_22E619DE8((uint64_t)p_dst, 0);
        sub_22E48F084(v92);
        sub_22E619434((uint64_t)&__dst);
        if (__p[0] != v105)
          free(__p[0]);
        goto LABEL_54;
      }
      v50 = *(_DWORD *)(v33 + 32);
    }
    *(_DWORD *)(v33 + 32) = v50 | 0x4000;
    goto LABEL_39;
  }
  v33 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_31;
  if ((*(_WORD *)(Function + 18) & 1) == 0)
  {
    v34 = *(_QWORD **)(Function + 88);
LABEL_24:
    v35 = v34;
    goto LABEL_25;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v34 = *(_QWORD **)(v33 + 88);
  if ((*(_WORD *)(v33 + 18) & 1) == 0)
    goto LABEL_24;
  llvm::Function::BuildLazyArguments((llvm::Function *)v33);
  v35 = *(_QWORD **)(v33 + 88);
LABEL_25:
  v36 = &v35[5 * *(_QWORD *)(v33 + 96)];
  if (v34 == v36)
  {
LABEL_55:
    v57 = *(_QWORD *)(v33 + 24);
    LOWORD(v103) = 257;
    sub_22F24EEDC(v3, v57, (llvm::Value *)v33, (uint64_t)v98, 2, (uint64_t)&__dst);
    goto LABEL_72;
  }
  v37 = 0;
  do
  {
    v38 = *v34;
    v34 += 5;
    if (v38 != v31[13])
      v37 = 1;
  }
  while (v34 != v36);
  if ((v37 & 1) == 0)
  {
LABEL_54:
    if (!v33)
      goto LABEL_72;
    goto LABEL_55;
  }
LABEL_31:
  Name = llvm::Value::getName((llvm::Value *)v33);
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v41 = (const void *)Name;
  v42 = v40;
  if (v40 >= 0x17)
  {
    v58 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v58 = v40 | 7;
    v59 = v58 + 1;
    v43 = (__int128 *)operator new(v58 + 1);
    *(_QWORD *)&v102 = v59 | 0x8000000000000000;
    *(_QWORD *)&__dst = v43;
    *((_QWORD *)&__dst + 1) = v42;
  }
  else
  {
    BYTE7(v102) = v40;
    v43 = &__dst;
    if (!v40)
      goto LABEL_60;
  }
  memmove(v43, v41, v42);
LABEL_60:
  *((_BYTE *)v43 + v42) = 0;
  v60 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 24))
                  + 24);
  std::operator+<char>();
  v61 = std::string::append((std::string *)v93, " for non-trivial C struct has incorrect type");
  v62 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v105[0] = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v105[0] >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (v105[0] >= 0)
    v64 = HIBYTE(v105[0]) & 0x7F;
  else
    v64 = (size_t)__p[1];
  sub_22E628310((uint64_t)v31, v60, v63, v64);
  if (SHIBYTE(v105[0]) < 0)
    operator delete(__p[0]);
  if ((v93[23] & 0x80000000) != 0)
    operator delete(*(void **)v93);
  if (SBYTE7(v102) < 0)
    operator delete((void *)__dst);
LABEL_72:
  sub_22E48F084(v81);
  if (v75 < 0)
    operator delete(v74[0]);
  if (v78 < 0)
    operator delete(v77);
}

void sub_22E550FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  char v21;
  char v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t Function;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t Name;
  unint64_t v40;
  const void *v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  std::string *v61;
  std::string::size_type v62;
  void **v63;
  size_t v64;
  void *v65;
  void **v66;
  int v67;
  __int128 v68;
  _BYTE v69[32];
  __int128 v70;
  _BYTE v71[32];
  uint64_t v72[3];
  __int128 *p_dst;
  void *v74[2];
  char v75;
  char v76[24];
  void *v77;
  char v78;
  _OWORD v79[6];
  __int128 v80[3];
  uint64_t v81[2];
  __int128 v82[3];
  uint64_t v83;
  uint64_t v84;
  __int128 v85[6];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92[2];
  _BYTE v93[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD v98[2];
  void *v99[2];
  _BYTE v100[128];
  __int128 __dst;
  __int128 v102;
  __int128 v103;
  void *__p[2];
  _QWORD v105[2];
  __int16 v106;
  uint64_t v107;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v0;
  v107 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v1 + 72) & 4) != 0)
    v4 = 1;
  else
    v4 = (*(unsigned __int8 *)(v2 + 72) >> 2) & 1;
  v68 = *(_OWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)&v69[8] = *(_OWORD *)(v1 + 32);
  *(_QWORD *)&v69[24] = *(_QWORD *)(v1 + 48);
  v70 = *(_OWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 24);
  *(_OWORD *)&v71[8] = *(_OWORD *)(v2 + 32);
  *(_QWORD *)&v71[24] = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v1 + 64);
  sub_22E550210((uint64_t)v76, "__move_constructor_", 0x13uLL, v5, v6, *(_QWORD *)(*(_QWORD *)(v0 + 144) + 144));
  v67 = v4;
  sub_22E551734((uint64_t)&v77, v7, v4, (uint64_t)v74);
  v8 = v75;
  v9 = (void **)v74[0];
  v10 = v74[1];
  if (v75 >= 0)
    v9 = v74;
  v66 = v9;
  v72[0] = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v72[1] = 0;
  v72[2] = 0;
  p_dst = 0;
  v11 = (void *)(v75 & 0x7F);
  *(_QWORD *)v69 = v5;
  *(_QWORD *)v71 = v6;
  v81[0] = 0;
  v81[1] = v3;
  sub_22E48EE24(v81, 0, 0);
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = v13;
    v15 = (__int128 *)&v69[48 * v12 - 16];
    v16 = v15[1];
    v80[0] = *v15;
    v80[1] = v16;
    v80[2] = v15[2];
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 96);
    v106 = 257;
    sub_22E3BEE6C((uint64_t *)(v3 + 272), v80, v17, (uint64_t)__p, (uint64_t)&__dst);
    v13 = 0;
    v18 = v102;
    *v15 = __dst;
    v15[1] = v18;
    v15[2] = v103;
    v12 = 1;
  }
  while ((v14 & 1) != 0);
  v19 = 0;
  if (v8 >= 0)
    v20 = v11;
  else
    v20 = v10;
  v65 = v20;
  v79[2] = *(_OWORD *)&v69[16];
  v79[3] = v70;
  v79[4] = *(_OWORD *)v71;
  v79[5] = *(_OWORD *)&v71[16];
  v79[0] = v68;
  v79[1] = *(_OWORD *)v69;
  v21 = 1;
  v83 = 0;
  v84 = 0;
  v98[1] = 0;
  v98[0] = 0;
  do
  {
    v22 = v21;
    v23 = &v79[3 * v19];
    *(&v83 + v19) = *((_QWORD *)v23 + 2);
    v24 = v23[1];
    v25 = v23[2];
    v82[0] = *v23;
    v82[1] = v24;
    v82[2] = v25;
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 96);
    v106 = 257;
    sub_22E3BEE6C((uint64_t *)(v3 + 272), v82, v26, (uint64_t)__p, (uint64_t)&__dst);
    if ((BYTE8(v102) & 3) != 0)
      v27 = sub_22F28ABCC(&__dst, v3);
    else
      v27 = __dst;
    v21 = 0;
    v98[v19] = v27;
    v19 = 1;
  }
  while ((v22 & 1) != 0);
  if (v67)
    v28 = v7 | 4;
  else
    v28 = v7;
  v29 = v83;
  v30 = v84;
  v31 = *(uint64_t **)(v3 + 144);
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v44 = v31[18];
    __p[0] = v105;
    __p[1] = (void *)0x1000000000;
    v45 = sub_22E555294((uint64_t)v31, (uint64_t)__p);
    v46 = sub_22E46F2EC((uint64_t)(v31 + 35), v45);
    LOWORD(v103) = 261;
    *(_QWORD *)&__dst = v66;
    *((_QWORD *)&__dst + 1) = v65;
    v47 = v31[25];
    v33 = llvm::User::operator new((llvm::User *)0x78);
    v48 = MEMORY[0x23489F6FC](v33, v46, 3, 0xFFFFFFFFLL, &__dst, v47);
    v49 = *(_DWORD *)(v48 + 32);
    v50 = v49 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v48 + 32) = v50;
    if ((v49 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v33) & 1) != 0)
      {
LABEL_39:
        sub_22E62A548((uint64_t)v31, 0, 0, v45, (llvm::Value *)v33, 0);
        sub_22E62A5F4(v31, 0, (llvm::Function *)v33);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v31, 0);
        p_dst = &__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v44 + 16392), (llvm::Value *)v33, v45, (uint64_t *)__p, 0, v51, 0);
        v92[0] = 0;
        v92[1] = (uint64_t)&__dst;
        sub_22E48EE24(v92, 0, 0);
        v99[0] = v100;
        v99[1] = (void *)0x1000000000;
        if (LODWORD(__p[1]))
          sub_22F24C890((uint64_t)v99, (uint64_t)__p);
        sub_22E55541C((uint64_t)&v86, v29, v30, (_QWORD **)v99, (uint64_t)&__dst);
        if (v99[0] != v100)
          free(v99[0]);
        v85[2] = v88;
        v85[3] = v89;
        v85[4] = v90;
        v85[5] = v91;
        v85[0] = v86;
        v85[1] = v87;
        v52 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v53 = sub_22EFC3B90(v52);
        if (v53)
        {
          v54 = v53;
LABEL_45:
          v55 = *(_QWORD *)(v54 + 48);
          if ((v28 & 4) != 0 || (*(_BYTE *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v55 |= 4uLL;
          *(_QWORD *)v93 = v55;
          v56 = sub_22F111B38(v93);
          sub_22E558268(v72, v56, v55, v54, v85);
          while (1)
          {
            v54 = *(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v54)
              break;
            if ((*(_DWORD *)(v54 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_45;
          }
        }
        v94 = v88;
        v95 = v89;
        v96 = v90;
        v97 = v91;
        *(_OWORD *)v93 = v86;
        *(_OWORD *)&v93[16] = v87;
        sub_22E55556C(v72, (__int128 *)v93);
        sub_22E619DE8((uint64_t)p_dst, 0);
        sub_22E48F084(v92);
        sub_22E619434((uint64_t)&__dst);
        if (__p[0] != v105)
          free(__p[0]);
        goto LABEL_54;
      }
      v50 = *(_DWORD *)(v33 + 32);
    }
    *(_DWORD *)(v33 + 32) = v50 | 0x4000;
    goto LABEL_39;
  }
  v33 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_31;
  if ((*(_WORD *)(Function + 18) & 1) == 0)
  {
    v34 = *(_QWORD **)(Function + 88);
LABEL_24:
    v35 = v34;
    goto LABEL_25;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v34 = *(_QWORD **)(v33 + 88);
  if ((*(_WORD *)(v33 + 18) & 1) == 0)
    goto LABEL_24;
  llvm::Function::BuildLazyArguments((llvm::Function *)v33);
  v35 = *(_QWORD **)(v33 + 88);
LABEL_25:
  v36 = &v35[5 * *(_QWORD *)(v33 + 96)];
  if (v34 == v36)
  {
LABEL_55:
    v57 = *(_QWORD *)(v33 + 24);
    LOWORD(v103) = 257;
    sub_22F24EEDC(v3, v57, (llvm::Value *)v33, (uint64_t)v98, 2, (uint64_t)&__dst);
    goto LABEL_72;
  }
  v37 = 0;
  do
  {
    v38 = *v34;
    v34 += 5;
    if (v38 != v31[13])
      v37 = 1;
  }
  while (v34 != v36);
  if ((v37 & 1) == 0)
  {
LABEL_54:
    if (!v33)
      goto LABEL_72;
    goto LABEL_55;
  }
LABEL_31:
  Name = llvm::Value::getName((llvm::Value *)v33);
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v41 = (const void *)Name;
  v42 = v40;
  if (v40 >= 0x17)
  {
    v58 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v58 = v40 | 7;
    v59 = v58 + 1;
    v43 = (__int128 *)operator new(v58 + 1);
    *(_QWORD *)&v102 = v59 | 0x8000000000000000;
    *(_QWORD *)&__dst = v43;
    *((_QWORD *)&__dst + 1) = v42;
  }
  else
  {
    BYTE7(v102) = v40;
    v43 = &__dst;
    if (!v40)
      goto LABEL_60;
  }
  memmove(v43, v41, v42);
LABEL_60:
  *((_BYTE *)v43 + v42) = 0;
  v60 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 24))
                  + 24);
  std::operator+<char>();
  v61 = std::string::append((std::string *)v93, " for non-trivial C struct has incorrect type");
  v62 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v105[0] = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v105[0] >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (v105[0] >= 0)
    v64 = HIBYTE(v105[0]) & 0x7F;
  else
    v64 = (size_t)__p[1];
  sub_22E628310((uint64_t)v31, v60, v63, v64);
  if (SHIBYTE(v105[0]) < 0)
    operator delete(__p[0]);
  if ((v93[23] & 0x80000000) != 0)
    operator delete(*(void **)v93);
  if (SBYTE7(v102) < 0)
    operator delete((void *)__dst);
LABEL_72:
  sub_22E48F084(v81);
  if (v75 < 0)
    operator delete(v74[0]);
  if (v78 < 0)
    operator delete(v77);
}

void sub_22E551734(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
    a2 |= 4uLL;
  sub_22E55798C((std::string *)(a1 - 24), a2, 0);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a4, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  }
}

void sub_22E551798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char v34;
  char v35[24];
  void *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44[3];
  uint64_t v45[2];
  char v46[32];
  __int16 v47;
  __int128 v48[3];
  _QWORD v49[3];
  char v50;
  __int16 v51;
  _QWORD v52[2];
  _QWORD v53[4];

  v53[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 72) & 4) != 0)
    v4 = 1;
  else
    v4 = (*(unsigned __int8 *)(a3 + 72) >> 2) & 1;
  v25 = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v26[24] = *(_QWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 24);
  *(_OWORD *)&v28[8] = *(_OWORD *)(a3 + 32);
  *(_QWORD *)&v28[24] = *(_QWORD *)(a3 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  sub_22E550210((uint64_t)v35, "__move_assignment_", 0x12uLL, v5, v6, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
  sub_22E551734((uint64_t)&v36, v7, v4, (uint64_t)&__p);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)v26 = v5;
  *(_QWORD *)v28 = v6;
  v45[0] = 0;
  v45[1] = a1;
  sub_22E48EE24(v45, 0, 0);
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = (__int128 *)&v26[48 * v8 - 16];
    v12 = v11[1];
    v44[0] = *v11;
    v44[1] = v12;
    v44[2] = v11[2];
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v51 = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v44, v13, (uint64_t)v49, (uint64_t)&v38);
    v9 = 0;
    v14 = v39;
    *v11 = v38;
    v11[1] = v14;
    v11[2] = v40;
    v8 = 1;
  }
  while ((v10 & 1) != 0);
  v15 = 0;
  v40 = *(_OWORD *)&v26[16];
  v41 = v27;
  v42 = *(_OWORD *)v28;
  v43 = *(_OWORD *)&v28[16];
  v38 = v25;
  v39 = *(_OWORD *)v26;
  v16 = 1;
  v52[0] = 0;
  v52[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  do
  {
    v17 = v16;
    v18 = &v38 + 3 * v15;
    v52[v15] = *((_QWORD *)v18 + 2);
    v19 = v18[1];
    v20 = v18[2];
    v48[0] = *v18;
    v48[1] = v19;
    v48[2] = v20;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
    v47 = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v48, v21, (uint64_t)v46, (uint64_t)v49);
    if ((v50 & 3) != 0)
      v22 = sub_22F28ABCC(v49, a1);
    else
      v22 = v49[0];
    v16 = 0;
    v53[v15] = v22;
    v15 = 1;
  }
  while ((v17 & 1) != 0);
  v23 = (llvm::Value *)sub_22E559088();
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 3);
    v51 = 257;
    sub_22F24EEDC(a1, v24, v23, (uint64_t)v53, 2, (uint64_t)v49);
  }
  sub_22E48F084(v45);
  if (v34 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(v36);
}

uint64_t sub_22E551A94(uint64_t a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  void *__p;
  char v10;
  _BYTE v11[24];
  void *v12;
  char v13;

  sub_22E550210((uint64_t)v11, "__copy_constructor_", 0x13uLL, a2, a3, *(_QWORD *)(a1 + 144));
  sub_22E550330((uint64_t)&v12, a5, a4, (uint64_t)&__p);
  v7 = sub_22E554D8C();
  if (v10 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return v7;
}

uint64_t sub_22E551B90(uint64_t a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  void *__p;
  char v10;
  _BYTE v11[24];
  void *v12;
  char v13;

  sub_22E550210((uint64_t)v11, "__move_assignment_", 0x12uLL, a2, a3, *(_QWORD *)(a1 + 144));
  sub_22E551734((uint64_t)&v12, a5, a4, (uint64_t)&__p);
  v7 = sub_22E559088();
  if (v10 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return v7;
}

unint64_t sub_22E551C8C(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, uint64_t a5, __int128 *a6)
{
  unint64_t result;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  llvm::Instruction *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  llvm::GetElementPtrInst *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  llvm::PHINode *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::LLVMContext *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61[3];
  char v62[32];
  __int16 v63;
  __int128 v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68[4];
  __int128 v69;
  __int128 v70;
  __int128 v71[4];
  __int128 v72;
  __int128 v73;
  uint64_t v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  result = sub_22EF5C728(*a1, a3);
  if (!result)
    __asm { BR              X10 }
  v13 = result;
  if ((a3 & 4) != 0)
    v14 = 1;
  else
    v14 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v58 = *a6;
  v59 = a6[1];
  v60 = a6[2];
  if (a2)
  {
    v15 = *a1;
    sub_22EF5CCD0(*a1, *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0), (uint64_t)v68);
    v16 = *(_QWORD *)v68;
    v17 = sub_22EF5BA38(v15, v13 & 0xFFFFFFFFFFFFFFF0);
    if (v16 < 16
      || (v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      && *(_BYTE *)(v19 + 16) == 45)
    {
      v56 = a2;
      v78 = v58;
      v79 = v59;
      v80 = v60;
      v20 = (_QWORD *)a1[1];
      v21 = *(_QWORD *)(v20[18] + 144);
      *(_QWORD *)&v71[0] = 0;
      *(_OWORD *)v68 = v58;
      v69 = v59;
      v70 = v60;
      v22 = sub_22E55276C(*a1, a4);
      v55 = a1 + 1;
      sub_22E552658(&v78, a1 + 1, (__int128 *)v68, v22 + a5);
      *(_OWORD *)v68 = v78;
      v69 = v79;
      v70 = v80;
      v23 = sub_22E620E9C((uint64_t)v20, (llvm::LLVMContext *)v13, v71, (uint64_t)v68);
      v54 = v21;
      sub_22EF5CCD0(v21, *(_QWORD *)(*(_QWORD *)&v71[0] & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v75);
      v24 = llvm::ConstantInt::get();
      LOWORD(v77) = 257;
      v25 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v20 + 34), v24, (uint64_t)v23, (uint64_t)&v75, 1, 0);
      v72 = *(_OWORD *)v68;
      v73 = v69;
      *(_OWORD *)v74 = v70;
      v26 = *(_QWORD *)(v20[18] + 8);
      LOWORD(v67) = 257;
      sub_22E3BEE6C(v20 + 34, &v72, v26, (uint64_t)&v65, (uint64_t)&v75);
      v27 = v20[1];
      v57 = v14;
      if ((BYTE8(v76) & 3) != 0)
        v28 = (uint64_t *)sub_22F28ABCC(&v75, v20);
      else
        v28 = (uint64_t *)v75;
      LOWORD(v67) = 257;
      v29 = sub_22E3E5044(v20 + 34, v27, v28, v25, (uint64_t)&v65);
      v30 = *(_QWORD *)(v20[18] + 104);
      *(_QWORD *)&v65 = "dstarray.end";
      LOWORD(v67) = 259;
      v53 = sub_22E3C1740(v20 + 34, 49, (uint64_t)v29, v30, (uint64_t)&v65);
      v31 = v20[40];
      *(_QWORD *)&v65 = "loop.header";
      LOWORD(v67) = 259;
      v32 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      sub_22E5ED9B4(v20, v32, 0);
      v33 = *(_QWORD *)(v20[18] + 104);
      *(_QWORD *)&v65 = "addr.cur";
      LOWORD(v67) = 259;
      v34 = (llvm::PHINode *)sub_22E3C4B80(v20 + 34, v33, 2, (uint64_t)&v65);
      if ((BYTE8(v79) & 3) != 0)
        v35 = sub_22F28ABCC(&v78, v20);
      else
        v35 = v78;
      sub_22E3C4C50(v34, v35, v31);
      *(_QWORD *)&v65 = "loop.exit";
      LOWORD(v67) = 259;
      v36 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v65 = "loop.body";
      LOWORD(v67) = 259;
      v37 = (_QWORD *)operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v65 = "done";
      LOWORD(v67) = 259;
      v38 = sub_22E3C18F4((uint64_t)(v20 + 34), 32, (uint64_t *)v34, v53, (uint64_t)&v65);
      v39 = llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x23489C09C](v39, v36, v37, v38, 0);
      LOWORD(v67) = 257;
      sub_22E3C12C8(v20 + 34, v39, (uint64_t)&v65);
      sub_22E5ED9B4(v20, v37, 0);
      v40 = *(_QWORD *)(v13 + 32);
      sub_22EF5CCD0(v54, *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v65);
      v41 = v65;
      v65 = v58;
      v66 = v59;
      v42 = v20[12];
      *(_QWORD *)&v65 = v34;
      *((_QWORD *)&v65 + 1) = v42;
      *(_QWORD *)&v66 = (v79 | v41) & -(uint64_t)(v79 | v41);
      DWORD2(v66) = 0;
      if (v57)
        v43 = v40 | 4;
      else
        v43 = v40;
      v67 = 0uLL;
      v64[1] = v66;
      v64[2] = 0uLL;
      v64[0] = v65;
      sub_22E551C8C(a1, v56, v43, 0, 0, v64);
      v44 = v20[40];
      v61[0] = v65;
      v61[1] = v66;
      v61[2] = v67;
      sub_22E552658(&v65, v55, v61, v41);
      if ((BYTE8(v66) & 3) != 0)
        v45 = sub_22F28ABCC(&v65, v20);
      else
        v45 = v65;
      sub_22E3C4C50(v34, v45, v44);
      v46 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      v63 = 257;
      sub_22E3C12C8(v20 + 34, v46, (uint64_t)v62);
      return sub_22E5ED9B4(v20, v36, 0);
    }
    else
    {
      llvm::Type::getInt64Ty(*(llvm::Type **)(a1[1] + 336), v18);
      llvm::ConstantInt::get();
      *(_OWORD *)v68 = v58;
      v69 = v59;
      v70 = v60;
      v47 = sub_22E55276C(*a1, a4);
      sub_22E552658(&v78, a1 + 1, (__int128 *)v68, v47 + a5);
      v48 = a1[1];
      v75 = v78;
      v76 = v79;
      v77 = v80;
      v49 = *(_QWORD *)(v48 + 8);
      LOWORD(v74[0]) = 257;
      sub_22E3BEE6C((uint64_t *)(v48 + 272), &v75, v49, (uint64_t)&v72, (uint64_t)v68);
      v50 = a1[1];
      v51 = v50 + 272;
      v72 = *(_OWORD *)v68;
      v73 = v69;
      *(_OWORD *)v74 = v70;
      llvm::Type::getInt8Ty(*(llvm::Type **)(v50 + 336), v52);
      llvm::ConstantInt::get();
      return sub_22F2483D8(v51, &v72);
    }
  }
  return result;
}

double sub_22E552658(__int128 *a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v23[3];
  _OWORD v24[3];
  _BYTE v25[32];
  __int16 v26;
  __int128 v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (a4)
  {
    v10 = *a2;
    v11 = (uint64_t *)(*a2 + 272);
    v12 = a3[1];
    v27[0] = *a3;
    v27[1] = v12;
    v27[2] = a3[2];
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 8);
    v26 = 257;
    sub_22E3BEE6C(v11, v27, v13, (uint64_t)v25, (uint64_t)&v28);
    v14 = v29;
    *a3 = v28;
    a3[1] = v14;
    a3[2] = v30;
    v15 = (uint64_t *)(*a2 + 272);
    v16 = a3[1];
    v24[0] = *a3;
    v24[1] = v16;
    v24[2] = a3[2];
    v26 = 257;
    sub_22F2486C4(v15, (uint64_t)v24, a4, (uint64_t)v25, (uint64_t)&v28);
    v17 = v29;
    *a3 = v28;
    a3[1] = v17;
    a3[2] = v30;
    v18 = *a2;
    v19 = (uint64_t *)(*a2 + 272);
    v20 = a3[1];
    v23[0] = *a3;
    v23[1] = v20;
    v23[2] = a3[2];
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 144) + 96);
    LOWORD(v30) = 257;
    *(_QWORD *)&v7 = sub_22E3BEE6C(v19, v23, v21, (uint64_t)&v28, (uint64_t)a1).n128_u64[0];
  }
  else
  {
    v6 = a3[1];
    *a1 = *a3;
    a1[1] = v6;
    v7 = a3[2];
    a1[2] = v7;
  }
  return *(double *)&v7;
}

unint64_t sub_22E55276C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a2;
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    v6 = (*(_WORD *)(v5 + 8) & 0x7E) - 34;
    if (v5)
      v7 = v5 - 64;
    else
      v7 = 0;
    if (v6 >= 4)
      v8 = 0;
    else
      v8 = v7;
    v9 = sub_22F0C975C(a1, v8);
    v2 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * sub_22EFC306C(v2));
  }
  return v2 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22E5527FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  result = sub_22EFC3B90(v7);
  if (result)
  {
    v9 = result;
LABEL_3:
    v10 = *(_QWORD *)(v9 + 48);
    if ((v4 & 4) != 0 || (*(_BYTE *)(v6 + 8) & 4) != 0)
      v10 |= 4uLL;
    v12 = v10;
    v11 = sub_22F111C54(&v12);
    result = (unint64_t)sub_22E5528BC(a1, v11, v10, v9, a3);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
  return result;
}

std::string *sub_22E5528BC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::string *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  void *v37[2];
  char v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  int v45;
  __int128 v46;
  uint64_t v47;

  result = (std::string *)sub_22EF5C728(*(_QWORD *)a1, a3);
  if (!result)
    __asm { BR              X10 }
  v11 = (uint64_t)result;
  if ((a3 & 4) != 0)
  {
    v12 = 1;
    if (!(_DWORD)a2)
      return result;
  }
  else
  {
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    if (!(_DWORD)a2)
      return result;
  }
  v13 = sub_22E55276C(*(_QWORD *)a1, a4) + a5;
  v14 = *(_QWORD *)a1;
  v45 = sub_22EF6A060(*(_QWORD *)a1, v11);
  v15 = sub_22EF5BA38(v14, *(_QWORD *)(v11 + 32));
  sub_22EF5CCD0(v14, *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v46);
  v16 = v46;
  v39 = v13;
  sub_22E3CE31C((uint64_t)&v40);
  v17 = std::string::insert(&v40, 0, "_AB");
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v41, "s");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v36 = v16;
  sub_22E3CE31C((uint64_t)v37);
  if (v38 >= 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if (v38 >= 0)
    v22 = v38 & 0x7F;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&v42, (const std::string::value_type *)v21, v22);
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v43, "n");
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  sub_22E3CEA68((uint64_t)__p);
  if (v35 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if (v35 >= 0)
    v28 = v35 & 0x7F;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
  v30 = v29->__r_.__value_.__r.__words[2];
  v46 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v31 = (const std::string::value_type *)&v46;
  else
    v31 = (const std::string::value_type *)v46;
  if (v47 >= 0)
    v32 = HIBYTE(v47) & 0x7F;
  else
    v32 = *((_QWORD *)&v46 + 1);
  std::string::append((std::string *)(a1 + 8), v31, v32);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v12)
    v33 = v15 | 4;
  else
    v33 = v15;
  sub_22E5528BC(a1, a2, v33, 0, v13);
  return std::string::append((std::string *)(a1 + 8), "_AE", 3uLL);
}

void sub_22E552CF8(std::string *a1, int a2)
{
  void **v3;
  std::string::size_type v4;
  void *__p[2];
  char v6;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2)
    MEMORY[0x2348A0C14](a1, "v");
  sub_22E3CE31C((uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v6 >= 0)
    v4 = v6 & 0x7F;
  else
    v4 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v3, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

uint64_t sub_22E552D84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void **v9;
  void **v10;
  uint64_t *v11;
  uint64_t Function;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t Name;
  unint64_t v20;
  const void *v21;
  size_t v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  std::string *v51;
  std::string::size_type v52;
  __int128 *p_p;
  size_t v54;
  uint64_t v56;
  uint64_t v57[2];
  uint64_t v58[4];
  uint64_t v59;
  _BYTE v60[32];
  __int128 v61;
  void *v62[2];
  _BYTE v63[128];
  void **__dst;
  size_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 __p;
  _QWORD v69[20];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (uint64_t *)v0;
  v69[17] = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v24 = v2[18];
    *(_QWORD *)&__p = v69;
    *((_QWORD *)&__p + 1) = 0x1000000000;
    v25 = sub_22E5532CC((uint64_t)v2, (uint64_t)&__p);
    v26 = sub_22E46F2EC((uint64_t)(v2 + 35), v25);
    LOWORD(v67) = 261;
    __dst = v10;
    v65 = v8;
    v27 = v2[25];
    v13 = llvm::User::operator new((llvm::User *)0x78);
    v28 = MEMORY[0x23489F6FC](v13, v26, 3, 0xFFFFFFFFLL, &__dst, v27);
    v29 = *(_DWORD *)(v28 + 32);
    v30 = v29 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v28 + 32) = v30;
    if ((v29 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13) & 1) != 0)
      {
LABEL_20:
        v56 = v4;
        sub_22E62A548((uint64_t)v2, 0, 0, v25, (llvm::Value *)v13, 0);
        sub_22E62A5F4(v2, 0, (llvm::Function *)v13);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v2, 0);
        *v11 = (uint64_t)&__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v24 + 16392), (llvm::Value *)v13, v25, (uint64_t *)&__p, 0, v31, 0);
        v32 = *v11;
        v57[0] = 0;
        v57[1] = v32;
        sub_22E48EE24(v57, 0, 0);
        v33 = v62;
        v62[0] = v63;
        v62[1] = (void *)0x1000000000;
        if (DWORD2(__p))
        {
          sub_22F24C890((uint64_t)v62, (uint64_t)&__p);
          v33 = *(void ***)v62[0];
        }
        v34 = *v11;
        v35 = (uint64_t *)(*v11 + 272);
        v36 = (uint64_t *)(*v11 + 2904);
        v58[0] = (uint64_t)v33;
        *(_QWORD *)v60 = 0;
        v37 = sub_22E3CED3C(v36, v58, v60);
        v38 = *(_QWORD *)v60;
        if (!v37)
          v38 = *(_QWORD *)(v34 + 2904) + 56 * *(unsigned int *)(v34 + 2920);
        v39 = *(_OWORD *)(v38 + 8);
        v40 = *(_OWORD *)(v38 + 40);
        *(_OWORD *)&v60[16] = *(_OWORD *)(v38 + 24);
        v61 = v40;
        *(_OWORD *)v60 = v39;
        LOWORD(v59) = 257;
        v41 = sub_22E3C2A7C(v35, (uint64_t)v60, (uint64_t)v58);
        v42 = *(_QWORD *)(v34 + 96);
        if (v62[0] != v63)
          free(v62[0]);
        v43 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v44 = sub_22EFC3B90(v43);
        if (v44)
        {
          v45 = v44;
LABEL_28:
          v46 = *(_QWORD *)(v45 + 48);
          if ((v6 & 4) != 0 || (*(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v46 |= 4uLL;
          v58[0] = v46;
          v47 = sub_22F111C54(v58);
          *(_QWORD *)v60 = v41;
          *(_QWORD *)&v60[8] = v42;
          *(_QWORD *)&v60[16] = v56;
          *(_DWORD *)&v60[24] = 0;
          v61 = 0uLL;
          sub_22E551C8C(v11 - 1, v47, v46, v45, 0, v60);
          while (1)
          {
            v45 = *(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v45)
              break;
            if ((*(_DWORD *)(v45 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_28;
          }
        }
        sub_22E619DE8(*v11, 0);
        sub_22E48F084(v57);
        sub_22E619434((uint64_t)&__dst);
        if ((_QWORD *)__p != v69)
          free((void *)__p);
        return v13;
      }
      v30 = *(_DWORD *)(v13 + 32);
    }
    *(_DWORD *)(v13 + 32) = v30 | 0x4000;
    goto LABEL_20;
  }
  v13 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_12;
  if ((*(_WORD *)(Function + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    v14 = *(_QWORD **)(v13 + 88);
    if ((*(_WORD *)(v13 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v13);
      v15 = *(_QWORD **)(v13 + 88);
      goto LABEL_6;
    }
  }
  else
  {
    v14 = *(_QWORD **)(Function + 88);
  }
  v15 = v14;
LABEL_6:
  v16 = &v15[5 * *(_QWORD *)(v13 + 96)];
  if (v14 != v16)
  {
    v17 = 0;
    do
    {
      v18 = *v14;
      v14 += 5;
      if (v18 != v2[13])
        v17 = 1;
    }
    while (v14 != v16);
    if ((v17 & 1) != 0)
    {
LABEL_12:
      Name = llvm::Value::getName((llvm::Value *)v13);
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v21 = (const void *)Name;
      v22 = v20;
      if (v20 >= 0x17)
      {
        v48 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v48 = v20 | 7;
        v49 = v48 + 1;
        p_dst = (void **)operator new(v48 + 1);
        v65 = v22;
        v66 = v49 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v66) = v20;
        p_dst = (void **)&__dst;
        if (!v20)
          goto LABEL_41;
      }
      memmove(p_dst, v21, v22);
LABEL_41:
      *((_BYTE *)p_dst + v22) = 0;
      v50 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 24))
                      + 24);
      std::operator+<char>();
      v51 = std::string::append((std::string *)v60, " for non-trivial C struct has incorrect type");
      v52 = v51->__r_.__value_.__r.__words[2];
      __p = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v69[0] = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (v69[0] >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if (v69[0] >= 0)
        v54 = HIBYTE(v69[0]) & 0x7F;
      else
        v54 = *((_QWORD *)&__p + 1);
      sub_22E628310((uint64_t)v2, v50, p_p, v54);
      if (SHIBYTE(v69[0]) < 0)
        operator delete((void *)__p);
      if ((v60[23] & 0x80000000) != 0)
        operator delete(*(void **)v60);
      if (SHIBYTE(v66) < 0)
        operator delete(__dst);
      return 0;
    }
  }
  return v13;
}

uint64_t sub_22E5532CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 144);
  v5 = sub_22EF5B848(v4, *(_QWORD *)(v4 + 16816), 0);
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(v4 + 15192), "dst", 3uLL);
  v8 = sub_22EFC4364(v4, 0, 0, v6, v5, 5);
  sub_22E553414(a2, *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8), (char *)&v8, (char *)&v9);
  return sub_22F24E348(a1 + 280, *(_QWORD *)(v4 + 16392), (uint64_t *)a2);
}

uint64_t sub_22E553414(uint64_t result, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_22F246808(result, a3, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (a4 - a3) >> 3;
  if (v8 + v10 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = *(unsigned int *)(v6 + 8);
  }
  v11 = (char *)(v7 + 8 * v9);
  v12 = (char *)(v7 + 8 * v8);
  v13 = (v12 - v11) >> 3;
  if (v13 >= v10)
  {
    result = sub_22F246808(v6, &v12[-8 * v10], (char *)(v7 + 8 * v8));
    if (&v12[-8 * v10] != v11)
      result = (uint64_t)memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
    while (v5 != a4)
    {
      v17 = *(_QWORD *)v5;
      v5 += 8;
      *(_QWORD *)v11 = v17;
      v11 += 8;
    }
  }
  else
  {
    v14 = v8 + ((unint64_t)(a4 - v5) >> 3);
    *(_DWORD *)(v6 + 8) = v14;
    if (v9 != v8)
    {
      result = (uint64_t)memcpy((void *)(v7 + 8 * v14 - 8 * v13), v11, v12 - v11);
      do
      {
        v15 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v11 = v15;
        v11 += 8;
        --v13;
      }
      while (v13);
    }
    while (v5 != a4)
    {
      v16 = *(_QWORD *)v5;
      v5 += 8;
      *(_QWORD *)v12 = v16;
      v12 += 8;
    }
  }
  return result;
}

void sub_22E55356C(std::string *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v8 = sub_22EFC3B90(v7);
  if (v8)
  {
    v9 = v8;
LABEL_3:
    v10 = *(_QWORD *)(v9 + 48);
    if ((v4 & 4) != 0 || (*(_BYTE *)(v6 + 8) & 4) != 0)
      v10 |= 4uLL;
    v12 = v10;
    v11 = sub_22F111B38(&v12);
    sub_22E5537A8(a1, v11, v10, v9, a3);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
  sub_22E553630(a1);
}

void sub_22E553630(std::string *a1)
{
  std::string::size_type *p_size;
  std::string *v2;
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void *__p[2];
  char v14;
  std::string::size_type size;
  std::string v16;
  std::string v17;
  std::string v18;
  __int128 v19;
  uint64_t v20;

  p_size = &a1->__r_.__value_.__l.__size_;
  if (a1->__r_.__value_.__l.__size_ != a1->__r_.__value_.__r.__words[2])
  {
    v2 = a1 + 1;
    size = a1->__r_.__value_.__l.__size_;
    sub_22E3CE31C((uint64_t)&v16);
    v3 = std::string::insert(&v16, 0, "_t");
    v4 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v17, "w");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_22E3CE31C((uint64_t)__p);
    if (v14 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v14 >= 0)
      v8 = v14 & 0x7F;
    else
      v8 = (std::string::size_type)__p[1];
    v9 = std::string::append(&v18, (const std::string::value_type *)v7, v8);
    v10 = v9->__r_.__value_.__r.__words[2];
    v19 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v20 >= 0)
      v11 = (const std::string::value_type *)&v19;
    else
      v11 = (const std::string::value_type *)v19;
    if (v20 >= 0)
      v12 = HIBYTE(v20) & 0x7F;
    else
      v12 = *((_QWORD *)&v19 + 1);
    std::string::append(v2, v11, v12);
    if (SHIBYTE(v20) < 0)
      operator delete((void *)v19);
    if (v14 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    *p_size = 0;
    p_size[1] = 0;
  }
}

std::string *sub_22E5537A8(std::string *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t *v38;
  void *__p[2];
  char v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  unint64_t v44;
  std::string v45;
  int v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  __int128 v51;
  uint64_t v52;

  v10 = sub_22EF5C728(a1->__r_.__value_.__r.__words[0], a3);
  if (!v10)
  {
    if ((_DWORD)a2)
    {
      sub_22E553630(a1);
      __asm { BR              X10 }
    }
    v38 = (uint64_t *)a1;
    v37 = a3;
    return (std::string *)sub_22E553FC0(v38, v37, a4, a5);
  }
  v11 = v10;
  if ((a3 & 4) != 0)
  {
    v12 = 1;
    if ((_DWORD)a2)
      goto LABEL_4;
    goto LABEL_45;
  }
  v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  if (!(_DWORD)a2)
  {
LABEL_45:
    v37 = v10 & 0xFFFFFFFFFFFFFFF0;
    v38 = (uint64_t *)a1;
    return (std::string *)sub_22E553FC0(v38, v37, a4, a5);
  }
LABEL_4:
  sub_22E553630(a1);
  v13 = a1->__r_.__value_.__r.__words[0];
  v14 = sub_22E5540CC((uint64_t *)a1, a4);
  v15 = v14 / sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0)) + a5;
  v16 = a1->__r_.__value_.__r.__words[0];
  v46 = sub_22EF6A060(a1->__r_.__value_.__r.__words[0], v11);
  v17 = sub_22EF5BA38(v16, *(_QWORD *)(v11 + 32));
  sub_22EF5CCD0(v16, *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v51);
  v18 = v51;
  v44 = v15;
  sub_22E3CE31C((uint64_t)&v45);
  v19 = std::string::insert(&v45, 0, "_AB");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v47, "s");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v41 = v18;
  sub_22E3CE31C((uint64_t)v42);
  if (v43 >= 0)
    v23 = v42;
  else
    v23 = (void **)v42[0];
  if (v43 >= 0)
    v24 = v43 & 0x7F;
  else
    v24 = (std::string::size_type)v42[1];
  v25 = std::string::append(&v48, (const std::string::value_type *)v23, v24);
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v49, "n");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  sub_22E3CEA68((uint64_t)__p);
  if (v40 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if (v40 >= 0)
    v30 = v40 & 0x7F;
  else
    v30 = (std::string::size_type)__p[1];
  v31 = std::string::append(&v50, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[2];
  v51 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v52 >= 0)
    v33 = (const std::string::value_type *)&v51;
  else
    v33 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v34 = HIBYTE(v52) & 0x7F;
  else
    v34 = *((_QWORD *)&v51 + 1);
  std::string::append(a1 + 1, v33, v34);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v12)
    v35 = v17 | 4;
  else
    v35 = v17;
  sub_22E5537A8(a1, a2, v35, 0, v15);
  return std::string::append(a1 + 1, "_AE", 3uLL);
}

void sub_22E553C84()
{
  std::string *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  BOOL v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;

  std::string::append(v0 + 1, "_s", 2uLL);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    std::string::append(v0 + 1, "b", 1uLL);
  v4 = v0->__r_.__value_.__r.__words[0];
  sub_22E5540CC((uint64_t *)v0, v1);
  sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
  if ((v2 & 4) != 0)
    v5 = 1;
  else
    v5 = (*(unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  sub_22E552CF8((std::string *)(v3 - 112), v5);
  v6 = *(_BYTE *)(v3 - 89);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (const std::string::value_type *)(v3 - 112);
  else
    v8 = *(const std::string::value_type **)(v3 - 112);
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(v3 - 104);
  else
    v10 = v9;
  std::string::append(v0 + 1, v8, v10);
  if (*(char *)(v3 - 89) < 0)
    JUMPOUT(0x22E553FB8);
  JUMPOUT(0x22E553A80);
}

unint64_t sub_22E553FC0(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = *a1;
  result = sub_22E554090(a3, a2, *a1);
  if (result)
  {
    v9 = result;
    v10 = sub_22E5540CC(a1, a3);
    v11 = sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v12 = (v9 + v10 + v11 - 1) / v11 * v11;
    if (a1[1] == a1[2])
      a1[1] = v10 / sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0)) + a4;
    result = sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
    a1[2] = v12 / result + a4;
  }
  return result;
}

uint64_t sub_22E554090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && (*(_BYTE *)(a1 + 68) & 1) != 0)
    return sub_22EFC2EF4(a1, a3);
  else
    return sub_22EF5CDF0(a3, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22E5540CC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)v5;
  v6 = (*(_WORD *)(v5 + 8) & 0x7E) - 34;
  if (v5)
    v7 = v5 - 64;
  else
    v7 = 0;
  if (v6 >= 4)
    v8 = 0;
  else
    v8 = v7;
  v9 = sub_22F0C975C(v3, v8);
  return *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * sub_22EFC306C(a2));
}

void sub_22E554140(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  void **v11;
  void *v12[2];
  uint64_t v13;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = MEMORY[0x24BED83D8] + 16;
  v11 = v12;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::operator<<();
  if (SHIBYTE(v13) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a1, *v11, (unint64_t)v11[1]);
  }
  else
  {
    v2 = *(_OWORD *)v11;
    *(_QWORD *)(a1 + 16) = v11[2];
    *(_OWORD *)a1 = v2;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

unint64_t sub_22E554208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  result = sub_22EFC3B90(v7);
  if (result)
  {
    v9 = result;
LABEL_3:
    v10 = *(_QWORD *)(v9 + 48);
    if ((v4 & 4) != 0 || (*(_BYTE *)(v6 + 8) & 4) != 0)
      v10 |= 4uLL;
    v11 = sub_22F115260(v10);
    result = (unint64_t)sub_22E5542BC(a1, v11, v10, v9, a3);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
  return result;
}

std::string *sub_22E5542BC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  std::string *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  void *v37[2];
  char v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  int v45;
  __int128 v46;
  uint64_t v47;

  result = (std::string *)sub_22EF5C728(*(_QWORD *)a1, a3);
  if (!result)
    __asm { BR              X10 }
  v11 = (uint64_t)result;
  if ((a3 & 4) != 0)
  {
    v12 = 1;
    if (!(_DWORD)a2)
      return result;
  }
  else
  {
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    if (!(_DWORD)a2)
      return result;
  }
  v13 = sub_22E55276C(*(_QWORD *)a1, a4) + a5;
  v14 = *(_QWORD *)a1;
  v45 = sub_22EF6A060(*(_QWORD *)a1, v11);
  v15 = sub_22EF5BA38(v14, *(_QWORD *)(v11 + 32));
  sub_22EF5CCD0(v14, *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v46);
  v16 = v46;
  v39 = v13;
  sub_22E3CE31C((uint64_t)&v40);
  v17 = std::string::insert(&v40, 0, "_AB");
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v41, "s");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v36 = v16;
  sub_22E3CE31C((uint64_t)v37);
  if (v38 >= 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if (v38 >= 0)
    v22 = v38 & 0x7F;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&v42, (const std::string::value_type *)v21, v22);
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v43, "n");
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  sub_22E3CEA68((uint64_t)__p);
  if (v35 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if (v35 >= 0)
    v28 = v35 & 0x7F;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
  v30 = v29->__r_.__value_.__r.__words[2];
  v46 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v31 = (const std::string::value_type *)&v46;
  else
    v31 = (const std::string::value_type *)v46;
  if (v47 >= 0)
    v32 = HIBYTE(v47) & 0x7F;
  else
    v32 = *((_QWORD *)&v46 + 1);
  std::string::append((std::string *)(a1 + 8), v31, v32);
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v12)
    v33 = v15 | 4;
  else
    v33 = v15;
  sub_22E5542BC(a1, a2, v33, 0, v13);
  return std::string::append((std::string *)(a1 + 8), "_AE", 3uLL);
}

unint64_t sub_22E5546FC(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t result;
  llvm::LLVMContext *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  llvm::Instruction *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  llvm::GetElementPtrInst *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::PHINode *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51[3];
  _OWORD v52[3];
  uint64_t v53;
  char v54[32];
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  result = sub_22EF5C728(*a1, a3);
  if (!result)
    __asm { BR              X10 }
  v11 = (llvm::LLVMContext *)result;
  if ((a3 & 4) != 0)
    v12 = 1;
  else
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v49 = *a5;
  v50 = a5[1];
  if (a2)
  {
    v47 = v12;
    v48 = a2;
    v13 = a5[1];
    v66 = *a5;
    v67 = v13;
    v15 = *a5;
    v14 = a5[1];
    v68 = a5[2];
    v60 = v15;
    v61 = v14;
    v16 = a5[2];
    v17 = *a1;
    v18 = (_QWORD *)a1[1];
    v19 = *(_QWORD *)(v18[18] + 144);
    v53 = 0;
    v62 = v16;
    v20 = sub_22E55276C(v17, a4);
    v46 = a1 + 1;
    sub_22E552658(&v66, a1 + 1, &v60, v20);
    v60 = v66;
    v61 = v67;
    v62 = v68;
    v21 = sub_22E620E9C((uint64_t)v18, v11, &v53, (uint64_t)&v60);
    sub_22EF5CCD0(v19, *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v63);
    v22 = llvm::ConstantInt::get();
    LOWORD(v65) = 257;
    v23 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v18 + 34), v22, (uint64_t)v21, (uint64_t)&v63, 1, 0);
    v59[0] = v60;
    v59[1] = v61;
    v59[2] = v62;
    v24 = *(_QWORD *)(v18[18] + 8);
    LOWORD(v58) = 257;
    sub_22E3BEE6C(v18 + 34, v59, v24, (uint64_t)&v56, (uint64_t)&v63);
    v25 = v18[1];
    if ((v64 & 3) != 0)
      v26 = (uint64_t *)sub_22F28ABCC(&v63, v18);
    else
      v26 = (uint64_t *)v63;
    LOWORD(v58) = 257;
    v27 = sub_22E3E5044(v18 + 34, v25, v26, v23, (uint64_t)&v56);
    v28 = *(_QWORD *)(v18[18] + 104);
    *(_QWORD *)&v56 = "dstarray.end";
    LOWORD(v58) = 259;
    v45 = sub_22E3C1740(v18 + 34, 49, (uint64_t)v27, v28, (uint64_t)&v56);
    v29 = v18[40];
    *(_QWORD *)&v56 = "loop.header";
    LOWORD(v58) = 259;
    v30 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4(v18, v30, 0);
    v31 = *(_QWORD *)(v18[18] + 104);
    *(_QWORD *)&v56 = "addr.cur";
    LOWORD(v58) = 259;
    v32 = (llvm::PHINode *)sub_22E3C4B80(v18 + 34, v31, 2, (uint64_t)&v56);
    if ((BYTE8(v67) & 3) != 0)
      v33 = sub_22F28ABCC(&v66, v18);
    else
      v33 = v66;
    sub_22E3C4C50(v32, v33, v29);
    *(_QWORD *)&v56 = "loop.exit";
    LOWORD(v58) = 259;
    v34 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v56 = "loop.body";
    LOWORD(v58) = 259;
    v35 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v56 = "done";
    LOWORD(v58) = 259;
    v36 = sub_22E3C18F4((uint64_t)(v18 + 34), 32, (uint64_t *)v32, v45, (uint64_t)&v56);
    v37 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v37, v34, v35, v36, 0);
    LOWORD(v58) = 257;
    sub_22E3C12C8(v18 + 34, v37, (uint64_t)&v56);
    sub_22E5ED9B4(v18, v35, 0);
    v38 = *((_QWORD *)v11 + 4);
    sub_22EF5CCD0(v19, *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v56);
    v39 = v56;
    v56 = v49;
    v57 = v50;
    v40 = v18[12];
    *(_QWORD *)&v56 = v32;
    *((_QWORD *)&v56 + 1) = v40;
    *(_QWORD *)&v57 = (v67 | v39) & -(uint64_t)(v67 | v39);
    DWORD2(v57) = 0;
    if (v47)
      v41 = v38 | 4;
    else
      v41 = v38;
    v58 = 0uLL;
    v52[1] = v57;
    v52[2] = 0uLL;
    v52[0] = v56;
    sub_22E5546FC(a1, v48, v41, 0, v52);
    v42 = v18[40];
    v51[0] = v56;
    v51[1] = v57;
    v51[2] = v58;
    sub_22E552658(&v56, v46, v51, v39);
    if ((BYTE8(v57) & 3) != 0)
      v43 = sub_22F28ABCC(&v56, v18);
    else
      v43 = v56;
    sub_22E3C4C50(v32, v43, v42);
    v44 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v55 = 257;
    sub_22E3C12C8(v18 + 34, v44, (uint64_t)v54);
    return sub_22E5ED9B4(v18, v34, 0);
  }
  return result;
}

uint64_t sub_22E554D8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  void **v11;
  void **v12;
  uint64_t *v13;
  uint64_t Function;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t Name;
  unint64_t v22;
  const void *v23;
  size_t v24;
  void **p_dst;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::string *v43;
  std::string::size_type v44;
  void **v45;
  size_t v46;
  uint64_t v48;
  __int128 v49[6];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62[2];
  _BYTE v63[128];
  void **__dst;
  size_t v65;
  unint64_t v66;
  __int16 v67;
  void *__p[2];
  _QWORD v69[20];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (uint64_t *)v0;
  v69[17] = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v26 = v2[18];
    v48 = v8;
    __p[0] = v69;
    __p[1] = (void *)0x1000000000;
    v27 = sub_22E555294((uint64_t)v2, (uint64_t)__p);
    v28 = sub_22E46F2EC((uint64_t)(v2 + 35), v27);
    v67 = 261;
    __dst = v12;
    v65 = v10;
    v29 = v2[25];
    v15 = llvm::User::operator new((llvm::User *)0x78);
    v30 = MEMORY[0x23489F6FC](v15, v28, 3, 0xFFFFFFFFLL, &__dst, v29);
    v31 = *(_DWORD *)(v30 + 32);
    v32 = v31 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v30 + 32) = v32;
    if ((v31 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v15) & 1) != 0)
      {
LABEL_20:
        sub_22E62A548((uint64_t)v2, 0, 0, v27, (llvm::Value *)v15, 0);
        sub_22E62A5F4(v2, 0, (llvm::Function *)v15);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v2, 0);
        *v13 = (uint64_t)&__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v26 + 16392), (llvm::Value *)v15, v27, (uint64_t *)__p, 0, v33, 0);
        v34 = *v13;
        v56[0] = 0;
        v56[1] = v34;
        sub_22E48EE24(v56, 0, 0);
        v62[0] = v63;
        v62[1] = (void *)0x1000000000;
        if (LODWORD(__p[1]))
          sub_22F24C890((uint64_t)v62, (uint64_t)__p);
        sub_22E55541C((uint64_t)&v50, v6, v4, (_QWORD **)v62, *v13);
        if (v62[0] != v63)
          free(v62[0]);
        v49[2] = v52;
        v49[3] = v53;
        v49[4] = v54;
        v49[5] = v55;
        v49[0] = v50;
        v49[1] = v51;
        v35 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v36 = sub_22EFC3B90(v35);
        if (v36)
        {
          v37 = v36;
LABEL_26:
          v38 = *(_QWORD *)(v37 + 48);
          if ((v48 & 4) != 0 || (*(_BYTE *)((v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v38 |= 4uLL;
          *(_QWORD *)v57 = v38;
          v39 = sub_22F111B38(v57);
          sub_22E5557F4(v13 - 3, v39, v38, v37, v49);
          while (1)
          {
            v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v37)
              break;
            if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_26;
          }
        }
        v58 = v52;
        v59 = v53;
        v60 = v54;
        v61 = v55;
        *(_OWORD *)v57 = v50;
        *(_OWORD *)&v57[16] = v51;
        sub_22E55556C(v13 - 3, (__int128 *)v57);
        sub_22E619DE8(*v13, 0);
        sub_22E48F084(v56);
        sub_22E619434((uint64_t)&__dst);
        if (__p[0] != v69)
          free(__p[0]);
        return v15;
      }
      v32 = *(_DWORD *)(v15 + 32);
    }
    *(_DWORD *)(v15 + 32) = v32 | 0x4000;
    goto LABEL_20;
  }
  v15 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_12;
  if ((*(_WORD *)(Function + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    v16 = *(_QWORD **)(v15 + 88);
    if ((*(_WORD *)(v15 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v15);
      v17 = *(_QWORD **)(v15 + 88);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = *(_QWORD **)(Function + 88);
  }
  v17 = v16;
LABEL_6:
  v18 = &v17[5 * *(_QWORD *)(v15 + 96)];
  if (v16 != v18)
  {
    v19 = 0;
    do
    {
      v20 = *v16;
      v16 += 5;
      if (v20 != v2[13])
        v19 = 1;
    }
    while (v16 != v18);
    if ((v19 & 1) != 0)
    {
LABEL_12:
      Name = llvm::Value::getName((llvm::Value *)v15);
      if (v22 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v23 = (const void *)Name;
      v24 = v22;
      if (v22 >= 0x17)
      {
        v40 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v40 = v22 | 7;
        v41 = v40 + 1;
        p_dst = (void **)operator new(v40 + 1);
        v65 = v24;
        v66 = v41 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v66) = v22;
        p_dst = (void **)&__dst;
        if (!v22)
          goto LABEL_39;
      }
      memmove(p_dst, v23, v24);
LABEL_39:
      *((_BYTE *)p_dst + v24) = 0;
      v42 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 24))
                      + 24);
      std::operator+<char>();
      v43 = std::string::append((std::string *)v57, " for non-trivial C struct has incorrect type");
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v69[0] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (v69[0] >= 0)
        v45 = __p;
      else
        v45 = (void **)__p[0];
      if (v69[0] >= 0)
        v46 = HIBYTE(v69[0]) & 0x7F;
      else
        v46 = (size_t)__p[1];
      sub_22E628310((uint64_t)v2, v42, v45, v46);
      if (SHIBYTE(v69[0]) < 0)
        operator delete(__p[0]);
      if ((v57[23] & 0x80000000) != 0)
        operator delete(*(void **)v57);
      if (SHIBYTE(v66) < 0)
        operator delete(__dst);
      return 0;
    }
  }
  return v15;
}

uint64_t sub_22E555294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 144);
  v16 = 0;
  v5 = sub_22EF5B848(v4, *(_QWORD *)(v4 + 16816), 0);
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = off_24FA64380[v6];
    v10 = strlen(v9);
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(v4 + 15192), v9, v10);
    v12 = sub_22EFC4364(v4, 0, 0, v11, v5, 5);
    v13 = v16;
    if (v16 >= 2uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v16;
    }
    v7 = 0;
    v17[v13] = v12;
    v14 = ++v16;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  sub_22E553414(a2, *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8), (char *)v17, (char *)&v17[v14]);
  return sub_22F24E348(a1 + 280, *(_QWORD *)(v4 + 16392), (uint64_t *)a2);
}

uint64_t sub_22E55541C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  _OWORD v26[3];
  _QWORD v27[4];
  __int16 v28;
  _OWORD v29[3];
  uint64_t v30;

  v10 = (uint64_t *)(a5 + 272);
  v11 = (uint64_t *)(a5 + 2904);
  v24[0] = **a4;
  v27[0] = 0;
  v12 = sub_22E3CED3C((uint64_t *)(a5 + 2904), v24, v27);
  v13 = v27[0];
  if (!v12)
    v13 = *(_QWORD *)(a5 + 2904) + 56 * *(unsigned int *)(a5 + 2920);
  v14 = *(_OWORD *)(v13 + 8);
  v15 = *(_OWORD *)(v13 + 40);
  v29[1] = *(_OWORD *)(v13 + 24);
  v29[2] = v15;
  v29[0] = v14;
  v28 = 257;
  v16 = sub_22E3C2A7C(v10, (uint64_t)v29, (uint64_t)v27);
  v17 = *(_QWORD *)(a5 + 96);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v30 = (*a4)[1];
  v24[0] = 0;
  v18 = sub_22E3CED3C(v11, &v30, v24);
  v19 = v24[0];
  if (!v18)
    v19 = *(_QWORD *)(a5 + 2904) + 56 * *(unsigned int *)(a5 + 2920);
  v20 = *(_OWORD *)(v19 + 8);
  v21 = *(_OWORD *)(v19 + 40);
  v26[1] = *(_OWORD *)(v19 + 24);
  v26[2] = v21;
  v26[0] = v20;
  v25 = 257;
  result = sub_22E3C2A7C(v10, (uint64_t)v26, (uint64_t)v24);
  v23 = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

_QWORD *sub_22E55556C(_QWORD *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint8x8_t v11;
  uint64_t v12;
  llvm::Type *v13;
  int v14;
  uint64_t IntNTy;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[3];
  _OWORD v29[3];
  __int128 v30[3];
  __int128 v31[3];
  _OWORD v32[3];
  _OWORD v33[3];
  __int128 v34[3];
  _BYTE v35[32];
  __int16 v36;
  __int128 v37[3];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45[3];
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = result[1];
  v3 = result[2];
  v4 = result + 1;
  v5 = v3 - v2;
  if (v3 != v2)
  {
    v7 = result;
    v8 = result + 3;
    v9 = a2[1];
    v45[0] = *a2;
    v45[1] = v9;
    v45[2] = a2[2];
    sub_22E552658(&v46, result + 3, v45, v2);
    v10 = a2[4];
    v41[0] = a2[3];
    v41[1] = v10;
    v41[2] = a2[5];
    sub_22E552658(&v42, v8, v41, v7[1]);
    if (v5 <= 15
      && (v11 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v11.i16[0] = vaddlv_u8(v11), v11.i32[0] == 1))
    {
      v12 = *(_QWORD *)(v7[3] + 144);
      v13 = *(llvm::Type **)(v12 + 232);
      v14 = sub_22EF5CDF0(*(_QWORD *)(v12 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      IntNTy = llvm::Type::getIntNTy(v13, (llvm::LLVMContext *)(v14 * v5));
      v16 = (uint64_t *)(*v8 + 272);
      v31[0] = v46;
      v31[1] = v47;
      v31[2] = v48;
      v36 = 257;
      sub_22E3BEE6C(v16, v31, IntNTy, (uint64_t)v35, (uint64_t)&v38);
      v46 = v38;
      v47 = v39;
      v48 = v40;
      v17 = (uint64_t *)(*v8 + 272);
      v30[0] = v42;
      v30[1] = v43;
      v30[2] = v44;
      v36 = 257;
      sub_22E3BEE6C(v17, v30, IntNTy, (uint64_t)v35, (uint64_t)&v38);
      v43 = v39;
      v44 = v40;
      v42 = v38;
      v18 = (uint64_t *)(*v8 + 272);
      v29[0] = v38;
      v29[1] = v39;
      v29[2] = v40;
      LOWORD(v40) = 257;
      v19 = sub_22E485864(v18, (uint64_t)v29, 0, (uint64_t)&v38);
      v20 = *v8 + 272;
      v28[0] = v46;
      v28[1] = v47;
      v28[2] = v48;
      result = (_QWORD *)sub_22E3BEDDC(v20, v19, v28, 0);
    }
    else
    {
      llvm::ConstantInt::get();
      v21 = *v8;
      v22 = (uint64_t *)(*v8 + 272);
      v37[0] = v46;
      v37[1] = v47;
      v37[2] = v48;
      v23 = *(_QWORD *)(v21 + 8);
      v36 = 257;
      sub_22E3BEE6C(v22, v37, v23, (uint64_t)v35, (uint64_t)&v38);
      v46 = v38;
      v47 = v39;
      v48 = v40;
      v24 = *v8;
      v25 = (uint64_t *)(*v8 + 272);
      v34[0] = v42;
      v34[1] = v43;
      v34[2] = v44;
      v26 = *(_QWORD *)(v24 + 8);
      v36 = 257;
      sub_22E3BEE6C(v25, v34, v26, (uint64_t)v35, (uint64_t)&v38);
      v43 = v39;
      v44 = v40;
      v42 = v38;
      v27 = *v8 + 272;
      v33[0] = v46;
      v33[1] = v47;
      v33[2] = v48;
      v32[1] = v39;
      v32[2] = v40;
      v32[0] = v38;
      result = (_QWORD *)sub_22E3E4F38(v27, v33, v32);
    }
    *v4 = 0;
    v4[1] = 0;
  }
  return result;
}

uint64_t sub_22E5557F4(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t v10;
  llvm::LLVMContext *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  llvm::Instruction *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  llvm::GetElementPtrInst *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  llvm::PHINode *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  llvm::PHINode *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  llvm::LLVMContext *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92[3];
  uint64_t v93;
  __int128 v94[2];
  __int128 v95;
  __int128 v96[3];
  __int128 v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EF5C728(*a1, a3);
  if (!v10)
  {
    if (a2)
    {
      v13 = a5[3];
      v116 = a5[2];
      v117 = v13;
      v14 = a5[5];
      v118 = a5[4];
      v119 = v14;
      v15 = a5[1];
      v114 = *a5;
      v115 = v15;
      sub_22E55556C(a1, &v114);
      __asm { BR              X10 }
    }
    v77 = a1;
    v76 = a3;
    return sub_22E5564FC(v77, v76, a4);
  }
  v11 = (llvm::LLVMContext *)v10;
  if ((a3 & 4) != 0)
    v12 = 1;
  else
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v16 = a5[3];
  v88 = a5[2];
  v89 = v16;
  v17 = a5[5];
  v90 = a5[4];
  v91 = v17;
  v18 = a5[1];
  v86 = *a5;
  v87 = v18;
  if (!a2)
  {
    v76 = v10 & 0xFFFFFFFFFFFFFFF0;
    v77 = a1;
    return sub_22E5564FC(v77, v76, a4);
  }
  v81 = v12;
  v19 = a1 + 3;
  v20 = a5[3];
  v116 = a5[2];
  v117 = v20;
  v21 = a5[5];
  v118 = a5[4];
  v119 = v21;
  v22 = a5[1];
  v114 = *a5;
  v115 = v22;
  sub_22E55556C(a1, &v114);
  v23 = 0;
  v85 = (_QWORD *)a1[3];
  v83 = *(_QWORD *)(v85[18] + 144);
  v93 = 0;
  v110 = v88;
  v111 = v89;
  v112 = v90;
  v113 = v91;
  v108 = v86;
  v109 = v87;
  v24 = 1;
  do
  {
    v25 = v24;
    v26 = 3 * v23;
    v27 = &v86 + 3 * v23;
    v28 = v27[1];
    v102 = *v27;
    v103 = v28;
    v104 = v27[2];
    v29 = *a1;
    v30 = sub_22E5540CC(a1, a4);
    v31 = sub_22EF5CDF0(v29, *(_QWORD *)(*(_QWORD *)(v29 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E552658(&v99, a1 + 3, &v102, v30 / v31);
    v24 = 0;
    v32 = &v108 + v26;
    v33 = v100;
    *v32 = v99;
    v32[1] = v33;
    v32[2] = v101;
    v23 = 1;
  }
  while ((v25 & 1) != 0);
  v99 = v108;
  v100 = v109;
  v101 = v110;
  v80 = v11;
  v34 = sub_22E620E9C((uint64_t)v85, v11, &v93, (uint64_t)&v99);
  sub_22EF5CCD0(v83, *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v102);
  v35 = llvm::ConstantInt::get();
  LOWORD(v104) = 257;
  v36 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v85 + 34), v35, (uint64_t)v34, (uint64_t)&v102, 1, 0);
  v96[0] = v99;
  v96[1] = v100;
  v96[2] = v101;
  v37 = *(_QWORD *)(v85[18] + 8);
  LOWORD(v104) = 257;
  v84 = v85 + 34;
  sub_22E3BEE6C(v85 + 34, v96, v37, (uint64_t)&v102, (uint64_t)&v97);
  v38 = v85[1];
  v82 = a1;
  if ((v98 & 3) != 0)
    v39 = (uint64_t *)sub_22F28ABCC(&v97, v85);
  else
    v39 = (uint64_t *)v97;
  LOWORD(v104) = 257;
  v40 = sub_22E3E5044(v84, v38, v39, v36, (uint64_t)&v102);
  v41 = *(_QWORD *)(v85[18] + 104);
  *(_QWORD *)&v102 = "dstarray.end";
  LOWORD(v104) = 259;
  v78 = sub_22E3C1740(v84, 49, (uint64_t)v40, v41, (uint64_t)&v102);
  v42 = v85[40];
  *(_QWORD *)&v102 = "loop.header";
  LOWORD(v104) = 259;
  v43 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4(v85, v43, 0);
  v44 = 0;
  v120 = 0uLL;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = *(_QWORD *)(v85[18] + 104);
    *(_QWORD *)&v102 = "addr.cur";
    LOWORD(v104) = 259;
    v48 = (llvm::PHINode *)sub_22E3C4B80(v84, v47, 2, (uint64_t)&v102);
    *((_QWORD *)&v120 + v44) = v48;
    v49 = &v108 + 3 * v44;
    if ((*((_BYTE *)v49 + 24) & 3) != 0)
      v50 = sub_22F28ABCC(v49, v85);
    else
      v50 = *(_QWORD *)v49;
    sub_22E3C4C50(v48, v50, v42);
    v45 = 0;
    v44 = 1;
  }
  while ((v46 & 1) != 0);
  *(_QWORD *)&v102 = "loop.exit";
  LOWORD(v104) = 259;
  v51 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v102 = "loop.body";
  LOWORD(v104) = 259;
  v52 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v102 = "done";
  LOWORD(v104) = 259;
  v53 = sub_22E3C18F4((uint64_t)v84, 32, (uint64_t *)v120, v78, (uint64_t)&v102);
  v54 = llvm::User::operator new((llvm::User *)0x40);
  v79 = (_QWORD *)v51;
  MEMORY[0x23489C09C](v54, v51, v52, v53, 0);
  LOWORD(v104) = 257;
  sub_22E3C12C8(v84, v54, (uint64_t)&v102);
  sub_22E5ED9B4(v85, v52, 0);
  v55 = *((_QWORD *)v80 + 4);
  sub_22EF5CCD0(v83, *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v102);
  v56 = 0;
  v57 = v102;
  v104 = v88;
  v105 = v89;
  v106 = v90;
  v107 = v91;
  v102 = v86;
  v103 = v87;
  v58 = 1;
  v59 = v85[12];
  do
  {
    v60 = *((_QWORD *)&v120 + v56);
    v61 = 3 * v56;
    v62 = *((_QWORD *)&v108 + 2 * v61 + 2) | v57;
    v63 = &v102 + v61;
    *(_QWORD *)v63 = v60;
    *((_QWORD *)v63 + 1) = v59;
    *((_QWORD *)v63 + 2) = v62 & -v62;
    *((_DWORD *)v63 + 6) = 0;
    LOBYTE(v60) = v58;
    *((_QWORD *)v63 + 4) = 0;
    *((_QWORD *)v63 + 5) = 0;
    v56 = 1;
    v58 = 0;
  }
  while ((v60 & 1) != 0);
  if (v81)
    v64 = v55 | 4;
  else
    v64 = v55;
  sub_22E5557F4(v82, a2, v64, 0, &v102);
  v65 = 0;
  v66 = v85[40];
  v67 = 1;
  do
  {
    v68 = v67;
    v69 = &v102 + 3 * v65;
    v70 = v69[1];
    v92[0] = *v69;
    v92[1] = v70;
    v92[2] = v69[2];
    sub_22E552658(v94, v19, v92, v57);
    v71 = v94[1];
    *v69 = v94[0];
    v69[1] = v71;
    v69[2] = v95;
    v72 = (llvm::PHINode *)*((_QWORD *)&v120 + v65);
    if ((*((_BYTE *)v69 + 24) & 3) != 0)
      v73 = sub_22F28ABCC(v69, v85);
    else
      v73 = *(_QWORD *)v69;
    sub_22E3C4C50(v72, v73, v66);
    v67 = 0;
    v65 = 1;
  }
  while ((v68 & 1) != 0);
  v74 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v95) = 257;
  sub_22E3C12C8(v84, v74, (uint64_t)v94);
  return sub_22E5ED9B4(v85, v79, 0);
}

unint64_t sub_22E5564FC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *a1;
  result = sub_22E554090(a3, a2, *a1);
  if (result)
  {
    v7 = result;
    v8 = sub_22E5540CC(a1, a3);
    v9 = sub_22EF5CDF0(v5, *(_QWORD *)(*(_QWORD *)(v5 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v10 = (v7 + v8 + v9 - 1) / v9 * v9;
    if (a1[1] == a1[2])
      a1[1] = v8 / sub_22EF5CDF0(v5, *(_QWORD *)(*(_QWORD *)(v5 + 16408) & 0xFFFFFFFFFFFFFFF0));
    result = sub_22EF5CDF0(v5, *(_QWORD *)(*(_QWORD *)(v5 + 16408) & 0xFFFFFFFFFFFFFFF0));
    a1[2] = v10 / result;
  }
  return result;
}

uint64_t sub_22E5565B8(uint64_t a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  __int128 v45;
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91[3];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95[3];
  _OWORD v96[8];
  uint64_t v97;
  _BYTE v98[32];
  _BYTE v99[24];
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107[3];
  _OWORD v108[3];
  _OWORD v109[8];
  uint64_t v110;
  _BYTE v111[32];
  _BYTE v112[32];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118[3];
  _OWORD v119[3];
  _BYTE v120[32];
  _BYTE v121[32];
  _BYTE v122[32];
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 144);
  if (a3)
  {
    result = sub_22EFC2F84(a3, *(_QWORD *)(v7 + 144));
    if ((result & 1) != 0)
      return result;
    v10 = *(_QWORD *)(a3 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    v12 = (*(_WORD *)(v11 + 8) & 0x7E) - 34;
    if (v11)
      v13 = v11 - 64;
    else
      v13 = 0;
    if (v12 >= 4)
      v13 = 0;
    v55 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 144) + 280), (llvm::LLVMContext *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0));
    v14 = a4[1];
    v118[0] = *a4;
    v118[1] = v14;
    v118[2] = a4[2];
    v15 = *(_QWORD *)(a1 + 24);
    LOWORD(v134) = 257;
    sub_22E3BEE6C((uint64_t *)(v15 + 272), v118, v55, (uint64_t)&v132, (uint64_t)v119);
    *(_OWORD *)v98 = v119[0];
    *(_OWORD *)&v98[16] = v119[1];
    *(_OWORD *)v99 = v119[2];
    sub_22E6281E0(*(_QWORD **)(v15 + 144), a2, (uint64_t)&v92);
    *(_OWORD *)v111 = *(_OWORD *)v98;
    *(_OWORD *)&v111[16] = *(_OWORD *)&v98[16];
    *(_OWORD *)v112 = *(_OWORD *)v99;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 144) + 144);
    v126 = v92;
    v127 = v93;
    *(_QWORD *)&v128 = v94;
    *(_DWORD *)v121 = 0;
    memset(&v120[8], 0, 24);
    *(_QWORD *)&v121[16] = 0;
    *(_QWORD *)&v121[8] = 0;
    *(_QWORD *)&v122[8] = 0;
    *(_QWORD *)v122 = 0;
    *(_QWORD *)&v122[20] = 2;
    *(_DWORD *)v120 = 0;
    v124 = 0u;
    v123 = 0u;
    sub_22E3C113C((uint64_t)v120, (__int128 *)v111, a2, 2, &v126, v16);
    v17 = *(_QWORD *)(a1 + 24);
    v109[6] = v123;
    v109[7] = v124;
    v110 = v125;
    v109[2] = *(_OWORD *)v121;
    v109[3] = *(_OWORD *)&v121[16];
    v109[4] = *(_OWORD *)v122;
    v109[5] = *(_OWORD *)&v122[16];
    v109[0] = *(_OWORD *)v120;
    v109[1] = *(_OWORD *)&v120[16];
    sub_22E4DD05C(v17, (uint64_t)v109, a3, (uint64_t)v111);
    v60 = *(_QWORD *)v111;
    v54 = *(_QWORD *)&v111[24];
    v18 = *(_QWORD *)v112;
    v61 = *(_OWORD *)&v112[8];
    v62 = *(_OWORD *)&v111[8];
    v19 = *(_QWORD *)&v112[24];
    v21 = *((_QWORD *)&v113 + 1);
    v20 = v113;
    v23 = *((_QWORD *)&v114 + 1);
    v22 = v114;
    v59 = v115;
    v57 = *((_QWORD *)&v116 + 1);
    v58 = v116;
    v56 = v117;
    v24 = a4[3];
    v25 = a4[5];
    v107[1] = a4[4];
    v107[2] = v25;
    v107[0] = v24;
    v26 = *(_QWORD *)(a1 + 24);
    LOWORD(v131) = 257;
    sub_22E3BEE6C((uint64_t *)(v26 + 272), v107, v55, (uint64_t)&v129, (uint64_t)v108);
    v126 = v108[0];
    v127 = v108[1];
    v128 = v108[2];
    sub_22E6281E0(*(_QWORD **)(v26 + 144), a2, (uint64_t)&v132);
    *(_OWORD *)v98 = v126;
    *(_OWORD *)&v98[16] = v127;
    *(_OWORD *)v99 = v128;
    v27 = *(_QWORD *)(v26 + 144);
    v28 = v54;
    v29 = *(_QWORD *)(v27 + 144);
    v92 = v132;
    v93 = v133;
    *(_QWORD *)&v94 = v134;
    *(_DWORD *)v112 = 0;
    memset(&v111[8], 0, 24);
    *(_QWORD *)&v112[16] = 0;
    *(_QWORD *)&v112[8] = 0;
    v113 = 0uLL;
    *(_QWORD *)((char *)&v114 + 4) = 2;
    *(_DWORD *)v111 = 0;
    v115 = 0u;
    v116 = 0u;
    sub_22E3C113C((uint64_t)v111, (__int128 *)v98, a2, 2, &v92, v29);
    v30 = *(_QWORD *)(a1 + 24);
    v96[6] = v115;
    v96[7] = v116;
    v97 = v117;
    v96[2] = *(_OWORD *)v112;
    v96[3] = *(_OWORD *)&v112[16];
    v96[4] = v113;
    v96[5] = v114;
    v96[0] = *(_OWORD *)v111;
    v96[1] = *(_OWORD *)&v111[16];
    sub_22E4DD05C(v30, (uint64_t)v96, a3, (uint64_t)v98);
    v31 = *(_OWORD *)&v98[8];
    v32 = *(_QWORD *)v98;
    v33 = *(_QWORD *)&v98[24];
    v34 = *(_QWORD *)v99;
    v35 = *(_OWORD *)&v99[8];
    v36 = v100;
    v37 = v101;
    v38 = v102;
    v39 = v103;
    v40 = v104;
    v41 = v105;
    v42 = v106;
  }
  else
  {
    v43 = sub_22E66C868(v7 + 280, a2, 0);
    v44 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 272);
    v45 = a4[1];
    v95[0] = *a4;
    v95[1] = v45;
    v95[2] = a4[2];
    *(_WORD *)v121 = 257;
    sub_22E3BEE6C(v44, v95, v43, (uint64_t)v120, (uint64_t)&v126);
    v46 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 272);
    v47 = a4[4];
    v91[0] = a4[3];
    v91[1] = v47;
    v91[2] = a4[5];
    *(_WORD *)v121 = 257;
    sub_22E3BEE6C(v46, v91, v43, (uint64_t)v120, (uint64_t)&v92);
    v48 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v98 = v126;
    *(_OWORD *)&v98[16] = v127;
    *(_OWORD *)v99 = v128;
    sub_22E6281E0(*(_QWORD **)(v48 + 144), a2, (uint64_t)&v129);
    *(_OWORD *)v111 = *(_OWORD *)v98;
    *(_OWORD *)&v111[16] = *(_OWORD *)&v98[16];
    *(_OWORD *)v112 = *(_OWORD *)v99;
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 144) + 144);
    v132 = v129;
    v133 = v130;
    v134 = v131;
    *(_DWORD *)v121 = 0;
    memset(&v120[8], 0, 24);
    *(_QWORD *)&v121[16] = 0;
    *(_QWORD *)&v121[8] = 0;
    *(_QWORD *)&v122[8] = 0;
    *(_QWORD *)v122 = 0;
    *(_QWORD *)&v122[20] = 2;
    *(_DWORD *)v120 = 0;
    v124 = 0u;
    v123 = 0u;
    sub_22E3C113C((uint64_t)v120, (__int128 *)v111, a2, 2, &v132, v49);
    v60 = *(_QWORD *)v120;
    v28 = *(_QWORD *)&v120[24];
    v18 = *(_QWORD *)v121;
    v61 = *(_OWORD *)&v121[8];
    v62 = *(_OWORD *)&v120[8];
    v19 = *(_QWORD *)&v121[24];
    v20 = *(_QWORD *)v122;
    v21 = *(_QWORD *)&v122[8];
    v22 = *(_QWORD *)&v122[16];
    v23 = *(_QWORD *)&v122[24];
    v59 = v123;
    v57 = *((_QWORD *)&v124 + 1);
    v58 = v124;
    v56 = v125;
    v50 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v98 = v92;
    *(_OWORD *)&v98[16] = v93;
    *(_OWORD *)v99 = v94;
    sub_22E6281E0(*(_QWORD **)(v50 + 144), a2, (uint64_t)&v129);
    *(_OWORD *)v111 = *(_OWORD *)v98;
    *(_OWORD *)&v111[16] = *(_OWORD *)&v98[16];
    *(_OWORD *)v112 = *(_OWORD *)v99;
    v132 = v129;
    v51 = *(_QWORD *)(*(_QWORD *)(v50 + 144) + 144);
    v133 = v130;
    v134 = v131;
    *(_DWORD *)v121 = 0;
    memset(&v120[8], 0, 24);
    *(_QWORD *)&v121[16] = 0;
    *(_QWORD *)&v121[8] = 0;
    *(_QWORD *)&v122[8] = 0;
    *(_QWORD *)v122 = 0;
    *(_QWORD *)&v122[20] = 2;
    *(_DWORD *)v120 = 0;
    v124 = 0u;
    v123 = 0u;
    sub_22E3C113C((uint64_t)v120, (__int128 *)v111, a2, 2, &v132, v51);
    v31 = *(_OWORD *)&v120[8];
    v32 = *(_QWORD *)v120;
    v33 = *(_QWORD *)&v120[24];
    v34 = *(_QWORD *)v121;
    v35 = *(_OWORD *)&v121[8];
    v36 = *(_QWORD *)&v121[24];
    v37 = *(_QWORD *)v122;
    v38 = *(_OWORD *)&v122[8];
    v39 = *(_QWORD *)&v122[24];
    v40 = v123;
    v41 = v124;
    v42 = v125;
  }
  v52 = *(_QWORD **)(a1 + 24);
  v80 = v31;
  v79 = v32;
  v81 = v33;
  v82 = v34;
  v83 = v35;
  v84 = v36;
  v85 = v37;
  v86 = v38;
  v87 = v39;
  v88 = v40;
  v89 = v41;
  v90 = v42;
  sub_22E4D7B28(v52, (uint64_t)&v79, 0, (uint64_t)v120);
  v53 = *(_QWORD *)(a1 + 24);
  v77[0] = *(_OWORD *)v120;
  v77[1] = *(_OWORD *)&v120[16];
  v77[2] = *(_OWORD *)v121;
  v78 = *(_QWORD *)&v121[16];
  v63 = v60;
  v64 = v62;
  v65 = v28;
  v66 = v18;
  v67 = v61;
  v68 = v19;
  v69 = v20;
  v70 = v21;
  v71 = v22;
  v72 = v23;
  v73 = v59;
  v74 = v58;
  v75 = v57;
  v76 = v56;
  return sub_22E4DAAE0(v53, v77, &v63, 0, *(double *)&v59);
}

uint64_t sub_22E556CA0(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t v10;
  llvm::LLVMContext *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  llvm::Instruction *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  llvm::GetElementPtrInst *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  llvm::PHINode *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  llvm::PHINode *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  llvm::LLVMContext *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92[3];
  uint64_t v93;
  __int128 v94[2];
  __int128 v95;
  __int128 v96[3];
  __int128 v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EF5C728(*a1, a3);
  if (!v10)
  {
    if (a2)
    {
      v13 = a5[3];
      v116 = a5[2];
      v117 = v13;
      v14 = a5[5];
      v118 = a5[4];
      v119 = v14;
      v15 = a5[1];
      v114 = *a5;
      v115 = v15;
      sub_22E55556C(a1, &v114);
      __asm { BR              X10 }
    }
    v77 = a1;
    v76 = a3;
    return sub_22E5564FC(v77, v76, a4);
  }
  v11 = (llvm::LLVMContext *)v10;
  if ((a3 & 4) != 0)
    v12 = 1;
  else
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v16 = a5[3];
  v88 = a5[2];
  v89 = v16;
  v17 = a5[5];
  v90 = a5[4];
  v91 = v17;
  v18 = a5[1];
  v86 = *a5;
  v87 = v18;
  if (!a2)
  {
    v76 = v10 & 0xFFFFFFFFFFFFFFF0;
    v77 = a1;
    return sub_22E5564FC(v77, v76, a4);
  }
  v81 = v12;
  v19 = a1 + 3;
  v20 = a5[3];
  v116 = a5[2];
  v117 = v20;
  v21 = a5[5];
  v118 = a5[4];
  v119 = v21;
  v22 = a5[1];
  v114 = *a5;
  v115 = v22;
  sub_22E55556C(a1, &v114);
  v23 = 0;
  v85 = (_QWORD *)a1[3];
  v83 = *(_QWORD *)(v85[18] + 144);
  v93 = 0;
  v110 = v88;
  v111 = v89;
  v112 = v90;
  v113 = v91;
  v108 = v86;
  v109 = v87;
  v24 = 1;
  do
  {
    v25 = v24;
    v26 = 3 * v23;
    v27 = &v86 + 3 * v23;
    v28 = v27[1];
    v102 = *v27;
    v103 = v28;
    v104 = v27[2];
    v29 = *a1;
    v30 = sub_22E5540CC(a1, a4);
    v31 = sub_22EF5CDF0(v29, *(_QWORD *)(*(_QWORD *)(v29 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E552658(&v99, a1 + 3, &v102, v30 / v31);
    v24 = 0;
    v32 = &v108 + v26;
    v33 = v100;
    *v32 = v99;
    v32[1] = v33;
    v32[2] = v101;
    v23 = 1;
  }
  while ((v25 & 1) != 0);
  v99 = v108;
  v100 = v109;
  v101 = v110;
  v80 = v11;
  v34 = sub_22E620E9C((uint64_t)v85, v11, &v93, (uint64_t)&v99);
  sub_22EF5CCD0(v83, *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v102);
  v35 = llvm::ConstantInt::get();
  LOWORD(v104) = 257;
  v36 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v85 + 34), v35, (uint64_t)v34, (uint64_t)&v102, 1, 0);
  v96[0] = v99;
  v96[1] = v100;
  v96[2] = v101;
  v37 = *(_QWORD *)(v85[18] + 8);
  LOWORD(v104) = 257;
  v84 = v85 + 34;
  sub_22E3BEE6C(v85 + 34, v96, v37, (uint64_t)&v102, (uint64_t)&v97);
  v38 = v85[1];
  v82 = a1;
  if ((v98 & 3) != 0)
    v39 = (uint64_t *)sub_22F28ABCC(&v97, v85);
  else
    v39 = (uint64_t *)v97;
  LOWORD(v104) = 257;
  v40 = sub_22E3E5044(v84, v38, v39, v36, (uint64_t)&v102);
  v41 = *(_QWORD *)(v85[18] + 104);
  *(_QWORD *)&v102 = "dstarray.end";
  LOWORD(v104) = 259;
  v78 = sub_22E3C1740(v84, 49, (uint64_t)v40, v41, (uint64_t)&v102);
  v42 = v85[40];
  *(_QWORD *)&v102 = "loop.header";
  LOWORD(v104) = 259;
  v43 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4(v85, v43, 0);
  v44 = 0;
  v120 = 0uLL;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = *(_QWORD *)(v85[18] + 104);
    *(_QWORD *)&v102 = "addr.cur";
    LOWORD(v104) = 259;
    v48 = (llvm::PHINode *)sub_22E3C4B80(v84, v47, 2, (uint64_t)&v102);
    *((_QWORD *)&v120 + v44) = v48;
    v49 = &v108 + 3 * v44;
    if ((*((_BYTE *)v49 + 24) & 3) != 0)
      v50 = sub_22F28ABCC(v49, v85);
    else
      v50 = *(_QWORD *)v49;
    sub_22E3C4C50(v48, v50, v42);
    v45 = 0;
    v44 = 1;
  }
  while ((v46 & 1) != 0);
  *(_QWORD *)&v102 = "loop.exit";
  LOWORD(v104) = 259;
  v51 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v102 = "loop.body";
  LOWORD(v104) = 259;
  v52 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v102 = "done";
  LOWORD(v104) = 259;
  v53 = sub_22E3C18F4((uint64_t)v84, 32, (uint64_t *)v120, v78, (uint64_t)&v102);
  v54 = llvm::User::operator new((llvm::User *)0x40);
  v79 = (_QWORD *)v51;
  MEMORY[0x23489C09C](v54, v51, v52, v53, 0);
  LOWORD(v104) = 257;
  sub_22E3C12C8(v84, v54, (uint64_t)&v102);
  sub_22E5ED9B4(v85, v52, 0);
  v55 = *((_QWORD *)v80 + 4);
  sub_22EF5CCD0(v83, *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v102);
  v56 = 0;
  v57 = v102;
  v104 = v88;
  v105 = v89;
  v106 = v90;
  v107 = v91;
  v102 = v86;
  v103 = v87;
  v58 = 1;
  v59 = v85[12];
  do
  {
    v60 = *((_QWORD *)&v120 + v56);
    v61 = 3 * v56;
    v62 = *((_QWORD *)&v108 + 2 * v61 + 2) | v57;
    v63 = &v102 + v61;
    *(_QWORD *)v63 = v60;
    *((_QWORD *)v63 + 1) = v59;
    *((_QWORD *)v63 + 2) = v62 & -v62;
    *((_DWORD *)v63 + 6) = 0;
    LOBYTE(v60) = v58;
    *((_QWORD *)v63 + 4) = 0;
    *((_QWORD *)v63 + 5) = 0;
    v56 = 1;
    v58 = 0;
  }
  while ((v60 & 1) != 0);
  if (v81)
    v64 = v55 | 4;
  else
    v64 = v55;
  sub_22E556CA0(v82, a2, v64, 0, &v102);
  v65 = 0;
  v66 = v85[40];
  v67 = 1;
  do
  {
    v68 = v67;
    v69 = &v102 + 3 * v65;
    v70 = v69[1];
    v92[0] = *v69;
    v92[1] = v70;
    v92[2] = v69[2];
    sub_22E552658(v94, v19, v92, v57);
    v71 = v94[1];
    *v69 = v94[0];
    v69[1] = v71;
    v69[2] = v95;
    v72 = (llvm::PHINode *)*((_QWORD *)&v120 + v65);
    if ((*((_BYTE *)v69 + 24) & 3) != 0)
      v73 = sub_22F28ABCC(v69, v85);
    else
      v73 = *(_QWORD *)v69;
    sub_22E3C4C50(v72, v73, v66);
    v67 = 0;
    v65 = 1;
  }
  while ((v68 & 1) != 0);
  v74 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v95) = 257;
  sub_22E3C12C8(v84, v74, (uint64_t)v94);
  return sub_22E5ED9B4(v85, v79, 0);
}

void sub_22E55798C(std::string *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v8 = sub_22EFC3B90(v7);
  if (v8)
  {
    v9 = v8;
LABEL_3:
    v10 = *(_QWORD *)(v9 + 48);
    if ((v4 & 4) != 0 || (*(_BYTE *)(v6 + 8) & 4) != 0)
      v10 |= 4uLL;
    v12 = v10;
    v11 = sub_22F111B38(&v12);
    sub_22E557A50(a1, v11, v10, v9, a3);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_3;
    }
  }
  sub_22E553630(a1);
}

std::string *sub_22E557A50(std::string *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t *v38;
  void *__p[2];
  char v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  unint64_t v44;
  std::string v45;
  int v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  __int128 v51;
  uint64_t v52;

  v10 = sub_22EF5C728(a1->__r_.__value_.__r.__words[0], a3);
  if (!v10)
  {
    if ((_DWORD)a2)
    {
      sub_22E553630(a1);
      __asm { BR              X10 }
    }
    v38 = (uint64_t *)a1;
    v37 = a3;
    return (std::string *)sub_22E553FC0(v38, v37, a4, a5);
  }
  v11 = v10;
  if ((a3 & 4) != 0)
  {
    v12 = 1;
    if ((_DWORD)a2)
      goto LABEL_4;
    goto LABEL_45;
  }
  v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  if (!(_DWORD)a2)
  {
LABEL_45:
    v37 = v10 & 0xFFFFFFFFFFFFFFF0;
    v38 = (uint64_t *)a1;
    return (std::string *)sub_22E553FC0(v38, v37, a4, a5);
  }
LABEL_4:
  sub_22E553630(a1);
  v13 = a1->__r_.__value_.__r.__words[0];
  v14 = sub_22E5540CC((uint64_t *)a1, a4);
  v15 = v14 / sub_22EF5CDF0(v13, *(_QWORD *)(*(_QWORD *)(v13 + 16408) & 0xFFFFFFFFFFFFFFF0)) + a5;
  v16 = a1->__r_.__value_.__r.__words[0];
  v46 = sub_22EF6A060(a1->__r_.__value_.__r.__words[0], v11);
  v17 = sub_22EF5BA38(v16, *(_QWORD *)(v11 + 32));
  sub_22EF5CCD0(v16, *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v51);
  v18 = v51;
  v44 = v15;
  sub_22E3CE31C((uint64_t)&v45);
  v19 = std::string::insert(&v45, 0, "_AB");
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v47, "s");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v41 = v18;
  sub_22E3CE31C((uint64_t)v42);
  if (v43 >= 0)
    v23 = v42;
  else
    v23 = (void **)v42[0];
  if (v43 >= 0)
    v24 = v43 & 0x7F;
  else
    v24 = (std::string::size_type)v42[1];
  v25 = std::string::append(&v48, (const std::string::value_type *)v23, v24);
  v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v49, "n");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  sub_22E3CEA68((uint64_t)__p);
  if (v40 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if (v40 >= 0)
    v30 = v40 & 0x7F;
  else
    v30 = (std::string::size_type)__p[1];
  v31 = std::string::append(&v50, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[2];
  v51 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v52 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v52 >= 0)
    v33 = (const std::string::value_type *)&v51;
  else
    v33 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v34 = HIBYTE(v52) & 0x7F;
  else
    v34 = *((_QWORD *)&v51 + 1);
  std::string::append(a1 + 1, v33, v34);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v12)
    v35 = v17 | 4;
  else
    v35 = v17;
  sub_22E557A50(a1, a2, v35, 0, v15);
  return std::string::append(a1 + 1, "_AE", 3uLL);
}

void sub_22E557F2C()
{
  std::string *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  BOOL v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string::size_type v10;

  std::string::append(v0 + 1, "_s", 2uLL);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    std::string::append(v0 + 1, "b", 1uLL);
  v4 = v0->__r_.__value_.__r.__words[0];
  sub_22E5540CC((uint64_t *)v0, v1);
  sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
  if ((v2 & 4) != 0)
    v5 = 1;
  else
    v5 = (*(unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  sub_22E552CF8((std::string *)(v3 - 112), v5);
  v6 = *(_BYTE *)(v3 - 89);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (const std::string::value_type *)(v3 - 112);
  else
    v8 = *(const std::string::value_type **)(v3 - 112);
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(v3 - 104);
  else
    v10 = v9;
  std::string::append(v0 + 1, v8, v10);
  if (*(char *)(v3 - 89) < 0)
    JUMPOUT(0x22E558260);
  JUMPOUT(0x22E557D28);
}

uint64_t sub_22E558268(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t v10;
  llvm::LLVMContext *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  llvm::Instruction *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  llvm::GetElementPtrInst *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  llvm::PHINode *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  llvm::PHINode *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  llvm::LLVMContext *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92[3];
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100[2];
  __int128 v101;
  __int128 v102[3];
  _QWORD v103[3];
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EF5C728(*a1, a3);
  if (!v10)
  {
    if (a2)
    {
      v13 = a5[3];
      v116 = a5[2];
      v117 = v13;
      v14 = a5[5];
      v118 = a5[4];
      v119 = v14;
      v15 = a5[1];
      v114 = *a5;
      v115 = v15;
      sub_22E55556C(a1, &v114);
      __asm { BR              X10 }
    }
    v77 = a1;
    v76 = a3;
    return sub_22E5564FC(v77, v76, a4);
  }
  v11 = (llvm::LLVMContext *)v10;
  if ((a3 & 4) != 0)
    v12 = 1;
  else
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v16 = a5[3];
  v88 = a5[2];
  v89 = v16;
  v17 = a5[5];
  v90 = a5[4];
  v91 = v17;
  v18 = a5[1];
  v86 = *a5;
  v87 = v18;
  if (!a2)
  {
    v76 = v10 & 0xFFFFFFFFFFFFFFF0;
    v77 = a1;
    return sub_22E5564FC(v77, v76, a4);
  }
  v81 = v12;
  v19 = a1 + 3;
  v20 = a5[3];
  v116 = a5[2];
  v117 = v20;
  v21 = a5[5];
  v118 = a5[4];
  v119 = v21;
  v22 = a5[1];
  v114 = *a5;
  v115 = v22;
  sub_22E55556C(a1, &v114);
  v23 = 0;
  v85 = (_QWORD *)a1[3];
  v83 = *(_QWORD *)(v85[18] + 144);
  v93 = 0;
  v96 = v88;
  v97 = v89;
  v98 = v90;
  v99 = v91;
  v94 = v86;
  v95 = v87;
  v24 = 1;
  do
  {
    v25 = v24;
    v26 = 3 * v23;
    v27 = &v86 + 3 * v23;
    v28 = v27[1];
    v108 = *v27;
    v109 = v28;
    v110 = v27[2];
    v29 = *a1;
    v30 = sub_22E5540CC(a1, a4);
    v31 = sub_22EF5CDF0(v29, *(_QWORD *)(*(_QWORD *)(v29 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E552658(&v105, a1 + 3, &v108, v30 / v31);
    v24 = 0;
    v32 = &v94 + v26;
    v33 = v106;
    *v32 = v105;
    v32[1] = v33;
    v32[2] = v107;
    v23 = 1;
  }
  while ((v25 & 1) != 0);
  v105 = v94;
  v106 = v95;
  v107 = v96;
  v80 = v11;
  v34 = sub_22E620E9C((uint64_t)v85, v11, &v93, (uint64_t)&v105);
  sub_22EF5CCD0(v83, *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v108);
  v35 = llvm::ConstantInt::get();
  LOWORD(v110) = 257;
  v36 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v85 + 34), v35, (uint64_t)v34, (uint64_t)&v108, 1, 0);
  v102[0] = v105;
  v102[1] = v106;
  v102[2] = v107;
  v37 = *(_QWORD *)(v85[18] + 8);
  LOWORD(v110) = 257;
  v84 = v85 + 34;
  sub_22E3BEE6C(v85 + 34, v102, v37, (uint64_t)&v108, (uint64_t)v103);
  v38 = v85[1];
  v82 = a1;
  if ((v104 & 3) != 0)
    v39 = (uint64_t *)sub_22F28ABCC(v103, v85);
  else
    v39 = (uint64_t *)v103[0];
  LOWORD(v110) = 257;
  v40 = sub_22E3E5044(v84, v38, v39, v36, (uint64_t)&v108);
  v41 = *(_QWORD *)(v85[18] + 104);
  *(_QWORD *)&v108 = "dstarray.end";
  LOWORD(v110) = 259;
  v78 = sub_22E3C1740(v84, 49, (uint64_t)v40, v41, (uint64_t)&v108);
  v42 = v85[40];
  *(_QWORD *)&v108 = "loop.header";
  LOWORD(v110) = 259;
  v43 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4(v85, v43, 0);
  v44 = 0;
  v120 = 0uLL;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = *(_QWORD *)(v85[18] + 104);
    *(_QWORD *)&v108 = "addr.cur";
    LOWORD(v110) = 259;
    v48 = (llvm::PHINode *)sub_22E3C4B80(v84, v47, 2, (uint64_t)&v108);
    *((_QWORD *)&v120 + v44) = v48;
    v49 = &v94 + 3 * v44;
    if ((*((_BYTE *)v49 + 24) & 3) != 0)
      v50 = sub_22F28ABCC(v49, v85);
    else
      v50 = *(_QWORD *)v49;
    sub_22E3C4C50(v48, v50, v42);
    v45 = 0;
    v44 = 1;
  }
  while ((v46 & 1) != 0);
  *(_QWORD *)&v108 = "loop.exit";
  LOWORD(v110) = 259;
  v51 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v108 = "loop.body";
  LOWORD(v110) = 259;
  v52 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v108 = "done";
  LOWORD(v110) = 259;
  v53 = sub_22E3C18F4((uint64_t)v84, 32, (uint64_t *)v120, v78, (uint64_t)&v108);
  v54 = llvm::User::operator new((llvm::User *)0x40);
  v79 = (_QWORD *)v51;
  MEMORY[0x23489C09C](v54, v51, v52, v53, 0);
  LOWORD(v110) = 257;
  sub_22E3C12C8(v84, v54, (uint64_t)&v108);
  sub_22E5ED9B4(v85, v52, 0);
  v55 = *((_QWORD *)v80 + 4);
  sub_22EF5CCD0(v83, *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v108);
  v56 = 0;
  v57 = v108;
  v110 = v88;
  v111 = v89;
  v112 = v90;
  v113 = v91;
  v108 = v86;
  v109 = v87;
  v58 = 1;
  v59 = v85[12];
  do
  {
    v60 = *((_QWORD *)&v120 + v56);
    v61 = 3 * v56;
    v62 = *((_QWORD *)&v94 + 2 * v61 + 2) | v57;
    v63 = &v108 + v61;
    *(_QWORD *)v63 = v60;
    *((_QWORD *)v63 + 1) = v59;
    *((_QWORD *)v63 + 2) = v62 & -v62;
    *((_DWORD *)v63 + 6) = 0;
    LOBYTE(v60) = v58;
    *((_QWORD *)v63 + 4) = 0;
    *((_QWORD *)v63 + 5) = 0;
    v56 = 1;
    v58 = 0;
  }
  while ((v60 & 1) != 0);
  if (v81)
    v64 = v55 | 4;
  else
    v64 = v55;
  sub_22E558268(v82, a2, v64, 0, &v108);
  v65 = 0;
  v66 = v85[40];
  v67 = 1;
  do
  {
    v68 = v67;
    v69 = &v108 + 3 * v65;
    v70 = v69[1];
    v92[0] = *v69;
    v92[1] = v70;
    v92[2] = v69[2];
    sub_22E552658(v100, v19, v92, v57);
    v71 = v100[1];
    *v69 = v100[0];
    v69[1] = v71;
    v69[2] = v101;
    v72 = (llvm::PHINode *)*((_QWORD *)&v120 + v65);
    if ((*((_BYTE *)v69 + 24) & 3) != 0)
      v73 = sub_22F28ABCC(v69, v85);
    else
      v73 = *(_QWORD *)v69;
    sub_22E3C4C50(v72, v73, v66);
    v67 = 0;
    v65 = 1;
  }
  while ((v68 & 1) != 0);
  v74 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v101) = 257;
  sub_22E3C12C8(v84, v74, (uint64_t)v100);
  return sub_22E5ED9B4(v85, v79, 0);
}

void sub_22E558DA8(uint64_t *a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::PointerType *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[8];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v8 = a1 + 3;
  v9 = a4[1];
  v49 = *a4;
  v50 = v9;
  v51 = a4[2];
  v10 = *a1;
  v11 = sub_22E5540CC(a1, a3);
  v12 = sub_22EF5CDF0(v10, *(_QWORD *)(*(_QWORD *)(v10 + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22E552658(&v46, v8, &v49, v11 / v12);
  v13 = v47;
  *a4 = v46;
  a4[1] = v13;
  a4[2] = v48;
  v14 = a4[4];
  v49 = a4[3];
  v50 = v14;
  v51 = a4[5];
  v15 = *a1;
  v16 = sub_22E5540CC(a1, a3);
  v17 = sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(v15 + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22E552658(&v46, v8, &v49, v16 / v17);
  v18 = v47;
  a4[3] = v46;
  a4[4] = v18;
  a4[5] = v48;
  v19 = a1[3];
  v20 = a4[4];
  v61 = a4[3];
  v62 = v20;
  v63 = a4[5];
  sub_22E6281E0(*(_QWORD **)(v19 + 144), a2, (uint64_t)&v58);
  v46 = v61;
  v47 = v62;
  v48 = v63;
  v21 = *(_QWORD *)(*(_QWORD *)(v19 + 144) + 144);
  v64 = v58;
  v65 = v59;
  v66 = v60;
  LODWORD(v51) = 0;
  *((_QWORD *)&v49 + 1) = 0;
  v50 = 0uLL;
  *(_QWORD *)&v52 = 0;
  *((_QWORD *)&v51 + 1) = 0;
  v53 = 0uLL;
  *(_QWORD *)((char *)&v54 + 4) = 2;
  LODWORD(v49) = 0;
  v55 = 0u;
  v56 = 0u;
  sub_22E3C113C((uint64_t)&v49, &v46, a2, 2, &v64, v21);
  v22 = (_QWORD *)a1[3];
  v44[6] = v55;
  v44[7] = v56;
  v45 = v57;
  v44[2] = v51;
  v44[3] = v52;
  v44[4] = v53;
  v44[5] = v54;
  v44[0] = v49;
  v44[1] = v50;
  sub_22E4D7B28(v22, (uint64_t)v44, 0, (uint64_t)&v46);
  v23 = v46;
  v24 = a1[3];
  v26 = llvm::ConstantPointerNull::get((llvm::ConstantPointerNull *)v50, v25);
  v42[6] = v55;
  v42[7] = v56;
  v43 = v57;
  v42[2] = v51;
  v42[3] = v52;
  v42[4] = v53;
  v42[5] = v54;
  v42[0] = v49;
  v42[1] = v50;
  sub_22E4E87FC(v24, v26, (uint64_t)v42, 0);
  v27 = a1[3];
  v28 = a4[1];
  v61 = *a4;
  v62 = v28;
  v63 = a4[2];
  sub_22E6281E0(*(_QWORD **)(v27 + 144), a2, (uint64_t)&v58);
  v46 = v61;
  v47 = v62;
  v48 = v63;
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 144) + 144);
  v64 = v58;
  v65 = v59;
  v66 = v60;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 2;
  v30 = 0;
  v41 = 0u;
  v40 = 0u;
  sub_22E3C113C((uint64_t)&v30, &v46, a2, 2, &v64, v29);
  sub_22E4E87FC(v27, v23, (uint64_t)&v30, 1u);
}

uint64_t sub_22E559088()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  void **v11;
  void **v12;
  uint64_t *v13;
  uint64_t Function;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t Name;
  unint64_t v22;
  const void *v23;
  size_t v24;
  void **p_dst;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::string *v43;
  std::string::size_type v44;
  void **v45;
  size_t v46;
  uint64_t v48;
  __int128 v49[6];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62[2];
  _BYTE v63[128];
  void **__dst;
  size_t v65;
  unint64_t v66;
  __int16 v67;
  void *__p[2];
  _QWORD v69[20];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (uint64_t *)v0;
  v69[17] = *MEMORY[0x24BDAC8D0];
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v26 = v2[18];
    v48 = v8;
    __p[0] = v69;
    __p[1] = (void *)0x1000000000;
    v27 = sub_22E555294((uint64_t)v2, (uint64_t)__p);
    v28 = sub_22E46F2EC((uint64_t)(v2 + 35), v27);
    v67 = 261;
    __dst = v12;
    v65 = v10;
    v29 = v2[25];
    v15 = llvm::User::operator new((llvm::User *)0x78);
    v30 = MEMORY[0x23489F6FC](v15, v28, 3, 0xFFFFFFFFLL, &__dst, v29);
    v31 = *(_DWORD *)(v30 + 32);
    v32 = v31 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v30 + 32) = v32;
    if ((v31 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v15) & 1) != 0)
      {
LABEL_20:
        sub_22E62A548((uint64_t)v2, 0, 0, v27, (llvm::Value *)v15, 0);
        sub_22E62A5F4(v2, 0, (llvm::Function *)v15);
        sub_22E618EBC((uint64_t)&__dst, (uint64_t)v2, 0);
        *v13 = (uint64_t)&__dst;
        sub_22E61A8FC((uint64_t)&__dst, 0, 0, *(_QWORD *)(v26 + 16392), (llvm::Value *)v15, v27, (uint64_t *)__p, 0, v33, 0);
        v34 = *v13;
        v56[0] = 0;
        v56[1] = v34;
        sub_22E48EE24(v56, 0, 0);
        v62[0] = v63;
        v62[1] = (void *)0x1000000000;
        if (LODWORD(__p[1]))
          sub_22F24C890((uint64_t)v62, (uint64_t)__p);
        sub_22E55541C((uint64_t)&v50, v6, v4, (_QWORD **)v62, *v13);
        if (v62[0] != v63)
          free(v62[0]);
        v49[2] = v52;
        v49[3] = v53;
        v49[4] = v54;
        v49[5] = v55;
        v49[0] = v50;
        v49[1] = v51;
        v35 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v36 = sub_22EFC3B90(v35);
        if (v36)
        {
          v37 = v36;
LABEL_26:
          v38 = *(_QWORD *)(v37 + 48);
          if ((v48 & 4) != 0 || (*(_BYTE *)((v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v38 |= 4uLL;
          *(_QWORD *)v57 = v38;
          v39 = sub_22F111B38(v57);
          sub_22E559590(v13 - 3, v39, v38, v37, v49);
          while (1)
          {
            v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v37)
              break;
            if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_26;
          }
        }
        v58 = v52;
        v59 = v53;
        v60 = v54;
        v61 = v55;
        *(_OWORD *)v57 = v50;
        *(_OWORD *)&v57[16] = v51;
        sub_22E55556C(v13 - 3, (__int128 *)v57);
        sub_22E619DE8(*v13, 0);
        sub_22E48F084(v56);
        sub_22E619434((uint64_t)&__dst);
        if (__p[0] != v69)
          free(__p[0]);
        return v15;
      }
      v32 = *(_DWORD *)(v15 + 32);
    }
    *(_DWORD *)(v15 + 32) = v32 | 0x4000;
    goto LABEL_20;
  }
  v15 = Function;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(Function + 24) + 16) + 8) != 7)
    goto LABEL_12;
  if ((*(_WORD *)(Function + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    v16 = *(_QWORD **)(v15 + 88);
    if ((*(_WORD *)(v15 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v15);
      v17 = *(_QWORD **)(v15 + 88);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = *(_QWORD **)(Function + 88);
  }
  v17 = v16;
LABEL_6:
  v18 = &v17[5 * *(_QWORD *)(v15 + 96)];
  if (v16 != v18)
  {
    v19 = 0;
    do
    {
      v20 = *v16;
      v16 += 5;
      if (v20 != v2[13])
        v19 = 1;
    }
    while (v16 != v18);
    if ((v19 & 1) != 0)
    {
LABEL_12:
      Name = llvm::Value::getName((llvm::Value *)v15);
      if (v22 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v23 = (const void *)Name;
      v24 = v22;
      if (v22 >= 0x17)
      {
        v40 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v40 = v22 | 7;
        v41 = v40 + 1;
        p_dst = (void **)operator new(v40 + 1);
        v65 = v24;
        v66 = v41 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v66) = v22;
        p_dst = (void **)&__dst;
        if (!v22)
          goto LABEL_39;
      }
      memmove(p_dst, v23, v24);
LABEL_39:
      *((_BYTE *)p_dst + v24) = 0;
      v42 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 24))
                      + 24);
      std::operator+<char>();
      v43 = std::string::append((std::string *)v57, " for non-trivial C struct has incorrect type");
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v69[0] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (v69[0] >= 0)
        v45 = __p;
      else
        v45 = (void **)__p[0];
      if (v69[0] >= 0)
        v46 = HIBYTE(v69[0]) & 0x7F;
      else
        v46 = (size_t)__p[1];
      sub_22E628310((uint64_t)v2, v42, v45, v46);
      if (SHIBYTE(v69[0]) < 0)
        operator delete(__p[0]);
      if ((v57[23] & 0x80000000) != 0)
        operator delete(*(void **)v57);
      if (SHIBYTE(v66) < 0)
        operator delete(__dst);
      return 0;
    }
  }
  return v15;
}

uint64_t sub_22E559590(uint64_t *a1, unsigned int a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t v10;
  llvm::LLVMContext *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 v33;
  llvm::Instruction *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  llvm::GetElementPtrInst *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  llvm::PHINode *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  llvm::PHINode *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  llvm::LLVMContext *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92[3];
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100[2];
  __int128 v101;
  __int128 v102[3];
  _QWORD v103[3];
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EF5C728(*a1, a3);
  if (!v10)
  {
    if (a2)
    {
      v13 = a5[3];
      v116 = a5[2];
      v117 = v13;
      v14 = a5[5];
      v118 = a5[4];
      v119 = v14;
      v15 = a5[1];
      v114 = *a5;
      v115 = v15;
      sub_22E55556C(a1, &v114);
      __asm { BR              X10 }
    }
    v77 = a1;
    v76 = a3;
    return sub_22E5564FC(v77, v76, a4);
  }
  v11 = (llvm::LLVMContext *)v10;
  if ((a3 & 4) != 0)
    v12 = 1;
  else
    v12 = (*(unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
  v16 = a5[3];
  v88 = a5[2];
  v89 = v16;
  v17 = a5[5];
  v90 = a5[4];
  v91 = v17;
  v18 = a5[1];
  v86 = *a5;
  v87 = v18;
  if (!a2)
  {
    v76 = v10 & 0xFFFFFFFFFFFFFFF0;
    v77 = a1;
    return sub_22E5564FC(v77, v76, a4);
  }
  v81 = v12;
  v19 = a1 + 3;
  v20 = a5[3];
  v116 = a5[2];
  v117 = v20;
  v21 = a5[5];
  v118 = a5[4];
  v119 = v21;
  v22 = a5[1];
  v114 = *a5;
  v115 = v22;
  sub_22E55556C(a1, &v114);
  v23 = 0;
  v85 = (_QWORD *)a1[3];
  v83 = *(_QWORD *)(v85[18] + 144);
  v93 = 0;
  v96 = v88;
  v97 = v89;
  v98 = v90;
  v99 = v91;
  v94 = v86;
  v95 = v87;
  v24 = 1;
  do
  {
    v25 = v24;
    v26 = 3 * v23;
    v27 = &v86 + 3 * v23;
    v28 = v27[1];
    v108 = *v27;
    v109 = v28;
    v110 = v27[2];
    v29 = *a1;
    v30 = sub_22E5540CC(a1, a4);
    v31 = sub_22EF5CDF0(v29, *(_QWORD *)(*(_QWORD *)(v29 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E552658(&v105, a1 + 3, &v108, v30 / v31);
    v24 = 0;
    v32 = &v94 + v26;
    v33 = v106;
    *v32 = v105;
    v32[1] = v33;
    v32[2] = v107;
    v23 = 1;
  }
  while ((v25 & 1) != 0);
  v105 = v94;
  v106 = v95;
  v107 = v96;
  v80 = v11;
  v34 = sub_22E620E9C((uint64_t)v85, v11, &v93, (uint64_t)&v105);
  sub_22EF5CCD0(v83, *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v108);
  v35 = llvm::ConstantInt::get();
  LOWORD(v110) = 257;
  v36 = (uint64_t *)sub_22E3BDEA8((uint64_t)(v85 + 34), v35, (uint64_t)v34, (uint64_t)&v108, 1, 0);
  v102[0] = v105;
  v102[1] = v106;
  v102[2] = v107;
  v37 = *(_QWORD *)(v85[18] + 8);
  LOWORD(v110) = 257;
  v84 = v85 + 34;
  sub_22E3BEE6C(v85 + 34, v102, v37, (uint64_t)&v108, (uint64_t)v103);
  v38 = v85[1];
  v82 = a1;
  if ((v104 & 3) != 0)
    v39 = (uint64_t *)sub_22F28ABCC(v103, v85);
  else
    v39 = (uint64_t *)v103[0];
  LOWORD(v110) = 257;
  v40 = sub_22E3E5044(v84, v38, v39, v36, (uint64_t)&v108);
  v41 = *(_QWORD *)(v85[18] + 104);
  *(_QWORD *)&v108 = "dstarray.end";
  LOWORD(v110) = 259;
  v78 = sub_22E3C1740(v84, 49, (uint64_t)v40, v41, (uint64_t)&v108);
  v42 = v85[40];
  *(_QWORD *)&v108 = "loop.header";
  LOWORD(v110) = 259;
  v43 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4(v85, v43, 0);
  v44 = 0;
  v120 = 0uLL;
  v45 = 1;
  do
  {
    v46 = v45;
    v47 = *(_QWORD *)(v85[18] + 104);
    *(_QWORD *)&v108 = "addr.cur";
    LOWORD(v110) = 259;
    v48 = (llvm::PHINode *)sub_22E3C4B80(v84, v47, 2, (uint64_t)&v108);
    *((_QWORD *)&v120 + v44) = v48;
    v49 = &v94 + 3 * v44;
    if ((*((_BYTE *)v49 + 24) & 3) != 0)
      v50 = sub_22F28ABCC(v49, v85);
    else
      v50 = *(_QWORD *)v49;
    sub_22E3C4C50(v48, v50, v42);
    v45 = 0;
    v44 = 1;
  }
  while ((v46 & 1) != 0);
  *(_QWORD *)&v108 = "loop.exit";
  LOWORD(v110) = 259;
  v51 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v108 = "loop.body";
  LOWORD(v110) = 259;
  v52 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v108 = "done";
  LOWORD(v110) = 259;
  v53 = sub_22E3C18F4((uint64_t)v84, 32, (uint64_t *)v120, v78, (uint64_t)&v108);
  v54 = llvm::User::operator new((llvm::User *)0x40);
  v79 = (_QWORD *)v51;
  MEMORY[0x23489C09C](v54, v51, v52, v53, 0);
  LOWORD(v110) = 257;
  sub_22E3C12C8(v84, v54, (uint64_t)&v108);
  sub_22E5ED9B4(v85, v52, 0);
  v55 = *((_QWORD *)v80 + 4);
  sub_22EF5CCD0(v83, *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v108);
  v56 = 0;
  v57 = v108;
  v110 = v88;
  v111 = v89;
  v112 = v90;
  v113 = v91;
  v108 = v86;
  v109 = v87;
  v58 = 1;
  v59 = v85[12];
  do
  {
    v60 = *((_QWORD *)&v120 + v56);
    v61 = 3 * v56;
    v62 = *((_QWORD *)&v94 + 2 * v61 + 2) | v57;
    v63 = &v108 + v61;
    *(_QWORD *)v63 = v60;
    *((_QWORD *)v63 + 1) = v59;
    *((_QWORD *)v63 + 2) = v62 & -v62;
    *((_DWORD *)v63 + 6) = 0;
    LOBYTE(v60) = v58;
    *((_QWORD *)v63 + 4) = 0;
    *((_QWORD *)v63 + 5) = 0;
    v56 = 1;
    v58 = 0;
  }
  while ((v60 & 1) != 0);
  if (v81)
    v64 = v55 | 4;
  else
    v64 = v55;
  sub_22E559590(v82, a2, v64, 0, &v108);
  v65 = 0;
  v66 = v85[40];
  v67 = 1;
  do
  {
    v68 = v67;
    v69 = &v108 + 3 * v65;
    v70 = v69[1];
    v92[0] = *v69;
    v92[1] = v70;
    v92[2] = v69[2];
    sub_22E552658(v100, v19, v92, v57);
    v71 = v100[1];
    *v69 = v100[0];
    v69[1] = v71;
    v69[2] = v101;
    v72 = (llvm::PHINode *)*((_QWORD *)&v120 + v65);
    if ((*((_BYTE *)v69 + 24) & 3) != 0)
      v73 = sub_22F28ABCC(v69, v85);
    else
      v73 = *(_QWORD *)v69;
    sub_22E3C4C50(v72, v73, v66);
    v67 = 0;
    v65 = 1;
  }
  while ((v68 & 1) != 0);
  v74 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v101) = 257;
  sub_22E3C12C8(v84, v74, (uint64_t)v100);
  return sub_22E5ED9B4(v85, v79, 0);
}

llvm::Value *sub_22E55A0C4(uint64_t *a1, uint64_t a2, unint64_t a3, __int128 *a4)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::PointerType *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v34[8];
  uint64_t v35;
  _OWORD v36[8];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[8];
  uint64_t v51;
  _OWORD v52[8];
  uint64_t v53;
  __int128 v54;
  llvm::ConstantPointerNull *v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v8 = a1 + 3;
  v9 = a4[1];
  v54 = *a4;
  *(_OWORD *)v55 = v9;
  v56 = a4[2];
  v10 = *a1;
  v11 = sub_22E5540CC(a1, a3);
  v12 = sub_22EF5CDF0(v10, *(_QWORD *)(*(_QWORD *)(v10 + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22E552658(&v41, v8, &v54, v11 / v12);
  v13 = v42;
  *a4 = v41;
  a4[1] = v13;
  a4[2] = v43;
  v14 = a4[4];
  v54 = a4[3];
  *(_OWORD *)v55 = v14;
  v56 = a4[5];
  v15 = *a1;
  v16 = sub_22E5540CC(a1, a3);
  v17 = sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(v15 + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22E552658(&v41, v8, &v54, v16 / v17);
  v18 = v42;
  a4[3] = v41;
  a4[4] = v18;
  a4[5] = v43;
  v19 = a1[3];
  v20 = a4[4];
  v38 = a4[3];
  v39 = v20;
  v40 = a4[5];
  sub_22E6281E0(*(_QWORD **)(v19 + 144), a2, (uint64_t)&v68);
  v41 = v38;
  v42 = v39;
  v43 = v40;
  v21 = *(_QWORD *)(*(_QWORD *)(v19 + 144) + 144);
  v65 = v68;
  v66 = v69;
  *(_QWORD *)&v67 = v70;
  v55[1] = 0;
  LODWORD(v56) = 0;
  *((_QWORD *)&v54 + 1) = 0;
  v55[0] = 0;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v56 + 1) = 0;
  v58 = 0uLL;
  *(_QWORD *)((char *)&v59 + 4) = 2;
  LODWORD(v54) = 0;
  v60 = 0u;
  v61 = 0u;
  sub_22E3C113C((uint64_t)&v54, &v41, a2, 2, &v65, v21);
  v22 = (_QWORD *)a1[3];
  v52[6] = v60;
  v52[7] = v61;
  v53 = v62;
  v52[2] = v56;
  v52[3] = v57;
  v52[4] = v58;
  v52[5] = v59;
  v52[0] = v54;
  v52[1] = *(_OWORD *)v55;
  sub_22E4D7B28(v22, (uint64_t)v52, 0, (uint64_t)&v41);
  v23 = v41;
  v24 = a1[3];
  v26 = llvm::ConstantPointerNull::get(v55[0], v25);
  v50[6] = v60;
  v50[7] = v61;
  v51 = v62;
  v50[2] = v56;
  v50[3] = v57;
  v50[4] = v58;
  v50[5] = v59;
  v50[0] = v54;
  v50[1] = *(_OWORD *)v55;
  sub_22E4E87FC(v24, v26, (uint64_t)v50, 0);
  v27 = a1[3];
  v28 = a4[1];
  v65 = *a4;
  v66 = v28;
  v67 = a4[2];
  sub_22E6281E0(*(_QWORD **)(v27 + 144), a2, (uint64_t)v63);
  v38 = v65;
  v39 = v66;
  v40 = v67;
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 144) + 144);
  v68 = v63[0];
  v69 = v63[1];
  v70 = v64;
  v42 = 0uLL;
  LODWORD(v43) = 0;
  *((_QWORD *)&v41 + 1) = 0;
  *((_QWORD *)&v43 + 1) = 0;
  *(_QWORD *)&v44 = 0;
  v45 = 0uLL;
  *(_QWORD *)((char *)&v46 + 4) = 2;
  LODWORD(v41) = 0;
  v47 = 0u;
  v48 = 0u;
  sub_22E3C113C((uint64_t)&v41, &v38, a2, 2, &v68, v29);
  v30 = (_QWORD *)a1[3];
  v36[6] = v47;
  v36[7] = v48;
  v37 = v49;
  v36[2] = v43;
  v36[3] = v44;
  v36[4] = v45;
  v36[5] = v46;
  v36[0] = v41;
  v36[1] = v42;
  sub_22E4D7B28(v30, (uint64_t)v36, 0, (uint64_t)&v38);
  v31 = v38;
  v32 = a1[3];
  v34[6] = v47;
  v34[7] = v48;
  v35 = v49;
  v34[2] = v43;
  v34[3] = v44;
  v34[4] = v45;
  v34[5] = v46;
  v34[0] = v41;
  v34[1] = v42;
  sub_22E4E87FC(v32, v23, (uint64_t)v34, 0);
  return sub_22F27328C((llvm::Value *)a1[3], v31, 0);
}

uint64_t sub_22E55A418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *__p[2];
  uint64_t v63;
  __int16 v64;
  _QWORD v65[3];
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[3];
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD v76[3];
  int v77;
  __int128 v78;
  int v79;
  const char *v80;
  uint64_t v81;
  __int16 v82;
  char v83;
  __int16 v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE v90[13];
  void *v91;
  uint64_t v92;
  _BYTE v93[1184];
  void *v94;
  uint64_t v95;
  _BYTE v96[192];
  void *v97;
  uint64_t v98;
  _BYTE v99[16];
  void *v100;
  uint64_t v101;
  _QWORD v102[7];

  v102[5] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0)
  {
    v27 = *(_BYTE **)(a1 + 144);
    *(_QWORD *)&v90[5] = 0;
    v89 = v27;
    *(_QWORD *)v90 = 0;
    v91 = v93;
    v92 = 0x400000000;
    v28 = *(_QWORD *)(a2 + 8);
    v90[8] = 1;
    v24 = sub_22F262C28(&v89, a2, v28);
    v90[8] = 0;
    v25 = v91;
    if (v91 == v93)
      return v24;
LABEL_17:
    free(v25);
    return v24;
  }
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v61 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(v6 + 784);
  if (!v7)
  {
    sub_22F298C2C(*(_QWORD **)(a1 + 144));
    v7 = *(_QWORD *)(v6 + 784);
  }
  v8 = sub_22EFDC9F0(v4);
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 248))(v7, a1, v8);
  v89 = &v90[8];
  *(_QWORD *)v90 = 0x800000000;
  v94 = v96;
  v95 = 0x100000000;
  v97 = v99;
  v98 = 0x100000000;
  v100 = v102;
  v101 = 0x200000000;
  v102[4] = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 96) + 48) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
    v9 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(**(_QWORD **)(v4 + 96) + 48));
  v10 = (llvm::LLVMContext *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v5 + 8);
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (sub_22F10DE84(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0)))
  {
    v59 = v11 & 7 | v12;
    v29 = *(_QWORD *)(v5 + 8);
    v80 = "tmp";
    v82 = 259;
    v30 = sub_22F25E4D4(a1, v29, (uint64_t)&v80, 0);
    v32 = 0;
    if (v30 <= 7)
      v33 = 0;
    else
      v33 = v30 & 0xFFFFFFFFFFFFFFF8;
    v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    if (v30 <= 7)
      v34 = 0;
    if (v30 >= 8)
      v32 = 1 << (v31 & 7 | (8 * (v30 & 7)));
    v87 = 0;
    v88 = 0;
    v76[0] = v33;
    v76[1] = v34;
    v76[2] = v32;
    v78 = v86;
    v77 = 0;
    v79 = 0;
    sub_22E4DA890(a1, v5, v76, 0, 1);
    v35 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v10);
    v82 = 257;
    v80 = (const char *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v33, v35, (uint64_t)&v80);
    v81 = 0;
    v83 = 0;
    v84 = 0;
    v85 = (unint64_t)v10;
    v36 = sub_22E3C187C((uint64_t)&v89, (unint64_t)&v80, 1);
    v37 = &v89[152 * *(unsigned int *)v90];
    v38 = *(_OWORD *)(v36 + 16);
    *(_OWORD *)v37 = *(_OWORD *)v36;
    *((_OWORD *)v37 + 1) = v38;
    v39 = *(_QWORD *)(v36 + 144);
    v40 = *(_OWORD *)(v36 + 128);
    v41 = *(_OWORD *)(v36 + 96);
    *((_OWORD *)v37 + 7) = *(_OWORD *)(v36 + 112);
    *((_OWORD *)v37 + 8) = v40;
    *((_QWORD *)v37 + 18) = v39;
    *((_OWORD *)v37 + 6) = v41;
    v42 = *(_OWORD *)(v36 + 80);
    v43 = *(_OWORD *)(v36 + 32);
    v44 = *(_OWORD *)(v36 + 48);
    *((_OWORD *)v37 + 4) = *(_OWORD *)(v36 + 64);
    *((_OWORD *)v37 + 5) = v42;
    *((_OWORD *)v37 + 2) = v43;
    *((_OWORD *)v37 + 3) = v44;
    ++*(_DWORD *)v90;
    __p[0] = 0;
    __p[1] = 0;
    v63 = 0;
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    LODWORD(v80) = 7;
    sub_22EF6B358(v45, v59);
    v46 = sub_22F29BB8C(*(_QWORD **)(a1 + 144), (uint64_t)__p, 0) & 0xFFFFFFFFFFFFFFF8;
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 96) + 8) + 48) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v47 + 8) & 0xF) != 0)
      v47 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 96) + 8) + 48));
    v48 = v47 & 0xFFFFFFFFFFFFFFF0;
    v49 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)(v47 & 0xFFFFFFFFFFFFFFF0));
    v82 = 257;
    v80 = (const char *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v46, v49, (uint64_t)&v80);
    v81 = 0;
    v83 = 0;
    v84 = 0;
    v85 = v48;
    v50 = sub_22E3C187C((uint64_t)&v89, (unint64_t)&v80, 1);
    v51 = &v89[152 * *(unsigned int *)v90];
    v52 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v51 = *(_OWORD *)v50;
    *((_OWORD *)v51 + 1) = v52;
    v53 = *(_QWORD *)(v50 + 144);
    v54 = *(_OWORD *)(v50 + 128);
    v55 = *(_OWORD *)(v50 + 96);
    *((_OWORD *)v51 + 7) = *(_OWORD *)(v50 + 112);
    *((_OWORD *)v51 + 8) = v54;
    *((_QWORD *)v51 + 18) = v53;
    *((_OWORD *)v51 + 6) = v55;
    v56 = *(_OWORD *)(v50 + 80);
    v57 = *(_OWORD *)(v50 + 32);
    v58 = *(_OWORD *)(v50 + 48);
    *((_OWORD *)v51 + 4) = *(_OWORD *)(v50 + 64);
    *((_OWORD *)v51 + 5) = v56;
    *((_OWORD *)v51 + 2) = v57;
    *((_OWORD *)v51 + 3) = v58;
    ++*(_DWORD *)v90;
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
  }
  else
  {
    memset(v70, 0, sizeof(v70));
    v71 = 0;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    v75 = 0;
    sub_22E4D79C0(&v80, a1, v5, v70, 0);
    v84 = 0;
    v85 = (unint64_t)v10;
    v13 = sub_22E3C187C((uint64_t)&v89, (unint64_t)&v80, 1);
    v14 = &v89[152 * *(unsigned int *)v90];
    v15 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v13;
    *((_OWORD *)v14 + 1) = v15;
    v16 = *(_QWORD *)(v13 + 144);
    v17 = *(_OWORD *)(v13 + 128);
    v18 = *(_OWORD *)(v13 + 96);
    *((_OWORD *)v14 + 7) = *(_OWORD *)(v13 + 112);
    *((_OWORD *)v14 + 8) = v17;
    *((_QWORD *)v14 + 18) = v16;
    *((_OWORD *)v14 + 6) = v18;
    v19 = *(_OWORD *)(v13 + 80);
    v20 = *(_OWORD *)(v13 + 32);
    v21 = *(_OWORD *)(v13 + 48);
    *((_OWORD *)v14 + 4) = *(_OWORD *)(v13 + 64);
    *((_OWORD *)v14 + 5) = v19;
    *((_OWORD *)v14 + 2) = v20;
    *((_OWORD *)v14 + 3) = v21;
    ++*(_DWORD *)v90;
  }
  memset(v65, 0, sizeof(v65));
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, _BYTE **, unint64_t, uint64_t))(*(_QWORD *)v7 + 136))(&v80, v7, a1, v65, *(_QWORD *)(v4 + 80), v61, v60, &v89, v8, v4);
  v22 = (uint64_t)v80;
  v23 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
  v64 = 257;
  v24 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v22, v23, (uint64_t)__p);
  if (v100 != v102)
    free(v100);
  if (v97 != v99)
    free(v97);
  if (v94 != v96)
    free(v94);
  v25 = v89;
  if (v89 != &v90[8])
    goto LABEL_17;
  return v24;
}

uint64_t sub_22E55A9B4(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  llvm::Value *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BOOL4 v115;
  int v116;
  _QWORD v117[3];
  int v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  _OWORD v122[8];
  uint64_t v123;
  _QWORD v124[6];
  char v125;
  char v126[32];
  __int16 v127;
  _QWORD v128[3];
  int v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD v132[3];
  _OWORD v133[8];
  uint64_t v134;
  _QWORD v135[6];
  char v136;
  _QWORD v137[3];
  int v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD v141[3];
  _OWORD v142[8];
  uint64_t v143;
  _QWORD v144[6];
  char v145;
  _QWORD v146[3];
  int v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD v150[3];
  unint64_t v151;
  unsigned int v152;
  _OWORD v153[8];
  uint64_t v154;
  _OWORD v155[2];
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int16 v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _BYTE v177[32];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  _BYTE v187[192];
  void *v188;
  uint64_t v189;
  _BYTE v190[16];
  void *v191;
  uint64_t v192;
  _QWORD v193[5];
  void *v194;
  uint64_t v195;
  _QWORD v196[19];

  v196[16] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 144);
  v116 = *a2;
  if (v116 == 201)
    v7 = a2;
  else
    v7 = 0;
  if (v116 == 201)
    v8 = *((_DWORD *)a2 + 4);
  else
    v8 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
  if ((a2[2] & 4) != 0)
  {
    *(_QWORD *)&v177[13] = 0;
    *(_QWORD *)v177 = v6;
    *(_QWORD *)&v177[8] = 0;
    *(_QWORD *)&v178 = &v179;
    *((_QWORD *)&v178 + 1) = 0x400000000;
    v16 = *((_QWORD *)a2 + 1);
    v177[16] = 1;
    v17 = sub_22F262C28(v177, a2, v16);
    v177[16] = 0;
    if ((__int128 *)v178 != &v179)
      free((void *)v178);
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 144);
    v10 = v8;
    if (v8 || !sub_22F2725F0((int *)(*(_QWORD *)(v6 + 152) + 400)))
    {
      v18 = sub_22EF67C8C(v9);
      v19 = sub_22EF5CDF0(v9, *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0));
      v152 = v19;
      if (v19 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v151);
      }
      else
      {
        if (v19)
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
        else
          v20 = 0;
        v151 = v20 & v10;
      }
      v21 = sub_22F36E1B8(v9);
      v22 = *(_QWORD *)(v21 + 48);
      if (v22)
        v23 = v22 & 0xFFFFFFFFFFFFFFF0;
      else
        v23 = sub_22EF6462C(v9, v21);
      v112 = v23 | 1;
      v24 = sub_22EF5FE30(v9, v23 | 1, (const llvm::APInt *)&v151, 0, 0, 0);
      *(_QWORD *)v177 = "objects";
      LOWORD(v178) = 259;
      v25 = sub_22F25E4D4(a1, v24, (uint64_t)v177, 0);
      v27 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (v25 <= 7)
        v27 = 0;
      v113 = 0;
      v114 = v27;
      v28 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (v25 <= 7)
        v28 = 0;
      v111 = v28;
      if (v25 >= 8)
        v113 = 1 << (v26 & 7 | (8 * (v25 & 7)));
      if (v116 == 201)
      {
        v108 = 0;
        v109 = 0;
        v107 = 0;
      }
      else
      {
        *(_QWORD *)v177 = "keys";
        LOWORD(v178) = 259;
        v29 = sub_22F25E4D4(a1, v24, (uint64_t)v177, 0);
        v31 = v29 & 0xFFFFFFFFFFFFFFF8;
        if (v29 <= 7)
          v31 = 0;
        v108 = 0;
        v109 = v31;
        v32 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (v29 <= 7)
          v32 = 0;
        v107 = v32;
        if (v29 >= 8)
          v108 = 1 << (v30 & 7 | (8 * (v29 & 7)));
      }
      v104 = a3;
      v194 = v196;
      v195 = 0x1000000000;
      v33 = *(_QWORD *)(a1 + 144);
      v105 = a2;
      v115 = (*(_WORD *)(*(_QWORD *)(v33 + 152) + 148) & 2) != 0
          && (*(_BYTE *)(*(_QWORD *)(v33 + 184) + 33) & 0x18) != 0;
      v110 = v10;
      if ((_DWORD)v10)
      {
        v78 = 0;
        v79 = (uint64_t *)(a1 + 272);
        v106 = v7 + 40;
        v80 = (uint64_t *)(v105 + 48);
        do
        {
          if (v116 == 201)
          {
            v81 = *(_QWORD *)&v106[8 * v78];
            v146[0] = v114;
            v146[1] = v111;
            v146[2] = v113;
            v147 = 0;
            v148 = 0;
            v149 = 0;
            LOWORD(v156) = 257;
            sub_22E486A58(v79, (uint64_t)v146, v78, (uint64_t)v155, (uint64_t)v150);
            v174 = v150[0];
            v175 = v150[1];
            v176 = v150[2];
            sub_22E6281E0(*(_QWORD **)(a1 + 144), v112, (uint64_t)&v171);
            v160 = v174;
            v161 = v175;
            v162 = v176;
            v157 = v171;
            v82 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
            v158 = v172;
            *(_QWORD *)&v159 = v173;
            memset(&v177[8], 0, 24);
            LODWORD(v178) = 0;
            *((_QWORD *)&v178 + 1) = 0;
            *(_QWORD *)&v179 = 0;
            v180 = 0uLL;
            *(_QWORD *)((char *)&v181 + 4) = 2;
            *(_DWORD *)v177 = 0;
            v182 = 0u;
            v183 = 0u;
            v83 = sub_22E3C113C((uint64_t)v177, &v160, v112, 0, &v157, v82);
            *(_QWORD *)&v160 = a1;
            *((_QWORD *)&v160 + 1) = a1 + 272;
            LOBYTE(v161) = 0;
            *((_QWORD *)&v161 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            v84 = sub_22E50E974(&v160, v81, v83);
            v144[1] = 0;
            v144[0] = v84;
            v145 &= 0xF8u;
            v142[6] = v182;
            v142[7] = v183;
            v143 = v184;
            v142[2] = v178;
            v142[3] = v179;
            v142[4] = v180;
            v142[5] = v181;
            v142[0] = *(_OWORD *)v177;
            v142[1] = *(_OWORD *)&v177[16];
            sub_22E4DAAE0(a1, v144, v142, 1, *(double *)&v177[16]);
            if (v115)
            {
              v85 = v195;
              if (v195 >= (unint64_t)HIDWORD(v195))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v85 = v195;
              }
              *((_QWORD *)v194 + v85) = v84;
              LODWORD(v195) = v195 + 1;
            }
          }
          else
          {
            v86 = *(v80 - 1);
            v137[0] = v109;
            v137[1] = v107;
            v137[2] = v108;
            v138 = 0;
            v139 = 0;
            v140 = 0;
            LOWORD(v156) = 257;
            sub_22E486A58(v79, (uint64_t)v137, v78, (uint64_t)v155, (uint64_t)v141);
            v174 = v141[0];
            v175 = v141[1];
            v176 = v141[2];
            sub_22E6281E0(*(_QWORD **)(a1 + 144), v112, (uint64_t)&v171);
            v160 = v174;
            v161 = v175;
            v162 = v176;
            v157 = v171;
            v87 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
            v158 = v172;
            *(_QWORD *)&v159 = v173;
            memset(&v177[8], 0, 24);
            LODWORD(v178) = 0;
            *((_QWORD *)&v178 + 1) = 0;
            *(_QWORD *)&v179 = 0;
            v180 = 0uLL;
            *(_QWORD *)((char *)&v181 + 4) = 2;
            *(_DWORD *)v177 = 0;
            v182 = 0u;
            v183 = 0u;
            v88 = sub_22E3C113C((uint64_t)v177, &v160, v112, 0, &v157, v87);
            *(_QWORD *)&v160 = a1;
            *((_QWORD *)&v160 + 1) = a1 + 272;
            LOBYTE(v161) = 0;
            *((_QWORD *)&v161 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            v89 = sub_22E50E974(&v160, v86, v88);
            v135[1] = 0;
            v135[0] = v89;
            v136 &= 0xF8u;
            v133[6] = v182;
            v133[7] = v183;
            v134 = v184;
            v133[2] = v178;
            v133[3] = v179;
            v133[4] = v180;
            v133[5] = v181;
            v133[0] = *(_OWORD *)v177;
            v133[1] = *(_OWORD *)&v177[16];
            sub_22E4DAAE0(a1, v135, v133, 1, *(double *)&v177[16]);
            v90 = *v80;
            v128[0] = v114;
            v128[1] = v111;
            v128[2] = v113;
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v127 = 257;
            sub_22E486A58(v79, (uint64_t)v128, v78, (uint64_t)v126, (uint64_t)v132);
            v157 = v132[0];
            v158 = v132[1];
            v159 = v132[2];
            sub_22E6281E0(*(_QWORD **)(a1 + 144), v112, (uint64_t)v155);
            v174 = v157;
            v175 = v158;
            v176 = v159;
            v91 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
            v171 = v155[0];
            v172 = v155[1];
            v173 = v156;
            v161 = 0uLL;
            *((_QWORD *)&v160 + 1) = 0;
            LODWORD(v162) = 0;
            *((_QWORD *)&v162 + 1) = 0;
            *(_QWORD *)&v163 = 0;
            v164 = 0uLL;
            *(_QWORD *)((char *)&v165 + 4) = 2;
            LODWORD(v160) = 0;
            v166 = 0u;
            v167 = 0u;
            v92 = sub_22E3C113C((uint64_t)&v160, &v174, v112, 0, &v171, v91);
            *(_QWORD *)&v174 = a1;
            *((_QWORD *)&v174 + 1) = a1 + 272;
            LOBYTE(v175) = 0;
            *((_QWORD *)&v175 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
            v93 = sub_22E50E974(&v174, v90, v92);
            v124[0] = v93;
            v124[1] = 0;
            v125 &= 0xF8u;
            v122[5] = v165;
            v122[6] = v166;
            v122[7] = v167;
            v123 = v168;
            v122[2] = v162;
            v122[3] = v163;
            v122[4] = v164;
            v122[0] = v160;
            v122[1] = v161;
            sub_22E4DAAE0(a1, v124, v122, 1, *(double *)&v161);
            if (v115)
            {
              v94 = v195;
              if (v195 >= (unint64_t)HIDWORD(v195))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v94 = v195;
              }
              *((_QWORD *)v194 + v94) = v89;
              v95 = v195 + 1;
              LODWORD(v195) = v95;
              if (v95 >= HIDWORD(v195))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v95 = v195;
              }
              *((_QWORD *)v194 + v95) = v93;
              LODWORD(v195) = v195 + 1;
            }
            v10 = v110;
          }
          ++v78;
          v80 += 2;
        }
        while (v10 != v78);
      }
      *(_QWORD *)v177 = &v177[16];
      *(_QWORD *)&v177[8] = 0x800000000;
      v185 = v187;
      v186 = 0x100000000;
      v188 = v190;
      v189 = 0x100000000;
      v191 = v193;
      v192 = 0x200000000;
      v193[4] = 0;
      v34 = a3[12];
      v35 = (uint64_t *)v104[12];
      v37 = *v35;
      v36 = v35 + 1;
      v38 = *(_QWORD *)(v37 + 48);
      v39 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v39 + 8) & 0xF) != 0)
        v39 = (unint64_t)sub_22F10D2BC(v38);
      v160 = v114;
      LOBYTE(v163) = 0;
      v169 = 0;
      v170 = v39 & 0xFFFFFFFFFFFFFFF0;
      v40 = sub_22E3C187C((uint64_t)v177, (unint64_t)&v160, 1);
      v41 = *(_QWORD *)v177 + 152 * *(unsigned int *)&v177[8];
      v42 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v40;
      *(_OWORD *)(v41 + 16) = v42;
      v43 = *(_QWORD *)(v40 + 144);
      v44 = *(_OWORD *)(v40 + 128);
      v45 = *(_OWORD *)(v40 + 96);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v40 + 112);
      *(_OWORD *)(v41 + 128) = v44;
      *(_QWORD *)(v41 + 144) = v43;
      *(_OWORD *)(v41 + 96) = v45;
      v46 = *(_OWORD *)(v40 + 80);
      v47 = *(_OWORD *)(v40 + 32);
      v48 = *(_OWORD *)(v40 + 48);
      *(_OWORD *)(v41 + 64) = *(_OWORD *)(v40 + 64);
      *(_OWORD *)(v41 + 80) = v46;
      *(_OWORD *)(v41 + 32) = v47;
      *(_OWORD *)(v41 + 48) = v48;
      ++*(_DWORD *)&v177[8];
      if (v116 != 201)
      {
        v36 = (_QWORD *)(v34 + 16);
        v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v49 + 8) & 0xF) != 0)
          v49 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 48));
        v160 = v109;
        LOBYTE(v163) = 0;
        v169 = 0;
        v170 = v49 & 0xFFFFFFFFFFFFFFF0;
        v50 = sub_22E3C187C((uint64_t)v177, (unint64_t)&v160, 1);
        v51 = *(_QWORD *)v177 + 152 * *(unsigned int *)&v177[8];
        v52 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v51 = *(_OWORD *)v50;
        *(_OWORD *)(v51 + 16) = v52;
        v53 = *(_QWORD *)(v50 + 144);
        v54 = *(_OWORD *)(v50 + 128);
        v55 = *(_OWORD *)(v50 + 96);
        *(_OWORD *)(v51 + 112) = *(_OWORD *)(v50 + 112);
        *(_OWORD *)(v51 + 128) = v54;
        *(_QWORD *)(v51 + 144) = v53;
        *(_OWORD *)(v51 + 96) = v55;
        v56 = *(_OWORD *)(v50 + 80);
        v57 = *(_OWORD *)(v50 + 32);
        v58 = *(_OWORD *)(v50 + 48);
        *(_OWORD *)(v51 + 64) = *(_OWORD *)(v50 + 64);
        *(_OWORD *)(v51 + 80) = v56;
        *(_OWORD *)(v51 + 32) = v57;
        *(_OWORD *)(v51 + 48) = v58;
        ++*(_DWORD *)&v177[8];
      }
      v59 = *(_QWORD *)(*(_QWORD *)(*v36 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v59 + 8) & 0xF) != 0)
        v59 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(*v36 + 48));
      v60 = v59 & 0xFFFFFFFFFFFFFFF0;
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), (llvm::LLVMContext *)(v59 & 0xFFFFFFFFFFFFFFF0));
      v160 = (unint64_t)llvm::ConstantInt::get();
      LOBYTE(v163) = 0;
      v169 = 0;
      v170 = v60;
      v61 = sub_22E3C187C((uint64_t)v177, (unint64_t)&v160, 1);
      v62 = *(_QWORD *)v177 + 152 * *(unsigned int *)&v177[8];
      v63 = *(_OWORD *)(v61 + 16);
      *(_OWORD *)v62 = *(_OWORD *)v61;
      *(_OWORD *)(v62 + 16) = v63;
      v64 = *(_QWORD *)(v61 + 144);
      v65 = *(_OWORD *)(v61 + 128);
      v66 = *(_OWORD *)(v61 + 96);
      *(_OWORD *)(v62 + 112) = *(_OWORD *)(v61 + 112);
      *(_OWORD *)(v62 + 128) = v65;
      *(_QWORD *)(v62 + 144) = v64;
      *(_OWORD *)(v62 + 96) = v66;
      v67 = *(_OWORD *)(v61 + 80);
      v68 = *(_OWORD *)(v61 + 32);
      v69 = *(_OWORD *)(v61 + 48);
      *(_OWORD *)(v62 + 64) = *(_OWORD *)(v61 + 64);
      *(_OWORD *)(v62 + 80) = v67;
      *(_OWORD *)(v62 + 32) = v68;
      *(_OWORD *)(v62 + 48) = v69;
      ++*(_DWORD *)&v177[8];
      v70 = v104[5];
      v71 = *(_QWORD *)(*(_QWORD *)(sub_22F40A264(*(_QWORD *)(*((_QWORD *)v105 + 1) & 0xFFFFFFFFFFFFFFF0)) + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v71 || *(unsigned __int8 *)(v71 + 16) - 35 <= 0xFFFFFFFD)
        v71 = sub_22F10CF48(v71);
      v72 = sub_22F272660(v71);
      v73 = *(_QWORD *)(a1 + 144);
      v74 = *(_QWORD *)(v73 + 784);
      if (!v74)
      {
        sub_22F298C2C(*(_QWORD **)(a1 + 144));
        v74 = *(_QWORD *)(v73 + 784);
      }
      v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74 + 248))(v74, a1, v72);
      memset(v117, 0, sizeof(v117));
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v74 + 136))(&v160, v74, a1, v117, v104[10], v70, v75, v177, v72, v104);
      if (v115)
        sub_22F272698(a1, (uint64_t)v194, v195);
      v76 = v160;
      v77 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *((llvm::LLVMContext **)v105 + 1));
      LOWORD(v176) = 257;
      v17 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v76, v77, (uint64_t)&v174);
      if (v191 != v193)
        free(v191);
      if (v188 != v190)
        free(v188);
      if (v185 != v187)
        free(v185);
      if (*(_BYTE **)v177 != &v177[16])
        free(*(void **)v177);
      if (v194 != v196)
        free(v194);
      if (v152 >= 0x41 && v151)
        MEMORY[0x2348A0E84](v151, 0x1000C8000313F17);
    }
    else
    {
      if (v116 == 201)
        v11 = 12;
      else
        v11 = 17;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v13 = sub_22F36E1B8(v12);
      v14 = *(_QWORD *)(v13 + 48);
      if (v14)
        v15 = (llvm::LLVMContext *)(v14 & 0xFFFFFFFFFFFFFFF0);
      else
        v15 = (llvm::LLVMContext *)sub_22EF6462C(v12, v13);
      v96 = *(_QWORD *)(a1 + 144);
      v97 = sub_22E66CB04((llvm::Type ***)(v96 + 280), v15);
      if (v116 == 201)
        v98 = "__NSArray0__";
      else
        v98 = "__NSDictionary0__";
      v99 = sub_22F29B660(v96, v97, (uint64_t)v98, v11);
      sub_22E619C24((uint64_t)v99, (unint64_t)v15, 0, 1, a1, (uint64_t)v177);
      v153[7] = v183;
      v154 = v184;
      v153[2] = v178;
      v153[3] = v179;
      v153[5] = v181;
      v153[6] = v182;
      v153[4] = v180;
      v153[0] = *(_OWORD *)v177;
      v153[1] = *(_OWORD *)&v177[16];
      sub_22F0D5A50((uint64_t)a2);
      v101 = sub_22F25F748(a1, (uint64_t)v153, v100);
      llvm::Module::getMDKindID();
      llvm::MDTuple::getImpl();
      llvm::Instruction::setMetadata();
      v102 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *((llvm::LLVMContext **)a2 + 1));
      LOWORD(v162) = 257;
      return sub_22E3C1740((uint64_t *)(a1 + 272), 49, v101, v102, (uint64_t)&v160);
    }
  }
  return v17;
}

uint64_t sub_22E55B7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  _QWORD *v20;
  __int128 v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  BOOL v52;
  _BOOL4 v53;
  unsigned int v54;
  _BOOL4 v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  _BOOL4 v61;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  llvm::LLVMContext *v72;
  int v73;
  int v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BOOL4 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BOOL4 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Value *v110;
  const char *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  _OWORD v125[3];
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  __int16 v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD **)(a2 + 144);
  if ((*(_BYTE *)(v20[23] + 32) & 0x40) != 0)
  {
    v123 = v20[18];
    v124 = (_DWORD *)(v20[19] + 400);
    switch(sub_22F41F330(a5))
    {
      case 1u:
        if (!a11)
          goto LABEL_2;
        sub_22F274D20((uint64_t)v124);
        if (!v23
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 32)
        {
          goto LABEL_2;
        }
        if ((a5 & 7) == 1)
        {
          if ((a5 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v24 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (*(_DWORD *)v24 == 5)
            {
              v25 = *(_DWORD *)(v24 + 16);
              v26 = *(unsigned __int8 *)(v24 + 20);
              v27 = v25 == 1869376609 && v26 == 99;
              if (v27)
              {
                v28 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
                v29 = *(uint64_t **)(*(_QWORD *)(a2 + 144) + 832);
                v30 = "objc_alloc";
                v31 = (_QWORD *)a2;
                v32 = a6;
                v33 = 10;
                goto LABEL_91;
              }
            }
          }
        }
        else if ((a5 & 7u) >= 2)
        {
          v98 = (a5 & 7) == 2 || *(_DWORD *)(a5 & 0xFFFFFFFFFFFFFFF8) == 4;
          if (v98
            && a7[2] == 1
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a7 + 144) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 39)
          {
            v99 = a5 & 0xFFFFFFFFFFFFFFF8;
            if ((a5 & 7) == 7)
              v99 = *(_QWORD *)(v99 + 16);
            if (v99)
            {
              v100 = *(_QWORD *)(v99 + 16);
              if (*(_DWORD *)v100 == 13)
              {
                v101 = *(_QWORD *)(v100 + 16);
                v102 = *(_QWORD *)(v100 + 21);
                v103 = v101 == 0x746957636F6C6C61 && v102 == 0x656E6F5A68746957;
                if (v103 && *(_BYTE *)(**(_QWORD **)a7 + 16) == 19)
                {
                  v28 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
                  v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 832) + 16);
                  v30 = "objc_allocWithZone";
                  v31 = (_QWORD *)a2;
                  v32 = a6;
                  v33 = 18;
                  goto LABEL_91;
                }
              }
            }
          }
        }
        goto LABEL_2;
      case 5u:
        if ((a5 & 7) != 1)
          goto LABEL_2;
        if ((a5 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_2;
        v57 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF8) + 16);
        if (*(_DWORD *)v57 != 3)
          goto LABEL_2;
        v58 = *(unsigned __int16 *)(v57 + 16);
        v59 = *(unsigned __int8 *)(v57 + 18);
        v60 = v58 == 25966 && v59 == 119;
        v61 = !v60;
        if (v61 || a11 == 0)
          goto LABEL_2;
        v63 = sub_22F36E1B8(v123);
        v64 = *(_QWORD *)(v63 + 48);
        if (!v64)
          v64 = sub_22EF6462C(v123, v63);
        if (*(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
          || (*(_BYTE *)(v20[19] + 246) & 6) != 0
          || !sub_22F274E08(v124))
        {
          goto LABEL_2;
        }
        v65 = v20[104] + 80;
        v66 = sub_22F36E27C(v123);
        v67 = *(_QWORD *)(v66 + 48);
        if (v67)
          v68 = v67 & 0xFFFFFFFFFFFFFFF0;
        else
          v68 = sub_22EF6462C(v123, v66);
        v128 = v68;
        v111 = "objc_opt_new";
        goto LABEL_155;
      case 6u:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 32)
          goto LABEL_2;
        if ((*(_BYTE *)(v20[19] + 246) & 6) != 0)
          goto LABEL_2;
        sub_22F274D94((uint64_t)v124);
        if (!v69)
          goto LABEL_2;
        v28 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
        v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 832) + 176);
        v30 = "objc_autorelease";
        v31 = (_QWORD *)a2;
        v32 = a6;
        v33 = 16;
        goto LABEL_91;
      case 9u:
        v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v70)
          v71 = (*(_DWORD *)(v70 + 16) & 0xFF800FF) == 86507531;
        else
          v71 = 0;
        if (!v71)
          goto LABEL_2;
        if ((*(_BYTE *)(v20[19] + 246) & 6) != 0)
          goto LABEL_2;
        sub_22F274D94((uint64_t)v124);
        if (!v73)
          goto LABEL_2;
        if (*(_BYTE *)(a6 + 16) != 19)
        {
          v104 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 832);
          if (!*(_QWORD *)(v104 + 320))
          {
            llvm::Type::getVoidTy(*(llvm::Type **)(a2 + 336), v72);
            v128 = *(_QWORD *)(a2 + 96);
            v105 = llvm::FunctionType::get();
            *(_QWORD *)(v104 + 312) = sub_22E633A04(*(_QWORD *)(a2 + 144), v105, "objc_release", 12, 0, 0, 0);
            *(_QWORD *)(v104 + 320) = v106;
            sub_22E565438(*(_QWORD *)(a2 + 144), v106);
            v107 = *(_QWORD *)(v104 + 320);
            if (v107)
            {
              if (!*(_BYTE *)(v107 + 16))
                llvm::Function::addFnAttr();
            }
          }
          v108 = *(_QWORD *)(a2 + 96);
          v130 = 257;
          v127 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, a6, v108, (uint64_t)&v128);
          v109 = *(_QWORD *)(v104 + 312);
          v110 = *(llvm::Value **)(v104 + 320);
          v130 = 257;
          sub_22F24F1F4((_QWORD *)a2, v109, v110, (uint64_t)&v127, 1, (uint64_t)&v128);
        }
        result = 0;
        goto LABEL_92;
      case 0xAu:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 32)
          goto LABEL_2;
        if ((*(_BYTE *)(v20[19] + 246) & 6) != 0)
          goto LABEL_2;
        sub_22F274D94((uint64_t)v124);
        if (!v74)
          goto LABEL_2;
        v28 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
        v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 832) + 256);
        v30 = "objc_retain";
        v31 = (_QWORD *)a2;
        v32 = a6;
        v33 = 11;
LABEL_91:
        result = sub_22E5647C0(v31, v32, v28, v29, v30, v33);
        goto LABEL_92;
      case 0xCu:
        v76 = sub_22F36E1B8(v123);
        v77 = *(_QWORD *)(v76 + 48);
        if (!v77)
          v77 = sub_22EF6462C(v123, v76);
        if (*(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
          || (*(_BYTE *)(v20[19] + 246) & 6) != 0
          || !sub_22F274E08(v124))
        {
          goto LABEL_2;
        }
        v65 = v20[104] + 96;
        v78 = sub_22F36E1B8(v123);
        v79 = *(_QWORD *)(v78 + 48);
        if (v79)
          v80 = v79 & 0xFFFFFFFFFFFFFFF0;
        else
          v80 = sub_22EF6462C(v123, v78);
        v128 = v80;
        v111 = "objc_opt_self";
        goto LABEL_155;
      default:
        if ((*(_BYTE *)(v20[19] + 246) & 6) != 0)
          goto LABEL_2;
        v34 = a5 & 7;
        v35 = a5 & 0xFFFFFFFFFFFFFFF8;
        v36 = a5 & 0xFFFFFFFFFFFFFFF8;
        if (v34 == 7)
          v36 = *(_QWORD *)(v35 + 16);
        if (v36
          && (v37 = *(_QWORD *)(v36 + 16), *(_DWORD *)v37 == 5)
          && ((v38 = *(_DWORD *)(v37 + 16), v39 = *(unsigned __int8 *)(v37 + 20), v38 == 1935764579)
            ? (v40 = v39 == 115)
            : (v40 = 0),
              v40))
        {
          if (v34 != 1)
            goto LABEL_2;
          v81 = sub_22F36E27C(v123);
          v82 = *(_QWORD *)(v81 + 48);
          if (!v82)
            v82 = sub_22EF6462C(v123, v81);
          if (*(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
            || !sub_22F274E08(v124))
          {
            goto LABEL_2;
          }
          v65 = v20[104] + 112;
          v83 = sub_22F36E1B8(v123);
          v84 = *(_QWORD *)(v83 + 48);
          if (v84)
            v85 = v84 & 0xFFFFFFFFFFFFFFF0;
          else
            v85 = sub_22EF6462C(v123, v83);
          v128 = v85;
          v111 = "objc_opt_class";
LABEL_155:
          v112 = (uint64_t *)v65;
          v113 = a4;
          v114 = 1;
        }
        else
        {
          v41 = a5 & 0xFFFFFFFFFFFFFFF8;
          if (v34 == 7)
            v41 = *(_QWORD *)(v35 + 16);
          if (v41
            && (v42 = *(_QWORD *)(v41 + 16), *(_DWORD *)v42 == 13)
            && ((v43 = *(_QWORD *)(v42 + 16), v44 = *(_QWORD *)(v42 + 21), v43 == 0x664F646E694B7369)
              ? (v45 = v44 == 0x7373616C43664F64)
              : (v45 = 0),
                v45))
          {
            if ((a5 & 7u) < 2)
              goto LABEL_2;
            v86 = (a5 & 7) == 2 || *(_DWORD *)v35 == 4;
            if (!v86
              || a7[2] != 1
              || *(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v123 + 16912) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            {
              goto LABEL_2;
            }
            v121 = *(_QWORD *)(*(_QWORD *)a7 + 144);
            v87 = sub_22F36E27C(v123);
            v88 = *(_QWORD *)(v87 + 48);
            if (!v88)
              v88 = sub_22EF6462C(v123, v87);
            if (*(_QWORD *)(*(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v88 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
              || !sub_22F274E08(v124))
            {
              goto LABEL_2;
            }
            v89 = v20[104] + 128;
            v90 = sub_22F36E1B8(v123);
            v91 = *(_QWORD *)(v90 + 48);
            if (v91)
              v92 = v91 & 0xFFFFFFFFFFFFFFF0;
            else
              v92 = sub_22EF6462C(v123, v90);
            v128 = v92;
            v115 = sub_22F36E27C(v123);
            v116 = *(_QWORD *)(v115 + 48);
            if (v116)
              v117 = v116 & 0xFFFFFFFFFFFFFFF0;
            else
              v117 = sub_22EF6462C(v123, v115);
            v129 = v117;
            v111 = "objc_opt_isKindOfClass";
          }
          else
          {
            v46 = a5 & 0xFFFFFFFFFFFFFFF8;
            if (v34 == 7)
              v46 = *(_QWORD *)(v35 + 16);
            if (!v46)
              goto LABEL_2;
            v47 = *(_QWORD *)(v46 + 16);
            if (*(_DWORD *)v47 != 18)
              goto LABEL_2;
            v48 = *(_QWORD *)(v47 + 16);
            v49 = *(_QWORD *)(v47 + 24);
            v50 = *(unsigned __int16 *)(v47 + 32);
            v51 = v48 == 0x73646E6F70736572 && v49 == 0x7463656C65536F54;
            v52 = v51 && v50 == 29295;
            v53 = !v52;
            v27 = !v53;
            v54 = a5 & 7;
            if (!v27 || v54 < 2)
              goto LABEL_2;
            v56 = v54 == 2 || *(_DWORD *)v35 == 4;
            if (!v56
              || a7[2] != 1
              || *(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v123 + 16912) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            {
              goto LABEL_2;
            }
            v122 = *(_QWORD *)(*(_QWORD *)a7 + 144);
            v93 = sub_22F36E228(v123);
            v94 = *(_QWORD *)(v93 + 48);
            if (!v94)
              v94 = sub_22EF6462C(v123, v93);
            if (*(_QWORD *)(*(_QWORD *)((v122 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
              || !sub_22F274E08(v124))
            {
              goto LABEL_2;
            }
            v89 = v20[104] + 144;
            v95 = sub_22F36E1B8(v123);
            v96 = *(_QWORD *)(v95 + 48);
            if (v96)
              v97 = v96 & 0xFFFFFFFFFFFFFFF0;
            else
              v97 = sub_22EF6462C(v123, v95);
            v128 = v97;
            v118 = sub_22F36E228(v123);
            v119 = *(_QWORD *)(v118 + 48);
            if (v119)
              v120 = v119 & 0xFFFFFFFFFFFFFFF0;
            else
              v120 = sub_22EF6462C(v123, v118);
            v129 = v120;
            v111 = "objc_opt_respondsToSelector";
          }
          v112 = (uint64_t *)v89;
          v113 = a4;
          v114 = 2;
        }
        result = sub_22E564FA0(v112, v111, v113, &v128, v114, a6, (uint64_t)a7, a2);
LABEL_92:
        v75 = *(_BYTE *)(a9 + 48);
        *(_QWORD *)a9 = result;
        *(_QWORD *)(a9 + 8) = 0;
        *(_BYTE *)(a9 + 48) = v75 & 0xF8;
        break;
    }
  }
  else
  {
LABEL_2:
    v21 = *(_OWORD *)(a3 + 16);
    v125[0] = *(_OWORD *)a3;
    v125[1] = v21;
    v125[2] = *(_OWORD *)(a3 + 32);
    v126 = *(_QWORD *)(a3 + 48);
    return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, v125, a4, a5, a6, a7, a8, a10);
  }
  return result;
}

uint64_t sub_22E55C27C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  llvm *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  llvm *v47[2];
  unsigned int v48;
  _QWORD *v49;
  _QWORD v50[2];
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  llvm *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57[3];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (a1 == a2)
  {
    v18 = 0;
    v17 = 0;
  }
  else
  {
    v4 = a1;
    v6 = 0;
    do
    {
      v57[0] = *(_QWORD *)(*(_QWORD *)v4 + 96);
      if (sub_22EFDE1F8(v57[0]))
      {
        sub_22F275184((uint64_t)&v54, v57, (uint64_t)&v49);
      }
      else
      {
        v7 = (unint64_t)a3[2];
        if ((unint64_t)v6 >= v7)
        {
          v9 = *a3;
          v10 = ((char *)v6 - *a3) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
LABEL_74:
            abort();
          v12 = v7 - (_QWORD)v9;
          if (v12 >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            if (v13 >> 61)
LABEL_75:
              sub_22E3B3F8C();
            v14 = (char *)operator new(8 * v13);
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v57[0];
          v8 = v15 + 8;
          if (v6 != (uint64_t *)v9)
          {
            do
            {
              v16 = *--v6;
              *((_QWORD *)v15 - 1) = v16;
              v15 -= 8;
            }
            while (v6 != (uint64_t *)v9);
            v6 = (uint64_t *)*a3;
          }
          *a3 = v15;
          a3[1] = v8;
          a3[2] = &v14[8 * v13];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *v6 = v57[0];
          v8 = (char *)(v6 + 1);
        }
        a3[1] = v8;
        v6 = (uint64_t *)v8;
      }
      v4 += 8;
    }
    while (v4 != a2);
    v17 = v56;
    v18 = v54;
    if ((_DWORD)v55)
    {
      v49 = v50;
      v50[0] = 0;
      v50[1] = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      if (v56)
      {
        v23 = 8 * v56;
        v19 = (uint64_t *)v54;
        while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v19;
          v23 -= 8;
          if (!v23)
            goto LABEL_40;
        }
      }
      else
      {
        v19 = (uint64_t *)v54;
      }
      v20 = (uint64_t *)((char *)v54 + 8 * v56);
      if (v19 != v20)
      {
        v21 = *v19;
LABEL_30:
        sub_22E55C640(v21, (uint64_t)&v49);
        while (++v19 != v20)
        {
          v21 = *v19;
          if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v19 != v20)
              goto LABEL_30;
            break;
          }
        }
      }
LABEL_40:
      v47[0] = 0;
      v47[1] = 0;
      v48 = 0;
      v24 = (uint64_t *)*a3;
      while (v24 != v6)
      {
        v25 = *v24++;
        v46 = *(_QWORD *)(v25 + 96);
        sub_22F275184((uint64_t)v47, &v46, (uint64_t)v57);
        sub_22EFDE258(v46, (uint64_t)v47);
      }
      v26 = v51;
      v27 = v52;
      if (v51 == v52)
        goto LABEL_46;
      do
      {
        v28 = *v26++;
        sub_22EFDE258(v28, (uint64_t)v47);
      }
      while (v26 != v27);
      v29 = v51;
      v30 = v52;
      if (v51 == v52)
      {
LABEL_46:
        llvm::deallocate_buffer(v47[0], (void *)(8 * v48));
        sub_22F274F08((uint64_t)&v49);
        v17 = v56;
        v18 = v54;
        return llvm::deallocate_buffer(v18, (void *)(8 * v17));
      }
      while (1)
      {
        v31 = *v29;
        if (!v48)
          goto LABEL_50;
        v32 = ((v31 >> 4) ^ (v31 >> 9)) & (v48 - 1);
        v33 = *((_QWORD *)v47[0] + v32);
        if (v31 != v33)
          break;
LABEL_49:
        if (v32 == v48)
          goto LABEL_50;
LABEL_68:
        if (++v29 == v30)
          goto LABEL_46;
      }
      v44 = 1;
      while (v33 != -4096)
      {
        v45 = v32 + v44++;
        v32 = v45 & (v48 - 1);
        v33 = *((_QWORD *)v47[0] + v32);
        if (v31 == v33)
          goto LABEL_49;
      }
LABEL_50:
      v34 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v34)
      {
        v36 = *a3;
        v37 = ((char *)v6 - *a3) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_74;
        v39 = v34 - (_QWORD)v36;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 61)
            goto LABEL_75;
          v41 = (char *)operator new(8 * v40);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[8 * v37];
        *(_QWORD *)v42 = v31;
        v35 = v42 + 8;
        if (v6 != (uint64_t *)v36)
        {
          do
          {
            v43 = *--v6;
            *((_QWORD *)v42 - 1) = v43;
            v42 -= 8;
          }
          while (v6 != (uint64_t *)v36);
          v6 = (uint64_t *)*a3;
        }
        *a3 = v42;
        a3[1] = v35;
        a3[2] = &v41[8 * v40];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = v31;
        v35 = (char *)(v6 + 1);
      }
      a3[1] = v35;
      v6 = (uint64_t *)v35;
      goto LABEL_68;
    }
  }
  return llvm::deallocate_buffer(v18, (void *)(8 * v17));
}

uint64_t *sub_22E55C640(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  if (sub_22EFDE1F8(a1))
  {
    result = (uint64_t *)sub_22F259248(a1);
    if (result != v5)
    {
      v6 = result;
      v7 = v5;
      do
      {
        v8 = *v6++;
        result = (uint64_t *)sub_22E55C640(v8, a2);
      }
      while (v6 != v7);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 96);
    return (uint64_t *)sub_22F274E90(a2, &v9);
  }
  return result;
}

void sub_22E55C6BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  _QWORD *v27;
  char v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _DWORD *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v54;
  int v55;
  int v56;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  int v68;
  llvm::PointerType *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::ConstantPointerNull *v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t *v78;
  __int128 v79;
  char v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  llvm::LLVMContext *v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  llvm::LLVMContext **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  _OWORD v103[3];
  char v104;
  _DWORD v105[3];
  _QWORD v106[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  __int128 v117;
  __int128 v118;
  _QWORD v119[2];
  __int128 v120;
  __int128 v121;
  _QWORD v122[6];
  char v123;
  _QWORD v124[6];
  char v125;
  void *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[192];
  void *v133;
  uint64_t v134;
  _BYTE v135[16];
  void *v136;
  uint64_t v137;
  _QWORD v138[8];

  v138[5] = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a2 + 24);
  if ((v8 & 0x1000000) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      if ((v8 & 0xFF0000) == 0x10000 && sub_22EFDBF50(*(_QWORD *)(a2 + 16)) == 10)
      {
        v10 = *(unsigned __int8 **)(a2 + 40);
        do
        {
          v11 = v10;
          LODWORD(v12) = *v10;
          if (v12 > 0xD5)
          {
            if ((_DWORD)v12 == 233)
            {
              LODWORD(v12) = *(_DWORD *)v10;
              if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
                break;
              v13 = v10 + 16;
            }
            else
            {
              if ((_DWORD)v12 != 214)
                break;
              v13 = v10 + 24;
            }
          }
          else if ((_DWORD)v12 == 155)
          {
            if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
              goto LABEL_27;
            v13 = v10 + 24;
            if (!v11[48])
              v13 = v11 + 32;
            LOBYTE(v12) = -101;
          }
          else
          {
            if ((_DWORD)v12 != 176)
              break;
            v12 = *((unsigned int *)v10 + 5);
            if ((_DWORD)v12 == -1)
              goto LABEL_27;
            v13 = &v10[8 * v12 + 40];
            LOBYTE(v12) = -80;
          }
          v10 = *(unsigned __int8 **)v13;
        }
        while (v10 != v11);
        if ((v12 + 102) >= 0xF5u && (*(_DWORD *)v11 & 0x1FC0000) == 0x100000)
        {
          v14 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v11 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v14 & 8) != 0 && (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
          {
            sub_22E4D8D7C(&v126);
            v113 = v127;
            v114 = v128;
            v115 = v129;
            v15 = sub_22E564218((_QWORD *)a1, (uint64_t)&v113, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 232));
            v16 = *(llvm::LLVMContext **)(a2 + 8);
            v124[1] = 0;
            v124[0] = v15;
            v125 = 0;
            v17 = v124;
            v18 = a4;
            v19 = a1;
LABEL_26:
            sub_22E55D4D0(v18, v19, v16, (uint64_t)v17);
            return;
          }
        }
      }
LABEL_27:
      v99 = a3;
      v100 = a4;
      v20 = 1;
    }
    else
    {
      v99 = a3;
      v100 = a4;
      v20 = 0;
    }
  }
  else
  {
    v99 = a3;
    v100 = a4;
    v20 = 0;
    v9 = 0;
  }
  if (sub_22F274F40((int *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 400)))
  {
    v21 = *(_DWORD *)(a2 + 24);
    v22 = (_QWORD *)(a2 + 16);
    if ((v21 & 0x1000000) != 0)
      v22 = (_QWORD *)(*v22 + 40);
    if ((v21 & 0xFF0000) == 0x10000)
    {
      v23 = *v22;
      v24 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 32
         && (v23 & 7) == 1;
      v25 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (v24 && v25 != 0)
      {
        v45 = *(_DWORD **)(v25 + 16);
        if (*v45 == 4 && v45[4] == 1953066601)
        {
          v46 = sub_22EFFBBCC(*(unsigned __int8 **)(a2 + 40));
          if (*v46 == 200)
          {
            v47 = v46;
            v48 = *((_DWORD *)v46 + 6);
            v49 = v46 + 16;
            if ((v48 & 0x1000000) != 0)
              v49 = (_QWORD *)(*v49 + 40);
            v50 = *v49;
            v51 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) == 32
               && (v50 & 7) == 1;
            v52 = v50 & 0xFFFFFFFFFFFFFFF8;
            if (v51 && v52 != 0)
            {
              v54 = *(_QWORD *)(v52 + 16);
              if (*(_DWORD *)v54 == 5)
              {
                v55 = *(_DWORD *)(v54 + 16);
                v56 = *(unsigned __int8 *)(v54 + 20);
                if (v55 == 1869376609 && v56 == 99)
                {
                  v58 = BYTE2(v48);
                  if ((v58 - 2) >= 2)
                  {
                    if (v58 != 1)
                    {
                      if (v58)
                      {
                        v59 = 0;
LABEL_182:
                        v92 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
                        v93 = sub_22E5647C0((_QWORD *)a1, v59, v92, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 32), "objc_alloc_init", 15);
                        v16 = *(llvm::LLVMContext **)(a2 + 8);
                        v122[1] = 0;
                        v122[0] = v93;
                        v123 = 0;
                        v17 = v122;
                        v18 = v100;
                        v19 = a1;
                        goto LABEL_26;
                      }
                      v94 = *(_QWORD *)(**((_QWORD **)v46 + 5) & 0xFFFFFFFFFFFFFFF0);
                      if (!v94 || *(unsigned __int8 *)(v94 + 16) - 35 <= 0xFFFFFFFD)
                        v94 = sub_22F10CF48(v94);
                      v95 = sub_22F272660(v94);
                      v96 = *(_QWORD *)(a1 + 144);
                      v97 = *(_QWORD *)(v96 + 784);
                      if (!v97)
                      {
                        sub_22F298C2C(*(_QWORD **)(a1 + 144));
                        v97 = *(_QWORD *)(v96 + 784);
                      }
                      v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97 + 248))(v97, a1, v95);
LABEL_181:
                      v59 = v91;
                      goto LABEL_182;
                    }
                    v88 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 5) + 8) & 0xFFFFFFFFFFFFFFF0);
                    if ((v88 && *(_BYTE *)(v88 + 16) == 32
                       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v88 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                       && (v88 = sub_22F10CF48(v88)) != 0)
                      && sub_22E509ED0(v88))
                    {
                      if (v47[26] << 16 == 0x10000)
                        v90 = *((_QWORD *)v47 + 5);
                      else
                        v90 = 0;
                      v126 = (void *)a1;
                      *(_QWORD *)&v127 = a1 + 272;
                      BYTE8(v127) = 0;
                      *(_QWORD *)&v128 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
                      v91 = sub_22E50E974(&v126, v90, v89);
                      goto LABEL_181;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v27 = *(_QWORD **)(a1 + 144);
  if ((v8 & 0x2000000) != 0)
    goto LABEL_44;
  v28 = v20 ^ 1;
  if ((*(_WORD *)(v27[19] + 148) & 2) == 0)
    v28 = 1;
  if ((v28 & 1) != 0)
  {
LABEL_44:
    v29 = 0;
  }
  else
  {
    v29 = sub_22F2727C8(v9);
    v27 = *(_QWORD **)(a1 + 144);
  }
  v30 = v27[98];
  if (!v30)
  {
    sub_22F298C2C(v27);
    v30 = v27[98];
  }
  v31 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v31) <= 3u)
    __asm { BR              X11 }
  v32 = 0;
  if (v29)
    v32 = sub_22E563CC4((_QWORD *)a1, 0, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 248), 222, 0);
  v33 = v20 ^ 1;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 148) & 2) == 0)
    v33 = 1;
  v101 = v32;
  if ((v33 & 1) == 0 && sub_22E55D5A0(v9) && *(unsigned __int8 *)(a2 + 26) << 16 == 0x10000)
  {
    v34 = *(unsigned __int8 **)(a2 + 40);
    v35 = *v34;
    if (v35 == 210)
    {
      v36 = (unsigned __int8 *)*((_QWORD *)v34 + 2);
      if (v36)
      {
        while (1)
        {
          v34 = v36;
          v35 = *v36;
          if (v35 > 0xD5)
          {
            if (v35 == 233)
            {
              v35 = *(_DWORD *)v36;
              if ((*(_DWORD *)v36 & 0x7C0000) != 0x300000)
                goto LABEL_76;
              v38 = v36 + 16;
            }
            else
            {
              if (v35 != 214)
                goto LABEL_76;
              v38 = v36 + 24;
            }
          }
          else if (v35 == 155)
          {
            if ((**((_DWORD **)v36 + 2) & 0x18000) != 0)
              break;
            v38 = v36 + 24;
            if (!v34[48])
              v38 = v34 + 32;
            v35 = 155;
          }
          else
          {
            if (v35 != 176)
              goto LABEL_76;
            v37 = *((unsigned int *)v36 + 5);
            if ((_DWORD)v37 == -1)
              break;
            v38 = &v36[8 * v37 + 40];
            v35 = 176;
          }
          v36 = *(unsigned __int8 **)v38;
          if (v36 == v34)
            goto LABEL_76;
        }
      }
    }
    else
    {
LABEL_76:
      if (v35 == 153 && (*(_DWORD *)v34 & 0x1FC0000) == 0x100000)
      {
        v39 = (unsigned __int8 *)*((_QWORD *)v34 + 2);
        if (v39)
        {
          v40 = v39;
          do
          {
            v41 = v40;
            v42 = *v40;
            if (v42 > 0xD5)
            {
              if (v42 == 233)
              {
                v42 = *(_DWORD *)v40;
                if ((*(_DWORD *)v40 & 0x7C0000) != 0x300000)
                  goto LABEL_141;
                v44 = v40 + 16;
              }
              else
              {
                if (v42 != 214)
                  break;
                v44 = v40 + 24;
              }
            }
            else if (v42 == 155)
            {
              if ((**((_DWORD **)v40 + 2) & 0x18000) != 0)
              {
LABEL_139:
                v42 = 155;
                goto LABEL_141;
              }
              v44 = v40 + 24;
              if (!v41[48])
                v44 = v41 + 32;
              v42 = 155;
            }
            else
            {
              if (v42 != 176)
                break;
              v43 = *((unsigned int *)v40 + 5);
              if ((_DWORD)v43 == -1)
              {
LABEL_140:
                v42 = 176;
                goto LABEL_141;
              }
              v44 = &v40[8 * v43 + 40];
              v42 = 176;
            }
            v40 = *(unsigned __int8 **)v44;
          }
          while (v40 != v41);
          if (v42 == 210)
            goto LABEL_120;
        }
        else
        {
          v41 = 0;
LABEL_120:
          v60 = (unsigned __int8 *)*((_QWORD *)v41 + 2);
          if (v60)
          {
            while (1)
            {
              v41 = v60;
              v42 = *v60;
              if (v42 > 0xD5)
              {
                if (v42 == 233)
                {
                  v42 = *(_DWORD *)v60;
                  if ((*(_DWORD *)v60 & 0x7C0000) != 0x300000)
                    goto LABEL_141;
                  v62 = v60 + 16;
                }
                else
                {
                  if (v42 != 214)
                    goto LABEL_141;
                  v62 = v60 + 24;
                }
              }
              else if (v42 == 155)
              {
                if ((**((_DWORD **)v60 + 2) & 0x18000) != 0)
                  goto LABEL_139;
                v62 = v60 + 24;
                if (!v41[48])
                  v62 = v41 + 32;
                v42 = 155;
              }
              else
              {
                if (v42 != 176)
                  goto LABEL_141;
                v61 = *((unsigned int *)v60 + 5);
                if ((_DWORD)v61 == -1)
                  goto LABEL_140;
                v62 = &v60[8 * v61 + 40];
                v42 = 176;
              }
              v60 = *(unsigned __int8 **)v62;
              if (v60 == v41)
                goto LABEL_141;
            }
          }
          v42 = 210;
        }
LABEL_141:
        v63 = *(_QWORD *)((*((_QWORD *)v41 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v63 & 8) != 0 && (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x80)
        {
          if (v42 == 188)
            goto LABEL_151;
          if (v42 == 199)
            goto LABEL_151;
          if (*v39 == 161)
          {
            v64 = *((_QWORD *)v39 + 2);
            if (v64)
            {
              if ((*(_DWORD *)(v64 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && (!sub_22E3CB5E0(v64) || sub_22E4CBAA4(v64)))
                goto LABEL_151;
            }
          }
        }
      }
    }
    v101 = sub_22F2728A8((_QWORD *)a1, 0, v32);
  }
LABEL_151:
  v65 = (uint64_t *)(v9 + 80);
  v98 = (llvm::LLVMContext **)(a2 + 8);
  if (!v20)
    v65 = (uint64_t *)(a2 + 8);
  v66 = *v65;
  v126 = (char *)&v127 + 8;
  *(_QWORD *)&v127 = 0x800000000;
  v130 = v132;
  v131 = 0x100000000;
  v133 = v135;
  v134 = 0x100000000;
  v136 = v138;
  v137 = 0x200000000;
  v67 = (unint64_t *)(a2 + 48 + 8 * *(unsigned __int16 *)(a2 + 24));
  v138[4] = 0;
  sub_22E477B1C(a1, (uint64_t)&v126, v9 | 4, a2 + 48, v67, v9, 0, 0);
  if ((v8 & 0x2000000) != 0)
  {
    *(_QWORD *)&v117 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 120);
    *(_QWORD *)&v113 = 0;
    v68 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v117, &v113);
    v70 = v113;
    if (!v68)
      v70 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v71 = v9;
    v72 = v30;
    v73 = *(_QWORD *)(v70 + 8);
    v74 = *(llvm::ConstantPointerNull **)(v70 + 16);
    v75 = *(_OWORD *)(v70 + 40);
    v113 = *(_OWORD *)(v70 + 24);
    v114 = v75;
    v76 = llvm::ConstantPointerNull::get(v74, v69);
    v119[0] = v73;
    v119[1] = v74;
    v30 = v72;
    v9 = v71;
    v120 = v113;
    v121 = v114;
    sub_22E3BEDDC(a1 + 272, v76, v119, 0);
  }
  v77 = *(_OWORD *)(v99 + 16);
  v111[0] = *(_OWORD *)v99;
  v111[1] = v77;
  v111[2] = *(_OWORD *)(v99 + 32);
  v112 = *(_QWORD *)(v99 + 48);
  v78 = (uint64_t *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 27) & 1) != 0)
    v78 = (uint64_t *)(*v78 + 40);
  sub_22E55B7D8(v30, a1, (uint64_t)v111, v66, *v78, v101, &v126, 0, (uint64_t)&v113, v9, 0);
  v79 = v113;
  v117 = v114;
  v118 = v115;
  v80 = v116;
  if ((v8 & 0x2000000) != 0)
  {
    *(_QWORD *)&v109 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 120);
    *(_QWORD *)&v113 = 0;
    v102 = v79;
    v81 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v109, &v113);
    v82 = v113;
    if (!v81)
      v82 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v84 = *(_QWORD *)(v82 + 8);
    v83 = *(_QWORD *)(v82 + 16);
    v85 = *(_OWORD *)(v82 + 40);
    v109 = *(_OWORD *)(v82 + 24);
    v110 = v85;
    LOWORD(v115) = 257;
    v86 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v102, v83, (uint64_t)&v113);
    v106[0] = v84;
    v106[1] = v83;
    v107 = v109;
    v108 = v110;
    sub_22E3BEDDC(a1 + 272, v86, v106, 0);
    v79 = v102;
  }
  v87 = *v98;
  v103[0] = v79;
  v103[1] = v117;
  v103[2] = v118;
  v104 = v80;
  v105[0] = v113;
  *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)((char *)&v113 + 3);
  sub_22E55D4D0(v100, a1, v87, (uint64_t)v103);
  if (v136 != v138)
    free(v136);
  if (v133 != v135)
    free(v133);
  if (v130 != v132)
    free(v130);
  if (v126 != (char *)&v127 + 8)
    free(v126);
}

__n128 sub_22E55D4D0(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  char v14;
  __int128 v15;
  _BYTE v16[32];
  __int16 v17;

  v8 = *(_QWORD *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v9 == 10 || v9 == 32 || sub_22F115064(v8))
    && (v10 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a3),
        v11 = *(_QWORD *)a4,
        v10 != **(_QWORD **)a4))
  {
    v17 = 257;
    v12 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v11, v10, (uint64_t)v16);
    v14 = *(_BYTE *)(a1 + 48);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 48) = v14 & 0xF8;
  }
  else
  {
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v15;
    result = *(__n128 *)(a4 + 32);
    *(__n128 *)(a1 + 32) = result;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a4 + 48);
  }
  return result;
}

BOOL sub_22E55D5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 266)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E55D600(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  unsigned __int8 v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 24);
  v28 = v30;
  v29 = 0x1000000000;
  if (sub_22F2556D0(a2))
    *(_QWORD *)(a1 + 2880) = 0;
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(v7 + 784);
  if (!v8)
  {
    sub_22F298C2C(*(_QWORD **)(a1 + 144));
    v8 = *(_QWORD *)(v7 + 784);
  }
  v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 176))(v8, a2, a3);
  v10 = sub_22E46D060(*(_QWORD *)(a1 + 144) + 280, a2, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 48));
  if (sub_22EFDBD9C(a2))
  {
    v11 = *((_DWORD *)v9 + 8);
    v12 = v11 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v9 + 8) = v12;
    if ((v11 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) != 0)
      {
LABEL_10:
        sub_22E62A548(*(_QWORD *)(a1 + 144), a2, 0, v10, v9, 0);
        sub_22E62A5F4(*(uint64_t **)(a1 + 144), a2, v9);
        goto LABEL_12;
      }
      v12 = *((_DWORD *)v9 + 8);
    }
    *((_DWORD *)v9 + 8) = v12 | 0x4000;
    goto LABEL_10;
  }
  sub_22E62BF18(*(uint64_t **)(a1 + 144), a2, 0, v9, v10);
LABEL_12:
  v13 = *(_QWORD *)(a2 + 120);
  v14 = v29;
  if (v29 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v29;
  }
  *((_QWORD *)v28 + v14) = v13;
  v15 = v29 + 1;
  LODWORD(v29) = v15;
  v16 = *(_QWORD *)(a2 + 128);
  if (v15 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v29;
  }
  *((_QWORD *)v28 + v15) = v16;
  LODWORD(v29) = v29 + 1;
  sub_22F246808((uint64_t)&v28, *(char **)(a2 + 96), (char *)(*(_QWORD *)(a2 + 96) + 8 * *(unsigned int *)(a2 + 104)));
  *(_QWORD *)(a1 + 1688) = a2;
  *(_DWORD *)(a1 + 1696) = 0;
  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (v17)
    sub_22F0D60E4(v17);
  else
    v19 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 5848) = v19;
  sub_22E61A8FC(a1, a2, 0, *(_QWORD *)(a2 + 80), v9, v10, (uint64_t *)&v28, *(_DWORD *)(a2 + 24), v18, v6);
  if (sub_22EFDBD9C(a2))
  {
    v20 = *(_QWORD *)(a1 + 144);
    v21 = *(_QWORD *)(v20 + 784);
    if (!v21)
    {
      sub_22F298C2C(*(_QWORD **)(a1 + 144));
      v21 = *(_QWORD *)(v20 + 784);
    }
    (*(void (**)(uint64_t, uint64_t, llvm::Value *, unint64_t, uint64_t))(*(_QWORD *)v21 + 184))(v21, a1, v9, a2, a3);
  }
  v22 = *(_QWORD *)(a1 + 144);
  if ((*(_WORD *)(*(_QWORD *)(v22 + 152) + 148) & 2) != 0
    && (*(_BYTE *)(a2 + 58) & 2) != 0
    && (*(_QWORD *)(a2 + 40) & 7) == 1)
  {
    v23 = *(_DWORD **)((*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (*v23 == 7)
    {
      v24 = v23[4];
      v25 = *(_DWORD *)((char *)v23 + 19);
      if (v24 == 1818322276 && v25 == 1668246636)
      {
        if ((**(_QWORD **)(v22 + 184) & 0x200) != 0)
          v27 = 3;
        else
          v27 = 2;
        *(_QWORD *)sub_22E4899EC(a1 + 1984, v27, 8) = off_24FA643C8;
      }
    }
  }
  if (sub_22E55D960(a2))
    sub_22F29B8D0(*(const char **)(a1 + 144), a2, (uint64_t)v9);
  if (v28 != v30)
    free(v28);
}

BOOL sub_22E55D960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 325)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E55D9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t BitCast;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  int v38;
  llvm::Value *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  BOOL v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  llvm::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD v81[3];
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD v94[4];
  __int16 v95;
  _BYTE v96[32];
  _BYTE v97[32];
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  _QWORD v102[4];
  _QWORD v103[9];
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107[5];

  v107[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(v2 + 73) & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(v2 + 56);
  v98 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  if (sub_22F111B38(&v98) == 5)
  {
    v37 = sub_22EF5D130(v6, v5);
    if ((v5 & 4) != 0)
      v38 = 1;
    else
      v38 = (*(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    v39 = (llvm::Value *)sub_22E551A94(*(_QWORD *)(a1 + 144), v37, v37, v38, v5);
    v40 = *(uint64_t **)(a1 + 144);
    v41 = sub_22E564DEC(v6);
    sub_22F28A778(v40, v39, v41, 0, 0);
    return llvm::ConstantExpr::getBitCast();
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_BYTE *)(v7 + 1) & 1) == 0)
    return 0;
  v8 = *(_DWORD *)(v7 + 400);
  if (v8 < 5)
    goto LABEL_5;
  if (v8 != 6)
    return 0;
  v103[0] = 0x8000000700000001;
  v103[1] = 0;
  BitCast = 0;
  if ((sub_22E3B38EC((_DWORD *)(v7 + 404), v103) & 1) != 0)
    return BitCast;
LABEL_5:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
    return 0;
  v9 = *(_QWORD *)(a2 + 80);
  if (!v9 || (*(_DWORD *)v9 & 0x3FE) == 0x76 && (*(_BYTE *)(*(_QWORD *)(v9 + 16) + 82) & 0x80) != 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 144);
  v103[0] = v5;
  BitCast = sub_22F2613A4((uint64_t *)(v10 + 1960), v103)[1];
  if (!BitCast)
  {
    v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "__copy_helper_atomic_property_", 0x1EuLL);
    v13 = *(_QWORD *)(v6 + 16392);
    v14 = sub_22EF5B848(v6, v5, 0);
    v15 = sub_22EF5B848(v6, v5 | 1, 0);
    v105 = v107;
    v107[0] = v14;
    v107[1] = v15;
    v106 = 0x200000002;
    LOWORD(v103[0]) = 0;
    BYTE2(v103[0]) = 0;
    *(_OWORD *)((char *)v103 + 4) = 0uLL;
    memset(&v103[3], 0, 48);
    v104 = 0;
    v80 = v13;
    v16 = sub_22EF63D8C(v6, v13, v107, 2uLL, (__int128 *)v103, 0);
    v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v6 + 1960) + 80));
    if (v17)
      v18 = v17 + 40;
    else
      v18 = 0;
    v103[0] = v12;
    LODWORD(v103[1]) = 0;
    sub_22EFC6D6C((uint64_t)&v103[2], v12);
    v19 = sub_22EFC7430(160, v6, v18, 0);
    v20 = sub_22EFBF4FC(v19, 52, v6, v18, 0, v103, v16, 0, 2, 0, 0, 0, 0, 0);
    *(_QWORD *)(v20 + 80) &= ~0x200000uLL;
    v103[0] = &v103[2];
    v103[1] = 0x1000000000;
    v21 = v20 + 72;
    v22 = sub_22EF579A8(v6, v14, 0);
    v79 = v14;
    v23 = sub_22EFBF080(v6, v21, 0, 0, 0, v14, (uint64_t)v22, 0, 0);
    v24 = v103[1];
    if (LODWORD(v103[1]) >= HIDWORD(v103[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v103[1];
    }
    *(_QWORD *)(v103[0] + 8 * v24) = v23;
    ++LODWORD(v103[1]);
    v25 = sub_22EF579A8(v6, v15, 0);
    v26 = sub_22EFBF080(v6, v21, 0, 0, 0, v15, (uint64_t)v25, 0, 0);
    v27 = v103[1];
    if (LODWORD(v103[1]) >= HIDWORD(v103[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v103[1];
    }
    *(_QWORD *)(v103[0] + 8 * v27) = v26;
    ++LODWORD(v103[1]);
    v28 = v19;
    if ((*(_DWORD *)(v19 + 28) & 0x7F) != 0x53)
    {
      v29 = *(_QWORD *)(v19 + 16);
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v30 = *(_QWORD *)v30;
      for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
      {
        v32 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v32 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_31;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_30;
          if (i == 16)
            goto LABEL_24;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_37;
          if (i == 24)
          {
LABEL_24:
            v32 = -48;
          }
          else
          {
LABEL_30:
            if (i != 70)
            {
LABEL_31:
              v33 = i - 52;
              if ((i - 33) >= 5)
                v34 = -48;
              else
                v34 = -64;
              if (v33 >= 6)
                v32 = v34;
              else
                v32 = -72;
              goto LABEL_37;
            }
            v32 = -64;
          }
        }
LABEL_37:
        v35 = *(_QWORD *)(v30 + v32 + 16);
        v30 = v35 & 0xFFFFFFFFFFFFFFF8;
        if ((v35 & 4) != 0)
          v30 = *(_QWORD *)v30;
      }
      v28 = v30 - 40;
    }
    v42 = v15;
    v43 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(v28 + 88) + 2032, 16, 3);
    *(_QWORD *)(v19 + 120) = v43;
    v76 = v26;
    v78 = v23;
    *v43 = v23;
    v43[1] = v26;
    v44 = sub_22F24E348(*(_QWORD *)(a1 + 144) + 280, v80, v103);
    v45 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v44);
    v94[0] = "__copy_helper_atomic_property_";
    v95 = 259;
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200);
    v47 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v47, v45, 7, 0xFFFFFFFFLL, v94, v46);
    sub_22E62BF18(*(uint64_t **)(a1 + 144), 0, 0, v47, v44);
    if (sub_22E462B18(v19))
      v19 = v19 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v19) + 96) & 0x80) == 0);
    v75 = v47;
    sub_22E61A8FC(a1, v19, 0, v80, v47, v44, v103, 0, v48, 0);
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v94[0] = 0;
    sub_22EFF69F0((uint64_t)v97, v49, v76, 0, v42, 0, 0, v94, 0);
    v50 = sub_22F10ACF8(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0));
    v51 = sub_22E3CD3D4(v6 + 2032, 24, 3);
    v52 = sub_22F0031D0(v51, v6, (uint64_t)v97, 5, v50, 1, 0, 0, 0, 0);
    v53 = *(unsigned __int8 **)(a2 + 80);
    v100 = v102;
    v102[0] = v52;
    v101 = 0x400000001;
    v54 = *v53;
    v55 = v54 == 119;
    if (v54 == 119)
      v56 = v53;
    else
      v56 = 0;
    v57 = v56 + 48;
    if (!v55)
      v57 = v53 + 40;
    sub_22F246808((uint64_t)&v100, (char *)v57 + 8, (char *)&v57[8 * *((unsigned int *)v53 + 8)]);
    v77 = *((_QWORD *)v53 + 2);
    v58 = *(_DWORD *)v53;
    v74 = (*(_DWORD *)v53 >> 18) & 1;
    v73 = (uint64_t *)v100;
    v59 = (*(_DWORD *)v53 >> 19) & 1;
    v60 = (*(_DWORD *)v53 >> 20) & 1;
    v61 = v101;
    v62 = (*(_DWORD *)v53 >> 21) & 1;
    v63 = (*(_DWORD *)v53 >> 22) & 1;
    v64 = (v58 >> 23) & 7;
    v65 = sub_22E3CD3D4(v6 + 2032, (8 * v101) + 40, 3);
    sub_22F061794((unsigned int *)v65, 118, v5, 0, v77, v74, v73, v61, v59, v60, v62, v63, v64, 0);
    v66 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v94[0] = 0;
    sub_22EFF69F0((uint64_t)v96, v66, v78, 0, v79, 0, 0, v94, 0);
    v88 = 0;
    v87 = 0uLL;
    v89 = 0;
    v91 = 0;
    v92 = 0;
    v90 = 0;
    v93 = 0;
    sub_22E4D79C0(a1, (uint64_t)v96, &v87, 0, (uint64_t)v94);
    v67 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v65 + 8));
    v68 = v94[0];
    v69 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v5, 0);
    v81[0] = v68;
    v81[1] = v69;
    v81[2] = v67;
    v82 = 0;
    v84 = 0;
    v85 = 0;
    v83 = 0;
    v86 = v86 & 0xC0 | 1;
    sub_22E4EF100(a1, v65, (uint64_t)v81);
    sub_22E619DE8(a1, 0);
    v70 = *(uint64_t **)(a1 + 144);
    v71 = sub_22E564DEC(v6);
    sub_22F28A778(v70, v75, v71, 0, 0);
    BitCast = llvm::ConstantExpr::getBitCast();
    v72 = *(_QWORD *)(a1 + 144);
    v99 = v5;
    sub_22F2613A4((uint64_t *)(v72 + 1960), &v99)[1] = BitCast;
    if (v100 != v102)
      free(v100);
    if ((_QWORD *)v103[0] != &v103[2])
      free((void *)v103[0]);
    if (v105 != v107)
      free(v105);
  }
  return BitCast;
}

void sub_22E55E27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[3];
  _OWORD v20[8];
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)&v40 = *(_QWORD *)(v8 + 48);
  if (sub_22F111B38(&v40) == 5)
  {
    if (!a5)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1592) + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 32);
      v10 = sub_22F272828((_QWORD *)a1);
      sub_22F26105C(a1, v9, v10, v8, 0);
      v11 = *(_OWORD *)(a1 + 1752);
      v26 = *(_OWORD *)(a1 + 1736);
      v27 = v11;
      v28 = *(_OWORD *)(a1 + 1768);
      v12 = *(_QWORD *)(v8 + 48);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v12, (uint64_t)v24);
      v19[0] = v26;
      v19[1] = v27;
      v19[2] = v28;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v38[0] = v24[0];
      v38[1] = v24[1];
      v39 = v25;
      LODWORD(v31) = 0;
      *((_QWORD *)&v29 + 1) = 0;
      v30 = 0uLL;
      *(_QWORD *)&v32 = 0;
      *((_QWORD *)&v31 + 1) = 0;
      v33 = 0uLL;
      *(_QWORD *)((char *)&v34 + 4) = 2;
      LODWORD(v29) = 0;
      v35 = 0u;
      v36 = 0u;
      sub_22E3C113C((uint64_t)&v29, v19, v12, 2, v38, v13);
      v22[6] = v35;
      v22[7] = v36;
      v23 = v37;
      v22[2] = v31;
      v22[3] = v32;
      v22[4] = v33;
      v22[5] = v34;
      v22[0] = v29;
      v22[1] = v30;
      v20[6] = v46;
      v20[7] = v47;
      v21 = v48;
      v20[2] = v42;
      v20[3] = v43;
      v20[4] = v44;
      v20[5] = v45;
      v20[0] = v40;
      v20[1] = v41;
      sub_22E550520(a1, (uint64_t)v22, (uint64_t)v20);
      return;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 80);
    if (!v14 || (*(_DWORD *)v14 & 0x3FE) == 0x76 && (*(_BYTE *)(*(_QWORD *)(v14 + 16) + 82) & 0x80) != 0)
    {
      sub_22E55FAFC((__int16 *)v24, *(_QWORD *)(a1 + 144), a3);
      __asm { BR              X10 }
    }
    if (!a5)
    {
      v18 = sub_22F0D8310(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, v14, 0);
      sub_22E5E919C(a1, v18, 0, 0);
      return;
    }
  }
  v15 = *(_QWORD *)(a3 + 56);
  v16 = (_OWORD *)(a1 + 1736);
  if ((*(_BYTE *)(a1 + 1760) & 3) != 0)
    v17 = sub_22F28ABCC(v16, (_QWORD *)a1);
  else
    v17 = *(_QWORD *)v16;
  sub_22E55F768((_QWORD *)a1, v17, v15, a5);
}

void sub_22E55F768(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[4];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58[3];
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[1216];
  void *v66;
  uint64_t v67;
  _BYTE v68[192];
  void *v69;
  uint64_t v70;
  _BYTE v71[16];
  void *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[5] = *MEMORY[0x24BDAC8D0];
  v63 = v65;
  v64 = 0x800000000;
  v66 = v68;
  v67 = 0x100000000;
  v69 = v71;
  v70 = 0x100000000;
  v72 = v74;
  v73 = 0x200000000;
  v74[4] = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v51 = a2;
  *(_QWORD *)&v52 = 0;
  BYTE8(v54) = 0;
  v56 = 0;
  v57 = v7;
  v8 = sub_22E3C187C((uint64_t)&v63, (unint64_t)&v51, 1);
  v9 = (char *)v63 + 152 * v64;
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v8;
  *((_OWORD *)v9 + 1) = v10;
  v11 = *(_QWORD *)(v8 + 144);
  v12 = *(_OWORD *)(v8 + 128);
  v13 = *(_OWORD *)(v8 + 96);
  *((_OWORD *)v9 + 7) = *(_OWORD *)(v8 + 112);
  *((_OWORD *)v9 + 8) = v12;
  *((_QWORD *)v9 + 18) = v11;
  *((_OWORD *)v9 + 6) = v13;
  v14 = *(_OWORD *)(v8 + 80);
  v15 = *(_OWORD *)(v8 + 32);
  v16 = *(_OWORD *)(v8 + 48);
  *((_OWORD *)v9 + 4) = *(_OWORD *)(v8 + 64);
  *((_OWORD *)v9 + 5) = v14;
  *((_OWORD *)v9 + 2) = v15;
  *((_OWORD *)v9 + 3) = v16;
  LODWORD(v64) = v64 + 1;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1[199] + 120) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 32);
  v18 = sub_22F272828(a1);
  sub_22F26105C((uint64_t)a1, v17, v18, a3, 0);
  v50[0] = v52;
  v50[1] = v53;
  v50[2] = v54;
  sub_22E5E0440((uint64_t)a1, (uint64_t)v50, v55, v58);
  v19 = a1[12];
  WORD4(v53) = 257;
  v20 = sub_22E3C1740(a1 + 34, 49, v58[0], v19, (uint64_t)&v51);
  v21 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v51 = v20;
  *(_QWORD *)&v52 = 0;
  BYTE8(v54) = 0;
  v56 = 0;
  v57 = v21;
  v22 = sub_22E3C187C((uint64_t)&v63, (unint64_t)&v51, 1);
  v23 = (char *)v63 + 152 * v64;
  v24 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v22;
  *((_OWORD *)v23 + 1) = v24;
  v25 = *(_QWORD *)(v22 + 144);
  v26 = *(_OWORD *)(v22 + 128);
  v27 = *(_OWORD *)(v22 + 96);
  *((_OWORD *)v23 + 7) = *(_OWORD *)(v22 + 112);
  *((_OWORD *)v23 + 8) = v26;
  *((_QWORD *)v23 + 18) = v25;
  *((_OWORD *)v23 + 6) = v27;
  v28 = *(_OWORD *)(v22 + 80);
  v29 = *(_OWORD *)(v22 + 32);
  v30 = *(_OWORD *)(v22 + 48);
  *((_OWORD *)v23 + 4) = *(_OWORD *)(v22 + 64);
  *((_OWORD *)v23 + 5) = v28;
  *((_OWORD *)v23 + 2) = v29;
  *((_OWORD *)v23 + 3) = v30;
  LODWORD(v64) = v64 + 1;
  v31 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v51 = a4;
  *(_QWORD *)&v52 = 0;
  BYTE8(v54) = 0;
  v56 = 0;
  v57 = v31;
  v32 = sub_22E3C187C((uint64_t)&v63, (unint64_t)&v51, 1);
  v33 = (char *)v63 + 152 * v64;
  v34 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v32;
  *((_OWORD *)v33 + 1) = v34;
  v35 = *(_QWORD *)(v32 + 144);
  v36 = *(_OWORD *)(v32 + 128);
  v37 = *(_OWORD *)(v32 + 96);
  *((_OWORD *)v33 + 7) = *(_OWORD *)(v32 + 112);
  *((_OWORD *)v33 + 8) = v36;
  *((_QWORD *)v33 + 18) = v35;
  *((_OWORD *)v33 + 6) = v37;
  v38 = *(_OWORD *)(v32 + 80);
  v39 = *(_OWORD *)(v32 + 32);
  v40 = *(_OWORD *)(v32 + 48);
  *((_OWORD *)v33 + 4) = *(_OWORD *)(v32 + 64);
  *((_OWORD *)v33 + 5) = v38;
  *((_OWORD *)v33 + 2) = v39;
  *((_OWORD *)v33 + 3) = v40;
  LODWORD(v64) = v64 + 1;
  v41 = a1[18];
  v42 = *(_QWORD *)(v41 + 784);
  if (!v42)
  {
    sub_22F298C2C((_QWORD *)a1[18]);
    v42 = *(_QWORD *)(v41 + 784);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 240))(v42);
  *(_QWORD *)&v54 = 0;
  v52 = 0uLL;
  v51 = v43;
  DWORD2(v53) = 0;
  LODWORD(v53) = 0;
  v49 = sub_22F24E200(a1[18] + 280, *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16392), &v63, v44, v45, v46, v47, v48);
  memset(v58, 0, sizeof(v58));
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  sub_22E47A004((unint64_t)a1, v49, (uint64_t)&v51, (uint64_t)v58, (uint64_t)&v63, 0, 0, 0, (uint64_t)v50, 0);
  if (v72 != v74)
    free(v72);
  if (v69 != v71)
    free(v69);
  if (v66 != v68)
    free(v66);
  if (v63 != v65)
    free(v63);
}

__int16 *sub_22E55FAFC(__int16 *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;

  *((_QWORD *)a1 + 1) = 0;
  v6 = a1 + 4;
  *((_QWORD *)a1 + 2) = 0;
  v7 = *(_QWORD *)(a3 + 48);
  v8 = sub_22F274FC4(v7);
  v9 = *a1 & 0xFDFF | ((v8 == 2) << 9);
  *a1 = v9;
  *a1 = *(_WORD *)(v7 + 72) & 0x100 | v9 & 0xFAFF;
  v10 = *(_QWORD *)(a3 + 56);
  v11 = *(_QWORD *)(v10 + 48);
  sub_22EF5CCD0(*(_QWORD *)(a2 + 144), *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v22);
  *v6 = v22;
  v12 = *a1;
  if ((*a1 & 0x200) != 0)
  {
    if ((*a1 & 0x100) != 0)
      v16 = 1;
    else
      v16 = 2;
    goto LABEL_15;
  }
  if (v8 == 1)
  {
    v13 = *(_QWORD *)(a2 + 152);
    if ((*(_DWORD *)(v13 + 244) & 0x60000) != 0x20000)
    {
      if ((*a1 & 0x100) != 0 || (*(_WORD *)(v13 + 148) & 2) == 0)
      {
        if ((*a1 & 0x100) != 0)
          v15 = v12 & 0xFF00 | 1;
        else
          v15 = v12 & 0xFF00 | 2;
        goto LABEL_16;
      }
      v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v18 & 8) != 0 && (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x80)
        v16 = 4;
      else
        v16 = 2;
LABEL_15:
      v15 = v16 | v12 & 0xFF00;
      goto LABEL_16;
    }
  }
  if ((*a1 & 0x100) == 0)
    goto LABEL_11;
  if ((*(_BYTE *)(v10 + 68) & 1) != 0)
    goto LABEL_11;
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0 && (*(_WORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    goto LABEL_11;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 152) + 246) & 6) != 0)
  {
    if (sub_22EF6E3E4(*(_QWORD *)(a2 + 144), v11))
    {
      v12 = *a1;
LABEL_11:
      v15 = v12 & 0xFF00 | 4;
      goto LABEL_16;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 152) + 246) & 6) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
      {
        if (*(_BYTE *)(v19 + 16) == 45)
          *a1 = (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 72) >> 15) & 0x400 | *a1 & 0xFBFF;
      }
    }
  }
  v20 = *a1;
  if ((*a1 & 0x400) != 0
    || (v21 = *(_QWORD *)v6, (*(_QWORD *)v6 & (*(_QWORD *)v6 - 1)) != 0)
    || *((_QWORD *)a1 + 2) < v21)
  {
    v15 = v20 & 0xFF00 | 3;
  }
  else
  {
    v15 = v20 & 0xFF00;
    if (v21 > *(unsigned __int8 *)(a2 + 130))
      v15 |= 3u;
  }
LABEL_16:
  *a1 = v15;
  return a1;
}

void sub_22E55FD2C(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  int v27;
  int v28;
  uint64_t IntNTy;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t True;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t False;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  llvm::LLVMContext *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  llvm::LLVMContext *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  unint64_t v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  int v262;
  int v264;
  char *v265;
  uint64_t v266;
  __int128 *v267;
  int *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD v278[3];
  _OWORD v279[3];
  _OWORD v280[3];
  _OWORD v281[3];
  _OWORD v282[3];
  _OWORD v283[3];
  __int128 v284[3];
  __int128 v285[3];
  _OWORD v286[8];
  uint64_t v287;
  _OWORD v288[8];
  uint64_t v289;
  _OWORD v290[2];
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  _BYTE v295[64];
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  __int16 v301;
  unint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  char v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  _BYTE v310[64];
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  _BYTE v318[192];
  void *v319;
  uint64_t v320;
  _BYTE v321[16];
  void *v322;
  uint64_t v323;
  _BYTE v324[32];
  uint64_t v325;
  uint64_t v326;

  v326 = *MEMORY[0x24BDAC8D0];
  v8 = a3[9];
  v9 = a3[7];
  v10 = *(_QWORD *)(a3[6] + 56);
  *(_QWORD *)v310 = *(_QWORD *)(v9 + 48);
  if (sub_22F111B38(v310) == 5)
  {
    v34 = **(_QWORD **)(v8 + 96);
    v278[0] = v34;
    if (a4)
    {
      sub_22E56140C((_QWORD *)a1, v8, v9, a4);
    }
    else
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1592) + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v36 = sub_22F272828((_QWORD *)a1);
      sub_22F26105C(a1, v35, v36, v9, 0);
      *(_QWORD *)&v303 = v34;
      *(_QWORD *)v295 = 0;
      v37 = sub_22E3CED3C((uint64_t *)(a1 + 2904), &v303, v295);
      v38 = *(_QWORD *)v295;
      if (!v37)
        v38 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
      v292 = *(_OWORD *)(v38 + 8);
      v293 = *(_OWORD *)(v38 + 24);
      v294 = *(_OWORD *)(v38 + 40);
      v39 = *(_QWORD *)(v9 + 48);
      sub_22E6281E0(*(_QWORD **)(a1 + 144), v39, (uint64_t)v290);
      v303 = v292;
      v304 = v293;
      v305 = v294;
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v307 = v290[0];
      v308 = v290[1];
      v309 = v291;
      memset(&v295[8], 0, 28);
      *(_QWORD *)&v295[48] = 0;
      *(_QWORD *)&v295[40] = 0;
      v296 = 0uLL;
      *(_QWORD *)((char *)&v297 + 4) = 2;
      *(_DWORD *)v295 = 0;
      v298 = 0u;
      v299 = 0u;
      sub_22E3C113C((uint64_t)v295, &v303, v39, 2, &v307, v40);
      v288[6] = v313;
      v288[7] = v314;
      v289 = v315;
      v288[2] = *(_OWORD *)&v310[32];
      v288[3] = *(_OWORD *)&v310[48];
      v288[4] = v311;
      v288[5] = v312;
      v288[0] = *(_OWORD *)v310;
      v288[1] = *(_OWORD *)&v310[16];
      v286[6] = v298;
      v286[7] = v299;
      v287 = v300;
      v286[2] = *(_OWORD *)&v295[32];
      v286[3] = *(_OWORD *)&v295[48];
      v286[4] = v296;
      v286[5] = v297;
      v286[0] = *(_OWORD *)v295;
      v286[1] = *(_OWORD *)&v295[16];
      sub_22E551798(a1, (uint64_t)v288, (uint64_t)v286);
    }
    v41 = sub_22F25B470((uint64_t *)(a1 + 2928), v278);
    sub_22F25343C((_QWORD *)a1, (llvm::LLVMContext *)v41[1], *(_QWORD *)(a1 + 1840));
    return;
  }
  v11 = (unsigned __int8 *)a3[11];
  if ((sub_22E5618D4(v11) & 1) == 0)
  {
    if (a4)
      sub_22E56140C((_QWORD *)a1, v8, v9, a4);
    else
      sub_22E5E5158(a1, v11, 0, 0);
    return;
  }
  sub_22E55FAFC((__int16 *)v290, *(_QWORD *)(a1 + 144), (uint64_t)a3);
  if (LOBYTE(v290[0]) - 1 < 2)
  {
    v12 = *(_QWORD *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v12 & 8) != 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) != 0)
    {
      v13 = *(_QWORD *)(a1 + 144);
      v14 = "Obj-C setter requiring pointer authentication";
LABEL_14:
      sub_22E6285D0(v13, (uint64_t)a3, v14);
      return;
    }
    v15 = *(_QWORD **)(a1 + 144);
    v16 = v15[19];
    if ((*(_BYTE *)(v16 + 246) & 6) != 0
      || (v116 = sub_22F27501C((int *)(v16 + 400)), v15 = *(_QWORD **)(a1 + 144), !v116))
    {
      v17 = v15[98];
      if (!v17)
      {
        sub_22F298C2C(v15);
        v17 = v15[98];
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 200))(v17);
      if (!v18)
      {
        v13 = *(_QWORD *)(a1 + 144);
        v14 = "Obj-C setter requiring atomic copy";
        goto LABEL_14;
      }
      v119 = v18;
      v277 = 0;
    }
    else
    {
      v117 = v15[98];
      if (!v117)
      {
        sub_22F298C2C(*(_QWORD **)(a1 + 144));
        v117 = v15[98];
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v117 + 208))(v117, HIBYTE(LOWORD(v290[0])) & 1, (LOWORD(v290[0]) >> 9) & 1);
      if (!v118)
      {
        v13 = *(_QWORD *)(a1 + 144);
        v14 = "Obj-C optimized setter - NYI";
        goto LABEL_14;
      }
      v277 = v118;
      v119 = 0;
    }
    *(_QWORD *)v295 = *(_QWORD *)(v8 + 128);
    *(_QWORD *)v310 = 0;
    v120 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v295, v310);
    v121 = *(_QWORD *)v310;
    if (!v120)
      v121 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v122 = *(_OWORD *)(v121 + 8);
    v123 = *(_OWORD *)(v121 + 40);
    v280[1] = *(_OWORD *)(v121 + 24);
    v280[2] = v123;
    v280[0] = v122;
    *(_WORD *)&v310[32] = 257;
    v276 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v280, (uint64_t)v310);
    v124 = sub_22F272828((_QWORD *)a1);
    v125 = *(_QWORD *)(a1 + 96);
    *(_WORD *)&v310[32] = 257;
    v126 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v124, v125, (uint64_t)v310);
    v127 = sub_22F261000(a1, *(_QWORD *)(a2 + 88), v9);
    *(_QWORD *)v295 = **(_QWORD **)(v8 + 96);
    *(_QWORD *)v310 = 0;
    v128 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v295, v310);
    v129 = *(_QWORD *)v310;
    if (!v128)
      v129 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
    v130 = *(_OWORD *)(v129 + 8);
    v131 = *(_OWORD *)(v129 + 40);
    v279[1] = *(_OWORD *)(v129 + 24);
    v279[2] = v131;
    v279[0] = v130;
    v132 = sub_22E3C43AC((uint64_t *)(a1 + 272), (uint64_t)v279, "arg");
    v133 = *(_QWORD *)(a1 + 96);
    *(_WORD *)&v310[32] = 257;
    v134 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v132, v133, (uint64_t)v310);
    *(_QWORD *)v310 = &v310[16];
    *(_QWORD *)&v310[8] = 0x800000000;
    v316 = v318;
    v317 = 0x100000000;
    v319 = v321;
    v320 = 0x100000000;
    v322 = v324;
    v323 = 0x200000000;
    v325 = 0;
    v135 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v136 = sub_22F36E1B8(v135);
    v137 = *(_QWORD *)(v136 + 48);
    if (v137)
      v138 = v137 & 0xFFFFFFFFFFFFFFF0;
    else
      v138 = sub_22EF6462C(v135, v136);
    *(_QWORD *)v295 = v126;
    *(_QWORD *)&v295[8] = 0;
    v295[48] = 0;
    v301 = 0;
    v302 = v138;
    v163 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
    v164 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
    v165 = *(_OWORD *)(v163 + 16);
    *(_OWORD *)v164 = *(_OWORD *)v163;
    *(_OWORD *)(v164 + 16) = v165;
    v166 = *(_QWORD *)(v163 + 144);
    v167 = *(_OWORD *)(v163 + 128);
    v168 = *(_OWORD *)(v163 + 96);
    *(_OWORD *)(v164 + 112) = *(_OWORD *)(v163 + 112);
    *(_OWORD *)(v164 + 128) = v167;
    *(_QWORD *)(v164 + 144) = v166;
    *(_OWORD *)(v164 + 96) = v168;
    v169 = *(_OWORD *)(v163 + 80);
    v170 = *(_OWORD *)(v163 + 32);
    v171 = *(_OWORD *)(v163 + 48);
    *(_OWORD *)(v164 + 64) = *(_OWORD *)(v163 + 64);
    *(_OWORD *)(v164 + 80) = v169;
    *(_OWORD *)(v164 + 32) = v170;
    *(_OWORD *)(v164 + 48) = v171;
    ++*(_DWORD *)&v310[8];
    v172 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v173 = sub_22F36E228(v172);
    v174 = *(_QWORD *)(v173 + 48);
    if (v174)
      v175 = v174 & 0xFFFFFFFFFFFFFFF0;
    else
      v175 = sub_22EF6462C(v172, v173);
    *(_QWORD *)v295 = v276;
    *(_QWORD *)&v295[8] = 0;
    v295[48] = 0;
    v301 = 0;
    v302 = v175;
    v176 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
    v177 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
    v178 = *(_OWORD *)(v176 + 16);
    *(_OWORD *)v177 = *(_OWORD *)v176;
    *(_OWORD *)(v177 + 16) = v178;
    v179 = *(_QWORD *)(v176 + 144);
    v180 = *(_OWORD *)(v176 + 128);
    v181 = *(_OWORD *)(v176 + 96);
    *(_OWORD *)(v177 + 112) = *(_OWORD *)(v176 + 112);
    *(_OWORD *)(v177 + 128) = v180;
    *(_QWORD *)(v177 + 144) = v179;
    *(_OWORD *)(v177 + 96) = v181;
    v182 = *(_OWORD *)(v176 + 80);
    v183 = *(_OWORD *)(v176 + 32);
    v184 = *(_OWORD *)(v176 + 48);
    *(_OWORD *)(v177 + 64) = *(_OWORD *)(v176 + 64);
    *(_OWORD *)(v177 + 80) = v182;
    *(_OWORD *)(v177 + 32) = v183;
    *(_OWORD *)(v177 + 48) = v184;
    ++*(_DWORD *)&v310[8];
    v185 = *(_QWORD *)(a1 + 144);
    v186 = *(_QWORD *)(v185 + 144);
    if (v277)
    {
      v201 = sub_22F36E1B8(*(_QWORD *)(v185 + 144));
      v202 = *(_QWORD *)(v201 + 48);
      if (v202)
        v203 = v202 & 0xFFFFFFFFFFFFFFF0;
      else
        v203 = sub_22EF6462C(v186, v201);
      *(_QWORD *)v295 = v134;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v203;
      v242 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v243 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v244 = *(_OWORD *)(v242 + 16);
      *(_OWORD *)v243 = *(_OWORD *)v242;
      *(_OWORD *)(v243 + 16) = v244;
      v245 = *(_QWORD *)(v242 + 144);
      v246 = *(_OWORD *)(v242 + 128);
      v247 = *(_OWORD *)(v242 + 96);
      *(_OWORD *)(v243 + 112) = *(_OWORD *)(v242 + 112);
      *(_OWORD *)(v243 + 128) = v246;
      *(_QWORD *)(v243 + 144) = v245;
      *(_OWORD *)(v243 + 96) = v247;
      v248 = *(_OWORD *)(v242 + 80);
      v249 = *(_OWORD *)(v242 + 32);
      v250 = *(_OWORD *)(v242 + 48);
      *(_OWORD *)(v243 + 64) = *(_OWORD *)(v242 + 64);
      *(_OWORD *)(v243 + 80) = v248;
      *(_OWORD *)(v243 + 32) = v249;
      *(_OWORD *)(v243 + 48) = v250;
      ++*(_DWORD *)&v310[8];
      v251 = sub_22EF5B0AC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15088) - 24)+ 120));
      *(_QWORD *)v295 = v127;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v251;
      v252 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v253 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v254 = *(_OWORD *)(v252 + 16);
      *(_OWORD *)v253 = *(_OWORD *)v252;
      *(_OWORD *)(v253 + 16) = v254;
      v255 = *(_QWORD *)(v252 + 144);
      v256 = *(_OWORD *)(v252 + 128);
      v257 = *(_OWORD *)(v252 + 96);
      *(_OWORD *)(v253 + 112) = *(_OWORD *)(v252 + 112);
      *(_OWORD *)(v253 + 128) = v256;
      *(_QWORD *)(v253 + 144) = v255;
      *(_OWORD *)(v253 + 96) = v257;
      v258 = *(_OWORD *)(v252 + 80);
      v259 = *(_OWORD *)(v252 + 32);
      v260 = *(_OWORD *)(v252 + 48);
      *(_OWORD *)(v253 + 64) = *(_OWORD *)(v252 + 64);
      *(_OWORD *)(v253 + 80) = v258;
      *(_OWORD *)(v253 + 32) = v259;
      *(_OWORD *)(v253 + 48) = v260;
      ++*(_DWORD *)&v310[8];
      *(_QWORD *)&v295[40] = 0;
      *(_QWORD *)&v295[16] = 0;
      *(_QWORD *)v295 = v277;
    }
    else
    {
      v187 = sub_22EF5B0AC(v186, *(_DWORD *)(*(_QWORD *)(v186 + 15088) + *(_QWORD *)(**(_QWORD **)(v186 + 15088) - 24) + 120));
      *(_QWORD *)v295 = v127;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v187;
      v188 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v189 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v190 = *(_OWORD *)(v188 + 16);
      *(_OWORD *)v189 = *(_OWORD *)v188;
      *(_OWORD *)(v189 + 16) = v190;
      v191 = *(_QWORD *)(v188 + 144);
      v192 = *(_OWORD *)(v188 + 128);
      v193 = *(_OWORD *)(v188 + 96);
      *(_OWORD *)(v189 + 112) = *(_OWORD *)(v188 + 112);
      *(_OWORD *)(v189 + 128) = v192;
      *(_QWORD *)(v189 + 144) = v191;
      *(_OWORD *)(v189 + 96) = v193;
      v194 = *(_OWORD *)(v188 + 80);
      v195 = *(_OWORD *)(v188 + 32);
      v196 = *(_OWORD *)(v188 + 48);
      *(_OWORD *)(v189 + 64) = *(_OWORD *)(v188 + 64);
      *(_OWORD *)(v189 + 80) = v194;
      *(_OWORD *)(v189 + 32) = v195;
      *(_OWORD *)(v189 + 48) = v196;
      ++*(_DWORD *)&v310[8];
      v197 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
      v198 = sub_22F36E1B8(v197);
      v199 = *(_QWORD *)(v198 + 48);
      if (v199)
        v200 = v199 & 0xFFFFFFFFFFFFFFF0;
      else
        v200 = sub_22EF6462C(v197, v198);
      *(_QWORD *)v295 = v134;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v200;
      v204 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v205 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v206 = *(_OWORD *)(v204 + 16);
      *(_OWORD *)v205 = *(_OWORD *)v204;
      *(_OWORD *)(v205 + 16) = v206;
      v207 = *(_QWORD *)(v204 + 144);
      v208 = *(_OWORD *)(v204 + 128);
      v209 = *(_OWORD *)(v204 + 96);
      *(_OWORD *)(v205 + 112) = *(_OWORD *)(v204 + 112);
      *(_OWORD *)(v205 + 128) = v208;
      *(_QWORD *)(v205 + 144) = v207;
      *(_OWORD *)(v205 + 96) = v209;
      v210 = *(_OWORD *)(v204 + 80);
      v211 = *(_OWORD *)(v204 + 32);
      v212 = *(_OWORD *)(v204 + 48);
      *(_OWORD *)(v205 + 64) = *(_OWORD *)(v204 + 64);
      *(_OWORD *)(v205 + 80) = v210;
      *(_OWORD *)(v205 + 32) = v211;
      *(_OWORD *)(v205 + 48) = v212;
      ++*(_DWORD *)&v310[8];
      llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v213);
      v214 = llvm::ConstantInt::get();
      v215 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16400);
      *(_QWORD *)v295 = v214;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v215;
      v216 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v217 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v218 = *(_OWORD *)(v216 + 16);
      *(_OWORD *)v217 = *(_OWORD *)v216;
      *(_OWORD *)(v217 + 16) = v218;
      v219 = *(_QWORD *)(v216 + 144);
      v220 = *(_OWORD *)(v216 + 128);
      v221 = *(_OWORD *)(v216 + 96);
      *(_OWORD *)(v217 + 112) = *(_OWORD *)(v216 + 112);
      *(_OWORD *)(v217 + 128) = v220;
      *(_QWORD *)(v217 + 144) = v219;
      *(_OWORD *)(v217 + 96) = v221;
      v222 = *(_OWORD *)(v216 + 80);
      v223 = *(_OWORD *)(v216 + 32);
      v224 = *(_OWORD *)(v216 + 48);
      *(_OWORD *)(v217 + 64) = *(_OWORD *)(v216 + 64);
      *(_OWORD *)(v217 + 80) = v222;
      *(_OWORD *)(v217 + 32) = v223;
      *(_OWORD *)(v217 + 48) = v224;
      ++*(_DWORD *)&v310[8];
      llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), v225);
      v226 = llvm::ConstantInt::get();
      v227 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16400);
      *(_QWORD *)v295 = v226;
      *(_QWORD *)&v295[8] = 0;
      v295[48] = 0;
      v301 = 0;
      v302 = v227;
      v228 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
      v234 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
      v235 = *(_OWORD *)(v228 + 16);
      *(_OWORD *)v234 = *(_OWORD *)v228;
      *(_OWORD *)(v234 + 16) = v235;
      v236 = *(_QWORD *)(v228 + 144);
      v237 = *(_OWORD *)(v228 + 128);
      v238 = *(_OWORD *)(v228 + 96);
      *(_OWORD *)(v234 + 112) = *(_OWORD *)(v228 + 112);
      *(_OWORD *)(v234 + 128) = v237;
      *(_QWORD *)(v234 + 144) = v236;
      *(_OWORD *)(v234 + 96) = v238;
      v239 = *(_OWORD *)(v228 + 80);
      v240 = *(_OWORD *)(v228 + 32);
      v241 = *(_OWORD *)(v228 + 48);
      *(_OWORD *)(v234 + 64) = *(_OWORD *)(v228 + 64);
      *(_OWORD *)(v234 + 80) = v239;
      *(_OWORD *)(v234 + 32) = v240;
      *(_OWORD *)(v234 + 48) = v241;
      ++*(_DWORD *)&v310[8];
      *(_QWORD *)&v295[40] = 0;
      *(_QWORD *)&v295[16] = 0;
      *(_QWORD *)v295 = v119;
    }
    *(_QWORD *)&v295[8] = 0;
    *(_DWORD *)&v295[32] = 0;
    *(_DWORD *)&v295[24] = 0;
    v261 = sub_22F24E200(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), v310, v229, v230, v231, v232, v233);
    v303 = 0uLL;
    DWORD2(v304) = 0;
    *(_QWORD *)&v304 = 0;
    v305 = 0uLL;
    v306 = 0;
    sub_22E47A004(a1, v261, (uint64_t)v295, (uint64_t)&v303, (uint64_t)v310, 0, 0, 0, (uint64_t)&v292, 0);
    if (v322 != v324)
      free(v322);
    if (v319 != v321)
      free(v319);
    if (v316 != v318)
      free(v316);
    v115 = *(void **)v310;
    if (*(_BYTE **)v310 != &v310[16])
      goto LABEL_98;
    return;
  }
  if (!LOBYTE(v290[0]))
  {
    if (*((_QWORD *)&v290[0] + 1))
    {
      *(_QWORD *)v295 = **(_QWORD **)(v8 + 96);
      *(_QWORD *)v310 = 0;
      v19 = sub_22E3CED3C((uint64_t *)(a1 + 2904), v295, v310);
      v20 = *(_QWORD *)v310;
      if (!v19)
        v20 = *(_QWORD *)(a1 + 2904) + 56 * *(unsigned int *)(a1 + 2920);
      v21 = *(_OWORD *)(v20 + 8);
      v22 = *(_OWORD *)(v20 + 40);
      *(_OWORD *)&v295[16] = *(_OWORD *)(v20 + 24);
      *(_OWORD *)&v295[32] = v22;
      *(_OWORD *)v295 = v21;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1592) + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v24 = sub_22F272828((_QWORD *)a1);
      sub_22F26105C(a1, v23, v24, v9, 0);
      v303 = *(_OWORD *)&v310[8];
      v304 = *(_OWORD *)&v310[24];
      v305 = *(_OWORD *)&v310[40];
      v25 = *(_QWORD *)(a1 + 144);
      v26 = *(llvm::Type **)(v25 + 232);
      v27 = DWORD2(v290[0]);
      v28 = sub_22EF5CDF0(*(_QWORD *)(v25 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      IntNTy = llvm::Type::getIntNTy(v26, (llvm::LLVMContext *)(v28 * v27));
      v285[0] = *(_OWORD *)v295;
      v285[1] = *(_OWORD *)&v295[16];
      v285[2] = *(_OWORD *)&v295[32];
      LOWORD(v294) = 257;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v285, IntNTy, (uint64_t)&v292, (uint64_t)v295);
      v284[0] = v303;
      v284[1] = v304;
      v284[2] = v305;
      LOWORD(v294) = 257;
      sub_22E3BEE6C((uint64_t *)(a1 + 272), v284, IntNTy, (uint64_t)&v292, (uint64_t)&v303);
      v283[0] = *(_OWORD *)v295;
      v283[1] = *(_OWORD *)&v295[16];
      v283[2] = *(_OWORD *)&v295[32];
      LOWORD(v294) = 257;
      v30 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v283, (uint64_t)&v292);
      v31 = *(_QWORD *)((*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v31 & 8) != 0)
      {
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        if ((v32 & 0xC00000000) != 0)
        {
          v270 = HIDWORD(v32);
          *(_QWORD *)&v292 = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), v10);
          *((_QWORD *)&v292 + 1) = v271;
          v282[0] = v303;
          v282[1] = v304;
          v282[2] = v305;
          *(_QWORD *)&v307 = sub_22F289E38(a1, v270, (uint64_t)v282);
          *((_QWORD *)&v307 + 1) = v272;
          v30 = sub_22E5DF144((_QWORD *)a1, v30, *(_QWORD *)(v9 + 48), (uint64_t)&v292, (llvm::LLVMContext *)&v307, 0);
        }
      }
      v281[0] = v303;
      v281[1] = v304;
      v281[2] = v305;
      v33 = sub_22E3BEDDC(a1 + 272, (llvm::Type **)v30, (uint64_t)v281);
      *(_WORD *)(v33 + 18) = *(_WORD *)(v33 + 18) & 0xFC7F | 0x80;
      *(_BYTE *)(v33 + 60) = 1;
    }
    return;
  }
  if (LOBYTE(v290[0]) != 3)
  {
    v139 = *(_QWORD *)(v8 + 120);
    v140 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v141 = *(_QWORD *)(v139 + 48);
    *(_QWORD *)v310 = 0;
    sub_22EFF69F0((uint64_t)v295, v140, v139, 0, v141, 1, 0, v310, 0);
    v142 = *(_QWORD *)(v139 + 48);
    LOBYTE(v292) = -103;
    if (byte_255E04EB3)
    {
      v143 = sub_22F0D3748(153);
      ++*((_DWORD *)v143 + 2);
    }
    *((_QWORD *)&v292 + 1) = v142;
    *(_QWORD *)&v293 = v295;
    *(_QWORD *)&v292 = v292 & 0xF80000FF | 0x100000;
    v144 = *(_QWORD *)(v9 + 48);
    v145 = *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0);
    if (!v145 || (v146 = *(_DWORD *)(v145 + 16), (v146 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_62;
      v145 = sub_22F10CF48(v145);
      if (!v145)
        goto LABEL_62;
      v146 = *(_DWORD *)(v145 + 16);
    }
    if ((v146 & 0x100000) != 0)
    {
      do
      {
        v145 = *(_QWORD *)(*(_QWORD *)(v145 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v145)
        {
          v274 = *(_DWORD *)(v145 + 16);
          if ((v274 & 0xFE) == 0x28)
            continue;
        }
        v145 = sub_22F10CF48(v145);
        v274 = *(_DWORD *)(v145 + 16);
      }
      while ((v274 & 0x100000) != 0);
    }
    v144 = *(_QWORD *)(v145 + 32);
LABEL_62:
    sub_22F2750A4((uint64_t)v310, v9, v144, 0, 0, (uint64_t)&v292, 1, 1);
    v147 = *(uint64_t **)(v8 + 96);
    v148 = *v147;
    v149 = *(_QWORD *)(*v147 + 48);
    v150 = v149 & 0xFFFFFFFFFFFFFFF0;
    v151 = *(_QWORD *)(v149 & 0xFFFFFFFFFFFFFFF0);
    if (!v151 || (v152 = *(_DWORD *)(v151 + 16), (v152 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v151 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v151 = sub_22F10CF48(v151)) == 0)
      {
LABEL_65:
        v153 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        *(_QWORD *)&v307 = 0;
        sub_22EFF69F0((uint64_t)&v303, v153, v148, 0, v149, 1, 0, &v307, 0);
        v154 = *(_QWORD *)v150;
        if ((*(_BYTE *)(*(_QWORD *)v150 + 8) & 0xF) != 0)
          v154 = (unint64_t)sub_22F10D2BC(v149);
        v155 = (_QWORD *)(v154 & 0xFFFFFFFFFFFFFFF0);
        LOBYTE(v307) = -103;
        if (byte_255E04EB3)
        {
          v156 = sub_22F0D3748(153);
          ++*((_DWORD *)v156 + 2);
        }
        *((_QWORD *)&v307 + 1) = v155;
        *(_QWORD *)&v308 = &v303;
        *(_QWORD *)&v307 = v307 & 0xF80000FF | 0x100000;
        v157 = *(_QWORD *)&v310[8];
        v158 = *(_QWORD *)&v310[8] & 0xFFFFFFFFFFFFFFF0;
        v159 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v310[8] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16);
        v160 = 0x40000;
        if (v159 == 10)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v155 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
            v160 = 0x40000;
          else
            v160 = 11796480;
        }
        else if (v159 != 39)
        {
          if (v159 == 32)
          {
            v161 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v155 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v161 == 10)
              v162 = 11534336;
            else
              v162 = 11272192;
            if (v161 == 32)
              v160 = 0x40000;
            else
              v160 = v162;
          }
          else
          {
            v262 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v155 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v159 != 6 && v262 == 6)
            {
              v160 = 15990784;
            }
            else
            {
              if (v159 == 6)
                v264 = 16252928;
              else
                v264 = 1310720;
              if (v262 == 6)
                v160 = 1310720;
              else
                v160 = v264;
            }
          }
        }
        LOBYTE(v278[0]) = -103;
        if (byte_255E04EB3)
        {
          v265 = sub_22F0D3748(153);
          ++*((_DWORD *)v265 + 2);
          v266 = *(_QWORD *)&v310[8];
          v158 = *(_QWORD *)&v310[8] & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v266 = *(_QWORD *)&v310[8];
        }
        v278[1] = v157;
        v278[2] = &v307;
        v278[0] = v278[0] & 0xF80000FF | (unint64_t)v160;
        if (*(_QWORD *)(*(_QWORD *)(v158 + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v155[1] & 0xFFFFFFFFFFFFFFF0))
          v267 = &v307;
        else
          v267 = (__int128 *)v278;
        v268 = (int *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 2032, 32, 3);
        sub_22F002E24(v268, v269, v310, v267, 21, v266, 0, 0, 0, 0);
        sub_22E5E5158(a1, (unsigned __int8 *)v268, 0, 0);
        return;
      }
      v152 = *(_DWORD *)(v151 + 16);
    }
    if ((v152 & 0x100000) != 0)
    {
      do
      {
        v151 = *(_QWORD *)(*(_QWORD *)(v151 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v151)
        {
          v275 = *(_DWORD *)(v151 + 16);
          if ((v275 & 0xFE) == 0x28)
            continue;
        }
        v151 = sub_22F10CF48(v151);
        v275 = *(_DWORD *)(v151 + 16);
      }
      while ((v275 & 0x100000) != 0);
    }
    v149 = *(_QWORD *)(v151 + 32);
    v150 = v149 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_65;
  }
  *(_QWORD *)v310 = &v310[16];
  *(_QWORD *)&v310[8] = 0x800000000;
  v316 = v318;
  v317 = 0x100000000;
  v319 = v321;
  v320 = 0x100000000;
  v322 = v324;
  v323 = 0x200000000;
  v325 = 0;
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1592) + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 32);
  v43 = sub_22F272828((_QWORD *)a1);
  sub_22F26105C(a1, v42, v43, v9, 0);
  v292 = *(_OWORD *)&v295[8];
  v293 = *(_OWORD *)&v295[24];
  v294 = *(_OWORD *)&v295[40];
  sub_22E5E0440(a1, (uint64_t)&v292, v296, &v303);
  v44 = *(_QWORD *)(a1 + 96);
  *(_WORD *)&v295[32] = 257;
  v45 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v303, v44, (uint64_t)v295);
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
  *(_QWORD *)v295 = v45;
  *(_QWORD *)&v295[8] = 0;
  v295[48] = 0;
  v301 = 0;
  v302 = v46;
  v47 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
  v48 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
  v49 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v47;
  *(_OWORD *)(v48 + 16) = v49;
  v50 = *(_QWORD *)(v47 + 144);
  v51 = *(_OWORD *)(v47 + 128);
  v52 = *(_OWORD *)(v47 + 96);
  *(_OWORD *)(v48 + 112) = *(_OWORD *)(v47 + 112);
  *(_OWORD *)(v48 + 128) = v51;
  *(_QWORD *)(v48 + 144) = v50;
  *(_OWORD *)(v48 + 96) = v52;
  v53 = *(_OWORD *)(v47 + 80);
  v54 = *(_OWORD *)(v47 + 32);
  v55 = *(_OWORD *)(v47 + 48);
  *(_OWORD *)(v48 + 64) = *(_OWORD *)(v47 + 64);
  *(_OWORD *)(v48 + 80) = v53;
  *(_OWORD *)(v48 + 32) = v54;
  *(_OWORD *)(v48 + 48) = v55;
  ++*(_DWORD *)&v310[8];
  v56 = **(_QWORD **)(v8 + 96);
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v58 = *(_QWORD *)(v56 + 48);
  v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
  if (!v59 || (v60 = *(_DWORD *)(v59 + 16), (v60 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_35;
    v59 = sub_22F10CF48(v59);
    if (!v59)
      goto LABEL_35;
    v60 = *(_DWORD *)(v59 + 16);
  }
  if ((v60 & 0x100000) != 0)
  {
    do
    {
      v59 = *(_QWORD *)(*(_QWORD *)(v59 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v59)
      {
        v273 = *(_DWORD *)(v59 + 16);
        if ((v273 & 0xFE) == 0x28)
          continue;
      }
      v59 = sub_22F10CF48(v59);
      v273 = *(_DWORD *)(v59 + 16);
    }
    while ((v273 & 0x100000) != 0);
  }
  v58 = *(_QWORD *)(v59 + 32);
LABEL_35:
  *(_QWORD *)v295 = 0;
  sub_22EFF69F0((uint64_t)&v307, v57, v56, 0, v58, 1, 0, v295, 0);
  sub_22E4D8D7C(a1, (unsigned int *)&v307, (uint64_t)v295);
  v292 = *(_OWORD *)&v295[8];
  v293 = *(_OWORD *)&v295[24];
  v294 = *(_OWORD *)&v295[40];
  sub_22E5E0440(a1, (uint64_t)&v292, v296, &v303);
  v61 = *(_QWORD *)(a1 + 96);
  *(_WORD *)&v295[32] = 257;
  v62 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v303, v61, (uint64_t)v295);
  v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
  *(_QWORD *)v295 = v62;
  *(_QWORD *)&v295[8] = 0;
  v295[48] = 0;
  v301 = 0;
  v302 = v63;
  v64 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
  v65 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
  v66 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v65 = *(_OWORD *)v64;
  *(_OWORD *)(v65 + 16) = v66;
  v67 = *(_QWORD *)(v64 + 144);
  v68 = *(_OWORD *)(v64 + 128);
  v69 = *(_OWORD *)(v64 + 96);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v64 + 112);
  *(_OWORD *)(v65 + 128) = v68;
  *(_QWORD *)(v65 + 144) = v67;
  *(_OWORD *)(v65 + 96) = v69;
  v70 = *(_OWORD *)(v64 + 80);
  v71 = *(_OWORD *)(v64 + 32);
  v72 = *(_OWORD *)(v64 + 48);
  *(_OWORD *)(v65 + 64) = *(_OWORD *)(v64 + 64);
  *(_OWORD *)(v65 + 80) = v70;
  *(_OWORD *)(v65 + 32) = v71;
  *(_OWORD *)(v65 + 48) = v72;
  ++*(_DWORD *)&v310[8];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v295);
  v73 = llvm::ConstantInt::get();
  v74 = sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
  *(_QWORD *)v295 = v73;
  *(_QWORD *)&v295[8] = 0;
  v295[48] = 0;
  v301 = 0;
  v302 = v74;
  v75 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
  v76 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
  v77 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)v76 = *(_OWORD *)v75;
  *(_OWORD *)(v76 + 16) = v77;
  v78 = *(_QWORD *)(v75 + 144);
  v79 = *(_OWORD *)(v75 + 128);
  v80 = *(_OWORD *)(v75 + 96);
  *(_OWORD *)(v76 + 112) = *(_OWORD *)(v75 + 112);
  *(_OWORD *)(v76 + 128) = v79;
  *(_QWORD *)(v76 + 144) = v78;
  *(_OWORD *)(v76 + 96) = v80;
  v81 = *(_OWORD *)(v75 + 80);
  v82 = *(_OWORD *)(v75 + 32);
  v83 = *(_OWORD *)(v75 + 48);
  *(_OWORD *)(v76 + 64) = *(_OWORD *)(v75 + 64);
  *(_OWORD *)(v76 + 80) = v81;
  *(_OWORD *)(v76 + 32) = v82;
  *(_OWORD *)(v76 + 48) = v83;
  ++*(_DWORD *)&v310[8];
  True = llvm::ConstantInt::getTrue();
  v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16400);
  *(_QWORD *)v295 = True;
  *(_QWORD *)&v295[8] = 0;
  v295[48] = 0;
  v301 = 0;
  v302 = v85;
  v86 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
  v87 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
  v88 = *(_OWORD *)(v86 + 16);
  *(_OWORD *)v87 = *(_OWORD *)v86;
  *(_OWORD *)(v87 + 16) = v88;
  v89 = *(_QWORD *)(v86 + 144);
  v90 = *(_OWORD *)(v86 + 128);
  v91 = *(_OWORD *)(v86 + 96);
  *(_OWORD *)(v87 + 112) = *(_OWORD *)(v86 + 112);
  *(_OWORD *)(v87 + 128) = v90;
  *(_QWORD *)(v87 + 144) = v89;
  *(_OWORD *)(v87 + 96) = v91;
  v92 = *(_OWORD *)(v86 + 80);
  v93 = *(_OWORD *)(v86 + 32);
  v94 = *(_OWORD *)(v86 + 48);
  *(_OWORD *)(v87 + 64) = *(_OWORD *)(v86 + 64);
  *(_OWORD *)(v87 + 80) = v92;
  *(_OWORD *)(v87 + 32) = v93;
  *(_OWORD *)(v87 + 48) = v94;
  ++*(_DWORD *)&v310[8];
  False = llvm::ConstantInt::getFalse();
  v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16400);
  *(_QWORD *)v295 = False;
  *(_QWORD *)&v295[8] = 0;
  v295[48] = 0;
  v301 = 0;
  v302 = v96;
  v97 = sub_22E3C187C((uint64_t)v310, (unint64_t)v295, 1);
  v98 = *(_QWORD *)v310 + 152 * *(unsigned int *)&v310[8];
  v99 = *(_OWORD *)(v97 + 16);
  *(_OWORD *)v98 = *(_OWORD *)v97;
  *(_OWORD *)(v98 + 16) = v99;
  v100 = *(_QWORD *)(v97 + 144);
  v101 = *(_OWORD *)(v97 + 128);
  v102 = *(_OWORD *)(v97 + 96);
  *(_OWORD *)(v98 + 112) = *(_OWORD *)(v97 + 112);
  *(_OWORD *)(v98 + 128) = v101;
  *(_QWORD *)(v98 + 144) = v100;
  *(_OWORD *)(v98 + 96) = v102;
  v103 = *(_OWORD *)(v97 + 80);
  v104 = *(_OWORD *)(v97 + 32);
  v105 = *(_OWORD *)(v97 + 48);
  *(_OWORD *)(v98 + 64) = *(_OWORD *)(v97 + 64);
  *(_OWORD *)(v98 + 80) = v103;
  *(_OWORD *)(v98 + 32) = v104;
  *(_OWORD *)(v98 + 48) = v105;
  ++*(_DWORD *)&v310[8];
  v106 = *(_QWORD *)(a1 + 144);
  v107 = *(_QWORD *)(v106 + 784);
  if (!v107)
  {
    sub_22F298C2C(*(_QWORD **)(a1 + 144));
    v107 = *(_QWORD *)(v106 + 784);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v107 + 224))(v107);
  *(_QWORD *)&v295[40] = 0;
  *(_QWORD *)v295 = v108;
  memset(&v295[8], 0, 20);
  *(_DWORD *)&v295[32] = 0;
  v114 = sub_22F24E200(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), v310, v109, v110, v111, v112, v113);
  v303 = 0uLL;
  DWORD2(v304) = 0;
  *(_QWORD *)&v304 = 0;
  v305 = 0uLL;
  v306 = 0;
  sub_22E47A004(a1, v114, (uint64_t)v295, (uint64_t)&v303, (uint64_t)v310, 0, 0, 0, (uint64_t)&v292, 0);
  if (v322 != v324)
    free(v322);
  if (v319 != v321)
    free(v319);
  if (v316 != v318)
    free(v316);
  v115 = *(void **)v310;
  if (*(_BYTE **)v310 != &v310[16])
LABEL_98:
    free(v115);
}

void sub_22E56140C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65[8];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73[3];
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[1216];
  void *v81;
  uint64_t v82;
  _BYTE v83[192];
  void *v84;
  uint64_t v85;
  _BYTE v86[16];
  void *v87;
  uint64_t v88;
  _QWORD v89[8];

  v89[5] = *MEMORY[0x24BDAC8D0];
  v78 = v80;
  v79 = 0x800000000;
  v81 = v83;
  v82 = 0x100000000;
  v84 = v86;
  v85 = 0x100000000;
  v87 = v89;
  v88 = 0x200000000;
  v89[4] = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1[199] + 120) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 32);
  v9 = sub_22F272828(a1);
  sub_22F26105C((uint64_t)a1, v8, v9, a3, 0);
  v62 = v67;
  v63 = v68;
  v64 = v69;
  sub_22E5E0440((uint64_t)a1, (uint64_t)&v62, v70, v73);
  v10 = a1[12];
  WORD4(v68) = 257;
  v11 = sub_22E3C1740(a1 + 34, 49, v73[0], v10, (uint64_t)&v66);
  v12 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v66 = v11;
  *(_QWORD *)&v67 = 0;
  BYTE8(v69) = 0;
  v71 = 0;
  v72 = v12;
  v13 = sub_22E3C187C((uint64_t)&v78, (unint64_t)&v66, 1);
  v14 = (char *)v78 + 152 * v79;
  v15 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v13;
  *((_OWORD *)v14 + 1) = v15;
  v16 = *(_QWORD *)(v13 + 144);
  v17 = *(_OWORD *)(v13 + 128);
  v18 = *(_OWORD *)(v13 + 96);
  *((_OWORD *)v14 + 7) = *(_OWORD *)(v13 + 112);
  *((_OWORD *)v14 + 8) = v17;
  *((_QWORD *)v14 + 18) = v16;
  *((_OWORD *)v14 + 6) = v18;
  v19 = *(_OWORD *)(v13 + 80);
  v20 = *(_OWORD *)(v13 + 32);
  v21 = *(_OWORD *)(v13 + 48);
  *((_OWORD *)v14 + 4) = *(_OWORD *)(v13 + 64);
  *((_OWORD *)v14 + 5) = v19;
  *((_OWORD *)v14 + 2) = v20;
  *((_OWORD *)v14 + 3) = v21;
  LODWORD(v79) = v79 + 1;
  v22 = **(_QWORD **)(a2 + 96);
  v23 = *(_QWORD *)(a1[18] + 144);
  v24 = *(_QWORD *)(v22 + 48);
  v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (!v25 || (v26 = *(_DWORD *)(v25 + 16), (v26 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v61 = *(_QWORD *)(a1[18] + 144);
    v58 = *(_QWORD *)(v22 + 48);
    v25 = sub_22F10CF48(v25);
    v24 = v58;
    v23 = v61;
    if (!v25)
      goto LABEL_4;
    v26 = *(_DWORD *)(v25 + 16);
  }
  if ((v26 & 0x100000) != 0)
  {
    do
    {
      v59 = v23;
      v25 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v25 || (v60 = *(_DWORD *)(v25 + 16), (v60 & 0xFE) != 0x28))
      {
        v25 = sub_22F10CF48(v25);
        v60 = *(_DWORD *)(v25 + 16);
      }
      v23 = v59;
    }
    while ((v60 & 0x100000) != 0);
  }
  v24 = *(_QWORD *)(v25 + 32);
LABEL_4:
  v66 = 0;
  sub_22EFF69F0((uint64_t)v65, v23, v22, 0, v24, 1, 0, &v66, 0);
  sub_22E4D8D7C((uint64_t)a1, v65, (uint64_t)&v66);
  v62 = v67;
  v63 = v68;
  v64 = v69;
  sub_22E5E0440((uint64_t)a1, (uint64_t)&v62, v70, v73);
  v27 = a1[12];
  WORD4(v68) = 257;
  v28 = sub_22E3C1740(a1 + 34, 49, v73[0], v27, (uint64_t)&v66);
  v29 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v66 = v28;
  *(_QWORD *)&v67 = 0;
  BYTE8(v69) = 0;
  v71 = 0;
  v72 = v29;
  v30 = sub_22E3C187C((uint64_t)&v78, (unint64_t)&v66, 1);
  v31 = (char *)v78 + 152 * v79;
  v32 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v30;
  *((_OWORD *)v31 + 1) = v32;
  v33 = *(_QWORD *)(v30 + 144);
  v34 = *(_OWORD *)(v30 + 128);
  v35 = *(_OWORD *)(v30 + 96);
  *((_OWORD *)v31 + 7) = *(_OWORD *)(v30 + 112);
  *((_OWORD *)v31 + 8) = v34;
  *((_QWORD *)v31 + 18) = v33;
  *((_OWORD *)v31 + 6) = v35;
  v36 = *(_OWORD *)(v30 + 80);
  v37 = *(_OWORD *)(v30 + 32);
  v38 = *(_OWORD *)(v30 + 48);
  *((_OWORD *)v31 + 4) = *(_OWORD *)(v30 + 64);
  *((_OWORD *)v31 + 5) = v36;
  *((_OWORD *)v31 + 2) = v37;
  *((_OWORD *)v31 + 3) = v38;
  LODWORD(v79) = v79 + 1;
  v39 = *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16816);
  v66 = a4;
  *(_QWORD *)&v67 = 0;
  BYTE8(v69) = 0;
  v71 = 0;
  v72 = v39;
  v40 = sub_22E3C187C((uint64_t)&v78, (unint64_t)&v66, 1);
  v41 = (char *)v78 + 152 * v79;
  v42 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v40;
  *((_OWORD *)v41 + 1) = v42;
  v43 = *(_QWORD *)(v40 + 144);
  v44 = *(_OWORD *)(v40 + 128);
  v45 = *(_OWORD *)(v40 + 96);
  *((_OWORD *)v41 + 7) = *(_OWORD *)(v40 + 112);
  *((_OWORD *)v41 + 8) = v44;
  *((_QWORD *)v41 + 18) = v43;
  *((_OWORD *)v41 + 6) = v45;
  v46 = *(_OWORD *)(v40 + 80);
  v47 = *(_OWORD *)(v40 + 32);
  v48 = *(_OWORD *)(v40 + 48);
  *((_OWORD *)v41 + 4) = *(_OWORD *)(v40 + 64);
  *((_OWORD *)v41 + 5) = v46;
  *((_OWORD *)v41 + 2) = v47;
  *((_OWORD *)v41 + 3) = v48;
  LODWORD(v79) = v79 + 1;
  v49 = a1[18];
  v50 = *(_QWORD *)(v49 + 784);
  if (!v50)
  {
    sub_22F298C2C((_QWORD *)a1[18]);
    v50 = *(_QWORD *)(v49 + 784);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 232))(v50);
  *(_QWORD *)&v69 = 0;
  v67 = 0uLL;
  v66 = v51;
  DWORD2(v68) = 0;
  LODWORD(v68) = 0;
  v57 = sub_22F24E200(a1[18] + 280, *(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16392), &v78, v52, v53, v54, v55, v56);
  memset(v73, 0, sizeof(v73));
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  sub_22E47A004((unint64_t)a1, v57, (uint64_t)&v66, (uint64_t)v73, (uint64_t)&v78, 0, 0, 0, (uint64_t)&v62, 0);
  if (v87 != v89)
    free(v87);
  if (v84 != v86)
    free(v84);
  if (v81 != v83)
    free(v81);
  if (v78 != v80)
    free(v78);
}

uint64_t sub_22E5618D4(_BYTE *a1)
{
  unsigned __int8 v1;
  unsigned int v2;
  uint64_t v3;

  if (!a1)
    return 1;
  v1 = *a1 + 118;
  v2 = v1;
  if (v1 <= 4u)
  {
    v3 = sub_22EFFA604(*(unsigned __int8 **)&a1[a1[3]]);
    v1 = v3 && (*(_DWORD *)(v3 + 28) & 0x7Eu) - 52 <= 5 && (*(_BYTE *)(v3 + 82) & 0x80) != 0;
  }
  return (v2 < 5) & v1;
}

uint64_t sub_22E561950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t BitCast;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  int v36;
  llvm::Value *v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD v62[4];
  _QWORD v63[4];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[9];
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72[5];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 48) + 73) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 48);
  v65 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  if (sub_22F111B38(&v65) == 5)
  {
    v35 = sub_22EF5D130(v5, v4);
    if ((v4 & 4) != 0)
      v36 = 1;
    else
      v36 = (*(unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
    v37 = (llvm::Value *)sub_22E551B90(*(_QWORD *)(a1 + 144), v35, v35, v36, v4);
    v38 = *(uint64_t **)(a1 + 144);
    v39 = sub_22E564DEC(v5);
    sub_22F28A778(v38, v37, v39, 0, 0);
    return llvm::ConstantExpr::getBitCast();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 152);
  if ((*(_BYTE *)(v6 + 1) & 1) == 0)
    return 0;
  v7 = *(_DWORD *)(v6 + 400);
  if (v7 < 5)
    goto LABEL_5;
  if (v7 != 6)
    return 0;
  v68[0] = 0x8000000700000001;
  v68[1] = 0;
  BitCast = 0;
  if ((sub_22E3B38EC((_DWORD *)(v6 + 404), v68) & 1) != 0)
    return BitCast;
LABEL_5:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45
    || (sub_22E5618D4(*(_BYTE **)(a2 + 88)) & 1) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 144);
  v68[0] = v4;
  BitCast = sub_22F2613A4((uint64_t *)(v8 + 1936), v68)[1];
  if (!BitCast)
  {
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "__assign_helper_atomic_property_", 0x20uLL);
    v11 = *(_QWORD *)(v5 + 16392);
    v12 = sub_22EF5B848(v5, v4, 0);
    v13 = sub_22EF5B848(v5, v4 | 1, 0);
    v70 = v72;
    v72[0] = v12;
    v72[1] = v13;
    v60 = v11;
    v61 = v13;
    v71 = 0x200000002;
    LOWORD(v68[0]) = 0;
    BYTE2(v68[0]) = 0;
    *(_OWORD *)((char *)v68 + 4) = 0uLL;
    memset(&v68[3], 0, 48);
    v69 = 0;
    v14 = sub_22EF63D8C(v5, v11, v72, 2uLL, (__int128 *)v68, 0);
    v15 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v5 + 1960) + 80));
    if (v15)
      v16 = v15 + 40;
    else
      v16 = 0;
    v68[0] = v10;
    LODWORD(v68[1]) = 0;
    sub_22EFC6D6C((uint64_t)&v68[2], v10);
    v17 = sub_22EFC7430(160, v5, v16, 0);
    v18 = sub_22EFBF4FC(v17, 52, v5, v16, 0, v68, v14, 0, 2, 0, 0, 0, 0, 0);
    *(_QWORD *)(v18 + 80) &= ~0x200000uLL;
    v68[0] = &v68[2];
    v68[1] = 0x1000000000;
    v19 = v18 + 72;
    v20 = sub_22EF579A8(v5, v12, 0);
    v21 = sub_22EFBF080(v5, v19, 0, 0, 0, v12, (uint64_t)v20, 0, 0);
    v22 = v68[1];
    if (LODWORD(v68[1]) >= HIDWORD(v68[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = v68[1];
    }
    *(_QWORD *)(v68[0] + 8 * v22) = v21;
    ++LODWORD(v68[1]);
    v23 = sub_22EF579A8(v5, v61, 0);
    v24 = sub_22EFBF080(v5, v19, 0, 0, 0, v61, (uint64_t)v23, 0, 0);
    v25 = v68[1];
    if (LODWORD(v68[1]) >= HIDWORD(v68[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v68[1];
    }
    *(_QWORD *)(v68[0] + 8 * v25) = v24;
    ++LODWORD(v68[1]);
    v26 = v17;
    if ((*(_DWORD *)(v17 + 28) & 0x7F) != 0x53)
    {
      v27 = *(_QWORD *)(v17 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)v28;
      for (i = *(_WORD *)(v28 + 8) & 0x7F; i != 83; i = *(_WORD *)(v28 + 8) & 0x7F)
      {
        v30 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v30 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_29;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_28;
          if (i == 16)
            goto LABEL_22;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_35;
          if (i == 24)
          {
LABEL_22:
            v30 = -48;
          }
          else
          {
LABEL_28:
            if (i != 70)
            {
LABEL_29:
              v31 = i - 52;
              if ((i - 33) >= 5)
                v32 = -48;
              else
                v32 = -64;
              if (v31 >= 6)
                v30 = v32;
              else
                v30 = -72;
              goto LABEL_35;
            }
            v30 = -64;
          }
        }
LABEL_35:
        v33 = *(_QWORD *)(v28 + v30 + 16);
        v28 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 4) != 0)
          v28 = *(_QWORD *)v28;
      }
      v26 = v28 - 40;
    }
    v59 = v12;
    v40 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(v26 + 88) + 2032, 16, 3);
    *(_QWORD *)(v17 + 120) = v40;
    v41 = v21;
    *v40 = v21;
    v40[1] = v24;
    v58 = v24;
    v42 = sub_22F24E348(*(_QWORD *)(a1 + 144) + 280, v60, v68);
    v43 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v42);
    v63[0] = "__assign_helper_atomic_property_";
    v64 = 259;
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200);
    v45 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v45, v43, 7, 0xFFFFFFFFLL, v63, v44);
    sub_22E62BF18(*(uint64_t **)(a1 + 144), 0, 0, v45, v42);
    if (sub_22E462B18(v17))
      v17 = v17 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v17) + 96) & 0x80) == 0);
    sub_22E61A8FC(a1, v17, 0, v60, v45, v42, v68, 0, v46, 0);
    v62[0] = 0;
    sub_22EFF69F0((uint64_t)v63, v5, v41, 0, v59, 0, 0, v62, 0);
    v47 = sub_22F10ACF8(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0));
    v48 = sub_22E3CD3D4(v5 + 2032, 24, 3);
    sub_22F0031D0(v48, v5, (uint64_t)v63, 5, v47, 1, 0, 0, 0, 0);
    v67[0] = 0;
    sub_22EFF69F0((uint64_t)v62, v5, v58, 0, v61, 0, 0, v67, 0);
    v49 = sub_22F10ACF8(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0));
    v50 = sub_22E3CD3D4(v5 + 2032, 24, 3);
    v51 = sub_22F0031D0(v50, v5, (uint64_t)v62, 5, v49, 1, 0, 0, 0, 0);
    v67[0] = v48;
    v67[1] = v51;
    v52 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + *(unsigned __int8 *)(*(_QWORD *)(a2 + 88) + 3));
    v53 = sub_22F10ACF8(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0));
    v54 = (unsigned __int8 *)sub_22F060CD4(v5, 15, v52, (uint64_t)v67, 2, v53, 1, 0, 0, 0);
    sub_22E5E5158(a1, v54, 0, 0);
    sub_22E619DE8(a1, 0);
    v55 = *(uint64_t **)(a1 + 144);
    v56 = sub_22E564DEC(v5);
    sub_22F28A778(v55, v45, v56, 0, 0);
    BitCast = llvm::ConstantExpr::getBitCast();
    v57 = *(_QWORD *)(a1 + 144);
    v66 = v4;
    sub_22F2613A4((uint64_t *)(v57 + 1936), &v66)[1] = BitCast;
    if ((_QWORD *)v68[0] != &v68[2])
      free((void *)v68[0]);
    if (v70 != v72)
      free(v70);
  }
  return BitCast;
}

void sub_22E56211C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  llvm::Type *v73;
  uint64_t NullValue;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Type *v83;
  unint64_t v84;
  _QWORD *v85;
  llvm::PHINode *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  llvm::LLVMContext *v97;
  llvm::Type *v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  llvm::LLVMContext *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  __int16 v132;
  llvm::Type **v133;
  _OWORD *v134;
  _OWORD *v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  llvm::Type *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  llvm::Constant *v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  void *v213;
  int v214;
  void *v215;
  int v216;
  char v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  llvm::PHINode *v223;
  void *v224;
  uint64_t v225;
  llvm::Constant *v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  unsigned __int8 *v231;
  void *v232;
  __int128 v233;
  void *v234;
  void *v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  _QWORD v244[6];
  char v245;
  _QWORD v246[3];
  int v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  void *v251;
  __int128 v252;
  void *v253;
  void *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[6];
  char v267;
  void *v268;
  __int128 v269;
  void *v270;
  void *v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  _QWORD v280[6];
  char v281;
  _QWORD v282[3];
  int v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  llvm::Type **v287;
  _OWORD v288[3];
  _QWORD v289[3];
  int v290;
  uint64_t v291;
  uint64_t v292;
  _OWORD v293[3];
  _OWORD v294[3];
  _OWORD v295[3];
  _QWORD v296[3];
  int v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _QWORD v303[3];
  int v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  _OWORD v308[3];
  char v309;
  _QWORD v310[3];
  int v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  _QWORD v320[3];
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  llvm::Value *v325;
  void *v326[7];
  uint64_t v327;
  uint64_t v328;
  _BYTE v329[24];
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  __int16 v333;
  unint64_t v334;
  void *v335;
  uint64_t v336;
  _BYTE v337[192];
  void *v338;
  uint64_t v339;
  _BYTE v340[16];
  void *v341;
  uint64_t v342;
  _QWORD v343[5];
  void *v344;
  uint64_t v345;
  _BYTE v346[16];
  __int16 v347;
  char v348;
  __int16 v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  _BYTE v353[192];
  void *v354;
  uint64_t v355;
  _BYTE v356[16];
  void *v357;
  uint64_t v358;
  _QWORD v359[5];
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  void *v366;
  uint64_t v367;
  _BYTE v368[192];
  void *v369;
  uint64_t v370;
  _BYTE v371[16];
  void *v372;
  uint64_t v373;
  _QWORD v374[5];
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  __int16 v380;
  char v381;
  __int16 v382;
  unint64_t v383;
  uint64_t v384;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v384 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(v0 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5);
  if (!v6)
  {
    sub_22E628400(*(_QWORD *)(v3 + 144), v2, "Obj-C fast enumeration for this runtime");
    return;
  }
  v323 = 0;
  v320[2] = 0;
  v320[0] = v6;
  v320[1] = 0;
  v322 = 0;
  v321 = 0;
  if (*(_BYTE *)(v3 + 2892))
  {
    v7 = 0;
    goto LABEL_9;
  }
  v7 = *(unsigned __int8 **)(v3 + 2880);
  if (!v7)
  {
LABEL_9:
    v218 = 1;
    goto LABEL_10;
  }
  sub_22F0D4E74(v2);
  sub_22F256D30(v7, v3 + 272, v8);
  v218 = 0;
LABEL_10:
  v9 = *(_QWORD *)(v3 + 1992) - *(_QWORD *)(v3 + 2000);
  v219 = *(_QWORD *)(v3 + 2312);
  v217 = *(_BYTE *)(v3 + 2893);
  *(_BYTE *)(v3 + 2893) = 0;
  v221 = *(_QWORD *)(v3 + 2872);
  *(_QWORD *)(v3 + 2872) = v9;
  LODWORD(v316) = 0;
  v314 = 0u;
  v315 = 0u;
  *(_QWORD *)&v317 = 0;
  *((_QWORD *)&v316 + 1) = 0;
  v319 = 0uLL;
  v10 = *(_QWORD *)(v2 + 8);
  if (*(_BYTE *)v10 == 12)
  {
    sub_22E4C8440(v3, *(_QWORD *)(v10 + 8), (uint64_t)&v360);
    v316 = v362;
    v317 = v363;
    v318 = v364;
    v319 = v365;
    v314 = v360;
    v315 = v361;
  }
  LOWORD(v362) = 261;
  *(_QWORD *)&v360 = "forcoll.end";
  *((_QWORD *)&v360 + 1) = 11;
  v229 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v215 = *(void **)(v3 + 2008);
  v216 = *(_DWORD *)(v3 + 2640);
  *(_DWORD *)(v3 + 2640) = v216 + 1;
  v11 = sub_22F29B9B8(*(_QWORD *)(v3 + 144));
  *(_QWORD *)&v360 = "state.ptr";
  LOWORD(v362) = 259;
  v12 = sub_22F25E4D4(v3, v11, (uint64_t)&v360, 0);
  v14 = 0;
  if (v12 <= 7)
    v15 = 0;
  else
    v15 = (void *)(v12 & 0xFFFFFFFFFFFFFFF8);
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  if (v12 <= 7)
    v16 = 0;
  v230 = v16;
  if (v12 >= 8)
    v14 = 1 << (v13 & 7 | (8 * (v12 & 7)));
  v310[0] = v15;
  v310[1] = v16;
  v222 = v14;
  v310[2] = v14;
  v311 = 0;
  v313 = 0;
  v312 = 0;
  sub_22E620824(v3, (uint64_t)v310, v11);
  v376 = 0;
  v375 = 0;
  v377 = 0;
  v375 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 15192), "countByEnumeratingWithState", 0x1BuLL);
  v376 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 15192), "objects", 7uLL);
  v377 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 15192), "count", 5uLL);
  v228 = sub_22F1D3E5C(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 15200), 3u, &v375);
  v17 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v18 = sub_22F36E1B8(v17);
  v19 = *(_QWORD *)(v18 + 48);
  if (v19)
    v20 = v19 & 0xFFFFFFFFFFFFFFF0;
  else
    v20 = sub_22EF6462C(v17, v18);
  DWORD2(v360) = 32;
  *(_QWORD *)&v360 = 16;
  v21 = sub_22EF5FE30(v17, v20, (const llvm::APInt *)&v360, 0, 0, 0);
  if (DWORD2(v360) >= 0x41 && (_QWORD)v360)
    MEMORY[0x2348A0E84](v360, 0x1000C8000313F17);
  *(_QWORD *)&v360 = "items.ptr";
  LOWORD(v362) = 259;
  v22 = sub_22F25E4D4(v3, v21, (uint64_t)&v360, 0);
  if (v22 <= 7)
    v24 = 0;
  else
    v24 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(v3 + 144);
  v26 = *(unsigned __int8 **)(v2 + 16);
  if ((*(_WORD *)(*(_QWORD *)(v25 + 152) + 148) & 2) != 0)
  {
    v231 = sub_22E563BF8(v3, v26, v23);
    sub_22F272F6C(v3, v27, (uint64_t)v231);
  }
  else
  {
    *(_QWORD *)&v360 = v3;
    *((_QWORD *)&v360 + 1) = v3 + 272;
    LOBYTE(v361) = 0;
    *((_QWORD *)&v361 + 1) = *(_QWORD *)(v25 + 232);
    v231 = (unsigned __int8 *)sub_22E50E974(&v360, v26, v23);
  }
  LOWORD(v362) = 261;
  *(_QWORD *)&v360 = "forcoll.next";
  *((_QWORD *)&v360 + 1) = 12;
  v227 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v213 = *(void **)(v3 + 2008);
  v214 = *(_DWORD *)(v3 + 2640);
  *(_DWORD *)(v3 + 2640) = v214 + 1;
  *(_QWORD *)&v360 = &v361;
  *((_QWORD *)&v360 + 1) = 0x800000000;
  v366 = v368;
  v367 = 0x100000000;
  v369 = v371;
  v370 = 0x100000000;
  v372 = v374;
  v373 = 0x200000000;
  v374[4] = 0;
  v28 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v11, 0);
  v344 = v15;
  v345 = 0;
  v348 = 0;
  v349 = 0;
  v350 = v28;
  v29 = sub_22E3C187C((uint64_t)&v360, (unint64_t)&v344, 1);
  v30 = v360 + 152 * DWORD2(v360);
  v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v29;
  *(_OWORD *)(v30 + 16) = v31;
  v32 = *(_QWORD *)(v29 + 144);
  v33 = *(_OWORD *)(v29 + 128);
  v34 = *(_OWORD *)(v29 + 96);
  *(_OWORD *)(v30 + 112) = *(_OWORD *)(v29 + 112);
  *(_OWORD *)(v30 + 128) = v33;
  *(_QWORD *)(v30 + 144) = v32;
  *(_OWORD *)(v30 + 96) = v34;
  v35 = *(_OWORD *)(v29 + 80);
  v36 = *(_OWORD *)(v29 + 32);
  v37 = *(_OWORD *)(v29 + 48);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(v29 + 64);
  *(_OWORD *)(v30 + 80) = v35;
  *(_OWORD *)(v30 + 32) = v36;
  *(_OWORD *)(v30 + 48) = v37;
  ++DWORD2(v360);
  v38 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144), v21, 0);
  v344 = v24;
  v345 = 0;
  v348 = 0;
  v349 = 0;
  v350 = v38;
  v39 = sub_22E3C187C((uint64_t)&v360, (unint64_t)&v344, 1);
  v40 = v360 + 152 * DWORD2(v360);
  v41 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v39;
  *(_OWORD *)(v40 + 16) = v41;
  v42 = *(_QWORD *)(v39 + 144);
  v43 = *(_OWORD *)(v39 + 128);
  v44 = *(_OWORD *)(v39 + 96);
  *(_OWORD *)(v40 + 112) = *(_OWORD *)(v39 + 112);
  *(_OWORD *)(v40 + 128) = v43;
  *(_QWORD *)(v40 + 144) = v42;
  *(_OWORD *)(v40 + 96) = v44;
  v45 = *(_OWORD *)(v39 + 80);
  v46 = *(_OWORD *)(v39 + 32);
  v47 = *(_OWORD *)(v39 + 48);
  *(_OWORD *)(v40 + 64) = *(_OWORD *)(v39 + 64);
  *(_OWORD *)(v40 + 80) = v45;
  *(_OWORD *)(v40 + 32) = v46;
  *(_OWORD *)(v40 + 48) = v47;
  ++DWORD2(v360);
  v48 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v49 = *(_QWORD *)(v48 + 15088);
  if (*(_DWORD *)(v49 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v49 + 32)))
    v50 = 16544;
  else
    v50 = 16536;
  v226 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v3 + 144) + 280), *(llvm::LLVMContext **)(v48 + v50));
  v51 = (void *)llvm::ConstantInt::get();
  v52 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v53 = *(_QWORD *)(v52 + 15088);
  if (*(_DWORD *)(v53 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v53 + 32)))
    v54 = 16544;
  else
    v54 = 16536;
  v55 = *(_QWORD *)(v52 + v54);
  v344 = v51;
  v345 = 0;
  v348 = 0;
  v349 = 0;
  v350 = v55;
  v56 = sub_22E3C187C((uint64_t)&v360, (unint64_t)&v344, 1);
  v57 = v360 + 152 * DWORD2(v360);
  v58 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v56;
  *(_OWORD *)(v57 + 16) = v58;
  v59 = *(_QWORD *)(v56 + 144);
  v60 = *(_OWORD *)(v56 + 128);
  v61 = *(_OWORD *)(v56 + 96);
  *(_OWORD *)(v57 + 112) = *(_OWORD *)(v56 + 112);
  *(_OWORD *)(v57 + 128) = v60;
  *(_QWORD *)(v57 + 144) = v59;
  *(_OWORD *)(v57 + 96) = v61;
  v62 = *(_OWORD *)(v56 + 80);
  v63 = *(_OWORD *)(v56 + 32);
  v64 = *(_OWORD *)(v56 + 48);
  *(_OWORD *)(v57 + 64) = *(_OWORD *)(v56 + 64);
  *(_OWORD *)(v57 + 80) = v62;
  *(_OWORD *)(v57 + 32) = v63;
  *(_OWORD *)(v57 + 48) = v64;
  ++DWORD2(v360);
  v65 = *(_QWORD *)(v3 + 144);
  v66 = *(_QWORD *)(v65 + 784);
  if (!v66)
  {
    sub_22F298C2C(*(_QWORD **)(v3 + 144));
    v66 = *(_QWORD *)(v65 + 784);
    v65 = *(_QWORD *)(v3 + 144);
  }
  v224 = v15;
  memset(v303, 0, sizeof(v303));
  v304 = 0;
  v306 = 0;
  v305 = 0;
  v307 &= 0xF8u;
  v67 = *(_QWORD *)(v65 + 144);
  v68 = *(_QWORD *)(v67 + 15088);
  v189 = (uint64_t)v7;
  v220 = v9;
  if (*(_DWORD *)(v68 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v68 + 32)))
    v69 = 16544;
  else
    v69 = 16536;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, unsigned __int8 *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v66 + 136))(v308, v66, v3, v303, *(_QWORD *)(v67 + v69), v228, v231, &v360, 0, 0);
  v70 = *(uint64_t **)&v308[0];
  v209 = *(_QWORD *)&v308[0];
  v344 = "forcoll.empty";
  v347 = 259;
  v71 = operator new();
  llvm::BasicBlock::BasicBlock();
  v344 = "forcoll.loopinit";
  v347 = 259;
  v72 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  NullValue = llvm::Constant::getNullValue(v226, v73);
  v75 = *(_QWORD *)(v3 + 4016);
  v76 = (uint64_t *)(v3 + 272);
  v344 = "iszero";
  v347 = 259;
  v77 = sub_22E3C18F4(v3 + 272, 32, v70, NullValue, (uint64_t)&v344);
  v78 = sub_22E3CF180(v3 + 3904, *(_QWORD *)(v2 + 24));
  if (v79)
    v80 = v78;
  else
    v80 = 0;
  v210 = v75;
  v81 = sub_22E659CE4(v3, v75, v80);
  v212 = (_QWORD *)v71;
  sub_22E3D26FC((uint64_t *)(v3 + 272), v77, v71, (uint64_t)v72, v81, 0);
  sub_22E5ED9B4((_QWORD *)v3, v72, 0);
  v296[0] = v224;
  v296[1] = v230;
  v296[2] = v222;
  v297 = 0;
  v299 = 0;
  v298 = 0;
  v344 = "mutationsptr.ptr";
  v347 = 259;
  sub_22E3C408C((uint64_t *)(v3 + 272), (uint64_t)v296, 2, (uint64_t)&v344, (uint64_t)&v300);
  v295[0] = v300;
  v295[1] = v301;
  v295[2] = v302;
  v82 = sub_22E3C43AC((uint64_t *)(v3 + 272), (uint64_t)v295, "mutationsptr");
  v83 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v3 + 144) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 16536));
  v84 = *(unsigned __int8 *)(v3 + 130);
  v344 = "forcoll.initial-mutations";
  v347 = 259;
  v208 = sub_22E3C3200((uint64_t *)(v3 + 272), v83, v82, (63 - __clz(v84)) | 0x100u, 0, (uint64_t)&v344);
  v344 = "forcoll.loopbody";
  v347 = 259;
  v85 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v225 = (uint64_t)v85;
  sub_22E5ED9B4((_QWORD *)v3, v85, 0);
  v344 = "forcoll.index";
  v347 = 259;
  v86 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(v3 + 272), (uint64_t)v226, 3, (uint64_t)&v344);
  v211 = NullValue;
  sub_22E3C4C50(v86, NullValue, (uint64_t)v72);
  v344 = "forcoll.count";
  v347 = 259;
  v223 = (llvm::PHINode *)sub_22E3C4B80((uint64_t *)(v3 + 272), (uint64_t)v226, 3, (uint64_t)&v344);
  sub_22E3C4C50(v223, v209, (uint64_t)v72);
  sub_22E3CB7B0((_QWORD *)v3, v2, 0);
  v294[0] = v300;
  v294[1] = v301;
  v294[2] = v302;
  v87 = sub_22E3C43AC((uint64_t *)(v3 + 272), (uint64_t)v294, "mutationsptr");
  v88 = *(unsigned __int8 *)(v3 + 130);
  v344 = "statemutations";
  v347 = 259;
  v89 = (uint64_t *)sub_22E3C3200((uint64_t *)(v3 + 272), v83, v87, (63 - __clz(v88)) | 0x100u, 0, (uint64_t)&v344);
  v344 = "forcoll.mutated";
  v347 = 259;
  v90 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v344 = "forcoll.notmutated";
  v347 = 259;
  v91 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  LOWORD(v326[4]) = 257;
  v92 = sub_22E3C18F4(v3 + 272, 32, v89, v208, (uint64_t)v326);
  v93 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v93, v91, v90, v92, 0);
  v347 = 257;
  sub_22E3C12C8((uint64_t *)(v3 + 272), v93, (uint64_t)&v344);
  sub_22E5ED9B4((_QWORD *)v3, v90, 0);
  v94 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v95 = sub_22F36E1B8(v94);
  v96 = *(_QWORD *)(v95 + 48);
  if (v96)
    v97 = (llvm::LLVMContext *)(v96 & 0xFFFFFFFFFFFFFFF0);
  else
    v97 = (llvm::LLVMContext *)sub_22EF6462C(v94, v95);
  v98 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v3 + 144) + 280), v97);
  v347 = 257;
  v99 = (void *)sub_22E3C1740((uint64_t *)(v3 + 272), 49, (uint64_t)v231, (uint64_t)v98, (uint64_t)&v344);
  v344 = v346;
  v345 = 0x800000000;
  v351 = v353;
  v352 = 0x100000000;
  v354 = v356;
  v355 = 0x100000000;
  v357 = v359;
  v358 = 0x200000000;
  v359[4] = 0;
  v100 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
  v101 = sub_22F36E1B8(v100);
  v102 = *(_QWORD *)(v101 + 48);
  if (v102)
    v103 = v102 & 0xFFFFFFFFFFFFFFF0;
  else
    v103 = sub_22EF6462C(v100, v101);
  v326[0] = v99;
  v326[1] = 0;
  LOBYTE(v326[6]) = 0;
  v333 = 0;
  v334 = v103;
  v104 = sub_22E3C187C((uint64_t)&v344, (unint64_t)v326, 1);
  v105 = (char *)v344 + 152 * v345;
  v106 = *(_OWORD *)(v104 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v104;
  *((_OWORD *)v105 + 1) = v106;
  v107 = *(_QWORD *)(v104 + 144);
  v108 = *(_OWORD *)(v104 + 128);
  v109 = *(_OWORD *)(v104 + 96);
  *((_OWORD *)v105 + 7) = *(_OWORD *)(v104 + 112);
  *((_OWORD *)v105 + 8) = v108;
  *((_QWORD *)v105 + 18) = v107;
  *((_OWORD *)v105 + 6) = v109;
  v110 = *(_OWORD *)(v104 + 80);
  v111 = *(_OWORD *)(v104 + 32);
  v112 = *(_OWORD *)(v104 + 48);
  *((_OWORD *)v105 + 4) = *(_OWORD *)(v104 + 64);
  *((_OWORD *)v105 + 5) = v110;
  *((_OWORD *)v105 + 2) = v111;
  *((_OWORD *)v105 + 3) = v112;
  LODWORD(v345) = v345 + 1;
  v118 = sub_22F24E200(*(_QWORD *)(v3 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 144) + 16392), &v344, v113, v114, v115, v116, v117);
  memset(v326, 0, 28);
  memset(&v326[4], 0, 17);
  LOBYTE(v186) = 0;
  sub_22E47A004(&v378, v3, v118, v320, v326, &v344, 0, 0, 0, v186);
  sub_22E5ED9B4((_QWORD *)v3, v91, 0);
  v119 = *(_QWORD *)(v3 + 1992) - *(_QWORD *)(v3 + 2000);
  v120 = *(_QWORD *)(v3 + 2312);
  v205 = *(_BYTE *)(v3 + 2893);
  *(_BYTE *)(v3 + 2893) = 0;
  v206 = v120;
  v207 = *(_QWORD *)(v3 + 2872);
  *(_QWORD *)(v3 + 2872) = v119;
  v121 = *(unsigned __int8 **)(v2 + 8);
  v122 = *v121;
  if (v122 == 12)
  {
    sub_22E4C9320((_QWORD *)v3, &v314);
    v123 = *((_QWORD *)v121 + 1);
    v124 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
    v125 = *(_QWORD *)(v123 + 48);
    v326[0] = 0;
    sub_22EFF69F0((uint64_t)&v378, v124, v123, 0, v125, 1, 0, v326, 0);
    sub_22E4D8D7C(v326);
    v202 = v326[0];
    v203 = v326[3];
    v198 = v326[4];
    v200 = v328;
    v201 = v327;
    v192 = *(_QWORD *)&v329[4];
    v193 = *(_OWORD *)&v326[1];
    v126 = *(_QWORD *)&v329[12];
    v127 = *(_DWORD *)v329;
    v199 = *(_DWORD *)&v329[20];
    v190 = v330;
    v191 = *(_OWORD *)&v326[5];
    v196 = *((_QWORD *)&v331 + 1);
    v197 = v331;
    v195 = v332;
    if (*(char *)(v123 + 96) < 0)
      v127 = *(_DWORD *)v329 & 0xFFFFFE3F | 0x40;
    v194 = v127;
    v128 = *(llvm::LLVMContext **)(v123 + 48);
  }
  else
  {
    v202 = 0;
    v203 = 0;
    v200 = 0;
    v201 = 0;
    v194 = 0;
    v199 = 0;
    v196 = 0;
    v197 = 0;
    v195 = 0;
    v126 = 2;
    v198 = 0;
    v128 = (llvm::LLVMContext *)*((_QWORD *)v121 + 1);
    v192 = 0;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
  }
  v129 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v3 + 144) + 280), v128);
  v289[0] = v224;
  v289[1] = v230;
  v289[2] = v222;
  v290 = 0;
  v292 = 0;
  v291 = 0;
  v326[0] = "stateitems.ptr";
  LOWORD(v326[4]) = 259;
  sub_22E3C408C((uint64_t *)(v3 + 272), (uint64_t)v289, 1, (uint64_t)v326, (uint64_t)v293);
  v288[0] = v293[0];
  v288[1] = v293[1];
  v288[2] = v293[2];
  v130 = (uint64_t *)sub_22E3C43AC((uint64_t *)(v3 + 272), (uint64_t)v288, "stateitems");
  v326[0] = "currentitem.ptr";
  LOWORD(v326[4]) = 259;
  v131 = sub_22E42129C((uint64_t *)(v3 + 272), (uint64_t)v98, v130, (uint64_t *)v86, (uint64_t)v326);
  v287 = 0;
  v132 = (63 - __clz(*(unsigned __int8 *)(v3 + 130))) | 0x100;
  LOWORD(v326[4]) = 257;
  v287 = (llvm::Type **)sub_22E3C3200((uint64_t *)(v3 + 272), v98, v131, v132, 0, (uint64_t)v326);
  v204 = (llvm::Constant *)v129;
  if ((*(_BYTE *)(v3 + 1871) & 0x20) != 0)
  {
    v161 = sub_22F40A264(*(_QWORD *)((unint64_t)v128 & 0xFFFFFFFFFFFFFFF0));
    if (v161)
    {
      v162 = sub_22F40A120(v161);
      if (v162)
      {
        v163 = v162;
        *(_BYTE *)(v3 + 1880) = 1;
        v164 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 144);
        v165 = sub_22E3CB704(*(llvm::StringMapImpl **)(v164 + 15192), "isKindOfClass", 0xDuLL);
        v326[0] = &v326[2];
        v326[1] = (void *)0x800000000;
        v335 = v337;
        v336 = 0x100000000;
        v187 = v165;
        v338 = v340;
        v339 = 0x100000000;
        v341 = v343;
        v342 = 0x200000000;
        v343[4] = 0;
        v166 = *(_QWORD *)(*(_QWORD *)(v3 + 144) + 784);
        if (!v166)
        {
          v167 = *(_QWORD **)(v3 + 144);
          sub_22F298C2C(v167);
          v166 = v167[98];
        }
        v188 = v187 | 2;
        v168 = sub_22F409D88(v163);
        v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166 + 248))(v166, v3, v168);
        v170 = sub_22F36E27C(v164);
        v171 = *(_QWORD *)(v170 + 48);
        if (v171)
          v172 = v171 & 0xFFFFFFFFFFFFFFF0;
        else
          v172 = sub_22EF6462C(v164, v170);
        v378 = v169;
        *(_QWORD *)&v379 = 0;
        v381 = 0;
        v382 = 0;
        v383 = v172;
        v174 = sub_22E3C187C((uint64_t)v326, (unint64_t)&v378, 1);
        v175 = (char *)v326[0] + 152 * LODWORD(v326[1]);
        v176 = *(_OWORD *)(v174 + 16);
        *(_OWORD *)v175 = *(_OWORD *)v174;
        *((_OWORD *)v175 + 1) = v176;
        v177 = *(_QWORD *)(v174 + 144);
        v178 = *(_OWORD *)(v174 + 128);
        v179 = *(_OWORD *)(v174 + 96);
        *((_OWORD *)v175 + 7) = *(_OWORD *)(v174 + 112);
        *((_OWORD *)v175 + 8) = v178;
        *((_QWORD *)v175 + 18) = v177;
        *((_OWORD *)v175 + 6) = v179;
        v180 = *(_OWORD *)(v174 + 80);
        v181 = *(_OWORD *)(v174 + 32);
        v182 = *(_OWORD *)(v174 + 48);
        *((_OWORD *)v175 + 4) = *(_OWORD *)(v174 + 64);
        *((_OWORD *)v175 + 5) = v180;
        *((_OWORD *)v175 + 2) = v181;
        *((_OWORD *)v175 + 3) = v182;
        ++LODWORD(v326[1]);
        v183 = *(_QWORD *)(v3 + 144);
        v184 = *(_QWORD *)(v183 + 784);
        if (!v184)
        {
          sub_22F298C2C(*(_QWORD **)(v3 + 144));
          v184 = *(_QWORD *)(v183 + 784);
        }
        memset(v282, 0, sizeof(v282));
        v283 = 0;
        v285 = 0;
        v284 = 0;
        v286 &= 0xF8u;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, llvm::Type **, void **, _QWORD, _QWORD))(*(_QWORD *)v184 + 136))(&v378, v184, v3, v282, *(_QWORD *)(v164 + 16400), v188, v287, v326, 0, 0);
        v185 = v378;
        v325 = 0;
        v324 = 0;
        v324 = sub_22E4DE978(v3, *(_DWORD *)(v2 + 32));
        v325 = sub_22F25E758(v3, v163 & 0xFFFFFFFFFFFFFFF0);
        v378 = v185;
        v379 = xmmword_22F45ACE8;
        sub_22E4DEC4C((_QWORD *)v3, (uint64_t)&v378, 1, 9u, (uint64_t)&v324, 2, &v287, 1);
        if (v341 != v343)
          free(v341);
        if (v338 != v340)
          free(v338);
        if (v335 != v337)
          free(v335);
        if (v326[0] != &v326[2])
          free(v326[0]);
        *(_BYTE *)(v3 + 1880) = 0;
        v76 = (uint64_t *)(v3 + 272);
      }
    }
  }
  v326[0] = "currentitem";
  LOWORD(v326[4]) = 259;
  v133 = (llvm::Type **)sub_22E3C1740(v76, 49, (uint64_t)v287, v129, (uint64_t)v326);
  v287 = v133;
  if (v122 == 12)
  {
    v266[1] = 0;
    v266[0] = v133;
    v267 &= 0xF8u;
    v252 = v193;
    v251 = v202;
    v253 = v203;
    v254 = v198;
    v255 = v191;
    v256 = v201;
    v257 = v200;
    v259 = v192;
    v260 = v126;
    v258 = v194;
    v261 = v199;
    v262 = v190;
    v263 = v197;
    v264 = v196;
    v265 = v195;
    sub_22E4DAAE0(v3, v266, &v251, 1, *(double *)&v190);
    sub_22E4C9A74(v3, (uint64_t)&v314);
  }
  else
  {
    sub_22E4D8D7C(v326);
    v280[1] = 0;
    v280[0] = v287;
    v281 &= 0xF8u;
    v269 = *(_OWORD *)&v326[1];
    v268 = v326[0];
    v270 = v326[3];
    v271 = v326[4];
    v272 = *(_OWORD *)&v326[5];
    v273 = v327;
    v274 = v328;
    v275 = *(_OWORD *)v329;
    v276 = *(_QWORD *)&v329[16];
    v277 = v330;
    v278 = v331;
    v279 = v332;
    sub_22E4DAAE0(v3, v280, &v268, 0, *(double *)&v326[4]);
  }
  v326[0] = v229;
  v326[1] = v215;
  LODWORD(v326[2]) = v216;
  v326[3] = v227;
  v326[4] = v213;
  LODWORD(v326[5]) = v214;
  v134 = (_OWORD *)sub_22E566D28(v3 + 3040, (unint64_t)v326, 1);
  v135 = (_OWORD *)(*(_QWORD *)(v3 + 3040) + 48 * *(unsigned int *)(v3 + 3048));
  v137 = v134[1];
  v136 = v134[2];
  *v135 = *v134;
  v135[1] = v137;
  v135[2] = v136;
  ++*(_DWORD *)(v3 + 3048);
  v138 = *(_QWORD *)(v3 + 1992) - *(_QWORD *)(v3 + 2000);
  v139 = *(_QWORD *)(v3 + 2312);
  v140 = *(_BYTE *)(v3 + 2893);
  *(_BYTE *)(v3 + 2893) = 0;
  v141 = *(_QWORD *)(v3 + 2872);
  *(_QWORD *)(v3 + 2872) = v138;
  sub_22E5E5158(v3, *(_QWORD *)(v2 + 24), 0, 0);
  *(_BYTE *)(v3 + 2893) = v140;
  sub_22E48B274(v3, v138, v139, 0, 0);
  *(_QWORD *)(v3 + 2872) = v141;
  --*(_DWORD *)(v3 + 3048);
  *(_BYTE *)(v3 + 2893) = v205;
  sub_22E48B274(v3, v119, v206, 0, 0);
  *(_QWORD *)(v3 + 2872) = v207;
  sub_22E5ED9B4((_QWORD *)v3, v227, 0);
  v326[0] = "forcoll.refetch";
  LOWORD(v326[4]) = 259;
  v142 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v143 = llvm::ConstantInt::get();
  v380 = 257;
  v144 = (uint64_t *)(*(uint64_t (**)(_QWORD, llvm::PHINode *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v3 + 344)
                                                                                                + 16))(*(_QWORD *)(v3 + 344), v86, v143, 0, 0);
  if (!v144)
  {
    LOWORD(v326[4]) = 257;
    v145 = llvm::BinaryOperator::Create();
    v144 = (uint64_t *)sub_22E3C12C8(v76, v145, (uint64_t)&v378);
  }
  LOWORD(v326[4]) = 257;
  v146 = sub_22E3C18F4((uint64_t)v76, 36, v144, (uint64_t)v223, (uint64_t)v326);
  v147 = sub_22E3CF180(v3 + 3904, *(_QWORD *)(v2 + 24));
  if (v148)
    v149 = v147;
  else
    v149 = 0;
  v150 = sub_22E659CE4(v3, v149, v210);
  sub_22E3D26FC(v76, v146, v225, (uint64_t)v142, v150, 0);
  sub_22E3C4C50(v86, (uint64_t)v144, (uint64_t)v227);
  sub_22E3C4C50(v223, (uint64_t)v223, (uint64_t)v227);
  sub_22E5ED9B4((_QWORD *)v3, v142, 0);
  v151 = *(_QWORD *)(v3 + 144);
  v152 = *(_QWORD *)(v151 + 784);
  if (!v152)
  {
    sub_22F298C2C(*(_QWORD **)(v3 + 144));
    v152 = *(_QWORD *)(v151 + 784);
    v151 = *(_QWORD *)(v3 + 144);
  }
  memset(v246, 0, sizeof(v246));
  v247 = 0;
  v249 = 0;
  v248 = 0;
  v250 &= 0xF8u;
  v153 = *(_QWORD *)(v151 + 144);
  v154 = *(_QWORD *)(v153 + 15088);
  if (*(_DWORD *)(v154 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v154 + 32)))
    v155 = 16544;
  else
    v155 = 16536;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, unsigned __int8 *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v152 + 136))(v326, v152, v3, v246, *(_QWORD *)(v153 + v155), v228, v231, &v360, 0, 0);
  v308[0] = *(_OWORD *)v326;
  v308[1] = *(_OWORD *)&v326[2];
  v308[2] = *(_OWORD *)&v326[4];
  v309 = (char)v326[6];
  v156 = (uint64_t *)v326[0];
  sub_22E3C4C50(v86, v211, *(_QWORD *)(v3 + 320));
  sub_22E3C4C50(v223, (uint64_t)v156, *(_QWORD *)(v3 + 320));
  v380 = 257;
  v157 = sub_22E3C18F4((uint64_t)v76, 32, v156, v211, (uint64_t)&v378);
  v158 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v158, v212, v225, v157, 0);
  LOWORD(v326[4]) = 257;
  sub_22E3C12C8(v76, v158, (uint64_t)v326);
  sub_22E5ED9B4((_QWORD *)v3, v212, 0);
  if (v122 != 12)
  {
    v160 = llvm::Constant::getNullValue(v204, v159);
    sub_22E4D8D7C(v326);
    v244[1] = 0;
    v244[0] = v160;
    v245 &= 0xF8u;
    v232 = v326[0];
    v233 = *(_OWORD *)&v326[1];
    v234 = v326[3];
    v235 = v326[4];
    v236 = *(_OWORD *)&v326[5];
    v237 = v327;
    v238 = v328;
    v239 = *(_OWORD *)v329;
    v240 = *(_QWORD *)&v329[16];
    v241 = v330;
    v242 = v331;
    v243 = v332;
    sub_22E4DAAE0(v3, v244, &v232, 0, *(double *)&v326[4]);
  }
  if ((v218 & 1) == 0)
  {
    sub_22F0D4E74(v2);
    sub_22F256E20(v189, (uint64_t)v76, v173);
  }
  *(_BYTE *)(v3 + 2893) = v217;
  sub_22E48B274(v3, v220, v219, 0, 0);
  *(_QWORD *)(v3 + 2872) = v221;
  sub_22E5ED9B4((_QWORD *)v3, v229, 0);
  if (v357 != v359)
    free(v357);
  if (v354 != v356)
    free(v354);
  if (v351 != v353)
    free(v351);
  if (v344 != v346)
    free(v344);
  if (v372 != v374)
    free(v372);
  if (v369 != v371)
    free(v369);
  if (v366 != v368)
    free(v366);
  if ((__int128 *)v360 != &v361)
    free((void *)v360);
}

unsigned __int8 *sub_22E563BF8(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (*a2 == 173)
  {
    v5 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v6 = *(_QWORD *)(a1 + 2312);
    v7 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v8 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v5;
    v9 = sub_22E563BF8(a1, *((_QWORD *)a2 + 2));
    *(_BYTE *)(a1 + 2893) = v7;
    sub_22E48B274(a1, v5, v6, 0, 0);
    *(_QWORD *)(a1 + 2872) = v8;
    return (unsigned __int8 *)v9;
  }
  else
  {
    v13 = a1;
    v11 = sub_22E56580C(&v13, a2, a3);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) == 0)
      return sub_22F2731AC((_QWORD *)a1, *((_QWORD *)a2 + 1), v12);
    return (unsigned __int8 *)v12;
  }
}

uint64_t sub_22E563CC4(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int16 a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t Declaration;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t v19;

  v5 = (uint64_t *)a2;
  if (*(_BYTE *)(a2 + 16) != 19)
  {
    if (!*a3)
    {
      v10 = a1[18];
      Declaration = llvm::Intrinsic::getDeclaration();
      sub_22E565438(v10, Declaration);
      *a3 = Declaration;
    }
    v12 = *v5;
    v13 = a1[12];
    v18 = 257;
    v19 = sub_22E3C1740(a1 + 34, 49, (uint64_t)v5, v13, (uint64_t)v17);
    v14 = (llvm::Value *)*a3;
    if (*a3)
      v15 = *((_QWORD *)v14 + 3);
    else
      v15 = 0;
    v18 = 257;
    v16 = sub_22F24EEDC((uint64_t)a1, v15, v14, (uint64_t)&v19, 1, (uint64_t)v17);
    *((_WORD *)v16 + 9) = *((_WORD *)v16 + 9) & 0xFFFC | a5;
    v18 = 257;
    return sub_22E3C1740(a1 + 34, 49, (uint64_t)v16, v12, (uint64_t)v17);
  }
  return (uint64_t)v5;
}

uint64_t sub_22E563DDC(llvm::Instruction *a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::InlineAsm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t FunctionType;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t Declaration;
  _QWORD *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  _QWORD *v32;
  void *v33[3];
  void *__p;
  void *v35;
  _QWORD *v36;
  char v37[32];
  __int16 v38;
  void *v39;
  unsigned int v40;
  _QWORD v41[7];

  v41[6] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)a3[18];
  v7 = v6[104];
  v8 = *(llvm::InlineAsm **)(v7 + 352);
  if (!v8)
  {
    v9 = sub_22E699F3C(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9);
    if (!v10)
      goto LABEL_6;
    if ((*(_BYTE *)(*(_QWORD *)(a3[18] + 184) + 33) & 0x18) != 0)
    {
      if (!llvm::Module::getModuleFlag())
      {
        llvm::MDString::get();
        llvm::Module::addModuleFlag();
      }
LABEL_6:
      v8 = *(llvm::InlineAsm **)(v7 + 352);
      if (!v8)
        goto LABEL_19;
      goto LABEL_9;
    }
    llvm::FunctionType::get();
    v8 = (llvm::InlineAsm *)llvm::InlineAsm::get();
    *(_QWORD *)(v7 + 352) = v8;
    if (!v8)
      goto LABEL_19;
  }
LABEL_9:
  FunctionType = llvm::InlineAsm::getFunctionType(v8);
  sub_22E479DA0(*(llvm::Value **)(v7 + 352), (uint64_t)a3, &v39);
  v38 = 257;
  sub_22E47DDEC(a3 + 34, FunctionType, (uint64_t)v8, 0, 0, (uint64_t)v39, v40, (uint64_t)v37, 0);
  v12 = (char *)v39;
  if (v40)
  {
    v13 = 48 * v40;
    do
    {
      v14 = &v12[v13];
      v15 = *(void **)&v12[v13 - 24];
      if (v15)
      {
        *((_QWORD *)v14 - 2) = v15;
        operator delete(v15);
      }
      if (*(v14 - 25) < 0)
        operator delete(*((void **)v14 - 6));
      v13 -= 48;
    }
    while (v13);
    v12 = (char *)v39;
  }
  if (v12 != (char *)v41)
    free(v12);
LABEL_19:
  v16 = a3[18];
  v17 = *(_QWORD *)(v16 + 832);
  v18 = a2 == 0;
  if (a2)
    v19 = 288;
  else
    v19 = 344;
  if (a2)
    v20 = (uint64_t *)(v17 + 288);
  else
    v20 = (uint64_t *)(v17 + 344);
  if (v18)
    v21 = 235;
  else
    v21 = 226;
  Declaration = llvm::Intrinsic::getDeclaration();
  sub_22E565438(v16, Declaration);
  *(_QWORD *)(v17 + v19) = Declaration;
  v23 = (_QWORD *)a3[18];
  if ((*(_BYTE *)(v23[23] + 33) & 0x18) == 0
    || ((v24 = *(_DWORD *)(v23[27] + 56), v25 = v24 > 0x2A, v26 = (1 << v24) & 0x40000000028, !v25)
      ? (v27 = v26 == 0)
      : (v27 = 1),
        v27))
  {
    v28 = sub_22E699F3C(v23);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 144))(v28))
      v29 = 3;
    else
      v29 = 0;
    return sub_22E563CC4(a3, (uint64_t)a1, v20, v21, v29);
  }
  else
  {
    HIBYTE(v33[2]) = 22;
    strcpy((char *)v33, "clang.arc.attachedcall");
    v32 = operator new(8uLL);
    __p = v32;
    *v32 = Declaration;
    v35 = v32 + 1;
    v36 = v32 + 1;
    v30 = (void *)llvm::CallBase::addOperandBundle();
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v33[2]) < 0)
      operator delete(v33[0]);
    llvm::Instruction::copyMetadata();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(a1);
    v39 = v30;
    sub_22F273124((uint64_t)a3, (uint64_t)&v39, 1);
  }
  return (uint64_t)v30;
}

llvm::Value *sub_22E564168(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;
  _OWORD v13[3];
  _OWORD v14[3];

  if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 184) + 33) & 0x18) != 0)
  {
    v9 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v9;
    v13[2] = *(_OWORD *)(a2 + 32);
    v12 = 257;
    v10 = sub_22E3C2A7C(a1 + 34, (uint64_t)v13, (uint64_t)v11);
    return sub_22F27328C((llvm::Value *)a1, v10, a3);
  }
  else
  {
    v5 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 8), (llvm::PointerType *)a2);
    v6 = *(_OWORD *)(a2 + 16);
    v14[0] = *(_OWORD *)a2;
    v14[1] = v6;
    v14[2] = *(_OWORD *)(a2 + 32);
    return (llvm::Value *)sub_22F273398(a1, (uint64_t)v14, v5, 1);
  }
}

uint64_t sub_22E564218(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t Declaration;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  _QWORD v18[4];
  __int16 v19;
  __int128 v20[3];
  _OWORD v21[2];
  __int128 v22;

  if (!*a3)
  {
    v6 = a1[18];
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22E565438(v6, Declaration);
    *a3 = Declaration;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v9;
  v20[2] = v10;
  v11 = a1[12];
  v19 = 257;
  sub_22E3BEE6C(a1 + 34, v20, v11, (uint64_t)v18, (uint64_t)v21);
  v12 = v21[1];
  *(_OWORD *)a2 = v21[0];
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v22;
  v13 = (llvm::Value *)*a3;
  if (v13)
    v14 = *((_QWORD *)v13 + 3);
  else
    v14 = 0;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v15 = sub_22F28ABCC(a2, a1);
  else
    v15 = *(_QWORD *)a2;
  v18[0] = v15;
  LOWORD(v22) = 257;
  v16 = sub_22F24EEDC((uint64_t)a1, v14, v13, (uint64_t)v18, 1, (uint64_t)v21);
  if (v8 != a1[12])
  {
    LOWORD(v22) = 257;
    return sub_22E3C1740(a1 + 34, 49, (uint64_t)v16, v8, (uint64_t)v21);
  }
  return (uint64_t)v16;
}

uint64_t sub_22E56435C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t Declaration;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (!*a4)
  {
    v11 = a1[18];
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22E565438(v11, Declaration);
    *a4 = Declaration;
  }
  v13 = *a3;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v14 = sub_22F28ABCC(a2, a1);
  else
    v14 = *(_QWORD *)a2;
  v15 = a1[13];
  v24 = 257;
  v25[0] = sub_22E3C1740(a1 + 34, 49, v14, v15, (uint64_t)v23);
  v16 = a1[12];
  v22 = 257;
  v25[1] = sub_22E3C1740(a1 + 34, 49, (uint64_t)a3, v16, (uint64_t)v21);
  v17 = (llvm::Value *)*a4;
  if (*a4)
    v18 = *((_QWORD *)v17 + 3);
  else
    v18 = 0;
  v24 = 257;
  v19 = sub_22F24EEDC((uint64_t)a1, v18, v17, (uint64_t)v25, 2, (uint64_t)v23);
  if ((a6 & 1) != 0)
    return 0;
  v24 = 257;
  return sub_22E3C1740(a1 + 34, 49, (uint64_t)v19, v13, (uint64_t)v23);
}

uint64_t sub_22E5644CC(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v6;
  _OWORD v7[3];
  _OWORD v8[3];

  v3 = a1[18];
  if (*(_BYTE *)(a3 + 16) == 19 && (*(_BYTE *)(*(_QWORD *)(v3 + 184) + 33) & 0x18) == 0)
  {
    v6 = a2[1];
    v8[0] = *a2;
    v8[1] = v6;
    v8[2] = a2[2];
    return sub_22E3BEDDC(a1 + 34, a3, v8, 0);
  }
  else
  {
    v4 = a2[1];
    v7[0] = *a2;
    v7[1] = v4;
    v7[2] = a2[2];
    return sub_22E56435C(a1, (uint64_t)v7, (uint64_t *)a3, (uint64_t *)(*(_QWORD *)(v3 + 832) + 216), 217, 1);
  }
}

llvm::Value *sub_22E56455C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Declaration;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;
  __int128 v16[3];
  _OWORD v17[2];
  __int128 v18;

  v4 = a1[18];
  v5 = *(_QWORD *)(v4 + 832);
  if (!*(_QWORD *)(v5 + 208))
  {
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22E565438(v4, Declaration);
    *(_QWORD *)(v5 + 208) = Declaration;
  }
  v7 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v7;
  v16[2] = *(_OWORD *)(a2 + 32);
  v8 = a1[12];
  v15 = 257;
  sub_22E3BEE6C(a1 + 34, v16, v8, (uint64_t)v14, (uint64_t)v17);
  v9 = v17[1];
  *(_OWORD *)a2 = v17[0];
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = v18;
  v10 = *(llvm::Value **)(v5 + 208);
  if (v10)
    v11 = *((_QWORD *)v10 + 3);
  else
    v11 = 0;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v12 = sub_22F28ABCC(a2, a1);
  else
    v12 = *(_QWORD *)a2;
  v14[0] = v12;
  LOWORD(v18) = 257;
  return sub_22F24EEDC((uint64_t)a1, v11, v10, (uint64_t)v14, 1, (uint64_t)v17);
}

llvm::Value *sub_22E564668(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t Declaration;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if (!*a4)
  {
    v8 = a1[18];
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22E565438(v8, Declaration);
    *a4 = Declaration;
  }
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v10 = sub_22F28ABCC(a2, a1);
  else
    v10 = *(_QWORD *)a2;
  v11 = a1[13];
  v20 = 257;
  v21[0] = sub_22E3C1740(a1 + 34, 49, v10, v11, (uint64_t)v19);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v12 = sub_22F28ABCC(a3, a1);
  else
    v12 = *(_QWORD *)a3;
  v13 = a1[13];
  v18 = 257;
  v21[1] = sub_22E3C1740(a1 + 34, 49, v12, v13, (uint64_t)v17);
  v14 = (llvm::Value *)*a4;
  if (*a4)
    v15 = *((_QWORD *)v14 + 3);
  else
    v15 = 0;
  v20 = 257;
  return sub_22F24EEDC((uint64_t)a1, v15, v14, (uint64_t)v21, 2, (uint64_t)v19);
}

uint64_t sub_22E5647C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;

  v6 = (uint64_t *)a2;
  if (*(_BYTE *)(a2 + 16) != 19)
  {
    if (!a4[1])
    {
      v22[0] = a1[12];
      v13 = llvm::FunctionType::get();
      *a4 = sub_22E633A04(a1[18], v13, a5, a6, 0, 0, 0);
      a4[1] = v14;
      v15 = v14 && *(_BYTE *)(v14 + 16) == 0;
      if (v15 && a6 == 11 && *a5 == 0x7465725F636A626FLL && *(_QWORD *)((char *)a5 + 3) == 0x6E69617465725F63)
        llvm::Function::addFnAttr();
    }
    if (!a3)
      a3 = *v6;
    v18 = a1[12];
    v23 = 257;
    v24 = sub_22E3C1740(a1 + 34, 49, (uint64_t)v6, v18, (uint64_t)v22);
    v19 = *a4;
    v20 = (llvm::Value *)a4[1];
    v23 = 257;
    v21 = sub_22F24F1F4(a1, v19, v20, (uint64_t)&v24, 1, (uint64_t)v22);
    v23 = 257;
    return sub_22E3C1740(a1 + 34, 49, v21, a3, (uint64_t)v22);
  }
  return (uint64_t)v6;
}

llvm::Value *sub_22E564920(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _QWORD v5[4];
  __int16 v6;
  _OWORD v7[3];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v7[2] = a2[2];
  v6 = 257;
  v5[0] = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v7, (uint64_t)v5);
  return sub_22F272698(a1, (uint64_t)v5, 1);
}

uint64_t sub_22E564980(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (*a2 == 173)
  {
    v5 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v6 = *(_QWORD *)(a1 + 2312);
    v7 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v8 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v5;
    v9 = sub_22E564980(a1, *((_QWORD *)a2 + 2));
    *(_BYTE *)(a1 + 2893) = v7;
    sub_22E48B274(a1, v5, v6, 0, 0);
    *(_QWORD *)(a1 + 2872) = v8;
    return v9;
  }
  else
  {
    v13 = a1;
    v11 = sub_22E56580C(&v13, a2, a3);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      return sub_22E563CC4((_QWORD *)a1, v12, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 832) + 168), 208, 0);
    else
      return sub_22F2728A8((_QWORD *)a1, *((_QWORD *)a2 + 1), v12);
  }
}

BOOL sub_22E564A68(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;

  if (!a1)
    goto LABEL_20;
  do
  {
LABEL_2:
    v1 = a1;
    LODWORD(v2) = *a1;
    if (v2 > 0xD5)
    {
      if ((_DWORD)v2 == 233)
      {
        LODWORD(v2) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          return 1;
        v3 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v2 != 214)
          break;
        v3 = a1 + 24;
      }
    }
    else if ((_DWORD)v2 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return 1;
      v3 = a1 + 24;
      if (!a1[48])
        v3 = a1 + 32;
      LOBYTE(v2) = -101;
    }
    else
    {
      if ((_DWORD)v2 != 176)
        break;
      v2 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v2 == -1)
        return 1;
      v3 = &a1[8 * v2 + 40];
      LOBYTE(v2) = -80;
    }
    a1 = *(unsigned __int8 **)v3;
  }
  while (*(unsigned __int8 **)v3 != v1);
  if (v2 == 114)
    return 0;
  if ((v2 + 102) >= 0xF5u)
  {
    while (1)
    {
      v4 = (*(_DWORD *)v1 >> 18) & 0x7F;
      if (v4 > 0x3B)
        break;
      if (((1 << v4) & 0x22) == 0)
        return ((1 << v4) & 0xE00000000000010) == 0;
      a1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if (a1)
        goto LABEL_2;
LABEL_20:
      v1 = 0;
    }
  }
  return 1;
}

uint64_t sub_22E564B88(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v11;

  if (*a2 == 173)
  {
    v4 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v5 = *(_QWORD *)(a1 + 2312);
    v6 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v7 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v4;
    v8 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v11 = a1;
    v9 = sub_22E5661D8(&v11, v8, a3);
    *(_BYTE *)(a1 + 2893) = v6;
    sub_22E48B274(a1, v4, v5, 0, 0);
    *(_QWORD *)(a1 + 2872) = v7;
  }
  else
  {
    v11 = a1;
    return sub_22E5661D8(&v11, a2, a3);
  }
  return v9;
}

__n128 sub_22E564C34@<Q0>(llvm::Value *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  _OWORD v18[8];
  uint64_t v19;
  _OWORD v20[8];
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v9 = *(unsigned __int8 **)(a2 + 24);
  *(_QWORD *)&v24 = a1;
  v10 = sub_22E56580C((uint64_t *)&v24, v9, a5);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 10)
    {
      sub_22E4D8D7C(&v24);
      v18[6] = v30;
      v18[7] = v31;
      v19 = v32;
      v18[2] = v26;
      v18[3] = v27;
      v18[4] = v28;
      v18[5] = v29;
      v18[0] = v24;
      v18[1] = v25;
      v11 = sub_22F2734E0((uint64_t)a1, (uint64_t)v18, v11, a3);
      goto LABEL_6;
    }
    v11 = (uint64_t)sub_22F2731F8(a1, v11, 0);
  }
  sub_22E4D8D7C(&v24);
  v22[6] = v30;
  v22[7] = v31;
  v23 = v32;
  v22[2] = v26;
  v22[3] = v27;
  v22[4] = v28;
  v22[5] = v29;
  v22[0] = v24;
  v22[1] = v25;
  v12 = sub_22F25F748((uint64_t)a1, (uint64_t)v22, 0);
  v20[6] = v30;
  v20[7] = v31;
  v21 = v32;
  v20[2] = v26;
  v20[3] = v27;
  v20[4] = v28;
  v20[5] = v29;
  v20[0] = v24;
  v20[1] = v25;
  sub_22E4E87FC(a1, v11, v20, 0);
  sub_22F27328C(a1, v12, (v29 & 0x20) == 0);
LABEL_6:
  v13 = v31;
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v13;
  v14 = v32;
  v15 = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v16;
  result = v25;
  *(_OWORD *)a4 = v24;
  *(__n128 *)(a4 + 16) = result;
  *(_QWORD *)(a4 + 128) = v14;
  *(_QWORD *)(a4 + 136) = v11;
  return result;
}

unint64_t sub_22E564DEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v15[0] = *(_QWORD *)(a1 + 16816);
  v14 = 0x200000001;
  v15[1] = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16392) | 1, 0);
  LODWORD(v14) = 2;
  v2 = *(_QWORD *)(a1 + 16392);
  v5 = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v3 = sub_22EF63D8C(a1, v2, v15, 2uLL, (__int128 *)&v5, 0);
  if (v13 != v15)
    free(v13);
  return v3;
}

uint64_t sub_22E564F04(int a1, _DWORD *a2)
{
  unint64_t v2;
  _QWORD v4[2];

  if (a1 > 27)
    __asm { BR              X11 }
  if (a1 == 7)
    v2 = 13;
  else
    v2 = 0x8000000F0000000ALL;
  v4[0] = v2;
  v4[1] = 0;
  return sub_22E3B38EC(a2, v4);
}

void sub_22E564F94(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_22E564FA0(uint64_t *a1, const char *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[16];
  __int16 v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[3];

  v8 = a8;
  v48[2] = *MEMORY[0x24BDAC8D0];
  if (!a1[1])
  {
    v42 = v44;
    v43 = 0x200000000;
    if (a5)
    {
      LODWORD(v14) = 0;
      v17 = 8 * a5;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 8);
        if (v14 >= HIDWORD(v43))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v14) = v43;
        }
        *((_QWORD *)v42 + v14) = v18;
        v14 = (v43 + 1);
        LODWORD(v43) = v43 + 1;
        ++a4;
        v17 -= 8;
      }
      while (v17);
      v15 = (uint64_t *)v42;
    }
    else
    {
      v14 = 0;
      v15 = (uint64_t *)v44;
    }
    v19 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v8 + 144) + 280), *(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8), 0, 0, v15, v14, 0, a8, 0, 0, -1);
    v20 = *(_QWORD *)(v8 + 144);
    v21 = sub_22E46F2EC(v20 + 280, v19);
    v22 = 0;
    if (a2)
      v22 = strlen(a2);
    *a1 = sub_22E633A04(v20, v21, a2, v22, 0, 0, 0);
    a1[1] = v23;
    if (v42 != v44)
      free(v42);
  }
  v24 = *a1;
  v25 = (uint64_t *)(v8 + 272);
  v26 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8);
  v45 = 257;
  v27 = sub_22E3C1740((uint64_t *)(v8 + 272), 49, a6, v26, (uint64_t)&v42);
  v46 = v48;
  v48[0] = v27;
  v47 = 0x200000001;
  v28 = *(unsigned int *)(a7 + 8);
  if ((_DWORD)v28)
  {
    v41 = v8;
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)a7 + v31);
      v34 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (v32 + 2));
      v45 = 257;
      v35 = sub_22E3C1740(v25, 49, v33, v34, (uint64_t)&v42);
      v36 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v47;
      }
      *((_QWORD *)v46 + v36) = v35;
      ++v32;
      v29 = (v47 + 1);
      LODWORD(v47) = v47 + 1;
      v31 += 152;
    }
    while (v28 != v32);
    v30 = v46;
    v8 = v41;
  }
  else
  {
    v29 = 1;
    v30 = v48;
  }
  v37 = *a1;
  v38 = (llvm::Value *)a1[1];
  v45 = 257;
  v39 = sub_22F24F1F4((_QWORD *)v8, v37, v38, (uint64_t)v30, v29, (uint64_t)&v42);
  *(_WORD *)(v39 + 18) = *(_WORD *)(v39 + 18) & 0xF003 | (4 * *(_WORD *)(v8 + 136));
  if (v46 != v48)
    free(v46);
  return v39;
}

uint64_t **sub_22E565278(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_22E565344(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v7[3];

  v4 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 8), (llvm::PointerType *)a2);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a2 + 32);
  return sub_22F273398(a1, (uint64_t)v7, v4, 1);
}

llvm::APInt *sub_22E565398(uint64_t a1, _QWORD *a2, char a3)
{
  _BOOL4 v6;
  _OWORD v8[12];

  sub_22F26105C((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a2[199] + 120) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0);
  v6 = 0;
  v8[0] = v8[4];
  v8[1] = v8[5];
  v8[2] = v8[6];
  if ((a3 & 1) == 0)
    v6 = *(_BYTE *)(a1 + 32) != 0;
  return sub_22F25A27C(a2, (uint64_t)v8, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), *(void (**)(_QWORD *, void **, uint64_t))(a1 + 24), v6);
}

void sub_22E565438(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;

  if (a2)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      sub_22F274330(*(_QWORD *)(a1 + 152) + 400);
      if ((v4 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(a1 + 216) + 76) != 1)
      {
        v5 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 32) = v5 & 0xFFFFFFF0 | 9;
        if ((v5 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) == 0)
          *(_DWORD *)(a2 + 32) |= 0x4000u;
      }
    }
  }
}

uint64_t sub_22E5654B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t Descriptor;
  uint64_t v44;

  v10 = a2;
  v12 = a1 + 272;
  v14 = *(_QWORD *)(a1 + 320);
  v13 = *(_QWORD *)(a1 + 328);
  v15 = *(unsigned __int8 *)(a2 + 16);
  if (v15 < 0x1C
    || ((v15 - 33) <= 0x33
      ? (v16 = ((1 << (v15 - 33)) & 0x8000000000041) == 0)
      : (v16 = 1),
        v16 || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 72) + 16) + 8) == 7))
  {
LABEL_14:
    if (v15 <= 82)
    {
      if (v15 != 33)
      {
        if (v15 == 77)
        {
          sub_22E3CB840(v12, *(_QWORD *)(v10 + 40), v10 + 24);
          v22 = (uint64_t *)(v10 - 32);
          v23 = sub_22E5654B8(a1, *(_QWORD *)(v10 - 32), a3, a4, a5, a6);
          if (*(_QWORD *)(v10 - 32))
          {
            **(_QWORD **)(v10 - 16) = *(_QWORD *)(v10 - 24);
            v24 = *(_QWORD *)(v10 - 24);
            if (v24)
              *(_QWORD *)(v24 + 16) = *(_QWORD *)(v10 - 16);
          }
          *v22 = v23;
          if (v23)
          {
            v27 = *(_QWORD *)(v23 + 8);
            v25 = (uint64_t **)(v23 + 8);
            v26 = v27;
            *(_QWORD *)(v10 - 24) = v27;
            if (v27)
              *(_QWORD *)(v26 + 16) = v10 - 24;
            *(_QWORD *)(v10 - 16) = v25;
            *v25 = v22;
            if (v14)
              goto LABEL_46;
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        goto LABEL_43;
      }
      v28 = *(_QWORD *)(v10 - 96);
      v29 = *(_QWORD *)(v28 + 48);
LABEL_29:
      sub_22E3CB840(v12, v28, v29);
      v30 = a3(a4, a1, v10);
LABEL_44:
      v10 = v30;
LABEL_45:
      if (v14)
        goto LABEL_46;
LABEL_51:
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      return v10;
    }
    if (v15 == 83)
    {
      v31 = *(_DWORD *)(v10 + 20);
      if ((v31 & 0x7FFFFFF) == 2)
      {
        if ((v31 & 0x40000000) != 0)
        {
          v32 = *(_QWORD **)(v10 - 8);
          if (*(_BYTE *)(v32[4] + 16) != 19)
            goto LABEL_43;
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(v10 - 32) + 16) != 19)
            goto LABEL_43;
          v32 = (_QWORD *)(v10 - 64);
        }
        v33 = *(unsigned __int8 *)(*v32 + 16);
        if (v33 >= 0x1C)
        {
          v34 = v33 - 33;
          v35 = v34 > 0x33;
          v36 = (1 << v34) & 0x8000000000041;
          if (!v35 && v36 != 0)
          {
            if ((v31 & 0x40000000) != 0)
              v38 = *(_QWORD **)(v10 - 8);
            else
              v38 = (_QWORD *)(v10 - 64);
            v39 = sub_22E5654B8(a1, *v38, a3, a4, a5, a6);
            sub_22F245CA0(v10, 0, v39);
            if (v14)
              goto LABEL_46;
            goto LABEL_51;
          }
        }
      }
    }
    else if (v15 == 84)
    {
      v29 = *(_QWORD *)(v10 + 32);
      v28 = *(_QWORD *)(v10 + 40);
      goto LABEL_29;
    }
LABEL_43:
    v30 = a5(a6, a1, v10);
    goto LABEL_44;
  }
  v44 = *(_QWORD *)(a1 + 328);
  if ((*(_DWORD *)(a2 + 20) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)a2);
    if ((*(_DWORD *)(v10 + 20) & 0x80000000) != 0)
    {
      v41 = llvm::User::getDescriptor((llvm::User *)v10);
      v18 = v41 + v42;
    }
    else
    {
      v18 = 0;
    }
    v17 = Descriptor;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = v18 - v17;
  if ((v19 & 0xFFFFFFFF0) == 0)
  {
LABEL_13:
    v15 = *(unsigned __int8 *)(v10 + 16);
    v13 = v44;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (v19 >> 4);
  while (*(_DWORD *)(*(_QWORD *)(llvm::User::getDescriptor((llvm::User *)v10) + v20) + 8) != 6)
  {
    v20 += 16;
    if (!--v21)
      goto LABEL_13;
  }
  v10 = a5(a6, a1, v10);
  v13 = v44;
  if (!v14)
    goto LABEL_51;
LABEL_46:
  sub_22E3CB840(v12, v14, v13);
  return v10;
}

uint64_t sub_22E5657C0(uint64_t a1, _QWORD *a2, llvm::Instruction *a3)
{
  return sub_22E563DDC(a3, 0, a2);
}

uint64_t sub_22E5657D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22E5657D8(uint64_t a1, _QWORD *a2, llvm::Instruction *a3)
{
  return sub_22E563DDC(a3, 1, a2);
}

uint64_t sub_22E5657E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_22E563CC4(a2, a3, (uint64_t *)(*(_QWORD *)(a2[18] + 832) + 248), 222, 0);
}

unint64_t sub_22E56580C(uint64_t *a1, unsigned __int8 *a2, __n128 a3)
{
  int v3;
  unsigned int *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  llvm::PointerType *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _OWORD v64[8];
  uint64_t v65;
  uint64_t v66[7];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_21;
  do
  {
LABEL_2:
    v5 = (unsigned int *)a2;
    LODWORD(v6) = *a2;
    if (v6 > 0xD5)
    {
      if ((_DWORD)v6 == 233)
      {
        LODWORD(v6) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_93;
        v7 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v6 != 214)
          break;
        v7 = a2 + 24;
      }
    }
    else if ((_DWORD)v6 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_93;
      v7 = a2 + 24;
      if (!a2[48])
        v7 = a2 + 32;
      LOBYTE(v6) = -101;
    }
    else
    {
      if ((_DWORD)v6 != 176)
        break;
      v6 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v6 == -1)
        goto LABEL_93;
      v7 = &a2[8 * v6 + 40];
      LOBYTE(v6) = -80;
    }
    a2 = *(unsigned __int8 **)v7;
  }
  while (*(unsigned int **)v7 != v5);
  if ((v6 + 102) >= 0xF5u)
  {
    while (1)
    {
      v10 = (*v5 >> 18) & 0x7F;
      if (v10 != 5)
        break;
      v9 = (unsigned __int8 **)(v5 + 4);
LABEL_24:
      a2 = *v9;
      if (*v9)
        goto LABEL_2;
LABEL_21:
      v5 = 0;
    }
    if (((*v5 >> 18) & 0x7F) > 0x39)
    {
      switch(v10)
      {
        case ':':
          v27 = *((_QWORD *)v5 + 2);
          v28 = *a1 + 272;
          *(_QWORD *)&v76 = *a1;
          *((_QWORD *)&v76 + 1) = v28;
          LOBYTE(v77) = 0;
          *((_QWORD *)&v77 + 1) = *(_QWORD *)(*(_QWORD *)(v76 + 144) + 232);
          v29 = sub_22E50E974(&v76, v27, a3);
          return v29 | 4;
        case ';':
          v30 = (unsigned int *)*((_QWORD *)v5 + 2);
          v31 = *a1;
          *(_QWORD *)&v76 = v31;
          *((_QWORD *)&v76 + 1) = v31 + 272;
          LOBYTE(v77) = 0;
          *((_QWORD *)&v77 + 1) = *(_QWORD *)(*(_QWORD *)(v31 + 144) + 232);
LABEL_58:
          v32 = sub_22E50E974(&v76, v30, a3);
          v29 = sub_22E5654B8(v31, v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22E5657D8, (uint64_t)&v76, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22E5657E8, (uint64_t)&v67);
          return v29 | 4;
        case '<':
          v18 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
          if (sub_22E564A68(v18))
          {
            v20 = *a1 + 272;
            *(_QWORD *)&v76 = *a1;
            *((_QWORD *)&v76 + 1) = v20;
            LOBYTE(v77) = 0;
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(*(_QWORD *)(v76 + 144) + 232);
            v21 = sub_22E50E974(&v76, v18, v19);
          }
          else
          {
            v33 = sub_22E56580C(a1, v18);
            v17 = v33;
            if ((v33 & 4) != 0)
              return v17;
            v21 = v33 & 0xFFFFFFFFFFFFFFF8;
          }
          v29 = sub_22E563CC4((_QWORD *)*a1, v21, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 832) + 296), 227, 0);
          return v29 | 4;
      }
      goto LABEL_93;
    }
    if ((v10 - 43) < 3 || v10 == 1)
    {
      v12 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), *((llvm::LLVMContext **)v5 + 1));
      v13 = sub_22E56580C(a1, *((_QWORD *)v5 + 2));
      v14 = v13;
      v15 = v13 & 0xFFFFFFFFFFFFFFF8;
      v16 = (uint64_t *)(*a1 + 272);
      LOWORD(v78) = 257;
      return v14 & 7 | (unint64_t)sub_22E3C1740(v16, 49, v15, v12, (uint64_t)&v76);
    }
    if (v10 != 4)
      goto LABEL_93;
    v22 = (unsigned int *)*((_QWORD *)v5 + 2);
    v23 = (_QWORD *)*a1;
    if (v22)
    {
      while (1)
      {
        v5 = v22;
        v24 = *(unsigned __int8 *)v22;
        if (v24 > 213)
        {
          if (v24 == 233)
          {
            if ((*v5 & 0x7C0000) != 0x300000)
              goto LABEL_64;
            v26 = v5 + 4;
          }
          else
          {
            if (v24 != 214)
              goto LABEL_64;
            v26 = v5 + 6;
          }
        }
        else if (v24 == 155)
        {
          if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
            goto LABEL_64;
          if (*((_BYTE *)v5 + 48))
            v26 = v5 + 6;
          else
            v26 = v5 + 8;
        }
        else
        {
          if (v24 != 176)
            goto LABEL_64;
          v25 = v5[5];
          if ((_DWORD)v25 == -1)
            goto LABEL_64;
          v26 = &v5[2 * v25 + 10];
        }
        v22 = *(unsigned int **)v26;
        if (v22 == v5)
          goto LABEL_64;
      }
    }
    v5 = 0;
LABEL_64:
    v34 = *((_QWORD *)v5 + 1);
    v35 = (*v5 & 0x300) == 0x200 && (*((_QWORD *)v5 + 1) & 1) == 0;
    if (v35
      && (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 9) == 8
      && (*(_QWORD *)((*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x80)
    {
      sub_22E4D8D7C(&v76);
      v73 = v82;
      v74 = v83;
      v75 = v84;
      v69 = v78;
      v70 = v79;
      v71 = v80;
      v72 = v81;
      v67 = v76;
      v68 = v77;
      sub_22E4D7B28(v23, (uint64_t)&v67, 0, (uint64_t)v66);
      v36 = v66[0];
      v38 = llvm::ConstantPointerNull::get((llvm::ConstantPointerNull *)v77, v37);
      v64[6] = v82;
      v64[7] = v83;
      v65 = v84;
      v64[2] = v78;
      v64[3] = v79;
      v64[4] = v80;
      v64[5] = v81;
      v64[0] = v76;
      v64[1] = v77;
      sub_22E4E87FC(v23, v38, v64, 0);
      return v36 | 4;
    }
    v39 = v23[18];
    if ((*(_BYTE *)(*(_QWORD *)(v39 + 152) + 1) & 1) != 0
      && (v34 & 4) == 0
      && (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xCLL) == 8
      && (*v5 & 0xFE) == 0x70
      && (*(_QWORD *)((*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
    {
      if ((*v5 & 0xFC0000) == 0x540000)
      {
        *(_QWORD *)&v76 = v23;
        *((_QWORD *)&v76 + 1) = v23 + 34;
        LOBYTE(v77) = 0;
        v40 = *(_QWORD *)(v39 + 232);
LABEL_94:
        *((_QWORD *)&v77 + 1) = v40;
        return sub_22E50E974(&v76, v5, a3) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    else if (*v5 == 161)
    {
      *(_QWORD *)&v76 = sub_22E4E6434((uint64_t)v23, (uint64_t)v5);
      if ((_QWORD)v76)
      {
        v41 = sub_22E4E6920(v23, (uint64_t *)&v76, (uint64_t)v5);
        v42 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v42 & 8) != 0)
          v43 = 4 * ((*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 192);
        else
          v43 = 0;
        return v43 | v41 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    sub_22E4D8D7C(&v62);
    return sub_22E566124(v23, (uint64_t)&v62, v34);
  }
  if ((v6 & 0xFE) == 0x70)
  {
    v8 = (*v5 >> 18) & 0x3F;
    if (v8 == 32)
    {
      sub_22E4D89CC(*a1);
      sub_22E47E098(*a1);
      v9 = (unsigned __int8 **)(v5 + 6);
      goto LABEL_24;
    }
    if (v8 == 21)
    {
      v44 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v44 & 8) != 0)
        __asm { BR              X10 }
    }
    goto LABEL_93;
  }
  if ((v6 + 118) < 5u)
    goto LABEL_88;
  if (v6 == 114)
  {
    v47 = *a1 + 272;
    *(_QWORD *)&v76 = *a1;
    *((_QWORD *)&v76 + 1) = v47;
    LOBYTE(v77) = 0;
    *((_QWORD *)&v77 + 1) = *(_QWORD *)(*(_QWORD *)(v76 + 144) + 232);
    v17 = sub_22E50E974(&v76, v5, a3) & 0xFFFFFFFFFFFFFFFBLL;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 184) + 33) & 4) != 0)
      v17 |= *(_WORD *)(*((_QWORD *)v5 + 2) + 50) & 4;
  }
  else
  {
    if (v6 != 217)
    {
      if (v6 == 200 && (*((_BYTE *)v5 + 27) & 2) == 0)
      {
LABEL_88:
        v31 = *a1;
        *(_QWORD *)&v76 = v31;
        *((_QWORD *)&v76 + 1) = v31 + 272;
        LOBYTE(v77) = 0;
        *((_QWORD *)&v77 + 1) = *(_QWORD *)(*(_QWORD *)(v31 + 144) + 232);
        v30 = v5;
        goto LABEL_58;
      }
LABEL_93:
      v45 = *a1 + 272;
      *(_QWORD *)&v76 = *a1;
      *((_QWORD *)&v76 + 1) = v45;
      LOBYTE(v77) = 0;
      v40 = *(_QWORD *)(*(_QWORD *)(v76 + 144) + 232);
      goto LABEL_94;
    }
    *(_QWORD *)&v76 = &v77;
    *((_QWORD *)&v76 + 1) = 0x400000000;
    v48 = *v5;
    if (v48 >> 26)
      v49 = *(_QWORD *)((char *)v5 + ((v48 >> 23) & 0x1F8) + 16);
    else
      v49 = 0;
    v50 = (v48 >> 18);
    if (8 * v50 == 8)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v51 = (uint64_t *)(v5 + 6);
      v52 = 8 * v50 - 8;
      do
      {
        v53 = *v51;
        if (*(unsigned __int8 *)*v51 == 210)
        {
          *(_QWORD *)&v62 = 0;
          v63 = 0;
          if (v53 == v49)
          {
            v17 = sub_22E56580C(a1, *(_QWORD *)(v49 + 16));
            v54 = *a1;
            v3 &= 0xFFFFFFF8;
            v55 = *a1 + 4088;
            *(_QWORD *)&v67 = v49;
            *((_QWORD *)&v67 + 1) = v17 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)&v68 = 0;
            BYTE8(v70) = v3;
            sub_22F25406C(v55, &v67, (__int128 *)((char *)&v67 + 8), (uint64_t)v64);
            v67 = v17 & 0xFFFFFFFFFFFFFFF8;
            LOBYTE(v70) = v3;
            v56 = sub_22F297CB8(v54, &v67);
            *(_QWORD *)&v62 = v49;
            BYTE8(v62) = 0;
            v63 = v56;
          }
          else
          {
            sub_22F253B0C(*a1, v53, *(_QWORD *)(v53 + 16), (uint64_t)&v67);
            v62 = v67;
            v63 = v68;
          }
          v57 = sub_22E4EF088((uint64_t)&v76, (unint64_t)&v62, 1);
          v58 = v76 + 24 * DWORD2(v76);
          v59 = *(_OWORD *)v57;
          *(_QWORD *)(v58 + 16) = *(_QWORD *)(v57 + 16);
          *(_OWORD *)v58 = v59;
          ++DWORD2(v76);
        }
        else if (v53 == v49)
        {
          v17 = sub_22E56580C(a1, v49);
        }
        else
        {
          sub_22E4D89CC(*a1);
        }
        ++v51;
        v52 -= 8;
      }
      while (v52);
      if (DWORD2(v76))
      {
        v60 = 0;
        v61 = 24 * DWORD2(v76);
        do
        {
          sub_22F254324(v76 + v60, *a1);
          v60 += 24;
        }
        while (v61 != v60);
      }
    }
    if ((__int128 *)v76 != &v77)
      free((void *)v76);
  }
  return v17;
}

unint64_t sub_22E566124(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[8];
  uint64_t v13;
  _OWORD v14[4];

  v3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0 && (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
  {
    v4 = *(_OWORD *)(a2 + 24);
    v14[0] = *(_OWORD *)(a2 + 8);
    v14[1] = v4;
    v14[2] = *(_OWORD *)(a2 + 40);
    v5 = sub_22E564218(a1, (uint64_t)v14, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 232));
    v6 = 4;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 112);
    v12[6] = *(_OWORD *)(a2 + 96);
    v12[7] = v7;
    v13 = *(_QWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 48);
    v12[2] = *(_OWORD *)(a2 + 32);
    v12[3] = v8;
    v9 = *(_OWORD *)(a2 + 80);
    v12[4] = *(_OWORD *)(a2 + 64);
    v12[5] = v9;
    v10 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v10;
    sub_22E4D7B28(a1, (uint64_t)v12, 0, (uint64_t)v14);
    v6 = 0;
    v5 = *(_QWORD *)&v14[0];
  }
  return v5 & 0xFFFFFFFFFFFFFFFBLL | v6;
}

uint64_t sub_22E5661D8(uint64_t *a1, unsigned __int8 *a2, __n128 a3)
{
  int v3;
  unsigned int *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_21;
  do
  {
LABEL_2:
    v5 = (unsigned int *)a2;
    LODWORD(v6) = *a2;
    if (v6 > 0xD5)
    {
      if ((_DWORD)v6 == 233)
      {
        LODWORD(v6) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_30;
        v7 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v6 != 214)
          break;
        v7 = a2 + 24;
      }
    }
    else if ((_DWORD)v6 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_30;
      v7 = a2 + 24;
      if (!a2[48])
        v7 = a2 + 32;
      LOBYTE(v6) = -101;
    }
    else
    {
      if ((_DWORD)v6 != 176)
        break;
      v6 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v6 == -1)
        goto LABEL_30;
      v7 = &a2[8 * v6 + 40];
      LOBYTE(v6) = -80;
    }
    a2 = *(unsigned __int8 **)v7;
  }
  while (*(unsigned int **)v7 != v5);
  if ((v6 + 102) < 0xF5u)
  {
    if ((v6 & 0xFE) == 0x70)
    {
      v8 = (*v5 >> 18) & 0x3F;
      if (v8 == 32)
      {
        sub_22E4D89CC(*a1);
        sub_22E47E098(*a1);
        v9 = (unsigned __int8 **)(v5 + 6);
        goto LABEL_24;
      }
      if (v8 == 21)
      {
        v21 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v21 & 8) != 0)
          __asm { BR              X10 }
      }
    }
    else if ((v6 + 118) >= 5u && v6 == 217)
    {
      v46 = &v48;
      v47 = 0x400000000;
      v25 = *v5;
      if (v25 >> 26)
        v26 = *(_QWORD *)((char *)v5 + ((v25 >> 23) & 0x1F8) + 16);
      else
        v26 = 0;
      v27 = (v25 >> 18);
      if (8 * v27 == 8)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v28 = (uint64_t *)(v5 + 6);
        v29 = 8 * v27 - 8;
        do
        {
          v30 = *v28;
          if (*(unsigned __int8 *)*v28 == 210)
          {
            *(_QWORD *)&v39 = 0;
            v40 = 0;
            if (v30 == v26)
            {
              v14 = sub_22E5661D8(a1, *(_QWORD *)(v26 + 16));
              v31 = *a1;
              v3 &= 0xFFFFFFF8;
              v32 = *a1 + 4088;
              *(_QWORD *)&v41 = v26;
              *((_QWORD *)&v41 + 1) = v14;
              *(_QWORD *)&v42 = 0;
              v44 = v3;
              sub_22F25406C(v32, &v41, (__int128 *)((char *)&v41 + 8), (uint64_t)&v45);
              v41 = (unint64_t)v14;
              v43 = v3;
              v33 = sub_22F297CB8(v31, &v41);
              *(_QWORD *)&v39 = v26;
              BYTE8(v39) = 0;
              v40 = v33;
            }
            else
            {
              sub_22F253B0C(*a1, v30, *(_QWORD *)(v30 + 16), (uint64_t)&v41);
              v39 = v41;
              v40 = v42;
            }
            v34 = sub_22E4EF088((uint64_t)&v46, (unint64_t)&v39, 1);
            v35 = &v46[24 * v47];
            v36 = *(_OWORD *)v34;
            *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
            *(_OWORD *)v35 = v36;
            LODWORD(v47) = v47 + 1;
          }
          else if (v30 == v26)
          {
            v14 = sub_22E5661D8(a1, v26);
          }
          else
          {
            sub_22E4D89CC(*a1);
          }
          ++v28;
          v29 -= 8;
        }
        while (v29);
        if ((_DWORD)v47)
        {
          v37 = 0;
          v38 = 24 * v47;
          do
          {
            sub_22F254324((uint64_t)&v46[v37], *a1);
            v37 += 24;
          }
          while (v38 != v37);
        }
      }
      if (v46 != &v48)
        free(v46);
      return v14;
    }
    goto LABEL_30;
  }
  while (1)
  {
    v10 = (*v5 >> 18) & 0x7F;
    if (v10 != 5)
      break;
    v9 = (unsigned __int8 **)(v5 + 4);
LABEL_24:
    a2 = *v9;
    if (*v9)
      goto LABEL_2;
LABEL_21:
    v5 = 0;
  }
  if (((*v5 >> 18) & 0x7F) <= 0x39)
  {
    if ((v10 - 43) < 3 || v10 == 1)
    {
      v17 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(*a1 + 144) + 280), *((llvm::LLVMContext **)v5 + 1));
      v18 = sub_22E5661D8(a1, *((_QWORD *)v5 + 2));
      v19 = (uint64_t *)(*a1 + 272);
      v50 = 257;
      return sub_22E3C1740(v19, 49, v18, v17, (uint64_t)&v46);
    }
    if (v10 == 4)
    {
      v12 = (unsigned int *)*((_QWORD *)v5 + 2);
      v20 = *a1 + 272;
      v46 = (char *)*a1;
      v47 = v20;
      v48 = 0;
      v49 = *(_QWORD *)(*((_QWORD *)v46 + 18) + 232);
      return sub_22E50E974(&v46, v12, a3);
    }
LABEL_30:
    v11 = *a1 + 272;
    v46 = (char *)*a1;
    v47 = v11;
    v48 = 0;
    v49 = *(_QWORD *)(*((_QWORD *)v46 + 18) + 232);
    v12 = v5;
    return sub_22E50E974(&v46, v12, a3);
  }
  if (v10 == 58)
  {
    v22 = *((_QWORD *)v5 + 2);
    v23 = *a1 + 272;
    v46 = (char *)*a1;
    v47 = v23;
    v48 = 0;
    v49 = *(_QWORD *)(*((_QWORD *)v46 + 18) + 232);
    v14 = sub_22E50E974(&v46, v22, a3);
    sub_22F272F6C(*a1, v24, v14);
    return v14;
  }
  if (v10 == 59)
    return sub_22F273DB8(*a1, *((_QWORD *)v5 + 2), 1, a3);
  if (v10 != 60)
    goto LABEL_30;
  return sub_22F273F1C((_QWORD *)*a1, *((unsigned __int8 **)v5 + 2));
}

uint64_t sub_22E5667BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;

  v2 = *a1;
  v3 = llvm::ConstantInt::get();
  v4 = *(_DWORD *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  v5 = *a1;
  v6 = llvm::ConstantInt::get();
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v7) = v6;
  ++*(_DWORD *)(v5 + 8);
  v8 = *a1;
  v9 = llvm::ConstantInt::get();
  v10 = *(_DWORD *)(v8 + 8);
  if (v10 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v10) = v9;
  ++*(_DWORD *)(v8 + 8);
  v11 = *a1;
  result = llvm::ConstantInt::get();
  v13 = result;
  v14 = *(_DWORD *)(v11 + 8);
  if (v14 >= *(_DWORD *)(v11 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v14) = v13;
  ++*(_DWORD *)(v11 + 8);
  return result;
}

_QWORD *sub_22E5669CC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F275350(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22E566A8C(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_22E3B3F8C();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = a2;
  v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_22E566B60(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[7];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19[2];
  _BYTE v20[1216];
  void *v21;
  uint64_t v22;
  _BYTE v23[192];
  void *v24;
  uint64_t v25;
  _BYTE v26[16];
  void *v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v3 = a2[200];
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if (v5)
    v6 = v5 - 6;
  else
    v6 = 0;
  v7 = v6[11];
  if (sub_22F3B46CC(v7))
  {
    v8 = *((_DWORD *)v6 + 7) & 0x7F;
    v9 = sub_22F272828(a2);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v21 = v23;
    v22 = 0x100000000;
    v24 = v26;
    v25 = 0x100000000;
    v27 = v29;
    v28 = 0x200000000;
    v29[4] = 0;
    v10 = a2[18];
    v11 = *(_QWORD *)(v10 + 784);
    if (!v11)
    {
      v12 = v9;
      sub_22F298C2C((_QWORD *)a2[18]);
      v9 = v12;
      v11 = *(_QWORD *)(v10 + 784);
      v10 = a2[18];
    }
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v18 = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD, unint64_t, BOOL, uint64_t, _BYTE, void **, uint64_t))(*(_QWORD *)v11 + 144))(v13, v11, a2, v14, *(_QWORD *)(*(_QWORD *)(v10 + 144) + 16392), *(_QWORD *)(v3 + 40), v7, v8 == 20, v9, 0, v19, v3);
    if (v27 != v29)
      free(v27);
    if (v24 != v26)
      free(v24);
    if (v21 != v23)
      free(v21);
    if (v19[0] != v20)
      free(v19[0]);
  }
}

unint64_t sub_22E566D28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

llvm::Value *sub_22E566DA0(uint64_t a1, llvm::Value *a2)
{
  return sub_22F27328C(a2, *(_QWORD *)(a1 + 8), 0);
}

llvm::Value *sub_22E566DB4(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;

  v3 = sub_22F24BFC0((uint64_t)a2, *(_QWORD *)(a1 + 8));
  return sub_22F27328C(a2, v3, 0);
}

llvm::Value *sub_22E566DE8(uint64_t a1, uint64_t a2)
{
  return sub_22F273810(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_22E566DF8(uint64_t a1, uint64_t a2)
{
  return sub_22F273B80(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_22E566E08(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E5704F8(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_24FA64690;
  v7 = (_QWORD *)(v6 + 1176);
  *(_QWORD *)(v6 + 1176) = 0;
  v8 = (_QWORD *)(v6 + 1216);
  *(_OWORD *)(v6 + 1192) = 0u;
  *(_OWORD *)(v6 + 1208) = 0u;
  *(_OWORD *)(v6 + 1232) = 0u;
  *(_OWORD *)(v6 + 1248) = 0u;
  *(_OWORD *)(v6 + 1272) = 0u;
  *(_OWORD *)(v6 + 1288) = 0u;
  *(_OWORD *)(v6 + 1312) = 0u;
  *(_OWORD *)(v6 + 1328) = 0u;
  *(_OWORD *)(v6 + 1352) = 0u;
  *(_OWORD *)(v6 + 1368) = 0u;
  *(_OWORD *)(v6 + 1392) = 0u;
  *(_OWORD *)(v6 + 1408) = 0u;
  *(_OWORD *)(v6 + 1432) = 0u;
  *(_OWORD *)(v6 + 1448) = 0u;
  *(_QWORD *)(v6 + 1480) = 0;
  *(_QWORD *)(v6 + 1472) = 0;
  *(_QWORD *)(v6 + 1488) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 152);
  v10 = *(_QWORD *)(v6 + 128);
  v11 = *(_QWORD *)(v6 + 88);
  v18 = *(_QWORD *)(v6 + 136);
  v19 = v18;
  v20 = v18;
  v21 = v10;
  v22 = v11;
  *(_QWORD *)(a1 + 1504) = llvm::StructType::get();
  *(_QWORD *)(a1 + 1496) = llvm::PointerType::get();
  sub_22E570D30(v7, *(_QWORD *)(a1 + 8), (uint64_t)"objc_msg_lookup_sender");
  sub_22E5671BC(v8, *(_QWORD *)(a1 + 8), (uint64_t)"objc_slot_lookup_super");
  if (!*(_BYTE *)(a1 + 220))
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 1) & 1) != 0)
    {
      llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), v12);
      sub_22E570DD4((_QWORD *)(a1 + 800), *(_QWORD *)(a1 + 8), (uint64_t)"__cxa_begin_catch");
      *(_QWORD *)(a1 + 840) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 856) = "__cxa_end_catch";
      *(_QWORD *)(a1 + 872) = 0;
      *(_QWORD *)(a1 + 864) = 0;
      *(_QWORD *)(a1 + 848) = llvm::FunctionType::get();
      v14 = (_QWORD *)(a1 + 760);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = "_Unwind_Resume_or_Rethrow";
    }
    else
    {
      v18 = 0x8000000700000001;
      v19 = 0;
      if ((sub_22E3B38EC((_DWORD *)(v9 + 404), &v18) & 1) != 0)
        goto LABEL_8;
      llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), v13);
      sub_22E570DD4((_QWORD *)(a1 + 800), *(_QWORD *)(a1 + 8), (uint64_t)"objc_begin_catch");
      *(_QWORD *)(a1 + 840) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 856) = "objc_end_catch";
      *(_QWORD *)(a1 + 872) = 0;
      *(_QWORD *)(a1 + 864) = 0;
      *(_QWORD *)(a1 + 848) = llvm::FunctionType::get();
      v14 = (_QWORD *)(a1 + 760);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = "objc_exception_rethrow";
    }
    sub_22E570DD4(v14, v15, (uint64_t)v16);
    goto LABEL_8;
  }
  llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), v12);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 776) = "objc_exception_rethrow";
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 768) = llvm::FunctionType::get();
LABEL_8:
  llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), v13);
  sub_22E570E74((_QWORD *)(a1 + 1256), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setProperty_atomic");
  sub_22E570E74((_QWORD *)(a1 + 1296), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setProperty_atomic_copy");
  sub_22E570E74((_QWORD *)(a1 + 1336), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setProperty_nonatomic");
  sub_22E570E74((_QWORD *)(a1 + 1376), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setProperty_nonatomic_copy");
  sub_22E570D30((_QWORD *)(a1 + 1456), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setCppObjectAtomic");
  sub_22E570D30((_QWORD *)(a1 + 1416), *(_QWORD *)(a1 + 8), (uint64_t)"objc_getCppObjectAtomic");
  return a1;
}

void sub_22E5671BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[1] = llvm::FunctionType::get();
}

uint64_t sub_22E56725C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64490;
  sub_22F275768(a1 + 1584);
  v6 = (void **)(a1 + 1560);
  sub_22E5792AC(&v6);
  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22E56730C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64490;
  sub_22F275768(a1 + 1584);
  v6 = (void **)(a1 + 1560);
  sub_22E5792AC(&v6);
  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return MEMORY[0x2348A0E9C](a1, 0x10F1C4006E22A93);
}

uint64_t sub_22E5673D0(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::GlobalValue *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  llvm::Type *v11;
  llvm::Type *v12;
  uint64_t v13;
  int v14;
  char **v15;
  char **v16;
  std::string::size_type v17;
  llvm::Constant *v18;
  llvm::GlobalValue *v19;
  llvm::GlobalValue *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  llvm::GlobalValue *v31;
  std::string::size_type v32;
  int v33;
  unsigned int v34;
  llvm::LLVMContext *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::GlobalValue *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  llvm::Value **v43;
  llvm::Value **i;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *j;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  uint64_t size;
  _BYTE *v56;
  size_t v57;
  const char *v58;
  size_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::BasicBlock *v66;
  uint64_t Context;
  uint64_t v68;
  uint64_t k;
  uint64_t *v70;
  llvm::LLVMContext *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string v79;
  uint64_t v80[3];
  _QWORD v81[4];
  std::string v82;
  __int16 v83;
  _BYTE __dst[32];
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  uint64_t v100[2];
  const char *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  _QWORD v106[3];
  char v107;
  void *v108[2];
  _QWORD v109[6];
  llvm::Type *v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[3];
  std::string v121;
  __int16 v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), a2);
  v3 = llvm::FunctionType::get();
  v101 = ".objcv2_load_function";
  v105 = 259;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x78);
  v6 = MEMORY[0x23489F6FC](v5, v3, 3, 0xFFFFFFFFLL, &v101, v4);
  v7 = *(_DWORD *)(v6 + 32);
  v8 = v7 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(v6 + 32) = v8;
  if ((v7 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v5) & 1) != 0)
      goto LABEL_5;
    v8 = *((_DWORD *)v5 + 8);
  }
  *((_DWORD *)v5 + 8) = v8 | 0x4000;
LABEL_5:
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  v101 = "entry";
  v105 = 259;
  operator new();
  v9 = llvm::BasicBlock::BasicBlock();
  v10 = *(const char **)(a1 + 8);
  v11 = *(llvm::Type **)(a1 + 248);
  v108[0] = v109;
  v108[1] = (void *)0x200000000;
  v110 = v11;
  v111 = &v119;
  v112 = v120;
  v113 = 0;
  v114 = 0;
  v115 = 512;
  v116 = 7;
  v118 = 0;
  v117 = 0;
  v119 = MEMORY[0x24BED83B8] + 16;
  v120[0] = &off_24FA66C70;
  v120[1] = 0;
  v120[2] = v10;
  v109[4] = v9;
  v109[5] = v9 + 40;
  v101 = v10;
  v102 = &v104;
  v103 = 0x1000000000;
  memset(v106, 0, sizeof(v106));
  v81[2] = 0;
  v81[3] = 0;
  v80[0] = (uint64_t)&v101;
  v80[1] = 0;
  v80[2] = 0;
  v81[0] = 0;
  *(_DWORD *)((char *)v81 + 7) = 0;
  v107 = 1;
  sub_22F246F08(v80);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(*(_QWORD *)(v13 + 216) + 76);
  if (v14 == 1)
    v15 = off_24FA64AC8;
  else
    v15 = off_24FA64B08;
  if (v14 == 1)
    v16 = off_24FA64B08;
  else
    v16 = (char **)&unk_24FA64B48;
  if (v15 != v16)
  {
    while (1)
    {
      if (*v15)
        v17 = strlen(*v15);
      else
        v17 = 0;
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)*v15;
      v121.__r_.__value_.__l.__size_ = v17;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        v18 = *(llvm::Constant **)(a1 + 1616);
        if (!v18)
        {
          *(_QWORD *)(a1 + 1616) = llvm::StructType::create();
          llvm::StructType::setBody();
          v18 = *(llvm::Constant **)(a1 + 1616);
        }
        v82.__r_.__value_.__r.__words[0] = 0;
        v82.__r_.__value_.__r.__words[0] = llvm::Constant::getNullValue(v18, v12);
        *(_QWORD *)__dst = a1;
        *(_QWORD *)&__dst[8] = &v82;
        *(_QWORD *)&__dst[16] = &v121;
        v19 = sub_22E579860((uint64_t)__dst, (uint64_t)"__start_", 8, (uint64_t)"$a", 2);
        v20 = sub_22E579860((uint64_t)__dst, (uint64_t)"__stop", 6, (uint64_t)"$z", 2);
        goto LABEL_27;
      }
      v19 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
      *(_QWORD *)__dst = "__start_";
      *(_QWORD *)&__dst[8] = 8;
      *(_OWORD *)&__dst[16] = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
      LOWORD(v85) = 1285;
      v21 = llvm::GlobalVariable::GlobalVariable();
      v22 = *(_DWORD *)(v21 + 32);
      v23 = v22 & 0xFFFFFFCF | 0x10;
      *(_DWORD *)(v21 + 32) = v23;
      if ((v22 & 0xFu) - 7 >= 2)
      {
        if ((llvm::GlobalValue::hasExternalWeakLinkage(v19) & 1) != 0)
          goto LABEL_23;
        v23 = *((_DWORD *)v19 + 8);
      }
      *((_DWORD *)v19 + 8) = v23 | 0x4000;
LABEL_23:
      v20 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
      *(_QWORD *)__dst = "__stop_";
      *(_QWORD *)&__dst[8] = 7;
      *(_OWORD *)&__dst[16] = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
      LOWORD(v85) = 1285;
      v24 = llvm::GlobalVariable::GlobalVariable();
      v25 = *(_DWORD *)(v24 + 32);
      v26 = v25 & 0xFFFFFFCF | 0x10;
      *(_DWORD *)(v24 + 32) = v26;
      if ((v25 & 0xFu) - 7 < 2)
        goto LABEL_26;
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v20) & 1) == 0)
      {
        v26 = *((_DWORD *)v20 + 8);
LABEL_26:
        *((_DWORD *)v20 + 8) = v26 | 0x4000;
      }
LABEL_27:
      v27 = v80[0];
      v28 = *(unsigned int *)(v80[0] + 16);
      if (v28 >= *(unsigned int *)(v80[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = *(unsigned int *)(v27 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v28) = v19;
      ++*(_DWORD *)(v27 + 16);
      v29 = v80[0];
      v30 = *(unsigned int *)(v80[0] + 16);
      if (v30 >= *(unsigned int *)(v80[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = *(unsigned int *)(v29 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v30) = v20;
      ++*(_DWORD *)(v29 + 16);
      if (++v15 == v16)
      {
        v13 = *(_QWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_QWORD *)__dst = *(unsigned __int8 *)(v13 + 130);
  v82.__r_.__value_.__s.__data_[0] = 0;
  LODWORD(v121.__r_.__value_.__l.__data_) = 3;
  v31 = (llvm::GlobalValue *)sub_22F2763B0(v80);
  v32 = (std::string::size_type)v31;
  v33 = *((_DWORD *)v31 + 8);
  v34 = v33 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v31 + 8) = v34;
  if ((v33 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v31) & 1) != 0)
      goto LABEL_37;
    v34 = *(_DWORD *)(v32 + 32);
  }
  *(_DWORD *)(v32 + 32) = v34 | 0x4000;
LABEL_37:
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  v82.__r_.__value_.__r.__words[0] = v32;
  *(_QWORD *)__dst = &__dst[16];
  *(_QWORD *)&__dst[16] = *(_QWORD *)v32;
  *(_QWORD *)&__dst[8] = 0x800000001;
  llvm::Type::getVoidTy(v110, v35);
  v36 = llvm::FunctionType::get();
  v37 = sub_22E633A04(*(_QWORD *)(a1 + 8), v36, "__objc_load", 0xBuLL, 0, 0, 0);
  v122 = 257;
  sub_22E462B78((uint64_t *)v108, v37, v38, (uint64_t)&v82, 1, (uint64_t)&v121, 0);
  if (*(_BYTE **)__dst != &__dst[16])
    free(*(void **)__dst);
  sub_22E3CF118((uint64_t *)v108);
  sub_22E6242E0(*(uint64_t **)(a1 + 8), (uint64_t)v5);
  v39 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
  *(_QWORD *)__dst = ".objc_ctor";
  LOWORD(v85) = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v40 = *((_DWORD *)v39 + 8);
  v41 = v40 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v39 + 8) = v41;
  if ((v40 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v39) & 1) != 0)
      goto LABEL_43;
    v41 = *((_DWORD *)v39 + 8);
  }
  *((_DWORD *)v39 + 8) = v41 | 0x4000;
LABEL_43:
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  v42 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)__dst = v39;
  sub_22E62C508((uint64_t *)(v42 + 1416), (uint64_t *)__dst);
  v43 = *(llvm::Value ***)(a1 + 296);
  for (i = *(llvm::Value ***)(a1 + 304); v43 != i; ++v43)
  {
    v45 = llvm::Value::stripPointerCasts(*v43);
    v46 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76);
    __dst[23] = 11;
    if (v46 == 1)
    {
      strcpy(__dst, ".objcrt$CAT");
      std::string::append((std::string *)__dst, "$m");
    }
    else
    {
      strcpy(__dst, "__objc_cats");
    }
    llvm::GlobalObject::setSection();
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v47 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)__dst = v45;
    sub_22E62C508((uint64_t *)(v47 + 1416), (uint64_t *)__dst);
  }
  v48 = *(__int128 **)(a1 + 696);
  for (j = *(__int128 **)(a1 + 704); v48 != j; v48 += 3)
  {
    sub_22E579A24(__dst, v48);
    *((_BYTE *)&v82.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v82, ".objc_class_alias");
    if (v86 >= 0)
      v50 = &__dst[24];
    else
      v50 = *(const std::string::value_type **)&__dst[24];
    if (v86 >= 0)
      v51 = HIBYTE(v86) & 0x7F;
    else
      v51 = v85;
    v52 = std::string::append(&v82, v50, v51);
    v53 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v121.__r_.__value_.__r.__words[2] = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v121;
    else
      v54 = (std::string *)v121.__r_.__value_.__r.__words[0];
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v121.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v121.__r_.__value_.__l.__size_;
    if (v86 >= 0)
      v56 = &__dst[24];
    else
      v56 = *(_BYTE **)&__dst[24];
    if (v86 >= 0)
      v57 = HIBYTE(v86) & 0x7F;
    else
      v57 = v85;
    v100[0] = sub_22E5760BC(a1, v56, v57, "");
    if (__dst[23] >= 0)
      v58 = __dst;
    else
      v58 = *(const char **)__dst;
    if (__dst[23] >= 0)
      v59 = __dst[23] & 0x7F;
    else
      v59 = *(_QWORD *)&__dst[8];
    v100[1] = sub_22E5794C8(a1, v58, v59, 0);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
    {
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v79, ".objcrt$CAL");
      std::string::append(&v79, "$m");
    }
    else
    {
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&v79, "__objc_class_aliases");
    }
    sub_22E579324((uint64_t)&v101, a1, (uint64_t)v54, size, v100, 2);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86) < 0)
      operator delete(*(void **)&__dst[24]);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v60 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v60 + 216) + 76) != 1)
  {
    v121.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 240);
    v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)(*(_QWORD *)(v60 + 216) + 76) == 1)
    {
      __dst[23] = 11;
      strcpy(__dst, ".objcrt$SEL");
      std::string::append((std::string *)__dst, "$m");
    }
    else
    {
      __dst[23] = 16;
      strcpy(__dst, "__objc_selectors");
    }
    sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_selector", 19, (uint64_t *)&v121, 2);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (*(_QWORD *)(a1 + 296) == *(_QWORD *)(a1 + 304))
    {
      *(_QWORD *)__dst = *(_QWORD *)(a1 + 240);
      *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      *(_QWORD *)&__dst[16] = *(_QWORD *)__dst;
      *(_QWORD *)&__dst[24] = *(_QWORD *)__dst;
      v85 = *(_QWORD *)__dst;
      v86 = *(_QWORD *)__dst;
      v87 = *(_QWORD *)__dst;
      v61 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 11;
      if (v61 == 1)
      {
        strcpy((char *)&v121, ".objcrt$CAT");
        std::string::append(&v121, "$m");
      }
      else
      {
        strcpy((char *)&v121, "__objc_cats");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_category", 19, (uint64_t *)__dst, 7);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (!*(_BYTE *)(a1 + 1554))
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        __dst[23] = 11;
        strcpy(__dst, ".objcrt$CLS");
        std::string::append((std::string *)__dst, "$m");
      }
      else
      {
        __dst[23] = 14;
        strcpy(__dst, "__objc_classes");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_cls_init_ref", 23, (uint64_t *)(a1 + 240), 1);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v121.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 240);
      v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        __dst[23] = 11;
        strcpy(__dst, ".objcrt$CLR");
        std::string::append((std::string *)__dst, "$m");
      }
      else
      {
        __dst[23] = 17;
        strcpy(__dst, "__objc_class_refs");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_class_ref", 20, (uint64_t *)&v121, 2);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    if (!*(_BYTE *)(a1 + 1552))
    {
      *(_QWORD *)__dst = *(_QWORD *)(a1 + 240);
      *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      *(_QWORD *)&__dst[16] = *(_QWORD *)__dst;
      *(_QWORD *)&__dst[24] = *(_QWORD *)__dst;
      v85 = *(_QWORD *)__dst;
      v86 = *(_QWORD *)__dst;
      v87 = *(_QWORD *)__dst;
      v88 = *(_QWORD *)__dst;
      v89 = *(_QWORD *)__dst;
      v90 = *(uint64_t **)__dst;
      v91 = *(_QWORD **)__dst;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        *((_BYTE *)&v121.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v121, ".objcrt$PCL");
        std::string::append(&v121, "$m");
      }
      else
      {
        *((_BYTE *)&v121.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v121, "__objc_protocols");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_protocol", 19, (uint64_t *)__dst, 11);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (!*(_BYTE *)(a1 + 1553))
    {
      v121.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 240);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        __dst[23] = 11;
        strcpy(__dst, ".objcrt$PCR");
        std::string::append((std::string *)__dst, "$m");
      }
      else
      {
        __dst[23] = 20;
        strcpy(__dst, "__objc_protocol_refs");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_protocol_ref", 23, (uint64_t *)&v121, 1);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    if (*(_QWORD *)(a1 + 696) == *(_QWORD *)(a1 + 704))
    {
      v121.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 240);
      v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        __dst[23] = 11;
        strcpy(__dst, ".objcrt$CAL");
        std::string::append((std::string *)__dst, "$m");
      }
      else
      {
        __dst[23] = 20;
        strcpy(__dst, "__objc_class_aliases");
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_class_alias", 22, (uint64_t *)&v121, 2);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
    if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 328))
    {
      v62 = llvm::ConstantInt::get();
      *(_QWORD *)__dst = *(_QWORD *)(a1 + 240);
      *(_QWORD *)&__dst[8] = v62;
      *(_QWORD *)&__dst[16] = v62;
      *(_QWORD *)&__dst[24] = v62;
      v85 = v62;
      v86 = *(_QWORD *)__dst;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      {
        *((_BYTE *)&v121.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v121, ".objcrt$STR");
        std::string::append(&v121, "$m");
      }
      else
      {
        strcpy((char *)&v121, "__objc_constant_string");
        *((_BYTE *)&v121.__r_.__value_.__s + 23) = 22;
      }
      sub_22E579324((uint64_t)&v101, a1, (uint64_t)".objc_null_constant_string", 26, (uint64_t *)__dst, 6);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
    }
  }
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  if (*(_QWORD *)(a1 + 1568) != *(_QWORD *)(a1 + 1560))
  {
    v63 = llvm::FunctionType::get();
    *(_QWORD *)__dst = ".objc_early_init";
    LOWORD(v85) = 259;
    v64 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v64, v63, 7);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
    v122 = 259;
    v65 = operator new();
    v66 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
    Context = llvm::BasicBlock::getContext(v66);
    *(_QWORD *)__dst = &__dst[16];
    *(_QWORD *)&__dst[8] = 0x200000000;
    v89 = Context;
    v90 = &v98;
    v91 = v99;
    v92 = 0;
    v93 = 0;
    v94 = 512;
    v95 = 7;
    v96 = 0;
    v97 = 0;
    v98 = MEMORY[0x24BED83B8] + 16;
    v99[0] = MEMORY[0x24BED83F0] + 16;
    v87 = v65;
    v88 = v65 + 40;
    v68 = *(_QWORD *)(a1 + 1560);
    for (k = *(_QWORD *)(a1 + 1568); v68 != k; v68 += 40)
    {
      if (llvm::Module::getGlobalVariable())
      {
        v70 = *(uint64_t **)(v68 + 24);
        v71 = (llvm::LLVMContext *)v70[3];
        v72 = *(unsigned int *)(v68 + 32);
        v83 = 257;
        sub_22E3C4170((uint64_t *)__dst, v71, v70, 0, v72, (uint64_t)&v82);
        v73 = llvm::User::operator new((llvm::User *)0x40);
        llvm::StoreInst::StoreInst();
        v122 = 257;
        (*(void (**)(_QWORD *, uint64_t, std::string *, uint64_t, uint64_t))(*v91 + 16))(v91, v73, &v121, v87, v88);
        if (*(_DWORD *)&__dst[8])
        {
          v74 = *(_QWORD *)__dst;
          v75 = *(_QWORD *)__dst + 16 * *(unsigned int *)&__dst[8];
          do
          {
            llvm::Instruction::setMetadata();
            v74 += 16;
          }
          while (v74 != v75);
        }
      }
    }
    sub_22E3CF118((uint64_t *)__dst);
    v76 = llvm::User::operator new((llvm::User *)0x58);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)".objc_early_init_ptr";
    v122 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v77 = *(_QWORD *)(a1 + 8);
    v121.__r_.__value_.__r.__words[0] = v76;
    sub_22E62C508((uint64_t *)(v77 + 1416), (uint64_t *)&v121);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v99);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v98);
    if (*(_BYTE **)__dst != &__dst[16])
      free(*(void **)__dst);
  }
  *(_QWORD *)__dst = v106;
  sub_22E3CEB30((void ***)__dst);
  if (v102 != &v104)
    free(v102);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v120);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v119);
  if (v108[0] != v109)
    free(v108[0]);
  return 0;
}

uint64_t sub_22E568978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 440))(a1, a2, a3, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

uint64_t sub_22E5689C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::Type **v5;
  llvm::Type *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v15[3];
  const char *v16;
  __int16 v17;

  v5 = (llvm::Type **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = *v5;
  v7 = *(unsigned __int8 *)(a2 + 130);
  v16 = "tmp";
  v17 = 259;
  v8 = sub_22E4D83CC(a2, v6, v7, (uint64_t)&v16, 0, 0);
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  if (v8 <= 7)
    v10 = 0;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v8 <= 7)
    v11 = 0;
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v11;
  v12 = 1 << (v9 & 7 | (8 * (v8 & 7)));
  if (v8 < 8)
    v12 = 0;
  *(_QWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v13 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v13;
  v15[2] = *(_OWORD *)(a3 + 32);
  return sub_22E3BEDDC(a2 + 272, v5, (uint64_t)v15);
}

uint64_t sub_22E568A98(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::string __p;

  sub_22EF6C204(*(_QWORD *)(a1[1] + 144), a3, 0, &__p);
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, std::string *))(*a1 + 440))(a1, a2, a3[5], &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t sub_22E568B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t BitCast;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  size_t v14;
  const void *v15;
  unsigned int v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  void **v23[3];
  _QWORD v24[5];
  char v25;
  const void *__dst[2];
  uint64_t v27;
  void **v28;
  __int16 v29;
  const void *v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 220))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 224) + 264))(*(_QWORD *)(v2 + 224));
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 152) + 1) & 1) == 0)
    return sub_22E575F50(a1, a2);
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (((!v6 || *(_BYTE *)(v6 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v6 = sub_22F10CF48(v6)) == 0)
     || !sub_22E5761BC(v6))
    && (((v7 = *v5) == 0 || *(_BYTE *)(v7 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v7 = sub_22F10CF48(v7)) == 0)
     || !sub_22E491464(v7)))
  {
    v9 = *v5;
    if (!*v5 || *(_BYTE *)(v9 + 16) != 32)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
        v9 = sub_22F10CF48(v9);
      else
        v9 = 0;
    }
    v10 = sub_22F40A120(v9);
    v11 = *(_QWORD *)(sub_22F409D88(v10) + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(unsigned int **)(v12 + 16);
    v16 = *v13;
    v15 = v13 + 4;
    v14 = v16;
    if (v16 >= 0x17uLL)
    {
      if ((v14 | 7) == 0x17)
        v18 = (v14 & 0xFFFFFFF8) + 8;
      else
        v18 = v14 | 7;
      v17 = (const void **)operator new(v18 + 1);
      __dst[1] = (const void *)v14;
      v27 = v18 - 0x7FFFFFFFFFFFFFFFLL;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v27) = v14;
      v17 = __dst;
      if (!v14)
        goto LABEL_35;
    }
    memmove(v17, v15, v14);
LABEL_35:
    *((_BYTE *)v17 + v14) = 0;
    std::operator+<char>();
    if (llvm::Module::getGlobalVariable())
    {
      BitCast = llvm::ConstantExpr::getBitCast();
    }
    else
    {
      if (!llvm::Module::getGlobalVariable())
      {
        llvm::User::operator new((llvm::User *)0x58);
        v30[0] = "_ZTVN7gnustep7libobjc22__objc_class_type_infoE";
        LOWORD(v32) = 259;
        llvm::GlobalVariable::GlobalVariable();
      }
      v30[0] = (const void *)llvm::ConstantInt::get();
      llvm::ConstantExpr::getGetElementPtr();
      v19 = llvm::ConstantExpr::getBitCast();
      HIBYTE(v30[2]) = 19;
      strcpy((char *)v30, "__objc_eh_typename_");
      v20 = sub_22E5768FC(a1, __dst, v30, 0);
      if (SHIBYTE(v30[2]) < 0)
        operator delete((void *)v30[0]);
      v30[0] = *(const void **)(a1 + 8);
      v30[1] = &v31;
      memset(v33, 0, sizeof(v33));
      v24[2] = 0;
      v24[3] = 0;
      v23[0] = (void **)v30;
      v23[1] = 0;
      v23[2] = 0;
      v24[0] = 0;
      *(_DWORD *)((char *)v24 + 7) = 0;
      v34 = 1;
      v31 = v19;
      v32 = v20;
      v30[2] = (const void *)0x1000000002;
      std::operator+<char>();
      sub_22E670C54((uint64_t *)v23, 0);
      v29 = 260;
      v28 = &v21;
      sub_22F29F614((uint64_t)v30);
      if (v22 < 0)
        operator delete(v21);
      BitCast = llvm::ConstantExpr::getBitCast();
      v23[0] = (void **)v33;
      sub_22E3CEB30(v23);
      if (v30[1] != &v31)
        free((void *)v30[1]);
    }
    if (v25 < 0)
      operator delete((void *)v24[4]);
    if (SHIBYTE(v27) < 0)
      operator delete((void *)__dst[0]);
    return BitCast;
  }
  if (!llvm::Module::getGlobalVariable())
  {
    llvm::User::operator new((llvm::User *)0x58);
    v30[0] = "__objc_id_type_info";
    LOWORD(v32) = 259;
    llvm::GlobalVariable::GlobalVariable();
  }
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E569024(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 224) + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224));
}

unint64_t sub_22E569038(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  char *v5;
  size_t v6;
  int v7;
  llvm::StringMapImpl *v8;
  int Key;
  unint64_t v10;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t GlobalVariable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t IntToPtr;
  int64_t v38;
  llvm::ArrayType *IntNTy;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  std::string::size_type size;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  int v53;
  int v54;
  llvm::StringMapImpl *v55;
  uint64_t v56;
  llvm::GlobalValue *v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  __int128 v69;
  char *v70;
  char *v71;
  _BYTE *v72;
  unint64_t v73;
  char *v74;
  int64x2_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t BitCast;
  unint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  llvm::StringMapImpl *v91;
  std::string v92;
  __int16 v93;
  _WORD *v94;
  char *v95;
  uint64_t v96[3];
  _QWORD v97[3];
  uint64_t v98;
  void *__p[2];
  uint64_t v100;
  std::string v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[16];
  _QWORD v108[3];
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 5;
  v5 = (char *)&a2[a2[1] + 5];
  v6 = ((*a2 >> 21) & 7u) * a2[4];
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v8 = (llvm::StringMapImpl *)(a1 + 344);
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 352))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * Key) + 8);
    if (v7)
      v10 &= 0xFFFFFFFFFFFFFFF8;
    return v10;
  }
  v12 = &v4[a2[1]];
  v13 = (*a2 >> 21) & 7;
  v14 = a2[4];
  v15 = (v13 * v14);
  if ((_DWORD)v15)
  {
    v17 = 1 - v15;
    v18 = (char *)&v4[a2[1]];
    do
    {
      v19 = *v18++;
      v16 = v19 < 0;
      if (v19 < 0)
        break;
    }
    while (v17++);
  }
  else
  {
    v16 = 0;
  }
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(v21 + 216);
  if (!v16 && v14 <= 8 && *(_BYTE *)(v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)) == 64)
  {
    if ((_DWORD)v14)
    {
      v33 = 0;
      v34 = 0;
      v35 = 57;
      do
      {
        if (v13 == 4)
        {
          v36 = v12[v33];
        }
        else if (v13 == 2)
        {
          v36 = *((unsigned __int16 *)v12 + v33);
        }
        else
        {
          v36 = *((unsigned __int8 *)v12 + v33);
        }
        v34 |= v36 << v35;
        ++v33;
        v35 -= 7;
      }
      while (v14 != v33);
    }
    llvm::ConstantInt::get();
    IntToPtr = llvm::ConstantExpr::getIntToPtr();
    *(_QWORD *)(*sub_22F246F88(v8, v5, v6) + 8) = IntToPtr;
    if (v7)
      return IntToPtr & 0xFFFFFFFFFFFFFFF8;
    else
      return IntToPtr;
  }
  v23 = *(_QWORD *)(v21 + 152);
  v24 = (const char *)(v23 + 424);
  v25 = *(_BYTE *)(v23 + 447);
  v26 = v25 < 0;
  v28 = *(const char **)(v23 + 424);
  v27 = *(_QWORD *)(v23 + 432);
  if (v25 < 0)
    v24 = v28;
  v29 = v25 & 0x7F;
  if (!v26)
    v27 = v29;
  if (v27)
    v30 = v27;
  else
    v30 = 16;
  if (v27)
    v31 = v24;
  else
    v31 = "NSConstantString";
  sub_22E579A9C((uint64_t)__p, *(_DWORD *)(v22 + 76), v31, v30);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    if (*(_QWORD *)GlobalVariable != *(_QWORD *)(a1 + 112))
      GlobalVariable = llvm::ConstantExpr::getBitCast();
  }
  else
  {
    llvm::User::operator new((llvm::User *)0x58);
    LOWORD(v103) = 260;
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    GlobalVariable = llvm::GlobalVariable::GlobalVariable();
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFFCFF | 0x100;
  }
  v104 = *(_QWORD *)(a1 + 8);
  v105 = v107;
  v106 = 0x1000000000;
  memset(v108, 0, sizeof(v108));
  v97[2] = 0;
  v98 = 0;
  v96[0] = (uint64_t)&v104;
  v96[1] = 0;
  v96[2] = 0;
  v97[0] = 0;
  *(_DWORD *)((char *)v97 + 7) = 0;
  v109 = 1;
  if (*(_DWORD *)(*(_QWORD *)(v104 + 216) + 76) == 1)
  {
    sub_22F247080(v96, *(llvm::ConstantPointerNull **)(a1 + 136));
  }
  else
  {
    v107[0] = GlobalVariable;
    LODWORD(v106) = 1;
  }
  v91 = v8;
  if (v16)
  {
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
    *(_OWORD *)&v101.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
    sub_22E579B44(&v101, (v6 + 1), 0);
    v94 = (_WORD *)v101.__r_.__value_.__r.__words[0];
    v95 = v5;
    llvm::ConvertUTF8toUTF16();
    *v94 = 0;
    sub_22F246F08(v96);
    sub_22F246F08(v96);
    sub_22F246F08(v96);
    sub_22F246F08(v96);
    v38 = (int64_t)v94 - v101.__r_.__value_.__r.__words[0] + 2;
    IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 248), (llvm::LLVMContext *)0x10);
    llvm::ArrayType::get(IntNTy, (llvm::Type *)(v38 >> 1));
    llvm::ConstantDataSequential::getImpl();
    v40 = llvm::User::operator new((llvm::User *)0x58);
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)".str";
    v93 = 259;
    v41 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v41 + 32) = *(_DWORD *)(v41 + 32) & 0xFFFFFF3F | 0x80;
    v42 = v96[0];
    v43 = *(_DWORD *)(v96[0] + 16);
    if (v43 >= *(_DWORD *)(v96[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v43 = *(_DWORD *)(v42 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8 * v43) = v40;
    ++*(_DWORD *)(v42 + 16);
    if ((uint64_t *)v101.__r_.__value_.__l.__data_ != &v102)
      free(v101.__r_.__value_.__l.__data_);
    v44 = 0;
    memset(&v92, 0, sizeof(v92));
    size = 12;
    v46 = (std::string *)".objc_string";
    goto LABEL_68;
  }
  sub_22F246F08(v96);
  sub_22F246F08(v96);
  sub_22F246F08(v96);
  sub_22F246F08(v96);
  v47 = sub_22E5760BC(a1, v5, v6, "");
  v48 = v96[0];
  v49 = *(_DWORD *)(v96[0] + 16);
  if (v49 >= *(_DWORD *)(v96[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v49 = *(_DWORD *)(v48 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v49) = v47;
  ++*(_DWORD *)(v48 + 16);
  memset(&v92, 0, sizeof(v92));
  MEMORY[0x2348A0C14](&v92, ".objc_str_");
  if ((int)v6 < 1)
  {
LABEL_61:
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v92;
    else
      v46 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v92.__r_.__value_.__l.__size_;
    v44 = 1;
LABEL_68:
    v55 = v91;
    goto LABEL_69;
  }
  v50 = MEMORY[0x24BDAC740];
  v51 = v5;
  v52 = v6;
  v46 = (std::string *)".objc_string";
  while (1)
  {
    v54 = *v51++;
    v53 = v54;
    if (v54 < 0)
      break;
    if ((*(_DWORD *)(v50 + 4 * v53 + 60) & 0x500) == 0)
      goto LABEL_58;
LABEL_60:
    std::string::push_back(&v92, v53);
    if (!--v52)
      goto LABEL_61;
  }
  if (__maskrune(v53, 0x500uLL))
    goto LABEL_60;
LABEL_58:
  if (v53 == 32)
  {
    LOBYTE(v53) = 95;
    goto LABEL_60;
  }
  v44 = 0;
  v55 = v91;
  size = 12;
LABEL_69:
  v56 = v96[0];
  sub_22E670C54(v96, v98);
  LOWORD(v103) = 261;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  v101.__r_.__value_.__l.__size_ = size;
  v57 = (llvm::GlobalValue *)sub_22F29F614(v56);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
  {
    *((_BYTE *)&v101.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v101, ".objcrt$STR");
    std::string::append(&v101, "$m");
  }
  else
  {
    strcpy((char *)&v101, "__objc_constant_string");
    *((_BYTE *)&v101.__r_.__value_.__s + 23) = 22;
  }
  llvm::GlobalObject::setSection();
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v44)
  {
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v58 = *((_DWORD *)v57 + 8);
    v59 = v58 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v57 + 8) = v59;
    if ((v58 & 0xFu) - 7 < 2)
      goto LABEL_78;
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v57) & 1) == 0)
    {
      v59 = *((_DWORD *)v57 + 8);
LABEL_78:
      *((_DWORD *)v57 + 8) = v59 | 0x4000;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) != 1)
    goto LABEL_105;
  v60 = *(_QWORD *)(a1 + 1568);
  v61 = *(_QWORD *)(a1 + 1576);
  if (v60 < v61)
  {
    if (SHIBYTE(v100) < 0)
    {
      sub_22E3BB2B4(*(_BYTE **)(a1 + 1568), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v69 = *(_OWORD *)__p;
      *(_QWORD *)(v60 + 16) = v100;
      *(_OWORD *)v60 = v69;
    }
    *(_QWORD *)(v60 + 24) = v57;
    *(_DWORD *)(v60 + 32) = 0;
    v70 = (char *)(v60 + 40);
    goto LABEL_104;
  }
  v62 = *(_QWORD *)(a1 + 1560);
  v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - v62) >> 3);
  v64 = v63 + 1;
  if (v63 + 1 > 0x666666666666666)
    goto LABEL_132;
  v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v61 - v62) >> 3);
  if (2 * v65 > v64)
    v64 = 2 * v65;
  if (v65 >= 0x333333333333333)
    v66 = 0x666666666666666;
  else
    v66 = v64;
  v103 = a1 + 1576;
  if (v66)
  {
    if (v66 <= 0x666666666666666)
    {
      v67 = v66;
      v68 = operator new(40 * v66);
      goto LABEL_95;
    }
    goto LABEL_133;
  }
  v67 = 0;
  v68 = 0;
LABEL_95:
  v71 = &v68[8 * ((uint64_t)(v60 - v62) >> 3)];
  if (SHIBYTE(v100) < 0)
  {
    v72 = v68;
    sub_22E3BB2B4(&v68[40 * v63], __p[0], (unint64_t)__p[1]);
    v68 = v72;
    v60 = *(_QWORD *)(a1 + 1568);
    v62 = *(_QWORD *)(a1 + 1560);
  }
  else
  {
    *(_OWORD *)v71 = *(_OWORD *)__p;
    *((_QWORD *)v71 + 2) = v100;
  }
  v73 = v67;
  v74 = &v68[40 * v63];
  *((_QWORD *)v74 + 3) = v57;
  *((_DWORD *)v74 + 8) = 0;
  v55 = v91;
  if (v60 == v62)
  {
    v75 = vdupq_n_s64(v62);
    v76 = v71;
  }
  else
  {
    v76 = v71;
    do
    {
      v77 = *(_OWORD *)(v60 - 40);
      *((_QWORD *)v76 - 3) = *(_QWORD *)(v60 - 24);
      *(_OWORD *)(v76 - 40) = v77;
      *(_QWORD *)(v60 - 32) = 0;
      *(_QWORD *)(v60 - 24) = 0;
      *(_QWORD *)(v60 - 40) = 0;
      *((_OWORD *)v76 - 1) = *(_OWORD *)(v60 - 16);
      v76 -= 40;
      v60 -= 40;
    }
    while (v60 != v62);
    v75 = *(int64x2_t *)(a1 + 1560);
  }
  v70 = v71 + 40;
  *(_QWORD *)(a1 + 1560) = v76;
  *(_QWORD *)(a1 + 1568) = v70;
  *(int64x2_t *)&v101.__r_.__value_.__r.__words[1] = v75;
  v78 = *(_QWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = &v68[40 * v73];
  v102 = v78;
  v101.__r_.__value_.__r.__words[0] = v75.i64[0];
  sub_22E579BF4((uint64_t)&v101);
LABEL_104:
  *(_QWORD *)(a1 + 1568) = v70;
LABEL_105:
  BitCast = llvm::ConstantExpr::getBitCast();
  *(_QWORD *)(*sub_22F246F88(v55, v5, v6) + 8) = BitCast;
  v81 = *(uint64_t **)(a1 + 328);
  v80 = *(_QWORD *)(a1 + 336);
  if ((unint64_t)v81 < v80)
  {
    *v81 = BitCast;
    v82 = v81 + 1;
    goto LABEL_122;
  }
  v83 = *(_QWORD **)(a1 + 320);
  v84 = v81 - v83;
  v85 = v84 + 1;
  if ((unint64_t)(v84 + 1) >> 61)
LABEL_132:
    abort();
  v86 = v80 - (_QWORD)v83;
  if (v86 >> 2 > v85)
    v85 = v86 >> 2;
  if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
    v87 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v87 = v85;
  if (!v87)
  {
    v88 = 0;
    goto LABEL_117;
  }
  if (v87 >> 61)
LABEL_133:
    sub_22E3B3F8C();
  v88 = (char *)operator new(8 * v87);
LABEL_117:
  v89 = (uint64_t *)&v88[8 * v84];
  *v89 = BitCast;
  v82 = v89 + 1;
  if (v81 != v83)
  {
    do
    {
      v90 = *--v81;
      *--v89 = v90;
    }
    while (v81 != v83);
    v81 = *(uint64_t **)(a1 + 320);
  }
  *(_QWORD *)(a1 + 320) = v89;
  *(_QWORD *)(a1 + 328) = v82;
  *(_QWORD *)(a1 + 336) = &v88[8 * v87];
  if (v81)
    operator delete(v81);
LABEL_122:
  *(_QWORD *)(a1 + 328) = v82;
  if (v7)
    v10 = BitCast & 0xFFFFFFFFFFFFFFF8;
  else
    v10 = BitCast;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  sub_22E3CEB30((void ***)&v101);
  if (v105 != v107)
    free(v105);
  if (SHIBYTE(v100) < 0)
    operator delete(__p[0]);
  return v10;
}

void sub_22E569BA0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *j;
  void *v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t i;
  char *v16;
  uint64_t v17;
  unint64_t k;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  unint64_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t BitCast;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  std::string v55;
  std::string v56;
  void *__p[2];
  std::string::size_type v58;
  uint64_t v59[3];
  _QWORD v60[3];
  uint64_t v61;
  void *v62;
  size_t v63;
  char v64;
  void *v65;
  size_t v66;
  char v67;
  _QWORD v68[4];
  __int16 v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[128];
  void *v73;
  uint64_t v74;
  _BYTE v75[128];
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[128];
  _QWORD v80[3];
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 88);
  sub_22EFC683C((uint64_t *)(v4 + 40), &v65);
  j = (_QWORD *)(a2 + 40);
  sub_22EFC683C((uint64_t *)(a2 + 40), &v62);
  v54 = sub_22F3B55B8(a2);
  v76 = a1[1];
  v77 = v79;
  v78 = 0x1000000000;
  memset(v80, 0, sizeof(v80));
  v60[2] = 0;
  v61 = 0;
  v59[0] = (uint64_t)&v76;
  v59[1] = 0;
  v59[2] = 0;
  v60[0] = 0;
  if (v64 >= 0)
    v6 = &v62;
  else
    v6 = v62;
  *(_DWORD *)((char *)v60 + 7) = 0;
  if (v64 >= 0)
    v7 = v64 & 0x7F;
  else
    v7 = v63;
  v81 = 1;
  v8 = sub_22E5760BC((uint64_t)a1, v6, v7, "");
  v9 = v78;
  if (v78 >= HIDWORD(v78))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v78;
  }
  *((_QWORD *)v77 + v9) = v8;
  LODWORD(v78) = v78 + 1;
  if (v67 >= 0)
    v10 = &v65;
  else
    v10 = v65;
  if (v67 >= 0)
    v11 = v67 & 0x7F;
  else
    v11 = v66;
  v12 = sub_22E5760BC((uint64_t)a1, v10, v11, "");
  v13 = v59[0];
  v14 = *(_DWORD *)(v59[0] + 16);
  if (v14 >= *(_DWORD *)(v59[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v59[0] + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v59[0] + 8) + 8 * v14) = v12;
  ++*(_DWORD *)(v13 + 16);
  v73 = v75;
  v74 = 0x1000000000;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  for (i = *(_QWORD *)(a2 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(i + 28) & 0x7F) == 0x18 && (*(_BYTE *)(i + 58) & 2) != 0)
      break;
  }
  v16 = (char *)v73;
  v17 = v74;
  if ((char *)v73 + 8 * v74 == v75)
  {
    sub_22F275FA4((uint64_t)&v73, i);
  }
  else
  {
    v22 = 0;
    if (i)
    {
      v23 = i;
      do
      {
        do
          v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v23 && ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v23 + 58) & 2) == 0));
        ++v22;
      }
      while (v23);
    }
    v24 = v4;
    v25 = (v75 - (_BYTE *)v73) >> 3;
    if (v22 + v74 > HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = (char *)v73;
      v17 = v74;
    }
    v26 = (unint64_t *)&v16[8 * v25];
    v27 = &v16[8 * v17];
    v28 = (v27 - (char *)v26) >> 3;
    if (v28 >= v22)
    {
      v30 = &v27[-8 * v22];
      sub_22F246808((uint64_t)&v73, v30, &v16[8 * v17]);
      v4 = v24;
      if (v30 != (char *)v26)
        memmove(&v27[-(v30 - (char *)v26)], v26, v30 - (char *)v26);
      for (j = (_QWORD *)(a2 + 40); i; ++v26)
      {
        *v26 = i;
        do
          i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8;
        while (i && ((*(_DWORD *)(i + 28) & 0x7F) != 0x18 || (*(_BYTE *)(i + 58) & 2) == 0));
      }
    }
    else
    {
      LODWORD(v74) = v17 + v22;
      v29 = v25 == v17;
      v4 = v24;
      j = (_QWORD *)(a2 + 40);
      if (!v29)
      {
        memcpy(&v16[8 * (v17 + v22) + -8 * v28], v26, v27 - (char *)v26);
        do
        {
          *v26++ = i;
          do
            i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8;
          while (i && ((*(_DWORD *)(i + 28) & 0x7F) != 0x18 || (*(_BYTE *)(i + 58) & 2) == 0));
          --v28;
        }
        while (v28);
      }
      for (; i; v27 += 8)
      {
        *(_QWORD *)v27 = i;
        do
          i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8;
        while (i && ((*(_DWORD *)(i + 28) & 0x7F) != 0x18 || (*(_BYTE *)(i + 58) & 2) == 0));
      }
    }
  }
  sub_22E576334((uint64_t)a1, (uint64_t *)v73, v74);
  sub_22F275848(v59);
  v70 = v72;
  v71 = 0x1000000000;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  for (k = *(_QWORD *)(a2 + 64); k; k = *(_QWORD *)(k + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(k + 28) & 0x7F) == 0x18 && (*(_BYTE *)(k + 58) & 2) == 0)
      break;
  }
  sub_22E579C54((uint64_t)&v70, (uint64_t)v72, k);
  sub_22E576334((uint64_t)a1, (uint64_t *)v70, v71);
  sub_22F275848(v59);
  (*(void (**)(_QWORD *, unint64_t))(*a1 + 392))(a1, v54);
  sub_22F275848(v59);
  v19 = *(_QWORD *)(a1[1] + 152);
  if (*(_DWORD *)(v19 + 400) == 6)
  {
    v68[0] = 0x8000000000000002;
    v68[1] = 0;
    if ((sub_22E3B38EC((_DWORD *)(v19 + 404), v68) & 1) == 0)
    {
      if ((*j & 7) != 0)
        v20 = 0;
      else
        v20 = *j & 0xFFFFFFFFFFFFFFF8;
      v21 = sub_22EFDD7A0(v4, v20);
      if (v21)
      {
        v31 = v21;
        sub_22E577F18(a1, a2, v21, 0, 0);
        sub_22F275848(v59);
        sub_22E577F18(a1, a2, v31, 1, 0);
        sub_22F275848(v59);
      }
      else
      {
        sub_22F247080(v59, (llvm::ConstantPointerNull *)a1[17]);
        sub_22F247080(v59, (llvm::ConstantPointerNull *)a1[17]);
      }
    }
  }
  *((_BYTE *)&v55.__r_.__value_.__s + 23) = 15;
  qmemcpy(&v55, ".objc_category_", 15);
  if (v67 >= 0)
    v32 = (const std::string::value_type *)&v65;
  else
    v32 = (const std::string::value_type *)v65;
  v55.__r_.__value_.__s.__data_[15] = 0;
  if (v67 >= 0)
    v33 = v67 & 0x7F;
  else
    v33 = v66;
  v34 = std::string::append(&v55, v32, v33);
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0)
    v36 = (const std::string::value_type *)&v62;
  else
    v36 = (const std::string::value_type *)v62;
  if (v64 >= 0)
    v37 = v64 & 0x7F;
  else
    v37 = v63;
  v38 = std::string::append(&v56, v36, v37);
  v39 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v58 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = v59[0];
  sub_22E670C54(v59, v61);
  v69 = 260;
  v68[0] = __p;
  sub_22F29F614(v40);
  BitCast = llvm::ConstantExpr::getBitCast();
  v42 = BitCast;
  v44 = (uint64_t *)a1[38];
  v43 = a1[39];
  if ((unint64_t)v44 >= v43)
  {
    v46 = (_QWORD *)a1[37];
    v47 = v44 - v46;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      abort();
    v49 = v43 - (_QWORD)v46;
    if (v49 >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
        sub_22E3B3F8C();
      v51 = (char *)operator new(8 * v50);
    }
    else
    {
      v51 = 0;
    }
    v52 = (uint64_t *)&v51[8 * v47];
    *v52 = v42;
    v45 = v52 + 1;
    if (v44 != v46)
    {
      do
      {
        v53 = *--v44;
        *--v52 = v53;
      }
      while (v44 != v46);
      v44 = (uint64_t *)a1[37];
    }
    a1[37] = v52;
    a1[38] = v45;
    a1[39] = &v51[8 * v50];
    if (v44)
      operator delete(v44);
  }
  else
  {
    *v44 = BitCast;
    v45 = v44 + 1;
  }
  a1[38] = v45;
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (v70 != v72)
    free(v70);
  if (v73 != v75)
    free(v73);
  v73 = v80;
  sub_22E3CEB30((void ***)&v73);
  if (v77 != v79)
    free(v77);
  if (v64 < 0)
    operator delete(v62);
  if (v67 < 0)
    operator delete(v65);
}

void sub_22E56A34C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  int v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t GlobalVariable;
  const char *p_p_p;
  uint64_t v28;
  int v29;
  uint64_t BitCast;
  std::string::size_type v31;
  unsigned int v32;
  std::string::size_type v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int i;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  unsigned int v47;
  unint64_t j;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Type *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::string *v69;
  size_t size;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  std::string *v74;
  size_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  _QWORD *v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  std::string::size_type v89;
  unsigned int v90;
  uint64_t v91;
  std::string::size_type v92;
  unsigned int v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t Name;
  unint64_t v103;
  const void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  char *v118;
  __int128 v119;
  int64x2_t v120;
  char v121;
  char *v122;
  const char *v123;
  uint64_t v124;
  llvm::GlobalVariable *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  llvm::Value *v144;
  unint64_t v145;
  uint64_t v146;
  std::string v147;
  __int16 v148;
  void *v149;
  char v150;
  std::string v151;
  void *__dst[2];
  unint64_t v153;
  _QWORD v154[5];
  std::string v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  std::string v159;
  _QWORD v160[3];
  uint64_t v161;
  uint64_t v162[3];
  _QWORD v163[3];
  uint64_t v164;
  void *v165;
  size_t v166;
  char v167;
  void *v168;
  _QWORD *v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  __int128 __p;
  uint64_t v175;
  _BYTE v176[128];
  _QWORD v177[3];
  char v178;
  void *p_p;
  uint64_t v180;
  _QWORD v181[2];
  __int16 v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[128];
  _QWORD v187[3];
  char v188;
  uint64_t v189;

  v2 = a2;
  v189 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 + 216) + 76);
  v145 = *(_QWORD *)(a2 + 88);
  v146 = *(_QWORD *)(v4 + 144);
  sub_22EFC683C((uint64_t *)(v145 + 40), &v165);
  if (v167 >= 0)
    v6 = &v165;
  else
    v6 = v165;
  if (v167 >= 0)
    v7 = v167 & 0x7F;
  else
    v7 = v166;
  v8 = sub_22E5760BC(a1, v6, v7, "");
  v183 = *(_QWORD *)(a1 + 8);
  v184 = v186;
  v185 = 0x1000000000;
  memset(v187, 0, sizeof(v187));
  v163[2] = 0;
  v164 = 0;
  v162[0] = (uint64_t)&v183;
  v162[1] = 0;
  v162[2] = 0;
  v163[0] = 0;
  *(_DWORD *)((char *)v163 + 7) = 0;
  v188 = 1;
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  v9 = v162[0];
  v10 = *(_DWORD *)(v162[0] + 16);
  if (v10 >= *(_DWORD *)(v162[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 16);
  sub_22F246F08(v162);
  sub_22F246F08(v162);
  sub_22F246F08(v162);
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  if ((*(_WORD *)(v2 + 56) & 0x80) != 0)
    sub_22EFCC320(v2 + 48);
  v11 = *(_QWORD *)(v2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(v2 + 64);
    while ((*(_DWORD *)(v12 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v12 + 58) & 2) != 0)
    {
      v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v12)
        goto LABEL_16;
    }
    p_p = v181;
    v180 = 0x1000000000;
    if ((*(_BYTE *)(v2 + 56) & 0x80) != 0)
    {
      sub_22EFCC320(v2 + 48);
      v11 = *(_QWORD *)(v2 + 64);
    }
    for (; v11; v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x18 && (*(_BYTE *)(v11 + 58) & 2) == 0)
        break;
    }
    sub_22E579C54((uint64_t)&p_p, (uint64_t)v181, v11);
    sub_22E576334(a1, (uint64_t *)p_p, v180);
    sub_22F275848(v162);
    if (p_p != v181)
      free(p_p);
  }
  else
  {
LABEL_16:
    sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  }
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080(v162, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F246F08(v162);
  v13 = sub_22E577F18((_QWORD *)a1, v2, v145, 1, 0);
  v14 = v162[0];
  v15 = *(_DWORD *)(v162[0] + 16);
  if (v15 >= *(_DWORD *)(v162[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 16);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
    v16 = "$_";
  else
    v16 = "._";
  p_p = v16;
  v180 = 2;
  v181[0] = "OBJC_METACLASS_";
  v181[1] = 15;
  v182 = 1285;
  llvm::Twine::str((llvm::Twine *)&p_p);
  if (v167 >= 0)
    v17 = (const std::string::value_type *)&v165;
  else
    v17 = (const std::string::value_type *)v165;
  if (v167 >= 0)
    v18 = v167 & 0x7F;
  else
    v18 = v166;
  v19 = std::string::append(&v159, v17, v18);
  v20 = v19->__r_.__value_.__r.__words[2];
  __p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v175 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = v162[0];
  sub_22E670C54(v162, v164);
  v182 = 260;
  p_p = &__p;
  v22 = sub_22F29F614(v21);
  if (SHIBYTE(v175) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = (unint64_t)&v183;
  v160[2] = 0;
  v161 = 0;
  v23 = v185;
  v159.__r_.__value_.__r.__words[2] = v185;
  v160[0] = 0;
  *(_DWORD *)((char *)v160 + 7) = 0;
  v188 = 1;
  if (v185 >= HIDWORD(v185))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v185;
  }
  *((_QWORD *)v184 + v23) = v22;
  LODWORD(v185) = v185 + 1;
  v24 = sub_22F3B46CC(*(_QWORD *)(v2 + 88));
  v25 = v24;
  v143 = v2 + 48;
  if (!v24)
  {
    sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
    GlobalVariable = 0;
    goto LABEL_66;
  }
  sub_22EFC683C((uint64_t *)(v24 + 40), &p_p);
  if (v181[0] >= 0)
    p_p_p = (const char *)&p_p;
  else
    p_p_p = (const char *)p_p;
  if (v181[0] >= 0)
    v28 = HIBYTE(v181[0]) & 0x7F;
  else
    v28 = v180;
  sub_22E579A9C((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), p_p_p, v28);
  if (SHIBYTE(v181[0]) < 0)
    operator delete(p_p);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    v182 = 260;
    p_p = &__p;
    llvm::GlobalVariable::GlobalVariable();
    if (v5 != 1)
    {
LABEL_61:
      BitCast = llvm::ConstantExpr::getBitCast();
      v31 = v159.__r_.__value_.__r.__words[0];
      v32 = *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 16);
      if (v32 >= *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = *(_DWORD *)(v31 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v32) = BitCast;
      ++*(_DWORD *)(v31 + 16);
      goto LABEL_64;
    }
    if (sub_22E49F808(v25))
    {
      v29 = 256;
    }
    else if ((*(_BYTE *)(v25 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v25);
      v140 = *((unsigned int *)v139 + 2);
      if ((_DWORD)v140)
      {
        v141 = 8 * v140;
        v142 = *v139;
        while (*(_WORD *)(*(_QWORD *)v142 + 32) != 155)
        {
          v29 = 0;
          v142 += 8;
          v141 -= 8;
          if (!v141)
            goto LABEL_58;
        }
      }
      else
      {
        v142 = *v139;
      }
      if (v142 == *v139 + 8 * v140)
        v29 = 0;
      else
        v29 = 512;
    }
    else
    {
      v29 = 0;
    }
LABEL_58:
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFFCFF | v29;
  }
  if (v5 != 1)
    goto LABEL_61;
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
LABEL_64:
  if (SHIBYTE(v175) < 0)
    operator delete((void *)__p);
LABEL_66:
  v33 = v159.__r_.__value_.__r.__words[0];
  v34 = *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 16);
  if (v34 >= *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(v33 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v34) = v8;
  ++*(_DWORD *)(v33 + 16);
  sub_22F246F08((uint64_t *)&v159);
  sub_22F246F08((uint64_t *)&v159);
  if (v25)
    sub_22F0CBDC4(v146, v25, 0);
  sub_22F0CBDC4(v146, *(_QWORD *)(v2 + 88), v2);
  sub_22F246F08((uint64_t *)&v159);
  v35 = v145;
  v144 = (llvm::Value *)GlobalVariable;
  if (sub_22EFDD1E0(v145))
  {
    v36 = sub_22EFDD1E0(v145);
    v37 = v2;
    for (i = 0; v36; v36 = *(_QWORD *)(v36 + 80))
      ++i;
    MEMORY[0x23489C120](&p_p, *(_QWORD *)(a1 + 16));
    *(_QWORD *)&__p = *(_QWORD *)(a1 + 8);
    *((_QWORD *)&__p + 1) = v176;
    v175 = 0x1000000000;
    memset(v177, 0, sizeof(v177));
    v157 = 0;
    v158 = 0;
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = (unint64_t)&__p;
    v155.__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)&v156 = 0;
    *(_DWORD *)((char *)&v156 + 7) = 0;
    v178 = 1;
    sub_22F246F08((uint64_t *)&v155);
    v39 = *(_QWORD *)(a1 + 192);
    v168 = *(void **)(a1 + 64);
    v169 = v168;
    v170 = v168;
    *(_QWORD *)&v171 = v39;
    *((_QWORD *)&v171 + 1) = v39;
    v40 = llvm::StructType::get();
    sub_22E3C304C((uint64_t)&p_p, v40);
    v168 = v41;
    v169 = v42;
    llvm::TypeSize::operator unsigned long long();
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22F246F08((uint64_t *)&v155);
    v168 = (void *)v155.__r_.__value_.__r.__words[0];
    v169 = &v155;
    v43 = (void *)*(unsigned int *)(v155.__r_.__value_.__r.__words[0] + 16);
    v172 = 0;
    v173 = 0;
    v170 = v43;
    *(_QWORD *)&v171 = 0;
    *(_DWORD *)((char *)&v171 + 7) = 0;
    BYTE9(v156) = 1;
    v44 = sub_22EFDD1E0(v145);
    if (!v44)
    {
LABEL_75:
      sub_22F2758B8((uint64_t)&v168, (uint64_t *)&v155);
      __dst[0] = (void *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
      v151.__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v147.__r_.__value_.__l.__data_) = 8;
      v45 = sub_22F276424((uint64_t *)&v155);
      v46 = v159.__r_.__value_.__r.__words[0];
      v47 = *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 16);
      if (v47 >= *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v47 = *(_DWORD *)(v46 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8 * v47) = v45;
      ++*(_DWORD *)(v46 + 16);
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
      sub_22E3CEB30((void ***)&v155);
      v2 = v37;
      v35 = v145;
      if (*((_BYTE **)&__p + 1) != v176)
        free(*((void **)&__p + 1));
      MEMORY[0x23489C12C](&p_p);
      goto LABEL_80;
    }
    v66 = v44;
    while (1)
    {
      v67 = *(_QWORD *)(v66 + 48);
      __dst[0] = v168;
      __dst[1] = &v168;
      v68 = *((unsigned int *)v168 + 4);
      v154[2] = 0;
      v154[3] = 0;
      v153 = v68;
      v154[0] = 0;
      *(_DWORD *)((char *)v154 + 7) = 0;
      BYTE9(v171) = 1;
      sub_22EFC683C((uint64_t *)(v66 + 40), &v147);
      if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v147;
      else
        v69 = (std::string *)v147.__r_.__value_.__r.__words[0];
      if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v147.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v147.__r_.__value_.__l.__size_;
      v71 = sub_22E5760BC(a1, v69, size, "");
      v72 = __dst[0];
      v73 = *((unsigned int *)__dst[0] + 4);
      if (v73 >= *((unsigned int *)__dst[0] + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v73 = *((unsigned int *)v72 + 4);
      }
      *(_QWORD *)(v72[1] + 8 * v73) = v71;
      ++*((_DWORD *)v72 + 4);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      memset(&v151, 0, sizeof(v151));
      sub_22F36E0AC(v146, 0, v67, &v151);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v151;
      else
        v74 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = *((_BYTE *)&v151.__r_.__value_.__s + 23) & 0x7F;
      else
        v75 = v151.__r_.__value_.__l.__size_;
      v76 = sub_22E5760BC(a1, v74, v75, "");
      v77 = __dst[0];
      v78 = *((unsigned int *)__dst[0] + 4);
      if (v78 >= *((unsigned int *)__dst[0] + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v78 = *((unsigned int *)v77 + 4);
      }
      *(_QWORD *)(v77[1] + 8 * v78) = v76;
      ++*((_DWORD *)v77 + 4);
      sub_22F2791D4(a1, *(_QWORD *)(a1 + 8), v37, v66);
      llvm::ConstantInt::get();
      (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 448))(&v149, a1, v145, v66);
      v79 = llvm::Module::getGlobalVariable();
      if (v79)
      {
        v80 = (unsigned int *)v79;
        llvm::GlobalVariable::setInitializer();
      }
      else
      {
        v80 = (unsigned int *)llvm::User::operator new((llvm::User *)0x58);
        v148 = 260;
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        llvm::GlobalVariable::GlobalVariable();
      }
      v81 = *(_BYTE *)(v66 + 88) & 7;
      if (v81 == 4 || v81 == 1)
      {
        v83 = v80 + 8;
        v82 = v80[8];
      }
      else
      {
        v87 = sub_22EFB9558(v145);
        v83 = v80 + 8;
        v82 = v80[8];
        if ((v87 & 0x18) != 0)
        {
          v84 = v82 & 0xFFFFFFCF;
          *v83 = v82 & 0xFFFFFFCF;
          if ((v82 & 0xF) - 7 >= 2)
            goto LABEL_141;
          goto LABEL_140;
        }
      }
      v84 = v82 & 0xFFFFFFCF | 0x10;
      *v83 = v84;
      if ((v82 & 0xF) - 7 < 2)
        goto LABEL_140;
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v80) & 1) == 0)
      {
        v84 = *v83;
LABEL_140:
        *v83 = v84 | 0x4000;
      }
LABEL_141:
      v85 = __dst[0];
      v86 = *((unsigned int *)__dst[0] + 4);
      if (v86 >= *((unsigned int *)__dst[0] + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v86 = *((unsigned int *)v85 + 4);
      }
      *(_QWORD *)(v85[1] + 8 * v86) = v80;
      ++*((_DWORD *)v85 + 4);
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v147);
      sub_22F246F08((uint64_t *)__dst);
      sub_22EF5D130(v146, v67);
      sub_22F246F08((uint64_t *)__dst);
      sub_22F2759F0((uint64_t *)__dst, (uint64_t *)&v168);
      if (v150 < 0)
        operator delete(v149);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      v66 = *(_QWORD *)(v66 + 80);
      if (!v66)
        goto LABEL_75;
    }
  }
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
LABEL_80:
  p_p = v181;
  v180 = 0x1000000000;
  if ((*(_BYTE *)(v2 + 56) & 0x80) != 0)
    sub_22EFCC320(v143);
  for (j = *(_QWORD *)(v2 + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(j + 28) & 0x7F) == 0x18 && (*(_BYTE *)(j + 58) & 2) != 0)
      break;
  }
  sub_22E577D48((uint64_t)&p_p, (uint64_t)v181, j);
  v49 = v2;
  v50 = sub_22F276498(v2);
  if (v50 != v51)
  {
    v52 = v50;
    v53 = v51;
    do
    {
      if (*(_QWORD *)(v52 + 56))
      {
        v54 = *(_QWORD *)(v52 + 64);
        if (v54 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v54 + 72))(*(_QWORD *)(v52 + 64)))
        {
          v55 = v180;
          if (v180 >= (unint64_t)HIDWORD(v180))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v55 = v180;
          }
          *((_QWORD *)p_p + v55) = v54;
          LODWORD(v180) = v180 + 1;
        }
        v56 = *(_QWORD *)(v52 + 72);
        if (v56 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v56 + 72))(*(_QWORD *)(v52 + 72)))
        {
          v57 = v180;
          if (v180 >= (unint64_t)HIDWORD(v180))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v57 = v180;
          }
          *((_QWORD *)p_p + v57) = v56;
          LODWORD(v180) = v180 + 1;
        }
      }
      do
        v52 = *(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v52 && (*(_DWORD *)(v52 + 28) & 0x7F) != 0x4E);
    }
    while (v52 != v53);
  }
  if ((_DWORD)v180)
  {
    sub_22E576334(a1, (uint64_t *)p_p, v180);
    sub_22F275848((uint64_t *)&v159);
  }
  else
  {
    sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  }
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  v58 = sub_22F2590A8(v35);
  v59 = sub_22F25910C(v35);
  sub_22E55C27C(v58, v59, (char **)&v168);
  *(_QWORD *)&__p = &v175;
  *((_QWORD *)&__p + 1) = 0x1000000000;
  v60 = v168;
  v61 = v169;
  v62 = v49;
  if (v168 == v169)
    goto LABEL_111;
  do
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 488))(a1, *v60);
    v63 = llvm::ConstantExpr::getBitCast();
    v64 = DWORD2(__p);
    if (DWORD2(__p) >= (unint64_t)HIDWORD(__p))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v64 = DWORD2(__p);
    }
    *(_QWORD *)(__p + 8 * v64) = v63;
    v65 = (llvm::Type *)++DWORD2(__p);
    ++v60;
  }
  while (v60 != v61);
  if ((_DWORD)v65)
  {
    v88 = sub_22E579E24(a1, __p, v65);
    v89 = v159.__r_.__value_.__r.__words[0];
    v90 = *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 16);
    if (v90 >= *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v90 = *(_DWORD *)(v89 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v90) = v88;
    ++*(_DWORD *)(v89 + 16);
  }
  else
  {
LABEL_111:
    sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  }
  sub_22F247080((uint64_t *)&v159, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F246F08((uint64_t *)&v159);
  v91 = sub_22E577F18((_QWORD *)a1, v49, v35, 0, 0);
  v92 = v159.__r_.__value_.__r.__words[0];
  v93 = *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 16);
  if (v93 >= *(_DWORD *)(v159.__r_.__value_.__r.__words[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v93 = *(_DWORD *)(v92 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v93) = v91;
  ++*(_DWORD *)(v92 + 16);
  if (v167 >= 0)
    v94 = (const char *)&v165;
  else
    v94 = (const char *)v165;
  if (v167 >= 0)
    v95 = v167 & 0x7F;
  else
    v95 = v166;
  sub_22E579A9C((uint64_t)__dst, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), v94, v95);
  v96 = v159.__r_.__value_.__r.__words[0];
  sub_22E670C54((uint64_t *)&v159, v161);
  WORD4(v156) = 260;
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  v97 = sub_22F29F614(v96);
  if (SHIBYTE(v153) < 0)
    operator delete(__dst[0]);
  if (v167 >= 0)
    v98 = (const char *)&v165;
  else
    v98 = (const char *)v165;
  if (v167 >= 0)
    v99 = v167 & 0x7F;
  else
    v99 = v166;
  v100 = sub_22E5794C8(a1, v98, v99, 0);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
  {
    *((_BYTE *)&v155.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v155, ".objcrt$CLR");
    std::string::append(&v155, "$m");
  }
  else
  {
    *((_BYTE *)&v155.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v155, "__objc_class_refs");
  }
  llvm::GlobalObject::setSection();
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  llvm::ConstantExpr::getBitCast();
  llvm::GlobalVariable::setInitializer();
  if (v5 == 1)
  {
    v101 = *(_QWORD *)(v62 + 88);
    if ((*(_BYTE *)(v101 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v101);
      v136 = *((unsigned int *)v135 + 2);
      if ((_DWORD)v136)
      {
        v137 = 8 * v136;
        v138 = *v135;
        while (*(_WORD *)(*(_QWORD *)v138 + 32) != 155)
        {
          v138 += 8;
          v137 -= 8;
          if (!v137)
            goto LABEL_179;
        }
      }
      else
      {
        v138 = *v135;
      }
      if (v138 != *v135 + 8 * v136)
      {
        *(_DWORD *)(v97 + 32) = *(_DWORD *)(v97 + 32) & 0xFFFFFCFF | 0x200;
        *(_DWORD *)(v100 + 32) = *(_DWORD *)(v100 + 32) & 0xFFFFFCFF | 0x200;
      }
    }
LABEL_179:
    if (v144)
    {
      Name = llvm::Value::getName(v144);
      if (v103 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_267;
      v104 = (const void *)Name;
      v105 = (void *)v103;
      if (v103 >= 0x17)
      {
        v107 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v107 = v103 | 7;
        v108 = v107 + 1;
        v106 = operator new(v107 + 1);
        __dst[1] = v105;
        v153 = v108 | 0x8000000000000000;
        __dst[0] = v106;
      }
      else
      {
        HIBYTE(v153) = v103;
        v106 = __dst;
        if (!v103)
        {
LABEL_188:
          *((_BYTE *)v105 + (_QWORD)v106) = 0;
          v109 = *(_QWORD *)(a1 + 1568);
          v110 = *(_QWORD *)(a1 + 1576);
          if (v109 < v110)
          {
            *(_OWORD *)v109 = *(_OWORD *)__dst;
            *(_QWORD *)(v109 + 16) = v153;
            *(_QWORD *)(v109 + 24) = v97;
            *(_DWORD *)(v109 + 32) = 1;
            *(_QWORD *)(a1 + 1568) = v109 + 40;
            goto LABEL_207;
          }
          v111 = *(_QWORD *)(a1 + 1560);
          v112 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v109 - v111) >> 3);
          v113 = v112 + 1;
          if (v112 + 1 <= 0x666666666666666)
          {
            if (0x999999999999999ALL * ((uint64_t)(v110 - v111) >> 3) > v113)
              v113 = 0x999999999999999ALL * ((uint64_t)(v110 - v111) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v110 - v111) >> 3) >= 0x333333333333333)
              v114 = 0x666666666666666;
            else
              v114 = v113;
            *((_QWORD *)&v156 + 1) = a1 + 1576;
            if (v114)
            {
              if (v114 > 0x666666666666666)
                sub_22E3B3F8C();
              v115 = (char *)operator new(40 * v114);
            }
            else
            {
              v115 = 0;
            }
            v116 = &v115[8 * ((uint64_t)(v109 - v111) >> 3)];
            *(_OWORD *)v116 = *(_OWORD *)__dst;
            v117 = v153;
            __dst[1] = 0;
            v153 = 0;
            __dst[0] = 0;
            *((_QWORD *)v116 + 2) = v117;
            *((_QWORD *)v116 + 3) = v97;
            *((_DWORD *)v116 + 8) = 1;
            if (v109 == v111)
            {
              v121 = 0;
              v120 = vdupq_n_s64(v109);
              v118 = &v115[40 * v112];
            }
            else
            {
              v118 = &v115[8 * ((uint64_t)(v109 - v111) >> 3)];
              do
              {
                v119 = *(_OWORD *)(v109 - 40);
                *((_QWORD *)v118 - 3) = *(_QWORD *)(v109 - 24);
                *(_OWORD *)(v118 - 40) = v119;
                *(_QWORD *)(v109 - 32) = 0;
                *(_QWORD *)(v109 - 24) = 0;
                *(_QWORD *)(v109 - 40) = 0;
                *((_OWORD *)v118 - 1) = *(_OWORD *)(v109 - 16);
                v118 -= 40;
                v109 -= 40;
              }
              while (v109 != v111);
              v120 = *(int64x2_t *)(a1 + 1560);
              v110 = *(_QWORD *)(a1 + 1576);
              v121 = HIBYTE(v153);
            }
            v122 = v116 + 40;
            *(_QWORD *)(a1 + 1560) = v118;
            *(_QWORD *)(a1 + 1568) = v116 + 40;
            *(int64x2_t *)&v155.__r_.__value_.__r.__words[1] = v120;
            *(_QWORD *)(a1 + 1576) = &v115[40 * v114];
            *(_QWORD *)&v156 = v110;
            v155.__r_.__value_.__r.__words[0] = v120.i64[0];
            sub_22E579BF4((uint64_t)&v155);
            *(_QWORD *)(a1 + 1568) = v122;
            if (v121 < 0)
              operator delete(__dst[0]);
            goto LABEL_207;
          }
LABEL_267:
          abort();
        }
      }
      memmove(v106, v104, (size_t)v105);
      goto LABEL_188;
    }
  }
LABEL_207:
  if (*(_QWORD *)(a1 + 256))
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalAlias::eraseFromParent(*(llvm::GlobalAlias **)(a1 + 256));
    *(_QWORD *)(a1 + 256) = 0;
  }
  if (v167 >= 0)
    v123 = (const char *)&v165;
  else
    v123 = (const char *)v165;
  if (v167 >= 0)
    v124 = v167 & 0x7F;
  else
    v124 = v166;
  sub_22E579A9C((uint64_t)&v155, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), v123, v124);
  v125 = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (v125 && v125 != (llvm::GlobalVariable *)v97)
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalVariable::eraseFromParent(v125);
    v126 = v167 >= 0 ? (const char *)&v165 : (const char *)v165;
    v127 = v167 >= 0 ? v167 & 0x7F : v166;
    sub_22E579A9C((uint64_t)__dst, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), v126, v127);
    WORD4(v156) = 260;
    v155.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
    llvm::Value::setName();
    if (SHIBYTE(v153) < 0)
      operator delete(__dst[0]);
  }
  if (*(_QWORD *)(a1 + 264))
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalAlias::eraseFromParent(*(llvm::GlobalAlias **)(a1 + 264));
    *(_QWORD *)(a1 + 264) = 0;
  }
  v128 = llvm::User::operator new((llvm::User *)0x58);
  v129 = "._";
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
    v129 = "$_";
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
  v155.__r_.__value_.__l.__size_ = 2;
  v155.__r_.__value_.__r.__words[2] = (std::string::size_type)"OBJC_INIT_CLASS_";
  *(_QWORD *)&v156 = 16;
  WORD4(v156) = 1285;
  llvm::Twine::str((llvm::Twine *)&v155);
  if (v167 >= 0)
    v130 = (const std::string::value_type *)&v165;
  else
    v130 = (const std::string::value_type *)v165;
  if (v167 >= 0)
    v131 = v167 & 0x7F;
  else
    v131 = v166;
  v132 = std::string::append(&v147, v130, v131);
  v133 = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)__dst = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v153 = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  WORD4(v156) = 260;
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  llvm::GlobalVariable::GlobalVariable();
  if (SHIBYTE(v153) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
  {
    *((_BYTE *)&v155.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v155, ".objcrt$CLS");
    std::string::append(&v155, "$m");
  }
  else
  {
    *((_BYTE *)&v155.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v155, "__objc_classes");
  }
  llvm::GlobalObject::setSection();
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  v134 = *(_QWORD *)(a1 + 8);
  v155.__r_.__value_.__r.__words[0] = v128;
  sub_22E62C508((uint64_t *)(v134 + 1416), (uint64_t *)&v155);
  *(_BYTE *)(a1 + 1554) = 1;
  if ((uint64_t *)__p != &v175)
    free((void *)__p);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (p_p != v181)
    free(p_p);
  p_p = v187;
  sub_22E3CEB30((void ***)&p_p);
  if (v184 != v186)
    free(v184);
  if (v167 < 0)
    operator delete(v165);
}

void sub_22E56BBF0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char *v6;
  int v7;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  sub_22EFC683C((uint64_t *)(*(_QWORD *)(a2 + 48) + 40), v10);
  sub_22EFC683C((uint64_t *)(a2 + 40), __p);
  v4 = *(_QWORD *)(a1 + 704);
  if (v4 >= *(_QWORD *)(a1 + 712))
  {
    v6 = sub_22E579F98((void **)(a1 + 696), (uint64_t)v10, (uint64_t)__p);
    v7 = SHIBYTE(v9);
    *(_QWORD *)(a1 + 704) = v6;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)v10;
    *(_QWORD *)(v4 + 16) = v11;
    *(_OWORD *)v4 = v5;
    v10[1] = 0;
    v11 = 0;
    v10[0] = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 40) = v9;
    *(_QWORD *)(a1 + 704) = v4 + 48;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
}

void sub_22E56BCAC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t **a9@<X8>, uint64_t a10)
{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  llvm::Type *v65;
  uint64_t v66;
  int v67;
  uint64_t NullValue;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  _QWORD *v74;
  int v75;
  void *v76;
  uint64_t v77;
  size_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  llvm::PHINode *v88;
  uint64_t v89;
  char v90;
  llvm::Constant **v91;
  llvm::Constant **v92;
  uint64_t v93;
  llvm::PHINode *v94;
  llvm::Type *v95;
  uint64_t v96;
  llvm::Constant *v97;
  llvm::PHINode *v98;
  llvm::Type *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t *v108;
  void *v109;
  uint64_t Impl;
  uint64_t v112;
  _OWORD v113[3];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  void *__p;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  char v125;
  __int16 v126;
  unint64_t v127;
  _OWORD v128[2];
  __int128 v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[16];
  __int16 v134;
  void *v135;
  uint64_t v136;
  _BYTE v137[192];
  void *v138;
  uint64_t v139;
  _BYTE v140[16];
  void *v141;
  uint64_t v142;
  _QWORD v143[5];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v118 = a5;
  v18 = a2 + 34;
  v19 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v19 + 152) + 244) & 0x60000) == 0x20000)
  {
    if (*(_QWORD *)(a1 + 432) == a5 || *(_QWORD *)(a1 + 448) == a5)
    {
      v20 = sub_22E66CB04((llvm::Type ***)(v19 + 280), (llvm::LLVMContext *)a4);
      if (*a6 != v20)
      {
        v134 = 257;
        a6 = (uint64_t *)sub_22E3C1740(v18, 49, (uint64_t)a6, v20, (uint64_t)&v131);
      }
      v21 = *((_BYTE *)a9 + 48);
      *a9 = a6;
      a9[1] = 0;
      goto LABEL_9;
    }
    if (*(_QWORD *)(a1 + 440) == a5)
    {
      v21 = *((_BYTE *)a9 + 48);
      *a9 = 0;
      a9[1] = 0;
LABEL_9:
      *((_BYTE *)a9 + 48) = v21 & 0xF8;
      return;
    }
  }
  *(_QWORD *)(a1 + 96) = sub_22E66CB04((llvm::Type ***)(v19 + 280), *(llvm::LLVMContext **)(a1 + 120));
  v22 = *(_QWORD *)a1;
  if (a10)
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v22 + 40))(a1, a2, a10);
  else
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v22 + 24))(a1, a2, a5);
  v24 = (uint64_t)v23;
  v25 = *(_QWORD *)(a1 + 40);
  if (*v23 != v25)
  {
    v134 = 257;
    v24 = sub_22E3C1740(v18, 49, (uint64_t)v23, v25, (uint64_t)&v131);
  }
  v108 = (uint64_t *)a7;
  v109 = (void *)v24;
  v26 = *(_QWORD *)(a1 + 96);
  if (*a6 != v26)
  {
    v134 = 257;
    a6 = (uint64_t *)sub_22E3C1740(v18, 49, (uint64_t)a6, v26, (uint64_t)&v131);
  }
  v117 = a6;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  sub_22F1D3A38(&v118, (char *)&v131);
  v144 = llvm::MDString::get();
  if (a8)
  {
    sub_22EFC683C((uint64_t *)(a8 + 40), &__p);
  }
  else
  {
    HIBYTE(v121) = 0;
    LOBYTE(__p) = 0;
  }
  v145 = llvm::MDString::get();
  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 248), v27);
  llvm::ConstantInt::get();
  v146 = llvm::ValueAsMetadata::get();
  if (SHIBYTE(v121) < 0)
    operator delete(__p);
  if ((v133[7] & 0x80000000) != 0)
    operator delete(v131);
  Impl = llvm::MDTuple::getImpl();
  v131 = v133;
  v132 = 0x800000000;
  v135 = v137;
  v136 = 0x100000000;
  v138 = v140;
  v139 = 0x100000000;
  v141 = v143;
  v142 = 0x200000000;
  v143[4] = 0;
  v28 = *(_QWORD *)(a1 + 120);
  __p = a6;
  v120 = 0;
  v125 = 0;
  v126 = 0;
  v127 = v28;
  v29 = sub_22E3C187C((uint64_t)&v131, (unint64_t)&__p, 1);
  v30 = (char *)v131 + 152 * v132;
  v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v29;
  *((_OWORD *)v30 + 1) = v31;
  v32 = *(_QWORD *)(v29 + 144);
  v33 = *(_OWORD *)(v29 + 128);
  v34 = *(_OWORD *)(v29 + 96);
  *((_OWORD *)v30 + 7) = *(_OWORD *)(v29 + 112);
  *((_OWORD *)v30 + 8) = v33;
  *((_QWORD *)v30 + 18) = v32;
  *((_OWORD *)v30 + 6) = v34;
  v35 = *(_OWORD *)(v29 + 80);
  v36 = *(_OWORD *)(v29 + 32);
  v37 = *(_OWORD *)(v29 + 48);
  *((_OWORD *)v30 + 4) = *(_OWORD *)(v29 + 64);
  *((_OWORD *)v30 + 5) = v35;
  *((_OWORD *)v30 + 2) = v36;
  *((_OWORD *)v30 + 3) = v37;
  LODWORD(v132) = v132 + 1;
  v38 = *(_QWORD *)(a2[18] + 144);
  v39 = sub_22F36E228(v38);
  v40 = *(_QWORD *)(v39 + 48);
  if (v40)
    v41 = v40 & 0xFFFFFFFFFFFFFFF0;
  else
    v41 = sub_22EF6462C(v38, v39);
  __p = v109;
  v120 = 0;
  v125 = 0;
  v126 = 0;
  v127 = v41;
  v42 = sub_22E3C187C((uint64_t)&v131, (unint64_t)&__p, 1);
  v43 = (char *)v131 + 152 * v132;
  v44 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v43 = *(_OWORD *)v42;
  *((_OWORD *)v43 + 1) = v44;
  v45 = *(_QWORD *)(v42 + 144);
  v46 = *(_OWORD *)(v42 + 128);
  v47 = *(_OWORD *)(v42 + 96);
  *((_OWORD *)v43 + 7) = *(_OWORD *)(v42 + 112);
  *((_OWORD *)v43 + 8) = v46;
  *((_QWORD *)v43 + 18) = v45;
  *((_OWORD *)v43 + 6) = v47;
  v48 = *(_OWORD *)(v42 + 80);
  v49 = *(_OWORD *)(v42 + 32);
  v50 = *(_OWORD *)(v42 + 48);
  *((_OWORD *)v43 + 4) = *(_OWORD *)(v42 + 64);
  *((_OWORD *)v43 + 5) = v48;
  *((_OWORD *)v43 + 2) = v49;
  *((_OWORD *)v43 + 3) = v50;
  LODWORD(v132) = v132 + 1;
  sub_22E5010F0((uint64_t)&v131, a7);
  v104 = sub_22F2796B8(a1, a10, a4, &v131);
  v115 = v104;
  v116 = v51;
  if (!sub_22E596480(a1, (uint64_t)a2, a10, 0, a8, (llvm::Value *)a6))
  {
    v106 = 0;
    v56 = 0;
    goto LABEL_62;
  }
  if (a10 && (v52 = *(unsigned int *)(a10 + 104), (_DWORD)v52))
  {
    v53 = *(uint64_t **)(a10 + 96);
    v54 = 8 * v52 - 8;
    do
    {
      v55 = *v53++;
      v56 = sub_22EFBF328(v55);
      if ((v56 & 1) != 0)
        break;
      v57 = v54;
      v54 -= 8;
    }
    while (v57);
  }
  else
  {
    v56 = 0;
  }
  if ((*(_BYTE *)(a3 + 48) & 2) != 0)
    goto LABEL_56;
  v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(_DWORD *)(v58 + 16);
  v60 = v59 & 0xFF800FF;
  if (v58 && v60 == 86507531)
    goto LABEL_56;
  if ((*(_DWORD *)(v58 + 16) & 0xFE) == 0x28
    || (*(_DWORD *)(v58 + 16) <= 0x27u ? (v62 = ((1 << v59) & 0x8100000400) == 0) : (v62 = 1),
        !v62 || (v58 ? (v101 = v60 == 114294795) : (v101 = 0), v101)))
  {
    if ((sub_22E66DE5C(*(_QWORD *)(a1 + 8) + 280, a4) & 1) != 0)
      goto LABEL_56;
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v59 = *(_DWORD *)(v58 + 16);
  }
  if (v59 == 9)
    goto LABEL_56;
  if (v59 == 44)
  {
    v63 = sub_22F114198(*(_QWORD *)(v58 + 24));
    if ((*(_BYTE *)(v63 + 74) & 1) == 0 && *(_QWORD *)(v63 + 128) <= 7uLL)
      goto LABEL_104;
    goto LABEL_56;
  }
  if (v59 == 11 && ((v59 >> 19) & 0x1FE) - 166 < 0x14)
  {
LABEL_56:
    if (v56)
    {
      v106 = 0;
      goto LABEL_58;
    }
    v106 = 0;
LABEL_62:
    v67 = 0;
    v105 = 0;
    v107 = 0;
    v64 = 0;
    goto LABEL_67;
  }
LABEL_104:
  v106 = sub_22E619D68(a4) == 2;
LABEL_58:
  __p = "msgSend";
  LOWORD(v123) = 259;
  v103 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  __p = "continue";
  LOWORD(v123) = 259;
  v64 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  if (v56 || v106)
  {
    __p = "nilReceiverCleanup";
    LOWORD(v123) = 259;
    v66 = operator new();
    llvm::BasicBlock::BasicBlock();
    v107 = 0;
  }
  else
  {
    v66 = 0;
    v107 = a2[40];
  }
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)*a6, v65);
  LOWORD(v123) = 257;
  v102 = sub_22E3C18F4((uint64_t)v18, 32, a6, NullValue, (uint64_t)&__p);
  v105 = (_QWORD *)v66;
  if (!v66)
    v66 = (uint64_t)v64;
  v69 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v69, v66, v103, v102, 0);
  LOWORD(v123) = 257;
  sub_22E3C12C8(v18, v69, (uint64_t)&__p);
  sub_22E5ED9B4(a2, v103, 0);
  v67 = 1;
LABEL_67:
  v70 = *(_QWORD *)(a1 + 8);
  v71 = (*(_QWORD *)(*(_QWORD *)(v70 + 184) + 96) >> 41) & 3;
  if ((v71 - 1) >= 2)
  {
    if ((_DWORD)v71)
    {
      v74 = 0;
    }
    else
    {
      v74 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **, void *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 464))(a1, a2, &v117, v109, Impl, &v115);
      a6 = v117;
    }
    goto LABEL_82;
  }
  if (!sub_22E46F1EC(*(_QWORD *)(a1 + 8), a4))
  {
    v75 = *(unsigned __int8 *)(v104 + 72);
    if (v75 == 8)
    {
      v76 = *(void **)(a1 + 96);
      if ((*(_WORD *)(v104 + 73) & 2) != 0)
        goto LABEL_77;
    }
    else
    {
      if (v75 == 2)
      {
        v76 = *(void **)(a1 + 96);
LABEL_77:
        __p = v76;
        v72 = llvm::FunctionType::get();
        v73 = "objc_msgSend_stret";
        goto LABEL_78;
      }
      v76 = *(void **)(a1 + 96);
    }
    __p = v76;
    v72 = llvm::FunctionType::get();
    v73 = "objc_msgSend";
    v77 = v70;
    v78 = 12;
    goto LABEL_81;
  }
  __p = *(void **)(a1 + 96);
  v72 = llvm::FunctionType::get();
  v73 = "objc_msgSend_fpret";
LABEL_78:
  v77 = v70;
  v78 = 18;
LABEL_81:
  sub_22E633A04(v77, v72, v73, v78, 0, 0, 0);
  v74 = v79;
LABEL_82:
  v80 = *(_QWORD *)(a1 + 120);
  v81 = v131;
  *(_QWORD *)v131 = a6;
  v81[1] = 0;
  *((_BYTE *)v81 + 48) = 0;
  *((_WORD *)v81 + 68) = 0;
  v81[18] = v80;
  if (*v74 != v116)
  {
    LOWORD(v123) = 257;
    v74 = (_QWORD *)sub_22E3C1740(v18, 49, (uint64_t)v74, v116, (uint64_t)&__p);
  }
  v114 = 0;
  v124 = 0;
  v120 = 0;
  v121 = 0;
  __p = v74;
  v123 = 0;
  v122 = 0;
  v82 = *(_OWORD *)(a3 + 16);
  v128[0] = *(_OWORD *)a3;
  v128[1] = v82;
  v129 = *(_OWORD *)(a3 + 32);
  v130 = *(_QWORD *)(a3 + 48);
  sub_22E47A004((unint64_t)a2, v115, (uint64_t)&__p, (uint64_t)v128, (uint64_t)&v131, &v114, 0, 0, (uint64_t)a9, 0);
  llvm::Instruction::setMetadata();
  if (v67)
  {
    v112 = a2[40];
    v83 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v129) = 257;
    sub_22E3C12C8(v18, v83, (uint64_t)v128);
    if (v105)
    {
      sub_22E5ED9B4(a2, v105, 0);
      if (v56)
        sub_22E5965BC((llvm::Value *)a2, a10, v108);
      if (v106)
      {
        v84 = *((_OWORD *)a9 + 1);
        v113[0] = *(_OWORD *)a9;
        v113[1] = v84;
        v113[2] = *((_OWORD *)a9 + 2);
        sub_22E620824((uint64_t)a2, (uint64_t)v113, a4);
      }
      v107 = a2[40];
      v85 = llvm::User::operator new((llvm::User *)0x40);
      llvm::BranchInst::BranchInst();
      LOWORD(v129) = 257;
      sub_22E3C12C8(v18, v85, (uint64_t)v128);
    }
    sub_22E5ED9B4(a2, v64, 0);
    if (((_BYTE)a9[6] & 6) != 4)
    {
      if (((_BYTE)a9[6] & 6) != 0)
      {
        v91 = (llvm::Constant **)*a9;
        v92 = (llvm::Constant **)a9[1];
        v93 = **a9;
        LOWORD(v129) = 257;
        v90 = 2;
        v94 = (llvm::PHINode *)sub_22E3C4B80(v18, v93, 2, (uint64_t)v128);
        sub_22E3C4C50(v94, (uint64_t)v91, v112);
        v96 = llvm::Constant::getNullValue(*v91, v95);
        sub_22E3C4C50(v94, v96, v107);
        v97 = *v92;
        LOWORD(v129) = 257;
        v98 = (llvm::PHINode *)sub_22E3C4B80(v18, (uint64_t)v97, 2, (uint64_t)v128);
        sub_22E3C4C50(v98, (uint64_t)v92, v112);
        v100 = llvm::Constant::getNullValue(*v92, v99);
        sub_22E3C4C50(v98, v100, v107);
        *a9 = (uint64_t *)v94;
        a9[1] = (uint64_t *)v98;
      }
      else
      {
        v86 = *a9;
        v87 = **a9;
        LOWORD(v129) = 257;
        v88 = (llvm::PHINode *)sub_22E3C4B80(v18, v87, 2, (uint64_t)v128);
        sub_22E3C4C50(v88, (uint64_t)v86, v112);
        v89 = sub_22E507208(*(_QWORD **)(a1 + 8), a4);
        sub_22E3C4C50(v88, v89, v107);
        v90 = 0;
        *a9 = (uint64_t *)v88;
        a9[1] = 0;
      }
      *((_BYTE *)a9 + 48) = v90;
    }
  }
  if (v141 != v143)
    free(v141);
  if (v138 != v140)
    free(v138);
  if (v135 != v137)
    free(v135);
  if (v131 != v133)
    free(v131);
}

void sub_22E56C850(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, llvm::LLVMContext *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, llvm::Type **a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  size_t v54;
  llvm::Value *v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  llvm::Type **v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Type *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  size_t v69;
  std::string *v70;
  std::string::size_type v71;
  llvm::LLVMContext *v72;
  uint64_t v73;
  uint64_t *v74;
  llvm::GetElementPtrInst *v75;
  llvm::Type *v76;
  __int16 v77;
  uint64_t v78;
  void **v79;
  llvm::Type *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void **v87;
  uint64_t v88;
  llvm::LLVMContext *v89;
  __int128 v90;
  llvm::Type **v91;
  void **v93;
  uint64_t v94;
  _QWORD v95[3];
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  int v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[48];
  _QWORD v104[3];
  int v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[48];
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *__p[2];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  std::string v116;
  void *v117;
  uint64_t v118;
  _WORD v119[608];
  void *v120;
  uint64_t v121;
  _BYTE v122[192];
  void *v123;
  uint64_t v124;
  _BYTE v125[16];
  void *v126;
  uint64_t v127;
  _QWORD v128[5];
  void **v129;
  void **v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  char v135;
  __int16 v136;
  unint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  v111 = a5;
  v19 = (uint64_t *)(a2 + 272);
  v20 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v20 + 152) + 244) & 0x60000) == 0x20000)
  {
    if (*(_QWORD *)(a1 + 432) == a5 || *(_QWORD *)(a1 + 448) == a5)
    {
      v21 = sub_22E66CB04((llvm::Type ***)(v20 + 280), a4);
      if (*a8 != (llvm::Type *)v21)
      {
        v119[8] = 257;
        a8 = (llvm::Type **)sub_22E3C1740(v19, 49, (uint64_t)a8, v21, (uint64_t)&v117);
      }
      v22 = *(_BYTE *)(a9 + 48);
      *(_QWORD *)a9 = a8;
      *(_QWORD *)(a9 + 8) = 0;
      goto LABEL_9;
    }
    if (*(_QWORD *)(a1 + 440) == a5)
    {
      v22 = *(_BYTE *)(a9 + 48);
      *(_QWORD *)a9 = 0;
      *(_QWORD *)(a9 + 8) = 0;
LABEL_9:
      *(_BYTE *)(a9 + 48) = v22 & 0xF8;
      return;
    }
  }
  v93 = (void **)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a5);
  v117 = v119;
  v118 = 0x800000000;
  v120 = v122;
  v121 = 0x100000000;
  v123 = v125;
  v124 = 0x100000000;
  v126 = v128;
  v127 = 0x200000000;
  v128[4] = 0;
  v23 = *(_QWORD *)(a1 + 96);
  v24 = (void **)a8;
  if (*a8 != (llvm::Type *)v23)
  {
    LOWORD(v133) = 257;
    v24 = (void **)sub_22E3C1740(v19, 49, (uint64_t)a8, v23, (uint64_t)&v129);
  }
  v25 = *(_QWORD *)(a1 + 120);
  v129 = v24;
  v130 = 0;
  v135 = 0;
  v136 = 0;
  v137 = v25;
  v26 = sub_22E3C187C((uint64_t)&v117, (unint64_t)&v129, 1);
  v27 = (char *)v117 + 152 * v118;
  v28 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v26;
  *((_OWORD *)v27 + 1) = v28;
  v29 = *(_QWORD *)(v26 + 144);
  v30 = *(_OWORD *)(v26 + 128);
  v31 = *(_OWORD *)(v26 + 96);
  *((_OWORD *)v27 + 7) = *(_OWORD *)(v26 + 112);
  *((_OWORD *)v27 + 8) = v30;
  *((_QWORD *)v27 + 18) = v29;
  *((_OWORD *)v27 + 6) = v31;
  v32 = *(_OWORD *)(v26 + 80);
  v33 = *(_OWORD *)(v26 + 32);
  v34 = *(_OWORD *)(v26 + 48);
  *((_OWORD *)v27 + 4) = *(_OWORD *)(v26 + 64);
  *((_OWORD *)v27 + 5) = v32;
  *((_OWORD *)v27 + 2) = v33;
  *((_OWORD *)v27 + 3) = v34;
  LODWORD(v118) = v118 + 1;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v36 = sub_22F36E228(v35);
  v37 = *(_QWORD *)(v36 + 48);
  if (v37)
    v38 = v37 & 0xFFFFFFFFFFFFFFF0;
  else
    v38 = sub_22EF6462C(v35, v36);
  v129 = v93;
  v130 = 0;
  v135 = 0;
  v136 = 0;
  v137 = v38;
  v39 = sub_22E3C187C((uint64_t)&v117, (unint64_t)&v129, 1);
  v40 = (char *)v117 + 152 * v118;
  v41 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v39;
  *((_OWORD *)v40 + 1) = v41;
  v42 = *(_QWORD *)(v39 + 144);
  v43 = *(_OWORD *)(v39 + 128);
  v44 = *(_OWORD *)(v39 + 96);
  *((_OWORD *)v40 + 7) = *(_OWORD *)(v39 + 112);
  *((_OWORD *)v40 + 8) = v43;
  *((_QWORD *)v40 + 18) = v42;
  *((_OWORD *)v40 + 6) = v44;
  v45 = *(_OWORD *)(v39 + 80);
  v46 = *(_OWORD *)(v39 + 32);
  v47 = *(_OWORD *)(v39 + 48);
  *((_OWORD *)v40 + 4) = *(_OWORD *)(v39 + 64);
  *((_OWORD *)v40 + 5) = v45;
  *((_OWORD *)v40 + 2) = v46;
  *((_OWORD *)v40 + 3) = v47;
  LODWORD(v118) = v118 + 1;
  sub_22E5010F0((uint64_t)&v117, a11);
  v109 = sub_22F2796B8(a1, a12, (uint64_t)a4, &v117);
  v110 = (void *)v48;
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
  if (*(_DWORD *)(v49 + 400) != 6
    || (v129 = (void **)0x8000000000000002, v130 = 0, (sub_22E3B38EC((_DWORD *)(v49 + 404), &v129) & 1) != 0))
  {
    if (a7)
    {
      v50 = *(_QWORD *)(a1 + 8);
      v129 = *(void ***)(a1 + 136);
      v51 = llvm::FunctionType::get();
      if (a10)
      {
        v52 = "objc_get_meta_class";
        v53 = v50;
        v54 = 19;
      }
      else
      {
        v52 = "objc_get_class";
        v53 = v50;
        v54 = 14;
      }
      v65 = sub_22E633A04(v53, v51, v52, v54, 0, 0, 0);
      v67 = v66;
      sub_22EFC683C((uint64_t *)(a6 + 40), __p);
      if ((SBYTE7(v113) & 0x80u) == 0)
        v68 = __p;
      else
        v68 = (void **)__p[0];
      if ((SBYTE7(v113) & 0x80u) == 0)
        v69 = BYTE7(v113) & 0x7F;
      else
        v69 = (size_t)__p[1];
      v116.__r_.__value_.__r.__words[0] = sub_22E5760BC(a1, v68, v69, "");
      LOWORD(v133) = 257;
      v55 = sub_22E462B78(v19, v65, v67, (uint64_t)&v116, 1, (uint64_t)&v129, 0);
      if (SBYTE7(v113) < 0)
        operator delete(__p[0]);
    }
    else if (a10)
    {
      v55 = *(llvm::Value **)(a1 + 264);
      if (!v55)
      {
        sub_22EFC683C((uint64_t *)(a6 + 40), &v116);
        v56 = std::string::insert(&v116, 0, ".objc_metaclass_ref");
        v57 = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        *(_QWORD *)&v113 = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        LOWORD(v133) = 260;
        v129 = __p;
        *(_QWORD *)(a1 + 264) = llvm::GlobalAlias::create();
        if (SBYTE7(v113) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        v55 = *(llvm::Value **)(a1 + 264);
      }
    }
    else
    {
      v55 = *(llvm::Value **)(a1 + 256);
      if (!v55)
      {
        sub_22EFC683C((uint64_t *)(a6 + 40), &v116);
        v70 = std::string::insert(&v116, 0, ".objc_class_ref");
        v71 = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        *(_QWORD *)&v113 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        LOWORD(v133) = 260;
        v129 = __p;
        *(_QWORD *)(a1 + 256) = llvm::GlobalAlias::create();
        if (SBYTE7(v113) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        v55 = *(llvm::Value **)(a1 + 256);
      }
    }
    v129 = *(void ***)(a1 + 96);
    v130 = v129;
    v72 = (llvm::LLVMContext *)llvm::StructType::get();
    v73 = llvm::PointerType::get();
    LOWORD(v133) = 257;
    v74 = (uint64_t *)sub_22E3C1740(v19, 49, (uint64_t)v55, v73, (uint64_t)&v129);
    LOWORD(v133) = 257;
    v75 = sub_22E3C4170(v19, v72, v74, 0, 1, (uint64_t)&v129);
    v76 = *(llvm::Type **)(a1 + 96);
    v77 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    LOWORD(v133) = 257;
    v78 = sub_22E3C3200(v19, v76, (uint64_t)v75, v77, 0, (uint64_t)&v129);
    goto LABEL_50;
  }
  v58 = sub_22F3B46CC(a6);
  sub_22EFC683C((uint64_t *)(v58 + 40), &v129);
  v59 = (llvm::Type **)(*(uint64_t (**)(uint64_t, unint64_t, void ***, _QWORD))(*(_QWORD *)a1 + 456))(a1, a2, &v129, 0);
  if (SHIBYTE(v131) < 0)
    operator delete(v129);
  if (a10)
  {
    v60 = llvm::PointerType::get();
    LOWORD(v133) = 257;
    v61 = sub_22E3C1740(v19, 49, (uint64_t)v59, v60, (uint64_t)&v129);
    v62 = *(llvm::Type **)(a1 + 96);
    v63 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    LOWORD(v133) = 257;
    v59 = (llvm::Type **)sub_22E3C3200(v19, v62, v61, v63, 0, (uint64_t)&v129);
  }
  v64 = *(_QWORD *)(a1 + 96);
  if (*v59 != (llvm::Type *)v64)
  {
    LOWORD(v133) = 257;
    v78 = sub_22E3C1740(v19, 49, (uint64_t)v59, v64, (uint64_t)&v129);
LABEL_50:
    v91 = (llvm::Type **)v78;
    goto LABEL_51;
  }
  v91 = v59;
LABEL_51:
  v79 = *(void ***)(a1 + 96);
  v129 = (void **)*a8;
  v130 = v79;
  v80 = (llvm::Type *)llvm::StructType::get();
  v81 = *(unsigned __int8 *)(a2 + 130);
  v129 = (void **)"tmp";
  LOWORD(v133) = 259;
  v82 = sub_22E4D83CC(a2, v80, v81, (uint64_t)&v129, 0, 0);
  v84 = 0;
  if (v82 <= 7)
    v85 = 0;
  else
    v85 = v82 & 0xFFFFFFFFFFFFFFF8;
  if (v82 <= 7)
    v86 = 0;
  else
    v86 = v83 & 0xFFFFFFFFFFFFFFF8;
  if (v82 >= 8)
    v84 = 1 << (v83 & 7 | (8 * (v82 & 7)));
  v104[0] = v85;
  v104[1] = v86;
  v104[2] = v84;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  LOWORD(v133) = 257;
  sub_22E3C408C(v19, (uint64_t)v104, 0, (uint64_t)&v129, (uint64_t)v108);
  sub_22E3BEDDC((uint64_t)v19, a8, (uint64_t)v108);
  v99[0] = v85;
  v99[1] = v86;
  v99[2] = v84;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  LOWORD(v133) = 257;
  sub_22E3C408C(v19, (uint64_t)v99, 1, (uint64_t)&v129, (uint64_t)v103);
  sub_22E3BEDDC((uint64_t)v19, v91, (uint64_t)v103);
  v95[0] = v85;
  v95[1] = v86;
  v95[2] = v84;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v87 = (void **)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *, void **, uint64_t *))(*(_QWORD *)a1 + 472))(a1, a2, v95, v93, &v109);
  if (*v87 != v110)
  {
    LOWORD(v133) = 257;
    v87 = (void **)sub_22E3C1740(v19, 49, (uint64_t)v87, (uint64_t)v110, (uint64_t)&v129);
  }
  sub_22F1D3A38(&v111, (char *)&v129);
  v116.__r_.__value_.__r.__words[0] = llvm::MDString::get();
  v88 = sub_22F3B46CC(a6);
  sub_22EFC683C((uint64_t *)(v88 + 40), __p);
  v116.__r_.__value_.__l.__size_ = llvm::MDString::get();
  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 248), v89);
  llvm::ConstantInt::get();
  v116.__r_.__value_.__r.__words[2] = llvm::ValueAsMetadata::get();
  if (SBYTE7(v113) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v131) < 0)
    operator delete(v129);
  llvm::MDTuple::getImpl();
  v134 = 0;
  v130 = 0;
  v131 = 0;
  v129 = v87;
  v133 = 0;
  v132 = 0;
  v94 = 0;
  v90 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v113 = v90;
  v114 = *(_OWORD *)(a3 + 32);
  v115 = *(_QWORD *)(a3 + 48);
  sub_22E47A004(a2, v109, (uint64_t)&v129, (uint64_t)__p, (uint64_t)&v117, &v94, 0, 0, a9, 0);
  llvm::Instruction::setMetadata();
  if (v126 != v128)
    free(v126);
  if (v123 != v125)
    free(v123);
  if (v120 != v122)
    free(v120);
  if (v117 != v119)
    free(v117);
}

uint64_t sub_22E56D270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *p_p;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type *v11;
  __int16 v12;
  uint64_t v13;
  const void *v15;
  size_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  char v23;
  void *__p;
  size_t v25;
  char v26;
  void *v27;
  char v28;
  std::string v29;
  uint64_t v30;
  __int16 v31;

  sub_22EFC683C((uint64_t *)(a3 + 40), &__p);
  if (v26 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v26 >= 0)
    v7 = v26 & 0x7F;
  else
    v7 = v25;
  v8 = sub_22F246F88((llvm::StringMapImpl *)(a1 + 1584), p_p, v7);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 8);
  if (!v10)
  {
    if (v26 >= 0)
      v15 = &__p;
    else
      v15 = __p;
    if (v26 >= 0)
      v16 = v26 & 0x7F;
    else
      v16 = v25;
    v17 = sub_22F246F88((llvm::StringMapImpl *)(a1 + 376), v15, v16);
    if (!*(_QWORD *)(*v17 + 8))
    {
      v18 = *v17;
      *(_QWORD *)(v18 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, a3);
    }
    if (v26 >= 0)
      v19 = &__p;
    else
      v19 = __p;
    if (v26 >= 0)
      v20 = v26 & 0x7F;
    else
      v20 = v25;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      v21 = "$_";
    else
      v21 = "._";
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v29.__r_.__value_.__l.__size_ = 2;
    v29.__r_.__value_.__r.__words[2] = (std::string::size_type)"OBJC_REF_PROTOCOL_";
    v30 = 18;
    v31 = 1285;
    llvm::Twine::str((llvm::Twine *)&v29);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    v29.__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
    v30 = v20;
    v31 = 1284;
    llvm::Twine::str((llvm::Twine *)&v29);
    if (v28 < 0)
      operator delete(v27);
    v10 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ConstantExpr::getBitCast();
    v31 = 260;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    llvm::GlobalVariable::GlobalVariable();
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
    {
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v29, ".objcrt$PCR");
      std::string::append(&v29, "$m");
    }
    else
    {
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&v29, "__objc_protocol_refs");
    }
    llvm::GlobalObject::setSection();
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    llvm::GlobalObject::setAlignment();
    *(_QWORD *)(v9 + 8) = v10;
    if (v23 < 0)
    {
      operator delete(v22);
      v10 = *(_QWORD *)(v9 + 8);
    }
  }
  *(_BYTE *)(a1 + 1553) = 1;
  v11 = *(llvm::Type **)(a1 + 80);
  v12 = (63 - __clz(*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130))) | 0x100;
  v31 = 257;
  v13 = sub_22E3C3200((uint64_t *)(a2 + 272), v11, v10, v12, 0, (uint64_t)&v29);
  if (v26 < 0)
    operator delete(__p);
  return v13;
}

uint64_t sub_22E56D5E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
}

uint64_t sub_22E56D5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v10;
  __int16 v11;
  void *__p[2];
  char v13;

  v4 = *(_QWORD *)(a1 + 8) + 280;
  v5 = sub_22E46D060(v4, a2, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 48));
  v6 = sub_22E46F2EC(v4, v5);
  sub_22E5966F4(a1, a2, 1, __p);
  v11 = 260;
  v10 = __p;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v8, v6, 7, 0xFFFFFFFFLL, &v10, v7);
  if (v13 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t sub_22E56D6AC(uint64_t a1)
{
  return sub_22E579234(a1 + 1000);
}

uint64_t sub_22E56D6B4(uint64_t a1)
{
  return sub_22E579234(a1 + 1040);
}

uint64_t sub_22E56D6BC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1336;
  if (a3)
    v3 = 1376;
  v4 = a1 + v3;
  v5 = a1 + 1256;
  if (a3)
    v5 = a1 + 1296;
  if (a2)
    return sub_22E579234(v5);
  else
    return sub_22E579234(v4);
}

uint64_t sub_22E56D6EC(uint64_t a1)
{
  return sub_22E579234(a1 + 1080);
}

uint64_t sub_22E56D6F4(uint64_t a1)
{
  return sub_22E579234(a1 + 1120);
}

uint64_t sub_22E56D6FC(uint64_t a1)
{
  return sub_22E579234(a1 + 1456);
}

uint64_t sub_22E56D704(uint64_t a1)
{
  return sub_22E579234(a1 + 1416);
}

uint64_t sub_22E56D70C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v11;

  sub_22EFC683C((uint64_t *)(a3 + 40), __p);
  v6 = sub_22EFCA55C(a3);
  v7 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t))(*a1 + 456))(a1, a2, __p, v6);
  if (v11 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(v7 + 16) == 3 && v7 != 0)
    sub_22F29966C(a1[1], (unsigned int *)v7, a3);
  return v7;
}

uint64_t sub_22E56D7AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char __p[18];
  char v17;

  v17 = 17;
  strcpy(__p, "NSAutoreleasePool");
  v4 = (*(uint64_t (**)(uint64_t *, uint64_t, char *, _QWORD))(*a1 + 456))(a1, a2, __p, 0);
  if (v17 < 0)
    operator delete(*(void **)__p);
  if (*(_DWORD *)(*(_QWORD *)(a1[1] + 216) + 76) == 1 && *(_BYTE *)(v4 + 16) == 3 && v4 != 0)
  {
    v7 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 15192), "NSAutoreleasePool", 0x11uLL);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 144) + 1960) + 80);
    v9 = sub_22E3CD31C((uint64_t *)(v8 + 72), v8);
    if (v9)
      v10 = v9 + 40;
    else
      v10 = 0;
    v11 = sub_22EFCE144(v10, v7);
    v12 = 0;
    if (v11)
    {
      while (1)
      {
        v13 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) == 0 || !v13)
          break;
        v12 = *(_QWORD *)v13;
        if (*(_QWORD *)v13)
          v14 = (*(_DWORD *)(*(_QWORD *)v13 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8;
        else
          v14 = 0;
        if (v14)
          goto LABEL_28;
        v11 = *(_QWORD *)(v13 + 8);
        if (!v11)
        {
          v12 = 0;
          goto LABEL_28;
        }
      }
      if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9 || v13 == 0)
        v12 = 0;
      else
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_28:
    sub_22F29966C(a1[1], (unsigned int *)v4, v12);
  }
  return v4;
}

uint64_t sub_22E56D900(uint64_t a1)
{
  return sub_22E579234(a1 + 960);
}

void sub_22E56D908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;

  v6 = sub_22E579234(a1 + 880);
  v8 = v7;
  v9 = sub_22E579234(a1 + 920);
  sub_22F279528(v11, a1, a2, a3, v6, v8, v9, v10);
}

void sub_22E56D970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_22E579234(a1 + 800);
  v8 = v7;
  v9 = sub_22E579234(a1 + 840);
  v11 = v10;
  v12 = sub_22E579234(a1 + 760);
  sub_22E595B8C(a1, a2, a3, v6, v8, v9, v11, v14, v12, v13);
}

uint64_t sub_22E56DA00(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 a5)
{
  unsigned __int8 *v8;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value *v12;
  _QWORD *v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[32];
  __int16 v25;
  uint64_t v26;

  v8 = *(unsigned __int8 **)(a3 + 16);
  if (v8)
  {
    v9 = sub_22F273FC8(a2, v8, a5);
  }
  else
  {
    v9 = *(llvm::Value **)(*(_QWORD *)(a2 + 2792) + 8 * *(unsigned int *)(a2 + 2800) - 8);
    v26 = (uint64_t)v9;
    if (*(_BYTE *)(a1 + 220))
    {
      v10 = sub_22E579234(a1 + 760);
      v12 = v11;
      v25 = 257;
      v13 = (_QWORD *)a2;
      v14 = v10;
      v15 = v12;
      v16 = 0;
      v17 = 0;
      goto LABEL_6;
    }
  }
  v18 = *(_QWORD *)(a1 + 96);
  v25 = 257;
  v26 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v9, v18, (uint64_t)v24);
  v19 = sub_22E579234(a1 + 720);
  v21 = v20;
  v25 = 257;
  v16 = &v26;
  v13 = (_QWORD *)a2;
  v14 = v19;
  v15 = v21;
  v17 = 1;
LABEL_6:
  v22 = sub_22F24F1F4(v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v24);
  *(_WORD *)(v22 + 18) = *(_WORD *)(v22 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Value::getContext((llvm::Value *)v22);
  *(_QWORD *)(v22 + 64) = llvm::AttributeList::addAttributeAtIndex();
  result = sub_22F24866C(a2 + 272);
  if (a4)
  {
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
  }
  return result;
}

llvm::Value *sub_22E56DB30(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  _BYTE v14[32];
  __int16 v15;

  v6 = a2 + 34;
  v7 = sub_22E579234(a1 + 576);
  v9 = v8;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v10 = (_QWORD *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v10 = *(_QWORD **)a3;
  v11 = *(_QWORD *)(a1 + 112);
  if (*v10 != v11)
  {
    v15 = 257;
    v10 = (_QWORD *)sub_22E3C1740(v6, 49, (uint64_t)v10, v11, (uint64_t)v14);
  }
  v13 = v10;
  v15 = 257;
  return sub_22E462B78(v6, v7, v9, (uint64_t)&v13, 1, (uint64_t)v14, 0);
}

llvm::Value *sub_22E56DBFC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[3];

  v5 = (uint64_t)a3;
  v17[2] = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 34;
  v9 = *(_QWORD *)(a1 + 96);
  if (*a3 != v9)
  {
    v16 = 257;
    v5 = sub_22E3C1740(a2 + 34, 49, (uint64_t)a3, v9, (uint64_t)v15);
  }
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v10 = (_QWORD *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v10 = *(_QWORD **)a4;
  v11 = *(_QWORD *)(a1 + 112);
  if (*v10 != v11)
  {
    v16 = 257;
    v10 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)v10, v11, (uint64_t)v15);
  }
  v12 = sub_22E579234(a1 + 616);
  v17[0] = v5;
  v17[1] = v10;
  v16 = 257;
  return sub_22E462B78(v8, v12, v13, (uint64_t)v17, 2, (uint64_t)v15, 0);
}

llvm::Value *sub_22E56DD2C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[3];

  v5 = (uint64_t)a3;
  v17[2] = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 34;
  v9 = *(_QWORD *)(a1 + 96);
  if (*a3 != v9)
  {
    v16 = 257;
    v5 = sub_22E3C1740(a2 + 34, 49, (uint64_t)a3, v9, (uint64_t)v15);
  }
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v10 = (_QWORD *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v10 = *(_QWORD **)a4;
  v11 = *(_QWORD *)(a1 + 112);
  if (*v10 != v11)
  {
    v16 = 257;
    v10 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)v10, v11, (uint64_t)v15);
  }
  v12 = sub_22E579234(a1 + 656);
  v17[0] = v5;
  v17[1] = v10;
  v16 = 257;
  return sub_22E462B78(v8, v12, v13, (uint64_t)v17, 2, (uint64_t)v15, 0);
}

llvm::Value *sub_22E56DE5C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[4];

  v7 = (uint64_t)a3;
  v19[3] = *MEMORY[0x24BDAC8D0];
  v10 = a2 + 34;
  v11 = *(_QWORD *)(a1 + 96);
  if (*a3 != v11)
  {
    v18 = 257;
    v7 = sub_22E3C1740(a2 + 34, 49, (uint64_t)a3, v11, (uint64_t)v17);
  }
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v12 = (_QWORD *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v12 = *(_QWORD **)a4;
  v13 = *(_QWORD *)(a1 + 96);
  if (*v12 != v13)
  {
    v18 = 257;
    v12 = (_QWORD *)sub_22E3C1740(v10, 49, (uint64_t)v12, v13, (uint64_t)v17);
  }
  v14 = sub_22E579234(a1 + 456);
  v19[0] = v7;
  v19[1] = v12;
  v19[2] = a5;
  v18 = 257;
  return sub_22E462B78(v10, v14, v15, (uint64_t)v19, 3, (uint64_t)v17, 0);
}

llvm::Value *sub_22E56DF94(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[3];

  v5 = (uint64_t)a3;
  v17[2] = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 34;
  v9 = *(_QWORD *)(a1 + 96);
  if (*a3 != v9)
  {
    v16 = 257;
    v5 = sub_22E3C1740(a2 + 34, 49, (uint64_t)a3, v9, (uint64_t)v15);
  }
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v10 = (_QWORD *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v10 = *(_QWORD **)a4;
  v11 = *(_QWORD *)(a1 + 112);
  if (*v10 != v11)
  {
    v16 = 257;
    v10 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)v10, v11, (uint64_t)v15);
  }
  v12 = sub_22E579234(a1 + 496);
  v17[0] = v5;
  v17[1] = v10;
  v16 = 257;
  return sub_22E462B78(v8, v12, v13, (uint64_t)v17, 2, (uint64_t)v15, 0);
}

double sub_22E56E0C4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;

  v13 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 35 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = sub_22F272660(v13);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2, v15, a5);
  return sub_22F279218(a2, v15, a4, a5, a6, v16, a7);
}

_QWORD *sub_22E56E170(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t GlobalVariable;
  uint64_t *v9;
  llvm::Type *v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[4];
  __int16 v16;
  void *v17;
  char v18;

  v7 = sub_22EFDE1AC(a4);
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *, uint64_t))(*a1 + 448))(&v17, a1, v7, a4);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    v16 = 260;
    v15[0] = &v17;
    llvm::GlobalVariable::GlobalVariable();
  }
  v9 = (uint64_t *)(a2 + 272);
  v10 = (llvm::Type *)a1[16];
  v11 = (63 - __clz(*(unsigned __int8 *)(a1[1] + 128))) | 0x100;
  v16 = 257;
  v12 = (_QWORD *)sub_22E3C3200(v9, v10, GlobalVariable, v11, 0, (uint64_t)v15);
  v13 = a1[21];
  if (*v12 != v13)
  {
    v16 = 257;
    v12 = (_QWORD *)sub_22E3D3108(v9, (uint64_t)v12, v13, (uint64_t)v15);
  }
  if (v18 < 0)
    operator delete(v17);
  return v12;
}

llvm::Value *sub_22E56E2C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v9 = a2 + 34;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v10 = (_QWORD *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v10 = *(_QWORD **)a3;
  v11 = *(_QWORD *)(a1 + 136);
  if (*v10 != v11)
  {
    v18 = 257;
    v10 = (_QWORD *)sub_22E3C1740(v9, 49, (uint64_t)v10, v11, (uint64_t)v17);
  }
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v12 = (_QWORD *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v12 = *(_QWORD **)a4;
  v13 = *(_QWORD *)(a1 + 136);
  if (*v12 != v13)
  {
    v18 = 257;
    v12 = (_QWORD *)sub_22E3C1740(v9, 49, (uint64_t)v12, v13, (uint64_t)v17);
  }
  v14 = sub_22E579234(a1 + 536);
  v19[0] = v10;
  v19[1] = v12;
  v19[2] = a5;
  v18 = 257;
  return sub_22E462B78(v9, v14, v15, (uint64_t)v19, 3, (uint64_t)v17, 0);
}

uint64_t sub_22E56E41C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_22E56E424(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_22E56E42C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_22E56E434(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t BitCast;
  uint64_t v6;
  llvm::Type *v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  sub_22E55C27C(*(_QWORD *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 16)+ 8 * *(unsigned int *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 24), (char **)&__p);
  v13 = v15;
  v14 = 0x1000000000;
  v3 = __p;
  v4 = v12;
  if (__p == v12)
  {
    v7 = 0;
    v8 = v15;
  }
  else
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 488))(a1, *v3);
      BitCast = llvm::ConstantExpr::getBitCast();
      v6 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v14;
      }
      *((_QWORD *)v13 + v6) = BitCast;
      v7 = (llvm::Type *)(v14 + 1);
      LODWORD(v14) = v14 + 1;
      ++v3;
    }
    while (v3 != v4);
    LODWORD(v8) = (_DWORD)v13;
  }
  v9 = sub_22E579E24(a1, (int)v8, v7);
  if (v13 != v15)
    free(v13);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return v9;
}

uint64_t sub_22E56E584@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[56];

  v13[55] = *MEMORY[0x24BDAC8D0];
  result = sub_22F246F08((uint64_t *)a2);
  v7 = *(_QWORD *)(a1[1] + 152);
  if (*(_DWORD *)(v7 + 400) == 6)
  {
    v13[0] = 0x8000000000000002;
    v13[1] = 0;
    result = sub_22E3B38EC((_DWORD *)(v7 + 404), v13);
    if ((result & 1) == 0)
    {
      MEMORY[0x23489C120](v13, a1[2]);
      sub_22E3C304C((uint64_t)v13, a1[26]);
      llvm::TypeSize::operator unsigned long long();
      sub_22EF5CDF0(*(_QWORD *)(a1[1] + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
      sub_22F246F08((uint64_t *)a2);
      result = MEMORY[0x23489C12C](v13);
    }
  }
  v8 = a1[30];
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v10 >= *(_DWORD *)(*(_QWORD *)a2 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 16);
  v11 = a1[26];
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = *(unsigned int *)(v12 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 31) = 0;
  *(_BYTE *)(a2 + 33) = 1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v11;
  return result;
}

void sub_22E56E6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *p_p;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22[3];
  void *v23[2];
  uint64_t v24;
  void *__p;
  size_t v26;
  char v27;
  uint64_t v28[7];

  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)a2;
  v28[0] = v9;
  v28[1] = a2;
  v28[2] = *(unsigned int *)(v9 + 16);
  memset(&v28[3], 0, 11);
  *(_BYTE *)(a2 + 33) = 1;
  v28[5] = 0;
  v28[6] = v8;
  if (v8)
    BYTE2(v28[4]) = (*(_DWORD *)(v8 + 8) & 0x200) != 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  sub_22EFC683C((uint64_t *)(a3 + 40), &__p);
  if (v27 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v27 >= 0)
    v12 = v27 & 0x7F;
  else
    v12 = v26;
  v13 = sub_22E5760BC(a1, p_p, v12, "");
  v14 = *(_DWORD *)(v9 + 16);
  if (v14 >= *(_DWORD *)(v9 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v14) = v13;
  ++*(_DWORD *)(v9 + 16);
  if (v27 < 0)
    operator delete(__p);
  sub_22EF6C7E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a3, a4, (uint64_t)&__p);
  if (v27 >= 0)
    v15 = &__p;
  else
    v15 = __p;
  if (v27 >= 0)
    v16 = v27 & 0x7F;
  else
    v16 = v26;
  v17 = sub_22E5760BC(a1, v15, v16, "");
  v18 = *(_DWORD *)(v9 + 16);
  if (v18 >= *(_DWORD *)(v9 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v18) = v17;
  ++*(_DWORD *)(v9 + 16);
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v19 = *(_QWORD *)(a3 + 56);
  LODWORD(v22[0]) = 7;
  sub_22EF6B358(v10, v19);
  v20 = sub_22E5760BC(a1, v23, 0, "");
  v21 = *(_DWORD *)(v9 + 16);
  if (v21 >= *(_DWORD *)(v9 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v21) = v20;
  ++*(_DWORD *)(v9 + 16);
  v22[0] = v10;
  v22[1] = (uint64_t)v28;
  v22[2] = a1;
  sub_22E57A130(v22, *(_QWORD **)(a3 + 104));
  sub_22E57A130(v22, *(_QWORD **)(a3 + 112));
  sub_22F2759F0(v28, (uint64_t *)a2);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  if (v27 < 0)
    operator delete(__p);
}

uint64_t sub_22E56E988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t BitCast;
  _QWORD v5[4];
  __int16 v6;
  void *v7;
  char v8;

  v6 = 261;
  v5[0] = a2;
  v5[1] = a3;
  sub_22E579148((uint64_t)&v7, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), (uint64_t)v5);
  if (!llvm::Module::getGlobalVariable())
  {
    llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setAlignment();
  }
  BitCast = llvm::ConstantExpr::getBitCast();
  if (v8 < 0)
    operator delete(v7);
  return BitCast;
}

uint64_t sub_22E56EA9C(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *p_p;
  size_t size;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23[7];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[4];
  uint64_t v28[7];
  std::string __p;
  void **v30[54];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  _QWORD v35[3];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v30[0] = *(void ***)(a1 + 64);
  v30[1] = v30[0];
  v6 = llvm::StructType::get();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v31 = *(_QWORD *)(a1 + 8);
  v32 = v34;
  v33 = 0x1000000000;
  memset(v35, 0, sizeof(v35));
  v28[5] = 0;
  v28[6] = 0;
  v28[0] = (uint64_t)&v31;
  memset(&v28[1], 0, 27);
  v36 = 1;
  sub_22F246F08(v28);
  MEMORY[0x23489C120](v30, *(_QWORD *)(a1 + 16));
  sub_22E3C304C((uint64_t)v30, v6);
  v24 = v8;
  v25 = v9;
  llvm::TypeSize::operator unsigned long long();
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  sub_22F246F08(v28);
  v24 = v28[0];
  v25 = v28;
  v26 = *(unsigned int *)(v28[0] + 16);
  memset(v27, 0, 11);
  BYTE1(v28[4]) = 1;
  v27[2] = 0;
  v27[3] = v6;
  if (a3)
  {
    v12 = 8 * a3;
    do
    {
      v13 = *a2;
      v23[0] = v24;
      v23[1] = (uint64_t)&v24;
      v23[2] = *(unsigned int *)(v24 + 16);
      v23[5] = 0;
      v23[6] = v6;
      memset(&v23[3], 0, 11);
      BYTE1(v27[1]) = 1;
      if (v6)
        BYTE2(v23[4]) = (*(_DWORD *)(v6 + 8) & 0x200) != 0;
      v14 = v13[5];
      sub_22EF6C204(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v13, 0, &__p);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 480))(a1, v14, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = v23[0];
      v17 = *(unsigned int *)(v23[0] + 16);
      if (v17 >= *(unsigned int *)(v23[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = *(unsigned int *)(v16 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v17) = v15;
      ++*(_DWORD *)(v16 + 16);
      sub_22EF6C204(v7, v13, 1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v20 = sub_22E57A234(a1, p_p, size);
      v21 = v23[0];
      v22 = *(unsigned int *)(v23[0] + 16);
      if (v22 >= *(unsigned int *)(v23[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *(unsigned int *)(v21 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v22) = v20;
      ++*(_DWORD *)(v21 + 16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22F2759F0(v23, &v24);
      ++a2;
      v12 -= 8;
    }
    while (v12);
  }
  sub_22F2758B8((uint64_t)&v24, v28);
  v23[0] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v10 = sub_22F276560(v28);
  MEMORY[0x23489C12C](v30);
  v30[0] = (void **)v35;
  sub_22E3CEB30(v30);
  if (v32 != v34)
    free(v32);
  return v10;
}

uint64_t sub_22E56EDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, a3, a4);
}

void sub_22E56EE04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  void *__p[2];
  char v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string::value_type *v25;
  std::string::size_type v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v8 = *(_QWORD *)(a3 + 48);
  LODWORD(v24.__r_.__value_.__l.__data_) = 7;
  sub_22EF6B358(v7, v8);
  sub_22EFC683C((uint64_t *)(a2 + 40), &v20);
  v9 = std::string::insert(&v20, 0, "__objc_ivar_offset_");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v21, 46);
  v22 = v21;
  memset(&v21, 0, sizeof(v21));
  sub_22EFC683C((uint64_t *)(a3 + 40), __p);
  if (v19 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v19 >= 0)
    v12 = v19 & 0x7F;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v23, 46);
  v24 = v23;
  memset(&v23, 0, sizeof(v23));
  if (v27 >= 0)
    v15 = (const std::string::value_type *)&v25;
  else
    v15 = v25;
  if (v27 >= 0)
    v16 = HIBYTE(v27) & 0x7F;
  else
    v16 = v26;
  v17 = std::string::append(&v24, v15, v16);
  *a4 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(v25);
}

uint64_t sub_22E56F024(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v5;
  char v6;
  BOOL v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)(a2 + 272);
  v6 = *(_BYTE *)(a3 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (const char *)a3;
  else
    v8 = *(const char **)a3;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(a3 + 8);
  else
    v10 = v9;
  v11 = sub_22E5794C8(a1, v8, v10, a4);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v17[0] = v11;
  v17[1] = v12;
  v17[2] = v13;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v16 = 257;
  return sub_22E3C2A7C(v5, (uint64_t)v17, (uint64_t)v15);
}

uint64_t sub_22E56F0A0(uint64_t a1, uint64_t a2, llvm::Type ***a3, _QWORD *a4)
{
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type **v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  llvm::PointerType *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  llvm::LLVMContext *v30;
  llvm::GetElementPtrInst *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[3];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  __int16 v44;
  _QWORD v45[3];
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  __int16 v50;
  _QWORD v51[5];

  v51[3] = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(a2 + 272);
  v37 = sub_22E579234(a1 + 1176);
  v10 = v9;
  v11 = **a3;
  v12 = *(unsigned __int8 *)(a2 + 130);
  v49[0] = "tmp";
  v50 = 259;
  v13 = sub_22E4D83CC(a2, v11, v12, (uint64_t)v49, 0, 0);
  v14 = v13;
  v16 = v15;
  v17 = 0;
  v18 = *a3;
  v19 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if (v13 <= 7)
    v20 = 0;
  else
    v20 = v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 <= 7)
    v21 = 0;
  else
    v21 = v16 & 0xFFFFFFFFFFFFFFF8;
  v38 = v20;
  v45[0] = v20;
  v45[1] = v21;
  if (v13 >= 8)
    v17 = 1 << (v16 & 7 | (8 * (v13 & 7)));
  v36 = v16;
  v45[2] = v17;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_22E3BEDDC((uint64_t)v8, v18, (uint64_t)v45);
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 1600) + 28) & 0x7F) == 0x18)
    v23 = sub_22F272828((_QWORD *)a2);
  else
    v23 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 96), v22);
  v24 = (_QWORD *)v23;
  if (!*((_BYTE *)v10 + 16) && v10)
    llvm::Function::addParamAttr();
  v25 = *(_QWORD *)(a1 + 112);
  if (*v19 != v25)
  {
    v50 = 257;
    v19 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)v19, v25, (uint64_t)v49);
  }
  v51[0] = v19;
  v26 = *(_QWORD *)(a1 + 40);
  if (*a4 != v26)
  {
    v50 = 257;
    a4 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)a4, v26, (uint64_t)v49);
  }
  v51[1] = a4;
  v27 = *(_QWORD *)(a1 + 96);
  if (*v24 != v27)
  {
    v50 = 257;
    v24 = (_QWORD *)sub_22E3C1740(v8, 49, (uint64_t)v24, v27, (uint64_t)v49);
  }
  v51[2] = v24;
  v50 = 257;
  v28 = sub_22F24F1F4((_QWORD *)a2, v37, v10, (uint64_t)v51, 3, (uint64_t)v49);
  *(_WORD *)(v28 + 18) = *(_WORD *)(v28 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Value::getContext((llvm::Value *)v28);
  *(_QWORD *)(v28 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Instruction::setMetadata();
  v29 = *(llvm::Type **)(a1 + 88);
  v30 = *(llvm::LLVMContext **)(a1 + 1504);
  v50 = 257;
  v31 = sub_22E3C4170(v8, v30, (uint64_t *)v28, 0, 4, (uint64_t)v49);
  v32 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v44 = 257;
  v33 = sub_22E3C3200(v8, v29, (uint64_t)v31, v32, 0, (uint64_t)v43);
  v39[0] = v38;
  v39[1] = v21;
  if (v14 < 8)
    v34 = 0;
  else
    v34 = 1 << (v36 & 7 | (8 * (v14 & 7u)));
  v39[2] = v34;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v50 = 257;
  *a3 = (llvm::Type **)sub_22E485864(v8, (uint64_t)v39, 1, (uint64_t)v49);
  return v33;
}

llvm::Value *sub_22E56F3D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v7 = (_QWORD *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v7 = *(_QWORD **)a3;
  v8 = *(_QWORD *)(a1 + 32);
  if (*v7 != v8)
  {
    v13 = 257;
    v7 = (_QWORD *)sub_22E3C1740(a2 + 34, 49, (uint64_t)v7, v8, (uint64_t)v12);
  }
  v14[0] = v7;
  v14[1] = a4;
  v9 = sub_22E579234(a1 + 1512);
  v13 = 257;
  return sub_22F24EEDC((uint64_t)a2, v9, v10, (uint64_t)v14, 2, (uint64_t)v12);
}

llvm::GlobalValue *sub_22E56F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  char *v6;
  std::string *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  std::string::size_type size;
  const void **v13;
  llvm::GlobalValue *GlobalVariable;
  llvm::GlobalValue *BitCast;
  uint64_t v17;
  unsigned int v18;
  char v19;
  BOOL v20;
  void *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  void ****v29;
  std::string::size_type v30;
  const char *v31;
  void *v32[4];
  void *__p[2];
  char v34;
  const void *v35[2];
  char v36;
  __int16 v37;
  void *v38;
  char v39;
  void *__dst[2];
  uint64_t v41;
  uint64_t v42;
  std::string v43;
  __int16 v44;
  void ***v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  _QWORD v49[3];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v42 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v41 = *(_QWORD *)(a3 + 16);
  }
  v5 = __dst;
  if (v41 < 0)
    v5 = (void **)__dst[0];
  v6 = (char *)(HIBYTE(v41) & 0x7F);
  if (v41 < 0)
    v6 = (char *)__dst[1];
  for (; v6; --v6)
  {
    if (*(_BYTE *)v5 == 64)
      *(_BYTE *)v5 = 1;
    v5 = (void **)((char *)v5 + 1);
  }
  v37 = 261;
  v35[0] = ".objc_selector_";
  v35[1] = (const void *)15;
  v7 = (std::string *)__p;
  sub_22F1D3A38(&v42, (char *)__p);
  v8 = v37;
  if (v37 == 1)
  {
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v44 = 260;
    v11 = 4;
    size = v43.__r_.__value_.__l.__size_;
  }
  else
  {
    if (!(_BYTE)v37)
    {
      v9 = 0;
      v44 = 256;
      LOWORD(v32[1]) = 256;
      v10 = 1;
      goto LABEL_20;
    }
    v13 = (const void **)v35[0];
    v11 = 2;
    if (HIBYTE(v37) != 1)
    {
      v8 = 2;
      v13 = v35;
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    v43.__r_.__value_.__l.__size_ = (std::string::size_type)v35[1];
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
    LOBYTE(v44) = v8;
    size = 4;
    HIBYTE(v44) = 4;
    v7 = &v43;
  }
  v29 = (void ****)v7;
  v30 = size;
  v31 = "_";
  LOBYTE(v32[1]) = v11;
  BYTE1(v32[1]) = 3;
  v10 = 4;
  v9 = 2;
  v45 = (void ***)&v29;
  v47 = (uint64_t)__dst;
LABEL_20:
  v48[8] = v9;
  v48[9] = v10;
  llvm::Twine::str((llvm::Twine *)&v45);
  if (v34 < 0)
    operator delete(__p[0]);
  GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    BitCast = GlobalVariable;
    if (*(_QWORD *)GlobalVariable != *(_QWORD *)(a1 + 40))
      BitCast = (llvm::GlobalValue *)llvm::ConstantExpr::getBitCast();
    goto LABEL_25;
  }
  v45 = *(void ****)(a1 + 8);
  v46 = v48;
  v47 = 0x1000000000;
  memset(v49, 0, sizeof(v49));
  v32[2] = 0;
  v32[3] = 0;
  v29 = &v45;
  v30 = 0;
  v31 = 0;
  memset(v32, 0, 11);
  v50 = 1;
  sub_22F1D3A38(&v42, (char *)&v43);
  v36 = 15;
  strcpy((char *)v35, ".objc_sel_name_");
  v17 = sub_22E5768FC(a1, (const void **)&v43.__r_.__value_.__l.__data_, v35, 1);
  v18 = v47;
  if (v47 >= HIDWORD(v47))
  {
    v28 = v17;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v28;
    v18 = v47;
  }
  *((_QWORD *)v46 + v18) = v17;
  LODWORD(v47) = v47 + 1;
  if (v36 < 0)
    operator delete((void *)v35[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v19 = *(_BYTE *)(a3 + 23);
  v20 = v19 < 0;
  if (v19 >= 0)
    v21 = (void *)a3;
  else
    v21 = *(void **)a3;
  v22 = v19 & 0x7F;
  if (v20)
    v23 = *(_QWORD *)(a3 + 8);
  else
    v23 = v22;
  v24 = sub_22E57A234(a1, v21, v23);
  v25 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v47;
  }
  *((_QWORD *)v46 + v25) = v24;
  LODWORD(v47) = v47 + 1;
  sub_22E670C54((uint64_t *)&v29, 0);
  v44 = 260;
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  BitCast = (llvm::GlobalValue *)sub_22F29F614((uint64_t)&v45);
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  v26 = *((_DWORD *)BitCast + 8);
  v27 = v26 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)BitCast + 8) = v27;
  if ((v26 & 0xFu) - 7 < 2)
    goto LABEL_47;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(BitCast) & 1) == 0)
  {
    v27 = *((_DWORD *)BitCast + 8);
LABEL_47:
    *((_DWORD *)BitCast + 8) = v27 | 0x4000;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
  {
    *((_BYTE *)&v43.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v43, ".objcrt$SEL");
    std::string::append(&v43, "$m");
  }
  else
  {
    *((_BYTE *)&v43.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v43, "__objc_selectors");
  }
  llvm::GlobalObject::setSection();
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (*(_QWORD *)BitCast != *(_QWORD *)(a1 + 40))
    BitCast = (llvm::GlobalValue *)llvm::ConstantExpr::getBitCast();
  v29 = (void ****)v49;
  sub_22E3CEB30((void ***)&v29);
  if (v46 != v48)
    free(v46);
LABEL_25:
  if (v39 < 0)
    operator delete(v38);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  return BitCast;
}

uint64_t sub_22E56FA0C(void **a1, uint64_t *a2)
{
  const void *v4;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::GlobalVariable *GlobalVariable;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t BitCast;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t IntToPtr;
  unsigned int v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  void **v65;
  __int16 v66;
  void *__p;
  char v68;
  void *v69;
  size_t v70;
  char v71;
  std::string v72;
  __int16 v73;
  void *p_p;
  void *v75;
  uint64_t v76;
  _WORD v77[64];
  _QWORD v78[3];
  char v79;
  void *v80;
  llvm::Type *v81;
  _BYTE v82[128];
  void **v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[17];

  v86[15] = *MEMORY[0x24BDAC8D0];
  sub_22EFC683C(a2 + 5, &v69);
  if (v71 >= 0)
    v4 = &v69;
  else
    v4 = v69;
  if (v71 >= 0)
    v5 = v71 & 0x7F;
  else
    v5 = v70;
  v6 = sub_22F246F88((llvm::StringMapImpl *)(a1 + 47), v4, v5);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 8);
  if (v8)
    goto LABEL_15;
  *((_BYTE *)a1 + 1552) = 1;
  v66 = 260;
  v65 = &v69;
  sub_22E579148((uint64_t)&__p, *(_DWORD *)(*((_QWORD *)a1[1] + 27) + 76), (uint64_t)&v65);
  GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
  v10 = a2[13];
  if (!v10)
  {
    sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v10 = a2[13];
  }
  if (v10 >= 8)
  {
    v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if (v11)
    {
      v80 = v82;
      v81 = (llvm::Type *)0x1000000000;
      v13 = *(_QWORD *)(v11 + 104);
      if (!v13)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v11 + 96) + 88), *(_QWORD *)(v11 + 96));
        v13 = *(_QWORD *)(v11 + 104);
      }
      if (v13 < 8)
      {
        if (v13
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v11 + 96) + 88), *(_QWORD *)(v11 + 96)),
              v17 = *(_QWORD *)(v11 + 104),
              v17 < 8))
        {
          v15 = 0;
          v16 = 0;
          goto LABEL_27;
        }
        v15 = 0;
        v14 = v17 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
        v15 = *(_QWORD *)(v14 + 8);
      }
      v16 = *(_QWORD *)(v14 + 8) + 8 * *(unsigned int *)(v14 + 16);
LABEL_27:
      sub_22E55C27C(v15, v16, (char **)&v63);
      v18 = v63;
      v19 = v64;
      if (v63 == v64)
      {
        v20 = v81;
      }
      else
      {
        do
        {
          (*((void (**)(void **, _QWORD))*a1 + 61))(a1, *v18);
          BitCast = llvm::ConstantExpr::getBitCast();
          v26 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = v81;
          }
          *((_QWORD *)v80 + v26) = BitCast;
          v20 = (_DWORD)v81 + 1;
          LODWORD(v81) = (_DWORD)v81 + 1;
          ++v18;
        }
        while (v18 != v19);
      }
      v62 = sub_22E579E24((uint64_t)a1, (int)v80, (llvm::Type *)v20);
      v21 = sub_22F276230(v11);
      p_p = &v76;
      v75 = (void *)0x1000000000;
      v83 = (void **)&v85;
      v84 = 0x1000000000;
      if (v21 == v22)
      {
        v23 = 0;
        v24 = &v76;
      }
      else
      {
        v27 = v21;
        v28 = v22;
        do
        {
          if ((*(_QWORD *)(v27 + 56) & 0x3000000) == 0x2000000)
          {
            v29 = v84;
            v30 = (void **)&v83;
            if (v84 >= (unint64_t)HIDWORD(v84))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = v84;
            }
          }
          else
          {
            v29 = v75;
            v30 = &p_p;
            if (v75 >= (unint64_t)HIDWORD(v75))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = v75;
            }
          }
          *((_QWORD *)*v30 + v29) = v27;
          ++*((_DWORD *)v30 + 2);
          do
            v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v27 && ((*(_DWORD *)(v27 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v27 + 58) & 2) == 0));
        }
        while (v27 != v28);
        v24 = (uint64_t *)p_p;
        v23 = v75;
      }
      v60 = (*((uint64_t (**)(void **, uint64_t *, _QWORD))*a1 + 54))(a1, v24, v23);
      v61 = (*((uint64_t (**)(void **, void **, _QWORD))*a1 + 54))(a1, v83, v84);
      if (v83 != (void **)&v85)
        free(v83);
      if (p_p != &v76)
        free(p_p);
      v31 = sub_22F27628C(v11);
      p_p = &v76;
      v75 = (void *)0x1000000000;
      v83 = (void **)&v85;
      v84 = 0x1000000000;
      if (v31 == v32)
      {
        v33 = 0;
        v34 = &v76;
      }
      else
      {
        v35 = v31;
        v36 = v32;
        do
        {
          if ((*(_QWORD *)(v35 + 56) & 0x3000000) == 0x2000000)
          {
            v37 = v84;
            v38 = (void **)&v83;
            if (v84 >= (unint64_t)HIDWORD(v84))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v37 = v84;
            }
          }
          else
          {
            v37 = v75;
            v38 = &p_p;
            if (v75 >= (unint64_t)HIDWORD(v75))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v37 = v75;
            }
          }
          *((_QWORD *)*v38 + v37) = v35;
          ++*((_DWORD *)v38 + 2);
          do
            v35 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v35 && ((*(_DWORD *)(v35 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v35 + 58) & 2) != 0));
        }
        while (v35 != v36);
        v34 = (uint64_t *)p_p;
        v33 = v75;
      }
      v39 = (*((uint64_t (**)(void **, uint64_t *, _QWORD))*a1 + 54))(a1, v34, v33);
      v40 = (*((uint64_t (**)(void **, void **, _QWORD))*a1 + 54))(a1, v83, v84);
      if (v83 != (void **)&v85)
        free(v83);
      if (p_p != &v76)
        free(p_p);
      p_p = a1[1];
      v75 = v77;
      v76 = 0x1000000000;
      memset(v78, 0, sizeof(v78));
      v86[2] = 0;
      v86[3] = 0;
      v83 = &p_p;
      v84 = 0;
      v85 = 0;
      v86[0] = 0;
      *(_DWORD *)((char *)v86 + 7) = 0;
      v79 = 1;
      llvm::ConstantInt::get();
      IntToPtr = llvm::ConstantExpr::getIntToPtr();
      v42 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = v76;
      }
      *((_QWORD *)v75 + v42) = IntToPtr;
      LODWORD(v76) = v76 + 1;
      if (v71 >= 0)
        v43 = &v69;
      else
        v43 = v69;
      if (v71 >= 0)
        v44 = v71 & 0x7F;
      else
        v44 = v70;
      v45 = sub_22E5760BC((uint64_t)a1, v43, v44, "");
      v46 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = v76;
      }
      *((_QWORD *)v75 + v46) = v45;
      v47 = v76 + 1;
      LODWORD(v76) = v47;
      if (v47 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v47 = v76;
      }
      *((_QWORD *)v75 + v47) = v62;
      v48 = v76 + 1;
      LODWORD(v76) = v48;
      if (v48 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = v76;
      }
      *((_QWORD *)v75 + v48) = v60;
      v49 = v76 + 1;
      LODWORD(v76) = v49;
      if (v49 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v49 = v76;
      }
      *((_QWORD *)v75 + v49) = v39;
      v50 = v76 + 1;
      LODWORD(v76) = v50;
      if (v50 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = v76;
      }
      *((_QWORD *)v75 + v50) = v61;
      v51 = v76 + 1;
      LODWORD(v76) = v51;
      if (v51 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = v76;
      }
      *((_QWORD *)v75 + v51) = v40;
      LODWORD(v76) = v76 + 1;
      v52 = sub_22E577F18(a1, 0, v11, 0, 0);
      v53 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v53 = v76;
      }
      *((_QWORD *)v75 + v53) = v52;
      LODWORD(v76) = v76 + 1;
      v54 = sub_22E577F18(a1, 0, v11, 0, 1);
      v55 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v55 = v76;
      }
      *((_QWORD *)v75 + v55) = v54;
      LODWORD(v76) = v76 + 1;
      v56 = sub_22E577F18(a1, 0, v11, 1, 0);
      v57 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v57 = v76;
      }
      *((_QWORD *)v75 + v57) = v56;
      LODWORD(v76) = v76 + 1;
      v58 = sub_22E577F18(a1, 0, v11, 1, 1);
      v59 = v76;
      if (v76 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v59 = v76;
      }
      *((_QWORD *)v75 + v59) = v58;
      LODWORD(v76) = v76 + 1;
      sub_22E670C54((uint64_t *)&v83, 0);
      v73 = 260;
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v8 = sub_22F29F614((uint64_t)&p_p);
      if (*(_DWORD *)(*((_QWORD *)a1[1] + 27) + 76) == 1)
      {
        *((_BYTE *)&v72.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v72, ".objcrt$PCL");
        std::string::append(&v72, "$m");
      }
      else
      {
        *((_BYTE *)&v72.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v72, "__objc_protocols");
      }
      llvm::GlobalObject::setSection();
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
      if (GlobalVariable)
      {
        llvm::ConstantExpr::getBitCast();
        llvm::Value::replaceAllUsesWith();
        llvm::GlobalVariable::removeFromParent(GlobalVariable);
        v73 = 260;
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        llvm::Value::setName();
      }
      *(_QWORD *)(v7 + 8) = v8;
      v83 = (void **)v78;
      sub_22E3CEB30(&v83);
      if (v75 != v77)
        free(v75);
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      if (v80 != v82)
        free(v80);
      goto LABEL_13;
    }
  }
  v8 = llvm::User::operator new((llvm::User *)0x58);
  v77[4] = 260;
  p_p = &__p;
  *(_QWORD *)(v7 + 8) = llvm::GlobalVariable::GlobalVariable();
LABEL_13:
  if (v68 < 0)
    operator delete(__p);
LABEL_15:
  if (v71 < 0)
    operator delete(v69);
  return v8;
}

uint64_t sub_22E5704F8(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  int MDKindID;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type ***v11;
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  llvm::LLVMContext *v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  llvm::PointerType *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  llvm::LLVMContext *v28;
  llvm::DataLayout *DataLayout;
  uint64_t PointerAlignElem;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  llvm::LLVMContext *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::LLVMContext *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;

  *(_QWORD *)a1 = off_24FA64890;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2[25];
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 248) = a2[29];
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_DWORD *)(a1 + 364) = 16;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 396) = 16;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v44 = (_QWORD *)(a1 + 456);
  v45 = (_QWORD *)(a1 + 616);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  v46 = (_QWORD *)(a1 + 536);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  v47 = (_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = a3;
  *(_DWORD *)(a1 + 1164) = a4;
  *(_DWORD *)(a1 + 1168) = a5;
  MDKindID = llvm::LLVMContext::getMDKindID();
  v8 = 0;
  *(_DWORD *)(a1 + 216) = MDKindID;
  v9 = *(_QWORD *)(a2[18] + 15088);
  if (*(_DWORD *)(v9 + 68) == 15)
    v8 = (*(_DWORD *)(v9 + 72) & 0xFFFFFFEF) == 0;
  *(_BYTE *)(a1 + 220) = v8;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (llvm::Type ***)(v10 + 280);
  *(_QWORD *)(a1 + 128) = sub_22E66CB04((llvm::Type ***)(v10 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(v10 + 144) + 16480));
  *(_QWORD *)(a1 + 144) = sub_22E66CB04(v11, *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16488));
  v12 = (llvm::LLVMContext *)sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  *(_QWORD *)(a1 + 152) = sub_22E66CB04(v11, v12);
  v13 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15088)- 24)+ 120));
  *(_QWORD *)(a1 + 168) = sub_22E66CB04(v11, v13);
  *(_QWORD *)(a1 + 184) = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16400));
  *(_QWORD *)(a1 + 56) = llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 248), v14);
  *(_QWORD *)(a1 + 64) = llvm::PointerType::get();
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v16 = sub_22F36E2EC(v15);
  v17 = (llvm::LLVMContext *)sub_22F36D148(v15, v16, 0);
  sub_22E66CB04(v11, v17);
  *(_QWORD *)(a1 + 80) = llvm::PointerType::get();
  v18 = llvm::ConstantInt::get();
  *(_QWORD *)(a1 + 224) = v18;
  *(_QWORD *)(a1 + 232) = v18;
  *(_QWORD *)(a1 + 240) = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 64), v19);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v21 = sub_22F36E228(v20);
  v22 = *(_QWORD *)(v21 + 48);
  if (v22)
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFF0;
    if ((v22 & 0xFFFFFFFFFFFFFFF0) != 0)
      goto LABEL_5;
  }
  else
  {
    v23 = sub_22EF6462C(v20, v21);
    if (v23)
    {
LABEL_5:
      *(_QWORD *)(a1 + 40) = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)v23);
      v24 = *(_QWORD *)(a1 + 8) + 280;
      v25 = sub_22F10ACF8(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
      v26 = sub_22E66C868(v24, v25, 0);
      goto LABEL_8;
    }
  }
  v26 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
LABEL_8:
  *(_QWORD *)(a1 + 48) = v26;
  *(_QWORD *)(a1 + 176) = llvm::PointerType::get();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 192) = llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 248), v27);
  *(_QWORD *)(a1 + 200) = llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 248), v28);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  PointerAlignElem = llvm::DataLayout::getPointerAlignElem(DataLayout);
  v31 = 200;
  if (*(_DWORD *)(PointerAlignElem + 4) == 32)
    v31 = 192;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + v31);
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v33 = sub_22F36E1B8(v32);
  v34 = *(_QWORD *)(v33 + 48);
  if (v34)
    v35 = v34 & 0xFFFFFFFFFFFFFFF0;
  else
    v35 = sub_22EF6462C(v32, v33);
  *(_QWORD *)(a1 + 120) = 0;
  if (v35)
  {
    v36 = (llvm::LLVMContext *)(*(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 8) | v35 & 7);
    *(_QWORD *)(a1 + 120) = v36;
    *(_QWORD *)(a1 + 96) = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), v36);
    v37 = *(_QWORD *)(a1 + 8) + 280;
    v38 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF0));
    v39 = sub_22E66C868(v37, v38, 0);
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 104) = v39;
  *(_QWORD *)(a1 + 112) = llvm::PointerType::get();
  *(_QWORD *)(a1 + 72) = llvm::StructType::get();
  *(_QWORD *)(a1 + 208) = llvm::StructType::get();
  *(_QWORD *)(a1 + 24) = llvm::StructType::get();
  *(_QWORD *)(a1 + 32) = llvm::PointerType::get();
  llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 248), v40);
  sub_22E570DD4((_QWORD *)(a1 + 720), *(_QWORD *)(a1 + 8), (uint64_t)"objc_exception_throw");
  sub_22E570DD4((_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 8), (uint64_t)"objc_exception_throw");
  sub_22E570DD4((_QWORD *)(a1 + 880), *(_QWORD *)(a1 + 8), (uint64_t)"objc_sync_enter");
  sub_22E570DD4((_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 8), (uint64_t)"objc_sync_exit");
  sub_22E570DD4((_QWORD *)(a1 + 960), *(_QWORD *)(a1 + 8), (uint64_t)"objc_enumerationMutation");
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 1016) = "objc_getProperty";
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1008) = llvm::FunctionType::get();
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 1056) = "objc_setProperty";
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1048) = llvm::FunctionType::get();
  sub_22E575E9C(v47, *(_QWORD *)(a1 + 8), (uint64_t)"objc_getPropertyStruct");
  sub_22E575E9C((_QWORD *)(a1 + 1120), *(_QWORD *)(a1 + 8), (uint64_t)"objc_setPropertyStruct");
  llvm::FunctionType::get();
  *(_QWORD *)(a1 + 88) = llvm::PointerType::get();
  v41 = *(_QWORD *)(a1 + 8);
  v42 = *(_QWORD *)(v41 + 152);
  if ((*(_BYTE *)(v42 + 246) & 6) != 0 || (*(_WORD *)(v42 + 148) & 2) != 0)
  {
    *(_DWORD *)(a1 + 1160) = 10;
    if ((*(_BYTE *)(v42 + 246) & 6) != 0)
    {
      *(_QWORD *)(a1 + 432) = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v41 + 144) + 15192), "retain", 6uLL) | 1;
      *(_QWORD *)(a1 + 440) = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "release", 7uLL) | 1;
      *(_QWORD *)(a1 + 448) = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "autorelease", 0xBuLL) | 1;
      sub_22E570D30(v44, *(_QWORD *)(a1 + 8), (uint64_t)"objc_assign_ivar");
      sub_22E5671BC((_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 8), (uint64_t)"objc_assign_strongCast");
      sub_22E5671BC((_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 8), (uint64_t)"objc_assign_global");
      sub_22E5671BC(v45, *(_QWORD *)(a1 + 8), (uint64_t)"objc_assign_weak");
      sub_22E570DD4((_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 8), (uint64_t)"objc_read_weak");
      sub_22E570D30(v46, *(_QWORD *)(a1 + 8), (uint64_t)"objc_memmove_collectable");
    }
  }
  return a1;
}

void sub_22E570D30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[1] = llvm::FunctionType::get();
}

void sub_22E570DD4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[1] = llvm::FunctionType::get();
}

void sub_22E570E74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[1] = llvm::FunctionType::get();
}

uint64_t sub_22E570F18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22E570FA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return MEMORY[0x2348A0E9C](a1, 0x10F1C409AD69374);
}

uint64_t sub_22E571044(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  void *v7;
  size_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t BitCast;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  BOOL v40;
  size_t v41;
  char *v42;
  size_t v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  llvm::ConstantPointerNull **v53;
  llvm::ConstantPointerNull *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t DataLayout;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _DWORD *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  char v107;
  void *v108;
  size_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  void **v125;
  size_t v126;
  uint64_t v127;
  _DWORD *v128;
  unsigned int v129;
  _DWORD *v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  void **v134;
  llvm::LLVMContext *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  llvm::Type *v140;
  llvm::IRBuilderFolder *v141;
  llvm::IRBuilderDefaultInserter *v142;
  uint64_t *v143;
  llvm::LLVMContext *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm::LLVMContext *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Type *v155;
  uint64_t NullValue;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void **v162;
  uint64_t GlobalVariable;
  void *v164;
  uint64_t v165;
  char v166;
  BOOL v167;
  void *v168;
  size_t v169;
  size_t v170;
  void **v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  _QWORD v176[2];
  uint64_t *v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  __int16 v183;
  void *__p[2];
  char v185;
  void *v186;
  void **v187;
  uint64_t v188;
  _QWORD v189[2];
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD v195[4];
  void *v196;
  void *v197;
  uint64_t v198;
  _QWORD v199[2];
  uint64_t v200;
  llvm::ConstantPointerNull *v201;
  _QWORD v202[3];
  char v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t *v208;
  void *v209;
  void *v210;
  uint64_t v211;
  llvm::ConstantPointerNull **v212;
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  llvm::Type *v216;
  uint64_t *v217;
  _QWORD *v218;
  uint64_t v219;
  int v220;
  __int16 v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[3];
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  if (a1[34] == a1[35] && a1[37] == a1[38] && a1[40] == a1[41] && !*((_DWORD *)a1 + 97) && !*((_DWORD *)a1 + 104))
    return 0;
  v209 = (void *)a1[1];
  v210 = &v212;
  v211 = 0x1000000000;
  v229 = 0;
  v227 = 0;
  v228 = 0;
  v190 = 0;
  v191 = 0;
  v186 = &v209;
  v187 = 0;
  v188 = 0;
  memset(v189, 0, 11);
  v230 = 1;
  v181 = operator new(0x28uLL);
  v182 = xmmword_22F45AD20;
  strcpy((char *)v181, "__ObjC_Protocol_Holder_Ugly_Hack");
  v185 = 11;
  strcpy((char *)__p, "AnotherHack");
  v4 = sub_22E5760BC((uint64_t)a1, __p, 0xBuLL, "");
  v5 = v186;
  v6 = *((_DWORD *)v186 + 4);
  if (v6 >= *((_DWORD *)v186 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v5[4];
  }
  *(_QWORD *)(*((_QWORD *)v5 + 1) + 8 * v6) = v4;
  ++v5[4];
  if (v182 >= 0)
    v7 = &v181;
  else
    v7 = v181;
  if (v182 >= 0)
    v8 = HIBYTE(v182) & 0x7F;
  else
    v8 = v182;
  v9 = sub_22E5760BC((uint64_t)a1, v7, v8, "");
  v10 = v186;
  v11 = *((_DWORD *)v186 + 4);
  if (v11 >= *((_DWORD *)v186 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v10[4];
  }
  *(_QWORD *)(*((_QWORD *)v10 + 1) + 8 * v11) = v9;
  ++v10[4];
  sub_22F275848((uint64_t *)&v186);
  sub_22F275848((uint64_t *)&v186);
  v196 = (void *)a1[1];
  v197 = v199;
  v207 = 0;
  v208 = 0;
  *(_QWORD *)&v204 = &v196;
  *((_QWORD *)&v204 + 1) = 0;
  v205 = 0;
  *(_QWORD *)&v206 = 0;
  *(_DWORD *)((char *)&v206 + 7) = 0;
  v203 = 1;
  v12 = a1[30];
  memset(v202, 0, sizeof(v202));
  v199[0] = v12;
  v198 = 0x1000000001;
  sub_22F246F08((uint64_t *)&v204);
  v13 = a1[17];
  v192 = (void *)v204;
  v193 = (uint64_t)&v204;
  v194 = (_QWORD *)*(unsigned int *)(v204 + 16);
  memset(v195, 0, 11);
  BYTE9(v206) = 1;
  v195[2] = 0;
  v195[3] = v13;
  v14 = *((unsigned int *)a1 + 96);
  if ((_DWORD)v14)
  {
    for (i = (_QWORD *)a1[47]; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (_QWORD *)a1[47];
  }
  v16 = a1[47] + 8 * v14;
  while (i != (_QWORD *)v16)
  {
    sub_22F275848((uint64_t *)&v192);
    do
    {
      v18 = i[1];
      ++i;
      v17 = v18;
      if (v18)
        v19 = v17 == -8;
      else
        v19 = 1;
    }
    while (v19);
  }
  sub_22F2758B8((uint64_t)&v192, (uint64_t *)&v204);
  v180 = *(unsigned __int8 *)(a1[1] + 130);
  sub_22F275920((uint64_t *)&v204);
  sub_22F275848((uint64_t *)&v186);
  v180 = *(unsigned __int8 *)(a1[1] + 130);
  sub_22F275998((uint64_t *)&v186);
  BitCast = llvm::ConstantExpr::getBitCast();
  v21 = BitCast;
  v23 = (uint64_t *)a1[38];
  v22 = a1[39];
  v179 = a1;
  if ((unint64_t)v23 >= v22)
  {
    v26 = (_QWORD *)a1[37];
    v27 = v23 - v26;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61)
LABEL_228:
      abort();
    v29 = v22 - (_QWORD)v26;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 61)
LABEL_229:
        sub_22E3B3F8C();
      v31 = (char *)operator new(8 * v30);
    }
    else
    {
      v31 = 0;
    }
    v32 = (uint64_t *)&v31[8 * v27];
    *v32 = v21;
    v24 = v32 + 1;
    if (v23 == v26)
    {
      v33 = v179;
    }
    else
    {
      do
      {
        v34 = *--v23;
        *--v32 = v34;
      }
      while (v23 != v26);
      v33 = v179;
      v23 = (uint64_t *)v179[37];
    }
    v33[37] = v32;
    v33[38] = v24;
    v33[39] = &v31[8 * v30];
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v23 = BitCast;
    v24 = v23 + 1;
  }
  v35 = v179;
  v179[38] = v24;
  *(_QWORD *)&v204 = v202;
  sub_22E3CEB30((void ***)&v204);
  if (v197 != v199)
    free(v197);
  if (v185 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v182) < 0)
    operator delete(v181);
  v196 = &v227;
  sub_22E3CEB30((void ***)&v196);
  if (v210 != &v212)
    free(v210);
  v36 = v35[6];
  if (v36 && *(_BYTE *)(v36 + 8) == 16)
  {
    v178 = (uint64_t *)v35[6];
  }
  else
  {
    v209 = (void *)v35[8];
    v210 = v209;
    v178 = (uint64_t *)llvm::StructType::get();
    llvm::PointerType::get();
  }
  if (v35[40] == v35[41])
  {
    v175 = v35[30];
  }
  else
  {
    v209 = (void *)v35[1];
    v210 = &v212;
    v211 = 0x1000000000;
    v229 = 0;
    v227 = 0;
    v228 = 0;
    v200 = 0;
    v201 = 0;
    v196 = &v209;
    v197 = 0;
    v198 = 0;
    memset(v199, 0, 11);
    v230 = 1;
    v37 = *((_QWORD *)v209 + 19);
    v38 = (char *)(v37 + 424);
    v39 = *(_BYTE *)(v37 + 447);
    v40 = v39 < 0;
    v42 = *(char **)(v37 + 424);
    v41 = *(_QWORD *)(v37 + 432);
    if (v39 < 0)
      v38 = v42;
    v43 = v39 & 0x7F;
    if (!v40)
      v41 = v43;
    if (v41)
      v44 = v41;
    else
      v44 = 16;
    if (v41)
      v45 = v38;
    else
      v45 = "NXConstantString";
    v46 = sub_22E5760BC((uint64_t)v35, v45, v44, ".objc_static_class_name");
    v47 = v196;
    v48 = *((_DWORD *)v196 + 4);
    if (v48 >= *((_DWORD *)v196 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v48 = v47[4];
    }
    *(_QWORD *)(*((_QWORD *)v47 + 1) + 8 * v48) = v46;
    ++v47[4];
    v186 = v196;
    v187 = &v196;
    v49 = *((unsigned int *)v196 + 4);
    v190 = 0;
    v191 = 0;
    v188 = v49;
    memset(v189, 0, 11);
    BYTE1(v199[1]) = 1;
    sub_22F2633B0((uint64_t)v196 + 8, (_BYTE *)v35[40], (_BYTE *)v35[41]);
    v50 = v35[30];
    v51 = v186;
    v52 = *((_DWORD *)v186 + 4);
    if (v52 >= *((_DWORD *)v186 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v52 = v51[4];
    }
    *(_QWORD *)(*((_QWORD *)v51 + 1) + 8 * v52) = v50;
    ++v51[4];
    sub_22F2758B8((uint64_t)&v186, (uint64_t *)&v196);
    *(_QWORD *)&v204 = *(unsigned __int8 *)(v35[1] + 130);
    v53 = (llvm::ConstantPointerNull **)sub_22F275ACC((uint64_t *)&v196);
    v196 = &v227;
    sub_22E3CEB30((void ***)&v196);
    if (v210 != &v212)
      free(v210);
    v209 = (void *)v35[1];
    v210 = &v212;
    v229 = 0;
    v227 = 0;
    v228 = 0;
    v230 = 0;
    v54 = *v53;
    v196 = &v209;
    v197 = 0;
    v198 = 0;
    memset(v199, 0, 11);
    v230 = 1;
    v200 = 0;
    v201 = v54;
    v212 = v53;
    v211 = 0x1000000001;
    sub_22F247080((uint64_t *)&v196, *v53);
    v186 = (void *)*(unsigned __int8 *)(v35[1] + 130);
    sub_22F2757E4((uint64_t)&v196);
    v175 = llvm::ConstantExpr::getBitCast();
    v196 = &v227;
    sub_22E3CEB30((void ***)&v196);
    if (v210 != &v212)
      free(v210);
  }
  v196 = &v198;
  v197 = (void *)0x1000000000;
  v209 = (void *)v35[1];
  v210 = &v212;
  v211 = 0x1000000000;
  v229 = 0;
  v227 = 0;
  v228 = 0;
  v186 = &v209;
  v187 = 0;
  v188 = 0;
  memset(v189, 0, 11);
  v230 = 1;
  v190 = 0;
  v191 = (uint64_t)v178;
  v55 = v35[51];
  v56 = *((_DWORD *)v35 + 106);
  v57 = (unint64_t *)(v55 + 88 * v56);
  if (*((_DWORD *)v35 + 104))
  {
    if (v56)
    {
      v133 = 88 * v56;
      v58 = (unint64_t *)v35[51];
      while (*v58 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v58 += 11;
        v133 -= 88;
        if (!v133)
          goto LABEL_85;
      }
    }
    else
    {
      v58 = (unint64_t *)v35[51];
    }
  }
  else
  {
LABEL_85:
    v58 = (unint64_t *)(v55 + 88 * v56);
  }
  v59 = (unint64_t *)(v55 + 88 * v56);
  if (v58 == v59)
  {
    v60 = 0;
    v61 = 0;
  }
  else
  {
    v62 = 0;
    v61 = 0;
    v60 = 0;
    do
    {
      if (v60 >= v62)
      {
        v63 = v60 - v61;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_228;
        if (((char *)v62 - (char *)v61) >> 2 > v64)
          v64 = ((char *)v62 - (char *)v61) >> 2;
        if ((unint64_t)((char *)v62 - (char *)v61) >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          if (v65 >> 61)
            goto LABEL_229;
          v66 = (char *)operator new(8 * v65);
        }
        else
        {
          v66 = 0;
        }
        v67 = (uint64_t *)&v66[8 * v63];
        *v67 = *v58;
        v68 = v67 + 1;
        while (v60 != v61)
        {
          v69 = *--v60;
          *--v67 = v69;
        }
        v62 = (uint64_t *)&v66[8 * v65];
        if (v61)
          operator delete(v61);
        v61 = v67;
        v60 = v68;
      }
      else
      {
        *v60++ = *v58;
      }
      v70 = v58 + 11;
      while (v70 != v57)
      {
        v71 = *v70;
        v70 += 11;
        if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v58 = v70 - 11;
          goto LABEL_114;
        }
      }
      v58 = v57;
LABEL_114:
      ;
    }
    while (v58 != v59);
  }
  v72 = 126 - 2 * __clz(v60 - v61);
  if (v60 == v61)
    v73 = 0;
  else
    v73 = v72;
  sub_22E576A90((uint64_t)v61, v60, v73, 1);
  v74 = (int *)v179;
  if (v60 != v61)
  {
    v177 = v179 + 51;
    qmemcpy(v176, "sel_name.objc_se", sizeof(v176));
    v101 = v61;
    while (1)
    {
      sub_22F1D3A38(v101, (char *)&v192);
      HIBYTE(v205) = 14;
      *(_QWORD *)&v204 = v176[1];
      *(_QWORD *)((char *)&v204 + 6) = v176[0];
      BYTE14(v204) = 0;
      v102 = sub_22E5768FC((uint64_t)v74, (const void **)&v192, (const void **)&v204, 0);
      if (SHIBYTE(v205) < 0)
        operator delete((void *)v204);
      v103 = sub_22F275B94((uint64_t)v177, v101);
      v104 = *((unsigned int *)v103 + 4);
      if ((_DWORD)v104)
        break;
LABEL_146:
      if (SHIBYTE(v194) < 0)
        operator delete(v192);
      if (++v101 == v60)
        goto LABEL_119;
    }
    v105 = (void **)v103[1];
    v106 = 32 * v104;
    while (1)
    {
      v107 = *((_BYTE *)v105 + 23);
      if (v107 < 0)
      {
        if (v105[1])
          goto LABEL_153;
      }
      else if (*((_BYTE *)v105 + 23))
      {
LABEL_153:
        if (v107 >= 0)
          v108 = v105;
        else
          v108 = *v105;
        if (v107 >= 0)
          v109 = *((unsigned __int8 *)v105 + 23);
        else
          v109 = (size_t)v105[1];
        v110 = sub_22E5760BC((uint64_t)v74, v108, v109, ".objc_sel_types");
        goto LABEL_162;
      }
      v110 = *((_QWORD *)v74 + 30);
LABEL_162:
      v111 = v186;
      *(_QWORD *)&v204 = v186;
      *((_QWORD *)&v204 + 1) = &v186;
      v112 = *((unsigned int *)v186 + 4);
      v205 = v112;
      v207 = 0;
      v208 = v178;
      *(_QWORD *)&v206 = 0;
      *(_DWORD *)((char *)&v206 + 7) = 0;
      BYTE1(v189[1]) = 1;
      if (v178)
        BYTE10(v206) = (v178[1] & 0x200) != 0;
      if (v112 >= *((_DWORD *)v186 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v112 = *((unsigned int *)v111 + 4);
      }
      *(_QWORD *)(v111[1] + 8 * v112) = v102;
      ++*((_DWORD *)v111 + 4);
      v113 = v204;
      v114 = *(unsigned int *)(v204 + 16);
      if (v114 >= *(unsigned int *)(v204 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v114 = *(unsigned int *)(v113 + 16);
      }
      v74 = (int *)v179;
      *(_QWORD *)(*(_QWORD *)(v113 + 8) + 8 * v114) = v110;
      ++*(_DWORD *)(v113 + 16);
      sub_22F2759F0((uint64_t *)&v204, (uint64_t *)&v186);
      v115 = v105[3];
      v116 = v197;
      if (v197 >= (unint64_t)HIDWORD(v197))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v116 = v197;
      }
      *((_QWORD *)v196 + v116) = v115;
      LODWORD(v197) = (_DWORD)v197 + 1;
      v105 += 4;
      v106 -= 32;
      if (!v106)
        goto LABEL_146;
    }
  }
LABEL_119:
  v75 = v186;
  v76 = *((unsigned int *)v186 + 4);
  v77 = v188;
  *(_QWORD *)&v204 = v186;
  *((_QWORD *)&v204 + 1) = &v186;
  v205 = v76;
  *(_QWORD *)&v206 = 0;
  *(_DWORD *)((char *)&v206 + 7) = 0;
  BYTE1(v189[1]) = 1;
  v207 = 0;
  v208 = v178;
  if (v178)
    BYTE10(v206) = (v178[1] & 0x200) != 0;
  v78 = *((_QWORD *)v74 + 30);
  v79 = v76;
  if (v76 >= *((_DWORD *)v186 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v79 = *((unsigned int *)v75 + 4);
  }
  *(_QWORD *)(v75[1] + 8 * v79) = v78;
  ++*((_DWORD *)v75 + 4);
  v80 = *((_QWORD *)v74 + 30);
  v81 = v204;
  v82 = *(_DWORD *)(v204 + 16);
  if (v82 >= *(_DWORD *)(v204 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v82 = *(_DWORD *)(v81 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v82) = v80;
  ++*(_DWORD *)(v81 + 16);
  sub_22F2759F0((uint64_t *)&v204, (uint64_t *)&v186);
  v192 = (void *)*(unsigned __int8 *)(*((_QWORD *)v74 + 1) + 130);
  sub_22F275B30((uint64_t)&v186);
  if (v61)
    operator delete(v61);
  v83 = (v76 - v77);
  v186 = &v227;
  sub_22E3CEB30((void ***)&v186);
  if (v210 != &v212)
    free(v210);
  if ((_DWORD)v76 != v77)
  {
    v84 = 0;
    do
    {
      v209 = (void *)*((_QWORD *)v74 + 28);
      v210 = 0;
      v210 = (void *)llvm::ConstantInt::get();
      llvm::ConstantExpr::getGetElementPtr();
      llvm::ConstantExpr::getBitCast();
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalAlias::eraseFromParent(*((llvm::GlobalAlias **)v196 + v84++));
    }
    while (v83 != v84);
  }
  v209 = (void *)*((_QWORD *)v74 + 1);
  v210 = &v212;
  v211 = 0x1000000000;
  v229 = 0;
  v227 = 0;
  v228 = 0;
  v190 = 0;
  v191 = 0;
  v186 = &v209;
  v187 = 0;
  v188 = 0;
  memset(v189, 0, 11);
  v230 = 1;
  sub_22F246F08((uint64_t *)&v186);
  sub_22F275848((uint64_t *)&v186);
  sub_22F246F08((uint64_t *)&v186);
  sub_22F246F08((uint64_t *)&v186);
  v85 = (uint64_t *)*((_QWORD *)v74 + 8);
  *(_QWORD *)&v204 = v186;
  *((_QWORD *)&v204 + 1) = &v186;
  v205 = *((unsigned int *)v186 + 4);
  *(_QWORD *)&v206 = 0;
  *(_DWORD *)((char *)&v206 + 7) = 0;
  BYTE1(v189[1]) = 1;
  v207 = 0;
  v208 = v85;
  sub_22F2633B0((uint64_t)v186 + 8, *((_BYTE **)v74 + 34), *((_BYTE **)v74 + 35));
  sub_22F2633B0(v204 + 8, *((_BYTE **)v74 + 37), *((_BYTE **)v74 + 38));
  v86 = v204;
  v87 = *(_DWORD *)(v204 + 16);
  if (v87 >= *(_DWORD *)(v204 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v87 = *(_DWORD *)(v86 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v86 + 8) + 8 * v87) = v175;
  ++*(_DWORD *)(v86 + 16);
  v88 = *((_QWORD *)v74 + 30);
  v89 = v204;
  v90 = *(_DWORD *)(v204 + 16);
  if (v90 >= *(_DWORD *)(v204 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v90 = *(_DWORD *)(v89 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v90) = v88;
  ++*(_DWORD *)(v89 + 16);
  sub_22F2758B8((uint64_t)&v204, (uint64_t *)&v186);
  v192 = (void *)*(unsigned __int8 *)(*((_QWORD *)v74 + 1) + 130);
  v91 = (_QWORD *)sub_22F275998((uint64_t *)&v186);
  v186 = &v227;
  sub_22E3CEB30((void ***)&v186);
  if (v210 != &v212)
    free(v210);
  v206 = 0uLL;
  *(_QWORD *)&v204 = *((_QWORD *)v74 + 18);
  *((_QWORD *)&v204 + 1) = v204;
  v205 = *((_QWORD *)v74 + 8);
  v92 = *((_QWORD *)v74 + 16);
  *(_QWORD *)&v206 = *v91;
  *((_QWORD *)&v206 + 1) = v92;
  v93 = llvm::StructType::get();
  v94 = v93;
  v209 = (void *)*((_QWORD *)v74 + 1);
  v210 = &v212;
  v211 = 0x1000000000;
  v229 = 0;
  v227 = 0;
  v228 = 0;
  v186 = &v209;
  v187 = 0;
  v188 = 0;
  memset(v189, 0, 11);
  v230 = 1;
  v190 = 0;
  v191 = v93;
  if (v93)
    BYTE2(v189[1]) = (*(_DWORD *)(v93 + 8) & 0x200) != 0;
  sub_22F246F08((uint64_t *)&v186);
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*((_QWORD *)v74 + 1) + 200));
  sub_22E3C304C(DataLayout, v94);
  v192 = (void *)((unint64_t)(v96 + 7) >> 3);
  v193 = v97 == 1;
  llvm::TypeSize::operator unsigned long long();
  sub_22F246F08((uint64_t *)&v186);
  v98 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 144) + 1992);
  v99 = sub_22E49F3DC((_QWORD *)v98, *(_DWORD *)(v98 + 344));
  if (v99)
    v100 = *(_QWORD *)((*((_QWORD *)v99 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v100 = 0;
  v117 = v100;
  do
  {
    v118 = v117;
    v119 = *(_QWORD *)(v117 + 8);
    if ((v119 & 2) == 0)
      break;
    v117 = v119 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v117);
  v120 = *(uint64_t **)(v118 + 16);
  v121 = *v120;
  v183 = 773;
  v181 = v120 + 4;
  *(_QWORD *)&v182 = v121;
  *((_QWORD *)&v182 + 1) = "/";
  do
  {
    v122 = (uint64_t *)v100;
    v123 = *(_QWORD *)(v100 + 8);
    if ((v123 & 2) == 0)
      break;
    v100 = v123 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v100);
  v124 = *v122;
  v192 = &v181;
  v194 = v122 + 4;
  v195[0] = v124;
  LOWORD(v195[1]) = 1282;
  llvm::Twine::str((llvm::Twine *)&v192);
  if (v185 >= 0)
    v125 = __p;
  else
    v125 = (void **)__p[0];
  if (v185 >= 0)
    v126 = v185 & 0x7F;
  else
    v126 = (size_t)__p[1];
  v127 = sub_22E5760BC((uint64_t)v74, v125, v126, ".objc_source_file_name");
  v128 = v186;
  v129 = *((_DWORD *)v186 + 4);
  if (v129 >= *((_DWORD *)v186 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v129 = v128[4];
  }
  *(_QWORD *)(*((_QWORD *)v128 + 1) + 8 * v129) = v127;
  ++v128[4];
  v130 = v186;
  v131 = *((_DWORD *)v186 + 4);
  if (v131 >= *((_DWORD *)v186 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v131 = v130[4];
  }
  *(_QWORD *)(*((_QWORD *)v130 + 1) + 8 * v131) = v91;
  ++v130[4];
  if (v74[290] >= 10)
  {
    v132 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 1) + 152) + 244) >> 17) & 3;
    if (!v132 || v132 == 2 || v132 == 1)
      sub_22F246F08((uint64_t *)&v186);
  }
  v192 = (void *)*(unsigned __int8 *)(*((_QWORD *)v74 + 1) + 130);
  v134 = (void **)sub_22F275998((uint64_t *)&v186);
  if (v185 < 0)
    operator delete(__p[0]);
  v186 = &v227;
  sub_22E3CEB30((void ***)&v186);
  if (v210 != &v212)
    free(v210);
  llvm::Type::getVoidTy(*((llvm::Type **)v74 + 31), v135);
  v136 = llvm::FunctionType::get();
  v209 = ".objc_load_function";
  v213 = 259;
  v137 = *((_QWORD *)v74 + 2);
  v2 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v2, v136, 7, 0xFFFFFFFFLL, &v209, v137);
  v209 = "entry";
  v213 = 259;
  operator new();
  v138 = llvm::BasicBlock::BasicBlock();
  v139 = *((_QWORD *)v74 + 1);
  v140 = (llvm::Type *)*((_QWORD *)v74 + 31);
  v141 = (llvm::IRBuilderFolder *)&v225;
  v142 = (llvm::IRBuilderDefaultInserter *)v226;
  v143 = &v211;
  v209 = &v211;
  v210 = (void *)0x200000000;
  v216 = v140;
  v217 = &v225;
  v218 = v226;
  v219 = 0;
  v220 = 0;
  v221 = 512;
  v222 = 7;
  v224 = 0;
  v223 = 0;
  v225 = MEMORY[0x24BED83B8] + 16;
  v226[0] = &off_24FA66C70;
  v226[1] = 0;
  v226[2] = v139;
  v214 = v138;
  v215 = v138 + 40;
  llvm::Type::getVoidTy(v140, v144);
  v186 = *v134;
  v145 = llvm::FunctionType::get();
  v146 = sub_22E633A04(*((_QWORD *)v74 + 1), v145, "__objc_exec_class", 0x11uLL, 0, 0, 0);
  *(_QWORD *)&v204 = v134;
  LOWORD(v189[1]) = 257;
  sub_22E462B78((uint64_t *)&v209, v146, v147, (uint64_t)&v204, 1, (uint64_t)&v186, 0);
  if (*((_QWORD *)v74 + 87) != *((_QWORD *)v74 + 88))
  {
    v176[1] = v226;
    v177 = &v211;
    v178 = &v225;
    v149 = *((_QWORD *)v74 + 8);
    *(_QWORD *)&v204 = *((_QWORD *)v74 + 17);
    *((_QWORD *)&v204 + 1) = v149;
    llvm::Type::getVoidTy(v216, v148);
    v150 = llvm::FunctionType::get();
    v186 = "class_registerAlias_np";
    LOWORD(v189[1]) = 259;
    v151 = *((_QWORD *)v74 + 2);
    v152 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v152, v150, 9, 0xFFFFFFFFLL, &v186, v151);
    v186 = "alias";
    LOWORD(v189[1]) = 259;
    v153 = operator new();
    llvm::BasicBlock::BasicBlock();
    v186 = "no_alias";
    LOWORD(v189[1]) = 259;
    v154 = operator new();
    llvm::BasicBlock::BasicBlock();
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v152, v155);
    LOWORD(v189[1]) = 257;
    v157 = sub_22E3C18F4((uint64_t)&v209, 33, (uint64_t *)v152, NullValue, (uint64_t)&v186);
    v158 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v158, v153, v154, v157, 0);
    LOWORD(v189[1]) = 257;
    (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, uint64_t))(*v218 + 16))(v218, v158, &v186, v214, v215);
    if ((_DWORD)v210)
    {
      v159 = (char *)v209;
      v160 = (char *)v209 + 16 * v210;
      do
      {
        llvm::Instruction::setMetadata();
        v159 += 16;
      }
      while (v159 != v160);
    }
    v214 = v153;
    v215 = v153 + 40;
    v161 = v179[87];
    if (v161 != v179[88])
    {
      v162 = (void **)(v161 + 24);
      do
      {
        std::operator+<char>();
        GlobalVariable = llvm::Module::getGlobalVariable();
        if (SHIBYTE(v188) < 0)
          operator delete(v186);
        if (GlobalVariable)
        {
          v164 = (void *)llvm::ConstantExpr::getBitCast();
          v165 = *(_QWORD *)(v152 + 24);
          v192 = v164;
          v166 = *((_BYTE *)v162 + 23);
          v167 = v166 < 0;
          if (v166 >= 0)
            v168 = v162;
          else
            v168 = *v162;
          v169 = v166 & 0x7F;
          if (v167)
            v170 = (size_t)v162[1];
          else
            v170 = v169;
          v193 = sub_22E5760BC((uint64_t)v179, v168, v170, "");
          LOWORD(v189[1]) = 257;
          sub_22E462B78((uint64_t *)&v209, v165, v152, (uint64_t)&v192, 2, (uint64_t)&v186, 0);
        }
        v171 = v162 + 3;
        v162 += 6;
      }
      while (v171 != (void **)v179[88]);
    }
    v172 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v189[1]) = 257;
    (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, uint64_t))(*v218 + 16))(v218, v172, &v186, v214, v215);
    v143 = v177;
    if ((_DWORD)v210)
    {
      v173 = (char *)v209;
      v174 = (char *)v209 + 16 * v210;
      do
      {
        llvm::Instruction::setMetadata();
        v173 += 16;
      }
      while (v173 != v174);
    }
    v214 = v154;
    v215 = v154 + 40;
    v141 = (llvm::IRBuilderFolder *)v178;
    v142 = (llvm::IRBuilderDefaultInserter *)v176[1];
  }
  sub_22E3CF118((uint64_t *)&v209);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(v142);
  llvm::IRBuilderFolder::~IRBuilderFolder(v141);
  if (v209 != v143)
    free(v209);
  if (v196 != &v198)
    free(v196);
  return v2;
}

unint64_t sub_22E5726BC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  int v8;
  int Key;
  unint64_t v10;
  uint64_t v12;
  const std::string::value_type *v13;
  char v14;
  BOOL v15;
  std::string::size_type v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _QWORD *GlobalVariable;
  void **v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t BitCast;
  void **v27;
  size_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  void **v40[3];
  _QWORD v41[4];
  std::string v42;
  uint64_t v43;
  void **__dst;
  size_t v45;
  uint64_t v46;
  std::string *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  __int16 v51;
  _QWORD v52[3];
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = ((*a2 >> 21) & 7u) * a2[4];
  if (v5 >= 0x17)
  {
    if ((v5 | 7) == 0x17)
      v7 = (v5 & 0xFFFFFFF8) + 8;
    else
      v7 = v5 | 7;
    p_dst = (void **)operator new(v7 + 1);
    v45 = v5;
    v46 = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v46) = ((*a2 >> 21) & 7) * *((_BYTE *)a2 + 16);
    p_dst = (void **)&__dst;
    if (!(_DWORD)v5)
      goto LABEL_9;
  }
  memcpy(p_dst, &a2[v4 + 5], v5);
LABEL_9:
  *((_BYTE *)p_dst + v5) = 0;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 352))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
    v13 = (const std::string::value_type *)(v12 + 424);
    v14 = *(_BYTE *)(v12 + 447);
    v15 = v14 < 0;
    v17 = *(const std::string::value_type **)(v12 + 424);
    v16 = *(_QWORD *)(v12 + 432);
    if (v14 < 0)
      v13 = v17;
    v18 = v14 & 0x7F;
    if (!v15)
      v16 = v18;
    if (v16)
      v19 = v13;
    else
      v19 = "NSConstantString";
    *((_BYTE *)&v42.__r_.__value_.__s + 23) = 12;
    LODWORD(v42.__r_.__value_.__r.__words[1]) = 1599296321;
    if (v16)
      v20 = v16;
    else
      v20 = 16;
    v42.__r_.__value_.__r.__words[0] = *(_QWORD *)"_OBJC_CLASS_";
    v42.__r_.__value_.__s.__data_[12] = 0;
    std::string::append(&v42, v19, v20);
    GlobalVariable = (_QWORD *)llvm::Module::getGlobalVariable();
    if (GlobalVariable)
    {
      if (*GlobalVariable != *(_QWORD *)(a1 + 112))
        GlobalVariable = (_QWORD *)llvm::ConstantExpr::getBitCast();
    }
    else
    {
      llvm::User::operator new((llvm::User *)0x58);
      v51 = 260;
      v47 = &v42;
      GlobalVariable = (_QWORD *)llvm::GlobalVariable::GlobalVariable();
    }
    v47 = *(std::string **)(a1 + 8);
    v48 = &v50;
    v41[2] = 0;
    v41[3] = 0;
    v40[0] = (void **)&v47;
    v40[1] = 0;
    v40[2] = 0;
    v41[0] = 0;
    *(_DWORD *)((char *)v41 + 7) = 0;
    v53 = 1;
    memset(v52, 0, sizeof(v52));
    v50 = GlobalVariable;
    if (v46 >= 0)
      v22 = (void **)&__dst;
    else
      v22 = __dst;
    if (v46 >= 0)
      v23 = HIBYTE(v46) & 0x7F;
    else
      v23 = v45;
    v49 = 0x1000000001;
    v24 = sub_22E5760BC(a1, v22, v23, "");
    v25 = v49;
    if (v49 >= HIDWORD(v49))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v49;
    }
    *((_QWORD *)v48 + v25) = v24;
    LODWORD(v49) = v49 + 1;
    sub_22F246F08((uint64_t *)v40);
    sub_22F275EDC((uint64_t *)v40);
    BitCast = llvm::ConstantExpr::getBitCast();
    if (v46 >= 0)
      v27 = (void **)&__dst;
    else
      v27 = __dst;
    if (v46 >= 0)
      v28 = HIBYTE(v46) & 0x7F;
    else
      v28 = v45;
    *(_QWORD *)(*sub_22F246F88((llvm::StringMapImpl *)(a1 + 344), v27, v28) + 8) = BitCast;
    v30 = *(uint64_t **)(a1 + 328);
    v29 = *(_QWORD *)(a1 + 336);
    if ((unint64_t)v30 >= v29)
    {
      v32 = *(_QWORD **)(a1 + 320);
      v33 = v30 - v32;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        abort();
      v35 = v29 - (_QWORD)v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 61)
          sub_22E3B3F8C();
        v37 = (char *)operator new(8 * v36);
      }
      else
      {
        v37 = 0;
      }
      v38 = (uint64_t *)&v37[8 * v33];
      *v38 = BitCast;
      v31 = v38 + 1;
      if (v30 != v32)
      {
        do
        {
          v39 = *--v30;
          *--v38 = v39;
        }
        while (v30 != v32);
        v30 = *(uint64_t **)(a1 + 320);
      }
      *(_QWORD *)(a1 + 320) = v38;
      *(_QWORD *)(a1 + 328) = v31;
      *(_QWORD *)(a1 + 336) = &v37[8 * v36];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v30 = BitCast;
      v31 = v30 + 1;
    }
    *(_QWORD *)(a1 + 328) = v31;
    if (v8)
      v10 = BitCast & 0xFFFFFFFFFFFFFFF8;
    else
      v10 = BitCast;
    v40[0] = (void **)v52;
    sub_22E3CEB30(v40);
    if (v48 != &v50)
      free(v48);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * Key) + 8);
    if (v8)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  return v10;
}

void sub_22E572B5C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t j;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  std::string *v17;
  size_t size;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t GlobalVariable;
  llvm::GlobalValue *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::PointerType *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  std::string::size_type v64;
  __int128 v65;
  size_t v66;
  uint64_t v67;
  std::string *p_p;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  llvm::GlobalValue *v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t BitCast;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *i;
  uint64_t v104;
  uint64_t v105;
  std::string v107;
  __int16 v108;
  void *v109;
  char v110;
  void *v111;
  char *v112;
  _QWORD v113[3];
  _QWORD v114[4];
  void *v115;
  char v116;
  void *v117[2];
  char v118;
  std::string __p;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  std::string v127;
  __int16 v128;
  void *v129[2];
  _QWORD v130[16];
  void *v131;
  uint64_t v132;
  _QWORD v133[16];
  void *v134;
  __int128 v135;
  _BYTE v136[16];
  void *v137;
  __int128 v138;
  _BYTE v139[16];
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[128];
  _QWORD v144[3];
  char v145;
  void *v146;
  uint64_t v147;
  _BYTE v148[64];
  void *v149;
  uint64_t v150;
  _BYTE v151[128];
  void *v152;
  uint64_t v153;
  _BYTE v154[128];
  void *v155;
  uint64_t v156;
  _BYTE v157[128];
  void *v158;
  uint64_t v159;
  _QWORD v160[19];

  v160[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v4 = sub_22F3B46CC(*(_QWORD *)(a2 + 88));
  v5 = v4;
  memset(&__p, 0, sizeof(__p));
  if (v4)
  {
    sub_22EFC683C((uint64_t *)(v4 + 40), &v127);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v127;
    sub_22E5778B4();
  }
  v6 = *(_QWORD *)(a2 + 88);
  sub_22EFC683C((uint64_t *)(v6 + 40), v117);
  std::operator+<char>();
  if (llvm::Module::getGlobalVariable())
  {
    llvm::ConstantInt::get();
    llvm::GlobalVariable::setInitializer();
  }
  else
  {
    llvm::User::operator new((llvm::User *)0x58);
    llvm::ConstantInt::get();
    v128 = 260;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    llvm::GlobalVariable::GlobalVariable();
  }
  sub_22F0CBDC4(v3, *(_QWORD *)(a2 + 88), a2);
  v158 = v160;
  v159 = 0x1000000000;
  v155 = v157;
  v156 = 0x1000000000;
  v152 = v154;
  v153 = 0x1000000000;
  v149 = v151;
  v150 = 0x1000000000;
  v146 = v148;
  v147 = 0x1000000000;
  v140 = *(_QWORD *)(a1 + 8);
  v141 = v143;
  v142 = 0x1000000000;
  memset(v144, 0, sizeof(v144));
  v7 = *(_QWORD *)(a1 + 176);
  v113[0] = &v140;
  v113[1] = 0;
  v113[2] = 0;
  v114[0] = 0;
  *(_DWORD *)((char *)v114 + 7) = 0;
  v145 = 1;
  v114[2] = 0;
  v114[3] = v7;
  v137 = v139;
  v138 = xmmword_22F44E350;
  v134 = v136;
  v135 = xmmword_22F44E350;
  if (v5)
    sub_22F0CBDC4(v3, v5, 0);
  v8 = sub_22EFDD1E0(v6);
  if (v8)
  {
    v16 = (uint64_t *)v8;
    do
    {
      sub_22EFC683C(v16 + 5, &v127);
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v127;
      else
        v17 = (std::string *)v127.__r_.__value_.__r.__words[0];
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v127.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v127.__r_.__value_.__l.__size_;
      v19 = sub_22E5760BC(a1, v17, size, "");
      v20 = v159;
      if (v159 >= (unint64_t)HIDWORD(v159))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v159;
      }
      *((_QWORD *)v158 + v20) = v19;
      LODWORD(v159) = v159 + 1;
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      v132 = 0;
      v131 = 0;
      v133[0] = 0;
      v21 = v16[6];
      LODWORD(v127.__r_.__value_.__l.__data_) = 7;
      sub_22EF6B358(v3, v21);
      if (v133[0] >= 0)
        v22 = &v131;
      else
        v22 = v131;
      if (v133[0] >= 0)
        v23 = HIBYTE(v133[0]) & 0x7F;
      else
        v23 = v132;
      v24 = sub_22E5760BC(a1, v22, v23, "");
      v25 = v156;
      if (v156 >= (unint64_t)HIDWORD(v156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v156;
      }
      *((_QWORD *)v155 + v25) = v24;
      LODWORD(v156) = v156 + 1;
      sub_22EF5CDF0(v3, *(_QWORD *)(v16[6] & 0xFFFFFFFFFFFFFFF0));
      v26 = llvm::ConstantInt::get();
      v27 = v150;
      if (v150 >= (unint64_t)HIDWORD(v150))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v150;
      }
      *((_QWORD *)v149 + v27) = v26;
      LODWORD(v150) = v150 + 1;
      sub_22F2791D4(a1, *(_QWORD *)(a1 + 8), a2, (uint64_t)v16);
      v28 = llvm::ConstantInt::get();
      std::operator+<char>();
      v29 = std::string::append(&v107, ".");
      v30 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      sub_22EFC683C(v16 + 5, &v120);
      if (v122 >= 0)
        v31 = (const std::string::value_type *)&v120;
      else
        v31 = (const std::string::value_type *)v120;
      if (v122 >= 0)
        v32 = HIBYTE(v122) & 0x7F;
      else
        v32 = v121;
      v33 = std::string::append(&v127, v31, v32);
      v34 = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)v129 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v130[0] = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v122) < 0)
        operator delete(v120);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      GlobalVariable = llvm::Module::getGlobalVariable();
      if (GlobalVariable)
      {
        v36 = (llvm::GlobalValue *)GlobalVariable;
        llvm::GlobalVariable::setInitializer();
        v37 = *((_DWORD *)v36 + 8);
        *((_DWORD *)v36 + 8) = v37 & 0xFFFFFFF0;
        if ((v37 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v36) & 1) == 0)
          *((_DWORD *)v36 + 8) |= 0x4000u;
      }
      else
      {
        v36 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
        v128 = 260;
        v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
        llvm::GlobalVariable::GlobalVariable();
      }
      v38 = v153;
      if (v153 >= (unint64_t)HIDWORD(v153))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v38 = v153;
      }
      *((_QWORD *)v152 + v38) = v28;
      LODWORD(v153) = v153 + 1;
      v39 = v113[0];
      v40 = *(unsigned int *)(v113[0] + 16);
      if (v40 >= *(unsigned int *)(v113[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v40 = *(unsigned int *)(v39 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v40) = v36;
      ++*(_DWORD *)(v39 + 16);
      v41 = *(_QWORD *)((v16[6] & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v41 & 8) != 0)
        v42 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      else
        v42 = 0;
      v43 = v147;
      if (v147 >= (unint64_t)HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v43 = v147;
      }
      v44 = (v42 >> 6) & 7;
      *((_DWORD *)v146 + v43) = v44;
      LODWORD(v147) = v147 + 1;
      if (v44 == 3)
      {
        v46 = v135;
        if ((unint64_t)(v135 + 1) > *((_QWORD *)&v135 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v46 = v135;
        }
        *((_BYTE *)v134 + v46) = 0;
        *(_QWORD *)&v135 = v135 + 1;
        v47 = v138;
        if ((unint64_t)(v138 + 1) > *((_QWORD *)&v138 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v47 = v138;
        }
        *((_BYTE *)v137 + v47) = 1;
      }
      else
      {
        if (v44 == 2)
        {
          v45 = v135;
          if ((unint64_t)(v135 + 1) > *((_QWORD *)&v135 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v45 = v135;
          }
          *((_BYTE *)v134 + v45) = 1;
        }
        else
        {
          v48 = v135;
          if ((unint64_t)(v135 + 1) > *((_QWORD *)&v135 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v48 = v135;
          }
          *((_BYTE *)v134 + v48) = 0;
        }
        *(_QWORD *)&v135 = v135 + 1;
        v49 = v138;
        if ((unint64_t)(v138 + 1) > *((_QWORD *)&v138 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v49 = v138;
        }
        *((_BYTE *)v137 + v49) = 0;
      }
      *(_QWORD *)&v138 = v138 + 1;
      if (SHIBYTE(v130[0]) < 0)
        operator delete(v129[0]);
      if (SHIBYTE(v133[0]) < 0)
        operator delete(v131);
      v16 = (uint64_t *)v16[10];
    }
    while (v16);
  }
  v9 = sub_22E577A1C(a1, (uint64_t)v134, v135);
  v10 = sub_22E577A1C(a1, (uint64_t)v137, v138);
  v127.__r_.__value_.__r.__words[0] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v11 = sub_22F275F40((uint64_t)v113);
  v131 = v133;
  v132 = 0x1000000000;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  v104 = v10;
  v105 = v9;
  for (i = (uint64_t *)v11; v12; v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x18 && (*(_BYTE *)(v12 + 58) & 2) != 0)
      break;
  }
  sub_22E577D48((uint64_t)&v131, (uint64_t)v133, v12);
  v129[0] = v130;
  v129[1] = (void *)0x1000000000;
  if ((*(_BYTE *)(a2 + 56) & 0x80) != 0)
    sub_22EFCC320(a2 + 48);
  for (j = *(_QWORD *)(a2 + 64); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(j + 28) & 0x7F) == 0x18 && (*(_BYTE *)(j + 58) & 2) == 0)
      break;
  }
  v14 = (char *)v129[0];
  v15 = LODWORD(v129[1]);
  if ((char *)v129[0] + 8 * LODWORD(v129[1]) == (char *)v130)
  {
    sub_22F27606C((uint64_t)v129, j);
  }
  else
  {
    v50 = 0;
    if (j)
    {
      v51 = j;
      do
      {
        do
          v51 = *(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v51 && ((*(_DWORD *)(v51 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v51 + 58) & 2) != 0));
        ++v50;
      }
      while (v51);
    }
    v52 = ((char *)v130 - (char *)v129[0]) >> 3;
    if (v50 + LODWORD(v129[1]) > HIDWORD(v129[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = (char *)v129[0];
      v15 = LODWORD(v129[1]);
    }
    v53 = (unint64_t *)&v14[8 * v52];
    v54 = &v14[8 * v15];
    v55 = (v54 - (char *)v53) >> 3;
    if (v55 >= v50)
    {
      v56 = &v54[-8 * v50];
      sub_22F246808((uint64_t)v129, v56, &v14[8 * v15]);
      if (v56 != (char *)v53)
        memmove(&v54[-(v56 - (char *)v53)], v53, v56 - (char *)v53);
      while (j)
      {
        *v53 = j;
        do
          j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8;
        while (j && ((*(_DWORD *)(j + 28) & 0x7F) != 0x18 || (*(_BYTE *)(j + 58) & 2) != 0));
        ++v53;
      }
    }
    else
    {
      LODWORD(v129[1]) = v15 + v50;
      if (v52 != v15)
      {
        memcpy(&v14[8 * (v15 + v50) + -8 * v55], v53, v54 - (char *)v53);
        do
        {
          *v53++ = j;
          do
            j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8;
          while (j && ((*(_DWORD *)(j + 28) & 0x7F) != 0x18 || (*(_BYTE *)(j + 58) & 2) != 0));
          --v55;
        }
        while (v55);
      }
      for (; j; v54 += 8)
      {
        *(_QWORD *)v54 = j;
        do
          j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8;
        while (j && ((*(_DWORD *)(j + 28) & 0x7F) != 0x18 || (*(_BYTE *)(j + 58) & 2) != 0));
      }
    }
  }
  v57 = sub_22E577F18((_QWORD *)a1, a2, v6, 0, 0);
  v58 = sub_22F2590A8(v6);
  v59 = sub_22F25910C(v6);
  sub_22E55C27C(v58, v59, (char **)&v111);
  v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127.__r_.__value_.__r.__words[2];
  v127.__r_.__value_.__l.__size_ = 0x1000000000;
  v61 = (char *)v111;
  v62 = v112;
  if (v111 != v112)
  {
    do
    {
      sub_22EFC683C((uint64_t *)(*(_QWORD *)v61 + 40), &v107);
      v63 = sub_22E3B9688((uint64_t)&v127, (unint64_t)&v107, 1);
      v64 = v127.__r_.__value_.__r.__words[0] + 24 * LODWORD(v127.__r_.__value_.__r.__words[1]);
      v65 = *(_OWORD *)v63;
      *(_QWORD *)(v64 + 16) = *(_QWORD *)(v63 + 16);
      *(_OWORD *)v64 = v65;
      *(_QWORD *)(v63 + 8) = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)v63 = 0;
      ++LODWORD(v127.__r_.__value_.__r.__words[1]);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v61 += 8;
    }
    while (v61 != v62);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v66 = __p.__r_.__value_.__l.__size_;
  v102 = (uint64_t *)v57;
  if (v66)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v67 = sub_22E5760BC(a1, p_p, v66, ".super_class_name");
  }
  else
  {
    v67 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 64), v60);
  }
  v101 = v67;
  v124 = &v126;
  v125 = 0x100000000;
  v100 = (uint64_t *)sub_22E576334(a1, (uint64_t *)v131, v132);
  v99 = (uint64_t *)sub_22E576334(a1, (uint64_t *)v129[0], LODWORD(v129[1]));
  v69 = (uint64_t *)(*(uint64_t (**)(uint64_t, void *, _QWORD, void *, _QWORD, void *, _QWORD))(*(_QWORD *)a1 + 416))(a1, v158, v159, v155, v156, v152, v153);
  v122 = 0;
  v123 = 0;
  v120 = *(void **)(a1 + 224);
  v121 = 0;
  v121 = llvm::ConstantInt::get();
  v122 = 0;
  v123 = llvm::ConstantInt::get();
  v70 = sub_22EFDD1E0(v6);
  if (v70)
  {
    v71 = v70;
    v72 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 448))(&v109, a1, v6, v71);
      v122 = llvm::ConstantInt::get();
      llvm::ConstantExpr::getGetElementPtr();
      v73 = llvm::Module::getGlobalVariable();
      if (v73)
      {
        v74 = (llvm::GlobalValue *)v73;
        llvm::GlobalVariable::setInitializer();
        v75 = *((_DWORD *)v74 + 8);
        *((_DWORD *)v74 + 8) = v75 & 0xFFFFFFF0;
        if ((v75 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v74) & 1) == 0)
          *((_DWORD *)v74 + 8) |= 0x4000u;
      }
      else
      {
        llvm::User::operator new((llvm::User *)0x58);
        v108 = 260;
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
        llvm::GlobalVariable::GlobalVariable();
      }
      if (v110 < 0)
        operator delete(v109);
      v71 = *(_QWORD *)(v71 + 80);
      ++v72;
    }
    while (v71);
  }
  v76 = llvm::ConstantInt::get();
  v77 = *(uint64_t **)(a1 + 240);
  if (v118 >= 0)
    v78 = (char *)v117;
  else
    v78 = (char *)v117[0];
  v79 = *(_QWORD *)(a1 + 224);
  v80 = (uint64_t *)sub_22E577F18((_QWORD *)a1, a2, v6, 1, 0);
  v81 = (unsigned int *)sub_22E57841C((_QWORD *)a1, (uint64_t)v77, (uint64_t)v77, 18, v78, v79, v77, v99, (uint64_t)v77, v77, v80, v76, v76, 1);
  sub_22F29966C(*(_QWORD *)(a1 + 8), v81, *(_QWORD *)(a2 + 88));
  if (v118 >= 0)
    v82 = (char *)v117;
  else
    v82 = (char *)v117[0];
  v83 = llvm::ConstantInt::get();
  v84 = sub_22E578B6C(a1, (uint64_t *)v127.__r_.__value_.__l.__data_, LODWORD(v127.__r_.__value_.__r.__words[1]));
  v85 = (unsigned int *)sub_22E57841C((_QWORD *)a1, (uint64_t)v81, v101, 17, v82, v83, v69, v100, v84, i, v102, v105, v104, 0);
  sub_22F29966C(*(_QWORD *)(a1 + 8), v85, *(_QWORD *)(a2 + 88));
  if (*(_QWORD *)(a1 + 256))
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalAlias::eraseFromParent(*(llvm::GlobalAlias **)(a1 + 256));
    *(_QWORD *)(a1 + 256) = 0;
  }
  if (*(_QWORD *)(a1 + 264))
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalAlias::eraseFromParent(*(llvm::GlobalAlias **)(a1 + 264));
    *(_QWORD *)(a1 + 264) = 0;
  }
  BitCast = llvm::ConstantExpr::getBitCast();
  v87 = BitCast;
  v89 = *(uint64_t **)(a1 + 280);
  v88 = *(_QWORD *)(a1 + 288);
  if ((unint64_t)v89 >= v88)
  {
    v91 = *(_QWORD **)(a1 + 272);
    v92 = v89 - v91;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 61)
      abort();
    v94 = v88 - (_QWORD)v91;
    if (v94 >> 2 > v93)
      v93 = v94 >> 2;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v95 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    if (v95)
    {
      if (v95 >> 61)
        sub_22E3B3F8C();
      v96 = (char *)operator new(8 * v95);
    }
    else
    {
      v96 = 0;
    }
    v97 = (uint64_t *)&v96[8 * v92];
    *v97 = v87;
    v90 = v97 + 1;
    if (v89 != v91)
    {
      do
      {
        v98 = *--v89;
        *--v97 = v98;
      }
      while (v89 != v91);
      v89 = *(uint64_t **)(a1 + 272);
    }
    *(_QWORD *)(a1 + 272) = v97;
    *(_QWORD *)(a1 + 280) = v90;
    *(_QWORD *)(a1 + 288) = &v96[8 * v95];
    if (v89)
      operator delete(v89);
  }
  else
  {
    *v89 = BitCast;
    v90 = v89 + 1;
  }
  *(_QWORD *)(a1 + 280) = v90;
  if (v124 != &v126)
    free(v124);
  sub_22E3B9848(&v127.__r_.__value_.__l.__data_);
  if (v111)
  {
    v112 = (char *)v111;
    operator delete(v111);
  }
  if (v129[0] != v130)
    free(v129[0]);
  if (v131 != v133)
    free(v131);
  if (v134 != v136)
    free(v134);
  if (v137 != v139)
    free(v137);
  v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  sub_22E3CEB30((void ***)&v127);
  if (v141 != v143)
    free(v141);
  if (v146 != v148)
    free(v146);
  if (v149 != v151)
    free(v149);
  if (v152 != v154)
    free(v152);
  if (v155 != v157)
    free(v155);
  if (v158 != v160)
    free(v158);
  if (v116 < 0)
    operator delete(v115);
  if (v118 < 0)
    operator delete(v117[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t sub_22E573D74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::Type ***v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::LLVMContext *v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 488))(a1, a3);
  v6 = a1[1];
  v7 = (llvm::Type ***)(v6 + 280);
  v8 = *(_QWORD *)(v6 + 144);
  v9 = sub_22F36E2EC(v8);
  v10 = (llvm::LLVMContext *)sub_22F36D148(v8, v9, 0);
  sub_22E66CB04(v7, v10);
  v11 = llvm::PointerType::get();
  v14 = 257;
  return sub_22E3C1740((uint64_t *)(a2 + 272), 49, v5, v11, (uint64_t)v13);
}

void sub_22E573E14(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t IntToPtr;
  unsigned int v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t BitCast;
  const void *v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void **v49[3];
  _QWORD v50[4];
  void *v51;
  size_t v52;
  char v53;
  void *__p;
  void *v55;
  uint64_t v56;
  _BYTE v57[128];
  _QWORD v58[3];
  char v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[128];
  void *v63;
  uint64_t v64;
  _BYTE v65[128];
  void *v66;
  uint64_t v67;
  _BYTE v68[128];
  void *v69;
  uint64_t v70;
  _BYTE v71[128];
  char *v72;
  uint64_t v73;
  _QWORD v74[50];

  v74[48] = *MEMORY[0x24BDAC8D0];
  if (!sub_22EFDE1F8((uint64_t)a2))
  {
    sub_22EFC683C(a2 + 5, &v51);
    v4 = a2[13];
    if (!v4)
    {
      sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
      v4 = a2[13];
    }
    if (v4 < 8)
      v5 = 0;
    else
      v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v5)
      v6 = v5;
    else
      v6 = (unint64_t)a2;
    v72 = (char *)v74;
    v73 = 0x1000000000;
    v7 = sub_22F259248(v6);
    if (v7 != v8)
    {
      v9 = v7;
      v10 = v8;
      do
      {
        sub_22EFC683C((uint64_t *)(*(_QWORD *)v9 + 40), &__p);
        v11 = sub_22E3B9688((uint64_t)&v72, (unint64_t)&__p, 1);
        v12 = &v72[24 * v73];
        v13 = *(_OWORD *)v11;
        *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v12 = v13;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        LODWORD(v73) = v73 + 1;
        if (SHIBYTE(v56) < 0)
          operator delete(__p);
        v9 += 8;
      }
      while (v9 != v10);
    }
    v69 = v71;
    v70 = 0x1000000000;
    v66 = v68;
    v67 = 0x1000000000;
    v14 = sub_22F276230(v6);
    if (v14 != v15)
    {
      v40 = v14;
      v41 = v15;
      do
      {
        if ((*(_QWORD *)(v40 + 56) & 0x3000000) == 0x2000000)
        {
          v42 = v67;
          v43 = &v66;
          if (v67 >= (unint64_t)HIDWORD(v67))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v42 = v67;
          }
        }
        else
        {
          v42 = v70;
          v43 = &v69;
          if (v70 >= (unint64_t)HIDWORD(v70))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v42 = v70;
          }
        }
        *((_QWORD *)*v43 + v42) = v40;
        ++*((_DWORD *)v43 + 2);
        do
          v40 = *(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v40 && ((*(_DWORD *)(v40 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v40 + 58) & 2) == 0));
      }
      while (v40 != v41);
    }
    v63 = v65;
    v64 = 0x1000000000;
    v60 = v62;
    v61 = 0x1000000000;
    v16 = sub_22F27628C(v6);
    if (v16 != v17)
    {
      v44 = v16;
      v45 = v17;
      do
      {
        if ((*(_QWORD *)(v44 + 56) & 0x3000000) == 0x2000000)
        {
          v46 = v61;
          v47 = &v60;
          if (v61 >= (unint64_t)HIDWORD(v61))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v46 = v61;
          }
        }
        else
        {
          v46 = v64;
          v47 = &v63;
          if (v64 >= (unint64_t)HIDWORD(v64))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v46 = v64;
          }
        }
        *((_QWORD *)*v47 + v46) = v44;
        ++*((_DWORD *)v47 + 2);
        do
          v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v44 && ((*(_DWORD *)(v44 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v44 + 58) & 2) != 0));
      }
      while (v44 != v45);
    }
    v18 = sub_22E578B6C(a1, (uint64_t *)v72, v73);
    v19 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 432))(a1, v69, v70);
    v20 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 432))(a1, v63, v64);
    v21 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 432))(a1, v66, v67);
    v22 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 432))(a1, v60, v61);
    v23 = sub_22E577F18((_QWORD *)a1, 0, v6, 0, 0);
    v48 = sub_22E577F18((_QWORD *)a1, 0, v6, 0, 1);
    __p = *(void **)(a1 + 8);
    v55 = v57;
    v56 = 0x1000000000;
    memset(v58, 0, sizeof(v58));
    v50[2] = 0;
    v50[3] = 0;
    v49[0] = &__p;
    v49[1] = 0;
    v49[2] = 0;
    v50[0] = 0;
    *(_DWORD *)((char *)v50 + 7) = 0;
    v59 = 1;
    llvm::ConstantInt::get();
    IntToPtr = llvm::ConstantExpr::getIntToPtr();
    v25 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = v56;
    }
    *((_QWORD *)v55 + v25) = IntToPtr;
    LODWORD(v56) = v56 + 1;
    if (v53 >= 0)
      v26 = &v51;
    else
      v26 = v51;
    if (v53 >= 0)
      v27 = v53 & 0x7F;
    else
      v27 = v52;
    v28 = sub_22E5760BC(a1, v26, v27, "");
    v29 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = v56;
    }
    *((_QWORD *)v55 + v29) = v28;
    v30 = v56 + 1;
    LODWORD(v56) = v30;
    if (v30 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v30 = v56;
    }
    *((_QWORD *)v55 + v30) = v18;
    v31 = v56 + 1;
    LODWORD(v56) = v31;
    if (v31 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = v56;
    }
    *((_QWORD *)v55 + v31) = v19;
    v32 = v56 + 1;
    LODWORD(v56) = v32;
    if (v32 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = v56;
    }
    *((_QWORD *)v55 + v32) = v20;
    v33 = v56 + 1;
    LODWORD(v56) = v33;
    if (v33 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v33 = v56;
    }
    *((_QWORD *)v55 + v33) = v21;
    v34 = v56 + 1;
    LODWORD(v56) = v34;
    if (v34 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v34 = v56;
    }
    *((_QWORD *)v55 + v34) = v22;
    v35 = v56 + 1;
    LODWORD(v56) = v35;
    if (v35 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = v56;
    }
    *((_QWORD *)v55 + v35) = v23;
    v36 = v56 + 1;
    LODWORD(v56) = v36;
    if (v36 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v36 = v56;
    }
    *((_QWORD *)v55 + v36) = v48;
    LODWORD(v56) = v56 + 1;
    sub_22F2762E8((uint64_t *)v49);
    BitCast = llvm::ConstantExpr::getBitCast();
    if (v53 >= 0)
      v38 = &v51;
    else
      v38 = v51;
    if (v53 >= 0)
      v39 = v53 & 0x7F;
    else
      v39 = v52;
    *(_QWORD *)(*sub_22F246F88((llvm::StringMapImpl *)(a1 + 376), v38, v39) + 8) = BitCast;
    v49[0] = (void **)v58;
    sub_22E3CEB30(v49);
    if (v55 != v57)
      free(v55);
    if (v60 != v62)
      free(v60);
    if (v63 != v65)
      free(v63);
    if (v66 != v68)
      free(v66);
    if (v69 != v71)
      free(v69);
    sub_22E3B9848(&v72);
    if (v53 < 0)
      operator delete(v51);
  }
}

uint64_t sub_22E5745B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::Type *Int32PtrTy;
  uint64_t GlobalVariable;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  unint64_t v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t *v29;
  llvm::Type *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  char v36;
  std::string v37;
  std::string v38;
  __int16 v39;
  void *__p[2];
  std::string::size_type v41;
  __int16 v42;
  std::string v43;
  __int16 v44;

  v5 = a3;
  if (((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 400)) & 0xDD) != 0)
  {
    while (1)
    {
      v8 = sub_22EFDD1E0(v5);
      if (v8)
        break;
LABEL_5:
      v5 = sub_22F3B46CC(v5);
      if (!v5)
        goto LABEL_6;
    }
    while (v8 != a4)
    {
      v8 = *(_QWORD *)(v8 + 80);
      if (!v8)
        goto LABEL_5;
    }
LABEL_6:
    if (*(int *)(a1 + 1160) < 10
      || (v9 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 216), *(_DWORD *)(v9 + 68) == 15) && *(_DWORD *)(v9 + 72) == 16)
    {
      v10 = (uint64_t *)(a2 + 272);
      Int32PtrTy = (llvm::Type *)llvm::Type::getInt32PtrTy(*(llvm::Type **)(a1 + 248), 0);
      (*(void (**)(void **__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 448))(__p, a1, v5, a4);
      GlobalVariable = llvm::Module::getGlobalVariable();
      if (!GlobalVariable)
      {
        GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
        llvm::Type::getInt32PtrTy(*(llvm::Type **)(a1 + 248), 0);
        v44 = 260;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        llvm::GlobalVariable::GlobalVariable();
      }
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
      v13 = *(unsigned __int8 *)(a2 + 130);
      __p[0] = "ivar";
      v42 = 259;
      sub_22E3C3200((uint64_t *)(a2 + 272), Int32PtrTy, GlobalVariable, (63 - __clz(v13)) | 0x100, 0, (uint64_t)__p);
      v39 = 257;
      v14 = llvm::User::operator new((llvm::User *)0x40);
      v44 = 257;
      llvm::LoadInst::LoadInst();
      (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), v14, &v38, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
      v15 = *(unsigned int *)(a2 + 280);
      if ((_DWORD)v15)
      {
        v33 = *(_QWORD *)(a2 + 272);
        v34 = v33 + 16 * v15;
        do
        {
          llvm::Instruction::setMetadata();
          v33 += 16;
        }
        while (v33 != v34);
      }
      v16 = *(_QWORD *)(a1 + 168);
      v44 = 257;
      return sub_22E3D3108(v10, v14, v16, (uint64_t)&v43);
    }
    else
    {
      sub_22EFC683C((uint64_t *)(v5 + 40), &v37);
      v18 = std::string::insert(&v37, 0, "__objc_ivar_offset_value_");
      v19 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v38, ".");
      v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      sub_22EFC683C((uint64_t *)(a4 + 40), v35);
      if (v36 >= 0)
        v22 = v35;
      else
        v22 = (void **)v35[0];
      if (v36 >= 0)
        v23 = v36 & 0x7F;
      else
        v23 = (std::string::size_type)v35[1];
      v24 = std::string::append(&v43, (const std::string::value_type *)v22, v23);
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v41 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (v36 < 0)
        operator delete(v35[0]);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 128);
      v27 = llvm::Module::getGlobalVariable();
      if (!v27)
      {
        v27 = llvm::User::operator new((llvm::User *)0x58);
        llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 128), v28);
        v44 = 260;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setAlignment();
      }
      v29 = (uint64_t *)(a2 + 272);
      v30 = *(llvm::Type **)(a1 + 128);
      v44 = 257;
      v17 = (_QWORD *)sub_22E3C3200((uint64_t *)(a2 + 272), v30, v27, (63 - __clz(v26)) | 0x100u, 0, (uint64_t)&v43);
      v31 = *(_QWORD *)(a1 + 168);
      if (*v17 != v31)
      {
        v44 = 257;
        v17 = (_QWORD *)sub_22E3D3108(v29, (uint64_t)v17, v31, (uint64_t)&v43);
      }
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
    }
    return (uint64_t)v17;
  }
  else
  {
    sub_22F27918C(a1, *(_QWORD *)(a2 + 144), a3, a4);
    return llvm::ConstantInt::get();
  }
}

uint64_t sub_22E574A88(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[49];

  v18[48] = *MEMORY[0x24BDAC8D0];
  sub_22E55C27C(*(_QWORD *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 16)+ 8 * *(unsigned int *)((*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) + 24), (char **)&v14);
  v3 = v18;
  v16 = (char *)v18;
  v17 = 0x1000000000;
  v4 = (char *)v14;
  v5 = v15;
  if (v14 == v15)
  {
    v9 = 0;
  }
  else
  {
    do
    {
      sub_22EFC683C((uint64_t *)(*(_QWORD *)v4 + 40), __p);
      v6 = sub_22E3B9688((uint64_t)&v16, (unint64_t)__p, 1);
      v7 = &v16[24 * v17];
      v8 = *(_OWORD *)v6;
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = 0;
      LODWORD(v17) = v17 + 1;
      if (v13 < 0)
        operator delete(__p[0]);
      v4 += 8;
    }
    while (v4 != v5);
    v3 = (uint64_t *)v16;
    v9 = v17;
  }
  v10 = sub_22E578B6C(a1, v3, v9);
  sub_22E3B9848(&v16);
  if (v14)
  {
    v15 = (char *)v14;
    operator delete(v14);
  }
  return v10;
}

uint64_t sub_22E574BD0(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string *v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  char v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void **v21;
  std::string::size_type v22;
  std::string *p_p;
  size_t size;
  uint64_t v25[7];
  void *v26[2];
  char v27;
  void *v28;
  std::string::size_type v29;
  char v30;
  std::string __p;

  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)a2;
  v25[0] = v9;
  v25[1] = a2;
  v25[2] = *(unsigned int *)(v9 + 16);
  memset(&v25[3], 0, 11);
  *(_BYTE *)(a2 + 33) = 1;
  v25[5] = 0;
  v25[6] = v8;
  if (v8)
    BYTE2(v25[4]) = (*(_DWORD *)(v8 + 8) & 0x200) != 0;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v10 + 144);
  v11 = *(_QWORD *)(v10 + 152);
  if (*(_DWORD *)(v11 + 400) == 6
    && (*(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0x8000000600000001,
        (sub_22E3B38EC((_DWORD *)(v11 + 404), &__p) & 1) == 0))
  {
    memset(&__p, 0, sizeof(__p));
    sub_22EF6C7E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a3, a4, (uint64_t)&v28);
    std::string::push_back(&__p, 0);
    v18 = v30 & 0x7F;
    if (v30 < 0)
      v18 = v29;
    std::string::push_back(&__p, v18 + 3);
    if (v30 >= 0)
      v19 = (const std::string::value_type *)&v28;
    else
      v19 = (const std::string::value_type *)v28;
    if (v30 >= 0)
      v20 = v30 & 0x7F;
    else
      v20 = v29;
    std::string::append(&__p, v19, v20);
    std::string::push_back(&__p, 0);
    sub_22EFC683C((uint64_t *)(a3 + 40), v26);
    if (v27 >= 0)
      v21 = v26;
    else
      v21 = (void **)v26[0];
    if (v27 >= 0)
      v22 = v27 & 0x7F;
    else
      v22 = (std::string::size_type)v26[1];
    std::string::append(&__p, (const std::string::value_type *)v21, v22);
    if (v27 < 0)
      operator delete(v26[0]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v15 = sub_22E5760BC(a1, p_p, size, "");
    if (v30 < 0)
      operator delete(v28);
  }
  else
  {
    sub_22EFC683C((uint64_t *)(a3 + 40), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &__p;
    else
      v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v14 = __p.__r_.__value_.__l.__size_;
    v15 = sub_22E5760BC(a1, v13, v14, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = *(_DWORD *)(v9 + 16);
  if (v16 >= *(_DWORD *)(v9 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v9 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v16) = v15;
  ++*(_DWORD *)(v9 + 16);
  sub_22F246F08(v25);
  sub_22F246F08(v25);
  sub_22F246F08(v25);
  sub_22F246F08(v25);
  __p.__r_.__value_.__r.__words[0] = v12;
  __p.__r_.__value_.__l.__size_ = a1;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  sub_22E578F40((uint64_t *)&__p, *(_QWORD **)(a3 + 104));
  sub_22E578F40((uint64_t *)&__p, *(_QWORD **)(a3 + 112));
  return sub_22F2759F0(v25, (uint64_t *)a2);
}

uint64_t sub_22E574EE0(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[7];
  void **v26[7];
  void **v27;
  void ***v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  _QWORD v35[3];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return a1[30];
  LODWORD(v14) = a3;
  v31 = a1[1];
  v32 = v34;
  v33 = 0x1000000000;
  memset(v35, 0, sizeof(v35));
  v26[5] = 0;
  v26[6] = 0;
  v26[0] = (void **)&v31;
  memset(&v26[1], 0, 27);
  v36 = 1;
  sub_22F246F08((uint64_t *)v26);
  v12 = a1[16];
  v27 = (void **)a1[8];
  v28 = (void ***)v27;
  v29 = v12;
  v13 = llvm::StructType::get();
  v27 = v26[0];
  v28 = v26;
  v29 = *((unsigned int *)v26[0] + 4);
  memset(v30, 0, 11);
  BYTE1(v26[4]) = 1;
  v30[2] = 0;
  v30[3] = v13;
  v14 = v14;
  if ((_DWORD)v14)
  {
    v15 = v13;
    do
    {
      v16 = (uint64_t)v27;
      v25[0] = (uint64_t)v27;
      v25[1] = (uint64_t)&v27;
      v17 = *((unsigned int *)v27 + 4);
      v25[2] = v17;
      v25[5] = 0;
      v25[6] = v15;
      memset(&v25[3], 0, 11);
      BYTE1(v30[1]) = 1;
      if (v15)
        BYTE2(v25[4]) = (*(_DWORD *)(v15 + 8) & 0x200) != 0;
      v18 = *a2;
      if (v17 >= *((_DWORD *)v27 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = *(unsigned int *)(v16 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v17) = v18;
      ++*(_DWORD *)(v16 + 16);
      v19 = *a4;
      v20 = v25[0];
      v21 = *(unsigned int *)(v25[0] + 16);
      if (v21 >= *(unsigned int *)(v25[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(unsigned int *)(v20 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v21) = v19;
      ++*(_DWORD *)(v20 + 16);
      v22 = *a6;
      v23 = v25[0];
      v24 = *(unsigned int *)(v25[0] + 16);
      if (v24 >= *(unsigned int *)(v25[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(unsigned int *)(v23 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v24) = v22;
      ++*(_DWORD *)(v23 + 16);
      sub_22F2759F0(v25, (uint64_t *)&v27);
      ++a6;
      ++a4;
      ++a2;
      --v14;
    }
    while (v14);
  }
  sub_22F2758B8((uint64_t)&v27, (uint64_t *)v26);
  v25[0] = *(unsigned __int8 *)(a1[1] + 130);
  v7 = sub_22F27634C((uint64_t *)v26);
  v26[0] = (void **)v35;
  sub_22E3CEB30(v26);
  if (v32 != v34)
    free(v32);
  return v7;
}

uint64_t sub_22E575190(_QWORD *a1, void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t BitCast;
  uint64_t IntToPtr;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  __int16 v24;
  void *__p[2];
  char v26;
  void **v27[3];
  _QWORD v28[8];
  __int16 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[128];
  _QWORD v34[3];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E578B6C((uint64_t)a1, 0, 0);
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 432))(a1, 0, 0);
  BitCast = llvm::ConstantExpr::getBitCast();
  v30 = a1[1];
  v31 = v33;
  v32 = 0x1000000000;
  memset(v34, 0, sizeof(v34));
  v28[2] = 0;
  v28[3] = 0;
  v27[0] = (void **)&v30;
  v27[1] = 0;
  v27[2] = 0;
  v28[0] = 0;
  *(_DWORD *)((char *)v28 + 7) = 0;
  v35 = 1;
  llvm::ConstantInt::get();
  IntToPtr = llvm::ConstantExpr::getIntToPtr();
  v9 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v32;
  }
  *((_QWORD *)v31 + v9) = IntToPtr;
  LODWORD(v32) = v32 + 1;
  v10 = sub_22E5760BC((uint64_t)a1, a2, a3, ".objc_protocol_name");
  v11 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v32;
  }
  *((_QWORD *)v31 + v11) = v10;
  v12 = v32 + 1;
  LODWORD(v32) = v12;
  if (v12 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v32;
  }
  *((_QWORD *)v31 + v12) = v6;
  v13 = v32 + 1;
  LODWORD(v32) = v13;
  if (v13 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v32;
  }
  *((_QWORD *)v31 + v13) = BitCast;
  v14 = v32 + 1;
  LODWORD(v32) = v14;
  if (v14 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v32;
  }
  *((_QWORD *)v31 + v14) = BitCast;
  v15 = v32 + 1;
  LODWORD(v32) = v15;
  if (v15 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v32;
  }
  *((_QWORD *)v31 + v15) = BitCast;
  v16 = v32 + 1;
  LODWORD(v32) = v16;
  if (v16 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = v32;
  }
  *((_QWORD *)v31 + v16) = BitCast;
  v17 = v32 + 1;
  LODWORD(v32) = v17;
  v18 = a1[30];
  if (v17 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v32;
  }
  *((_QWORD *)v31 + v17) = v18;
  v19 = v32 + 1;
  LODWORD(v32) = v19;
  v20 = a1[30];
  if (v19 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v32;
  }
  *((_QWORD *)v31 + v19) = v20;
  LODWORD(v32) = v32 + 1;
  v24 = 261;
  v23[0] = a2;
  v23[1] = a3;
  sub_22E579148((uint64_t)__p, *(_DWORD *)(*(_QWORD *)(a1[1] + 216) + 76), (uint64_t)v23);
  sub_22E670C54((uint64_t *)v27, 0);
  v29 = 260;
  v28[4] = __p;
  v21 = sub_22F29F614((uint64_t)&v30);
  if (v26 < 0)
    operator delete(__p[0]);
  v27[0] = (void **)v34;
  sub_22E3CEB30(v27);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22E575564(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  std::string *p_p;
  size_t size;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::string *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  uint64_t v25[7];
  uint64_t v26[7];
  void **v27[7];
  void *v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[128];
  _QWORD v32[3];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = *(void **)(a1 + 64);
  v29 = v28;
  v6 = llvm::StructType::get();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v28 = *(void **)(a1 + 8);
  v29 = v31;
  v22 = v7;
  v30 = 0x1000000000;
  memset(v32, 0, sizeof(v32));
  v27[5] = 0;
  v27[6] = 0;
  v27[0] = &v28;
  memset(&v27[1], 0, 27);
  v33 = 1;
  sub_22F246F08((uint64_t *)v27);
  v26[0] = (uint64_t)v27[0];
  v26[1] = (uint64_t)v27;
  v26[2] = *((unsigned int *)v27[0] + 4);
  memset(&v26[3], 0, 11);
  BYTE1(v27[4]) = 1;
  v26[5] = 0;
  v26[6] = v6;
  if (a3)
  {
    v10 = 8 * a3;
    do
    {
      v11 = *a2;
      v25[0] = v26[0];
      v25[1] = (uint64_t)v26;
      v25[2] = *(unsigned int *)(v26[0] + 16);
      v25[5] = 0;
      v25[6] = v6;
      memset(&v25[3], 0, 11);
      BYTE1(v26[4]) = 1;
      if (v6)
        BYTE2(v25[4]) = (*(_DWORD *)(v6 + 8) & 0x200) != 0;
      v23 = v11[5];
      sub_22F1D3A38(&v23, (char *)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v14 = sub_22E5760BC(a1, p_p, size, "");
      v15 = v25[0];
      v16 = *(unsigned int *)(v25[0] + 16);
      if (v16 >= *(unsigned int *)(v25[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(v15 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v16) = v14;
      ++*(_DWORD *)(v15 + 16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22EF6C204(v22, v11, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        v18 = __p.__r_.__value_.__l.__size_;
      v19 = sub_22E5760BC(a1, v17, v18, "");
      v20 = v25[0];
      v21 = *(unsigned int *)(v25[0] + 16);
      if (v21 >= *(unsigned int *)(v25[0] + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(unsigned int *)(v20 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v21) = v19;
      ++*(_DWORD *)(v20 + 16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22F2759F0(v25, v26);
      ++a2;
      v10 -= 8;
    }
    while (v10);
  }
  sub_22F2758B8((uint64_t)v26, (uint64_t *)v27);
  v25[0] = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v8 = sub_22F275A68((uint64_t *)v27);
  v27[0] = (void **)v32;
  sub_22E3CEB30(v27);
  if (v29 != v31)
    free(v29);
  return v8;
}

uint64_t sub_22E575864(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  _QWORD *v5;
  __int128 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _QWORD *v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  void **v37;
  __int16 v38;
  uint64_t v39;

  v39 = a3;
  v5 = sub_22F275B94(a1 + 408, &v39);
  v6 = (__int128 **)(v5 + 1);
  v7 = v5[1];
  v8 = *((unsigned int *)v5 + 4);
  if (!(_DWORD)v8)
  {
LABEL_22:
    sub_22F1D3A38(&v39, (char *)&v34);
    v20 = std::string::insert(&v34, 0, ".objc_selector_");
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v36 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v38 = 260;
    v37 = __p;
    v19 = llvm::GlobalAlias::create();
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v22 = *((unsigned int *)v5 + 4);
    if (v22 >= *((_DWORD *)v5 + 5))
    {
      v37 = 0;
      v28 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      v29 = *((unsigned int *)v5 + 4);
      v30 = v28 + 32 * v29;
      if ((char)a4[23] < 0)
      {
        sub_22E3BB2B4((_BYTE *)v30, *(void **)a4, *((_QWORD *)a4 + 1));
      }
      else
      {
        v31 = *(_OWORD *)a4;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)a4 + 2);
        *(_OWORD *)v30 = v31;
      }
      *(_QWORD *)(v28 + 32 * v29 + 24) = v19;
      sub_22E577830(v6, v28);
      v32 = (int)v37;
      v33 = (_QWORD *)v5[1];
      if (v33 != v5 + 3)
        free(v33);
      v5[1] = v28;
      v26 = *((_DWORD *)v5 + 4) + 1;
      *((_DWORD *)v5 + 5) = v32;
    }
    else
    {
      v23 = *v6;
      v24 = &v23[2 * v22];
      if ((char)a4[23] < 0)
      {
        sub_22E3BB2B4(v24, *(void **)a4, *((_QWORD *)a4 + 1));
      }
      else
      {
        v25 = *(_OWORD *)a4;
        *((_QWORD *)v24 + 2) = *((_QWORD *)a4 + 2);
        *v24 = v25;
      }
      *((_QWORD *)&v23[2 * v22 + 1] + 1) = v19;
      v26 = *((_DWORD *)v5 + 4) + 1;
    }
    *((_DWORD *)v5 + 4) = v26;
    return v19;
  }
  v9 = v7 + 32 * v8;
  v10 = a4[23];
  v11 = (char)v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = *((_QWORD *)a4 + 1);
  if (v11 >= 0)
    v14 = a4;
  else
    v14 = *(unsigned __int8 **)a4;
  while (1)
  {
    v15 = *(_BYTE *)(v7 + 23);
    v16 = v15 & 0x7F;
    if (v15 >= 0)
      v17 = v15 & 0x7F;
    else
      v17 = *(_QWORD *)(v7 + 8);
    if (v17 != v13)
      goto LABEL_19;
    if ((*(_BYTE *)(v7 + 23) & 0x80) != 0)
      break;
    if ((v15 & 0x7F) == 0)
      goto LABEL_21;
    v18 = 0;
    while (*(unsigned __int8 *)(v7 + v18) == v14[v18])
    {
      if (v16 == ++v18)
        goto LABEL_21;
    }
LABEL_19:
    v7 += 32;
    if (v7 == v9)
      goto LABEL_22;
  }
  if (memcmp(*(const void **)v7, v14, *(_QWORD *)(v7 + 8)))
    goto LABEL_19;
LABEL_21:
  v19 = *(_QWORD *)(v7 + 24);
  if (!v19)
    goto LABEL_22;
  return v19;
}

void sub_22E575ABC(uint64_t a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  void *__p[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  sub_22EFC683C((uint64_t *)(a1 + 40), &v12);
  v5 = std::string::insert(&v12, 0, "__objc_ivar_offset_");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v13, 46);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  sub_22EFC683C((uint64_t *)(a2 + 40), __p);
  if (v11 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v11 >= 0)
    v8 = v11 & 0x7F;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  *a3 = *v9;
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

llvm::Value *sub_22E575BCC(uint64_t a1, uint64_t a2, void **a3, char a4)
{
  char v7;
  BOOL v8;
  void *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;

  v7 = *((_BYTE *)a3 + 23);
  v8 = v7 < 0;
  if (v7 >= 0)
    v9 = a3;
  else
    v9 = *a3;
  v10 = v7 & 0x7F;
  if (v8)
    v11 = (size_t)a3[1];
  else
    v11 = v10;
  v12 = sub_22E5760BC(a1, v9, v11, "");
  if ((a4 & 1) == 0)
    sub_22E5778B4();
  v13 = *(_QWORD *)(a1 + 8);
  v18[0] = *(_QWORD *)(a1 + 64);
  v14 = llvm::FunctionType::get();
  v15 = sub_22E633A04(v13, v14, "objc_lookup_class", 0x11uLL, 0, 0, 0);
  v20 = v12;
  v19 = 257;
  return sub_22F24EEDC(a2, v15, v16, (uint64_t)&v20, 1, (uint64_t)v18);
}

uint64_t sub_22E575CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::LLVMContext *v12;
  llvm::GetElementPtrInst *v13;
  __int16 v14;
  _BYTE v16[32];
  __int16 v17;
  _BYTE v18[32];
  __int16 v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v7 = sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
  else
    v7 = *(_QWORD *)a3;
  v20[0] = v7;
  v20[1] = a4;
  v8 = sub_22E579234(a1 + 1216);
  v19 = 257;
  v10 = sub_22F24EEDC(a2, v8, v9, (uint64_t)v20, 2, (uint64_t)v18);
  llvm::Value::getContext(v10);
  *((_QWORD *)v10 + 8) = llvm::AttributeList::addAttributeAtIndex();
  v11 = *(llvm::Type **)(a1 + 88);
  v12 = *(llvm::LLVMContext **)(a1 + 1504);
  v19 = 257;
  v13 = sub_22E3C4170((uint64_t *)(a2 + 272), v12, (uint64_t *)v10, 0, 4, (uint64_t)v18);
  v14 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v17 = 257;
  return sub_22E3C3200((uint64_t *)(a2 + 272), v11, (uint64_t)v13, v14, 0, (uint64_t)v16);
}

uint64_t sub_22E575E00(uint64_t a1, uint64_t a2)
{
  llvm::StringMapImpl *v4;
  void **v5;
  size_t v6;
  uint64_t v7;
  uint64_t result;
  void *__p[2];
  char v10;

  v4 = (llvm::StringMapImpl *)(a1 + 376);
  sub_22EFC683C((uint64_t *)(a2 + 40), __p);
  if (v10 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v10 >= 0)
    v6 = v10 & 0x7F;
  else
    v6 = (size_t)__p[1];
  v7 = *sub_22F246F88(v4, v5, v6);
  if (v10 < 0)
    operator delete(__p[0]);
  result = *(_QWORD *)(v7 + 8);
  if (!result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2);
    return *(_QWORD *)(v7 + 8);
  }
  return result;
}

void sub_22E575E9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[1] = llvm::FunctionType::get();
}

uint64_t sub_22E575F50(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned int v16;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (((!v4 || *(_BYTE *)(v4 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v4 = sub_22F10CF48(v4)) == 0)
     || !sub_22E5761BC(v4))
    && (((v5 = *v3) == 0 || *(_BYTE *)(v5 + 16) != 32)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
      || (v5 = sub_22F10CF48(v5)) == 0)
     || !sub_22E491464(v5)))
  {
    v10 = *v3;
    if (!*v3 || *(_BYTE *)(v10 + 16) != 32)
      v10 = sub_22F10CF48(v10);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
      v12 = *(unsigned __int8 *)(v11 + 16) - 35 > 0xFFFFFFFD;
    else
      v12 = 0;
    if (!v12)
      v11 = sub_22F10CF48(v11);
    v13 = *(_QWORD *)(sub_22F272660(v11) + 40);
    if ((v13 & 7) != 0)
      v14 = 0;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_DWORD **)(v14 + 16);
    v16 = *v15;
    v6 = (char *)(v15 + 4);
    v8 = v16;
    v7 = a1;
    return sub_22E5760BC(v7, v6, v8, "");
  }
  if (((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 400)) & 0xDD) != 0)
  {
    v6 = "@id";
    v7 = a1;
    v8 = 3;
    return sub_22E5760BC(v7, v6, v8, "");
  }
  return 0;
}

uint64_t sub_22E576098()
{
  return 0;
}

uint64_t sub_22E5760A4()
{
  return 0;
}

uint64_t sub_22E5760B0()
{
  return 0;
}

uint64_t sub_22E5760BC(uint64_t a1, void *__src, size_t __len, const char *a4)
{
  _QWORD *v7;
  void **v8;
  size_t v9;
  size_t v10;
  void *__dst[2];
  unint64_t v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = *(_QWORD **)(a1 + 8);
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)__len;
    v13 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v13) = __len;
  v8 = __dst;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  sub_22F29BB8C(v7, (uint64_t)__dst, a4);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return llvm::ConstantExpr::getGetElementPtr();
}

BOOL sub_22E5761BC(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  if ((*(_BYTE *)(v1 + 19) & 0xFC) == 0
    && ((v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v4 = *(_DWORD *)(v3 + 16) == 11)
      : (v4 = 0),
        v4))
  {
    return (*(_DWORD *)(v3 + 16) & 0xFF80000) == 114819072;
  }
  else
  {
    return 0;
  }
}

void sub_22E576240(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_22E5762C8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      if (v2[v4 - 9] < 0)
        operator delete(*(void **)&v2[v4 - 32]);
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E576334(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void ***v14;
  void ***v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  std::string *v23;
  size_t size;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  std::string *v29;
  size_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  std::string *v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string v41;
  uint64_t v42[7];
  void *__p;
  void ***v44;
  void ***v45;
  _BYTE v46[11];
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD v52[52];
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  _QWORD v57[3];
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return *(_QWORD *)(a1 + 240);
  v53 = *(_QWORD *)(a1 + 8);
  v54 = v56;
  v55 = 0x1000000000;
  memset(v57, 0, sizeof(v57));
  v42[5] = 0;
  v42[6] = 0;
  v42[0] = (uint64_t)&v53;
  memset(&v42[1], 0, 27);
  v58 = 1;
  sub_22F247080(v42, *(llvm::ConstantPointerNull **)(v53 + 96));
  sub_22F246F08(v42);
  v49 = *(void ***)(a1 + 64);
  v50 = (uint64_t *)v49;
  v51 = *(_QWORD *)(a1 + 88);
  v8 = llvm::StructType::get();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
  if (*(_DWORD *)(v9 + 400) == 6
    && (v10 = v8,
        v49 = (void **)0x8000000000000002,
        v50 = 0,
        !sub_22E3B38EC((_DWORD *)(v9 + 404), &v49)))
  {
    MEMORY[0x23489C120](&v49, *(_QWORD *)(a1 + 16));
    sub_22E3C304C((uint64_t)&v49, v10);
    __p = v13;
    v44 = v14;
    llvm::TypeSize::operator unsigned long long();
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22F246F08(v42);
    v15 = *(void ****)(a1 + 64);
    __p = *(void **)(a1 + 88);
    v44 = v15;
    v45 = v15;
    v11 = llvm::StructType::get();
    MEMORY[0x23489C12C](&v49);
    v12 = 1;
  }
  else
  {
    v49 = *(void ***)(a1 + 64);
    v50 = (uint64_t *)v49;
    v51 = *(_QWORD *)(a1 + 88);
    v11 = llvm::StructType::get();
    v12 = 0;
  }
  v49 = (void **)v42[0];
  v50 = v42;
  v16 = *(unsigned int *)(v42[0] + 16);
  v52[2] = 0;
  v52[3] = 0;
  v51 = v16;
  memset(v52, 0, 11);
  BYTE1(v42[4]) = 1;
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v17 = 8 * a3;
  do
  {
    v18 = (_QWORD *)*a2;
    sub_22E5966F4(a1, *a2, 1, &__p);
    llvm::Module::getFunction();
    if (SHIBYTE(v45) < 0)
      operator delete(__p);
    __p = v49;
    v44 = &v49;
    v45 = (void ***)*((unsigned int *)v49 + 4);
    v47 = 0;
    v48 = v11;
    memset(v46, 0, sizeof(v46));
    BYTE1(v52[1]) = 1;
    if (v11)
      v46[10] = (*(_DWORD *)(v11 + 8) & 0x200) != 0;
    if ((_DWORD)v12)
    {
      sub_22F275848((uint64_t *)&__p);
      v19 = v18[5];
      sub_22EF6C204(v39, v18, 0, &v41);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 480))(a1, v19, &v41);
      v21 = __p;
      v22 = *((unsigned int *)__p + 4);
      if (v22 >= *((unsigned int *)__p + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *((unsigned int *)v21 + 4);
      }
      *(_QWORD *)(v21[1] + 8 * v22) = v20;
      ++*((_DWORD *)v21 + 4);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      sub_22EF6C204(v39, v18, 1, &v41);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v41;
      else
        v23 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v41.__r_.__value_.__l.__size_;
      v25 = sub_22E5760BC(a1, v23, size, "");
      v26 = __p;
      v27 = *((unsigned int *)__p + 4);
      if (v27 >= *((unsigned int *)__p + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *((unsigned int *)v26 + 4);
      }
      *(_QWORD *)(v26[1] + 8 * v27) = v25;
      ++*((_DWORD *)v26 + 4);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
    }
    else
    {
      v28 = v12;
      v40 = v18[5];
      sub_22F1D3A38(&v40, (char *)&v41);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v41;
      else
        v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = *((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x7F;
      else
        v30 = v41.__r_.__value_.__l.__size_;
      v31 = sub_22E5760BC(a1, v29, v30, "");
      v32 = __p;
      v33 = *((unsigned int *)__p + 4);
      if (v33 >= *((unsigned int *)__p + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = *((unsigned int *)v32 + 4);
      }
      *(_QWORD *)(v32[1] + 8 * v33) = v31;
      ++*((_DWORD *)v32 + 4);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      sub_22EF6C204(v39, v18, 0, &v41);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v41;
      else
        v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = *((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x7F;
      else
        v35 = v41.__r_.__value_.__l.__size_;
      v36 = sub_22E5760BC(a1, v34, v35, "");
      v37 = __p;
      v38 = *((unsigned int *)__p + 4);
      v12 = v28;
      if (v38 >= *((unsigned int *)__p + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v38 = *((unsigned int *)v37 + 4);
      }
      *(_QWORD *)(v37[1] + 8 * v38) = v36;
      ++*((_DWORD *)v37 + 4);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      sub_22F275848((uint64_t *)&__p);
    }
    sub_22F2759F0((uint64_t *)&__p, (uint64_t *)&v49);
    ++a2;
    v17 -= 8;
  }
  while (v17);
  sub_22F2758B8((uint64_t)&v49, v42);
  __p = (void *)*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130);
  v4 = sub_22F275A68(v42);
  v49 = (void **)v57;
  sub_22E3CEB30(&v49);
  if (v54 != v56)
    free(v54);
  return v4;
}

uint64_t sub_22E5768FC(uint64_t a1, const void **a2, const void **a3, int a4)
{
  llvm::GlobalValue *v5;
  int v6;
  unsigned int v7;
  uint64_t ElementPtr;
  void *__p;
  char v11;

  sub_22E3B88D8(a3, a2, (uint64_t)&__p);
  if (!llvm::Module::getGlobalVariable())
  {
    llvm::ConstantDataArray::getString();
    v5 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    if (a4)
    {
      v6 = *((_DWORD *)v5 + 8);
      v7 = v6 & 0xFFFFFFCF | 0x10;
      *((_DWORD *)v5 + 8) = v7;
      if ((v6 & 0xFu) - 7 >= 2)
      {
        if ((llvm::GlobalValue::hasExternalWeakLinkage(v5) & 1) != 0)
          goto LABEL_7;
        v7 = *((_DWORD *)v5 + 8);
      }
      *((_DWORD *)v5 + 8) = v7 | 0x4000;
    }
  }
LABEL_7:
  ElementPtr = llvm::ConstantExpr::getGetElementPtr();
  if (v11 < 0)
    operator delete(__p);
  return ElementPtr;
}

uint64_t sub_22E576A90(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v83 = a2 - 2;
  v84 = a2;
  v9 = a2 - 3;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_22EFC5BC0(*(a2 - 1), *v7);
        if ((result & 0x80000000) != 0)
        {
          v39 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_22E577130(v7, v7 + 1, v8);
      case 4:
        return sub_22E577378(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return sub_22E57740C(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v11 <= 191)
        {
          v40 = v7 + 1;
          v42 = v7 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v7;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = sub_22EFC5BC0(v45, v46);
                if ((result & 0x80000000) != 0)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v7 + v48 + 8) = *(uint64_t *)((char *)v7 + v48);
                    if (!v48)
                      break;
                    result = sub_22EFC5BC0(v47, *(uint64_t *)((char *)v7 + v48 - 8));
                    v48 -= 8;
                    if ((result & 0x80000000) == 0)
                    {
                      v49 = (uint64_t *)((char *)v7 + v48 + 8);
                      goto LABEL_75;
                    }
                  }
                  v49 = v7;
LABEL_75:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v78 = *v7;
              v77 = v7[1];
              v7 = v40;
              result = sub_22EFC5BC0(v77, v78);
              if ((result & 0x80000000) != 0)
              {
                v79 = *v7;
                v80 = v7;
                do
                {
                  v81 = v80;
                  v82 = *--v80;
                  *v81 = v82;
                  result = sub_22EFC5BC0(v79, *(v81 - 2));
                }
                while ((result & 0x80000000) != 0);
                *v80 = v79;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v50 = (unint64_t)(v12 - 2) >> 1;
          v51 = v50;
          do
          {
            v52 = v51;
            if (v50 >= v51)
            {
              v53 = (2 * v51) | 1;
              v54 = &v7[v53];
              if (2 * v51 + 2 < v12)
              {
                v55 = sub_22EFC5BC0(*v54, v54[1]);
                if (v55 < 0)
                  ++v54;
                a2 = v84;
                if (v55 < 0)
                  v53 = 2 * v52 + 2;
              }
              v56 = &v7[v52];
              result = sub_22EFC5BC0(*v54, *v56);
              if ((result & 0x80000000) == 0)
              {
                v57 = *v56;
                do
                {
                  v58 = v56;
                  v56 = v54;
                  *v58 = *v54;
                  if (v50 < v53)
                    break;
                  v59 = (2 * v53) | 1;
                  v54 = &v7[v59];
                  v60 = 2 * v53 + 2;
                  if (v60 < v12 && (int)sub_22EFC5BC0(*v54, v54[1]) < 0)
                  {
                    ++v54;
                    v59 = v60;
                  }
                  result = sub_22EFC5BC0(*v54, v57);
                  v53 = v59;
                }
                while ((result & 0x80000000) == 0);
                *v56 = v57;
                a2 = v84;
              }
            }
            v51 = v52 - 1;
          }
          while (v52);
          while (2)
          {
            v61 = a2;
            v62 = 0;
            v63 = *v7;
            v64 = v12 - 2;
            if (v12 < 2)
              v64 = v12 - 1;
            v65 = v64 >> 1;
            v66 = v7;
            do
            {
              v67 = &v66[v62 + 1];
              v68 = (2 * v62) | 1;
              v69 = 2 * v62 + 2;
              if (v69 < v12)
              {
                result = sub_22EFC5BC0(*v67, v66[v62 + 2]);
                if ((int)result < 0)
                {
                  ++v67;
                  v68 = v69;
                }
              }
              *v66 = *v67;
              v66 = v67;
              v62 = v68;
            }
            while (v68 <= v65);
            v70 = v61 - 1;
            if (v67 != v70)
            {
              *v67 = *v70;
              v71 = v70;
              *v70 = v63;
              v72 = (char *)v67 - (char *)v7 + 8;
              if (v72 >= 9)
              {
                v73 = (((unint64_t)v72 >> 3) - 2) >> 1;
                v74 = &v7[v73];
                result = sub_22EFC5BC0(*v74, *v67);
                if ((result & 0x80000000) != 0)
                {
                  v63 = *v67;
                  do
                  {
                    v75 = v67;
                    v67 = v74;
                    *v75 = *v74;
                    if (!v73)
                      break;
                    v73 = (v73 - 1) >> 1;
                    v74 = &v7[v73];
                    result = sub_22EFC5BC0(*v74, v63);
                  }
                  while ((result & 0x80000000) != 0);
LABEL_110:
                  *v67 = v63;
                }
              }
              v76 = v12-- <= 2;
              a2 = v71;
              if (v76)
                return result;
              continue;
            }
            break;
          }
          v71 = v70;
          goto LABEL_110;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v7[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_22E577130(v14, v7, v8);
        }
        else
        {
          sub_22E577130(v7, v14, v8);
          sub_22E577130(v7 + 1, v14 - 1, v83);
          sub_22E577130(v7 + 2, &v7[v13 + 1], v9);
          sub_22E577130(v14 - 1, v14, &v7[v13 + 1]);
          v15 = *v7;
          *v7 = *v14;
          *v14 = v15;
        }
        --a3;
        if ((a4 & 1) == 0 && (sub_22EFC5BC0(*(v7 - 1), *v7) & 0x80000000) == 0)
        {
          v30 = *v7;
          result = sub_22EFC5BC0(*v7, *v8);
          if ((result & 0x80000000) != 0)
          {
            v10 = v7;
            do
            {
              v32 = v10[1];
              ++v10;
              result = sub_22EFC5BC0(v30, v32);
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            v31 = v7 + 1;
            do
            {
              v10 = v31;
              if (v31 >= a2)
                break;
              ++v31;
              result = sub_22EFC5BC0(v30, *v10);
            }
            while ((result & 0x80000000) == 0);
          }
          v33 = a2;
          if (v10 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *--v33;
              result = sub_22EFC5BC0(v30, v34);
            }
            while ((result & 0x80000000) != 0);
          }
          while (v10 < v33)
          {
            v35 = *v10;
            *v10 = *v33;
            *v33 = v35;
            do
            {
              v36 = v10[1];
              ++v10;
            }
            while ((sub_22EFC5BC0(v30, v36) & 0x80000000) == 0);
            do
            {
              v37 = *--v33;
              result = sub_22EFC5BC0(v30, v37);
            }
            while ((result & 0x80000000) != 0);
          }
          v38 = v10 - 1;
          if (v10 - 1 != v7)
            *v7 = *v38;
          a4 = 0;
          *v38 = v30;
          continue;
        }
        v16 = 0;
        v17 = *v7;
        do
          v18 = sub_22EFC5BC0(v7[++v16], v17);
        while (v18 < 0);
        v19 = &v7[v16];
        if (v16 == 1)
        {
          a2 = v84;
          do
          {
            if (v19 >= a2)
              break;
            v21 = *--a2;
          }
          while ((sub_22EFC5BC0(v21, v17) & 0x80000000) == 0);
        }
        else
        {
          do
            v20 = *--a2;
          while ((sub_22EFC5BC0(v20, v17) & 0x80000000) == 0);
        }
        if (v19 >= a2)
        {
          v27 = v19 - 1;
        }
        else
        {
          v22 = &v7[v16];
          v23 = a2;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while ((sub_22EFC5BC0(v25, v17) & 0x80000000) != 0);
            do
              v26 = *--v23;
            while ((sub_22EFC5BC0(v26, v17) & 0x80000000) == 0);
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v17;
        v28 = v19 >= a2;
        a2 = v84;
        if (!v28)
        {
LABEL_33:
          result = sub_22E576A90(v7, v27, a3, a4 & 1);
          a4 = 0;
          v10 = v27 + 1;
          continue;
        }
        v29 = sub_22E5771F4(v7, v27);
        v10 = v27 + 1;
        result = sub_22E5771F4(v27 + 1, v84);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_22E577130(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_22EFC5BC0(*a2, *a1);
  result = sub_22EFC5BC0(*a3, *a2);
  if (v6 < 0)
  {
    v10 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_22EFC5BC0(*a3, v10);
      if ((result & 0x80000000) != 0)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    result = sub_22EFC5BC0(*a2, *a1);
    if ((result & 0x80000000) != 0)
    {
      v9 = *a1;
      *a1 = *a2;
      *a2 = v9;
    }
  }
  return result;
}

BOOL sub_22E5771F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((sub_22EFC5BC0(*(a2 - 1), *a1) & 0x80000000) != 0)
      {
        v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      sub_22E577130(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22E577378(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_22E57740C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      sub_22E577130(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if ((sub_22EFC5BC0(*v8, *v7) & 0x80000000) != 0)
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        v13 = (char *)a1 + v12;
        *(uint64_t *)((char *)a1 + v12 + 24) = *(uint64_t *)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if ((sub_22EFC5BC0(v11, *((_QWORD *)v13 + 1)) & 0x80000000) == 0)
        {
          v14 = (uint64_t *)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      v14 = a1;
LABEL_12:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

uint64_t sub_22E577378(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E577130(a1, a2, a3);
  result = sub_22EFC5BC0(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = sub_22EFC5BC0(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = sub_22EFC5BC0(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_22E57740C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E577378(a1, a2, a3, a4);
  result = sub_22EFC5BC0(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    result = sub_22EFC5BC0(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = sub_22EFC5BC0(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        result = sub_22EFC5BC0(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22E5774CC(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F275D84((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -1;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E577598(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 32 * v7;
        do
        {
          if (v6[v8 - 9] < 0)
            operator delete(*(void **)&v6[v8 - 32]);
          v8 -= 32;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v9 = 0;
      return a1;
    }
    v9 = (_DWORD *)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 8);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v11)
    {
      v13 = *(_QWORD *)a1;
      if ((_DWORD)v11)
      {
        v14 = sub_22E5777B8(v4, &v4[2 * v11], v13);
        v13 = *(_QWORD *)a1;
        v12 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v14 = *(_QWORD *)a1;
      }
      for (i = v13 + 32 * v12; i != v14; i -= 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      *(_DWORD *)(a1 + 8) = v11;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = *(__int128 **)a2;
        v18 = 2 * v16;
        do
        {
          if (SBYTE7(v17[v18 - 1]) < 0)
            operator delete(*(void **)&v17[v18 - 2]);
          v18 -= 2;
        }
        while (v18 * 16);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v11)
    {
      if ((_DWORD)v12)
      {
        v19 = *(_QWORD *)a1;
        v20 = 32 * v12;
        do
        {
          if (*(char *)(v19 + v20 - 9) < 0)
            operator delete(*(void **)(v19 + v20 - 32));
          v20 -= 32;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F275E70(a1);
    }
    else if ((_DWORD)v12)
    {
      sub_22E5777B8(v4, &v4[2 * v12], *(_QWORD *)a1);
LABEL_39:
      v21 = *(__int128 **)a2;
      v22 = *(unsigned int *)(a2 + 8);
      if (v12 != v22)
      {
        v23 = &v21[2 * v22];
        v24 = *(_QWORD *)a1 + 32 * v12;
        v25 = &v21[2 * v12];
        do
        {
          v26 = *v25;
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v24 = v26;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 3);
          v25 += 2;
          v24 += 32;
        }
        while (v25 != v23);
        v21 = *(__int128 **)a2;
      }
      *(_DWORD *)(a1 + 8) = v11;
      v27 = *v9;
      if ((_DWORD)v27)
      {
        v28 = 2 * v27;
        do
        {
          if (SBYTE7(v21[v28 - 1]) < 0)
            operator delete(*(void **)&v21[v28 - 2]);
          v28 -= 2;
        }
        while (v28 * 16);
      }
      goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_39;
  }
  return a1;
}

uint64_t sub_22E5777B8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)v5 + 3);
      a3 += 32;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_22E577830(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[2 * v2];
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)v3 + 3);
      v3 += 2;
      a2 += 32;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 2 * v6;
      do
      {
        if (SBYTE7(v7[v8 - 1]) < 0)
          operator delete(*(void **)&v7[v8 - 2]);
        v8 -= 2;
      }
      while (v8 * 16);
    }
  }
}

void sub_22E5778B4()
{
  void *__p;
  char v1;
  void *v2;
  char v3;

  std::operator+<char>();
  if (!llvm::Module::getGlobalVariable())
  {
    std::operator+<char>();
    if (!llvm::Module::getGlobalVariable())
    {
      llvm::User::operator new((llvm::User *)0x58);
      llvm::GlobalVariable::GlobalVariable();
    }
    llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    if (v1 < 0)
      operator delete(__p);
  }
  if (v3 < 0)
    operator delete(v2);
}

uint64_t sub_22E577A1C(uint64_t a1, uint64_t a2, int a3)
{
  llvm::DataLayout *DataLayout;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t PtrToInt;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD v26[4];
  void **v27[7];
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[128];
  _QWORD v32[3];
  char v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD v36[10];

  v36[8] = *MEMORY[0x24BDAC8D0];
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(DataLayout) + 4) <= a3)
  {
    v34 = v36;
    v35 = 0x800000000;
    if (a3 >= 1)
    {
      v12 = 0;
      do
      {
        v13 = 0;
        v14 = 0;
        do
        {
          if (*(_BYTE *)(a2 + v12 + v13))
            v15 = 1 << v13;
          else
            v15 = 0;
          v14 |= v15;
          v16 = v13 + 1;
          if (v13 > 0x1E)
            break;
          ++v13;
        }
        while (v16 + v12 < a3);
        v17 = llvm::ConstantInt::get();
        v18 = v35;
        if (v35 >= (unint64_t)HIDWORD(v35))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v35;
        }
        v12 += v16;
        v34[v18] = v17;
        LODWORD(v35) = v35 + 1;
      }
      while (v12 < a3);
    }
    v28 = *(_QWORD *)(a1 + 8);
    v29 = v31;
    v30 = 0x1000000000;
    memset(v32, 0, sizeof(v32));
    v27[5] = 0;
    v27[6] = 0;
    v27[0] = (void **)&v28;
    memset(&v27[1], 0, 27);
    v33 = 1;
    sub_22F246F08((uint64_t *)v27);
    v19 = v27[0];
    v25[0] = v27[0];
    v25[1] = v27;
    v20 = *((unsigned int *)v27[0] + 4);
    v26[2] = 0;
    v26[3] = 0;
    v25[2] = v20;
    v26[0] = 0;
    *(_DWORD *)((char *)v26 + 7) = 0;
    BYTE1(v27[4]) = 1;
    if ((_DWORD)v35)
    {
      v22 = v34;
      v23 = 8 * v35;
      do
      {
        v24 = *v22;
        if (v20 >= *((_DWORD *)v19 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v20) = *((_DWORD *)v19 + 4);
        }
        *((_QWORD *)v19[1] + v20) = v24;
        LODWORD(v20) = *((_DWORD *)v19 + 4) + 1;
        *((_DWORD *)v19 + 4) = v20;
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    sub_22F2758B8((uint64_t)v25, (uint64_t *)v27);
    sub_22F275998((uint64_t *)v27);
    PtrToInt = llvm::ConstantExpr::getPtrToInt();
    v27[0] = (void **)v32;
    sub_22E3CEB30(v27);
    if (v29 != v31)
      free(v29);
    if (v34 != v36)
      free(v34);
    return PtrToInt;
  }
  else
  {
    if (a3 >= 1)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = v7 + 1;
        if (*(_BYTE *)(a2 + v7))
          v10 = 2 << v7;
        else
          v10 = 0;
        v8 |= v10;
        v7 = v9;
      }
      while (a3 != v9);
    }
    return llvm::ConstantInt::get();
  }
}

uint64_t sub_22E577D48(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char *v11;
  unint64_t v12;
  char *v13;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v6 == a2)
    return sub_22F275FA4(result, a3);
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    do
    {
      do
        v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v8 && ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v8 + 58) & 2) == 0));
      ++v7;
    }
    while (v8);
  }
  v9 = (a2 - v5) >> 3;
  if (v7 + v6 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)v4;
    v6 = *(unsigned int *)(v4 + 8);
  }
  v10 = (unint64_t *)(v5 + 8 * v9);
  v11 = (char *)(v5 + 8 * v6);
  v12 = (v11 - (char *)v10) >> 3;
  if (v12 >= v7)
  {
    v13 = &v11[-8 * v7];
    result = sub_22F246808(v4, v13, (char *)(v5 + 8 * v6));
    if (v13 != (char *)v10)
      result = (uint64_t)memmove(&v11[-(v13 - (char *)v10)], v10, v13 - (char *)v10);
    while (v3)
    {
      *v10 = v3;
      do
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) == 0));
      ++v10;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 8) = v6 + v7;
    if (v9 != v6)
    {
      result = (uint64_t)memcpy((void *)(v5 + 8 * (v6 + v7) - 8 * v12), v10, v11 - (char *)v10);
      do
      {
        *v10++ = v3;
        do
          v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) == 0));
        --v12;
      }
      while (v12);
    }
    for (; v3; v11 += 8)
    {
      *(_QWORD *)v11 = v3;
      do
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) == 0));
    }
  }
  return result;
}

uint64_t sub_22E577F18(_QWORD *a1, uint64_t a2, unint64_t a3, char a4, int a5)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  char v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (**v28)(_QWORD *);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  _BOOL8 v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[7];
  void **v52[3];
  _QWORD v53[4];
  BOOL v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  int v58;
  _BYTE v59[135];
  char v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[128];
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD v72[17];

  v72[16] = *MEMORY[0x24BDAC8D0];
  v61 = a2;
  v60 = a4;
  v70 = v72;
  v71 = 0x1000000000;
  v55 = v59;
  v56 = v59;
  v57 = 16;
  v58 = 0;
  v8 = *(_DWORD *)(a3 + 28) & 0x7F;
  v54 = v8 == 23;
  v9 = *(_QWORD *)(a1[1] + 144);
  v10 = operator new(0x40uLL);
  *v10 = &off_24FA64A90;
  v10[1] = v68;
  v10[2] = &v60;
  v10[3] = &v54;
  v10[4] = v9;
  v10[5] = &v61;
  v10[6] = &v55;
  v10[7] = &v70;
  v69 = v10;
  if (a3)
  {
    if (v8 == 22)
    {
      v11 = sub_22E496488(a3);
      if (v11 != v12)
      {
        v30 = v11;
        v31 = v12;
        do
        {
          v32 = sub_22F256388(v30);
          if (v32 != v33)
          {
            v35 = v32;
            v36 = v33;
            do
            {
              if (v60 == ((*(_DWORD *)(v35 + 72) >> 14) & 1))
              {
                v37 = *(_QWORD *)(v35 + 40);
                if ((v37 & 7) != 0)
                  v38 = 0;
                else
                  v38 = (const void *)(v37 & 0xFFFFFFFFFFFFFFF8);
                sub_22E3BA850((uint64_t)&v55, v38);
                v39 = v71;
                if (v71 >= (unint64_t)HIDWORD(v71))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v39 = v71;
                }
                v70[v39] = v35;
                LODWORD(v71) = v71 + 1;
              }
              do
                v35 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8;
              while (v35 && (*(_DWORD *)(v35 + 28) & 0x7F) != 0x19);
            }
            while (v35 != v36);
          }
          do
          {
            v30 = *(_QWORD *)(v30 + 128);
            if (!v30)
              break;
          }
          while ((*(_BYTE *)(v30 + 28) & 0x80) != 0
               || *(_QWORD *)(v30 + 40) >= 8uLL && (*(_QWORD *)(v30 + 40) & 7) == 0);
        }
        while (v30 != v31);
      }
    }
  }
  v13 = sub_22F256388(a3);
  if (v13 != v14)
  {
    v15 = v13;
    v16 = v14;
    do
    {
      if (v60 == ((*(_DWORD *)(v15 + 72) >> 14) & 1)
        && (!v54 || ((((*(_DWORD *)(v15 + 76) & 0x60000) == 0x40000) ^ a5) & 1) == 0))
      {
        v17 = *(_QWORD *)(v15 + 40);
        v18 = (v17 & 7) != 0 ? 0 : (const void *)(v17 & 0xFFFFFFFFFFFFFFF8);
        sub_22E3BA850((uint64_t)&v55, v18);
        if (v19)
        {
          v20 = v71;
          if (v71 >= (unint64_t)HIDWORD(v71))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v71;
          }
          v70[v20] = v15;
          LODWORD(v71) = v71 + 1;
        }
      }
      do
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v15 && (*(_DWORD *)(v15 + 28) & 0x7F) != 0x19);
    }
    while (v15 != v16);
  }
  v21 = *(_DWORD *)(a3 + 28) & 0x7F;
  if (a3 && v21 == 22)
  {
    v40 = (uint64_t *)sub_22F276134(a3);
    v41 = sub_22F2761B0(a3);
    if (v40 != (uint64_t *)v41)
    {
      v42 = (uint64_t *)v41;
      while (1)
      {
        v62 = *v40;
        if (!v69)
          break;
        (*(void (**)(_QWORD *, uint64_t *))(*v69 + 48))(v69, &v62);
        if (++v40 == v42)
          goto LABEL_27;
      }
LABEL_75:
      sub_22E4A06C4();
    }
  }
  else if (a3)
  {
    if (v21 == 19)
    {
      v22 = *(_QWORD *)(a3 + 120) & 0xFFFFFFFFFFFFFFF8;
      v23 = *(unsigned int *)(v22 + 24);
      if ((_DWORD)v23)
      {
        v24 = *(uint64_t **)(v22 + 16);
        v25 = 8 * v23;
        do
        {
          v62 = *v24;
          if (!v69)
            goto LABEL_75;
          (*(void (**)(_QWORD *, uint64_t *))(*v69 + 48))(v69, &v62);
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
    }
  }
LABEL_27:
  if ((_DWORD)v71)
  {
    v43 = *a1;
    v62 = a1[1];
    v63 = v65;
    v64 = 0x1000000000;
    v67 = 1;
    memset(v66, 0, sizeof(v66));
    v53[2] = 0;
    v53[3] = 0;
    v52[0] = (void **)&v62;
    v52[1] = 0;
    v52[2] = 0;
    v53[0] = 0;
    *(_DWORD *)((char *)v53 + 7) = 0;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, void ***))(v43 + 400))(v51, a1, v52);
    if ((_DWORD)v71)
    {
      v44 = v70;
      v45 = 8 * v71;
      do
      {
        v46 = *v44;
        if (v54 || (v49 = sub_22EF6C718(v9, v46, v61)) == 0)
        {
          v47 = 0;
          v48 = 0;
        }
        else
        {
          v50 = *(_QWORD *)(v49 + 56);
          v48 = v50 == 0;
          v47 = v50 != 0;
        }
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, _BOOL8, _BOOL8))(*a1 + 408))(a1, v51, v46, v61, v47, v48);
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
    sub_22F2758B8((uint64_t)v51, (uint64_t *)v52);
    v26 = sub_22F275920((uint64_t *)v52);
    v52[0] = (void **)v66;
    sub_22E3CEB30(v52);
    if (v63 != v65)
      free(v63);
  }
  else
  {
    v26 = a1[30];
  }
  v27 = v69;
  if (v69 == v68)
  {
    v28 = (void (**)(_QWORD *))(v68[0] + 32);
    v27 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_34;
    v28 = (void (**)(_QWORD *))(*v69 + 40);
  }
  (*v28)(v27);
LABEL_34:
  if (v56 != v55)
    free(v56);
  if (v70 != v72)
    free(v70);
  return v26;
}

uint64_t sub_22E57841C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  void *v36;
  const std::string::value_type *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  size_t v64;
  std::string::size_type v65;
  std::string *p_dst;
  uint64_t v67;
  uint64_t v68;
  std::string *v69;
  std::string::size_type v70;
  llvm::GlobalVariable *GlobalVariable;
  uint64_t v72;
  uint64_t v73;
  void *__p[2];
  std::string::size_type v76;
  uint64_t v77[6];
  uint64_t v78;
  std::string __dst;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _BYTE v98[128];
  _QWORD v99[3];
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v20 = *a7;
  v21 = *a8;
  v23 = a1[17];
  v22 = a1[18];
  v24 = *a10;
  v25 = *a11;
  v26 = a1[20];
  __dst.__r_.__value_.__r.__words[0] = a1[8];
  __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[0];
  v80 = v22;
  v81 = v22;
  v82 = v22;
  v83 = v20;
  v84 = v21;
  v85 = v23;
  v86 = v23;
  v87 = v23;
  v88 = v23;
  v89 = v23;
  v90 = v22;
  v91 = v24;
  v92 = v25;
  v93 = v26;
  v94 = v26;
  v27 = llvm::StructType::get();
  v28 = v27;
  v95 = a1[1];
  v96 = v98;
  v97 = 0x1000000000;
  memset(v99, 0, sizeof(v99));
  v77[0] = (uint64_t)&v95;
  memset(&v77[1], 0, 27);
  v100 = 1;
  v77[5] = 0;
  v78 = v27;
  if (v27)
    BYTE2(v77[4]) = (*(_DWORD *)(v27 + 8) & 0x200) != 0;
  sub_22F275848(v77);
  v29 = v77[0];
  v30 = *(_DWORD *)(v77[0] + 16);
  if (v30 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(v29 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v30) = a3;
  ++*(_DWORD *)(v29 + 16);
  if (a5)
    v31 = strlen(a5);
  else
    v31 = 0;
  v32 = sub_22E5760BC((uint64_t)a1, a5, v31, ".class_name");
  v33 = v77[0];
  v34 = *(_DWORD *)(v77[0] + 16);
  if (v34 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(v33 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v34) = v32;
  ++*(_DWORD *)(v33 + 16);
  sub_22F246F08(v77);
  sub_22F246F08(v77);
  if (a14)
  {
    MEMORY[0x23489C120](&__dst, a1[2]);
    sub_22E3C304C((uint64_t)&__dst, v28);
    __p[0] = v35;
    __p[1] = v36;
    llvm::TypeSize::operator unsigned long long();
    sub_22EF5CDF0(*(_QWORD *)(a1[1] + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22F246F08(v77);
    MEMORY[0x23489C12C](&__dst);
    v37 = "_OBJC_METACLASS_";
  }
  else
  {
    v38 = v77[0];
    v39 = *(_DWORD *)(v77[0] + 16);
    if (v39 >= *(_DWORD *)(v77[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v39 = *(_DWORD *)(v38 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v38 + 8) + 8 * v39) = a6;
    ++*(_DWORD *)(v38 + 16);
    v37 = "_OBJC_CLASS_";
  }
  v40 = v77[0];
  v41 = *(_DWORD *)(v77[0] + 16);
  if (v41 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v41 = *(_DWORD *)(v40 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v40 + 8) + 8 * v41) = a7;
  ++*(_DWORD *)(v40 + 16);
  v42 = v77[0];
  v43 = *(_DWORD *)(v77[0] + 16);
  if (v43 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = *(_DWORD *)(v42 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8 * v43) = a8;
  ++*(_DWORD *)(v42 + 16);
  v44 = a1[30];
  v45 = v77[0];
  v46 = *(_DWORD *)(v77[0] + 16);
  if (v46 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(v45 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v46) = v44;
  ++*(_DWORD *)(v45 + 16);
  v47 = a1[30];
  v48 = v77[0];
  v49 = *(_DWORD *)(v77[0] + 16);
  if (v49 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v49 = *(_DWORD *)(v48 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v49) = v47;
  ++*(_DWORD *)(v48 + 16);
  v50 = a1[30];
  v51 = v77[0];
  v52 = *(_DWORD *)(v77[0] + 16);
  if (v52 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = *(_DWORD *)(v51 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8 * v52) = v50;
  ++*(_DWORD *)(v51 + 16);
  sub_22F275848(v77);
  v53 = a1[30];
  v54 = v77[0];
  v55 = *(_DWORD *)(v77[0] + 16);
  if (v55 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v55 = *(_DWORD *)(v54 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * v55) = v53;
  ++*(_DWORD *)(v54 + 16);
  sub_22F246F08(v77);
  v56 = v77[0];
  v57 = *(_DWORD *)(v77[0] + 16);
  if (v57 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v57 = *(_DWORD *)(v56 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v57) = a10;
  ++*(_DWORD *)(v56 + 16);
  v58 = v77[0];
  v59 = *(_DWORD *)(v77[0] + 16);
  if (v59 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v59 = *(_DWORD *)(v58 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v58 + 8) + 8 * v59) = a11;
  ++*(_DWORD *)(v58 + 16);
  v60 = v77[0];
  v61 = *(_DWORD *)(v77[0] + 16);
  if (v61 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v61 = *(_DWORD *)(v60 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v61) = a12;
  ++*(_DWORD *)(v60 + 16);
  v62 = v77[0];
  v63 = *(_DWORD *)(v77[0] + 16);
  if (v63 >= *(_DWORD *)(v77[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v63 = *(_DWORD *)(v62 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v63) = a13;
  ++*(_DWORD *)(v62 + 16);
  v64 = strlen(a5);
  if (v64 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v67 = v64 | 7;
    v68 = v67 + 1;
    p_dst = (std::string *)operator new(v67 + 1);
    __dst.__r_.__value_.__l.__size_ = v65;
    __dst.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_42;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v64;
  p_dst = &__dst;
  if (v64)
LABEL_42:
    memcpy(p_dst, a5, v65);
  p_dst->__r_.__value_.__s.__data_[v65] = 0;
  v69 = std::string::insert(&__dst, 0, v37);
  v70 = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v76 = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
  v72 = v77[0];
  sub_22E670C54(v77, v78);
  LOWORD(v81) = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v73 = sub_22F29F614(v72);
  if (GlobalVariable)
  {
    llvm::ConstantExpr::getBitCast();
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalVariable::removeFromParent(GlobalVariable);
    LOWORD(v81) = 260;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    llvm::Value::setName();
  }
  if (SHIBYTE(v76) < 0)
    operator delete(__p[0]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
  sub_22E3CEB30((void ***)&__dst);
  if (v96 != v98)
    free(v96);
  return v73;
}

uint64_t sub_22E578B6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int Key;
  char v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[3];
  _QWORD v18[4];
  void **v19[7];
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[16];
  _QWORD v24[3];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v23;
  v19[5] = 0;
  v19[6] = 0;
  v19[0] = (void **)&v20;
  memset(&v19[1], 0, 27);
  v25 = 1;
  v6 = *(_QWORD *)(a1 + 240);
  memset(v24, 0, sizeof(v24));
  v23[0] = v6;
  v22 = 0x1000000001;
  sub_22F246F08((uint64_t *)v19);
  v7 = *(_QWORD *)(a1 + 64);
  v17[0] = (uint64_t)v19[0];
  v17[1] = (uint64_t)v19;
  v17[2] = *((unsigned int *)v19[0] + 4);
  v18[0] = 0;
  *(_DWORD *)((char *)v18 + 7) = 0;
  BYTE1(v19[4]) = 1;
  v18[2] = 0;
  v18[3] = v7;
  if (a3)
  {
    v8 = 24 * a3;
    do
    {
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 384))
      {
        v10 = *((_BYTE *)a2 + 23);
        v11 = v10 < 0;
        if (v10 >= 0)
          v12 = a2;
        else
          v12 = (uint64_t *)*a2;
        v13 = v10 & 0x7F;
        if (v11)
          v14 = a2[1];
        else
          v14 = v13;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 424))(a1, v12, v14);
      }
      sub_22F275848(v17);
      a2 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  sub_22F2758B8((uint64_t)v17, (uint64_t *)v19);
  v15 = sub_22F275920((uint64_t *)v19);
  v19[0] = (void **)v24;
  sub_22E3CEB30(v19);
  if (v21 != v23)
    free(v21);
  return v15;
}

void sub_22E578D50()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E578D64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FA64A90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_22E578DB4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FA64A90;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_22E578DEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = *a2;
  v4 = sub_22F259248(*a2);
  if ((uint64_t *)v4 == v5)
  {
LABEL_5:
    v10 = sub_22F256388(v3);
    if (v10 != v11)
    {
      v12 = v10;
      v13 = v11;
      do
      {
        if (**(_BYTE **)(a1 + 16) == ((*(_DWORD *)(v12 + 72) >> 14) & 1)
          && (**(_BYTE **)(a1 + 24) || sub_22EF6C718(*(_QWORD *)(a1 + 32), v12, **(_QWORD **)(a1 + 40))))
        {
          v14 = *(_QWORD *)(v12 + 40);
          v15 = (v14 & 7) != 0 ? 0 : (const void *)(v14 & 0xFFFFFFFFFFFFFFF8);
          sub_22E3BA850(*(_QWORD *)(a1 + 48), v15);
          if (v16)
          {
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(unsigned int *)(v17 + 8);
            if (v18 >= *(unsigned int *)(v17 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v18 = *(unsigned int *)(v17 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v12;
            ++*(_DWORD *)(v17 + 8);
          }
        }
        do
          v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v12 && (*(_DWORD *)(v12 + 28) & 0x7F) != 0x19);
      }
      while (v12 != v13);
    }
  }
  else
  {
    v6 = (uint64_t *)v4;
    v7 = v5;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v21 = *v6;
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
        break;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v21);
      if (++v6 == v7)
        goto LABEL_5;
    }
    sub_22E4A06C4();
    sub_22E578F40(v19, v20);
  }
}

void sub_22E578F40(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  std::string *v5;
  size_t size;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  std::string v25;

  v3 = a1[1];
  if (a2)
  {
    sub_22EF6C204(*a1, a2, 0, &v25);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v25;
    else
      v5 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v25.__r_.__value_.__l.__size_;
    v7 = sub_22E5760BC(v3, v5, size, "");
    v8 = a1[2];
    v22 = a2[5];
    sub_22F1D3A38(&v22, (char *)__p);
    if (v24 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (v24 >= 0)
      v10 = v24 & 0x7F;
    else
      v10 = (size_t)__p[1];
    v11 = sub_22E5760BC(v3, v9, v10, "");
    v12 = *(_QWORD *)v8;
    v13 = *(_DWORD *)(*(_QWORD *)v8 + 16);
    if (v13 >= *(_DWORD *)(*(_QWORD *)v8 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(v12 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v13) = v11;
    ++*(_DWORD *)(v12 + 16);
    if (v24 < 0)
      operator delete(__p[0]);
    v14 = *(_QWORD *)a1[2];
    v15 = *(_DWORD *)(v14 + 16);
    if (v15 >= *(_DWORD *)(v14 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(v14 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v15) = v7;
    ++*(_DWORD *)(v14 + 16);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_QWORD *)(v3 + 240);
    v17 = *(_QWORD *)a1[2];
    v18 = *(_DWORD *)(v17 + 16);
    if (v18 >= *(_DWORD *)(v17 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(v17 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18) = v16;
    ++*(_DWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v3 + 240);
    v20 = *(_QWORD *)a1[2];
    v21 = *(_DWORD *)(v20 + 16);
    if (v21 >= *(_DWORD *)(v20 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(v20 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v21) = v19;
    ++*(_DWORD *)(v20 + 16);
  }
}

void sub_22E579148(uint64_t a1, int a2, uint64_t a3)
{
  const char *v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  const char *v8;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  const char *v12;
  uint64_t v13;
  __int16 v14;

  v4 = "._";
  if (a2 == 1)
    v4 = "$_";
  v11[0] = v4;
  v11[1] = 2;
  v12 = "OBJC_PROTOCOL_";
  v13 = 14;
  v14 = 1285;
  llvm::Twine::str((llvm::Twine *)v11);
  v5 = *(unsigned __int8 *)(a3 + 32);
  if (v5 == 1)
  {
    v11[0] = __p;
    v6 = 260;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a3 + 32))
  {
    v6 = 256;
LABEL_7:
    v14 = v6;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(a3 + 33) == 1)
  {
    v8 = *(const char **)a3;
  }
  else
  {
    LOBYTE(v5) = 2;
    v8 = (const char *)a3;
  }
  v11[0] = __p;
  v12 = v8;
  v13 = v7;
  LOBYTE(v14) = 4;
  HIBYTE(v14) = v5;
LABEL_12:
  llvm::Twine::str((llvm::Twine *)v11);
  if (v10 < 0)
    operator delete(__p[0]);
}

uint64_t sub_22E579234(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 32))
    return *(_QWORD *)(a1 + 24);
  v3 = *(const char **)(a1 + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = strlen(*(const char **)(a1 + 16));
  result = sub_22E633A04(v4, v5, v3, v6, 0, 0, 0);
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

void sub_22E5792AC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E579324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  llvm::GlobalValue *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  _QWORD v24[4];
  uint64_t v25[4];
  __int16 v26;

  v23[0] = a1;
  v23[1] = 0;
  v10 = *(unsigned int *)(a1 + 16);
  v24[2] = 0;
  v24[3] = 0;
  v23[2] = v10;
  v24[0] = 0;
  *(_DWORD *)((char *)v24 + 7) = 0;
  *(_BYTE *)(a1 + 176) = 1;
  if (a6)
  {
    v17 = a1 + 8;
    v18 = a1 + 24;
    v19 = 8 * a6;
    do
    {
      v20 = *a5;
      if (v10 >= *(_DWORD *)(a1 + 20))
      {
        v22 = v17;
        v21 = v18;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v21;
        v17 = v22;
        LODWORD(v10) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = v20;
      LODWORD(v10) = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v10;
      ++a5;
      v19 -= 8;
    }
    while (v19);
  }
  sub_22E670C54(v23, 0);
  v26 = 261;
  v25[0] = a3;
  v25[1] = a4;
  v11 = (llvm::GlobalValue *)sub_22F29F614(a1);
  llvm::GlobalObject::setSection();
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  v12 = *((_DWORD *)v11 + 8);
  v13 = v12 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v11 + 8) = v13;
  if ((v12 & 0xFu) - 7 < 2)
    goto LABEL_5;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
  {
    v13 = *((_DWORD *)v11 + 8);
LABEL_5:
    *((_DWORD *)v11 + 8) = v13 | 0x4000;
  }
  v14 = *(_QWORD *)(a2 + 8);
  v25[0] = (uint64_t)v11;
  return sub_22E62C508((uint64_t *)(v14 + 1416), v25);
}

uint64_t sub_22E5794C8(uint64_t a1, const char *a2, size_t a3, int a4)
{
  const char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t GlobalVariable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  void *__p[2];
  char v34;
  void **v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  __int16 v39;

  if (a4)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      v8 = "$_";
    else
      v8 = "._";
    v9 = "OBJC_WEAK_REF_CLASS_";
    v35 = (void **)v8;
    v36 = 2;
    v10 = 20;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76) == 1)
      v11 = "$_";
    else
      v11 = "._";
    v9 = "OBJC_REF_CLASS_";
    v35 = (void **)v11;
    v36 = 2;
    v10 = 15;
  }
  v37 = v9;
  v38 = v10;
  v39 = 1285;
  llvm::Twine::str((llvm::Twine *)&v35);
  v35 = __p;
  v37 = a2;
  v38 = a3;
  v39 = 1284;
  llvm::Twine::str((llvm::Twine *)&v35);
  if (v34 < 0)
    operator delete(__p[0]);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    v39 = 260;
    v35 = &v31;
    llvm::GlobalVariable::GlobalVariable();
    if (a4)
    {
      llvm::User::operator new((llvm::User *)0x58);
      sub_22E579A9C((uint64_t)__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76), a2, a3);
      v39 = 260;
      v35 = __p;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalVariable::setInitializer();
      if (v34 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(*(_QWORD *)(v14 + 216) + 76) == 1)
      {
        v15 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v14 + 144) + 15192), a2, a3);
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 1960) + 80);
        v17 = sub_22E3CD31C((uint64_t *)(v16 + 72), v16);
        if (v17)
          v18 = v17 + 40;
        else
          v18 = 0;
        v19 = sub_22EFCE144(v18, v15);
        if (v19)
        {
          while (1)
          {
            v20 = v19 & 0xFFFFFFFFFFFFFFF8;
            if ((v19 & 4) == 0 || !v20)
              break;
            v21 = *(_QWORD *)v20;
            if (*(_QWORD *)v20)
              v22 = (*(_DWORD *)(*(_QWORD *)v20 + 28) & 0x7F) == 22;
            else
              v22 = 0;
            if (v22)
              goto LABEL_38;
            v19 = *(_QWORD *)(v20 + 8);
            if (!v19)
              goto LABEL_31;
          }
          if ((*(_DWORD *)(v20 + 28) & 0x7F) != 0x16 || v20 == 0)
            v21 = 0;
          else
            v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
LABEL_31:
          v21 = 0;
        }
LABEL_38:
        v24 = *(_QWORD *)(v21 + 120);
        if (!v24)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 96) + 88), *(_QWORD *)(v21 + 96));
          v24 = *(_QWORD *)(v21 + 120);
        }
        if (v24 < 8)
          v25 = 0;
        else
          v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
        if (v25)
          v21 = v25;
        if (sub_22E49F808(v21))
        {
          v26 = 256;
        }
        else if ((*(_BYTE *)(v21 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v21);
          v28 = *((unsigned int *)v27 + 2);
          if ((_DWORD)v28)
          {
            v29 = 8 * v28;
            v30 = *v27;
            while (*(_WORD *)(*(_QWORD *)v30 + 32) != 155)
            {
              v26 = 0;
              v30 += 8;
              v29 -= 8;
              if (!v29)
                goto LABEL_49;
            }
          }
          else
          {
            v30 = *v27;
          }
          if (v30 == *v27 + 8 * v28)
            v26 = 0;
          else
            v26 = 512;
        }
        else
        {
          v26 = 0;
        }
LABEL_49:
        *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFFCFF | v26;
      }
    }
  }
  if (v32 < 0)
    operator delete(v31);
  return GlobalVariable;
}

llvm::GlobalValue *sub_22E579860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::GlobalValue *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  v10 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
  v11 = *(uint64_t **)(a1 + 16);
  v12 = *v11;
  v13 = v11[1];
  v26 = a2;
  v27 = a3;
  v28 = v12;
  v29 = v13;
  v30 = 1285;
  v14 = llvm::GlobalVariable::GlobalVariable();
  v15 = *(_DWORD *)(v14 + 32);
  v16 = v15 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(v14 + 32) = v16;
  if ((v15 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v10) & 1) != 0)
      goto LABEL_5;
    v16 = *((_DWORD *)v10 + 8);
  }
  *((_DWORD *)v10 + 8) = v16 | 0x4000;
LABEL_5:
  v17 = *(uint64_t **)(a1 + 16);
  v19 = *v17;
  v18 = v17[1];
  v26 = v19;
  v27 = v18;
  v28 = a4;
  v29 = a5;
  v30 = 1285;
  llvm::Twine::str((llvm::Twine *)&v26);
  llvm::GlobalObject::setSection();
  if (v25 < 0)
    operator delete(__p);
  v20 = *(uint64_t **)(a1 + 16);
  v22 = *v20;
  v21 = v20[1];
  v26 = a2;
  v27 = a3;
  v28 = v22;
  v29 = v21;
  v30 = 1285;
  llvm::Twine::str((llvm::Twine *)&v26);
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  if (v25 < 0)
    operator delete(__p);
  llvm::GlobalObject::setAlignment();
  return v10;
}

char *sub_22E579A24(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_22E579A9C(uint64_t a1, int a2, const char *a3, uint64_t a4)
{
  const char *v6;
  void *__p;
  char v8;
  _QWORD v9[2];
  const char *v10;
  uint64_t v11;
  __int16 v12;

  v6 = "._";
  if (a2 == 1)
    v6 = "$_";
  v9[0] = v6;
  v9[1] = 2;
  v10 = "OBJC_CLASS_";
  v11 = 11;
  v12 = 1285;
  llvm::Twine::str((llvm::Twine *)v9);
  v9[0] = &__p;
  v10 = a3;
  v11 = a4;
  v12 = 1284;
  llvm::Twine::str((llvm::Twine *)v9);
  if (v8 < 0)
    operator delete(__p);
}

_QWORD *sub_22E579B44(_QWORD *result, unint64_t a2, __int16 a3)
{
  _WORD **v5;
  _WORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _WORD *v14;

  v5 = (_WORD **)result;
  if (result[2] >= a2)
  {
    v9 = (_WORD *)*result;
    v8 = result + 1;
    v10 = result[1];
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = result[1];
    if (v11)
    {
      v12 = (_WORD *)*result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[1] = 0;
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = (unint64_t *)(v5 + 1);
  }
  *v8 = a2;
  return result;
}

uint64_t sub_22E579BF4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E579C54(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char *v11;
  unint64_t v12;
  char *v13;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v6 == a2)
    return sub_22F27606C(result, a3);
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    do
    {
      do
        v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v8 && ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v8 + 58) & 2) != 0));
      ++v7;
    }
    while (v8);
  }
  v9 = (a2 - v5) >> 3;
  if (v7 + v6 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)v4;
    v6 = *(unsigned int *)(v4 + 8);
  }
  v10 = (unint64_t *)(v5 + 8 * v9);
  v11 = (char *)(v5 + 8 * v6);
  v12 = (v11 - (char *)v10) >> 3;
  if (v12 >= v7)
  {
    v13 = &v11[-8 * v7];
    result = sub_22F246808(v4, v13, (char *)(v5 + 8 * v6));
    if (v13 != (char *)v10)
      result = (uint64_t)memmove(&v11[-(v13 - (char *)v10)], v10, v13 - (char *)v10);
    while (v3)
    {
      *v10 = v3;
      do
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) != 0));
      ++v10;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 8) = v6 + v7;
    if (v9 != v6)
    {
      result = (uint64_t)memcpy((void *)(v5 + 8 * (v6 + v7) - 8 * v12), v10, v11 - (char *)v10);
      do
      {
        *v10++ = v3;
        do
          v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) != 0));
        --v12;
      }
      while (v12);
    }
    for (; v3; v11 += 8)
    {
      *(_QWORD *)v11 = v3;
      do
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v3 && ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v3 + 58) & 2) != 0));
    }
  }
  return result;
}

uint64_t sub_22E579E24(uint64_t a1, int a2, llvm::Type *a3)
{
  uint64_t v4;
  void **v5;
  unsigned int v6;
  uint64_t v7;
  void **v9[3];
  _QWORD v10[4];
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[128];
  _QWORD v15[3];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 80), a3);
  v4 = llvm::ConstantArray::get();
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v14;
  v13 = 0x1000000000;
  memset(v15, 0, sizeof(v15));
  v10[2] = 0;
  v10[3] = 0;
  v9[0] = (void **)&v11;
  v9[1] = 0;
  v9[2] = 0;
  v10[0] = 0;
  *(_DWORD *)((char *)v10 + 7) = 0;
  v16 = 1;
  sub_22F247080((uint64_t *)v9, *(llvm::ConstantPointerNull **)(a1 + 136));
  sub_22F246F08((uint64_t *)v9);
  v5 = v9[0];
  v6 = *((_DWORD *)v9[0] + 4);
  if (v6 >= *((_DWORD *)v9[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *((_DWORD *)v5 + 4);
  }
  *((_QWORD *)v5[1] + v6) = v4;
  ++*((_DWORD *)v5 + 4);
  v7 = sub_22F2764EC((uint64_t *)v9);
  v9[0] = (void **)v15;
  sub_22E3CEB30(v9);
  if (v12 != v14)
    free(v12);
  return v7;
}

char *sub_22E579F98(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  void **v17;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_22E3B3F8C();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v3];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = &v9[48 * v8];
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v12 = v10 + 48;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v14 - 3);
      *((_QWORD *)v10 - 4) = *(v14 - 4);
      *((_OWORD *)v10 - 3) = v15;
      *(v14 - 5) = 0;
      *(v14 - 4) = 0;
      *(v14 - 6) = 0;
      v16 = *(_OWORD *)(v14 - 3);
      *((_QWORD *)v10 - 1) = *(v14 - 1);
      *(_OWORD *)(v10 - 24) = v16;
      v10 -= 48;
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      *(v14 - 3) = 0;
      v14 -= 6;
    }
    while (v14 != v13);
    v14 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v17 != v14)
    {
      if (*((char *)v17 - 1) < 0)
        operator delete(*(v17 - 3));
      if (*((char *)v17 - 25) < 0)
        operator delete(*(v17 - 6));
      v17 -= 6;
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22E57A130(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  std::string __p;

  v3 = (_QWORD *)a1[2];
  if (a2)
  {
    sub_22EF6C204(*a1, a2, 0, &__p);
    v5 = a1[1];
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD, std::string *))(*v3 + 480))(v3, a2[5], &__p);
    v7 = *(_QWORD *)v5;
    v8 = *(_DWORD *)(*(_QWORD *)v5 + 16);
    if (v8 >= *(_DWORD *)(*(_QWORD *)v5 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v8) = v6;
    ++*(_DWORD *)(v7 + 16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = v3[30];
    v10 = *(_QWORD *)a1[1];
    v11 = *(_DWORD *)(v10 + 16);
    if (v11 >= *(_DWORD *)(v10 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(v10 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v11) = v9;
    ++*(_DWORD *)(v10 + 16);
  }
}

uint64_t sub_22E57A234(uint64_t a1, void *__src, size_t __len)
{
  void **p_dst;
  uint64_t ElementPtr;
  size_t v7;
  size_t v8;
  void **v9;
  size_t v10;
  llvm::GlobalValue *v11;
  int v12;
  unsigned int v13;
  void *__p;
  char v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  if (!__len)
    return *(_QWORD *)(a1 + 240);
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v18 = __len;
    v19 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v19) = __len;
    p_dst = (void **)&__dst;
  }
  memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)&__dst;
  if (v19 < 0)
    v9 = __dst;
  v10 = HIBYTE(v19) & 0x7F;
  if (v19 < 0)
    v10 = v18;
  for (; v10; --v10)
  {
    if (*(_BYTE *)v9 == 64)
      *(_BYTE *)v9 = 1;
    v9 = (void **)((char *)v9 + 1);
  }
  std::operator+<char>();
  if (!llvm::Module::getGlobalVariable())
  {
    llvm::ConstantDataArray::getString();
    v11 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v12 = *((_DWORD *)v11 + 8);
    v13 = v12 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v11 + 8) = v13;
    if ((v12 & 0xFu) - 7 < 2)
    {
LABEL_21:
      *((_DWORD *)v11 + 8) = v13 | 0x4000;
      goto LABEL_22;
    }
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
    {
      v13 = *((_DWORD *)v11 + 8);
      goto LABEL_21;
    }
  }
LABEL_22:
  ElementPtr = llvm::ConstantExpr::getGetElementPtr();
  if (v16 < 0)
    operator delete(__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  return ElementPtr;
}

uint64_t sub_22E57A480(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22E57A50C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return MEMORY[0x2348A0E9C](a1, 0x10F1C40AFAA3A5ELL);
}

uint64_t sub_22E57A5AC(uint64_t a1, uint64_t a2, _QWORD **a3, _QWORD *a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a2 + 272);
  v8 = *a3;
  v9 = *(_QWORD *)(a1 + 96);
  if (*v8 != v9)
  {
    v16 = 257;
    v8 = (_QWORD *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v8, v9, (uint64_t)v15);
  }
  v17[0] = v8;
  v10 = *(_QWORD *)(a1 + 40);
  if (*a4 != v10)
  {
    v16 = 257;
    a4 = (_QWORD *)sub_22E3C1740(v7, 49, (uint64_t)a4, v10, (uint64_t)v15);
  }
  v17[1] = a4;
  v11 = sub_22E579234(a1 + 1176);
  v16 = 257;
  v13 = sub_22F24F1F4((_QWORD *)a2, v11, v12, (uint64_t)v17, 2, (uint64_t)v15);
  *(_WORD *)(v13 + 18) = *(_WORD *)(v13 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Instruction::setMetadata();
  return v13;
}

llvm::Value *sub_22E57A6E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v7 = (_QWORD *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v7 = *(_QWORD **)a3;
  v8 = *(_QWORD *)(a1 + 32);
  if (*v7 != v8)
  {
    v13 = 257;
    v7 = (_QWORD *)sub_22E3C1740(a2 + 34, 49, (uint64_t)v7, v8, (uint64_t)v12);
  }
  v14[0] = v7;
  v14[1] = a4;
  v9 = sub_22E579234(a1 + 1216);
  v13 = 257;
  return sub_22F24EEDC((uint64_t)a2, v9, v10, (uint64_t)v14, 2, (uint64_t)v12);
}

uint64_t sub_22E57A7C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22E57A854(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24FA64890;
  v6 = (void **)(a1 + 696);
  sub_22E576240(&v6);
  sub_22F2756F4(a1 + 408);
  sub_22F275768(a1 + 376);
  sub_22F275768(a1 + 344);
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  return MEMORY[0x2348A0E9C](a1, 0x10F1C4015AE3C90);
}

llvm::Value *sub_22E57A8F4(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  uint64_t GlobalVariable;
  void *v6;
  char v7;

  if (a4)
    return sub_22E575BCC(a1, a2, a3, 1);
  sub_22E5778B4();
  std::operator+<char>();
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    llvm::GlobalVariable::GlobalVariable();
  }
  if (v7 < 0)
    operator delete(v6);
  return (llvm::Value *)GlobalVariable;
}

uint64_t sub_22E57A9F8(uint64_t a1, uint64_t a2, _QWORD **a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  _BYTE v20[32];
  __int16 v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t *)(a2 + 272);
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 96);
  if (*v11 != v12)
  {
    v21 = 257;
    v11 = (_QWORD *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v11, v12, (uint64_t)v20);
  }
  v22[0] = v11;
  v13 = *(_QWORD *)(a1 + 40);
  if (*a4 != v13)
  {
    v21 = 257;
    a4 = (_QWORD *)sub_22E3C1740(v10, 49, (uint64_t)a4, v13, (uint64_t)v20);
  }
  v22[1] = a4;
  v14 = *(unsigned __int8 *)(*(_QWORD *)a6 + 72);
  if (v14 == 8)
  {
    if ((*(_WORD *)(*(_QWORD *)a6 + 73) & 2) != 0)
      goto LABEL_7;
LABEL_9:
    v15 = a1 + 1176;
    goto LABEL_10;
  }
  if (v14 != 2)
    goto LABEL_9;
LABEL_7:
  v15 = a1 + 1216;
LABEL_10:
  v16 = sub_22E579234(v15);
  v21 = 257;
  v18 = sub_22F24F1F4((_QWORD *)a2, v16, v17, (uint64_t)v22, 2, (uint64_t)v20);
  *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Instruction::setMetadata();
  return v18;
}

llvm::Value *sub_22E57AB68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v9 = (_QWORD *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v9 = *(_QWORD **)a3;
  v10 = *(_QWORD *)(a1 + 32);
  if (*v9 != v10)
  {
    v17 = 257;
    v9 = (_QWORD *)sub_22E3C1740(a2 + 34, 49, (uint64_t)v9, v10, (uint64_t)v16);
  }
  v18[0] = v9;
  v18[1] = a4;
  v11 = *(unsigned __int8 *)(*(_QWORD *)a5 + 72);
  if (v11 == 8)
  {
    if ((*(_WORD *)(*(_QWORD *)a5 + 73) & 2) != 0)
      goto LABEL_8;
LABEL_10:
    v12 = a1 + 1256;
    goto LABEL_11;
  }
  if (v11 != 2)
    goto LABEL_10;
LABEL_8:
  v12 = a1 + 1296;
LABEL_11:
  v13 = sub_22E579234(v12);
  v17 = 257;
  return sub_22F24EEDC((uint64_t)a2, v13, v14, (uint64_t)v18, 2, (uint64_t)v16);
}

uint64_t sub_22E57AC8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)result = off_24FA65130;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(result + 32) = result + 48;
  *(_QWORD *)(result + 40) = 0x1000000000;
  *(_OWORD *)(result + 484) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 456) = 0u;
  *(_DWORD *)(result + 448) = 0;
  *(_OWORD *)(result + 432) = 0u;
  *(_OWORD *)(result + 532) = 0u;
  *(_OWORD *)(result + 520) = 0u;
  *(_OWORD *)(result + 504) = 0u;
  *(_DWORD *)(result + 548) = 16;
  *(_DWORD *)(result + 576) = 0;
  *(_OWORD *)(result + 560) = 0u;
  *(_QWORD *)(result + 584) = 1;
  do
  {
    v3 = result + v2;
    *(_QWORD *)(v3 + 600) = 0;
    *(_QWORD *)(v3 + 592) = -4096;
    v2 += 16;
  }
  while (v2 != 256);
  *(_QWORD *)(result + 848) = result + 864;
  *(_QWORD *)(result + 856) = 0x1000000000;
  *(_OWORD *)(result + 1120) = 0u;
  *(_QWORD *)(result + 1136) = 0x1000000000;
  *(_OWORD *)(result + 1152) = 0u;
  *(_DWORD *)(result + 1168) = 0;
  *(_DWORD *)(result + 1192) = 0;
  *(_OWORD *)(result + 1176) = 0u;
  *(_OWORD *)(result + 1200) = 0u;
  *(_DWORD *)(result + 1216) = 0;
  *(_DWORD *)(result + 1240) = 0;
  *(_OWORD *)(result + 1224) = 0u;
  *(_OWORD *)(result + 1248) = 0u;
  *(_DWORD *)(result + 1264) = 0;
  *(_DWORD *)(result + 1288) = 0;
  *(_OWORD *)(result + 1272) = 0u;
  *(_OWORD *)(result + 1296) = 0u;
  *(_DWORD *)(result + 1312) = 0;
  *(_DWORD *)(result + 1336) = 0;
  *(_OWORD *)(result + 1320) = 0u;
  *(_QWORD *)(result + 1344) = result + 1360;
  *(_QWORD *)(result + 1352) = 0x1000000000;
  *(_QWORD *)(result + 1488) = result + 1504;
  *(_QWORD *)(result + 1496) = 0x1000000000;
  *(_QWORD *)(result + 1632) = result + 1648;
  *(_QWORD *)(result + 1640) = 0x1000000000;
  *(_QWORD *)(result + 1776) = result + 1792;
  *(_QWORD *)(result + 1784) = 0x1000000000;
  *(_QWORD *)(result + 1920) = result + 1936;
  *(_QWORD *)(result + 1928) = 0x1000000000;
  *(_QWORD *)(result + 2064) = result + 2080;
  *(_QWORD *)(result + 2072) = 0x1000000000;
  *(_QWORD *)(result + 2208) = 6;
  *(_OWORD *)(result + 2216) = 0u;
  *(_QWORD *)(result + 2232) = 6;
  *(_OWORD *)(result + 2240) = 0u;
  *(_QWORD *)(result + 2256) = 6;
  *(_OWORD *)(result + 2264) = 0u;
  *(_QWORD *)(result + 2280) = 6;
  *(_OWORD *)(result + 2288) = 0u;
  *(_QWORD *)(result + 2304) = 6;
  *(_OWORD *)(result + 2312) = 0u;
  *(_QWORD *)(result + 2328) = 6;
  *(_DWORD *)(result + 2416) = 0;
  *(_OWORD *)(result + 2400) = 0u;
  *(_OWORD *)(result + 2384) = 0u;
  *(_OWORD *)(result + 2368) = 0u;
  *(_OWORD *)(result + 2352) = 0u;
  *(_OWORD *)(result + 2336) = 0u;
  *(_DWORD *)(result + 2420) = 16;
  *(_DWORD *)(result + 2464) = 0;
  *(_OWORD *)(result + 2448) = 0u;
  *(_OWORD *)(result + 2432) = 0u;
  *(_OWORD *)(result + 2472) = 0u;
  return result;
}

void sub_22E57AE44(uint64_t a1)
{
  llvm::LLVMContext *v2;
  void *__p;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    __p = operator new(0x20uLL);
    v4 = xmmword_22F455390;
    strcpy((char *)__p, "__OBJC,__image_info,regular");
  }
  else
  {
    sub_22E582BA0((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 76));
  }
  llvm::Module::addModuleFlag();
  llvm::Module::addModuleFlag();
  llvm::MDString::get();
  llvm::Module::addModuleFlag();
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 16), v2);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 246) & 6) != 0)
  {
    llvm::ConstantInt::get();
    llvm::Module::addModuleFlag();
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 244) & 0x60000) == 0x20000)
    {
      llvm::Module::addModuleFlag();
      v5 = llvm::MDString::get();
      llvm::ConstantInt::get();
      v6 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::Module::addModuleFlag();
    }
  }
  else
  {
    llvm::ConstantInt::get();
    llvm::Module::addModuleFlag();
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 72) == 20)
    llvm::Module::addModuleFlag();
  llvm::Module::addModuleFlag();
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 20) & 0x800000000) != 0)
  {
    llvm::Module::addModuleFlag();
  }
  else
  {
    llvm::ConstantInt::get();
    llvm::Module::addModuleFlag();
  }
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
}

void sub_22E57B15C(uint64_t a1)
{
  sub_22E582D4C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E57B180(uint64_t a1)
{
  llvm::DataLayout *DataLayout;
  llvm::Type *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  unint64_t ABITypeAlignment;
  uint64_t v9;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t BitCast;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  llvm::GlobalValue *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  llvm::GlobalValue *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  const void *v47;
  char v48;
  const void *v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  size_t v55;
  _BYTE *v56;
  uint64_t *i;
  uint64_t *v58;
  uint64_t v59;
  _OWORD *v60;
  void ***v61;
  void **v62;
  _QWORD *v63;
  unsigned int *v64;
  const void *v65;
  size_t v66;
  unsigned int v67;
  void **v68;
  void **v69;
  _BYTE *v70;
  unsigned int *v71;
  const void *v72;
  size_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t *j;
  uint64_t v77;
  void *v78;
  void ***v79;
  void **v80;
  _QWORD *v81;
  unsigned int *v82;
  const void *v83;
  size_t v84;
  unsigned int v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void ***v91;
  void **v92;
  _QWORD *v93;
  const void *v94;
  unint64_t v95;
  void **v96;
  void **v97;
  _BYTE *v98;
  const void *v99;
  unint64_t v100;
  size_t v101;
  uint64_t v102;
  const void *v103;
  __int128 *p_dst;
  uint64_t v105;
  uint64_t v106;
  std::string *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110[7];
  const char *v111;
  __int16 v112;
  uint64_t v113[3];
  _QWORD v114[4];
  __int128 __dst;
  unint64_t v116;
  void *v117[4];
  void *v118;
  __int128 v119;
  _WORD v120[64];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  void **v125;
  void *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  char v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v3 = *(llvm::Type **)(a1 + 2680);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v3);
  v5 = (unint64_t)(v4 + 7) >> 3;
  v7 = v6 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v3);
  v118 = (void *)((ABITypeAlignment + v5 - 1) / ABITypeAlignment * ABITypeAlignment);
  *(_QWORD *)&v119 = v7;
  llvm::TypeSize::operator unsigned long long();
  v125 = *(void ***)(a1 + 8);
  v126 = &v128;
  v127 = 0x1000000000;
  memset(v132, 0, sizeof(v132));
  v9 = *(_QWORD *)(a1 + 2680);
  v110[0] = (uint64_t)&v125;
  memset(&v110[1], 0, 27);
  v133 = 1;
  v110[5] = 0;
  v110[6] = v9;
  if (v9)
    BYTE2(v110[4]) = (*(_DWORD *)(v9 + 8) & 0x200) != 0;
  sub_22F246F08(v110);
  sub_22F246F08(v110);
  v11 = sub_22E5832E4(a1, "", 0);
  v12 = v110[0];
  v13 = *(_DWORD *)(v110[0] + 16);
  if (v13 >= *(_DWORD *)(v110[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v12 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 16);
  v14 = *(unsigned int *)(a1 + 1352);
  v15 = *(unsigned int *)(a1 + 1784);
  if (v14 | v15)
  {
    v118 = *(void **)(a1 + 8);
    *(_QWORD *)&v119 = v120;
    *((_QWORD *)&v119 + 1) = 0x1000000000;
    v122 = 0;
    v123 = 0;
    v121 = 0;
    v117[2] = 0;
    v117[3] = 0;
    *(_QWORD *)&__dst = &v118;
    *((_QWORD *)&__dst + 1) = 0;
    v116 = 0;
    memset(v117, 0, 11);
    v124 = 1;
    sub_22F246F08((uint64_t *)&__dst);
    sub_22F247080((uint64_t *)&__dst, *(llvm::ConstantPointerNull **)(a1 + 2568));
    sub_22F246F08((uint64_t *)&__dst);
    sub_22F246F08((uint64_t *)&__dst);
    v34 = *(_QWORD *)(a1 + 2528);
    v113[0] = __dst;
    v113[1] = (uint64_t)&__dst;
    v113[2] = *(unsigned int *)(__dst + 16);
    v114[0] = 0;
    *(_DWORD *)((char *)v114 + 7) = 0;
    BYTE1(v117[1]) = 1;
    v114[2] = 0;
    v114[3] = v34;
    if ((_DWORD)v14)
    {
      v35 = 0;
      v36 = 8 * v14;
      do
      {
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 1488) + v35);
        v38 = sub_22F3B4E88(v37);
        if (v38)
        {
          v39 = v38;
          if (sub_22EFCA55C(v37))
          {
            if ((sub_22EFCA55C(v39) & 1) == 0)
            {
              v40 = *(llvm::GlobalValue **)(*(_QWORD *)(a1 + 1344) + v35);
              v41 = *((_DWORD *)v40 + 8);
              *((_DWORD *)v40 + 8) = v41 & 0xFFFFFFF0;
              if ((v41 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v40) & 1) == 0)
                *((_DWORD *)v40 + 8) |= 0x4000u;
            }
          }
        }
        sub_22F275848(v113);
        v35 += 8;
      }
      while (v36 != v35);
    }
    if ((_DWORD)v15)
    {
      v42 = 0;
      v43 = 8 * v15;
      do
      {
        sub_22F275848(v113);
        v42 += 8;
      }
      while (v43 != v42);
    }
    sub_22F2758B8((uint64_t)v113, (uint64_t *)&__dst);
    v111 = "OBJC_SYMBOLS";
    v112 = 259;
    sub_22E58334C(a1, (uint64_t)&v111, (uint64_t *)&__dst, (uint64_t)"__OBJC,__symbols,regular,no_dead_strip", 38, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
    BitCast = llvm::ConstantExpr::getBitCast();
    *(_QWORD *)&__dst = &v121;
    sub_22E3CEB30((void ***)&__dst);
    if ((_WORD *)v119 != v120)
      free((void *)v119);
  }
  else
  {
    BitCast = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2672), v10);
  }
  v17 = v110[0];
  v18 = *(_DWORD *)(v110[0] + 16);
  if (v18 >= *(_DWORD *)(v110[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18) = BitCast;
  ++*(_DWORD *)(v17 + 16);
  v118 = "OBJC_MODULES";
  v120[4] = 259;
  sub_22E58334C(a1, (uint64_t)&v118, v110, (uint64_t)"__OBJC,__module_info,regular,no_dead_strip", 42, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
  *(_QWORD *)&__dst = v132;
  sub_22E3CEB30((void ***)&__dst);
  if (v126 != &v128)
    free(v126);
  v19 = *(_QWORD *)(a1 + 1296);
  v20 = *(unsigned int *)(a1 + 1312);
  v21 = (_QWORD *)(v19 + 16 * v20);
  if (*(_DWORD *)(a1 + 1304))
  {
    if ((_DWORD)v20)
    {
      v22 = 16 * v20;
      v23 = *(_QWORD **)(a1 + 1296);
      while ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v23 += 2;
        v22 -= 16;
        if (!v22)
          goto LABEL_16;
      }
    }
    else
    {
      v23 = *(_QWORD **)(a1 + 1296);
    }
  }
  else
  {
LABEL_16:
    v23 = (_QWORD *)(v19 + 16 * v20);
  }
  v24 = (_QWORD *)(v19 + 16 * v20);
  while (v23 != v24)
  {
    v25 = (llvm::GlobalValue *)v23[1];
    if (llvm::GlobalValue::isDeclaration(v25))
    {
      v118 = *(void **)(a1 + 8);
      *(_QWORD *)&v119 = v120;
      *((_QWORD *)&v119 + 1) = 0x1000000000;
      v122 = 0;
      v123 = 0;
      v121 = 0;
      v27 = *(_QWORD *)(a1 + 2688);
      v125 = &v118;
      v129 = 0;
      v127 = 0;
      *(_QWORD *)&v128 = 0;
      v126 = 0;
      *(_DWORD *)((char *)&v128 + 7) = 0;
      v124 = 1;
      v130 = v27;
      if (v27)
        BYTE10(v128) = (*(_DWORD *)(v27 + 8) & 0x200) != 0;
      sub_22F247080((uint64_t *)&v125, *(llvm::ConstantPointerNull **)(a1 + 2712));
      v28 = sub_22E5832E4(a1, (const void *)(*(_QWORD *)(*v23 + 16) + 16), **(unsigned int **)(*v23 + 16));
      v29 = v125;
      v30 = *((unsigned int *)v125 + 4);
      if (v30 >= *((unsigned int *)v125 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = *((unsigned int *)v29 + 4);
      }
      *((_QWORD *)v29[1] + v30) = v28;
      ++*((_DWORD *)v29 + 4);
      sub_22F247080((uint64_t *)&v125, *(llvm::ConstantPointerNull **)(a1 + 2752));
      sub_22F247080((uint64_t *)&v125, *(llvm::ConstantPointerNull **)(a1 + 2736));
      sub_22F247080((uint64_t *)&v125, *(llvm::ConstantPointerNull **)(a1 + 2736));
      v31 = v125;
      sub_22E670C54((uint64_t *)&v125, v130);
      sub_22F29F5C8((uint64_t)v31);
      sub_22E6242E0(*(uint64_t **)(a1 + 8), (uint64_t)v25);
      v125 = (void **)&v121;
      sub_22E3CEB30(&v125);
      if ((_WORD *)v119 != v120)
        free((void *)v119);
    }
    v26 = v23 + 2;
    v23 = v21;
    if (v26 != v21)
    {
      v23 = v26;
      while ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v23 += 2;
        if (v23 == v21)
        {
          v23 = v21;
          break;
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 456) != *(_QWORD *)(a1 + 464) || *(_QWORD *)(a1 + 504) != *(_QWORD *)(a1 + 512))
  {
    v32 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(*(_QWORD *)(v32 + 216) + 76) == 5)
    {
      v118 = v120;
      v119 = xmmword_22F44E320;
      v44 = *(_QWORD *)(v32 + 200);
      v47 = *(const void **)(v44 + 88);
      v45 = v44 + 88;
      v46 = v47;
      v48 = *(_BYTE *)(v45 + 23);
      if (v48 >= 0)
        v49 = (const void *)v45;
      else
        v49 = v46;
      v50 = *(_QWORD *)(v45 + 8);
      if (v48 >= 0)
        v51 = v48 & 0x7F;
      else
        v51 = v50;
      if (v51 >= 0x101)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v54 = v118;
        v52 = v119;
      }
      else
      {
        v52 = 0;
        v53 = 0;
        v54 = v120;
        if (!v51)
        {
LABEL_60:
          v55 = v53 + v51;
          *(_QWORD *)&v119 = v53 + v51;
          if (v53 + v51)
          {
            v56 = v118;
            if (*((char *)v118 + v55 - 1) != 10)
            {
              if (v55 + 1 > *((_QWORD *)&v119 + 1))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v56 = v118;
                v55 = v119;
              }
              v56[v55] = 10;
              *(_QWORD *)&v119 = v119 + 1;
            }
          }
          sub_22F242C48((uint64_t)&v125, (uint64_t)&v118);
          v58 = *(uint64_t **)(a1 + 504);
          for (i = *(uint64_t **)(a1 + 512); v58 != i; ++v58)
          {
            v59 = *v58;
            v60 = (_OWORD *)*((_QWORD *)&v128 + 1);
            if ((_QWORD)v128 - *((_QWORD *)&v128 + 1) > 0x11uLL)
            {
              *(_WORD *)(*((_QWORD *)&v128 + 1) + 16) = 24421;
              *v60 = *(_OWORD *)"\t.objc_class_name_";
              v62 = (void **)(*((_QWORD *)&v128 + 1) + 18);
              *((_QWORD *)&v128 + 1) += 18;
              v61 = &v125;
              v63 = (_QWORD *)&v128 + 1;
            }
            else
            {
              v61 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)&v125, "\t.objc_class_name_");
              v63 = v61 + 4;
              v62 = v61[4];
            }
            v64 = *(unsigned int **)(v59 + 16);
            v67 = *v64;
            v65 = v64 + 4;
            v66 = v67;
            if (v67 <= (unint64_t)((char *)v61[3] - (char *)v62))
            {
              if (v66)
              {
                memcpy(v62, v65, v66);
                *v63 += v66;
              }
            }
            else
            {
              v61 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v61, (const char *)v65);
            }
            v68 = v61[4];
            if ((unint64_t)((char *)v61[3] - (char *)v68) > 2)
            {
              *((_BYTE *)v68 + 2) = 10;
              *(_WORD *)v68 = 12349;
              v69 = (void **)((char *)v61[4] + 3);
              v61[4] = v69;
            }
            else
            {
              v61 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v61, "=0\n");
              v69 = v61[4];
            }
            if ((unint64_t)((char *)v61[3] - (char *)v69) > 0x18)
            {
              qmemcpy(v69, "\t.globl .objc_class_name_", 25);
              v70 = (char *)v61[4] + 25;
              v61[4] = (void **)v70;
            }
            else
            {
              v61 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v61, "\t.globl .objc_class_name_");
              v70 = v61[4];
            }
            v71 = *(unsigned int **)(v59 + 16);
            v74 = *v71;
            v72 = v71 + 4;
            v73 = v74;
            if (v74 <= (unint64_t)((char *)v61[3] - v70))
            {
              if (v73)
              {
                memcpy(v70, v72, v73);
                v70 = (char *)v61[4] + v73;
                v61[4] = (void **)v70;
              }
            }
            else
            {
              v61 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v61, (const char *)v72);
              v70 = v61[4];
            }
            if (v61[3] == (void **)v70)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v61, "\n");
            }
            else
            {
              *v70 = 10;
              v61[4] = (void **)((char *)v61[4] + 1);
            }
          }
          v75 = *(uint64_t **)(a1 + 456);
          for (j = *(uint64_t **)(a1 + 464); v75 != j; ++v75)
          {
            v77 = *v75;
            v78 = (void *)*((_QWORD *)&v128 + 1);
            if ((_QWORD)v128 - *((_QWORD *)&v128 + 1) > 0x21uLL)
            {
              *(_WORD *)(*((_QWORD *)&v128 + 1) + 32) = 24421;
              qmemcpy(v78, "\t.lazy_reference .objc_class_nam", 32);
              v80 = (void **)(*((_QWORD *)&v128 + 1) + 34);
              *((_QWORD *)&v128 + 1) += 34;
              v79 = &v125;
              v81 = (_QWORD *)&v128 + 1;
            }
            else
            {
              v79 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)&v125, "\t.lazy_reference .objc_class_name_");
              v81 = v79 + 4;
              v80 = v79[4];
            }
            v82 = *(unsigned int **)(v77 + 16);
            v85 = *v82;
            v83 = v82 + 4;
            v84 = v85;
            if (v85 <= (unint64_t)((char *)v79[3] - (char *)v80))
            {
              if (v84)
              {
                memcpy(v80, v83, v84);
                *v81 += v84;
              }
            }
            else
            {
              v79 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v79, (const char *)v83);
            }
            v86 = v79[4];
            if (v79[3] == (void **)v86)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v79, "\n");
            }
            else
            {
              *v86 = 10;
              v79[4] = (void **)((char *)v79[4] + 1);
            }
          }
          v87 = *(unsigned int *)(a1 + 856);
          if ((_DWORD)v87)
          {
            v88 = *(_QWORD *)(a1 + 848);
            v89 = v88 + 16 * v87;
            do
            {
              v90 = *((_QWORD *)&v128 + 1);
              if ((_QWORD)v128 - *((_QWORD *)&v128 + 1) > 0x14uLL)
              {
                **((_OWORD **)&v128 + 1) = *(_OWORD *)"\t.objc_category_name_";
                *(_QWORD *)(v90 + 13) = *(_QWORD *)"ry_name_";
                v92 = (void **)(*((_QWORD *)&v128 + 1) + 21);
                *((_QWORD *)&v128 + 1) += 21;
                v91 = &v125;
                v93 = (_QWORD *)&v128 + 1;
              }
              else
              {
                v91 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)&v125, "\t.objc_category_name_");
                v93 = v91 + 4;
                v92 = v91[4];
              }
              v94 = *(const void **)v88;
              v95 = *(unsigned int *)(v88 + 8);
              if ((char *)v91[3] - (char *)v92 >= v95)
              {
                if ((_DWORD)v95)
                {
                  memcpy(v92, v94, *(unsigned int *)(v88 + 8));
                  *v93 += v95;
                }
              }
              else
              {
                v91 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v91, (const char *)v94);
              }
              v96 = v91[4];
              if ((unint64_t)((char *)v91[3] - (char *)v96) > 2)
              {
                *((_BYTE *)v96 + 2) = 10;
                *(_WORD *)v96 = 12349;
                v97 = (void **)((char *)v91[4] + 3);
                v91[4] = v97;
              }
              else
              {
                v91 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v91, "=0\n");
                v97 = v91[4];
              }
              if ((unint64_t)((char *)v91[3] - (char *)v97) > 0x1B)
              {
                qmemcpy(v97, "\t.globl .objc_category_name_", 28);
                v98 = (char *)v91[4] + 28;
                v91[4] = (void **)v98;
              }
              else
              {
                v91 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v91, "\t.globl .objc_category_name_");
                v98 = v91[4];
              }
              v99 = *(const void **)v88;
              v100 = *(unsigned int *)(v88 + 8);
              if ((char *)v91[3] - v98 >= v100)
              {
                if ((_DWORD)v100)
                {
                  memcpy(v98, v99, *(unsigned int *)(v88 + 8));
                  v98 = (char *)v91[4] + v100;
                  v91[4] = (void **)v98;
                }
              }
              else
              {
                v91 = (void ***)llvm::raw_ostream::write((llvm::raw_ostream *)v91, (const char *)v99);
                v98 = v91[4];
              }
              if (v91[3] == (void **)v98)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v91, "\n");
              }
              else
              {
                *v98 = 10;
                v91[4] = (void **)((char *)v91[4] + 1);
              }
              v88 += 16;
            }
            while (v88 != v89);
          }
          v101 = *(_QWORD *)(v131 + 8);
          if (v101 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v102 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
          v103 = *(const void **)v131;
          if (v101 >= 0x17)
          {
            v105 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v101 | 7) != 0x17)
              v105 = v101 | 7;
            v106 = v105 + 1;
            p_dst = (__int128 *)operator new(v105 + 1);
            *((_QWORD *)&__dst + 1) = v101;
            v116 = v106 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v116) = *(_QWORD *)(v131 + 8);
            p_dst = &__dst;
            if (!v101)
            {
LABEL_133:
              *((_BYTE *)p_dst + v101) = 0;
              v107 = (std::string *)(v102 + 88);
              if (*(char *)(v102 + 111) < 0)
                operator delete(v107->__r_.__value_.__l.__data_);
              *(_OWORD *)&v107->__r_.__value_.__l.__data_ = __dst;
              *(_QWORD *)(v102 + 104) = v116;
              if (*(char *)(v102 + 111) < 0)
              {
                v108 = *(_QWORD *)(v102 + 96);
                if (v108)
                {
                  v109 = (char *)v107->__r_.__value_.__r.__words[0];
LABEL_140:
                  if (v109[v108 - 1] != 10)
                    std::string::push_back(v107, 10);
                }
              }
              else
              {
                v108 = *(unsigned __int8 *)(v102 + 111);
                if (*(_BYTE *)(v102 + 111))
                {
                  v109 = (char *)(v102 + 88);
                  goto LABEL_140;
                }
              }
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v125);
              if (v118 != v120)
                free(v118);
              return 0;
            }
          }
          memmove(p_dst, v103, v101);
          goto LABEL_133;
        }
      }
      memcpy((char *)v54 + v52, v49, v51);
      v53 = v119;
      goto LABEL_60;
    }
  }
  return 0;
}

unint64_t sub_22E57BEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = sub_22E583714(a1, a2);
  v6 = result & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v6 = 0;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (result <= 7)
    v7 = 0;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  v8 = 1 << (v5 & 7 | (8 * (result & 7)));
  if (result < 8)
    v8 = 0;
  *(_QWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_22E57BF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E583694(a1, a2, *(_QWORD *)(a3 + 40));
}

uint64_t sub_22E57BF10(uint64_t a1, llvm::Type *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type *v11;
  uint64_t v12;

  v4 = (uint64_t *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF0);
  if ((v5 && *(_BYTE *)(v5 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v5 = sub_22F10CF48(v5)) != 0)
    && sub_22E5761BC(v5)
    || ((v6 = *v4) != 0 && *(_BYTE *)(v6 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v6 = sub_22F10CF48(v6)) != 0)
    && sub_22E491464(v6))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = sub_22E583A80(*(_QWORD *)(v7 + 144));
  }
  else
  {
    v9 = *v4;
    if (((!*v4 || *(_BYTE *)(v9 + 16) != 32)
       && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
        || (v9 = sub_22F10CF48(v9)) == 0)
       || !sub_22E509ED0(v9))
      && (((v10 = *v4) == 0 || *(_BYTE *)(v10 + 16) != 32)
       && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
        || (v10 = sub_22F10CF48(v10)) == 0)
       || !sub_22E509F54(v10)))
    {
      v12 = *(_QWORD *)(a1 + 8);
      v11 = a2;
      return sub_22F29C578(v12, v11, 1);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v8 = sub_22E583AD4(*(_QWORD *)(v7 + 144));
  }
  v11 = (llvm::Type *)v8;
  v12 = v7;
  return sub_22F29C578(v12, v11, 1);
}

unint64_t sub_22E57C064(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void **v17[7];
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[128];
  _QWORD v22[3];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 152) + 140) & 0x20000000000) == 0)
    return sub_22E63559C(v3, a2);
  v5 = ((*a2 >> 21) & 7u) * a2[4];
  v18 = &a2[a2[1] + 5];
  v19 = (void *)v5;
  v20 = 0;
  v6 = sub_22F2775A8((llvm::StringMapImpl *)(a1 + 300), v18, v5, &v20);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 8);
  if (v8)
  {
    if ((*(_WORD *)(v8 + 34) & 0x3F) != 0)
      return v8 & 0xFFFFFFFFFFFFFFF8 | ((__clz(1 << ((*(_WORD *)(v8 + 34) & 0x3Fu) - 1)) ^ 0x3F) >> 3);
  }
  else
  {
    v9 = (llvm::Value *)(*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    v10 = a1[294];
    if (!v10)
    {
      v11 = (_DWORD *)llvm::PointerType::get();
      v12 = a1[1];
      v13 = *(void **)(v12 + 96);
      v18 = v11;
      v19 = v13;
      v20 = *(_QWORD *)(v12 + 72);
      v10 = llvm::StructType::create();
      a1[294] = v10;
    }
    v14 = (_QWORD *)a1[1];
    v18 = v14;
    v19 = v21;
    v20 = 0x1000000000;
    memset(v22, 0, sizeof(v22));
    v17[0] = (void **)&v18;
    memset(&v17[1], 0, 27);
    v23 = 1;
    v17[5] = 0;
    v17[6] = (void **)v10;
    if (v10)
      BYTE2(v17[4]) = (*(_DWORD *)(v10 + 8) & 0x200) != 0;
    sub_22F28A5C0((uint64_t)v17, v9, (_DWORD *)(v14[23] + 1404));
    llvm::ConstantDataArray::getString();
    llvm::User::operator new((llvm::User *)0x58);
    v15 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v15 + 32) = *(_DWORD *)(v15 + 32) & 0xFFFFFF3F | 0x80;
    llvm::GlobalObject::setAlignment();
    sub_22F275848((uint64_t *)v17);
    sub_22F246F08((uint64_t *)v17);
    v16 = *(unsigned __int8 *)(a1[1] + 130);
    v8 = sub_22F277520((uint64_t *)v17);
    llvm::GlobalObject::setSection();
    *(_QWORD *)(v7 + 8) = v8;
    if (v16)
      v8 = v8 & 0xFFFFFFFFFFFFFFF8 | ((__clz(v16) ^ 0x3F) >> 3);
    v17[0] = (void **)v22;
    sub_22E3CEB30(v17);
    if (v19 != v21)
      free(v19);
  }
  return v8;
}

unint64_t sub_22E57C3E0(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = a1[304];
    if (v3)
      goto LABEL_5;
    v4 = a1 + 304;
    v5 = a1[1];
    v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 392))(a1);
    v7 = sub_22F29B660(v5, v6, (uint64_t)"__kCFBooleanTrue", 16);
    a1[304] = (uint64_t)v7;
  }
  else
  {
    v3 = a1[305];
    if (v3)
      goto LABEL_5;
    v4 = a1 + 305;
    v9 = a1[1];
    v10 = (*(uint64_t (**)(uint64_t *))(*a1 + 392))(a1);
    v7 = sub_22F29B660(v9, v10, (uint64_t)"__kCFBooleanFalse", 17);
    a1[305] = (uint64_t)v7;
  }
  llvm::Value::getContext(v7);
  *((_QWORD *)v7 + 9) = llvm::AttributeSet::addAttribute();
  v3 = *v4;
LABEL_5:
  if (*(_BYTE *)(a1[1] + 130))
    return v3 & 0xFFFFFFFFFFFFFFF8;
  else
    return v3;
}

unint64_t sub_22E57C4E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  llvm::APInt *v3;
  llvm::APInt *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  llvm::APFloatBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  unsigned int v23;
  int v24;
  const char *v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  void **v30[7];
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _DWORD v39[4];
  uint64_t v40;
  _QWORD v41[13];
  _QWORD v42[3];
  char v43;
  uint64_t v44;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (uint64_t *)v0;
  v44 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 8) + 130);
  v33 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 8) + 130);
  v7 = v0 + 2448;
  sub_22F277CFC((uint64_t)&v36, *v1, v3);
  v8 = (llvm::APFloatBase *)sub_22F27771C(v7, (uint64_t)&v36);
  v9 = v40;
  if (llvm::APFloatBase::PPCDoubleDouble(v8) == v9)
    sub_22E463170((llvm::APFloatBase *)v41);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v40);
  if (v39[0] >= 0x41u && v38)
    MEMORY[0x2348A0E84](v38, 0x1000C8000313F17);
  v10 = *((_QWORD *)v8 + 8);
  if (v10)
  {
    if (v6)
      return v10 & 0xFFFFFFFFFFFFFFF8;
    else
      return *((_QWORD *)v8 + 8);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    sub_22E618EBC((uint64_t)&v36, v5[1], 0);
    v13 = *(_QWORD *)(v41[12] + 144);
    v14 = *v2;
    LODWORD(v30[0]) = 7;
    sub_22EF6B358(v13, v14);
    sub_22E619434((uint64_t)&v36);
    v15 = (llvm::Value *)(*(uint64_t (**)(uint64_t *))(*v5 + 432))(v5);
    v16 = v5[297];
    if (!v16)
    {
      v17 = (*(uint64_t (**)(uint64_t *))(*v5 + 392))(v5);
      v18 = v5[1];
      v19 = *(void **)(v18 + 96);
      v36 = v17;
      v37 = v19;
      v38 = *(_QWORD *)(v18 + 32);
      v16 = llvm::StructType::create();
      v5[297] = v16;
    }
    v20 = v5[1];
    v36 = v20;
    v37 = v39;
    v38 = 0x1000000000;
    memset(v42, 0, sizeof(v42));
    v30[0] = (void **)&v36;
    memset(&v30[1], 0, 27);
    v43 = 1;
    v30[5] = 0;
    v30[6] = (void **)v16;
    if (v16)
      BYTE2(v30[4]) = (*(_DWORD *)(v16 + 8) & 0x200) != 0;
    sub_22F28A5C0((uint64_t)v30, v15, (_DWORD *)(*(_QWORD *)(v20 + 184) + 1404));
    sub_22F29BB8C((_QWORD *)v5[1], (uint64_t)__p, 0);
    sub_22F275848((uint64_t *)v30);
    if (*((_BYTE *)v4 + 12))
      llvm::APInt::zextOrTrunc(v4);
    else
      llvm::APInt::sextOrTrunc(v4);
    v29 = v35;
    v28 = v34;
    v21 = llvm::ConstantInt::get();
    if (v29 >= 0x41 && v28)
      MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
    v22 = v30[0];
    v23 = *((_DWORD *)v30[0] + 4);
    if (v23 >= *((_DWORD *)v30[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *((_DWORD *)v22 + 4);
    }
    *((_QWORD *)v22[1] + v23) = v21;
    ++*((_DWORD *)v22 + 4);
    LODWORD(v34) = 8;
    v11 = sub_22F2776A8((uint64_t *)v30);
    v24 = *((_DWORD *)v5 + 6);
    if (v24 == 2)
      v25 = "__DATA,__objc_intobj,regular,no_dead_strip";
    else
      v25 = "__OBJC,__int_object,regular,no_dead_strip";
    if (v24 == 2)
      v26 = 42;
    else
      v26 = 41;
    v27 = operator new(0x30uLL);
    memcpy(v27, v25, v26);
    *((_BYTE *)v27 + v26) = 0;
    llvm::GlobalObject::setSection();
    operator delete(v27);
    llvm::Value::getContext((llvm::Value *)v11);
    *(_QWORD *)(v11 + 72) = llvm::AttributeSet::addAttribute();
    *((_QWORD *)v8 + 8) = v11;
    if (v6)
      v11 &= 0xFFFFFFFFFFFFFFF8;
    v30[0] = (void **)v42;
    sub_22E3CEB30(v30);
    if (v37 != v39)
      free(v37);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
  }
  return v11;
}

unint64_t sub_22E57C934()
{
  uint64_t *v0;
  void **v1;
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const llvm::detail::IEEEFloat *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unsigned int v24;
  int v25;
  const char *v26;
  size_t v27;
  void *v28;
  void **v29[7];
  int v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  _QWORD v41[13];
  _BYTE v42[6056];
  uint64_t v43;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v2 = (uint64_t *)v1;
  v3 = v0;
  v43 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(v0[1] + 130);
  v34 = *(unsigned __int8 *)(v0[1] + 130);
  v5 = (uint64_t)(v0 + 306);
  LODWORD(v35) = 3;
  v6 = *v1;
  v38 = 1;
  v36 = v6;
  v37 = 0;
  v39 = 0;
  v8 = (const llvm::detail::IEEEFloat *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v0);
  if (v10 == v9)
    MEMORY[0x23489F2A0](&v40, v8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v40, v8);
  v11 = sub_22F27771C(v5, (uint64_t)&v35);
  if (v10 == v40)
    sub_22E463170((llvm::APFloatBase *)v41);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v40);
  if (v38 >= 0x41 && v37)
    MEMORY[0x2348A0E84](v37, 0x1000C8000313F17);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12)
  {
    if (v4)
      return v12 & 0xFFFFFFFFFFFFFFF8;
    else
      return *(_QWORD *)(v11 + 64);
  }
  else
  {
    __p = 0;
    v32 = 0;
    v33 = 0;
    sub_22E618EBC((uint64_t)&v35, v3[1], 0);
    v15 = *(_QWORD *)(v41[12] + 144);
    v16 = *v2;
    LODWORD(v29[0]) = 7;
    sub_22EF6B358(v15, v16);
    sub_22E619434((uint64_t)&v35);
    v30 = 8;
    v17 = (llvm::Value *)(*(uint64_t (**)(uint64_t *))(*v3 + 448))(v3);
    v18 = v3[299];
    if (!v18)
    {
      v19 = (*(uint64_t (**)(uint64_t *))(*v3 + 392))(v3);
      v20 = *(void **)(v3[1] + 64);
      v35 = v19;
      v36 = v20;
      v18 = llvm::StructType::create();
      v3[299] = v18;
    }
    v21 = v3[1];
    v35 = v21;
    v36 = &v38;
    v37 = 0x1000000000;
    memset(v42, 0, 24);
    v29[0] = (void **)&v35;
    memset(&v29[1], 0, 27);
    v42[24] = 1;
    v29[5] = 0;
    v29[6] = (void **)v18;
    if (v18)
      BYTE2(v29[4]) = (*(_DWORD *)(v18 + 8) & 0x200) != 0;
    sub_22F28A5C0((uint64_t)v29, v17, (_DWORD *)(*(_QWORD *)(v21 + 184) + 1404));
    v22 = llvm::ConstantFP::get();
    v23 = v29[0];
    v24 = *((_DWORD *)v29[0] + 4);
    if (v24 >= *((_DWORD *)v29[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *((_DWORD *)v23 + 4);
    }
    *((_QWORD *)v23[1] + v24) = v22;
    ++*((_DWORD *)v23 + 4);
    v13 = sub_22F277DDC((uint64_t *)v29);
    v25 = *((_DWORD *)v3 + 6);
    if (v25 == 2)
      v26 = "__DATA,__objc_doubleobj,regular,no_dead_strip";
    else
      v26 = "__OBJC,__number_object,regular,no_dead_strip";
    if (v25 == 2)
      v27 = 45;
    else
      v27 = 44;
    v28 = operator new(0x30uLL);
    memcpy(v28, v26, v27);
    *((_BYTE *)v28 + v27) = 0;
    llvm::GlobalObject::setSection();
    operator delete(v28);
    llvm::Value::getContext((llvm::Value *)v13);
    *(_QWORD *)(v13 + 72) = llvm::AttributeSet::addAttribute();
    *(_QWORD *)(v11 + 64) = v13;
    if (v4)
      v13 &= 0xFFFFFFFFFFFFFFF8;
    v29[0] = (void **)v42;
    sub_22E3CEB30(v29);
    if (v36 != &v38)
      free(v36);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
  }
  return v13;
}

unint64_t sub_22E57CF70(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  llvm::Type ***v10;
  llvm::Value *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unsigned int v25;
  int v26;
  const char *v27;
  size_t v28;
  void *v29;
  void **v30[8];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  _QWORD v35[3];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = *(unsigned __int8 *)(v3 + 130);
  v30[7] = (void **)*(unsigned __int8 *)(v3 + 130);
  if (*(_QWORD *)(a2 + 8))
  {
    v9 = *(_QWORD *)(v3 + 144);
    v10 = (llvm::Type ***)(v3 + 280);
    v11 = (llvm::Value *)(*(uint64_t (**)(_QWORD *))(*a1 + 416))(a1);
    v12 = sub_22F36E1B8(v9);
    v13 = *(_QWORD *)(v12 + 48);
    if (v13)
      v14 = v13 & 0xFFFFFFFFFFFFFFF0;
    else
      v14 = sub_22EF6462C(v9, v12);
    sub_22E66CB04((llvm::Type ***)(v3 + 280), (llvm::LLVMContext *)(v14 | 1));
    v17 = llvm::PointerType::get();
    v18 = *(_QWORD *)(v9 + 15088);
    if (*(_DWORD *)(v18 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v18 + 32)))
      v19 = 16544;
    else
      v19 = 16536;
    v20 = (void *)sub_22E66CB04(v10, *(llvm::LLVMContext **)(v9 + v19));
    v21 = a1[295];
    if (!v21)
    {
      v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 392))(a1);
      v32 = v20;
      v33 = v17;
      v21 = llvm::StructType::create();
      a1[295] = v21;
    }
    v22 = a1[1];
    v31 = v22;
    v32 = v34;
    v33 = 0x1000000000;
    memset(v35, 0, sizeof(v35));
    v30[0] = (void **)&v31;
    memset(&v30[1], 0, 27);
    v36 = 1;
    v30[5] = 0;
    v30[6] = (void **)v21;
    if (v21)
      BYTE2(v30[4]) = (*(_DWORD *)(v21 + 8) & 0x200) != 0;
    sub_22F28A5C0((uint64_t)v30, v11, (_DWORD *)(*(_QWORD *)(v22 + 184) + 1404));
    v23 = llvm::ConstantInt::get();
    v24 = v30[0];
    v25 = *((_DWORD *)v30[0] + 4);
    if (v25 >= *((_DWORD *)v30[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *((_DWORD *)v24 + 4);
    }
    *((_QWORD *)v24[1] + v25) = v23;
    ++*((_DWORD *)v24 + 4);
    sub_22E583D0C((uint64_t)a1, a2);
    sub_22F275848((uint64_t *)v30);
    v6 = sub_22F277E50((uint64_t *)v30);
    v26 = *((_DWORD *)a1 + 6);
    if (v26 == 2)
      v27 = "__DATA,__objc_arrayobj,regular,no_dead_strip";
    else
      v27 = "__OBJC,__array_object,regular,no_dead_strip";
    if (v26 == 2)
      v28 = 44;
    else
      v28 = 43;
    v29 = operator new(0x30uLL);
    memcpy(v29, v27, v28);
    *((_BYTE *)v29 + v28) = 0;
    llvm::GlobalObject::setSection();
    operator delete(v29);
    llvm::Value::getContext((llvm::Value *)v6);
    *(_QWORD *)(v6 + 72) = llvm::AttributeSet::addAttribute();
    if (v4)
      v6 &= 0xFFFFFFFFFFFFFFF8;
    v30[0] = (void **)v35;
    sub_22E3CEB30(v30);
    if (v32 != v34)
      free(v32);
  }
  else
  {
    v5 = a1[310];
    if (!v5)
    {
      v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 392))(a1);
      v16 = sub_22F29B660(v3, v15, (uint64_t)"__NSArray0__struct", 18);
      a1[310] = v16;
      llvm::Value::getContext(v16);
      *((_QWORD *)v16 + 9) = llvm::AttributeSet::addAttribute();
      v5 = a1[310];
    }
    if (v4)
      return v5 & 0xFFFFFFFFFFFFFFF8;
    else
      return v5;
  }
  return v6;
}

unint64_t sub_22E57D330(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  llvm::Type ***v14;
  llvm::Value *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  const char *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39[8];
  void *v40;
  uint64_t v41;
  _BYTE v42[128];
  _BYTE *v43;
  uint64_t v44;
  _BYTE v45[128];
  void **v46;
  uint64_t v47;
  _QWORD v48[16];
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE v55[128];
  _BYTE v56[32];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 130);
  v39[7] = *(unsigned __int8 *)(v5 + 130);
  if (a3[1])
  {
    v13 = *(_QWORD *)(v5 + 144);
    v14 = (llvm::Type ***)(v5 + 280);
    v15 = (llvm::Value *)(*(uint64_t (**)(_QWORD *))(*a1 + 424))(a1);
    v16 = sub_22F36E1B8(v13);
    v17 = *(_QWORD *)(v16 + 48);
    if (v17)
      v18 = v17 & 0xFFFFFFFFFFFFFFF0;
    else
      v18 = sub_22EF6462C(v13, v16);
    sub_22E66CB04((llvm::Type ***)(v5 + 280), (llvm::LLVMContext *)(v18 | 1));
    v21 = llvm::PointerType::get();
    v22 = *(_QWORD *)(v13 + 15088);
    if (*(_DWORD *)(v22 + 68) == 15 && llvm::Triple::isArch64Bit((llvm::Triple *)(v22 + 32)))
      v23 = 16544;
    else
      v23 = 16536;
    v24 = sub_22E66CB04(v14, *(llvm::LLVMContext **)(v13 + v23));
    v25 = a1[296];
    if (!v25)
    {
      v46 = (void **)(*(uint64_t (**)(_QWORD *))(*a1 + 392))(a1);
      v47 = v24;
      v48[0] = v24;
      v48[1] = v21;
      v48[2] = v21;
      v25 = llvm::StructType::create();
      a1[296] = v25;
    }
    v26 = a1[1];
    v52 = v26;
    v53 = v55;
    v54 = 0x1000000000;
    memset(v56, 0, 24);
    v39[0] = (uint64_t)&v52;
    memset(&v39[1], 0, 27);
    v56[24] = 1;
    v39[5] = 0;
    v39[6] = v25;
    if (v25)
      BYTE2(v39[4]) = (*(_DWORD *)(v25 + 8) & 0x200) != 0;
    sub_22F28A5C0((uint64_t)v39, v15, (_DWORD *)(*(_QWORD *)(v26 + 184) + 1404));
    sub_22F277F38((uint64_t)&v46, a2, a3, a4);
    v43 = v45;
    v44 = 0x1000000000;
    if ((_DWORD)v47)
      sub_22F24C890((uint64_t)&v43, (uint64_t)&v46);
    v40 = v42;
    v41 = 0x1000000000;
    if (v50)
      sub_22F24C890((uint64_t)&v40, (uint64_t)&v49);
    v27 = llvm::ConstantInt::get();
    v28 = v39[0];
    v29 = *(_DWORD *)(v39[0] + 16);
    if (v29 >= *(_DWORD *)(v39[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(v28 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8 * v29) = v27;
    ++*(_DWORD *)(v28 + 16);
    v30 = llvm::ConstantInt::get();
    v31 = v39[0];
    v32 = *(_DWORD *)(v39[0] + 16);
    if (v32 >= *(_DWORD *)(v39[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v32 = *(_DWORD *)(v31 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v32) = v30;
    ++*(_DWORD *)(v31 + 16);
    v37 = v43;
    v38 = v44;
    sub_22E583D0C((uint64_t)a1, (uint64_t)&v37);
    sub_22F275848(v39);
    v37 = v40;
    v38 = v41;
    sub_22E583D0C((uint64_t)a1, (uint64_t)&v37);
    sub_22F275848(v39);
    LODWORD(v37) = 8;
    v8 = sub_22F277EC4(v39);
    v33 = *((_DWORD *)a1 + 6);
    if (v33 == 2)
      v34 = "__DATA,__objc_dictobj,regular,no_dead_strip";
    else
      v34 = "__OBJC,__dict_object,regular,no_dead_strip";
    if (v33 == 2)
      v35 = 43;
    else
      v35 = 42;
    v36 = operator new(0x30uLL);
    memcpy(v36, v34, v35);
    *((_BYTE *)v36 + v35) = 0;
    llvm::GlobalObject::setSection();
    operator delete(v36);
    llvm::Value::getContext((llvm::Value *)v8);
    *(_QWORD *)(v8 + 72) = llvm::AttributeSet::addAttribute();
    if (v6)
      v8 &= 0xFFFFFFFFFFFFFFF8;
    if (v40 != v42)
      free(v40);
    if (v43 != v45)
      free(v43);
    if (v49 != &v51)
      free(v49);
    if (v46 != v48)
      free(v46);
    v46 = (void **)v56;
    sub_22E3CEB30(&v46);
    if (v53 != v55)
      free(v53);
  }
  else
  {
    v7 = a1[309];
    if (!v7)
    {
      v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 392))(a1);
      v20 = sub_22F29B660(v5, v19, (uint64_t)"__NSDictionary0__struct", 23);
      a1[309] = v20;
      llvm::Value::getContext(v20);
      *((_QWORD *)v20 + 9) = llvm::AttributeSet::addAttribute();
      v7 = a1[309];
    }
    if (v6)
      return v7 & 0xFFFFFFFFFFFFFFF8;
    else
      return v7;
  }
  return v8;
}

void sub_22E57D848(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout *DataLayout;
  llvm::Type *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t ABITypeAlignment;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  const void *v25;
  size_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  void ***v35;
  unint64_t v36;
  _DWORD *v37;
  const char *v38;
  size_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  size_t v65;
  int HashValue;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  int v70;
  int v71;
  _QWORD v72[4];
  __int16 v73;
  _QWORD v74[4];
  __int16 v75;
  _QWORD v76[4];
  __int16 v77;
  _QWORD v78[4];
  _WORD v79[4];
  void *v80;
  _QWORD v81[3];
  __int16 v82;
  uint64_t v83[4];
  __int16 v84;
  uint64_t v85[7];
  void **v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[128];
  _QWORD v98[3];
  char v99;
  void *v100;
  __int128 v101;
  _QWORD v102[34];

  v102[32] = *MEMORY[0x24BDAC8D0];
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
  v5 = *(llvm::Type **)(a1 + 2760);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v5);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v5);
  v86 = (void **)((ABITypeAlignment + v7 - 1) / ABITypeAlignment * ABITypeAlignment);
  v87 = v9;
  llvm::TypeSize::operator unsigned long long();
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 40);
  if ((v12 & 7) != 0)
    v13 = 0;
  else
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  v14 = sub_22EFDD7A0(*(_QWORD *)(a2 + 88), v13);
  v100 = v102;
  v101 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&v86, (uint64_t)&v100);
  v15 = *(_QWORD *)(v11 + 40);
  if ((v15 & 7) == 0)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = *(unsigned int **)(v16 + 16);
      v20 = *v17;
      v18 = v17 + 4;
      v19 = v20;
      if (v20 <= v89 - (unint64_t)v90)
      {
        if (v19)
        {
          memcpy(v90, v18, v19);
          v90 += v19;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v86, (const char *)v18);
      }
    }
  }
  v21 = v90;
  if ((unint64_t)v90 >= v89)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v86);
  }
  else
  {
    ++v90;
    *v21 = 95;
  }
  v22 = *(_QWORD *)(a2 + 40);
  if ((v22 & 7) == 0)
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      v24 = *(unsigned int **)(v23 + 16);
      v27 = *v24;
      v25 = v24 + 4;
      v26 = v27;
      if (v27 <= v89 - (unint64_t)v90)
      {
        if (v26)
        {
          memcpy(v90, v25, v26);
          v90 += v26;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v86, (const char *)v25);
      }
    }
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v86);
  v94 = *(_QWORD *)(a1 + 8);
  v95 = v97;
  v96 = 0x1000000000;
  memset(v98, 0, sizeof(v98));
  v28 = *(_QWORD *)(a1 + 2760);
  v85[0] = (uint64_t)&v94;
  memset(&v85[1], 0, 27);
  v99 = 1;
  v85[5] = 0;
  v85[6] = v28;
  if (v28)
    BYTE2(v85[4]) = (*(_DWORD *)(v28 + 8) & 0x200) != 0;
  v86 = (void **)&v88;
  v87 = 0x1000000000;
  v91 = &v93;
  v92 = 0x1000000000;
  v29 = sub_22F2781C0(a2);
  if (v29 != v30)
  {
    v33 = v29;
    v34 = v30;
    do
    {
      if (!sub_22EFDBD9C(v33))
      {
        v35 = &(&v86)[18 * ((*(_DWORD *)(v33 + 56) & 0x20000) == 0)];
        v36 = *((unsigned int *)v35 + 2);
        if (v36 >= *((unsigned int *)v35 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = *((unsigned int *)v35 + 2);
        }
        (*v35)[v36] = (void *)v33;
        ++*((_DWORD *)v35 + 2);
      }
      do
        v33 = *(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v33 && (*(_DWORD *)(v33 + 28) & 0x7F) != 0x18);
    }
    while (v33 != v34);
  }
  v31 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v31 == 0)
  {
    v39 = 0;
    v38 = "";
  }
  else
  {
    v37 = *(_DWORD **)(v31 + 16);
    v40 = *v37;
    v38 = (const char *)(v37 + 4);
    v39 = v40;
  }
  v41 = sub_22E5832E4(a1, v38, v39);
  v42 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v42 = v96;
  }
  *((_QWORD *)v95 + v42) = v41;
  LODWORD(v96) = v96 + 1;
  v43 = sub_22F3B5E40(v11);
  v45 = sub_22E5832E4(a1, v43, v44);
  v46 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = v96;
  }
  *((_QWORD *)v95 + v46) = v45;
  LODWORD(v96) = v96 + 1;
  v47 = *(_QWORD *)(v11 + 40);
  if ((v47 & 7) != 0)
    v48 = 0;
  else
    v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFF8);
  v69 = v48;
  sub_22E584F38((_QWORD *)(a1 + 432), &v69);
  v84 = 261;
  v83[0] = (uint64_t)v100;
  v83[1] = v101;
  v49 = sub_22E585048(a1, v83, 0, (uint64_t *)v86, v87);
  v50 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = v96;
  }
  *((_QWORD *)v95 + v50) = v49;
  LODWORD(v96) = v96 + 1;
  v82 = 261;
  v80 = v100;
  v81[0] = v101;
  v51 = sub_22E585048(a1, (uint64_t *)&v80, 1, v91, v92);
  v52 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = v96;
  }
  *((_QWORD *)v95 + v52) = v51;
  LODWORD(v96) = v96 + 1;
  if (v14)
  {
    v79[0] = 1283;
    v78[0] = "OBJC_CATEGORY_PROTOCOLS_";
    v78[2] = v100;
    v78[3] = v101;
    v53 = sub_22E5856C8(a1, (uint64_t)v78, *(_QWORD *)((*(_QWORD *)(v14 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)((*(_QWORD *)(v14 + 120) & 0xFFFFFFFFFFFFFFF8) + 16)+ 8 * *(unsigned int *)((*(_QWORD *)(v14 + 120) & 0xFFFFFFFFFFFFFFF8) + 24));
    v54 = v85[0];
    v55 = *(_DWORD *)(v85[0] + 16);
    if (v55 >= *(_DWORD *)(v85[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v55 = *(_DWORD *)(v54 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * v55) = v53;
    ++*(_DWORD *)(v54 + 16);
    sub_22F246F08(v85);
    v77 = 1283;
    v76[0] = "_OBJC_$_PROP_LIST_";
    v76[2] = v100;
    v76[3] = v101;
    v56 = sub_22E58591C(a1, (uint64_t)v76, a2, v14, a1 + 2488, 0);
    v57 = v85[0];
    v58 = *(_DWORD *)(v85[0] + 16);
    if (v58 >= *(_DWORD *)(v85[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v58 = *(_DWORD *)(v57 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v58) = v56;
    ++*(_DWORD *)(v57 + 16);
    v75 = 1283;
    v74[0] = "_OBJC_$_CLASS_PROP_LIST_";
    v74[2] = v100;
    v74[3] = v101;
    v59 = sub_22E58591C(a1, (uint64_t)v74, a2, v14, a1 + 2488, 1);
    v60 = v85[0];
    v61 = *(_DWORD *)(v85[0] + 16);
    if (v61 >= *(_DWORD *)(v85[0] + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v61 = *(_DWORD *)(v60 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v61) = v59;
    ++*(_DWORD *)(v60 + 16);
  }
  else
  {
    sub_22F247080(v85, *(llvm::ConstantPointerNull **)(a1 + 2752));
    sub_22F246F08(v85);
    sub_22F247080(v85, *(llvm::ConstantPointerNull **)(a1 + 2632));
    sub_22F247080(v85, *(llvm::ConstantPointerNull **)(a1 + 2632));
  }
  v73 = 1283;
  v72[0] = "OBJC_CATEGORY_";
  v72[2] = v100;
  v72[3] = v101;
  v62 = sub_22E58334C(a1, (uint64_t)v72, v85, (uint64_t)"__OBJC,__category,regular,no_dead_strip", 39, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
  v63 = *(_DWORD *)(a1 + 1784);
  if (v63 >= *(_DWORD *)(a1 + 1788))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v63 = *(_DWORD *)(a1 + 1784);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1776) + 8 * v63) = v62;
  ++*(_DWORD *)(a1 + 1784);
  v64 = v100;
  v65 = v101;
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
  v69 = (void *)operator new[]();
  v70 = v65;
  v71 = HashValue;
  memcpy(v69, v64, v65);
  sub_22F2781FC(a1 + 584, (unint64_t)&v69);
  if (v69 != (void *)-8192 && v69 != (void *)-4096 && v69)
    MEMORY[0x2348A0E84]();
  sub_22F278254(a1 + 1152);
  v67 = 288;
  do
  {
    v68 = *(_QWORD **)&v79[v67 / 2];
    if (&v81[v67 / 8] != v68)
      free(v68);
    v67 -= 144;
  }
  while (v67);
  v86 = (void **)v98;
  sub_22E3CEB30(&v86);
  if (v95 != v97)
    free(v95);
  if (v100 != v102)
    free(v100);
}

void sub_22E57E0A0(size_t a1, uint64_t *a2)
{
  llvm::StringMapImpl *v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  size_t v10;
  const void *v11;
  unsigned int v12;
  void **p_dst;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::DataLayout *DataLayout;
  llvm::Type *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t ABITypeAlignment;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  size_t v63;
  void *v64;
  size_t v65;
  uint64_t v66;
  void **p_data;
  unsigned int v68;
  llvm::Type *v69;
  uint64_t NullValue;
  void **v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  unsigned int v76;
  uint64_t v77;
  void **v78;
  unsigned int v79;
  void **v80;
  unsigned int v81;
  uint64_t v82;
  void **v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t GlobalVariable;
  void **v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  size_t v98;
  void *v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t BitCast;
  void **v126;
  llvm::Type *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  const std::string::value_type *v145;
  std::string::size_type v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  std::string *v159;
  __int16 v160;
  uint64_t v161[4];
  __int16 v162;
  uint64_t v163[6];
  uint64_t v164;
  _QWORD v165[4];
  __int16 v166;
  void **__dst;
  std::string::size_type v168;
  uint64_t v169;
  uint64_t v170;
  std::string v171;
  std::string *v172;
  std::string **v173;
  unsigned int *v174;
  _QWORD v175[4];
  std::string *v176;
  std::string **v177;
  uint64_t v178;
  _QWORD v179[4];
  std::string *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  _BYTE v189[128];
  _QWORD v190[3];
  char v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  std::string v198;
  _BYTE v199[128];
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v4 = *(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192);
  v5 = sub_22F3B5EB4((uint64_t)a2);
  v170 = sub_22E3CB704(v4, v5, v6);
  sub_22E584F38((_QWORD *)(a1 + 480), &v170);
  v7 = *(_QWORD *)(a2[11] + 40);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned int **)(v8 + 16);
  v12 = *v9;
  v11 = v9 + 4;
  v10 = v12;
  if (v12 >= 0x17uLL)
  {
    if ((v10 | 7) == 0x17)
      v14 = (v10 & 0xFFFFFFF8) + 8;
    else
      v14 = v10 | 7;
    p_dst = (void **)operator new(v14 + 1);
    v168 = v10;
    v169 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v169) = v10;
    p_dst = (void **)&__dst;
    if (!v10)
      goto LABEL_12;
  }
  memmove(p_dst, v11, v10);
LABEL_12:
  *((_BYTE *)p_dst + v10) = 0;
  v15 = a2[11];
  v16 = *(_QWORD *)(v15 + 40);
  if ((v16 & 7) != 0)
    v17 = 0;
  else
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
  v18 = *(unsigned int **)(v17 + 16);
  v19 = *v18;
  v166 = 1283;
  v165[0] = "OBJC_CLASS_PROTOCOLS_";
  v165[2] = v18 + 4;
  v165[3] = v19;
  v20 = sub_22F276134(v15);
  v158 = v15;
  v21 = sub_22F2761B0(v15);
  v157 = sub_22E5856C8(a1, (uint64_t)v165, v20, v21);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(v22 + 152);
  if ((*(_WORD *)(v23 + 148) & 2) != 0)
  {
    v155 = 0;
  }
  else
  {
    v155 = sub_22E5868C8(*(_QWORD *)(v23 + 140), *(_WORD *)(v23 + 148), (uint64_t)a2);
    v22 = *(_QWORD *)(a1 + 8);
  }
  v156 = *(_QWORD *)sub_22F0CBDC4(*(_QWORD *)(v22 + 144), a2[11], (unint64_t)a2);
  sub_22EFB9558(a2[11]);
  v192 = &v194;
  v193 = 0x1000000000;
  v195 = &v197;
  v196 = 0x1000000000;
  v24 = sub_22F2781C0((uint64_t)a2);
  if (v24 != v25)
  {
    v45 = v24;
    v46 = v25;
    do
    {
      if (!sub_22EFDBD9C(v45))
      {
        v47 = &(&v192)[18 * ((*(_DWORD *)(v45 + 56) & 0x20000) == 0)];
        v48 = *((unsigned int *)v47 + 2);
        if (v48 >= *((unsigned int *)v47 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v48 = *((unsigned int *)v47 + 2);
        }
        (*v47)[v48] = v45;
        ++*((_DWORD *)v47 + 2);
      }
      do
        v45 = *(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v45 && (*(_DWORD *)(v45 + 28) & 0x7F) != 0x18);
    }
    while (v45 != v46);
  }
  v26 = sub_22F276498((uint64_t)a2);
  if (v26 == v27)
    goto LABEL_20;
  v49 = v26;
  v50 = v27;
  do
  {
    if (!*(_QWORD *)(v49 + 56))
      goto LABEL_67;
    v51 = *(_QWORD *)(v49 + 48);
    if ((*(_DWORD *)(v51 + 72) & 0x18000) != 0x8000)
      goto LABEL_65;
    if ((*(_DWORD *)(v51 + 28) & 0x7F) == 0x53)
      goto LABEL_64;
    while (1)
    {
      v52 = *(_QWORD *)(v51 + 16);
      v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if ((v52 & 4) != 0)
        v53 = *(_QWORD *)v53;
      v54 = *(_WORD *)(v53 + 8) & 0x7F;
      if (v54 == 83)
        break;
      v55 = -40;
      if ((*(_WORD *)(v53 + 8) & 0x7Fu) > 0x46)
      {
        if (v54 == 71)
        {
          v55 = -56;
          goto LABEL_60;
        }
        if (v54 != 81)
          goto LABEL_54;
      }
      else
      {
        if (v54 > 0x18)
          goto LABEL_53;
        if (v54 == 16)
          goto LABEL_47;
        if (((1 << v54) & 0x1066) == 0)
        {
          if (v54 == 24)
          {
LABEL_47:
            v55 = -48;
            goto LABEL_60;
          }
LABEL_53:
          if (v54 == 70)
          {
            v55 = -64;
            goto LABEL_60;
          }
LABEL_54:
          v56 = v54 - 52;
          if (v54 - 33 >= 5)
            v57 = -48;
          else
            v57 = -64;
          if (v56 >= 6)
            v55 = v57;
          else
            v55 = -72;
        }
      }
LABEL_60:
      v51 = v53 + v55;
    }
    v51 = v53 - 40;
LABEL_64:
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 88) + 2000) + 148) & 0x80) != 0)
    {
LABEL_65:
      v58 = *(_QWORD *)(v49 + 64);
      if (v58)
      {
        v198.__r_.__value_.__r.__words[0] = 0;
        if (sub_22F24C318(*(_QWORD *)(a1 + 1152), *(_DWORD *)(a1 + 1168), v58, &v198))
        {
          if (v198.__r_.__value_.__r.__words[0] != *(_QWORD *)(a1 + 1152) + 16 * *(unsigned int *)(a1 + 1168)
            && *(_QWORD *)(v198.__r_.__value_.__r.__words[0] + 8))
          {
            v60 = v193;
            if (v193 >= (unint64_t)HIDWORD(v193))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v193;
            }
            v192[v60] = v58;
            LODWORD(v193) = v193 + 1;
          }
        }
      }
      v59 = *(_QWORD *)(v49 + 72);
      if (v59)
      {
        v198.__r_.__value_.__r.__words[0] = 0;
        if (sub_22F24C318(*(_QWORD *)(a1 + 1152), *(_DWORD *)(a1 + 1168), v59, &v198))
        {
          if (v198.__r_.__value_.__r.__words[0] != *(_QWORD *)(a1 + 1152) + 16 * *(unsigned int *)(a1 + 1168)
            && *(_QWORD *)(v198.__r_.__value_.__r.__words[0] + 8))
          {
            v61 = v193;
            if (v193 >= (unint64_t)HIDWORD(v193))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v61 = v193;
            }
            v192[v61] = v59;
            LODWORD(v193) = v193 + 1;
          }
        }
      }
    }
    do
LABEL_67:
      v49 = *(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v49 && (*(_DWORD *)(v49 + 28) & 0x7F) != 0x4E);
  }
  while (v49 != v50);
LABEL_20:
  v28 = *(_QWORD *)(a1 + 8);
  v186 = v28;
  v187 = v189;
  v188 = 0x1000000000;
  memset(v190, 0, sizeof(v190));
  v29 = *(_QWORD *)(a1 + 2768);
  v163[0] = (uint64_t)&v186;
  memset(&v163[1], 0, 27);
  v191 = 1;
  v163[5] = 0;
  v164 = v29;
  if (v29)
    BYTE2(v163[4]) = (*(_DWORD *)(v29 + 8) & 0x200) != 0;
  v30 = v195;
  v31 = v196;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v28 + 200));
  v33 = *(llvm::Type **)(a1 + 2768);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v33);
  v35 = (unint64_t)(v34 + 7) >> 3;
  v37 = v36 == 1;
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v33);
  v198.__r_.__value_.__r.__words[0] = (ABITypeAlignment + v35 - 1) / ABITypeAlignment * ABITypeAlignment;
  v198.__r_.__value_.__l.__size_ = v37;
  llvm::TypeSize::operator unsigned long long();
  sub_22EFB9558(a2[11]);
  v198.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  v198.__r_.__value_.__l.__size_ = (std::string::size_type)v199;
  v198.__r_.__value_.__r.__words[2] = 0x1000000000;
  v202 = 0;
  v200 = 0;
  v201 = 0;
  v39 = *(_QWORD *)(a1 + 2768);
  v180 = &v198;
  v181 = 0;
  v182 = 0;
  memset(v183, 0, 11);
  v203 = 1;
  v184 = 0;
  v185 = v39;
  if (v39)
    BYTE2(v183[1]) = (*(_DWORD *)(v39 + 8) & 0x200) != 0;
  v40 = a2[11];
  do
  {
    v41 = v40;
    v40 = sub_22F3B46CC(v40);
  }
  while (v40);
  v42 = sub_22F3B5E40(v41);
  sub_22E5832E4(a1, v42, v43);
  sub_22F275848((uint64_t *)&v180);
  v44 = sub_22F3B46CC(a2[11]);
  if (v44)
  {
    v62 = sub_22F3B5E40(v44);
    sub_22E5832E4(a1, v62, v63);
    sub_22F275848((uint64_t *)&v180);
  }
  else
  {
    sub_22F247080((uint64_t *)&v180, *(llvm::ConstantPointerNull **)(a1 + 2776));
  }
  v64 = sub_22F3B5EB4((uint64_t)a2);
  v66 = sub_22E5832E4(a1, v64, v65);
  p_data = (void **)&v180->__r_.__value_.__l.__data_;
  v68 = v180->__r_.__value_.__r.__words[2];
  if (v68 >= HIDWORD(v180->__r_.__value_.__r.__words[2]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v68 = *((_DWORD *)p_data + 4);
  }
  *((_QWORD *)p_data[1] + v68) = v66;
  ++*((_DWORD *)p_data + 4);
  sub_22F246F08((uint64_t *)&v180);
  sub_22F246F08((uint64_t *)&v180);
  sub_22F246F08((uint64_t *)&v180);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2816), v69);
  v71 = (void **)&v180->__r_.__value_.__l.__data_;
  v72 = v180->__r_.__value_.__r.__words[2];
  if (v72 >= HIDWORD(v180->__r_.__value_.__r.__words[2]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v72 = *((_DWORD *)v71 + 4);
  }
  *((_QWORD *)v71[1] + v72) = NullValue;
  ++*((_DWORD *)v71 + 4);
  v73 = *(_QWORD *)(a2[11] + 40);
  if ((v73 & 7) != 0)
    v74 = 0;
  else
    v74 = v73 & 0xFFFFFFFFFFFFFFF8;
  v75 = *(_DWORD **)(v74 + 16);
  v76 = *v75;
  LOWORD(v175[1]) = 261;
  v172 = (std::string *)(v75 + 4);
  v173 = (std::string **)v76;
  v77 = sub_22E585048(a1, (uint64_t *)&v172, 3, v30, v31);
  v78 = (void **)&v180->__r_.__value_.__l.__data_;
  v79 = v180->__r_.__value_.__r.__words[2];
  if (v79 >= HIDWORD(v180->__r_.__value_.__r.__words[2]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v79 = *((_DWORD *)v78 + 4);
  }
  *((_QWORD *)v78[1] + v79) = v77;
  ++*((_DWORD *)v78 + 4);
  sub_22F247080((uint64_t *)&v180, *(llvm::ConstantPointerNull **)(a1 + 2656));
  v80 = (void **)&v180->__r_.__value_.__l.__data_;
  v81 = v180->__r_.__value_.__r.__words[2];
  if (v81 >= HIDWORD(v180->__r_.__value_.__r.__words[2]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v81 = *((_DWORD *)v80 + 4);
  }
  *((_QWORD *)v80[1] + v81) = v157;
  ++*((_DWORD *)v80 + 4);
  sub_22F247080((uint64_t *)&v180, *(llvm::ConstantPointerNull **)(a1 + 2528));
  v82 = sub_22E586910(a1, (llvm::PointerType *)a2, 0, 0, 1);
  v83 = (void **)&v180->__r_.__value_.__l.__data_;
  v84 = v180->__r_.__value_.__r.__words[2];
  if (v84 >= HIDWORD(v180->__r_.__value_.__r.__words[2]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v84 = *((_DWORD *)v83 + 4);
  }
  *((_QWORD *)v83[1] + v84) = v82;
  ++*((_DWORD *)v83 + 4);
  *((_BYTE *)&v171.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v171, "OBJC_METACLASS_");
  v85 = *(_QWORD *)(a2[11] + 40);
  if ((v85 & 7) != 0)
    v86 = 0;
  else
    v86 = v85 & 0xFFFFFFFFFFFFFFF8;
  std::string::append(&v171, (const std::string::value_type *)(*(_QWORD *)(v86 + 16) + 16), **(unsigned int **)(v86 + 16));
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v89 = GlobalVariable;
    v90 = (void **)&v180->__r_.__value_.__l.__data_;
    sub_22E670C54((uint64_t *)&v180, v185);
    sub_22F29F5C8((uint64_t)v90);
  }
  else
  {
    v88 = (void **)&v180->__r_.__value_.__l.__data_;
    sub_22E670C54((uint64_t *)&v180, v185);
    LOWORD(v179[1]) = 260;
    v176 = &v171;
    v89 = sub_22F29F614((uint64_t)v88);
  }
  llvm::GlobalObject::setSection();
  sub_22E6242E0(*(uint64_t **)(a1 + 8), v89);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v180 = (std::string *)&v200;
  sub_22E3CEB30((void ***)&v180);
  if ((_BYTE *)v198.__r_.__value_.__l.__size_ != v199)
    free((void *)v198.__r_.__value_.__l.__size_);
  v91 = v163[0];
  v92 = *(_DWORD *)(v163[0] + 16);
  if (v92 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v92 = *(_DWORD *)(v163[0] + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v163[0] + 8) + 8 * v92) = v89;
  ++*(_DWORD *)(v91 + 16);
  v93 = sub_22F3B46CC(v158);
  if (v93)
  {
    v94 = v93;
    v95 = *(_QWORD *)(v93 + 40);
    if ((v95 & 7) != 0)
      v96 = 0;
    else
      v96 = v95 & 0xFFFFFFFFFFFFFFF8;
    v198.__r_.__value_.__r.__words[0] = v96;
    sub_22E584F38((_QWORD *)(a1 + 432), &v198);
    v97 = sub_22F3B5E40(v94);
    sub_22E5832E4(a1, v97, v98);
    sub_22F275848(v163);
  }
  else
  {
    sub_22F247080(v163, *(llvm::ConstantPointerNull **)(a1 + 2776));
  }
  v99 = sub_22F3B5EB4((uint64_t)a2);
  v101 = sub_22E5832E4(a1, v99, v100);
  v102 = v163[0];
  v103 = *(_DWORD *)(v163[0] + 16);
  if (v103 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v103 = *(_DWORD *)(v102 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v102 + 8) + 8 * v103) = v101;
  ++*(_DWORD *)(v102 + 16);
  sub_22F246F08(v163);
  sub_22F246F08(v163);
  sub_22F246F08(v163);
  v104 = a2[11];
  v198.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  v198.__r_.__value_.__l.__size_ = (std::string::size_type)v199;
  v198.__r_.__value_.__r.__words[2] = 0x1000000000;
  v202 = 0;
  v200 = 0;
  v201 = 0;
  v184 = 0;
  v185 = 0;
  v180 = &v198;
  v181 = 0;
  v182 = 0;
  memset(v183, 0, 11);
  v203 = 1;
  v154 = sub_22F278330((uint64_t *)&v180);
  v105 = *(_QWORD *)(a1 + 2800);
  v176 = v180;
  v177 = &v180;
  v178 = LODWORD(v180->__r_.__value_.__r.__words[2]);
  memset(v179, 0, 11);
  BYTE1(v183[1]) = 1;
  v179[2] = 0;
  v179[3] = v105;
  v106 = sub_22EFDD1E0(v104);
  if (v106)
  {
    v111 = v106;
    do
    {
      if (*(_QWORD *)(v111 + 40))
      {
        v112 = *(_QWORD *)(a1 + 2800);
        v172 = v176;
        v173 = &v176;
        v174 = (unsigned int *)LODWORD(v176->__r_.__value_.__r.__words[2]);
        v175[2] = 0;
        v175[3] = v112;
        memset(v175, 0, 11);
        BYTE1(v179[1]) = 1;
        if (v112)
          BYTE2(v175[1]) = (*(_DWORD *)(v112 + 8) & 0x200) != 0;
        v113 = *(_QWORD *)(v111 + 40);
        if ((v113 & 7) != 0)
          v114 = 1;
        else
          v114 = v113 & 0xFFFFFFFFFFFFFFF8 | 1;
        v115 = sub_22E5837EC(a1, v114);
        v116 = (uint64_t)v172;
        v117 = LODWORD(v172->__r_.__value_.__r.__words[2]);
        if (v117 >= HIDWORD(v172->__r_.__value_.__r.__words[2]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v117 = *(unsigned int *)(v116 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v116 + 8) + 8 * v117) = v115;
        ++*(_DWORD *)(v116 + 16);
        v118 = sub_22E586CF0(a1, v111);
        v119 = (uint64_t)v172;
        v120 = LODWORD(v172->__r_.__value_.__r.__words[2]);
        if (v120 >= HIDWORD(v172->__r_.__value_.__r.__words[2]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v120 = *(unsigned int *)(v119 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v119 + 8) + 8 * v120) = v118;
        ++*(_DWORD *)(v119 + 16);
        sub_22F27918C(a1, *(_QWORD *)(a1 + 8), v104, v111);
        sub_22F246F08((uint64_t *)&v172);
        sub_22F2759F0((uint64_t *)&v172, (uint64_t *)&v176);
      }
      v111 = *(_QWORD *)(v111 + 80);
    }
    while (v111);
  }
  v107 = (uint64_t)v176;
  v108 = LODWORD(v176->__r_.__value_.__r.__words[2]);
  if (v108 == v178)
  {
    LOBYTE(v179[1]) = 1;
    v109 = v155;
    v110 = v156;
    if (v177)
      *((_BYTE *)v177 + 33) = 0;
    else
      v176[7].__r_.__value_.__s.__data_[8] = 0;
    sub_22E670B38(v107, v108);
    LOBYTE(v183[1]) = 1;
    if (v181)
    {
      *(_BYTE *)(v181 + 33) = 0;
      v126 = (void **)&v180->__r_.__value_.__l.__data_;
    }
    else
    {
      v126 = (void **)&v180->__r_.__value_.__l.__data_;
      v180[7].__r_.__value_.__s.__data_[8] = 0;
    }
    sub_22E670B38((uint64_t)v126, v182);
    BitCast = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2816), v127);
  }
  else
  {
    sub_22F2758B8((uint64_t)&v176, (uint64_t *)&v180);
    *(_QWORD *)(v180->__r_.__value_.__l.__size_ + 8 * v154) = llvm::ConstantInt::get();
    v121 = *(_QWORD *)(a2[11] + 40);
    if ((v121 & 7) != 0)
      v122 = 0;
    else
      v122 = v121 & 0xFFFFFFFFFFFFFFF8;
    v123 = *(unsigned int **)(v122 + 16);
    v124 = *v123;
    LOWORD(v175[1]) = 1283;
    v172 = (std::string *)"OBJC_INSTANCE_VARIABLES_";
    v174 = v123 + 4;
    v175[0] = v124;
    sub_22E58334C(a1, (uint64_t)&v172, (uint64_t *)&v180, (uint64_t)"__OBJC,__instance_vars,regular,no_dead_strip", 44, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
    BitCast = llvm::ConstantExpr::getBitCast();
    v109 = v155;
    v110 = v156;
  }
  v180 = (std::string *)&v200;
  sub_22E3CEB30((void ***)&v180);
  if ((_BYTE *)v198.__r_.__value_.__l.__size_ != v199)
    free((void *)v198.__r_.__value_.__l.__size_);
  v128 = v163[0];
  v129 = *(_DWORD *)(v163[0] + 16);
  if (v129 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v129 = *(_DWORD *)(v128 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v128 + 8) + 8 * v129) = BitCast;
  ++*(_DWORD *)(v128 + 16);
  v130 = *(_QWORD *)(a2[11] + 40);
  if ((v130 & 7) != 0)
    v131 = 0;
  else
    v131 = v130 & 0xFFFFFFFFFFFFFFF8;
  v132 = *(unsigned int **)(v131 + 16);
  v133 = *v132;
  v162 = 261;
  v161[0] = (uint64_t)(v132 + 4);
  v161[1] = v133;
  v134 = sub_22E585048(a1, v161, 2, v192, v193);
  v135 = v163[0];
  v136 = *(_DWORD *)(v163[0] + 16);
  if (v136 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v136 = *(_DWORD *)(v135 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v135 + 8) + 8 * v136) = v134;
  ++*(_DWORD *)(v135 + 16);
  sub_22F247080(v163, *(llvm::ConstantPointerNull **)(a1 + 2656));
  v137 = v163[0];
  v138 = *(_DWORD *)(v163[0] + 16);
  if (v138 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v138 = *(_DWORD *)(v137 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v138) = v157;
  ++*(_DWORD *)(v137 + 16);
  v139 = sub_22E586DD8(a1, (llvm::Type *)a2, 0, v110, 1, 0);
  v140 = v163[0];
  v141 = *(_DWORD *)(v163[0] + 16);
  if (v141 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v141 = *(_DWORD *)(v140 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v140 + 8) + 8 * v141) = v139;
  ++*(_DWORD *)(v140 + 16);
  v142 = sub_22E586910(a1, (llvm::PointerType *)a2, v110, v109, 0);
  v143 = v163[0];
  v144 = *(_DWORD *)(v163[0] + 16);
  if (v144 >= *(_DWORD *)(v163[0] + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v144 = *(_DWORD *)(v143 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v143 + 8) + 8 * v144) = v142;
  ++*(_DWORD *)(v143 + 16);
  *((_BYTE *)&v198.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v198, "OBJC_CLASS_");
  if (v169 >= 0)
    v145 = (const std::string::value_type *)&__dst;
  else
    v145 = (const std::string::value_type *)__dst;
  if (v169 >= 0)
    v146 = HIBYTE(v169) & 0x7F;
  else
    v146 = v168;
  std::string::append(&v198, v145, v146);
  v147 = llvm::Module::getGlobalVariable();
  if (v147)
  {
    v148 = v147;
    v149 = v163[0];
    sub_22E670C54(v163, v164);
    sub_22F29F5C8(v149);
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    sub_22E6242E0(*(uint64_t **)(a1 + 8), v148);
  }
  else
  {
    v160 = 260;
    v159 = &v198;
    v148 = sub_22E58334C(a1, (uint64_t)&v159, v163, (uint64_t)"__OBJC,__class,regular,no_dead_strip", 36, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
  }
  v150 = *(_DWORD *)(a1 + 1352);
  if (v150 >= *(_DWORD *)(a1 + 1356))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v150 = *(_DWORD *)(a1 + 1352);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1344) + 8 * v150) = v148;
  ++*(_DWORD *)(a1 + 1352);
  v151 = *(_DWORD *)(a1 + 1496);
  if (v151 >= *(_DWORD *)(a1 + 1500))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v151 = *(_DWORD *)(a1 + 1496);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1488) + 8 * v151) = v158;
  ++*(_DWORD *)(a1 + 1496);
  sub_22F278254(a1 + 1152);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
  sub_22E3CEB30((void ***)&v198);
  if (v187 != v189)
    free(v187);
  v152 = 288;
  do
  {
    v153 = *(_BYTE **)&v189[v152 + 16];
    if (&v189[v152 + 32] != v153)
      free(v153);
    v152 -= 144;
  }
  while (v152);
  if (SHIBYTE(v169) < 0)
    operator delete(__dst);
}

void sub_22E57F350(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, llvm::Value *a6@<X5>, uint64_t *a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  llvm::LLVMContext *v22;
  _OWORD v23[3];
  uint64_t v24;

  v18 = *(_OWORD *)(a3 + 16);
  v23[0] = *(_OWORD *)a3;
  v23[1] = v18;
  v23[2] = *(_OWORD *)(a3 + 32);
  v24 = *(_QWORD *)(a3 + 48);
  v19 = *(_QWORD *)(a2[18] + 144);
  v20 = sub_22F36E1B8(v19);
  v21 = *(_QWORD *)(v20 + 48);
  if (v21)
    v22 = (llvm::LLVMContext *)(v21 & 0xFFFFFFFFFFFFFFF0);
  else
    v22 = (llvm::LLVMContext *)sub_22EF6462C(v19, v20);
  sub_22E587B1C(a9, a1, a2, (uint64_t)v23, a4, a5, a6, v22, 0, a7, a10, a8, (_QWORD *)(a1 + 2488));
}

void sub_22E57F42C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t *a11, uint64_t a12)
{
  llvm::Type *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Type **v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t *v29;
  llvm::LLVMContext *v30;
  llvm::GetElementPtrInst *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  const std::string::value_type *v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t *GlobalVariable;
  llvm::LLVMContext *v39;
  uint64_t v40;
  llvm::Type ***v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  llvm::Type **v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  char v51;
  _OWORD v56[3];
  uint64_t v57;
  _QWORD v58[3];
  int v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[48];
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[48];
  std::string v68;
  __int16 v69;
  __int128 v70;
  std::string::size_type v71;

  v17 = *(llvm::Type **)(a1 + 2600);
  v18 = *(unsigned __int8 *)(a2 + 130);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"objc_super";
  v69 = 259;
  v19 = sub_22E4D83CC(a2, v17, v18, (uint64_t)&v68, 0, 0);
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 2552);
  v69 = 257;
  v23 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, a8, v22, (uint64_t)&v68);
  v24 = 0;
  v51 = v21;
  if (v19 <= 7)
    v25 = 0;
  else
    v25 = v19 & 0xFFFFFFFFFFFFFFF8;
  if (v19 <= 7)
    v26 = 0;
  else
    v26 = v21 & 0xFFFFFFFFFFFFFFF8;
  v50 = v25;
  v63[0] = v25;
  v63[1] = v26;
  if (v19 >= 8)
    v24 = 1 << (v51 & 7 | (8 * (v19 & 7u)));
  v63[2] = v24;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v69 = 257;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v63, 0, (uint64_t)&v68, (uint64_t)v67);
  sub_22E3BEDDC(a2 + 272, v23, (uint64_t)v67);
  v27 = (llvm::Type *)llvm::PointerType::get();
  if (!a10)
  {
    if (a7)
    {
      v33 = sub_22F3B46CC(a6);
      v34 = (uint64_t)sub_22E588CAC(a1, a2, v33);
      goto LABEL_24;
    }
    sub_22EFC683C((uint64_t *)(a6 + 40), &v68);
    v35 = "OBJC_CLASS_";
    goto LABEL_16;
  }
  if (!a7)
  {
    sub_22EFC683C((uint64_t *)(a6 + 40), &v68);
    v35 = "OBJC_METACLASS_";
LABEL_16:
    v36 = std::string::insert(&v68, 0, v35);
    v37 = v36->__r_.__value_.__r.__words[2];
    v70 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v71 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    GlobalVariable = (uint64_t *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = (uint64_t *)llvm::User::operator new((llvm::User *)0x58);
      v69 = 260;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      llvm::GlobalVariable::GlobalVariable();
    }
    if (SHIBYTE(v71) < 0)
      operator delete((void *)v70);
    v39 = *(llvm::LLVMContext **)(a1 + 2768);
    v69 = 257;
    v31 = sub_22E3C4170((uint64_t *)(a2 + 272), v39, GlobalVariable, 0, 1, (uint64_t)&v68);
    v32 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    v69 = 257;
    goto LABEL_23;
  }
  v28 = sub_22F3B46CC(a6);
  v29 = (uint64_t *)sub_22E588CAC(a1, a2, v28);
  v30 = *(llvm::LLVMContext **)(a1 + 2768);
  v69 = 257;
  v31 = sub_22E3C4170((uint64_t *)(a2 + 272), v30, v29, 0, 0, (uint64_t)&v68);
  v32 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v69 = 257;
LABEL_23:
  v34 = sub_22E3C3200((uint64_t *)(a2 + 272), v27, (uint64_t)v31, v32, 0, (uint64_t)&v68);
LABEL_24:
  v40 = v34;
  v41 = (llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280);
  v42 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v43 = sub_22F36E27C(v42);
  v44 = *(_QWORD *)(v43 + 48);
  if (v44)
    v45 = (llvm::LLVMContext *)(v44 & 0xFFFFFFFFFFFFFFF0);
  else
    v45 = (llvm::LLVMContext *)sub_22EF6462C(v42, v43);
  v46 = sub_22E66CB04(v41, v45);
  v69 = 257;
  v47 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v40, v46, (uint64_t)&v68);
  v58[0] = v50;
  v58[1] = v26;
  if (v19 < 8)
    v48 = 0;
  else
    v48 = 1 << (v51 & 7 | (8 * (v19 & 7u)));
  v58[2] = v48;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v69 = 257;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v58, 1, (uint64_t)&v68, (uint64_t)v62);
  sub_22E3BEDDC(a2 + 272, v47, (uint64_t)v62);
  v49 = *(_OWORD *)(a3 + 16);
  v56[0] = *(_OWORD *)a3;
  v56[1] = v49;
  v56[2] = *(_OWORD *)(a3 + 32);
  v57 = *(_QWORD *)(a3 + 48);
  sub_22E587B1C(a9, a1, (_QWORD *)a2, (uint64_t)v56, a4, a5, (llvm::Value *)(v19 & 0xFFFFFFFFFFFFFFF8), *(llvm::LLVMContext **)(a1 + 2592), 1, a11, a12, a6, (_QWORD *)(a1 + 2488));
}

uint64_t sub_22E57F878(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = a1 + 54;
  v7 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 144) + 15192), "Protocol", 8uLL);
  sub_22E584F38(v5, &v7);
  sub_22E5862E0(a1, a3);
  sub_22E589100((uint64_t)(a1 + 311));
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22E57F900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  _QWORD v11[3];

  v4 = a1 + 1320;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v10 = v6;
  sub_22F275184(v4, &v10, (uint64_t)v11);
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  result = sub_22F24C318(*(_QWORD *)(a1 + 1296), *(_DWORD *)(a1 + 1312), v8, v11);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2);
  return result;
}

uint64_t sub_22E57F988(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Constant *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  llvm::Constant *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  llvm::Constant *v46;
  llvm::Type *v47;
  uint64_t NullValue;
  llvm::Constant *v49;
  llvm::DataLayout *DataLayout;
  llvm::Type *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  BOOL v55;
  unint64_t ABITypeAlignment;
  uint64_t v57;
  void **v58;
  unsigned int v59;
  void **v60;
  unsigned int v61;
  void **v62;
  unsigned int v63;
  void **v64;
  unsigned int v65;
  void **v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  unsigned int v74;
  void *v75;
  size_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  unint64_t v82;
  _DWORD *v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  void *v92;
  void *v93;
  uint64_t v94;
  unsigned int v95;
  void *v96;
  void *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  unint64_t v103;
  _DWORD *v104;
  unsigned int v105;
  uint64_t v106;
  void *v107;
  uint64_t i;
  uint64_t *v109;
  uint64_t v110;
  llvm::Constant *v111;
  uint64_t v112;
  llvm::Constant *v113;
  llvm::Constant *v114;
  _QWORD v115[4];
  __int16 v116;
  uint64_t v117[7];
  uint64_t *v118;
  unsigned int v119;
  uint64_t *v120;
  unsigned int v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t *v124;
  unsigned int v125;
  _BYTE v126[32];
  _QWORD v127[4];
  __int16 v128;
  void **v129[7];
  _QWORD v130[4];
  __int16 v131;
  _QWORD v132[4];
  __int16 v133;
  _QWORD v134[4];
  __int16 v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  _BYTE v139[128];
  _QWORD v140[3];
  char v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  _QWORD v147[3];
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1296;
  v5 = a2[5];
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v118 = v6;
  v7 = sub_22F24C2B0(a1 + 1296, (uint64_t *)&v118);
  v8 = v7[1];
  if (v8 && !llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7[1]))
    return v8;
  v10 = a2[13];
  if (!v10)
  {
    sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v10 = a2[13];
  }
  v110 = v4;
  if (v10 < 8)
    v11 = 0;
  else
    v11 = *(_QWORD **)(v10 & 0xFFFFFFFFFFFFFFF8);
  if (v11)
    v12 = v11;
  else
    v12 = a2;
  v118 = (uint64_t *)sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "Protocol", 8uLL);
  sub_22E584F38((_QWORD *)(a1 + 432), &v118);
  sub_22E58916C((uint64_t)&v118, (uint64_t)v12);
  v136 = *(_QWORD *)(a1 + 8);
  v137 = v139;
  v138 = 0x1000000000;
  memset(v140, 0, sizeof(v140));
  v13 = *(_QWORD *)(a1 + 2688);
  v117[0] = (uint64_t)&v136;
  memset(&v117[1], 0, 27);
  v141 = 1;
  v117[5] = 0;
  v117[6] = v13;
  if (v13)
    BYTE2(v117[4]) = (*(_DWORD *)(v13 + 8) & 0x200) != 0;
  v112 = v13;
  v14 = sub_22F3B5E40((uint64_t)v12);
  v146 = 261;
  v142 = v14;
  v143 = v15;
  v114 = (llvm::Constant *)sub_22E585048(a1, (uint64_t *)&v142, 6, v122, v123);
  v16 = sub_22F3B5E40((uint64_t)v12);
  v146 = 261;
  v142 = v16;
  v143 = v17;
  v113 = (llvm::Constant *)sub_22E585048(a1, (uint64_t *)&v142, 7, v124, v125);
  v18 = 0;
  v19 = v12[5];
  v20 = "";
  if ((v19 & 7) == 0)
  {
    v21 = v19 & 0xFFFFFFFFFFFFFFF8;
    if (v21)
    {
      v22 = *(_DWORD **)(v21 + 16);
      v23 = *v22;
      v20 = (const char *)(v22 + 4);
      v18 = v23;
    }
  }
  v24 = 0;
  v25 = 0;
  v135 = 1283;
  v134[0] = "OBJC_PROTOCOL_METHOD_TYPES_";
  v134[2] = v20;
  v134[3] = v18;
  v142 = &v144;
  v143 = (void *)0x800000000;
  do
  {
    v26 = &(&v118)[6 * v25];
    v27 = *((unsigned int *)v26 + 2);
    if ((_DWORD)v27)
    {
      v28 = *v26;
      v29 = 8 * v27;
      do
      {
        v30 = sub_22E586218(a1, (_QWORD *)*v28, 1);
        v31 = v143;
        if (v143 >= (unint64_t)HIDWORD(v143))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = v143;
        }
        *((_QWORD *)v142 + v31) = v30;
        v24 = (_DWORD)v143 + 1;
        LODWORD(v143) = (_DWORD)v143 + 1;
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    ++v25;
  }
  while (v25 != 4);
  v32 = (llvm::Constant *)sub_22E589264(a1, (uint64_t)v134, (int)v142, (llvm::Type *)v24, a1 + 2488);
  if (v142 != &v144)
    free(v142);
  v33 = 0;
  v34 = v12[5];
  v35 = "";
  if ((v34 & 7) == 0)
  {
    v36 = v34 & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      v37 = *(_DWORD **)(v36 + 16);
      v38 = *v37;
      v35 = (const char *)(v37 + 4);
      v33 = v38;
    }
  }
  v133 = 1283;
  v132[0] = "OBJC_$_PROP_PROTO_LIST_";
  v132[2] = v35;
  v132[3] = v33;
  v39 = (llvm::Constant *)sub_22E58591C(a1, (uint64_t)v132, 0, (unint64_t)v12, a1 + 2488, 0);
  v40 = 0;
  v41 = v12[5];
  v42 = "";
  if ((v41 & 7) == 0)
  {
    v43 = v41 & 0xFFFFFFFFFFFFFFF8;
    if (v43)
    {
      v44 = *(_DWORD **)(v43 + 16);
      v45 = *v44;
      v42 = (const char *)(v44 + 4);
      v40 = v45;
    }
  }
  v131 = 1283;
  v130[0] = "OBJC_$_CLASS_PROP_PROTO_LIST_";
  v130[2] = v42;
  v130[3] = v40;
  v46 = (llvm::Constant *)sub_22E58591C(a1, (uint64_t)v130, 0, (unint64_t)v12, a1 + 2488, 1);
  if (llvm::Constant::isNullValue(v114)
    && llvm::Constant::isNullValue(v113)
    && llvm::Constant::isNullValue(v32)
    && llvm::Constant::isNullValue(v39)
    && llvm::Constant::isNullValue(v46))
  {
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2712), v47);
  }
  else
  {
    v111 = v46;
    v49 = v32;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    v51 = *(llvm::Type **)(a1 + 2704);
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v51);
    v53 = (unint64_t)(v52 + 7) >> 3;
    v55 = v54 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v51);
    v142 = (void *)((ABITypeAlignment + v53 - 1) / ABITypeAlignment * ABITypeAlignment);
    v143 = (void *)v55;
    llvm::TypeSize::operator unsigned long long();
    v142 = *(void **)(a1 + 8);
    v143 = &v145;
    v144 = 0x1000000000;
    memset(v147, 0, sizeof(v147));
    v57 = *(_QWORD *)(a1 + 2704);
    v129[0] = &v142;
    memset(&v129[1], 0, 27);
    v148 = 1;
    v129[5] = 0;
    v129[6] = (void **)v57;
    if (v57)
      BYTE2(v129[4]) = (*(_DWORD *)(v57 + 8) & 0x200) != 0;
    sub_22F246F08((uint64_t *)v129);
    v58 = v129[0];
    v59 = *((_DWORD *)v129[0] + 4);
    if (v59 >= *((_DWORD *)v129[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v59 = *((_DWORD *)v58 + 4);
    }
    *((_QWORD *)v58[1] + v59) = v114;
    ++*((_DWORD *)v58 + 4);
    v60 = v129[0];
    v61 = *((_DWORD *)v129[0] + 4);
    if (v61 >= *((_DWORD *)v129[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v61 = *((_DWORD *)v60 + 4);
    }
    *((_QWORD *)v60[1] + v61) = v113;
    ++*((_DWORD *)v60 + 4);
    v62 = v129[0];
    v63 = *((_DWORD *)v129[0] + 4);
    if (v63 >= *((_DWORD *)v129[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v63 = *((_DWORD *)v62 + 4);
    }
    *((_QWORD *)v62[1] + v63) = v39;
    ++*((_DWORD *)v62 + 4);
    v64 = v129[0];
    v65 = *((_DWORD *)v129[0] + 4);
    if (v65 >= *((_DWORD *)v129[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v65 = *((_DWORD *)v64 + 4);
    }
    *((_QWORD *)v64[1] + v65) = v49;
    ++*((_DWORD *)v64 + 4);
    v66 = v129[0];
    v67 = *((_DWORD *)v129[0] + 4);
    if (v67 >= *((_DWORD *)v129[0] + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v67 = *((_DWORD *)v66 + 4);
    }
    v68 = 0;
    *((_QWORD *)v66[1] + v67) = v111;
    ++*((_DWORD *)v66 + 4);
    v69 = v12[5];
    v70 = "";
    if ((v69 & 7) == 0)
    {
      v71 = v69 & 0xFFFFFFFFFFFFFFF8;
      if (v71)
      {
        v72 = *(_DWORD **)(v71 + 16);
        v73 = *v72;
        v70 = (const char *)(v72 + 4);
        v68 = v73;
      }
    }
    v128 = 1283;
    v127[0] = "_OBJC_PROTOCOLEXT_";
    v127[2] = v70;
    v127[3] = v68;
    NullValue = sub_22E58334C(a1, (uint64_t)v127, (uint64_t *)v129, 0, 0, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 130), 1);
    v129[0] = (void **)v147;
    sub_22E3CEB30(v129);
    if (v143 != &v145)
      free(v143);
  }
  v74 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v74 = v138;
  }
  *((_QWORD *)v137 + v74) = NullValue;
  LODWORD(v138) = v138 + 1;
  v75 = sub_22F3B5E40((uint64_t)v12);
  v77 = sub_22E5832E4(a1, v75, v76);
  v78 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = v138;
  }
  v79 = 0;
  *((_QWORD *)v137 + v78) = v77;
  LODWORD(v138) = v138 + 1;
  v80 = v12[5];
  v81 = "";
  if ((v80 & 7) == 0)
  {
    v82 = v80 & 0xFFFFFFFFFFFFFFF8;
    if (v82)
    {
      v83 = *(_DWORD **)(v82 + 16);
      v84 = *v83;
      v81 = (const char *)(v83 + 4);
      v79 = v84;
    }
  }
  v116 = 1283;
  v115[0] = "OBJC_PROTOCOL_REFS_";
  v115[2] = v81;
  v115[3] = v79;
  v85 = v12[13];
  if (!v85)
  {
    sub_22E3CD31C((uint64_t *)(v12[12] + 88), v12[12]);
    v85 = v12[13];
  }
  if (v85 < 8)
  {
    if (v85 || (sub_22E3CD31C((uint64_t *)(v12[12] + 88), v12[12]), v88 = v12[13], v88 < 8))
    {
      v87 = 0;
      v89 = 0;
      goto LABEL_74;
    }
    v87 = 0;
    v86 = v88 & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v86 = v85 & 0xFFFFFFFFFFFFFFF8;
    v87 = *(_QWORD *)(v86 + 8);
  }
  v89 = *(_QWORD *)(v86 + 8) + 8 * *(unsigned int *)(v86 + 16);
LABEL_74:
  v90 = sub_22E5856C8(a1, (uint64_t)v115, v87, v89);
  v91 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v91 = v138;
  }
  *((_QWORD *)v137 + v91) = v90;
  LODWORD(v138) = v138 + 1;
  v92 = sub_22F3B5E40((uint64_t)v12);
  v146 = 261;
  v142 = v92;
  v143 = v93;
  v94 = sub_22E585048(a1, (uint64_t *)&v142, 4, v118, v119);
  v95 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v95 = v138;
  }
  *((_QWORD *)v137 + v95) = v94;
  LODWORD(v138) = v138 + 1;
  v96 = sub_22F3B5E40((uint64_t)v12);
  v146 = 261;
  v142 = v96;
  v143 = v97;
  v98 = sub_22E585048(a1, (uint64_t *)&v142, 5, v120, v121);
  v99 = v138;
  if (v138 >= HIDWORD(v138))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v99 = v138;
  }
  *((_QWORD *)v137 + v99) = v98;
  LODWORD(v138) = v138 + 1;
  if (v8)
  {
    sub_22E670C54(v117, v112);
    sub_22F29F5C8((uint64_t)&v136);
  }
  else
  {
    v100 = 0;
    v101 = v12[5];
    v102 = "";
    if ((v101 & 7) == 0)
    {
      v103 = v101 & 0xFFFFFFFFFFFFFFF8;
      if (v103)
      {
        v104 = *(_DWORD **)(v103 + 16);
        v105 = *v104;
        v102 = (const char *)(v104 + 4);
        v100 = v105;
      }
    }
    v146 = 1283;
    v142 = "OBJC_PROTOCOL_";
    v144 = (uint64_t)v102;
    v145 = v100;
    sub_22E670C54(v117, v112);
    v8 = sub_22F29F614((uint64_t)&v136);
    llvm::GlobalObject::setSection();
    v106 = v12[5];
    if ((v106 & 7) != 0)
      v107 = 0;
    else
      v107 = (void *)(v106 & 0xFFFFFFFFFFFFFFF8);
    v142 = v107;
    sub_22F24C2B0(v110, (uint64_t *)&v142)[1] = v8;
  }
  sub_22E6242E0(*(uint64_t **)(a1 + 8), v8);
  v142 = v140;
  sub_22E3CEB30((void ***)&v142);
  if (v137 != v139)
    free(v137);
  for (i = 0; i != -24; i -= 6)
  {
    v109 = (&v124)[i];
    if (&v126[i * 8] != (_BYTE *)v109)
      free(v109);
  }
  return v8;
}

uint64_t sub_22E580410(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  void *__p;
  uint64_t v13;
  char v14;

  if (sub_22EFDBD9C((uint64_t)a2))
  {
    v4 = sub_22E588370(a1, a2);
  }
  else
  {
    sub_22E5966F4(a1, (uint64_t)a2, 1, &__p);
    v5 = *(_QWORD *)(a1 + 8) + 280;
    v6 = sub_22E46D060(v5, (uint64_t)a2, *(_QWORD *)(a2[15] + 48));
    v7 = sub_22E46F2EC(v5, v6);
    v11 = 260;
    v10[0] = &__p;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
    v4 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v4, v7, 7, 0xFFFFFFFFLL, v10, v8);
    if (v14 < 0)
      operator delete(__p);
  }
  __p = a2;
  v13 = v4;
  sub_22F2543D4((uint64_t)v10, a1 + 1152, (uint64_t *)&__p, &v13);
  return v4;
}

uint64_t sub_22E580514(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  char *v12;
  __int128 v13;
  llvm::ConstantPointerNull **v14;
  _QWORD *v15;
  _QWORD *v16;
  llvm::PointerType *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t BranchWeights;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  llvm::Type **v25;
  int v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  _OWORD v36[3];
  __int128 v37;
  uint64_t v38;
  _OWORD v39[3];
  _OWORD v40[3];
  _QWORD v41[3];
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  llvm::Type **v46[7];
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  _BYTE v52[16];
  __int16 v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[192];
  void *v57;
  uint64_t v58;
  _BYTE v59[16];
  void *v60;
  uint64_t v61;
  _QWORD v62[7];

  v62[5] = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)(a2 + 272);
  v10 = (uint64_t *)(a2 + 2904);
  v46[0] = *(llvm::Type ***)(a4 + 120);
  v51[0] = 0;
  v11 = sub_22E3CED3C((uint64_t *)(a2 + 2904), v46, v51);
  v12 = (char *)v51[0];
  if (!v11)
    v12 = (char *)(*(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920));
  v13 = *(_OWORD *)(v12 + 24);
  v48 = *(_OWORD *)(v12 + 8);
  v49 = v13;
  v50 = *(_OWORD *)(v12 + 40);
  v47[1] = v13;
  v47[2] = v50;
  v47[0] = v48;
  v53 = 257;
  v14 = (llvm::ConstantPointerNull **)sub_22E3C2A7C(v9, (uint64_t)v47, (uint64_t)v51);
  if ((*(_BYTE *)(a4 + 58) & 2) == 0)
  {
    v35 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1[1] + 144) + 15192), "self", 4uLL) | 1;
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
    v31 = sub_22F36E1B8(v30);
    v32 = *(_QWORD *)(v31 + 48);
    if (v32)
      v33 = v32 & 0xFFFFFFFFFFFFFFF0;
    else
      v33 = sub_22EF6462C(v30, v31);
    v51[0] = v52;
    v51[1] = (void *)0x800000000;
    v54 = v56;
    v55 = 0x100000000;
    v57 = v59;
    v58 = 0x100000000;
    v60 = v62;
    v61 = 0x200000000;
    v62[4] = 0;
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_22E55B7D8((uint64_t)a1, a2, (uint64_t)v41, v33, v35, (uint64_t)v14, v51, a5, (uint64_t)v46, 0, 1);
    v40[0] = v48;
    v40[1] = v49;
    v40[2] = v50;
    sub_22E3BEDDC((uint64_t)v9, v46[0], (uint64_t)v40);
    v34 = sub_22F279768(a5);
    if (v60 != v62)
      free(v60);
    if (v57 != v59)
      free(v57);
    if (v54 != v56)
      free(v54);
    if (v51[0] == v52)
    {
      if (!v34)
        goto LABEL_8;
    }
    else
    {
      free(v51[0]);
      if (!v34)
        goto LABEL_8;
    }
  }
  v51[0] = "objc_direct_method.self_is_nil";
  v53 = 259;
  v15 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v51[0] = "objc_direct_method.cont";
  v53 = 259;
  v16 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v18 = llvm::ConstantPointerNull::get(*v14, v17);
  v46[0] = *(llvm::Type ***)(a1[1] + 232);
  v53 = 257;
  v19 = sub_22E3C18F4((uint64_t)v9, 32, (uint64_t *)v14, v18, (uint64_t)v51);
  BranchWeights = llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)v46);
  sub_22E3D26FC(v9, v19, (uint64_t)v15, (uint64_t)v16, BranchWeights, 0);
  sub_22E5ED9B4((_QWORD *)a2, v15, 0);
  v21 = *(_QWORD *)(a4 + 80);
  *(_QWORD *)(a2 + 320) = v15;
  *(_QWORD *)(a2 + 328) = v15 + 5;
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v22 || (*(_DWORD *)(v22 + 16) & 0xFF800FF) != 0x528000B)
  {
    v23 = *(_OWORD *)(a2 + 1752);
    v39[0] = *(_OWORD *)(a2 + 1736);
    v39[1] = v23;
    v39[2] = *(_OWORD *)(a2 + 1768);
    sub_22E620824(a2, (uint64_t)v39, v21);
  }
  v37 = *(_OWORD *)(a2 + 1712);
  v38 = *(_QWORD *)(a2 + 1728);
  sub_22E48BA00((_QWORD *)a2, (uint64_t)&v37);
  sub_22E5ED9B4((_QWORD *)a2, v16, 0);
  *(_QWORD *)(a2 + 320) = v16;
  *(_QWORD *)(a2 + 328) = v16 + 5;
LABEL_8:
  result = sub_22EFC9084(*(_QWORD *)(a4 + 128), 1);
  if ((_DWORD)result)
  {
    v25 = (llvm::Type **)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, a4);
    v46[0] = *(llvm::Type ***)(a4 + 128);
    v51[0] = 0;
    v26 = sub_22E3CED3C(v10, v46, v51);
    v27 = (char *)v51[0];
    if (!v26)
      v27 = (char *)(*(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920));
    v28 = *(_OWORD *)(v27 + 8);
    v29 = *(_OWORD *)(v27 + 40);
    v36[1] = *(_OWORD *)(v27 + 24);
    v36[2] = v29;
    v36[0] = v28;
    return sub_22E3BEDDC((uint64_t)v9, v25, (uint64_t)v36);
  }
  return result;
}

uint64_t sub_22E5809B8(uint64_t a1)
{
  return sub_22E58934C(a1 + 2488);
}

uint64_t sub_22E5809C0(uint64_t a1)
{
  return sub_22E5894A4(a1 + 2488);
}

uint64_t sub_22E5809C8(uint64_t a1, int a2, int a3)
{
  return sub_22E589600(a1 + 2488, a2, a3);
}

uint64_t sub_22E5809D0(uint64_t a1)
{
  return sub_22E5898E0(a1 + 2488);
}

uint64_t sub_22E5809D8(uint64_t a1)
{
  return sub_22E5898E0(a1 + 2488);
}

uint64_t sub_22E5809E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22E5899FC(a1 + 2488, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_22E5809E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22E5899FC(a1 + 2488, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_22E5809F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15192), "NSAutoreleasePool", 0x11uLL);
  return sub_22E589014(a1, a2, v4);
}

uint64_t sub_22E580A3C(uint64_t a1)
{
  return sub_22E589AFC(a1 + 2488);
}

uint64_t sub_22E580A4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t result;
  _BYTE v16[32];
  __int16 v17;
  uint64_t v18;

  v8 = *(unsigned __int8 **)(a3 + 16);
  if (v8)
  {
    v10 = sub_22F273FC8(a2, v8, a5);
    v11 = *(_QWORD *)(a1 + 2552);
    v17 = 257;
    v9 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v10, v11, (uint64_t)v16);
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 2792) + 8 * *(unsigned int *)(a2 + 2800) - 8);
  }
  v18 = v9;
  v12 = sub_22E58B748(a1 + 2488);
  v17 = 257;
  v14 = sub_22E479C7C(a2, v12, v13, (uint64_t)&v18, 1, (uint64_t)v16);
  llvm::Value::getContext(v14);
  *((_QWORD *)v14 + 8) = llvm::AttributeList::addAttributeAtIndex();
  result = sub_22F24866C(a2 + 272);
  if (a4)
  {
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
  }
  return result;
}

uint64_t sub_22E580B30(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 8);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v6 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a1 + 2560);
  v13 = 257;
  v14 = sub_22E3C1740(a2 + 34, 49, v6, v7, (uint64_t)v12);
  v8 = sub_22E58BF38(a1 + 2488);
  v12[0] = "weakread";
  v13 = 259;
  v10 = sub_22F24EEDC((uint64_t)a2, v8, v9, (uint64_t)&v14, 1, (uint64_t)v12);
  v13 = 257;
  return sub_22E3C1740(a2 + 34, 49, (uint64_t)v10, v5, (uint64_t)v12);
}

llvm::Value *sub_22E580C14(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v5;
  llvm::Type *v8;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t ABITypeAlignment;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[6];

  v5 = (uint64_t)a3;
  v31[5] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v8);
    v11 = (unint64_t)(v10 + 7) >> 3;
    v13 = v12 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v8);
    v29[0] = (ABITypeAlignment + v11 - 1) / ABITypeAlignment * ABITypeAlignment;
    v29[1] = v13;
    v15 = llvm::TypeSize::operator unsigned long long();
    v16 = 32;
    if (v15 == 4)
    {
      v16 = 24;
      v17 = v29;
    }
    else
    {
      v17 = v31;
    }
    v18 = *(_QWORD *)(a1[1] + v16);
    *((_WORD *)v17 + 16) = 257;
    v19 = sub_22E3C1740(a2 + 34, 49, v5, v18, (uint64_t)v17);
    v20 = a1[316];
    v30 = 257;
    v5 = sub_22E3C1740(a2 + 34, 48, v19, v20, (uint64_t)v29);
  }
  v21 = a1[319];
  v30 = 257;
  v22 = sub_22E3C1740(a2 + 34, 49, v5, v21, (uint64_t)v29);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v23 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v23 = *(_QWORD *)a4;
  v24 = a1[320];
  v30 = 257;
  v25 = sub_22E3C1740(a2 + 34, 49, v23, v24, (uint64_t)v29);
  v31[0] = v22;
  v31[1] = v25;
  v26 = sub_22E58BFD0((uint64_t)(a1 + 311));
  v29[0] = "weakassign";
  v30 = 259;
  return sub_22F24EEDC((uint64_t)a2, v26, v27, (uint64_t)v31, 2, (uint64_t)v29);
}

llvm::Value *sub_22E580E00(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4, char a5)
{
  uint64_t v7;
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t ABITypeAlignment;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  const char *v32;
  llvm::Value *v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[6];

  v7 = (uint64_t)a3;
  v37[5] = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
    v13 = (unint64_t)(v12 + 7) >> 3;
    v15 = v14 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
    v35[0] = (ABITypeAlignment + v13 - 1) / ABITypeAlignment * ABITypeAlignment;
    v35[1] = v15;
    v17 = llvm::TypeSize::operator unsigned long long();
    v18 = 32;
    if (v17 == 4)
    {
      v18 = 24;
      v19 = v35;
    }
    else
    {
      v19 = v37;
    }
    v20 = *(_QWORD *)(a1[1] + v18);
    *((_WORD *)v19 + 16) = 257;
    v21 = sub_22E3C1740(a2 + 34, 49, v7, v20, (uint64_t)v19);
    v22 = a1[316];
    v36 = 257;
    v7 = sub_22E3C1740(a2 + 34, 48, v21, v22, (uint64_t)v35);
  }
  v23 = a1[319];
  v36 = 257;
  v24 = sub_22E3C1740(a2 + 34, 49, v7, v23, (uint64_t)v35);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v25 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v25 = *(_QWORD *)a4;
  v26 = a1[320];
  v36 = 257;
  v27 = sub_22E3C1740(a2 + 34, 49, v25, v26, (uint64_t)v35);
  v37[0] = v24;
  v37[1] = v27;
  v28 = (uint64_t)(a1 + 311);
  if ((a5 & 1) != 0)
  {
    v29 = sub_22E58C108(v28);
    v31 = v30;
    v32 = "threadlocalassign";
  }
  else
  {
    v29 = sub_22E58C06C(v28);
    v31 = v33;
    v32 = "globalassign";
  }
  v35[0] = v32;
  v36 = 259;
  return sub_22F24EEDC((uint64_t)a2, v29, v31, (uint64_t)v37, 2, (uint64_t)v35);
}

llvm::Value *sub_22E581014(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t ABITypeAlignment;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *v29;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[6];

  v7 = (uint64_t)a3;
  v33[5] = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
    v13 = (unint64_t)(v12 + 7) >> 3;
    v15 = v14 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
    v31[0] = (ABITypeAlignment + v13 - 1) / ABITypeAlignment * ABITypeAlignment;
    v31[1] = v15;
    v17 = llvm::TypeSize::operator unsigned long long();
    v18 = 32;
    if (v17 == 4)
    {
      v18 = 24;
      v19 = v31;
    }
    else
    {
      v19 = v33;
    }
    v20 = *(_QWORD *)(a1[1] + v18);
    *((_WORD *)v19 + 16) = 257;
    v21 = sub_22E3C1740(a2 + 34, 49, v7, v20, (uint64_t)v19);
    v22 = a1[316];
    v32 = 257;
    v7 = sub_22E3C1740(a2 + 34, 48, v21, v22, (uint64_t)v31);
  }
  v23 = a1[319];
  v32 = 257;
  v24 = sub_22E3C1740(a2 + 34, 49, v7, v23, (uint64_t)v31);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v25 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v25 = *(_QWORD *)a4;
  v26 = a1[320];
  v32 = 257;
  v27 = sub_22E3C1740(a2 + 34, 49, v25, v26, (uint64_t)v31);
  v33[0] = v24;
  v33[1] = v27;
  v33[2] = a5;
  v28 = sub_22E58C1A4((uint64_t)(a1 + 311));
  v32 = 257;
  return sub_22F24EEDC((uint64_t)a2, v28, v29, (uint64_t)v33, 3, (uint64_t)v31);
}

llvm::Value *sub_22E581200(_QWORD *a1, _QWORD *a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v5;
  llvm::Type *v8;
  llvm::DataLayout *DataLayout;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  unint64_t ABITypeAlignment;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[6];

  v5 = (uint64_t)a3;
  v31[5] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if (*((_BYTE *)*a3 + 8) != 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a1[1] + 200));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v8);
    v11 = (unint64_t)(v10 + 7) >> 3;
    v13 = v12 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v8);
    v29[0] = (ABITypeAlignment + v11 - 1) / ABITypeAlignment * ABITypeAlignment;
    v29[1] = v13;
    v15 = llvm::TypeSize::operator unsigned long long();
    v16 = 32;
    if (v15 == 4)
    {
      v16 = 24;
      v17 = v29;
    }
    else
    {
      v17 = v31;
    }
    v18 = *(_QWORD *)(a1[1] + v16);
    *((_WORD *)v17 + 16) = 257;
    v19 = sub_22E3C1740(a2 + 34, 49, v5, v18, (uint64_t)v17);
    v20 = a1[316];
    v30 = 257;
    v5 = sub_22E3C1740(a2 + 34, 48, v19, v20, (uint64_t)v29);
  }
  v21 = a1[319];
  v30 = 257;
  v22 = sub_22E3C1740(a2 + 34, 49, v5, v21, (uint64_t)v29);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v23 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v23 = *(_QWORD *)a4;
  v24 = a1[320];
  v30 = 257;
  v25 = sub_22E3C1740(a2 + 34, 49, v23, v24, (uint64_t)v29);
  v31[0] = v22;
  v31[1] = v25;
  v26 = sub_22E58C248((uint64_t)(a1 + 311));
  v29[0] = "strongassign";
  v30 = 259;
  return sub_22F24EEDC((uint64_t)a2, v26, v27, (uint64_t)v31, 2, (uint64_t)v29);
}

double sub_22E5813EC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;

  v13 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 35 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = sub_22F272660(v13);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2, v15, a5);
  return sub_22F279218(a2, v15, a4, a5, a6, v16, a7);
}

uint64_t sub_22E581498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22F27918C(a1, *(_QWORD *)(a1 + 8), a3, a4);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16488));
  return llvm::ConstantInt::get();
}

llvm::Value *sub_22E5814DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  __int128 v22[3];
  __int128 v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = a2 + 34;
  v11 = *(_OWORD *)(a4 + 16);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v11;
  v23[2] = *(_OWORD *)(a4 + 32);
  v12 = a2[1];
  v28 = 257;
  sub_22E3BEE6C(a2 + 34, v23, v12, (uint64_t)v27, (uint64_t)&v24);
  v13 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = v26;
  v14 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v14;
  v22[2] = *(_OWORD *)(a3 + 32);
  v15 = a2[1];
  v28 = 257;
  sub_22E3BEE6C(v10, v22, v15, (uint64_t)v27, (uint64_t)&v24);
  v16 = v25;
  *(_OWORD *)a3 = v24;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 32) = v26;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v17 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v17 = *(_QWORD *)a3;
  v27[0] = v17;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v18 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v18 = *(_QWORD *)a4;
  v27[1] = v18;
  v27[2] = a5;
  v19 = sub_22E58C2E4(a1 + 2488);
  LOWORD(v26) = 257;
  return sub_22F24EEDC((uint64_t)a2, v19, v20, (uint64_t)v27, 3, (uint64_t)&v24);
}

uint64_t sub_22E581650(size_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NullValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  _BYTE v26[32];
  uint64_t v27[3];
  __int16 v28;
  void *v29;
  uint64_t v30;
  _OWORD v31[8];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a2 + 96), (llvm::Type *)a2);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 152) + 246) & 6) == 0)
    return NullValue;
  v7 = *(_QWORD *)(a3 + 368);
  v27[0] = a2;
  v27[1] = 0;
  v27[2] = v7;
  v28 = 1;
  v29 = v31;
  v31[0] = xmmword_22F4555C0;
  v30 = 0x800000001;
  v8 = *(_QWORD *)(a3 + 352);
  v9 = *(unsigned int *)(v8 + 112);
  if (!(_DWORD)v9)
  {
LABEL_20:
    v24 = v26;
    v25 = xmmword_22F44E330;
    NullValue = sub_22E5871D0(v27, a1, (const char **)&v24);
    if ((*(_DWORD *)(*(_QWORD *)(a2 + 152) + 52) & 0x200000) != 0 && (_QWORD)v25)
    {
      printf("\n block variable layout for block: ");
      sub_22E587660((unsigned __int8 *)v24, v25);
    }
    if (v24 != v26)
      free(v24);
    goto LABEL_25;
  }
  v22 = a1;
  v10 = 0;
  v11 = *(_QWORD **)(v8 + 104);
  v12 = 16 * v9;
  do
  {
    v13 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 48);
    v23 = *v11 & 0xFFFFFFFFFFFFFFF8;
    v24 = 0;
    v14 = sub_22F246C54((uint64_t *)(a3 + 32), &v23, &v24);
    v15 = v24;
    if (!v14)
      v15 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 16 * *(unsigned int *)(a3 + 48));
    v16 = v15[1];
    if ((*(_BYTE *)v16 & 1) == 0)
    {
      v17 = v10;
      goto LABEL_18;
    }
    v17 = *(_QWORD *)(v16 + 16);
    if (v17 < v10)
      HIBYTE(v28) = 1;
    if ((*(_BYTE *)v11 & 2) != 0)
      goto LABEL_15;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v18 && *(_BYTE *)(v18 + 16) == 45)
    {
      sub_22E58792C(v27, v18, v17);
      goto LABEL_18;
    }
    if (sub_22E587A14(*(_QWORD *)(v27[0] + 144), v13) == 2)
    {
LABEL_15:
      v19 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v30;
      }
      v20 = (uint64_t *)((char *)v29 + 16 * v19);
      *v20 = v17;
      v20[1] = 1;
      LODWORD(v30) = v30 + 1;
    }
LABEL_18:
    v11 += 2;
    v10 = v17;
    v12 -= 16;
  }
  while (v12);
  a1 = v22;
  if ((_DWORD)v30)
    goto LABEL_20;
LABEL_25:
  if (v29 != v31)
    free(v29);
  return NullValue;
}

uint64_t sub_22E5818CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E58C378(a1, a2, a3);
  return sub_22E58C530(a1, 0);
}

void sub_22E5818F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  const std::string::value_type *v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  std::string::size_type v18;
  unsigned int v19;
  std::string v20;
  void *__p[2];
  uint64_t v22;

  sub_22E58C378(a1, a2, a3);
  v7 = *(_WORD *)(a3 + 20);
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8)
  {
    v9 = 24 * v8;
    for (i = *(_QWORD *)(a1 + 32) + 16; ; i += 24)
    {
      v11 = *(_DWORD *)(i - 16);
      v12 = "u";
      if (v11 == 6)
        goto LABEL_4;
      if ((v7 & 2) == 0)
      {
        v19 = v11 - 3;
        if (v19 <= 2)
          break;
      }
LABEL_25:
      v9 -= 24;
      if (!v9)
        return;
    }
    v12 = off_24FA65538[v19];
LABEL_4:
    std::string::append(a4, v12);
    v20.__r_.__value_.__r.__words[0] = *(_QWORD *)(i - 8);
    sub_22E3CE31C((uint64_t)__p);
    if (v22 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v22 >= 0)
      v14 = HIBYTE(v22) & 0x7F;
    else
      v14 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    sub_22E3CE31C((uint64_t)&v20);
    v15 = std::string::insert(&v20, 0, "l");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v22 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v22 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v22 >= 0)
      v18 = HIBYTE(v22) & 0x7F;
    else
      v18 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v17, v18);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
}

uint64_t sub_22E581A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type *v4;
  uint64_t result;
  char v7;

  *(_DWORD *)(a1 + 40) = 0;
  v7 = 0;
  v4 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *((_BYTE *)v4 + 16) != 45)
    return llvm::Constant::getNullValue(*(llvm::Constant **)(a2 + 96), v4);
  sub_22E58CCCC(a1, (uint64_t)v4, 0, &v7, 1);
  result = sub_22E58C530(a1, (llvm::Type *)1);
  if (*(_BYTE *)(result + 16) == 16)
    return llvm::ConstantExpr::getIntToPtr();
  return result;
}

uint64_t sub_22E581B20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2776);
}

uint64_t sub_22E581B28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  _DWORD *v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14[4];
  __int16 v15;

  v3 = a1 + 1296;
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 7) != 0)
    v5 = 0;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v14[0] = v5;
  v6 = sub_22F24C2B0(v3, v14);
  result = v6[1];
  if (!result)
  {
    llvm::User::operator new((llvm::User *)0x58);
    v8 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v8 == 0)
    {
      v12 = 0;
      v11 = "";
    }
    else
    {
      v10 = *(_DWORD **)(v8 + 16);
      v13 = *v10;
      v11 = (const char *)(v10 + 4);
      v12 = v13;
    }
    v15 = 1283;
    v14[0] = (uint64_t)"OBJC_PROTOCOL_";
    v14[2] = (uint64_t)v11;
    v14[3] = v12;
    v6[1] = llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    return v6[1];
  }
  return result;
}

uint64_t sub_22E581C2C(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[278];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 447) < 0)
  {
    if (*(_QWORD *)(v5 + 432))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 447))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45AD60;
  strcpy(v9, "_NSConstantStringClassReference");
  v8 = 0x80;
  v10 = 31;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[278];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 276));
    a1[278] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 276));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E581DE4(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[281];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 735) < 0)
  {
    if (*(_QWORD *)(v5 + 720))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 735))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x20uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45AD70;
  strcpy(v9, "_NSConstantArrayClassReference");
  v8 = 0x80;
  v10 = 30;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[281];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 279));
    a1[281] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 279));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E581F9C(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[284];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 759) < 0)
  {
    if (*(_QWORD *)(v5 + 744))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 759))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45AD80;
  strcpy(v9, "_NSConstantDictionaryClassReference");
  v8 = 0x80;
  v10 = 35;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[284];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 282));
    a1[284] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 282));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E582158(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[287];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 783) < 0)
  {
    if (*(_QWORD *)(v5 + 768))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 783))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45AD90;
  strcpy(v9, "_NSConstantIntegerNumberClassReference");
  v8 = 0x80;
  v10 = 38;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[287];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 285));
    a1[287] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 285));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E582310(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[290];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 807) < 0)
  {
    if (*(_QWORD *)(v5 + 792))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 807))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45ADA0;
  strcpy(v9, "_NSConstantFloatNumberClassReference");
  v8 = 0x80;
  v10 = 36;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[290];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 288));
    a1[290] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 288));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E5824CC(uint64_t *a1)
{
  uint64_t BitCast;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  _BYTE __p[24];

  BitCast = a1[293];
  if (BitCast)
    return BitCast;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 152);
  if (*(char *)(v5 + 831) < 0)
  {
    if (*(_QWORD *)(v5 + 816))
    {
LABEL_5:
      std::operator+<char>();
      v6 = std::string::append(&v16, "ClassReference");
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v4 = a1[1];
      v8 = __p[23];
      v9 = *(char **)__p;
      v10 = *(_QWORD *)&__p[8];
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(v5 + 831))
  {
    goto LABEL_5;
  }
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)__p = v9;
  *(_OWORD *)&__p[8] = xmmword_22F45ADB0;
  strcpy(v9, "_NSConstantDoubleNumberClassReference");
  v8 = 0x80;
  v10 = 37;
LABEL_10:
  v11 = llvm::ArrayType::get(*(llvm::ArrayType **)(v4 + 72), 0);
  if (v8 >= 0)
    v12 = __p;
  else
    v12 = v9;
  if (v8 >= 0)
    v13 = v8 & 0x7F;
  else
    v13 = v10;
  sub_22F29B660(a1[1], v11, (uint64_t)v12, v13);
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  v14 = a1[293];
  if (v14 != BitCast)
  {
    if (v14 && v14 != -8192 && v14 != -4096)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 291));
    a1[293] = BitCast;
    if (BitCast != -8192 && BitCast != -4096 && BitCast != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 291));
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return BitCast;
}

uint64_t sub_22E58268C()
{
  return llvm::PointerType::get();
}

_QWORD *sub_22E58269C(_QWORD *a1, uint64_t a2)
{
  void *v4;

  a1[1] = *(_QWORD *)(a2 + 8);
  if ((*(_QWORD *)a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    *a1 = *(_QWORD *)a2;
  }
  else
  {
    v4 = (void *)operator new[]();
    *a1 = v4;
    memcpy(v4, *(const void **)a2, *((unsigned int *)a1 + 2));
  }
  return a1;
}

uint64_t sub_22E582708(uint64_t a1, double a2)
{
  uint64_t v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = a1 + 8;
  v4 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v7, a2);
  v5 = llvm::APFloatBase::IEEEdouble(v4);
  MEMORY[0x23489F4E0](v3, v7, v5);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v7);
  return a1;
}

llvm::detail::IEEEFloat *sub_22E582758(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    MEMORY[0x23489F2A0](a1, a2);
  else
    llvm::detail::IEEEFloat::IEEEFloat(a1, a2);
  return a1;
}

uint64_t sub_22E5827B0(uint64_t a1, uint64_t a2)
{
  llvm::Type ***v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  unint64_t v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  llvm::ArrayType *v32;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (llvm::Type ***)(a2 + 280);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 16) = sub_22E66CB04((llvm::Type ***)(a2 + 280), *(llvm::LLVMContext **)(v4 + 16472));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v5 = sub_22E66CB04(v3, *(llvm::LLVMContext **)(v4 + 16488));
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 40) = v6[12];
  *(_QWORD *)(a1 + 48) = v6[13];
  if (*(_DWORD *)(v6[27] + 56) == 3)
    v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = v5;
  v7 = sub_22F36E1B8(v4);
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
    v9 = (llvm::LLVMContext *)(v8 & 0xFFFFFFFFFFFFFFF0);
  else
    v9 = (llvm::LLVMContext *)sub_22EF6462C(v4, v7);
  *(_QWORD *)(a1 + 64) = sub_22E66CB04(v3, v9);
  *(_QWORD *)(a1 + 72) = llvm::PointerType::get();
  v10 = sub_22F36E228(v4);
  v11 = *(_QWORD *)(v10 + 48);
  if (v11)
    v12 = (llvm::LLVMContext *)(v11 & 0xFFFFFFFFFFFFFFF0);
  else
    v12 = (llvm::LLVMContext *)sub_22EF6462C(v4, v10);
  *(_QWORD *)(a1 + 80) = sub_22E66CB04(v3, v12);
  v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v4 + 1960) + 80));
  if (v13)
    v14 = v13 + 40;
  else
    v14 = 0;
  v15 = sub_22E3CB704(*(llvm::StringMapImpl **)(v4 + 15192), "_objc_super", 0xBuLL);
  v16 = sub_22F3ACBB4(v4, 0, v14, 0, 0, v15, 0);
  v17 = (_QWORD *)v16;
  v18 = v16 + 64;
  if (v16)
    v19 = v16 + 64;
  else
    v19 = 0;
  v20 = sub_22F36E1B8(v4);
  v21 = *(_QWORD *)(v20 + 48);
  if (v21)
    v22 = v21 & 0xFFFFFFFFFFFFFFF0;
  else
    v22 = sub_22EF6462C(v4, v20);
  v23 = sub_22EFC7430(80, v4, v19, 0);
  v24 = (_QWORD *)sub_22EA41AB8(v23, 49, v19, 0);
  v24[5] = 0;
  v24[6] = v22;
  v24[7] = 0;
  v24[8] = 0;
  *v24 = &off_24FAC2F90;
  v24[9] = 0;
  sub_22EFCCFA0(v18, v23);
  v25 = sub_22F36E27C(v4);
  v26 = *(_QWORD *)(v25 + 48);
  if (v26)
    v27 = v26 & 0xFFFFFFFFFFFFFFF0;
  else
    v27 = sub_22EF6462C(v4, v25);
  v28 = sub_22EFC7430(80, v4, v19, 0);
  v29 = (_QWORD *)sub_22EA41AB8(v28, 49, v19, 0);
  v29[5] = 0;
  v29[6] = v27;
  v29[7] = 0;
  v29[8] = 0;
  *v29 = &off_24FAC2F90;
  v29[9] = 0;
  sub_22EFCCFA0(v18, v28);
  (*(void (**)(_QWORD *))(*v17 + 104))(v17);
  v30 = v17[6];
  if (v30)
    v31 = v30 & 0xFFFFFFFFFFFFFFF0;
  else
    v31 = sub_22EF6462C(v4, (unint64_t)v17);
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = sub_22EF5B848(v4, v31, 0);
  *(_QWORD *)(a1 + 112) = sub_22E66CB04(v3, *(llvm::LLVMContext **)(a1 + 96));
  *(_QWORD *)(a1 + 120) = llvm::PointerType::get();
  v32 = (llvm::ArrayType *)llvm::StructType::create();
  *(_QWORD *)(a1 + 128) = v32;
  llvm::ArrayType::get(v32, 0);
  *(_QWORD *)(a1 + 136) = llvm::StructType::create();
  *(_QWORD *)(a1 + 144) = llvm::PointerType::get();
  *(_QWORD *)(a1 + 152) = llvm::StructType::create();
  *(_QWORD *)(a1 + 160) = llvm::StructType::create();
  *(_QWORD *)(a1 + 168) = llvm::PointerType::get();
  return a1;
}

void sub_22E582BA0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22E582BDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  __int16 v8;
  _QWORD v9[4];
  __int16 v10;

  v8 = 1283;
  v5 = 2;
  if (a4 < 2)
    v5 = a4;
  v7[0] = ".";
  v7[2] = v4 + v5;
  v7[3] = a4 - v5;
  v9[0] = v7;
  v9[2] = "$B";
  v10 = 770;
  return llvm::Twine::str((llvm::Twine *)v9);
}

void sub_22E582D38()
{
  llvm::report_fatal_error((llvm *)"Objective-C support is unimplemented for object file format", (const char *)1);
  JUMPOUT(0x22E582D48);
}

uint64_t sub_22E582D4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)a1 = off_24FA65130;
  sub_22F2770A0((uint64_t *)(a1 + 2448));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2448), (void *)(72 * *(unsigned int *)(a1 + 2464)));
  sub_22F275768(a1 + 2400);
  v2 = *(_QWORD *)(a1 + 2344);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2328));
  v4 = *(_QWORD *)(a1 + 2320);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2304));
  v5 = *(_QWORD *)(a1 + 2296);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2280));
  v6 = *(_QWORD *)(a1 + 2272);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2256));
  v7 = *(_QWORD *)(a1 + 2248);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2232));
  v8 = *(_QWORD *)(a1 + 2224);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 2208));
  v9 = *(void **)(a1 + 2064);
  if (v9 != (void *)(a1 + 2080))
    free(v9);
  v10 = *(void **)(a1 + 1920);
  if (v10 != (void *)(a1 + 1936))
    free(v10);
  v11 = *(void **)(a1 + 1776);
  if (v11 != (void *)(a1 + 1792))
    free(v11);
  v12 = *(void **)(a1 + 1632);
  if (v12 != (void *)(a1 + 1648))
    free(v12);
  v13 = *(void **)(a1 + 1488);
  if (v13 != (void *)(a1 + 1504))
    free(v13);
  v14 = *(void **)(a1 + 1344);
  if (v14 != (void *)(a1 + 1360))
    free(v14);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1320), (void *)(8 * *(unsigned int *)(a1 + 1336)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1296), (void *)(16 * *(unsigned int *)(a1 + 1312)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1272), (void *)(16 * *(unsigned int *)(a1 + 1288)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1248), (void *)(16 * *(unsigned int *)(a1 + 1264)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1224), (void *)(16 * *(unsigned int *)(a1 + 1240)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1200), (void *)(16 * *(unsigned int *)(a1 + 1216)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1176), (void *)(16 * *(unsigned int *)(a1 + 1192)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1152), (void *)(16 * *(unsigned int *)(a1 + 1168)));
  sub_22F275768(a1 + 1120);
  sub_22E58304C((void **)(a1 + 848));
  sub_22E5830E4(a1 + 584);
  llvm::deallocate_buffer(*(llvm **)(a1 + 560), (void *)(16 * *(unsigned int *)(a1 + 576)));
  sub_22F275768(a1 + 528);
  sub_22F257CF8(a1 + 480);
  sub_22F257CF8(a1 + 432);
  v15 = *(void **)(a1 + 32);
  if (v15 != (void *)(a1 + 48))
    free(v15);
  return a1;
}

uint64_t sub_22E582FD4(_QWORD *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  uint64_t v3;
  const llvm::detail::DoubleAPFloat *v4;

  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v3 = a1[1];
  v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 != *(_QWORD *)(a2 + 8))
    return 0;
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v3)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v2, v4);
  return llvm::detail::IEEEFloat::bitwiseIsEqual(v2, v4);
}

void **sub_22E58304C(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v8 = result;
    v3 = 16 * v2;
    v4 = (char *)(v1 - 2);
    do
    {
      v5 = *(_QWORD *)&v4[v3];
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
        MEMORY[0x2348A0E84]();
      v3 -= 16;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_22E5830E4(uint64_t a1)
{
  sub_22E583128(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22E583128(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v8 = -4096;
    v9 = 0;
    v6 = -8192;
    v7 = 0;
    v1 = (uint64_t *)(result + 8);
    v2 = 16;
  }
  else
  {
    v2 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v2)
      return result;
    v8 = -4096;
    v9 = 0;
    v6 = -8192;
    v7 = 0;
    v1 = *(uint64_t **)(result + 8);
  }
  v3 = 16 * v2;
  do
  {
    if ((sub_22E583260((uint64_t)v1, (uint64_t)&v8) & 1) == 0)
      sub_22E583260((uint64_t)v1, (uint64_t)&v6);
    v4 = *v1;
    if (*v1 != -4096 && v4 != -8192 && v4 != 0)
      MEMORY[0x2348A0E84]();
    v1 += 2;
    v3 -= 16;
  }
  while (v3);
  if (v6 != -8192 && v6 != -4096 && v6)
    MEMORY[0x2348A0E84]();
  result = v8;
  if (v8 != -4096 && v8 != -8192)
  {
    if (v8)
      return MEMORY[0x2348A0E84]();
  }
  return result;
}

uint64_t sub_22E583260(uint64_t a1, uint64_t a2)
{
  const void *v3;
  int v6;
  size_t v7;

  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v3 = *(const void **)a1;
  if (v3 == (const void *)-4096)
    return *(_QWORD *)a2 == -4096;
  if (v3 == (const void *)-8192)
    return *(_QWORD *)a2 == -8192;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a2 + 8);
  if (v6 != (_DWORD)v7)
    return 0;
  if (!v6)
    return 1;
  return memcmp(v3, *(const void **)a2, v7) == 0;
}

