uint64_t sub_22F035A74(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  llvm::APFloatBase *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  llvm::APFloatBase *inited;
  llvm::APFloatBase *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  const llvm::APInt *v20;
  unsigned int v21;
  llvm::APFloatBase *v22;
  uint64_t v23;
  llvm::detail::DoubleAPFloat *v24;
  uint64_t v26;
  int v27;
  llvm::APFloatBase *v28;
  unsigned int v29;
  llvm::APFloatBase *v30;
  unsigned int v31;
  llvm::APFloatBase *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[8];

  v36[7] = *MEMORY[0x24BDAC8D0];
  LODWORD(v34) = 0;
  v6 = (llvm::APFloatBase *)sub_22F009DC4(&v34, a1, a2);
  v7 = 0;
  if (!(_DWORD)v6)
    goto LABEL_61;
  if ((_DWORD)v34 != 8)
  {
    if ((_DWORD)v34 == 3)
    {
      v9 = v36[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v6) == v9)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v36);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v36);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x2348A0E84](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v32;
      v8 = v33;
    }
    else
    {
      if ((_DWORD)v34 != 2)
      {
        sub_22F072CEC(a1, a2, 103, 0);
        goto LABEL_58;
      }
      if (*((_DWORD *)a3 + 2) > 0x40u || (v8 = v36[0], LODWORD(v36[0]) > 0x40))
      {
        llvm::APInt::assignSlowCase(a3, (const llvm::APInt *)&v35);
        goto LABEL_60;
      }
      *(_QWORD *)a3 = v35;
    }
    *((_DWORD *)a3 + 2) = v8;
LABEL_60:
    v7 = 1;
    goto LABEL_61;
  }
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *v10);
  v12 = *v10;
  if (*v10)
    v13 = *(unsigned __int8 *)(*v10 + 16) - 57 > 0xFFFFFFFD;
  else
    v13 = 0;
  if (!v13)
    v12 = sub_22F10CF48(v12);
  inited = (llvm::APFloatBase *)sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0));
  v15 = inited;
  v27 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088) + 80);
  v33 = v11;
  if (v11 > 0x40)
    inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v32);
  else
    v32 = 0;
  if (*((_DWORD *)a3 + 2) >= 0x41u)
  {
    inited = *(llvm::APFloatBase **)a3;
    if (*(_QWORD *)a3)
      inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](inited, 0x1000C8000313F17);
  }
  *(_QWORD *)a3 = v32;
  *((_DWORD *)a3 + 2) = v33;
  v7 = 1;
  if (!LODWORD(v36[0]))
    goto LABEL_61;
  v26 = a2;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  while (1)
  {
    v33 = 1;
    v32 = 0;
    v19 = *(_DWORD *)(v35 + v16);
    if (v19 == 3)
    {
      v22 = v15;
      v24 = (llvm::detail::DoubleAPFloat *)(v35 + v16 + 16);
      v23 = *(_QWORD *)v24;
      if (llvm::APFloatBase::PPCDoubleDouble(inited) == v23)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v24);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt(v24);
      v15 = v22;
      if (v33 >= 0x41 && v32)
        MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
      v32 = v30;
      v21 = v31;
      goto LABEL_37;
    }
    if (v19 != 2)
      break;
    v20 = (const llvm::APInt *)(v35 + v16 + 8);
    if (*(_DWORD *)(v35 + v16 + 16) > 0x40u)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&v32, v20);
      goto LABEL_39;
    }
    v32 = *(llvm::APFloatBase **)v20;
    v21 = *(_DWORD *)(v35 + v16 + 16);
LABEL_37:
    v33 = v21;
LABEL_39:
    llvm::APInt::zextOrTrunc((llvm::APInt *)&v32);
    if (v27)
      inited = (llvm::APFloatBase *)llvm::APInt::rotr((llvm::APInt *)&v28);
    else
      inited = (llvm::APFloatBase *)llvm::APInt::rotl((llvm::APInt *)&v28);
    if (*((_DWORD *)a3 + 2) > 0x40u)
      inited = (llvm::APFloatBase *)llvm::APInt::orAssignSlowCase(a3, (const llvm::APInt *)&v30);
    else
      *(_QWORD *)a3 |= (unint64_t)v30;
    if (v31 >= 0x41)
    {
      inited = v30;
      if (v30)
        inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    }
    if (v29 >= 0x41)
    {
      inited = v28;
      if (v28)
        inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
    }
    if (v33 >= 0x41)
    {
      inited = v32;
      if (v32)
        inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
    }
    ++v18;
    v17 += (int)v15;
    v16 += 72;
    if (v18 >= LODWORD(v36[0]))
      goto LABEL_60;
  }
  sub_22F072CEC(a1, v26, 103, 0);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
LABEL_58:
  v7 = 0;
LABEL_61:
  if (v34 >= 2)
    sub_22EF53BC0(&v34);
  return v7;
}

uint64_t sub_22F035EDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  llvm::APFloatBase *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v10 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(a1 + 8), a5);
  v11 = llvm::APFloatBase::PPCDoubleDouble(v10);
  if ((llvm::APFloatBase *)v11 == v10)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  sub_22E51FDA0(a6 + 1, &v17);
  if (v11 == v17)
    sub_22E463170((llvm::APFloatBase *)v18);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v17);
  v12 = sub_22E51FB5C((llvm::APFloatBase *)a6);
  if (*(_BYTE *)(a1 + 834))
    v13 = 1;
  else
    v13 = v12 == 0;
  v14 = v13 || (a3 & 0xFC) == 4;
  v15 = v14;
  if (!v14)
    sub_22F072CEC(a1, a2, 2211, 0);
  return v15;
}

uint64_t sub_22F036024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_DWORD *)(v3 + 16) == 11;
  else
    v4 = 0;
  if (!v4 || ((*(_DWORD *)(v3 + 16) >> 19) & 0x1FEu) - 186 > 0x17)
    return 0;
  LODWORD(v12) = 0;
  v11[0] = a3;
  v11[1] = (uint64_t)&v12;
  v6 = sub_22F036288(v11, (unsigned __int8 *)a1);
  v7 = v12;
  if ((_DWORD)v12 == 4)
    v8 = v6;
  else
    v8 = 0;
  if ((_DWORD)v8 == 1)
  {
    if (*(_DWORD *)(a2 + 8) > 0x40u || (v9 = v14, v14 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a2, (const llvm::APInt *)&v13);
      v7 = v12;
    }
    else
    {
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = v9;
      v7 = 4;
    }
    *(_BYTE *)(a2 + 12) = v15;
    *(_DWORD *)(a2 + 16) = v16;
  }
  if (v7 >= 2)
    sub_22EF53BC0(&v12);
  return v8;
}

uint64_t sub_22F036150(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  llvm::APFloatBase *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v8 = (llvm::APFloatBase *)sub_22F0013BC(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000));
  v9 = *(_QWORD *)(a4 + 8);
  v10 = llvm::APFloatBase::PPCDoubleDouble(v8);
  if (v10 == v9)
    MEMORY[0x23489F2A0](&v14, a4 + 8);
  else
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v14, (const llvm::detail::IEEEFloat *)(a4 + 8));
  sub_22EF5B2E0(*(_QWORD *)(a1 + 8), a3);
  v11 = llvm::APFloat::convert();
  v12 = sub_22F035084(a1, a2, v11);
  if (v10 == v14)
    sub_22E463170((llvm::APFloatBase *)v15);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v14);
  return v12;
}

uint64_t sub_22F036288(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F037374(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F038868(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        return sub_22F0386EC(a1, (uint64_t)a2);
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F037374(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *p_p;
  size_t size;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 ***v28;
  unsigned __int8 **v29;
  unsigned __int8 ***v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  std::string __p;
  unsigned __int8 *v42;
  unsigned int v43;
  char v44;
  int v45;
  BOOL v46[2];
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[12];

  v60[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if ((*(_DWORD *)a2 & 0xF80000) != 0 && v4 - 21 > 0xB)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v49 = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
    LODWORD(v53) = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v9 + 8));
    sub_22F3C4984((uint64_t)&v50, 0, &v53);
    if (sub_22F038AAC(v9, (uint64_t)&v50, *a1))
    {
      LODWORD(v53) = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v8 + 8));
      sub_22F3C4984((uint64_t)&v47, 0, &v53);
      if (sub_22F038AAC(v8, (uint64_t)&v47, *a1))
      {
        *(_WORD *)v46 = 0;
        LODWORD(v53) = v52;
        sub_22F3C4984((uint64_t)&v42, 0, &v53);
        v6 = 0;
        switch((*(_DWORD *)a2 >> 18) & 0x3F)
        {
          case 2:
            llvm::APFixedPoint::mul((llvm::APFixedPoint *)&v50, (const llvm::APFixedPoint *)&v47, &v46[1]);
            goto LABEL_32;
          case 3:
            sub_22F26307C(&v47, (uint64_t)&v53);
            v16 = sub_22E42E5EC((uint64_t)&v53, 0);
            if (v54 >= 0x41 && v53)
              MEMORY[0x2348A0E84](v53, 0x1000C8000313F17);
            if (v16)
            {
              sub_22F072CEC(*a1, a2, 2292, 0);
            }
            else
            {
              llvm::APFixedPoint::div((llvm::APFixedPoint *)&v50, (const llvm::APFixedPoint *)&v47, &v46[1]);
LABEL_32:
              llvm::APFixedPoint::convert();
              if (v43 >= 0x41 && v42)
                MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
              v42 = v53;
              v43 = v54;
              LODWORD(v54) = 0;
LABEL_36:
              v44 = BYTE4(v54);
              v45 = v55;
              if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
                MEMORY[0x2348A0E84](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
              if (!v46[1] && !v46[0])
                goto LABEL_42;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
              {
                v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 1992) + 8);
                *(_DWORD *)(v15 + 312) = *(_DWORD *)(a2 + 4);
                *(_DWORD *)(v15 + 316) = 2336;
                if (*(char *)(v15 + 311) < 0)
                {
                  **(_BYTE **)(v15 + 288) = 0;
                  *(_QWORD *)(v15 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v15 + 288) = 0;
                  *(_BYTE *)(v15 + 311) = 0;
                }
                v53 = (unsigned __int8 *)(v15 + 320);
                v54 = 0;
                v55 = v15;
                LOWORD(v56) = 1;
                *(_BYTE *)(v15 + 320) = 0;
                *(_DWORD *)(v15 + 664) = 0;
                v17 = *(unsigned int *)(v15 + 776);
                if ((_DWORD)v17)
                {
                  v18 = *(_QWORD *)(v15 + 768);
                  v19 = 56 * v17;
                  do
                  {
                    if (*(char *)(v18 + v19 - 9) < 0)
                      operator delete(*(void **)(v18 + v19 - 32));
                    v19 -= 56;
                  }
                  while (v19);
                }
                *(_DWORD *)(v15 + 776) = 0;
                sub_22F3116D8(&__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
                else
                  size = __p.__r_.__value_.__l.__size_;
                sub_22E3B89A8(&v53, p_p, size);
                v22 = *(_QWORD *)(a2 + 8);
                v23 = v53;
                if (!v53)
                {
                  v23 = (unsigned __int8 *)sub_22E3B8AAC(v54);
                  v53 = v23;
                }
                v23[*v23 + 1] = 9;
                v24 = v53;
                v25 = *v53;
                *v53 = v25 + 1;
                *(_QWORD *)&v24[8 * v25 + 16] = v22;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                sub_22E3BB0B8((uint64_t)&v53);
              }
              if (sub_22F038CB0(*a1, a2, (uint64_t)&v42, *(_QWORD *)(a2 + 8)))
              {
LABEL_42:
                sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v42);
                v6 = 1;
                goto LABEL_63;
              }
            }
            v6 = 0;
LABEL_63:
            if (v43 >= 0x41 && v42)
              MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
            break;
          case 5:
            llvm::APFixedPoint::add((llvm::APFixedPoint *)&v50, (const llvm::APFixedPoint *)&v47, &v46[1]);
            goto LABEL_32;
          case 6:
            llvm::APFixedPoint::sub((llvm::APFixedPoint *)&v50, (const llvm::APFixedPoint *)&v47, &v46[1]);
            goto LABEL_32;
          case 7:
          case 8:
            v10 = v52;
            sub_22F26307C(&v47, (uint64_t)&__p);
            v11 = (v10 >> 31) + (unsigned __int16)v10;
            v12 = sub_22E5FA634((uint64_t ***)&__p, (v11 - 1));
            v13 = (uint64_t)v12;
            if (!__p.__r_.__value_.__s.__data_[12]
              && (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41
                ? (v14 = (std::string *)(__p.__r_.__value_.__r.__words[0]
                                       + 8 * ((LODWORD(__p.__r_.__value_.__r.__words[1]) - 1) >> 6)))
                : (v14 = &__p),
                  ((v14->__r_.__value_.__r.__words[0] >> (__p.__r_.__value_.__s.__data_[8] - 1)) & 1) != 0))
            {
              v39 = *a1;
              sub_22EFF605C(a2);
              v53 = (unsigned __int8 *)sub_22F072D74(v39, v40, 2239, 0);
              sub_22F3C4700((unsigned __int8 ***)&v53);
            }
            else if (sub_22E508590((uint64_t)&__p, v12))
            {
              v26 = *a1;
              sub_22EFF605C(a2);
              v53 = (unsigned __int8 *)sub_22F072D74(v26, v27, 2220, 0);
              v28 = sub_22F3C4700((unsigned __int8 ***)&v53);
              v29 = *v28;
              if (*v28)
              {
                v30 = v28;
                v31 = *(_QWORD *)(a2 + 8);
                v32 = *v29;
                if (!*v29)
                {
                  v32 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v29[1]);
                  *v29 = v32;
                }
                v32[*v32 + 1] = 9;
                v33 = *v29;
                v34 = **v29;
                *v33 = v34 + 1;
                *(_QWORD *)&v33[8 * v34 + 16] = v31;
                v35 = *v30;
                if (v35)
                {
                  v36 = *v35;
                  if (!*v35)
                  {
                    v36 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v35[1]);
                    *v35 = v36;
                  }
                  v36[*v36 + 1] = 3;
                  v37 = *v35;
                  v38 = **v35;
                  *v37 = v38 + 1;
                  *(_QWORD *)&v37[8 * v38 + 16] = v11;
                }
              }
            }
            if ((*(_DWORD *)a2 & 0xFC0000) == 0x1C0000)
              llvm::APFixedPoint::shl((llvm::APFixedPoint *)&v50, v13, &v46[1]);
            else
              sub_22F3C4A70((uint64_t)&v53, (llvm::APInt *)&v50, v13, &v46[1]);
            if (v43 >= 0x41 && v42)
              MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
            v42 = v53;
            v43 = v54;
            goto LABEL_36;
          default:
            goto LABEL_63;
        }
      }
      else
      {
        v6 = 0;
      }
      if (v48 >= 0x41 && v47)
        MEMORY[0x2348A0E84](v47, 0x1000C8000313F17);
    }
    else
    {
      v6 = 0;
    }
    if (v51 >= 0x41 && v50)
      MEMORY[0x2348A0E84](v50, 0x1000C8000313F17);
  }
  else if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F036288(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = -1;
    v57 = 0;
    v58 = v60;
    v59 = 0x800000000;
    v60[8] = 0;
    v60[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)&v53, 1u))
    {
      LODWORD(v50) = 0;
      v6 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)&v53, (uint64_t)&v50, 0);
      if ((_DWORD)v6)
        sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v51);
      if (v50 >= 2)
        sub_22EF53BC0(&v50);
    }
    else
    {
      v6 = 0;
    }
    if (v58 != v60)
      free(v58);
  }
  return v6;
}

unint64_t sub_22F037B0C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 **v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _BYTE **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _BYTE **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  char v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD v92[11];
  void *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[64];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  LODWORD(v83) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v6 = *a2;
  v7 = (unsigned __int8 **)((char *)a2 + (v6 >> 24));
  v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      v9 = v8;
      v10 = *v8;
      if (v10 > 213)
      {
        if (v10 == 233)
        {
          if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v12 = v9 + 16;
        }
        else
        {
          if (v10 != 214)
            goto LABEL_19;
          v12 = v9 + 24;
        }
      }
      else if (v10 == 155)
      {
        if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v9[48])
          v12 = v9 + 24;
        else
          v12 = v9 + 32;
      }
      else
      {
        if (v10 != 176)
          goto LABEL_19;
        v11 = *((unsigned int *)v9 + 5);
        if ((_DWORD)v11 == -1)
          goto LABEL_19;
        v12 = &v9[8 * v11 + 40];
      }
      v8 = *(unsigned __int8 **)v12;
      if (v8 == v9)
        goto LABEL_19;
    }
  }
  v9 = 0;
LABEL_19:
  v13 = *((_QWORD *)v9 + 1);
  memset(v103, 0, sizeof(v103));
  LODWORD(v104) = -1;
  v105 = 0;
  v106 = v108;
  v107 = 0x800000000;
  v14 = &v7[((v6 >> 18) & 1) + 1];
  v110 = 0;
  v109 = 0;
  v15 = a2[4];
  v16 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 136839179;
  else
    v19 = 0;
  if (!v19)
  {
    if ((*(_BYTE *)(v17 + 16) == 39 || *(_DWORD *)(v18 + 16) == 39 && (v17 = sub_22F10CF48(v17)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 |= 1u;
      v97 = 0;
      v98 = v100;
      v99 = 0x800000000;
      v101 = 0;
      v102 = 0;
      v85 = *a1;
      v86 = &v93;
      LOBYTE(v87) = 0;
      v81 = v5;
      if (sub_22F00C45C(&v85, v9))
      {
        if (!v95 && (v93 & 3) == 0)
        {
          v21 = (unint64_t)v93 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v93 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 52 < 6)
          {
            v46 = *(_QWORD *)(*a1 + 8);
            v47 = sub_22F10ACF8(*v16);
            if (sub_22EF5F5D4(v46, v47, *(_QWORD *)(v21 + 48)))
            {
              v48 = *(unsigned __int8 *)a2;
              if (v48 == 141)
              {
                v49 = a2[1] & 0x3F;
                if (v49 - 18 < 8 || (v23 = 0, v79 = 0, v49 <= 0x1D) && ((1 << v49) & 0x30008000) != 0)
                {
                  v50 = (_BYTE **)*a1;
                  v51 = *(_QWORD *)(*a1 + 24);
                  v52 = *(unsigned int *)(v51 + 92);
                  v53 = (*(_DWORD *)(v51 + 120) + 1);
                  *(_DWORD *)(v51 + 120) = v53;
                  v23 = v52 | (v53 << 32);
                  v54 = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
                  if (!sub_22F0279B4((uint64_t)&v14[v54], v15 - v54, v21, v23, v50, v21, 1))
                  {
                    v80 = v23;
                    v22 = 0;
                    v82 = 0;
                    LOBYTE(v23) = 0;
                    v20 = v21;
                    goto LABEL_30;
                  }
                  v79 = v21;
                }
              }
              else
              {
                v79 = 0;
                v23 = 0;
              }
              v80 = v23;
              if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                goto LABEL_200;
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 32))(v21) + 80) & 0xE000) != 0x4000
                && ((*(_QWORD *)(v21 + 40) & 7) != 6
                 || (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
              {
                v69 = *a1;
                if ((_DWORD)v15)
                {
                  if (sub_22F0098FC(v69, *v14, v103))
                  {
                    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                    if (v48 == 141
                      && (**(_QWORD **)(v70 + 2000) & 0x1000) != 0
                      && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                      && (*(_BYTE *)(v21 + 82) & 0x80) != 0)
                    {
                      v82 = v103;
                      if (!sub_22F013A2C((uint64_t *)*a1, *v14, (uint64_t)v103))
                      {
                        v22 = 0;
                        goto LABEL_158;
                      }
                    }
                    --v15;
                    ++v14;
                    v82 = v103;
LABEL_195:
                    v22 = 1;
                    goto LABEL_196;
                  }
                }
                else
                {
                  sub_22F072CEC(v69, (uint64_t)a2, 103, 0);
                  v15 = 0;
                }
LABEL_157:
                v22 = 0;
                v82 = 0;
LABEL_158:
                LOBYTE(v23) = 0;
                goto LABEL_196;
              }
              if (!sub_22EFD799C(v21))
              {
LABEL_200:
                if (sub_22EFBFDCC(v21, 0, 0))
                {
                  if ((*(_QWORD *)(v21 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                  {
                    v85 = 0;
                    v86 = 0;
                    v87 = 0;
                    v88 |= 1u;
                    v89 = 0;
                    v90 = v92;
                    v91 = 0x800000000;
                    v92[8] = 0;
                    v92[9] = 0;
                    if (sub_22F027C94(*a1, a2, (uint64_t)&v85))
                    {
                      sub_22F00676C((uint64_t)&v85, (uint64_t)&v83);
                      LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
                    }
                    else
                    {
                      LOBYTE(v23) = 0;
                    }
                    v20 = v79;
                    if (v90 != v92)
                    {
                      free(v90);
                      v20 = v79;
                    }
                    v81 = v5;
                    v22 = 0;
                    v82 = 0;
LABEL_30:
                    if (v98 != v100)
                    {
                      v24 = v15;
                      v25 = v14;
                      v26 = v20;
                      free(v98);
                      v20 = v26;
                      v14 = v25;
                      v15 = v24;
                    }
                    if ((v22 & 1) == 0)
                    {
                      v5 = v81;
                      goto LABEL_58;
                    }
                    v27 = 0;
                    v5 = v81;
                    if (v20)
                      goto LABEL_71;
                    goto LABEL_70;
                  }
                  if (sub_22F02836C(*a1, a2))
                  {
                    LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                    v22 = 0;
                    v82 = 0;
                    v81 = -1;
LABEL_196:
                    v20 = v79;
                    goto LABEL_30;
                  }
                  goto LABEL_157;
                }
                goto LABEL_194;
              }
              v67 = *(_WORD *)(v21 + 80) & 0x7F;
              v68 = -40;
              if (v67 > 0x46)
              {
                switch(v67)
                {
                  case 'S':
                    goto LABEL_176;
                  case 'G':
                    v68 = -56;
                    goto LABEL_176;
                  case 'Q':
                    goto LABEL_176;
                }
              }
              else
              {
                if (v67 <= 0x18)
                {
                  if (v67 == 16)
                    goto LABEL_144;
                  if (((1 << v67) & 0x1066) != 0)
                    goto LABEL_176;
                  if (v67 == 24)
                  {
LABEL_144:
                    v68 = -48;
LABEL_176:
                    v71 = *(_QWORD *)(v21 + 72 + v68 + 16);
                    v72 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF8);
                    if ((v71 & 4) != 0)
                      v72 = (_QWORD *)*v72;
                    if (v72)
                      v23 = (unint64_t)(v72 - 8);
                    else
                      v23 = 0;
                    v73 = sub_22EFD462C(v23);
                    if (v73 && (*(_DWORD *)(v73 + 28) & 0x7F) == 0x1D)
                      v73 = *(_QWORD *)(v73 + 48);
                    v74 = *(_QWORD *)(v23 + 128);
                    if (!v74
                      || ((*(unsigned __int16 *)(v74 + 8) | (*(unsigned __int8 *)(v74 + 10) << 16)) & 0x100000) == 0
                      || (*(_BYTE *)(v74 + 104) & 4) == 0)
                    {
                      v82 = 0;
                      v22 = 1;
                      v21 = v73;
                      goto LABEL_196;
                    }
                    v75 = *(_QWORD *)((*(_QWORD *)(v21 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                    v76 = *(_QWORD *)(v73 + 144);
                    if ((v76 & 6) != 0)
                      v77 = 0;
                    else
                      v77 = v76 & 0xFFFFFFFFFFFFFFF8;
                    v85 = 0;
                    v21 = sub_22EFE9880(v77, *(_QWORD *)v75, *(unsigned int *)(v75 + 8), (uint64_t)&v85);
LABEL_194:
                    v82 = 0;
                    goto LABEL_195;
                  }
                }
                if (v67 == 70)
                {
LABEL_174:
                  v68 = -64;
                  goto LABEL_176;
                }
              }
              if (v67 - 52 < 6)
              {
                v68 = -72;
                goto LABEL_176;
              }
              if (v67 - 33 < 5)
                goto LABEL_174;
              goto LABEL_144;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v20 = 0;
            v80 = 0;
LABEL_29:
            v22 = 0;
            v82 = 0;
            LOBYTE(v23) = 0;
            goto LABEL_30;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v9, 103, 0);
      }
      v20 = 0;
      v80 = 0;
      v21 = 0;
      goto LABEL_29;
    }
    v30 = *a1;
    v31 = (uint64_t)a2;
    goto LABEL_56;
  }
  v28 = *v9;
  if (v28 == 188)
  {
    if (sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v103))
    {
      v21 = *((_QWORD *)v9 + 3);
      if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        if ((v9[2] & 8) != 0)
        {
          v27 = *((_QWORD *)v9 + 6) != 0;
LABEL_69:
          v82 = v103;
LABEL_70:
          v38 = (_BYTE **)*a1;
          v39 = *(_QWORD *)(*a1 + 24);
          v40 = *(unsigned int *)(v39 + 92);
          v41 = (*(_DWORD *)(v39 + 120) + 1);
          *(_DWORD *)(v39 + 120) = v41;
          v80 = v40 | (v41 << 32);
          v42 = sub_22F0279B4((uint64_t)v14, v15, v21, v80, v38, v21, 0);
          LOBYTE(v23) = 0;
          v20 = v21;
          if (!v42)
            goto LABEL_58;
LABEL_71:
          v78 = v20;
          v93 = &v95;
          v94 = 0x400000000;
          if (!v82)
          {
LABEL_98:
            if (v21 && (*(_DWORD *)(v21 + 28) & 0x7F) == 0x39)
            {
              v56 = (uint64_t *)*a1;
              v57 = *(_WORD *)(v21 + 80) & 0x7F;
              v58 = -40;
              if (v57 > 0x46)
              {
                switch(v57)
                {
                  case 'S':
                    goto LABEL_121;
                  case 'G':
                    v58 = -56;
                    goto LABEL_121;
                  case 'Q':
LABEL_121:
                    v63 = *(_QWORD *)(v21 + 72 + v58 + 16);
                    v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
                    if ((v63 & 4) != 0)
                      v64 = (_QWORD *)*v64;
                    if (v64)
                      v65 = (uint64_t)(v64 - 8);
                    else
                      v65 = 0;
                    v66 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v65);
                    if (!sub_22F027138(v56, (uint64_t)a2, (uint64_t)v82, v66))
                      goto LABEL_108;
LABEL_127:
                    LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                    v5 = -1;
LABEL_128:
                    if (v93 != &v95)
                      free(v93);
                    goto LABEL_58;
                }
              }
              else
              {
                if (v57 <= 0x18)
                {
                  if (v57 == 16)
                  {
LABEL_103:
                    v58 = -48;
                    goto LABEL_121;
                  }
                  if (((1 << v57) & 0x1066) != 0)
                    goto LABEL_121;
                  if (v57 == 24)
                    goto LABEL_103;
                }
                if (v57 == 70)
                {
LABEL_119:
                  v58 = -64;
                  goto LABEL_121;
                }
              }
              if (v57 - 52 >= 6)
              {
                if (v57 - 33 >= 5)
                  goto LABEL_103;
                goto LABEL_119;
              }
              v58 = -72;
              goto LABEL_121;
            }
            v85 = 0;
            v59 = (unsigned __int8 *)sub_22EFBF910(v21, &v85);
            v60 = (_QWORD *)*a1;
            sub_22EFF605C((uint64_t)a2);
            if (sub_22F028A44(v60, v61, (_QWORD *)v21, v85, (uint64_t)v59))
            {
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F00B12C(v62, v85, (uint64_t)v82, (uint64_t *)v14, v15, v78, v80, v59, (uint64_t *)*a1, (uint64_t)&v83, 0)&& (!(_DWORD)v94 || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)&v83, v93, v94)))
              {
                goto LABEL_127;
              }
            }
LABEL_108:
            LOBYTE(v23) = 0;
            goto LABEL_128;
          }
          if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 >= 4)
            v43 = 0;
          else
            v43 = (_DWORD *)v21;
          if (v43)
          {
            v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 32))(v43);
            if ((*(_BYTE *)(v44 + 82) & 0xC) != 0)
            {
              if (v27)
                goto LABEL_78;
LABEL_97:
              v21 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v82, (uint64_t)v43, (uint64_t)&v93);
              if (!v21)
                goto LABEL_108;
              goto LABEL_98;
            }
            if (sub_22EFD7260(v44))
              v55 = v27;
            else
              v55 = 1;
            if ((v55 & 1) == 0)
              goto LABEL_97;
          }
LABEL_78:
          if ((v43[7] & 0x7F) == 0x39)
            v45 = 9;
          else
            v45 = 5;
          if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v82, v45, 0))
            goto LABEL_108;
          goto LABEL_98;
        }
LABEL_68:
        v27 = 0;
        goto LABEL_69;
      }
      goto LABEL_44;
    }
    goto LABEL_57;
  }
  if ((v28 & 0xFE) == 0x70)
  {
    v29 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v9, (uint64_t)v103, 0);
    if (v29)
    {
      v21 = v29;
      if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_68;
LABEL_44:
      v30 = *a1;
LABEL_55:
      v31 = (uint64_t)v9;
LABEL_56:
      sub_22F072CEC(v30, v31, 103, 0);
    }
LABEL_57:
    LOBYTE(v23) = 0;
    goto LABEL_58;
  }
  v30 = *a1;
  if (v28 != 129)
    goto LABEL_55;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 96))(v30) + 2000) + 1) & 0x10) == 0)
  {
    v32 = *a1;
    sub_22EFF605C((uint64_t)v9);
    sub_22F072D74(v32, v33, 2266, 0);
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v103))
    goto LABEL_57;
  v34 = 0;
  v35 = *((_QWORD *)v9 + 8);
  if ((v35 & 1) == 0)
  {
    v36 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    if (v36)
      v34 = *v36;
  }
  LOBYTE(v23) = sub_22F027138((uint64_t *)*a1, (uint64_t)v9, (uint64_t)v103, v34);
LABEL_58:
  if (v106 != v108)
    free(v106);
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v23 & 1) != 0)
    sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v84);
  if (v83 >= 2)
    sub_22EF53BC0(&v83);
  return v23 & 1;
}

uint64_t sub_22F0386EC(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _BOOL8 v6;
  _DWORD *v8;
  char v9;
  BOOL v10[4];
  uint64_t v11;
  unsigned int v12;

  v4 = (*(_DWORD *)a2 >> 18) & 0x1F;
  if (v4 == 6)
    return sub_22F036288(a1, *(_QWORD *)(a2 + 16));
  if (v4 == 7)
  {
    if (!sub_22F036288(a1, *(_QWORD *)(a2 + 16)))
      return 0;
    v8 = (_DWORD *)a1[1];
    if (*v8 == 4)
    {
      v10[0] = 0;
      llvm::APFixedPoint::negate((llvm::APFixedPoint *)(v8 + 2), v10);
      if (v10[0] && !sub_22F038CB0(*a1, a2, (uint64_t)&v11, *(_QWORD *)(a2 + 8)))
      {
        v5 = 0;
      }
      else
      {
        sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v11);
        v5 = 1;
      }
      goto LABEL_16;
    }
LABEL_12:
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  if (v4 != 9)
    goto LABEL_12;
  v9 = 0;
  v5 = sub_22F024504(*(_QWORD *)(a2 + 16), (uint64_t)&v9, *a1);
  if ((_DWORD)v5)
  {
    v6 = v9 == 0;
    *(_DWORD *)v10 = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
    sub_22F3C4984((uint64_t)&v11, v6, v10);
    sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v11);
LABEL_16:
    if (v12 >= 0x41)
    {
      if (v11)
        MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
    }
  }
  return v5;
}

uint64_t sub_22F038868(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29[2];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v38 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v23, 0, sizeof(v23));
    LODWORD(v24) = -1;
    v26 = 0;
    v27 = v29;
    v28 = 0x800000000;
    v35 = 0;
    v36 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v16) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v23, v16, v17, v18, v19, v20, v21, v22, 0,
                         0,
                         0,
                         v24,
                         v25,
                         0,
                         (uint64_t)v29,
                         0x800000000,
                         v29[0],
                         v29[1],
                         v30,
                         v31,
                         v32,
                         v33,
                         v34,
                         0,
                         0,
                         v37,
                         v38,
                         v39,
                         v40))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v23, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v15);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v27 != v29)
      free(v27);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

void sub_22F0389D4(uint64_t a1, llvm::APInt *a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  int v12;

  v4 = *((_DWORD *)a2 + 2);
  v10 = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, a2);
    v4 = v10;
    v5 = v9;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v9 = *(_QWORD *)a2;
  }
  v6 = *((_BYTE *)a2 + 12);
  v11 = v6;
  v7 = *((_DWORD *)a2 + 4);
  v12 = v7;
  v10 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)v8 >= 2u)
    sub_22EF53BC0((uint64_t *)v8);
  *(_DWORD *)v8 = 4;
  *(_QWORD *)(v8 + 8) = v5;
  *(_DWORD *)(v8 + 16) = v4;
  *(_BYTE *)(v8 + 20) = v6;
  *(_DWORD *)(v8 + 24) = v7;
  if (v10 >= 0x41)
  {
    if (v9)
      MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
  }
}

uint64_t sub_22F038AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  unsigned int v21;
  char v22;
  _BYTE v23[8];
  unsigned int v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_26;
    goto LABEL_14;
  }
  if (v7 && v8 == 44)
  {
    v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
    if ((*(_BYTE *)(v10 + 74) & 1) != 0 || *(_QWORD *)(v10 + 128) > 7uLL)
    {
      v11 = sub_22F114198(*(_QWORD *)(v7 + 24));
      v6 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(v11 + 76) & 0x80) != 0)
        goto LABEL_26;
LABEL_14:
      v12 = sub_22EF74318(*(_QWORD *)(a3 + 8), v6);
      v21 = 1;
      v20 = 0;
      v22 = 0;
      v13 = sub_22F0174A0(a1, &v20, a3);
      v14 = v21;
      if ((_DWORD)v13)
      {
        v24 = v21;
        if (v21 >= 0x41)
        {
          v15 = (uint64_t *)v23;
          llvm::APInt::initSlowCase((llvm::APInt *)v23, (const llvm::APInt *)&v20);
          v14 = v24;
        }
        else
        {
          v15 = &v20;
        }
        v16 = *v15;
        if (*(_DWORD *)(a2 + 8) >= 0x41u && *(_QWORD *)a2)
          MEMORY[0x2348A0E84](*(_QWORD *)a2, 0x1000C8000313F17);
        *(_QWORD *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v14;
        *(_BYTE *)(a2 + 12) = (v12 & 0x20000000) == 0;
        *(_DWORD *)(a2 + 16) = v12;
        v14 = v21;
      }
      if (v14 >= 0x41 && v20)
        MEMORY[0x2348A0E84](v20, 0x1000C8000313F17);
      return v13;
    }
    v6 = *(_QWORD *)(a1 + 8);
  }
  else if (v8 == 9)
  {
    goto LABEL_14;
  }
LABEL_26:
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(_DWORD *)(v17 + 16) == 11;
  else
    v18 = 0;
  if (v18 && ((*(_DWORD *)(v17 + 16) >> 19) & 0x1FEu) - 186 <= 0x17)
    return sub_22F036024(a1, a2, a3);
  return 0;
}

uint64_t sub_22F038CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 **v12;

  sub_22EFF605C(a2);
  v12 = (unsigned __int8 **)sub_22F072D74(a1, v6, 2255, 0);
  sub_22F3C4B84(&v12);
  v7 = v12;
  if (v12)
  {
    v8 = *v12;
    if (!*v12)
    {
      v8 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v12[1]);
      *v7 = v8;
    }
    v8[*v8 + 1] = 9;
    v9 = *v7;
    v10 = **v7;
    *v9 = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = a4;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

const llvm::APInt *sub_22F038D64@<X0>(const llvm::APInt *result@<X0>, int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unsigned int v5;

  v5 = *((_DWORD *)result + 2);
  *((_DWORD *)a3 + 2) = v5;
  if (v5 > 0x40)
  {
    result = (const llvm::APInt *)llvm::APInt::initSlowCase(a3, result);
    v5 = *((_DWORD *)a3 + 2);
    if (v5 > 0x40)
      return (const llvm::APInt *)llvm::APInt::lshrSlowCase(a3);
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)result;
  }
  if (v5 == a2)
    *(_QWORD *)a3 = 0;
  else
    *(_QWORD *)a3 >>= a2;
  return result;
}

uint64_t sub_22F038DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  llvm::APFloatBase *v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *p_p;
  size_t size;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  std::string __p;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55[12];

  v55[11] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  HIDWORD(v37) = sub_22EF74318(*(_QWORD *)(*a1 + 8), v5);
  v12 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v12 <= 0x20)
  {
    if (v12 == 4)
    {
      v47 = 0;
      v48 = 0;
      v49 = 0;
      LODWORD(v50) = -1;
      v52 = 0;
      v53 = v55;
      v54 = 0x800000000;
      v55[8] = 0;
      v55[9] = 0;
      v16 = *(_QWORD *)(a2 + 16);
      v38 = *a1;
      LOBYTE(v40) = 0;
      v14 = 0;
      if (sub_22F010358((int)&v38, v16, v6, v7, v8, v9, v10, v11, (uint64_t)v33, v34, v35, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], v37, v38, (uint64_t)&v47, v40, v41,
                           v42,
                           v43,
                           v44,
                           v45,
                           v46,
                           0,
                           0,
                           0,
                           v50,
                           v51,
                           (uint64_t)v55,
                           0x800000000,
                           v55[0],
                           v55[1],
                           v55[2],
                           v55[3],
                           v55[4],
                           v55[5],
                           (void *)v55[6],
                           v55[7]))
      {
        LODWORD(v38) = 0;
        v14 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v47, (uint64_t)&v38, 0);
        if ((_DWORD)v14)
          sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v39);
        if (v38 >= 2)
          sub_22EF53BC0(&v38);
      }
      if (v53 != v55)
        free(v53);
      return v14;
    }
    if (v12 == 5)
      return sub_22F036288(a1, *(_QWORD *)(a2 + 16));
  }
  else
  {
    switch(v12)
    {
      case '!':
        v17 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v38, 0.0);
        v18 = llvm::APFloatBase::IEEEdouble(v17);
        MEMORY[0x23489F4E0](&v48, &v38, v18);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v38);
        v38 = *a1;
        v39 = &v47;
        v19 = (llvm::APFloatBase *)sub_22F032714(&v38, v4);
        if ((_DWORD)v19)
        {
          BYTE3(v37) = 0;
          LODWORD(v38) = sub_22EF74318(*(_QWORD *)(*a1 + 8), v5);
          llvm::APFixedPoint::getFromFloatValue();
          sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&__p);
          v14 = 1;
          if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41)
          {
            v19 = (llvm::APFloatBase *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
              v19 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v14 = 0;
        }
        v20 = v48;
        if (llvm::APFloatBase::PPCDoubleDouble(v19) == v20)
          sub_22E463170((llvm::APFloatBase *)&v49);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v48);
        return v14;
      case '%':
        LODWORD(v34) = 1;
        v33 = 0;
        BYTE4(v34) = 0;
        v13 = sub_22F0174A0(v4, &v33, *a1);
        v14 = 0;
        if (v13)
        {
          BYTE3(v37) = 0;
          LODWORD(v47) = sub_22EF74318(*(_QWORD *)(*a1 + 8), v5);
          llvm::APFixedPoint::getFromIntValue();
          if (!BYTE3(v37))
            goto LABEL_8;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 1992) + 8);
            sub_22EFF605C(a2);
            *(_DWORD *)(v22 + 312) = v23;
            *(_DWORD *)(v22 + 316) = 2336;
            if (*(char *)(v22 + 311) < 0)
            {
              **(_BYTE **)(v22 + 288) = 0;
              *(_QWORD *)(v22 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v22 + 288) = 0;
              *(_BYTE *)(v22 + 311) = 0;
            }
            v47 = v22 + 320;
            v48 = 0;
            v49 = v22;
            LOWORD(v50) = 1;
            *(_BYTE *)(v22 + 320) = 0;
            *(_DWORD *)(v22 + 664) = 0;
            v24 = *(unsigned int *)(v22 + 776);
            if ((_DWORD)v24)
            {
              v25 = *(_QWORD *)(v22 + 768);
              v26 = 56 * v24;
              do
              {
                if (*(char *)(v25 + v26 - 9) < 0)
                  operator delete(*(void **)(v25 + v26 - 32));
                v26 -= 56;
              }
              while (v26);
            }
            *(_DWORD *)(v22 + 776) = 0;
            sub_22F3116D8(&__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            else
              size = __p.__r_.__value_.__l.__size_;
            sub_22E3B89A8((unsigned __int8 **)&v47, p_p, size);
            v29 = *(_QWORD *)(a2 + 8);
            v30 = (unsigned __int8 *)v47;
            if (!v47)
            {
              v30 = (unsigned __int8 *)sub_22E3B8AAC(v48);
              v47 = (uint64_t)v30;
            }
            v30[*v30 + 1] = 9;
            v31 = v47;
            v32 = *(unsigned __int8 *)v47;
            *(_BYTE *)v47 = v32 + 1;
            *(_QWORD *)(v31 + 8 * v32 + 16) = v29;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_22E3BB0B8((uint64_t)&v47);
          }
          if (!sub_22F038CB0(*a1, a2, (uint64_t)&v38, *(_QWORD *)(a2 + 8)))
          {
            v14 = 0;
          }
          else
          {
LABEL_8:
            sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&v38);
            v14 = 1;
          }
          if (v39 >= 0x41 && v38)
            MEMORY[0x2348A0E84](v38, 0x1000C8000313F17);
        }
        if (v34 < 0x41)
          return v14;
        v21 = (uint64_t)v33;
        if (!v33)
          return v14;
        goto LABEL_35;
      case '#':
        LODWORD(v47) = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v4 + 8));
        sub_22F3C4984((uint64_t)&v38, 0, &v47);
        if (sub_22F036024(v4, &v38, *a1))
        {
          BYTE3(v37) = 0;
          llvm::APFixedPoint::convert();
          sub_22F0389D4((uint64_t)a1, (llvm::APInt *)&__p);
          v14 = 1;
          if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= 0x41 && __p.__r_.__value_.__r.__words[0])
            MEMORY[0x2348A0E84](__p.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        }
        else
        {
          v14 = 0;
        }
        if (v39 < 0x41)
          return v14;
        v21 = v38;
        if (!v38)
          return v14;
LABEL_35:
        MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
        return v14;
    }
  }
  sub_22F072CEC(*a1, a2, 103, 0);
  return 0;
}

void sub_22F03960C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE *v8;
  _QWORD *v9;
  llvm::APFloatBase *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 12;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_DWORD *)(v6 + 16) == 11;
  else
    v7 = 0;
  if (v7)
  {
    v9 = a1 + 1;
    v8 = (_BYTE *)a1[1];
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      *v8 = 0;
      v10 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*a1 + 8), v5);
      v11 = llvm::APFloatBase::PPCDoubleDouble(v10);
      if ((llvm::APFloatBase *)v11 == v10)
        llvm::detail::DoubleAPFloat::DoubleAPFloat();
      else
        llvm::detail::IEEEFloat::IEEEFloat();
      if (v11 == v18)
        llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v18);
      else
        llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v18);
      sub_22E54C3D4((const llvm::detail::IEEEFloat *)(*v9 + 48), (const llvm::detail::IEEEFloat *)&v18);
      sub_22E54C3D4((const llvm::detail::IEEEFloat *)(*v9 + 80), (const llvm::detail::IEEEFloat *)&v18);
      if (v11 == v18)
        sub_22E463170((llvm::APFloatBase *)v19);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v18);
      return;
    }
  }
  else
  {
    v9 = a1 + 1;
    v8 = (_BYTE *)a1[1];
  }
  *v8 = 1;
  sub_22EADFE6C(*(_QWORD *)(*a1 + 8), 0, v5, (uint64_t)&v17);
  v12 = a1[1];
  if (*(_DWORD *)(v12 + 16) > 0x40u || v18 > 0x40)
  {
    llvm::APInt::assignSlowCase((llvm::APInt *)(v12 + 8), (const llvm::APInt *)&v17);
  }
  else
  {
    *(_QWORD *)(v12 + 8) = v17;
    *(_DWORD *)(v12 + 16) = v18;
  }
  v13 = BYTE4(v18);
  *(_BYTE *)(v12 + 20) = BYTE4(v18);
  v14 = *v9;
  if (*(_DWORD *)(*v9 + 32) > 0x40u || (v15 = v18, v18 > 0x40))
  {
    llvm::APInt::assignSlowCase((llvm::APInt *)(v14 + 24), (const llvm::APInt *)&v17);
    v16 = v18;
    *(_BYTE *)(v14 + 36) = BYTE4(v18);
    if (v16 >= 0x41)
    {
      if (v17)
        MEMORY[0x2348A0E84](v17, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_QWORD *)(v14 + 24) = v17;
    *(_DWORD *)(v14 + 32) = v15;
    *(_BYTE *)(v14 + 36) = v13;
  }
}

uint64_t sub_22F039864(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69[2];
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  switch(v10)
  {
    case '/':
      v11 = a1[1];
      v12 = *(unsigned __int8 **)(a2 + 16);
      v61 = *a1;
      v62 = v11 + 40;
      if (!sub_22F032714(&v61, v12))
        return 0;
      *(_BYTE *)a1[1] = 0;
      sub_22E99C474((llvm::APFloatBase *)&v62, *(_QWORD *)(v11 + 48));
      v13 = sub_22E51FDA0((uint64_t *)(a1[1] + 80), &v62);
      v14 = v62;
      if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v13) == v14)
        goto LABEL_94;
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v62);
      return 1;
    case '0':
    case '1':
    case '5':
    case '6':
    case '9':
    case ':':
    case ';':
    case '<':
LABEL_93:
      __break(1u);
LABEL_94:
      sub_22E463170((llvm::APFloatBase *)&v63);
      return 1;
    case '2':
      if (!sub_22F01E534(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v29)
        v30 = *(_BYTE *)(v29 + 16) == 12;
      else
        v30 = 0;
      if (!v30)
        v29 = sub_22F10CF48(v29);
      v31 = *(_QWORD *)(v29 + 32);
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v32 || *(_BYTE *)(v32 + 16) != 12)
        sub_22F10CF48(v32);
      if (!sub_22F036150(*a1, (unsigned int *)a2, v31, a1[1] + 40))
        return 0;
      return sub_22F036150(*a1, (unsigned int *)a2, v31, a1[1] + 72);
    case '3':
      if (!sub_22F01E534(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v22 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v22)
        v23 = *(_BYTE *)(v22 + 16) == 12;
      else
        v23 = 0;
      if (!v23)
        v22 = sub_22F10CF48(v22);
      v24 = *(_QWORD *)(v22 + 32);
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v25)
        v26 = *(_BYTE *)(v25 + 16) == 12;
      else
        v26 = 0;
      if (!v26)
        sub_22F10CF48(v25);
      v27 = (_BYTE *)a1[1];
      *v27 = 1;
      if (!sub_22F039F3C((uint64_t *)*a1, a2, (llvm::APFloatBase *)(v27 + 40), v24, (uint64_t)(v27 + 8)))
        return 0;
      return sub_22F039F3C((uint64_t *)*a1, a2, (llvm::APFloatBase *)(a1[1] + 72), v24, a1[1] + 24);
    case '4':
      v17 = a1[1];
      if (!sub_22F0174A0(*(_QWORD *)(a2 + 16), v17 + 8, *a1))
        return 0;
      v18 = a1[1];
      *(_BYTE *)v18 = 1;
      v19 = *(_DWORD *)(v17 + 16);
      v20 = *(_BYTE *)(v17 + 20);
      LODWORD(v62) = v19;
      if (v19 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v61);
        v18 = a1[1];
      }
      else
      {
        v61 = 0;
      }
      BYTE4(v62) = v20;
      if (*(_DWORD *)(v18 + 32) >= 0x41u)
      {
        v21 = *(_QWORD *)(v18 + 24);
        if (v21)
        {
          MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
          v20 = BYTE4(v62);
        }
      }
      *(_QWORD *)(v18 + 24) = v61;
      *(_DWORD *)(v18 + 32) = v62;
      *(_BYTE *)(v18 + 36) = v20;
      return 1;
    case '7':
      if (!sub_22F01E534(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v43 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v43)
        v44 = *(_BYTE *)(v43 + 16) == 12;
      else
        v44 = 0;
      if (!v44)
        v43 = sub_22F10CF48(v43);
      v45 = *(_QWORD *)(v43 + 32);
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v46)
        v47 = *(_BYTE *)(v46 + 16) == 12;
      else
        v47 = 0;
      if (!v47)
        sub_22F10CF48(v46);
      sub_22F03A0B4((uint64_t)&v61, *(_QWORD *)(*a1 + 8), v45, a1[1] + 8);
      v48 = a1[1];
      if (*(_DWORD *)(v48 + 16) >= 0x41u)
      {
        v49 = *(_QWORD *)(v48 + 8);
        if (v49)
          MEMORY[0x2348A0E84](v49, 0x1000C8000313F17);
      }
      *(_QWORD *)(v48 + 8) = v61;
      *(_DWORD *)(v48 + 16) = v62;
      *(_BYTE *)(v48 + 20) = BYTE4(v62);
      sub_22F03A0B4((uint64_t)&v61, *(_QWORD *)(*a1 + 8), v45, a1[1] + 24);
      v50 = a1[1];
      if (*(_DWORD *)(v50 + 32) >= 0x41u)
      {
        v51 = *(_QWORD *)(v50 + 24);
        if (v51)
          MEMORY[0x2348A0E84](v51, 0x1000C8000313F17);
      }
      *(_QWORD *)(v50 + 24) = v61;
      *(_DWORD *)(v50 + 32) = v62;
      *(_BYTE *)(v50 + 36) = BYTE4(v62);
      return 1;
    case '8':
      if (!sub_22F01E534(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v34 = sub_22F0014CC((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000));
      v35 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v35)
        v36 = *(_BYTE *)(v35 + 16) == 12;
      else
        v36 = 0;
      if (!v36)
        v35 = sub_22F10CF48(v35);
      v37 = *(_QWORD *)(v35 + 32);
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v38)
        v39 = *(_BYTE *)(v38 + 16) == 12;
      else
        v39 = 0;
      if (!v39)
        sub_22F10CF48(v38);
      v40 = a1[1];
      *(_BYTE *)v40 = 0;
      v41 = v34;
      v42 = sub_22F035EDC(*a1, a2, v34, v40 + 8, v37, (uint64_t *)(v40 + 40));
      v15 = 0;
      if (!v42)
        return v15;
      return sub_22F035EDC(*a1, a2, v41, a1[1] + 24, v37, (uint64_t *)(a1[1] + 72));
    case '=':
      LODWORD(v61) = 0;
      v15 = sub_22F009DC4(&v61, *a1, *(_QWORD *)(a2 + 16));
      if ((_DWORD)v15)
        sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)&v61);
LABEL_90:
      if (v61 >= 2)
        sub_22EF53BC0(&v61);
      return v15;
    default:
      switch(v10)
      {
        case 1:
          goto LABEL_93;
        case 3:
          LODWORD(v61) = 0;
          LODWORD(v53) = 0;
          v15 = 0;
          if (sub_22F009DC4(&v53, *a1, *(_QWORD *)(a2 + 16)))
          {
            if (sub_22F02F148((uint64_t *)*a1, (uint64_t)&v61, (uint64_t)&v53, a2))
            {
              sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)&v61);
              v15 = 1;
            }
            else
            {
              v15 = 0;
            }
          }
          if (v53 >= 2)
            sub_22EF53BC0(&v53);
          goto LABEL_90;
        case 4:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          LODWORD(v64) = -1;
          v66 = 0;
          v67 = v69;
          v68 = 0x800000000;
          v75 = 0;
          v76 = 0;
          v28 = *(_QWORD *)(a2 + 16);
          v53 = *a1;
          LOBYTE(v54) = 0;
          v15 = 0;
          if (sub_22F010358((int)&v53, v28, a3, a4, a5, a6, a7, a8, v52, v53, (uint64_t)&v61, v54, v55, v56, v57, v58, v59, v60, 0,
                               0,
                               0,
                               v64,
                               v65,
                               0,
                               (uint64_t)v69,
                               0x800000000,
                               v69[0],
                               v69[1],
                               v70,
                               v71,
                               v72,
                               v73,
                               v74,
                               0,
                               0,
                               v77,
                               v78,
                               v79,
                               v80))
          {
            LODWORD(v53) = 0;
            v15 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v61, (uint64_t)&v53, 0);
            if ((_DWORD)v15)
              sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)&v53);
            if (v53 >= 2)
              sub_22EF53BC0(&v53);
          }
          if (v67 != v69)
            free(v67);
          return v15;
        case 5:
          result = sub_22F01E534(a1, *(_QWORD *)(a2 + 16));
          break;
        default:
          sub_22F072CEC(*a1, a2, 103, 0);
          return 0;
      }
      return result;
  }
}

uint64_t sub_22F039F3C(uint64_t *a1, uint64_t a2, llvm::APFloatBase *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  BOOL v11;
  int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned int v19;
  BOOL v20;

  v10 = sub_22EF6A330(a1[1], a4);
  v11 = !sub_22F110A40(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v19 = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v18);
  else
    v18 = 0;
  v20 = v11;
  if (*(_DWORD *)(a5 + 8) >= 0x41u && *(_QWORD *)a5)
  {
    MEMORY[0x2348A0E84](*(_QWORD *)a5, 0x1000C8000313F17);
    v11 = v20;
  }
  *(_QWORD *)a5 = v18;
  *(_DWORD *)(a5 + 8) = v19;
  *(_BYTE *)(a5 + 12) = v11;
  if ((llvm::APFloat::convertToInteger() & 1) == 0)
    return 1;
  sub_22EFF605C(a2);
  v18 = (unsigned __int8 **)sub_22F072D74((uint64_t)a1, v13, 2255, 0);
  sub_22F3C4CB4(&v18, a3);
  v14 = v18;
  if (v18)
  {
    v15 = *v18;
    if (!*v18)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v18[1]);
      *v14 = v15;
    }
    v15[*v15 + 1] = 9;
    v16 = *v14;
    v17 = **v14;
    *v16 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = a4;
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_22F03A0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;

  sub_22EF6A330(a2, a3);
  if (*(_BYTE *)(a4 + 12))
    llvm::APInt::zextOrTrunc((llvm::APInt *)a4);
  else
    llvm::APInt::sextOrTrunc((llvm::APInt *)a4);
  *(_DWORD *)(a1 + 8) = v16;
  *(_QWORD *)a1 = v15;
  v7 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + 12) = sub_22F110C5C(*v7);
  v8 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 87031819;
  else
    v9 = 0;
  if (v9)
  {
    v10 = *(_DWORD *)(a4 + 8);
    if (v10 > 0x40)
      v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) == v10;
    else
      v11 = *(_QWORD *)a4 == 0;
    v12 = v11;
    v13 = v12 ^ 1u;
    if (v16 > 0x40)
    {
      *v15 = v13;
      bzero(v15 + 1, ((((unint64_t)v16 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (!v16)
        v14 = 0;
      *(_QWORD *)a1 = v14 & v13;
    }
  }
}

void sub_22F03A1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char v11;

  sub_22EADFE6C(a1, a2, a3, (uint64_t)&v9);
  v5 = v10;
  v6 = v9;
  v10 = 0;
  v7 = v11;
  if (*(_DWORD *)a4 > 1u)
  {
    sub_22EF53BC0((uint64_t *)a4);
    v8 = v10;
    *(_DWORD *)a4 = 2;
    *(_QWORD *)(a4 + 8) = v6;
    *(_DWORD *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 20) = v7;
    if (v8 >= 0x41)
    {
      if (v9)
        MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_DWORD *)a4 = 2;
    *(_QWORD *)(a4 + 8) = v6;
    *(_DWORD *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 20) = v7;
  }
}

uint64_t sub_22F03A298(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;

  v1 = (*(_DWORD *)a1 >> 18) & 0x3F;
  v2 = v1 > 0x20;
  v3 = (1 << v1) & 0x100180000;
  if (!v2 && v3 != 0)
    return 1;
  if ((*(_DWORD *)a1 & 0x300) != 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if (v7)
    v9 = v8 == 11;
  else
    v9 = 0;
  if (v9)
  {
    if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return 0;
  }
  else if (v7 && v8 == 44)
  {
    v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
    if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) < 8uLL)
      return 0;
  }
  else if (v8 != 9)
  {
    return 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (v13)
  {
    if (((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return 0;
  }
  else
  {
    if (v11 && v12 == 44)
    {
      v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
      if ((*(_BYTE *)(v14 + 74) & 1) != 0 || *(_QWORD *)(v14 + 128) >= 8uLL)
        goto LABEL_32;
      return 0;
    }
    if (v12 != 9)
      return 0;
  }
LABEL_32:
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_DWORD *)(v15 + 16);
  if (v15)
    v17 = v16 == 11;
  else
    v17 = 0;
  if (v17)
    return ((*(_DWORD *)(v15 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  if (!v15 || v16 != 44)
    return v16 == 9;
  v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
  if ((*(_BYTE *)(v18 + 74) & 1) != 0)
    return 1;
  return *(_QWORD *)(v18 + 128) > 7uLL;
}

BOOL sub_22F03A460(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  BOOL v15;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a1 & 3;
  if (v3 == 3)
  {
    v12 = (v2 & 0x7FFFFFFF8) != 0;
    if ((v2 & 4) != 0)
      v12 = v2 > 7;
    if (v12)
      goto LABEL_3;
LABEL_31:
    if ((*(_QWORD *)a2 & 4) != 0)
      v13 = *(_QWORD *)a2 > 7uLL;
    else
      v13 = (*(_QWORD *)a2 & 0x7FFFFFFF8) != 0;
    if ((~*(_DWORD *)a2 & 3) != 0)
      v13 = *(_QWORD *)a2 > 3uLL;
    return !v13;
  }
  if (v2 <= 3)
    goto LABEL_31;
LABEL_3:
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 & 3;
  if (v5 == 3)
  {
    v11 = 0;
    v15 = (v4 & 0x7FFFFFFF8) != 0;
    if ((v4 & 4) != 0)
      v15 = v4 > 7;
    if (v2 != v4 || !v15)
      return v11;
  }
  else if (v4 < 4 || v2 != v4)
  {
    return 0;
  }
  if (v3 != 2 && (~(_BYTE)v2 & 3) != 0)
    v7 = *(_DWORD *)(a1 + 8);
  else
    v7 = 0;
  if (v5 != 2 && (~(_BYTE)v4 & 3) != 0)
    v8 = *(_DWORD *)(a2 + 8);
  else
    v8 = 0;
  if (v7 != v8)
    return 0;
  if (v3 != 2 && (~(_BYTE)v2 & 3) != 0)
    v9 = *(_DWORD *)(a1 + 12);
  else
    v9 = 0;
  if (v5 != 2 && (~(_BYTE)v4 & 3) != 0)
    v10 = *(_DWORD *)(a2 + 12);
  else
    v10 = 0;
  return v9 == v10;
}

uint64_t sub_22F03A5B4(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7[9];
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[12];

  v13[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F0175A4(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v9 = -1;
    v10 = 0;
    v11 = v13;
    v12 = 0x800000000;
    v13[8] = 0;
    v13[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v8, 1u))
    {
      LODWORD(v7[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v8, (uint64_t)v7, 0);
      if ((_DWORD)v5)
        sub_22F01E36C((uint64_t)a1, v7);
      if (LODWORD(v7[0]) >= 2)
        sub_22EF53BC0(v7);
    }
    else
    {
      v5 = 0;
    }
    if (v11 != v13)
      free(v11);
  }
  return v5;
}

void sub_22F03A72C(char **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  char *v25;

  if (a2)
  {
    while (1)
    {
      v3 = a2;
      v4 = *a2;
      if (v4 > 0xD5)
      {
        if (v4 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v6 = a2 + 16;
        }
        else
        {
          if (v4 != 214)
            goto LABEL_19;
          v6 = a2 + 24;
        }
      }
      else if (v4 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (a2[48])
          v6 = a2 + 24;
        else
          v6 = a2 + 32;
      }
      else
      {
        if (v4 != 176)
          goto LABEL_19;
        v5 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v5 == -1)
          goto LABEL_19;
        v6 = &a2[8 * v5 + 40];
      }
      a2 = *(unsigned __int8 **)v6;
      if (*(unsigned __int8 **)v6 == v3)
        goto LABEL_19;
    }
  }
  v3 = 0;
LABEL_19:
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 + 1;
  if (v7 < *((_DWORD *)a1 + 3))
  {
    v9 = *a1;
    v10 = *((unsigned int *)a1 + 2);
LABEL_35:
    bzero(&v9[128 * v10], ((v7 - v10) << 7) + 128);
    v9 = *a1;
    goto LABEL_36;
  }
  v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v9 = (char *)v11;
  v12 = *a1;
  v13 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v13)
  {
    v14 = &v12[128 * v13];
    v15 = v11;
    do
    {
      *(_QWORD *)v15 = *(_QWORD *)v12;
      *(_DWORD *)(v15 + 8) = *((_DWORD *)v12 + 2);
      v16 = *((_OWORD *)v12 + 1);
      v17 = *((_OWORD *)v12 + 2);
      v18 = *((_OWORD *)v12 + 4);
      *(_OWORD *)(v15 + 48) = *((_OWORD *)v12 + 3);
      *(_OWORD *)(v15 + 64) = v18;
      *(_OWORD *)(v15 + 16) = v16;
      *(_OWORD *)(v15 + 32) = v17;
      *((_DWORD *)v12 + 2) = 0;
      *(_BYTE *)(v15 + 80) = v12[80];
      *(_DWORD *)(v15 + 88) = *((_DWORD *)v12 + 22);
      *(_QWORD *)(v15 + 96) = 0;
      *(_WORD *)(v15 + 104) = 0;
      *(_QWORD *)(v15 + 112) = 0;
      *(_QWORD *)(v15 + 96) = *((_QWORD *)v12 + 12);
      *(_OWORD *)(v15 + 104) = *(_OWORD *)(v12 + 104);
      *(_DWORD *)(v15 + 120) = *((_DWORD *)v12 + 30);
      *((_QWORD *)v12 + 12) = 0;
      v12 += 128;
      v15 += 128;
    }
    while (v12 != v14);
    v12 = *a1;
    v19 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v19)
    {
      v20 = v19 << 7;
      do
      {
        v21 = &v12[v20];
        v22 = *(_QWORD *)&v12[v20 - 32];
        if (v22)
        {
          *(_OWORD *)*(_QWORD *)(v22 + 16) = *(_OWORD *)(v21 - 24);
          *(_DWORD *)(*((_QWORD *)v21 - 4) + 820) = *((_DWORD *)v21 - 2);
        }
        v24 = *((_DWORD *)v21 - 30);
        v23 = (uint64_t *)(v21 - 120);
        if (v24 >= 2)
          sub_22EF53BC0(v23);
        v20 -= 128;
      }
      while (v20);
      v12 = *a1;
    }
  }
  if (v12 != (char *)(a1 + 2))
    free(v12);
  *a1 = v9;
  *((_DWORD *)a1 + 3) = 0;
  v10 = *((unsigned int *)a1 + 2);
  if (v8 != v10)
    goto LABEL_35;
LABEL_36:
  *((_DWORD *)a1 + 2) = v8;
  v25 = &v9[128 * (unint64_t)(v7 + 1)];
  *((_QWORD *)v25 - 16) = v3;
  *((_DWORD *)v25 - 10) = 0;
}

void sub_22F03A96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;

  v1 = (*(_DWORD *)(a1 + 8) - 1);
  *(_DWORD *)(a1 + 8) = v1;
  v2 = *(_QWORD *)a1 + (v1 << 7);
  v3 = *(_QWORD *)(v2 + 96);
  if (v3)
  {
    *(_OWORD *)*(_QWORD *)(v3 + 16) = *(_OWORD *)(v2 + 104);
    *(_DWORD *)(*(_QWORD *)(v2 + 96) + 820) = *(_DWORD *)(v2 + 120);
  }
  v5 = *(_DWORD *)(v2 + 8);
  v4 = (uint64_t *)(v2 + 8);
  if (v5 >= 2)
    sub_22EF53BC0(v4);
}

uint64_t sub_22F03A9B8(uint64_t a1, llvm::APInt *this, int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;

  v5 = *(_QWORD *)(a1 + 24);
  if (*((_BYTE *)this + 12))
    llvm::APInt::zextOrTrunc(this);
  else
    llvm::APInt::sextOrTrunc(this);
  result = (uint64_t)v9;
  if (v10 >= 0x41)
  {
    v7 = *v9;
    MEMORY[0x2348A0E84]();
    result = v7;
  }
  if (a3)
    v8 = -result;
  else
    v8 = result;
  *(_QWORD *)(a1 + 24) = v8 + v5;
  return result;
}

uint64_t sub_22F03AA5C(uint64_t a1, uint64_t a2, llvm::APInt *a3, int a4, uint64_t ***a5, _QWORD *a6)
{
  uint64_t v6;
  _QWORD *v7;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  llvm::APInt *v17;
  int v18;
  unsigned int v19;
  char v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  llvm::APInt *v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  llvm::APInt *v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  int v44;
  void *v45;
  unsigned int v46;
  char v47;
  int v48;
  void *v49;
  char v50;
  int v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  char v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unsigned int v67;
  llvm::APInt *v68;
  int v69;
  int v70;
  unsigned __int8 ***v71;
  unsigned __int8 **v72;
  unsigned __int8 ***v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 **v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  void *v94;
  void **p_dst;
  size_t v96;
  size_t v97;
  void **v98;
  size_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  int v112;
  unsigned __int8 ***v113;
  unsigned __int8 **v114;
  unsigned __int8 ***v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned __int8 **v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  char v129;
  void *v130;
  unsigned int v131;
  void *v132;
  unsigned int v133;
  void **__dst;
  size_t v135;
  int64_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  unsigned __int8 *v141;
  unsigned int v142;
  char v143;
  void *__src;
  size_t __len[2];
  _QWORD v146[6];

  v6 = a2;
  v7 = (_QWORD *)a1;
  v146[5] = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 2:
      if (!*((_BYTE *)a3 + 12))
      {
        sub_22E46361C(a3, (uint64_t)&v137);
        sub_22E46361C((llvm::APInt *)a5, (uint64_t)&__dst);
        llvm::APInt::operator*();
        v142 = __len[0];
        v141 = (unsigned __int8 *)__src;
        v143 = 0;
        if (v135 >= 0x41 && __dst)
          MEMORY[0x2348A0E84](__dst, 0x1000C8000313F17);
        if (v138 >= 0x41 && v137)
          MEMORY[0x2348A0E84](v137, 0x1000C8000313F17);
        llvm::APInt::trunc((llvm::APInt *)&v141);
        v50 = v143;
        v51 = __len[0];
        v52 = __src;
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
          MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
        *a6 = v52;
        *((_DWORD *)a6 + 2) = v51;
        *((_BYTE *)a6 + 12) = v50;
        sub_22E46361C((llvm::APInt *)a6, (uint64_t)&__src);
        if (LODWORD(__len[0]) > 0x40)
        {
          v60 = llvm::APInt::equalSlowCase((llvm::APInt *)&__src, (const llvm::APInt *)&v141);
          if (__src)
            MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
          if ((v60 & 1) != 0)
            goto LABEL_143;
        }
        else if (__src == v141)
        {
          goto LABEL_143;
        }
        if (!(*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7))
          goto LABEL_234;
        v56 = *(_QWORD *)(*(_QWORD *)(v7[1] + 1992) + 8);
        sub_22EFF605C(v6);
        *(_DWORD *)(v56 + 312) = v61;
        *(_DWORD *)(v56 + 316) = 2337;
        if (*(char *)(v56 + 311) < 0)
        {
          **(_BYTE **)(v56 + 288) = 0;
          *(_QWORD *)(v56 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v56 + 288) = 0;
          *(_BYTE *)(v56 + 311) = 0;
        }
        v137 = (unsigned __int8 *)(v56 + 320);
        v138 = 0;
        v139 = v56;
        v140 = 1;
        *(_BYTE *)(v56 + 320) = 0;
        *(_DWORD *)(v56 + 664) = 0;
        v90 = *(unsigned int *)(v56 + 776);
        if ((_DWORD)v90)
        {
          v91 = *(_QWORD *)(v56 + 768);
          v92 = 56 * v90;
          do
          {
            if (*(char *)(v91 + v92 - 9) < 0)
              operator delete(*(void **)(v91 + v92 - 32));
            v92 -= 56;
          }
          while (v92);
        }
        goto LABEL_213;
      }
      llvm::APInt::operator*();
      v20 = *((_BYTE *)a3 + 12);
      v21 = __len[0];
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
      *a6 = __src;
      *((_DWORD *)a6 + 2) = v21;
      v22 = 1;
      *((_BYTE *)a6 + 12) = v20;
      return v22;
    case 3:
    case 4:
      if (sub_22E42E5EC((uint64_t)a5, 0))
      {
        a1 = (uint64_t)v7;
        a2 = v6;
        v12 = 2292;
        goto LABEL_41;
      }
      if (a4 == 4)
        sub_22F3C4F5C(a3, (const llvm::APInt *)a5, (uint64_t)&__src);
      else
        sub_22F024760(a3, (const llvm::APInt *)a5, (uint64_t)&__src);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
      *a6 = __src;
      *((_DWORD *)a6 + 2) = __len[0];
      *((_BYTE *)a6 + 12) = BYTE4(__len[0]);
      if (*((_BYTE *)a5 + 12))
        return 1;
      v23 = *((_DWORD *)a5 + 2);
      v24 = v23 - 1;
      v25 = (llvm::APInt *)a5;
      if (v23 >= 0x41)
        v25 = (llvm::APInt *)&(*a5)[v24 >> 6];
      if (((*(_QWORD *)v25 >> v24) & 1) == 0)
        return 1;
      if (v23)
      {
        if (v23 > 0x40)
          v26 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a5) == v23;
        else
          v26 = *a5 == (uint64_t **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v23);
        v63 = v26;
        v22 = 1;
        if (!v63 || *((_BYTE *)a3 + 12))
          return v22;
      }
      else if (*((_BYTE *)a3 + 12))
      {
        return 1;
      }
      v64 = *((_DWORD *)a3 + 2);
      if (v64 > 0x40)
      {
        if (((*(_QWORD *)(*(_QWORD *)a3 + 8 * ((v64 - 1) >> 6)) >> (v64 - 1)) & 1) == 0
          || llvm::APInt::countTrailingZerosSlowCase(a3) != v64 - 1)
        {
          return 1;
        }
      }
      else
      {
        v22 = 1;
        if (*(_QWORD *)a3 != 1 << (v64 - 1))
          return v22;
      }
      sub_22E46361C(a3, (uint64_t)&v137);
      sub_22F311024((llvm::APInt *)&v137, (uint64_t)&__src);
      v22 = sub_22F01E2B8((uint64_t)v7, v6, (uint64_t)&__src, *(_QWORD *)(v6 + 8));
      if (LODWORD(__len[0]) >= 0x41 && __src)
        MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
      if (v138 >= 0x41)
      {
        v65 = v137;
        if (v137)
          goto LABEL_237;
      }
      return v22;
    case 5:
      if (*((_BYTE *)a3 + 12))
      {
        sub_22E4EBD50(a3, (uint64_t)&__src);
        goto LABEL_187;
      }
      sub_22E46361C(a3, (uint64_t)&v137);
      sub_22E46361C((llvm::APInt *)a5, (uint64_t)&__dst);
      sub_22E4EBD50((llvm::APInt *)&v137, (uint64_t)&__src);
      v46 = __len[0];
      LODWORD(__len[0]) = 0;
      v142 = v46;
      v141 = (unsigned __int8 *)__src;
      v143 = 0;
      if (v135 >= 0x41 && __dst)
        MEMORY[0x2348A0E84](__dst, 0x1000C8000313F17);
      if (v138 >= 0x41 && v137)
        MEMORY[0x2348A0E84](v137, 0x1000C8000313F17);
      llvm::APInt::trunc((llvm::APInt *)&v141);
      v47 = v143;
      v48 = __len[0];
      v49 = __src;
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
      *a6 = v49;
      *((_DWORD *)a6 + 2) = v48;
      *((_BYTE *)a6 + 12) = v47;
      sub_22E46361C((llvm::APInt *)a6, (uint64_t)&__src);
      if (LODWORD(__len[0]) > 0x40)
      {
        v58 = llvm::APInt::equalSlowCase((llvm::APInt *)&__src, (const llvm::APInt *)&v141);
        if (__src)
          MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
        if ((v58 & 1) != 0)
          goto LABEL_143;
      }
      else if (__src == v141)
      {
        goto LABEL_143;
      }
      if (!(*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7))
        goto LABEL_234;
      v56 = *(_QWORD *)(*(_QWORD *)(v7[1] + 1992) + 8);
      sub_22EFF605C(v6);
      *(_DWORD *)(v56 + 312) = v59;
      *(_DWORD *)(v56 + 316) = 2337;
      if (*(char *)(v56 + 311) < 0)
      {
        **(_BYTE **)(v56 + 288) = 0;
        *(_QWORD *)(v56 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v56 + 288) = 0;
        *(_BYTE *)(v56 + 311) = 0;
      }
      v137 = (unsigned __int8 *)(v56 + 320);
      v138 = 0;
      v139 = v56;
      v140 = 1;
      *(_BYTE *)(v56 + 320) = 0;
      *(_DWORD *)(v56 + 664) = 0;
      v87 = *(unsigned int *)(v56 + 776);
      if ((_DWORD)v87)
      {
        v88 = *(_QWORD *)(v56 + 768);
        v89 = 56 * v87;
        do
        {
          if (*(char *)(v88 + v89 - 9) < 0)
            operator delete(*(void **)(v88 + v89 - 32));
          v89 -= 56;
        }
        while (v89);
      }
      goto LABEL_213;
    case 6:
      if (*((_BYTE *)a3 + 12))
      {
        sub_22E5EDF90(a3, (uint64_t)&__src);
        goto LABEL_187;
      }
      sub_22E46361C(a3, (uint64_t)&v137);
      sub_22E46361C((llvm::APInt *)a5, (uint64_t)&__dst);
      sub_22E5EDF90((llvm::APInt *)&v137, (uint64_t)&__src);
      v42 = __len[0];
      LODWORD(__len[0]) = 0;
      v142 = v42;
      v141 = (unsigned __int8 *)__src;
      v143 = 0;
      if (v135 >= 0x41 && __dst)
        MEMORY[0x2348A0E84](__dst, 0x1000C8000313F17);
      if (v138 >= 0x41 && v137)
        MEMORY[0x2348A0E84](v137, 0x1000C8000313F17);
      llvm::APInt::trunc((llvm::APInt *)&v141);
      v43 = v143;
      v44 = __len[0];
      v45 = __src;
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
      *a6 = v45;
      *((_DWORD *)a6 + 2) = v44;
      *((_BYTE *)a6 + 12) = v43;
      sub_22E46361C((llvm::APInt *)a6, (uint64_t)&__src);
      if (LODWORD(__len[0]) > 0x40)
      {
        v55 = llvm::APInt::equalSlowCase((llvm::APInt *)&__src, (const llvm::APInt *)&v141);
        if (__src)
          MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
        if ((v55 & 1) != 0)
          goto LABEL_143;
      }
      else if (__src == v141)
      {
LABEL_143:
        v22 = 1;
        goto LABEL_235;
      }
      if (!(*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7))
        goto LABEL_234;
      v56 = *(_QWORD *)(*(_QWORD *)(v7[1] + 1992) + 8);
      sub_22EFF605C(v6);
      *(_DWORD *)(v56 + 312) = v57;
      *(_DWORD *)(v56 + 316) = 2337;
      if (*(char *)(v56 + 311) < 0)
      {
        **(_BYTE **)(v56 + 288) = 0;
        *(_QWORD *)(v56 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v56 + 288) = 0;
        *(_BYTE *)(v56 + 311) = 0;
      }
      v137 = (unsigned __int8 *)(v56 + 320);
      v138 = 0;
      v139 = v56;
      v140 = 1;
      *(_BYTE *)(v56 + 320) = 0;
      *(_DWORD *)(v56 + 664) = 0;
      v84 = *(unsigned int *)(v56 + 776);
      if ((_DWORD)v84)
      {
        v85 = *(_QWORD *)(v56 + 768);
        v86 = 56 * v84;
        do
        {
          if (*(char *)(v85 + v86 - 9) < 0)
            operator delete(*(void **)(v85 + v86 - 32));
          v86 -= 56;
        }
        while (v86);
      }
LABEL_213:
      *(_DWORD *)(v56 + 776) = 0;
      __src = v146;
      *(_OWORD *)__len = xmmword_22F455490;
      llvm::APInt::toString();
      v93 = __len[0];
      if (__len[0] > 0x7FFFFFFFFFFFFFF7)
        abort();
      v94 = __src;
      if (__len[0] >= 0x17)
      {
        v96 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[0] | 7) != 0x17)
          v96 = __len[0] | 7;
        v97 = v96 + 1;
        p_dst = (void **)operator new(v96 + 1);
        v135 = v93;
        v136 = v97 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v136) = __len[0];
        p_dst = (void **)&__dst;
        if (!__len[0])
          goto LABEL_221;
      }
      memmove(p_dst, v94, v93);
LABEL_221:
      *((_BYTE *)p_dst + v93) = 0;
      if (__src != v146)
        free(__src);
      if (v136 >= 0)
        v98 = (void **)&__dst;
      else
        v98 = __dst;
      if (v136 >= 0)
        v99 = HIBYTE(v136) & 0x7F;
      else
        v99 = v135;
      sub_22E3B89A8(&v137, v98, v99);
      v100 = *(_QWORD *)(v6 + 8);
      v101 = v137;
      if (!v137)
      {
        v101 = (unsigned __int8 *)sub_22E3B8AAC(v138);
        v137 = v101;
      }
      v101[*v101 + 1] = 9;
      v102 = v137;
      v103 = *v137;
      *v137 = v103 + 1;
      *(_QWORD *)&v102[8 * v103 + 16] = v100;
      if (SHIBYTE(v136) < 0)
        operator delete(__dst);
      sub_22E3BB0B8((uint64_t)&v137);
LABEL_234:
      v22 = sub_22F01E2B8((uint64_t)v7, v6, (uint64_t)&v141, *(_QWORD *)(v6 + 8));
LABEL_235:
      if (v142 >= 0x41)
      {
        v65 = v141;
        if (v141)
LABEL_237:
          MEMORY[0x2348A0E84](v65, 0x1000C8000313F17);
      }
      return v22;
    case 7:
      if ((*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 52) & 0x40000000) != 0)
      {
        v30 = *((_DWORD *)a5 + 2);
        v31 = (*((_DWORD *)a3 + 2) - 1);
        v133 = v30;
        if (v30 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v132);
          v30 = v133;
          v33 = (unint64_t)v132;
          v126 = *((_DWORD *)a5 + 2);
          v127 = *((_BYTE *)a5 + 12);
          LODWORD(__len[0]) = v133;
          __src = v132;
          v133 = 0;
          BYTE4(__len[0]) = v127;
          if (v126 > 0x40)
          {
            llvm::APInt::andAssignSlowCase((llvm::APInt *)a5, (const llvm::APInt *)&__src);
            v30 = __len[0];
LABEL_53:
            if (v30 >= 0x41 && __src)
              MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
            if (v133 >= 0x41 && v132)
              MEMORY[0x2348A0E84](v132, 0x1000C8000313F17);
            goto LABEL_59;
          }
        }
        else
        {
          v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
          if (!v30)
            v32 = 0;
          v33 = v32 & v31;
          v132 = (void *)v33;
          v34 = *((_BYTE *)a5 + 12);
          LODWORD(__len[0]) = v30;
          __src = (void *)v33;
          v133 = 0;
          BYTE4(__len[0]) = v34;
        }
        *a5 = (uint64_t **)((unint64_t)*a5 & v33);
        goto LABEL_53;
      }
      if (!*((_BYTE *)a5 + 12))
      {
        v15 = *((_DWORD *)a5 + 2);
        v16 = v15 - 1;
        v17 = (llvm::APInt *)a5;
        if (v15 >= 0x41)
          v17 = (llvm::APInt *)&(*a5)[v16 >> 6];
        if (((*(_QWORD *)v17 >> v16) & 1) != 0)
        {
          sub_22EFF605C(v6);
          __src = (void *)sub_22F072D74((uint64_t)v7, v18, 2239, 0);
          sub_22F3C4700((unsigned __int8 ***)&__src);
          sub_22F311024((llvm::APInt *)a5, (uint64_t)&__src);
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
            MEMORY[0x2348A0E84](*a5, 0x1000C8000313F17);
          *a5 = (uint64_t **)__src;
          *((_DWORD *)a5 + 2) = __len[0];
          *((_BYTE *)a5 + 12) = BYTE4(__len[0]);
          goto LABEL_249;
        }
      }
LABEL_59:
      v35 = (*((_DWORD *)a3 + 2) - 1);
      v36 = *((_DWORD *)a5 + 2);
      if (v36 >= 0x41)
      {
        if (v36 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) > 0x40)
          goto LABEL_69;
        v37 = **a5;
      }
      else
      {
        v37 = (uint64_t *)*a5;
      }
      if ((unint64_t)v37 <= v35)
        LODWORD(v35) = (_DWORD)v37;
LABEL_69:
      if (sub_22E508590((uint64_t)a5, v35))
      {
        sub_22EFF605C(v6);
        __src = (void *)sub_22F072D74((uint64_t)v7, v70, 2220, 0);
        v71 = sub_22F3C4700((unsigned __int8 ***)&__src);
        v72 = *v71;
        if (*v71)
        {
          v73 = v71;
          v74 = *(_QWORD *)(v6 + 8);
          v75 = *v72;
          if (!*v72)
          {
            v75 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v72[1]);
            *v72 = v75;
          }
          v75[*v75 + 1] = 9;
          v76 = *v72;
          v77 = **v72;
          *v76 = v77 + 1;
          *(_QWORD *)&v76[8 * v77 + 16] = v74;
          v78 = *v73;
          if (v78)
          {
            v79 = *((unsigned int *)a3 + 2);
            v80 = *v78;
            if (!*v78)
            {
              v80 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v78[1]);
              *v78 = v80;
            }
            v80[*v80 + 1] = 3;
            v81 = *v78;
            v82 = **v78;
            *v81 = v82 + 1;
            *(_QWORD *)&v81[8 * v82 + 16] = v79;
          }
        }
      }
      else if (!*((_BYTE *)a3 + 12)
             && (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v7 + 96))(v7) + 2000) + 1) & 0x10) == 0)
      {
        v39 = *((_DWORD *)a3 + 2);
        if (*((_BYTE *)a3 + 12))
          goto LABEL_76;
        v40 = (llvm::APInt *)(*(_QWORD *)a3 + 8 * ((v39 - 1) >> 6));
        if (v39 < 0x41)
          v40 = a3;
        if (((*(_QWORD *)v40 >> (v39 - 1)) & 1) != 0)
        {
          sub_22EFF605C(v6);
          __src = (void *)sub_22F072D74((uint64_t)v7, v125, 2223, 0);
          sub_22F3C4700((unsigned __int8 ***)&__src);
        }
        else
        {
LABEL_76:
          if (v39 > 0x40)
            v41 = llvm::APInt::countLeadingZerosSlowCase(a3);
          else
            v41 = v39 + __clz(*(_QWORD *)a3) - 64;
          if (v41 < v35)
          {
            sub_22EFF605C(v6);
            sub_22F072D74((uint64_t)v7, v62, 2222, 0);
          }
        }
      }
      sub_22F03BD5C((uint64_t)&__src, a3, v35);
LABEL_187:
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6)
        MEMORY[0x2348A0E84](*a6, 0x1000C8000313F17);
      *a6 = __src;
      *((_DWORD *)a6 + 2) = __len[0];
      *((_BYTE *)a6 + 12) = BYTE4(__len[0]);
      return 1;
    case 8:
      if ((*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 52) & 0x40000000) == 0)
      {
        if (!*((_BYTE *)a5 + 12))
        {
          v66 = *((_DWORD *)a5 + 2);
          v67 = v66 - 1;
          v68 = (llvm::APInt *)a5;
          if (v66 >= 0x41)
            v68 = (llvm::APInt *)&(*a5)[v67 >> 6];
          if (((*(_QWORD *)v68 >> v67) & 1) != 0)
          {
            sub_22EFF605C(v6);
            __src = (void *)sub_22F072D74((uint64_t)v7, v69, 2239, 0);
            sub_22F3C4700((unsigned __int8 ***)&__src);
            sub_22F311024((llvm::APInt *)a5, (uint64_t)&__src);
            if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
              MEMORY[0x2348A0E84](*a5, 0x1000C8000313F17);
            *a5 = (uint64_t **)__src;
            *((_DWORD *)a5 + 2) = __len[0];
            *((_BYTE *)a5 + 12) = BYTE4(__len[0]);
            goto LABEL_59;
          }
        }
LABEL_249:
        v109 = (*((_DWORD *)a3 + 2) - 1);
        v110 = *((_DWORD *)a5 + 2);
        if (v110 >= 0x41)
        {
          if (v110 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) > 0x40)
          {
LABEL_255:
            if (sub_22E508590((uint64_t)a5, v109))
            {
              sub_22EFF605C(v6);
              __src = (void *)sub_22F072D74((uint64_t)v7, v112, 2220, 0);
              v113 = sub_22F3C4700((unsigned __int8 ***)&__src);
              v114 = *v113;
              if (*v113)
              {
                v115 = v113;
                v116 = *(_QWORD *)(v6 + 8);
                v117 = *v114;
                if (!*v114)
                {
                  v117 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v114[1]);
                  *v114 = v117;
                }
                v117[*v117 + 1] = 9;
                v118 = *v114;
                v119 = **v114;
                *v118 = v119 + 1;
                *(_QWORD *)&v118[8 * v119 + 16] = v116;
                v120 = *v115;
                if (v120)
                {
                  v121 = *((unsigned int *)a3 + 2);
                  v122 = *v120;
                  if (!*v120)
                  {
                    v122 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v120[1]);
                    *v120 = v122;
                  }
                  v122[*v122 + 1] = 3;
                  v123 = *v120;
                  v124 = **v120;
                  *v123 = v124 + 1;
                  *(_QWORD *)&v123[8 * v124 + 16] = v121;
                }
              }
            }
            sub_22F3C4AE8(a3, v109, (uint64_t)&__src);
            goto LABEL_187;
          }
          v111 = **a5;
        }
        else
        {
          v111 = (uint64_t *)*a5;
        }
        if ((unint64_t)v111 <= v109)
          LODWORD(v109) = (_DWORD)v111;
        goto LABEL_255;
      }
      v104 = *((_DWORD *)a5 + 2);
      v105 = (*((_DWORD *)a3 + 2) - 1);
      v131 = v104;
      if (v104 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v130);
        v104 = v131;
        v107 = (unint64_t)v130;
        v128 = *((_DWORD *)a5 + 2);
        v129 = *((_BYTE *)a5 + 12);
        LODWORD(__len[0]) = v131;
        __src = v130;
        v131 = 0;
        BYTE4(__len[0]) = v129;
        if (v128 > 0x40)
        {
          llvm::APInt::andAssignSlowCase((llvm::APInt *)a5, (const llvm::APInt *)&__src);
          v104 = __len[0];
LABEL_243:
          if (v104 >= 0x41 && __src)
            MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
          if (v131 >= 0x41 && v130)
            MEMORY[0x2348A0E84](v130, 0x1000C8000313F17);
          goto LABEL_249;
        }
      }
      else
      {
        v106 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
        if (!v104)
          v106 = 0;
        v107 = v106 & v105;
        v130 = (void *)v107;
        v108 = *((_BYTE *)a5 + 12);
        LODWORD(__len[0]) = v104;
        __src = (void *)v107;
        v131 = 0;
        BYTE4(__len[0]) = v108;
      }
      *a5 = (uint64_t **)((unint64_t)*a5 & v107);
      goto LABEL_243;
    case 10:
      if (*((_BYTE *)a3 + 12))
        v14 = llvm::APInt::compare(a3, (const llvm::APInt *)a5);
      else
        v14 = llvm::APInt::compareSigned(a3, (const llvm::APInt *)a5);
      v38 = v14 >> 31;
      goto LABEL_122;
    case 11:
      if (*((_BYTE *)a3 + 12))
        v27 = llvm::APInt::compare(a3, (const llvm::APInt *)a5);
      else
        v27 = llvm::APInt::compareSigned(a3, (const llvm::APInt *)a5);
      v38 = v27 > 0;
      goto LABEL_122;
    case 12:
      if (*((_BYTE *)a3 + 12))
        v29 = llvm::APInt::compare(a3, (const llvm::APInt *)a5);
      else
        v29 = llvm::APInt::compareSigned(a3, (const llvm::APInt *)a5);
      v38 = v29 < 1;
      goto LABEL_122;
    case 13:
      if (*((_BYTE *)a3 + 12))
        v13 = llvm::APInt::compare(a3, (const llvm::APInt *)a5);
      else
        v13 = llvm::APInt::compareSigned(a3, (const llvm::APInt *)a5);
      v38 = v13 >= 0;
      goto LABEL_122;
    case 14:
      if (*((_DWORD *)a3 + 2) > 0x40u)
        v19 = llvm::APInt::equalSlowCase(a3, (const llvm::APInt *)a5);
      else
        v19 = *(_QWORD *)a3 == (_QWORD)*a5;
      v38 = v19;
      goto LABEL_122;
    case 15:
      if (*((_DWORD *)a3 + 2) > 0x40u)
        v28 = llvm::APInt::equalSlowCase(a3, (const llvm::APInt *)a5);
      else
        v28 = *(_QWORD *)a3 == (_QWORD)*a5;
      v38 = v28 ^ 1u;
LABEL_122:
      v53 = *((unsigned int *)a6 + 2);
      if (v53 > 0x40)
      {
        *(_QWORD *)*a6 = v38;
        bzero((void *)(*a6 + 8), (((unint64_t)(v53 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        if ((_DWORD)v53)
          v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
        else
          v54 = 0;
        *a6 = v54 & v38;
      }
      return 1;
    case 16:
      sub_22F3C4D94(a3, (const llvm::APInt *)a5, (uint64_t)&__src);
      goto LABEL_187;
    case 17:
      sub_22F3C4E2C(a3, (const llvm::APInt *)a5, (uint64_t)&__src);
      goto LABEL_187;
    case 18:
      sub_22F3C4EC4(a3, (llvm::APInt *)a5, (uint64_t)&__src);
      goto LABEL_187;
    default:
      v12 = 103;
LABEL_41:
      sub_22F072CEC(a1, a2, v12, 0);
      return 0;
  }
}

llvm::APInt *sub_22F03BD5C(uint64_t a1, llvm::APInt *a2, int a3)
{
  llvm::APInt *result;
  char v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v9 = *((_DWORD *)a2 + 2);
  if (v9 > 0x40)
  {
    v7 = a3;
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, a2);
    a3 = v7;
  }
  else
  {
    v8 = *(_QWORD *)a2;
  }
  result = sub_22E463264((llvm::APInt *)&v8, a3);
  v6 = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 12) = v6;
  return result;
}

BOOL sub_22F03BDD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t *v7;
  _BOOL8 result;
  BOOL v9;
  unint64_t v10[3];

  v4 = *(_QWORD *)a2;
  if ((~*(_DWORD *)a2 & 3) != 0)
  {
    if (v4 < 4)
      return 0;
  }
  else
  {
    v9 = (v4 & 0x7FFFFFFF8) != 0;
    if ((v4 & 4) != 0)
      v9 = v4 > 7;
    if (!v9)
      return 0;
  }
  v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 3) != 0)
    goto LABEL_4;
  result = 0;
  if ((v5 & 8) != 0 && ((*(_DWORD *)(a2 + 56) == 1) & (v5 >> 2)) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (int)((v5 >> 4) - 1)) == *(_QWORD *)(a2 + 32))
    {
LABEL_4:
      v6 = *(_QWORD *)(a2 + 8);
      v10[0] = *(_QWORD *)a2;
      v10[1] = v6;
      v7 = (uint64_t *)(sub_22EF52AD4(v10) & 0xFFFFFFFFFFFFFFF0);
      if ((sub_22F1110EC(*v7, 0) & 1) != 0)
        return 1;
      sub_22EF5CCD0(a1, *v7, (uint64_t)v10);
      return *(_QWORD *)(a2 + 16) == v10[0];
    }
    return 0;
  }
  return result;
}

BOOL sub_22F03BED8(uint64_t a1)
{
  _BOOL8 result;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  result = 0;
  if ((a1 & 3) == 0)
  {
    v3 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a1 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 60 > 6)
        return 0;
      v4 = (uint64_t *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      {
        return 0;
      }
      else
      {
        if ((sub_22F1110EC(*v4, 0) & 1) != 0)
          return 1;
        if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
        {
          v5 = *(_QWORD *)(v3 + 16);
          v6 = v5 & 0xFFFFFFFFFFFFFFF8;
          if ((v5 & 4) != 0)
            v6 = *(_QWORD *)v6;
          for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
          {
            v8 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v8 = -56;
              }
              else if (i != 81)
              {
                goto LABEL_23;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_22;
              if (i == 16)
                goto LABEL_16;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_29;
              if (i == 24)
              {
LABEL_16:
                v8 = -48;
              }
              else
              {
LABEL_22:
                if (i != 70)
                {
LABEL_23:
                  v9 = i - 52;
                  if ((i - 33) >= 5)
                    v10 = -48;
                  else
                    v10 = -64;
                  if (v9 >= 6)
                    v8 = v10;
                  else
                    v8 = -72;
                  goto LABEL_29;
                }
                v8 = -64;
              }
            }
LABEL_29:
            v11 = *(_QWORD *)(v6 + v8 + 16);
            v6 = v11 & 0xFFFFFFFFFFFFFFF8;
            if ((v11 & 4) != 0)
              v6 = *(_QWORD *)v6;
          }
          v3 = v6 - 40;
        }
        return sub_22EF5CDF0(*(_QWORD *)(v3 + 88), *v4) == 0;
      }
    }
  }
  return result;
}

uint64_t sub_22F03C074(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v5 = *(_DWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a3 + 32);
  if (v6 >= v5)
    v7 = v5;
  else
    v7 = v6;
  if (!(_DWORD)v7)
  {
LABEL_27:
    v20 = 0;
    goto LABEL_31;
  }
  v10 = 0;
  while (a1 <= 0xF)
  {
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a3 + 24);
LABEL_17:
    v18 = *(_QWORD *)(v11 + 8 * v10);
    if (v18 != *(_QWORD *)(v12 + 8 * v10))
    {
      v20 = 0;
      goto LABEL_30;
    }
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    if (!v19 || (*(_DWORD *)(v19 + 28) & 0x7Fu) - 49 > 2)
    {
      a1 = 0;
      goto LABEL_23;
    }
    v17 = (unint64_t *)(v19 + 48);
LABEL_21:
    a1 = *v17;
LABEL_23:
    if (v7 == ++v10)
      goto LABEL_27;
  }
  v13 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v14 != 12 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
    goto LABEL_17;
  if (*(_QWORD *)(v11 + 8 * v10) == *(_QWORD *)(v12 + 8 * v10))
  {
    v16 = *(unsigned __int8 *)(v13 + 16);
    if (v14 == 12)
    {
      if (v16 != 12)
        goto LABEL_15;
    }
    else if ((v16 & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
LABEL_15:
      v13 = sub_22F10CF48(v13);
    }
    v17 = (unint64_t *)(v13 + 32);
    goto LABEL_21;
  }
  v20 = 1;
LABEL_30:
  v7 = v10;
LABEL_31:
  *a4 = v20;
  return v7;
}

BOOL sub_22F03C1BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 result;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  result = *(_QWORD *)a2 < 8uLL && (*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) == 0;
  if (v3)
    v5 = *(_QWORD *)a2 >= 8uLL;
  else
    v5 = 0;
  if (v5)
  {
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
    if (v7 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 32))(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8)
      && (v8 = *(unsigned int *)(a1 + 16), (_DWORD)v8 == *(_DWORD *)(a2 + 16)))
    {
      return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), 8 * v8) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22F03C268(uint64_t *a1, unsigned int *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8;
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned int *v25;
  uint64_t v26;
  void *v27;
  void **v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  uint8x8_t v46;
  unsigned __int32 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v58;
  int v59;
  int v60;
  int v61;
  void **v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int8 **v73;
  unsigned __int8 **v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  uint64_t v83;
  void **v84;
  size_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  std::string::size_type v96;
  std::string *v97;
  unsigned __int8 **v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  uint64_t v108;
  void **v109;
  size_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::APFloatBase *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  llvm::APFloatBase *v123;
  uint64_t v124;
  uint64_t v125;
  llvm::APFloatBase *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  _BOOL8 v133;
  llvm::APFloatBase *v134;
  uint64_t v135;
  unsigned __int8 *v136;
  void *v137;
  uint64_t v138;
  BOOL v139;
  llvm::APFloatBase *v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  llvm::APFloatBase *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  void *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  llvm::APFloatBase *v155;
  uint64_t v156;
  unsigned __int8 *v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  std::string::size_type v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned int v174;
  std::string::size_type v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t *v185;
  _BOOL4 v186;
  uint64_t *v187;
  _BOOL4 v188;
  _BOOL4 v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  _QWORD *v194;
  int v195;
  _BOOL8 v196;
  std::string *v197;
  uint64_t v198;
  void *v199;
  char v200;
  unsigned int v201;
  void *v202;
  int v203;
  _BOOL4 v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  int v224;
  std::string::size_type v225;
  std::string::value_type v226;
  int v227;
  std::string::size_type v228;
  std::string::value_type v229;
  unsigned int v230;
  std::string::size_type v231;
  unint64_t v232;
  unint64_t v233;
  std::string::size_type v234;
  unsigned int v235;
  unint64_t v236;
  std::string::size_type v237;
  int v238;
  unint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  int v250;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unint64_t v260;
  uint64_t v261;
  BOOL v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  unsigned int data;
  int v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  unsigned __int8 **v278;
  std::string *v279;
  std::string::size_type v280;
  std::string *v281;
  std::string::size_type v282;
  std::string *v283;
  size_t size;
  unsigned __int8 *v285;
  unsigned __int8 *v286;
  uint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  int v290;
  int v291;
  unsigned __int8 *v292;
  const char *v293;
  _QWORD *v294;
  uint64_t v295;
  unint64_t v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  std::string::value_type v316;
  std::string::size_type v317;
  unsigned int v318;
  std::string::value_type v319;
  std::string::size_type v320;
  _QWORD v321[2];
  _QWORD v322[2];
  uint64_t v323;
  BOOL v324;
  std::string v325;
  std::string::size_type v326;
  unsigned int v327;
  std::string::size_type v328;
  unsigned int v329;
  std::string::size_type v330;
  unsigned int v331;
  std::string::size_type v332;
  unsigned int v333;
  std::string::size_type v334;
  unsigned int v335;
  BOOL v336;
  std::string::size_type v337;
  unsigned int v338;
  std::string::size_type v339;
  unsigned int v340;
  std::string v341;
  std::string v342;
  std::string v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  _BYTE v348[64];
  uint64_t v349;
  uint64_t v350;
  void *__p[2];
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  _BYTE v357[64];
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;

  v10 = (uint64_t)a2;
  v360 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 788)
  {
    v12 = a3 - 353;
    switch(a3)
    {
      case 353:
        v140 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v141 = llvm::APFloatBase::IEEEdouble(v140);
        MEMORY[0x23489F4E0](&__p[1], &v343, v141);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v142 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 48);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v143 = sub_22F032714((uint64_t *)&v343, v142);
        if ((v143 & 1) != 0)
        {
          v144 = __p[1];
          v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v143);
          v145 = v352;
          if (v131 != v144)
            v145 = (uint64_t)__p;
          v146 = *(_BYTE *)(v145 + 28) & 7;
          if (v146 == 3)
          {
            v147 = 4;
          }
          else if (v146 == 2)
          {
            v238 = sub_22F040274(__p);
            v147 = 2;
            if (v238)
              v147 = 3;
          }
          else
          {
            v147 = v146 == 0;
          }
          v13 = sub_22F0175A4(a1, *(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8 * v147+ 8));
        }
        else
        {
          v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v143);
          v13 = 0;
        }
        goto LABEL_222;
      case 354:
        v126 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v127 = llvm::APFloatBase::IEEEdouble(v126);
        MEMORY[0x23489F4E0](&__p[1], &v343, v127);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v128 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 8);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v129 = sub_22F032714((uint64_t *)&v343, v128);
        v13 = v129;
        if ((v129 & 1) == 0)
          goto LABEL_221;
        v130 = __p[1];
        v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
        v132 = v352;
        if (v131 != v130)
          v132 = (uint64_t)__p;
        v133 = (*(_BYTE *)(v132 + 28) & 6) != 0;
        goto LABEL_220;
      case 355:
        v134 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v135 = llvm::APFloatBase::IEEEdouble(v134);
        MEMORY[0x23489F4E0](&__p[1], &v343, v135);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v136 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 8);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v129 = sub_22F032714((uint64_t *)&v343, v136);
        v13 = v129;
        if ((v129 & 1) == 0)
          goto LABEL_221;
        v137 = __p[1];
        v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
        v138 = v352;
        if (v131 != v137)
          v138 = (uint64_t)__p;
        v139 = (*(_BYTE *)(v138 + 28) & 7) == 0;
        goto LABEL_217;
      case 356:
        v148 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v149 = llvm::APFloatBase::IEEEdouble(v148);
        MEMORY[0x23489F4E0](&__p[1], &v343, v149);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v150 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 8);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v129 = sub_22F032714((uint64_t *)&v343, v150);
        v13 = v129;
        if ((v129 & 1) == 0)
          goto LABEL_221;
        v151 = __p[1];
        v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
        v152 = v352;
        if (v131 != v151)
          v152 = (uint64_t)__p;
        v153 = *(_BYTE *)(v152 + 28);
        v154 = 1;
        if ((v153 & 8) != 0)
          v154 = -1;
        if ((v153 & 7) != 0)
          v133 = 0;
        else
          v133 = v154;
        goto LABEL_220;
      case 357:
        v155 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v156 = llvm::APFloatBase::IEEEdouble(v155);
        MEMORY[0x23489F4E0](&__p[1], &v343, v156);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v157 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 8);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v129 = sub_22F032714((uint64_t *)&v343, v157);
        v13 = v129;
        if ((v129 & 1) != 0)
        {
          v158 = __p[1];
          v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
          v159 = v352;
          if (v131 != v158)
            v159 = (uint64_t)__p;
          v139 = (*(_BYTE *)(v159 + 28) & 7) == 1;
LABEL_217:
          v133 = v139;
LABEL_220:
          sub_22F03A1EC(*(_QWORD *)(*a1 + 8), v133, *(_QWORD *)(v10 + 8), a1[1]);
        }
        else
        {
LABEL_221:
          v131 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
        }
LABEL_222:
        if (v131 == __p[1])
LABEL_329:
          sub_22E463170((llvm::APFloatBase *)&v352);
        else
LABEL_223:
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
        return v13;
      case 358:
        v120 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v343, 0.0);
        v121 = llvm::APFloatBase::IEEEdouble(v120);
        MEMORY[0x23489F4E0](&__p[1], &v343, v121);
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v343);
        v122 = *(unsigned __int8 **)(v10
                                   + ((unint64_t)*(unsigned int *)v10 >> 24)
                                   + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                   + 8);
        v343.__r_.__value_.__r.__words[0] = *a1;
        v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v123 = (llvm::APFloatBase *)sub_22F032714((uint64_t *)&v343, v122);
        v13 = (uint64_t)v123;
        if ((_DWORD)v123)
        {
          v124 = sub_22F040274(__p);
          v125 = (v124 & 1) == 0
              && ((v199 = __p[1], (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v124) == v199)
                ? (v200 = *(_BYTE *)(v352 + 28))
                : (v200 = BYTE4(v353)),
                  v201 = v200 & 7,
                  v201 >= 2)
              && v201 != 3;
          sub_22F03A1EC(*(_QWORD *)(*a1 + 8), v125, *(_QWORD *)(v10 + 8), a1[1]);
        }
        v202 = __p[1];
        if ((void *)llvm::APFloatBase::PPCDoubleDouble(v123) == v202)
          goto LABEL_329;
        goto LABEL_223;
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 401:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 419:
      case 420:
      case 421:
      case 422:
      case 423:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 431:
      case 432:
      case 433:
      case 435:
      case 436:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 448:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
        return sub_22F03F288(a1, (unsigned int *)v10);
      case 366:
      case 367:
      case 368:
      case 369:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = 0;
        if (!sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), __p, *a1))goto LABEL_263;
        v14 = (int)__p[1];
        if (LODWORD(__p[1]) > 0x40)
        {
          v15 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p);
          if (v15 == v14)
            goto LABEL_236;
        }
        else
        {
          if (!__p[0])
            goto LABEL_236;
          v15 = LODWORD(__p[1]) + __clz((unint64_t)__p[0]) - 64;
        }
        goto LABEL_261;
      case 370:
      case 371:
      case 372:
      case 373:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = 0;
        if (!sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), __p, *a1))goto LABEL_263;
        v39 = (int)__p[1];
        if (LODWORD(__p[1]) > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) == v39)
            goto LABEL_236;
          v15 = llvm::APInt::countTrailingZerosSlowCase((llvm::APInt *)__p);
        }
        else
        {
          if (!__p[0])
            goto LABEL_236;
          v40 = __clz(__rbit64((unint64_t)__p[0]));
          if (LODWORD(__p[1]) >= v40)
            v15 = v40;
          else
            v15 = __p[1];
        }
LABEL_261:
        v35 = v15;
        v32 = a1[1];
        v33 = *(_QWORD *)(v10 + 8);
        v34 = *(_QWORD *)(*a1 + 8);
        goto LABEL_262;
      case 374:
      case 375:
      case 376:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        v43 = (int)__p[1];
        if (LODWORD(__p[1]) > 0x40)
        {
          v45 = llvm::APInt::countTrailingZerosSlowCase((llvm::APInt *)__p);
        }
        else
        {
          v44 = __clz(__rbit64((unint64_t)__p[0]));
          if (LODWORD(__p[1]) >= v44)
            v45 = v44;
          else
            v45 = (int)__p[1];
        }
        if (v45 == v43)
          v42 = 0;
        else
          v42 = (v45 + 1);
        goto LABEL_253;
      case 377:
      case 378:
      case 379:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        if (LODWORD(__p[1]) > 0x40)
          v41 = llvm::APInt::countPopulationSlowCase((llvm::APInt *)__p);
        else
          v41 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)__p[0]));
        v42 = v41 & 1;
        goto LABEL_253;
      case 380:
      case 381:
      case 382:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        if (LODWORD(__p[1]) > 0x40)
        {
          v47 = llvm::APInt::countPopulationSlowCase((llvm::APInt *)__p);
        }
        else
        {
          v46 = (uint8x8_t)vcnt_s8((int8x8_t)__p[0]);
          v46.i16[0] = vaddlv_u8(v46);
          v47 = v46.i32[0];
        }
        v42 = v47;
        goto LABEL_253;
      case 383:
      case 384:
      case 385:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        v42 = sub_22E99C40C((llvm::APInt *)__p) - 1;
LABEL_253:
        v176 = a1[1];
        v177 = *(_QWORD *)(v10 + 8);
        v178 = *(_QWORD *)(*a1 + 8);
        goto LABEL_254;
      case 386:
      case 387:
      case 388:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        llvm::APInt::byteSwap((llvm::APInt *)__p);
        goto LABEL_74;
      case 389:
      case 390:
      case 391:
      case 392:
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), __p, *a1);
        if (!(_DWORD)v13)
          goto LABEL_263;
        llvm::APInt::reverseBits((llvm::APInt *)__p);
LABEL_74:
        sub_22F040190(a1[1], (const llvm::APInt *)&v343, v10);
        goto LABEL_75;
      case 393:
      case 394:
      case 395:
      case 396:
        goto LABEL_46;
      case 397:
      case 398:
      case 399:
      case 400:
        goto LABEL_18;
      case 402:
        v160 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
        v161 = *a1;
        v162 = *(_QWORD *)(*a1 + 16);
        *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)v162;
        v163 = *(_DWORD *)(v161 + 820);
        *(_QWORD *)(v162 + 8) = 0;
        *(_DWORD *)(v161 + 820) = *(_DWORD *)(v161 + 32) + 1;
        v342.__r_.__value_.__r.__words[0] = v161;
        LOWORD(v342.__r_.__value_.__r.__words[1]) = 1;
        HIDWORD(v342.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v161 + 840);
        *(_DWORD *)(v161 + 840) = 2;
        v164 = *(_QWORD *)(v160 + 8) & 0xFFFFFFFFFFFFFFF0;
        v165 = *(_QWORD *)v164;
        v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v164 + 8) & 0xFFFFFFFFFFFFFFF0);
        v167 = *(_DWORD *)(v166 + 16);
        if (v166)
          v168 = v167 == 11;
        else
          v168 = 0;
        if (v168)
        {
          if (((*(_DWORD *)(v166 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_338;
        }
        else if (v166 && v167 == 44)
        {
          v169 = sub_22F114198(*(_QWORD *)(v166 + 24));
          if ((*(_BYTE *)(v169 + 74) & 1) != 0 || *(_QWORD *)(v169 + 128) > 7uLL)
            goto LABEL_338;
          v165 = *(_QWORD *)v164;
        }
        else if (v167 == 9)
        {
          goto LABEL_338;
        }
        if (!sub_22F10E0EC(v165))
        {
          v203 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v165 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v203 != 12
            && v203 != 39
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v165 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) != 114294795)
          {
            sub_22F02459C((uint64_t)&v342);
            *(_OWORD *)*(_QWORD *)(v161 + 16) = *(_OWORD *)&v343.__r_.__value_.__l.__data_;
            *(_DWORD *)(v161 + 820) = v163;
            goto LABEL_536;
          }
        }
LABEL_338:
        LODWORD(__p[0]) = 0;
        if (!sub_22F007F4C(v161, v160, __p) || **(_BYTE **)(v161 + 16))
        {
          v205 = 0;
          v342.__r_.__value_.__s.__data_[8] = 0;
          v206 = __p[0];
          goto LABEL_341;
        }
        v206 = __p[0];
        if (LODWORD(__p[0]) != 7)
        {
          v205 = LODWORD(__p[0]) > 1;
LABEL_341:
          if (v206 < 2)
            goto LABEL_343;
          goto LABEL_342;
        }
        if (__p[1] < (void *)4)
        {
          v205 = 1;
          goto LABEL_342;
        }
        if (((uint64_t)__p[1] & 3) == 1 && ((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          if (*(unsigned __int8 *)((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFFCLL) != 225)
          {
            v205 = 0;
            goto LABEL_342;
          }
          v243 = v353 == 0;
        }
        else
        {
          v243 = ((uint64_t)__p[1] & 3) == 2;
        }
        v205 = v243;
LABEL_342:
        sub_22EF53BC0((uint64_t *)__p);
LABEL_343:
        sub_22F02459C((uint64_t)&v342);
        *(_OWORD *)*(_QWORD *)(v161 + 16) = *(_OWORD *)&v343.__r_.__value_.__l.__data_;
        *(_DWORD *)(v161 + 820) = v163;
        if (v205)
        {
          v13 = 1;
          sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 1, *(_QWORD *)(v10 + 8), a1[1]);
          return v13;
        }
LABEL_536:
        v179 = *a1;
        if (*(_BYTE *)(*a1 + 834)
          || (v259 = sub_22F0005B0(v160, *(_QWORD *)(v179 + 8), 1, v254, v255, v256, v257, v258), v179 = *a1, v259))
        {
          v180 = a1[1];
          v181 = *(_QWORD *)(v10 + 8);
          v182 = *(_QWORD *)(v179 + 8);
          v69 = 0;
          goto LABEL_427;
        }
LABEL_539:
        sub_22F072CEC(v179, v10, 103, 0);
        return 0;
      case 403:
        v170 = (*(uint64_t (**)(void))(*(_QWORD *)*a1 + 96))();
        if (*(_DWORD *)(v10 + 16))
        {
          v171 = *(_QWORD *)(v170 + 2000);
          v172 = (_QWORD *)(*(_QWORD *)(v10
                                      + ((unint64_t)*(unsigned int *)v10 >> 24)
                                      + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                      + 8)
                          + 8);
          while (2)
          {
            v173 = *(_QWORD *)(*(_QWORD *)((*v172 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v174 = *(unsigned __int8 *)(v173 + 16);
            v175 = v174 - 2;
            switch(*(_BYTE *)(v173 + 16))
            {
              case 2:
              case 4:
              case 5:
              case 0x19:
              case 0x1A:
              case 0x27:
                v198 = 0x500000000;
                goto LABEL_425;
              case 3:
              case 7:
              case 8:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x1B:
              case 0x1C:
              case 0x1E:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x28:
              case 0x29:
              case 0x2A:
              case 0x2B:
                __break(1u);
                goto LABEL_690;
              case 6:
                if (v174 != 6)
                  v173 = sub_22F10CF48(v173);
                v172 = (_QWORD *)(v173 + 32);
                continue;
              case 0xB:
                if (v174 == 11)
                  v264 = v173;
                else
                  v264 = 0;
                v198 = qword_22F4A4A90[((unint64_t)*(unsigned int *)(v264 + 16) >> 19) & 0x1FF];
                goto LABEL_425;
              case 0xC:
                v198 = 0x900000000;
                goto LABEL_425;
              case 0x1F:
                if (v174 == 31
                  || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
                  && (v173 = sub_22F10CF48(v173)) != 0)
                {
                  v262 = !sub_22F2559E0(v173);
                  v198 = 0xC00000000;
                  v263 = 0x700000000;
LABEL_548:
                  if (!v262)
                    v198 = v263;
                }
                else
                {
                  v198 = 0xC00000000;
                }
LABEL_425:
                v69 = v198 >> 32;
                break;
              case 0x2C:
                v198 = 0x300000000;
                if ((*(_BYTE *)(v171 + 1) & 1) == 0)
                  v198 = 0x100000000;
                goto LABEL_425;
              case 0x2D:
                v262 = !sub_22F10E06C(v173);
                v198 = 0xC00000000;
                v263 = 0xD00000000;
                goto LABEL_548;
              default:
                v198 = 0xFFFFFFFF00000000;
                goto LABEL_425;
            }
            break;
          }
        }
        else
        {
          v69 = -1;
        }
        goto LABEL_426;
      case 411:
      case 418:
      case 430:
      case 437:
      case 445:
      case 447:
      case 449:
        goto LABEL_128;
      case 434:
      case 446:
        goto LABEL_160;
      case 460:
        sub_22F007D7C(__p, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), *(_QWORD *)(*a1 + 8), 0);
        if (LODWORD(__p[1]) >= 0x41)
          v115 = (void **)__p[0];
        else
          v115 = __p;
        v116 = *(unsigned int *)v115;
        if (LODWORD(__p[1]) >= 0x41 && __p[0])
          MEMORY[0x2348A0E84]();
        v117 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 15088);
        v69 = (*(int (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 640))(v117, v116);
        goto LABEL_426;
      case 467:
        v118 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 24) + 40))(*(_QWORD *)(*a1 + 24));
        v119 = *a1;
        if (*(_BYTE *)(*a1 + 834))
        {
          if (*(_BYTE *)(v119 + 835))
          {
LABEL_187:
            v69 = 1;
            goto LABEL_294;
          }
          v207 = *(_DWORD *)(v119 + 32);
          if (v207 == 1)
          {
            if (!*(_QWORD *)(*(_QWORD *)(v119 + 16) + 8))
              goto LABEL_187;
            sub_22EFF605C(v10);
          }
          else
          {
            if (v207 != 2)
              goto LABEL_187;
            v208 = v118;
            v209 = *(_QWORD *)(v118 + 16);
            v210 = (_QWORD *)(v209 & 0xFFFFFFFFFFFFFFF8);
            if ((v209 & 4) != 0)
            {
              v210 = (_QWORD *)*v210;
              if (!v210)
                goto LABEL_187;
            }
            else if (!v210)
            {
              goto LABEL_187;
            }
            if (!sub_22EFC84D4((unint64_t)v210))
              goto LABEL_187;
            v211 = *(_QWORD *)(v208 + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v208 + 40) & 7) != 0 || v211 == 0)
              goto LABEL_187;
            v213 = *(_QWORD *)(v211 + 16);
            if (*(_DWORD *)v213 != 21)
              goto LABEL_187;
            v214 = *(_QWORD *)(v213 + 16);
            v215 = *(_QWORD *)(v213 + 24);
            v216 = *(_QWORD *)(v213 + 29);
            v217 = v214 == 0x74736E6F635F7369 && v215 == 0x6C6176655F746E61;
            v218 = v217 && v216 == 0x64657461756C6176;
            if (!v218 || !*(_QWORD *)(*(_QWORD *)(v119 + 16) + 8))
              goto LABEL_187;
            v290 = *(_DWORD *)(*(_QWORD *)(v119 + 24) + 88);
          }
          sub_22F3E1414(v119, v290, 2338, (uint64_t)__p);
          v291 = *(_DWORD *)(*a1 + 32);
          v292 = (unsigned __int8 *)__p[0];
          if (!__p[0])
          {
            v292 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
            __p[0] = v292;
          }
          v293 = "std::is_constant_evaluated";
          if (v291 == 1)
            v293 = "__builtin_is_constant_evaluated";
          v292[*v292 + 1] = 1;
          v294 = __p[0];
          v295 = *(unsigned __int8 *)__p[0];
          *(_BYTE *)__p[0] = v295 + 1;
          v294[v295 + 2] = v293;
          sub_22E3BB0B8((uint64_t)__p);
          v119 = *a1;
          v69 = *(unsigned __int8 *)(*a1 + 834);
        }
        else
        {
          v69 = 0;
        }
LABEL_294:
        v180 = a1[1];
        v181 = *(_QWORD *)(v10 + 8);
        v182 = *(_QWORD *)(v119 + 8);
        goto LABEL_427;
      case 475:
      case 476:
        sub_22F007D7C(__p, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), *(_QWORD *)(*a1 + 8), 0);
        if (LODWORD(__p[1]) >= 0x41)
          v62 = (void **)__p[0];
        else
          v62 = __p;
        v63 = *(_DWORD *)v62;
        if (LODWORD(__p[1]) >= 0x41 && __p[0])
          MEMORY[0x2348A0E84]();
        __p[0] = 0;
        if (sub_22F00BAC0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), v63, *a1, __p, v58, v59, v60, v61))
        {
          v69 = (unint64_t)__p[0];
LABEL_426:
          v180 = a1[1];
          v181 = *(_QWORD *)(v10 + 8);
          v182 = *(_QWORD *)(*a1 + 8);
          goto LABEL_427;
        }
        if (sub_22F0005B0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), *(_QWORD *)(*a1 + 8), 1, v64, v65, v66, v67, v68))
        {
          v69 = (int)(((v63 >> 1) & 1) - 1);
          goto LABEL_426;
        }
        v179 = *a1;
        if (*(_DWORD *)(*a1 + 840) != 1)
          goto LABEL_539;
        v69 = (int)(((v63 >> 1) & 1) - 1);
        v180 = a1[1];
        v181 = *(_QWORD *)(v10 + 8);
        v182 = *(_QWORD *)(v179 + 8);
LABEL_427:
        sub_22F03A1EC(v182, v69, v181, v180);
LABEL_428:
        v13 = 1;
        break;
      default:
        if ((a3 - 648) > 0x1C || ((1 << (a3 + 120)) & 0x18000001) == 0)
        {
          if ((a3 - 499) >= 2)
            return sub_22F03F288(a1, (unsigned int *)v10);
          return sub_22F0175A4(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)));
        }
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        v13 = 0;
        if (!sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), __p, *a1))goto LABEL_263;
        if (LODWORD(__p[1]) >= 0x41)
          v28 = (void **)__p[0];
        else
          v28 = __p;
        v29 = (int64_t)*v28;
        if (((unint64_t)*v28 & ((unint64_t)*v28 - 1)) == 0)
        {
          v30 = *(_QWORD *)(*a1 + 8);
          v31 = *(unsigned __int8 *)(*(_QWORD *)(v30 + 15088) + 95);
          if (v29 <= (uint64_t)(v31 / sub_22EF5CDF0(v30, *(_QWORD *)(*(_QWORD *)(v30 + 16408) & 0xFFFFFFFFFFFFFFF0))))
          {
            if (a3 == 648
              || v29 == 1
              || sub_22EFFBE1C(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 16), *(_QWORD *)(*a1 + 8), 0))
            {
              v176 = a1[1];
              v177 = *(_QWORD *)(v10 + 8);
              v178 = *(_QWORD *)(*a1 + 8);
              v13 = 1;
              v42 = 1;
LABEL_254:
              sub_22F03A1EC(v178, v42, v177, v176);
              goto LABEL_263;
            }
            v241 = *(_QWORD *)(*((_QWORD *)sub_22EFFEB40(*(unsigned __int8 **)(v10
                                                                             + ((unint64_t)*(unsigned int *)v10 >> 24)
                                                                             + 8
                                                                             * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                                                             + 16))
                               + 1) & 0xFFFFFFFFFFFFFFF0);
            if (!v241 || *(_BYTE *)(v241 + 16) != 39)
              v241 = sub_22F10CF48(v241);
            v242 = *(_QWORD *)(v241 + 32);
            if ((sub_22F1110EC(*(_QWORD *)(v242 & 0xFFFFFFFFFFFFFFF0), 0) & 1) == 0
              && (uint64_t)sub_22EF5D130(*(_QWORD *)(*a1 + 8), v242) >= v29)
            {
              v13 = 1;
              sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 1, *(_QWORD *)(v10 + 8), a1[1]);
              goto LABEL_263;
            }
          }
        }
        if (a3 == 675)
        {
          v32 = a1[1];
          v33 = *(_QWORD *)(v10 + 8);
          v34 = *(_QWORD *)(*a1 + 8);
          v35 = 0;
LABEL_262:
          sub_22F03A1EC(v34, v35, v33, v32);
          v13 = 1;
        }
        else
        {
LABEL_236:
          sub_22F072CEC(*a1, v10, 103, 0);
          v13 = 0;
        }
        goto LABEL_263;
    }
    return v13;
  }
  if (a3 <= 1205)
  {
    if (a3 > 872)
    {
      switch(a3)
      {
        case 873:
        case 875:
        case 877:
          goto LABEL_107;
        case 874:
          goto LABEL_43;
        case 876:
          return sub_22F03F288(a1, (unsigned int *)v10);
        default:
          if (a3 == 893)
            goto LABEL_107;
          return sub_22F03F288(a1, (unsigned int *)v10);
      }
    }
    v26 = (a3 - 794);
    if (v26 > 0x2E)
      goto LABEL_45;
    if (((1 << (a3 - 26)) & 0x1F) != 0)
    {
LABEL_18:
      LODWORD(__p[1]) = 1;
      __p[0] = 0;
      BYTE4(__p[1]) = 0;
      LODWORD(v343.__r_.__value_.__r.__words[1]) = 1;
      v343.__r_.__value_.__r.__words[0] = 0;
      v343.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), __p, *a1))
      {
LABEL_75:
        if (LODWORD(v343.__r_.__value_.__r.__words[1]) >= 0x41 && v343.__r_.__value_.__r.__words[0])
          MEMORY[0x2348A0E84](v343.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
LABEL_263:
        if (LODWORD(__p[1]) >= 0x41)
        {
          v56 = __p[0];
          if (__p[0])
LABEL_265:
            MEMORY[0x2348A0E84](v56, 0x1000C8000313F17);
        }
        return v13;
      }
      if (sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 16), &v343, *a1))
      {
        llvm::APInt::urem((llvm::APInt *)&v343);
        llvm::APInt::rotr((llvm::APInt *)__p);
        goto LABEL_49;
      }
LABEL_53:
      v13 = 0;
      goto LABEL_75;
    }
    if (((1 << (a3 - 26)) & 0x188000000) == 0)
    {
      if (v26 == 46)
      {
LABEL_43:
        v36 = **(_QWORD **)((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 96))() + 2000);
        v37 = *a1;
        sub_22EFF605C(v10);
        if ((v36 & 0x200) != 0)
        {
          v98 = (unsigned __int8 **)sub_22F072D74(v37, v38, 2218, 0);
          v99 = v98;
          if (v98)
          {
            v100 = *v98;
            if (!*v99)
            {
              v100 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v99[1]);
              *v99 = v100;
            }
            v100[*v100 + 1] = 2;
            v101 = *v99;
            v102 = **v99;
            *v101 = v102 + 1;
            *(_QWORD *)&v101[8 * v102 + 16] = 0;
            v101[(v102 + 1) + 1] = 2;
            v103 = *v99;
            v104 = **v99;
            *v103 = v104 + 1;
            *(_QWORD *)&v103[8 * v104 + 16] = 0;
          }
          *((_BYTE *)&v342.__r_.__value_.__s + 23) = 1;
          LOWORD(v342.__r_.__value_.__l.__data_) = 39;
          v105 = std::string::append(&v342, (&off_24FAC8C40)[6 * a3]);
          v106 = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v343.__r_.__value_.__r.__words[2] = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          v107 = std::string::append(&v343, "'");
          v108 = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v352 = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          if (v99)
          {
            if (v352 >= 0)
              v109 = __p;
            else
              v109 = (void **)__p[0];
            if (v352 >= 0)
              v110 = HIBYTE(v352) & 0x7F;
            else
              v110 = (size_t)__p[1];
            sub_22E3B89A8(v99, v109, v110);
          }
          if (SHIBYTE(v352) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v343.__r_.__value_.__l.__data_);
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v342.__r_.__value_.__l.__data_);
        }
        else
        {
          sub_22F072D74(v37, v38, 103, 0);
        }
LABEL_160:
        __p[0] = 0;
        v13 = sub_22F00FCFC(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), (unint64_t *)__p, (uint64_t *)*a1, a4, a5, a6, a7, a8);
        if ((_DWORD)v13)
          sub_22F03A1EC(*(_QWORD *)(*a1 + 8), (uint64_t)__p[0], *(_QWORD *)(v10 + 8), a1[1]);
        return v13;
      }
LABEL_45:
      if ((a3 - 789) >= 5)
        return sub_22F03F288(a1, (unsigned int *)v10);
LABEL_46:
      LODWORD(__p[1]) = 1;
      __p[0] = 0;
      BYTE4(__p[1]) = 0;
      LODWORD(v343.__r_.__value_.__r.__words[1]) = 1;
      v343.__r_.__value_.__r.__words[0] = 0;
      v343.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), __p, *a1))goto LABEL_75;
      if (sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 16), &v343, *a1))
      {
        llvm::APInt::urem((llvm::APInt *)&v343);
        llvm::APInt::rotl((llvm::APInt *)__p);
LABEL_49:
        sub_22F040190(a1[1], (const llvm::APInt *)&v342, v10);
        if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41 && v342.__r_.__value_.__r.__words[0])
          MEMORY[0x2348A0E84](v342.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v13 = 1;
        goto LABEL_75;
      }
      goto LABEL_53;
    }
LABEL_107:
    v70 = **(_QWORD **)((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 96))() + 2000);
    v71 = *a1;
    sub_22EFF605C(v10);
    if ((v70 & 0x200) != 0)
    {
      v73 = (unsigned __int8 **)sub_22F072D74(v71, v72, 2218, 0);
      v74 = v73;
      if (v73)
      {
        v75 = *v73;
        if (!*v74)
        {
          v75 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v74[1]);
          *v74 = v75;
        }
        v75[*v75 + 1] = 2;
        v76 = *v74;
        v77 = **v74;
        *v76 = v77 + 1;
        *(_QWORD *)&v76[8 * v77 + 16] = 0;
        v76[(v77 + 1) + 1] = 2;
        v78 = *v74;
        v79 = **v74;
        *v78 = v79 + 1;
        *(_QWORD *)&v78[8 * v79 + 16] = 0;
      }
      *((_BYTE *)&v342.__r_.__value_.__s + 23) = 1;
      LOWORD(v342.__r_.__value_.__l.__data_) = 39;
      v80 = std::string::append(&v342, (&off_24FAC8C40)[6 * a3]);
      v81 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v343.__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v343.__r_.__value_.__r.__words[2] = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      v82 = std::string::append(&v343, "'");
      v83 = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v352 = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      if (v74)
      {
        if (v352 >= 0)
          v84 = __p;
        else
          v84 = (void **)__p[0];
        if (v352 >= 0)
          v85 = HIBYTE(v352) & 0x7F;
        else
          v85 = (size_t)__p[1];
        sub_22E3B89A8(v74, v84, v85);
      }
      if (SHIBYTE(v352) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v343.__r_.__value_.__l.__data_);
      if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v342.__r_.__value_.__l.__data_);
      v8 = v353;
      v12 = v344;
    }
    else
    {
      sub_22F072D74(v71, v72, 103, 0);
    }
LABEL_128:
    __p[1] = 0;
    __p[0] = 0;
    v352 = 0;
    LODWORD(v353) = v8 | 1;
    v354 = 0;
    v355 = v357;
    v356 = 0x800000000;
    v359 = 0;
    v358 = 0;
    memset(&v343, 0, sizeof(v343));
    LODWORD(v344) = v12 | 1;
    v345 = 0;
    v346 = v348;
    v347 = 0x800000000;
    v350 = 0;
    v349 = 0;
    v86 = *(unsigned __int8 **)(v10
                              + ((unint64_t)*(unsigned int *)v10 >> 24)
                              + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                              + 8);
    v342.__r_.__value_.__r.__words[0] = *a1;
    v342.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
    v342.__r_.__value_.__s.__data_[16] = 0;
    v13 = 0;
    if (!sub_22F00C45C((uint64_t *)&v342, v86, a3, a4, a5, a6, a7, a8))
      goto LABEL_633;
    v93 = *(unsigned __int8 **)(v10
                              + ((unint64_t)*(unsigned int *)v10 >> 24)
                              + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                              + 16);
    v342.__r_.__value_.__r.__words[0] = *a1;
    v342.__r_.__value_.__l.__size_ = (std::string::size_type)&v343;
    v342.__r_.__value_.__s.__data_[16] = 0;
    v13 = 0;
    if (!sub_22F00C45C((uint64_t *)&v342, v93, v87, v88, v89, v90, v91, v92))
      goto LABEL_633;
    v94 = -1;
    if (a3 > 824)
    {
      if (a3 == 825 || a3 == 873)
        goto LABEL_287;
    }
    else if (a3 == 430 || a3 == 445)
    {
      goto LABEL_287;
    }
    LODWORD(v342.__r_.__value_.__r.__words[1]) = 1;
    v342.__r_.__value_.__r.__words[0] = 0;
    v342.__r_.__value_.__s.__data_[12] = 0;
    v13 = sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 24), &v342, *a1);
    if ((v13 & 1) == 0)
    {
      v95 = v342.__r_.__value_.__r.__words[1];
      v96 = v342.__r_.__value_.__r.__words[0];
      goto LABEL_282;
    }
    v95 = v342.__r_.__value_.__r.__words[1];
    if (v342.__r_.__value_.__s.__data_[12])
    {
      v96 = v342.__r_.__value_.__r.__words[0];
      v97 = &v342;
      if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41)
        v97 = (std::string *)v342.__r_.__value_.__r.__words[0];
      v94 = v97->__r_.__value_.__r.__words[0];
LABEL_282:
      if (v95 < 0x41 || !v96)
      {
LABEL_285:
        if (!(_DWORD)v13)
          goto LABEL_633;
        if (v94)
          goto LABEL_287;
LABEL_474:
        sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 0, *(_QWORD *)(v10 + 8), a1[1]);
        v13 = 1;
        goto LABEL_633;
      }
LABEL_284:
      MEMORY[0x2348A0E84]();
      goto LABEL_285;
    }
    if (LODWORD(v342.__r_.__value_.__r.__words[1]) > 0x40)
    {
      v94 = *(_QWORD *)v342.__r_.__value_.__l.__data_;
      goto LABEL_284;
    }
    v94 = (uint64_t)(v342.__r_.__value_.__r.__words[0] << -(uint64_t)LODWORD(v342.__r_.__value_.__r.__words[1])) >> -(uint64_t)LODWORD(v342.__r_.__value_.__r.__words[1]);
    if (!v94)
      goto LABEL_474;
LABEL_287:
    if (sub_22F0402B4((uint64_t)__p, *a1, v10))
    {
      if (sub_22F0402B4((uint64_t)&v343, *a1, v10))
      {
        if ((v353 & 1) == 0)
        {
          v190 = v344;
          if ((v344 & 1) == 0)
          {
            v191 = *(_QWORD *)(*a1 + 8);
            if ((_DWORD)v356 == v353 >> 4)
            {
              v192 = v354;
            }
            else
            {
              if ((*((_QWORD *)v355 + v356 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if ((*(_DWORD *)((*((_QWORD *)v355 + v356 - 1) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu)
                   - 35 >= 3)
                  v239 = 0;
                else
                  v239 = *((_QWORD *)v355 + v356 - 1) & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v239 = 0;
              }
              v192 = sub_22EF6477C(v191, v239);
              v191 = *(_QWORD *)(*a1 + 8);
              v190 = v344;
            }
            if ((_DWORD)v347 == v190 >> 4)
            {
              v244 = v345;
            }
            else
            {
              if ((*((_QWORD *)v346 + v347 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if ((*(_DWORD *)((*((_QWORD *)v346 + v347 - 1) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu)
                   - 35 >= 3)
                  v245 = 0;
                else
                  v245 = *((_QWORD *)v346 + v347 - 1) & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v245 = 0;
              }
              v244 = sub_22EF6477C(v191, v245);
            }
            v246 = 0;
            if (a3 > 820)
            {
              if (a3 != 893)
              {
                if (a3 == 877)
                  goto LABEL_567;
                if (a3 != 821)
                {
LABEL_566:
                  v246 = 1;
                  goto LABEL_567;
                }
              }
            }
            else if (a3 != 411 && a3 != 418)
            {
              if (a3 != 449)
                goto LABEL_566;
LABEL_567:
              v314 = 1;
              v313 = v246;
              if (((a3 - 445) > 4 || ((1 << (a3 + 67)) & 0x15) == 0)
                && ((a3 - 873) > 4 || ((1 << (a3 - 105)) & 0x15) == 0))
              {
                v314 = 0;
              }
              LODWORD(v13) = 0;
              while (1)
              {
                LODWORD(v342.__r_.__value_.__l.__data_) = 0;
                LODWORD(v341.__r_.__value_.__l.__data_) = 0;
                v265 = sub_22F0248D4((uint64_t *)*a1, v10, v192, (uint64_t)__p, (uint64_t)&v342, 0);
                LOBYTE(v266) = 0;
                v267 = 0;
                if (!v265)
                  goto LABEL_603;
                v268 = sub_22F0248D4((uint64_t *)*a1, v10, v244, (uint64_t)&v343, (uint64_t)&v341, 0);
                LOBYTE(v266) = 0;
                v267 = 0;
                if (!v268 || LODWORD(v342.__r_.__value_.__l.__data_) != 2)
                  goto LABEL_603;
                data = v341.__r_.__value_.__l.__data_;
                if (LODWORD(v341.__r_.__value_.__l.__data_) != 2)
                {
                  LOBYTE(v266) = 0;
                  v13 = 0;
                  goto LABEL_604;
                }
                v271 = v342.__r_.__value_.__r.__words[2];
                if (LODWORD(v342.__r_.__value_.__r.__words[2]) > 0x40)
                {
                  if ((llvm::APInt::equalSlowCase((llvm::APInt *)&v342.__r_.__value_.__r.__words[1], (const llvm::APInt *)&v341.__r_.__value_.__r.__words[1]) & 1) == 0)
                  {
LABEL_591:
                    if (v314 && !v342.__r_.__value_.__s.__data_[20])
                      v277 = llvm::APInt::compareSigned((llvm::APInt *)&v342.__r_.__value_.__r.__words[1], (const llvm::APInt *)&v341.__r_.__value_.__r.__words[1]);
                    else
                      v277 = llvm::APInt::compare((llvm::APInt *)&v342.__r_.__value_.__r.__words[1], (const llvm::APInt *)&v341.__r_.__value_.__r.__words[1]);
                    if (v277 < 0)
                      v276 = -1;
                    else
                      v276 = 1;
                    v273 = a1[1];
                    v274 = *(_QWORD *)(v10 + 8);
                    v275 = *(_QWORD *)(*a1 + 8);
                    goto LABEL_598;
                  }
                  if (!v313
                    || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v342.__r_.__value_.__r.__words[1]) != v271)
                  {
                    goto LABEL_599;
                  }
                }
                else
                {
                  if (v342.__r_.__value_.__l.__size_ != v341.__r_.__value_.__l.__size_)
                    goto LABEL_591;
                  v272 = v313;
                  if (v342.__r_.__value_.__l.__size_)
                    v272 = 0;
                  if ((v272 & 1) == 0)
                  {
LABEL_599:
                    if (sub_22F01DC1C(*a1, v10, (uint64_t)__p, v192, 1))
                      v266 = sub_22F01DC1C(*a1, v10, (uint64_t)&v343, v244, 1);
                    else
                      v266 = 0;
                    v267 = v266 & v13;
                    goto LABEL_603;
                  }
                }
                v273 = a1[1];
                v274 = *(_QWORD *)(v10 + 8);
                v275 = *(_QWORD *)(*a1 + 8);
                v276 = 0;
LABEL_598:
                sub_22F03A1EC(v275, v276, v274, v273);
                LOBYTE(v266) = 0;
                v267 = 1;
LABEL_603:
                data = v341.__r_.__value_.__l.__data_;
                v13 = v267;
LABEL_604:
                if (data >= 2)
                  sub_22EF53BC0((uint64_t *)&v341);
                if (LODWORD(v342.__r_.__value_.__l.__data_) >= 2)
                  sub_22EF53BC0((uint64_t *)&v342);
                if ((v266 & 1) == 0)
                  goto LABEL_633;
                if (!--v94)
                  goto LABEL_474;
              }
            }
            v247 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v192 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v247)
            {
              v248 = *(_DWORD *)(v247 + 16);
              if (v248 == 11)
              {
                v249 = ((v248 >> 19) & 0x1FF) - 167 > 0xC || ((1 << ((v248 >> 19) + 89)) & 0x1803) == 0;
                v250 = v248 & 0xFF80000;
                if (!v249 || v250 == 89128960)
                {
                  v252 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v244 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (v252)
                  {
                    v253 = *(_DWORD *)(v252 + 16);
                    if (v253 == 11
                      && (((v253 >> 19) & 0x1FF) - 167 <= 0xC && ((1 << ((v253 >> 19) + 89)) & 0x1803) != 0
                       || (v253 & 0xFF80000) == 0x5500000))
                    {
                      v246 = 0;
                      if (a3 <= 820
                        && ((a3 - 411) > 0x26
                         || ((1 << (a3 + 101)) & 0x4000000081) == 0))
                      {
                        goto LABEL_566;
                      }
                      goto LABEL_567;
                    }
                  }
                }
              }
            }
            v278 = (unsigned __int8 **)sub_22F072CEC(*a1, v10, 2229, 0);
            *((_BYTE *)&v325.__r_.__value_.__s + 23) = 1;
            LOWORD(v325.__r_.__value_.__l.__data_) = 39;
            v279 = std::string::append(&v325, (&off_24FAC8C40)[6 * a3]);
            v280 = v279->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v341.__r_.__value_.__l.__data_ = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
            v341.__r_.__value_.__r.__words[2] = v280;
            v279->__r_.__value_.__l.__size_ = 0;
            v279->__r_.__value_.__r.__words[2] = 0;
            v279->__r_.__value_.__r.__words[0] = 0;
            v281 = std::string::append(&v341, "'");
            v282 = v281->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v342.__r_.__value_.__l.__data_ = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
            v342.__r_.__value_.__r.__words[2] = v282;
            v281->__r_.__value_.__l.__size_ = 0;
            v281->__r_.__value_.__r.__words[2] = 0;
            v281->__r_.__value_.__r.__words[0] = 0;
            if (v278)
            {
              if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v283 = &v342;
              else
                v283 = (std::string *)v342.__r_.__value_.__r.__words[0];
              if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = *((_BYTE *)&v342.__r_.__value_.__s + 23) & 0x7F;
              else
                size = v342.__r_.__value_.__l.__size_;
              sub_22E3B89A8(v278, v283, size);
              v285 = *v278;
              if (!*v278)
              {
                v285 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v278[1]);
                *v278 = v285;
              }
              v285[*v285 + 1] = 9;
              v286 = *v278;
              v287 = **v278;
              *v286 = v287 + 1;
              *(_QWORD *)&v286[8 * v287 + 16] = v192;
              v286[(v287 + 1) + 1] = 9;
              v288 = *v278;
              v289 = **v278;
              *v288 = v289 + 1;
              *(_QWORD *)&v288[8 * v289 + 16] = v244;
            }
            if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v342.__r_.__value_.__l.__data_);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v341.__r_.__value_.__l.__data_);
            if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v325.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    v13 = 0;
LABEL_633:
    if (v346 != v348)
      free(v346);
    v27 = v355;
    if (v355 != v357)
LABEL_636:
      free(v27);
    return v13;
  }
  v16 = a3 - 1206;
  switch(a3)
  {
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
      __p[1] = 0;
      __p[0] = 0;
      v352 = 0;
      LODWORD(v353) = -1;
      v354 = 0;
      v355 = v357;
      v356 = 0x800000000;
      v359 = 0;
      v358 = 0;
      LODWORD(v342.__r_.__value_.__r.__words[1]) = 1;
      v342.__r_.__value_.__r.__words[0] = 0;
      v342.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v341.__r_.__value_.__r.__words[1]) = 1;
      v341.__r_.__value_.__r.__words[0] = 0;
      v341.__r_.__value_.__s.__data_[12] = 0;
      v17 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6]
                                                            + ((unint64_t)*a2 >> 24))
                                                + 8) & 0xFFFFFFFFFFFFFFF0));
      v13 = 0;
      if (sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), &v342, *a1))
      {
        if (sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 16), &v341, *a1))
        {
          v24 = *(unsigned __int8 **)(v10
                                    + ((unint64_t)*(unsigned int *)v10 >> 24)
                                    + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                    + 24);
          v343.__r_.__value_.__r.__words[0] = *a1;
          v343.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
          v343.__r_.__value_.__s.__data_[16] = 0;
          v13 = 0;
          if (sub_22F00C45C((uint64_t *)&v343, v24, v18, v19, v20, v21, v22, v23))
          {
            v25 = (unsigned int *)&v323;
            LODWORD(v325.__r_.__value_.__r.__words[1]) = 1;
            v325.__r_.__value_.__r.__words[0] = 0;
            v325.__r_.__value_.__s.__data_[12] = 0;
            v324 = 0;
            switch(v16)
            {
              case 0u:
              case 1u:
              case 2u:
                v183 = v342.__r_.__value_.__s.__data_[12];
                v184 = v341.__r_.__value_.__s.__data_[12];
                v185 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
                v315 = 1;
                if (v342.__r_.__value_.__s.__data_[12] && v341.__r_.__value_.__s.__data_[12])
                {
                  v186 = sub_22F110A40(*v185);
                  v185 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
                  v315 = v186;
                  v183 = v342.__r_.__value_.__s.__data_[12];
                  v184 = v341.__r_.__value_.__s.__data_[12];
                }
                if (v183 | v184)
                {
                  v189 = 0;
                }
                else
                {
                  v187 = v185;
                  v188 = sub_22F110A40(*v185);
                  v185 = v187;
                  v189 = v188;
                }
                v219 = v342.__r_.__value_.__r.__words[1];
                v220 = v341.__r_.__value_.__r.__words[1];
                v221 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *v185);
                if (v219 <= v220)
                  v222 = v220;
                else
                  v222 = v219;
                if (v221 > v222)
                  LODWORD(v222) = v221;
                v223 = v222 + (v315 & !v189);
                if (v342.__r_.__value_.__s.__data_[12])
                  llvm::APInt::zextOrTrunc((llvm::APInt *)&v342);
                else
                  llvm::APInt::sextOrTrunc((llvm::APInt *)&v342);
                v224 = v343.__r_.__value_.__r.__words[1];
                v225 = v343.__r_.__value_.__r.__words[0];
                v226 = v315 ^ 1;
                v316 = v315 ^ 1;
                if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41 && v342.__r_.__value_.__r.__words[0])
                {
                  MEMORY[0x2348A0E84](v342.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  v226 = v316;
                }
                v342.__r_.__value_.__r.__words[0] = v225;
                LODWORD(v342.__r_.__value_.__r.__words[1]) = v224;
                v342.__r_.__value_.__s.__data_[12] = v226;
                if (v341.__r_.__value_.__s.__data_[12])
                  llvm::APInt::zextOrTrunc((llvm::APInt *)&v341);
                else
                  llvm::APInt::sextOrTrunc((llvm::APInt *)&v341);
                v227 = v343.__r_.__value_.__r.__words[1];
                v228 = v343.__r_.__value_.__r.__words[0];
                v229 = v316;
                if (LODWORD(v341.__r_.__value_.__r.__words[1]) >= 0x41 && v341.__r_.__value_.__r.__words[0])
                {
                  MEMORY[0x2348A0E84](v341.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  v229 = v316;
                }
                v341.__r_.__value_.__r.__words[0] = v228;
                LODWORD(v341.__r_.__value_.__r.__words[1]) = v227;
                v341.__r_.__value_.__s.__data_[12] = v229;
                LODWORD(v343.__r_.__value_.__r.__words[1]) = v223;
                if (v223 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v343);
                  v229 = v316;
                }
                else
                {
                  v343.__r_.__value_.__r.__words[0] = 0;
                }
                v343.__r_.__value_.__s.__data_[12] = v229;
                if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
                {
                  MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  v229 = v343.__r_.__value_.__s.__data_[12];
                }
                v325.__r_.__value_.__r.__words[0] = v343.__r_.__value_.__r.__words[0];
                LODWORD(v325.__r_.__value_.__r.__words[1]) = v343.__r_.__value_.__r.__words[1];
                v325.__r_.__value_.__s.__data_[12] = v229;
                if (a3 == 1206)
                  goto LABEL_13;
                if (a3 == 1207)
                  goto LABEL_388;
                goto LABEL_390;
              case 3u:
              case 4u:
              case 5u:
              case 0xCu:
              case 0xDu:
              case 0xEu:
LABEL_13:
                if (v342.__r_.__value_.__s.__data_[12])
                  llvm::APInt::uadd_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                else
                  llvm::APInt::sadd_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
                  MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v325.__r_.__value_.__r.__words[0] = v322[1];
                break;
              case 6u:
              case 7u:
              case 8u:
              case 0xFu:
              case 0x10u:
              case 0x11u:
LABEL_388:
                if (v342.__r_.__value_.__s.__data_[12])
                  llvm::APInt::usub_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                else
                  llvm::APInt::ssub_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
                  MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v325.__r_.__value_.__r.__words[0] = v321[1];
                v25 = (unsigned int *)v322;
                break;
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0x12u:
              case 0x13u:
              case 0x14u:
LABEL_390:
                if (v342.__r_.__value_.__s.__data_[12])
                  llvm::APInt::umul_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                else
                  llvm::APInt::smul_ov((llvm::APInt *)&v342, (const llvm::APInt *)&v341, &v324);
                if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
                  MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v325.__r_.__value_.__r.__words[0] = v320;
                v25 = (unsigned int *)v321;
                break;
              default:
                goto LABEL_81;
            }
            v230 = *v25;
            LODWORD(v325.__r_.__value_.__r.__words[1]) = *v25;
            *v25 = 0;
            if (v16 <= 2)
            {
              sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
              if (v325.__r_.__value_.__s.__data_[12])
                llvm::APInt::zextOrTrunc((llvm::APInt *)&v325);
              else
                llvm::APInt::sextOrTrunc((llvm::APInt *)&v325);
              v335 = v343.__r_.__value_.__r.__words[1];
              v334 = v343.__r_.__value_.__r.__words[0];
              v336 = !sub_22F110A40(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
              if (sub_22E4634B4((uint64_t)&v334, (uint64_t)&v325))
                v324 = 1;
              if (LODWORD(v325.__r_.__value_.__r.__words[1]) > 0x40 || v335 > 0x40)
              {
                llvm::APInt::assignSlowCase((llvm::APInt *)&v325, (const llvm::APInt *)&v334);
                v325.__r_.__value_.__s.__data_[12] = v336;
                if (v335 >= 0x41 && v334)
                  MEMORY[0x2348A0E84](v334, 0x1000C8000313F17);
              }
              else
              {
                v325.__r_.__value_.__r.__words[0] = v334;
                LODWORD(v325.__r_.__value_.__r.__words[1]) = v335;
                v325.__r_.__value_.__s.__data_[12] = v336;
              }
              v230 = v325.__r_.__value_.__r.__words[1];
            }
            v318 = v230;
            if (v230 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v317, (const llvm::APInt *)&v325);
              v230 = v318;
              v231 = v317;
            }
            else
            {
              v231 = v325.__r_.__value_.__r.__words[0];
              v317 = v325.__r_.__value_.__r.__words[0];
            }
            v319 = v325.__r_.__value_.__s.__data_[12];
            LODWORD(v343.__r_.__value_.__l.__data_) = 2;
            v318 = 0;
            v343.__r_.__value_.__l.__size_ = v231;
            LODWORD(v343.__r_.__value_.__r.__words[2]) = v230;
            v343.__r_.__value_.__s.__data_[20] = v325.__r_.__value_.__s.__data_[12];
            v13 = sub_22F014A60(*a1, v10, (uint64_t)__p, v17, (uint64_t)&v343);
            if ((_DWORD)v13)
              sub_22F03A1EC(*(_QWORD *)(*a1 + 8), v324, *(_QWORD *)(v10 + 8), a1[1]);
            if (LODWORD(v343.__r_.__value_.__l.__data_) >= 2)
              sub_22EF53BC0((uint64_t *)&v343);
            if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
              MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v13 = 0;
        }
      }
      if (LODWORD(v341.__r_.__value_.__r.__words[1]) >= 0x41 && v341.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v341.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41 && v342.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v342.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      v27 = v355;
      if (v355 == v357)
        return v13;
      goto LABEL_636;
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1250:
    case 1251:
    case 1252:
    case 1253:
    case 1254:
    case 1255:
    case 1256:
    case 1257:
    case 1258:
    case 1259:
    case 1260:
    case 1261:
    case 1262:
      return sub_22F03F288(a1, (unsigned int *)v10);
    case 1234:
      LODWORD(v343.__r_.__value_.__l.__data_) = 0;
      LODWORD(v342.__r_.__value_.__r.__words[1]) = 1;
      v342.__r_.__value_.__r.__words[0] = 0;
      v342.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F03FE64(a2, *a1, (uint64_t)&v343, (uint64_t)&v342))
        goto LABEL_317;
      if (LODWORD(v343.__r_.__value_.__l.__data_) != 7)
      {
        v340 = v342.__r_.__value_.__r.__words[1];
        if (LODWORD(v342.__r_.__value_.__r.__words[1]) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v339, (const llvm::APInt *)&v342);
        else
          v339 = v342.__r_.__value_.__r.__words[0];
        llvm::APInt::operator-=();
        v193 = v340;
        LODWORD(v341.__r_.__value_.__r.__words[1]) = v340;
        v341.__r_.__value_.__r.__words[0] = v339;
        v340 = 0;
        if (LODWORD(v341.__r_.__value_.__r.__words[1]) > 0x40)
        {
          llvm::APInt::andAssignSlowCase((llvm::APInt *)&v341, (const llvm::APInt *)&v343.__r_.__value_.__r.__words[1]);
          v195 = v341.__r_.__value_.__r.__words[1];
          v194 = (_QWORD *)v341.__r_.__value_.__r.__words[0];
          LODWORD(__p[1]) = v341.__r_.__value_.__r.__words[1];
          __p[0] = v341.__r_.__value_.__l.__data_;
          LODWORD(v341.__r_.__value_.__r.__words[1]) = 0;
          if (LODWORD(__p[1]) >= 0x41)
          {
            if (v195 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) > 0x40)
            {
              v196 = 0;
LABEL_307:
              sub_22F03A1EC(*(_QWORD *)(*a1 + 8), v196, *(_QWORD *)(v10 + 8), a1[1]);
              if (LODWORD(__p[1]) >= 0x41 && __p[0])
                MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
              if (LODWORD(v341.__r_.__value_.__r.__words[1]) >= 0x41 && v341.__r_.__value_.__r.__words[0])
                MEMORY[0x2348A0E84](v341.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
              if (v340 >= 0x41 && v339)
                MEMORY[0x2348A0E84](v339, 0x1000C8000313F17);
              v13 = 1;
              goto LABEL_317;
            }
            v194 = (_QWORD *)*v194;
          }
        }
        else
        {
          v194 = (_QWORD *)(v343.__r_.__value_.__l.__size_ & v339);
          v341.__r_.__value_.__r.__words[0] = v343.__r_.__value_.__l.__size_ & v339;
          LODWORD(__p[1]) = v193;
          __p[0] = (void *)(v343.__r_.__value_.__l.__size_ & v339);
          LODWORD(v341.__r_.__value_.__r.__words[1]) = 0;
        }
        v196 = v194 == 0;
        goto LABEL_307;
      }
      v352 = 0;
      __p[1] = 0;
      __p[0] = 0;
      LODWORD(v353) = -1;
      v354 = 0;
      v355 = v357;
      v356 = 0x800000000;
      v359 = 0;
      v358 = 0;
      sub_22F01D8E0(__p, *(_QWORD *)(*a1 + 8), &v343);
      v260 = sub_22F040150(*a1, (uint64_t)__p[0], (uint64_t)__p[1]);
      v261 = (v352 | v260) & -(uint64_t)(v352 | v260);
      if (sub_22F30FE14((uint64_t)&v342, v261))
      {
        v13 = 1;
        sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 1, *(_QWORD *)(v10 + 8), a1[1]);
      }
      else if (sub_22F30FE14((uint64_t)&v342, v260) && sub_22E42E8B8((uint64_t)&v342, v261))
      {
        sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 0, *(_QWORD *)(v10 + 8), a1[1]);
        v13 = 1;
      }
      else
      {
        v341.__r_.__value_.__r.__words[0] = sub_22F072CEC(*a1, *(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), 2180, 0);
        sub_22F3C4700((unsigned __int8 ***)&v341);
        v13 = 0;
      }
      if (v355 != v357)
        free(v355);
LABEL_317:
      if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41 && v342.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v342.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (LODWORD(v343.__r_.__value_.__l.__data_) < 2)
        return v13;
      v197 = &v343;
      goto LABEL_471;
    case 1235:
      LODWORD(__p[0]) = 0;
      LODWORD(v343.__r_.__value_.__r.__words[1]) = 1;
      v343.__r_.__value_.__r.__words[0] = 0;
      v343.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F03FE64(a2, *a1, (uint64_t)__p, (uint64_t)&v343))
        goto LABEL_466;
      if (LODWORD(__p[0]) != 2)
        goto LABEL_255;
      v338 = v343.__r_.__value_.__r.__words[1];
      if (LODWORD(v343.__r_.__value_.__r.__words[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v337, (const llvm::APInt *)&v343);
      else
        v337 = v343.__r_.__value_.__r.__words[0];
      llvm::APInt::operator-=();
      LODWORD(v325.__r_.__value_.__r.__words[1]) = v338;
      v325.__r_.__value_.__r.__words[0] = v337;
      v338 = 0;
      llvm::APInt::operator+=();
      LODWORD(v341.__r_.__value_.__r.__words[1]) = v325.__r_.__value_.__r.__words[1];
      v10 = v325.__r_.__value_.__r.__words[0];
      v341.__r_.__value_.__r.__words[0] = v325.__r_.__value_.__r.__words[0];
      LODWORD(v325.__r_.__value_.__r.__words[1]) = 0;
      v331 = v343.__r_.__value_.__r.__words[1];
      if (LODWORD(v343.__r_.__value_.__r.__words[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v330, (const llvm::APInt *)&v343);
      else
        v330 = v343.__r_.__value_.__r.__words[0];
      llvm::APInt::operator-=();
      v174 = v331;
      v333 = v331;
      v332 = v330;
      v331 = 0;
      if (v333 <= 0x40)
      {
        v175 = ~v330;
        if (v174)
          v232 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v174;
        else
LABEL_690:
          v232 = 0;
        v233 = v232 & v175;
        v332 = v233;
        v333 = 0;
        goto LABEL_440;
      }
      llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v332);
      v174 = v333;
      v233 = v332;
      v335 = v333;
      v334 = v332;
      v333 = 0;
      if (v335 <= 0x40)
      {
LABEL_440:
        v334 = v233 & v10;
        v335 = 0;
        LODWORD(v342.__r_.__value_.__r.__words[1]) = v174;
        v342.__r_.__value_.__r.__words[0] = v233 & v10;
        v342.__r_.__value_.__s.__data_[12] = BYTE4(v352);
        goto LABEL_441;
      }
      llvm::APInt::andAssignSlowCase((llvm::APInt *)&v334, (const llvm::APInt *)&v341);
      v311 = v335;
      v335 = 0;
      LODWORD(v342.__r_.__value_.__r.__words[1]) = v311;
      v342.__r_.__value_.__r.__words[0] = v334;
      v342.__r_.__value_.__s.__data_[12] = BYTE4(v352);
      if (v333 >= 0x41 && v332)
        MEMORY[0x2348A0E84](v332, 0x1000C8000313F17);
LABEL_441:
      if (v331 >= 0x41 && v330)
        MEMORY[0x2348A0E84](v330, 0x1000C8000313F17);
      if (LODWORD(v341.__r_.__value_.__r.__words[1]) >= 0x41 && v341.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v341.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (LODWORD(v325.__r_.__value_.__r.__words[1]) >= 0x41 && v325.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v325.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (v338 < 0x41)
        goto LABEL_462;
      v234 = v337;
      if (!v337)
        goto LABEL_462;
      goto LABEL_461;
    case 1236:
      LODWORD(__p[0]) = 0;
      LODWORD(v343.__r_.__value_.__r.__words[1]) = 1;
      v343.__r_.__value_.__r.__words[0] = 0;
      v343.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F03FE64(a2, *a1, (uint64_t)__p, (uint64_t)&v343))
        goto LABEL_466;
      if (LODWORD(__p[0]) != 2)
      {
LABEL_255:
        sub_22F072CEC(*a1, v10, 103, 0);
        v13 = 0;
        goto LABEL_466;
      }
      v327 = v343.__r_.__value_.__r.__words[1];
      if (LODWORD(v343.__r_.__value_.__r.__words[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v326, (const llvm::APInt *)&v343);
      else
        v326 = v343.__r_.__value_.__r.__words[0];
      llvm::APInt::operator-=();
      v235 = v327;
      v329 = v327;
      v328 = v326;
      v327 = 0;
      if (v329 <= 0x40)
      {
        if (v235)
          v236 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v235;
        else
          v236 = 0;
        v237 = v236 & ~v326;
        v328 = v237;
        v329 = 0;
        goto LABEL_458;
      }
      llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v328);
      v235 = v329;
      v237 = v328;
      LODWORD(v341.__r_.__value_.__r.__words[1]) = v329;
      v341.__r_.__value_.__r.__words[0] = v328;
      v329 = 0;
      if (LODWORD(v341.__r_.__value_.__r.__words[1]) <= 0x40)
      {
LABEL_458:
        v341.__r_.__value_.__r.__words[0] = (std::string::size_type)__p[1] & v237;
        LODWORD(v341.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v342.__r_.__value_.__r.__words[1]) = v235;
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__p[1] & v237;
        v342.__r_.__value_.__s.__data_[12] = BYTE4(v352);
        goto LABEL_459;
      }
      llvm::APInt::andAssignSlowCase((llvm::APInt *)&v341, (const llvm::APInt *)&__p[1]);
      v312 = v341.__r_.__value_.__r.__words[1];
      LODWORD(v341.__r_.__value_.__r.__words[1]) = 0;
      LODWORD(v342.__r_.__value_.__r.__words[1]) = v312;
      v342.__r_.__value_.__r.__words[0] = v341.__r_.__value_.__r.__words[0];
      v342.__r_.__value_.__s.__data_[12] = BYTE4(v352);
      if (v329 >= 0x41 && v328)
        MEMORY[0x2348A0E84](v328, 0x1000C8000313F17);
LABEL_459:
      if (v327 >= 0x41)
      {
        v234 = v326;
        if (v326)
LABEL_461:
          MEMORY[0x2348A0E84](v234, 0x1000C8000313F17);
      }
LABEL_462:
      sub_22F01E460((llvm::APInt *)&v342, a1[1]);
      if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41 && v342.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v342.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      v13 = 1;
LABEL_466:
      if (LODWORD(v343.__r_.__value_.__r.__words[1]) >= 0x41 && v343.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v343.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      if (LODWORD(__p[0]) >= 2)
      {
        v197 = (std::string *)__p;
LABEL_471:
        sub_22EF53BC0((uint64_t *)v197);
      }
      return v13;
    case 1263:
      v240 = sub_22EFFA6B0(*(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]
                                               + ((unint64_t)*a2 >> 24)));
      v119 = *a1;
      v69 = sub_22F3F1554(&v240[4 * *((unsigned int *)v240 + 1) + 20], ((*(_DWORD *)v240 >> 21) & 7u) * *((_DWORD *)v240 + 4))% 0xFFFF+ 1;
      goto LABEL_294;
    default:
LABEL_81:
      if (a3 == 1294)
      {
        __p[0] = &v352;
        __p[1] = (void *)0x400000000;
        sub_22F3EF6E8(*(_QWORD *)(*a1 + 8), (unsigned int *)v10, (uint64_t)__p);
        if (LODWORD(__p[1]))
        {
          v111 = 56 * LODWORD(__p[1]);
          v112 = (uint64_t *)((char *)__p[0] + 24);
          v113 = 2;
          do
          {
            v114 = *v112;
            v112 += 7;
            v113 += v114 + 2;
            v111 -= 56;
          }
          while (v111);
        }
        else
        {
          v113 = 2;
        }
        sub_22F03A1EC(*(_QWORD *)(*a1 + 8), v113, *(_QWORD *)(v10 + 8), a1[1]);
        if (__p[0] != &v352)
          free(__p[0]);
        goto LABEL_428;
      }
      if (a3 != 1933)
        return sub_22F03F288(a1, (unsigned int *)v10);
      if (*(_DWORD *)(v10 + 16) != 3)
      {
        v179 = *a1;
        goto LABEL_539;
      }
      LODWORD(v342.__r_.__value_.__r.__words[1]) = 1;
      v342.__r_.__value_.__r.__words[0] = 0;
      v342.__r_.__value_.__s.__data_[12] = 0;
      v13 = 0;
      if (!sub_22F0174A0(*(_QWORD *)(v10+ ((unint64_t)*(unsigned int *)v10 >> 24)+ 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)+ 8), &v342, *a1))goto LABEL_93;
      v48 = *(_QWORD *)(*(_QWORD *)(v10
                                  + ((unint64_t)*(unsigned int *)v10 >> 24)
                                  + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                  + 16)
                      + 8) & 0xFFFFFFFFFFFFFFF0;
      v49 = *(_QWORD *)v48;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
        || (v50 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v10
                                                     + ((unint64_t)*(unsigned int *)v10 >> 24)
                                                     + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                                     + 16)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 8),
            (v50 & 8) != 0)
        && (*(_DWORD *)((v50 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0
        || (v51 = sub_22F10ACF8(v49),
            v52 = *(_QWORD *)(*(_QWORD *)(v10
                                        + ((unint64_t)*(unsigned int *)v10 >> 24)
                                        + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF0,
            v53 = *(_QWORD *)v52,
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        || (v54 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v10
                                                     + ((unint64_t)*(unsigned int *)v10 >> 24)
                                                     + 8 * (((unint64_t)*(unsigned int *)v10 >> 18) & 1)
                                                     + 24)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 8),
            (v54 & 8) != 0)
        && (*(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0
        || (v55 = sub_22F10AEAC(v53)) == 0)
      {
        v13 = 0;
        goto LABEL_93;
      }
      v296 = sub_22EFC3B90(v55);
      __p[0] = &v352;
      __p[1] = (void *)0x400000000;
      sub_22F271D38((uint64_t)__p, v296, 0);
      v297 = __p[1];
      if (!LODWORD(__p[1]))
        goto LABEL_671;
      v298 = v51 & 0xFFFFFFFFFFFFFFF0;
      v299 = v51 & 7;
      while (2)
      {
        v300 = *((_QWORD *)__p[0] + v297 - 1);
        LODWORD(__p[1]) = v297 - 1;
        v301 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v300 + 48) & 0xFFFFFFFFFFFFFFF0));
        if (v301 && (*(_DWORD *)(v301 + 28) & 0x7Fu) - 35 <= 2)
        {
          v307 = (char *)__p[0] + 8 * LODWORD(__p[1]);
          v308 = sub_22EFC3B90(v301);
          sub_22E9A9EA4((uint64_t)__p, (uint64_t)v307, v308, 0);
          goto LABEL_658;
        }
        if ((*(_BYTE *)(v300 + 29) & 1) == 0)
          goto LABEL_658;
        sub_22EFC8E88(v300);
        v303 = *(uint64_t **)v302;
        v304 = *(unsigned int *)(v302 + 8);
        v305 = *(uint64_t **)v302;
        if ((_DWORD)v304)
        {
          v306 = 8 * v304;
          v305 = *(uint64_t **)v302;
          while (*(_WORD *)(*v305 + 32) != 385)
          {
            ++v305;
            v306 -= 8;
            if (!v306)
              goto LABEL_658;
          }
        }
        if (v305 == &v303[v304])
          goto LABEL_658;
        do
        {
          v310 = *v303++;
          v309 = v310;
        }
        while (*(_WORD *)(v310 + 32) != 385);
        sub_22F00905C(*(_QWORD *)(v309 + 40), *(_QWORD *)(*a1 + 8), 0, (uint64_t)&v343);
        if (v343.__r_.__value_.__s.__data_[16]
          && (sub_22E4634B4((uint64_t)&v342, (uint64_t)&v343)
           || (*(_QWORD *)(v298 + 8) | v299) != (*(_QWORD *)((*(_QWORD *)(v300 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v300 + 48) & 7)))
        {
          if (v343.__r_.__value_.__s.__data_[16]
            && LODWORD(v343.__r_.__value_.__r.__words[1]) >= 0x41
            && v343.__r_.__value_.__r.__words[0])
          {
            MEMORY[0x2348A0E84](v343.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          }
LABEL_658:
          v297 = __p[1];
          if (!LODWORD(__p[1]))
          {
LABEL_671:
            sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 0, *(_QWORD *)(v10 + 8), a1[1]);
            goto LABEL_672;
          }
          continue;
        }
        break;
      }
      sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 1, *(_QWORD *)(v10 + 8), a1[1]);
      if (v343.__r_.__value_.__s.__data_[16]
        && LODWORD(v343.__r_.__value_.__r.__words[1]) >= 0x41
        && v343.__r_.__value_.__r.__words[0])
      {
        MEMORY[0x2348A0E84](v343.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
      }
LABEL_672:
      if (__p[0] != &v352)
        free(__p[0]);
      v13 = 1;
LABEL_93:
      if (LODWORD(v342.__r_.__value_.__r.__words[1]) >= 0x41)
      {
        v56 = (void *)v342.__r_.__value_.__r.__words[0];
        if (v342.__r_.__value_.__r.__words[0])
          goto LABEL_265;
      }
      break;
  }
  return v13;
}

unint64_t sub_22F03F288(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 **v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _BYTE **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  _BYTE **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  char v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  _QWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t v89[9];
  uint64_t v90;
  void **v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _QWORD v97[11];
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _BYTE v105[64];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[3];
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[64];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  LODWORD(v89[0]) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v12 = *a2;
  v13 = (unsigned __int8 **)((char *)a2 + (v12 >> 24));
  v14 = *v13;
  if (*v13)
  {
    while (1)
    {
      v15 = v14;
      v16 = *v14;
      if (v16 > 213)
      {
        if (v16 == 233)
        {
          if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v18 = v15 + 16;
        }
        else
        {
          if (v16 != 214)
            goto LABEL_19;
          v18 = v15 + 24;
        }
      }
      else if (v16 == 155)
      {
        if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v15[48])
          v18 = v15 + 24;
        else
          v18 = v15 + 32;
      }
      else
      {
        if (v16 != 176)
          goto LABEL_19;
        v17 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v17 == -1)
          goto LABEL_19;
        v18 = &v15[8 * v17 + 40];
      }
      v14 = *(unsigned __int8 **)v18;
      if (v14 == v15)
        goto LABEL_19;
    }
  }
  v15 = 0;
LABEL_19:
  v19 = *((_QWORD *)v15 + 1);
  memset(v108, 0, sizeof(v108));
  LODWORD(v109) = -1;
  v110 = 0;
  v111 = v113;
  v112 = 0x800000000;
  v20 = &v13[((v12 >> 18) & 1) + 1];
  v115 = 0;
  v114 = 0;
  v21 = a2[4];
  v22 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 136839179;
  else
    v25 = 0;
  if (!v25)
  {
    if ((*(_BYTE *)(v23 + 16) == 39 || *(_DWORD *)(v24 + 16) == 39 && (v23 = sub_22F10CF48(v23)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 |= 1u;
      v102 = 0;
      v103 = v105;
      v104 = 0x800000000;
      v106 = 0;
      v107 = 0;
      v90 = *a1;
      v91 = &v98;
      LOBYTE(v92) = 0;
      v87 = v5;
      if (sub_22F00C45C(&v90, v15, v6, v7, v8, v9, v10, v11))
      {
        if (!v100 && (v98 & 3) == 0)
        {
          v27 = (unint64_t)v98 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v98 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 52 < 6)
          {
            v52 = *(_QWORD *)(*a1 + 8);
            v53 = sub_22F10ACF8(*v22);
            if (sub_22EF5F5D4(v52, v53, *(_QWORD *)(v27 + 48)))
            {
              v54 = *(unsigned __int8 *)a2;
              if (v54 == 141)
              {
                v55 = a2[1] & 0x3F;
                if (v55 - 18 < 8 || (v29 = 0, v85 = 0, v55 <= 0x1D) && ((1 << v55) & 0x30008000) != 0)
                {
                  v56 = (_BYTE **)*a1;
                  v57 = *(_QWORD *)(*a1 + 24);
                  v58 = *(unsigned int *)(v57 + 92);
                  v59 = (*(_DWORD *)(v57 + 120) + 1);
                  *(_DWORD *)(v57 + 120) = v59;
                  v29 = v58 | (v59 << 32);
                  v60 = (*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 < 4;
                  if (!sub_22F0279B4((uint64_t)&v20[v60], v21 - v60, v27, v29, v56, v27, 1))
                  {
                    v86 = v29;
                    v28 = 0;
                    v88 = 0;
                    LOBYTE(v29) = 0;
                    v26 = v27;
                    goto LABEL_30;
                  }
                  v85 = v27;
                }
              }
              else
              {
                v85 = 0;
                v29 = 0;
              }
              v86 = v29;
              if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                goto LABEL_200;
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27) + 80) & 0xE000) != 0x4000
                && ((*(_QWORD *)(v27 + 40) & 7) != 6
                 || (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
              {
                v75 = *a1;
                if ((_DWORD)v21)
                {
                  if (sub_22F0098FC(v75, *v20, v108))
                  {
                    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                    if (v54 == 141
                      && (**(_QWORD **)(v76 + 2000) & 0x1000) != 0
                      && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                      && (*(_BYTE *)(v27 + 82) & 0x80) != 0)
                    {
                      v88 = v108;
                      if (!sub_22F013A2C((uint64_t *)*a1, *v20, (uint64_t)v108))
                      {
                        v28 = 0;
                        goto LABEL_158;
                      }
                    }
                    --v21;
                    ++v20;
                    v88 = v108;
LABEL_195:
                    v28 = 1;
                    goto LABEL_196;
                  }
                }
                else
                {
                  sub_22F072CEC(v75, (uint64_t)a2, 103, 0);
                  v21 = 0;
                }
LABEL_157:
                v28 = 0;
                v88 = 0;
LABEL_158:
                LOBYTE(v29) = 0;
                goto LABEL_196;
              }
              if (!sub_22EFD799C(v27))
              {
LABEL_200:
                if (sub_22EFBFDCC(v27, 0, 0))
                {
                  if ((*(_QWORD *)(v27 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                  {
                    v90 = 0;
                    v91 = 0;
                    v92 = 0;
                    v93 |= 1u;
                    v94 = 0;
                    v95 = v97;
                    v96 = 0x800000000;
                    v97[8] = 0;
                    v97[9] = 0;
                    if (sub_22F027C94(*a1, a2, (uint64_t)&v90))
                    {
                      sub_22F00676C((uint64_t)&v90, (uint64_t)v89);
                      LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
                    }
                    else
                    {
                      LOBYTE(v29) = 0;
                    }
                    v26 = v85;
                    if (v95 != v97)
                    {
                      free(v95);
                      v26 = v85;
                    }
                    v87 = v5;
                    v28 = 0;
                    v88 = 0;
LABEL_30:
                    if (v103 != v105)
                    {
                      v30 = v21;
                      v31 = v20;
                      v32 = v26;
                      free(v103);
                      v26 = v32;
                      v20 = v31;
                      v21 = v30;
                    }
                    if ((v28 & 1) == 0)
                    {
                      v5 = v87;
                      goto LABEL_58;
                    }
                    v33 = 0;
                    v5 = v87;
                    if (v26)
                      goto LABEL_71;
                    goto LABEL_70;
                  }
                  if (sub_22F02836C(*a1, a2))
                  {
                    LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
                    v28 = 0;
                    v88 = 0;
                    v87 = -1;
LABEL_196:
                    v26 = v85;
                    goto LABEL_30;
                  }
                  goto LABEL_157;
                }
                goto LABEL_194;
              }
              v73 = *(_WORD *)(v27 + 80) & 0x7F;
              v74 = -40;
              if (v73 > 0x46)
              {
                switch(v73)
                {
                  case 'S':
                    goto LABEL_176;
                  case 'G':
                    v74 = -56;
                    goto LABEL_176;
                  case 'Q':
                    goto LABEL_176;
                }
              }
              else
              {
                if (v73 <= 0x18)
                {
                  if (v73 == 16)
                    goto LABEL_144;
                  if (((1 << v73) & 0x1066) != 0)
                    goto LABEL_176;
                  if (v73 == 24)
                  {
LABEL_144:
                    v74 = -48;
LABEL_176:
                    v77 = *(_QWORD *)(v27 + 72 + v74 + 16);
                    v78 = (_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF8);
                    if ((v77 & 4) != 0)
                      v78 = (_QWORD *)*v78;
                    if (v78)
                      v29 = (unint64_t)(v78 - 8);
                    else
                      v29 = 0;
                    v79 = sub_22EFD462C(v29);
                    if (v79 && (*(_DWORD *)(v79 + 28) & 0x7F) == 0x1D)
                      v79 = *(_QWORD *)(v79 + 48);
                    v80 = *(_QWORD *)(v29 + 128);
                    if (!v80
                      || ((*(unsigned __int16 *)(v80 + 8) | (*(unsigned __int8 *)(v80 + 10) << 16)) & 0x100000) == 0
                      || (*(_BYTE *)(v80 + 104) & 4) == 0)
                    {
                      v88 = 0;
                      v28 = 1;
                      v27 = v79;
                      goto LABEL_196;
                    }
                    v81 = *(_QWORD *)((*(_QWORD *)(v27 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                    v82 = *(_QWORD *)(v79 + 144);
                    if ((v82 & 6) != 0)
                      v83 = 0;
                    else
                      v83 = v82 & 0xFFFFFFFFFFFFFFF8;
                    v90 = 0;
                    v27 = sub_22EFE9880(v83, *(_QWORD *)v81, *(unsigned int *)(v81 + 8), (uint64_t)&v90);
LABEL_194:
                    v88 = 0;
                    goto LABEL_195;
                  }
                }
                if (v73 == 70)
                {
LABEL_174:
                  v74 = -64;
                  goto LABEL_176;
                }
              }
              if (v73 - 52 < 6)
              {
                v74 = -72;
                goto LABEL_176;
              }
              if (v73 - 33 < 5)
                goto LABEL_174;
              goto LABEL_144;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v26 = 0;
            v86 = 0;
LABEL_29:
            v28 = 0;
            v88 = 0;
            LOBYTE(v29) = 0;
            goto LABEL_30;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v15, 103, 0);
      }
      v26 = 0;
      v86 = 0;
      v27 = 0;
      goto LABEL_29;
    }
    v36 = *a1;
    v37 = (uint64_t)a2;
    goto LABEL_56;
  }
  v34 = *v15;
  if (v34 == 188)
  {
    if (sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), v108))
    {
      v27 = *((_QWORD *)v15 + 3);
      if (v27 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        if ((v15[2] & 8) != 0)
        {
          v33 = *((_QWORD *)v15 + 6) != 0;
LABEL_69:
          v88 = v108;
LABEL_70:
          v44 = (_BYTE **)*a1;
          v45 = *(_QWORD *)(*a1 + 24);
          v46 = *(unsigned int *)(v45 + 92);
          v47 = (*(_DWORD *)(v45 + 120) + 1);
          *(_DWORD *)(v45 + 120) = v47;
          v86 = v46 | (v47 << 32);
          v48 = sub_22F0279B4((uint64_t)v20, v21, v27, v86, v44, v27, 0);
          LOBYTE(v29) = 0;
          v26 = v27;
          if (!v48)
            goto LABEL_58;
LABEL_71:
          v84 = v26;
          v98 = &v100;
          v99 = 0x400000000;
          if (!v88)
          {
LABEL_98:
            if (v27 && (*(_DWORD *)(v27 + 28) & 0x7F) == 0x39)
            {
              v62 = (uint64_t *)*a1;
              v63 = *(_WORD *)(v27 + 80) & 0x7F;
              v64 = -40;
              if (v63 > 0x46)
              {
                switch(v63)
                {
                  case 'S':
                    goto LABEL_121;
                  case 'G':
                    v64 = -56;
                    goto LABEL_121;
                  case 'Q':
LABEL_121:
                    v69 = *(_QWORD *)(v27 + 72 + v64 + 16);
                    v70 = (_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF8);
                    if ((v69 & 4) != 0)
                      v70 = (_QWORD *)*v70;
                    if (v70)
                      v71 = (uint64_t)(v70 - 8);
                    else
                      v71 = 0;
                    v72 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v71);
                    if (!sub_22F027138(v62, (uint64_t)a2, (uint64_t)v88, v72))
                      goto LABEL_108;
LABEL_127:
                    LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
                    v5 = -1;
LABEL_128:
                    if (v98 != &v100)
                      free(v98);
                    goto LABEL_58;
                }
              }
              else
              {
                if (v63 <= 0x18)
                {
                  if (v63 == 16)
                  {
LABEL_103:
                    v64 = -48;
                    goto LABEL_121;
                  }
                  if (((1 << v63) & 0x1066) != 0)
                    goto LABEL_121;
                  if (v63 == 24)
                    goto LABEL_103;
                }
                if (v63 == 70)
                {
LABEL_119:
                  v64 = -64;
                  goto LABEL_121;
                }
              }
              if (v63 - 52 >= 6)
              {
                if (v63 - 33 >= 5)
                  goto LABEL_103;
                goto LABEL_119;
              }
              v64 = -72;
              goto LABEL_121;
            }
            v90 = 0;
            v65 = (unsigned __int8 *)sub_22EFBF910(v27, &v90);
            v66 = (_QWORD *)*a1;
            sub_22EFF605C((uint64_t)a2);
            if (sub_22F028A44(v66, v67, (_QWORD *)v27, v90, (uint64_t)v65))
            {
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F00B12C(v68, v90, (uint64_t)v88, (uint64_t *)v20, v21, v84, v86, v65, (uint64_t *)*a1, (uint64_t)v89, 0)&& (!(_DWORD)v99 || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v89, v98, v99)))
              {
                goto LABEL_127;
              }
            }
LABEL_108:
            LOBYTE(v29) = 0;
            goto LABEL_128;
          }
          if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 >= 4)
            v49 = 0;
          else
            v49 = (_DWORD *)v27;
          if (v49)
          {
            v50 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 32))(v49);
            if ((*(_BYTE *)(v50 + 82) & 0xC) != 0)
            {
              if (v33)
                goto LABEL_78;
LABEL_97:
              v27 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v88, (uint64_t)v49, (uint64_t)&v98);
              if (!v27)
                goto LABEL_108;
              goto LABEL_98;
            }
            if (sub_22EFD7260(v50))
              v61 = v33;
            else
              v61 = 1;
            if ((v61 & 1) == 0)
              goto LABEL_97;
          }
LABEL_78:
          if ((v49[7] & 0x7F) == 0x39)
            v51 = 9;
          else
            v51 = 5;
          if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v88, v51, 0))
            goto LABEL_108;
          goto LABEL_98;
        }
LABEL_68:
        v33 = 0;
        goto LABEL_69;
      }
      goto LABEL_44;
    }
    goto LABEL_57;
  }
  if ((v34 & 0xFE) == 0x70)
  {
    v35 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v15, (uint64_t)v108, 0);
    if (v35)
    {
      v27 = v35;
      if ((*(_DWORD *)(v35 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_68;
LABEL_44:
      v36 = *a1;
LABEL_55:
      v37 = (uint64_t)v15;
LABEL_56:
      sub_22F072CEC(v36, v37, 103, 0);
    }
LABEL_57:
    LOBYTE(v29) = 0;
    goto LABEL_58;
  }
  v36 = *a1;
  if (v34 != 129)
    goto LABEL_55;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 96))(v36) + 2000) + 1) & 0x10) == 0)
  {
    v38 = *a1;
    sub_22EFF605C((uint64_t)v15);
    sub_22F072D74(v38, v39, 2266, 0);
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), v108))
    goto LABEL_57;
  v40 = 0;
  v41 = *((_QWORD *)v15 + 8);
  if ((v41 & 1) == 0)
  {
    v42 = (uint64_t *)(v41 & 0xFFFFFFFFFFFFFFFELL);
    if (v42)
      v40 = *v42;
  }
  LOBYTE(v29) = sub_22F027138((uint64_t *)*a1, (uint64_t)v15, (uint64_t)v108, v40);
LABEL_58:
  if (v111 != v113)
    free(v111);
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v29 & 1) != 0)
    sub_22F01E36C((uint64_t)a1, v89);
  if (LODWORD(v89[0]) >= 2)
    sub_22EF53BC0(v89);
  return v29 & 1;
}

BOOL sub_22F03FE64(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)&a1[2 * (((unint64_t)*a1 >> 18) & 1)] + ((unint64_t)*a1 >> 24);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  result = sub_22F04035C(*(_QWORD *)(v7 + 16), v8, a2, a4);
  if (result)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_DWORD *)(v16 + 16);
    if (v17 > 0x26)
    {
      if (v17 != 44)
      {
        if (v17 != 39)
        {
LABEL_17:
          sub_22F072CEC(a2, *(_QWORD *)((char *)&a1[2 * (((unint64_t)*a1 >> 18) & 1) + 2] + ((unint64_t)*a1 >> 24)), 103, 0);
          return 0;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        LODWORD(v32) = -1;
        v33 = 0;
        v34 = v36;
        v35 = 0x800000000;
        v37 = 0;
        v38 = 0;
        v18 = *(unsigned __int8 **)((char *)&a1[2 * (((unint64_t)*a1 >> 18) & 1) + 2]
                                  + ((unint64_t)*a1 >> 24));
        v27[0] = a2;
        v27[1] = (uint64_t)&v29;
        LOBYTE(v28) = 0;
        if (!sub_22F00C45C(v27, v18, v10, v11, v12, v13, v14, v15))
        {
          if (v34 != v36)
            free(v34);
          return 0;
        }
        sub_22F00676C((uint64_t)&v29, a3);
        if (v34 != v36)
          free(v34);
        return 1;
      }
      v19 = sub_22F114198(*(_QWORD *)(v16 + 24));
      if ((*(_BYTE *)(v19 + 74) & 1) == 0 && *(_QWORD *)(v19 + 128) <= 7uLL)
        goto LABEL_17;
    }
    else if (v17 != 9 && (v17 != 11 || ((*(_DWORD *)(v16 + 16) >> 19) & 0x1FEu) - 166 >= 0x14))
    {
      goto LABEL_17;
    }
    LODWORD(v30) = 1;
    v29 = 0;
    BYTE4(v30) = 0;
    if (!sub_22F0174A0(*(_QWORD *)((char *)&a1[2 * (((unint64_t)*a1 >> 18) & 1) + 2]+ ((unint64_t)*a1 >> 24)), &v29, a2))
    {
      if (v30 >= 0x41 && v29)
        MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
      return 0;
    }
    v20 = v30;
    v25 = v30;
    if (v30 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v24, (const llvm::APInt *)&v29);
      v20 = v25;
      v21 = v24;
    }
    else
    {
      v21 = v29;
      v24 = v29;
    }
    v22 = BYTE4(v30);
    v26 = BYTE4(v30);
    v25 = 0;
    if (*(_DWORD *)a3 > 1u)
    {
      sub_22EF53BC0((uint64_t *)a3);
      v23 = v25;
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v21;
      *(_DWORD *)(a3 + 16) = v20;
      *(_BYTE *)(a3 + 20) = v22;
      if (v23 >= 0x41 && v24)
        MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
    }
    else
    {
      *(_DWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v21;
      *(_DWORD *)(a3 + 16) = v20;
      *(_BYTE *)(a3 + 20) = v22;
    }
    if (v30 >= 0x41)
    {
      if (v29)
        MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
    }
    return 1;
  }
  return result;
}

unint64_t sub_22F040150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = a2;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v5 = v3 & 3;
  if (!v5 && v4)
    return sub_22EF5B404(*(_QWORD *)(a1 + 8), (unint64_t)v4, 0);
  if (v5 == 1 && v4)
    return sub_22F040600(a1, v4, 1);
  return sub_22F0406D8(a1, a3, 1);
}

BOOL sub_22F040190(uint64_t a1, const llvm::APInt *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v5 = *((_DWORD *)a2 + 2);
  v10 = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, a2);
    v5 = v10;
    v6 = v9;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v9 = *(_QWORD *)a2;
  }
  v10 = 0;
  if (*(_DWORD *)a1 > 1u)
  {
    sub_22EF53BC0((uint64_t *)a1);
    v8 = v10;
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 20) = 1;
    if (v8 >= 0x41 && v9)
      MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
  }
  else
  {
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 20) = 1;
  }
  result = sub_22F110C5C(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
  *(_BYTE *)(a1 + 20) = result;
  return result;
}

uint64_t sub_22F040274(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v2 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    return llvm::detail::DoubleAPFloat::isDenormal(v1);
  else
    return llvm::detail::IEEEFloat::isDenormal(v1);
}

uint64_t sub_22F0402B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 144) & 1) == 0)
    return 1;
  v5 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2171, 0);
  if (v5)
  {
    v6 = v5;
    v7 = *v5;
    if (!v7)
    {
      v7 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v6[1]);
      *v6 = v7;
    }
    v7[*v7 + 1] = 2;
    v8 = *v6;
    v9 = **v6;
    *v8 = v9 + 1;
    *(_QWORD *)&v8[8 * v9 + 16] = 0;
  }
  result = 0;
  *(_DWORD *)(a1 + 24) |= 1u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

BOOL sub_22F04035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint8x8_t v8;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 **v15;
  int v16;
  unsigned int v17;
  unsigned __int8 ***v18;
  unsigned __int8 ***v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 **v25;
  unsigned int v26;
  unsigned __int8 **v27;
  unsigned int v28;
  char v29;
  unsigned __int8 **v30;
  unsigned int v31;
  unsigned __int8 **v32;
  unsigned int v33;
  char v34;

  if (!sub_22F0174A0(a1, a4, a3))
    return 0;
  if ((sub_22E8BAD7C(a4, 0) & 1) != 0)
  {
LABEL_5:
    v32 = (unsigned __int8 **)sub_22F072CEC(a3, a1, 2215, 0);
    sub_22F3C4700(&v32);
    return 0;
  }
  if (*(_DWORD *)(a4 + 8) > 0x40u)
  {
    if (llvm::APInt::countPopulationSlowCase((llvm::APInt *)a4) != 1)
      goto LABEL_5;
  }
  else
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] != 1)
      goto LABEL_5;
  }
  v10 = sub_22EF6A330(*(_QWORD *)(a3 + 8), a2);
  v11 = v10 - 1;
  v31 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30);
    v14 = v31;
    v13 = 1 << v11;
    if (v31 > 0x40)
    {
      v30[v11 >> 6] = (unsigned __int8 *)((unint64_t)v30[v11 >> 6] | v13);
      v15 = v30;
      goto LABEL_11;
    }
    v12 = v30;
  }
  else
  {
    v12 = 0;
    v13 = 1 << v11;
    v14 = v10;
  }
  v15 = (unsigned __int8 **)((unint64_t)v12 | v13);
  v30 = v15;
LABEL_11:
  v33 = v14;
  v32 = v15;
  v31 = 0;
  v34 = 1;
  v16 = sub_22E4634B4(a4, (uint64_t)&v32);
  v9 = v16 < 1;
  if (v16 < 1)
  {
    llvm::APInt::zextOrTrunc((llvm::APInt *)a4);
    v28 = v26;
    v27 = v25;
    v29 = 1;
    if (*(_DWORD *)(a4 + 8) > 0x40u || v26 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v27);
      v17 = v28;
      *(_BYTE *)(a4 + 12) = v29;
      if (v17 >= 0x41 && v27)
        MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
    }
    else
    {
      *(_QWORD *)a4 = v25;
      *(_DWORD *)(a4 + 8) = v26;
      *(_BYTE *)(a4 + 12) = 1;
    }
  }
  else
  {
    v27 = (unsigned __int8 **)sub_22F072CEC(a3, a1, 2181, 0);
    v18 = sub_22F3C4700(&v27);
    v19 = v18;
    v20 = *v18;
    if (*v18)
    {
      v21 = *v20;
      if (!*v20)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
        *v20 = v21;
      }
      v21[*v21 + 1] = 9;
      v22 = *v20;
      v23 = **v20;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = a2;
    }
    sub_22F3C4700(v19);
  }
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  return v9;
}

unint64_t sub_22F040600(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  unint64_t v7;

  do
  {
    v3 = a2;
    LODWORD(v4) = *(unsigned __int8 *)a2;
    if (v4 > 0xD5)
    {
      if ((_DWORD)v4 == 233)
      {
        LODWORD(v4) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          return sub_22F0406D8(a1, v3[1], a3);
        v5 = (uint64_t **)(a2 + 2);
      }
      else
      {
        if ((_DWORD)v4 != 214)
          break;
        v5 = (uint64_t **)(a2 + 3);
      }
    }
    else if ((_DWORD)v4 == 155)
    {
      if ((*(_DWORD *)a2[2] & 0x18000) != 0)
        return sub_22F0406D8(a1, v3[1], a3);
      v5 = (uint64_t **)(a2 + 3);
      if (!*((_BYTE *)a2 + 48))
        v5 = (uint64_t **)(a2 + 4);
      LOBYTE(v4) = -101;
    }
    else
    {
      if ((_DWORD)v4 != 176)
        break;
      v4 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v4 == -1)
        return sub_22F0406D8(a1, v3[1], a3);
      v5 = (uint64_t **)&a2[v4 + 5];
      LOBYTE(v4) = -80;
    }
    a2 = *v5;
  }
  while (*v5 != v3);
  if (v4 == 188)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v3[3];
  }
  else
  {
    if (v4 != 161)
      return sub_22F0406D8(a1, v3[1], a3);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v3[2];
  }
  return sub_22EF5B404(v6, v7, 1);
}

unint64_t sub_22F0406D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 16);
    if ((v7 & 0xFE) == 0x28)
    {
      if ((v7 & 0x100000) != 0)
      {
        do
        {
LABEL_4:
          while (1)
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v6)
              break;
            v8 = *(_DWORD *)(v6 + 16);
            if ((v8 & 0xFE) != 0x28)
              break;
            if ((v8 & 0x100000) == 0)
              goto LABEL_13;
          }
          v6 = sub_22F10CF48(v6);
        }
        while ((*(_DWORD *)(v6 + 16) & 0x100000) != 0);
      }
      goto LABEL_13;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v6 = sub_22F10CF48(v6);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 16) & 0x100000) != 0)
        goto LABEL_4;
LABEL_13:
      v5 = (uint64_t *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  v9 = v5[1];
  if ((v9 & 8) != 0 && (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 8) != 0)
    return 1;
  v10 = *(_QWORD *)(a1 + 8);
  if (a3 == 2 || ((*(unsigned __int8 *)(*(_QWORD *)(v10 + 2000) + 250) << 16) & 0xC0000) == 0)
  {
    v12 = sub_22EF5C8B8(v10, *v5);
  }
  else
  {
    sub_22EF5CDF0(v10, *v5);
    v12 = v11;
  }
  return v12 / sub_22EF5CDF0(v10, *(_QWORD *)(*(_QWORD *)(v10 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

void sub_22F040804(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F040860()
{
  uint64_t *v0;
  uint64_t v1;

  sub_22F072CEC(*v0, v1, 103, 0);
  return 0;
}

BOOL sub_22F041194(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;

  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x43)
    v3 = a3;
  else
    v3 = 0;
  if (v3)
  {
    v6 = *(_BYTE *)(v3 + 76) == 0;
    v7 = v6 ^ sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
    v8 = *(_DWORD *)(v3 + 72);
    v9 = sub_22EF6A330(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
    v10 = v9;
    if ((v7 & 1) != 0 || v8 != v9)
    {
      v16 = *(_DWORD *)(v3 + 72);
      if (v16 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v15, (const llvm::APInt *)(v3 + 64));
      else
        v15 = *(_QWORD *)(v3 + 64);
      v17 = *(_BYTE *)(v3 + 76) ^ v7;
      if (v8 != v10)
      {
        sub_22EF6A330(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
        if (v17)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v15);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v15);
        v11 = v19;
        v12 = v17;
        v13 = v18;
        if (v16 >= 0x41 && v15)
          MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
        v15 = v13;
        v16 = v11;
        v17 = v12;
      }
      sub_22F01E460((llvm::APInt *)&v15, a1[1]);
      if (v16 >= 0x41 && v15)
        MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
    }
    else
    {
      sub_22F01E460((llvm::APInt *)(v3 + 64), a1[1]);
    }
  }
  return v3 != 0;
}

BOOL sub_22F041338(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL8 v11;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  char *v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t (**v21)();
  void *__p;
  _BYTE *v23;
  uint64_t v24;

  v8 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((sub_22F1110EC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9 && (*(_DWORD *)(v9 + 16) & 0xFF800FF) == 86507531;
  if (v10
    || (*(_BYTE *)(*(_QWORD *)v8 + 17) & 4) != 0
    || *(_DWORD *)(v9 + 16) - 25 < 2)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v20[0] = &off_24FAC7DA8;
  v20[1] = v13;
  v20[2] = a2;
  v21 = &off_24FAC7DF8;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v11 = sub_22F40B7D4((uint64_t)v20);
  if (v11)
  {
    if (a3)
    {
      sub_22F120A1C((uint64_t)v20, &v18);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v19;
    }
    v14 = __p;
    if (a4)
    {
      if (__p == v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        v16 = (char *)__p;
        do
        {
          v17 = *v16++;
          v15 |= 1 << v17;
        }
        while (v16 != v23);
      }
      *a4 = v15;
    }
  }
  else
  {
    v14 = __p;
  }
  v20[0] = &off_24FAC7DA8;
  v21 = &off_24FAC7DF8;
  if (v14)
  {
    v23 = v14;
    operator delete(v14);
  }
  return v11;
}

uint64_t sub_22F0414B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v5;
  unsigned __int8 *v6;
  _BYTE *v7;
  uint64_t v8;

  if ((a3 & 1) == 0 && (*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
    return 1;
  result = sub_22F072CEC(a1, a2, 2237, 0);
  if (result)
  {
    v5 = (_QWORD *)result;
    v6 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v6 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v5 = v6;
    }
    result = 0;
    v6[*v6 + 1] = 9;
    v7 = (_BYTE *)*v5;
    v8 = *(unsigned __int8 *)*v5;
    *v7 = v8 + 1;
    *(_QWORD *)&v7[8 * v8 + 16] = a3;
  }
  return result;
}

uint64_t sub_22F04153C(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    LODWORD(v23) = -1;
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v34 = 0;
    v35 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v22, v15, v16, v17, v18, v19, v20, v21, 0,
                         0,
                         0,
                         v23,
                         v24,
                         0,
                         (uint64_t)v28,
                         0x800000000,
                         v28[0],
                         v28[1],
                         v29,
                         v30,
                         v31,
                         v32,
                         v33,
                         0,
                         0,
                         v36,
                         v37,
                         v38,
                         v39))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v14);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v26 != v28)
      free(v26);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

#error "22F0416F4: call analysis failed (funcsize=42)"

uint64_t sub_22F041750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  uint64_t v16;

  if (a5)
  {
    v16 = 0;
    sub_22EFF605C(a2);
    result = sub_22F01E138(a1, v10, a4, &v16);
    if (!(_DWORD)result)
      return result;
    *(_QWORD *)(a3 + 16) += v16;
    v12 = 6;
  }
  else
  {
    v12 = 5;
  }
  result = sub_22F02BACC(a3, a1, a2, v12);
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)(a3 + 56);
    if (v13 >= *(_DWORD *)(a3 + 60))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(a3 + 56);
    }
    *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13) = a5;
    v14 = *(_DWORD *)(a3 + 56) + 1;
    *(_DWORD *)(a3 + 56) = v14;
    v15 = *(_DWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 32) = 2;
    *(_QWORD *)(a3 + 40) = a4;
    *(_DWORD *)(a3 + 24) = v15 & 7 | (16 * v14) | 8;
  }
  return result;
}

uint64_t sub_22F041848(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  const llvm::APInt *v15;
  uint64_t v16;
  char v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  llvm::APFloatBase *v21;
  uint64_t v22;
  uint64_t **v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  if (!sub_22F01D84C((uint64_t *)a1, a3))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = v7 == 11;
  else
    v8 = 0;
  if (v8)
  {
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_19;
  }
  else if (v6 && v7 == 44)
  {
    v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
    if ((*(_BYTE *)(v9 + 74) & 1) == 0 && *(_QWORD *)(v9 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_19;
    }
  }
  else if (v7 != 9)
  {
    goto LABEL_19;
  }
  v10 = *(_DWORD *)a1[4];
  if (v10 == 3)
  {
    v18 = sub_22E51A864(a1[1], *(_QWORD *)((*a1)[1] + 2000));
    v19 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v26, 0.0);
    v20 = llvm::APFloatBase::IEEEdouble(v19);
    MEMORY[0x23489F4E0](&v30, &v26, v20);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v26);
    v21 = (llvm::APFloatBase *)sub_22F035EDC((uint64_t)*a1, (uint64_t)a1[1], v18, a2, (uint64_t)a1[2], &v29);
    if ((_DWORD)v21
      && (v21 = (llvm::APFloatBase *)sub_22F034DBC(*a1, (unsigned int *)a1[1], (llvm::APFloatBase *)&v29, *((_DWORD *)a1 + 6), (uint64_t)(a1[4] + 1)), (_DWORD)v21))
    {
      v21 = (llvm::APFloatBase *)sub_22F039F3C(*a1, (uint64_t)a1[1], (llvm::APFloatBase *)&v29, a3, a2);
      v16 = (uint64_t)v21;
    }
    else
    {
      v16 = 0;
    }
    v22 = v30;
    if (llvm::APFloatBase::PPCDoubleDouble(v21) == v22)
      sub_22E463170((llvm::APFloatBase *)v31);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v30);
    return v16;
  }
  if (v10 != 2)
  {
LABEL_19:
    sub_22F072CEC((uint64_t)*a1, (uint64_t)a1[1], 103, 0);
    return 0;
  }
  sub_22F03A0B4((uint64_t)&v29, (*a1)[1], (uint64_t)a1[2], a2);
  v11 = (uint64_t)*a1;
  v12 = (uint64_t)a1[1];
  v13 = *((_DWORD *)a1 + 6);
  v14 = a1[4];
  v15 = (const llvm::APInt *)(v14 + 1);
  v24 = *((_DWORD *)v14 + 4);
  if (v24 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, v15);
  else
    v23 = *(uint64_t ***)v15;
  v25 = *((_BYTE *)v14 + 20);
  v16 = sub_22F03AA5C(v11, v12, (llvm::APInt *)&v29, v13, &v23, &v29);
  if (v24 >= 0x41 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  if ((_DWORD)v16)
  {
    sub_22F03A0B4((uint64_t)&v26, (*a1)[1], a3, (uint64_t)&v29);
    if (*(_DWORD *)(a2 + 8) >= 0x41u && *(_QWORD *)a2)
      MEMORY[0x2348A0E84](*(_QWORD *)a2, 0x1000C8000313F17);
    *(_QWORD *)a2 = v26;
    *(_DWORD *)(a2 + 8) = v27;
    *(_BYTE *)(a2 + 12) = v28;
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v16;
}

uint64_t sub_22F041B68(_QWORD **a1, llvm::APFloatBase *a2, uint64_t a3)
{
  if (sub_22F01D84C((uint64_t *)a1, a3)
    && sub_22F036150((uint64_t)*a1, (unsigned int *)a1[1], (uint64_t)a1[2], (uint64_t)a2)
    && sub_22F034DBC(*a1, (unsigned int *)a1[1], a2, *((_DWORD *)a1 + 6), (uint64_t)(a1[4] + 1)))
  {
    return sub_22F036150((uint64_t)*a1, (unsigned int *)a1[1], a3, (uint64_t)a2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F041BF0(llvm::APInt *a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;

  v2 = *((_DWORD *)a1 + 2);
  if (!*((_BYTE *)a1 + 12))
  {
    if (v2 > 0x40)
    {
      if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * ((v2 - 1) >> 6)) >> (v2 - 1)) & 1) == 0
        || llvm::APInt::countTrailingZerosSlowCase(a1) != v2 - 1)
      {
        goto LABEL_8;
      }
    }
    else if (*(_QWORD *)a1 != 1 << (v2 - 1))
    {
      goto LABEL_8;
    }
  }
  sub_22E46361C(a1, (uint64_t)&v4);
  if (*((_DWORD *)a1 + 2) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x2348A0E84](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v4;
  *((_DWORD *)a1 + 2) = v5;
  *((_BYTE *)a1 + 12) = 0;
LABEL_8:
  result = sub_22F311024(a1, (uint64_t)&v4);
  if (*((_DWORD *)a1 + 2) >= 0x41u)
  {
    result = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = v4;
  *((_DWORD *)a1 + 2) = v5;
  *((_BYTE *)a1 + 12) = v6;
  return result;
}

BOOL sub_22F041D0C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t inited;
  char v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  unsigned int v30;
  __int128 *v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int *v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t ***v44;
  _BOOL4 v45;
  unsigned int v46;
  void *v47;
  int v48;
  void *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v56;
  uint64_t **v59;
  unsigned int v60;
  char v61;
  _QWORD *v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  _OWORD v76[3];
  void *v77;
  uint64_t v78;
  _QWORD v79[38];

  v79[36] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + 16) - 57 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(v8);
  if (*(_DWORD *)a4 == 8)
  {
    v10 = *(unsigned int *)(v8 + 20);
    v11 = *(_QWORD *)(v8 + 32);
    v12 = v79;
    v77 = v79;
    v78 = 0x400000000;
    if ((_DWORD)v10)
    {
      v13 = 0;
      v14 = 0;
      v56 = v11;
      v15 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
      v16 = 1;
      while (1)
      {
        sub_22EF530AC((uint64_t)&v74, *(_QWORD *)(a4 + 8) + v13);
        sub_22EF530AC((uint64_t)&v69, *(_QWORD *)(a5 + 8) + v13);
        v17 = *(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0);
        v18 = *(_DWORD *)(v17 + 16);
        if (v17)
          v19 = v18 == 11;
        else
          v19 = 0;
        if (v19)
        {
          if (((*(_DWORD *)(v17 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_27;
        }
        else if (v17 && v18 == 44)
        {
          v20 = sub_22F114198(*(_QWORD *)(v17 + 24));
          if ((*(_BYTE *)(v20 + 74) & 1) == 0 && *(_QWORD *)(v20 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v17 + 24)) + 76) & 0x80) != 0)
          {
LABEL_27:
            v24 = sub_22F10E0EC(*v15);
            if (v24)
            {
              v25 = *((_QWORD *)&v75 + 1);
              v26 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v24);
              if (v26 == v25)
                MEMORY[0x23489F2A0](&v67, (char *)&v75 + 8);
              else
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v67, (const llvm::detail::IEEEFloat *)((char *)&v75 + 8));
              v27 = sub_22F034DBC(a1, (unsigned int *)a2, (llvm::APFloatBase *)&v66, a3, (uint64_t)&v70);
              if ((v27 & 1) != 0)
                sub_22F3C4FC0((uint64_t)&v77, (uint64_t)&v66);
              else
                sub_22F072CEC((uint64_t)a1, a2, 103, 0);
              if (v26 == v67)
              {
                sub_22E463170((llvm::APFloatBase *)&v68);
                if (!v27)
                  goto LABEL_124;
              }
              else
              {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v67);
                if (!v27)
                  goto LABEL_124;
              }
            }
            goto LABEL_45;
          }
        }
        else if (v18 != 9)
        {
          goto LABEL_27;
        }
        v21 = sub_22EF6A330(a1[1], v56);
        inited = sub_22F110B50(*v15);
        v23 = inited;
        v63 = v21;
        if (v21 > 0x40)
          inited = llvm::APInt::initSlowCase((llvm::APInt *)&v62);
        else
          v62 = 0;
        v64 = v23;
        if ((a3 - 19) <= 1)
        {
          if ((_DWORD)v74 == 2)
          {
            v30 = DWORD2(v75);
            if (DWORD2(v75) >= 0x41
              && v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75) > 0x40)
            {
              v32 = 1;
            }
            else
            {
              v31 = (__int128 *)v75;
              if (v30 < 0x41)
                v31 = &v75;
              v32 = *(_QWORD *)v31 != 0;
            }
            v43 = v71;
            if (v71 >= 0x41
              && v43 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v70) > 0x40)
            {
              v45 = 1;
            }
            else
            {
              v44 = (uint64_t ***)v70;
              if (v43 < 0x41)
                v44 = &v70;
              v45 = *v44 != 0;
            }
            v39 = v63;
            if (a3 == 19)
              v41 = v32 & v45;
            else
              v41 = v32 | v45;
            if (v63 > 0x40)
              goto LABEL_93;
            if (v63)
              v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
            else
              v42 = 0;
          }
          else
          {
            v33 = *((_QWORD *)&v75 + 1);
            v34 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)inited);
            v35 = (_BYTE *)(*(_QWORD *)&v76[0] + 28);
            if (v34 != v33)
              v35 = (char *)v76 + 12;
            v36 = *v35 & 7;
            v37 = &v73;
            if (v34 == v71)
              v37 = (int *)(v72 + 28);
            v38 = *(_BYTE *)v37 & 7;
            v39 = v63;
            if (a3 == 19)
              v40 = v36 == 3 || v38 == 3;
            else
              v40 = v36 == 3 && v38 == 3;
            v41 = !v40;
            if (v63 > 0x40)
            {
LABEL_93:
              *v62 = v41;
              bzero(v62 + 1, (((unint64_t)(v39 + 63) >> 3) - 8) & 0xFFFFFFF8);
              goto LABEL_94;
            }
            if (v63)
              v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
            else
              v42 = 0;
          }
          v62 = (_QWORD *)(v42 & v41);
        }
        else
        {
          if ((a3 - 9) <= 6)
          {
            if ((_DWORD)v74 == 2)
              __asm { BR              X9 }
            __asm { BR              X9 }
          }
          v60 = v71;
          if (v71 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v59, (const llvm::APInt *)&v70);
          else
            v59 = v70;
          v61 = BYTE4(v71);
          v28 = sub_22F03AA5C((uint64_t)a1, a2, (llvm::APInt *)&v75, a3, &v59, &v62);
          if (v60 >= 0x41 && v59)
            MEMORY[0x2348A0E84](v59, 0x1000C8000313F17);
          if ((v28 & 1) == 0)
          {
            sub_22F072CEC((uint64_t)a1, a2, 103, 0);
            v29 = 0;
            goto LABEL_41;
          }
        }
LABEL_94:
        v46 = v78;
        if (v78 >= HIDWORD(v78))
        {
          v65 = 0;
          v49 = (void *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          v50 = v78;
          LODWORD(v67) = v63;
          if (v63 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v66, (const llvm::APInt *)&v62);
          else
            v66 = v62;
          BYTE4(v67) = v64;
          sub_22F2C4748((uint64_t)v49 + 72 * v50, (uint64_t *)&v66);
          if (v67 >= 0x41 && v66)
            MEMORY[0x2348A0E84](v66, 0x1000C8000313F17);
          sub_22F2C464C((uint64_t)&v77, (uint64_t)v49);
          v51 = v65;
          if (v77 != v79)
            free(v77);
          v77 = v49;
          v48 = v78 + 1;
          HIDWORD(v78) = v51;
        }
        else
        {
          v47 = v77;
          LODWORD(v67) = v63;
          if (v63 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v66, (const llvm::APInt *)&v62);
          else
            v66 = v62;
          BYTE4(v67) = v64;
          sub_22F2C4748((uint64_t)v47 + 72 * v46, (uint64_t *)&v66);
          if (v67 >= 0x41 && v66)
            MEMORY[0x2348A0E84](v66, 0x1000C8000313F17);
          v48 = v78 + 1;
        }
        LODWORD(v78) = v48;
        v29 = 1;
LABEL_41:
        if (v63 >= 0x41 && v62)
          MEMORY[0x2348A0E84](v62, 0x1000C8000313F17);
        if ((v29 & 1) == 0)
        {
LABEL_124:
          if (v69 >= 2)
            sub_22EF53BC0(&v69);
          if (v74 >= 2)
            sub_22EF53BC0(&v74);
          goto LABEL_122;
        }
LABEL_45:
        if (v69 >= 2)
          sub_22EF53BC0(&v69);
        if (v74 >= 2)
          sub_22EF53BC0(&v74);
        v14 = v16 >= v10;
        v13 += 72;
        ++v16;
        if (72 * v10 == v13)
        {
          v12 = v77;
          v52 = v78;
          goto LABEL_119;
        }
      }
    }
    v52 = 0;
LABEL_119:
    *(_QWORD *)&v75 = 0;
    DWORD2(v75) = 0;
    LODWORD(v74) = 8;
    sub_22EF53920((uint64_t)&v74, v12, v52);
    if (*(_DWORD *)a4 >= 2u)
      sub_22EF53BC0((uint64_t *)a4);
    *(_DWORD *)a4 = v74;
    v53 = v76[0];
    *(_OWORD *)(a4 + 8) = v75;
    *(_OWORD *)(a4 + 24) = v53;
    v54 = v76[2];
    *(_OWORD *)(a4 + 40) = v76[1];
    *(_OWORD *)(a4 + 56) = v54;
    v14 = 1;
LABEL_122:
    sub_22E7FCE7C((char **)&v77);
  }
  else
  {
    sub_22F072CEC((uint64_t)a1, a2, 103, 0);
    return 0;
  }
  return v14;
}

uint64_t sub_22F0427F8(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  int v41;
  uint64_t v43;
  int v44;
  unsigned __int8 **v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;

  v87 = *MEMORY[0x24BDAC8D0];
  v41 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v41 != 2)
  {
    if (v41 == 6)
    {
      if (sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69,
                           v70,
                           v71,
                           v72,
                           v73,
                           v74,
                           (uint64_t)v75,
                           v76,
                           v77,
                           v78,
                           v79,
                           v80,
                           v81,
                           v82,
                           v83,
                           v84,
                           v85,
                           v86,
                           v87,
                           v88,
                           v89))
        return sub_22F042BE8(*a1, a2, a1[1]);
      return 0;
    }
    if (v41 == 9)
    {
      if (sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69,
                           v70,
                           v71,
                           v72,
                           v73,
                           v74,
                           (uint64_t)v75,
                           v76,
                           v77,
                           v78,
                           v79,
                           v80,
                           v81,
                           v82,
                           v83,
                           v84,
                           v85,
                           v86,
                           v87,
                           v88,
                           v89))
        return sub_22F042DD0((uint64_t *)*a1, a2, a1[1]);
      return 0;
    }
    if ((v41 - 7) < 2)
    {
      if (sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69,
                           v70,
                           v71,
                           v72,
                           v73,
                           v74,
                           (uint64_t)v75,
                           v76,
                           v77,
                           v78,
                           v79,
                           v80,
                           v81,
                           v82,
                           v83,
                           v84,
                           v85,
                           v86,
                           v87,
                           v88,
                           v89))
        return sub_22F043240(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), a1[1]);
      return 0;
    }
    if (((*(_DWORD *)a2 >> 18) & 0x7Fu) > 0x13)
    {
      if (v41 == 20)
        return sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27,
                 a28,
                 a29,
                 a30,
                 a31,
                 a32,
                 a33,
                 a34,
                 a35,
                 a36,
                 a37,
                 a38,
                 a39);
      if (v41 != 66 && v41 != 61)
      {
LABEL_38:
        sub_22F072CEC(*a1, a2, 103, 0);
        return 0;
      }
      LODWORD(v69) = 0;
      v57 = sub_22F009DC4((uint64_t)&v69, (uint64_t *)*a1, *(_QWORD *)(a2 + 16), a4, a5, a6, a7, a8);
      if ((_DWORD)v57)
        sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v69);
    }
    else
    {
      if (v41 != 3)
      {
        if (v41 == 4)
        {
          v69 = 0;
          v70 = 0;
          v71 = 0;
          LODWORD(v72) = -1;
          v74 = 0;
          v75 = &v77;
          v76 = 0x800000000;
          v84 = 0;
          v85 = 0;
          v58 = *(_QWORD *)(a2 + 16);
          v60 = *a1;
          LOBYTE(v62) = 0;
          v57 = 0;
          if (sub_22F010358((int)&v60, v58, a3, a4, a5, a6, a7, a8, v59, v60, (uint64_t)&v69, v62, v63, v64, v65, v66, v67, v68, 0,
                               0,
                               0,
                               v72,
                               v73,
                               0,
                               (uint64_t)&v77,
                               0x800000000,
                               v77,
                               v78,
                               v79,
                               v80,
                               v81,
                               v82,
                               v83,
                               0,
                               0,
                               v86,
                               v87,
                               v88,
                               v89))
          {
            LODWORD(v60) = 0;
            v57 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v69, (uint64_t)&v60, 0);
            if ((_DWORD)v57)
              sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v60);
            if (v60 >= 2)
              sub_22EF53BC0(&v60);
          }
          if (v75 != &v77)
            free(v75);
          return v57;
        }
        if (v41 != 5)
          goto LABEL_38;
        return sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27,
                 a28,
                 a29,
                 a30,
                 a31,
                 a32,
                 a33,
                 a34,
                 a35,
                 a36,
                 a37,
                 a38,
                 a39);
      }
      LODWORD(v69) = 0;
      LODWORD(v60) = 0;
      v57 = 0;
      if (sub_22F009DC4((uint64_t)&v60, (uint64_t *)*a1, *(_QWORD *)(a2 + 16), a4, a5, a6, a7, a8))
      {
        if (sub_22F02F148((uint64_t *)*a1, (uint64_t)&v69, (uint64_t)&v60, a2))
        {
          sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v69);
          v57 = 1;
        }
        else
        {
          v57 = 0;
        }
      }
      if (v60 >= 2)
        sub_22EF53BC0(&v60);
    }
    if (v69 >= 2)
      sub_22EF53BC0(&v69);
    return v57;
  }
  v43 = *a1;
  sub_22EFF605C(a2);
  v45 = (unsigned __int8 **)sub_22F072D74(v43, v44, 2216, 0);
  if (v45)
  {
    v52 = v45;
    v53 = *v45;
    if (!v53)
    {
      v53 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v52[1]);
      *v52 = v53;
    }
    v53[*v53 + 1] = 2;
    v54 = *v52;
    v55 = **v52;
    *v54 = v55 + 1;
    *(_QWORD *)&v54[8 * v55 + 16] = 2;
  }
  if (!sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), v46, v47, v48, v49, v50, v51, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69,
                        v70,
                        v71,
                        v72,
                        v73,
                        v74,
                        (uint64_t)v75,
                        v76,
                        v77,
                        v78,
                        v79,
                        v80,
                        v81,
                        v82,
                        v83,
                        v84,
                        v85,
                        v86,
                        v87,
                        v88,
                        v89))
    return 0;
  v56 = a1[1];
  *(_DWORD *)(v56 + 24) |= 1u;
  *(_DWORD *)(v56 + 56) = 0;
  return 1;
}

uint64_t sub_22F042BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;

  if ((*(_BYTE *)(a3 + 24) & 1) != 0 || !sub_22F01E1F4(a3, a1, a2, 1u))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (v7 && *(_BYTE *)(v7 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v6 = *(_QWORD *)(v7 + 32);
  }
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_DWORD *)(a3 + 56);
  if (v9 < v8 + (*(_DWORD *)(a3 + 24) >> 4))
    goto LABEL_20;
  v10 = v9 - v8;
  v11 = sub_22F10C2A4(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  if (v11)
  {
    if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3)
      v12 = 0;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  if (v10 == *(_DWORD *)(a3 + 24) >> 4)
    v13 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF0));
  else
    v13 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (v10 - 1)) & 0xFFFFFFFFFFFFFFF8);
  if ((v13[7] & 0x7Fu) - 35 >= 3)
    v13 = 0;
  v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 32))(v13);
  if (v14 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
LABEL_20:
    sub_22EFF605C(a2);
    v16 = (unsigned __int8 **)sub_22F072D74(a1, v15, 2217, 0);
    if (v16)
    {
      v17 = v16;
      sub_22E890258(v16, (uint64_t *)(a3 + 40));
      v18 = *v17;
      if (!*v17)
      {
        v18 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v17[1]);
        *v17 = v18;
      }
      v18[*v18 + 1] = 9;
      v19 = *v17;
      v20 = **v17;
      *v19 = v20 + 1;
      *(_QWORD *)&v19[8 * v20 + 16] = v6;
    }
    return 0;
  }
  return sub_22F02DF34(a1, a2, a3, v12, v10);
}

uint64_t sub_22F042DD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t i;
  _QWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v37;
  uint64_t v38;
  unint64_t *v39;
  BOOL v40;
  uint64_t *v41[6];
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  signed int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD v53[2];
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  _QWORD v59[5];
  void *v60;
  uint64_t v61;
  _DWORD v62[26];
  uint64_t v63;
  __int16 v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v47 = a2;
  v4 = a3 + 24;
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a3 + 144) & 1) != 0 && (*(_BYTE *)(a2 + 1) & 3) == 0)
    return 1;
  sub_22F02DD88((uint64_t)&v44, (uint64_t)a1, a2, a3, 6);
  if (!v46)
    return 0;
  v6 = v47;
  if (sub_22F10DFD8(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    v7 = v44;
    v8 = v45;
    v9 = (uint64_t)a1;
    v10 = v6;
    v11 = a3;
  }
  else
  {
    v43 = sub_22F10AEAC(*(_QWORD *)(**(_QWORD **)(v6 + 24) & 0xFFFFFFFFFFFFFFF0));
    v14 = sub_22EF6477C(a1[1], v43);
    v42 = v14 & 7 | *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
    v41[0] = &v47;
    v41[1] = (uint64_t *)a3;
    v41[2] = a1;
    v41[3] = (uint64_t *)&v44;
    v41[4] = &v43;
    v41[5] = (uint64_t *)&v42;
    v15 = *(_DWORD *)(a3 + 56);
    if (v15 < v45)
    {
LABEL_10:
      v49 = 0;
      v50 = (uint64_t)&v50;
      v51 = &v50;
      v52 = 0;
      v53[0] = 1;
      for (i = 40; i != 168; i += 16)
        *(unint64_t *)((char *)&v49 + i) = 0;
      v55 = v59;
      v56 = v59;
      v57 = 4;
      v58 = 0;
      v59[4] = 0;
      v60 = v62;
      v61 = 0x400000000;
      v62[24] = 0;
      v63 = 0;
      v64 = 257;
      v65 = 0;
      if (sub_22EFB36DC(v44, v43, &v49)
        && (v48 = *(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0,
            v17 = sub_22EFB50E0(v53, &v48),
            ((_DWORD)v17[1] & 1u) + (*((_DWORD *)v17 + 2) >> 1) <= 1)
        && !*((_DWORD *)v51 + 32))
      {
        if (sub_22F02DF34((uint64_t)a1, v47, a3, v44, v45))
        {
          v37 = *((_DWORD *)v51 + 6);
          if (v37)
          {
            v38 = 24 * v37 - 24;
            v39 = (unint64_t *)(v51[2] + 8);
            do
            {
              v13 = sub_22F02EAA0((uint64_t)a1, v47, a3, *v39, *(v39 - 1));
              if ((_DWORD)v13)
                v40 = v38 == 0;
              else
                v40 = 1;
              v38 -= 24;
              v39 += 3;
            }
            while (!v40);
          }
          else
          {
            v13 = 1;
          }
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = sub_22F043320(v41, (uint64_t)&v49);
      }
      if (v60 != v62)
        free(v60);
      if (v56 != v55)
        free(v56);
      if ((v53[0] & 1) == 0)
        llvm::deallocate_buffer((llvm *)v53[1], (void *)(16 * v54));
      sub_22E687D9C(&v50);
      return v13;
    }
    while (1)
    {
      v18 = sub_22F02DED8(v4, v15);
      v19 = (_DWORD *)v18;
      if (v18)
      {
        v20 = v43;
        if (v43)
        {
          if (v18 == v43)
            break;
          v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 32))(v18);
          if (v21 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
            break;
        }
      }
      v22 = v45;
      if (v15 > v45)
      {
        v23 = sub_22F02DED8(v4, v15 - 1);
        v24 = sub_22E46A3A0(v23);
        if (v24 == v25)
          return sub_22F043320(v41, 0);
        v26 = v24;
        v27 = v25;
        while (1)
        {
          v28 = *(_QWORD *)(**(_QWORD **)(v26 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v28 + 8) & 0xF) != 0)
            v28 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v26 + 16));
          v29 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0));
          if (v29)
          {
            v30 = (v29[7] & 0x7F) - 35;
            if (v30 >= 3)
              v29 = 0;
            if (v19)
            {
              if (v30 <= 2)
              {
                if (v29 == v19)
                  break;
                v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 32))(v29);
                if (v31 == (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 32))(v19))
                  break;
              }
            }
          }
          v26 += 24;
          if (v26 == v27)
            return sub_22F043320(v41, 0);
        }
        v32 = *(unsigned __int8 *)(v26 + 12);
        v33 = (v32 >> 2) & 3;
        v34 = v32 & 2;
        if (v33 != 3)
          v34 = v33;
        if (v34)
          return sub_22F043320(v41, 0);
        v22 = v45;
      }
      if (v15-- <= v22)
        goto LABEL_10;
    }
    v10 = v47;
    v9 = (uint64_t)a1;
    v11 = a3;
    v7 = (unint64_t)v19;
    v8 = v15;
  }
  return sub_22F02DF34(v9, v10, v11, v7, v8);
}

uint64_t sub_22F043240(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_22EFFB554((unsigned __int8 *)a2);
  v9 = *(unsigned int *)(a2 + 4);
  if (!(_DWORD)v9)
    return 1;
  v10 = (uint64_t *)v8;
  v11 = 8 * v9;
  do
  {
    v12 = sub_22F10C2A4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
        v13 = 0;
      else
        v13 = v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = sub_22F02EAA0(a1, a2, a4, v13, *v10);
    if (!(_DWORD)v14)
      break;
    v15 = **(_QWORD **)(*v10 + 16);
    a3 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a3 + 8) & 0xF) != 0)
      a3 = (unint64_t)sub_22F10D2BC(v15);
    ++v10;
    v11 -= 8;
  }
  while (v11);
  return v14;
}

BOOL sub_22F043320(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v33;

  v3 = **a1;
  v4 = *(_DWORD *)v3 & 0x300;
  if (!v4)
  {
    sub_22F02D590((uint64_t)a1[1], a1[2][1], *(_QWORD *)(v3 + 8));
    return v4 == 0;
  }
  if (a2)
  {
    if (*(_QWORD *)(a2 + 16) != a2 + 8)
    {
      v33 = *(_QWORD *)(*a1[5] & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
      v5 = sub_22EFB50E0((_DWORD *)(a2 + 32), &v33);
      if (((_DWORD)v5[1] & 1u) + (*((_DWORD *)v5 + 2) >> 1) > 1)
        v6 = 2;
      else
        v6 = 3;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v7 = a1[4];
  v8 = *a1[3];
  v9 = *v7;
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (v8 == v9)
      goto LABEL_16;
    v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v11 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
      goto LABEL_16;
    v8 = *a1[3];
    v9 = *a1[4];
  }
  if ((sub_22EFB35BC(v8, v9) & 1) == 0)
  {
LABEL_17:
    v6 = 1;
    goto LABEL_18;
  }
LABEL_16:
  v6 = 0;
LABEL_18:
  v12 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1[2], **a1, 2208, 0);
  v13 = v12;
  if (v12)
  {
    v14 = *v12;
    if (!*v13)
    {
      v14 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v13[1]);
      *v13 = v14;
    }
    v14[*v14 + 1] = 3;
    v15 = *v13;
    v16 = **v13;
    *v15 = v16 + 1;
    *(_QWORD *)&v15[8 * v16 + 16] = v6;
  }
  v17 = sub_22F02EA54((uint64_t)(a1[1] + 3), a1[2][1]);
  if (v13)
  {
    v18 = v17;
    v19 = *v13;
    if (!*v13)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v13[1]);
      *v13 = v19;
    }
    v19[*v19 + 1] = 9;
    v20 = *v13;
    v21 = **v13;
    *v20 = v21 + 1;
    *(_QWORD *)&v20[8 * v21 + 16] = v18;
  }
  v22 = sub_22EF6477C(a1[2][1], *a1[3]);
  if (v13)
  {
    v23 = v22;
    v24 = *v13;
    if (!*v13)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v13[1]);
      *v13 = v24;
    }
    v24[*v24 + 1] = 9;
    v25 = *v13;
    v26 = **v13;
    *v25 = v26 + 1;
    *(_QWORD *)&v25[8 * v26 + 16] = v23;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(**a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
    v27 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(**a1 + 8));
  if (v13)
  {
    v28 = v27 & 0xFFFFFFFFFFFFFFF0;
    v29 = *v13;
    if (!*v13)
    {
      v29 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v13[1]);
      *v13 = v29;
    }
    v29[*v29 + 1] = 9;
    v30 = *v13;
    v31 = **v13;
    *v30 = v31 + 1;
    *(_QWORD *)&v30[8 * v31 + 16] = v28;
  }
  return v4 == 0;
}

uint64_t sub_22F0435AC(uint64_t *a1, unsigned __int8 *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  int i;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *j;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  BOOL v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[10];

  v69[9] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a1;
  v7 = v6[3];
  if (!v7)
    goto LABEL_23;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_23;
  v9 = *(_WORD *)(v8 + 80);
  if ((v9 & 0x7Eu) - 54 > 3)
    goto LABEL_23;
  v10 = v9 & 0x7F;
  v11 = -40;
  if (v10 <= 70)
  {
    if (v10 <= 0x18)
    {
      if (v10 == 16)
      {
LABEL_7:
        v11 = -48;
        goto LABEL_19;
      }
      if (((1 << v10) & 0x1066) != 0)
        goto LABEL_19;
      if (v10 == 24)
        goto LABEL_7;
    }
    if (v10 == 70)
    {
LABEL_17:
      v11 = -64;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (v10 == 83)
    goto LABEL_19;
  if (v10 == 71)
  {
    v11 = -56;
    goto LABEL_19;
  }
  if (v10 != 81)
  {
LABEL_15:
    if ((v10 - 52) >= 6)
    {
      if ((v10 - 33) >= 5)
        goto LABEL_7;
      goto LABEL_17;
    }
    v11 = -72;
  }
LABEL_19:
  v12 = *(_QWORD *)(v8 + 72 + v11 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
  {
    v13 = (_QWORD *)*v13;
    if (v13)
    {
LABEL_21:
      v14 = v13[8];
      if (v14)
      {
        if (((*(unsigned __int16 *)(v14 + 8) | (*(unsigned __int8 *)(v14 + 10) << 16)) & 0x100000) != 0)
        {
          v59 = *(_QWORD *)(v8 + 40);
          if ((v59 & 7) == 6 && *(_DWORD *)(v59 & 0xFFFFFFFFFFFFFFF8) == 42 && *a2 == 161 && (a2[2] & 0x40) != 0)
          {
            if (((*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6) & 1) != 0)
              return 0;
            v60 = (uint64_t *)(*(_QWORD *)(*a1 + 24) + 128);
            v68 = 0;
            v69[0] = (uint64_t)a3;
            if ((sub_22F246C54(v60, v69, &v68) & 1) != 0)
            {
              v61 = *(_QWORD *)(v68 + 8);
              if (v61)
              {
                v62 = a1[1];
                v63 = *(__int128 **)(*(_QWORD *)(*a1 + 24) + 32);
                v64 = *v63;
                *(_QWORD *)(v62 + 16) = *((_QWORD *)v63 + 2);
                *(_OWORD *)v62 = v64;
                v65 = *(__int128 *)((char *)v63 + 24);
                *(_QWORD *)(v62 + 40) = *((_QWORD *)v63 + 5);
                *(_OWORD *)(v62 + 24) = v65;
                sub_22F016FFC(v62 + 48, (uint64_t)(v63 + 3));
                v66 = v63[8];
                *(_BYTE *)(v62 + 144) = *((_BYTE *)v63 + 144);
                *(_OWORD *)(v62 + 128) = v66;
                result = sub_22F02B8DC(*a1, (uint64_t)a2, a1[1], v61, 0);
                if ((_DWORD)result)
                {
                  v67 = *(_QWORD *)(v61 + 48);
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) & 0xFE) == 0x28)
                  {
                    LODWORD(v69[0]) = 0;
                    if (sub_22F0248D4((uint64_t *)*a1, (uint64_t)a2, v67, a1[1], (uint64_t)v69, 0))
                    {
                      sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v69);
                      if (LODWORD(v69[0]) >= 2)
                        sub_22EF53BC0(v69);
                      return 1;
                    }
                    if (LODWORD(v69[0]) >= 2)
                      sub_22EF53BC0(v69);
                    return 0;
                  }
                  return 1;
                }
                return result;
              }
            }
          }
        }
      }
    }
  }
  else if (v13)
  {
    goto LABEL_21;
  }
LABEL_23:
  if (!sub_22E3CB5E0((uint64_t)a3))
    goto LABEL_29;
  v15 = *(_QWORD *)(*a1 + 24);
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
    goto LABEL_29;
  v17 = a3[2];
  v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  if ((v17 & 4) != 0)
    v18 = *(_QWORD *)v18;
  if (!v18)
    goto LABEL_30;
  v19 = sub_22EFCC008(v16 + 72);
  if (v19 != sub_22EFCC008(v18))
  {
LABEL_29:
    v18 = 0;
LABEL_30:
    v15 = 0;
    goto LABEL_31;
  }
  if ((*((_DWORD *)a3 + 7) & 0x7F) == 0x40)
  {
    v18 = *(_QWORD *)(v15 + 40);
    if (!v18)
      goto LABEL_30;
    v39 = (*((_DWORD *)a3 + 24) >> 20);
    if (v39 == 255)
    {
      v40 = a3[2];
      v41 = v40 & 0xFFFFFFFFFFFFFFF8;
      if ((v40 & 4) != 0)
        v41 = *(_QWORD *)v41;
      for (i = *(_WORD *)(v41 + 8) & 0x7F; i != 83; i = *(_WORD *)(v41 + 8) & 0x7F)
      {
        v43 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v43 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_67;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_66;
          if (i == 16)
            goto LABEL_60;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_73;
          if (i == 24)
          {
LABEL_60:
            v43 = -48;
          }
          else
          {
LABEL_66:
            if (i != 70)
            {
LABEL_67:
              v44 = i - 52;
              if ((i - 33) >= 5)
                v45 = -48;
              else
                v45 = -64;
              if (v44 >= 6)
                v43 = v45;
              else
                v43 = -72;
              goto LABEL_73;
            }
            v43 = -64;
          }
        }
LABEL_73:
        v46 = *(_QWORD *)(v41 + v43 + 16);
        v41 = v46 & 0xFFFFFFFFFFFFFFF8;
        if ((v46 & 4) != 0)
          v41 = *(_QWORD *)v41;
      }
      v39 = sub_22F36F2CC(*(_QWORD *)(v41 + 48), (uint64_t)a3);
    }
    a3 = *(_QWORD **)(*(_QWORD *)(v18 + 120) + 8 * v39);
    v52 = *(_DWORD *)(v15 + 48);
    v53 = *a1 + 24;
    do
    {
      v54 = *(_QWORD *)v53;
      v55 = *(_DWORD *)(*(_QWORD *)v53 + 92);
      v53 = *(_QWORD *)v53 + 16;
    }
    while (v55 > v52);
    v18 = *(unsigned int *)(v15 + 52);
    if (v55 == v52)
      v15 = v54;
    else
      v15 = 0;
  }
  else
  {
    v47 = (_QWORD *)(v15 + 72);
    for (j = *(_QWORD **)(v15 + 72); j; j = (_QWORD *)*j)
    {
      if (j[4] <= (unint64_t)a3)
        ++j;
      else
        v47 = j;
    }
    if (v47 == *(_QWORD **)(v15 + 64))
      goto LABEL_100;
    v49 = (_QWORD *)*v47;
    if (*v47)
    {
      v50 = (_QWORD *)*v47;
      do
      {
        v51 = v50;
        v50 = (_QWORD *)v50[1];
      }
      while (v50);
    }
    else
    {
      v56 = v47;
      do
      {
        v51 = (_QWORD *)v56[2];
        v57 = *v51 == (_QWORD)v56;
        v56 = v51;
      }
      while (v57);
    }
    if ((_QWORD *)v51[4] == a3)
    {
      if (v49)
      {
        do
        {
          v58 = v49;
          v49 = (_QWORD *)v49[1];
        }
        while (v49);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v47[2];
          v57 = *v58 == (_QWORD)v47;
          v47 = v58;
        }
        while (v57);
      }
      v18 = *((unsigned int *)v58 + 10);
    }
    else
    {
LABEL_100:
      v18 = 0;
    }
  }
LABEL_31:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3[6] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) != 0x28)
  {
    if (v15)
    {
      v34 = a1[1];
      v35 = *(unsigned int *)(v15 + 92);
      v36 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3) & 0xFFFFFFFFFFFFFFFCLL;
      v37 = v35 | (v18 << 32);
      v38 = v34;
    }
    else
    {
      v36 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3) & 0xFFFFFFFFFFFFFFFCLL;
      v38 = a1[1];
      v37 = 0;
    }
    sub_22F006C3C(v38, v36, v37, 0);
    return 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 2) == 0)
  {
    v20 = *a1;
    sub_22EFF605C((uint64_t)a2);
    v22 = (unsigned __int8 **)sub_22F072D74(v20, v21, 2227, 1);
    if (v22)
    {
      v23 = v22;
      v24 = *v22;
      if (!v24)
      {
        v24 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v23[1]);
        *v23 = v24;
      }
      v24[*v24 + 1] = 11;
      v25 = *v23;
      v26 = **v23;
      v27 = v26 + 1;
      *v25 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = a3;
      v28 = a3[6];
      v25[v27 + 1] = 9;
      v29 = *v23;
      v30 = **v23;
      *v29 = v30 + 1;
      *(_QWORD *)&v29[8 * v30 + 16] = v28;
    }
    v31 = *a1;
    v32 = *((_DWORD *)a3 + 6);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 64))(*a1))
      sub_22F072E10(v31, v32, 100);
  }
  v69[0] = 0;
  result = sub_22F016A10((uint64_t *)*a1, (uint64_t)a2, a3, v15, v18, v69);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)v69[0] <= 1u)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
        sub_22F072CEC(*a1, (uint64_t)a2, 2283, 0);
      return 0;
    }
    sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v69[0]);
    return 1;
  }
  return result;
}

uint64_t sub_22F043C80(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  if ((**(_BYTE **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) & 0x10) == 0)
    return sub_22F024D28(*a1, a2);
  result = sub_22F0005B0(a2, *(_QWORD *)(*a1 + 8), 1);
  if ((_DWORD)result)
    return sub_22F024D28(*a1, a2);
  return result;
}

uint64_t sub_22F043CE8(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F044D60(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F04153C(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F044D60(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;

  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 < 2)
    return sub_22F0247C4(*a1, a2, a1[1], 1) != 0;
  if (v4 == 32)
  {
    sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
    return sub_22F043CE8(a1, *(_QWORD *)(a2 + 24));
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
}

uint64_t sub_22F044DEC(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = sub_22F044E2C(*(_QWORD *)(*a1 + 24), a2, *(_QWORD *)(a2 + 8), 1u, a1[1]);
  return sub_22F006CB0(v4, *a1, a1[1], a2, 0);
}

unint64_t sub_22F044E2C(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;

  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL | 1;
  v10 = *(unsigned int *)(a1 + 92) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 96)
                                                                        + 4 * *(unsigned int *)(a1 + 104)
                                                                        - 4) << 32);
  sub_22F006C3C(a5, v9, v10, 0);
  return sub_22F0242E0(a1, v9, v10, a2, a3, a4);
}

uint64_t sub_22F044EB0(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  v40 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 == 21)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = sub_22F044E2C(*(_QWORD *)(*a1 + 24), v11, *(_QWORD *)(v11 + 8), 1u, a1[1]);
    return sub_22F006CB0(v12, *a1, a1[1], v11, 0);
  }
  if ((v10 - 7) < 2)
  {
    if (sub_22F043CE8(a1, *(_QWORD *)(a2 + 16)))
      return sub_22F043240(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), a1[1]);
    return 0;
  }
  if (((*(_DWORD *)a2 >> 18) & 0x7Fu) <= 0x13)
  {
    if (v10 != 3)
    {
      if (v10 == 4)
      {
        memset(v25, 0, sizeof(v25));
        LODWORD(v26) = -1;
        v28 = 0;
        v29 = v31;
        v30 = 0x800000000;
        v37 = 0;
        v38 = 0;
        v15 = *(_QWORD *)(a2 + 16);
        v17 = *a1;
        LOBYTE(v18) = 0;
        v14 = 0;
        if (sub_22F010358((int)&v17, v15, a3, a4, a5, a6, a7, a8, v16, v17, (uint64_t)v25, v18, v19, v20, v21, v22, v23, v24, 0,
                             0,
                             0,
                             v26,
                             v27,
                             0,
                             (uint64_t)v31,
                             0x800000000,
                             v31[0],
                             v31[1],
                             v32,
                             v33,
                             v34,
                             v35,
                             v36,
                             0,
                             0,
                             v39,
                             v40,
                             v41,
                             v42))
        {
          LODWORD(v17) = 0;
          v14 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)v25, (uint64_t)&v17, 0);
          if ((_DWORD)v14)
            sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v17);
          if (v17 >= 2)
            sub_22EF53BC0(&v17);
        }
        if (v29 != v31)
          free(v29);
        return v14;
      }
      if (v10 != 5)
        goto LABEL_27;
      return sub_22F043CE8(a1, *(_QWORD *)(a2 + 16));
    }
    LODWORD(v25[0]) = 0;
    LODWORD(v17) = 0;
    v14 = 0;
    if (sub_22F009DC4(&v17, *a1, *(_QWORD *)(a2 + 16)))
    {
      if (sub_22F02F148((uint64_t *)*a1, (uint64_t)v25, (uint64_t)&v17, a2))
      {
        sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v25);
        v14 = 1;
      }
      else
      {
        v14 = 0;
      }
    }
    if (v17 >= 2)
      sub_22EF53BC0(&v17);
LABEL_32:
    if (LODWORD(v25[0]) >= 2)
      sub_22EF53BC0(v25);
    return v14;
  }
  if (v10 == 20)
    return sub_22F043CE8(a1, *(_QWORD *)(a2 + 16));
  if (v10 == 66 || v10 == 61)
  {
    LODWORD(v25[0]) = 0;
    v14 = sub_22F009DC4(v25, *a1, *(_QWORD *)(a2 + 16));
    if ((_DWORD)v14)
      sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v25);
    goto LABEL_32;
  }
LABEL_27:
  sub_22F072CEC(*a1, a2, 103, 0);
  return 0;
}

uint64_t sub_22F0451C8(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;

  if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    return 1;
  if (sub_22F111D3C(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0), a1[1]))
    return 1;
  if (a3)
  {
    v7 = a1[92];
    if (v7 == *a3 && ((a1[92] & 3) == 2 || (~(_BYTE)v7 & 3) == 0 || a1[93] == a3[1]))
      return 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) != 0)
  {
    result = sub_22F072CEC((uint64_t)a1, a2, 2251, 0);
    if (result)
    {
      v8 = (_QWORD *)result;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(unsigned __int8 **)result;
      if (!*(_QWORD *)result)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
        *v8 = v10;
      }
      result = 0;
      v10[*v10 + 1] = 9;
      v11 = (_BYTE *)*v8;
      v12 = *(unsigned __int8 *)*v8;
      *v11 = v12 + 1;
      *(_QWORD *)&v11[8 * v12 + 16] = v9;
    }
  }
  else
  {
    sub_22F072CEC((uint64_t)a1, a2, 103, 0);
    return 0;
  }
  return result;
}

uint64_t sub_22F04530C(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F0467D0(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F047268((uint64_t **)a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F0467D0(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11[9];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[11];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F04530C(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v13 = -1;
    v14 = 0;
    v15 = v17;
    v16 = 0x800000000;
    v17[8] = 0;
    v17[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v12, 1u))
    {
      LODWORD(v11[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v12, (uint64_t)v11, 0);
      if ((_DWORD)v5)
      {
        v6 = a1[2];
        if ((uint64_t *)v6 != v11)
        {
          sub_22EF530AC((uint64_t)&v18, (uint64_t)v11);
          if (*(_DWORD *)v6 >= 2u)
            sub_22EF53BC0((uint64_t *)v6);
          *(_DWORD *)v6 = v18;
          v7 = v19;
          v8 = v20;
          v9 = v21;
          *(_OWORD *)(v6 + 56) = v22;
          *(_OWORD *)(v6 + 40) = v9;
          *(_OWORD *)(v6 + 24) = v8;
          *(_OWORD *)(v6 + 8) = v7;
        }
      }
      if (LODWORD(v11[0]) >= 2)
        sub_22EF53BC0(v11);
    }
    else
    {
      v5 = 0;
    }
    if (v15 != v17)
      free(v15);
  }
  return v5;
}

uint64_t sub_22F0469A8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  _BYTE v60[24];
  __int128 v61;
  void *v62[2];
  _QWORD v63[11];
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = a3;
  if (a3 <= 0xF)
    v7 = *(_QWORD *)(a2 + 8);
  v8 = sub_22EF5C728(v6, v7);
  if (!v8 || (v9 = v8, *(_BYTE *)(v8 + 16) != 2))
  {
    v10 = *a1;
LABEL_6:
    sub_22F072CEC(v10, a2, 103, 0);
    v11 = 0;
    return v11 & 1;
  }
  if (sub_22F3C2220((_QWORD *)a2))
  {
    v13 = sub_22EFFA6B0(**(unsigned __int8 ***)(a2 + 16));
    v10 = *a1;
    if (*v13 == 225)
    {
      sub_22F046E9C(v10, a1[2], (uint64_t)v13, a3);
      v11 = 1;
      return v11 & 1;
    }
    goto LABEL_6;
  }
  LODWORD(v65) = 0;
  v14 = a1[2];
  if (*(_DWORD *)v14 == 9)
  {
    v15 = *(_DWORD *)(v14 + 16);
    if (v15 != *(_DWORD *)(v14 + 20))
    {
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 8) + 72 * v15);
      if (&v65 != v16)
      {
        sub_22EF530AC((uint64_t)v60, (uint64_t)v16);
        if (v65 >= 2)
          sub_22EF53BC0(&v65);
        LODWORD(v65) = *(_DWORD *)v60;
        v66 = *(_OWORD *)&v60[8];
        v67 = v61;
        v68 = *(_OWORD *)v62;
        v69 = *(_OWORD *)v63;
      }
    }
  }
  v17 = (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3;
  v18 = (_QWORD *)(v9 + 40);
  if (*(_DWORD *)(v9 + 48) >= 0x41u)
    v18 = (_QWORD *)*v18;
  v19 = *(_DWORD *)v18;
  v20 = *(_QWORD *)(a2 + 56);
  v21 = (v20 & 2) == 0 && v20 > 3;
  v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if (v21)
    v23 = (unsigned __int8 *)v22;
  else
    v23 = 0;
  if ((_DWORD)v17 != v19 && sub_22F04EE88(v23))
    LODWORD(v17) = v19;
  *(_DWORD *)v60 = 0;
  sub_22EF52F1C((uint64_t)&v60[8], v17, v19);
  v24 = 9;
  *(_DWORD *)v60 = 9;
  v25 = a1[2];
  if (*(_DWORD *)v25 >= 2u)
  {
    sub_22EF53BC0((uint64_t *)a1[2]);
    v24 = *(_DWORD *)v60;
  }
  *(_DWORD *)v25 = v24;
  v26 = *(_OWORD *)&v60[8];
  v27 = v61;
  v28 = *(_OWORD *)v62;
  *(_OWORD *)(v25 + 56) = *(_OWORD *)v63;
  *(_OWORD *)(v25 + 40) = v28;
  *(_OWORD *)(v25 + 24) = v27;
  *(_OWORD *)(v25 + 8) = v26;
  if (v65 >= 2)
  {
    v29 = a1[2];
    v30 = *(unsigned int *)(v29 + 16);
    if ((_DWORD)v30)
    {
      v59 = v17;
      v31 = 0;
      v32 = 72 * v30;
      do
      {
        v33 = *(_QWORD *)(a1[2] + 8);
        if ((uint64_t *)(v33 + v31) != &v65)
        {
          sub_22EF530AC((uint64_t)v60, (uint64_t)&v65);
          if (*(_DWORD *)(v33 + v31) >= 2u)
            sub_22EF53BC0((uint64_t *)(v33 + v31));
          v34 = v33 + v31;
          *(_DWORD *)v34 = *(_DWORD *)v60;
          v35 = *(_OWORD *)&v60[8];
          v36 = v61;
          v37 = *(_OWORD *)v62;
          *(_OWORD *)(v34 + 56) = *(_OWORD *)v63;
          *(_OWORD *)(v34 + 40) = v37;
          *(_OWORD *)(v34 + 24) = v36;
          *(_OWORD *)(v34 + 8) = v35;
        }
        v31 += 72;
      }
      while (v32 != v31);
      v29 = a1[2];
      LODWORD(v30) = *(_DWORD *)(v29 + 16);
      LODWORD(v17) = v59;
    }
    if ((_DWORD)v30 != *(_DWORD *)(v29 + 20))
    {
      v38 = *(_QWORD *)(v29 + 8);
      v39 = (uint64_t *)(v38 + 72 * v30);
      if (v39 != &v65)
      {
        v40 = v30;
        sub_22EF530AC((uint64_t)v60, (uint64_t)&v65);
        if (*(_DWORD *)v39 >= 2u)
          sub_22EF53BC0(v39);
        *(_DWORD *)v39 = *(_DWORD *)v60;
        v41 = v38 + 72 * v40;
        v42 = *(_OWORD *)&v60[8];
        v43 = v61;
        v44 = *(_OWORD *)v62;
        *(_OWORD *)(v41 + 56) = *(_OWORD *)v63;
        *(_OWORD *)(v41 + 40) = v44;
        *(_OWORD *)(v41 + 24) = v43;
        *(_OWORD *)(v41 + 8) = v42;
      }
    }
  }
  v45 = a1[1];
  v46 = *(_OWORD *)v45;
  *(_QWORD *)&v60[16] = *(_QWORD *)(v45 + 16);
  *(_OWORD *)v60 = v46;
  v47 = *(void **)(v45 + 40);
  v61 = *(_OWORD *)(v45 + 24);
  v62[0] = v47;
  v62[1] = &v63[1];
  v63[0] = 0x800000000;
  if (*(_DWORD *)(v45 + 56))
    sub_22F016FFC((uint64_t)&v62[1], v45 + 48);
  v48 = *(_OWORD *)(v45 + 128);
  v64 = *(_BYTE *)(v45 + 144);
  *(_OWORD *)&v63[9] = v48;
  sub_22F029A38((uint64_t)v60, *a1, a2, v9);
  if ((_DWORD)v17)
  {
    v49 = 0;
    v50 = 0;
    v51 = 1;
    v52 = v17;
    while (1)
    {
      v53 = *(_QWORD *)(a2 + 16);
      v54 = (uint64_t)v23;
      if (v50 < ((unint64_t)(*(_QWORD *)(a2 + 24) - v53) >> 3))
        v54 = *(_QWORD *)(v53 + 8 * v50);
      if (!sub_22F006CB0(*(_QWORD *)(a1[2] + 8) + v49, *a1, v60, v54, 0)
        || (sub_22F01DC1C(*a1, v54, (uint64_t)v60, *(_QWORD *)(v9 + 32), 1) & 1) == 0)
      {
        v55 = *a1;
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
        v51 = 0;
        v11 = 0;
        **(_BYTE **)(v55 + 16) |= v56;
        if (!v56)
          break;
      }
      ++v50;
      v49 += 72;
      if (v52 == v50)
        goto LABEL_56;
    }
  }
  else
  {
    v51 = 1;
LABEL_56:
    v57 = a1[2];
    v58 = *(_DWORD *)(v57 + 16);
    if (v58 == *(_DWORD *)(v57 + 20))
      v11 = v51;
    else
      v11 = sub_22F006CB0(*(_QWORD *)(v57 + 8) + 72 * v58, *a1, v60, v23, 0) & v51;
  }
  if (v62[1] != &v63[1])
    free(v62[1]);
  if (v65 >= 2)
    sub_22EF53BC0(&v65);
  return v11 & 1;
}

void sub_22F046E9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  BOOL v40;
  _QWORD *v41;
  unsigned int v42;
  BOOL v43;
  _QWORD *v44;
  unsigned int v45;
  BOOL v46;
  _BYTE v47[56];
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8);
  if (a4 <= 0xF)
    a4 = *(_QWORD *)(a3 + 8);
  v8 = sub_22EF5C728(v7, a4);
  if (*(_BYTE *)(v8 + 16) == 2)
    v9 = v8;
  else
    v9 = 0;
  v10 = (int *)(v9 + 40);
  if (*(_DWORD *)(v9 + 48) >= 0x41u)
    v10 = *(int **)v10;
  v11 = *(_QWORD *)(v9 + 32);
  if (*(_DWORD *)(a3 + 16) >= *v10)
    v12 = *v10;
  else
    v12 = *(_DWORD *)(a3 + 16);
  sub_22EF52F1C((uint64_t)&v47[8], v12, *v10);
  v13 = 9;
  *(_DWORD *)v47 = 9;
  if (*(_DWORD *)a2 >= 2u)
  {
    sub_22EF53BC0((uint64_t *)a2);
    v13 = *(_DWORD *)v47;
  }
  v14 = *(_OWORD *)&v47[24];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&v47[8];
  *(_OWORD *)(a2 + 24) = v14;
  v15 = v48;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v47[40];
  *(_DWORD *)a2 = v13;
  *(_OWORD *)(a2 + 56) = v15;
  v16 = (*(_DWORD *)a3 >> 21) & 7;
  v17 = v16
      * sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_22F110B50(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
  v45 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v44);
  else
    v44 = 0;
  v19 = (uint64_t *)(a2 + 8);
  v46 = v18;
  v20 = *(_DWORD *)(a2 + 16);
  if (v20 != *(_DWORD *)(a2 + 20))
  {
    v21 = v45;
    v42 = v45;
    if (v45 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, (const llvm::APInt *)&v44);
      v18 = v46;
      v21 = v42;
      v22 = v41;
      v20 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      v22 = v44;
      v41 = v44;
    }
    v43 = v18;
    v42 = 0;
    v23 = *v19;
    v24 = v20;
    v25 = (uint64_t *)(*v19 + 72 * v20);
    if (*(_DWORD *)v25 >= 2u)
      sub_22EF53BC0(v25);
    *(_DWORD *)v25 = 2;
    v26 = v23 + 72 * v24;
    *(_QWORD *)(v26 + 8) = v22;
    *(_DWORD *)(v26 + 16) = v21;
    *(_BYTE *)(v26 + 20) = v18;
    if (v42 >= 0x41 && v41)
      MEMORY[0x2348A0E84](v41, 0x1000C8000313F17);
    v20 = *(_DWORD *)(a2 + 16);
  }
  if (v20)
  {
    v27 = 0;
    v28 = 0;
    v29 = a3 + 20;
    v30 = 72 * v20;
    do
    {
      v31 = (*(_DWORD *)a3 >> 21) & 7;
      if (v31 == 4)
      {
        v32 = *(unsigned int *)(v29 + 4 * *(unsigned int *)(a3 + 4) + 4 * v28);
      }
      else if (v31 == 2)
      {
        v32 = *(unsigned __int16 *)(v29 + 4 * *(unsigned int *)(a3 + 4) + 2 * v28);
      }
      else
      {
        v32 = *(unsigned __int8 *)(v29 + 4 * *(unsigned int *)(a3 + 4) + v28);
      }
      v33 = v45;
      if (v45 > 0x40)
      {
        *v44 = v32;
        v35 = v44;
        bzero(v44 + 1, (((unint64_t)(v33 + 63) >> 3) - 8) & 0xFFFFFFF8);
        LODWORD(v33) = v45;
        v39 = v45;
        if (v45 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v38, (const llvm::APInt *)&v44);
          LODWORD(v33) = v39;
          v35 = v38;
          goto LABEL_39;
        }
      }
      else
      {
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
        if (!v45)
          v34 = 0;
        v35 = (_QWORD *)(v34 & v32);
        v44 = (_QWORD *)(v34 & v32);
      }
      v38 = v35;
LABEL_39:
      v36 = v46;
      v40 = v46;
      v39 = 0;
      v37 = *v19 + v27;
      if (*(_DWORD *)v37 >= 2u)
        sub_22EF53BC0((uint64_t *)(*v19 + v27));
      *(_DWORD *)v37 = 2;
      *(_QWORD *)(v37 + 8) = v35;
      *(_DWORD *)(v37 + 16) = v33;
      *(_BYTE *)(v37 + 20) = v36;
      *(_OWORD *)(v37 + 21) = *(_OWORD *)v47;
      *(_OWORD *)(v37 + 37) = *(_OWORD *)&v47[16];
      *(_OWORD *)(v37 + 53) = *(_OWORD *)&v47[32];
      *(_DWORD *)(v37 + 68) = *(_DWORD *)&v47[47];
      if (v39 >= 0x41 && v38)
        MEMORY[0x2348A0E84](v38, 0x1000C8000313F17);
      ++v28;
      v27 += 72;
    }
    while (v30 != v27);
  }
  if (v45 >= 0x41)
  {
    if (v44)
      MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
  }
}

uint64_t sub_22F047268(uint64_t **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17[9];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24[3];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(**a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t *))(**a1 + 40))(*a1) & 1) != 0)
  {
    memset(v18, 0, sizeof(v18));
    LODWORD(v19) = -1;
    v21 = 0;
    v22 = v24;
    v23 = 0x800000000;
    v29 = 0;
    v30 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v32 = *a1;
    BYTE8(v33) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v32, v10, v4, v5, v6, v7, v8, v9, v17[0], v17[1], v17[2], v17[3], v17[4], v17[5], (void *)v17[6], v17[7], v17[8], 0, 0,
                         0,
                         v19,
                         v20,
                         0,
                         (uint64_t)v24,
                         0x800000000,
                         v24[0],
                         v24[1],
                         v24[2],
                         v25,
                         v26,
                         v27,
                         v28,
                         0,
                         0,
                         v31,
                         (uint64_t)v32,
                         (uint64_t)v18,
                         *((void **)&v33 + 1),
                         v34))
    {
      LODWORD(v17[0]) = 0;
      v11 = sub_22F01BB7C(*a1, a2, (uint64_t)v18, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, v17);
      if ((_DWORD)v11)
      {
        v12 = a1[2];
        if (v12 != v17)
        {
          sub_22EF530AC((uint64_t)&v32, (uint64_t)v17);
          if (*(_DWORD *)v12 >= 2u)
            sub_22EF53BC0(v12);
          *(_DWORD *)v12 = (_DWORD)v32;
          v13 = v33;
          v14 = v34;
          v15 = v35;
          *(_OWORD *)(v12 + 7) = v36;
          *(_OWORD *)(v12 + 5) = v15;
          *(_OWORD *)(v12 + 3) = v14;
          *(_OWORD *)(v12 + 1) = v13;
        }
      }
      if (LODWORD(v17[0]) >= 2)
        sub_22EF53BC0(v17);
    }
    if (v22 != v24)
      free(v22);
  }
  else
  {
    sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

uint64_t sub_22F047424(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, unint64_t a5)
{
  unsigned int *v6;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  unsigned int v13;
  char v14;
  int v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _DWORD v65[2];
  _BYTE v66[24];
  __int128 v67;
  __int128 v68;
  _QWORD v69[11];
  char v70;
  uint64_t v71[26];
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v6 = a4;
  v77 = *MEMORY[0x24BDAC8D0];
  v58 = *a4;
  v10 = sub_22EF5C728(*(_QWORD *)(*a1 + 8), a5);
  if (v10 && *(_BYTE *)(v10 + 16) == 2)
  {
    v11 = (_QWORD *)(v10 + 40);
    v55 = v10;
    if (*(_DWORD *)(v10 + 48) >= 0x41u)
      v11 = (_QWORD *)*v11;
    v12 = *(_DWORD *)v11;
    if (v58 < 2 || (v13 = v6[4], v13 == v6[5]))
      LODWORD(v71[0]) = 0;
    else
      sub_22EF530AC((uint64_t)v71, *((_QWORD *)v6 + 1) + 72 * v13);
    sub_22EF52F1C((uint64_t)&v66[8], 0, v12);
    v15 = 9;
    *(_DWORD *)v66 = 9;
    if (*v6 >= 2)
    {
      sub_22EF53BC0((uint64_t *)v6);
      v15 = *(_DWORD *)v66;
    }
    *v6 = v15;
    v16 = v67;
    *(_OWORD *)(v6 + 2) = *(_OWORD *)&v66[8];
    *(_OWORD *)(v6 + 6) = v16;
    v17 = *(_OWORD *)v69;
    *(_OWORD *)(v6 + 10) = v68;
    *(_OWORD *)(v6 + 14) = v17;
    if (v12)
    {
      *(_OWORD *)v66 = *(_OWORD *)a3;
      *(_QWORD *)&v66[16] = *(_QWORD *)(a3 + 16);
      v67 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)&v68 = *(_QWORD *)(a3 + 40);
      *((_QWORD *)&v68 + 1) = &v69[1];
      v69[0] = 0x800000000;
      if (*(_DWORD *)(a3 + 56))
        sub_22F016FFC((uint64_t)&v68 + 8, a3 + 48);
      v18 = v6 + 2;
      *(_OWORD *)&v69[9] = *(_OWORD *)(a3 + 128);
      v70 = *(_BYTE *)(a3 + 144);
      sub_22F029A38((uint64_t)v66, *a1, (uint64_t)a2, v55);
      v19 = 0;
      v20 = 0;
      v65[0] = 1;
      v65[1] = v12;
      v54 = (uint64_t)a2;
      v56 = v12;
      v57 = v6;
      while (1)
      {
        v21 = v65[v20];
        v22 = v6[4];
        if ((_DWORD)v21 == (_DWORD)v22)
          break;
        v59 = v19;
        LODWORD(v60) = 0;
        sub_22EF52F1C((uint64_t)&v61, v21, v12);
        v23 = 9;
        LODWORD(v60) = 9;
        if ((_DWORD)v22)
        {
          v24 = 0;
          do
          {
            v25 = v61 + v24;
            v26 = *(_QWORD *)v18 + v24;
            v27 = *(_DWORD *)(v61 + v24);
            *(_DWORD *)v25 = *(_DWORD *)v26;
            *(_DWORD *)v26 = v27;
            v28 = *(_OWORD *)(v25 + 56);
            v29 = *(_OWORD *)(v25 + 40);
            v30 = *(_OWORD *)(v25 + 24);
            v31 = *(_OWORD *)(v25 + 8);
            v32 = *(_OWORD *)(v26 + 24);
            v33 = *(_OWORD *)(v26 + 40);
            v34 = *(_OWORD *)(v26 + 56);
            *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
            *(_OWORD *)(v25 + 56) = v34;
            *(_OWORD *)(v25 + 40) = v33;
            *(_OWORD *)(v25 + 24) = v32;
            *(_OWORD *)(v26 + 8) = v31;
            *(_OWORD *)(v26 + 24) = v30;
            *(_OWORD *)(v26 + 40) = v29;
            *(_OWORD *)(v26 + 56) = v28;
            v24 += 72;
          }
          while (72 * v22 != v24);
          v23 = v60;
        }
        v35 = *v6;
        *v6 = v23;
        LODWORD(v60) = v35;
        v37 = *((_OWORD *)v18 + 2);
        v36 = *((_OWORD *)v18 + 3);
        v39 = *(_OWORD *)v18;
        v38 = *((_OWORD *)v18 + 1);
        v40 = v62;
        *(_OWORD *)v18 = v61;
        *((_OWORD *)v18 + 1) = v40;
        v41 = v64;
        *((_OWORD *)v18 + 2) = v63;
        *((_OWORD *)v18 + 3) = v41;
        v61 = v39;
        v62 = v38;
        v63 = v37;
        v64 = v36;
        if (v58 >= 2 && v22 < v21)
        {
          v42 = 72 * v22;
          v43 = v21 - v22;
          do
          {
            v44 = *(_QWORD *)v18;
            v45 = (uint64_t *)(*(_QWORD *)v18 + v42);
            if (v45 != v71)
            {
              sub_22EF530AC((uint64_t)&v72, (uint64_t)v71);
              if (*(_DWORD *)v45 >= 2u)
                sub_22EF53BC0(v45);
              v46 = v44 + v42;
              *(_DWORD *)v46 = v72;
              v47 = v73;
              v48 = v74;
              v49 = v75;
              *(_OWORD *)(v46 + 56) = v76;
              *(_OWORD *)(v46 + 40) = v49;
              *(_OWORD *)(v46 + 24) = v48;
              *(_OWORD *)(v46 + 8) = v47;
            }
            v42 += 72;
            --v43;
          }
          while (v43);
        }
        if (v22 >= v21)
        {
          v50 = 0;
        }
        else if (sub_22F047424(a1, v54, v66, *(_QWORD *)v18 + 72 * v22, *(_QWORD *)(v55 + 32)))
        {
          v50 = 1;
          if (sub_22F01DC1C(*a1, v54, (uint64_t)v66, *(_QWORD *)(v55 + 32), 1))
          {
            v51 = 72 * v22 + 72;
            v50 = 1;
            do
            {
              v52 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8);
              if (v52
                && *(_DWORD *)(v52 + 8)
                && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1))
              {
                break;
              }
              v50 = v22 + 1 < v21;
              if ((_DWORD)v21 - 1 == (_DWORD)v22)
                break;
              if (!sub_22F047424(a1, v54, v66, *(_QWORD *)v18 + v51, *(_QWORD *)(v55 + 32)))
                break;
              v51 += 72;
              ++v22;
            }
            while (sub_22F01DC1C(*a1, v54, (uint64_t)v66, *(_QWORD *)(v55 + 32), 1));
          }
        }
        else
        {
          v50 = 1;
        }
        if (v60 >= 2)
          sub_22EF53BC0(&v60);
        v19 = 1;
        v20 = 1;
        v6 = v57;
        v12 = v56;
        if (((v59 | v50) & 1) != 0)
        {
          v14 = !v50;
          goto LABEL_51;
        }
      }
      v14 = 1;
LABEL_51:
      if (*((_QWORD **)&v68 + 1) != &v69[1])
        free(*((void **)&v68 + 1));
    }
    else
    {
      v14 = 1;
    }
    if (LODWORD(v71[0]) >= 2)
      sub_22EF53BC0(v71);
  }
  else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 45)
  {
    *(_QWORD *)v66 = *a1;
    *(_QWORD *)&v66[8] = a3;
    *(_QWORD *)&v66[16] = v6;
    v14 = sub_22F04797C((uint64_t)v66, a2, a5);
  }
  else
  {
    sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_22F04797C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  uint64_t result;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  unint64_t v45;

  v3 = *((_QWORD *)a2 + 2);
  if ((*(_BYTE *)(v3 + 28) & 0x80) != 0)
    return 0;
  v7 = *(_WORD *)(v3 + 80) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_18;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_18;
    }
    if (v7 != 81)
      goto LABEL_13;
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_12;
    if (v7 == 16)
    {
LABEL_5:
      v8 = -48;
      goto LABEL_18;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_5;
LABEL_12:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_18;
      }
LABEL_13:
      v9 = v7 - 52;
      v10 = v7 - 33 >= 5;
      v11 = -48;
      if (!v10)
        v11 = -64;
      if (v9 >= 6)
        v8 = v11;
      else
        v8 = -72;
    }
  }
LABEL_18:
  v12 = *(_QWORD *)(v3 + 72 + v8 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  if ((*((_BYTE *)v14 + 28) & 0x80) != 0)
    return 0;
  v15 = *(_DWORD *)a2;
  v16 = *(_QWORD *)a1;
  sub_22EFF605C((uint64_t)a2);
  if ((*(_BYTE *)(v3 + 82) & 0x80) != 0 && (v18 = v17, !sub_22EFC0EB8(v3)))
  {
    if ((v15 & 0x400000) == 0 && (*(_QWORD *)(v3 + 80) & 0xC0000000) == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16) + 2000) + 1) & 2) != 0)
      {
        v34 = (unsigned __int8 **)sub_22F072D74(v16, v18, 2218, 1);
        if (v34)
        {
          v35 = v34;
          v36 = *v34;
          if (!v36)
          {
            v36 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v35[1]);
            *v35 = v36;
          }
          v36[*v36 + 1] = 2;
          v37 = *v35;
          v38 = **v35;
          *v37 = v38 + 1;
          *(_QWORD *)&v37[8 * v38 + 16] = 0;
          v37[(v38 + 1) + 1] = 2;
          v39 = *v35;
          v40 = **v35;
          *v39 = v40 + 1;
          *(_QWORD *)&v39[8 * v40 + 16] = 1;
          v39[(v40 + 1) + 1] = 11;
          v41 = *v35;
          v42 = **v35;
          *v41 = v42 + 1;
          *(_QWORD *)&v41[8 * v42 + 16] = v3;
        }
        v43 = *(_DWORD *)(v3 + 24);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16))
          sub_22F072E10(v16, v43, 100);
      }
      else
      {
        sub_22F072D74(v16, v18, 103, 0);
      }
    }
    v44 = *(_DWORD **)(a1 + 16);
    if (*v44 <= 1u)
    {
      if ((v15 & 0x400000) != 0)
        return sub_22F047D18((uint64_t *)a1, (uint64_t)a2, a3);
      else
        return sub_22F007880(a3, (uint64_t)v44);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v45 = 0;
    v19 = sub_22EFBF910(v3, (uint64_t *)&v45);
    v20 = *(_QWORD **)a1;
    sub_22EFF605C((uint64_t)a2);
    v21 = v45;
    result = sub_22F028A44(v20, v22, (_QWORD *)v3, v45, v19);
    if (!(_DWORD)result)
      return result;
    v24 = *(_DWORD *)a2;
    if ((v15 & 0x400000) != 0 || (*(_DWORD *)a2 & 0x40000) == 0)
    {
      if ((v15 & 0x400000) != 0)
      {
        result = sub_22F047D18((uint64_t *)a1, (uint64_t)a2, a3);
        if (!(_DWORD)result)
          return result;
        v24 = *a2;
      }
    }
    else
    {
      if (v24 == 119)
        v25 = a2;
      else
        v25 = 0;
      v26 = (unsigned __int8 **)(v25 + 48);
      if (v24 != 119)
        v26 = (unsigned __int8 **)(a2 + 40);
      v27 = *v26;
      if (*v27 == 186)
      {
        v28 = *((_QWORD *)v27 + 2);
        v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v29 = *(_QWORD *)(v29 + 40);
        return sub_22F048114((uint64_t *)a1, (unsigned __int8 *)v29);
      }
    }
    v30 = v24 == 119;
    if (v24 == 119)
      v31 = a2;
    else
      v31 = 0;
    v32 = (uint64_t)(v31 + 48);
    if (v30)
      v33 = v32;
    else
      v33 = (uint64_t)(a2 + 40);
    return sub_22F00B02C((uint64_t)a2, *(__int128 **)(a1 + 8), v33, *((unsigned int *)a2 + 8), v21, *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
  }
}

uint64_t sub_22F047D18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24[9];
  _BYTE v25[24];
  __int128 v26;
  __int128 v27;
  _QWORD v28[11];
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  if ((*(_DWORD *)(v5 + 28) & 0x80) != 0)
    return 0;
  v6 = v5;
  if ((*(_DWORD *)(v5 + 72) & 0xE000) == 0x4000)
  {
    v7 = sub_22EFC3B90(v5);
    if (v7)
    {
LABEL_4:
      if ((*(_BYTE *)(v7 + 68) & 1) == 0 || *(_QWORD *)(v7 + 40))
      {
        v15 = a1[1];
        v16 = *(_OWORD *)v15;
        *(_QWORD *)&v25[16] = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v25 = v16;
        v17 = *(_QWORD *)(v15 + 40);
        v26 = *(_OWORD *)(v15 + 24);
        *(_QWORD *)&v27 = v17;
        *((_QWORD *)&v27 + 1) = &v28[1];
        v28[0] = 0x800000000;
        if (*(_DWORD *)(v15 + 56))
          sub_22F016FFC((uint64_t)&v27 + 8, v15 + 48);
        v18 = *(_OWORD *)(v15 + 128);
        v29 = *(_BYTE *)(v15 + 144);
        *(_OWORD *)&v28[9] = v18;
        if (sub_22F02B8DC(*a1, a2, (uint64_t)v25, v7, 0))
        {
          LODWORD(v24[0]) = 0;
          *(_QWORD *)&v31 = 0;
          v19 = (_DWORD *)operator new();
          *v19 = 0;
          *((_QWORD *)&v31 + 1) = v19;
          LODWORD(v30) = 11;
          sub_22EF53A5C((uint64_t)&v30, v7, (uint64_t)v24);
          v20 = a1[2];
          if (*(_DWORD *)v20 >= 2u)
            sub_22EF53BC0((uint64_t *)a1[2]);
          *(_DWORD *)v20 = v30;
          *(_OWORD *)(v20 + 8) = v31;
          *(_OWORD *)(v20 + 24) = v32;
          *(_OWORD *)(v20 + 40) = v33;
          *(_OWORD *)(v20 + 56) = v34;
          if (LODWORD(v24[0]) >= 2)
            sub_22EF53BC0(v24);
          v21 = *(_QWORD *)(v7 + 48);
          LOBYTE(v30) = -77;
          if (byte_255E04EB3)
            sub_22F3F189C(179);
          *(_QWORD *)&v31 = v21;
          LODWORD(v30) = v30 & 0xFFFC00FF | (((*(_DWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
          v11 = sub_22F006CB0(*(_QWORD *)(a1[2] + 16), *a1, v25, &v30, 0);
        }
        else
        {
          v11 = 0;
        }
        if (*((_QWORD **)&v27 + 1) != &v28[1])
          free(*((void **)&v27 + 1));
        return v11;
      }
      while (1)
      {
        v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v7)
          break;
        if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 <= 2)
          goto LABEL_4;
      }
    }
    LODWORD(v30) = 0;
    *(_QWORD *)&v25[8] = 0;
    v22 = (_DWORD *)operator new();
    *v22 = 0;
    *(_QWORD *)&v25[16] = v22;
    *(_DWORD *)v25 = 11;
    sub_22EF53A5C((uint64_t)v25, 0, (uint64_t)&v30);
    v23 = a1[2];
    if (*(_DWORD *)v23 >= 2u)
      sub_22EF53BC0((uint64_t *)v23);
    *(_DWORD *)v23 = *(_DWORD *)v25;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)&v25[8];
    *(_OWORD *)(v23 + 24) = v26;
    *(_OWORD *)(v23 + 40) = v27;
    *(_OWORD *)(v23 + 56) = *(_OWORD *)v28;
    if (v30 >= 2)
      sub_22EF53BC0(&v30);
    return 1;
  }
  if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 <= 2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 104) + 96), *(_QWORD *)(v5 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v6 + 128) + 20))
    {
      v8 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2287, 0);
      if (v8)
      {
        v9 = v8;
        v10 = *v8;
        if (!v10)
        {
          v10 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
          *v9 = v10;
        }
        v11 = 0;
        v10[*v10 + 1] = 11;
        v12 = *v9;
        v13 = **v9;
        *v12 = v13 + 1;
        *(_QWORD *)&v12[8 * v13 + 16] = v6;
        return v11;
      }
      return 0;
    }
  }
  return sub_22F04A3FC(*a1, a2, v6, a1[1], a1[2]);
}

uint64_t sub_22F048114(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F04BFC4(a1, (uint64_t)a2);
        case 9:
          return sub_22F04A8B4((uint64_t **)a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F047268((uint64_t **)a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F04A3FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE v37[24];
  __int128 v38;
  __int128 v39;
  _OWORD v40[4];
  __int128 v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = a3;
  if (v10)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 128) + 16);
  }
  else
  {
    v11 = 0;
  }
  v12 = sub_22EFC3B90(a3);
  v13 = 0;
  if (v12)
  {
LABEL_8:
    ++v13;
    while (1)
    {
      v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v12)
        break;
      if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_8;
    }
  }
  sub_22EF53024((uint64_t)&v37[8], v11, v13);
  v14 = 10;
  *(_DWORD *)v37 = 10;
  if (*(_DWORD *)a5 >= 2u)
  {
    sub_22EF53BC0((uint64_t *)a5);
    v14 = *(_DWORD *)v37;
  }
  *(_DWORD *)a5 = v14;
  v15 = v38;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)&v37[8];
  *(_OWORD *)(a5 + 24) = v15;
  v16 = v40[0];
  *(_OWORD *)(a5 + 40) = v39;
  *(_OWORD *)(a5 + 56) = v16;
  if ((*(_BYTE *)(a3 + 28) & 0x80) != 0)
    return 0;
  v34 = sub_22F0C975C(*(_QWORD *)(a1 + 8), a3);
  if (v10)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
    v24 = *(_QWORD *)(v10 + 128);
    v25 = *(_QWORD *)(v24 + 24);
    if ((v25 & 1) != 0)
      v25 = sub_22EFCF510(v24);
    v32 = sub_22F24CD30(v10);
    if (v25 != v32)
    {
      v26 = 0;
      while (1)
      {
        v27 = *(_QWORD *)(**(_QWORD **)(v25 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
          v27 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v25 + 16));
        v28 = sub_22F10C2A4(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0));
        if (v28)
        {
          if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3)
            v29 = 0;
          else
            v29 = v28;
        }
        else
        {
          v29 = 0;
        }
        *(_OWORD *)v37 = *(_OWORD *)a4;
        v30 = *(_QWORD *)(a4 + 16);
        v38 = *(_OWORD *)(a4 + 24);
        *(_QWORD *)&v39 = *(_QWORD *)(a4 + 40);
        *(_QWORD *)&v37[16] = v30;
        *((_QWORD *)&v39 + 1) = (char *)v40 + 8;
        *(_QWORD *)&v40[0] = 0x800000000;
        if (*(_DWORD *)(a4 + 56))
          sub_22F016FFC((uint64_t)&v39 + 8, a4 + 48);
        v41 = *(_OWORD *)(a4 + 128);
        v42 = *(_BYTE *)(a4 + 144);
        if (!sub_22F02BA20(a1, a2, (uint64_t)v37, v10, v29, v34))
          break;
        v31 = sub_22F04A3FC(a1, a2, v29, v37, *(_QWORD *)(a5 + 8) + 72 * v26);
        if (*((_OWORD **)&v39 + 1) != (_OWORD *)((char *)v40 + 8))
          free(*((void **)&v39 + 1));
        if (!v31)
          return 0;
        v25 += 24;
        ++v26;
        if (v25 == v32)
          goto LABEL_16;
      }
      if (*((_OWORD **)&v39 + 1) != (_OWORD *)((char *)v40 + 8))
        free(*((void **)&v39 + 1));
      return 0;
    }
  }
LABEL_16:
  v17 = sub_22EFC3B90(a3);
  if (!v17)
    return 1;
  v18 = v17;
  v33 = a2;
LABEL_18:
  if ((*(_BYTE *)(v18 + 68) & 1) != 0 && !*(_QWORD *)(v18 + 40)
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28)
  {
    goto LABEL_59;
  }
  *(_OWORD *)v37 = *(_OWORD *)a4;
  v19 = *(_QWORD *)(a4 + 16);
  v38 = *(_OWORD *)(a4 + 24);
  *(_QWORD *)&v39 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)&v37[16] = v19;
  *((_QWORD *)&v39 + 1) = (char *)v40 + 8;
  *(_QWORD *)&v40[0] = 0x800000000;
  if (*(_DWORD *)(a4 + 56))
    sub_22F016FFC((uint64_t)&v39 + 8, a4 + 48);
  v41 = *(_OWORD *)(a4 + 128);
  v42 = *(_BYTE *)(a4 + 144);
  if (sub_22F02B8DC(a1, v33, (uint64_t)v37, v18, v34))
  {
    v20 = *(_QWORD *)(v18 + 48);
    LOBYTE(v35) = -77;
    if (byte_255E04EB3)
      sub_22F3F189C(179);
    v35 &= 0xFFFC00FF;
    v36 = v20;
    v35 = v35 & 0xFFFFBFFF | (((*(_DWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
    v21 = sub_22EFC306C(v18);
    v22 = sub_22F006CB0(*(_QWORD *)(a5 + 8) + 72 * (*(_DWORD *)(a5 + 16) + v21), a1, v37, &v35, 0) ^ 1;
  }
  else
  {
    v22 = 1;
  }
  if (*((_OWORD **)&v39 + 1) != (_OWORD *)((char *)v40 + 8))
    free(*((void **)&v39 + 1));
  if (!v22)
  {
LABEL_59:
    while (1)
    {
      v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v18)
        return 1;
      if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_18;
    }
  }
  return 0;
}

uint64_t sub_22F04A8B4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  char v29;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char v39;
  llvm::APFloatBase *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  void *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  BOOL v64;
  unsigned __int8 *v65;
  unsigned __int8 *v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  _DWORD *v71;
  uint64_t v72;
  int v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  unsigned __int8 **v82;
  unsigned __int8 **v83;
  unsigned __int8 *v84;
  _BYTE *v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t *v88;
  void *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  void *v96;
  unsigned int v97;
  unsigned int v98;
  void *v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v105;
  void *v106;
  int v107;
  unsigned int v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void *v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  unsigned __int8 **v131;
  unsigned __int8 **v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned __int8 **v143;
  unsigned __int8 **v144;
  unint64_t v145;
  int v146;
  unsigned __int8 **v147;
  unsigned __int8 **v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unsigned __int8 *v157;
  unint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  unsigned __int8 *v170;
  unint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  uint64_t v181;
  BOOL v182;
  BOOL v183;
  _BOOL4 v184;
  _BOOL4 v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202[2];
  void *v203;
  uint64_t v204[4];
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  void *v208[3];
  uint64_t v209[2];
  uint64_t v210;
  void *v211;
  uint64_t v212;
  _BYTE v213[64];
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  unsigned int v217;
  char v218;
  uint64_t v219;
  unsigned int v220;
  char v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[5];

  v226[2] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F0451C8(*a1, a2, 0);
  if (!(_DWORD)v4)
    return 0;
  v191 = (uint64_t)a1;
  v5 = *a1;
  v6 = *(_DWORD *)a2;
  v8 = ((*(_DWORD *)a2 >> 18) & 0x3Eu) - 14 < 0xFFFFFFFC && (*(_DWORD *)a2 & 0xFC0000) != 2359296;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v11 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_DWORD *)(v12 + 16);
  if (v12)
    v14 = v13 == 11;
  else
    v14 = 0;
  if (v14)
  {
    if (((*(_DWORD *)(v12 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_41;
  }
  else if (v12 && v13 == 44)
  {
    v4 = sub_22F114198(*(_QWORD *)(v12 + 24));
    if ((*(_BYTE *)(v4 + 74) & 1) == 0 && *(_QWORD *)(v4 + 128) < 8uLL)
      goto LABEL_41;
  }
  else if (v13 != 9)
  {
    goto LABEL_41;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_DWORD *)(v17 + 16);
  if (v17)
    v19 = v18 == 11;
  else
    v19 = 0;
  if (v19)
  {
    if (((*(_DWORD *)(v17 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_32;
  }
  else
  {
    if (v17 && v18 == 44)
    {
      v4 = sub_22F114198(*(_QWORD *)(v17 + 24));
      if ((*(_BYTE *)(v4 + 74) & 1) == 0 && *(_QWORD *)(v4 + 128) < 8uLL)
        goto LABEL_41;
LABEL_32:
      LODWORD(v208[1]) = 1;
      v208[0] = 0;
      BYTE4(v208[1]) = 0;
      LODWORD(v195) = 1;
      v194 = 0;
      BYTE4(v195) = 0;
      if ((sub_22F0174A0(*(_QWORD *)(a2 + 16), v208, v5) & 1) != 0)
      {
        if (sub_22F0174A0(*(_QWORD *)(a2 + 24), &v194, v5))
        {
          if (BYTE4(v208[1]))
          {
            v20 = llvm::APInt::compare((llvm::APInt *)v208, (const llvm::APInt *)&v194);
            if (v20 < 0)
              goto LABEL_175;
          }
          else
          {
            v20 = llvm::APInt::compareSigned((llvm::APInt *)v208, (const llvm::APInt *)&v194);
            if (v20 < 0)
              goto LABEL_175;
          }
          if (!v20)
            goto LABEL_158;
          goto LABEL_174;
        }
      }
      else
      {
        v21 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5);
        *(_BYTE *)v5[2] |= v21;
        if (v21)
          sub_22F0174A0(*(_QWORD *)(a2 + 24), &v194, v5);
      }
LABEL_39:
      v15 = 0;
LABEL_177:
      if (v195 >= 0x41 && v194)
        MEMORY[0x2348A0E84](v194, 0x1000C8000313F17);
      if (LODWORD(v208[1]) < 0x41)
        return v15;
      v106 = v208[0];
      if (!v208[0])
        return v15;
LABEL_223:
      MEMORY[0x2348A0E84](v106, 0x1000C8000313F17);
      return v15;
    }
    if (v18 == 9)
      goto LABEL_32;
  }
LABEL_41:
  v22 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_DWORD *)(v22 + 16);
  if (v22)
    v24 = v23 == 11;
  else
    v24 = 0;
  v25 = v24;
  if (v24 && ((v23 >> 19) & 0x1FE) - 186 < 0x18)
    goto LABEL_154;
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_DWORD *)(v26 + 16);
  if (v26)
    v28 = v27 == 11;
  else
    v28 = 0;
  v29 = !v28;
  if (v28)
  {
    if (((v27 >> 19) & 0x1FE) - 186 > 0x17)
    {
      if (v23 != 12)
        goto LABEL_67;
LABEL_62:
      LODWORD(v196) = 1;
      v195 = 0;
      BYTE4(v196) = 0;
      LODWORD(v198) = 1;
      v197 = 0;
      BYTE4(v198) = 0;
      v31 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)v4);
      sub_22E99C474((llvm::APFloatBase *)&v200, v31);
      sub_22E99C474((llvm::APFloatBase *)&v203, v31);
      v217 = 1;
      *((_QWORD *)&v216 + 1) = 0;
      v218 = 0;
      v220 = 1;
      v219 = 0;
      v221 = 0;
      sub_22E99C474((llvm::APFloatBase *)&v223, v31);
      sub_22E99C474((llvm::APFloatBase *)&v225, v31);
      if (((*(_DWORD *)a2 >> 18) & 0x3Fu) - 21 <= 0xA)
      {
        memset(v208, 0, sizeof(v208));
        LODWORD(v209[0]) |= 1u;
        v210 = 0;
        v211 = v213;
        v212 = 0x800000000;
        v214 = 0;
        v215 = 0;
        v38 = *(_QWORD *)(a2 + 16);
        LOBYTE(v193) = 0;
        sub_22F010358((int)&v192, v38, v32, v33, v34, v35, v36, v37, v190, v191, (uint64_t)v5, (uint64_t)v208, v193, v194, v195, v196, v197, v198, v199,
          (uint64_t)v200,
          v201,
          v202[0],
          v202[1],
          (uint64_t)v203,
          v204[0],
          v204[1],
          v204[2],
          v204[3],
          v205,
          v206,
          v207,
          0,
          0,
          0,
          v209[0],
          v209[1],
          0,
          v213,
          0x800000000);
        if (v211 != v213)
          free(v211);
LABEL_138:
        v91 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5);
        v90 = 0;
        v15 = 0;
        *(_BYTE *)v5[2] |= v91;
        if (!(_DWORD)v91)
          goto LABEL_204;
LABEL_139:
        v92 = *(_QWORD *)(a2 + 24);
        v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v93 && (v94 = *(_DWORD *)(v93 + 16), v94 == 11) && ((v94 >> 19) & 0x1FE) - 210 <= 7)
        {
          v208[0] = v5;
          v208[1] = &v222;
          v91 = sub_22F032714((uint64_t *)v208, (unsigned __int8 *)v92);
          if ((v90 & v91) == 1)
          {
            LOBYTE(v216) = 0;
            sub_22E99C474((llvm::APFloatBase *)&v208[1], (uint64_t)v223);
            v95 = sub_22E51FDA0(&v225, (uint64_t *)&v208[1]);
            v96 = v208[1];
            if ((void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v95) == v96)
              v91 = (uint64_t)sub_22E463170((llvm::APFloatBase *)&v208[2]);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v208[1]);
LABEL_146:
            if (!(_BYTE)v194)
            {
              v99 = v200;
              v100 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v91);
              if ((void *)v100 == v99)
                v101 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v200, (const llvm::detail::DoubleAPFloat *)&v223);
              else
                v101 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v200, (const llvm::detail::IEEEFloat *)&v223);
              v102 = v101;
              if ((void *)v100 == v203)
                v103 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v203, (const llvm::detail::DoubleAPFloat *)&v225);
              else
                v103 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v203, (const llvm::detail::IEEEFloat *)&v225);
              if (v103 == 1 && v102 == 1)
                v97 = 2;
              else
                v97 = 0;
              goto LABEL_203;
            }
            if (v196 > 0x40)
            {
              if (!llvm::APInt::equalSlowCase((llvm::APInt *)&v195, (const llvm::APInt *)((char *)&v216 + 8)))goto LABEL_149;
            }
            else if (v195 != *((void **)&v216 + 1))
            {
LABEL_149:
              v97 = 0;
LABEL_203:
              v91 = sub_22F04C19C((_QWORD **)&v191, v97, a2);
              v15 = v91;
LABEL_204:
              v111 = v225;
              v112 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v91);
              if (v112 == (void *)v111)
                sub_22E463170((llvm::APFloatBase *)v226);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v225);
              if (v112 == v223)
                sub_22E463170((llvm::APFloatBase *)&v224);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v223);
              if (v220 >= 0x41 && v219)
                MEMORY[0x2348A0E84](v219, 0x1000C8000313F17);
              if (v217 >= 0x41 && *((_QWORD *)&v216 + 1))
                MEMORY[0x2348A0E84](*((_QWORD *)&v216 + 1), 0x1000C8000313F17);
              if (v112 == v203)
                sub_22E463170((llvm::APFloatBase *)v204);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v203);
              if (v112 == v200)
                sub_22E463170((llvm::APFloatBase *)&v201);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v200);
              if (v198 >= 0x41 && v197)
                MEMORY[0x2348A0E84](v197, 0x1000C8000313F17);
              if (v196 < 0x41)
                return v15;
              v106 = v195;
              if (!v195)
                return v15;
              goto LABEL_223;
            }
            if (v198 > 0x40)
              v105 = llvm::APInt::equalSlowCase((llvm::APInt *)&v197, (const llvm::APInt *)&v219);
            else
              v105 = v197 == v219;
            if (v105)
              v97 = 2;
            else
              v97 = 0;
            goto LABEL_203;
          }
        }
        else
        {
          v208[0] = v5;
          v208[1] = &v216;
          v91 = sub_22F01E534((uint64_t *)v208, (unsigned __int8 *)v92);
          if ((v90 & v91) == 1)
            goto LABEL_146;
        }
        v15 = 0;
        goto LABEL_204;
      }
      v63 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v63)
        v64 = *(_DWORD *)(v63 + 16) == 11;
      else
        v64 = 0;
      if (v64)
      {
        v65 = *(unsigned __int8 **)(a2 + 16);
        if (((*(_DWORD *)(v63 + 16) >> 19) & 0x1FEu) - 210 <= 7)
        {
          v208[0] = v5;
          v208[1] = &v199;
          if (!sub_22F032714((uint64_t *)v208, v65))
            goto LABEL_138;
          LOBYTE(v194) = 0;
          sub_22E99C474((llvm::APFloatBase *)&v208[1], (uint64_t)v200);
          v88 = sub_22E51FDA0((uint64_t *)&v203, (uint64_t *)&v208[1]);
          v89 = v208[1];
          if ((void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v88) == v89)
            sub_22E463170((llvm::APFloatBase *)&v208[2]);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v208[1]);
          goto LABEL_137;
        }
      }
      else
      {
        v65 = *(unsigned __int8 **)(a2 + 16);
      }
      v208[0] = v5;
      v208[1] = &v194;
      if ((sub_22F01E534((uint64_t *)v208, v65) & 1) == 0)
        goto LABEL_138;
LABEL_137:
      v90 = 1;
      goto LABEL_139;
    }
LABEL_154:
    LODWORD(v194) = sub_22EF74318(v5[1], v9);
    sub_22F3C4984((uint64_t)v208, 0, &v194);
    LODWORD(v216) = sub_22EF74318(v5[1], v10);
    sub_22F3C4984((uint64_t)&v194, 0, &v216);
    if ((sub_22F038AAC(*(_QWORD *)(a2 + 16), (uint64_t)v208, (uint64_t)v5) & 1) != 0)
    {
      if (sub_22F038AAC(*(_QWORD *)(a2 + 24), (uint64_t)&v194, (uint64_t)v5))
      {
        if ((llvm::APFixedPoint::compare((llvm::APFixedPoint *)v208, (const llvm::APFixedPoint *)&v194) & 0x80000000) == 0)
        {
          if ((int)llvm::APFixedPoint::compare((llvm::APFixedPoint *)v208, (const llvm::APFixedPoint *)&v194) < 1)
          {
LABEL_158:
            v98 = 2;
LABEL_176:
            v15 = sub_22F04C19C((_QWORD **)&v191, v98, a2);
            goto LABEL_177;
          }
LABEL_174:
          v98 = 3;
          goto LABEL_176;
        }
LABEL_175:
        v98 = 1;
        goto LABEL_176;
      }
    }
    else
    {
      v107 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5);
      *(_BYTE *)v5[2] |= v107;
      if (v107)
        sub_22F038AAC(*(_QWORD *)(a2 + 24), (uint64_t)&v194, (uint64_t)v5);
    }
    goto LABEL_39;
  }
  if (v23 == 12 || v27 == 12)
    goto LABEL_62;
LABEL_67:
  if (v25)
  {
    v39 = ((v23 >> 19) & 0x1FE) - 218 < 0xFFFFFFF8 ? 1 : v29;
    if ((v39 & 1) == 0 && ((v27 >> 19) & 0x1FE) - 210 <= 7)
    {
      v40 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v194, 0.0);
      v41 = llvm::APFloatBase::IEEEdouble(v40);
      MEMORY[0x23489F4E0](&v208[1], &v194, v41);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v194);
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v216, 0.0);
      MEMORY[0x23489F4E0](&v195, &v216, v41);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v216);
      v42 = *(unsigned __int8 **)(a2 + 24);
      *(_QWORD *)&v216 = v5;
      *((_QWORD *)&v216 + 1) = v208;
      v44 = sub_22F032714(v43, v42);
      if ((v44 & 1) != 0
        || (v45 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5), *(_BYTE *)v5[2] |= v45, (_DWORD)v45))
      {
        v46 = *(unsigned __int8 **)(a2 + 16);
        *(_QWORD *)&v216 = v5;
        *((_QWORD *)&v216 + 1) = &v194;
        v45 = sub_22F032714((uint64_t *)&v216, v46);
        if ((v44 & v45) == 1)
        {
          v47 = v195;
          if ((void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v45) == v47)
            v48 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v195, (const llvm::detail::DoubleAPFloat *)&v208[1]);
          else
            v48 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)&v208[1]);
          if (*((_BYTE *)v5 + 834) || v48 != 3)
          {
            v49 = v48 + 1;
            goto LABEL_257;
          }
          if ((sub_22E51A864((_DWORD *)a2, *(_QWORD *)(v5[1] + 2000)) & 0xFC) == 4)
          {
            v49 = 4;
LABEL_257:
            v45 = sub_22F04C19C((_QWORD **)&v191, v49, a2);
            v15 = v45;
LABEL_269:
            v121 = v195;
            v122 = (void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v45);
            if (v122 == v121)
              sub_22E463170((llvm::APFloatBase *)&v196);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
            if (v122 == v208[1])
              sub_22E463170((llvm::APFloatBase *)&v208[2]);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v208[1]);
            return v15;
          }
          v45 = sub_22F072CEC((uint64_t)v5, a2, 2211, 0);
        }
      }
      v15 = 0;
      goto LABEL_269;
    }
  }
  if (v23 == 31)
  {
    v208[0] = 0;
    v208[1] = v209;
    v208[2] = (void *)0x400000000;
    v194 = 0;
    v195 = &v197;
    v196 = 0x400000000;
    v67 = *(unsigned __int8 **)(a2 + 16);
    *(_QWORD *)&v216 = v5;
    *((_QWORD *)&v216 + 1) = v208;
    v68 = sub_22F025158((uint64_t)&v216, v67);
    if (((v68 & 1) != 0 || (v69 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5), *(_BYTE *)v5[2] |= v69, v69))
      && (v70 = *(unsigned __int8 **)(a2 + 24),
          *(_QWORD *)&v216 = v5,
          *((_QWORD *)&v216 + 1) = &v194,
          (v68 & sub_22F025158((uint64_t)&v216, v70)) == 1))
    {
      v71 = (_DWORD *)((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFF8);
      if (((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFF8) != 0 && (unint64_t)v194 > 7)
      {
        if ((v71[7] & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          v72 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 32))((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)(v72 + 82) & 0xC) != 0 || sub_22EFD7260(v72))
          {
            sub_22EFF605C(a2);
            v74 = (unsigned __int8 **)sub_22F072D74((uint64_t)v5, v73, 2194, 0);
            if (v74)
            {
              v75 = v74;
              v76 = *v74;
              if (!v76)
              {
                v76 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v75[1]);
                *v75 = v76;
              }
              v76[*v76 + 1] = 11;
              v77 = *v75;
              v78 = **v75;
              *v77 = v78 + 1;
              *(_QWORD *)&v77[8 * v78 + 16] = v71;
            }
          }
        }
        v79 = (_DWORD *)(v194 & 0xFFFFFFFFFFFFFFF8);
        if ((v194 & 0xFFFFFFFFFFFFFFF8) != 0 && (v79[7] & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          v80 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v79 + 32))(v194 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_BYTE *)(v80 + 82) & 0xC) != 0 || sub_22EFD7260(v80))
          {
            sub_22EFF605C(a2);
            v82 = (unsigned __int8 **)sub_22F072D74((uint64_t)v5, v81, 2194, 0);
            if (v82)
            {
              v83 = v82;
              v84 = *v82;
              if (!v84)
              {
                v84 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v83[1]);
                *v83 = v84;
              }
              v84[*v84 + 1] = 11;
              v85 = *v83;
              v86 = **v83;
              *v85 = v86 + 1;
              *(_QWORD *)&v85[8 * v86 + 16] = v79;
            }
          }
        }
        v87 = sub_22F03C1BC((uint64_t)v208, (uint64_t)&v194);
      }
      else
      {
        v87 = v208[0] < (void *)8 && (unint64_t)v194 < 8;
      }
      if (v87)
        v109 = 2;
      else
        v109 = 0;
      v15 = sub_22F04C19C((_QWORD **)&v191, v109, a2);
    }
    else
    {
      v15 = 0;
    }
    if (v195 != &v197)
      free(v195);
    v110 = v208[1];
    if (v208[1] != v209)
      goto LABEL_266;
    return v15;
  }
  if (v23 != 39 || v27 != 39)
  {
    if ((v23 & 0xFF800FF) == 0x6D0000B)
      return sub_22F04C19C((_QWORD **)&v191, 2u, a2);
    else
      return sub_22F04BFC4((uint64_t *)a1, a2);
  }
  memset(v208, 0, sizeof(v208));
  LODWORD(v209[0]) = -1;
  v210 = 0;
  v211 = v213;
  v212 = 0x800000000;
  v214 = 0;
  v215 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  LODWORD(v197) = -1;
  v199 = 0;
  v200 = v202;
  v201 = 0x800000000;
  *((_QWORD *)&v205 + 1) = 0;
  v206 = 0;
  v50 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v216 = v5;
  *((_QWORD *)&v216 + 1) = v208;
  LOBYTE(v217) = 0;
  v51 = sub_22F00C45C(&v216, v50);
  if ((v51 & 1) == 0)
  {
    v52 = (*(uint64_t (**)(uint64_t *))(*v5 + 40))(v5);
    *(_BYTE *)v5[2] |= v52;
    if (!v52)
      goto LABEL_262;
  }
  v53 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v216 = v5;
  *((_QWORD *)&v216 + 1) = &v194;
  LOBYTE(v217) = 0;
  v15 = 0;
  if ((v51 & sub_22F00C45C(&v216, v53)) != 1)
    goto LABEL_263;
  if (!sub_22F03A460((uint64_t)v208, (uint64_t)&v194))
  {
    if ((v6 & 0xF80000) != 0x380000)
    {
      v118 = (uint64_t)v5;
      v119 = a2;
      v120 = 2262;
      goto LABEL_261;
    }
    v113 = (uint64_t)v208[0] & 3;
    if (v113 == 3)
    {
      v182 = ((unint64_t)v208[0] & 0x7FFFFFFF8) != 0;
      if (((uint64_t)v208[0] & 4) != 0)
        v182 = v208[0] > (void *)7;
      if (v182)
        goto LABEL_228;
    }
    else if (v208[0] > (void *)3)
    {
      goto LABEL_228;
    }
    if (v208[2])
      goto LABEL_259;
LABEL_228:
    v114 = v194;
    v115 = v194 & 3;
    if (v115 == 3)
    {
      v183 = (v194 & 0x7FFFFFFF8) != 0;
      if ((v194 & 4) != 0)
        v183 = (unint64_t)v194 > 7;
      if (v183)
        goto LABEL_231;
    }
    else if ((unint64_t)v194 > 3)
    {
      goto LABEL_231;
    }
    if (v196)
      goto LABEL_259;
LABEL_231:
    if (v113 == 2
      || (~LOBYTE(v208[0]) & 3) != 0 && LODWORD(v208[1])
      || v113 != 1
      || ((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFFCLL) == 0
      || *(unsigned __int8 *)((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFFCLL) == 186)
    {
      if (v115 != 2
        && ((~(_BYTE)v194 & 3) == 0 || !(_DWORD)v195)
        && v115 == 1
        && (v194 & 0xFFFFFFFFFFFFFFFCLL) != 0
        && *(unsigned __int8 *)(v194 & 0xFFFFFFFFFFFFFFFCLL) != 186)
      {
        if (v113 == 3)
        {
          if (((uint64_t)v208[0] & 4) != 0)
            v189 = v208[0] > (void *)7;
          else
            v189 = ((unint64_t)v208[0] & 0x7FFFFFFF8) != 0;
          if (v189)
            goto LABEL_259;
          goto LABEL_237;
        }
        if (v208[0] > (void *)3)
          goto LABEL_259;
      }
      if (((uint64_t)v208[0] & 3) == 0 && ((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        if ((sub_22EFBCB70((unint64_t)v208[0] & 0xFFFFFFFFFFFFFFFCLL) & 1) != 0)
          goto LABEL_259;
        v114 = v194;
      }
    }
    else if (v115 == 3)
    {
      v188 = (v194 & 0x7FFFFFFF8) != 0;
      if ((v194 & 4) != 0)
        v188 = (unint64_t)v194 > 7;
      if (v188)
        goto LABEL_259;
    }
    else if ((unint64_t)v194 >= 4)
    {
      goto LABEL_259;
    }
LABEL_237:
    if ((v114 & 3) == 0
      && (v114 & 0xFFFFFFFFFFFFFFFCLL) != 0
      && sub_22EFBCB70(v114 & 0xFFFFFFFFFFFFFFFCLL))
    {
      goto LABEL_259;
    }
    if ((~LOBYTE(v208[0]) & 3) != 0)
    {
      if (v208[0] <= (void *)3)
        goto LABEL_244;
    }
    else
    {
      if (((uint64_t)v208[0] & 4) != 0)
        v184 = v208[0] > (void *)7;
      else
        v184 = ((unint64_t)v208[0] & 0x7FFFFFFF8) != 0;
      if (!v184)
        goto LABEL_244;
    }
    if (!v208[2] && sub_22F03BDD8(v5[1], (uint64_t)&v194))
      goto LABEL_259;
LABEL_244:
    v116 = v194;
    if ((~(_BYTE)v194 & 3) != 0)
    {
      if ((unint64_t)v194 <= 3)
        goto LABEL_249;
    }
    else
    {
      v185 = (v194 & 0x7FFFFFFF8) != 0;
      if ((v194 & 4) != 0)
        v185 = (unint64_t)v194 > 7;
      if (!v185)
        goto LABEL_249;
    }
    if (!v196)
    {
      if (sub_22F03BDD8(v5[1], (uint64_t)v208))
        goto LABEL_259;
      v116 = v194;
    }
LABEL_249:
    if ((~(_BYTE)v116 & 3) != 0)
    {
      if (v116 >= 4)
        goto LABEL_251;
    }
    else
    {
      if ((v116 & 4) != 0)
        v186 = v116 > 7;
      else
        v186 = (v116 & 0x7FFFFFFF8) != 0;
      if (v186)
      {
LABEL_251:
        if (sub_22F03BED8((uint64_t)v208[0]))
          goto LABEL_259;
      }
    }
    if ((~LOBYTE(v208[0]) & 3) != 0)
    {
      if (v208[0] < (void *)4)
      {
LABEL_255:
        v62 = 0;
        goto LABEL_279;
      }
    }
    else
    {
      if (((uint64_t)v208[0] & 4) != 0)
        v187 = v208[0] > (void *)7;
      else
        v187 = ((unint64_t)v208[0] & 0x7FFFFFFF8) != 0;
      if (!v187)
        goto LABEL_255;
    }
    if (!sub_22F03BED8(v194))
      goto LABEL_255;
LABEL_259:
    v118 = (uint64_t)v5;
    v119 = a2;
    v120 = 103;
LABEL_261:
    sub_22F072CEC(v118, v119, v120, 0);
LABEL_262:
    v15 = 0;
    goto LABEL_263;
  }
  if (sub_22F10DFD8(*v11))
  {
    if (v208[2] != (void *)v196 && !v8)
    {
      sub_22EFF605C(a2);
      sub_22F072D74((uint64_t)v5, v55, 2289, 0);
    }
  }
  if ((v209[0] & 1) == 0 && ((v197 | v8) & 1) == 0)
  {
    LOBYTE(v192) = 0;
    v216 = *(_OWORD *)v208;
    v56 = sub_22EF52AD4((unint64_t *)&v216);
    v57 = sub_22F03C074(v56, (uint64_t)v209, (uint64_t)&v197, (char *)&v192);
    if (!(_BYTE)v192 && v212 > v57 && v201 > v57)
    {
      v123 = v57;
      if ((*((_QWORD *)v211 + v57) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if ((*(_DWORD *)((*((_QWORD *)v211 + v57) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 49 >= 3)
          v124 = 0;
        else
          v124 = *((_QWORD *)v211 + v57) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v124 = 0;
      }
      if ((*((_QWORD *)v200 + v57) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if ((*(_DWORD *)((*((_QWORD *)v200 + v57) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 49 >= 3)
          v125 = 0;
        else
          v125 = *((_QWORD *)v200 + v57) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v125 = 0;
      }
      if (v124 | v125)
      {
        if (v124)
        {
          if (v125)
          {
            v126 = *(_QWORD *)(v124 + 16);
            v127 = v126 & 0xFFFFFFFFFFFFFFF8;
            if ((v126 & 4) != 0)
              v127 = *(_QWORD *)v127;
            v128 = (*(_WORD *)(v127 + 8) & 0x7E) - 34;
            if (v127)
              v129 = v127 - 64;
            else
              v129 = 0;
            if (v128 >= 4)
              v129 = 0;
            if ((*(_DWORD *)(v129 + 72) & 0xE000) != 0x4000
              && ((*(_DWORD *)(v125 + 28) ^ *(_DWORD *)(v124 + 28)) & 0x6000) != 0)
            {
              sub_22EFF605C(a2);
              v131 = (unsigned __int8 **)sub_22F072D74((uint64_t)v5, v130, 2261, 0);
              v132 = v131;
              if (v131)
              {
                v176 = *v131;
                if (!*v132)
                {
                  v176 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v132[1]);
                  *v132 = v176;
                }
                v176[*v176 + 1] = 11;
                v177 = *v132;
                v178 = **v132;
                *v177 = v178 + 1;
                *(_QWORD *)&v177[8 * v178 + 16] = v124;
                sub_22F3B3920(v132, (*(_DWORD *)(v124 + 28) >> 13) & 3);
                v179 = *v132;
                if (!*v132)
                {
                  v179 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v132[1]);
                  *v132 = v179;
                }
                v179[*v179 + 1] = 11;
                v180 = *v132;
                v181 = **v132;
                *v180 = v181 + 1;
                *(_QWORD *)&v180[8 * v181 + 16] = v125;
                sub_22F3B3920(v132, (*(_DWORD *)(v125 + 28) >> 13) & 3);
              }
              v133 = *(_QWORD *)(v124 + 16);
              v134 = v133 & 0xFFFFFFFFFFFFFFF8;
              if ((v133 & 4) != 0)
                v134 = *(_QWORD *)v134;
              if (v134)
                v135 = v134 - 64;
              else
                v135 = 0;
              if (v132)
              {
                v136 = (*(_WORD *)(v134 + 8) & 0x7E) - 34;
                v137 = *v132;
                if (!*v132)
                {
                  v137 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v132[1]);
                  *v132 = v137;
                }
                if (v136 >= 4)
                  v138 = 0;
                else
                  v138 = v135;
                v137[*v137 + 1] = 11;
                v139 = *v132;
                v140 = **v132;
                *v139 = v140 + 1;
                *(_QWORD *)&v139[8 * v140 + 16] = v138;
              }
            }
          }
          else
          {
            sub_22EFF605C(a2);
            v147 = (unsigned __int8 **)sub_22F072D74((uint64_t)v5, v146, 2260, 0);
            v148 = v147;
            if ((*((_QWORD *)v200 + v123) & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_DWORD *)((*((_QWORD *)v200 + v123) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 35 >= 3)
                v149 = 0;
              else
                v149 = *((_QWORD *)v200 + v123) & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              v149 = 0;
            }
            if (v147)
            {
              v163 = *v147;
              if (!*v148)
              {
                v163 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v148[1]);
                *v148 = v163;
              }
              v163[*v163 + 1] = 11;
              v164 = *v148;
              v165 = **v148;
              *v164 = v165 + 1;
              *(_QWORD *)&v164[8 * v165 + 16] = v149;
            }
            v166 = *(_QWORD *)(v124 + 16);
            v167 = v166 & 0xFFFFFFFFFFFFFFF8;
            if ((v166 & 4) != 0)
              v167 = *(_QWORD *)v167;
            if (v167)
              v168 = v167 - 64;
            else
              v168 = 0;
            if (v148)
            {
              v169 = (*(_WORD *)(v167 + 8) & 0x7E) - 34;
              v170 = *v148;
              if (!*v148)
              {
                v170 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v148[1]);
                *v148 = v170;
              }
              if (v169 >= 4)
                v171 = 0;
              else
                v171 = v168;
              v170[*v170 + 1] = 11;
              v172 = *v148;
              v173 = **v148;
              *v172 = v173 + 1;
              *(_QWORD *)&v172[8 * v173 + 16] = v171;
              v172[(v173 + 1) + 1] = 11;
              v174 = *v148;
              v175 = **v148;
              *v174 = v175 + 1;
              *(_QWORD *)&v174[8 * v175 + 16] = v124;
            }
          }
        }
        else
        {
          sub_22EFF605C(a2);
          v143 = (unsigned __int8 **)sub_22F072D74((uint64_t)v5, v142, 2260, 0);
          v144 = v143;
          if ((*((_QWORD *)v211 + v123) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((*(_DWORD *)((*((_QWORD *)v211 + v123) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 35 >= 3)
              v145 = 0;
            else
              v145 = *((_QWORD *)v211 + v123) & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v145 = 0;
          }
          if (v143)
          {
            v150 = *v143;
            if (!*v144)
            {
              v150 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v144[1]);
              *v144 = v150;
            }
            v150[*v150 + 1] = 11;
            v151 = *v144;
            v152 = **v144;
            *v151 = v152 + 1;
            *(_QWORD *)&v151[8 * v152 + 16] = v145;
          }
          v153 = *(_QWORD *)(v125 + 16);
          v154 = v153 & 0xFFFFFFFFFFFFFFF8;
          if ((v153 & 4) != 0)
            v154 = *(_QWORD *)v154;
          if (v154)
            v155 = v154 - 64;
          else
            v155 = 0;
          if (v144)
          {
            v156 = (*(_WORD *)(v154 + 8) & 0x7E) - 34;
            v157 = *v144;
            if (!*v144)
            {
              v157 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v144[1]);
              *v144 = v157;
            }
            if (v156 >= 4)
              v158 = 0;
            else
              v158 = v155;
            v157[*v157 + 1] = 11;
            v159 = *v144;
            v160 = **v144;
            *v159 = v160 + 1;
            *(_QWORD *)&v159[8 * v160 + 16] = v158;
            v159[(v160 + 1) + 1] = 11;
            v161 = *v144;
            v162 = **v144;
            *v161 = v162 + 1;
            *(_QWORD *)&v161[8 * v162 + 16] = v125;
          }
        }
      }
      else
      {
        sub_22EFF605C(a2);
        sub_22F072D74((uint64_t)v5, v141, 2259, 0);
      }
    }
  }
  v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)sub_22EF5CDF0(v5[1], *v11);
  v59 = v58 & (unint64_t)v208[2];
  v60 = v58 & v196;
  v61 = v208[0] < (void *)4 || v8;
  if ((v61 & 1) == 0)
  {
    v216 = *(_OWORD *)v208;
    v117 = (uint64_t *)(sub_22EF52AD4((unint64_t *)&v216) & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F1110EC(*v117, 0))
      goto LABEL_259;
    sub_22EF5CCD0(v5[1], *v117, (uint64_t)&v216);
    if (v59 > (unint64_t)v216 || v60 > (unint64_t)v216)
      goto LABEL_259;
  }
  if (v59 >= v60)
  {
    if (v59 > v60)
      v62 = 3;
    else
      v62 = 2;
  }
  else
  {
    v62 = 1;
  }
LABEL_279:
  v15 = sub_22F04C19C((_QWORD **)&v191, v62, a2);
LABEL_263:
  if (v200 != v202)
    free(v200);
  v110 = v211;
  if (v211 != v213)
LABEL_266:
    free(v110);
  return v15;
}

uint64_t sub_22F04BFC4(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11[9];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[11];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F048114(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v13 = -1;
    v14 = 0;
    v15 = v17;
    v16 = 0x800000000;
    v17[8] = 0;
    v17[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v12, 1u))
    {
      LODWORD(v11[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v12, (uint64_t)v11, 0);
      if ((_DWORD)v5)
      {
        v6 = a1[2];
        if ((uint64_t *)v6 != v11)
        {
          sub_22EF530AC((uint64_t)&v18, (uint64_t)v11);
          if (*(_DWORD *)v6 >= 2u)
            sub_22EF53BC0((uint64_t *)v6);
          *(_DWORD *)v6 = v18;
          v7 = v19;
          v8 = v20;
          v9 = v21;
          *(_OWORD *)(v6 + 56) = v22;
          *(_OWORD *)(v6 + 40) = v9;
          *(_OWORD *)(v6 + 24) = v8;
          *(_OWORD *)(v6 + 8) = v7;
        }
      }
      if (LODWORD(v11[0]) >= 2)
        sub_22EF53BC0(v11);
    }
    else
    {
      v5 = 0;
    }
    if (v15 != v17)
      free(v15);
  }
  return v5;
}

uint64_t sub_22F04C19C(_QWORD **a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  unsigned int v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16[2];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[64];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (a2 < 5) & (0x1Au >> a2);
  if (a2 >= 5)
    v6 = 0;
  else
    v6 = 0x403000200uLL >> (8 * a2);
  v7 = sub_22EFB1C68(*(_QWORD *)(*v4 + 8) + 18648, *(_QWORD *)(a3 + 8));
  if (v7[112] == 2)
    v8 = 1;
  else
    v8 = v5;
  if (v8)
    v9 = v6;
  else
    v9 = 1;
  v10 = *((_QWORD *)sub_22F3AA5C4((uint64_t)v7, v9 & 7) + 1);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = -1;
  v22 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v26 = 0;
  v27 = 0;
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = v28 & 0xFD;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v16[1] = 0;
  v17 = v11;
  v18 = 0;
  v19 = 0;
  v28 = v12;
  v16[0] = v11;
  v13 = sub_22EF52AD4(v16);
  v20 = 0;
  v21 = 0;
  v22 = v13;
  LODWORD(v24) = 0;
  v28 &= 0xF2u;
  v26 = 0;
  v27 = 0;
  v14 = 0;
  if (sub_22F0248D4((uint64_t *)*v4, a3, *(_QWORD *)(a3 + 8), (uint64_t)&v17, v4[2], 0))
    v14 = sub_22F006DEC(*v4, *(unsigned int *)(a3 + 4), *(_QWORD *)(a3 + 8), v4[2], 0);
  if (v23 != v25)
    free(v23);
  return v14;
}

uint64_t sub_22F04C34C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned __int8 **v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  __int128 v69;
  __int128 v70;
  uint64_t **v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  char v107;
  char v108;
  char v109;
  int v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  _DWORD *v132;
  unint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD v144[4];
  unint64_t v145;
  char v146;
  _QWORD v147[2];
  uint64_t v148;
  uint64_t v149[4];
  char v150;
  unint64_t v151;
  uint64_t v152[9];
  int v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  void *v162[2];
  _BYTE v163[64];
  __int128 v164;
  char v165;
  _BYTE v166[24];
  __int128 v167;
  __int128 v168;
  _OWORD v169[4];
  __int128 v170;
  char v171;
  uint64_t v172[9];
  uint64_t (**v173)();
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  __int128 *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD v182[2];
  int v183;
  int v184;
  _DWORD *v185;
  uint64_t v186;
  _DWORD v187[4];
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  sub_22EFF605C(a1);
  v15 = v14;
  v16 = v14;
  if (!sub_22F029AD8((_DWORD *)a6, v14))
    return 0;
  v17 = *(_WORD *)(a5 + 80) & 0x7F;
  v18 = -40;
  if (v17 > 0x46)
  {
    if (v17 == 83)
      goto LABEL_18;
    if (v17 == 71)
    {
      v18 = -56;
      goto LABEL_18;
    }
    if (v17 != 81)
    {
LABEL_13:
      v19 = v17 - 52;
      v20 = v17 - 33 >= 5;
      v21 = -48;
      if (!v20)
        v21 = -64;
      if (v19 >= 6)
        v18 = v21;
      else
        v18 = -72;
    }
  }
  else
  {
    if (v17 > 0x18)
      goto LABEL_12;
    if (v17 == 16)
    {
LABEL_5:
      v18 = -48;
      goto LABEL_18;
    }
    if (((1 << v17) & 0x1066) == 0)
    {
      if (v17 == 24)
        goto LABEL_5;
LABEL_12:
      if (v17 == 70)
      {
        v18 = -64;
        goto LABEL_18;
      }
      goto LABEL_13;
    }
  }
LABEL_18:
  v143 = a5 + 72;
  v22 = *(_QWORD *)(a5 + 72 + v18 + 16);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  if ((v22 & 4) != 0)
    v23 = (_QWORD *)*v23;
  if (v23)
    v24 = (unint64_t)(v23 - 8);
  else
    v24 = 0;
  v151 = v24;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
  if (*(_DWORD *)(*(_QWORD *)(v24 + 128) + 20))
  {
    v25 = (unsigned __int8 **)sub_22F072828(a6, v16, 2287, 0, 0);
    if (v25)
    {
      v26 = v25;
      v27 = *v25;
      if (!v27)
      {
        v27 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v26[1]);
        *v26 = v27;
      }
      v28 = 0;
      v27[*v27 + 1] = 11;
      v29 = *v26;
      v30 = **v26;
      *v29 = v30 + 1;
      *(_QWORD *)&v29[8 * v30 + 16] = v24;
      return v28;
    }
    return 0;
  }
  v142 = a1;
  v32 = *(_QWORD *)a2;
  v33 = *((_QWORD *)a2 + 1);
  v137 = a5;
  v34 = *((_QWORD *)a2 + 6);
  v140 = a7;
  v141 = (uint64_t)(a2 + 3);
  v35 = *((unsigned int *)a2 + 14);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v24 + 104) + 96), *(_QWORD *)(v24 + 104));
  v36 = *(_DWORD *)(*(_QWORD *)(v24 + 128) + 16);
  v148 = a6;
  v149[0] = v32;
  v149[1] = v33;
  v149[2] = v34;
  v149[3] = v35;
  if (v36)
    v37 = 1;
  else
    v37 = 2;
  v173 = (uint64_t (**)())v32;
  v174 = v33;
  v175 = v34;
  v176 = v35;
  LODWORD(v177) = v37;
  sub_22F02BBE0((uint64_t)v166, a6 + 768, (uint64_t)&v173);
  v150 = v166[16];
  v173 = &off_24FAC5960;
  v174 = a6;
  v175 = *(_QWORD *)(a6 + 24);
  v176 = v137;
  v139 = a2;
  v177 = a2;
  v178 = a3;
  v179 = a4;
  v180 = 0;
  v182[1] = 0;
  v182[0] = 0;
  v181 = v182;
  v39 = *(_DWORD *)(a6 + 32);
  v38 = *(_DWORD *)(a6 + 36);
  v183 = v15;
  v184 = v38;
  v185 = v187;
  v186 = 0x200000001;
  v187[0] = 1;
  v187[2] = 1;
  v189 = 0;
  v188 = 0;
  v190 = 0;
  *(_QWORD *)(a6 + 24) = &v173;
  *(_DWORD *)(a6 + 32) = v39 + 1;
  *(_DWORD *)(a6 + 36) = v38 + 1;
  LODWORD(v172[0]) = 0;
  v40 = *(_QWORD *)(v137 + 80) & 0x1FFFFF0000000000;
  v147[0] = v172;
  v147[1] = 0;
  if (v40 != 0x10000000000
    || (v41 = sub_22EFD7ED0(v137), (**(_BYTE **)v41 & 6) != 0)
    || (*(_WORD *)(*(_QWORD *)v41 + 28) & 1) == 0)
  {
    v42 = (uint64_t *)v140;
    if ((*(_BYTE *)(v137 + 83) & 2) == 0)
      goto LABEL_113;
    *(_DWORD *)v166 = 0;
    if (!sub_22EFD8088(v137, (int *)v166))
      goto LABEL_113;
    v43 = *(_WORD *)(v137 + 80) & 0x7F;
    v44 = -40;
    if (v43 > 0x46)
    {
      v45 = v143;
      switch(v43)
      {
        case 'S':
          goto LABEL_63;
        case 'G':
          v44 = -56;
          goto LABEL_63;
        case 'Q':
LABEL_63:
          v50 = *(_QWORD *)(v45 + v44 + 16);
          v51 = (_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8);
          if ((v50 & 4) != 0)
            v51 = (_QWORD *)*v51;
          if (v51)
            v52 = v51 - 8;
          else
            v52 = 0;
          if ((v52[9] & 0xE000) == 0x4000)
          {
LABEL_69:
            v53 = -40;
            if ((int)v43 > 70)
            {
              switch(v43)
              {
                case 'S':
                  goto LABEL_89;
                case 'G':
                  v53 = -56;
                  goto LABEL_89;
                case 'Q':
                  goto LABEL_89;
              }
            }
            else
            {
              if (v43 <= 0x18)
              {
                if (v43 == 16)
                  goto LABEL_72;
                if (((1 << v43) & 0x1066) != 0)
                  goto LABEL_89;
                if (v43 == 24)
                {
LABEL_72:
                  v53 = -48;
LABEL_89:
                  v56 = *(_QWORD *)(v45 + v53 + 16);
                  v57 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8);
                  if ((v56 & 4) != 0)
                    v57 = (_QWORD *)*v57;
                  if (v57)
                    v58 = v57 - 8;
                  else
                    v58 = 0;
                  v28 = sub_22F04D514((uint64_t *)a6, **(_QWORD **)(v137 + 120), v142, v140, (v58[9] & 0xE000) == 0x4000);
                  goto LABEL_254;
                }
              }
              if (v43 == 70)
              {
LABEL_87:
                v53 = -64;
                goto LABEL_89;
              }
            }
            if (v43 - 52 < 6)
            {
              v53 = -72;
              goto LABEL_89;
            }
            if (v43 - 33 < 5)
              goto LABEL_87;
            goto LABEL_72;
          }
          if ((*(_BYTE *)(v137 + 82) & 0x80) == 0)
          {
LABEL_113:
            if (*(_DWORD *)v140 <= 1u)
            {
              if ((*(_DWORD *)(v151 + 72) & 0xE000) == 0x4000)
              {
                LODWORD(v158) = 0;
                *(_QWORD *)&v166[8] = 0;
                v62 = (_DWORD *)operator new();
                *v62 = 0;
                *(_QWORD *)&v166[16] = v62;
                *(_DWORD *)v166 = 11;
                sub_22EF53A5C((uint64_t)v166, 0, (uint64_t)&v158);
                if (*(_DWORD *)v140 >= 2u)
                  sub_22EF53BC0((uint64_t *)v140);
                *(_DWORD *)v140 = *(_DWORD *)v166;
                v63 = v167;
                *(_OWORD *)(v140 + 8) = *(_OWORD *)&v166[8];
                *(_OWORD *)(v140 + 24) = v63;
                v64 = v169[0];
                *(_OWORD *)(v140 + 40) = v168;
                *(_OWORD *)(v140 + 56) = v64;
                if (v158 >= 2)
                  sub_22EF53BC0((uint64_t *)&v158);
              }
              else
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v151 + 104) + 96), *(_QWORD *)(v151 + 104));
                v65 = *(_DWORD *)(*(_QWORD *)(v151 + 128) + 16);
                v66 = sub_22EFC3B90(v151);
                v67 = 0;
                if (v66)
                {
LABEL_120:
                  ++v67;
                  while (1)
                  {
                    v66 = *(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF8;
                    if (!v66)
                      break;
                    if ((*(_DWORD *)(v66 + 28) & 0x7Fu) - 49 < 3)
                      goto LABEL_120;
                  }
                }
                *(_DWORD *)v166 = 0;
                sub_22EF53024((uint64_t)&v166[8], v65, v67);
                v68 = 10;
                *(_DWORD *)v166 = 10;
                if (*(_DWORD *)v140 >= 2u)
                {
                  sub_22EF53BC0((uint64_t *)v140);
                  v68 = *(_DWORD *)v166;
                }
                *(_DWORD *)v140 = v68;
                v69 = v167;
                *(_OWORD *)(v140 + 8) = *(_OWORD *)&v166[8];
                *(_OWORD *)(v140 + 24) = v69;
                v70 = v169[0];
                *(_OWORD *)(v140 + 40) = v168;
                *(_OWORD *)(v140 + 56) = v70;
              }
            }
            if ((*(_BYTE *)(v151 + 28) & 0x80) == 0)
            {
              v135 = sub_22F0C975C(*(_QWORD *)(a6 + 8), v151);
              v133 = *(unsigned int *)(a6 + 216);
              sub_22F0270D4(*(_DWORD **)(a6 + 24));
              v146 = 1;
              v144[3] = v140;
              v145 = sub_22EFC3B90(v151);
              v144[0] = &v145;
              v144[1] = &v151;
              v144[2] = &v146;
              v71 = (uint64_t **)sub_22EFD7ED0(v137);
              v138 = sub_22EFD7ED0(v137) + 8 * ((*(_QWORD *)(v137 + 80) >> 40) & 0x1FFFFFLL);
              if (v71 != (uint64_t **)v138)
              {
                v72 = 0;
                v73 = (__int128 *)((char *)a2 + 24);
                v74 = a2 + 8;
                v134 = (_OWORD *)(v140 + 8);
                do
                {
                  v75 = *v71;
                  *(_OWORD *)v166 = *a2;
                  v76 = *((_QWORD *)a2 + 2);
                  v167 = *v73;
                  *(_QWORD *)&v168 = *((_QWORD *)v73 + 2);
                  *(_QWORD *)&v166[16] = v76;
                  *((_QWORD *)&v168 + 1) = (char *)v169 + 8;
                  *(_QWORD *)&v169[0] = 0x800000000;
                  v77 = *((_DWORD *)a2 + 14);
                  if (v77)
                  {
                    sub_22F016FFC((uint64_t)&v168 + 8, v141);
                    v77 = *((_DWORD *)a2 + 14);
                  }
                  v170 = *v74;
                  v171 = *((_BYTE *)v74 + 16);
                  v158 = *a2;
                  v78 = *((_QWORD *)a2 + 2);
                  v160 = *v73;
                  v161 = *((_QWORD *)v73 + 2);
                  v159 = v78;
                  v162[0] = v163;
                  v162[1] = (void *)0x800000000;
                  if (v77)
                    sub_22F016FFC((uint64_t)v162, v141);
                  v164 = *v74;
                  v165 = *((_BYTE *)v74 + 16);
                  v79 = *v75;
                  v80 = *v75 & 6;
                  if (v80)
                  {
                    v81 = v79 & 0xFFFFFFFFFFFFFFF8;
                    if (v80 == 2 && v81)
                    {
                      if (!sub_22F02B8DC(a6, v75[1], (uint64_t)v166, v79 & 0xFFFFFFFFFFFFFFF8, v135))
                        goto LABEL_211;
                      if ((*(_DWORD *)(v151 + 72) & 0xE000) == 0x4000)
                      {
                        LODWORD(v152[0]) = 0;
                        *(_QWORD *)&v154 = 0;
                        v82 = (_DWORD *)operator new();
                        *v82 = 0;
                        *((_QWORD *)&v154 + 1) = v82;
                        v153 = 11;
                        sub_22EF53A5C((uint64_t)&v153, v81, (uint64_t)v152);
                        if (*(_DWORD *)v42 >= 2u)
                          sub_22EF53BC0(v42);
                        *(_DWORD *)v42 = v153;
                        v83 = v155;
                        *v134 = v154;
                        *(_OWORD *)(v140 + 24) = v83;
                        v84 = v157;
                        *(_OWORD *)(v140 + 40) = v156;
                        *(_OWORD *)(v140 + 56) = v84;
                        if (LODWORD(v152[0]) >= 2)
                          sub_22EF53BC0(v152);
                        v85 = v42[2];
                      }
                      else
                      {
                        sub_22F04D6AC((uint64_t)v144, v81);
                        v85 = v42[1] + 72 * (*((_DWORD *)v42 + 4) + sub_22EFC306C(v81));
                      }
                      goto LABEL_191;
                    }
                  }
                  else
                  {
                    v81 = v79 & 0xFFFFFFFFFFFFFFF8;
                    if ((*((_WORD *)v75 + 14) & 1) == 0)
                    {
                      v86 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v81 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
                      v87 = v75[1];
                      v88 = v151;
                      v89 = sub_22F10C2A4(*v86);
                      if (v89)
                      {
                        if ((*(_DWORD *)(v89 + 28) & 0x7Fu) - 35 >= 3)
                          v90 = 0;
                        else
                          v90 = v89;
                      }
                      else
                      {
                        v90 = 0;
                      }
                      v110 = sub_22F02BA20(a6, v87, (uint64_t)v166, v88, v90, v135);
                      if ((v110 & 1) == 0)
                      {
                        v109 = 0;
                        v72 = (v72 + v110);
LABEL_217:
                        v74 = v139 + 8;
                        goto LABEL_218;
                      }
                      v81 = 0;
                      v85 = *(_QWORD *)v134 + 72 * v72;
                      v72 = (v72 + v110);
                      goto LABEL_191;
                    }
                  }
                  if (v80 == 4)
                    v91 = v81;
                  else
                    v91 = 0;
                  v92 = *(unsigned int *)(v91 + 64);
                  if ((_DWORD)v92)
                  {
                    v136 = v72;
                    v93 = 0;
                    v94 = *(_QWORD **)(v91 + 56);
                    v85 = (uint64_t)v42;
                    v95 = v92 - 1;
                    v96 = 8 * v92;
                    while (1)
                    {
                      v81 = v94[v93 / 8];
                      v97 = *(_QWORD *)(v81 + 16);
                      v98 = v97 & 0xFFFFFFFFFFFFFFF8;
                      if ((v97 & 4) != 0)
                        v98 = *(_QWORD *)v98;
                      v99 = (*(_WORD *)(v98 + 8) & 0x7E) - 34;
                      if (v98)
                        v100 = v98 - 64;
                      else
                        v100 = 0;
                      if (v99 >= 4)
                        v101 = 0;
                      else
                        v101 = v100;
                      if (*(_DWORD *)v85 < 2u || *(_DWORD *)v85 == 11 && *(_QWORD *)(v85 + 8) != v81)
                      {
                        if ((*(_DWORD *)(v101 + 72) & 0xE000) == 0x4000)
                        {
                          LODWORD(v152[0]) = 0;
                          *(_QWORD *)&v154 = 0;
                          v102 = (_DWORD *)operator new();
                          *v102 = 0;
                          *((_QWORD *)&v154 + 1) = v102;
                          v153 = 11;
                          sub_22EF53A5C((uint64_t)&v153, v81, (uint64_t)v152);
                          if (*(_DWORD *)v85 >= 2u)
                            sub_22EF53BC0((uint64_t *)v85);
                          *(_DWORD *)v85 = v153;
                          v103 = v154;
                          v104 = v155;
                          v105 = v156;
                          *(_OWORD *)(v85 + 56) = v157;
                          *(_OWORD *)(v85 + 40) = v105;
                          *(_OWORD *)(v85 + 24) = v104;
                          *(_OWORD *)(v85 + 8) = v103;
                          if (LODWORD(v152[0]) >= 2)
                            sub_22EF53BC0(v152);
                        }
                        else
                        {
                          v106 = sub_22EF6477C(*(_QWORD *)(a6 + 8), v101);
                          v107 = sub_22F007880(v106, v85);
                          if (v146)
                            v108 = v107;
                          else
                            v108 = 0;
                          v146 = v108;
                        }
                      }
                      if (v81 == v94[v95])
                      {
                        v158 = *(_OWORD *)v166;
                        v159 = *(_QWORD *)&v166[16];
                        v160 = v167;
                        v161 = v168;
                        sub_22F016FFC((uint64_t)v162, (uint64_t)&v168 + 8);
                        v164 = v170;
                        v165 = v171;
                      }
                      if (!sub_22F02B8DC(a6, v75[1], (uint64_t)v166, v81, 0))
                        break;
                      if ((*(_DWORD *)(v101 + 72) & 0xE000) == 0x4000)
                      {
                        v85 = *(_QWORD *)(v85 + 16);
                      }
                      else
                      {
                        if (v81 == *v94 && (*(_DWORD *)(v151 + 72) & 0xE000) != 0x4000)
                          sub_22F04D6AC((uint64_t)v144, v81);
                        v85 = *(_QWORD *)(v85 + 8) + 72 * (*(_DWORD *)(v85 + 16) + sub_22EFC306C(v81));
                      }
                      v93 += 8;
                      if (v96 == v93)
                      {
                        a2 = v139;
                        v42 = (uint64_t *)v140;
                        v72 = v136;
                        v73 = (__int128 *)((char *)v139 + 24);
                        goto LABEL_191;
                      }
                    }
                    v109 = 0;
                    a2 = v139;
                    v42 = (uint64_t *)v140;
                    v72 = v136;
                    goto LABEL_216;
                  }
                  v81 = 0;
                  v85 = (uint64_t)v42;
LABEL_191:
                  v111 = (_DWORD *)v75[1];
                  if ((*v111 & 0x10000) != 0)
                  {
                    **(_BYTE **)(a6 + 16) = 1;
                    v74 = v139 + 8;
                    if (*(_DWORD *)(a6 + 840) != 3
                      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6) & 1) == 0
                      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6) & 1) == 0)
                    {
LABEL_211:
                      v109 = 0;
                      goto LABEL_218;
                    }
                  }
                  else
                  {
                    v112 = v72;
                    v113 = *(_QWORD *)(a6 + 24);
                    v114 = *(_QWORD *)(v113 + 32);
                    if (*v111 == 121)
                      *(_QWORD *)(v113 + 32) = &v158;
                    v115 = *(_DWORD *)(a6 + 216);
                    sub_22F0270D4((_DWORD *)v113);
                    if (!sub_22F006CB0(v85, a6, v166, v111, 0)
                      || v81 && (*(_BYTE *)(v81 + 68) & 1) != 0 && !sub_22F01CBE4(a6, (uint64_t)v111, (int *)v85, v81))
                    {
                      v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 40))(a6);
                      **(_BYTE **)(a6 + 16) |= v116;
                      if (!v116)
                      {
                        if (v115 != -1)
                          sub_22F05B164(a6, 0, v115);
                        v109 = 0;
                        --*(_DWORD *)(*(_QWORD *)(a6 + 24) + 104);
                        *(_QWORD *)(v113 + 32) = v114;
                        a2 = v139;
                        v42 = (uint64_t *)v140;
                        v72 = v112;
LABEL_216:
                        v73 = (__int128 *)((char *)v139 + 24);
                        goto LABEL_217;
                      }
                      v146 = 0;
                    }
                    if (v115 != -1)
                      sub_22F05B164(a6, 0, v115);
                    --*(_DWORD *)(*(_QWORD *)(a6 + 24) + 104);
                    *(_QWORD *)(v113 + 32) = v114;
                    a2 = v139;
                    v42 = (uint64_t *)v140;
                    v72 = v112;
                    v73 = (__int128 *)((char *)v139 + 24);
                    v74 = v139 + 8;
                  }
                  if ((*(_BYTE *)v75 & 6) == 0 && (*((_WORD *)v75 + 14) & 1) == 0)
                  {
                    v117 = v151;
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v151 + 104) + 96), *(_QWORD *)(v151 + 104));
                    if ((_DWORD)v72 == *(_DWORD *)(*(_QWORD *)(v117 + 128) + 16))
                      *(_DWORD *)sub_22F02D290(v148 + 768, (uint64_t)v149) = 2;
                  }
                  v109 = 1;
LABEL_218:
                  if (v162[0] != v163)
                    free(v162[0]);
                  if (*((_OWORD **)&v168 + 1) != (_OWORD *)((char *)v169 + 8))
                    free(*((void **)&v168 + 1));
                  if ((v109 & 1) == 0)
                    goto LABEL_244;
                  ++v71;
                }
                while (v71 != (uint64_t **)v138);
              }
              if ((*(_DWORD *)(v151 + 72) & 0xE000) != 0x4000)
              {
                v118 = v145;
                if (v145)
                {
LABEL_228:
                  if ((*(_BYTE *)(v118 + 68) & 1) == 0 || *(_QWORD *)(v118 + 40))
                  {
                    v119 = *(_QWORD *)(v118 + 48);
                    v120 = sub_22EFC306C(v118);
                    v121 = sub_22F007880(v119, v42[1] + 72 * (*((_DWORD *)v42 + 4) + v120));
                    if (v146)
                      v122 = v121;
                    else
                      v122 = 0;
                    v146 = v122;
                    v118 = v145;
                  }
                  while (1)
                  {
                    v118 = *(_QWORD *)(v118 + 8) & 0xFFFFFFFFFFFFFFF8;
                    if (!v118)
                      break;
                    if ((*(_DWORD *)(v118 + 28) & 0x7Fu) - 49 <= 2)
                    {
                      v145 = v118;
                      goto LABEL_228;
                    }
                  }
                  v145 = 0;
                }
              }
              *(_DWORD *)sub_22F02D290(v148 + 768, (uint64_t)v149) = 3;
              if (v146)
              {
                *(_QWORD *)v166 = 0;
                v123 = (unsigned __int8 *)sub_22EFBF910(v137, (uint64_t *)v166);
                if (sub_22F029BF0(v147, a6, v123, 0))
                {
                  v124 = *(unsigned int *)(a6 + 216);
                  v125 = 32 * v124 - 32;
                  v126 = v124 + 1;
                  v127 = v133;
                  do
                  {
                    v28 = --v126 <= v133;
                    if (v126 <= v133)
                      break;
                    v128 = v125 - 32;
                    v129 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a6 + 208) + v125), a6, 1);
                    v125 = v128;
                  }
                  while ((v129 & 1) != 0);
LABEL_251:
                  *(_DWORD *)(a6 + 216) = v127;
LABEL_253:
                  --*(_DWORD *)(*(_QWORD *)(a6 + 24) + 104);
                  goto LABEL_254;
                }
              }
LABEL_244:
              v127 = v133;
              if ((_DWORD)v133 != -1)
              {
                v130 = *(_DWORD *)(a6 + 216);
                if (v130 > v133)
                {
                  v131 = 32 * (v130 - 1);
                  do
                  {
                    v132 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 208) + v131) & 0xFFFFFFFFFFFFFFF8);
                    if (*v132 >= 2u)
                      sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a6 + 208) + v131) & 0xFFFFFFFFFFFFFFF8));
                    *v132 = 0;
                    --v130;
                    v131 -= 32;
                  }
                  while (v133 < v130);
                }
                v28 = 0;
                goto LABEL_251;
              }
              goto LABEL_252;
            }
            goto LABEL_225;
          }
          v54 = -40;
          if ((*(_WORD *)(v137 + 80) & 0x7Fu) > 0x46)
          {
            v55 = v143;
            switch(v43)
            {
              case 'S':
                goto LABEL_106;
              case 'G':
                v54 = -56;
                goto LABEL_106;
              case 'Q':
LABEL_106:
                v59 = *(_QWORD *)(v55 + v54 + 16);
                v60 = (_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8);
                if ((v59 & 4) != 0)
                  v60 = (_QWORD *)*v60;
                if (v60)
                  v61 = (uint64_t)(v60 - 8);
                else
                  v61 = 0;
                if (sub_22F01D73C(v61))
                {
                  v43 = *(_WORD *)(v137 + 80) & 0x7F;
                  v45 = v143;
                  goto LABEL_69;
                }
                goto LABEL_113;
            }
          }
          else
          {
            v55 = v143;
            if (v43 <= 0x18)
            {
              if (v43 == 16)
              {
LABEL_77:
                v54 = -48;
                goto LABEL_106;
              }
              if (((1 << v43) & 0x1066) != 0)
                goto LABEL_106;
              if (v43 == 24)
                goto LABEL_77;
            }
            if (v43 == 70)
            {
LABEL_104:
              v54 = -64;
              goto LABEL_106;
            }
          }
          if (v43 - 52 >= 6)
          {
            if (v43 - 33 >= 5)
              goto LABEL_77;
            goto LABEL_104;
          }
          v54 = -72;
          goto LABEL_106;
      }
    }
    else
    {
      v45 = v143;
      if (v43 <= 0x18)
      {
        if (v43 == 16)
        {
LABEL_41:
          v44 = -48;
          goto LABEL_63;
        }
        if (((1 << v43) & 0x1066) != 0)
          goto LABEL_63;
        if (v43 == 24)
          goto LABEL_41;
      }
      if (v43 == 70)
      {
LABEL_61:
        v44 = -64;
        goto LABEL_63;
      }
    }
    if (v43 - 52 >= 6)
    {
      if (v43 - 33 >= 5)
        goto LABEL_41;
      goto LABEL_61;
    }
    v44 = -72;
    goto LABEL_63;
  }
  v46 = sub_22EFD7ED0(v137);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v46 + 8) + 2) & 1) != 0)
  {
    **(_BYTE **)(a6 + 16) = 1;
    if (*(_DWORD *)(a6 + 840) != 3
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6) & 1) == 0
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6) & 1) == 0)
    {
LABEL_225:
      v28 = 0;
      goto LABEL_254;
    }
  }
  else
  {
    v47 = v46;
    v48 = *(_DWORD *)(a6 + 216);
    sub_22F0270D4(*(_DWORD **)(a6 + 24));
    if (!sub_22F006CB0(v140, a6, a2, *(_QWORD *)(*(_QWORD *)v47 + 8), 0))
    {
      if (v48 != -1)
        sub_22F05B164(a6, 0, v48);
      goto LABEL_252;
    }
    if (!sub_22F05B164(a6, 1, v48))
    {
LABEL_252:
      v28 = 0;
      goto LABEL_253;
    }
    --*(_DWORD *)(*(_QWORD *)(a6 + 24) + 104);
  }
  *(_QWORD *)v166 = 0;
  v49 = (unsigned __int8 *)sub_22EFBF910(v137, (uint64_t *)v166);
  v28 = sub_22F029BF0(v147, a6, v49, 0) != 0;
LABEL_254:
  if (LODWORD(v172[0]) >= 2)
    sub_22EF53BC0(v172);
  sub_22F00AA08((uint64_t)&v173);
  if (v150)
    sub_22F02D2F8(v148 + 768, v149);
  return v28;
}

uint64_t sub_22F04D514(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[12];

  v23[11] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22F009BD8((uint64_t)a1, *(_QWORD *)(a1[3] + 40), *(_QWORD *)(a1[3] + 48), a2);
  if (!v10)
  {
    sub_22F072CEC((uint64_t)a1, a3, 103, 0);
    return 0;
  }
  memset(v18, 0, sizeof(v18));
  v19 = -1;
  v20 = 0;
  v21 = v23;
  v22 = 0x800000000;
  v23[8] = 0;
  v23[9] = 0;
  sub_22F01D8E0(v18, a1[1], v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 16);
    if ((v13 & 0xFE) == 0x28)
      goto LABEL_11;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v16 = *(_QWORD *)(a2 + 48);
    v12 = sub_22F10CF48(v12);
    v11 = v16;
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 16);
LABEL_11:
      if ((v13 & 0x100000) != 0)
      {
        do
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v12)
          {
            v17 = *(_DWORD *)(v12 + 16);
            if ((v17 & 0xFE) == 0x28)
              continue;
          }
          v12 = sub_22F10CF48(v12);
          v17 = *(_DWORD *)(v12 + 16);
        }
        while ((v17 & 0x100000) != 0);
      }
      v11 = *(_QWORD *)(v12 + 32);
    }
  }
  v14 = sub_22F0248D4(a1, a3, v11, (uint64_t)v18, a4, a5);
  if (v21 != v23)
    free(v21);
  return v14;
}

unint64_t sub_22F04D6AC(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  _BYTE *v13;
  char v14;

  result = **(_QWORD **)a1;
  if (!result)
    return result;
  v5 = sub_22EFC306C(result);
  result = sub_22EFC306C(a2);
  if (v5 > result)
    return result;
  v6 = *(unint64_t **)a1;
  result = **(_QWORD **)a1;
  while (1)
  {
    if (!a2 || !result)
      goto LABEL_8;
    if (result == a2)
      break;
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 32))(result);
    v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    v6 = *(unint64_t **)a1;
    result = **(_QWORD **)a1;
    if (v7 == v8)
      goto LABEL_18;
LABEL_8:
    if ((*(_BYTE *)(result + 68) & 1) == 0 || *(_QWORD *)(result + 40))
    {
      v9 = *(_QWORD *)(result + 48);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = sub_22EFC306C(result);
      v12 = sub_22F007880(v9, *(_QWORD *)(v10 + 8) + 72 * (*(_DWORD *)(v10 + 16) + v11));
      v13 = *(_BYTE **)(a1 + 16);
      if (*v13)
        v14 = v12;
      else
        v14 = 0;
      *v13 = v14;
      v6 = *(unint64_t **)a1;
      result = **(_QWORD **)a1;
    }
    do
    {
      result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
      *v6 = result;
    }
    while (result && (*(_DWORD *)(result + 28) & 0x7Fu) - 49 >= 3);
  }
  result = a2;
  do
  {
LABEL_18:
    result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
    *v6 = result;
  }
  while (result && (*(_DWORD *)(result + 28) & 0x7Fu) - 49 > 2);
  return result;
}

unint64_t sub_22F04D7F0(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  char v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned __int8 **v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  _QWORD v96[11];
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[64];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[3];
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[64];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v10 = *a2;
  v11 = (unsigned __int8 **)((char *)a2 + (v10 >> 24));
  v12 = *v11;
  if (*v11)
  {
    while (1)
    {
      v13 = v12;
      v14 = *v12;
      if (v14 > 213)
      {
        if (v14 == 233)
        {
          if ((*(_DWORD *)v13 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v16 = v13 + 16;
        }
        else
        {
          if (v14 != 214)
            goto LABEL_19;
          v16 = v13 + 24;
        }
      }
      else if (v14 == 155)
      {
        if ((**((_DWORD **)v13 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v13[48])
          v16 = v13 + 24;
        else
          v16 = v13 + 32;
      }
      else
      {
        if (v14 != 176)
          goto LABEL_19;
        v15 = *((unsigned int *)v13 + 5);
        if ((_DWORD)v15 == -1)
          goto LABEL_19;
        v16 = &v13[8 * v15 + 40];
      }
      v12 = *(unsigned __int8 **)v16;
      if (v12 == v13)
        goto LABEL_19;
    }
  }
  v13 = 0;
LABEL_19:
  v17 = *((_QWORD *)v13 + 1);
  memset(v107, 0, sizeof(v107));
  LODWORD(v108) = -1;
  v109 = 0;
  v110 = v112;
  v111 = 0x800000000;
  v88 = &v11[((v10 >> 18) & 1) + 1];
  v114 = 0;
  v113 = 0;
  v18 = a2[4];
  v19 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = (*(_DWORD *)(v21 + 16) & 0xFF800FF) == 136839179;
  else
    v22 = 0;
  if (!v22)
  {
    if ((*(_BYTE *)(v20 + 16) == 39 || *(_DWORD *)(v21 + 16) == 39 && (v20 = sub_22F10CF48(v20)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v97 = 0;
      v98 = 0;
      v99 = 0;
      LODWORD(v100) = v100 | 1;
      v101 = 0;
      v102 = v104;
      v103 = 0x800000000;
      v105 = 0;
      v106 = 0;
      v89 = *a1;
      v90 = &v97;
      LOBYTE(v91) = 0;
      v84 = a3;
      v87 = a4;
      v86 = v9;
      if (sub_22F00C45C(&v89, v13))
      {
        if (!v99 && (v97 & 3) == 0)
        {
          v24 = (unint64_t)v97 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v97 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v24 + 28) & 0x7Eu) - 52 < 6)
          {
            v50 = *(_QWORD *)(*a1 + 8);
            v51 = sub_22F10ACF8(*v19);
            if (sub_22EF5F5D4(v50, v51, *(_QWORD *)(v24 + 48)))
            {
              LODWORD(v27) = *(unsigned __int8 *)a2;
              if ((_DWORD)v27 == 141)
              {
                v52 = a2[1] & 0x3F;
                if (v52 - 18 < 8 || (v53 = 0, v83 = 0, v52 <= 0x1D) && ((1 << v52) & 0x30008000) != 0)
                {
                  v54 = (_BYTE **)*a1;
                  v55 = *(_QWORD *)(*a1 + 24);
                  v56 = *(unsigned int *)(v55 + 92);
                  v57 = (*(_DWORD *)(v55 + 120) + 1);
                  *(_DWORD *)(v55 + 120) = v57;
                  v53 = v56 | (v57 << 32);
                  v58 = (*(_DWORD *)(v24 + 28) & 0x7Eu) - 54 < 4;
                  if (!sub_22F0279B4((uint64_t)&v88[v58], v18 - v58, v24, v53, v54, v24, 1))
                  {
                    v85 = v53;
                    v25 = 0;
                    v26 = 0;
                    LOBYTE(v27) = 0;
                    v23 = v24;
                    goto LABEL_30;
                  }
                  v83 = v24;
                }
              }
              else
              {
                v83 = 0;
                v53 = 0;
              }
              v85 = v53;
              if ((*(_DWORD *)(v24 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                goto LABEL_196;
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 32))(v24) + 80) & 0xE000) != 0x4000
                && ((*(_QWORD *)(v24 + 40) & 7) != 6
                 || (*(_DWORD *)(*(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
              {
                v73 = *a1;
                if (!(_DWORD)v18)
                {
                  sub_22F072CEC(v73, (uint64_t)a2, 103, 0);
                  v18 = 0;
                  goto LABEL_154;
                }
                if (!sub_22F0098FC(v73, *v88, v107))
                {
LABEL_154:
                  v25 = 0;
                  v26 = 0;
                  LOBYTE(v27) = 0;
                  goto LABEL_192;
                }
                v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                if ((_DWORD)v27 == 141
                  && (**(_QWORD **)(v74 + 2000) & 0x1000) != 0
                  && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                  && (*(_BYTE *)(v24 + 82) & 0x80) != 0
                  && !sub_22F013A2C((uint64_t *)*a1, *v88, (uint64_t)v107))
                {
                  v25 = 0;
                  LOBYTE(v27) = 0;
                  v23 = v83;
                  v26 = v107;
                  goto LABEL_30;
                }
                --v18;
                ++v88;
                v26 = v107;
LABEL_191:
                v25 = 1;
                goto LABEL_192;
              }
              if (!sub_22EFD799C(v24))
              {
LABEL_196:
                if (sub_22EFBFDCC(v24, 0, 0))
                {
                  if ((*(_QWORD *)(v24 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(v24 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                  {
                    v89 = 0;
                    v90 = 0;
                    v91 = 0;
                    v92 |= 1u;
                    v93 = 0;
                    v94 = v96;
                    v95 = 0x800000000;
                    v96[8] = 0;
                    v96[9] = 0;
                    if (sub_22F027C94(*a1, a2, (uint64_t)&v89))
                    {
                      sub_22F00676C((uint64_t)&v89, v84);
                      LOBYTE(v27) = sub_22F02D738(v8, 1, v9);
                      v9 = -1;
                    }
                    else
                    {
                      LOBYTE(v27) = 0;
                    }
                    v23 = v83;
                    if (v94 != v96)
                    {
                      free(v94);
                      v23 = v83;
                    }
                    v86 = v9;
                    v25 = 0;
                    v26 = 0;
LABEL_30:
                    if (v102 != v104)
                    {
                      v28 = v18;
                      v29 = v26;
                      v30 = v23;
                      free(v102);
                      v23 = v30;
                      v26 = v29;
                      v18 = v28;
                    }
                    if ((v25 & 1) == 0)
                    {
                      v9 = v86;
                      goto LABEL_58;
                    }
                    v31 = 0;
                    v9 = v86;
                    if (v23)
                      goto LABEL_68;
                    goto LABEL_67;
                  }
                  if (sub_22F02836C(*a1, a2))
                  {
                    LOBYTE(v27) = sub_22F02D738(v8, 1, v9);
                    v25 = 0;
                    v26 = 0;
                    v86 = -1;
LABEL_192:
                    v23 = v83;
                    goto LABEL_30;
                  }
                  goto LABEL_154;
                }
                goto LABEL_190;
              }
              v71 = *(_WORD *)(v24 + 80) & 0x7F;
              v72 = -40;
              if (v71 > 0x46)
              {
                switch(v71)
                {
                  case 'S':
                    goto LABEL_172;
                  case 'G':
                    v72 = -56;
                    goto LABEL_172;
                  case 'Q':
                    goto LABEL_172;
                }
              }
              else
              {
                if (v71 <= 0x18)
                {
                  if (v71 == 16)
                    goto LABEL_141;
                  if (((1 << v71) & 0x1066) != 0)
                    goto LABEL_172;
                  if (v71 == 24)
                  {
LABEL_141:
                    v72 = -48;
LABEL_172:
                    v75 = *(_QWORD *)(v24 + 72 + v72 + 16);
                    v76 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
                    if ((v75 & 4) != 0)
                      v76 = (_QWORD *)*v76;
                    if (v76)
                      v27 = (unint64_t)(v76 - 8);
                    else
                      v27 = 0;
                    v77 = sub_22EFD462C(v27);
                    if (v77 && (*(_DWORD *)(v77 + 28) & 0x7F) == 0x1D)
                      v77 = *(_QWORD *)(v77 + 48);
                    v78 = *(_QWORD *)(v27 + 128);
                    if (!v78
                      || ((*(unsigned __int16 *)(v78 + 8) | (*(unsigned __int8 *)(v78 + 10) << 16)) & 0x100000) == 0
                      || (*(_BYTE *)(v78 + 104) & 4) == 0)
                    {
                      v26 = 0;
                      v25 = 1;
                      v24 = v77;
                      goto LABEL_192;
                    }
                    v79 = *(_QWORD *)((*(_QWORD *)(v24 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                    v80 = *(_QWORD *)(v77 + 144);
                    if ((v80 & 6) != 0)
                      v81 = 0;
                    else
                      v81 = v80 & 0xFFFFFFFFFFFFFFF8;
                    v89 = 0;
                    v24 = sub_22EFE9880(v81, *(_QWORD *)v79, *(unsigned int *)(v79 + 8), (uint64_t)&v89);
LABEL_190:
                    v26 = 0;
                    goto LABEL_191;
                  }
                }
                if (v71 == 70)
                {
LABEL_170:
                  v72 = -64;
                  goto LABEL_172;
                }
              }
              if (v71 - 52 < 6)
              {
                v72 = -72;
                goto LABEL_172;
              }
              if (v71 - 33 < 5)
                goto LABEL_170;
              goto LABEL_141;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v23 = 0;
            v85 = 0;
LABEL_29:
            v25 = 0;
            v26 = 0;
            LOBYTE(v27) = 0;
            goto LABEL_30;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v13, 103, 0);
      }
      v23 = 0;
      v85 = 0;
      v24 = 0;
      goto LABEL_29;
    }
    v34 = *a1;
    v35 = (uint64_t)a2;
    goto LABEL_56;
  }
  v32 = *v13;
  if (v32 == 188)
  {
    if (sub_22F0098FC(*a1, *((_QWORD *)v13 + 2), v107))
    {
      v87 = a4;
      v24 = *((_QWORD *)v13 + 3);
      if (v24 && (*(_DWORD *)(v24 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        v84 = a3;
        if ((v13[2] & 8) != 0)
        {
          v31 = *((_QWORD *)v13 + 6) != 0;
LABEL_66:
          v26 = v107;
LABEL_67:
          v42 = (_BYTE **)*a1;
          v43 = *(_QWORD *)(*a1 + 24);
          v44 = *(unsigned int *)(v43 + 92);
          v45 = (*(_DWORD *)(v43 + 120) + 1);
          *(_DWORD *)(v43 + 120) = v45;
          v85 = v44 | (v45 << 32);
          v46 = sub_22F0279B4((uint64_t)v88, v18, v24, v85, v42, v24, 0);
          LOBYTE(v27) = 0;
          v23 = v24;
          if (!v46)
            goto LABEL_58;
LABEL_68:
          v82 = v23;
          v97 = &v99;
          v98 = 0x400000000;
          if (!v26)
          {
LABEL_95:
            if (v24 && (*(_DWORD *)(v24 + 28) & 0x7F) == 0x39)
            {
              v60 = (uint64_t *)*a1;
              v61 = *(_WORD *)(v24 + 80) & 0x7F;
              v62 = -40;
              if (v61 > 0x46)
              {
                switch(v61)
                {
                  case 'S':
                    goto LABEL_118;
                  case 'G':
                    v62 = -56;
                    goto LABEL_118;
                  case 'Q':
LABEL_118:
                    v67 = *(_QWORD *)(v24 + 72 + v62 + 16);
                    v68 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
                    if ((v67 & 4) != 0)
                      v68 = (_QWORD *)*v68;
                    if (v68)
                      v69 = (uint64_t)(v68 - 8);
                    else
                      v69 = 0;
                    v70 = sub_22EF6477C(v60[1], v69);
                    if (!sub_22F027138(v60, (uint64_t)a2, (uint64_t)v26, v70))
                      goto LABEL_105;
LABEL_124:
                    LOBYTE(v27) = sub_22F02D738(v8, 1, v9);
                    v9 = -1;
LABEL_125:
                    if (v97 != &v99)
                      free(v97);
                    goto LABEL_58;
                }
              }
              else
              {
                if (v61 <= 0x18)
                {
                  if (v61 == 16)
                  {
LABEL_100:
                    v62 = -48;
                    goto LABEL_118;
                  }
                  if (((1 << v61) & 0x1066) != 0)
                    goto LABEL_118;
                  if (v61 == 24)
                    goto LABEL_100;
                }
                if (v61 == 70)
                {
LABEL_116:
                  v62 = -64;
                  goto LABEL_118;
                }
              }
              if (v61 - 52 >= 6)
              {
                if (v61 - 33 >= 5)
                  goto LABEL_100;
                goto LABEL_116;
              }
              v62 = -72;
              goto LABEL_118;
            }
            v89 = 0;
            v63 = (unsigned __int8 *)sub_22EFBF910(v24, &v89);
            v64 = (_QWORD *)*a1;
            sub_22EFF605C((uint64_t)a2);
            if (sub_22F028A44(v64, v65, (_QWORD *)v24, v89, (uint64_t)v63))
            {
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F00B12C(v66, v89, (uint64_t)v26, (uint64_t *)v88, v18, v82, v85, v63, (uint64_t *)*a1, v84, v87)
                && (!(_DWORD)v98 || sub_22F028DA0(*a1, (uint64_t)a2, v84, v97, v98)))
              {
                goto LABEL_124;
              }
            }
LABEL_105:
            LOBYTE(v27) = 0;
            goto LABEL_125;
          }
          if ((*(_DWORD *)(v24 + 28) & 0x7Eu) - 54 >= 4)
            v47 = 0;
          else
            v47 = (_DWORD *)v24;
          if (v47)
          {
            v48 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 32))(v47);
            if ((*(_BYTE *)(v48 + 82) & 0xC) != 0)
            {
              if (v31)
                goto LABEL_75;
LABEL_94:
              v24 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v26, (uint64_t)v47, (uint64_t)&v97);
              if (!v24)
                goto LABEL_105;
              goto LABEL_95;
            }
            if (sub_22EFD7260(v48))
              v59 = v31;
            else
              v59 = 1;
            if ((v59 & 1) == 0)
              goto LABEL_94;
          }
LABEL_75:
          if ((v47[7] & 0x7F) == 0x39)
            v49 = 9;
          else
            v49 = 5;
          if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v26, v49, 0))
            goto LABEL_105;
          goto LABEL_95;
        }
LABEL_65:
        v31 = 0;
        goto LABEL_66;
      }
LABEL_44:
      v34 = *a1;
LABEL_55:
      v35 = (uint64_t)v13;
LABEL_56:
      sub_22F072CEC(v34, v35, 103, 0);
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  if ((v32 & 0xFE) == 0x70)
  {
    v87 = a4;
    v33 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v13, (uint64_t)v107, 0);
    if (v33)
    {
      v24 = v33;
      if ((*(_DWORD *)(v33 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        v84 = a3;
        goto LABEL_65;
      }
      goto LABEL_44;
    }
LABEL_57:
    LOBYTE(v27) = 0;
    goto LABEL_58;
  }
  v34 = *a1;
  if (v32 != 129)
    goto LABEL_55;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34) + 2000) + 1) & 0x10) == 0)
  {
    v36 = *a1;
    sub_22EFF605C((uint64_t)v13);
    sub_22F072D74(v36, v37, 2266, 0);
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v13 + 2), v107))
    goto LABEL_57;
  v38 = 0;
  v39 = *((_QWORD *)v13 + 8);
  if ((v39 & 1) == 0)
  {
    v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFELL);
    if (v40)
      v38 = *v40;
  }
  LOBYTE(v27) = sub_22F027138((uint64_t *)*a1, (uint64_t)v13, (uint64_t)v107, v38);
LABEL_58:
  if (v110 != v112)
    free(v110);
  if (v9 != -1)
    sub_22F02D738(v8, 0, v9);
  --*(_DWORD *)(*(_QWORD *)(v8 + 24) + 104);
  return v27 & 1;
}

uint64_t sub_22F04E3D4(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41[9];
  uint64_t v42;
  uint64_t v43[2];
  uint64_t v44[2];
  void *v45[2];
  uint64_t v46[4];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 <= 0x13)
  {
    switch(v10)
    {
      case 3u:
        LODWORD(v54) = 0;
        LODWORD(v41[0]) = 0;
        v11 = 0;
        if (sub_22F009DC4(v41, *a1, *(_QWORD *)(a2 + 16)))
        {
          if (sub_22F02F148(*a1, (uint64_t)&v54, (uint64_t)v41, a2))
          {
            v20 = a1[2];
            if (v20 != (uint64_t *)&v54)
            {
              sub_22EF530AC((uint64_t)&v42, (uint64_t)&v54);
              if (*(_DWORD *)v20 >= 2u)
                sub_22EF53BC0(v20);
              *(_DWORD *)v20 = v42;
              v21 = *(_OWORD *)v43;
              v22 = *(_OWORD *)v44;
              v23 = *(_OWORD *)v45;
              *(_OWORD *)(v20 + 7) = *(_OWORD *)v46;
              *(_OWORD *)(v20 + 5) = v23;
              *(_OWORD *)(v20 + 3) = v22;
              *(_OWORD *)(v20 + 1) = v21;
            }
            v11 = 1;
          }
          else
          {
            v11 = 0;
          }
        }
        if (LODWORD(v41[0]) >= 2)
          sub_22EF53BC0(v41);
        goto LABEL_60;
      case 4u:
        v42 = 0;
        v43[0] = 0;
        v43[1] = 0;
        LODWORD(v44[0]) = -1;
        v45[0] = 0;
        v45[1] = &v46[1];
        v46[0] = 0x800000000;
        v51 = 0;
        v52 = 0;
        v24 = *(_QWORD *)(a2 + 16);
        v54 = *a1;
        BYTE8(v55) = 0;
        v11 = 0;
        if (sub_22F010358((int)&v54, v24, a3, a4, a5, a6, a7, a8, v41[0], v41[1], v41[2], v41[3], v41[4], v41[5], (void *)v41[6], v41[7], v41[8], 0, 0,
                             0,
                             v44[0],
                             v44[1],
                             0,
                             (uint64_t)&v46[1],
                             0x800000000,
                             v46[1],
                             v46[2],
                             v46[3],
                             v47,
                             v48,
                             v49,
                             v50,
                             0,
                             0,
                             v53,
                             (uint64_t)v54,
                             (uint64_t)&v42,
                             *((void **)&v55 + 1),
                             v56))
        {
          LODWORD(v41[0]) = 0;
          v11 = sub_22F0248D4(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v42, (uint64_t)v41, 0);
          if ((_DWORD)v11)
          {
            v25 = a1[2];
            if (v25 != v41)
            {
              sub_22EF530AC((uint64_t)&v54, (uint64_t)v41);
              if (*(_DWORD *)v25 >= 2u)
                sub_22EF53BC0(v25);
              *(_DWORD *)v25 = (_DWORD)v54;
              v26 = v55;
              v27 = v56;
              v28 = v57;
              *(_OWORD *)(v25 + 7) = v58;
              *(_OWORD *)(v25 + 5) = v28;
              *(_OWORD *)(v25 + 3) = v27;
              *(_OWORD *)(v25 + 1) = v26;
            }
          }
          if (LODWORD(v41[0]) >= 2)
            sub_22EF53BC0(v41);
        }
        if (v45[1] != &v46[1])
          free(v45[1]);
        return v11;
      case 5u:
        return sub_22F048114(a1, *(_QWORD *)(a2 + 16));
      case 7u:
      case 8u:
        LODWORD(v54) = 0;
        v11 = 0;
        if (sub_22F009DC4(&v54, *a1, *(_QWORD *)(a2 + 16)))
        {
          v12 = *(_QWORD *)(a2 + 16);
          if ((_DWORD)v54 == 10)
          {
            v13 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0));
            if (v13)
            {
              if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3)
                v14 = 0;
              else
                v14 = v13;
            }
            else
            {
              v14 = 0;
            }
            v29 = sub_22EFFB554((unsigned __int8 *)a2);
            v30 = *(unsigned int *)(a2 + 4);
            if ((_DWORD)v30)
            {
              v31 = v29;
              v32 = 8 * v30;
              v33 = &v54;
              do
              {
                v34 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v31 + 16) & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(v34 + 8) & 0xF) != 0)
                  v34 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)v31 + 16));
                v35 = sub_22F10C2A4(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0));
                if (v35)
                {
                  if ((*(_DWORD *)(v35 + 28) & 0x7Fu) - 35 >= 3)
                    v36 = 0;
                  else
                    v36 = v35;
                }
                else
                {
                  v36 = 0;
                }
                v33 = (uint64_t **)&v33[1][9 * sub_22F01D5B0(v14, v36)];
                v31 += 8;
                v14 = v36;
                v32 -= 8;
              }
              while (v32);
            }
            else
            {
              v33 = &v54;
            }
            v37 = a1[2];
            if (v37 != (uint64_t *)v33)
            {
              sub_22EF530AC((uint64_t)&v42, (uint64_t)v33);
              if (*(_DWORD *)v37 >= 2u)
                sub_22EF53BC0(v37);
              *(_DWORD *)v37 = v42;
              v38 = *(_OWORD *)v43;
              v39 = *(_OWORD *)v44;
              v40 = *(_OWORD *)v45;
              *(_OWORD *)(v37 + 7) = *(_OWORD *)v46;
              *(_OWORD *)(v37 + 5) = v40;
              *(_OWORD *)(v37 + 3) = v39;
              *(_OWORD *)(v37 + 1) = v38;
            }
            v11 = 1;
          }
          else
          {
            sub_22F072CEC((uint64_t)*a1, v12, 103, 0);
            v11 = 0;
          }
        }
        goto LABEL_60;
      default:
        goto LABEL_35;
    }
  }
  if (((*(_DWORD *)a2 >> 18) & 0x7Fu) > 0x3C)
  {
    if (v10 == 66 || v10 == 61)
    {
      LODWORD(v54) = 0;
      v11 = sub_22F009DC4(&v54, *a1, *(_QWORD *)(a2 + 16));
      if ((_DWORD)v11)
      {
        v16 = a1[2];
        if (v16 != (uint64_t *)&v54)
        {
          sub_22EF530AC((uint64_t)&v42, (uint64_t)&v54);
          if (*(_DWORD *)v16 >= 2u)
            sub_22EF53BC0(v16);
          *(_DWORD *)v16 = v42;
          v17 = *(_OWORD *)v43;
          v18 = *(_OWORD *)v44;
          v19 = *(_OWORD *)v45;
          *(_OWORD *)(v16 + 7) = *(_OWORD *)v46;
          *(_OWORD *)(v16 + 5) = v19;
          *(_OWORD *)(v16 + 3) = v18;
          *(_OWORD *)(v16 + 1) = v17;
        }
      }
LABEL_60:
      if (v54 >= 2)
        sub_22EF53BC0((uint64_t *)&v54);
      return v11;
    }
  }
  else if (v10 == 20 || v10 == 21)
  {
    return sub_22F048114(a1, *(_QWORD *)(a2 + 16));
  }
LABEL_35:
  sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
  return 0;
}

uint64_t sub_22F04E8A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  unsigned int v22;
  uint64_t v23;
  _BYTE v24[24];
  __int128 v25;
  __int128 v26;
  _QWORD v27[11];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EF5C728(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
  if (!v4 || (v5 = v4, *(_BYTE *)(v4 + 16) != 2))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 4)
    {
      sub_22F072CEC(*a1, a2, 103, 0);
      return 0;
    }
    v18 = (_OWORD *)operator new[]();
    *v18 = xmmword_22F4A51C0;
    v19 = v18 + 1;
    v20 = (uint64_t *)a1[2];
    if (*(_DWORD *)v20 >= 2u)
      sub_22EF53BC0(v20);
    *(_DWORD *)v20 = 9;
    v20[1] = (uint64_t)v19;
    v20[2] = 0;
    return 1;
  }
  v6 = (int *)(v4 + 40);
  if (*(_DWORD *)(v4 + 48) >= 0x41u)
    v6 = *(int **)v6;
  sub_22EF52F1C((uint64_t)&v24[8], 0, *v6);
  v7 = 9;
  *(_DWORD *)v24 = 9;
  v8 = a1[2];
  if (*(_DWORD *)v8 >= 2u)
  {
    sub_22EF53BC0((uint64_t *)a1[2]);
    v7 = *(_DWORD *)v24;
  }
  *(_DWORD *)v8 = v7;
  v9 = *(_OWORD *)&v24[8];
  v10 = v25;
  v11 = v26;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)v27;
  *(_OWORD *)(v8 + 40) = v11;
  *(_OWORD *)(v8 + 24) = v10;
  *(_OWORD *)(v8 + 8) = v9;
  if (*(_DWORD *)(a1[2] + 16) == *(_DWORD *)(a1[2] + 20))
    return 1;
  v12 = a1[1];
  v13 = *(_OWORD *)v12;
  *(_QWORD *)&v24[16] = *(_QWORD *)(v12 + 16);
  *(_OWORD *)v24 = v13;
  v14 = *(_QWORD *)(v12 + 40);
  v25 = *(_OWORD *)(v12 + 24);
  *(_QWORD *)&v26 = v14;
  *((_QWORD *)&v26 + 1) = &v27[1];
  v27[0] = 0x800000000;
  if (*(_DWORD *)(v12 + 56))
    sub_22F016FFC((uint64_t)&v26 + 8, v12 + 48);
  v15 = *(_OWORD *)(v12 + 128);
  v28 = *(_BYTE *)(v12 + 144);
  *(_OWORD *)&v27[9] = v15;
  sub_22F029A38((uint64_t)v24, *a1, a2, v5);
  v16 = *(_QWORD *)(v5 + 32);
  LOBYTE(v22) = -77;
  if (byte_255E04EB3)
    sub_22F3F189C(179);
  v23 = v16;
  v22 = v22 & 0xFFFC00FF | (((*(_DWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
  v17 = sub_22F006CB0(*(_QWORD *)(a1[2] + 8) + 72 * *(unsigned int *)(a1[2] + 16), *a1, v24, &v22, 0);
  if (*((_QWORD **)&v26 + 1) != &v27[1])
    free(*((void **)&v26 + 1));
  return v17;
}

uint64_t sub_22F04EB48(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26[9];
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29[2];
  void *v30[2];
  uint64_t v31[4];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 > 0x13)
  {
    if (v10 == 20)
      return sub_22F04530C(a1, *(_QWORD *)(a2 + 16));
    if (v10 != 66 && v10 != 61)
      goto LABEL_32;
    LODWORD(v39) = 0;
    v11 = sub_22F009DC4(&v39, *a1, *(_QWORD *)(a2 + 16));
    if ((_DWORD)v11)
    {
      v12 = a1[2];
      if (v12 != (uint64_t *)&v39)
      {
        sub_22EF530AC((uint64_t)&v27, (uint64_t)&v39);
        if (*(_DWORD *)v12 >= 2u)
          sub_22EF53BC0(v12);
        *(_DWORD *)v12 = v27;
        v13 = *(_OWORD *)v28;
        v14 = *(_OWORD *)v29;
        v15 = *(_OWORD *)v30;
        *(_OWORD *)(v12 + 7) = *(_OWORD *)v31;
        *(_OWORD *)(v12 + 5) = v15;
        *(_OWORD *)(v12 + 3) = v14;
        *(_OWORD *)(v12 + 1) = v13;
      }
    }
LABEL_36:
    if (v39 >= 2)
      sub_22EF53BC0((uint64_t *)&v39);
    return v11;
  }
  switch(v10)
  {
    case 3u:
      LODWORD(v39) = 0;
      LODWORD(v26[0]) = 0;
      v11 = 0;
      if (sub_22F009DC4(v26, *a1, *(_QWORD *)(a2 + 16)))
      {
        if (sub_22F02F148(*a1, (uint64_t)&v39, (uint64_t)v26, a2))
        {
          v17 = a1[2];
          if (v17 != (uint64_t *)&v39)
          {
            sub_22EF530AC((uint64_t)&v27, (uint64_t)&v39);
            if (*(_DWORD *)v17 >= 2u)
              sub_22EF53BC0(v17);
            *(_DWORD *)v17 = v27;
            v18 = *(_OWORD *)v28;
            v19 = *(_OWORD *)v29;
            v20 = *(_OWORD *)v30;
            *(_OWORD *)(v17 + 7) = *(_OWORD *)v31;
            *(_OWORD *)(v17 + 5) = v20;
            *(_OWORD *)(v17 + 3) = v19;
            *(_OWORD *)(v17 + 1) = v18;
          }
          v11 = 1;
        }
        else
        {
          v11 = 0;
        }
      }
      if (LODWORD(v26[0]) >= 2)
        sub_22EF53BC0(v26);
      goto LABEL_36;
    case 4u:
      v27 = 0;
      v28[0] = 0;
      v28[1] = 0;
      LODWORD(v29[0]) = -1;
      v30[0] = 0;
      v30[1] = &v31[1];
      v31[0] = 0x800000000;
      v36 = 0;
      v37 = 0;
      v21 = *(_QWORD *)(a2 + 16);
      v39 = *a1;
      BYTE8(v40) = 0;
      v11 = 0;
      if (sub_22F010358((int)&v39, v21, a3, a4, a5, a6, a7, a8, v26[0], v26[1], v26[2], v26[3], v26[4], v26[5], (void *)v26[6], v26[7], v26[8], 0, 0,
                           0,
                           v29[0],
                           v29[1],
                           0,
                           (uint64_t)&v31[1],
                           0x800000000,
                           v31[1],
                           v31[2],
                           v31[3],
                           v32,
                           v33,
                           v34,
                           v35,
                           0,
                           0,
                           v38,
                           (uint64_t)v39,
                           (uint64_t)&v27,
                           *((void **)&v40 + 1),
                           v41))
      {
        LODWORD(v26[0]) = 0;
        v11 = sub_22F0248D4(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v27, (uint64_t)v26, 0);
        if ((_DWORD)v11)
        {
          v22 = a1[2];
          if (v22 != v26)
          {
            sub_22EF530AC((uint64_t)&v39, (uint64_t)v26);
            if (*(_DWORD *)v22 >= 2u)
              sub_22EF53BC0(v22);
            *(_DWORD *)v22 = (_DWORD)v39;
            v23 = v40;
            v24 = v41;
            v25 = v42;
            *(_OWORD *)(v22 + 7) = v43;
            *(_OWORD *)(v22 + 5) = v25;
            *(_OWORD *)(v22 + 3) = v24;
            *(_OWORD *)(v22 + 1) = v23;
          }
        }
        if (LODWORD(v26[0]) >= 2)
          sub_22EF53BC0(v26);
      }
      if (v30[1] != &v31[1])
        free(v30[1]);
      return v11;
    case 5u:
      return sub_22F04530C(a1, *(_QWORD *)(a2 + 16));
  }
LABEL_32:
  sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
  return 0;
}

uint64_t sub_22F04EE88(unsigned __int8 *a1)
{
  int v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  if (v1 == 179)
  {
    v2 = 0;
  }
  else
  {
    if (v1 == 180)
    {
      v3 = (uint64_t *)*((_QWORD *)a1 + 2);
      v4 = *((_QWORD *)a1 + 3) - (_QWORD)v3;
      if ((v4 & 0x7FFFFFFF8) != 0)
      {
        v5 = (v4 >> 3) - 1;
        do
        {
          v6 = v5;
          v7 = *v3++;
          LOBYTE(a1) = sub_22F04EE88(v7);
          if ((a1 & 1) != 0)
            break;
          v5 = v6 - 1;
        }
        while (v6);
      }
      else
      {
        LOBYTE(a1) = 0;
      }
    }
    v2 = (v1 != 180) | a1;
  }
  return v2 & 1;
}

uint64_t sub_22F04EF10(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F0500BC(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F047268((uint64_t **)a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F0500BC(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11[9];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[11];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F04EF10(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v13 = -1;
    v14 = 0;
    v15 = v17;
    v16 = 0x800000000;
    v17[8] = 0;
    v17[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v12, 1u))
    {
      LODWORD(v11[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v12, (uint64_t)v11, 0);
      if ((_DWORD)v5)
      {
        v6 = a1[2];
        if ((uint64_t *)v6 != v11)
        {
          sub_22EF530AC((uint64_t)&v18, (uint64_t)v11);
          if (*(_DWORD *)v6 >= 2u)
            sub_22EF53BC0((uint64_t *)v6);
          *(_DWORD *)v6 = v18;
          v7 = v19;
          v8 = v20;
          v9 = v21;
          *(_OWORD *)(v6 + 56) = v22;
          *(_OWORD *)(v6 + 40) = v9;
          *(_OWORD *)(v6 + 24) = v8;
          *(_OWORD *)(v6 + 8) = v7;
        }
      }
      if (LODWORD(v11[0]) >= 2)
        sub_22EF53BC0(v11);
    }
    else
    {
      v5 = 0;
    }
    if (v15 != v17)
      free(v15);
  }
  return v5;
}

unint64_t sub_22F050294(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  char v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92[9];
  uint64_t v93;
  void **v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[11];
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115[14];

  v115[12] = *MEMORY[0x24BDAC8D0];
  LODWORD(v92[0]) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v12 = *a2;
  v13 = (unsigned __int8 **)((char *)a2 + (v12 >> 24));
  v14 = *v13;
  if (*v13)
  {
    while (1)
    {
      v15 = v14;
      v16 = *v14;
      if (v16 > 213)
      {
        if (v16 == 233)
        {
          if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v18 = v15 + 16;
        }
        else
        {
          if (v16 != 214)
            goto LABEL_19;
          v18 = v15 + 24;
        }
      }
      else if (v16 == 155)
      {
        if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v15[48])
          v18 = v15 + 24;
        else
          v18 = v15 + 32;
      }
      else
      {
        if (v16 != 176)
          goto LABEL_19;
        v17 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v17 == -1)
          goto LABEL_19;
        v18 = &v15[8 * v17 + 40];
      }
      v14 = *(unsigned __int8 **)v18;
      if (v14 == v15)
        goto LABEL_19;
    }
  }
  v15 = 0;
LABEL_19:
  v19 = *((_QWORD *)v15 + 1);
  v111 = 0;
  v112 = 0uLL;
  LODWORD(v113) = -1;
  *(_QWORD *)&v114 = 0;
  *((_QWORD *)&v114 + 1) = &v115[1];
  v115[0] = 0x800000000;
  v20 = (uint64_t)&v13[((v12 >> 18) & 1) + 1];
  v115[10] = 0;
  v115[9] = 0;
  v21 = a2[4];
  v22 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 136839179;
  else
    v25 = 0;
  if (v25)
  {
    v33 = *v15;
    if (v33 == 188)
    {
      if (sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), &v111))
      {
        v91 = (uint64_t *)v20;
        v27 = *((_QWORD *)v15 + 3);
        if (v27 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((v15[2] & 8) != 0)
          {
            v32 = *((_QWORD *)v15 + 6) != 0;
LABEL_71:
            v90 = &v111;
LABEL_72:
            v47 = (_BYTE **)*a1;
            v48 = *(_QWORD *)(*a1 + 24);
            v49 = *(unsigned int *)(v48 + 92);
            v50 = (*(_DWORD *)(v48 + 120) + 1);
            *(_DWORD *)(v48 + 120) = v50;
            v89 = v49 | (v50 << 32);
            v51 = sub_22F0279B4((uint64_t)v91, v21, v27, v89, v47, v27, 0);
            LOBYTE(v29) = 0;
            v26 = v27;
            if (!v51)
              goto LABEL_58;
LABEL_73:
            v87 = v26;
            v101 = &v103;
            v102 = 0x400000000;
            if (!v90)
            {
LABEL_100:
              if (v27 && (*(_DWORD *)(v27 + 28) & 0x7F) == 0x39)
              {
                v65 = (uint64_t *)*a1;
                v66 = *(_WORD *)(v27 + 80) & 0x7F;
                v67 = -40;
                if (v66 > 0x46)
                {
                  switch(v66)
                  {
                    case 'S':
                      goto LABEL_123;
                    case 'G':
                      v67 = -56;
                      goto LABEL_123;
                    case 'Q':
LABEL_123:
                      v72 = *(_QWORD *)(v27 + 72 + v67 + 16);
                      v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
                      if ((v72 & 4) != 0)
                        v73 = (_QWORD *)*v73;
                      if (v73)
                        v74 = (uint64_t)(v73 - 8);
                      else
                        v74 = 0;
                      v75 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v74);
                      if (!sub_22F027138(v65, (uint64_t)a2, (uint64_t)v90, v75))
                        goto LABEL_110;
LABEL_129:
                      LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
LABEL_130:
                      if (v101 != &v103)
                        free(v101);
                      goto LABEL_58;
                  }
                }
                else
                {
                  if (v66 <= 0x18)
                  {
                    if (v66 == 16)
                    {
LABEL_105:
                      v67 = -48;
                      goto LABEL_123;
                    }
                    if (((1 << v66) & 0x1066) != 0)
                      goto LABEL_123;
                    if (v66 == 24)
                      goto LABEL_105;
                  }
                  if (v66 == 70)
                  {
LABEL_121:
                    v67 = -64;
                    goto LABEL_123;
                  }
                }
                if (v66 - 52 >= 6)
                {
                  if (v66 - 33 >= 5)
                    goto LABEL_105;
                  goto LABEL_121;
                }
                v67 = -72;
                goto LABEL_123;
              }
              v93 = 0;
              v68 = (unsigned __int8 *)sub_22EFBF910(v27, &v93);
              v69 = (_QWORD *)*a1;
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F028A44(v69, v70, (_QWORD *)v27, v93, (uint64_t)v68))
              {
                sub_22EFF605C((uint64_t)a2);
                if (sub_22F00B12C(v71, v93, (uint64_t)v90, v91, v21, v87, v89, v68, (uint64_t *)*a1, (uint64_t)v92, 0)
                  && (!(_DWORD)v102
                   || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v92, v101, v102)))
                {
                  goto LABEL_129;
                }
              }
LABEL_110:
              LOBYTE(v29) = 0;
              goto LABEL_130;
            }
            if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 >= 4)
              v52 = 0;
            else
              v52 = (_DWORD *)v27;
            if (v52)
            {
              v53 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 32))(v52);
              if ((*(_BYTE *)(v53 + 82) & 0xC) != 0)
              {
                if (v32)
                  goto LABEL_80;
LABEL_99:
                v27 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v90, (uint64_t)v52, (uint64_t)&v101);
                if (!v27)
                  goto LABEL_110;
                goto LABEL_100;
              }
              if (sub_22EFD7260(v53))
                v64 = v32;
              else
                v64 = 1;
              if ((v64 & 1) == 0)
                goto LABEL_99;
            }
LABEL_80:
            if ((v52[7] & 0x7F) == 0x39)
              v54 = 9;
            else
              v54 = 5;
            if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v90, v54, 0))
              goto LABEL_110;
            goto LABEL_100;
          }
LABEL_70:
          v32 = 0;
          goto LABEL_71;
        }
        goto LABEL_44;
      }
    }
    else if ((v33 & 0xFE) == 0x70)
    {
      v91 = (uint64_t *)v20;
      v34 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v15, (uint64_t)&v111, 0);
      if (v34)
      {
        v27 = v34;
        if ((*(_DWORD *)(v34 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
          goto LABEL_70;
LABEL_44:
        v35 = (uint64_t *)*a1;
LABEL_55:
        v36 = (uint64_t)v15;
        goto LABEL_56;
      }
    }
    else
    {
      v35 = (uint64_t *)*a1;
      if (v33 != 129)
        goto LABEL_55;
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*v35 + 96))(v35) + 2000) + 1) & 0x10) == 0)
      {
        v37 = (uint64_t *)*a1;
        sub_22EFF605C((uint64_t)v15);
        sub_22F072D74((uint64_t)v37, v38, 2266, 0);
      }
      if (sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), &v111))
      {
        v39 = 0;
        v40 = *((_QWORD *)v15 + 8);
        if ((v40 & 1) == 0)
        {
          v41 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFELL);
          if (v41)
            v39 = *v41;
        }
        LOBYTE(v29) = sub_22F027138((uint64_t *)*a1, (uint64_t)v15, (uint64_t)&v111, v39);
        goto LABEL_58;
      }
    }
LABEL_57:
    LOBYTE(v29) = 0;
    goto LABEL_58;
  }
  if (*(_BYTE *)(v23 + 16) != 39 && (*(_DWORD *)(v24 + 16) != 39 || (v23 = sub_22F10CF48(v23)) == 0)
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 > 1)
  {
    v35 = (uint64_t *)*a1;
    v36 = (uint64_t)a2;
LABEL_56:
    sub_22F072CEC((uint64_t)v35, v36, 103, 0);
    goto LABEL_57;
  }
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 |= 1u;
  v105 = 0;
  v106 = v108;
  v107 = 0x800000000;
  v109 = 0;
  v110 = 0;
  v93 = *a1;
  v94 = &v101;
  LOBYTE(v95) = 0;
  v91 = (uint64_t *)v20;
  if (!sub_22F00C45C(&v93, v15, v6, v7, v8, v9, v10, v11))
  {
LABEL_28:
    v26 = 0;
    v89 = 0;
    v27 = 0;
LABEL_29:
    v28 = 0;
    v90 = 0;
    LOBYTE(v29) = 0;
    goto LABEL_30;
  }
  if (v103
    || (v101 & 3) != 0
    || (v27 = (unint64_t)v101 & 0xFFFFFFFFFFFFFFFCLL, ((unint64_t)v101 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    || (*(_DWORD *)(v27 + 28) & 0x7Eu) - 52 >= 6)
  {
    sub_22F072CEC(*a1, (uint64_t)v15, 103, 0);
    goto LABEL_28;
  }
  v55 = *(_QWORD *)(*a1 + 8);
  v56 = sub_22F10ACF8(*v22);
  if (!sub_22EF5F5D4(v55, v56, *(_QWORD *)(v27 + 48)))
  {
    sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
    v26 = 0;
    v89 = 0;
    goto LABEL_29;
  }
  v57 = *(unsigned __int8 *)a2;
  if (v57 == 141)
  {
    v58 = a2[1] & 0x3F;
    if (v58 - 18 < 8 || (v29 = 0, v88 = 0, v58 <= 0x1D) && ((1 << v58) & 0x30008000) != 0)
    {
      v59 = (uint64_t *)*a1;
      v60 = *(_QWORD *)(*a1 + 24);
      v61 = *(unsigned int *)(v60 + 92);
      v62 = (*(_DWORD *)(v60 + 120) + 1);
      *(_DWORD *)(v60 + 120) = v62;
      v29 = v61 | (v62 << 32);
      v63 = (*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 < 4;
      if (!sub_22F0279B4((uint64_t)&v91[v63], v21 - v63, v27, v29, (_BYTE **)v59, v27, 1))
      {
        v89 = v29;
        v28 = 0;
        v90 = 0;
        LOBYTE(v29) = 0;
        v26 = v27;
        goto LABEL_30;
      }
      v88 = v27;
    }
  }
  else
  {
    v88 = 0;
    v29 = 0;
  }
  v89 = v29;
  if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27) + 80) & 0xE000) != 0x4000
      && ((*(_QWORD *)(v27 + 40) & 7) != 6
       || (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
    {
      v78 = (uint64_t *)*a1;
      if ((_DWORD)v21)
      {
        if (sub_22F0098FC(v78, *v91, &v111))
        {
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
          if (v57 == 141
            && (**(_QWORD **)(v79 + 2000) & 0x1000) != 0
            && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
            && (*(_BYTE *)(v27 + 82) & 0x80) != 0)
          {
            v90 = &v111;
            if (!sub_22F013A2C((uint64_t *)*a1, (unsigned __int8 *)*v91, (uint64_t)&v111))
            {
              v28 = 0;
              goto LABEL_162;
            }
          }
          --v21;
          v90 = &v111;
          ++v91;
          goto LABEL_157;
        }
      }
      else
      {
        sub_22F072CEC((uint64_t)v78, (uint64_t)a2, 103, 0);
        v21 = 0;
      }
LABEL_161:
      v28 = 0;
      v90 = 0;
LABEL_162:
      LOBYTE(v29) = 0;
      goto LABEL_191;
    }
    if (sub_22EFD799C(v27))
    {
      v76 = *(_WORD *)(v27 + 80) & 0x7F;
      v77 = -40;
      if (v76 > 0x46)
      {
        switch(v76)
        {
          case 'S':
            goto LABEL_180;
          case 'G':
            v77 = -56;
            goto LABEL_180;
          case 'Q':
LABEL_180:
            v80 = *(_QWORD *)(v27 + 72 + v77 + 16);
            v81 = (_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8);
            if ((v80 & 4) != 0)
              v81 = (_QWORD *)*v81;
            if (v81)
              v29 = (unint64_t)(v81 - 8);
            else
              v29 = 0;
            v82 = sub_22EFD462C(v29);
            if (v82 && (*(_DWORD *)(v82 + 28) & 0x7F) == 0x1D)
              v82 = *(_QWORD *)(v82 + 48);
            v83 = *(_QWORD *)(v29 + 128);
            if (v83 && ((*(unsigned __int16 *)(v83 + 8) | (*(unsigned __int8 *)(v83 + 10) << 16)) & 0x100000) != 0)
            {
              if ((*(_BYTE *)(v83 + 104) & 4) != 0)
              {
                v84 = *(_QWORD *)((*(_QWORD *)(v27 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                v85 = *(_QWORD *)(v82 + 144);
                if ((v85 & 6) != 0)
                  v86 = 0;
                else
                  v86 = v85 & 0xFFFFFFFFFFFFFFF8;
                v93 = 0;
                v27 = sub_22EFE9880(v86, *(_QWORD *)v84, *(unsigned int *)(v84 + 8), (uint64_t)&v93);
                v90 = 0;
                v28 = 1;
              }
              else
              {
                v90 = 0;
                v28 = 1;
                v27 = v82;
              }
              v26 = v88;
              goto LABEL_30;
            }
            v90 = 0;
            v28 = 1;
            v27 = v82;
LABEL_191:
            v26 = v88;
            goto LABEL_30;
        }
      }
      else
      {
        if (v76 <= 0x18)
        {
          if (v76 == 16)
            goto LABEL_146;
          if (((1 << v76) & 0x1066) != 0)
            goto LABEL_180;
          if (v76 == 24)
          {
LABEL_146:
            v77 = -48;
            goto LABEL_180;
          }
        }
        if (v76 == 70)
        {
LABEL_178:
          v77 = -64;
          goto LABEL_180;
        }
      }
      if (v76 - 52 < 6)
      {
        v77 = -72;
        goto LABEL_180;
      }
      if (v76 - 33 < 5)
        goto LABEL_178;
      goto LABEL_146;
    }
  }
  if (!sub_22EFBFDCC(v27, 0, 0))
  {
    v90 = 0;
LABEL_157:
    v28 = 1;
    goto LABEL_191;
  }
  if ((*(_QWORD *)(v27 + 40) & 7) != 6 || (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) != 3)
  {
    if (sub_22F02836C(*a1, a2))
    {
      LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
      v28 = 0;
      v90 = 0;
      v5 = -1;
      goto LABEL_191;
    }
    goto LABEL_161;
  }
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 |= 1u;
  v97 = 0;
  v98 = v100;
  v99 = 0x800000000;
  v100[8] = 0;
  v100[9] = 0;
  if (sub_22F027C94(*a1, a2, (uint64_t)&v93))
  {
    sub_22F00676C((uint64_t)&v93, (uint64_t)v92);
    LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
    v5 = -1;
  }
  else
  {
    LOBYTE(v29) = 0;
  }
  v26 = v88;
  if (v98 != v100)
  {
    free(v98);
    v26 = v88;
  }
  v28 = 0;
  v90 = 0;
LABEL_30:
  if (v106 != v108)
  {
    v30 = v21;
    v31 = v26;
    free(v106);
    v26 = v31;
    v21 = v30;
  }
  if ((v28 & 1) != 0)
  {
    v32 = 0;
    if (v26)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_58:
  if (*((uint64_t **)&v114 + 1) != &v115[1])
    free(*((void **)&v114 + 1));
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v29 & 1) != 0)
  {
    v42 = a1[2];
    if ((uint64_t *)v42 != v92)
    {
      sub_22EF530AC((uint64_t)&v111, (uint64_t)v92);
      if (*(_DWORD *)v42 >= 2u)
        sub_22EF53BC0((uint64_t *)v42);
      *(_DWORD *)v42 = v111;
      v43 = v112;
      v44 = v113;
      v45 = v114;
      *(_OWORD *)(v42 + 56) = *(_OWORD *)v115;
      *(_OWORD *)(v42 + 40) = v45;
      *(_OWORD *)(v42 + 24) = v44;
      *(_OWORD *)(v42 + 8) = v43;
    }
  }
  if (LODWORD(v92[0]) >= 2)
    sub_22EF53BC0(v92);
  return v29 & 1;
}

uint64_t sub_22F050EE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 6;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  v5 = *(_QWORD *)(v3 + 32);
  LOBYTE(v11) = -77;
  if (byte_255E04EB3)
  {
    v10 = v5;
    sub_22F3F189C(179);
    v5 = v10;
  }
  v12 = v5;
  v11 = v11 & 0xFFFC00FF | (((*(_DWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
  v7 = a1[1];
  v6 = a1[2];
  v8 = *a1;
  if (v7)
    return sub_22F006CB0(v6, v8, v7, &v11, 0);
  else
    return sub_22F009DC4(v6, v8, &v11);
}

uint64_t sub_22F050FA0(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[9];
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32[2];
  void *v33[2];
  uint64_t v34[4];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 <= 0x13)
  {
    if (v10 == 3)
    {
      LODWORD(v42) = 0;
      LODWORD(v29[0]) = 0;
      v12 = 0;
      if (sub_22F009DC4(v29, *a1, *(_QWORD *)(a2 + 16)))
      {
        if (sub_22F02F148(*a1, (uint64_t)&v42, (uint64_t)v29, a2))
        {
          v17 = a1[2];
          if (v17 != (uint64_t *)&v42)
          {
            sub_22EF530AC((uint64_t)&v30, (uint64_t)&v42);
            if (*(_DWORD *)v17 >= 2u)
              sub_22EF53BC0(v17);
            *(_DWORD *)v17 = v30;
            v18 = *(_OWORD *)v31;
            v19 = *(_OWORD *)v32;
            v20 = *(_OWORD *)v33;
            *(_OWORD *)(v17 + 7) = *(_OWORD *)v34;
            *(_OWORD *)(v17 + 5) = v20;
            *(_OWORD *)(v17 + 3) = v19;
            *(_OWORD *)(v17 + 1) = v18;
          }
          v12 = 1;
        }
        else
        {
          v12 = 0;
        }
      }
      if (LODWORD(v29[0]) >= 2)
        sub_22EF53BC0(v29);
      goto LABEL_41;
    }
    if (v10 == 4)
    {
      v30 = 0;
      v31[0] = 0;
      v31[1] = 0;
      LODWORD(v32[0]) = -1;
      v33[0] = 0;
      v33[1] = &v34[1];
      v34[0] = 0x800000000;
      v39 = 0;
      v40 = 0;
      v24 = *(_QWORD *)(a2 + 16);
      v42 = *a1;
      BYTE8(v43) = 0;
      v12 = 0;
      if (sub_22F010358((int)&v42, v24, a3, a4, a5, a6, a7, a8, v29[0], v29[1], v29[2], v29[3], v29[4], v29[5], (void *)v29[6], v29[7], v29[8], 0, 0,
                           0,
                           v32[0],
                           v32[1],
                           0,
                           (uint64_t)&v34[1],
                           0x800000000,
                           v34[1],
                           v34[2],
                           v34[3],
                           v35,
                           v36,
                           v37,
                           v38,
                           0,
                           0,
                           v41,
                           (uint64_t)v42,
                           (uint64_t)&v30,
                           *((void **)&v43 + 1),
                           v44))
      {
        LODWORD(v29[0]) = 0;
        v12 = sub_22F0248D4(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v30, (uint64_t)v29, 0);
        if ((_DWORD)v12)
        {
          v25 = a1[2];
          if (v25 != v29)
          {
            sub_22EF530AC((uint64_t)&v42, (uint64_t)v29);
            if (*(_DWORD *)v25 >= 2u)
              sub_22EF53BC0(v25);
            *(_DWORD *)v25 = (_DWORD)v42;
            v26 = v43;
            v27 = v44;
            v28 = v45;
            *(_OWORD *)(v25 + 7) = v46;
            *(_OWORD *)(v25 + 5) = v28;
            *(_OWORD *)(v25 + 3) = v27;
            *(_OWORD *)(v25 + 1) = v26;
          }
        }
        if (LODWORD(v29[0]) >= 2)
          sub_22EF53BC0(v29);
      }
      if (v33[1] != &v34[1])
        free(v33[1]);
      return v12;
    }
    if (v10 != 5)
      goto LABEL_26;
    return sub_22F04EF10(a1, *(_QWORD *)(a2 + 16));
  }
  if (((*(_DWORD *)a2 >> 18) & 0x7Fu) <= 0x3D)
  {
    if (v10 != 20)
    {
      if (v10 != 61)
        goto LABEL_26;
LABEL_12:
      LODWORD(v42) = 0;
      v12 = sub_22F009DC4(&v42, *a1, *(_QWORD *)(a2 + 16));
      if ((_DWORD)v12)
      {
        v13 = a1[2];
        if (v13 != (uint64_t *)&v42)
        {
          sub_22EF530AC((uint64_t)&v30, (uint64_t)&v42);
          if (*(_DWORD *)v13 >= 2u)
            sub_22EF53BC0(v13);
          *(_DWORD *)v13 = v30;
          v14 = *(_OWORD *)v31;
          v15 = *(_OWORD *)v32;
          v16 = *(_OWORD *)v33;
          *(_OWORD *)(v13 + 7) = *(_OWORD *)v34;
          *(_OWORD *)(v13 + 5) = v16;
          *(_OWORD *)(v13 + 3) = v15;
          *(_OWORD *)(v13 + 1) = v14;
        }
      }
LABEL_41:
      if (v42 >= 2)
        sub_22EF53BC0((uint64_t *)&v42);
      return v12;
    }
    return sub_22F04EF10(a1, *(_QWORD *)(a2 + 16));
  }
  if (v10 != 62)
  {
    if (v10 != 66)
    {
LABEL_26:
      sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
      return 0;
    }
    goto LABEL_12;
  }
  v22 = a1[1];
  v21 = a1[2];
  v23 = *a1;
  if (v22)
    return sub_22F006CB0(v21, v23, v22, *(_QWORD *)(a2 + 16), 0);
  else
    return sub_22F009DC4(v21, v23, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22F051370(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  uint64_t v10;
  char v11;
  _QWORD v12[5];
  int v13;
  char v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD v24[4];
  __int128 v25;
  int v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD v29[33];
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43[10];

  v43[9] = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = 0;
  LODWORD(v43[0]) = 0;
  v9 = 0;
  v10 = 0;
  v12[0] = &off_24FAC58D8;
  v12[1] = a2;
  v3 = *(_QWORD *)(a2 + 2000);
  v4 = *(_BYTE *)(v3 + 180);
  v13 = *(_DWORD *)(v3 + 176);
  v14 = v4 & 1;
  v15[0] = &off_24FAC5960;
  v15[1] = v12;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v19 = &v20;
  v21 = 0x100000000;
  v22 = v24;
  v23 = 0x200000001;
  v24[0] = 1;
  v24[2] = 1;
  v26 = 0;
  v25 = 0u;
  v12[2] = &v9;
  v12[3] = v15;
  v12[4] = 0x200000001;
  v27 = v29;
  v28 = 0x1000000000;
  v31 = 0u;
  v32 = 0;
  v33 = 0;
  v35 = 0u;
  v30 = 0;
  v29[32] = 0u;
  v34 = &v35;
  v36 = 0;
  v37 = -1;
  v38 = 0x10000;
  v39 = 0;
  v40 = 0;
  v11 = 0;
  if (sub_22F008268(a1, (uint64_t)&v41, a2, &v11))
  {
    if (!v11)
      goto LABEL_8;
  }
  else if (!sub_22F007F4C(v12, a1, v43))
  {
    goto LABEL_8;
  }
  if (!(_BYTE)v41 && LODWORD(v43[0]) == 2)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_9;
  }
LABEL_8:
  sub_22F0D5A50((uint64_t)a1);
  v5 = v7 << 32;
  v6 = 2;
LABEL_9:
  sub_22F0052A4((uint64_t)v12);
  if (LODWORD(v43[0]) >= 2)
    sub_22EF53BC0(v43);
  return v6 | v5;
}

void sub_22F051558(uint64_t a1)
{
  sub_22F00AA08(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F05157C(uint64_t *a1, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t *v13;
  uint64_t result;
  int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _WORD *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  _WORD *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33[10];

  v33[9] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a1[3];
  if ((*((_DWORD *)v4 + 7) & 0x7F) == 0x37 || (*((_DWORD *)v4 + 7) & 0x7Eu) - 58 < 0xFFFFFFFC)
    goto LABEL_10;
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*v4 + 32))(a1[3]) + 80) & 0xE000) == 0x4000
    || (v4[5] & 7) == 6 && (*(_DWORD *)(v4[5] & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
  {
    v4 = (_QWORD *)a1[3];
LABEL_10:
    (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v4 + 88))(v4, a2);
    v6 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v6 < *((_QWORD *)a2 + 3))
    {
      v7 = 0;
      *((_QWORD *)a2 + 4) = v6 + 1;
      *v6 = 40;
      goto LABEL_14;
    }
    llvm::raw_ostream::write(a2);
    goto LABEL_13;
  }
  v28 = a1[4];
  if (v28)
  {
    LODWORD(v33[0]) = 0;
    sub_22F00676C(v28, (uint64_t)v33);
    sub_22EF53F70((uint64_t)v33, a2, *(_QWORD *)(a1[1] + 8) + 15104, *(_QWORD *)(a1[4] + 40));
    v29 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 1uLL)
    {
      *v29 = 15917;
      *((_QWORD *)a2 + 4) += 2;
      v30 = a2;
    }
    else
    {
      v30 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, "->");
    }
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)a1[3] + 88))(a1[3], v30);
    v31 = (_BYTE *)*((_QWORD *)v30 + 4);
    if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
    {
      llvm::raw_ostream::write(v30);
    }
    else
    {
      *((_QWORD *)v30 + 4) = v31 + 1;
      *v31 = 40;
    }
    if (LODWORD(v33[0]) >= 2)
      sub_22EF53BC0(v33);
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  v7 = 1;
LABEL_14:
  v8 = a1[3];
  v9 = *(unint64_t **)(v8 + 120);
  v10 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
    v12 = *(_BYTE *)(*(_QWORD *)v10 + 16) == 26;
  else
    v12 = 0;
  v13 = v9;
  if (!v12)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      sub_22F10CF48(v11);
      v32 = a1[3];
      v13 = *(unint64_t **)(v32 + 120);
      v10 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v13 = v9;
    }
  }
  result = *(_QWORD *)v10;
  v15 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16);
  if (result)
    v16 = v15 == 26;
  else
    v16 = 0;
  if (v16
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (result = sub_22F10CF48(result)) != 0)
  {
    v17 = (unsigned __int16)(*(_QWORD *)(result + 16) >> 38);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v13[v17];
  if (v9 != v18)
  {
    v19 = 0;
    do
    {
      if (v19 > v7)
      {
        v20 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v20 > 1uLL)
        {
          *v20 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ");
        }
      }
      v21 = *v9;
      result = (uint64_t)sub_22F009BD8(a1[1], a1[5], a1[6], *v9);
      if (result)
      {
        result = sub_22EF53F70(result, a2, *(_QWORD *)(a1[1] + 8) + 15104, *(_QWORD *)(v21 + 48));
      }
      else
      {
        v22 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v22) > 4)
        {
          *(_BYTE *)(v22 + 4) = 62;
          *(_DWORD *)v22 = 774778428;
          *((_QWORD *)a2 + 4) += 5;
        }
        else
        {
          result = llvm::raw_ostream::write(a2, "<...>");
        }
      }
      v23 = v7 ^ 1;
      if (v19)
        v23 = 1;
      if ((v23 & 1) == 0)
      {
        v24 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 1uLL)
        {
          *v24 = 15917;
          *((_QWORD *)a2 + 4) += 2;
          v25 = a2;
        }
        else
        {
          v25 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, "->");
        }
        result = (*(uint64_t (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)a1[3] + 88))(a1[3], v25);
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
        {
          result = llvm::raw_ostream::write(v25);
        }
        else
        {
          *((_QWORD *)v25 + 4) = v26 + 1;
          *v26 = 40;
        }
      }
      ++v9;
      ++v19;
    }
    while (v9 != v18);
  }
  v27 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2);
  *((_QWORD *)a2 + 4) = v27 + 1;
  *v27 = 41;
  return result;
}

uint64_t sub_22F0519D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_22F0519D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_22F0519E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F0519E8(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t result;

  while (2)
  {
    v3 = a2;
    v4 = *a2;
    if (a2 && (v4 & 0xFE) == 0x70)
    {
      v5 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F0535DC(a1, (uint64_t)a2);
        default:
          goto LABEL_4;
      }
    }
    if (a2 && v4 == 233)
    {
      v5 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x1F)
      {
        case 0:
        case 1:
          return sub_22F054A2C((uint64_t **)a1, (uint64_t)a2);
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xD:
          return sub_22F054408(a1, (int *)a2);
        case 6:
        case 0xA:
        case 0xC:
          a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
          continue;
        case 0xB:
          sub_22F024D28(*a1, *((_QWORD *)a2 + 2));
          sub_22F054BE8((uint64_t)a1, *((_QWORD *)v3 + 1));
          return 1;
        default:
LABEL_4:
          v4 = v5;
          break;
      }
    }
    break;
  }
  __asm { BR              X9 }
  return result;
}

uint64_t sub_22F0535DC(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t (***v9)(uint64_t);
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16[9];
  uint64_t v17[9];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  v5 = *(_QWORD *)(a2 + 16);
  if (v4 == 32)
  {
    sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
    return sub_22F0519E8(a1, *(_QWORD *)(a2 + 24));
  }
  v7 = *(_QWORD *)(a2 + 24);
  LODWORD(v17[0]) = 0;
  LODWORD(v16[0]) = 0;
  v8 = sub_22F009DC4(v17, *a1, v5);
  v9 = (uint64_t (***)(uint64_t))*a1;
  if ((v8 & 1) != 0)
  {
    if (sub_22F009DC4(v16, *a1, v7) && sub_22F041D0C((_QWORD *)*a1, a2, v4, (uint64_t)v17, (uint64_t)v16))
    {
      v10 = a1[1];
      if ((uint64_t *)v10 != v17)
      {
        sub_22EF530AC((uint64_t)&v18, (uint64_t)v17);
        if (*(_DWORD *)v10 >= 2u)
          sub_22EF53BC0((uint64_t *)v10);
        *(_DWORD *)v10 = v18;
        v11 = v19;
        v12 = v20;
        v13 = v21;
        *(_OWORD *)(v10 + 56) = v22;
        *(_OWORD *)(v10 + 40) = v13;
        *(_OWORD *)(v10 + 24) = v12;
        *(_OWORD *)(v10 + 8) = v11;
      }
      v14 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    v15 = (*v9)[5](*a1);
    *(_BYTE *)v9[2] |= v15;
    if (v15)
      sub_22F009DC4(v16, *a1, v7);
  }
  v14 = 0;
LABEL_14:
  if (LODWORD(v16[0]) >= 2)
    sub_22EF53BC0(v16);
  if (LODWORD(v17[0]) >= 2)
    sub_22EF53BC0(v17);
  return v14;
}

unint64_t sub_22F0537B4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  char v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92[9];
  uint64_t v93;
  void **v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[11];
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115[14];

  v115[12] = *MEMORY[0x24BDAC8D0];
  LODWORD(v92[0]) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v12 = *a2;
  v13 = (unsigned __int8 **)((char *)a2 + (v12 >> 24));
  v14 = *v13;
  if (*v13)
  {
    while (1)
    {
      v15 = v14;
      v16 = *v14;
      if (v16 > 213)
      {
        if (v16 == 233)
        {
          if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v18 = v15 + 16;
        }
        else
        {
          if (v16 != 214)
            goto LABEL_19;
          v18 = v15 + 24;
        }
      }
      else if (v16 == 155)
      {
        if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v15[48])
          v18 = v15 + 24;
        else
          v18 = v15 + 32;
      }
      else
      {
        if (v16 != 176)
          goto LABEL_19;
        v17 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v17 == -1)
          goto LABEL_19;
        v18 = &v15[8 * v17 + 40];
      }
      v14 = *(unsigned __int8 **)v18;
      if (v14 == v15)
        goto LABEL_19;
    }
  }
  v15 = 0;
LABEL_19:
  v19 = *((_QWORD *)v15 + 1);
  v111 = 0;
  v112 = 0uLL;
  LODWORD(v113) = -1;
  *(_QWORD *)&v114 = 0;
  *((_QWORD *)&v114 + 1) = &v115[1];
  v115[0] = 0x800000000;
  v20 = (uint64_t)&v13[((v12 >> 18) & 1) + 1];
  v115[10] = 0;
  v115[9] = 0;
  v21 = a2[4];
  v22 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 136839179;
  else
    v25 = 0;
  if (v25)
  {
    v33 = *v15;
    if (v33 == 188)
    {
      if (sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), &v111))
      {
        v91 = (uint64_t *)v20;
        v27 = *((_QWORD *)v15 + 3);
        if (v27 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((v15[2] & 8) != 0)
          {
            v32 = *((_QWORD *)v15 + 6) != 0;
LABEL_71:
            v90 = &v111;
LABEL_72:
            v47 = (_BYTE **)*a1;
            v48 = *(_QWORD *)(*a1 + 24);
            v49 = *(unsigned int *)(v48 + 92);
            v50 = (*(_DWORD *)(v48 + 120) + 1);
            *(_DWORD *)(v48 + 120) = v50;
            v89 = v49 | (v50 << 32);
            v51 = sub_22F0279B4((uint64_t)v91, v21, v27, v89, v47, v27, 0);
            LOBYTE(v29) = 0;
            v26 = v27;
            if (!v51)
              goto LABEL_58;
LABEL_73:
            v87 = v26;
            v101 = &v103;
            v102 = 0x400000000;
            if (!v90)
            {
LABEL_100:
              if (v27 && (*(_DWORD *)(v27 + 28) & 0x7F) == 0x39)
              {
                v65 = (uint64_t *)*a1;
                v66 = *(_WORD *)(v27 + 80) & 0x7F;
                v67 = -40;
                if (v66 > 0x46)
                {
                  switch(v66)
                  {
                    case 'S':
                      goto LABEL_123;
                    case 'G':
                      v67 = -56;
                      goto LABEL_123;
                    case 'Q':
LABEL_123:
                      v72 = *(_QWORD *)(v27 + 72 + v67 + 16);
                      v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
                      if ((v72 & 4) != 0)
                        v73 = (_QWORD *)*v73;
                      if (v73)
                        v74 = (uint64_t)(v73 - 8);
                      else
                        v74 = 0;
                      v75 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v74);
                      if (!sub_22F027138(v65, (uint64_t)a2, (uint64_t)v90, v75))
                        goto LABEL_110;
LABEL_129:
                      LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
LABEL_130:
                      if (v101 != &v103)
                        free(v101);
                      goto LABEL_58;
                  }
                }
                else
                {
                  if (v66 <= 0x18)
                  {
                    if (v66 == 16)
                    {
LABEL_105:
                      v67 = -48;
                      goto LABEL_123;
                    }
                    if (((1 << v66) & 0x1066) != 0)
                      goto LABEL_123;
                    if (v66 == 24)
                      goto LABEL_105;
                  }
                  if (v66 == 70)
                  {
LABEL_121:
                    v67 = -64;
                    goto LABEL_123;
                  }
                }
                if (v66 - 52 >= 6)
                {
                  if (v66 - 33 >= 5)
                    goto LABEL_105;
                  goto LABEL_121;
                }
                v67 = -72;
                goto LABEL_123;
              }
              v93 = 0;
              v68 = (unsigned __int8 *)sub_22EFBF910(v27, &v93);
              v69 = (_QWORD *)*a1;
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F028A44(v69, v70, (_QWORD *)v27, v93, (uint64_t)v68))
              {
                sub_22EFF605C((uint64_t)a2);
                if (sub_22F00B12C(v71, v93, (uint64_t)v90, v91, v21, v87, v89, v68, (uint64_t *)*a1, (uint64_t)v92, 0)
                  && (!(_DWORD)v102
                   || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v92, v101, v102)))
                {
                  goto LABEL_129;
                }
              }
LABEL_110:
              LOBYTE(v29) = 0;
              goto LABEL_130;
            }
            if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 >= 4)
              v52 = 0;
            else
              v52 = (_DWORD *)v27;
            if (v52)
            {
              v53 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 32))(v52);
              if ((*(_BYTE *)(v53 + 82) & 0xC) != 0)
              {
                if (v32)
                  goto LABEL_80;
LABEL_99:
                v27 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v90, (uint64_t)v52, (uint64_t)&v101);
                if (!v27)
                  goto LABEL_110;
                goto LABEL_100;
              }
              if (sub_22EFD7260(v53))
                v64 = v32;
              else
                v64 = 1;
              if ((v64 & 1) == 0)
                goto LABEL_99;
            }
LABEL_80:
            if ((v52[7] & 0x7F) == 0x39)
              v54 = 9;
            else
              v54 = 5;
            if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v90, v54, 0))
              goto LABEL_110;
            goto LABEL_100;
          }
LABEL_70:
          v32 = 0;
          goto LABEL_71;
        }
        goto LABEL_44;
      }
    }
    else if ((v33 & 0xFE) == 0x70)
    {
      v91 = (uint64_t *)v20;
      v34 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v15, (uint64_t)&v111, 0);
      if (v34)
      {
        v27 = v34;
        if ((*(_DWORD *)(v34 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
          goto LABEL_70;
LABEL_44:
        v35 = (uint64_t *)*a1;
LABEL_55:
        v36 = (uint64_t)v15;
        goto LABEL_56;
      }
    }
    else
    {
      v35 = (uint64_t *)*a1;
      if (v33 != 129)
        goto LABEL_55;
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*v35 + 96))(v35) + 2000) + 1) & 0x10) == 0)
      {
        v37 = (uint64_t *)*a1;
        sub_22EFF605C((uint64_t)v15);
        sub_22F072D74((uint64_t)v37, v38, 2266, 0);
      }
      if (sub_22F0098FC(*a1, *((_QWORD *)v15 + 2), &v111))
      {
        v39 = 0;
        v40 = *((_QWORD *)v15 + 8);
        if ((v40 & 1) == 0)
        {
          v41 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFELL);
          if (v41)
            v39 = *v41;
        }
        LOBYTE(v29) = sub_22F027138((uint64_t *)*a1, (uint64_t)v15, (uint64_t)&v111, v39);
        goto LABEL_58;
      }
    }
LABEL_57:
    LOBYTE(v29) = 0;
    goto LABEL_58;
  }
  if (*(_BYTE *)(v23 + 16) != 39 && (*(_DWORD *)(v24 + 16) != 39 || (v23 = sub_22F10CF48(v23)) == 0)
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 > 1)
  {
    v35 = (uint64_t *)*a1;
    v36 = (uint64_t)a2;
LABEL_56:
    sub_22F072CEC((uint64_t)v35, v36, 103, 0);
    goto LABEL_57;
  }
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 |= 1u;
  v105 = 0;
  v106 = v108;
  v107 = 0x800000000;
  v109 = 0;
  v110 = 0;
  v93 = *a1;
  v94 = &v101;
  LOBYTE(v95) = 0;
  v91 = (uint64_t *)v20;
  if (!sub_22F00C45C(&v93, v15, v6, v7, v8, v9, v10, v11))
  {
LABEL_28:
    v26 = 0;
    v89 = 0;
    v27 = 0;
LABEL_29:
    v28 = 0;
    v90 = 0;
    LOBYTE(v29) = 0;
    goto LABEL_30;
  }
  if (v103
    || (v101 & 3) != 0
    || (v27 = (unint64_t)v101 & 0xFFFFFFFFFFFFFFFCLL, ((unint64_t)v101 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    || (*(_DWORD *)(v27 + 28) & 0x7Eu) - 52 >= 6)
  {
    sub_22F072CEC(*a1, (uint64_t)v15, 103, 0);
    goto LABEL_28;
  }
  v55 = *(_QWORD *)(*a1 + 8);
  v56 = sub_22F10ACF8(*v22);
  if (!sub_22EF5F5D4(v55, v56, *(_QWORD *)(v27 + 48)))
  {
    sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
    v26 = 0;
    v89 = 0;
    goto LABEL_29;
  }
  v57 = *(unsigned __int8 *)a2;
  if (v57 == 141)
  {
    v58 = a2[1] & 0x3F;
    if (v58 - 18 < 8 || (v29 = 0, v88 = 0, v58 <= 0x1D) && ((1 << v58) & 0x30008000) != 0)
    {
      v59 = (uint64_t *)*a1;
      v60 = *(_QWORD *)(*a1 + 24);
      v61 = *(unsigned int *)(v60 + 92);
      v62 = (*(_DWORD *)(v60 + 120) + 1);
      *(_DWORD *)(v60 + 120) = v62;
      v29 = v61 | (v62 << 32);
      v63 = (*(_DWORD *)(v27 + 28) & 0x7Eu) - 54 < 4;
      if (!sub_22F0279B4((uint64_t)&v91[v63], v21 - v63, v27, v29, (_BYTE **)v59, v27, 1))
      {
        v89 = v29;
        v28 = 0;
        v90 = 0;
        LOBYTE(v29) = 0;
        v26 = v27;
        goto LABEL_30;
      }
      v88 = v27;
    }
  }
  else
  {
    v88 = 0;
    v29 = 0;
  }
  v89 = v29;
  if ((*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27) + 80) & 0xE000) != 0x4000
      && ((*(_QWORD *)(v27 + 40) & 7) != 6
       || (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
    {
      v78 = (uint64_t *)*a1;
      if ((_DWORD)v21)
      {
        if (sub_22F0098FC(v78, *v91, &v111))
        {
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
          if (v57 == 141
            && (**(_QWORD **)(v79 + 2000) & 0x1000) != 0
            && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
            && (*(_BYTE *)(v27 + 82) & 0x80) != 0)
          {
            v90 = &v111;
            if (!sub_22F013A2C((uint64_t *)*a1, (unsigned __int8 *)*v91, (uint64_t)&v111))
            {
              v28 = 0;
              goto LABEL_162;
            }
          }
          --v21;
          v90 = &v111;
          ++v91;
          goto LABEL_157;
        }
      }
      else
      {
        sub_22F072CEC((uint64_t)v78, (uint64_t)a2, 103, 0);
        v21 = 0;
      }
LABEL_161:
      v28 = 0;
      v90 = 0;
LABEL_162:
      LOBYTE(v29) = 0;
      goto LABEL_191;
    }
    if (sub_22EFD799C(v27))
    {
      v76 = *(_WORD *)(v27 + 80) & 0x7F;
      v77 = -40;
      if (v76 > 0x46)
      {
        switch(v76)
        {
          case 'S':
            goto LABEL_180;
          case 'G':
            v77 = -56;
            goto LABEL_180;
          case 'Q':
LABEL_180:
            v80 = *(_QWORD *)(v27 + 72 + v77 + 16);
            v81 = (_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8);
            if ((v80 & 4) != 0)
              v81 = (_QWORD *)*v81;
            if (v81)
              v29 = (unint64_t)(v81 - 8);
            else
              v29 = 0;
            v82 = sub_22EFD462C(v29);
            if (v82 && (*(_DWORD *)(v82 + 28) & 0x7F) == 0x1D)
              v82 = *(_QWORD *)(v82 + 48);
            v83 = *(_QWORD *)(v29 + 128);
            if (v83 && ((*(unsigned __int16 *)(v83 + 8) | (*(unsigned __int8 *)(v83 + 10) << 16)) & 0x100000) != 0)
            {
              if ((*(_BYTE *)(v83 + 104) & 4) != 0)
              {
                v84 = *(_QWORD *)((*(_QWORD *)(v27 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                v85 = *(_QWORD *)(v82 + 144);
                if ((v85 & 6) != 0)
                  v86 = 0;
                else
                  v86 = v85 & 0xFFFFFFFFFFFFFFF8;
                v93 = 0;
                v27 = sub_22EFE9880(v86, *(_QWORD *)v84, *(unsigned int *)(v84 + 8), (uint64_t)&v93);
                v90 = 0;
                v28 = 1;
              }
              else
              {
                v90 = 0;
                v28 = 1;
                v27 = v82;
              }
              v26 = v88;
              goto LABEL_30;
            }
            v90 = 0;
            v28 = 1;
            v27 = v82;
LABEL_191:
            v26 = v88;
            goto LABEL_30;
        }
      }
      else
      {
        if (v76 <= 0x18)
        {
          if (v76 == 16)
            goto LABEL_146;
          if (((1 << v76) & 0x1066) != 0)
            goto LABEL_180;
          if (v76 == 24)
          {
LABEL_146:
            v77 = -48;
            goto LABEL_180;
          }
        }
        if (v76 == 70)
        {
LABEL_178:
          v77 = -64;
          goto LABEL_180;
        }
      }
      if (v76 - 52 < 6)
      {
        v77 = -72;
        goto LABEL_180;
      }
      if (v76 - 33 < 5)
        goto LABEL_178;
      goto LABEL_146;
    }
  }
  if (!sub_22EFBFDCC(v27, 0, 0))
  {
    v90 = 0;
LABEL_157:
    v28 = 1;
    goto LABEL_191;
  }
  if ((*(_QWORD *)(v27 + 40) & 7) != 6 || (*(_DWORD *)(*(_QWORD *)(v27 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) != 3)
  {
    if (sub_22F02836C(*a1, a2))
    {
      LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
      v28 = 0;
      v90 = 0;
      v5 = -1;
      goto LABEL_191;
    }
    goto LABEL_161;
  }
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 |= 1u;
  v97 = 0;
  v98 = v100;
  v99 = 0x800000000;
  v100[8] = 0;
  v100[9] = 0;
  if (sub_22F027C94(*a1, a2, (uint64_t)&v93))
  {
    sub_22F00676C((uint64_t)&v93, (uint64_t)v92);
    LOBYTE(v29) = sub_22F02D738(v4, 1, v5);
    v5 = -1;
  }
  else
  {
    LOBYTE(v29) = 0;
  }
  v26 = v88;
  if (v98 != v100)
  {
    free(v98);
    v26 = v88;
  }
  v28 = 0;
  v90 = 0;
LABEL_30:
  if (v106 != v108)
  {
    v30 = v21;
    v31 = v26;
    free(v106);
    v26 = v31;
    v21 = v30;
  }
  if ((v28 & 1) != 0)
  {
    v32 = 0;
    if (v26)
      goto LABEL_73;
    goto LABEL_72;
  }
LABEL_58:
  if (*((uint64_t **)&v114 + 1) != &v115[1])
    free(*((void **)&v114 + 1));
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v29 & 1) != 0)
  {
    v42 = a1[1];
    if ((uint64_t *)v42 != v92)
    {
      sub_22EF530AC((uint64_t)&v111, (uint64_t)v92);
      if (*(_DWORD *)v42 >= 2u)
        sub_22EF53BC0((uint64_t *)v42);
      *(_DWORD *)v42 = v111;
      v43 = v112;
      v44 = v113;
      v45 = v114;
      *(_OWORD *)(v42 + 56) = *(_OWORD *)v115;
      *(_OWORD *)(v42 + 40) = v45;
      *(_OWORD *)(v42 + 24) = v44;
      *(_OWORD *)(v42 + 8) = v43;
    }
  }
  if (LODWORD(v92[0]) >= 2)
    sub_22EF53BC0(v92);
  return v29 & 1;
}

uint64_t sub_22F054408(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  llvm::APFloatBase *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  void **p_b;
  uint64_t v33;
  int v34;
  unint64_t v35;
  void *v36;
  _BOOL8 v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t *v44;
  void *v45;
  unsigned int v46;
  BOOL v47;
  void *__b;
  unsigned int v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  _OWORD v56[3];
  uint64_t v57;
  _BYTE v58[64];
  char v59;
  char *v60;
  uint64_t v61;
  _BYTE v62[288];
  uint64_t v63[11];

  v63[9] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) - 57 > 0xFFFFFFFD;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v5 + 32);
  v8 = *a2;
  LODWORD(v63[0]) = 0;
  v9 = sub_22F009DC4(v63, *a1, v4);
  v10 = v63[0];
  if (v9)
    v11 = LODWORD(v63[0]) == 7;
  else
    v11 = 1;
  if (v11)
  {
    v12 = 0;
    goto LABEL_87;
  }
  v13 = v62;
  v60 = v62;
  v61 = 0x400000000;
  if (!*(_DWORD *)(v5 + 20))
  {
    v38 = 0;
    goto LABEL_79;
  }
  v14 = 0;
  v15 = 0;
  v44 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v16 = ((v8 >> 18) & 0x1F) - 6;
  while (2)
  {
    v17 = *(_QWORD *)(*a1 + 8);
    v18 = (llvm::APFloatBase *)sub_22EF530AC((uint64_t)&v54, v63[1] + v14);
    switch(v16)
    {
      case 0:
        goto LABEL_51;
      case 1:
        if ((_DWORD)v54 != 2)
        {
          v33 = *((_QWORD *)&v55 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble(v18) == v33)
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v55 + 8));
          else
            llvm::detail::IEEEFloat::changeSign((llvm::detail::IEEEFloat *)((char *)&v55 + 8));
          goto LABEL_51;
        }
        if (DWORD2(v55) > 0x40)
          goto LABEL_72;
        v19 = ~(_QWORD)v55;
        if (DWORD2(v55))
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v55);
        else
          v20 = 0;
        goto LABEL_49;
      case 2:
        if (DWORD2(v55) > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v55);
        }
        else
        {
          if (DWORD2(v55))
            v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v55);
          else
            v21 = 0;
          *(_QWORD *)&v55 = v21 & ~(_QWORD)v55;
        }
        goto LABEL_51;
      case 3:
        if ((_DWORD)v54 != 2)
        {
          v25 = sub_22EF6A330(v17, v7);
          v26 = sub_22F110B50(*v44);
          v49 = v25;
          v27 = v7;
          if (v25 > 0x40)
          {
            v37 = v26;
            llvm::APInt::initSlowCase((llvm::APInt *)&__b);
            v26 = v37;
            v25 = v49;
          }
          else
          {
            __b = 0;
          }
          v50 = v26;
          v28 = *((_QWORD *)&v55 + 1);
          v29 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v26);
          v30 = (_BYTE *)(*(_QWORD *)&v56[0] + 28);
          if (v29 != v28)
            v30 = (char *)v56 + 12;
          if ((*v30 & 7) != 3)
          {
            if (v25 <= 0x40)
            {
              v36 = 0;
              __b = 0;
              v7 = v27;
              goto LABEL_63;
            }
            bzero(__b, (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8);
            v7 = v27;
LABEL_61:
            v25 = v49;
            v46 = v49;
            if (v49 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v45, (const llvm::APInt *)&__b);
              v25 = v46;
              v36 = v45;
LABEL_65:
              v47 = v50;
              v46 = 0;
              LODWORD(v57) = 2;
              *(_QWORD *)v58 = v36;
              *(_DWORD *)&v58[8] = v25;
              v58[12] = v50;
              *(_OWORD *)&v58[13] = v51;
              *(_OWORD *)&v58[29] = v52;
              *(_OWORD *)&v58[45] = v53[0];
              *(_DWORD *)&v58[60] = *(_DWORD *)((char *)v53 + 15);
              v59 = 1;
              if (v49 >= 0x41 && __b)
                MEMORY[0x2348A0E84](__b, 0x1000C8000313F17);
LABEL_68:
              if (v54 >= 2)
                sub_22EF53BC0(&v54);
              goto LABEL_52;
            }
            v36 = __b;
LABEL_63:
            v45 = v36;
            goto LABEL_65;
          }
          if (v25 > 0x40)
          {
            memset(__b, 255, (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8);
            v25 = v49;
          }
          else
          {
            __b = (void *)-1;
          }
          v7 = v27;
          if (v25)
          {
            v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
            if (v25 >= 0x41)
            {
              p_b = (void **)((char *)__b + 8 * (((unint64_t)v25 + 63) >> 6) - 8);
              goto LABEL_42;
            }
          }
          else
          {
            v31 = 0;
          }
          p_b = &__b;
LABEL_42:
          *p_b = (void *)((unint64_t)*p_b & v31);
          goto LABEL_61;
        }
        v22 = DWORD2(v55);
        if (DWORD2(v55) <= 0x40)
        {
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v55);
          if (DWORD2(v55))
            v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v55);
          else
            LOBYTE(v23) = 0;
          v24 = v23 & ((_QWORD)v55 == 0);
          goto LABEL_47;
        }
        v34 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v55);
        *(_QWORD *)v55 = v34 == (_DWORD)v22;
        bzero((void *)(v55 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
        LODWORD(v22) = DWORD2(v55);
        if (DWORD2(v55) <= 0x40)
        {
          v24 = v55;
          v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v55);
LABEL_47:
          v19 = ~v24;
          if (!(_DWORD)v22)
            v20 = 0;
LABEL_49:
          *(_QWORD *)&v55 = v20 & v19;
          goto LABEL_50;
        }
LABEL_72:
        llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v55);
LABEL_50:
        llvm::APInt::operator++();
LABEL_51:
        LODWORD(v57) = v54;
        *(_OWORD *)v58 = v55;
        *(_OWORD *)&v58[16] = v56[0];
        *(_OWORD *)&v58[32] = v56[1];
        *(_OWORD *)&v58[48] = v56[2];
        LODWORD(v54) = 0;
        v59 = 1;
LABEL_52:
        if (!v59)
        {
          v12 = 0;
          goto LABEL_86;
        }
        v35 = sub_22E7B6504((uint64_t)&v60, (unint64_t)&v57, 1);
        sub_22EF530AC((uint64_t)&v60[72 * v61], v35);
        LODWORD(v61) = v61 + 1;
        if (v59 && v57 >= 2)
          sub_22EF53BC0(&v57);
        ++v15;
        v14 += 72;
        if (v15 < *(unsigned int *)(v5 + 20))
          continue;
        v13 = v60;
        v38 = v61;
LABEL_79:
        *((_QWORD *)&v51 + 1) = 0;
        LODWORD(v52) = 0;
        LODWORD(v51) = 8;
        sub_22EF53920((uint64_t)&v51, v13, v38);
        v39 = a1[1];
        if ((__int128 *)v39 != &v51)
        {
          sub_22EF530AC((uint64_t)&v57, (uint64_t)&v51);
          if (*(_DWORD *)v39 >= 2u)
            sub_22EF53BC0((uint64_t *)v39);
          *(_DWORD *)v39 = v57;
          v40 = *(_OWORD *)v58;
          v41 = *(_OWORD *)&v58[16];
          v42 = *(_OWORD *)&v58[32];
          *(_OWORD *)(v39 + 56) = *(_OWORD *)&v58[48];
          *(_OWORD *)(v39 + 40) = v42;
          *(_OWORD *)(v39 + 24) = v41;
          *(_OWORD *)(v39 + 8) = v40;
        }
        if (v51 >= 2)
          sub_22EF53BC0((uint64_t *)&v51);
        v12 = 1;
LABEL_86:
        sub_22E7FCE7C(&v60);
        v10 = v63[0];
LABEL_87:
        if (v10 >= 2)
          sub_22EF53BC0(v63);
        return v12;
      default:
        LOBYTE(v57) = 0;
        v59 = 0;
        goto LABEL_68;
    }
  }
}

uint64_t sub_22F054A2C(uint64_t **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17[9];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24[3];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(**a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t *))(**a1 + 40))(*a1) & 1) != 0)
  {
    memset(v18, 0, sizeof(v18));
    LODWORD(v19) = -1;
    v21 = 0;
    v22 = v24;
    v23 = 0x800000000;
    v29 = 0;
    v30 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v32 = *a1;
    BYTE8(v33) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v32, v10, v4, v5, v6, v7, v8, v9, v17[0], v17[1], v17[2], v17[3], v17[4], v17[5], (void *)v17[6], v17[7], v17[8], 0, 0,
                         0,
                         v19,
                         v20,
                         0,
                         (uint64_t)v24,
                         0x800000000,
                         v24[0],
                         v24[1],
                         v24[2],
                         v25,
                         v26,
                         v27,
                         v28,
                         0,
                         0,
                         v31,
                         (uint64_t)v32,
                         (uint64_t)v18,
                         *((void **)&v33 + 1),
                         v34))
    {
      LODWORD(v17[0]) = 0;
      v11 = sub_22F01BB7C(*a1, a2, (uint64_t)v18, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, v17);
      if ((_DWORD)v11)
      {
        v12 = a1[1];
        if (v12 != v17)
        {
          sub_22EF530AC((uint64_t)&v32, (uint64_t)v17);
          if (*(_DWORD *)v12 >= 2u)
            sub_22EF53BC0(v12);
          *(_DWORD *)v12 = (_DWORD)v32;
          v13 = v33;
          v14 = v34;
          v15 = v35;
          *(_OWORD *)(v12 + 7) = v36;
          *(_OWORD *)(v12 + 5) = v15;
          *(_OWORD *)(v12 + 3) = v14;
          *(_OWORD *)(v12 + 1) = v13;
        }
      }
      if (LODWORD(v17[0]) >= 2)
        sub_22EF53BC0(v17);
    }
    if (v22 != v24)
      free(v22);
  }
  else
  {
    sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

void sub_22F054BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  llvm::APFloatBase *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char *v19;
  _OWORD v20[18];
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) - 57 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v3 + 32);
  LODWORD(v24) = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = v7 == 11;
  else
    v8 = 0;
  if (v8)
  {
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (!v6 || v7 != 44)
  {
    if (v7 == 9)
      goto LABEL_17;
LABEL_20:
    v13 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*(_QWORD *)a1 + 8), v5);
    v14 = llvm::APFloatBase::PPCDoubleDouble(v13);
    if ((llvm::APFloatBase *)v14 == v13)
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    if (v14 == v22)
      llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v22);
    else
      llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v22);
    sub_22E7B656C(&v19, (uint64_t)v21);
    if (v24 >= 2)
      sub_22EF53BC0(&v24);
    LODWORD(v24) = (_DWORD)v19;
    v25 = v20[0];
    v26 = v20[1];
    v27 = v20[2];
    v28 = v20[3];
    LODWORD(v19) = 0;
    if (v14 == v22)
      sub_22E463170((llvm::APFloatBase *)&v23);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v22);
    goto LABEL_28;
  }
  v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
  if ((*(_BYTE *)(v9 + 74) & 1) == 0 && *(_QWORD *)(v9 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_20;
  }
LABEL_17:
  sub_22EADFE6C(*(_QWORD *)(*(_QWORD *)a1 + 8), 0, v5, (uint64_t)&v16);
  v10 = v17;
  v11 = v16;
  v17 = 0;
  v12 = v18;
  if (v24 > 1)
  {
    sub_22EF53BC0(&v24);
    LODWORD(v24) = 2;
    *(_QWORD *)&v25 = v11;
    DWORD2(v25) = v10;
    BYTE12(v25) = v12;
    if (v17 >= 0x41 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
  else
  {
    LODWORD(v24) = 2;
    *(_QWORD *)&v25 = v16;
    DWORD2(v25) = v10;
    BYTE12(v25) = v18;
  }
LABEL_28:
  v15 = *(unsigned int *)(v3 + 20);
  v19 = (char *)v20 + 8;
  *(_QWORD *)&v20[0] = 0x400000000;
  sub_22F054F7C((uint64_t)&v19, v15, (uint64_t)&v24);
  sub_22F054ED0(a1, v19, v20[0]);
  sub_22E7FCE7C(&v19);
  if (v24 >= 2)
    sub_22EF53BC0(&v24);
}

__n128 sub_22F054ED0(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  int v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9.n128_u64[0] = 0;
  v9.n128_u32[2] = 0;
  v8 = 8;
  sub_22EF53920((uint64_t)&v8, a2, a3);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)v4 >= 2u)
    sub_22EF53BC0((uint64_t *)v4);
  *(_DWORD *)v4 = v8;
  result = v9;
  v6 = v10;
  v7 = v11;
  *(_OWORD *)(v4 + 56) = v12;
  *(_OWORD *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 24) = v6;
  *(__n128 *)(v4 + 8) = result;
  return result;
}

void sub_22F054F7C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        if (v8 != a3)
        {
          sub_22EF530AC((uint64_t)&v18, a3);
          if (*(_DWORD *)v8 >= 2u)
            sub_22EF53BC0((uint64_t *)v8);
          *(_DWORD *)v8 = v18;
          v9 = v19;
          v10 = v20;
          v11 = v21;
          *(_OWORD *)(v8 + 56) = v22;
          *(_OWORD *)(v8 + 40) = v11;
          *(_OWORD *)(v8 + 24) = v10;
          *(_OWORD *)(v8 + 8) = v9;
        }
        v8 += 72;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v12 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v15 = 9 * v6;
        v16 = 72 * a2 - 8 * v15;
        v17 = (uint64_t *)(*(_QWORD *)a1 + 8 * v15 - 72);
        do
        {
          if (*(_DWORD *)v17 >= 2u)
            sub_22EF53BC0(v17);
          v17 -= 9;
          v16 += 72;
        }
        while (v16);
      }
    }
    else
    {
      v13 = *(_QWORD *)a1 + 72 * v6;
      do
        v13 = sub_22EF530AC(v13, a3) + 72;
      while (!__CFADD__(v12++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    sub_22F055120((uint64_t *)a1, a2, a3);
  }
}

void sub_22F055120(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = v6;
  v8 = a2;
  do
  {
    v6 = sub_22EF530AC(v6, a3) + 72;
    --v8;
  }
  while (v8);
  v9 = (char *)*a1;
  v10 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    v12 = v9 - 72;
    do
    {
      if (*(_DWORD *)&v12[v11] >= 2u)
        sub_22EF53BC0((uint64_t *)&v12[v11]);
      v11 -= 72;
    }
    while (v11);
    v9 = (char *)*a1;
  }
  if (v9 != (char *)(a1 + 2))
    free(v9);
  *a1 = v7;
  *((_DWORD *)a1 + 2) = a2;
  *((_DWORD *)a1 + 3) = 0;
}

uint64_t sub_22F0551E4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  llvm::APFloatBase *v22;
  int v23;
  llvm::APFloatBase *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  llvm::APFloatBase *v57;
  uint64_t v58;
  llvm::APFloatBase *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::APFloatBase *v76;
  uint64_t v77;
  llvm::APFloatBase *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[2];
  uint64_t v83;
  uint64_t v84[2];
  uint64_t v85[2];
  void *v86[2];
  uint64_t v87[31];
  char v88[8];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[56];
  llvm::APFloatBase *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 16) - 57 > 0xFFFFFFFD;
  else
    v11 = 0;
  if (!v11)
    v10 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(unsigned int *)(v10 + 20);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v14 <= 0x13)
  {
    switch(v14)
    {
      case 1u:
      case 0xAu:
        LODWORD(v92) = 1;
        v91 = 0;
        if (!sub_22F035A74(*a1, v13, (llvm::APInt *)&v91))
        {
          v37 = 0;
          goto LABEL_141;
        }
        v15 = *(_QWORD *)(v10 + 32);
        v16 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
        v17 = *(_QWORD *)(*a1 + 8);
        v18 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 15088) + 80);
        v83 = (uint64_t)&v84[1];
        v84[0] = 0x400000000;
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v20 = *(_DWORD *)(v19 + 16);
        if (v19)
          v21 = v20 == 11;
        else
          v21 = 0;
        if (v21 && ((v20 >> 19) & 0x1FE) - 210 <= 7)
        {
          v22 = (llvm::APFloatBase *)sub_22EF5B2E0(v17, v15);
          llvm::APFloatBase::x87DoubleExtended(v22);
          if ((_DWORD)v12)
          {
            v23 = 0;
            do
            {
              LODWORD(v79) = 1;
              v78 = 0;
              if (v18)
                llvm::APInt::rotl((llvm::APInt *)&v91);
              else
                llvm::APInt::rotr((llvm::APInt *)&v91);
              v24 = (llvm::APFloatBase *)llvm::APInt::trunc((llvm::APInt *)&v76);
              if (v79 >= 0x41)
              {
                v24 = v78;
                if (v78)
                  v24 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
              }
              v78 = v94;
              LODWORD(v79) = v95;
              LODWORD(v95) = 0;
              if (v77 >= 0x41)
              {
                v24 = v76;
                if (v76)
                  v24 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v76, 0x1000C8000313F17);
              }
              v25 = llvm::APFloatBase::PPCDoubleDouble(v24);
              if ((llvm::APFloatBase *)v25 == v22)
                MEMORY[0x23489F288](&v81, v22, &v78);
              else
                llvm::detail::IEEEFloat::IEEEFloat();
              sub_22E7B656C(&v94, (uint64_t)&v80);
              v26 = sub_22E7B6504((uint64_t)&v83, (unint64_t)&v94, 1);
              v27 = v83 + 72 * LODWORD(v84[0]);
              *(_DWORD *)v27 = *(_DWORD *)v26;
              v28 = *(_OWORD *)(v26 + 8);
              v29 = *(_OWORD *)(v26 + 24);
              v30 = *(_OWORD *)(v26 + 40);
              *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
              *(_OWORD *)(v27 + 40) = v30;
              *(_OWORD *)(v27 + 24) = v29;
              *(_OWORD *)(v27 + 8) = v28;
              *(_DWORD *)v26 = 0;
              ++LODWORD(v84[0]);
              if (v94 >= 2)
                sub_22EF53BC0((uint64_t *)&v94);
              if (v25 == v81)
                sub_22E463170((llvm::APFloatBase *)v82);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v81);
              if (v79 >= 0x41 && v78)
                MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
              v23 += v16;
              LODWORD(v12) = v12 - 1;
            }
            while ((_DWORD)v12);
          }
LABEL_138:
          sub_22F054ED0((uint64_t)a1, (_QWORD *)v83, v84[0]);
          v37 = 1;
          goto LABEL_140;
        }
        if (v20 == 9)
          goto LABEL_115;
        if (v20 == 44)
        {
          v62 = sub_22F114198(*(_QWORD *)(v19 + 24));
          if ((*(_BYTE *)(v62 + 74) & 1) == 0 && *(_QWORD *)(v62 + 128) < 8uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 76) & 0x80) != 0)
          {
LABEL_139:
            sub_22F072CEC(*a1, a2, 103, 0);
            v37 = 0;
LABEL_140:
            sub_22E7FCE7C((char **)&v83);
LABEL_141:
            if (v92 >= 0x41)
            {
              if (v91)
                MEMORY[0x2348A0E84](v91, 0x1000C8000313F17);
            }
            return v37;
          }
        }
        else if (v20 != 11 || ((v20 >> 19) & 0x1FE) - 166 >= 0x14)
        {
          goto LABEL_139;
        }
LABEL_115:
        if ((_DWORD)v12)
        {
          v63 = 0;
          do
          {
            LODWORD(v79) = 1;
            v78 = 0;
            if (v18)
              llvm::APInt::rotl((llvm::APInt *)&v91);
            else
              llvm::APInt::rotr((llvm::APInt *)&v91);
            llvm::APInt::zextOrTrunc((llvm::APInt *)&v76);
            if (v79 >= 0x41 && v78)
              MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
            v78 = v94;
            LODWORD(v79) = v95;
            LODWORD(v95) = 0;
            if (v77 >= 0x41 && v76)
              MEMORY[0x2348A0E84](v76, 0x1000C8000313F17);
            LODWORD(v75) = v79;
            if (v79 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const llvm::APInt *)&v78);
            else
              v74 = (uint64_t)v78;
            v64 = sub_22F110930(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
            v65 = v75;
            LODWORD(v75) = 0;
            LODWORD(v94) = 2;
            *(_QWORD *)&v95 = v74;
            DWORD2(v95) = v65;
            BYTE12(v95) = !v64;
            v66 = sub_22E7B6504((uint64_t)&v83, (unint64_t)&v94, 1);
            v67 = v83 + 72 * LODWORD(v84[0]);
            *(_DWORD *)v67 = *(_DWORD *)v66;
            v68 = *(_OWORD *)(v66 + 8);
            v69 = *(_OWORD *)(v66 + 24);
            v70 = *(_OWORD *)(v66 + 40);
            *(_OWORD *)(v67 + 56) = *(_OWORD *)(v66 + 56);
            *(_OWORD *)(v67 + 40) = v70;
            *(_OWORD *)(v67 + 24) = v69;
            *(_OWORD *)(v67 + 8) = v68;
            *(_DWORD *)v66 = 0;
            ++LODWORD(v84[0]);
            if (v94 >= 2)
              sub_22EF53BC0((uint64_t *)&v94);
            if (v75 >= 0x41 && v74)
              MEMORY[0x2348A0E84](v74, 0x1000C8000313F17);
            if (v79 >= 0x41 && v78)
              MEMORY[0x2348A0E84](v78, 0x1000C8000313F17);
            v63 += v16;
            LODWORD(v12) = v12 - 1;
          }
          while ((_DWORD)v12);
        }
        goto LABEL_138;
      case 3u:
        LODWORD(v94) = 0;
        LODWORD(v91) = 0;
        v37 = 0;
        if (sub_22F009DC4(&v91, *a1, v13))
        {
          if (sub_22F02F148((uint64_t *)*a1, (uint64_t)&v94, (uint64_t)&v91, a2))
          {
            v47 = a1[1];
            if ((llvm::APFloatBase **)v47 != &v94)
            {
              sub_22EF530AC((uint64_t)&v83, (uint64_t)&v94);
              if (*(_DWORD *)v47 >= 2u)
                sub_22EF53BC0((uint64_t *)v47);
              *(_DWORD *)v47 = v83;
              v48 = *(_OWORD *)v84;
              v49 = *(_OWORD *)v85;
              v50 = *(_OWORD *)v86;
              *(_OWORD *)(v47 + 56) = *(_OWORD *)v87;
              *(_OWORD *)(v47 + 40) = v50;
              *(_OWORD *)(v47 + 24) = v49;
              *(_OWORD *)(v47 + 8) = v48;
            }
            v37 = 1;
          }
          else
          {
            v37 = 0;
          }
        }
        if (v91 >= 2)
          sub_22EF53BC0(&v91);
        goto LABEL_147;
      case 4u:
        v83 = 0;
        v84[0] = 0;
        v84[1] = 0;
        LODWORD(v85[0]) = -1;
        v86[0] = 0;
        v86[1] = &v87[1];
        v87[0] = 0x800000000;
        v87[9] = 0;
        v87[10] = 0;
        v94 = (llvm::APFloatBase *)*a1;
        *(_QWORD *)&v95 = &v83;
        BYTE8(v95) = 0;
        v37 = 0;
        if (sub_22F010358((int)&v94, v13, a3, a4, a5, a6, a7, a8, v72, v73, v74, v75, (uint64_t)v76, v77, v78, v79, v80, v81, v82[0],
                             v82[1],
                             0,
                             0,
                             0,
                             v85[0],
                             v85[1],
                             0,
                             (uint64_t)&v87[1],
                             0x800000000,
                             *(__int128 *)&v87[1],
                             v87[3],
                             v87[4],
                             v87[5],
                             v87[6],
                             v87[7],
                             v87[8],
                             0,
                             0,
                             (void *)v87[11],
                             v87[12]))
        {
          LODWORD(v91) = 0;
          v37 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v83, (uint64_t)&v91, 0);
          if ((_DWORD)v37)
          {
            v43 = a1[1];
            if ((uint64_t *)v43 != &v91)
            {
              sub_22EF530AC((uint64_t)&v94, (uint64_t)&v91);
              if (*(_DWORD *)v43 >= 2u)
                sub_22EF53BC0((uint64_t *)v43);
              *(_DWORD *)v43 = (_DWORD)v94;
              v44 = v95;
              v45 = v96;
              v46 = v97;
              *(_OWORD *)(v43 + 56) = v98;
              *(_OWORD *)(v43 + 40) = v46;
              *(_OWORD *)(v43 + 24) = v45;
              *(_OWORD *)(v43 + 8) = v44;
            }
          }
          if (v91 >= 2)
            sub_22EF53BC0(&v91);
        }
        if (v86[1] != &v87[1])
          free(v86[1]);
        return v37;
      case 5u:
        return sub_22F0519E8(a1, *(_QWORD *)(a2 + 16));
      default:
        goto LABEL_78;
    }
  }
  if (((*(_DWORD *)a2 >> 18) & 0x7Fu) > 0x3C)
  {
    if (v14 == 61 || v14 == 66)
    {
      LODWORD(v94) = 0;
      v37 = sub_22F009DC4(&v94, *a1, v13);
      if ((_DWORD)v37)
      {
        v38 = a1[1];
        if ((llvm::APFloatBase **)v38 != &v94)
        {
          sub_22EF530AC((uint64_t)&v83, (uint64_t)&v94);
          if (*(_DWORD *)v38 >= 2u)
            sub_22EF53BC0((uint64_t *)v38);
          *(_DWORD *)v38 = v83;
          v39 = *(_OWORD *)v84;
          v40 = *(_OWORD *)v85;
          v41 = *(_OWORD *)v86;
          *(_OWORD *)(v38 + 56) = *(_OWORD *)v87;
          *(_OWORD *)(v38 + 40) = v41;
          *(_OWORD *)(v38 + 24) = v40;
          *(_OWORD *)(v38 + 8) = v39;
        }
      }
      goto LABEL_147;
    }
  }
  else
  {
    if (v14 == 20)
      return sub_22F0519E8(a1, *(_QWORD *)(a2 + 16));
    if (v14 == 27)
    {
      v31 = *(_QWORD *)(v13 + 8);
      LODWORD(v94) = 0;
      v32 = v31 & 0xFFFFFFFFFFFFFFF0;
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v34 = *(_DWORD *)(v33 + 16);
      if (v33)
        v35 = v34 == 11;
      else
        v35 = 0;
      if (v35)
      {
        if (((*(_DWORD *)(v33 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_92;
      }
      else if (v33 && v34 == 44)
      {
        v36 = sub_22F114198(*(_QWORD *)(v33 + 24));
        if ((*(_BYTE *)(v36 + 74) & 1) == 0 && *(_QWORD *)(v36 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v33 + 24)) + 76) & 0x80) != 0)
        {
LABEL_92:
          v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v55)
            v56 = *(_DWORD *)(v55 + 16) == 11;
          else
            v56 = 0;
          if (v56 && ((*(_DWORD *)(v55 + 16) >> 19) & 0x1FEu) - 210 <= 7)
          {
            v57 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v83, 0.0);
            v58 = llvm::APFloatBase::IEEEdouble(v57);
            MEMORY[0x23489F4E0](&v92, &v83, v58);
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v83);
            v83 = *a1;
            v84[0] = (uint64_t)&v91;
            v59 = (llvm::APFloatBase *)sub_22F032714(&v83, (unsigned __int8 *)v13);
            if ((_DWORD)v59)
            {
              v60 = v92;
              v61 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v61 == v60)
                llvm::detail::DoubleAPFloat::DoubleAPFloat();
              else
                llvm::detail::IEEEFloat::IEEEFloat();
              sub_22E7B656C(&v83, (uint64_t)v88);
              if (v94 >= 2)
                sub_22EF53BC0((uint64_t *)&v94);
              LODWORD(v94) = v83;
              v95 = *(_OWORD *)v84;
              v96 = *(_OWORD *)v85;
              v97 = *(_OWORD *)v86;
              v98 = *(_OWORD *)v87;
              LODWORD(v83) = 0;
              if (v61 == v89)
                sub_22E463170((llvm::APFloatBase *)&v90);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v89);
              if (v61 == v92)
                sub_22E463170((llvm::APFloatBase *)v93);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v92);
LABEL_107:
              v83 = (uint64_t)&v84[1];
              v84[0] = 0x400000000;
              sub_22F054F7C((uint64_t)&v83, v12, (uint64_t)&v94);
              sub_22F054ED0((uint64_t)a1, (_QWORD *)v83, v84[0]);
              sub_22E7FCE7C((char **)&v83);
              v37 = 1;
              goto LABEL_147;
            }
            v71 = v92;
            if (llvm::APFloatBase::PPCDoubleDouble(v59) == v71)
              sub_22E463170((llvm::APFloatBase *)v93);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v92);
          }
          else
          {
            sub_22F072CEC(*a1, a2, 103, 0);
          }
          goto LABEL_146;
        }
      }
      else if (v34 != 9)
      {
        goto LABEL_92;
      }
      LODWORD(v84[0]) = 1;
      v83 = 0;
      BYTE4(v84[0]) = 0;
      v51 = sub_22F0174A0(v13, &v83, *a1);
      v52 = v84[0];
      if (v51)
      {
        v53 = v83;
        LODWORD(v84[0]) = 0;
        v54 = BYTE4(v84[0]);
        if (v94 > 1)
        {
          sub_22EF53BC0((uint64_t *)&v94);
          LODWORD(v94) = 2;
          *(_QWORD *)&v95 = v53;
          DWORD2(v95) = v52;
          BYTE12(v95) = v54;
          if (LODWORD(v84[0]) >= 0x41 && v83)
            MEMORY[0x2348A0E84](v83, 0x1000C8000313F17);
        }
        else
        {
          LODWORD(v94) = 2;
          *(_QWORD *)&v95 = v83;
          DWORD2(v95) = v52;
          BYTE12(v95) = BYTE4(v84[0]);
        }
        goto LABEL_107;
      }
      if (LODWORD(v84[0]) >= 0x41 && v83)
        MEMORY[0x2348A0E84](v83, 0x1000C8000313F17);
LABEL_146:
      v37 = 0;
LABEL_147:
      if (v94 >= 2)
        sub_22EF53BC0((uint64_t *)&v94);
      return v37;
    }
  }
LABEL_78:
  sub_22F072CEC(*a1, a2, 103, 0);
  return 0;
}

uint64_t sub_22F055DDC(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F057188(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F057F1C(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F057188(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7[9];
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[12];

  v13[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F055DDC(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v9 = -1;
    v10 = 0;
    v11 = v13;
    v12 = 0x800000000;
    v13[8] = 0;
    v13[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v8, 1u))
    {
      LODWORD(v7[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v8, (uint64_t)v7, 0);
      if (LODWORD(v7[0]) >= 2)
        sub_22EF53BC0(v7);
    }
    else
    {
      v5 = 0;
    }
    if (v11 != v13)
      free(v11);
  }
  return v5;
}

uint64_t sub_22F0572F0(uint64_t *a1, unsigned int *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 **v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _BYTE **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _BYTE **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  char v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  int v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  uint64_t v90[9];
  uint64_t v91;
  void **v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _QWORD v98[11];
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[64];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[3];
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[64];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFFA8F0((uint64_t)a2);
  LOBYTE(v5) = 1;
  if (v4 != 714 && v4 != 1195)
  {
    if (v4 == 1230)
      return sub_22F02836C(*a1, a2);
    LODWORD(v90[0]) = 0;
    v7 = *a1;
    v8 = *(_DWORD *)(*a1 + 216);
    sub_22F0270D4(*(_DWORD **)(*a1 + 24));
    v15 = *a2;
    v16 = (unsigned __int8 **)((char *)a2 + (v15 >> 24));
    v17 = *v16;
    if (*v16)
    {
      while (1)
      {
        v18 = v17;
        v19 = *v17;
        if (v19 > 213)
        {
          if (v19 == 233)
          {
            if ((*(_DWORD *)v18 & 0x7C0000) != 0x300000)
              goto LABEL_23;
            v21 = v18 + 16;
          }
          else
          {
            if (v19 != 214)
              goto LABEL_23;
            v21 = v18 + 24;
          }
        }
        else if (v19 == 155)
        {
          if ((**((_DWORD **)v18 + 2) & 0x18000) != 0)
            goto LABEL_23;
          if (v18[48])
            v21 = v18 + 24;
          else
            v21 = v18 + 32;
        }
        else
        {
          if (v19 != 176)
            goto LABEL_23;
          v20 = *((unsigned int *)v18 + 5);
          if ((_DWORD)v20 == -1)
            goto LABEL_23;
          v21 = &v18[8 * v20 + 40];
        }
        v17 = *(unsigned __int8 **)v21;
        if (v17 == v18)
          goto LABEL_23;
      }
    }
    v18 = 0;
LABEL_23:
    v22 = *((_QWORD *)v18 + 1);
    memset(v109, 0, sizeof(v109));
    LODWORD(v110) = -1;
    v111 = 0;
    v112 = v114;
    v113 = 0x800000000;
    v23 = &v16[((v15 >> 18) & 1) + 1];
    v116 = 0;
    v115 = 0;
    v24 = a2[4];
    v25 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF0);
    v26 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = (*(_DWORD *)(v27 + 16) & 0xFF800FF) == 136839179;
    else
      v28 = 0;
    if (!v28)
    {
      if ((*(_BYTE *)(v26 + 16) == 39 || *(_DWORD *)(v27 + 16) == 39
                                       && (v26 = sub_22F10CF48(v26)) != 0)
        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 <= 1)
      {
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v102 |= 1u;
        v103 = 0;
        v104 = v106;
        v105 = 0x800000000;
        v107 = 0;
        v108 = 0;
        v91 = *a1;
        v92 = &v99;
        LOBYTE(v93) = 0;
        v88 = v8;
        if (sub_22F00C45C(&v91, v18, v9, v10, v11, v12, v13, v14))
        {
          if (!v101 && (v99 & 3) == 0)
          {
            v30 = (unint64_t)v99 & 0xFFFFFFFFFFFFFFFCLL;
            if (((unint64_t)v99 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v30 + 28) & 0x7Eu) - 52 < 6)
            {
              v53 = *(_QWORD *)(*a1 + 8);
              v54 = sub_22F10ACF8(*v25);
              if (sub_22EF5F5D4(v53, v54, *(_QWORD *)(v30 + 48)))
              {
                v55 = *(unsigned __int8 *)a2;
                if (v55 != 141)
                {
                  v86 = 0;
                  v5 = 0;
                  goto LABEL_133;
                }
                v56 = a2[1] & 0x3F;
                if (v56 - 18 >= 8)
                {
                  v5 = 0;
                  v86 = 0;
                  if (v56 > 0x1D || ((1 << v56) & 0x30008000) == 0)
                    goto LABEL_133;
                }
                v57 = (_BYTE **)*a1;
                v58 = *(_QWORD *)(*a1 + 24);
                v59 = *(unsigned int *)(v58 + 92);
                v60 = (*(_DWORD *)(v58 + 120) + 1);
                *(_DWORD *)(v58 + 120) = v60;
                v5 = v59 | (v60 << 32);
                v61 = (*(_DWORD *)(v30 + 28) & 0x7Eu) - 54 < 4;
                if (sub_22F0279B4((uint64_t)&v23[v61], v24 - v61, v30, v5, v57, v30, 1))
                {
                  v86 = v30;
LABEL_133:
                  v87 = v5;
                  if ((*(_DWORD *)(v30 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                    goto LABEL_202;
                  if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 32))(v30) + 80) & 0xE000) != 0x4000
                    && ((*(_QWORD *)(v30 + 40) & 7) != 6
                     || (*(_DWORD *)(*(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
                  {
                    v76 = *a1;
                    if ((_DWORD)v24)
                    {
                      if (sub_22F0098FC(v76, *v23, v109))
                      {
                        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                        if (v55 == 141
                          && (**(_QWORD **)(v77 + 2000) & 0x1000) != 0
                          && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                          && (*(_BYTE *)(v30 + 82) & 0x80) != 0)
                        {
                          v89 = v109;
                          if (!sub_22F013A2C((uint64_t *)*a1, *v23, (uint64_t)v109))
                          {
                            v31 = 0;
                            goto LABEL_160;
                          }
                        }
                        --v24;
                        ++v23;
                        v89 = v109;
LABEL_197:
                        v31 = 1;
                        goto LABEL_198;
                      }
                    }
                    else
                    {
                      sub_22F072CEC(v76, (uint64_t)a2, 103, 0);
                      v24 = 0;
                    }
LABEL_159:
                    v31 = 0;
                    v89 = 0;
LABEL_160:
                    LOBYTE(v5) = 0;
                    goto LABEL_198;
                  }
                  if (!sub_22EFD799C(v30))
                  {
LABEL_202:
                    if (sub_22EFBFDCC(v30, 0, 0))
                    {
                      if ((*(_QWORD *)(v30 + 40) & 7) == 6
                        && (*(_DWORD *)(*(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                      {
                        v91 = 0;
                        v92 = 0;
                        v93 = 0;
                        v94 |= 1u;
                        v95 = 0;
                        v96 = v98;
                        v97 = 0x800000000;
                        v98[8] = 0;
                        v98[9] = 0;
                        if (sub_22F027C94(*a1, a2, (uint64_t)&v91))
                        {
                          sub_22F00676C((uint64_t)&v91, (uint64_t)v90);
                          LOBYTE(v5) = sub_22F02D738(v7, 1, v8);
                          v88 = -1;
                        }
                        else
                        {
                          LOBYTE(v5) = 0;
                        }
                        if (v96 != v98)
                          free(v96);
                        v31 = 0;
                        v89 = 0;
                        goto LABEL_198;
                      }
                      if (sub_22F02836C(*a1, a2))
                      {
                        LOBYTE(v5) = sub_22F02D738(v7, 1, v8);
                        v31 = 0;
                        v89 = 0;
                        v88 = -1;
LABEL_198:
                        v29 = v86;
                        goto LABEL_34;
                      }
                      goto LABEL_159;
                    }
                    goto LABEL_196;
                  }
                  v74 = *(_WORD *)(v30 + 80) & 0x7F;
                  v75 = -40;
                  if (v74 > 0x46)
                  {
                    switch(v74)
                    {
                      case 'S':
                        goto LABEL_178;
                      case 'G':
                        v75 = -56;
                        goto LABEL_178;
                      case 'Q':
                        goto LABEL_178;
                    }
                  }
                  else
                  {
                    if (v74 <= 0x18)
                    {
                      if (v74 == 16)
                        goto LABEL_146;
                      if (((1 << v74) & 0x1066) != 0)
                        goto LABEL_178;
                      if (v74 == 24)
                      {
LABEL_146:
                        v75 = -48;
LABEL_178:
                        v78 = *(_QWORD *)(v30 + 72 + v75 + 16);
                        v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF8);
                        if ((v78 & 4) != 0)
                          v79 = (_QWORD *)*v79;
                        if (v79)
                          v5 = (unint64_t)(v79 - 8);
                        else
                          v5 = 0;
                        v80 = sub_22EFD462C(v5);
                        if (v80 && (*(_DWORD *)(v80 + 28) & 0x7F) == 0x1D)
                          v80 = *(_QWORD *)(v80 + 48);
                        v81 = *(_QWORD *)(v5 + 128);
                        if (!v81
                          || ((*(unsigned __int16 *)(v81 + 8) | (*(unsigned __int8 *)(v81 + 10) << 16)) & 0x100000) == 0
                          || (*(_BYTE *)(v81 + 104) & 4) == 0)
                        {
                          v89 = 0;
                          v31 = 1;
                          v30 = v80;
                          goto LABEL_198;
                        }
                        v82 = *(_QWORD *)((*(_QWORD *)(v30 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                        v83 = *(_QWORD *)(v80 + 144);
                        if ((v83 & 6) != 0)
                          v84 = 0;
                        else
                          v84 = v83 & 0xFFFFFFFFFFFFFFF8;
                        v91 = 0;
                        v30 = sub_22EFE9880(v84, *(_QWORD *)v82, *(unsigned int *)(v82 + 8), (uint64_t)&v91);
LABEL_196:
                        v89 = 0;
                        goto LABEL_197;
                      }
                    }
                    if (v74 == 70)
                    {
LABEL_176:
                      v75 = -64;
                      goto LABEL_178;
                    }
                  }
                  if (v74 - 52 < 6)
                  {
                    v75 = -72;
                    goto LABEL_178;
                  }
                  if (v74 - 33 < 5)
                    goto LABEL_176;
                  goto LABEL_146;
                }
                v87 = v5;
                v31 = 0;
                v89 = 0;
                LOBYTE(v5) = 0;
                v29 = v30;
LABEL_34:
                if (v104 != v106)
                {
                  v32 = v24;
                  v33 = v23;
                  v34 = v29;
                  free(v104);
                  v29 = v34;
                  v23 = v33;
                  v24 = v32;
                }
                if ((v31 & 1) == 0)
                {
                  v8 = v88;
                  goto LABEL_62;
                }
                v35 = 0;
                v8 = v88;
                if (v29)
                  goto LABEL_73;
                goto LABEL_72;
              }
              sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
              v29 = 0;
              v87 = 0;
LABEL_33:
              v31 = 0;
              v89 = 0;
              LOBYTE(v5) = 0;
              goto LABEL_34;
            }
          }
          sub_22F072CEC(*a1, (uint64_t)v18, 103, 0);
        }
        v29 = 0;
        v87 = 0;
        v30 = 0;
        goto LABEL_33;
      }
      v38 = *a1;
      v39 = (uint64_t)a2;
      goto LABEL_60;
    }
    v36 = *v18;
    if (v36 == 188)
    {
      if (sub_22F0098FC(*a1, *((_QWORD *)v18 + 2), v109))
      {
        v30 = *((_QWORD *)v18 + 3);
        if (v30 && (*(_DWORD *)(v30 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((v18[2] & 8) != 0)
          {
            v35 = *((_QWORD *)v18 + 6) != 0;
LABEL_71:
            v89 = v109;
LABEL_72:
            v45 = (_BYTE **)*a1;
            v46 = *(_QWORD *)(*a1 + 24);
            v47 = *(unsigned int *)(v46 + 92);
            v48 = (*(_DWORD *)(v46 + 120) + 1);
            *(_DWORD *)(v46 + 120) = v48;
            v87 = v47 | (v48 << 32);
            v49 = sub_22F0279B4((uint64_t)v23, v24, v30, v87, v45, v30, 0);
            LOBYTE(v5) = 0;
            v29 = v30;
            if (v49)
            {
LABEL_73:
              v85 = v29;
              v99 = &v101;
              v100 = 0x400000000;
              if (!v89)
              {
LABEL_100:
                if (v30 && (*(_DWORD *)(v30 + 28) & 0x7F) == 0x39)
                {
                  v63 = (uint64_t *)*a1;
                  v64 = *(_WORD *)(v30 + 80) & 0x7F;
                  v65 = -40;
                  if (v64 > 0x46)
                  {
                    switch(v64)
                    {
                      case 'S':
                        goto LABEL_123;
                      case 'G':
                        v65 = -56;
                        goto LABEL_123;
                      case 'Q':
LABEL_123:
                        v70 = *(_QWORD *)(v30 + 72 + v65 + 16);
                        v71 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
                        if ((v70 & 4) != 0)
                          v71 = (_QWORD *)*v71;
                        if (v71)
                          v72 = (uint64_t)(v71 - 8);
                        else
                          v72 = 0;
                        v73 = sub_22EF6477C(v63[1], v72);
                        if (!sub_22F027138(v63, (uint64_t)a2, (uint64_t)v89, v73))
                          goto LABEL_110;
LABEL_129:
                        LOBYTE(v5) = sub_22F02D738(v7, 1, v8);
                        v8 = -1;
LABEL_130:
                        if (v99 != &v101)
                          free(v99);
                        goto LABEL_62;
                    }
                  }
                  else
                  {
                    if (v64 <= 0x18)
                    {
                      if (v64 == 16)
                      {
LABEL_105:
                        v65 = -48;
                        goto LABEL_123;
                      }
                      if (((1 << v64) & 0x1066) != 0)
                        goto LABEL_123;
                      if (v64 == 24)
                        goto LABEL_105;
                    }
                    if (v64 == 70)
                    {
LABEL_121:
                      v65 = -64;
                      goto LABEL_123;
                    }
                  }
                  if (v64 - 52 >= 6)
                  {
                    if (v64 - 33 >= 5)
                      goto LABEL_105;
                    goto LABEL_121;
                  }
                  v65 = -72;
                  goto LABEL_123;
                }
                v91 = 0;
                v66 = (unsigned __int8 *)sub_22EFBF910(v30, &v91);
                v67 = (_QWORD *)*a1;
                sub_22EFF605C((uint64_t)a2);
                if (sub_22F028A44(v67, v68, (_QWORD *)v30, v91, (uint64_t)v66))
                {
                  sub_22EFF605C((uint64_t)a2);
                  if (sub_22F00B12C(v69, v91, (uint64_t)v89, (uint64_t *)v23, v24, v85, v87, v66, (uint64_t *)*a1, (uint64_t)v90, 0)&& (!(_DWORD)v100|| sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v90, v99, v100)))
                  {
                    goto LABEL_129;
                  }
                }
LABEL_110:
                LOBYTE(v5) = 0;
                goto LABEL_130;
              }
              if ((*(_DWORD *)(v30 + 28) & 0x7Eu) - 54 >= 4)
                v50 = 0;
              else
                v50 = (_DWORD *)v30;
              if (v50)
              {
                v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v50 + 32))(v50);
                if ((*(_BYTE *)(v51 + 82) & 0xC) != 0)
                {
                  if (v35)
                    goto LABEL_80;
LABEL_99:
                  v30 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v89, (uint64_t)v50, (uint64_t)&v99);
                  if (!v30)
                    goto LABEL_110;
                  goto LABEL_100;
                }
                if (sub_22EFD7260(v51))
                  v62 = v35;
                else
                  v62 = 1;
                if ((v62 & 1) == 0)
                  goto LABEL_99;
              }
LABEL_80:
              if ((v50[7] & 0x7F) == 0x39)
                v52 = 9;
              else
                v52 = 5;
              if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v89, v52, 0))
                goto LABEL_110;
              goto LABEL_100;
            }
LABEL_62:
            if (v112 != v114)
              free(v112);
            if (v8 != -1)
              sub_22F02D738(v7, 0, v8);
            --*(_DWORD *)(*(_QWORD *)(v7 + 24) + 104);
            if (LODWORD(v90[0]) >= 2)
              sub_22EF53BC0(v90);
            return v5 & 1;
          }
LABEL_70:
          v35 = 0;
          goto LABEL_71;
        }
        goto LABEL_48;
      }
    }
    else
    {
      if ((v36 & 0xFE) != 0x70)
      {
        v38 = *a1;
        if (v36 == 129)
        {
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 96))(v38) + 2000) + 1) & 0x10) == 0)
          {
            v40 = *a1;
            sub_22EFF605C((uint64_t)v18);
            sub_22F072D74(v40, v41, 2266, 0);
          }
          if (sub_22F0098FC(*a1, *((_QWORD *)v18 + 2), v109))
          {
            v42 = 0;
            v43 = *((_QWORD *)v18 + 8);
            if ((v43 & 1) == 0)
            {
              v44 = (uint64_t *)(v43 & 0xFFFFFFFFFFFFFFFELL);
              if (v44)
                v42 = *v44;
            }
            LOBYTE(v5) = sub_22F027138((uint64_t *)*a1, (uint64_t)v18, (uint64_t)v109, v42);
            goto LABEL_62;
          }
          goto LABEL_61;
        }
        goto LABEL_59;
      }
      v37 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v18, (uint64_t)v109, 0);
      if (v37)
      {
        v30 = v37;
        if ((*(_DWORD *)(v37 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
          goto LABEL_70;
LABEL_48:
        v38 = *a1;
LABEL_59:
        v39 = (uint64_t)v18;
LABEL_60:
        sub_22F072CEC(v38, v39, 103, 0);
      }
    }
LABEL_61:
    LOBYTE(v5) = 0;
    goto LABEL_62;
  }
  return v5 & 1;
}

uint64_t sub_22F057F1C(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    LODWORD(v23) = -1;
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v34 = 0;
    v35 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v22, v15, v16, v17, v18, v19, v20, v21, 0,
                         0,
                         0,
                         v23,
                         v24,
                         0,
                         (uint64_t)v28,
                         0x800000000,
                         v28[0],
                         v28[1],
                         v29,
                         v30,
                         v31,
                         v32,
                         v33,
                         0,
                         0,
                         v36,
                         v37,
                         v38,
                         v39))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v26 != v28)
      free(v26);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

uint64_t sub_22F058074(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29[2];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v38 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 <= 0x13)
  {
    if (v10 != 3)
    {
      if (v10 == 4)
      {
        memset(v23, 0, sizeof(v23));
        LODWORD(v24) = -1;
        v26 = 0;
        v27 = v29;
        v28 = 0x800000000;
        v35 = 0;
        v36 = 0;
        v13 = *(_QWORD *)(a2 + 16);
        v15 = *a1;
        LOBYTE(v16) = 0;
        v11 = 0;
        if (sub_22F010358((int)&v15, v13, a3, a4, a5, a6, a7, a8, v14, v15, (uint64_t)v23, v16, v17, v18, v19, v20, v21, v22, 0,
                             0,
                             0,
                             v24,
                             v25,
                             0,
                             (uint64_t)v29,
                             0x800000000,
                             v29[0],
                             v29[1],
                             v30,
                             v31,
                             v32,
                             v33,
                             v34,
                             0,
                             0,
                             v37,
                             v38,
                             v39,
                             v40))
        {
          LODWORD(v15) = 0;
          v11 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)v23, (uint64_t)&v15, 0);
          if (v15 >= 2)
            sub_22EF53BC0(&v15);
        }
        if (v27 != v29)
          free(v27);
        return v11;
      }
      if (v10 != 5)
        goto LABEL_19;
      return sub_22F055DDC(a1, *(_QWORD *)(a2 + 16));
    }
    LODWORD(v23[0]) = 0;
    LODWORD(v15) = 0;
    v11 = 0;
    if (sub_22F009DC4(&v15, *a1, *(_QWORD *)(a2 + 16)))
      v11 = sub_22F02F148((uint64_t *)*a1, (uint64_t)v23, (uint64_t)&v15, a2);
    if (v15 >= 2)
      sub_22EF53BC0(&v15);
LABEL_17:
    if (LODWORD(v23[0]) >= 2)
      sub_22EF53BC0(v23);
    return v11;
  }
  if (((*(_DWORD *)a2 >> 18) & 0x7Fu) > 0x3C)
  {
    if (v10 != 66 && v10 != 61)
      goto LABEL_19;
    LODWORD(v23[0]) = 0;
    v11 = sub_22F009DC4(v23, *a1, *(_QWORD *)(a2 + 16));
    goto LABEL_17;
  }
  if (v10 == 20)
    return sub_22F055DDC(a1, *(_QWORD *)(a2 + 16));
  if (v10 != 25)
  {
LABEL_19:
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
  return 1;
}

uint64_t sub_22F0582AC(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F05945C(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F054A2C((uint64_t **)a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F05945C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11[9];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[11];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F0582AC(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v13 = -1;
    v14 = 0;
    v15 = v17;
    v16 = 0x800000000;
    v17[8] = 0;
    v17[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v12, 1u))
    {
      LODWORD(v11[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v12, (uint64_t)v11, 0);
      if ((_DWORD)v5)
      {
        v6 = a1[1];
        if ((uint64_t *)v6 != v11)
        {
          sub_22EF530AC((uint64_t)&v18, (uint64_t)v11);
          if (*(_DWORD *)v6 >= 2u)
            sub_22EF53BC0((uint64_t *)v6);
          *(_DWORD *)v6 = v18;
          v7 = v19;
          v8 = v20;
          v9 = v21;
          *(_OWORD *)(v6 + 56) = v22;
          *(_OWORD *)(v6 + 40) = v9;
          *(_OWORD *)(v6 + 24) = v8;
          *(_OWORD *)(v6 + 8) = v7;
        }
      }
      if (LODWORD(v11[0]) >= 2)
        sub_22EF53BC0(v11);
    }
    else
    {
      v5 = 0;
    }
    if (v15 != v17)
      free(v15);
  }
  return v5;
}

unint64_t sub_22F059634(uint64_t *a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unsigned __int8 **v50;
  unint64_t v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  _BYTE **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  char v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  int v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113[2];
  uint64_t v114[2];
  void *v115[2];
  uint64_t v116[9];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[9];
  uint64_t v120;
  void **v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  _QWORD v127[11];
  void *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  _QWORD v135[13];

  v135[11] = *MEMORY[0x24BDAC8D0];
  if (sub_22EFFA8F0((uint64_t)a2) != 2022)
  {
    LODWORD(v119[0]) = 0;
    v22 = *a1;
    v23 = *(_DWORD *)(*a1 + 216);
    sub_22F0270D4(*(_DWORD **)(*a1 + 24));
    v30 = *a2;
    v31 = (unsigned __int8 **)((char *)a2 + (v30 >> 24));
    v32 = *v31;
    if (*v31)
    {
      while (1)
      {
        v33 = v32;
        v34 = *v32;
        if (v34 > 213)
        {
          if (v34 == 233)
          {
            if ((*(_DWORD *)v33 & 0x7C0000) != 0x300000)
              goto LABEL_38;
            v36 = v33 + 16;
          }
          else
          {
            if (v34 != 214)
              goto LABEL_38;
            v36 = v33 + 24;
          }
        }
        else if (v34 == 155)
        {
          if ((**((_DWORD **)v33 + 2) & 0x18000) != 0)
            goto LABEL_38;
          if (v33[48])
            v36 = v33 + 24;
          else
            v36 = v33 + 32;
        }
        else
        {
          if (v34 != 176)
            goto LABEL_38;
          v35 = *((unsigned int *)v33 + 5);
          if ((_DWORD)v35 == -1)
            goto LABEL_38;
          v36 = &v33[8 * v35 + 40];
        }
        v32 = *(unsigned __int8 **)v36;
        if (v32 == v33)
          goto LABEL_38;
      }
    }
    v33 = 0;
LABEL_38:
    v39 = *((_QWORD *)v33 + 1);
    v112 = 0;
    v113[0] = 0;
    v113[1] = 0;
    LODWORD(v114[0]) = -1;
    v115[0] = 0;
    v115[1] = &v116[1];
    v116[0] = 0x800000000;
    v40 = &v31[((v30 >> 18) & 1) + 1];
    v117 = 0;
    v118 = 0;
    v41 = a2[4];
    v42 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFF0);
    v43 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
    v44 = *(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v44)
      v45 = (*(_DWORD *)(v44 + 16) & 0xFF800FF) == 136839179;
    else
      v45 = 0;
    if (!v45)
    {
      if ((*(_BYTE *)(v43 + 16) == 39 || *(_DWORD *)(v44 + 16) == 39
                                       && (v43 = sub_22F10CF48(v43)) != 0)
        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 <= 1)
      {
        v129 = 0;
        v128 = 0;
        v130 = 0;
        v131 |= 1u;
        v132 = 0;
        v133 = v135;
        v134 = 0x800000000;
        v135[9] = 0;
        v135[8] = 0;
        v120 = *a1;
        v121 = &v128;
        LOBYTE(v122) = 0;
        v110 = v23;
        if (sub_22F00C45C(&v120, v33, v24, v25, v26, v27, v28, v29))
        {
          if (!v130 && (v128 & 3) == 0)
          {
            v47 = (unint64_t)v128 & 0xFFFFFFFFFFFFFFFCLL;
            if (((unint64_t)v128 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v47 + 28) & 0x7Eu) - 52 < 6)
            {
              v75 = *(_QWORD *)(*a1 + 8);
              v76 = sub_22F10ACF8(*v42);
              if (sub_22EF5F5D4(v75, v76, *(_QWORD *)(v47 + 48)))
              {
                v77 = *(unsigned __int8 *)a2;
                if (v77 != 141)
                {
                  v108 = 0;
                  v38 = 0;
                  goto LABEL_155;
                }
                v78 = a2[1] & 0x3F;
                if (v78 - 18 >= 8)
                {
                  v38 = 0;
                  v108 = 0;
                  if (v78 > 0x1D || ((1 << v78) & 0x30008000) == 0)
                    goto LABEL_155;
                }
                v79 = (_BYTE **)*a1;
                v80 = *(_QWORD *)(*a1 + 24);
                v81 = *(unsigned int *)(v80 + 92);
                v82 = (*(_DWORD *)(v80 + 120) + 1);
                *(_DWORD *)(v80 + 120) = v82;
                v38 = v81 | (v82 << 32);
                v83 = (*(_DWORD *)(v47 + 28) & 0x7Eu) - 54 < 4;
                if (sub_22F0279B4((uint64_t)&v40[v83], v41 - v83, v47, v38, v79, v47, 1))
                {
                  v108 = v47;
LABEL_155:
                  v109 = v38;
                  if ((*(_DWORD *)(v47 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                    goto LABEL_226;
                  if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v47 + 32))(v47) + 80) & 0xE000) != 0x4000
                    && ((*(_QWORD *)(v47 + 40) & 7) != 6
                     || (*(_DWORD *)(*(_QWORD *)(v47 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
                  {
                    v98 = *a1;
                    if ((_DWORD)v41)
                    {
                      if (sub_22F0098FC(v98, *v40, &v112))
                      {
                        v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                        if (v77 == 141
                          && (**(_QWORD **)(v99 + 2000) & 0x1000) != 0
                          && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                          && (*(_BYTE *)(v47 + 82) & 0x80) != 0)
                        {
                          v111 = &v112;
                          if (!sub_22F013A2C((uint64_t *)*a1, *v40, (uint64_t)&v112))
                          {
                            v48 = 0;
                            goto LABEL_184;
                          }
                        }
                        --v41;
                        ++v40;
                        v111 = &v112;
                        goto LABEL_179;
                      }
                    }
                    else
                    {
                      sub_22F072CEC(v98, (uint64_t)a2, 103, 0);
                      v41 = 0;
                    }
LABEL_183:
                    v48 = 0;
                    v111 = 0;
LABEL_184:
                    LOBYTE(v38) = 0;
                    goto LABEL_213;
                  }
                  if (!sub_22EFD799C(v47))
                  {
LABEL_226:
                    if (sub_22EFBFDCC(v47, 0, 0))
                    {
                      if ((*(_QWORD *)(v47 + 40) & 7) == 6
                        && (*(_DWORD *)(*(_QWORD *)(v47 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                      {
                        v121 = 0;
                        v120 = 0;
                        v122 = 0;
                        v123 |= 1u;
                        v124 = 0;
                        v125 = v127;
                        v126 = 0x800000000;
                        v127[9] = 0;
                        v127[8] = 0;
                        if (sub_22F027C94(*a1, a2, (uint64_t)&v120))
                        {
                          sub_22F00676C((uint64_t)&v120, (uint64_t)v119);
                          LOBYTE(v38) = sub_22F02D738(v22, 1, v23);
                          v23 = -1;
                        }
                        else
                        {
                          LOBYTE(v38) = 0;
                        }
                        if (v125 != v127)
                          free(v125);
                        v110 = v23;
                        v48 = 0;
                        v111 = 0;
                        goto LABEL_213;
                      }
                      if (sub_22F02836C(*a1, a2))
                      {
                        LOBYTE(v38) = sub_22F02D738(v22, 1, v23);
                        v48 = 0;
                        v111 = 0;
                        v110 = -1;
                        goto LABEL_213;
                      }
                      goto LABEL_183;
                    }
                    v111 = 0;
LABEL_179:
                    v48 = 1;
LABEL_213:
                    v46 = v108;
                    goto LABEL_49;
                  }
                  v96 = *(_WORD *)(v47 + 80) & 0x7F;
                  v97 = -40;
                  if (v96 > 0x46)
                  {
                    switch(v96)
                    {
                      case 'S':
                        goto LABEL_202;
                      case 'G':
                        v97 = -56;
                        goto LABEL_202;
                      case 'Q':
                        goto LABEL_202;
                    }
                  }
                  else
                  {
                    if (v96 <= 0x18)
                    {
                      if (v96 == 16)
                        goto LABEL_168;
                      if (((1 << v96) & 0x1066) != 0)
                        goto LABEL_202;
                      if (v96 == 24)
                      {
LABEL_168:
                        v97 = -48;
LABEL_202:
                        v100 = *(_QWORD *)(v47 + 72 + v97 + 16);
                        v101 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF8);
                        if ((v100 & 4) != 0)
                          v101 = (_QWORD *)*v101;
                        if (v101)
                          v38 = (unint64_t)(v101 - 8);
                        else
                          v38 = 0;
                        v102 = sub_22EFD462C(v38);
                        if (v102 && (*(_DWORD *)(v102 + 28) & 0x7F) == 0x1D)
                          v102 = *(_QWORD *)(v102 + 48);
                        v103 = *(_QWORD *)(v38 + 128);
                        if (v103
                          && ((*(unsigned __int16 *)(v103 + 8) | (*(unsigned __int8 *)(v103 + 10) << 16)) & 0x100000) != 0)
                        {
                          if ((*(_BYTE *)(v103 + 104) & 4) != 0)
                          {
                            v104 = *(_QWORD *)((*(_QWORD *)(v47 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                            v105 = *(_QWORD *)(v102 + 144);
                            if ((v105 & 6) != 0)
                              v106 = 0;
                            else
                              v106 = v105 & 0xFFFFFFFFFFFFFFF8;
                            v120 = 0;
                            v47 = sub_22EFE9880(v106, *(_QWORD *)v104, *(unsigned int *)(v104 + 8), (uint64_t)&v120);
                            v111 = 0;
                            v48 = 1;
                          }
                          else
                          {
                            v111 = 0;
                            v48 = 1;
                            v47 = v102;
                          }
                          v46 = v108;
                          goto LABEL_49;
                        }
                        v111 = 0;
                        v48 = 1;
                        v47 = v102;
                        goto LABEL_213;
                      }
                    }
                    if (v96 == 70)
                    {
LABEL_200:
                      v97 = -64;
                      goto LABEL_202;
                    }
                  }
                  if (v96 - 52 < 6)
                  {
                    v97 = -72;
                    goto LABEL_202;
                  }
                  if (v96 - 33 < 5)
                    goto LABEL_200;
                  goto LABEL_168;
                }
                v109 = v38;
                v48 = 0;
                v111 = 0;
                LOBYTE(v38) = 0;
                v46 = v47;
LABEL_49:
                if (v133 != v135)
                {
                  v49 = v41;
                  v50 = v40;
                  v51 = v46;
                  free(v133);
                  v46 = v51;
                  v40 = v50;
                  v41 = v49;
                }
                if ((v48 & 1) == 0)
                {
                  v23 = v110;
                  goto LABEL_79;
                }
                v52 = 0;
                v23 = v110;
                if (v46)
                  goto LABEL_95;
                goto LABEL_94;
              }
              sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
              v46 = 0;
              v109 = 0;
LABEL_48:
              v48 = 0;
              v111 = 0;
              LOBYTE(v38) = 0;
              goto LABEL_49;
            }
          }
          sub_22F072CEC(*a1, (uint64_t)v33, 103, 0);
        }
        v46 = 0;
        v109 = 0;
        v47 = 0;
        goto LABEL_48;
      }
      v55 = (uint64_t *)*a1;
      v56 = (uint64_t)a2;
      goto LABEL_77;
    }
    v53 = *v33;
    if (v53 == 188)
    {
      if (sub_22F0098FC(*a1, *((_QWORD *)v33 + 2), &v112))
      {
        v47 = *((_QWORD *)v33 + 3);
        if (v47 && (*(_DWORD *)(v47 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((v33[2] & 8) != 0)
          {
            v52 = *((_QWORD *)v33 + 6) != 0;
LABEL_93:
            v111 = &v112;
LABEL_94:
            v67 = (uint64_t *)*a1;
            v68 = *(_QWORD *)(*a1 + 24);
            v69 = *(unsigned int *)(v68 + 92);
            v70 = (*(_DWORD *)(v68 + 120) + 1);
            *(_DWORD *)(v68 + 120) = v70;
            v109 = v69 | (v70 << 32);
            v71 = sub_22F0279B4((uint64_t)v40, v41, v47, v109, (_BYTE **)v67, v47, 0);
            LOBYTE(v38) = 0;
            v46 = v47;
            if (v71)
            {
LABEL_95:
              v107 = v46;
              v128 = &v130;
              v129 = 0x400000000;
              if (!v111)
              {
LABEL_122:
                if (v47 && (*(_DWORD *)(v47 + 28) & 0x7F) == 0x39)
                {
                  v85 = (uint64_t *)*a1;
                  v86 = *(_WORD *)(v47 + 80) & 0x7F;
                  v87 = -40;
                  if (v86 > 0x46)
                  {
                    switch(v86)
                    {
                      case 'S':
                        goto LABEL_145;
                      case 'G':
                        v87 = -56;
                        goto LABEL_145;
                      case 'Q':
LABEL_145:
                        v92 = *(_QWORD *)(v47 + 72 + v87 + 16);
                        v93 = (_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF8);
                        if ((v92 & 4) != 0)
                          v93 = (_QWORD *)*v93;
                        if (v93)
                          v94 = (uint64_t)(v93 - 8);
                        else
                          v94 = 0;
                        v95 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v94);
                        if (!sub_22F027138(v85, (uint64_t)a2, (uint64_t)v111, v95))
                          goto LABEL_132;
LABEL_151:
                        LOBYTE(v38) = sub_22F02D738(v22, 1, v23);
                        v23 = -1;
LABEL_152:
                        if (v128 != &v130)
                          free(v128);
                        goto LABEL_79;
                    }
                  }
                  else
                  {
                    if (v86 <= 0x18)
                    {
                      if (v86 == 16)
                      {
LABEL_127:
                        v87 = -48;
                        goto LABEL_145;
                      }
                      if (((1 << v86) & 0x1066) != 0)
                        goto LABEL_145;
                      if (v86 == 24)
                        goto LABEL_127;
                    }
                    if (v86 == 70)
                    {
LABEL_143:
                      v87 = -64;
                      goto LABEL_145;
                    }
                  }
                  if (v86 - 52 >= 6)
                  {
                    if (v86 - 33 >= 5)
                      goto LABEL_127;
                    goto LABEL_143;
                  }
                  v87 = -72;
                  goto LABEL_145;
                }
                v120 = 0;
                v88 = (unsigned __int8 *)sub_22EFBF910(v47, &v120);
                v89 = (uint64_t *)*a1;
                sub_22EFF605C((uint64_t)a2);
                if (sub_22F028A44(v89, v90, (_QWORD *)v47, v120, (uint64_t)v88))
                {
                  sub_22EFF605C((uint64_t)a2);
                  if (sub_22F00B12C(v91, v120, (uint64_t)v111, (uint64_t *)v40, v41, v107, v109, v88, (uint64_t *)*a1, (uint64_t)v119, 0)&& (!(_DWORD)v129|| sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v119, v128, v129)))
                  {
                    goto LABEL_151;
                  }
                }
LABEL_132:
                LOBYTE(v38) = 0;
                goto LABEL_152;
              }
              if ((*(_DWORD *)(v47 + 28) & 0x7Eu) - 54 >= 4)
                v72 = 0;
              else
                v72 = (_DWORD *)v47;
              if (v72)
              {
                v73 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v72 + 32))(v72);
                if ((*(_BYTE *)(v73 + 82) & 0xC) != 0)
                {
                  if (v52)
                    goto LABEL_102;
LABEL_121:
                  v47 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v111, (uint64_t)v72, (uint64_t)&v128);
                  if (!v47)
                    goto LABEL_132;
                  goto LABEL_122;
                }
                if (sub_22EFD7260(v73))
                  v84 = v52;
                else
                  v84 = 1;
                if ((v84 & 1) == 0)
                  goto LABEL_121;
              }
LABEL_102:
              if ((v72[7] & 0x7F) == 0x39)
                v74 = 9;
              else
                v74 = 5;
              if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v111, v74, 0))
                goto LABEL_132;
              goto LABEL_122;
            }
LABEL_79:
            if (v115[1] != &v116[1])
              free(v115[1]);
            if (v23 != -1)
              sub_22F02D738(v22, 0, v23);
            --*(_DWORD *)(*(_QWORD *)(v22 + 24) + 104);
            if ((v38 & 1) != 0)
            {
              v62 = a1[1];
              if ((uint64_t *)v62 != v119)
              {
                sub_22EF530AC((uint64_t)&v112, (uint64_t)v119);
                if (*(_DWORD *)v62 >= 2u)
                  sub_22EF53BC0((uint64_t *)v62);
                *(_DWORD *)v62 = v112;
                v63 = *(_OWORD *)v113;
                v64 = *(_OWORD *)v114;
                v65 = *(_OWORD *)v115;
                *(_OWORD *)(v62 + 56) = *(_OWORD *)v116;
                *(_OWORD *)(v62 + 40) = v65;
                *(_OWORD *)(v62 + 24) = v64;
                *(_OWORD *)(v62 + 8) = v63;
              }
            }
            if (LODWORD(v119[0]) >= 2)
              sub_22EF53BC0(v119);
            return v38 & 1;
          }
LABEL_92:
          v52 = 0;
          goto LABEL_93;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if ((v53 & 0xFE) != 0x70)
      {
        v55 = (uint64_t *)*a1;
        if (v53 == 129)
        {
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*v55 + 96))(v55) + 2000) + 1) & 0x10) == 0)
          {
            v57 = (uint64_t *)*a1;
            sub_22EFF605C((uint64_t)v33);
            sub_22F072D74((uint64_t)v57, v58, 2266, 0);
          }
          if (sub_22F0098FC(*a1, *((_QWORD *)v33 + 2), &v112))
          {
            v59 = 0;
            v60 = *((_QWORD *)v33 + 8);
            if ((v60 & 1) == 0)
            {
              v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFELL);
              if (v61)
                v59 = *v61;
            }
            LOBYTE(v38) = sub_22F027138((uint64_t *)*a1, (uint64_t)v33, (uint64_t)&v112, v59);
            goto LABEL_79;
          }
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      v54 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v33, (uint64_t)&v112, 0);
      if (v54)
      {
        v47 = v54;
        if ((*(_DWORD *)(v54 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
          goto LABEL_92;
LABEL_65:
        v55 = (uint64_t *)*a1;
LABEL_76:
        v56 = (uint64_t)v33;
LABEL_77:
        sub_22F072CEC((uint64_t)v55, v56, 103, 0);
      }
    }
LABEL_78:
    LOBYTE(v38) = 0;
    goto LABEL_79;
  }
  v4 = a2[4];
  LODWORD(v128) = 0;
  v112 = (uint64_t)&v113[1];
  v113[0] = 0xD00000000;
  sub_22F054F7C((uint64_t)&v112, v4, (uint64_t)&v128);
  if (v128 >= 2)
    sub_22EF53BC0((uint64_t *)&v128);
  v5 = a2[4];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = a2 + 2;
    v8 = 72 * v5;
    while ((sub_22F009DC4(v112 + v6, *a1, *(_QWORD *)((char *)&v7[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24))) & 1) != 0)
    {
      v7 += 2;
      v6 += 72;
      if (v8 == v6)
        goto LABEL_8;
    }
    LOBYTE(v38) = 0;
  }
  else
  {
LABEL_8:
    v9 = LODWORD(v113[0]);
    v10 = (_QWORD *)operator new[]();
    v11 = v10;
    *v10 = 72;
    v10[1] = v9;
    v12 = v10 + 2;
    if ((_DWORD)v9)
    {
      v13 = 72 * v9;
      v14 = v10 + 2;
      do
      {
        *v14 = 0;
        v14 += 18;
        v13 -= 72;
      }
      while (v13);
    }
    if (LODWORD(v113[0]))
    {
      v15 = 0;
      v16 = 72 * LODWORD(v113[0]);
      do
      {
        v17 = v112;
        v18 = &v11[v15 / 8];
        if (LODWORD(v11[v15 / 8 + 2]) >= 2)
          sub_22EF53BC0(&v11[v15 / 8 + 2]);
        LODWORD(v11[v15 / 8 + 2]) = *(_DWORD *)(v17 + v15);
        v19 = *(_OWORD *)(v17 + v15 + 8);
        v20 = *(_OWORD *)(v17 + v15 + 24);
        v21 = *(_OWORD *)(v17 + v15 + 40);
        *(_OWORD *)(v18 + 9) = *(_OWORD *)(v17 + v15 + 56);
        *(_OWORD *)(v18 + 7) = v21;
        *(_OWORD *)(v18 + 5) = v20;
        *(_OWORD *)(v18 + 3) = v19;
        *(_DWORD *)(v17 + v15) = 0;
        v15 += 72;
      }
      while (v16 != v15);
    }
    v37 = a1[1];
    if (*(_DWORD *)v37 >= 2u)
      sub_22EF53BC0((uint64_t *)v37);
    *(_DWORD *)v37 = 10;
    *(_QWORD *)(v37 + 8) = v12;
    *(_DWORD *)(v37 + 16) = 0;
    *(_DWORD *)(v37 + 20) = v9;
    LOBYTE(v38) = 1;
  }
  sub_22F05A444((char **)&v112);
  return v38 & 1;
}

char **sub_22F05A444(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    v5 = v2 - 72;
    do
    {
      if (*(_DWORD *)&v5[v4] >= 2u)
      {
        v7 = v5;
        v8 = v4;
        sub_22EF53BC0((uint64_t *)&v5[v4]);
        v5 = v7;
        v4 = v8;
      }
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F05A4C0(uint64_t **a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26[9];
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29[2];
  void *v30[2];
  uint64_t v31[4];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 > 0x13)
  {
    if (v10 == 20)
      return sub_22F0582AC(a1, *(_QWORD *)(a2 + 16));
    if (v10 != 66 && v10 != 61)
      goto LABEL_32;
    LODWORD(v39) = 0;
    v11 = sub_22F009DC4(&v39, *a1, *(_QWORD *)(a2 + 16));
    if ((_DWORD)v11)
    {
      v12 = a1[1];
      if (v12 != (uint64_t *)&v39)
      {
        sub_22EF530AC((uint64_t)&v27, (uint64_t)&v39);
        if (*(_DWORD *)v12 >= 2u)
          sub_22EF53BC0(v12);
        *(_DWORD *)v12 = v27;
        v13 = *(_OWORD *)v28;
        v14 = *(_OWORD *)v29;
        v15 = *(_OWORD *)v30;
        *(_OWORD *)(v12 + 7) = *(_OWORD *)v31;
        *(_OWORD *)(v12 + 5) = v15;
        *(_OWORD *)(v12 + 3) = v14;
        *(_OWORD *)(v12 + 1) = v13;
      }
    }
LABEL_36:
    if (v39 >= 2)
      sub_22EF53BC0((uint64_t *)&v39);
    return v11;
  }
  switch(v10)
  {
    case 3u:
      LODWORD(v39) = 0;
      LODWORD(v26[0]) = 0;
      v11 = 0;
      if (sub_22F009DC4(v26, *a1, *(_QWORD *)(a2 + 16)))
      {
        if (sub_22F02F148(*a1, (uint64_t)&v39, (uint64_t)v26, a2))
        {
          v17 = a1[1];
          if (v17 != (uint64_t *)&v39)
          {
            sub_22EF530AC((uint64_t)&v27, (uint64_t)&v39);
            if (*(_DWORD *)v17 >= 2u)
              sub_22EF53BC0(v17);
            *(_DWORD *)v17 = v27;
            v18 = *(_OWORD *)v28;
            v19 = *(_OWORD *)v29;
            v20 = *(_OWORD *)v30;
            *(_OWORD *)(v17 + 7) = *(_OWORD *)v31;
            *(_OWORD *)(v17 + 5) = v20;
            *(_OWORD *)(v17 + 3) = v19;
            *(_OWORD *)(v17 + 1) = v18;
          }
          v11 = 1;
        }
        else
        {
          v11 = 0;
        }
      }
      if (LODWORD(v26[0]) >= 2)
        sub_22EF53BC0(v26);
      goto LABEL_36;
    case 4u:
      v27 = 0;
      v28[0] = 0;
      v28[1] = 0;
      LODWORD(v29[0]) = -1;
      v30[0] = 0;
      v30[1] = &v31[1];
      v31[0] = 0x800000000;
      v36 = 0;
      v37 = 0;
      v21 = *(_QWORD *)(a2 + 16);
      v39 = *a1;
      BYTE8(v40) = 0;
      v11 = 0;
      if (sub_22F010358((int)&v39, v21, a3, a4, a5, a6, a7, a8, v26[0], v26[1], v26[2], v26[3], v26[4], v26[5], (void *)v26[6], v26[7], v26[8], 0, 0,
                           0,
                           v29[0],
                           v29[1],
                           0,
                           (uint64_t)&v31[1],
                           0x800000000,
                           v31[1],
                           v31[2],
                           v31[3],
                           v32,
                           v33,
                           v34,
                           v35,
                           0,
                           0,
                           v38,
                           (uint64_t)v39,
                           (uint64_t)&v27,
                           *((void **)&v40 + 1),
                           v41))
      {
        LODWORD(v26[0]) = 0;
        v11 = sub_22F0248D4(*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v27, (uint64_t)v26, 0);
        if ((_DWORD)v11)
        {
          v22 = a1[1];
          if (v22 != v26)
          {
            sub_22EF530AC((uint64_t)&v39, (uint64_t)v26);
            if (*(_DWORD *)v22 >= 2u)
              sub_22EF53BC0(v22);
            *(_DWORD *)v22 = (_DWORD)v39;
            v23 = v40;
            v24 = v41;
            v25 = v42;
            *(_OWORD *)(v22 + 7) = v43;
            *(_OWORD *)(v22 + 5) = v25;
            *(_OWORD *)(v22 + 3) = v24;
            *(_OWORD *)(v22 + 1) = v23;
          }
        }
        if (LODWORD(v26[0]) >= 2)
          sub_22EF53BC0(v26);
      }
      if (v30[1] != &v31[1])
        free(v30[1]);
      return v11;
    case 5u:
      return sub_22F0582AC(a1, *(_QWORD *)(a2 + 16));
  }
LABEL_32:
  sub_22F072CEC((uint64_t)*a1, a2, 103, 0);
  return 0;
}

void sub_22F05A800(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22F05A800(a1, *a2);
    sub_22F05A800(a1, a2[1]);
    if (*((_DWORD *)a2 + 12) >= 2u)
      sub_22EF53BC0(a2 + 6);
    operator delete(a2);
  }
}

BOOL sub_22F05A858(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = a1 & 3;
  v2 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (v1 != 1 || v2 == 0)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 39)
    return sub_22F05AB70((unsigned __int8 *)v2) != 0;
  return 0;
}

uint64_t sub_22F05A8BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  _QWORD v21[2];
  int v22;

  v5 = (unsigned int *)sub_22F05AB70((unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  v6 = sub_22F05ADD8((uint64_t)v5);
  v7 = (*(_DWORD *)(v6 + 36) & 0x3FFFFFFF) + ((2 * *(_DWORD *)(v6 + 36)) >> 31) - 1;
  v8 = sub_22EF67C8C(a1);
  v22 = sub_22EF5CDF0(a1, *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
  if (v5[4] <= v7)
    return 0;
  v21[0] = a1;
  v21[1] = &v22;
  v19 = 1;
  v18 = 0;
  v20 = 0;
  v9 = 0;
  if (sub_22F05AED0((uint64_t)v21, *(_QWORD *)((char *)&v5[2 * (((unint64_t)*v5 >> 18) & 1) + 2 + 2 * v7]+ ((unint64_t)*v5 >> 24)), (unsigned int *)&v18))
  {
    v10 = *(_DWORD *)(v6 + 40);
    if ((v10 & 0x80000000) == 0)
    {
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
        MEMORY[0x2348A0E84](*a3, 0x1000C8000313F17);
      *a3 = v18;
      *((_DWORD *)a3 + 2) = v19;
      return 1;
    }
    v16 = 1;
    v15 = 0;
    v17 = 0;
    v9 = 0;
    if (sub_22F05AED0((uint64_t)v21, *(_QWORD *)((char *)&v5[2 * (((unint64_t)*v5 >> 18) & 1)+ 2 * (v10 & 0x3FFFFFFFu)+ 2 * ((2 * v10) >> 31)]+ ((unint64_t)*v5 >> 24)), (unsigned int *)&v15))
    {
      v14 = 0;
      llvm::APInt::umul_ov((llvm::APInt *)&v18, (const llvm::APInt *)&v15, &v14);
      v9 = !v14;
      if (v14)
      {
        if (v13 >= 0x41 && v12)
          MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
      }
      else
      {
        if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
          MEMORY[0x2348A0E84](*a3, 0x1000C8000313F17);
        *a3 = v12;
        *((_DWORD *)a3 + 2) = v13;
      }
    }
    if (v16 >= 0x41 && v15)
      MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
  }
  if (v19 >= 0x41 && v18)
    MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22F05AB04(llvm::APInt *this, _QWORD *a2)
{
  unsigned int v4;
  llvm::APInt *v5;
  uint64_t v6;

  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41 && v4 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
    return 0;
  v5 = *(llvm::APInt **)this;
  if (v4 < 0x41)
    v5 = this;
  v6 = *(_QWORD *)v5;
  if (v6 < 0)
    return 0;
  *a2 = v6;
  return 1;
}

uint64_t sub_22F05AB70(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 39)
    return 0;
  do
  {
    v1 = (uint64_t)a1;
    LODWORD(v2) = *a1;
    if (v2 > 0xD5)
    {
      if ((_DWORD)v2 == 233)
      {
        LODWORD(v2) = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v3 = a1 + 16;
      }
      else
      {
        if ((_DWORD)v2 != 214)
          break;
        v3 = a1 + 24;
      }
    }
    else if ((_DWORD)v2 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return 0;
      v3 = a1 + 24;
      if (!a1[48])
        v3 = a1 + 32;
      LOBYTE(v2) = -101;
    }
    else
    {
      if ((_DWORD)v2 != 176)
        break;
      v2 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v2 == -1)
        return 0;
      v3 = &a1[8 * v2 + 40];
      LOBYTE(v2) = -80;
    }
    a1 = *(unsigned __int8 **)v3;
  }
  while (*(_QWORD *)v3 != v1);
  if ((v2 & 0xFE) == 0xAC)
  {
    v4 = *(unsigned __int8 **)(v1 + 16);
    do
    {
      v1 = (uint64_t)v4;
      LODWORD(v2) = *v4;
      if (v2 > 0xD5)
      {
        if ((_DWORD)v2 == 233)
        {
          LODWORD(v2) = *(_DWORD *)v4;
          if ((*(_DWORD *)v4 & 0x7C0000) != 0x300000)
            break;
          v5 = v4 + 16;
        }
        else
        {
          if ((_DWORD)v2 != 214)
            break;
          v5 = v4 + 24;
        }
      }
      else if ((_DWORD)v2 == 155)
      {
        if ((**((_DWORD **)v4 + 2) & 0x18000) != 0)
          return 0;
        v5 = v4 + 24;
        if (!*(_BYTE *)(v1 + 48))
          v5 = (unsigned __int8 *)(v1 + 32);
        LOBYTE(v2) = -101;
      }
      else
      {
        if ((_DWORD)v2 != 176)
          break;
        v2 = *((unsigned int *)v4 + 5);
        if ((_DWORD)v2 == -1)
          return 0;
        v5 = &v4[8 * v2 + 40];
        LOBYTE(v2) = -80;
      }
      v4 = *(unsigned __int8 **)v5;
    }
    while (v4 != (unsigned __int8 *)v1);
  }
  if ((v2 + 102) >= 0xF5u)
  {
    v6 = *(unsigned __int8 **)(v1 + 16);
    do
    {
      v1 = (uint64_t)v6;
      LODWORD(v2) = *v6;
      if (v2 > 0xD5)
      {
        if ((_DWORD)v2 == 233)
        {
          LODWORD(v2) = *(_DWORD *)v6;
          if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
            break;
          v7 = v6 + 16;
        }
        else
        {
          if ((_DWORD)v2 != 214)
            break;
          v7 = v6 + 24;
        }
      }
      else if ((_DWORD)v2 == 155)
      {
        if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
          return 0;
        v7 = v6 + 24;
        if (!*(_BYTE *)(v1 + 48))
          v7 = (unsigned __int8 *)(v1 + 32);
        LOBYTE(v2) = -101;
      }
      else
      {
        if ((_DWORD)v2 != 176)
          break;
        v2 = *((unsigned int *)v6 + 5);
        if ((_DWORD)v2 == -1)
          return 0;
        v7 = &v6[8 * v2 + 40];
        LOBYTE(v2) = -80;
      }
      v6 = *(unsigned __int8 **)v7;
    }
    while (v6 != (unsigned __int8 *)v1);
  }
  if ((v2 + 113) < 0xFBu)
    return 0;
  if (sub_22F05ADD8(v1))
    return v1;
  return 0;
}

uint64_t sub_22F05ADD8(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_22EFFA604(*(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3)));
  if (result)
  {
    v2 = *(_DWORD *)(result + 28);
    if ((v2 & 0x7Eu) - 52 <= 5)
    {
      if ((v2 & 0x100) != 0)
      {
        sub_22EFC8E88(result);
        v4 = *(uint64_t **)v3;
        v5 = *(unsigned int *)(v3 + 8);
        i = *(uint64_t **)v3;
        if ((_DWORD)v5)
        {
          v7 = 8 * v5;
          for (i = *(uint64_t **)v3; *(_WORD *)(*i + 32) != 100; ++i)
          {
            v7 -= 8;
            if (!v7)
              return 0;
          }
        }
        if (i != &v4[v5])
        {
          do
          {
            v13 = *v4++;
            result = v13;
          }
          while (*(_WORD *)(v13 + 32) != 100);
          return result;
        }
      }
      return 0;
    }
    if ((v2 & 0x100) == 0)
      return 0;
    sub_22EFC8E88(result);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    j = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      for (j = *(uint64_t **)v8; *(_WORD *)(*j + 32) != 100; ++j)
      {
        v12 -= 8;
        if (!v12)
          return 0;
      }
    }
    if (j == &v9[v10])
      return 0;
    do
    {
      v14 = *v9++;
      result = v14;
    }
    while (*(_WORD *)(v14 + 32) != 100);
  }
  return result;
}

uint64_t sub_22F05AED0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  uint64_t v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  _QWORD v24[5];
  int v25;
  char v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD v36[4];
  __int128 v37;
  int v38;
  _OWORD *v39;
  uint64_t v40;
  _OWORD v41[33];
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  v5 = *(_QWORD *)a1;
  v24[0] = &off_24FAC58D8;
  v24[1] = v5;
  v6 = *(_QWORD *)(v5 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v25 = *(_DWORD *)(v6 + 176);
  v26 = v7 & 1;
  v27[0] = &off_24FAC5960;
  v27[1] = v24;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v32 = 0u;
  v31 = &v32;
  v33 = 0x100000000;
  v34 = v36;
  v35 = 0x200000001;
  v36[0] = 1;
  v36[2] = 1;
  v38 = 0;
  v37 = 0u;
  v24[2] = &v18;
  v24[3] = v27;
  v24[4] = 0x200000001;
  v39 = v41;
  v40 = 0x1000000000;
  v43 = 0u;
  v44 = 0;
  v45 = 0;
  v47 = 0u;
  v42 = 0;
  v41[32] = 0u;
  v46 = &v47;
  v48 = 0;
  v49 = -1;
  v50 = 0;
  v51 = 0;
  v52 = 3;
  v8 = sub_22F0056A0(a2, (uint64_t)&v18, v5, 2, (uint64_t)v24);
  sub_22F0052A4((uint64_t)v24);
  v9 = 0;
  if (v8)
  {
    if (a3[2] > 0x40 || (v10 = v22, v22 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v21);
      v10 = a3[2];
    }
    else
    {
      *(_QWORD *)a3 = v21;
      a3[2] = v10;
    }
    v11 = v23;
    *((_BYTE *)a3 + 12) = v23;
    if (!v11)
    {
      v14 = (unsigned int *)(*(_QWORD *)a3 + 8 * ((v10 - 1) >> 6));
      if (v10 < 0x41)
        v14 = a3;
      if (((*(_QWORD *)v14 >> (v10 - 1)) & 1) != 0)
        goto LABEL_18;
    }
    v12 = **(_DWORD **)(a1 + 8);
    v13 = v10 > 0x40
        ? llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3)
        : v10 + __clz(*(_QWORD *)a3) - 64;
    if (v10 - v13 > v12)
    {
LABEL_18:
      v9 = 0;
    }
    else
    {
      llvm::APInt::zextOrSelf((llvm::APInt *)a3);
      if (a3[2] >= 0x41 && *(_QWORD *)a3)
        MEMORY[0x2348A0E84](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v16;
      a3[2] = v17;
      v9 = 1;
    }
  }
  if (v20 >= 2)
    sub_22EF53BC0(&v20);
  return v9;
}

uint64_t sub_22F05B164(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;

  v5 = *(_DWORD *)(a1 + 216);
  if (v5 <= a3)
  {
    result = 1;
  }
  else
  {
    v7 = 32 * (v5 - 1);
    while (1)
    {
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 208) + v7);
      if ((*(_BYTE *)v8 & 6) != 0)
      {
        result = sub_22F02D00C(v8, a1, a2);
        if (!(_DWORD)result)
          break;
      }
      v7 -= 32;
      if (--v5 <= a3)
      {
        result = 1;
        break;
      }
    }
    v5 = *(_DWORD *)(a1 + 216);
  }
  v10 = *(_QWORD *)(a1 + 208);
  v11 = (_OWORD *)(v10 + 32 * a3);
  if (v5 == a3)
    goto LABEL_10;
  v12 = (_OWORD *)(v10 + 32 * v5);
  v13 = 32 * v5 - 32 * a3 - 32;
  v14 = (_BYTE *)(v10 + 32 * a3);
  do
  {
    v15 = *v14;
    v14 += 32;
    if ((v15 & 6) != 0)
      break;
    v13 -= 32;
    v11 = v14;
  }
  while (v14 != (_BYTE *)v12);
  if (v14 == (_BYTE *)v12)
  {
LABEL_10:
    v12 = v11;
  }
  else
  {
    v16 = 2;
    v12 = v11;
    do
    {
      v17 = &v11[v16];
      if ((v11[v16] & 6) == 0)
      {
        v18 = v17[1];
        *v12 = *v17;
        v12[1] = v18;
        v12 += 2;
      }
      v16 += 2;
      v13 -= 32;
    }
    while (v13);
    v10 = *(_QWORD *)(a1 + 208);
  }
  *(_DWORD *)(a1 + 216) = ((unint64_t)v12 - v10) >> 5;
  return result;
}

uint64_t sub_22F05B288(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22[9];
  uint64_t v23[2];
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[12];

  v29[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 < 2)
  {
    v23[0] = 0;
    v23[1] = 0;
    v24 = 0;
    v25 = -1;
    v26 = 0;
    v27 = v29;
    v28 = 0x800000000;
    v29[8] = 0;
    v29[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)v23, 1u))
    {
      LODWORD(v22[0]) = 0;
      v13 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v23, (uint64_t)v22, 0);
      if ((_DWORD)v13)
        sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v22);
      if (LODWORD(v22[0]) >= 2)
        sub_22EF53BC0(v22);
    }
    else
    {
      v13 = 0;
    }
    if (v27 != v29)
      free(v27);
    return v13;
  }
  if (v4 - 5 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F00C45C(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
  }
  else
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    if (v5 == 39)
      v6 = *(_QWORD *)(a2 + 16);
    else
      v6 = *(_QWORD *)(a2 + 24);
    if (v5 == 39)
      v7 = *(_QWORD *)(a2 + 24);
    else
      v7 = *(_QWORD *)(a2 + 16);
    v8 = *((_BYTE *)a1 + 16);
    *(_OWORD *)v23 = *(_OWORD *)a1;
    LOBYTE(v24) = v8;
    v9 = sub_22F00C45C(v23, v7);
    if ((v9 & 1) != 0
      || (v10 = (uint64_t *)*a1,
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1),
          *(_BYTE *)v10[2] |= v11,
          v11))
    {
      LODWORD(v23[1]) = 1;
      v23[0] = 0;
      BYTE4(v23[1]) = 0;
      v12 = sub_22F0174A0(v6, v23, *a1);
      v13 = 0;
      if ((v9 & v12) == 1)
      {
        if ((*(_DWORD *)a2 & 0xFC0000) == 0x180000)
          sub_22F041BF0((llvm::APInt *)v23);
        v14 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v14 || *(_BYTE *)(v14 + 16) != 39)
          v14 = sub_22F10CF48(v14);
        v15 = *(_QWORD *)(v14 + 32);
        v17 = (uint64_t *)*a1;
        v16 = a1[1];
        v20 = v23[1];
        if (LODWORD(v23[1]) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const llvm::APInt *)v23);
        else
          v19 = v23[0];
        v21 = BYTE4(v23[1]);
        v13 = sub_22F01DC84((uint64_t)v17, a2, v16, v15, (uint64_t)&v19);
        if (v20 >= 0x41 && v19)
          MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
      }
      if (LODWORD(v23[1]) >= 0x41)
      {
        if (v23[0])
          MEMORY[0x2348A0E84](v23[0], 0x1000C8000313F17);
      }
      return v13;
    }
  }
  return 0;
}

uint64_t sub_22F05B5B0(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  uint64_t v41;
  void **v42;
  size_t v43;
  unsigned int v44;
  unsigned __int8 **v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  uint64_t v55;
  void **v56;
  size_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  __int128 *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  int64_t *v73;
  int64_t v74;
  std::string *v75;
  int64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int8 **v82;
  unsigned __int8 **v83;
  unsigned __int8 *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  unsigned int v91;
  void *v92;
  void **v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  int v103;
  int v104;
  unsigned __int8 **v105;
  unsigned __int8 **v106;
  unsigned __int8 *v107;
  _BYTE *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  BOOL v114;
  unsigned __int8 **v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  uint64_t v119;
  void **v120;
  size_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unint64_t v125;
  BOOL v126;
  int v127;
  void **v129;
  int v130;
  unsigned int v131;
  BOOL v132;
  int v133;
  int v134;
  void **v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unsigned __int8 **v140;
  unsigned __int8 **v141;
  unsigned __int8 *v142;
  _BYTE *v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char v154;
  unint64_t *v155;
  std::string::size_type v156;
  unint64_t v157;
  void **v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  unsigned __int8 **v164;
  unsigned __int8 **v165;
  unsigned __int8 *v166;
  _BYTE *v167;
  uint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  unsigned __int8 **v173;
  unsigned __int8 **v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  std::string::size_type v186;
  const void *v187;
  void **v188;
  int v189;
  unint64_t v190;
  __n128 v191;
  std::string::size_type v192;
  const void *v193;
  void **v194;
  std::string::size_type v195;
  std::string::size_type v196;
  void **v197;
  size_t v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  unint64_t v208;
  unsigned __int8 **v209;
  unsigned __int8 **v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned __int8 *v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t *v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  unsigned __int8 *v224;
  uint64_t v225;
  std::string::size_type size;
  const void *v227;
  void **v228;
  std::string::size_type v229;
  const void *v230;
  void **v231;
  std::string::size_type v232;
  std::string::size_type v233;
  void **v234;
  size_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  std::string::size_type v239;
  std::string::size_type v240;
  char v241;
  std::string::size_type v242;
  std::string::size_type v243;
  char v244;
  unsigned __int8 **v245;
  unsigned __int8 **v246;
  unsigned __int8 *v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  BOOL v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned __int8 **v258;
  unsigned __int8 **v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  uint64_t v262;
  int v263;
  BOOL v264;
  _BOOL4 v265;
  void **v266;
  unsigned __int8 **v267;
  unsigned __int8 **v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  uint64_t v271;
  unsigned __int8 *v272;
  uint64_t v273;
  unsigned __int8 v274;
  _BOOL4 v275;
  unsigned __int8 *v276;
  uint64_t v277;
  void **p_dst;
  size_t v279;
  void *v280;
  BOOL v281;
  int v282;
  unsigned __int8 **v283;
  unsigned __int8 *v284;
  uint64_t v285;
  unsigned __int8 *v286;
  uint64_t v287;
  unint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void **__dst;
  std::string::size_type v293;
  void *v294;
  unint64_t *v295;
  uint64_t v296;
  std::string v297;
  uint64_t v298[6];
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305[12];
  void *__p[2];
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  _BYTE v312[64];
  uint64_t v313[2];
  uint64_t v314;
  uint64_t v315;

  v315 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFFA8F0(a2);
  if ((v4 - 404) < 2 || v4 == 1228)
  {
LABEL_3:
    sub_22F006C3C(a1[1], a2 & 0xFFFFFFFFFFFFFFFCLL | 1, 0, 0);
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  v7 = sub_22EFFA8F0(a2);
  v14 = v7;
  if (v7 <= 819)
  {
    if (v7 > 418)
    {
      v19 = (v7 - 429);
      if (v19 <= 0x25)
      {
        if (((1 << (v7 + 83)) & 0x88001) != 0)
          goto LABEL_71;
        if (((1 << (v7 + 83)) & 0x600000) != 0)
        {
LABEL_52:
          v44 = 1;
          goto LABEL_80;
        }
        if (v19 == 37)
        {
          v20 = *(_QWORD *)(a2
                          + ((unint64_t)*(unsigned int *)a2 >> 24)
                          + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                          + 8);
          v21 = *((_BYTE *)a1 + 16);
          *(_OWORD *)__p = *(_OWORD *)a1;
          LOBYTE(v307) = v21;
          v22 = sub_22F00C45C(__p, v20);
LABEL_32:
          LOBYTE(v5) = v22;
          return v5 & 1;
        }
      }
      if (v7 == 419 || v7 == 421)
        goto LABEL_79;
      return sub_22F05D6A4(a1, a2);
    }
    if (!v7)
      return sub_22F05D6A4(a1, a2);
    if (v7 != 410)
    {
      if (v7 != 417)
        return sub_22F05D6A4(a1, a2);
      goto LABEL_71;
    }
    v66 = *(_QWORD *)(a2
                    + ((unint64_t)*(unsigned int *)a2 >> 24)
                    + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                    + 8);
    v67 = *((_BYTE *)a1 + 16);
    *(_OWORD *)__p = *(_OWORD *)a1;
    LOBYTE(v307) = v67;
    if (!sub_22F00C45C(__p, v66))
      goto LABEL_117;
    v68 = (__int128 *)a1[1];
    v69 = *v68;
    v70 = *((_QWORD *)v68 + 2);
    v71 = *((_QWORD *)v68 + 5);
    v308 = *(__int128 *)((char *)v68 + 24);
    *(_OWORD *)__p = v69;
    v307 = v70;
    v309 = v71;
    v310 = v312;
    v311 = 0x800000000;
    if (*((_DWORD *)v68 + 14))
      sub_22F016FFC((uint64_t)&v310, (uint64_t)(v68 + 3));
    v72 = v68[8];
    LOBYTE(v314) = *((_BYTE *)v68 + 144);
    *(_OWORD *)v313 = v72;
    DWORD2(v299) = 1;
    *(_QWORD *)&v299 = 0;
    BYTE12(v299) = 0;
    LOBYTE(v5) = 0;
    if (!sub_22F04035C(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 16), *(_QWORD *)(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8)+ 8), *a1, (uint64_t)&v299))
    {
LABEL_495:
      if (DWORD2(v299) >= 0x41 && (_QWORD)v299)
        MEMORY[0x2348A0E84](v299, 0x1000C8000313F17);
      v280 = v310;
      if (v310 == v312)
        return v5 & 1;
LABEL_478:
      free(v280);
      return v5 & 1;
    }
    if (DWORD2(v299) >= 0x41)
      v73 = (int64_t *)v299;
    else
      v73 = (int64_t *)&v299;
    v74 = *v73;
    if (*(_DWORD *)(a2 + 16) >= 3u)
    {
      LODWORD(v297.__r_.__value_.__r.__words[1]) = 1;
      v297.__r_.__value_.__r.__words[0] = 0;
      v297.__r_.__value_.__s.__data_[12] = 0;
      if (!sub_22F0174A0(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 24), &v297, *a1))
      {
        if (LODWORD(v297.__r_.__value_.__r.__words[1]) >= 0x41 && v297.__r_.__value_.__r.__words[0])
          MEMORY[0x2348A0E84](v297.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        goto LABEL_494;
      }
      if (LODWORD(v297.__r_.__value_.__r.__words[1]) >= 0x41)
        v75 = (std::string *)v297.__r_.__value_.__r.__words[0];
      else
        v75 = &v297;
      v307 -= v75->__r_.__value_.__r.__words[0];
      if (LODWORD(v297.__r_.__value_.__r.__words[1]) >= 0x41 && v297.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84]();
    }
    if ((~LOBYTE(__p[0]) & 3) != 0)
    {
      if (__p[0] < (void *)4)
        goto LABEL_436;
    }
    else
    {
      v253 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
      if (((uint64_t)__p[0] & 4) != 0)
        v253 = __p[0] > (void *)7;
      if (!v253)
        goto LABEL_436;
    }
    v76 = sub_22F040150(*a1, (uint64_t)__p[0], (uint64_t)__p[1]);
    if (v76 < v74)
    {
      v77 = v76;
      v78 = a1[1];
      *(_DWORD *)(v78 + 24) |= 1u;
      *(_DWORD *)(v78 + 56) = 0;
      v79 = *(_QWORD *)(a2
                      + ((unint64_t)*(unsigned int *)a2 >> 24)
                      + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                      + 8);
      v80 = *a1;
      sub_22EFF605C(v79);
      v82 = (unsigned __int8 **)sub_22F072D74(v80, v81, 2183, 0);
      if (v82)
      {
        v83 = v82;
        v84 = *v82;
        if (!v84)
        {
          v84 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v83[1]);
          *v83 = v84;
        }
        LOBYTE(v5) = 0;
        v84[*v84 + 1] = 2;
        v85 = *v83;
        v86 = **v83;
        *v85 = v86 + 1;
        *(_QWORD *)&v85[8 * v86 + 16] = 0;
        v85[(v86 + 1) + 1] = 3;
        v87 = *v83;
        v88 = **v83;
        *(_QWORD *)&(*v83)[8 * v88 + 16] = v77;
        *v87 = v88 + 1;
        v87[(v88 + 1) + 1] = 3;
        v89 = *v83;
        v90 = **v83;
        *v89 = v90 + 1;
        *(_QWORD *)&v89[8 * v90 + 16] = v74;
        goto LABEL_495;
      }
LABEL_494:
      LOBYTE(v5) = 0;
      goto LABEL_495;
    }
LABEL_436:
    if ((v74 + v307 - 1) / (unint64_t)v74 * v74 == v307)
    {
      LOBYTE(v5) = 1;
      goto LABEL_495;
    }
    v254 = a1[1];
    *(_DWORD *)(v254 + 24) |= 1u;
    *(_DWORD *)(v254 + 56) = 0;
    if ((~LOBYTE(__p[0]) & 3) != 0)
    {
      v255 = *(_QWORD *)(a2
                       + ((unint64_t)*(unsigned int *)a2 >> 24)
                       + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                       + 8);
      v256 = *a1;
      if (__p[0] >= (void *)4)
      {
LABEL_440:
        sub_22EFF605C(v255);
        v258 = (unsigned __int8 **)sub_22F072D74(v256, v257, 2183, 0);
        if (!v258)
          goto LABEL_494;
        v259 = v258;
        v260 = *v258;
        if (!v260)
        {
          v260 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v259[1]);
          *v259 = v260;
        }
        v260[*v260 + 1] = 2;
        v261 = *v259;
        v262 = **v259;
        *v261 = v262 + 1;
        *(_QWORD *)&v261[8 * v262 + 16] = 1;
        v263 = v307;
LABEL_493:
        LOBYTE(v5) = 0;
        v261[*v261 + 1] = 2;
        v284 = *v259;
        v285 = **v259;
        *(_QWORD *)&(*v259)[8 * v285 + 16] = v263;
        *v284 = v285 + 1;
        v284[(v285 + 1) + 1] = 3;
        v286 = *v259;
        v287 = **v259;
        *v286 = v287 + 1;
        *(_QWORD *)&v286[8 * v287 + 16] = v74;
        goto LABEL_495;
      }
    }
    else
    {
      if (((uint64_t)__p[0] & 4) != 0)
        v281 = __p[0] > (void *)7;
      else
        v281 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
      v255 = *(_QWORD *)(a2
                       + ((unint64_t)*(unsigned int *)a2 >> 24)
                       + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                       + 8);
      v256 = *a1;
      if (v281)
        goto LABEL_440;
    }
    sub_22EFF605C(v255);
    v283 = (unsigned __int8 **)sub_22F072D74(v256, v282, 2184, 0);
    if (!v283)
      goto LABEL_494;
    v259 = v283;
    v261 = *v283;
    v263 = v307;
    if (!v261)
    {
      v261 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v259[1]);
      *v259 = v261;
    }
    goto LABEL_493;
  }
  if (v7 > 1187)
  {
    switch(v7)
    {
      case 1227:
        goto LABEL_31;
      case 1228:
      case 1230:
      case 1232:
      case 1233:
      case 1234:
        return sub_22F05D6A4(a1, a2);
      case 1229:
        return sub_22F027C94(*a1, (unsigned int *)a2, a1[1]);
      case 1231:
        goto LABEL_71;
      case 1235:
      case 1236:
        v23 = *(_QWORD *)(a2
                        + ((unint64_t)*(unsigned int *)a2 >> 24)
                        + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                        + 8);
        v24 = *((_BYTE *)a1 + 16);
        *(_OWORD *)__p = *(_OWORD *)a1;
        LOBYTE(v307) = v24;
        if (!sub_22F00C45C(__p, v23))
          goto LABEL_117;
        LODWORD(__p[1]) = 1;
        __p[0] = 0;
        BYTE4(__p[1]) = 0;
        LOBYTE(v5) = 0;
        if (!sub_22F04035C(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 16), *(_QWORD *)(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8)+ 8), *a1, (uint64_t)__p))goto LABEL_21;
        v110 = sub_22F040150(*a1, *(_QWORD *)a1[1], *(_QWORD *)(a1[1] + 8));
        v111 = *(_QWORD *)(a1[1] + 16) | v110;
        if (sub_22F30FE14((uint64_t)__p, v111 & -(uint64_t)v111))
          goto LABEL_181;
        if (sub_22F30FE14((uint64_t)__p, v110))
        {
          if (LODWORD(__p[1]) >= 0x41)
            v158 = (void **)__p[0];
          else
            v158 = __p;
          v159 = (unint64_t)*v158;
          v160 = a1[1];
          v161 = *(_QWORD *)(v160 + 16);
          v162 = (char *)(v159 - 1);
          if (v14 == 1236)
            v162 = 0;
          v163 = (unint64_t)&v162[v161] / v159 * v159;
          *(_QWORD *)(v160 + 16) = v163;
          if (v163 != v161)
            *(_BYTE *)(v160 + 144) &= ~1u;
LABEL_181:
          LOBYTE(v5) = 1;
        }
        else
        {
          *(_QWORD *)&v299 = sub_22F072CEC(*a1, *(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8), 2179, 0);
          sub_22F3C4700((unsigned __int8 ***)&v299);
          LOBYTE(v5) = 0;
        }
LABEL_21:
        if (LODWORD(__p[1]) < 0x41)
          return v5 & 1;
        v25 = (void **)__p[0];
        if (!__p[0])
          return v5 & 1;
        goto LABEL_250;
      default:
        if ((v7 - 1188) < 2)
        {
LABEL_31:
          v29 = *(_QWORD *)(a2
                          + ((unint64_t)*(unsigned int *)a2 >> 24)
                          + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                          + 8);
          v30 = *((_BYTE *)a1 + 16);
          *(_OWORD *)__p = *(_OWORD *)a1;
          LOBYTE(v307) = v30;
          v22 = sub_22F010358((int)__p, v29, v8, v9, v10, v11, v12, v13, (uint64_t)v288, v289, v290, v291, (uint64_t)__dst, v293, v294, (uint64_t)v295, v296, (uint64_t)v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_,
                  v297.__r_.__value_.__r.__words[2],
                  v298[0],
                  v298[1],
                  v298[2],
                  v298[3],
                  v298[4],
                  v298[5],
                  v299,
                  *((uint64_t *)&v299 + 1),
                  v300,
                  v301,
                  v302,
                  (uint64_t)v303,
                  v304,
                  v305[0],
                  v305[1],
                  v305[2],
                  v305[3],
                  (void *)v305[4],
                  v305[5]);
          goto LABEL_32;
        }
        if (v7 != 1258)
          return sub_22F05D6A4(a1, a2);
        goto LABEL_3;
    }
  }
  v15 = v7 - 52;
  if ((v7 - 820) > 0x3B)
    return sub_22F05D6A4(a1, a2);
  if (((1 << v15) & 0x110000000000C00) == 0)
  {
    if (((1 << v15) & 0xC00000000000005) != 0)
    {
      v16 = **(_QWORD **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 96))(*a1) + 2000);
      v17 = *a1;
      sub_22EFF605C(a2);
      if ((v16 & 0x200) != 0)
      {
        v31 = (unsigned __int8 **)sub_22F072D74(v17, v18, 2218, 0);
        v32 = v31;
        if (v31)
        {
          v33 = *v31;
          if (!*v32)
          {
            v33 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v32[1]);
            *v32 = v33;
          }
          v33[*v33 + 1] = 2;
          v34 = *v32;
          v35 = **v32;
          *v34 = v35 + 1;
          *(_QWORD *)&v34[8 * v35 + 16] = 0;
          v34[(v35 + 1) + 1] = 2;
          v36 = *v32;
          v37 = **v32;
          *v36 = v37 + 1;
          *(_QWORD *)&v36[8 * v37 + 16] = 0;
        }
        *((_BYTE *)&v297.__r_.__value_.__s + 23) = 1;
        LOWORD(v297.__r_.__value_.__l.__data_) = 39;
        v38 = std::string::append(&v297, (&off_24FAC8C40)[6 * v14]);
        v39 = v38->__r_.__value_.__r.__words[2];
        v299 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        *(_QWORD *)&v300 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        v40 = std::string::append((std::string *)&v299, "'");
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v307 = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if (v32)
        {
          if (v307 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          if (v307 >= 0)
            v43 = HIBYTE(v307) & 0x7F;
          else
            v43 = (size_t)__p[1];
          sub_22E3B89A8(v32, v42, v43);
        }
        if (SHIBYTE(v307) < 0)
          operator delete(__p[0]);
        if (SBYTE7(v300) < 0)
          operator delete((void *)v299);
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v297.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_22F072D74(v17, v18, 103, 0);
      }
      if ((v14 & 0xFFFFFFFE) == 0x36E)
        goto LABEL_52;
LABEL_79:
      v44 = 0;
LABEL_80:
      v59 = 1;
      if (v14 > 821)
      {
        if (v14 != 822 && v14 != 879)
          goto LABEL_86;
      }
      else if (v14 != 421 && v14 != 451)
      {
LABEL_86:
        v59 = 0;
      }
      if (sub_22F00C45C(a1, *(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8)))
      {
        v60 = a1[1];
        v61 = *(_QWORD *)(v60 + 16);
        *(_OWORD *)__p = *(_OWORD *)v60;
        v62 = *(_QWORD *)(v60 + 40);
        v308 = *(_OWORD *)(v60 + 24);
        v307 = v61;
        v309 = v62;
        v310 = v312;
        v311 = 0x800000000;
        if (*(_DWORD *)(v60 + 56))
          sub_22F016FFC((uint64_t)&v310, v60 + 48);
        v63 = *(_OWORD *)(v60 + 128);
        LOBYTE(v314) = *(_BYTE *)(v60 + 144);
        *(_OWORD *)v313 = v63;
        v299 = 0uLL;
        *(_QWORD *)&v300 = 0;
        DWORD2(v300) |= 1u;
        v302 = 0;
        v303 = v305;
        v304 = 0x800000000;
        v305[8] = 0;
        v305[9] = 0;
        v64 = *(_QWORD *)(a2
                        + ((unint64_t)*(unsigned int *)a2 >> 24)
                        + 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                        + 16);
        v297.__r_.__value_.__r.__words[0] = *a1;
        v297.__r_.__value_.__l.__size_ = (std::string::size_type)&v299;
        v297.__r_.__value_.__s.__data_[16] = 0;
        LOBYTE(v5) = 0;
        if (!sub_22F00C45C(&v297, v64))
        {
LABEL_475:
          if (v303 != v305)
            free(v303);
          v280 = v310;
          if (v310 == v312)
            return v5 & 1;
          goto LABEL_478;
        }
        LODWORD(v296) = 1;
        v295 = 0;
        BYTE4(v296) = 0;
        LOBYTE(v5) = 0;
        if (!sub_22F0174A0(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 24), &v295, *a1))goto LABEL_472;
        v65 = v296;
        if (v296 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v295) == v65)
          {
            LOBYTE(v5) = 1;
LABEL_473:
            if (v295)
              MEMORY[0x2348A0E84](v295, 0x1000C8000313F17);
            goto LABEL_475;
          }
        }
        else if (!v295)
        {
          LOBYTE(v5) = 1;
          goto LABEL_475;
        }
        if ((v299 & 3) == 3)
        {
          v250 = v299 & 0x7FFFFFFF8;
          v251 = (v299 & 0x7FFFFFFF8) != 0;
          v252 = v299 & 4;
          if ((v299 & 4) != 0)
            v251 = (unint64_t)v299 > 7;
          if (!v251)
          {
            LODWORD(v297.__r_.__value_.__l.__data_) = 0;
            goto LABEL_483;
          }
        }
        else if ((unint64_t)v299 <= 3)
        {
          LODWORD(v297.__r_.__value_.__l.__data_) = 0;
LABEL_449:
          v265 = (unint64_t)v299 > 3;
LABEL_450:
          if (v265)
            v266 = __p;
          else
            v266 = (void **)&v299;
          sub_22F00676C((uint64_t)v266, (uint64_t)&v297);
          v267 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2232, 0);
          v268 = v267;
          if (v267)
          {
            v269 = *v267;
            if (!*v268)
            {
              v269 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v268[1]);
              *v268 = v269;
            }
            v269[*v269 + 1] = 2;
            v270 = *v268;
            v271 = **v268;
            *v270 = v271 + 1;
            *(_QWORD *)&v270[8 * v271 + 16] = v59;
            v270[(v271 + 1) + 1] = 2;
            v272 = *v268;
            v273 = **v268;
            v274 = v273 + 1;
            *v272 = v273 + 1;
            *(_QWORD *)&v272[8 * v273 + 16] = v44;
            if ((~(_BYTE)v299 & 3) != 0)
            {
              v275 = (unint64_t)v299 > 3;
            }
            else if ((v299 & 4) != 0)
            {
              v275 = (unint64_t)v299 > 7;
            }
            else
            {
              v275 = (v299 & 0x7FFFFFFF8) != 0;
            }
            v272[v274 + 1] = 2;
            v276 = *v268;
            v277 = **v268;
            *v276 = v277 + 1;
            *(_QWORD *)&v276[8 * v277 + 16] = v275;
          }
          sub_22EF55AB4((uint64_t)&v297, *(_QWORD *)(*a1 + 8), *(_QWORD *)(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8)+ 8), &__dst);
          if (v268)
          {
            if (SHIBYTE(v294) >= 0)
              p_dst = (void **)&__dst;
            else
              p_dst = __dst;
            if (SHIBYTE(v294) >= 0)
              v279 = HIBYTE(v294) & 0x7F;
            else
              v279 = v293;
            sub_22E3B89A8(v268, p_dst, v279);
          }
          if (SHIBYTE(v294) < 0)
            operator delete(__dst);
          if (LODWORD(v297.__r_.__value_.__l.__data_) >= 2)
            sub_22EF53BC0((uint64_t *)&v297);
          goto LABEL_471;
        }
        if ((~LOBYTE(__p[0]) & 3) != 0)
        {
          if (__p[0] > (void *)3)
            goto LABEL_134;
        }
        else
        {
          if (((uint64_t)__p[0] & 4) != 0)
            v264 = __p[0] > (void *)7;
          else
            v264 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
          if (v264)
          {
LABEL_134:
            v94 = DWORD2(v300);
            if ((BYTE8(v300) & 1) != 0 || (v308 & 1) != 0)
              goto LABEL_471;
            v95 = *(_QWORD *)(*a1 + 8);
            if ((_DWORD)v311 == v308 >> 4)
            {
              v96 = v309;
            }
            else
            {
              if ((*((_QWORD *)v310 + v311 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if ((*(_DWORD *)((*((_QWORD *)v310 + v311 - 1) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu)
                   - 35 >= 3)
                  v125 = 0;
                else
                  v125 = *((_QWORD *)v310 + v311 - 1) & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v125 = 0;
              }
              v96 = sub_22EF6477C(v95, v125);
              v95 = *(_QWORD *)(*a1 + 8);
              v94 = DWORD2(v300);
            }
            v291 = v96;
            if ((_DWORD)v304 == v94 >> 4)
            {
              v137 = v302;
            }
            else
            {
              if ((*((_QWORD *)v303 + v304 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if ((*(_DWORD *)((*((_QWORD *)v303 + v304 - 1) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu)
                   - 35 >= 3)
                  v138 = 0;
                else
                  v138 = *((_QWORD *)v303 + v304 - 1) & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v138 = 0;
              }
              v137 = sub_22EF6477C(v95, v138);
              v96 = v291;
            }
            v139 = (uint64_t *)(v96 & 0xFFFFFFFFFFFFFFF0);
            if (*(_QWORD *)(v139[1] & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            {
              v140 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2234, 0);
              if (v140)
              {
                v141 = v140;
                v142 = *v140;
                if (!v142)
                {
                  v142 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v141[1]);
                  *v141 = v142;
                }
                LOBYTE(v5) = 0;
                v142[*v142 + 1] = 2;
                v143 = *v141;
                v144 = **v141;
                *v143 = v144 + 1;
                *(_QWORD *)&v143[8 * v144 + 16] = v59;
                v143[(v144 + 1) + 1] = 9;
                v145 = *v141;
                v146 = **v141;
                *(_QWORD *)&(*v141)[8 * v146 + 16] = v137;
                LOBYTE(v146) = v146 + 1;
                *v145 = v146;
                v147 = v291;
                v145[v146 + 1] = 9;
                v148 = *v141;
                v149 = **v141;
                *v148 = v149 + 1;
                *(_QWORD *)&v148[8 * v149 + 16] = v147;
                goto LABEL_472;
              }
LABEL_471:
              LOBYTE(v5) = 0;
              goto LABEL_472;
            }
            v150 = sub_22F1110EC(*v139, 0);
            v151 = *a1;
            if (v150)
            {
              v152 = a2;
              v153 = 2230;
LABEL_283:
              v164 = (unsigned __int8 **)sub_22F072CEC(v151, v152, v153, 0);
              if (!v164)
                goto LABEL_471;
              v165 = v164;
              v166 = *v164;
              if (!v166)
              {
                v166 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v165[1]);
                *v165 = v166;
              }
              LOBYTE(v5) = 0;
              v166[*v166 + 1] = 2;
              v167 = *v165;
              v168 = **v165;
              *(_QWORD *)&(*v165)[8 * v168 + 16] = v59;
              v169 = v168 + 1;
              *v167 = v168 + 1;
              v170 = v291;
              v167[v169 + 1] = 9;
              v171 = *v165;
              v172 = **v165;
              *v171 = v172 + 1;
              *(_QWORD *)&v171[8 * v172 + 16] = v170;
LABEL_472:
              if (v296 < 0x41)
                goto LABEL_475;
              goto LABEL_473;
            }
            v154 = sub_22F111968((unint64_t *)&v291, *(_QWORD *)(v151 + 8));
            v151 = *a1;
            if ((v154 & 1) == 0)
            {
              v152 = a2;
              v153 = 2231;
              goto LABEL_283;
            }
            sub_22EF5CCD0(*(_QWORD *)(v151 + 8), *(_QWORD *)(v291 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v297);
            v156 = v297.__r_.__value_.__r.__words[0];
            if ((v44 & 1) != 0)
            {
LABEL_270:
              if ((BYTE8(v300) & 1) != 0 || (BYTE8(v300) & 4) != 0 && (_DWORD)v304 == 1)
              {
                v157 = 0;
              }
              else
              {
                v189 = ((_DWORD)v304 == DWORD2(v300) >> 4) & (DWORD2(v300) >> 3);
                if (v189 == 1)
                  v190 = *((_QWORD *)v303 + v304 - 1);
                else
                  v190 = ((unint64_t)DWORD2(v300) >> 1) & 1;
                v202 = v301;
                if (!v189)
                  v202 = 1;
                v157 = v202 - v190;
              }
              if ((v308 & 1) != 0 || (v308 & 4) != 0 && (_DWORD)v311 == 1)
              {
                v203 = 0;
              }
              else
              {
                v204 = ((_DWORD)v311 == v308 >> 4) & (v308 >> 3);
                if (v204 == 1)
                  v205 = *((_QWORD *)v310 + v311 - 1);
                else
                  v205 = ((unint64_t)v308 >> 1) & 1;
                v206 = *((_QWORD *)&v308 + 1);
                if (!v204)
                  v206 = 1;
                v203 = v206 - v205;
              }
              v207 = v296;
              if (v296 >= 0x41)
              {
                if (v207 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v295) > 0x40)
                  goto LABEL_342;
                v208 = *v295;
              }
              else
              {
                v208 = (unint64_t)v295;
              }
              if (v208 > v157 || v208 > v203)
              {
LABEL_342:
                v209 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2235, 0);
                v210 = v209;
                if (v209)
                {
                  v211 = *v209;
                  if (!*v210)
                  {
                    v211 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v210[1]);
                    *v210 = v211;
                  }
                  v211[*v211 + 1] = 2;
                  v212 = *v210;
                  v213 = **v210;
                  *v212 = v213 + 1;
                  *(_QWORD *)&v212[8 * v213 + 16] = v59;
                  v212[(v213 + 1) + 1] = 2;
                  v214 = *v210;
                  v215 = **v210;
                  *v214 = v215 + 1;
                  *(_QWORD *)&v214[8 * v215 + 16] = v44;
                }
                v216 = v296;
                if (v296 < 0x41
                  || v216 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v295) <= 0x40)
                {
                  v218 = v295;
                  if (v216 < 0x41)
                    v218 = (unint64_t *)&v295;
                  if (*v218 > v157)
                    v217 = 1;
                  else
                    v217 = 2;
                }
                else
                {
                  v217 = 1;
                }
                if (v210)
                {
                  v219 = *v210;
                  if (!*v210)
                  {
                    v219 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v210[1]);
                    *v210 = v219;
                  }
                  v219[*v219 + 1] = 2;
                  v220 = *v210;
                  v221 = **v210;
                  v222 = v221 + 1;
                  *v220 = v221 + 1;
                  *(_QWORD *)&v220[8 * v221 + 16] = v217;
                  v223 = v291;
                  v220[v222 + 1] = 9;
                  v224 = *v210;
                  v225 = **v210;
                  *v224 = v225 + 1;
                  *(_QWORD *)&v224[8 * v225 + 16] = v223;
                  v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
                  *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F455490;
                  llvm::APInt::toString();
                  size = v297.__r_.__value_.__l.__size_;
                  if (v297.__r_.__value_.__l.__size_ <= 0x7FFFFFFFFFFFFFF7)
                  {
                    v227 = (const void *)v297.__r_.__value_.__r.__words[0];
                    if (v297.__r_.__value_.__l.__size_ >= 0x17)
                    {
                      v232 = (v297.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v297.__r_.__value_.__l.__size_ | 7) != 0x17)
                        v232 = v297.__r_.__value_.__l.__size_ | 7;
                      v233 = v232 + 1;
                      v228 = (void **)operator new(v232 + 1);
                      v293 = size;
                      v294 = (void *)(v233 | 0x8000000000000000);
                      __dst = v228;
                    }
                    else
                    {
                      HIBYTE(v294) = v297.__r_.__value_.__s.__data_[8];
                      v228 = (void **)&__dst;
                      if (!v297.__r_.__value_.__l.__size_)
                        goto LABEL_369;
                    }
                    memmove(v228, v227, size);
LABEL_369:
                    *((_BYTE *)v228 + size) = 0;
                    if ((uint64_t *)v297.__r_.__value_.__l.__data_ != v298)
                      free(v297.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v294) >= 0)
                      v234 = (void **)&__dst;
                    else
                      v234 = __dst;
                    if (SHIBYTE(v294) >= 0)
                      v235 = HIBYTE(v294) & 0x7F;
                    else
                      v235 = v293;
                    sub_22E3B89A8(v210, v234, v235);
LABEL_391:
                    if (SHIBYTE(v294) < 0)
                      operator delete(__dst);
                    goto LABEL_471;
                  }
LABEL_428:
                  abort();
                }
                v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
                *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F455490;
                llvm::APInt::toString();
                v229 = v297.__r_.__value_.__l.__size_;
                if (v297.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_428;
                v230 = (const void *)v297.__r_.__value_.__r.__words[0];
                if (v297.__r_.__value_.__l.__size_ >= 0x17)
                {
                  v239 = (v297.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v297.__r_.__value_.__l.__size_ | 7) != 0x17)
                    v239 = v297.__r_.__value_.__l.__size_ | 7;
                  v240 = v239 + 1;
                  v231 = (void **)operator new(v239 + 1);
                  v293 = v229;
                  v294 = (void *)(v240 | 0x8000000000000000);
                  __dst = v231;
                }
                else
                {
                  HIBYTE(v294) = v297.__r_.__value_.__s.__data_[8];
                  v231 = (void **)&__dst;
                  if (!v297.__r_.__value_.__l.__size_)
                  {
LABEL_389:
                    *((_BYTE *)v231 + v229) = 0;
                    if ((uint64_t *)v297.__r_.__value_.__l.__data_ != v298)
                      free(v297.__r_.__value_.__l.__data_);
                    goto LABEL_391;
                  }
                }
                memmove(v231, v230, v229);
                goto LABEL_389;
              }
              if (sub_22F03A460((uint64_t)&v299, (uint64_t)__p))
              {
                v236 = v208 * v156;
                if (v307 >= (unint64_t)v300 && v307 - (uint64_t)v300 < v236)
                {
                  v237 = *a1;
                  if ((v59 & 1) != 0)
                  {
                    if (!sub_22F01DC1C(v237, a2, (uint64_t)&v299, v291, v208 - 1)
                      || (sub_22F01DC1C(*a1, a2, (uint64_t)__p, v291, v208 - 1) & 1) == 0)
                    {
                      goto LABEL_471;
                    }
                    v238 = -1;
                    goto LABEL_395;
                  }
LABEL_424:
                  v245 = (unsigned __int8 **)sub_22F072CEC(v237, a2, 2233, 0);
                  if (!v245)
                    goto LABEL_471;
                  v246 = v245;
                  v247 = *v245;
                  if (!v247)
                  {
                    v247 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v246[1]);
                    *v246 = v247;
                  }
                  LOBYTE(v5) = 0;
                  v247[*v247 + 1] = 2;
                  v248 = *v246;
                  v249 = **v246;
                  *v248 = v249 + 1;
                  *(_QWORD *)&v248[8 * v249 + 16] = v44;
                  goto LABEL_472;
                }
                if ((unint64_t)v300 < v307)
                  v244 = 1;
                else
                  v244 = v59;
                v238 = 1;
                if ((v244 & 1) == 0 && (uint64_t)v300 - v307 < v236)
                {
                  v237 = *a1;
                  goto LABEL_424;
                }
              }
              else
              {
                v238 = 1;
              }
LABEL_395:
              LOBYTE(v5) = 0;
              while (1)
              {
                LODWORD(v297.__r_.__value_.__l.__data_) = 0;
                if (!sub_22F0248D4((uint64_t *)*a1, a2, v291, (uint64_t)&v299, (uint64_t)&v297, 0)
                  || !sub_22F014A60(*a1, a2, (uint64_t)__p, v291, (uint64_t)&v297))
                {
                  goto LABEL_401;
                }
                if (!--v208)
                {
                  v241 = 0;
                  LOBYTE(v5) = 1;
                  goto LABEL_402;
                }
                if (sub_22F01DC1C(*a1, a2, (uint64_t)&v299, v291, v238))
                {
                  v241 = sub_22F01DC1C(*a1, a2, (uint64_t)__p, v291, v238);
                  LOBYTE(v5) = v241 & v5;
                }
                else
                {
LABEL_401:
                  v241 = 0;
                  LOBYTE(v5) = 0;
                }
LABEL_402:
                if (LODWORD(v297.__r_.__value_.__l.__data_) >= 2)
                  sub_22EF53BC0((uint64_t *)&v297);
                if ((v241 & 1) == 0)
                  goto LABEL_472;
              }
            }
            v290 = 0;
            LODWORD(v289) = v296;
            if (v296 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v288, (const llvm::APInt *)&v295);
            else
              v288 = v295;
            llvm::APInt::udivrem((llvm::APInt *)&v288, (const llvm::APInt *)v156, (uint64_t)&v295, (llvm::APInt *)&v290, v155);
            if (!v290)
            {
              if (v289 >= 0x41 && v288)
                MEMORY[0x2348A0E84](v288, 0x1000C8000313F17);
              goto LABEL_270;
            }
            v173 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2235, 0);
            if (v173)
            {
              v174 = v173;
              v175 = *v173;
              if (!v175)
              {
                v175 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v174[1]);
                *v174 = v175;
              }
              v175[*v175 + 1] = 2;
              v176 = *v174;
              v177 = **v174;
              *v176 = v177 + 1;
              *(_QWORD *)&v176[8 * v177 + 16] = v59;
              v176[(v177 + 1) + 1] = 2;
              v178 = *v174;
              v179 = **v174;
              *v178 = v179 + 1;
              *(_QWORD *)&v178[8 * v179 + 16] = 0;
              v178[(v179 + 1) + 1] = 2;
              v180 = *v174;
              v181 = **v174;
              v182 = v181 + 1;
              *v180 = v181 + 1;
              *(_QWORD *)&v180[8 * v181 + 16] = 0;
              v183 = v291;
              v180[v182 + 1] = 9;
              v184 = *v174;
              v185 = **v174;
              *v184 = v185 + 1;
              *(_QWORD *)&v184[8 * v185 + 16] = v183;
              v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
              *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F455490;
              llvm::APInt::toString();
              v186 = v297.__r_.__value_.__l.__size_;
              if (v297.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_428;
              v187 = (const void *)v297.__r_.__value_.__r.__words[0];
              if (v297.__r_.__value_.__l.__size_ >= 0x17)
              {
                v195 = (v297.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v297.__r_.__value_.__l.__size_ | 7) != 0x17)
                  v195 = v297.__r_.__value_.__l.__size_ | 7;
                v196 = v195 + 1;
                v188 = (void **)operator new(v195 + 1);
                v293 = v186;
                v294 = (void *)(v196 | 0x8000000000000000);
                __dst = v188;
              }
              else
              {
                HIBYTE(v294) = v297.__r_.__value_.__s.__data_[8];
                v188 = (void **)&__dst;
                if (!v297.__r_.__value_.__l.__size_)
                  goto LABEL_311;
              }
              memmove(v188, v187, v186);
LABEL_311:
              *((_BYTE *)v188 + v186) = 0;
              if ((uint64_t *)v297.__r_.__value_.__l.__data_ != v298)
                free(v297.__r_.__value_.__l.__data_);
              if (SHIBYTE(v294) >= 0)
                v197 = (void **)&__dst;
              else
                v197 = __dst;
              if (SHIBYTE(v294) >= 0)
                v198 = HIBYTE(v294) & 0x7F;
              else
                v198 = v293;
              v191.n128_f64[0] = sub_22E3B89A8(v174, v197, v198);
              v199 = *v174;
              if (!*v174)
              {
                v199 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v174[1]);
                *v174 = v199;
              }
              v199[*v199 + 1] = 3;
              v200 = *v174;
              v201 = **v174;
              *v200 = v201 + 1;
              *(_QWORD *)&v200[8 * v201 + 16] = v156;
LABEL_413:
              if (SHIBYTE(v294) < 0)
                operator delete(__dst);
              if (v289 >= 0x41 && v288)
                MEMORY[0x2348A0E84](v288, 0x1000C8000313F17, v191);
              goto LABEL_471;
            }
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
            *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F455490;
            llvm::APInt::toString();
            v192 = v297.__r_.__value_.__l.__size_;
            if (v297.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_428;
            v193 = (const void *)v297.__r_.__value_.__r.__words[0];
            if (v297.__r_.__value_.__l.__size_ >= 0x17)
            {
              v242 = (v297.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v297.__r_.__value_.__l.__size_ | 7) != 0x17)
                v242 = v297.__r_.__value_.__l.__size_ | 7;
              v243 = v242 + 1;
              v194 = (void **)operator new(v242 + 1);
              v293 = v192;
              v294 = (void *)(v243 | 0x8000000000000000);
              __dst = v194;
            }
            else
            {
              HIBYTE(v294) = v297.__r_.__value_.__s.__data_[8];
              v194 = (void **)&__dst;
              if (!v297.__r_.__value_.__l.__size_)
              {
LABEL_411:
                *((_BYTE *)v194 + v192) = 0;
                if ((uint64_t *)v297.__r_.__value_.__l.__data_ != v298)
                  free(v297.__r_.__value_.__l.__data_);
                goto LABEL_413;
              }
            }
            memmove(v194, v193, v192);
            goto LABEL_411;
          }
        }
        LODWORD(v297.__r_.__value_.__l.__data_) = 0;
        if ((v299 & 3) != 3)
          goto LABEL_449;
        v252 = v299 & 4;
        v250 = v299 & 0x7FFFFFFF8;
LABEL_483:
        v265 = (unint64_t)v299 > 7;
        if (!v252)
          v265 = v250 != 0;
        goto LABEL_450;
      }
LABEL_117:
      LOBYTE(v5) = 0;
      return v5 & 1;
    }
    return sub_22F05D6A4(a1, a2);
  }
  v26 = **(_QWORD **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 96))(*a1) + 2000);
  v27 = *a1;
  sub_22EFF605C(a2);
  if ((v26 & 0x200) != 0)
  {
    v45 = (unsigned __int8 **)sub_22F072D74(v27, v28, 2218, 0);
    v46 = v45;
    if (v45)
    {
      v47 = *v45;
      if (!*v46)
      {
        v47 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v46[1]);
        *v46 = v47;
      }
      v47[*v47 + 1] = 2;
      v48 = *v46;
      v49 = **v46;
      *v48 = v49 + 1;
      *(_QWORD *)&v48[8 * v49 + 16] = 0;
      v48[(v49 + 1) + 1] = 2;
      v50 = *v46;
      v51 = **v46;
      *v50 = v51 + 1;
      *(_QWORD *)&v50[8 * v51 + 16] = 0;
    }
    *((_BYTE *)&v297.__r_.__value_.__s + 23) = 1;
    LOWORD(v297.__r_.__value_.__l.__data_) = 39;
    v52 = std::string::append(&v297, (&off_24FAC8C40)[6 * v14]);
    v53 = v52->__r_.__value_.__r.__words[2];
    v299 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    *(_QWORD *)&v300 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append((std::string *)&v299, "'");
    v55 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v307 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (v46)
    {
      if (v307 >= 0)
        v56 = __p;
      else
        v56 = (void **)__p[0];
      if (v307 >= 0)
        v57 = HIBYTE(v307) & 0x7F;
      else
        v57 = (size_t)__p[1];
      sub_22E3B89A8(v46, v56, v57);
    }
    if (SHIBYTE(v307) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v300) < 0)
      operator delete((void *)v299);
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_22F072D74(v27, v28, 103, 0);
  }
LABEL_71:
  if (!sub_22F00C45C(a1, *(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8)))goto LABEL_117;
  LODWORD(v293) = 1;
  __dst = 0;
  BYTE4(v293) = 0;
  LOBYTE(v5) = 0;
  if (!sub_22F0174A0(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 16), &__dst, *a1))goto LABEL_248;
  v58 = -1;
  if (v14 > 830)
  {
    if (v14 == 831 || v14 == 872)
      goto LABEL_145;
  }
  else if (v14 == 429 || v14 == 444)
  {
    goto LABEL_145;
  }
  LODWORD(__p[1]) = 1;
  __p[0] = 0;
  BYTE4(__p[1]) = 0;
  v5 = sub_22F0174A0(*(_QWORD *)(a2+ ((unint64_t)*(unsigned int *)a2 >> 24)+ 8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 24), __p, *a1);
  if ((v5 & 1) == 0)
  {
    v91 = __p[1];
    v92 = __p[0];
    goto LABEL_140;
  }
  v91 = __p[1];
  if (BYTE4(__p[1]))
  {
    v92 = __p[0];
    v93 = __p;
    if (LODWORD(__p[1]) >= 0x41)
      v93 = (void **)__p[0];
    v58 = (uint64_t)*v93;
LABEL_140:
    if (v91 < 0x41 || !v92)
      goto LABEL_143;
    goto LABEL_142;
  }
  if (LODWORD(__p[1]) > 0x40)
  {
    v58 = *(_QWORD *)__p[0];
LABEL_142:
    MEMORY[0x2348A0E84]();
LABEL_143:
    if (!v5)
      goto LABEL_248;
    if (!v58)
      goto LABEL_247;
    goto LABEL_145;
  }
  v58 = (uint64_t)__p[0] << -(uint64_t)LODWORD(__p[1]) >> -(uint64_t)LODWORD(__p[1]);
  if (!v58)
    goto LABEL_247;
LABEL_145:
  if (!sub_22F0402B4(a1[1], *a1, a2))
    goto LABEL_206;
  v97 = a1[1];
  v99 = *(_BYTE *)(v97 + 24);
  v98 = v97 + 24;
  if ((v99 & 1) != 0)
    goto LABEL_206;
  v100 = sub_22F02EA54(v98, *(_QWORD *)(*a1 + 8));
  v101 = v100;
  v102 = 0;
  v103 = 0;
  if (v14 <= 829)
  {
    if (v14 > 443)
    {
      if (v14 != 444)
      {
        if (v14 != 448)
          goto LABEL_224;
        goto LABEL_221;
      }
LABEL_220:
      v103 = 1;
      goto LABEL_221;
    }
    if (v14 != 417)
    {
      if (v14 != 429)
        goto LABEL_224;
LABEL_162:
      sub_22F03A0B4((uint64_t)__p, *(_QWORD *)(*a1 + 8), v100, (uint64_t)&__dst);
      v104 = sub_22E4634B4((uint64_t)__p, (uint64_t)&__dst);
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
      if (!v104)
      {
        v103 = 1;
        goto LABEL_167;
      }
LABEL_247:
      sub_22F02D590(a1[1], *(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
      LOBYTE(v5) = 1;
      goto LABEL_248;
    }
    goto LABEL_172;
  }
  if (v14 > 871)
  {
    if (v14 != 872)
    {
      if (v14 != 876)
      {
        if (v14 != 1231)
          goto LABEL_224;
LABEL_167:
        sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
        llvm::APInt::trunc((llvm::APInt *)&__dst);
        if (LODWORD(__p[1]) >= 0x41)
        {
          v102 = *(void **)__p[0];
          if (__p[0])
            MEMORY[0x2348A0E84](__p[0], 0x1000C8000313F17);
        }
        else
        {
          v102 = __p[0];
        }
        goto LABEL_224;
      }
LABEL_221:
      v129 = (void **)&__dst;
      if (v293 >= 0x41)
        v129 = __dst;
      v102 = *v129;
      goto LABEL_224;
    }
    goto LABEL_220;
  }
  if (v14 == 830)
  {
LABEL_172:
    if (sub_22F1110EC(*(_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF0), 0))
    {
      v105 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2224, 0);
      if (v105)
      {
        v106 = v105;
        v107 = *v105;
        if (!v107)
        {
          v107 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v106[1]);
          *v106 = v107;
        }
        LOBYTE(v5) = 0;
        v107[*v107 + 1] = 9;
        v108 = *v106;
        v109 = **v106;
        *v108 = v109 + 1;
        *(_QWORD *)&v108[8 * v109 + 16] = v101;
        goto LABEL_248;
      }
    }
    else
    {
      v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v113 = *(_DWORD *)(v112 + 16);
      if (v112)
        v114 = *(_DWORD *)(v112 + 16) == 11;
      else
        v114 = 0;
      if (v114)
      {
        v126 = ((v113 >> 19) & 0x1FF) - 167 > 0xC || ((1 << ((v113 >> 19) + 89)) & 0x1803) == 0;
        v127 = v113 & 0xFF80000;
        if (!v126 || v127 == 89128960)
        {
          v103 = 0;
          goto LABEL_167;
        }
      }
      v115 = (unsigned __int8 **)sub_22F072CEC(*a1, a2, 2228, 0);
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = 1;
      LOWORD(v297.__r_.__value_.__l.__data_) = 39;
      v116 = std::string::append(&v297, (&off_24FAC8C40)[6 * v14]);
      v117 = v116->__r_.__value_.__r.__words[2];
      v299 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      *(_QWORD *)&v300 = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      v118 = std::string::append((std::string *)&v299, "'");
      v119 = v118->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v307 = v119;
      v118->__r_.__value_.__l.__size_ = 0;
      v118->__r_.__value_.__r.__words[2] = 0;
      v118->__r_.__value_.__r.__words[0] = 0;
      if (v115)
      {
        if (v307 >= 0)
          v120 = __p;
        else
          v120 = (void **)__p[0];
        if (v307 >= 0)
          v121 = HIBYTE(v307) & 0x7F;
        else
          v121 = (size_t)__p[1];
        sub_22E3B89A8(v115, v120, v121);
        v122 = *v115;
        if (!*v115)
        {
          v122 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v115[1]);
          *v115 = v122;
        }
        v122[*v122 + 1] = 9;
        v123 = *v115;
        v124 = **v115;
        *v123 = v124 + 1;
        *(_QWORD *)&v123[8 * v124 + 16] = v101;
      }
      if (SHIBYTE(v307) < 0)
        operator delete(__p[0]);
      if (SBYTE7(v300) < 0)
        operator delete((void *)v299);
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v297.__r_.__value_.__l.__data_);
    }
LABEL_206:
    LOBYTE(v5) = 0;
    goto LABEL_248;
  }
  if (v14 == 831)
    goto LABEL_162;
LABEL_224:
  LOBYTE(v5) = 0;
  while (1)
  {
    LODWORD(__p[0]) = 0;
    v130 = sub_22F0248D4((uint64_t *)*a1, a2, v101, a1[1], (uint64_t)__p, 0);
    v131 = __p[0];
    if (v130)
      v132 = LODWORD(__p[0]) == 2;
    else
      v132 = 0;
    if (!v132)
    {
      LOBYTE(v5) = 0;
      v133 = 1;
      goto LABEL_239;
    }
    v134 = v307;
    v135 = v307 >= 0x41 ? (void **)__p[1] : &__p[1];
    if (*v135 == v102)
    {
      LOBYTE(v5) = 1;
      v133 = 1;
    }
    else
    {
      if (!v103)
        goto LABEL_238;
      if (v307 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p[1]) != v134)
        {
LABEL_238:
          v136 = sub_22F01DC1C(*a1, a2, a1[1], v101, 1);
          v133 = v136 ^ 1;
          LOBYTE(v5) = v136 & v5;
          v131 = __p[0];
LABEL_239:
          if (v131 < 2)
            goto LABEL_241;
          goto LABEL_240;
        }
      }
      else if (__p[1])
      {
        goto LABEL_238;
      }
      v133 = 4;
    }
LABEL_240:
    sub_22EF53BC0((uint64_t *)__p);
LABEL_241:
    if (v133)
      break;
    if (!--v58)
      goto LABEL_247;
  }
  if (v133 == 4)
    goto LABEL_247;
LABEL_248:
  if (v293 >= 0x41)
  {
    v25 = __dst;
    if (__dst)
LABEL_250:
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
  }
  return v5 & 1;
}

uint64_t sub_22F05D6A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 **v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t result;
  uint64_t v38;
  _BYTE **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  _BYTE **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84[9];
  uint64_t v85;
  void **v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD v92[11];
  void *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[64];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  LODWORD(v84[0]) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v6 = *(unsigned int *)a2;
  v7 = (unsigned __int8 **)(a2 + (v6 >> 24));
  v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      v9 = v8;
      v10 = *v8;
      if (v10 > 213)
      {
        if (v10 == 233)
        {
          if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v12 = v9 + 16;
        }
        else
        {
          if (v10 != 214)
            goto LABEL_19;
          v12 = v9 + 24;
        }
      }
      else if (v10 == 155)
      {
        if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v9[48])
          v12 = v9 + 24;
        else
          v12 = v9 + 32;
      }
      else
      {
        if (v10 != 176)
          goto LABEL_19;
        v11 = *((unsigned int *)v9 + 5);
        if ((_DWORD)v11 == -1)
          goto LABEL_19;
        v12 = &v9[8 * v11 + 40];
      }
      v8 = *(unsigned __int8 **)v12;
      if (v8 == v9)
        goto LABEL_19;
    }
  }
  v9 = 0;
LABEL_19:
  v13 = *((_QWORD *)v9 + 1);
  memset(v103, 0, sizeof(v103));
  LODWORD(v104) = -1;
  v105 = 0;
  v106 = v108;
  v107 = 0x800000000;
  v14 = &v7[((v6 >> 18) & 1) + 1];
  v110 = 0;
  v109 = 0;
  v15 = *(unsigned int *)(a2 + 16);
  v16 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 136839179;
  else
    v19 = 0;
  if (!v19)
  {
    if ((*(_BYTE *)(v17 + 16) == 39 || *(_DWORD *)(v18 + 16) == 39 && (v17 = sub_22F10CF48(v17)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 |= 1u;
      v97 = 0;
      v98 = v100;
      v99 = 0x800000000;
      v101 = 0;
      v102 = 0;
      v85 = *a1;
      v86 = &v93;
      LOBYTE(v87) = 0;
      v82 = v5;
      if (sub_22F00C45C(&v85, v9))
      {
        if (!v95 && (v93 & 3) == 0)
        {
          v21 = (unint64_t)v93 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v93 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 52 < 6)
          {
            v47 = *(_QWORD *)(*a1 + 8);
            v48 = sub_22F10ACF8(*v16);
            if (sub_22EF5F5D4(v47, v48, *(_QWORD *)(v21 + 48)))
            {
              v49 = *(unsigned __int8 *)a2;
              if (v49 == 141)
              {
                v50 = *(_DWORD *)(a2 + 4) & 0x3F;
                if (v50 - 18 < 8 || (v23 = 0, v80 = 0, v50 <= 0x1D) && ((1 << v50) & 0x30008000) != 0)
                {
                  v51 = (_BYTE **)*a1;
                  v52 = *(_QWORD *)(*a1 + 24);
                  v53 = *(unsigned int *)(v52 + 92);
                  v54 = (*(_DWORD *)(v52 + 120) + 1);
                  *(_DWORD *)(v52 + 120) = v54;
                  v23 = v53 | (v54 << 32);
                  v55 = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
                  if (!sub_22F0279B4((uint64_t)&v14[v55], v15 - v55, v21, v23, v51, v21, 1))
                  {
                    v81 = v23;
                    v22 = 0;
                    v83 = 0;
                    LOBYTE(v23) = 0;
                    v20 = v21;
                    goto LABEL_30;
                  }
                  v80 = v21;
                }
              }
              else
              {
                v80 = 0;
                v23 = 0;
              }
              v81 = v23;
              if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                goto LABEL_207;
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 32))(v21) + 80) & 0xE000) != 0x4000
                && ((*(_QWORD *)(v21 + 40) & 7) != 6
                 || (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
              {
                v70 = *a1;
                if ((_DWORD)v15)
                {
                  if (sub_22F0098FC(v70, *v14, v103))
                  {
                    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                    if (v49 == 141
                      && (**(_QWORD **)(v71 + 2000) & 0x1000) != 0
                      && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                      && (*(_BYTE *)(v21 + 82) & 0x80) != 0)
                    {
                      v83 = v103;
                      if (!sub_22F013A2C((uint64_t *)*a1, *v14, (uint64_t)v103))
                      {
                        v22 = 0;
                        goto LABEL_165;
                      }
                    }
                    --v15;
                    ++v14;
                    v83 = v103;
LABEL_202:
                    v22 = 1;
                    goto LABEL_203;
                  }
                }
                else
                {
                  sub_22F072CEC(v70, a2, 103, 0);
                  v15 = 0;
                }
LABEL_164:
                v22 = 0;
                v83 = 0;
LABEL_165:
                LOBYTE(v23) = 0;
                goto LABEL_203;
              }
              if (!sub_22EFD799C(v21))
              {
LABEL_207:
                if (sub_22EFBFDCC(v21, 0, 0))
                {
                  if ((*(_QWORD *)(v21 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                  {
                    v85 = 0;
                    v86 = 0;
                    v87 = 0;
                    v88 |= 1u;
                    v89 = 0;
                    v90 = v92;
                    v91 = 0x800000000;
                    v92[8] = 0;
                    v92[9] = 0;
                    if (sub_22F027C94(*a1, (unsigned int *)a2, (uint64_t)&v85))
                    {
                      sub_22F00676C((uint64_t)&v85, (uint64_t)v84);
                      LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
                    }
                    else
                    {
                      LOBYTE(v23) = 0;
                    }
                    v20 = v80;
                    if (v90 != v92)
                    {
                      free(v90);
                      v20 = v80;
                    }
                    v82 = v5;
                    v22 = 0;
                    v83 = 0;
LABEL_30:
                    if (v98 != v100)
                    {
                      v24 = v15;
                      v25 = v14;
                      v26 = v20;
                      free(v98);
                      v20 = v26;
                      v14 = v25;
                      v15 = v24;
                    }
                    if ((v22 & 1) == 0)
                    {
                      v5 = v82;
                      goto LABEL_58;
                    }
                    v27 = 0;
                    v5 = v82;
                    if (v20)
                      goto LABEL_80;
                    goto LABEL_79;
                  }
                  if (sub_22F02836C(*a1, (unsigned int *)a2))
                  {
                    LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                    v22 = 0;
                    v83 = 0;
                    v82 = -1;
LABEL_203:
                    v20 = v80;
                    goto LABEL_30;
                  }
                  goto LABEL_164;
                }
                goto LABEL_201;
              }
              v68 = *(_WORD *)(v21 + 80) & 0x7F;
              v69 = -40;
              if (v68 > 0x46)
              {
                switch(v68)
                {
                  case 'S':
                    goto LABEL_183;
                  case 'G':
                    v69 = -56;
                    goto LABEL_183;
                  case 'Q':
                    goto LABEL_183;
                }
              }
              else
              {
                if (v68 <= 0x18)
                {
                  if (v68 == 16)
                    goto LABEL_151;
                  if (((1 << v68) & 0x1066) != 0)
                    goto LABEL_183;
                  if (v68 == 24)
                  {
LABEL_151:
                    v69 = -48;
LABEL_183:
                    v72 = *(_QWORD *)(v21 + 72 + v69 + 16);
                    v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
                    if ((v72 & 4) != 0)
                      v73 = (_QWORD *)*v73;
                    if (v73)
                      v23 = (unint64_t)(v73 - 8);
                    else
                      v23 = 0;
                    v74 = sub_22EFD462C(v23);
                    if (v74 && (*(_DWORD *)(v74 + 28) & 0x7F) == 0x1D)
                      v74 = *(_QWORD *)(v74 + 48);
                    v75 = *(_QWORD *)(v23 + 128);
                    if (!v75
                      || ((*(unsigned __int16 *)(v75 + 8) | (*(unsigned __int8 *)(v75 + 10) << 16)) & 0x100000) == 0
                      || (*(_BYTE *)(v75 + 104) & 4) == 0)
                    {
                      v83 = 0;
                      v22 = 1;
                      v21 = v74;
                      goto LABEL_203;
                    }
                    v76 = *(_QWORD *)((*(_QWORD *)(v21 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                    v77 = *(_QWORD *)(v74 + 144);
                    if ((v77 & 6) != 0)
                      v78 = 0;
                    else
                      v78 = v77 & 0xFFFFFFFFFFFFFFF8;
                    v85 = 0;
                    v21 = sub_22EFE9880(v78, *(_QWORD *)v76, *(unsigned int *)(v76 + 8), (uint64_t)&v85);
LABEL_201:
                    v83 = 0;
                    goto LABEL_202;
                  }
                }
                if (v68 == 70)
                {
LABEL_181:
                  v69 = -64;
                  goto LABEL_183;
                }
              }
              if (v68 - 52 < 6)
              {
                v69 = -72;
                goto LABEL_183;
              }
              if (v68 - 33 < 5)
                goto LABEL_181;
              goto LABEL_151;
            }
            sub_22F072CEC(*a1, a2, 103, 0);
            v20 = 0;
            v81 = 0;
LABEL_29:
            v22 = 0;
            v83 = 0;
            LOBYTE(v23) = 0;
            goto LABEL_30;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v9, 103, 0);
      }
      v20 = 0;
      v81 = 0;
      v21 = 0;
      goto LABEL_29;
    }
    v30 = *a1;
    v31 = a2;
    goto LABEL_56;
  }
  v28 = *v9;
  if (v28 == 188)
  {
    if (sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v103))
    {
      v21 = *((_QWORD *)v9 + 3);
      if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        if ((v9[2] & 8) != 0)
        {
          v27 = *((_QWORD *)v9 + 6) != 0;
LABEL_78:
          v83 = v103;
LABEL_79:
          v39 = (_BYTE **)*a1;
          v40 = *(_QWORD *)(*a1 + 24);
          v41 = *(unsigned int *)(v40 + 92);
          v42 = (*(_DWORD *)(v40 + 120) + 1);
          *(_DWORD *)(v40 + 120) = v42;
          v81 = v41 | (v42 << 32);
          v43 = sub_22F0279B4((uint64_t)v14, v15, v21, v81, v39, v21, 0);
          LOBYTE(v23) = 0;
          v20 = v21;
          if (!v43)
            goto LABEL_58;
LABEL_80:
          v79 = v20;
          v93 = &v95;
          v94 = 0x400000000;
          if (v83)
          {
            if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 >= 4)
              v44 = 0;
            else
              v44 = (_DWORD *)v21;
            if (v44
              && ((v45 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v44 + 32))(v44),
                   (*(_BYTE *)(v45 + 82) & 0xC) == 0)
                ? (v46 = sub_22EFD7260(v45) != 0)
                : (v46 = 1),
                  v46 && !v27))
            {
              v21 = sub_22F028540(*a1, a2, (uint64_t)v83, (uint64_t)v44, (uint64_t)&v93);
              if (!v21)
                goto LABEL_115;
            }
            else
            {
              if ((v44[7] & 0x7F) == 0x39)
                v56 = 9;
              else
                v56 = 5;
              if (!sub_22F02E038((uint64_t *)*a1, a2, (uint64_t)v83, v56, 0))
                goto LABEL_115;
            }
          }
          if (v21 && (*(_DWORD *)(v21 + 28) & 0x7F) == 0x39)
          {
            v57 = (uint64_t *)*a1;
            v58 = *(_WORD *)(v21 + 80) & 0x7F;
            v59 = -40;
            if (v58 > 0x46)
            {
              switch(v58)
              {
                case 'S':
                  goto LABEL_128;
                case 'G':
                  v59 = -56;
                  goto LABEL_128;
                case 'Q':
LABEL_128:
                  v64 = *(_QWORD *)(v21 + 72 + v59 + 16);
                  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
                  if ((v64 & 4) != 0)
                    v65 = (_QWORD *)*v65;
                  if (v65)
                    v66 = (uint64_t)(v65 - 8);
                  else
                    v66 = 0;
                  v67 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v66);
                  if (!sub_22F027138(v57, a2, (uint64_t)v83, v67))
                    goto LABEL_115;
LABEL_134:
                  LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                  v5 = -1;
LABEL_135:
                  if (v93 != &v95)
                    free(v93);
                  goto LABEL_58;
              }
            }
            else
            {
              if (v58 <= 0x18)
              {
                if (v58 == 16)
                {
LABEL_110:
                  v59 = -48;
                  goto LABEL_128;
                }
                if (((1 << v58) & 0x1066) != 0)
                  goto LABEL_128;
                if (v58 == 24)
                  goto LABEL_110;
              }
              if (v58 == 70)
              {
LABEL_126:
                v59 = -64;
                goto LABEL_128;
              }
            }
            if (v58 - 52 >= 6)
            {
              if (v58 - 33 >= 5)
                goto LABEL_110;
              goto LABEL_126;
            }
            v59 = -72;
            goto LABEL_128;
          }
          v85 = 0;
          v60 = (unsigned __int8 *)sub_22EFBF910(v21, &v85);
          v61 = (_QWORD *)*a1;
          sub_22EFF605C(a2);
          if (sub_22F028A44(v61, v62, (_QWORD *)v21, v85, (uint64_t)v60))
          {
            sub_22EFF605C(a2);
            if (sub_22F00B12C(v63, v85, (uint64_t)v83, (uint64_t *)v14, v15, v79, v81, v60, (uint64_t *)*a1, (uint64_t)v84, 0)&& (!(_DWORD)v94 || sub_22F028DA0(*a1, a2, (uint64_t)v84, v93, v94)))
            {
              goto LABEL_134;
            }
          }
LABEL_115:
          LOBYTE(v23) = 0;
          goto LABEL_135;
        }
LABEL_77:
        v27 = 0;
        goto LABEL_78;
      }
      goto LABEL_44;
    }
    goto LABEL_57;
  }
  if ((v28 & 0xFE) == 0x70)
  {
    v29 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v9, (uint64_t)v103, 0);
    if (v29)
    {
      v21 = v29;
      if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_77;
LABEL_44:
      v30 = *a1;
LABEL_55:
      v31 = (uint64_t)v9;
LABEL_56:
      sub_22F072CEC(v30, v31, 103, 0);
    }
LABEL_57:
    LOBYTE(v23) = 0;
    goto LABEL_58;
  }
  v30 = *a1;
  if (v28 != 129)
    goto LABEL_55;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 96))(v30) + 2000) + 1) & 0x10) == 0)
  {
    v32 = *a1;
    sub_22EFF605C((uint64_t)v9);
    sub_22F072D74(v32, v33, 2266, 0);
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v103))
    goto LABEL_57;
  v34 = 0;
  v35 = *((_QWORD *)v9 + 8);
  if ((v35 & 1) == 0)
  {
    v36 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    if (v36)
      v34 = *v36;
  }
  LOBYTE(v23) = sub_22F027138((uint64_t *)*a1, (uint64_t)v9, (uint64_t)v103, v34);
LABEL_58:
  if (v106 != v108)
    free(v106);
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v23 & 1) != 0)
    sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v84);
  if (LODWORD(v84[0]) >= 2)
    sub_22EF53BC0(v84);
  if ((v23 & 1) != 0)
    return 1;
  if (!*((_BYTE *)a1 + 16))
    return 0;
  result = sub_22F05ADD8(a2);
  if (result)
  {
    sub_22F006C3C(a1[1], a2 & 0xFFFFFFFFFFFFFFFCLL | 1, 0, 1);
    v38 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v38 || *(_BYTE *)(v38 + 16) != 39)
      v38 = sub_22F10CF48(v38);
    sub_22F05E354(a1[1], *a1, a2, *(_QWORD *)(v38 + 32));
    return 1;
  }
  return result;
}

uint64_t sub_22F05E2F8(unsigned int *a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *a1;
  if ((v1 & 1) != 0)
    return 0;
  v2 = a1[8];
  if ((v1 & 4) != 0 && (_DWORD)v2 == 1)
    return 0;
  if ((v1 & 8) != 0 && (_DWORD)v2 == v1 >> 4)
    return *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v2 - 8);
  return (v1 >> 1) & 1;
}

uint64_t sub_22F05E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t result;
  unsigned int v9;
  int v10;
  char v11;

  if (*(_DWORD *)(a1 + 56))
  {
    sub_22EFF605C(a3);
    result = sub_22F072D74(a2, v6, 2282, 0);
    *(_DWORD *)(a1 + 24) |= 1u;
    *(_DWORD *)(a1 + 56) = 0;
  }
  else
  {
    result = sub_22F02BACC(a1, a2, a3, 3u);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 24) |= 4u;
      v9 = *(_DWORD *)(a1 + 56);
      if (v9 >= *(_DWORD *)(a1 + 60))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(a1 + 56);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9) = 0;
      v10 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v10;
      v11 = *(_DWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)(a1 + 40) = a4;
      *(_DWORD *)(a1 + 24) = v11 & 7 | (16 * v10) | 8;
    }
  }
  return result;
}

uint64_t sub_22F05E430(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned __int8 **v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  void *v62;
  unint64_t v63;
  void *v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v77;
  int v78;
  int v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;

  v140 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)a2 >> 18;
  v12 = v11 & 0x7F;
  if (v12 > 0x2A)
  {
    if (v12 - 43 < 3)
      goto LABEL_14;
    if (v12 != 68)
    {
      if (v12 == 66)
      {
LABEL_14:
        if (sub_22F00C45C(a1, *(_QWORD *)(a2 + 16)))
        {
          if ((sub_22F10DFD8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            goto LABEL_61;
          v19 = a1[1];
          v20 = *(unsigned __int8 *)(v19 + 144);
          if ((v20 & 2) != 0)
            goto LABEL_19;
          v22 = *(unsigned __int8 *)(v19 + 24);
          v21 = v19 + 24;
          if (((v20 | v22) & 1) != 0)
            goto LABEL_19;
          v23 = sub_22F02EA54(v21, *(_QWORD *)(*a1 + 8));
          if (*(_QWORD *)(*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_19;
          v73 = *a1;
          if (sub_22F02D35C(*a1, "allocate", 8uLL))
            goto LABEL_61;
          v74 = *(_QWORD *)(*(_QWORD *)(v73 + 24) + 24);
          if (!v74)
            goto LABEL_19;
          v75 = *(_QWORD *)(v74 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v74 + 40) & 7) != 0 || v75 == 0)
            goto LABEL_19;
          v77 = *(_DWORD **)(v75 + 16);
          if (*v77 != 7)
            goto LABEL_19;
          v78 = v77[4];
          v79 = *(_DWORD *)((char *)v77 + 19);
          if (v78 != 1920103779 || v79 != 1953391986)
            goto LABEL_19;
          v81 = v74 + 72;
          v82 = *(_WORD *)(v74 + 80) & 0x7F;
          v83 = -40;
          if (v82 > 70)
          {
            switch(v82)
            {
              case 'S':
                goto LABEL_211;
              case 'G':
                v83 = -56;
                goto LABEL_211;
              case 'Q':
LABEL_211:
                v99 = *(_QWORD *)(v81 + v83 + 16);
                v100 = v99 & 0xFFFFFFFFFFFFFFF8;
                if ((v99 & 4) != 0)
                  v100 = *(_QWORD *)v100;
                if (v100 && (*(_WORD *)(v100 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC)
                {
                  v101 = *(_QWORD *)(v100 - 24);
                  if ((v101 & 7) != 0)
                    v102 = 0;
                  else
                    v102 = v101 & 0xFFFFFFFFFFFFFFF8;
                  v103 = *(_QWORD *)(v100 - 48);
                  v104 = (_QWORD *)(v103 & 0xFFFFFFFFFFFFFFF8);
                  if ((v103 & 4) != 0)
                  {
                    v104 = (_QWORD *)*v104;
                    if (v104)
                    {
LABEL_220:
                      if (sub_22EFC84D4((unint64_t)v104) && v102 != 0)
                      {
                        v106 = *(_QWORD *)(v102 + 16);
                        if (*(_DWORD *)v106 == 15)
                        {
                          v107 = *(_QWORD *)(v106 + 16);
                          v108 = *(_QWORD *)(v106 + 23);
                          if (v107 == 0x6C5F656372756F73 && v108 == 0x6E6F697461636F6CLL)
                            goto LABEL_61;
                        }
                      }
                    }
                  }
                  else if (v104)
                  {
                    goto LABEL_220;
                  }
                }
LABEL_19:
                v24 = a1[1];
                *(_DWORD *)(v24 + 24) |= 1u;
                *(_DWORD *)(v24 + 56) = 0;
                v25 = sub_22F10DFD8(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0));
                v26 = *a1;
                sub_22EFF605C(a2);
                v28 = (unsigned __int8 **)sub_22F072D74(v26, v27, 2216, 0);
                v29 = v28;
                if (v25)
                {
                  if (v28)
                  {
                    v30 = *v28;
                    if (!*v29)
                    {
                      v30 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v29[1]);
                      *v29 = v30;
                    }
                    v30[*v30 + 1] = 2;
                    v31 = *v29;
                    v32 = **v29;
                    v33 = v32 + 1;
                    *v31 = v32 + 1;
                    *(_QWORD *)&v31[8 * v32 + 16] = 3;
                    v34 = *(_QWORD *)(v10 + 8);
                    v35 = 9;
LABEL_60:
                    v31[v33 + 1] = v35;
                    v56 = *v29;
                    v57 = **v29;
                    *v56 = v57 + 1;
                    *(_QWORD *)&v56[8 * v57 + 16] = v34;
                  }
                }
                else if (v28)
                {
                  v31 = *v28;
                  if (!*v29)
                  {
                    v31 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v29[1]);
                    *v29 = v31;
                  }
                  v33 = *v31;
                  v35 = 2;
                  v34 = 2;
                  goto LABEL_60;
                }
LABEL_61:
                if ((*(_DWORD *)a2 & 0x1FC0000) == 0x1080000)
                {
                  v36 = a1[1];
                  if ((*(_BYTE *)(v36 + 144) & 1) != 0)
LABEL_63:
                    sub_22F02D590(v36, *(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
                }
                return 1;
            }
          }
          else
          {
            if (v82 <= 0x18)
            {
              if (v82 == 16)
              {
LABEL_145:
                v83 = -48;
                goto LABEL_211;
              }
              if (((1 << v82) & 0x1066) != 0)
                goto LABEL_211;
              if (v82 == 24)
                goto LABEL_145;
            }
            if (v82 == 70)
            {
LABEL_209:
              v83 = -64;
              goto LABEL_211;
            }
          }
          if ((v82 - 52) >= 6)
          {
            if ((v82 - 33) >= 5)
              goto LABEL_145;
            goto LABEL_209;
          }
          v83 = -72;
          goto LABEL_211;
        }
        return 0;
      }
LABEL_68:
      v58 = v11 & 0x7F;
      if (v58 > 19)
      {
        if (v58 == 20)
          return sub_22F00C45C(a1, *(_QWORD *)(a2 + 16));
        if (v58 != 66 && v58 != 61)
        {
LABEL_119:
          sub_22F072CEC(*a1, a2, 103, 0);
          return 0;
        }
        LODWORD(v123[0]) = 0;
        v54 = sub_22F009DC4(v123, *a1, *(_QWORD *)(a2 + 16));
        if ((_DWORD)v54)
          sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v123);
      }
      else
      {
        if (v58 != 3)
        {
          if (v58 == 4)
          {
            v123[0] = 0;
            v123[1] = 0;
            v124 = 0;
            LODWORD(v125) = -1;
            v127 = 0;
            v128 = &v130;
            v129 = 0x800000000;
            v137 = 0;
            v138 = 0;
            v72 = *(_QWORD *)(a2 + 16);
            v114 = *a1;
            LOBYTE(v116) = 0;
            v54 = 0;
            if (sub_22F010358((int)&v114, v72, a3, a4, a5, a6, a7, a8, v113, v114, (uint64_t)v123, v116, v117, v118, v119, v120, v121, v122, 0,
                                 0,
                                 0,
                                 v125,
                                 v126,
                                 0,
                                 (uint64_t)&v130,
                                 0x800000000,
                                 v130,
                                 v131,
                                 v132,
                                 v133,
                                 v134,
                                 v135,
                                 v136,
                                 0,
                                 0,
                                 v139,
                                 v140,
                                 v141,
                                 v142))
            {
              LODWORD(v114) = 0;
              v54 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)v123, (uint64_t)&v114, 0);
              if ((_DWORD)v54)
                sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v114);
              if (v114 >= 2)
                sub_22EF53BC0(&v114);
            }
            v64 = v128;
            if (v128 == &v130)
              return v54;
            goto LABEL_99;
          }
          if (v58 != 5)
            goto LABEL_119;
          return sub_22F00C45C(a1, *(_QWORD *)(a2 + 16));
        }
        LODWORD(v123[0]) = 0;
        LODWORD(v114) = 0;
        v54 = 0;
        if (sub_22F009DC4(&v114, *a1, *(_QWORD *)(a2 + 16)))
        {
          if (sub_22F02F148((uint64_t *)*a1, (uint64_t)v123, (uint64_t)&v114, a2))
          {
            sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v123);
            v54 = 1;
          }
          else
          {
            v54 = 0;
          }
        }
        if (v114 >= 2)
          sub_22EF53BC0(&v114);
      }
      if (LODWORD(v123[0]) >= 2)
        sub_22EF53BC0((uint64_t *)v123);
      return v54;
    }
    v55 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v55 || *(_BYTE *)(v55 + 16) != 39)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        v55 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
        v10 = *(_QWORD *)(a2 + 16);
      }
      else
      {
        v55 = 0;
      }
    }
    v65 = *(_BYTE *)(v55 + 40);
    v66 = *((_BYTE *)a1 + 16);
    *(_OWORD *)v123 = *(_OWORD *)a1;
    LOBYTE(v124) = v66;
    if (!sub_22F00C45C(v123, v10))
      return 0;
    v67 = a1[1];
    v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v68 || *(_BYTE *)(v68 + 16) != 39)
      v68 = sub_22F10CF48(v68);
    if ((*(_BYTE *)(v68 + 40) & 6) != 0)
    {
      v69 = v65 & 6;
    }
    else
    {
      v69 = v65 & 6;
      if ((*(_BYTE *)(a1[1] + 144) & 1) == 0 && (v65 & 6) != 0)
        return 0;
    }
    if (!v69 || (v65 & 7) == 2)
      return 1;
    v70 = (unsigned int *)(v67 + 24);
    if ((v65 & 7) == 3)
    {
      if ((*(_BYTE *)(a1[1] + 144) & 1) == 0)
      {
        v71 = *v70;
        if ((*v70 & 3) != 0
          || (v71 & 8) != 0
          && ((*(_DWORD *)(v67 + 56) == 1) & (v71 >> 2)) == 0
          && *(_QWORD *)(*(_QWORD *)(v67 + 48) + 8 * (int)((v71 >> 4) - 1)) == *(_QWORD *)(v67 + 32))
        {
          return 0;
        }
      }
      return 1;
    }
    if (sub_22F10DB58(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)))
      return 0;
    LODWORD(v115) = 1;
    v114 = 0;
    BYTE4(v115) = 0;
    v97 = sub_22F10DA0C(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v97)
    {
      if ((sub_22F0174A0(*(_QWORD *)(v97 + 56), &v114, *a1) & 1) == 0)
      {
        v54 = 0;
LABEL_196:
        if (v115 >= 0x41 && v114)
          MEMORY[0x2348A0E84](v114, 0x1000C8000313F17);
        return v54;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1[1] + 144) & 1) != 0
        || (v98 = (uint64_t *)(*(_QWORD *)(v55 + 32) & 0xFFFFFFFFFFFFFFF0), (sub_22F1110EC(*v98, 0) & 1) != 0)
        || (sub_22EF5CCD0(*(_QWORD *)(*a1 + 8), *v98, (uint64_t)v123), !v123[0]))
      {
        v54 = 1;
        goto LABEL_196;
      }
      v114 = 1;
      LODWORD(v115) = 64;
    }
    sub_22F05E2F8((unsigned int *)(v67 + 24));
    v54 = sub_22F30FE14((uint64_t)&v114, v110);
    goto LABEL_196;
  }
  switch(v11 & 0x7F)
  {
    case 1:
      goto LABEL_14;
    case 4:
      v123[0] = 0;
      v123[1] = 0;
      v124 = 0;
      LODWORD(v125) = -1;
      v127 = 0;
      v128 = &v130;
      v129 = 0x800000000;
      v137 = 0;
      v138 = 0;
      v53 = *((_BYTE *)a1 + 16);
      v114 = *a1;
      LOBYTE(v116) = v53;
      if (!sub_22F010358((int)&v114, v10, a3, a4, a5, a6, a7, a8, v113, v114, (uint64_t)v123, v116, v117, v118, v119, v120, v121, v122, 0,
                            0,
                            0,
                            v125,
                            v126,
                            0,
                            (uint64_t)&v130,
                            0x800000000,
                            v130,
                            v131,
                            v132,
                            v133,
                            v134,
                            v135,
                            v136,
                            0,
                            0,
                            v139,
                            v140,
                            v141,
                            v142))
      {
        v54 = 0;
        goto LABEL_98;
      }
      LODWORD(v114) = 0;
      if ((sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)v123, (uint64_t)&v114, 0) & 1) != 0)
      {
        sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), &v114);
LABEL_51:
        v54 = 1;
        goto LABEL_96;
      }
      if (!*((_BYTE *)a1 + 16) || v123[0] < (void *)4)
        goto LABEL_95;
      v54 = 0;
      if (((uint64_t)v123[0] & 3) != 0)
        goto LABEL_96;
      v84 = (unint64_t)v123[0] & 0xFFFFFFFFFFFFFFFCLL;
      if (((unint64_t)v123[0] & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_96;
      if ((*(_DWORD *)(v84 + 28) & 0x7Fu) - 60 > 6)
        goto LABEL_95;
      v86 = *a1;
      v85 = a1[1];
      if (!sub_22E3CEC2C(v84))
        goto LABEL_95;
      v87 = *(_QWORD *)(v84 + 48);
      if ((v87 & 1) == 0 && (*(_BYTE *)((v87 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
        goto LABEL_95;
      v88 = 0;
      v89 = v84;
      break;
    case 6:
      if (!sub_22F00C45C(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v38 = (unint64_t *)a1[1];
      v39 = *v38;
      if ((~*(_DWORD *)v38 & 3) != 0)
      {
        if (v39 > 3)
          return sub_22F042BE8(*a1, a2, (uint64_t)v38);
      }
      else
      {
        if ((v39 & 4) != 0)
          v112 = v39 > 7;
        else
          v112 = (v39 & 0x7FFFFFFF8) != 0;
        if (v112)
          return sub_22F042BE8(*a1, a2, (uint64_t)v38);
      }
      if (!v38[2])
        return 1;
      return sub_22F042BE8(*a1, a2, (uint64_t)v38);
    case 7:
    case 8:
      v13 = *((_BYTE *)a1 + 16);
      *(_OWORD *)v123 = *(_OWORD *)a1;
      LOBYTE(v124) = v13;
      if (!sub_22F00C45C(v123, v10))
        return 0;
      v14 = (unint64_t *)a1[1];
      v15 = *v14;
      if ((~*(_DWORD *)v14 & 3) != 0)
      {
        if (v15 > 3)
          goto LABEL_7;
      }
      else
      {
        if ((v15 & 4) != 0)
          v111 = v15 > 7;
        else
          v111 = (v15 & 0x7FFFFFFF8) != 0;
        if (v111)
          goto LABEL_7;
      }
      if (!v14[2])
        return 1;
LABEL_7:
      v16 = *a1;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v17 || *(_BYTE *)(v17 + 16) != 39)
      {
        v17 = sub_22F10CF48(v17);
        v14 = (unint64_t *)a1[1];
      }
      return sub_22F043240(v16, a2, *(_QWORD *)(v17 + 32), (uint64_t)v14);
    case 9:
      if (!sub_22F00C45C(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      return sub_22F042DD0((uint64_t *)*a1, a2, a1[1]);
    case 0xC:
      if ((*(_BYTE *)(v10 + 1) & 3) != 0)
      {
        v41 = *((_BYTE *)a1 + 16);
        *(_OWORD *)v123 = *(_OWORD *)a1;
        LOBYTE(v124) = v41;
        if ((sub_22F010358((int)v123, v10, a3, a4, a5, a6, a7, a8, v113, v114, (uint64_t)v115, v116, v117, v118, v119, v120, v121, v122, (uint64_t)v123[0],
                (uint64_t)v123[1],
                v124,
                v125,
                v126,
                v127,
                (uint64_t)v128,
                v129,
                v130,
                v131,
                v132,
                v133,
                v134,
                v135,
                v136,
                v137,
                v138,
                v139,
                v140,
                v141,
                v142) & 1) == 0)
          return 0;
      }
      else
      {
        v59 = sub_22F044E2C(*(_QWORD *)(*a1 + 24), *(_QWORD *)(a2 + 16), *(_QWORD *)(v10 + 8), 1u, a1[1]);
        v54 = 0;
        if (!sub_22F006CB0(v59, *a1, a1[1], v10, 0))
          return v54;
      }
      v60 = sub_22EF5C728(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v10 + 8));
      if (v60)
        v61 = *(_BYTE *)(v60 + 16) == 2;
      else
        v61 = 0;
      if (v61)
      {
        sub_22F029A38(a1[1], *a1, a2, v60);
      }
      else
      {
        v62 = (void *)sub_22F017280(*(_QWORD *)(*a1 + 8), v60);
        if (v62)
        {
          LODWORD(v123[1]) = 64;
          v123[0] = v62;
          v63 = sub_22EF5FE30(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v60 + 32), (const llvm::APInt *)v123, 0, 0, 0);
          sub_22F029A38(a1[1], *a1, a2, *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
          if (LODWORD(v123[1]) >= 0x41 && v123[0])
            MEMORY[0x2348A0E84](v123[0], 0x1000C8000313F17);
        }
        else
        {
          sub_22F05E354(a1[1], *a1, a2, *(_QWORD *)(v60 + 32));
        }
      }
      return 1;
    case 0xD:
      v40 = *((_BYTE *)a1 + 16);
      *(_OWORD *)v123 = *(_OWORD *)a1;
      LOBYTE(v124) = v40;
      return sub_22F010358((int)v123, v10, a3, a4, a5, a6, a7, a8, v113, v114, (uint64_t)v115, v116, v117, v118, v119, v120, v121, v122, (uint64_t)v123[0],
               (uint64_t)v123[1],
               v124,
               v125,
               v126,
               v127,
               (uint64_t)v128,
               v129,
               v130,
               v131,
               v132,
               v133,
               v134,
               v135,
               v136,
               v137,
               v138,
               v139,
               v140,
               v141,
               v142);
    case 0xE:
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      v36 = a1[1];
      goto LABEL_63;
    case 0x16:
      v42 = *a1;
      sub_22EFF605C(a2);
      v44 = (unsigned __int8 **)sub_22F072D74(v42, v43, 2216, 0);
      if (v44)
      {
        v45 = v44;
        v46 = *v44;
        if (!v46)
        {
          v46 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v45[1]);
          *v45 = v46;
        }
        v46[*v46 + 1] = 2;
        v47 = *v45;
        v48 = **v45;
        *v47 = v48 + 1;
        *(_QWORD *)&v47[8 * v48 + 16] = 2;
      }
      LODWORD(v123[0]) = 0;
      v114 = *a1;
      v115 = v123;
      if (sub_22F0175A4(&v114, v10))
      {
        if (LODWORD(v123[0]) == 2)
        {
          sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
          if (BYTE4(v124))
            llvm::APInt::zextOrTrunc((llvm::APInt *)&v123[1]);
          else
            llvm::APInt::sextOrTrunc((llvm::APInt *)&v123[1]);
          v49 = v114;
          if (v115 >= 0x41)
          {
            v50 = *(_QWORD *)v114;
            MEMORY[0x2348A0E84]();
            v49 = v50;
          }
          v51 = (_QWORD *)a1[1];
          *v51 = 1;
          v51[1] = 0;
          *(_BYTE *)(a1[1] + 144) &= ~2u;
          v52 = a1[1];
          *(_QWORD *)(v52 + 16) = v49;
          *(_DWORD *)(v52 + 24) |= 1u;
          *(_DWORD *)(v52 + 56) = 0;
          *(_BYTE *)(a1[1] + 144) &= ~1u;
        }
        else
        {
          sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v123);
        }
        if (LODWORD(v123[0]) >= 2)
          sub_22EF53BC0((uint64_t *)v123);
        return 1;
      }
      if (LODWORD(v123[0]) >= 2)
        sub_22EF53BC0((uint64_t *)v123);
      v11 = *(_DWORD *)a2 >> 18;
      goto LABEL_68;
    default:
      goto LABEL_68;
  }
  while (1)
  {
    v90 = (unsigned __int8 *)sub_22EFBC5B4(v89);
    if (v90)
    {
      while (1)
      {
        v92 = (uint64_t)v90;
        v93 = *v90;
        if (v93 > 0xD5)
        {
          if (v93 == 233)
          {
            if ((*(_DWORD *)v90 & 0x7C0000) != 0x300000)
              goto LABEL_179;
            v95 = v90 + 16;
          }
          else
          {
            if (v93 != 214)
              goto LABEL_179;
            v95 = v90 + 24;
          }
        }
        else if (v93 == 155)
        {
          if ((**((_DWORD **)v90 + 2) & 0x18000) != 0)
            goto LABEL_179;
          if (v90[48])
            v95 = v90 + 24;
          else
            v95 = v90 + 32;
        }
        else
        {
          if (v93 != 176 || (v94 = *((unsigned int *)v90 + 5), (_DWORD)v94 == -1))
          {
LABEL_179:
            if (sub_22F05AB70((unsigned __int8 *)v92))
            {
              sub_22F006C3C(v85, v92 & 0xFFFFFFFFFFFFFFFCLL | 1, 0, 1);
              v96 = *(_QWORD *)(*(_QWORD *)(v92 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v96 || *(_BYTE *)(v96 + 16) != 39)
                v96 = sub_22F10CF48(v96);
              sub_22F05E354(v85, v86, v92, *(_QWORD *)(v96 + 32));
              goto LABEL_51;
            }
            goto LABEL_95;
          }
          v95 = &v90[8 * v94 + 40];
        }
        v90 = *(unsigned __int8 **)v95;
        if (*(_QWORD *)v95 == v92)
          goto LABEL_179;
      }
    }
    if ((*(_BYTE *)(v89 + 72) & 3) != 0)
    {
      if (v88)
        break;
      v88 = 1;
    }
    v91 = sub_22E3CD31C((uint64_t *)(v89 + 72), v89);
    if (v91 == v84)
      break;
    v89 = v91;
    v54 = 0;
    if (!v91)
      goto LABEL_96;
  }
LABEL_95:
  v54 = 0;
LABEL_96:
  if (v114 >= 2)
    sub_22EF53BC0(&v114);
LABEL_98:
  v64 = v128;
  if (v128 != &v130)
LABEL_99:
    free(v64);
  return v54;
}

uint64_t sub_22F05F330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  char v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int v39;

  result = sub_22F00FB4C(&v35, a2, *(_QWORD *)(a3 + 24));
  if (**(_BYTE **)(a2 + 8))
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 12) = 0;
    goto LABEL_65;
  }
  result = sub_22F00FB4C(&v32, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_BYTE **)(a2 + 8);
  if (*v7)
  {
    *(_DWORD *)(a1 + 8) = 1;
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 12) = 0;
    goto LABEL_62;
  }
  v8 = (*(_DWORD *)a3 >> 18) & 0x3F;
  if (v8 != 7)
  {
    if (v8 != 8)
    {
      v9 = v33;
      v10 = v34;
      switch(v8)
      {
        case 2:
          result = llvm::APInt::operator*();
          v11 = v34;
          *(_DWORD *)(a1 + 8) = v39;
          *(_QWORD *)a1 = v38;
          *(_BYTE *)(a1 + 12) = v11;
          goto LABEL_62;
        case 3:
          result = sub_22F024760((llvm::APInt *)&v32, (const llvm::APInt *)&v35, a1);
          goto LABEL_62;
        case 5:
          result = sub_22E4EBD50((llvm::APInt *)&v32, a1);
          goto LABEL_62;
        case 6:
          result = sub_22E5EDF90((llvm::APInt *)&v32, a1);
          goto LABEL_62;
        case 16:
          result = (uint64_t)sub_22F3C4D94(&v32, (const llvm::APInt *)&v35, a1);
          goto LABEL_62;
        case 17:
          result = (uint64_t)sub_22F3C4E2C(&v32, (const llvm::APInt *)&v35, a1);
          goto LABEL_62;
        case 18:
          result = (uint64_t)sub_22F3C4EC4(&v32, (llvm::APInt *)&v35, a1);
          goto LABEL_62;
        case 19:
          if (v33 > 0x40)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v32);
            if ((_DWORD)result == v9)
            {
              v31 = v9;
              goto LABEL_33;
            }
          }
          else if (!v32)
          {
            v15 = 0;
            v31 = v33;
            goto LABEL_44;
          }
          v19 = v36;
          if (v36 > 0x40)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v35);
            v20 = (_DWORD)result == v19;
          }
          else
          {
            v20 = v35 == 0;
          }
          v22 = v20;
          v15 = v22 ^ 1u;
          v31 = v9;
          if (v9 <= 0x40)
          {
LABEL_44:
            if (v9)
              v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
            else
              v23 = 0;
            v18 = v23 & v15;
            v30 = v18;
LABEL_47:
            *(_DWORD *)(a1 + 8) = v9;
            *(_QWORD *)a1 = v18;
            v31 = 0;
LABEL_61:
            *(_BYTE *)(a1 + 12) = v10;
            goto LABEL_62;
          }
LABEL_33:
          result = llvm::APInt::initSlowCase((llvm::APInt *)&v30);
          v9 = v31;
          v18 = v30;
          goto LABEL_47;
        case 20:
          if (v33 > 0x40)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v32);
            if ((_DWORD)result != v9)
            {
              v29 = v9;
              goto LABEL_49;
            }
          }
          else if (v32)
          {
            v29 = v33;
            v14 = 1;
            goto LABEL_57;
          }
          v16 = v36;
          if (v36 > 0x40)
          {
            result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v35);
            v17 = (_DWORD)result == v16;
          }
          else
          {
            v17 = v35 == 0;
          }
          v26 = v17;
          v14 = v26 ^ 1u;
          v29 = v9;
          if (v9 <= 0x40)
          {
LABEL_57:
            if (v9)
              v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
            else
              v27 = 0;
            v24 = v27 & v14;
            v28 = v24;
LABEL_60:
            *(_DWORD *)(a1 + 8) = v9;
            *(_QWORD *)a1 = v24;
            v29 = 0;
            goto LABEL_61;
          }
LABEL_49:
          result = llvm::APInt::initSlowCase((llvm::APInt *)&v28);
          v9 = v29;
          v24 = v28;
          goto LABEL_60;
        default:
          *v7 = 1;
          *(_DWORD *)(a1 + 8) = 1;
          goto LABEL_5;
      }
    }
    if (v37)
    {
      v25 = &v35;
      if (v36 >= 0x41)
        v25 = (uint64_t *)v35;
    }
    else
    {
      if (v36 <= 0x40)
      {
        v21 = v35 << -(uint64_t)v36 >> -(uint64_t)v36;
LABEL_71:
        result = (uint64_t)sub_22F3C4AE8((llvm::APInt *)&v32, v21, a1);
        goto LABEL_62;
      }
      v25 = (uint64_t *)v35;
    }
    v21 = *v25;
    goto LABEL_71;
  }
  if (v37)
  {
    v12 = &v35;
    if (v36 >= 0x41)
      v12 = (uint64_t *)v35;
    goto LABEL_16;
  }
  if (v36 > 0x40)
  {
    v12 = (uint64_t *)v35;
LABEL_16:
    v13 = *v12;
    goto LABEL_17;
  }
  v13 = v35 << -(uint64_t)v36 >> -(uint64_t)v36;
LABEL_17:
  result = (uint64_t)sub_22F03BD5C(a1, (llvm::APInt *)&v32, v13);
LABEL_62:
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      result = MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  }
LABEL_65:
  if (v36 >= 0x41)
  {
    result = v35;
    if (v35)
      return MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F05F718(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t result;
  _BYTE *v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;

  while (1)
  {
    v6 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
    v7 = sub_22EFFBBCC(v6);
    if (*v7 != 233)
      break;
    v8 = *(_DWORD *)a3 & 0x7C0000;
    if (v8 == 0x100000)
    {
      if ((*(_DWORD *)v7 & 0x7C0000) != 0x140000)
        break;
    }
    else if (v8 != 1310720 || (*(_DWORD *)v7 & 0x7C0000) != 0x100000)
    {
      break;
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    a3 = sub_22EFFBBCC(v9);
    if (*a3 != 233)
      return sub_22F00FB4C(a1, a2, v9);
  }
  result = sub_22F00FB4C(&v18, a2, v6);
  v11 = *(_BYTE **)(a2 + 8);
  if (*v11)
  {
    *(_DWORD *)(a1 + 8) = 1;
LABEL_11:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 12) = 0;
  }
  else
  {
    switch((*(_DWORD *)a3 >> 18) & 0x1F)
    {
      case 6:
        *(_DWORD *)(a1 + 8) = v19;
        *(_QWORD *)a1 = v18;
        v19 = 0;
        v12 = v20;
        goto LABEL_21;
      case 7:
        result = sub_22F311024((llvm::APInt *)&v18, a1);
        break;
      case 8:
        result = (uint64_t)sub_22F3103B8((llvm::APInt *)&v18, a1);
        break;
      case 9:
        v13 = v19;
        if (v19 > 0x40)
        {
          llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18);
          v17 = v13;
          result = llvm::APInt::initSlowCase((llvm::APInt *)&v16);
          v13 = v17;
          v15 = v16;
        }
        else
        {
          v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          if (!v19)
            LOBYTE(v14) = 0;
          v15 = v14 & (v18 == 0);
          v16 = v15;
        }
        *(_DWORD *)(a1 + 8) = v13;
        *(_QWORD *)a1 = v15;
        v17 = 0;
        v12 = 1;
LABEL_21:
        *(_BYTE *)(a1 + 12) = v12;
        break;
      default:
        *v11 = 1;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_11;
    }
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      return MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
  }
  return result;
}

void sub_22F05F920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BOOL4 v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  _QWORD v17[5];
  int v18;
  char v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD v29[4];
  __int128 v30;
  int v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD v34[33];
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v6 = *(_QWORD *)a2;
  v17[0] = &off_24FAC58D8;
  v17[1] = v6;
  v7 = *(_QWORD *)(v6 + 2000);
  v8 = *(_BYTE *)(v7 + 180);
  v18 = *(_DWORD *)(v7 + 176);
  v19 = v8 & 1;
  v20[0] = &off_24FAC5960;
  v20[1] = v17;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v25 = 0u;
  v24 = &v25;
  v26 = 0x100000000;
  v27 = v29;
  v28 = 0x200000001;
  v29[0] = 1;
  v29[2] = 1;
  v31 = 0;
  v30 = 0u;
  v17[2] = &v11;
  v17[3] = v20;
  v17[4] = 0x200000001;
  v32 = v34;
  v33 = 0x1000000000;
  v36 = 0u;
  v37 = 0;
  v38 = 0;
  v40 = 0u;
  v35 = 0;
  v34[32] = 0u;
  v39 = &v40;
  v41 = 0;
  v42 = -1;
  v43 = 0;
  v44 = 0;
  v45 = 3;
  v9 = sub_22F0056A0(a3, (uint64_t)&v11, v6, 0, (uint64_t)v17);
  sub_22F0052A4((uint64_t)v17);
  if (v9)
  {
    v10 = v15;
    *(_DWORD *)(a1 + 8) = v15;
    if (v10 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a1, (const llvm::APInt *)&v14);
    else
      *(_QWORD *)a1 = v14;
    *(_BYTE *)(a1 + 12) = v16;
  }
  else
  {
    **(_BYTE **)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 12) = 0;
  }
  if (v13 >= 2)
    sub_22EF53BC0(&v13);
}

uint64_t sub_22F05FAFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;

  sub_22F00FB4C(a1, a2, *(_QWORD *)(a3 + 16));
  if (sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0)) != (*(_BYTE *)(a1 + 12) == 0))
    *(_BYTE *)(a1 + 12) = !sub_22F110A40(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
  result = sub_22EF5CDF0(*a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= result)
  {
    if (v7 > result)
    {
      result = llvm::APInt::trunc((llvm::APInt *)a1);
      v8 = *(_BYTE *)(a1 + 12);
      v9 = v11;
      if (*(_DWORD *)(a1 + 8) >= 0x41u)
      {
        result = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      *(_QWORD *)a1 = v10;
      *(_DWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 12) = v8;
    }
  }
  else
  {
    result = sub_22E46361C((llvm::APInt *)a1, (uint64_t)&v10);
    if (*(_DWORD *)(a1 + 8) >= 0x41u)
    {
      result = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
    }
    *(_QWORD *)a1 = v10;
    *(_DWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 12) = v12;
  }
  return result;
}

uint64_t sub_22F05FC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_22F28501C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

_QWORD *sub_22F05FC90(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3C5318(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

unsigned __int8 *sub_22F05FD5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *result;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  result = sub_22EFFED0C((unsigned __int8 *)a1[2]);
  v5 = *result;
  if (v5 == 233)
  {
    result = sub_22EFFED0C(*((unsigned __int8 **)result + 2));
    if ((*result & 0xFE) == 0x70)
    {
      v6 = 15;
LABEL_6:
      *(_DWORD *)a2 = v6;
      v7 = (unsigned __int8 *)*((_QWORD *)result + 2);
      a2[1] = v7;
      v8 = (unsigned __int8 **)(result + 24);
      goto LABEL_18;
    }
  }
  else if ((v5 & 0xFE) == 0x70)
  {
    v6 = (*(_DWORD *)result >> 18) & 0x3F;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)result;
  v10 = HIDWORD(*(_QWORD *)result) & 0x3FLL;
  switch((int)v10)
  {
    case 30:
      if (v5 == 233)
        v6 = 15;
      else
        v6 = 14;
      goto LABEL_17;
    case 31:
      __break(1u);
      return result;
    case 32:
      v6 = 12;
      goto LABEL_17;
    case 33:
      v6 = 13;
      goto LABEL_17;
    case 34:
      v6 = 9;
      goto LABEL_17;
    default:
      if ((_DWORD)v10 == 16)
        v6 = 10;
      else
        v6 = 11;
LABEL_17:
      *(_DWORD *)a2 = v6;
      v11 = (uint64_t)&result[8 * ((v9 >> 18) & 1) + BYTE3(v9)];
      v7 = *(unsigned __int8 **)(v11 + 8);
      a2[1] = v7;
      v8 = (unsigned __int8 **)(v11 + 16);
      break;
  }
LABEL_18:
  v12 = *v8;
  a2[2] = v12;
  a2[3] = result;
  v13 = *a1;
  if ((v13 & 0x100000000) != 0)
  {
    a2[1] = v12;
    a2[2] = v7;
    v7 = v12;
  }
  if ((v6 & 0xFFFFFFFE) != 0xE)
  {
    result = sub_22EFFEEC4(v7);
    if ((*result & 0xFE) == 0x70)
    {
      v14 = (uint64_t *)(result + 16);
      v15 = (uint64_t *)(result + 24);
    }
    else
    {
      v16 = (unint64_t)&result[8 * (((unint64_t)*(unsigned int *)result >> 18) & 1)
                                    + ((unint64_t)*(unsigned int *)result >> 24)];
      v14 = (uint64_t *)(v16 + 8);
      v15 = (uint64_t *)(v16 + 16);
    }
    v17 = *v15;
    v18 = *v14;
    a2[1] = v18;
    a2[2] = v17;
    a2[3] = result;
    if ((v13 & 0x100000000) != 0)
    {
      a2[1] = v17;
      a2[2] = v18;
    }
  }
  return result;
}

BOOL sub_22F05FEE4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = sub_22EFFF40C((unsigned __int8 *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8), a2);
  if (*v2 != 161)
    return 0;
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) != 39
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 48) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) != 40;
}

uint64_t sub_22F05FF4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(uint64_t **)(a1 + 16);
  if (!v1)
    return *(unsigned int *)(a1 + 4);
  v2 = *v1;
  for (i = *v1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v4 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v4 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v2 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v2);
    }
    if (v4 == 24)
      goto LABEL_14;
    if (v4 == 26)
      break;
    if (((1 << v4) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_14:
  v2 = i;
  return sub_22F115668(v2);
}

unsigned int *sub_22F06003C(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, char a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v45;
  int v46;
  uint64_t v47;

  v24 = a19;
  v25 = a18;
  v26 = a15;
  v27 = (char *)HIDWORD(a11);
  *(_BYTE *)a1 = 126;
  if (byte_255E04EB3)
  {
    v47 = a4;
    v45 = a7;
    v46 = a6;
    v27 = sub_22F0D3748(126);
    v25 = a18;
    v24 = a19;
    v26 = a15;
    a6 = v46;
    a7 = v45;
    ++*((_DWORD *)v27 + 2);
    a4 = v47;
    LODWORD(v27) = HIDWORD(a11);
  }
  v28 = *a1;
  *((_QWORD *)a1 + 1) = a17;
  *((_QWORD *)a1 + 2) = a3;
  *((_QWORD *)a1 + 3) = a4;
  *((_QWORD *)a1 + 4) = v25;
  *((_QWORD *)a1 + 5) = v24;
  *((_QWORD *)a1 + 6) = a20;
  if (a2)
    v29 = 0x40000;
  else
    v29 = 0;
  if (a5)
    v30 = 0x100000;
  else
    v30 = 0;
  if (a6)
    v31 = 0x200000;
  else
    v31 = 0;
  if (a7)
    v32 = 0x400000;
  else
    v32 = 0;
  if (a16)
    v33 = ((v26 << 23) + 0x800000) & 0x1800000;
  else
    v33 = 0;
  if ((_DWORD)a11 != 0 && (_DWORD)v27 != 0)
    v34 = 0x2000000;
  else
    v34 = 0;
  v35 = v30 | v29 | v31 | v32 | v33 | v34;
  *a1 = v28 & 0xFC0000FF | ((a13 != 0) << 19) | v35;
  a1[1] = a10;
  if (a13)
    *((_QWORD *)a1 + 7) = a12;
  if (a16)
    *(_QWORD *)&a1[2 * (a13 != 0) + 14] = a16;
  if (a10)
  {
    v36 = 0;
    v37 = (unint64_t)((a13 != 0) << 19) >> 19;
    if ((v35 & 0x1800000) != 0)
      LODWORD(v37) = (a13 != 0) + 1;
    do
    {
      *(_QWORD *)&a1[2 * (v37 + v36) + 14] = *(_QWORD *)(a9 + 8 * v36);
      ++v36;
    }
    while (a10 != v36);
  }
  if ((_DWORD)a11 != 0 && (_DWORD)v27 != 0)
  {
    v38 = a10 + (a13 != 0);
    if ((v35 & 0x1800000) != 0)
      ++v38;
    *(_QWORD *)&a1[2 * v38 + 14] = a11;
  }
  v39 = (v35 >> 23) & 3;
  v40 = v39 != 0;
  v41 = v39 - 1;
  if (!v40)
    v41 = 0;
  if (v41 == 1)
  {
    v27 = (char *)HIDWORD(a20);
  }
  else if (v41 == 2)
  {
    if ((v35 & 0x1800000) != 0)
      v42 = *(_QWORD *)&a1[2 * (a13 != 0) + 14];
    else
      v42 = 0;
    sub_22F0D4E74(v42);
    v27 = (char *)HIDWORD(v43);
  }
  else if ((_DWORD)a11 == 0 || (_DWORD)v27 == 0)
  {
    goto LABEL_45;
  }
  a1[11] = v27;
LABEL_45:
  *a1 = *a1 & 0xFFFC1FFF | ((sub_22EFB2D9C(a1) & 0x1F) << 13);
  return a1;
}

BOOL sub_22F060280(uint64_t a1)
{
  uint64_t v2;

  if (sub_22E4727EC(*(_QWORD *)(a1 + 16)))
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v2 || *(_BYTE *)(v2 + 16) != 26)
    v2 = sub_22F10CF48(v2);
  return !sub_22F113A44(v2) && !sub_22EFBFCDC(*(_QWORD **)(a1 + 16));
}

uint64_t sub_22F0602E8(uint64_t a1)
{
  unsigned __int8 *i;
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v6;

  for (i = *(unsigned __int8 **)(a1 + 24); *i == 153; i = (unsigned __int8 *)*((_QWORD *)i + 2))
  {
    v2 = (*(_DWORD *)i >> 18) & 0x7F;
    v3 = v2 > 8;
    v4 = (1 << v2) & 0x1A0;
    if (v3 || v4 == 0)
      break;
  }
  v6 = *(_QWORD *)(*((_QWORD *)i + 1) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v6 + 16) & 0x400) != 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
  {
    return 0;
  }
  if (*(_DWORD *)(v6 + 16) != 39)
    v6 = sub_22F10CF48(v6);
  return *(_QWORD *)(v6 + 32);
}

unsigned int *sub_22F060384(unsigned int *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13)
{
  uint64_t v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unsigned int *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  char v45;

  v20 = *(_QWORD *)(a3 + 16840);
  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v21 = sub_22F0D3748(a2);
    ++*((_DWORD *)v21 + 2);
  }
  v22 = *a1;
  v23 = *a1 & 0xFFFC00FF | 0x100;
  *a1 = v23;
  *((_QWORD *)a1 + 1) = v20;
  v24 = *(_QWORD *)(a7 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)a7;
  *((_QWORD *)a1 + 4) = v24;
  *((_QWORD *)a1 + 5) = a4;
  *((_QWORD *)a1 + 6) = a5;
  v25 = (unint64_t)(a10 - (_QWORD)a9) >> 3;
  *a1 = v23 & 0xFFF801FF | (((a8 | a6) != 0) << 18);
  a1[1] = v25;
  if ((_DWORD)v25)
  {
    v26 = v22 == 211;
    if (v22 == 211)
      v27 = a1;
    else
      v27 = 0;
    v28 = v27 + 16;
    if (v26)
      v29 = v28;
    else
      v29 = a1 + 20;
    memcpy(v29, a9, (a10 - (_QWORD)a9) & 0x7FFFFFFF8);
  }
  if (a8)
  {
    v30 = *a1;
    v31 = *a1;
    if ((v30 & 0x40000) != 0)
    {
      v36 = a1[1];
      if (v31 != 211)
      {
        v33 = (uint64_t)&a1[2 * v36 + 20];
LABEL_24:
        v37 = a1 + 20;
        v32 = (unsigned int *)v33;
LABEL_25:
        v38 = a1[1];
        v32[2] = a6;
        *v32 = *(_DWORD *)(a8 + 272);
        v32[1] = *(_DWORD *)(a8 + 276);
        v39 = *(_DWORD *)(a8 + 8);
        v32[3] = v39;
        if (v39)
        {
          v40 = 0;
          v41 = (uint64_t)&v37[4 * ((v30 >> 18) & 1) + 2 * v38];
          do
          {
            sub_22F0EEB00(*(_QWORD *)a8 + 32 * v40);
            v42 = (_OWORD *)(v41 + 32 * v40);
            v43 = (_OWORD *)(*(_QWORD *)a8 + 32 * v40);
            v44 = v43[1];
            *v42 = *v43;
            v42[1] = v44;
            ++v40;
          }
          while (v40 != v32[3]);
        }
        goto LABEL_28;
      }
      v32 = &a1[2 * v36 + 16];
    }
    else
    {
      v32 = 0;
      v33 = 0;
      if (v31 != 211)
        goto LABEL_24;
    }
    v37 = a1 + 16;
    goto LABEL_25;
  }
  if (a6)
  {
    if (*(unsigned __int8 *)a1 == 211)
      v34 = a1 + 16;
    else
      v34 = a1 + 20;
    v35 = &v34[2 * a1[1]];
    *(_QWORD *)v35 = 0;
    v35[2] = a6;
    v35[3] = 0;
  }
LABEL_28:
  v45 = sub_22EFB2EBC((unsigned __int8 *)a1, a11, a12, a13);
  *a1 = *a1 & 0xFFFC1FFF | ((v45 & 0x1F) << 13);
  if ((v45 & 4) != 0)
    *((_QWORD *)a1 + 1) = *(_QWORD *)(a3 + 16832);
  return a1;
}

unsigned int *sub_22F0605AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, const void *a8, uint64_t a9)
{
  unsigned int *v17;
  unsigned int *result;
  int v19;
  int v20;

  v17 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, ((_DWORD)a9 - (_DWORD)a8 + 64) & 0xFFFFFFF8, 3);
  result = sub_22F060384(v17, 211, a1, a3, a4, 0, a5, 0, a8, a9, 0, 0, 0);
  *((_QWORD *)result + 7) = a2;
  if (a6)
    v19 = 0x80000;
  else
    v19 = 0;
  if (a7)
    v20 = 0x100000;
  else
    v20 = 0;
  *result = v20 | v19 | *result & 0xFFE7FFFF;
  return result;
}

unsigned int *sub_22F060684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, const void *a9, uint64_t a10)
{
  int v18;
  unsigned int *v19;
  unsigned int *result;
  int v21;

  if (a8)
    v18 = 32 * *(_DWORD *)(a8 + 8);
  else
    v18 = 0;
  v19 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, ((_DWORD)a10 - (_DWORD)a9 + v18 + 80) & 0xFFFFFFF8, 3);
  result = sub_22F060384(v19, 211, a1, a3, a4, a5, a6, a8, a9, a10, 0, 0, 0);
  *((_QWORD *)result + 7) = a2;
  if (a7)
    v21 = 1572864;
  else
    v21 = 0x100000;
  *result = *result & 0xFFE7FFFF | v21;
  return result;
}

uint64_t sub_22F060768(uint64_t a1, int a2, int a3, int a4)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;

  if (a3)
    v6 = 16;
  else
    v6 = 0;
  result = sub_22E3CD3D4(a1 + 2032, (v6 + 8 * a2 + 32 * a4 + 64), 3);
  *(_BYTE *)result = -45;
  if (byte_255E04EB3)
  {
    v11 = result;
    v10 = sub_22F0D3748(211);
    result = v11;
    ++*((_DWORD *)v10 + 2);
  }
  v8 = *(_DWORD *)result;
  if (a3)
    v9 = 0x40000;
  else
    v9 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)result = v8 & 0xFFFBFFFF | v9;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_22F06081C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int128 *a6, uint64_t a7)
{
  unsigned int v8;
  __int128 v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  char v18;

  *(_BYTE *)a1 = -93;
  if (byte_255E04EB3)
  {
    v17 = a5;
    v13 = a4;
    v14 = a7;
    v15 = a3;
    v16 = a6;
    v12 = a2;
    v11 = sub_22F0D3748(163);
    a2 = v12;
    a4 = v13;
    a3 = v15;
    a6 = v16;
    a7 = v14;
    a5 = v17;
    ++*((_DWORD *)v11 + 2);
  }
  v8 = *(_DWORD *)a1 & 0xFFFC00FF;
  *(_DWORD *)a1 = v8 | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  v9 = *a6;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 32) = v9;
  if (a7)
  {
    *(_DWORD *)a1 = v8 | 0x40100;
    v18 = 0;
    sub_22F0F04BC((_DWORD *)(a1 + 56), a5, a7, a1 + 72, &v18);
  }
  else
  {
    *(_DWORD *)a1 = v8 & 0xFFF800FF | 0x100 | ((a5 != 0) << 18);
    if (a5)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = a5;
      *(_DWORD *)(a1 + 68) = 0;
    }
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB3080((unsigned int *)a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F060928(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  if (a6)
  {
    v12 = (32 * *(unsigned int *)(a6 + 8)) | 0x10;
  }
  else if (a4)
  {
    v12 = 16;
  }
  else
  {
    v12 = 0;
  }
  v13 = sub_22E3CD3D4(a1 + 2032, v12 + 56, 3);
  return sub_22F06081C(v13, *(_QWORD *)(a1 + 16832), a2, a3, a4, a5, a6);
}

_DWORD *sub_22F0609B4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *result;
  __int128 v8;
  uint64_t v9;

  v3 = 56;
  if (a2)
    v3 = 72;
  v4 = a1 + 2032;
  if (a2)
    v5 = 0x40000;
  else
    v5 = 0;
  v6 = sub_22E3CD3D4(v4, v3 + 32 * a3, 3);
  v8 = 0uLL;
  v9 = 0;
  result = (_DWORD *)sub_22F06081C(v6, 0, 0, 0, 0, &v8, 0);
  *result = *result & 0xFFFBFFFF | v5;
  return result;
}

uint64_t sub_22F060A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 40);
  for (i = v1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v3 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v3 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v1 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v1);
    }
    if (v3 == 24)
      goto LABEL_13;
    if (v3 == 26)
      break;
    if (((1 << v3) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v1 = i;
  return sub_22F115668(v1);
}

void sub_22F060B18(unsigned __int8 *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;

  if (*a1 == 119)
  {
    if (!*((_DWORD *)a1 + 7))
    {
      v2 = *((_DWORD *)a1 + 8);
      if (v2)
        sub_22F0D60E4(*(_QWORD *)&a1[8 * (v2 - 1) + 48]);
    }
  }
  else if (!*((_DWORD *)a1 + 6) || !*((_DWORD *)a1 + 7))
  {
    v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      v4 = v3 - 1;
      do
      {
        v5 = *a1;
        v6 = v5 == 119;
        if (v5 == 119)
          v7 = a1;
        else
          v7 = 0;
        v8 = v7 + 48;
        if (!v6)
          v8 = a1 + 40;
        v9 = *(unsigned __int8 **)&v8[8 * v4];
        if (!sub_22EFFF908(v9))
        {
          sub_22F0D60E4((uint64_t)v9);
          if (v10)
            break;
        }
      }
      while ((unint64_t)v4--);
    }
  }
}

unint64_t sub_22F060BF4(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v2 = *a1;
  v3 = HIDWORD(*a1) & 0x3F;
  if ((v3 - 37) <= 1)
  {
    if (*((_DWORD *)a1 + 4) == 1)
    {
LABEL_10:
      v7 = *((_DWORD *)a1 + 5);
      v8 = *(uint64_t *)((char *)&a1[((v2 >> 18) & 1) + 1] + BYTE3(v2));
      goto LABEL_7;
    }
LABEL_12:
    sub_22F0D5A50(*(uint64_t *)((char *)&a1[((v2 >> 18) & 1) + 1] + BYTE3(v2)));
    v7 = v11;
    v9 = *((unsigned int *)a1 + 5);
    return v7 | (unint64_t)(v9 << 32);
  }
  if ((_DWORD)v3 == 43 || (_DWORD)v3 == 42 || (_DWORD)v3 == 41)
    goto LABEL_12;
  v4 = *((_DWORD *)a1 + 4);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      v9 = *((unsigned int *)a1 + 5);
      v7 = *((_DWORD *)a1 + 5);
      return v7 | (unint64_t)(v9 << 32);
    }
    goto LABEL_10;
  }
  v5 = (uint64_t)&a1[(v2 >> 18) & 1] + BYTE3(v2);
  sub_22F0D5A50(*(_QWORD *)(v5 + 8));
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 16);
LABEL_7:
  sub_22F0D60E4(v8);
  return v7 | (unint64_t)(v9 << 32);
}

uint64_t sub_22F060CD4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, unsigned int a8, unint64_t a9, char a10)
{
  uint64_t v17;
  uint64_t *v18;
  int v20;

  v17 = sub_22E3CD3D4(a1 + 2032, 8 * (_DWORD)a5 + 8 * (HIDWORD(a9) != 0) + 8 + 32, 3);
  v18 = (uint64_t *)sub_22EFFA1EC((unsigned int *)v17, 141, a3, 0, 0, a4, a5, a6, a7, v20, a8, a9, 0, a10);
  v18[3] = 0;
  *v18 = *v18 & 0xFFFFFFC0FFFFFFFFLL | ((unint64_t)(a2 & 0x3F) << 32);
  *(_QWORD *)(v17 + 24) = sub_22F060BF4(v18);
  return v17;
}

uint64_t sub_22F060DB8(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t result;

  if (a3)
    v5 = 8;
  else
    v5 = 0;
  v6 = sub_22E3CD3D4(a1 + 2032, (v5 + 8 * a2 + 8) + 32, 3);
  result = sub_22EFFA3DC(v6, 141, 0, a2, a3);
  *(_QWORD *)(result + 24) = 0;
  return result;
}

unsigned int *sub_22F060E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned int a7, unint64_t a8, unsigned int a9)
{
  int v16;
  int v17;
  unsigned int *v18;
  int v20;

  if (a4 <= a9)
    v16 = a9;
  else
    v16 = a4;
  if (HIDWORD(a8))
    v17 = 16;
  else
    v17 = 8;
  v18 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, (v17 + 8 * v16) + 24, 3);
  return sub_22EFFA1EC(v18, 140, a2, 0, 0, a3, a4, a5, a6, v20, a7, a8, a9, 0);
}

uint64_t sub_22F060ED0(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v1 = *(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3));
  if (v1)
  {
    do
    {
      v2 = v1;
      v3 = *v1;
      if (v3 > 0xD5)
      {
        if (v3 == 233)
        {
          if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
            return 0;
          v3 = *(_DWORD *)v1;
          v5 = v1 + 16;
        }
        else
        {
          if (v3 != 214)
            break;
          v5 = v1 + 24;
        }
      }
      else if (v3 == 155)
      {
        if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
          return 0;
        v5 = v1 + 24;
        if (!v2[48])
          v5 = v2 + 32;
        v3 = 155;
      }
      else
      {
        if (v3 != 176)
          break;
        v4 = *((unsigned int *)v1 + 5);
        if ((_DWORD)v4 == -1)
          return 0;
        v5 = &v1[8 * v4 + 40];
        v3 = 176;
      }
      v1 = *(unsigned __int8 **)v5;
    }
    while (v1 != v2);
    if (v3 != 188 && ((v3 & 0xFE) != 0x70 || (v2[2] & 0xF8) != 0))
      return 0;
  }
  else
  {
    v2 = 0;
  }
  return *((_QWORD *)v2 + 2);
}

uint64_t sub_22F060FB4(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v1 = *(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3));
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
          return 0;
        v3 = *(_DWORD *)v1;
        v5 = v1 + 16;
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = v1 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
        return 0;
      v5 = v1 + 24;
      if (!v2[48])
        v5 = v2 + 32;
      v3 = 155;
    }
    else
    {
      if (v3 != 176)
        break;
      v4 = *((unsigned int *)v1 + 5);
      if ((_DWORD)v4 == -1)
        return 0;
      v5 = &v1[8 * v4 + 40];
      v3 = 176;
    }
    v1 = *(unsigned __int8 **)v5;
  }
  while (v1 != v2);
  if (v3 == 188)
    return *((_QWORD *)v2 + 3);
  return 0;
}

uint64_t sub_22F061078(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, int a9, int a10, int a11, uint64_t a12)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;

  if (a6)
    v18 = *(_DWORD *)(a6 + 8);
  else
    v18 = 0;
  v19 = v18;
  if (HIDWORD(a8))
    v19 = v18 + 1;
  v20 = sub_22E3CD3D4(a1 + 2032, 8 * v19 + 48, 3);
  result = sub_22F062704(v20, a2, a3, a4, a5, v18, a7, a8, a9, 0, a11, a12);
  if (v18)
  {
    v22 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v22)
    {
      v23 = (_QWORD *)(result + 48);
      v24 = *(uint64_t **)a6;
      do
      {
        v25 = *v24++;
        *v23++ = v25;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sub_22F061168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v3 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && (v3 = sub_22F10CF48(v3)) != 0)
  {
    v2 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0);
    if (!v4 || *(_BYTE *)(v4 + 16) != 39)
      v4 = sub_22F10CF48(v4);
    v1 = *(_QWORD *)(v4 + 32);
  }
  v5 = v1 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 86507531;
  else
    v7 = 0;
  if (v7)
    return 0;
  v8 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  result = sub_22E4808EC(v8);
  if ((_DWORD)result)
  {
    v10 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
    return sub_22EFB35BC(v10, v8) ^ 1;
  }
  return result;
}

uint64_t sub_22F06126C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8, int a9, int a10, int a11)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;

  if (a7)
    v18 = *(_DWORD *)(a7 + 8);
  else
    v18 = 0;
  v19 = v18;
  if (HIDWORD(a8))
    v19 = v18 + 1;
  v20 = sub_22E3CD3D4(a1 + 2032, 8 * v19 + 40, 3);
  result = sub_22F062AB0(v20, a2, a3, a4, a5, a6, v18, a8, a9, 0, a11);
  if (v18)
  {
    v22 = *(unsigned int *)(a7 + 8);
    if ((_DWORD)v22)
    {
      v23 = (_QWORD *)(result + 40);
      v24 = *(uint64_t **)a7;
      do
      {
        v25 = *v24++;
        *v23++ = v25;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sub_22F061354(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v6;
  char *v7;
  uint64_t v8;

  result = sub_22E3CD3D4(a1 + 2032, 8 * (a3 + (unint64_t)a2) + 40, 3);
  *(_BYTE *)result = -111;
  if (byte_255E04EB3)
  {
    v8 = result;
    v7 = sub_22F0D3748(145);
    result = v8;
    ++*((_DWORD *)v7 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  if (a3)
    v6 = 0x4000000;
  else
    v6 = 0;
  *(_DWORD *)result = *(_DWORD *)result & 0xF9FFFFFF | v6;
  *(_DWORD *)(result + 4) = a2;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_22F0613F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 24);
  for (i = v1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v3 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v3 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v1 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v1);
    }
    if (v3 == 24)
      goto LABEL_13;
    if (v3 == 26)
      break;
    if (((1 << v3) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v1 = i;
  return sub_22F115668(v1);
}

uint64_t sub_22F0614DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v9 = *a3;
  *(_BYTE *)a1 = -67;
  if (byte_255E04EB3)
  {
    v17 = a3;
    v18 = a2;
    v16 = a6;
    v15 = sub_22F0D3748(189);
    a6 = v16;
    a3 = v17;
    a2 = v18;
    ++*((_DWORD *)v15 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 32) = a5;
  v10 = 8 * a5;
  if (a5 >> 61)
    v11 = -1;
  else
    v11 = 8 * a5;
  v12 = (_QWORD *)sub_22E3CD3D4(a2 + 2032, v11, 3);
  *(_QWORD *)(a1 + 40) = v12;
  if (a5)
  {
    do
    {
      v13 = *a4++;
      *v12++ = v13;
      v10 -= 8;
    }
    while (v10);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB3170(a1) & 0x1F) << 13);
  return a1;
}

_QWORD *sub_22F0615C0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 8, 3);
  *result = a2;
  return result;
}

uint64_t sub_22F0615F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned __int8 a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;

  v14 = *a4;
  for (i = *a4; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v16 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v16 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v14 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_10;
    }
    if (v16 == 24)
      goto LABEL_13;
    if (v16 == 26)
      break;
    if (((1 << v16) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v14 = i;
LABEL_10:
  v17 = sub_22F115668(v14);
  v18 = (unsigned __int8 *)sub_22F061794((unsigned int *)a1, 119, a3, v17, a2, 0, a5, a6, a8, a9, a10, a11, 0, a7);
  *(_QWORD *)(a1 + 40) = a4;
  v19 = *(unsigned __int8 *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 17);
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((v19 & 0x13 | sub_22EFB31C8(v18) & 0x1F | (v19 << 29 >> 31) & 0xC) << 13);
  return a1;
}

unsigned int *sub_22F061794(unsigned int *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t *a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, char a13, uint64_t a14)
{
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t *v43;

  v15 = a14;
  v16 = a13;
  v17 = a12;
  v18 = a11;
  v19 = a10;
  v20 = a9;
  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v43 = a7;
    v39 = a2;
    v42 = a8;
    v38 = a4;
    v41 = a6;
    v37 = a5;
    v40 = a3;
    v36 = sub_22F0D3748(a2);
    v15 = a14;
    v20 = a9;
    v18 = a11;
    v19 = a10;
    v17 = a12;
    v16 = a13;
    a3 = v40;
    a5 = v37;
    a4 = v38;
    a6 = v41;
    a8 = v42;
    a7 = v43;
    a2 = v39;
    ++*((_DWORD *)v36 + 2);
  }
  v21 = *a1;
  *((_QWORD *)a1 + 1) = a3;
  *((_QWORD *)a1 + 2) = a5;
  *((_QWORD *)a1 + 3) = v15;
  a1[8] = a8;
  if (a6)
    v22 = 0x40000;
  else
    v22 = 0;
  v23 = v21 & 0xFC0000FF;
  if (v20)
    v24 = 0x80000;
  else
    v24 = 0;
  if (v19)
    v25 = 0x100000;
  else
    v25 = 0;
  if (v18)
    v26 = 0x200000;
  else
    v26 = 0;
  if (v17)
    v27 = 0x400000;
  else
    v27 = 0;
  v28 = (v24 | v22 | v25 | v26 | v27) & 0xFC7FFFFF | ((v16 & 7) << 23);
  *a1 = v28 | v23;
  a1[1] = a4;
  v29 = (v28 | v23);
  v30 = v29 == 119;
  if (v29 == 119)
    v31 = a1;
  else
    v31 = 0;
  v32 = v31 + 12;
  if (!v30)
    v32 = a1 + 10;
  if (a8)
  {
    v33 = a8;
    do
    {
      v34 = *a7++;
      *v32++ = v34;
      --v33;
    }
    while (v33);
  }
  if (a2 == 118)
    *a1 = *a1 & 0xFFFC1FFF | ((sub_22EFB31C8((unsigned __int8 *)a1) & 0x1F) << 13);
  return a1;
}

_DWORD *sub_22F061910(uint64_t a1, int *a2, int a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;
  _DWORD *result;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = a5;
  v9 = sub_22E3CD3D4(a1 + 2032, 8 * a5 + 24, 3);
  result = (_DWORD *)sub_22EFF6504(v9, 173, a2);
  if (a3)
    v11 = 0x40000;
  else
    v11 = 0;
  *result = v11 & 0xFFFC0000 | *result & 0x3FFFF | (v5 << 19);
  if (v5)
  {
    v12 = v5;
    v13 = result + 6;
    do
    {
      v14 = *a4++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_22F06199C(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  if (v8 == 40)
    v9 = 256;
  else
    v9 = (v8 == 41) << 9;
  *(_BYTE *)a1 = -120;
  if (byte_255E04EB3)
  {
    v19 = a6;
    v15 = a4;
    v16 = a5;
    v17 = a3;
    v18 = a7;
    v14 = a2;
    v13 = sub_22F0D3748(136);
    a2 = v14;
    a4 = v15;
    a3 = v17;
    a7 = v18;
    a5 = v16;
    a6 = v19;
    ++*((_DWORD *)v13 + 2);
  }
  v10 = *(_DWORD *)a1 & 0xFFFC00FF | v9;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a7;
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 4) = a6;
  if (a6)
  {
    v12 = 0;
    do
    {
      *(_QWORD *)(a1 + 32 + 8 * v12) = *(_QWORD *)(a5 + 8 * v12);
      ++v12;
    }
    while (a6 != v12);
  }
  *(_DWORD *)a1 = v10 | ((sub_22EFB3258(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F061A98(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;

  result = sub_22E3CD3D4(a1 + 2032, 8 * a2 + 32, 3);
  *(_BYTE *)result = -120;
  if (byte_255E04EB3)
  {
    v5 = result;
    v4 = sub_22F0D3748(136);
    result = v5;
    ++*((_DWORD *)v4 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_22F061B18(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  for (i = v1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v3 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v3 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v1 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v1);
    }
    if (v3 == 24)
      goto LABEL_13;
    if (v3 == 26)
      break;
    if (((1 << v3) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v1 = i;
  return sub_22F115668(v1);
}

uint64_t sub_22F061BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v23;
  int v24;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;

  v15 = a11;
  v14 = a12;
  v16 = *(_QWORD *)(a2 + 16832);
  *(_BYTE *)a1 = 123;
  if (byte_255E04EB3)
  {
    v30 = a6;
    v34 = a5;
    v29 = a8;
    v33 = a7;
    v28 = a4;
    v31 = v16;
    v32 = a3;
    v25 = sub_22F0D3748(123);
    v16 = v31;
    a3 = v32;
    v15 = a11;
    a4 = v28;
    a7 = v33;
    a8 = v29;
    a6 = v30;
    a5 = v34;
    v14 = a12;
    ++*((_DWORD *)v25 + 2);
  }
  v17 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_DWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a8;
  v18 = *v15;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)v15 + 2);
  *(_OWORD *)(a1 + 48) = v18;
  if (a5)
    v19 = 0x40000;
  else
    v19 = 0;
  v20 = v17 & 0xFFF801FF | v19;
  if (v14)
  {
    v23 = v20 & 0xFFE401FF;
    if (a10)
      v24 = 1572864;
    else
      v24 = 0x80000;
    *(_DWORD *)a1 = v23 | v24;
    *(_DWORD *)(a1 + 4) = a6;
    v35 = 0;
    sub_22F0F04BC((_DWORD *)(a1 + 72), a9, v14, a1 + 88, &v35);
    v21 = *(_DWORD *)a1;
  }
  else
  {
    v21 = ((a9 != 0) << 19) | ((a10 != 0) << 20) | v20 & 0xFFE401FF;
    *(_DWORD *)a1 = v21;
    *(_DWORD *)(a1 + 4) = a6;
    if (a9)
    {
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = a9;
    }
  }
  if ((v21 & 0x100000) != 0)
  {
    v26 = (_DWORD *)(a1 + 72);
    if ((v21 & 0x80000) != 0 && *v26)
      v27 = *(unsigned int *)(a1 + 84);
    else
      v27 = 0;
    *(_QWORD *)&v26[8 * v27 + 4 * ((v21 >> 19) & 1)] = a10;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB32C4((unsigned int *)a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F061D9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v24;
  uint64_t v25;

  if (a11)
  {
    v18 = a9 == 0;
    v19 = (32 * *(_DWORD *)(a11 + 8)) | 0x10;
  }
  else
  {
    v18 = a9 == 0;
    if (a8)
      v19 = 16;
    else
      v19 = 0;
  }
  if (v18)
    v20 = 0;
  else
    v20 = 8;
  v21 = sub_22E3CD3D4(a1 + 2032, ((v20 | v19) + 72) & 0xFFFFFFF8, 3);
  v24 = *(_OWORD *)a10;
  v25 = *(_QWORD *)(a10 + 16);
  return sub_22F061BFC(v21, a1, a2, a3, a4, a5, a6, a7, a8, a9, &v24, a11);
}

uint64_t sub_22F061E98(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15)
{
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;

  v22 = a14;
  if (!a4)
  {
    v27 = *(_DWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 16);
    v24 = (v27 >> 10) & 1;
    v25 = (v27 >> 9) & 1;
LABEL_10:
    v26 = (v27 >> 8) & 1;
    goto LABEL_11;
  }
  v23 = *a4;
  if ((*a4 & 0x8000) == 0)
  {
    v24 = (*(unsigned __int8 *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 17) >> 2) & 1;
    if ((v23 & 0x4000) != 0)
      goto LABEL_4;
LABEL_8:
    v25 = (*(unsigned __int8 *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 17) >> 1) & 1;
    if ((v23 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_9;
  }
  LOBYTE(v24) = 1;
  if ((v23 & 0x4000) == 0)
    goto LABEL_8;
LABEL_4:
  LOBYTE(v25) = 1;
  if ((v23 & 0x2000) == 0)
  {
LABEL_9:
    v27 = *(_DWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 16);
    goto LABEL_10;
  }
LABEL_5:
  LOBYTE(v26) = 1;
LABEL_11:
  sub_22F060384((unsigned int *)a1, 212, a2, a9, a10, a11, a12, a13, a14, a15, v24, v25, v26);
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 72) = a7;
  if (a6)
    v28 = 0x80000;
  else
    v28 = 0;
  if (a3)
    v29 = 0x100000;
  else
    v29 = 0;
  *(_DWORD *)a1 = v28 | v29 | *(_DWORD *)a1 & 0xFFE7FFFF;
  while (1)
  {
    v30 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
    v31 = (*(_DWORD *)(v30 + 28) & 0x7Fu) - 17;
    if (v31 <= 0x39)
    {
      if (((1 << ((*(_BYTE *)(v30 + 28) & 0x7Fu) - 17)) & 0x60000003) != 0)
      {
        v30 = sub_22EFBAEA4(*v22 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else if (v31 == 57)
      {
        return a1;
      }
    }
    if (v30)
      v32 = (*(_DWORD *)(v30 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
    else
      v32 = 0;
    if (!v32)
    {
      if ((*(_DWORD *)(v30 + 28) & 0x7F) == 0x1D)
        v30 = *(_QWORD *)(v30 + 48);
      else
        v30 = 0;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 32))(v30) + 80) & 0xE000) == 0x4000)
      return a1;
    if ((*(_QWORD *)(v30 + 40) & 7) == 6)
    {
      v33 = *(_DWORD *)(*(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8) - 1;
      ++v22;
      if (v33 < 4 || v22 == (_QWORD *)a15)
      {
        if (v33 < 4)
          return a1;
LABEL_41:
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 16848);
        return a1;
      }
    }
    else if (++v22 == (_QWORD *)a15)
    {
      goto LABEL_41;
    }
  }
}

uint64_t sub_22F0620C0(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 56);
  if (v1)
    return sub_22EFFFB48(v1);
  else
    return 1;
}

uint64_t sub_22F0620D4(uint64_t a1, int a2, int *a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13)
{
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  if (a11)
  {
    v18 = 32 * *(_DWORD *)(a11 + 8);
    v19 = (a13 - (_DWORD)a12) & 0xFFFFFFF8;
LABEL_4:
    v21 = 16;
    v20 = v18;
    goto LABEL_5;
  }
  v18 = 0;
  v20 = 0;
  v21 = 0;
  v19 = (a13 - (_DWORD)a12) & 0xFFFFFFF8;
  if (a9)
    goto LABEL_4;
LABEL_5:
  v22 = sub_22E3CD3D4(a1 + 2032, (v19 + v20 + v21 + 80) & 0xFFFFFFF8, 3);
  return sub_22F061E98(v22, a1, a2, a3, a4, a5, a6, v23, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_22F0621BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v15 = v1;
    v10 = sub_22F0AAB60(v2);
    v1 = v15;
    if (v10 != 6)
    {
      v11 = *(_QWORD *)(v15 + 40);
      if ((*(_BYTE *)(v11 + 8) & 4) != 0)
        v6 = *(_QWORD *)(v11 + 16);
      else
        v6 = 0;
      goto LABEL_7;
    }
  }
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 16);
    if ((v5 & 0xFE) == 0x28)
      goto LABEL_16;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v12 = *(_QWORD *)(v1 + 64);
    v13 = v1;
    v4 = sub_22F10CF48(v4);
    v3 = v12;
    v1 = v13;
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 16);
LABEL_16:
      if ((v5 & 0x100000) != 0)
      {
        v14 = v1;
        do
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v4 || (v9 = *(_DWORD *)(v4 + 16), (v9 & 0xFE) != 0x28))
          {
            v4 = sub_22F10CF48(v4);
            v9 = *(_DWORD *)(v4 + 16);
          }
          v1 = v14;
        }
        while ((v9 & 0x100000) != 0);
      }
      v3 = *(_QWORD *)(v4 + 32);
    }
  }
  if ((*(_BYTE *)(v1 + 2) & 8) != 0)
  {
    v8 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
    if (!v8 || *(_BYTE *)(v8 + 16) != 39)
      v8 = sub_22F10CF48(v8);
    v3 = *(_QWORD *)(v8 + 32);
  }
  v6 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
LABEL_7:
  result = sub_22F10C2A4(v6);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
      return 0;
  }
  return result;
}

uint64_t sub_22F0622F8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = sub_22E3CD3D4(a1 + 2032, 24 * a8 + 40, 3);
  v17 = sub_22EF67C8C(a1);
  return sub_22F062BC4(v16, v17, a2, a3, a4, a5, a6, v18, a7, a8);
}

unint64_t sub_22F0623A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    return sub_22EF5F8C4(a2, v3, 1);
  v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 8) & 0xF) != 0)
    v4 = (unint64_t)sub_22F10D2BC(v3);
  return v4 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F0623F0(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a4)
    v5 = 256;
  else
    v5 = 512;
  *(_BYTE *)result = -70;
  if (byte_255E04EB3)
  {
    v13 = result;
    v10 = a2;
    v11 = a3;
    v9 = a5;
    v12 = v5;
    v7 = sub_22F0D3748(186);
    a5 = v9;
    a2 = v10;
    a3 = v11;
    v8 = v7;
    result = v13;
    ++*((_DWORD *)v8 + 2);
    v5 = v12;
  }
  v6 = *(_DWORD *)result & 0xFFFC00FF | v5;
  *(_DWORD *)result = v6;
  *(_QWORD *)(result + 8) = a2;
  if (a5)
  {
    *(_QWORD *)(result + 16) = a5 | 4;
    *(_QWORD *)(a5 + 40) = a3;
  }
  else
  {
    *(_QWORD *)(result + 16) = a3 & 0xFFFFFFFFFFFFFFFBLL;
    *(_DWORD *)result = *(_DWORD *)(a3 & 0xFFFFFFFFFFFFFFF8) & 0x3E000 | v6;
  }
  return result;
}

unsigned int *sub_22F0624B0(unsigned int *result, uint64_t a2, unsigned int a3, unsigned __int8 a4, uint64_t *a5, unsigned int a6, unsigned int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  int v20;
  char *v21;
  char *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  uint64_t *v29;
  unsigned int *v30;

  *(_BYTE *)result = -26;
  if (byte_255E04EB3)
  {
    v29 = a5;
    v30 = result;
    v25 = a6;
    v28 = a4;
    v24 = a8;
    v26 = a2;
    v27 = a7;
    v23 = a3;
    v21 = sub_22F0D3748(230);
    a2 = v26;
    a7 = v27;
    a3 = v23;
    a8 = v24;
    a4 = v28;
    a6 = v25;
    v22 = v21;
    a5 = v29;
    result = v30;
    ++*((_DWORD *)v22 + 2);
  }
  v8 = *result;
  *((_QWORD *)result + 1) = a2;
  result[4] = a3;
  result[5] = a7;
  v9 = v8 & 0xF80000FF;
  if (a8)
    v10 = 0x4000000;
  else
    v10 = 0;
  v11 = v10 & 0xFC03FFFF | (a4 << 18) | v9;
  *result = v11;
  result[1] = a6;
  if (a6)
  {
    v12 = (_QWORD **)(result + 6);
    v13 = result + 6;
    v14 = a6;
    do
    {
      v15 = *a5++;
      *v13++ = v15;
      --v14;
    }
    while (v14);
    v16 = 0;
    v17 = 8 * a6;
    do
    {
      v18 = *v12++;
      v19 = *(_BYTE *)(*(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF0) + 17);
      v16 |= v19 & 0x13 | (2 * v19) & 8;
      v17 -= 8;
    }
    while (v17);
    v20 = (v16 & 0x1F) << 13;
  }
  else
  {
    v20 = 0;
  }
  *result = v20 | v11;
  return result;
}

uint64_t sub_22F0625CC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  char *v3;
  uint64_t v4;

  result = sub_22E3CD3D4(a1 + 2032, 8 * a2 + 24, 3);
  *(_BYTE *)result = -26;
  if (byte_255E04EB3)
  {
    v4 = result;
    v3 = sub_22F0D3748(230);
    result = v4;
    ++*((_DWORD *)v3 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unsigned int *sub_22F062638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, unsigned int a8, unint64_t a9, unsigned int a10)
{
  int v17;
  int v18;
  unsigned int *v19;
  int v21;
  uint64_t v22;

  if (a5 <= a10)
    v17 = a10;
  else
    v17 = a5;
  if (HIDWORD(a9))
    v18 = 24;
  else
    v18 = 16;
  v19 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, (v18 + 8 * v17) + 24, 3);
  v22 = a3;
  return sub_22EFFA1EC(v19, 139, a2, (uint64_t)&v22, 1u, a4, a5, a6, a7, v21, a8, a9, a10, 0);
}

uint64_t sub_22F062704(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8, int a9, int a10, int a11, uint64_t a12)
{
  uint64_t v15;
  char v16;
  int v17;

  v15 = sub_22F00373C(a1, 150, a2, a3, a4, a5, a6, HIDWORD(a8) != 0);
  *(_QWORD *)(v15 + 24) = a7;
  v16 = sub_22EFB2630(v15);
  v17 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((v16 & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a9;
  *(_DWORD *)(a1 + 36) = a11;
  *(_QWORD *)(a1 + 40) = a12;
  if ((v17 & 0x4000000) != 0)
    *(_QWORD *)sub_22EFFB618((unsigned __int8 *)a1) = a8;
  return a1;
}

uint64_t sub_22F0627A0(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  char *v18;
  unsigned int v19;
  int v20;

  *(_BYTE *)a1 = -108;
  if (byte_255E04EB3)
  {
    v18 = sub_22F0D3748(148);
    ++*((_DWORD *)v18 + 2);
  }
  v19 = *(_DWORD *)a1 & 0xF80000FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  v20 = ((a3 & 3) << 8) | ((a4 & 0x7F) << 18) | v19;
  *(_DWORD *)a1 = v20;
  *(_DWORD *)(a1 + 4) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  *(_DWORD *)a1 = v20 & 0xFFFC1FFF | ((sub_22EFB2630(a1) & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a9;
  *(_QWORD *)(a1 + 40) = a10;
  return a1;
}

uint64_t sub_22F062864(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  char *v18;
  unsigned int v19;
  int v20;

  *(_BYTE *)a1 = -107;
  if (byte_255E04EB3)
  {
    v18 = sub_22F0D3748(149);
    ++*((_DWORD *)v18 + 2);
  }
  v19 = *(_DWORD *)a1 & 0xF80000FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  v20 = ((a3 & 3) << 8) | ((a4 & 0x7F) << 18) | v19;
  *(_DWORD *)a1 = v20;
  *(_DWORD *)(a1 + 4) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  *(_DWORD *)a1 = v20 & 0xFFFC1FFF | ((sub_22EFB2630(a1) & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a9;
  *(_QWORD *)(a1 + 40) = a10;
  return a1;
}

uint64_t sub_22F062928(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  char *v17;
  unsigned int v18;
  unsigned int v19;

  *(_BYTE *)a1 = -110;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(146);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = *(_DWORD *)a1 & 0xF80000FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  v19 = ((a3 & 3) << 8) | ((a4 & 0x7F) << 18) | v18;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)a1 = v19 & 0xFFFC1FFF | ((sub_22EFB2630(a1) & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 36) = a8;
  *(_QWORD *)(a1 + 40) = a9;
  return a1;
}

uint64_t sub_22F0629EC(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  char *v17;
  unsigned int v18;
  unsigned int v19;

  *(_BYTE *)a1 = -105;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(151);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = *(_DWORD *)a1 & 0xF80000FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  v19 = ((a3 & 3) << 8) | ((a4 & 0x7F) << 18) | v18;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)a1 = v19 & 0xFFFC1FFF | ((sub_22EFB2630(a1) & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 36) = a8;
  *(_QWORD *)(a1 + 40) = a9;
  return a1;
}

uint64_t sub_22F062AB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, int a7, unint64_t a8, int a9, int a10, int a11)
{
  uint64_t v14;
  char v15;
  int v16;

  v14 = sub_22F00373C(a1, 145, a2, a3, a5, a6, a7, HIDWORD(a8) != 0);
  *(_QWORD *)(v14 + 24) = a4;
  v15 = sub_22EFB2630(v14);
  v16 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((v15 & 0x1F) << 13);
  *(_DWORD *)(a1 + 32) = a9;
  *(_DWORD *)(a1 + 36) = a11;
  if ((v16 & 0x4000000) != 0)
    *(_QWORD *)sub_22EFFB618((unsigned __int8 *)a1) = a8;
  return a1;
}

uint64_t sub_22F062B38(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a3 + 8);
  *(_BYTE *)result = 116;
  if (byte_255E04EB3)
  {
    v8 = a3;
    v9 = result;
    v7 = a2;
    v10 = v3;
    v5 = sub_22F0D3748(116);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    result = v9;
    ++*((_DWORD *)v6 + 2);
    v3 = v10;
  }
  v4 = *(_DWORD *)result & 0xFFFC00FF;
  *(_DWORD *)result = v4;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)result = *(_DWORD *)a3 & 0x3E000 | v4;
  return result;
}

uint64_t sub_22F062BC4(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v10 = a10;
  *(_BYTE *)result = -34;
  if (byte_255E04EB3)
  {
    v25 = a4;
    v26 = result;
    v21 = a5;
    v22 = a7;
    v23 = a3;
    v24 = a6;
    v20 = a2;
    v14 = sub_22F0D3748(222);
    a2 = v20;
    a5 = v21;
    a3 = v23;
    a6 = v24;
    a7 = v22;
    v15 = v14;
    a4 = v25;
    result = v26;
    ++*((_DWORD *)v15 + 2);
    v10 = a10;
  }
  v11 = *(_DWORD *)result & 0xFFFC00FF;
  *(_DWORD *)result = v11;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a5;
  if ((a7 & 0xFF00000000) != 0)
    v12 = a7;
  else
    v12 = v10;
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = v12;
  *(_QWORD *)(result + 32) = a4;
  if (v10)
  {
    v16 = 0;
    v17 = 24 * v10;
    do
    {
      v18 = result + v16;
      v19 = *(_OWORD *)(a9 + v16);
      *(_QWORD *)(v18 + 56) = *(_QWORD *)(a9 + v16 + 16);
      *(_OWORD *)(v18 + 40) = v19;
      v16 += 24;
    }
    while (v17 != v16);
    v11 = *(_DWORD *)result & 0xFFFC1FFF;
  }
  if ((a7 & 0xFF00000000) != 0)
    v13 = 0;
  else
    v13 = 81920;
  *(_DWORD *)result = v11 | v13;
  return result;
}

_DWORD *sub_22F062CBC(_DWORD *result, uint64_t a2, uint64_t a3, void *__src, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  BOOL v8;

  v6 = result[6];
  result[6] = v6 & 0xFFFF0000 | (unsigned __int16)a3;
  if (a3)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)&result[2 * v7 + 12] = *(_QWORD *)(a2 + 8 * v7);
      ++v7;
    }
    while (a3 != v7);
  }
  result[6] = v6 & 0xE7FF0000 | (unsigned __int16)a3 | ((a6 & 3) << 27);
  if (v6 & 0x4000000 | a6)
    v8 = 1;
  else
    v8 = a5 == 0;
  if (!v8)
    return memmove(&result[2 * (unsigned __int16)a3 + 12], __src, 4 * a5);
  return result;
}

uint64_t sub_22F062D28(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned int a14, int a15, unsigned __int8 a16)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a16)
  {
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a13 + 8) & 0x7FFFFFFF8) + 40, 3);
    v19 = 0;
    v20 = a14;
  }
  else
  {
    v20 = a14;
    v19 = sub_22F3F13E4(a8, (uint64_t)a9, a10, a12, a13, a14);
    v21 = 4 * a10;
    if (v19)
      v21 = 0;
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a13 + 8) & 0x7FFFFFFF8) + v21 + 40, 3);
  }
  return sub_22F3C750C(v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, v19, a11, a12, a13, v20, a16);
}

uint64_t sub_22F062E40(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unsigned int a12, int a13, unsigned __int8 a14)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a14)
  {
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a11 + 8) & 0x7FFFFFFF8) + 40, 3);
    v19 = 0;
    v20 = a12;
  }
  else
  {
    v20 = a12;
    v19 = sub_22F3F13E4(a6, (uint64_t)a7, a8, a10, a11, a12);
    v21 = 4 * a8;
    if (v19)
      v21 = 0;
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a11 + 8) & 0x7FFFFFFF8) + v21 + 40, 3);
  }
  return sub_22F3C7650(v18, a2, a3, a4, a5, a6, a7, a8, v19, a9, a10, a11, v20, a14);
}

uint64_t sub_22F062F54(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unsigned int a12, int a13, unsigned __int8 a14)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a14)
  {
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a11 + 8) & 0x7FFFFFFF8) + 40, 3);
    v19 = 0;
    v20 = a12;
  }
  else
  {
    v20 = a12;
    v19 = sub_22F3F13E4(a6, (uint64_t)a7, a8, a10, a11, a12);
    v21 = 4 * a8;
    if (v19)
      v21 = 0;
    v18 = sub_22E3CD3D4(a1 + 2032, ((8 * a11 + 8) & 0x7FFFFFFF8) + v21 + 40, 3);
  }
  return sub_22F3C7770(v18, a2, a3, a4, a5, a6, a7, a8, v19, a9, a10, a11, v20, a14);
}

uint64_t sub_22F063068()
{
  return 0;
}

uint64_t sub_22F063070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(_QWORD *)(a2 + 16048);
  if (v4)
    v5 = v4 == a1;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_8;
  *(_DWORD *)(a1 + 12) = v3 + 1;
  if ((_DWORD)v3 == -1)
  {
    v4 = llvm::report_fatal_error((llvm *)"generation counter overflowed", 0);
LABEL_8:
    *(_DWORD *)(a1 + 12) = sub_22F063070(v4);
  }
  return v3;
}

unsigned __int8 **sub_22F0630C8@<X0>(unsigned __int8 **result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;

  v3 = *result;
  if (*result != a2)
  {
    v4 = *v3;
    v5 = v4 - 48;
    if ((v4 - 48) > 9)
    {
      a2 = *result;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = &v3[v6 + 1];
        if (v8 == a2)
          break;
        v7 = v4 + 10 * v7 - 48;
        v4 = *v8;
        ++v6;
        if ((v4 - 48) >= 0xA)
        {
          a2 = &v3[v6];
          if (v5 > 9)
            break;
          *(_QWORD *)a3 = v3;
          *(_DWORD *)(a3 + 8) = v6;
          *(_DWORD *)(a3 + 12) = 1;
          *(_DWORD *)(a3 + 16) = v7;
          goto LABEL_10;
        }
      }
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
LABEL_10:
  *(_WORD *)(a3 + 20) = *(_BYTE *)(a3 + 20) & 0xFE;
  *result = a2;
  return result;
}

unsigned __int8 **sub_22F063160@<X0>(unsigned __int8 **result@<X0>, unsigned __int8 **a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  char v13;
  uint64_t v14;

  v6 = *a2;
  if (**a2 != 42)
    return sub_22F0630C8(a2, a3, a5);
  v7 = (_DWORD)v6 + 1;
  if (v6 + 1 == a3)
    goto LABEL_12;
  v8 = v6[1];
  v9 = v8 - 48;
  if ((v8 - 48) <= 9)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = &v6[v10 + 2];
      if (v12 == a3)
        break;
      v11 = v8 + 10 * v11 - 48;
      v8 = *v12;
      ++v10;
      if ((v8 - 48) >= 0xA)
      {
        if (v9 >= 0xA)
        {
          v7 = (_DWORD)v6 + v10 + 1;
          goto LABEL_13;
        }
        if (v8 != 36)
        {
          v14 = (v10 + 1);
          goto LABEL_14;
        }
        if (v11)
        {
          *a2 = &v6[v10 + 2];
          *(_QWORD *)a5 = v6;
          *(_QWORD *)(a5 + 8) = 0x200000000;
          *(_DWORD *)(a5 + 16) = v11 - 1;
          v13 = *(_BYTE *)(a5 + 20) | 1;
          goto LABEL_16;
        }
        result = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 6))(result);
        goto LABEL_15;
      }
    }
LABEL_12:
    v7 = (int)a3;
  }
LABEL_13:
  v14 = (v7 - (_DWORD)v6);
LABEL_14:
  result = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **, unsigned __int8 *, uint64_t, uint64_t))*result
                                + 5))(result, v6, v14, a4);
LABEL_15:
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0x300000000;
  *(_DWORD *)(a5 + 16) = 0;
  v13 = *(_BYTE *)(a5 + 20) & 0xFE;
LABEL_16:
  *(_BYTE *)(a5 + 20) = v13;
  *(_BYTE *)(a5 + 21) = 0;
  return result;
}

double sub_22F0632A0(unsigned __int8 **a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, unsigned __int8 *a5, _DWORD *a6)
{
  double result;
  _BYTE v8[22];

  if (a6)
  {
    sub_22F3C7BF8(a4, a5, (uint64_t)v8, a6);
    goto LABEL_5;
  }
  sub_22F063160(a1, a4, a5, 0, (uint64_t)v8);
  if (*(_DWORD *)&v8[12] != 3)
  {
LABEL_5:
    result = *(double *)v8;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a2 + 30) = *(_QWORD *)&v8[14];
  }
  return result;
}

uint64_t sub_22F063314(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, unsigned __int8 *a5)
{
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t result;
  void (*v16)(void);

  v6 = *a4;
  if (*a4 != a5)
  {
    v7 = *v6;
    v8 = v7 - 48;
    if ((v7 - 48) > 9)
      return 0;
    v11 = 0;
    LODWORD(v12) = (_DWORD)v6 - a3 + 1;
    v13 = v6 + 1;
    while (v13 != a5)
    {
      v11 = v7 + 10 * v11 - 48;
      v14 = *v13++;
      v7 = v14;
      v12 = (v12 + 1);
      if ((v14 - 48) >= 0xA)
      {
        if (v8 >= 0xA || v7 != 36)
          return 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a3, v12);
        if (v11)
        {
          result = 0;
          *(_DWORD *)(a2 + 100) = v11 - 1;
          *(_BYTE *)(a2 + 96) = 1;
          *a4 = v13;
          return result;
        }
        v16 = *(void (**)(void))(*(_QWORD *)a1 + 48);
        goto LABEL_11;
      }
    }
  }
  v16 = *(void (**)(void))(*(_QWORD *)a1 + 56);
LABEL_11:
  v16();
  return 1;
}

uint64_t sub_22F06342C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5)
{
  _BYTE *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t result;

  if ((*(_DWORD *)(a5 + 52) & 0x40000000) == 0 && (*(_BYTE *)(a5 + 104) & 0x20) == 0)
    return 0;
  v6 = (_BYTE *)*a3;
  if (*(_BYTE *)*a3 != 118)
    return 0;
  v7 = (uint64_t)(v6 + 1);
  *a3 = (uint64_t)(v6 + 1);
  if (v6 + 1 != a4)
  {
    v8 = v6[1];
    v9 = v8 - 48;
    if ((v8 - 48) <= 9)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = &v6[v10 + 2];
        if (v12 == a4)
        {
          v7 = (uint64_t)a4;
          goto LABEL_14;
        }
        v11 = v8 + 10 * v11 - 48;
        v8 = *v12;
        ++v10;
      }
      while ((v8 - 48) < 0xA);
      if (v9 < 0xA)
      {
        result = 0;
        *a3 = (uint64_t)&v6[v10 + 1];
        *(_QWORD *)(a2 + 72) = v7;
        *(_DWORD *)(a2 + 80) = v10;
        *(_DWORD *)(a2 + 84) = 1;
        *(_DWORD *)(a2 + 88) = v11;
        *(_WORD *)(a2 + 92) = 0;
        return result;
      }
      v7 = (uint64_t)&v6[v10 + 1];
    }
LABEL_14:
    *a3 = v7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return 1;
}

uint64_t sub_22F06351C(uint64_t a1, char **a2, char *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v14;
  int v15;

  v5 = 0;
  v6 = *a2;
  v7 = **a2;
  if (v7 > 103)
  {
    switch(**a2)
    {
      case 'h':
        *a2 = v6 + 1;
        if (v6 + 1 == a3)
          goto LABEL_38;
        v8 = v6[1];
        if (v8 != 108)
        {
          if (v8 == 104)
          {
            a3 = v6 + 2;
            v9 = 1;
            goto LABEL_52;
          }
          goto LABEL_38;
        }
        if ((*(_DWORD *)(a4 + 52) & 0x40000000) == 0 && (*(_BYTE *)(a4 + 104) & 0x20) == 0)
        {
LABEL_38:
          v9 = 2;
          goto LABEL_53;
        }
        a3 = v6 + 2;
        v9 = 3;
        break;
      case 'j':
        a3 = v6 + 1;
        v9 = 7;
        goto LABEL_52;
      case 'l':
        *a2 = v6 + 1;
        if (v6 + 1 != a3 && v6[1] == 108)
        {
          a3 = v6 + 2;
          v9 = 5;
          goto LABEL_52;
        }
        v9 = 4;
        goto LABEL_53;
      case 'm':
        if (!a5)
          return 0;
        a3 = v6 + 1;
        v9 = 15;
        goto LABEL_52;
      case 'q':
        a3 = v6 + 1;
        v9 = 6;
        goto LABEL_52;
      case 't':
        a3 = v6 + 1;
        v9 = 9;
        goto LABEL_52;
      case 'w':
        a3 = v6 + 1;
        v9 = 16;
        goto LABEL_52;
      case 'z':
        a3 = v6 + 1;
        v9 = 8;
        goto LABEL_52;
      default:
        return v5;
    }
    goto LABEL_52;
  }
  if (v7 == 73)
  {
    if (v6 + 1 == a3)
    {
      v9 = 11;
      goto LABEL_52;
    }
    if (v6 + 2 != a3)
    {
      v14 = v6[1];
      if (v14 == 54)
      {
        if (v6[2] == 52)
        {
          a3 = v6 + 3;
          v9 = 12;
LABEL_52:
          *a2 = a3;
          goto LABEL_53;
        }
        if ((a5 & 1) != 0)
          return 0;
      }
      else
      {
        if ((a5 & 1) != 0)
          return 0;
        if (v14 == 51)
        {
          v15 = v6[2];
          if (v15 == 50)
            a3 = v6 + 3;
          else
            a3 = v6 + 1;
          if (v15 == 50)
            v9 = 10;
          else
            v9 = 11;
          goto LABEL_52;
        }
      }
    }
    v9 = 11;
    a3 = v6 + 1;
    goto LABEL_52;
  }
  if (v7 == 76)
  {
    a3 = v6 + 1;
    v9 = 13;
    goto LABEL_52;
  }
  if (v7 != 97)
    return v5;
  if (!a5 || (*(_WORD *)a4 & 0x201) != 0)
    return 0;
  *a2 = v6 + 1;
  if (v6 + 1 != a3)
  {
    v10 = v6[1] - 83;
    v11 = v10 > 0x20;
    v12 = (1 << v10) & 0x100000101;
    if (!v11 && v12 != 0)
    {
      v9 = 14;
LABEL_53:
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = v9;
      return 1;
    }
  }
  v5 = 0;
  *a2 = v6;
  return v5;
}

uint64_t sub_22F063740(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v7;

  v3 = a3;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 < 2
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 <= 3)
  {
    v3 = sub_22F36A2BC(a2, a3);
  }
  if (!*(_BYTE *)(a1 + 24))
LABEL_13:
    __asm { BR              X10 }
  result = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  if (result && *(_BYTE *)(result + 16) == 39)
  {
LABEL_11:
    v7 = *(_QWORD *)(result + 32);
    if ((v7 & 1) == 0 && (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      goto LABEL_13;
    return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    result = sub_22F10CF48(result);
    if (!result)
      return result;
    goto LABEL_11;
  }
  return 0;
}

void sub_22F063CE0(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::string::size_type v12;
  std::string::size_type v13;
  _BYTE *v14;
  std::string *v15;
  __int128 *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  void *v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  uint64_t v40;

  v38.__r_.__value_.__r.__words[0] = sub_22F3C7CAC(a1, a2);
  v40 = 0;
  v39 = 0uLL;
  sub_22F119374((uint64_t *)&v38, &v39, (uint64_t)(a2 + 1888));
  memset(&v38, 0, sizeof(v38));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = 0;
    LOBYTE(v11) = 0;
    goto LABEL_30;
  }
  MEMORY[0x2348A0C14](&v38);
  if (*(_BYTE *)(a1 + 24))
  {
    size = *((_BYTE *)&v38.__r_.__value_.__s + 23) & 0x7F;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v7 = &v38;
    }
    else
    {
      size = v38.__r_.__value_.__l.__size_;
      v7 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if (v7->__r_.__value_.__s.__data_[size - 1] == 42)
      v8 = "*";
    else
      v8 = " *";
    std::string::append(&v38, v8);
  }
  v9 = HIBYTE(v40) & 0x7F;
  if (v40 >= 0)
    v10 = HIBYTE(v40) & 0x7F;
  else
    v10 = *((_QWORD *)&v39 + 1);
  v11 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
  v12 = v38.__r_.__value_.__l.__size_;
  v13 = *((_BYTE *)&v38.__r_.__value_.__s + 23) & 0x7F;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v38.__r_.__value_.__l.__size_;
  if (v10 == v13)
  {
    v14 = (_BYTE *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v38;
    else
      v15 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if (v40 < 0)
    {
      if (memcmp((const void *)v39, v15, *((size_t *)&v39 + 1)))
        goto LABEL_30;
    }
    else if ((v40 & 0x7F00000000000000) != 0)
    {
      v16 = &v39;
      while (*(unsigned __int8 *)v16 == v15->__r_.__value_.__s.__data_[0])
      {
        v16 = (__int128 *)((char *)v16 + 1);
        v15 = (std::string *)((char *)v15 + 1);
        if (!--v9)
          goto LABEL_27;
      }
      goto LABEL_30;
    }
LABEL_27:
    if (v11 < 0)
    {
      v12 = 0;
      *v14 = 0;
      v38.__r_.__value_.__l.__size_ = 0;
      LOBYTE(v11) = *((_BYTE *)&v38.__r_.__value_.__s + 23);
    }
    else
    {
      LOBYTE(v11) = 0;
      v38.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
    }
  }
LABEL_30:
  if ((v11 & 0x80u) == 0)
    v17 = v11 & 0x7F;
  else
    v17 = v12;
  if (v17)
  {
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = 1;
    LOWORD(v34.__r_.__value_.__l.__data_) = 39;
    if ((v11 & 0x80u) == 0)
      v18 = &v38;
    else
      v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
    v19 = std::string::append(&v34, (const std::string::value_type *)v18, v17);
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v35, "' (aka '");
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v23 = (const std::string::value_type *)&v39;
    else
      v23 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v24 = HIBYTE(v40) & 0x7F;
    else
      v24 = *((_QWORD *)&v39 + 1);
    v25 = std::string::append(&v36, v23, v24);
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v37, "')");
    *a3 = *v27;
    v27->__r_.__value_.__r.__words[0] = 0;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v28);
    }
  }
  else
  {
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 1;
    LOWORD(v36.__r_.__value_.__l.__data_) = 39;
    if (v40 >= 0)
      v29 = (const std::string::value_type *)&v39;
    else
      v29 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v30 = HIBYTE(v40) & 0x7F;
    else
      v30 = *((_QWORD *)&v39 + 1);
    v31 = std::string::append(&v36, v29, v30);
    v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v37, "'");
    *a3 = *v33;
    v33->__r_.__value_.__r.__words[0] = 0;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
}

uint64_t sub_22F064030(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22F064054 + 4 * byte_22F4A5216[*(unsigned int *)(a1 + 8)]))(1);
}

uint64_t sub_22F064054@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a3 + 64);
  if ((v3 - 2) >= 9)
  {
    if ((v3 - 30) >= 2)
    {
      if (v3 == 21)
        return result;
      else
        return 0;
    }
    else
    {
      v4 = a2[17];
      if (v4 != 5)
        return a2[14] == 42 && a2[16] == 3 && v4 == 25;
    }
  }
  return result;
}

void sub_22F064270(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65[4];
  llvm *v66[2];
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  char *v70;
  _OWORD v71[18];
  _DWORD *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v69 = a2;
  if (!sub_22EFBF86C(a2, &v69, 0)
    || (v5 = v69, ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v69 + 72))(v69) & 1) == 0)
    && (*(_BYTE *)(v5 + 84) & 8) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = 0;
    return;
  }
  v68 = 0;
  v6 = v74;
  v72 = v74;
  v73 = 0x800000000;
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 16) - 27 > 0xFFFFFFFD;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(v7);
  v9 = *(_QWORD *)(v7 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531;
  else
    v11 = 0;
  if (v11 || (sub_22F0665E4(*(uint64_t **)(a1 + 336), v9) & 0xFF00000000) != 0)
  {
    v13 = 0;
  }
  else
  {
    v12 = v73;
    if (v73 >= HIDWORD(v73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = v73;
    }
    v72[v12] = 9;
    LODWORD(v73) = v73 + 1;
    v13 = 32;
    v68 = 32;
  }
  v14 = *(uint64_t **)(v5 + 120);
  v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_BYTE *)(v15 + 16) == 26;
  else
    v16 = 0;
  if (v16
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v15 = sub_22F10CF48(v15)) != 0)
  {
    v17 = *(_QWORD *)(v15 + 16);
    if ((v17 & 0x3FFFC000000000) != 0)
    {
      v62 = a3;
      v63 = v74;
      v18 = 8 * (unsigned __int16)(v17 >> 38);
      do
      {
        v19 = *v14;
        v20 = sub_22F0665E4(*(uint64_t **)(a1 + 336), *(_QWORD *)(*v14 + 48));
        if ((v20 & 0xFF00000000) != 0)
          v21 = v20;
        else
          v21 = 9;
        v22 = *(_QWORD *)(a1 + 344);
        v70 = (char *)(v19 & 0xFFFFFFFFFFFFFFFDLL);
        v23 = sub_22E3CD3D4(v22 + 128, 72, 3);
        v24 = sub_22F3CD8AC(v23, &v70, v21, 0, 0, 0);
        LODWORD(v70) = v13;
        LODWORD(v71[0]) = v21;
        *((_QWORD *)&v71[0] + 1) = v24;
        sub_22F3C920C((uint64_t)&v64, (uint64_t)v66, (int *)&v70, v71);
        v64 = v19;
        v65[0] = v13;
        sub_22F294A80((uint64_t)&v70, a1 + 8, &v64, v65);
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = 32;
        v26 = v73;
        if (v73 >= (unint64_t)HIDWORD(v73))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v73;
        }
        v72[v26] = v21;
        v13 += v25;
        LODWORD(v73) = v73 + 1;
        ++v14;
        v18 -= 8;
      }
      while (v18);
      v68 = v13;
      a3 = v62;
      v6 = v63;
    }
  }
  v27 = sub_22F3C7FB8(*(_QWORD *)(a1 + 344), v5, &v68, (uint64_t)&v72, (uint64_t)v66);
  if ((*(_BYTE *)(v5 + 83) & 0xC0) == 0
    || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 364))
    {
      v28 = operator new();
      v29 = *(_DWORD *)(a1 + 360);
      *(_QWORD *)v28 = &unk_24FAC5C10;
      *(_DWORD *)(v28 + 8) = v29;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v28;
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = v27;
    }
    goto LABEL_42;
  }
  v30 = (char *)v71 + 8;
  v70 = (char *)v71 + 8;
  *(_QWORD *)&v71[0] = 0x200000000;
  v31 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v31)
  {
    v32 = *(_QWORD *)(a1 + 32);
    v33 = 144 * v31;
    do
    {
      sub_22F3C8078((uint64_t)&v70, v32);
      v32 += 144;
      v33 -= 144;
    }
    while (v33);
  }
  *(_DWORD *)(v27 + 24) = *(_DWORD *)(a1 + 356);
  sub_22F25ACCC(v27 + 32, (__n128 *)(a1 + 416));
  sub_22F25ACCC(v27 + 56, (__n128 *)(a1 + 440));
  v34 = (uint64_t *)(v27 + 80);
  if ((char **)(v27 + 80) != &v70)
  {
    if (v70 == (char *)v71 + 8)
    {
      v35 = v6;
      v36 = v71[0];
      v37 = *(unsigned int *)(v27 + 88);
      if (v37 >= LODWORD(v71[0]))
      {
        v41 = *v34;
        if (LODWORD(v71[0]))
        {
          v43 = 144 * LODWORD(v71[0]);
          do
          {
            sub_22F2528D0(v41, (uint64_t)v30);
            v30 += 144;
            v41 += 144;
            v43 -= 144;
          }
          while (v43);
          LODWORD(v37) = *(_DWORD *)(v27 + 88);
          v42 = *(_QWORD *)(v27 + 80);
        }
        else
        {
          v42 = v41;
        }
        v44 = v42 + 144 * v37;
        v6 = v35;
        while (v44 != v41)
        {
          v46 = *(void **)(v44 - 144);
          v44 -= 144;
          v45 = v46;
          if ((void *)(v44 + 16) != v46)
            free(v45);
        }
        *(_DWORD *)(v27 + 88) = v36;
        if (LODWORD(v71[0]))
        {
          v47 = v70;
          v48 = 144 * LODWORD(v71[0]);
          do
          {
            v49 = *(char **)&v47[v48 - 144];
            if (&v47[v48 - 128] != v49)
              free(v49);
            v48 -= 144;
          }
          while (v48);
        }
        goto LABEL_90;
      }
      if (*(_DWORD *)(v27 + 92) >= LODWORD(v71[0]))
      {
        if ((_DWORD)v37)
        {
          v50 = a3;
          v51 = *v34;
          v52 = 144 * v37;
          do
          {
            sub_22F2528D0(v51, (uint64_t)v30);
            v30 += 144;
            v51 += 144;
            v52 -= 144;
          }
          while (v52);
          a3 = v50;
          goto LABEL_78;
        }
      }
      else
      {
        if ((_DWORD)v37)
        {
          v38 = *v34;
          v39 = 144 * v37;
          do
          {
            v40 = *(void **)(v38 + v39 - 144);
            if ((void *)(v38 + v39 - 128) != v40)
              free(v40);
            v39 -= 144;
          }
          while (v39);
        }
        *(_DWORD *)(v27 + 88) = 0;
        sub_22F341810(v27 + 80);
      }
      v37 = 0;
LABEL_78:
      v53 = v70;
      v54 = v71[0];
      if (v37 == LODWORD(v71[0]))
      {
        v6 = v35;
      }
      else
      {
        v55 = a3;
        v56 = *v34;
        v57 = 144 * v37;
        v58 = 144 * LODWORD(v71[0]);
        v6 = v35;
        do
        {
          v59 = (_QWORD *)(v56 + v57);
          *v59 = v56 + v57 + 16;
          v59[1] = 0x800000000;
          if (*(_DWORD *)&v53[v57 + 8])
            sub_22F2528D0((uint64_t)v59, (uint64_t)&v53[v57]);
          v56 += 144;
          v58 -= 144;
          v53 += 144;
        }
        while (v57 != v58);
        v53 = v70;
        v54 = v71[0];
        a3 = v55;
      }
      *(_DWORD *)(v27 + 88) = v36;
      if (v54)
      {
        v60 = 144 * v54;
        do
        {
          v61 = *(char **)&v53[v60 - 144];
          if (&v53[v60 - 128] != v61)
            free(v61);
          v60 -= 144;
        }
        while (v60);
      }
LABEL_90:
      LODWORD(v71[0]) = 0;
      goto LABEL_91;
    }
    sub_22F341B94((char **)(v27 + 80), &v70);
  }
LABEL_91:
  *(_BYTE *)(v27 + 456) = 1;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v27;
  sub_22F340364(&v70);
LABEL_42:
  llvm::deallocate_buffer(v66[0], (void *)(24 * v67));
  if (v72 != (_DWORD *)v6)
    free(v72);
}

int *sub_22F0648F0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v7;
  int v8;

  if (!a2)
    return (int *)(a1 + 8 * a2);
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  v4 = (int *)(a1 + 8 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v7 = 1;
    while (v5 != -1)
    {
      v8 = v3 + v7++;
      v3 = v8 & (a2 - 1);
      v5 = *(_DWORD *)(a1 + 8 * v3);
      if (v5 == a3)
        return (int *)(a1 + 8 * v3);
    }
    return (int *)(a1 + 8 * a2);
  }
  return v4;
}

BOOL sub_22F064954(_QWORD *a1, int a2, uint64_t *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int __src;
  uint64_t v22;

  __src = a2;
  v5 = (char *)a1[53];
  v6 = (unint64_t)&v5[-a1[52] + 4] >> 32;
  if (!v6)
    sub_22F064D04((uint64_t)(a1 + 52), v5, (char *)&__src, (char *)&v22, 4);
  v7 = *a3;
  if ((unint64_t)*a3 >= 8)
  {
    v8 = a1[53] - a1[52];
    v10 = (char *)a1[56];
    v9 = a1[57];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)a1[55];
      v13 = (v10 - v12) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        abort();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16 >> 60)
        sub_22E3B3F8C();
      v17 = (char *)operator new(16 * v16);
      v18 = &v17[16 * v13];
      *(_DWORD *)v18 = v8;
      *((_QWORD *)v18 + 1) = v7;
      v11 = v18 + 16;
      if (v10 == v12)
      {
        v19 = &v17[16 * v13];
      }
      else
      {
        do
        {
          v19 = v18 - 16;
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v10 -= 16;
          v18 -= 16;
        }
        while (v10 != v12);
      }
      a1[55] = v19;
      a1[56] = v11;
      a1[57] = &v17[16 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = *a3;
      v11 = v10 + 16;
    }
    a1[56] = v11;
  }
  return v6 == 0;
}

_DWORD *sub_22F064AAC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3C93F4(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result += 6;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F064B78(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3C95EC(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_DWORD *sub_22F064C38(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3C9A10(a1, (uint64_t)v4, (uint64_t)v4 + 48 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = -1;
        result += 12;
        v11 -= 48;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F064D04(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    if (v11 == __dst)
    {
      v27 = &v13[(_QWORD)v16];
    }
    else
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(_BYTE **)(a1 + 8);
      v27 = v16;
    }
    v28 = &v26[a5];
    v29 = &v16[v15];
    if (v10 != __dst)
      memmove(v28, __dst, v10 - __dst);
    v30 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v28[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v29;
    if (v30)
      operator delete(v30);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_16:
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = v20;
    if (&v20[-a5] < v10)
    {
      v24 = (char *)(&v10[a5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[a5], __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_16;
}

char *sub_22F064F00(char **a1, int a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_22E3B3F8C();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_DWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = v13 + 16;
  if (v4 == v3)
  {
    v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_22F064FEC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  BOOL v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t __src;
  uint64_t v28[8];

  v28[7] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F0665E4(*(uint64_t **)(a1 + 464), *(_QWORD *)(a2 + 8));
  if ((v8 & 0xFF00000000) == 0)
    return;
  v9 = v8;
  if ((*(_DWORD *)a2 & 0x1C00) == 0x400
    || *(_DWORD *)a2 != 161
    || (v10 = *(_QWORD *)(a2 + 16),
        (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16) & 0xFE) == 0x28))
  {
LABEL_6:
    sub_22F3CC0B8((uint64_t)v28, a1, 0);
    v11 = sub_22F0653E4(a1, (_DWORD *)a2);
    sub_22F3CC2F0(v28);
    if (v11)
      a3(a4, v9);
    return;
  }
  if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x40)
  {
    if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      goto LABEL_6;
    v28[0] = 0;
    if (sub_22F28501C(*(_QWORD *)(a1 + 480), *(_DWORD *)(a1 + 496), v10, v28)
      && v28[0] != *(_QWORD *)(a1 + 480) + 24 * *(unsigned int *)(a1 + 496))
    {
      v24 = a2 | 4;
      v28[0] = a2 | 4;
      sub_22F3C8E44(a1, v9);
      if (!v25)
        return;
    }
    else
    {
      if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v10 + 97) & 0x80) != 0)
      {
        v14 = sub_22F071BC8(*(_QWORD *)(a1 + 472), v10);
      }
      else
      {
        if (sub_22E3CB5E0(v10))
        {
LABEL_22:
          if (*(_BYTE *)(a1 + 552) || !sub_22E3CB5E0(v10))
            goto LABEL_6;
          if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x40)
          {
            if ((*(_DWORD *)(v10 + 96) & 0x600u) - 1536 > 0xFFFFFBFF || *(_QWORD *)(v10 + 88) <= 7uLL)
              goto LABEL_6;
          }
          else if (*(_QWORD *)(v10 + 88) < 8uLL || (*(_BYTE *)(v10 + 97) & 0x80) != 0)
          {
            goto LABEL_6;
          }
          v15 = *(_QWORD *)(v10 + 48);
          v16 = v15 & 0xFFFFFFFFFFFFFFF0;
          if ((v15 & 1) != 0 || (*(_BYTE *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
          {
            v17 = *(_QWORD *)v16;
            v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0);
            v19 = *(_DWORD *)(v18 + 16) & 0xFF800FF;
            v20 = v19 == 86507531 || v19 == 114294795;
            v21 = v20;
            if (v18 && v21
              || sub_22F110E9C(v17) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44)
            {
              v22 = (_DWORD *)sub_22EFBC5B4(v10);
              sub_22F0653E4(a1, v22);
              return;
            }
          }
          goto LABEL_6;
        }
        v12 = *(_QWORD *)(a1 + 472);
        v13 = *(_DWORD *)(v12 + 320) + 1;
        *(_DWORD *)(v12 + 320) = v13;
        *(_DWORD *)(v12 + 324) = v13;
        v14 = sub_22F3E0BFC(v12, v10);
        *(_DWORD *)(v12 + 324) = -1;
      }
      if ((v14 & 0xFF00000000) == 0)
        goto LABEL_22;
      v24 = a2 | 4;
      v28[0] = a2 | 4;
      sub_22F3C8D70(a1, v9);
      if (!v26)
        return;
    }
    if (*(_BYTE *)(a1 + 552))
    {
      v28[0] = v24;
      sub_22F3C9114((_QWORD *)a1, v9, v28);
    }
    return;
  }
  __src = *(_QWORD *)(a2 + 16);
  v28[0] = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 8), &__src, v28)
    || v28[0] == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    if ((_DWORD)v9 != 9 || *(_BYTE *)(a1 + 552))
      goto LABEL_6;
    v23 = sub_22F3E0C94(*(_QWORD *)(a1 + 472), v10);
    if ((v23 & 0xFF00000000) != 0)
    {
      v28[0] = v10 & 0xFFFFFFFFFFFFFFFBLL;
      LODWORD(__src) = v23;
      sub_22F3C861C(a1, 123, (char *)&__src, v28);
    }
  }
  else if (!*(_BYTE *)(a1 + 552))
  {
    v28[0] = a2 | 4;
    sub_22F3C8F18(a1, v9);
  }
}

uint64_t sub_22F0653E4(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)a2;
  if (!a2 || (v2 & 0xFE) != 0x70)
  {
    if (a2 && v2 == 233)
    {
      if ((*a2 & 0x780000u) < 0x380000)
        return 0;
      v2 = *a2;
    }
    return ((uint64_t (*)(void))((char *)&loc_22F06544C + 4 * byte_22F4A527E[v2 - 1]))();
  }
  switch((*a2 >> 18) & 0x3F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
      result = sub_22F3CA00C(a1, (uint64_t)a2);
      break;
    default:
      v2 = *a2;
      return ((uint64_t (*)(void))((char *)&loc_22F06544C + 4 * byte_22F4A527E[v2 - 1]))();
  }
  return result;
}

uint64_t sub_22F065480(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v5 = 0;
  v6 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = 0;
  if ((*a2 & 2) == 0 && v6)
  {
    if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 48 > 0x1A)
    {
      v5 = 0;
      v7 = 0;
    }
    else
    {
      v5 = *(_QWORD *)(v6 + 48);
      v7 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
    }
  }
  v8 = v6 & ((uint64_t)(*a2 << 62) >> 63);
  if (v8)
    v5 = *(_QWORD *)(v8 + 8);
  v9 = *(uint64_t ***)(a1 + 472);
  if ((v5 & 1) != 0)
    v10 = 1;
  else
    v10 = *(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
  result = sub_22F071DF4(v9, a2, *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0), v10, v8 != 0, 0);
  if (result)
  {
    v12 = (*(_DWORD *)(a1 + 356) + 32);
    *(_DWORD *)(a1 + 356) = ((*(_DWORD *)(result + 16) + 7) & 0xFFFFFFF8) + v12;
    *(_QWORD *)&v17 = v12;
    *((_QWORD *)&v17 + 1) = result;
    if (v7)
    {
      v15 = v7;
      v16 = v17;
      sub_22F3CC5E0((uint64_t)&v14, a1 + 480, (uint64_t *)&v15, &v16);
    }
    v13 = 16;
    if (a3)
      v13 = 24;
    (*(void (**)(void))(**(_QWORD **)(a1 + 528) + v13))();
    return v17 | 0x100000000;
  }
  return result;
}

void sub_22F0655AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28[8];

  v28[7] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F0665E4(*(uint64_t **)(a1 + 504), *(_QWORD *)(a2 + 8));
  if ((v8 & 0xFF00000000) == 0)
    return;
  v9 = v8;
  if ((*(_DWORD *)a2 & 0x1C00) == 0x400
    || *(_DWORD *)a2 != 161
    || (v10 = *(_QWORD *)(a2 + 16),
        (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16) & 0xFE) == 0x28))
  {
LABEL_6:
    sub_22F3CC7A8((uint64_t)v28, a1, 0);
    sub_22F0659AC(a1, (_DWORD *)a2);
    v12 = v11;
    sub_22F3CC88C(v28);
    if (v12)
      a3(a4, v9);
    return;
  }
  if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x40)
  {
    if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      goto LABEL_6;
    v28[0] = 0;
    if (sub_22F28501C(*(_QWORD *)(a1 + 520), *(_DWORD *)(a1 + 536), v10, v28)
      && v28[0] != *(_QWORD *)(a1 + 520) + 24 * *(unsigned int *)(a1 + 536))
    {
      v22 = a2 | 4;
      v28[0] = a2 | 4;
      if (!sub_22F3D00A0(a1, v9))
        return;
    }
    else
    {
      if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v10 + 97) & 0x80) != 0)
      {
        v21 = sub_22F071BC8(*(_QWORD *)(a1 + 512), v10);
      }
      else
      {
        if (sub_22E3CB5E0(v10))
        {
LABEL_19:
          if (*(_BYTE *)(a1 + 592) || !sub_22E3CB5E0(v10))
            goto LABEL_6;
          if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x40)
          {
            if ((*(_DWORD *)(v10 + 96) & 0x600u) - 1536 > 0xFFFFFBFF || *(_QWORD *)(v10 + 88) <= 7uLL)
              goto LABEL_6;
          }
          else if (*(_QWORD *)(v10 + 88) < 8uLL || (*(_BYTE *)(v10 + 97) & 0x80) != 0)
          {
            goto LABEL_6;
          }
          v13 = *(_QWORD *)(v10 + 48);
          v14 = v13 & 0xFFFFFFFFFFFFFFF0;
          if ((v13 & 1) != 0 || (*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
          {
            v15 = *(_QWORD *)v14;
            v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0);
            v17 = *(_DWORD *)(v16 + 16) & 0xFF800FF;
            v18 = v17 == 86507531 || v17 == 114294795;
            v19 = v18;
            if (v16 && v19
              || sub_22F110E9C(v15) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44)
            {
              v20 = (_DWORD *)sub_22EFBC5B4(v10);
              sub_22F0659AC(a1, v20);
              return;
            }
          }
          goto LABEL_6;
        }
        v25 = *(_QWORD *)(a1 + 512);
        v26 = *(_DWORD *)(v25 + 320) + 1;
        *(_DWORD *)(v25 + 320) = v26;
        *(_DWORD *)(v25 + 324) = v26;
        v21 = sub_22F3E0BFC(v25, v10);
        *(_DWORD *)(v25 + 324) = -1;
      }
      if ((v21 & 0xFF00000000) == 0)
        goto LABEL_19;
      v22 = a2 | 4;
      v28[0] = a2 | 4;
      sub_22F3CFED8(a1, v9);
      if (!v23)
        return;
    }
    if (*(_BYTE *)(a1 + 592))
    {
      v28[0] = v22;
      sub_22F3D5EF0(a1, v9);
    }
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28[0] = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 8), &v27, v28)
    || v28[0] == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    if ((_DWORD)v9 != 9 || *(_BYTE *)(a1 + 592))
      goto LABEL_6;
    v24 = sub_22F3E0C94(*(_QWORD *)(a1 + 512), v10);
    if ((v24 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
    {
      *(_QWORD *)(a1 + 480) = v10 & 0xFFFFFFFFFFFFFFFBLL;
      sub_22F3D0844(a1 + 352, *(_QWORD *)(a1 + 464), v24);
    }
  }
  else if (!*(_BYTE *)(a1 + 592))
  {
    v28[0] = a2 | 4;
    sub_22F3D0134(a1, v9);
  }
}

void sub_22F0659AC(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (!a2 || (v2 & 0xFE) != 0x70)
  {
    if (a2 && v2 == 233)
    {
      if ((*a2 & 0x780000u) < 0x380000)
        return;
      v2 = *a2;
    }
LABEL_9:
    ((void (*)(void))((char *)&loc_22F065A14 + 4 * byte_22F4A53A2[v2 - 1]))();
    return;
  }
  switch((*a2 >> 18) & 0x3F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
      sub_22F3CB0EC(a1, (uint64_t)a2);
      break;
    default:
      v2 = *a2;
      goto LABEL_9;
  }
}

uint64_t sub_22F065A48(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 28))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v4 + 40);
    *(_BYTE *)(a1 + 28) = 1;
    v5 = *(_DWORD *)(v4 + 40);
    if (v5 >= *(_DWORD *)(v4 + 44))
    {
      sub_22F3CBBD4(v4 + 32);
    }
    else
    {
      v6 = (_QWORD *)(*(_QWORD *)(v4 + 32) + 144 * v5);
      *v6 = v6 + 2;
      v6[1] = 0x800000000;
      ++*(_DWORD *)(v4 + 40);
    }
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 144 * *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(result + 8);
  if (v8 >= *(_DWORD *)(result + 12))
    return sub_22F065B10(result, a2);
  *(_OWORD *)(*(_QWORD *)result + 16 * v8) = *a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22F065B10(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  unsigned int v4;
  unsigned int v5;
  __int128 v7;

  v3 = *a2;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = *a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v7;
    v4 = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v4) = v3;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 16 * v5 - 16;
}

uint64_t sub_22F065B88(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 28))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v4 + 40);
    *(_BYTE *)(a1 + 28) = 1;
    v5 = *(_DWORD *)(v4 + 40);
    if (v5 >= *(_DWORD *)(v4 + 44))
    {
      sub_22F3CBBD4(v4 + 32);
    }
    else
    {
      v6 = (_QWORD *)(*(_QWORD *)(v4 + 32) + 144 * v5);
      *v6 = v6 + 2;
      v6[1] = 0x800000000;
      ++*(_DWORD *)(v4 + 40);
    }
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 144 * *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(result + 8);
  if (v8 >= *(_DWORD *)(result + 12))
    return sub_22F065B10(result, a2);
  *(_OWORD *)(*(_QWORD *)result + 16 * v8) = *a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_22F065C50(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24FAC5F30;
  sub_22F065CAC(a1 + 440);
  sub_22F3E05B0(a1 + 352);
  sub_22F340364((char **)(a1 + 32));
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

uint64_t sub_22F065CAC(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          MEMORY[0x2348A0E84](v6, 0x1000C8077774924);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v7 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, v7);
  return a1;
}

uint64_t sub_22F065D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  *(_QWORD *)(a1 + 600) = sub_22F0665E4(*(uint64_t **)(a1 + 464), *(_QWORD *)(v4 + 24));
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if (*(_BYTE *)(a1 + 364))
    {
      return 0;
    }
    else
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      result = 0;
      *(_DWORD *)(a1 + 360) = v13;
      *(_BYTE *)(a1 + 364) = 1;
    }
  }
  else
  {
    v6 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    if (!v6 || (result = sub_22F065E8C((int32x2_t *)a1, v6), (_DWORD)result))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v8)
        v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
      else
        v9 = 0;
      if (!v9)
        v8 = sub_22F10CF48(v8);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v10)
        v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531;
      else
        v11 = 0;
      v14 = 0;
      if (v11)
        v12 = 324;
      else
        v12 = 301;
      return sub_22F064954((_QWORD *)a1, v12, &v14);
    }
  }
  return result;
}

uint64_t sub_22F065E8C(int32x2_t *a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t result;
  __int32 v5;
  __int32 v6;

  v3 = *(unsigned __int8 *)a2;
  if (v3 <= 0xF)
  {
    if (v3 == 12)
      return sub_22F065F70((uint64_t)a1, (uint64_t)a2);
    if (v3 == 8)
      return sub_22F3CCA24((uint64_t)a1, a2);
  }
  else
  {
    switch(v3)
    {
      case 0x13u:
        return 1;
      case 0x10u:
        return sub_22F3CCCA0(a1, (unsigned __int16 *)a2);
      case 0x5Du:
        return sub_22F3CCAF8((uint64_t)a1, (uint64_t)a2);
    }
  }
  if ((v3 + 21) >= 0x7Bu)
    return sub_22F3C9C2C((uint64_t)a1, a2);
  if (a1[45].i8[4])
    return 0;
  sub_22F0D5A50((uint64_t)a2);
  v6 = v5;
  result = 0;
  a1[45].i32[0] = v6;
  a1[45].i8[4] = 1;
  return result;
}

uint64_t sub_22F065F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  int v10;

  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = (uint64_t *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v5 = &v4[*(unsigned int *)(v3 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v3)
      v4 = (uint64_t *)(a2 + 8);
    else
      v4 = 0;
    if (v3)
      v5 = (uint64_t *)(a2 + 16);
    else
      v5 = 0;
  }
  while (1)
  {
    if (v4 == v5)
      return 1;
    v6 = *v4;
    if (!*v4 || (*(_DWORD *)(*v4 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      break;
    sub_22F3CCF68(a1, v6);
    if ((v8 & 1) == 0)
      return 0;
LABEL_16:
    ++v4;
  }
  if (!v6 || (*(_DWORD *)(*v4 + 28) & 0x7F) != 0x3D)
    goto LABEL_16;
  if (*(_BYTE *)(a1 + 364))
    return 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(*v4);
  result = 0;
  *(_DWORD *)(a1 + 360) = v10;
  *(_BYTE *)(a1 + 364) = 1;
  return result;
}

uint64_t sub_22F066044(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24FAC6058;
  v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(_QWORD *)(a1 + 448) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 416);
  if (v3)
  {
    *(_QWORD *)(a1 + 424) = v3;
    operator delete(v3);
  }
  sub_22F0660CC(a1 + 392);
  llvm::deallocate_buffer(*(llvm **)(a1 + 368), (void *)(8 * *(unsigned int *)(a1 + 384)));
  sub_22F340364((char **)(a1 + 32));
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

uint64_t sub_22F0660CC(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 48 * v2;
    v5 = (char *)v3 + 24;
    do
    {
      if (*((_DWORD *)v5 - 6) <= 0xFFFFFFFD)
      {
        v6 = (char *)*((_QWORD *)v5 - 2);
        if (v5 != v6)
          free(v6);
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v7 = 48 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v7);
  return a1;
}

uint64_t sub_22F066154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;
  int **v10;
  int **v11;
  char *v12;
  int *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[39];
  char v23;
  char v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  __int128 v47;
  int v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _BYTE *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = (_BYTE *)sub_22F3E0F44(*(_QWORD *)(a1 + 24), a3);
  if (!v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v18 = 0u;
    v19 = 0;
    v20 = v22;
    v21 = 0x200000000;
    v22[36] = a1;
    v22[37] = v9;
    v24 = 0;
    v22[38] = 0;
    v23 = 0;
    v25 = 0u;
    v26 = 0;
    v27 = 0u;
    v28 = 0;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = a1;
    v33 = v9;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v35 = 0;
    v34 = 0u;
    v36 = 0u;
    v37 = 0;
    v42 = 0u;
    v43 = 0u;
    v44 = 0;
    v17 = (char *)&unk_24FAC6020;
    v45 = 0;
    v46 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v48 = 0;
    v47 = 0u;
    sub_22F064270((uint64_t)&v17, a3, (uint64_t)&v55);
    sub_22F3CD138((uint64_t)&v17);
    v6 = v55;
    if ((v56 & 1) != 0)
    {
      v55 = 0;
      if (v6)
      {
        if ((*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)v6 + 48))(v6, MEMORY[0x24BED7780]))
        {
          v10 = (int **)*((_QWORD *)v6 + 1);
          v11 = (int **)*((_QWORD *)v6 + 2);
          if (v10 != v11)
          {
            v12 = 0;
            do
            {
              v16 = v12;
              v13 = *v10;
              *v10 = 0;
              if ((*(unsigned int (**)(int *, void *))(*(_QWORD *)v13 + 48))(v13, &unk_255E04EB2))
              {
                sub_22F072828(a2, v13[2], 2129, 0, 0);
                (*(void (**)(int *))(*(_QWORD *)v13 + 8))(v13);
                v13 = 0;
              }
              v15 = (char *)v13;
              sub_22F2436E4(&v16, &v15, &v17);
              v12 = v17;
              v17 = 0;
              if (v15)
                (*(void (**)(char *))(*(_QWORD *)v15 + 8))(v15);
              if (v16)
                (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
              ++v10;
            }
            while (v10 != v11);
          }
          goto LABEL_22;
        }
        if ((*(unsigned int (**)(_BYTE *, void *))(*(_QWORD *)v6 + 48))(v6, &unk_255E04EB2))
        {
          sub_22F072828(a2, *((_DWORD *)v6 + 2), 2129, 0, 0);
LABEL_22:
          (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      if ((v56 & 1) != 0)
      {
        v14 = v55;
        v55 = 0;
        if (v14)
          (*(void (**)(_BYTE *))(*(_QWORD *)v14 + 8))(v14);
      }
      return 0;
    }
  }
  if (!v6[456])
    return 0;
  LODWORD(v17) = 0;
  v7 = sub_22F3CD444(a1, a2, (uint64_t)v6);
  if (v17 >= 2)
    sub_22EF53BC0((uint64_t *)&v17);
  return v7;
}

BOOL sub_22F06646C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int ***v4;
  int **v6;
  int **v7;
  char *v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;

  if ((a3[8] & 1) == 0)
    return *a3 != 0;
  v4 = *(int ****)a3;
  *(_QWORD *)a3 = 0;
  if (v4)
  {
    if (((unsigned int (*)(int ***, _QWORD))(*v4)[6])(v4, MEMORY[0x24BED7780]))
    {
      v6 = v4[1];
      v7 = v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v11 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(int *, void *))(*(_QWORD *)v9 + 48))(v9, &unk_255E04EB2))
          {
            sub_22F072828(a2, v9[2], 2129, 0, 0);
            (*(void (**)(int *))(*(_QWORD *)v9 + 8))(v9);
            v9 = 0;
          }
          v10 = (char *)v9;
          sub_22F2436E4(&v11, &v10, &v12);
          v8 = v12;
          v12 = 0;
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          ++v6;
        }
        while (v6 != v7);
      }
      goto LABEL_17;
    }
    if (((unsigned int (*)(int ***, void *))(*v4)[6])(v4, &unk_255E04EB2))
    {
      sub_22F072828(a2, *((_DWORD *)v4 + 2), 2129, 0, 0);
LABEL_17:
      ((void (*)(int ***))(*v4)[1])(v4);
    }
  }
  return 0;
}

uint64_t sub_22F0665E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  signed int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = 0;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = 0x100000000;
  v7 = 9;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x530000B)
    {
      v3 = 0;
      v6 = 0x100000000;
      v7 = 8;
      return v7 | v6 | v3;
    }
    if (sub_22F110A40(v5))
    {
      HIDWORD(v10) = sub_22EF6A330(*a1, a2);
      LODWORD(v10) = HIDWORD(v10) - 8;
      v9 = v10 >> 3;
      if (v9 < 8)
      {
        v3 = 0;
        v6 = qword_22F4A54E8[v9];
        v11 = &unk_22F4A54A8;
LABEL_11:
        v7 = v11[v9];
        return v7 | v6 | v3;
      }
    }
    else if (sub_22F110C5C(*v4))
    {
      HIDWORD(v12) = sub_22EF6A330(*a1, a2);
      LODWORD(v12) = HIDWORD(v12) - 8;
      v9 = v12 >> 3;
      if (v9 < 8)
      {
        v3 = 0;
        v6 = qword_22F4A54E8[v9];
        v11 = &unk_22F4A5528;
        goto LABEL_11;
      }
    }
    else
    {
      v13 = *v4;
      v14 = *(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v14)
        v15 = (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 114294795;
      else
        v15 = 0;
      if (v15)
      {
        v3 = 0;
        v6 = 0x100000000;
        v7 = 9;
        return v7 | v6 | v3;
      }
      if (*(_BYTE *)(v13 + 16) == 6)
      {
        v16 = sub_22F0665E4(a1, *(_QWORD *)(v13 + 32));
        v3 = v16 & 0xFFFFFF00;
        v7 = v16;
        v6 = v16 & 0x100000000;
        return v7 | v6 | v3;
      }
    }
    v6 = 0;
    v7 = 0;
    v3 = 0;
  }
  return v7 | v6 | v3;
}

uint64_t sub_22F066774(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      v6 = sub_22F3C96C4(result);
      result = MEMORY[0x2348A0E9C](v6, 0x10F0C4041095D91);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_22F0667E0(uint64_t result, uint64_t a2, char a3, char a4, int a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v8;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  char v22;
  uint64_t (*v23)(uint64_t, uint64_t);

  v6 = *(_DWORD *)(a6 + 12);
  if (v6 != -1)
  {
    v8 = *(_DWORD *)(a6 + 8);
    if (v8 <= v6)
    {
      v12 = result;
      v13 = *(_DWORD *)(*(_QWORD *)(a6 + 32) + 16) + 16;
      if (a5)
        v14 = 10;
      else
        v14 = 2;
      v15 = 16;
      v16 = v6 / v8;
      do
      {
        v17 = a2 + (v15 - 16);
        v18 = *(_QWORD *)(a6 + 32);
        *(_DWORD *)v17 = v15;
        *(_QWORD *)(v17 + 8) = v18;
        v19 = *(_BYTE *)(v17 + 4) & 0xF1 | v14;
        *(_BYTE *)(v17 + 4) = v19;
        v20 = (a3 & 1) != 0 || *(_BYTE *)(a6 + 40) != 0;
        v21 = v19 & 0xFA | v20;
        *(_BYTE *)(v17 + 4) = v21;
        if ((a4 & 1) != 0 || (v22 = *(_BYTE *)(a6 + 41)) != 0)
          v22 = 16;
        *(_BYTE *)(v17 + 4) = v22 | v21 & 0xEB;
        v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 + 32) + 48);
        if (v23)
          result = v23(v12, v17 + 16);
        v15 += v13;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t sub_22F066910(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3 = *(_DWORD *)(a3 + 12);
  if (v3 != -1)
  {
    v5 = *(_DWORD *)(a3 + 8);
    if (v5 <= v3)
    {
      v6 = result;
      v7 = 0;
      v8 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 16) + 16;
      v9 = a2 + 16;
      v10 = v3 / v5;
      do
      {
        v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 32) + 56);
        if (v11)
          result = v11(v6, v9 + v7);
        v7 += v8;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t sub_22F066994(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t (*v15)(uint64_t, _OWORD *, _OWORD *);

  v4 = *(_DWORD *)(a4 + 12);
  if (v4 != -1)
  {
    v6 = *(_DWORD *)(a4 + 8);
    if (v6 <= v4)
    {
      v9 = result;
      v10 = 0;
      v11 = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 16) + 16;
      v12 = v4 / v6;
      do
      {
        v13 = (_OWORD *)(a2 + v10);
        v14 = (_OWORD *)(a3 + v10);
        *v14 = *v13;
        v15 = *(uint64_t (**)(uint64_t, _OWORD *, _OWORD *))(*(_QWORD *)(a4 + 32) + 64);
        if (v15)
          result = v15(v9, v13 + 1, v14 + 1);
        v10 += v11;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_22F066A38(uint64_t result, uint64_t a2, char a3, char a4, int a5, uint64_t a6)
{
  int v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  char v25;
  char v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  BOOL v39;
  char v40;
  char v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  char v54;
  char v55;
  uint64_t (*v56)(uint64_t);
  int v57;
  int v59;

  v6 = a5;
  v10 = result;
  v11 = *(_QWORD *)(a6 + 24);
  v12 = *(_DWORD *)(*(_QWORD *)v11 + 72) & 0xE000;
  v13 = *(unsigned int *)(v11 + 16);
  v59 = v12;
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v11 + 8);
    v15 = v12 == 0x4000;
    v16 = a5 ^ 1;
    if (v15)
      v16 = 1;
    if (v16)
      v17 = 4;
    else
      v17 = 12;
    v18 = 32 * v13;
    v19 = (uint64_t *)(v14 + 16);
    do
    {
      v20 = *((unsigned int *)v19 - 2);
      v21 = *v19;
      v22 = a2 + v20;
      *(_DWORD *)(v22 - 16) = v20;
      *(_QWORD *)(v22 - 8) = v21;
      v23 = *(_BYTE *)(a2 + v20 - 12) & 0xF1 | v17;
      *(_BYTE *)(v22 - 12) = v23;
      v24 = (a3 & 1) != 0 || *(_BYTE *)(v21 + 40) != 0;
      v25 = v23 & 0xFC | v24;
      *(_BYTE *)(v22 - 12) = v25;
      if ((a4 & 1) != 0)
        v26 = 16;
      else
        v26 = 16 * *(_BYTE *)(v21 + 41);
      *(_BYTE *)(v22 - 12) = v26 | v25 & 0xED;
      v27 = *(uint64_t (**)(uint64_t))(v21 + 48);
      if (v27)
        result = v27(v10);
      v19 += 4;
      v18 -= 32;
    }
    while (v18);
    v11 = *(_QWORD *)(a6 + 24);
    v12 = v59;
  }
  v28 = *(unsigned int *)(v11 + 288);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD *)(v11 + 280);
    v15 = v12 == 0x4000;
    v57 = v6;
    v30 = v6 ^ 1;
    if (v15)
      v30 = 1;
    if (v30)
      v31 = 0;
    else
      v31 = 8;
    v32 = 24 * v28;
    v33 = (uint64_t *)(v29 + 16);
    do
    {
      v34 = *((unsigned int *)v33 - 2);
      v35 = *v33;
      v36 = a2 + v34;
      *(_DWORD *)(v36 - 16) = v34;
      *(_QWORD *)(v36 - 8) = v35;
      if (*(_BYTE *)(v10 + 16) || (v37 = *(_BYTE *)(v35 + 43)) != 0)
        v37 = 2;
      v38 = v37 | v31 | *(_BYTE *)(v36 - 12) & 0xF1;
      *(_BYTE *)(v36 - 12) = v38;
      v39 = (a3 & 1) != 0 || *(_BYTE *)(v35 + 40) != 0;
      v40 = v38 & 0xFA | v39;
      *(_BYTE *)(v36 - 12) = v40;
      if ((a4 & 1) != 0)
        v41 = 16;
      else
        v41 = 16 * *(_BYTE *)(v35 + 41);
      *(_BYTE *)(v36 - 12) = v41 | v40 & 0xEB;
      v42 = *(uint64_t (**)(uint64_t))(v35 + 48);
      if (v42)
        result = v42(v10);
      v33 += 3;
      v32 -= 24;
    }
    while (v32);
    v11 = *(_QWORD *)(a6 + 24);
    v6 = v57;
    v12 = v59;
  }
  v43 = *(unsigned int *)(v11 + 496);
  if ((_DWORD)v43)
  {
    v44 = *(_QWORD *)(v11 + 488);
    v15 = v12 == 0x4000;
    v45 = v6 ^ 1;
    if (v15)
      v45 = 1;
    if (v45)
      v46 = 4;
    else
      v46 = 12;
    v47 = 32 * v43;
    v48 = (uint64_t *)(v44 + 16);
    do
    {
      v49 = *((unsigned int *)v48 - 2);
      v50 = *v48;
      v51 = a2 + v49;
      *(_DWORD *)(v51 - 16) = v49;
      *(_QWORD *)(v51 - 8) = v50;
      v52 = *(_BYTE *)(a2 + v49 - 12) & 0xF1 | v46;
      *(_BYTE *)(v51 - 12) = v52;
      v53 = (a3 & 1) != 0 || *(_BYTE *)(v50 + 40) != 0;
      v54 = v52 & 0xFC | v53;
      *(_BYTE *)(v51 - 12) = v54;
      if ((a4 & 1) != 0)
        v55 = 16;
      else
        v55 = 16 * *(_BYTE *)(v50 + 41);
      *(_BYTE *)(v51 - 12) = v55 | v54 & 0xED;
      v56 = *(uint64_t (**)(uint64_t))(v50 + 48);
      if (v56)
        result = v56(v10);
      v48 += 4;
      v47 -= 32;
    }
    while (v47);
  }
  return result;
}

uint64_t sub_22F066D38(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  v5 = result;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(unsigned int *)(v6 + 16);
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = *(_QWORD *)(v6 + 8) + 16;
    do
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 56);
      if (v10)
        result = v10(v5, a2 + *(unsigned int *)(v9 - 8));
      v9 += 32;
      v8 -= 32;
    }
    while (v8);
    v6 = *(_QWORD *)(a3 + 24);
  }
  v11 = *(unsigned int *)(v6 + 288);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = *(_QWORD *)(v6 + 280) + 16;
    do
    {
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 56);
      if (v14)
        result = v14(v5, a2 + *(unsigned int *)(v13 - 8));
      v13 += 24;
      v12 -= 24;
    }
    while (v12);
    v6 = *(_QWORD *)(a3 + 24);
  }
  v15 = *(unsigned int *)(v6 + 496);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v6 + 488) + 16;
    do
    {
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 56);
      if (v18)
        result = v18(v5, a2 + *(unsigned int *)(v17 - 8));
      v17 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_22F066E30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(a4 + 24);
  v5 = *(unsigned int *)(v4 + 288);
  if ((_DWORD)v5)
  {
    v8 = result;
    v9 = 24 * v5;
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 280) + 16);
    do
    {
      v11 = *((unsigned int *)v10 - 2);
      v12 = *v10;
      *(_QWORD *)(a3 + v11 - 8) = *v10;
      v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 64);
      if (v13)
        result = v13(v8, a2 + v11);
      v10 += 3;
      v9 -= 24;
    }
    while (v9);
  }
  return result;
}

_QWORD *sub_22F066EB0(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *result & 0xFFFFFFFFFFFFFFFCLL;
  if ((*result & 2) != 0 && v1)
  {
    v2 = v1 + 8;
    return *(_QWORD **)v2;
  }
  if ((*result & 2) == 0 && v1 && (*(_DWORD *)(v1 + 28) & 0x7Fu) - 48 <= 0x1A)
  {
    v2 = v1 + 48;
    return *(_QWORD **)v2;
  }
  return result;
}

void sub_22F066EF0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (((v1 & 2) != 0 || !v2) && (v1 & 2) != 0)
  {
    if (v2)
      sub_22EFF605C(v2);
  }
}

double sub_22F066F1C(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

_QWORD **sub_22F066F28(uint64_t a1, _QWORD **a2)
{
  return sub_22F3E08B8(a2);
}

uint64_t *sub_22F066F30(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_22F3E0878(a3, a2);
}

void sub_22F066F38(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *(_DWORD *)(a6 + 12);
  if (v6 != -1)
  {
    v7 = *(_DWORD *)(a6 + 8);
    if (v7 <= v6)
      bzero(a2, 32 * (v6 / v7));
  }
}

void sub_22F066F68(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;

  v3 = *(_DWORD *)(a3 + 12);
  if (v3 != -1)
  {
    v4 = *(_DWORD *)(a3 + 8);
    if (v4 <= v3)
    {
      v6 = v3 / v4;
      do
      {
        a2 = sub_22F3E08B8(a2) + 4;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_22F066FB0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v8;

  v4 = *(_DWORD *)(a4 + 12);
  if (v4 != -1)
  {
    v5 = *(_DWORD *)(a4 + 8);
    if (v5 <= v4)
    {
      v8 = v4 / v5;
      do
      {
        a3 = sub_22F3E0878(a3, a2) + 4;
        a2 += 4;
        --v8;
      }
      while (v8);
    }
  }
}

int *sub_22F067004(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 16 * v4);
    }
  }
  return (int *)(v2 + 16 * v3);
}

uint64_t sub_22F067078(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;

  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v2 = *(_QWORD *)(a1 + 32) + 144 * a2;
    v3 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD **)v2;
      v5 = (uint64_t *)(a1 + 440);
      v6 = a1 + 352;
      v7 = 16 * v3;
      do
      {
        v8 = sub_22F067004(v5, v4);
        sub_22F3E0684(v6, *((_QWORD **)v8 + 1));
        v4 += 4;
        v7 -= 16;
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22F0670F4(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v4 = *((_QWORD *)sub_22F067004((uint64_t *)(a1 + 440), &v5) + 1);
    *(_BYTE *)sub_22F3E03F8(*(_QWORD *)(a1 + 400), 8) = *(_BYTE *)(v4 + 32);
  }
  return 1;
}

uint64_t sub_22F067158(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v4 = *((_QWORD *)sub_22F067004((uint64_t *)(a1 + 440), &v5) + 1);
    *(_WORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 400), 8) = *(_WORD *)(v4 + 32);
  }
  return 1;
}

uint64_t sub_22F0671BC(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v4 = *((_QWORD *)sub_22F067004((uint64_t *)(a1 + 440), &v5) + 1);
    *(_DWORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 400), 8) = *(_DWORD *)(v4 + 32);
  }
  return 1;
}

uint64_t sub_22F067220(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;

  v5 = a2;
  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v4 = *((_QWORD *)sub_22F067004((uint64_t *)(a1 + 440), &v5) + 1);
    *sub_22F3E03F8(*(_QWORD *)(a1 + 400), 8) = *(_QWORD *)(v4 + 32);
  }
  return 1;
}

uint64_t sub_22F067284(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;

  v8 = a2;
  if (*(_DWORD *)(a1 + 492) == *(_DWORD *)(a1 + 496))
  {
    v4 = *((_QWORD *)sub_22F067004((uint64_t *)(a1 + 440), &v8) + 1);
    v5 = *(_QWORD *)(a1 + 400);
    v6 = (uint64_t **)(v4 + 32);
    v7 = (uint64_t **)sub_22F3E03F8(v5, 32);
    sub_22F3E083C(v7, v6);
  }
  return 1;
}

BOOL sub_22F0672EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_BYTE *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 7)
        {
          if ((*(_DWORD *)&v9 & ((0x800000 << v22) >> 24)) != 0)
            v23 = 255 << v22;
          else
            LOBYTE(v23) = 0;
          v9 = v23 | v9 & ~(-1 << v22);
        }
        v17 = *(_QWORD *)v14;
      }
    }
    *(_BYTE *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F067470(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_BYTE *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 7)
          v23 = ~(-1 << v22);
        else
          LOBYTE(v23) = -1;
        v9 &= v23;
        v17 = *(_QWORD *)v14;
      }
    }
    *(_BYTE *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F0675D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_WORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 0xF)
        {
          if ((*(_DWORD *)&v9 & ((0x8000 << v22) >> 16)) != 0)
            v23 = 0xFFFF << v22;
          else
            LOWORD(v23) = 0;
          v9 = v23 | v9 & ~(-1 << v22);
        }
        v17 = *(_QWORD *)v14;
      }
    }
    *(_WORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F06775C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_WORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 0xF)
          v23 = ~(-1 << v22);
        else
          LOWORD(v23) = -1;
        v9 &= v23;
        v17 = *(_QWORD *)v14;
      }
    }
    *(_WORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F0678C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_DWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 0x1F)
          v9 = ((int)(v9 >> (v22 - 1) << 31) >> 31) & (-1 << v22) | v9 & ~(-1 << v22);
        v17 = *(_QWORD *)v14;
      }
    }
    *(_DWORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F067A40(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_DWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 0x1F)
          v23 = ~(-1 << v22);
        else
          v23 = -1;
        v9 &= v23;
        v17 = *(_QWORD *)v14;
      }
    }
    *(_DWORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F067BA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_QWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        if (v22 <= 0x3F)
          v9 = ((uint64_t)(v9 >> (v22 - 1) << 63) >> 63) & (-1 << v22) | v9 & ~(-1 << v22);
        v17 = *(_QWORD *)v14;
      }
    }
    *(_QWORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F067D24(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_QWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        v22 = sub_22EFC2EF4(v20, v21);
        v23 = -1;
        if (v22 <= 0x3F)
          v23 = ~(-1 << v22);
        v9 &= v23;
        v17 = *(_QWORD *)v14;
      }
    }
    *(_QWORD *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

BOOL sub_22F067E8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_BYTE *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v10 = **(_QWORD **)(a1 + 48);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 - v10 - 24;
  v13 = 32;
  if (v12 <= 0x1F)
  {
    do
    {
      v13 -= v12;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = v11 - v10 - 24;
    }
    while (v13 > v12);
  }
  v14 = (unsigned int *)(v11 - v13);
  v15 = sub_22F07070C((uint64_t *)a1, a2, (unsigned int *)(v11 - v13));
  if (v15)
  {
    v16 = v14[2];
    v17 = *(_QWORD *)v14;
    if ((v16 + 1) > 1)
      v18 = (uint64_t **)(*(_QWORD *)v14 + v16 + 24);
    else
      v18 = (uint64_t **)(*(_QWORD *)v14 + 24);
    v19 = **v18;
    if ((v19 & 2) == 0)
    {
      v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v20 + 28) & 0x7Fu) - 49 <= 2)
      {
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
        sub_22EFC2EF4(v20, v21);
        v17 = *(_QWORD *)v14;
      }
    }
    *(_BYTE *)(v17 + v14[3] + 32) = v9;
  }
  return v15;
}

_DWORD *sub_22F067FE0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_22F0680D4(a1, (uint64_t)a2, a2, v14);
    *result = *a2;
    v15 = *a3;
    *a3 = 0;
    *((_QWORD *)result + 1) = v15;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  v10 = (37 * *a2) & (v8 - 1);
  result = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v16 = 0;
    v17 = 1;
    while (v12 != -1)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v12 == -2;
      if (v18)
        v16 = result;
      v19 = v10 + v17++;
      v10 = v19 & (v8 - 1);
      result = (_DWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v16)
      v14 = v16;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

_DWORD *sub_22F0680D4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22F068258(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22F068258(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_22F068258(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F068318(a1, v4, &v4[4 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F068318(uint64_t result, int *a2, int *a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v10 = *(_DWORD *)(v5 + 16) - 1;
        v11 = v10 & (37 * v9);
        v12 = *(_QWORD *)v5 + 16 * v11;
        v13 = *(_DWORD *)v12;
        if (v9 != *(_DWORD *)v12)
        {
          v15 = 0;
          v16 = 1;
          while (v13 != -1)
          {
            if (v15)
              v17 = 0;
            else
              v17 = v13 == -2;
            if (v17)
              v15 = v12;
            v18 = v11 + v16++;
            v11 = v18 & v10;
            v12 = *(_QWORD *)v5 + 16 * (v18 & v10);
            v13 = *(_DWORD *)v12;
            if (v9 == *(_DWORD *)v12)
              goto LABEL_7;
          }
          if (v15)
            v12 = v15;
        }
LABEL_7:
        *(_DWORD *)v12 = v9;
        v14 = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        *(_QWORD *)(v12 + 8) = v14;
        ++*(_DWORD *)(v5 + 8);
        result = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (result)
          result = MEMORY[0x2348A0E84](result, 0x1000C8077774924);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22F068448()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F06845C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FAC6090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22F068494(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAC6090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22F0684B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int *v70;
  _QWORD *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v7 = a1;
  v103 = *MEMORY[0x24BDAC8D0];
  v91 = *(_QWORD *)(a1 + 8);
  v8 = *a2 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
    v10 = *(_BYTE *)(*(_QWORD *)v8 + 16) == 6;
  else
    v10 = 0;
  if (v10
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6 && (v9 = sub_22F10CF48(v9)) != 0)
  {
    v8 = *(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v12 && v13 == 45)
  {
    v14 = *(unsigned int *)(a3 + 8);
    if ((v14 + 1) > 1)
      v15 = (uint64_t *)(*(_QWORD *)a3 + v14);
    else
      v15 = *(uint64_t **)a3;
    v19 = *(_QWORD *)(v15[3] + 24);
    if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v12 + 24)) + 72) & 0xE000) == 0x4000)
    {
      LODWORD(v98) = 0;
      v20 = *(unsigned int *)(v19 + 288);
      if (!(_DWORD)v20)
      {
LABEL_26:
        v25 = 1;
LABEL_27:
        *(_QWORD *)&v94 = 0;
        v26 = (_DWORD *)operator new();
        *v26 = 0;
        *((_QWORD *)&v94 + 1) = v26;
        LODWORD(v93) = 11;
        sub_22EF53A5C((uint64_t)&v93, 0, (uint64_t)&v98);
        if (*(_DWORD *)a4 >= 2u)
          sub_22EF53BC0((uint64_t *)a4);
        *(_DWORD *)a4 = (_DWORD)v93;
        v27 = v95;
        *(_OWORD *)(a4 + 8) = v94;
        *(_OWORD *)(a4 + 24) = v27;
        v28 = v97;
        *(_OWORD *)(a4 + 40) = v96;
        *(_OWORD *)(a4 + 56) = v28;
        if (v98 >= 2)
          sub_22EF53BC0((uint64_t *)&v98);
        LOBYTE(v4) = v25 != 0;
        return v4 & 1;
      }
      v21 = 24 * v20;
      v22 = (_DWORD *)(*(_QWORD *)(v19 + 280) + 8);
      while (1)
      {
        v23 = *(_DWORD *)(a3 + 12) + *v22;
        v93 = *(uint64_t **)a3;
        LODWORD(v94) = v23;
        DWORD1(v94) = v23;
        *((_QWORD *)&v94 + 1) = 0;
        *(_QWORD *)&v95 = 0;
        if (v93)
        {
          sub_22F3DFDF8(v93, (uint64_t)&v93);
          v23 = v94;
        }
        v24 = *(_QWORD *)(*((_QWORD *)v22 - 1) + 48);
        if (!v23 || (*((_BYTE *)v93 + v23 + 20) & 8) != 0)
          break;
        sub_22F3E08B8(&v93);
        v22 += 6;
        v21 -= 24;
        if (!v21)
          goto LABEL_26;
      }
      v65 = sub_22F0665E4(*(uint64_t **)(v91 + 336), v24);
      if ((v65 & 0xFF00000000) != 0)
      {
        switch((int)v65)
        {
          case 0:
            v68 = sub_22F3D95A8((unsigned __int8 *)v93 + DWORD1(v94) + 32, (uint64_t)&v98);
            goto LABEL_77;
          case 1:
            v68 = sub_22F3D9644((unsigned __int8 *)v93 + DWORD1(v94) + 32, (uint64_t)&v98);
            goto LABEL_77;
          case 2:
            v68 = sub_22F3D96E0((unsigned __int16 *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 3:
            v68 = sub_22F3D977C((unsigned __int16 *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 4:
            v68 = sub_22F3D9818((unsigned int *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 5:
            v68 = sub_22F3D98B4((unsigned int *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 6:
            v68 = sub_22F3D9950((uint64_t *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 7:
            v68 = sub_22F3D99EC((uint64_t *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          case 8:
            v68 = sub_22F3D9A88((unsigned __int8 *)v93 + DWORD1(v94) + 32, (uint64_t)&v98);
            goto LABEL_77;
          case 9:
            v68 = sub_22F3D9B24((unsigned int *)((char *)v93 + DWORD1(v94) + 32), (uint64_t)&v98);
            goto LABEL_77;
          default:
            v25 = 1;
            break;
        }
        goto LABEL_78;
      }
      v66 = *(_QWORD *)(v7 + 16);
      v92 = v24;
      v67 = *(_QWORD *)(v66 + 24);
      if (v67)
      {
        v68 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **, uint64_t **))(*(_QWORD *)v67 + 48))(v67, &v92, &v93, &v98);
LABEL_77:
        v25 = v68;
LABEL_78:
        sub_22F3E08B8(&v93);
        goto LABEL_27;
      }
    }
    else
    {
      v29 = *(unsigned int *)(v19 + 288);
      v30 = *(unsigned int *)(v19 + 16);
      v31 = *(unsigned int *)(a3 + 8);
      if ((v31 - 1) <= 0xFFFFFFFD && (*(_BYTE *)(*(_QWORD *)a3 + v31 + 20) & 4) != 0)
        v88 = 0;
      else
        v88 = *(_DWORD *)(v19 + 496);
      sub_22EF53024((uint64_t)&v99, v30, v29);
      v32 = 10;
      LODWORD(v98) = 10;
      if (*(_DWORD *)a4 >= 2u)
      {
        sub_22EF53BC0((uint64_t *)a4);
        v32 = (int)v98;
      }
      *(_DWORD *)a4 = v32;
      v33 = v100;
      *(_OWORD *)(a4 + 8) = v99;
      *(_OWORD *)(a4 + 24) = v33;
      v34 = v102;
      *(_OWORD *)(a4 + 40) = v101;
      v89 = a4;
      *(_OWORD *)(a4 + 56) = v34;
      if ((_DWORD)v29)
      {
        v35 = 0;
        v36 = 0;
        v4 = 1;
        do
        {
          v37 = v29;
          v38 = v19;
          v39 = (_DWORD *)(*(_QWORD *)(v19 + 280) + v35);
          v40 = *(uint64_t **)(*(_QWORD *)v39 + 48);
          LODWORD(v39) = *(_DWORD *)(a3 + 12) + v39[2];
          v98 = *(uint64_t **)a3;
          LODWORD(v99) = (_DWORD)v39;
          DWORD1(v99) = (_DWORD)v39;
          *((_QWORD *)&v99 + 1) = 0;
          *(_QWORD *)&v100 = 0;
          if (v98)
            sub_22F3DFDF8(v98, (uint64_t)&v98);
          v41 = *(_QWORD *)(v89 + 8) + 72 * (v36 + *(_DWORD *)(v89 + 16));
          v42 = sub_22F0665E4(*(uint64_t **)(v91 + 336), (uint64_t)v40);
          if ((v42 & 0xFF00000000) != 0)
          {
            v19 = v38;
            v29 = v37;
            switch((int)v42)
            {
              case 0:
                v45 = sub_22F3D95A8((unsigned __int8 *)v98 + DWORD1(v99) + 32, v41);
                break;
              case 1:
                v45 = sub_22F3D9644((unsigned __int8 *)v98 + DWORD1(v99) + 32, v41);
                break;
              case 2:
                v45 = sub_22F3D96E0((unsigned __int16 *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 3:
                v45 = sub_22F3D977C((unsigned __int16 *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 4:
                v45 = sub_22F3D9818((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 5:
                v45 = sub_22F3D98B4((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 6:
                v45 = sub_22F3D9950((uint64_t *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 7:
                v45 = sub_22F3D99EC((uint64_t *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              case 8:
                v45 = sub_22F3D9A88((unsigned __int8 *)v98 + DWORD1(v99) + 32, v41);
                break;
              case 9:
                v45 = sub_22F3D9B24((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v41);
                break;
              default:
                goto LABEL_45;
            }
            v4 &= v45;
          }
          else
          {
            v43 = *(_QWORD *)(v7 + 16);
            v93 = v40;
            v44 = *(_QWORD *)(v43 + 24);
            if (!v44)
              goto LABEL_123;
            v4 &= (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t **, uint64_t))(*(_QWORD *)v44 + 48))(v44, &v93, &v98, v41);
            v19 = v38;
LABEL_45:
            v29 = v37;
          }
          sub_22F3E08B8(&v98);
          ++v36;
          v35 += 24;
        }
        while (v29 != v36);
      }
      else
      {
        v4 = 1;
      }
      v46 = a3;
      v90 = (uint64_t *)(v89 + 8);
      if ((_DWORD)v30)
      {
        v47 = 0;
        v48 = 0;
        while (1)
        {
          v49 = v7;
          v50 = *(_QWORD *)(v19 + 8) + v48;
          v51 = (uint64_t *)sub_22EF6477C(**(_QWORD **)(v91 + 336), *(_QWORD *)v50);
          v52 = *(_DWORD *)(v46 + 12) + *(_DWORD *)(v50 + 8);
          v98 = *(uint64_t **)v46;
          LODWORD(v99) = v52;
          DWORD1(v99) = v52;
          *((_QWORD *)&v99 + 1) = 0;
          *(_QWORD *)&v100 = 0;
          if (v98)
            sub_22F3DFDF8(v98, (uint64_t)&v98);
          v53 = *(_QWORD *)(v49 + 16);
          v54 = *v90;
          v93 = v51;
          v55 = *(_QWORD *)(v53 + 24);
          if (!v55)
            break;
          v7 = v49;
          v4 &= (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t **, uint64_t))(*(_QWORD *)v55 + 48))(v55, &v93, &v98, v54 + v47);
          sub_22F3E08B8(&v98);
          v48 += 32;
          v47 += 72;
          if (32 * v30 == v48)
            goto LABEL_67;
        }
      }
      else
      {
LABEL_67:
        if (!v88)
          return v4 & 1;
        v56 = 0;
        while (1)
        {
          v57 = v7;
          v58 = *(_QWORD *)(v19 + 488) + v56;
          v59 = (uint64_t *)sub_22EF6477C(**(_QWORD **)(v91 + 336), *(_QWORD *)v58);
          v60 = *(_DWORD *)(v46 + 12) + *(_DWORD *)(v58 + 8);
          v98 = *(uint64_t **)v46;
          LODWORD(v99) = v60;
          DWORD1(v99) = v60;
          *((_QWORD *)&v99 + 1) = 0;
          *(_QWORD *)&v100 = 0;
          if (v98)
            sub_22F3DFDF8(v98, (uint64_t)&v98);
          v61 = *(_QWORD *)(v57 + 16);
          v62 = *v90;
          v93 = v59;
          v63 = *(_QWORD *)(v61 + 24);
          if (!v63)
            break;
          v7 = v57;
          v4 &= (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t **, uint64_t))(*(_QWORD *)v63 + 48))(v63, &v93, &v98, v62 + 72 * v30);
          sub_22F3E08B8(&v98);
          v56 += 32;
          LODWORD(v30) = v30 + 1;
          if (32 * v88 == v56)
            return v4 & 1;
        }
      }
    }
LABEL_123:
    sub_22E4A06C4();
    return v4 & 1;
  }
  if ((*(_DWORD *)(v11 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
  {
    if ((v13 & 0xFEu) - 2 > 3)
      return v4 & 1;
    v11 = sub_22F10CF48(v11);
    if (!v11)
      return v4 & 1;
  }
  v16 = *(unsigned int *)(a3 + 8);
  v17 = *(uint64_t **)a3;
  if ((v16 + 1) > 1)
    v18 = *(_QWORD *)a3 + v16 + 24;
  else
    v18 = *(_QWORD *)a3 + 24;
  v69 = *(_DWORD *)(*(_QWORD *)v18 + 12);
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == -1)
    {
      v70 = (unsigned int *)(v17[3] + 12);
      goto LABEL_98;
    }
    v71 = (uint64_t *)((char *)v17 + v16 + 24);
  }
  else
  {
    v71 = v17 + 3;
  }
  v70 = (unsigned int *)(*v71 + 8);
LABEL_98:
  v72 = *v70;
  v73 = *(_QWORD *)(v11 + 32);
  LODWORD(v74) = v69 / v72;
  sub_22EF52F1C((uint64_t)&v99, v69 / v72, v69 / v72);
  v75 = 9;
  LODWORD(v98) = 9;
  if (*(_DWORD *)a4 >= 2u)
  {
    sub_22EF53BC0((uint64_t *)a4);
    v75 = (int)v98;
  }
  *(_DWORD *)a4 = v75;
  v76 = v100;
  *(_OWORD *)(a4 + 8) = v99;
  *(_OWORD *)(a4 + 24) = v76;
  v77 = v102;
  *(_OWORD *)(a4 + 40) = v101;
  *(_OWORD *)(a4 + 56) = v77;
  if (v72 <= v69)
  {
    v78 = a3;
    v79 = 0;
    v80 = 0;
    v81 = (_QWORD *)(a4 + 8);
    if (v74 <= 1)
      v74 = 1;
    else
      v74 = v74;
    v4 = 1;
    do
    {
      v82 = *v81 + v79;
      sub_22F3D9BC0(v78, v80, (uint64_t)&v98);
      v83 = sub_22F0665E4(*(uint64_t **)(v91 + 336), v73);
      if ((v83 & 0xFF00000000) != 0)
      {
        switch((int)v83)
        {
          case 0:
            v87 = sub_22F3D95A8((unsigned __int8 *)v98 + DWORD1(v99) + 32, v82);
            goto LABEL_120;
          case 1:
            v87 = sub_22F3D9644((unsigned __int8 *)v98 + DWORD1(v99) + 32, v82);
            goto LABEL_120;
          case 2:
            v87 = sub_22F3D96E0((unsigned __int16 *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 3:
            v87 = sub_22F3D977C((unsigned __int16 *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 4:
            v87 = sub_22F3D9818((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 5:
            v87 = sub_22F3D98B4((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 6:
            v87 = sub_22F3D9950((uint64_t *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 7:
            v87 = sub_22F3D99EC((uint64_t *)((char *)v98 + DWORD1(v99) + 32), v82);
            goto LABEL_120;
          case 8:
            v87 = sub_22F3D9A88((unsigned __int8 *)v98 + DWORD1(v99) + 32, v82);
            goto LABEL_120;
          case 9:
            v87 = sub_22F3D9B24((unsigned int *)((char *)v98 + DWORD1(v99) + 32), v82);
LABEL_120:
            v4 &= v87;
            break;
          default:
            break;
        }
      }
      else
      {
        v84 = v7;
        v85 = *(_QWORD *)(v7 + 16);
        sub_22F3D93BC((uint64_t)&v98, (uint64_t)&v93);
        v92 = v73;
        v86 = *(_QWORD *)(v85 + 24);
        if (!v86)
          goto LABEL_123;
        v4 &= (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **, uint64_t))(*(_QWORD *)v86 + 48))(v86, &v92, &v93, v82);
        sub_22F3E08B8(&v93);
        v7 = v84;
      }
      sub_22F3E08B8(&v98);
      ++v80;
      v79 += 72;
    }
    while (v74 != v80);
  }
  else
  {
    LOBYTE(v4) = 1;
  }
  return v4 & 1;
}

uint64_t sub_22F068FE0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 8;
  v4 = v2;
  v6 = 0;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F069040@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 8;
  v4 = v2;
  v6 = 1;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F0690A4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 16;
  v4 = v2;
  v6 = 0;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F069104@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 16;
  v4 = v2;
  v6 = 1;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F069168@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 32;
  v4 = v2;
  v6 = 0;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F0691C8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 32;
  v4 = v2;
  v6 = 1;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F06922C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 64;
  v4 = v2;
  v6 = 0;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F06928C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 64;
  v4 = v2;
  v6 = 1;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F0692F0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v2 = *a1;
  v5 = 1;
  v4 = v2;
  v6 = 1;
  result = sub_22F2C4748(a2, &v4);
  if (v5 >= 0x41)
  {
    result = v4;
    if (v4)
      return MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F069350(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  void *v31;
  __int128 v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v8 = (char)*a4 + (char)*a5;
  *(_BYTE *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8;
  if (v8 == (char)v8)
    return 1;
  sub_22F3D9C48(a4, (uint64_t)&v31);
  sub_22F3D9C48(a5, (uint64_t)&v23);
  sub_22E4EBD50((llvm::APInt *)&v31, (uint64_t)&v28);
  if (v24 >= 0x41 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  if (v32 >= 0x41 && v31)
    MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v31 = v33;
    v32 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v28);
    v26 = v24;
    v25 = v23;
    v27 = v30;
    llvm::APInt::toString();
    if (v26 >= 0x41 && v25)
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
    sub_22EFF605C(v12);
    sub_22F3E1414(a1, v14, 2337, (uint64_t)&v23);
    sub_22E3B89A8(&v23, v31, v32);
    v15 = v23;
    if (!v23)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v24);
      v23 = v15;
    }
    v15[*v15 + 1] = 9;
    v16 = v23;
    v17 = *v23;
    *v23 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = v13;
    sub_22E3BB0B8((uint64_t)&v23);
    if (v31 != v33)
      free(v31);
    v9 = 1;
  }
  else
  {
    sub_22EFF605C(v12);
    v31 = (void *)sub_22F072D74(a1, v18, 2255, 0);
    v19 = *sub_22F3C4700((unsigned __int8 ***)&v31);
    if (v19)
    {
      v20 = *v19;
      if (!*v19)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = *v19;
      v22 = **v19;
      *v21 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v13;
    }
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22F069654(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  void *v31;
  __int128 v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v8 = (__int16)*a4 + (__int16)*a5;
  *(_WORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8;
  if (v8 == (__int16)v8)
    return 1;
  sub_22F3D9CCC(a4, (uint64_t)&v31);
  sub_22F3D9CCC(a5, (uint64_t)&v23);
  sub_22E4EBD50((llvm::APInt *)&v31, (uint64_t)&v28);
  if (v24 >= 0x41 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  if (v32 >= 0x41 && v31)
    MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v31 = v33;
    v32 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v28);
    v26 = v24;
    v25 = v23;
    v27 = v30;
    llvm::APInt::toString();
    if (v26 >= 0x41 && v25)
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
    sub_22EFF605C(v12);
    sub_22F3E1414(a1, v14, 2337, (uint64_t)&v23);
    sub_22E3B89A8(&v23, v31, v32);
    v15 = v23;
    if (!v23)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v24);
      v23 = v15;
    }
    v15[*v15 + 1] = 9;
    v16 = v23;
    v17 = *v23;
    *v23 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = v13;
    sub_22E3BB0B8((uint64_t)&v23);
    if (v31 != v33)
      free(v31);
    v9 = 1;
  }
  else
  {
    sub_22EFF605C(v12);
    v31 = (void *)sub_22F072D74(a1, v18, 2255, 0);
    v19 = *sub_22F3C4700((unsigned __int8 ***)&v31);
    if (v19)
    {
      v20 = *v19;
      if (!*v19)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = *v19;
      v22 = **v19;
      *v21 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v13;
    }
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22F069958(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  void *v32;
  __int128 v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *a5;
  *(_DWORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8 + v9;
  if (!__OFADD__(v8, v9))
    return 1;
  sub_22F3D9D50(a4, (uint64_t)&v32);
  sub_22F3D9D50(a5, (uint64_t)&v24);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  if (v25 >= 0x41 && v24)
    MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v32 = v34;
    v33 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v29);
    v27 = v25;
    v26 = v24;
    v28 = v31;
    llvm::APInt::toString();
    if (v27 >= 0x41 && v26)
      MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
    sub_22EFF605C(v13);
    sub_22F3E1414(a1, v15, 2337, (uint64_t)&v24);
    sub_22E3B89A8(&v24, v32, v33);
    v16 = v24;
    if (!v24)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v16;
    }
    v16[*v16 + 1] = 9;
    v17 = v24;
    v18 = *v24;
    *v24 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v14;
    sub_22E3BB0B8((uint64_t)&v24);
    if (v32 != v34)
      free(v32);
    v10 = 1;
  }
  else
  {
    sub_22EFF605C(v13);
    v32 = (void *)sub_22F072D74(a1, v19, 2255, 0);
    v20 = *sub_22F3C4700((unsigned __int8 ***)&v32);
    if (v20)
    {
      v21 = *v20;
      if (!*v20)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
        *v20 = v21;
      }
      v21[*v21 + 1] = 9;
      v22 = *v20;
      v23 = **v20;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v14;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_22F069C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  void *v32;
  __int128 v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *a5;
  *sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8 + v9;
  if (!__OFADD__(v8, v9))
    return 1;
  sub_22F3D9DD4(a4, (uint64_t)&v32);
  sub_22F3D9DD4(a5, (uint64_t)&v24);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  if (v25 >= 0x41 && v24)
    MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v32 = v34;
    v33 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v29);
    v27 = v25;
    v26 = v24;
    v28 = v31;
    llvm::APInt::toString();
    if (v27 >= 0x41 && v26)
      MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
    sub_22EFF605C(v13);
    sub_22F3E1414(a1, v15, 2337, (uint64_t)&v24);
    sub_22E3B89A8(&v24, v32, v33);
    v16 = v24;
    if (!v24)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v16;
    }
    v16[*v16 + 1] = 9;
    v17 = v24;
    v18 = *v24;
    *v24 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v14;
    sub_22E3BB0B8((uint64_t)&v24);
    if (v32 != v34)
      free(v32);
    v10 = 1;
  }
  else
  {
    sub_22EFF605C(v13);
    v32 = (void *)sub_22F072D74(a1, v19, 2255, 0);
    v20 = *sub_22F3C4700((unsigned __int8 ***)&v32);
    if (v20)
    {
      v21 = *v20;
      if (!*v20)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
        *v20 = v21;
      }
      v21[*v21 + 1] = 9;
      v22 = *v20;
      v23 = **v20;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v14;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_22F069F68(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  unsigned __int8 *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 **v32;
  int *v33;
  int v34;
  char v35;
  unsigned __int8 *v36;
  char *v37;
  char v38;
  uint64_t v39;

  v39 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(char *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v38 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v36);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v36, 4) && sub_22F070058(a1, a2, (uint64_t)&v36, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v36);
    v11 = v10;
    v35 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v28 = v36;
        v29 = v37;
        v30 = 0;
        v31 = 0;
        if (v36)
          sub_22F3DFDF8((uint64_t *)v36, (uint64_t)&v28);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v36, 0, (uint64_t)&v28);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v28;
      *v16 = v28;
      v16[1] = v29;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v28;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v36))
    {
      if (((_DWORD)v37 + 1) > 1)
        v13 = &v36[v37 + 24];
      else
        v13 = v36 + 24;
      v19 = *(_DWORD *)(*(_QWORD *)v13 + 12);
      if ((_DWORD)v37)
      {
        if ((_DWORD)v37 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v36 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v34 = v22;
          v28 = (unsigned __int8 *)&v38;
          v29 = &v35;
          v30 = a1;
          v31 = &v39;
          v32 = &v36;
          v33 = &v34;
          if (v9 < 0 && (v9 != -128 ? (v23 = v11 < (char)-(char)v9) : (v23 = 1), v23)
            || (v24 = sub_22F3D9E58((unsigned int *)&v36), (v38 & 0x80000000) == 0) && v22 - v24 < v38)
          {
            v14 = sub_22F06A1DC(&v28);
            goto LABEL_12;
          }
          v25 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v36, v35 + v38, (uint64_t)v27);
          v26 = sub_22F3E03F8(v25, 32);
          sub_22F3E0878(v26, v27);
          v18 = v27;
          goto LABEL_18;
        }
        v21 = &v36[v37 + 24];
      }
      else
      {
        v21 = v36 + 24;
      }
      v20 = (_DWORD *)(*(_QWORD *)v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v36);
  return v14;
}

uint64_t sub_22F06A1DC(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 8;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 8;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06A46C(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 8;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 8;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06A700(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  unsigned __int16 *v28;
  __int16 *v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int16 **v32;
  int *v33;
  int v34;
  __int16 v35;
  unsigned __int16 *v36;
  __int16 *v37;
  __int16 v38;
  uint64_t v39;

  v39 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(__int16 *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v38 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v36);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v36, 4) && sub_22F070058(a1, a2, (uint64_t)&v36, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v36);
    v11 = v10;
    v35 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v28 = v36;
        v29 = v37;
        v30 = 0;
        v31 = 0;
        if (v36)
          sub_22F3DFDF8((uint64_t *)v36, (uint64_t)&v28);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v36, 0, (uint64_t)&v28);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v28;
      *v16 = v28;
      v16[1] = v29;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v28;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v36))
    {
      if (((_DWORD)v37 + 1) > 1)
        v13 = (_QWORD *)((char *)v36 + v37 + 24);
      else
        v13 = v36 + 12;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v37)
      {
        if ((_DWORD)v37 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v36 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v34 = v22;
          v28 = (unsigned __int16 *)&v38;
          v29 = &v35;
          v30 = a1;
          v31 = &v39;
          v32 = &v36;
          v33 = &v34;
          if (v9 < 0 && (v9 != -32768 ? (v23 = v11 < (__int16)-(__int16)v9) : (v23 = 1), v23)
            || (v24 = sub_22F3D9E58((unsigned int *)&v36), (v38 & 0x80000000) == 0) && v22 - v24 < v38)
          {
            v14 = sub_22F06A974(&v28);
            goto LABEL_12;
          }
          v25 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v36, v35 + v38, (uint64_t)v27);
          v26 = sub_22F3E03F8(v25, 32);
          sub_22F3E0878(v26, v27);
          v18 = v27;
          goto LABEL_18;
        }
        v21 = (_QWORD *)((char *)v36 + v37 + 24);
      }
      else
      {
        v21 = v36 + 12;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v36);
  return v14;
}

uint64_t sub_22F06A974(unsigned __int16 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 16;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 16;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06AC04(unsigned __int16 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 16;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 16;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06AE98(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  unsigned int *v28;
  int *v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int **v32;
  int *v33;
  int v34;
  int v35;
  unsigned int *v36;
  int *v37;
  unsigned int v38;
  uint64_t v39;

  v39 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_DWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v38 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v36);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v36, 4) && sub_22F070058(a1, a2, (uint64_t)&v36, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v36);
    v11 = v10;
    v35 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v28 = v36;
        v29 = v37;
        v30 = 0;
        v31 = 0;
        if (v36)
          sub_22F3DFDF8((uint64_t *)v36, (uint64_t)&v28);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v36, 0, (uint64_t)&v28);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v28;
      *v16 = v28;
      v16[1] = v29;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v28;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v36))
    {
      if (((_DWORD)v37 + 1) > 1)
        v13 = (_QWORD *)((char *)v36 + v37 + 24);
      else
        v13 = v36 + 6;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v37)
      {
        if ((_DWORD)v37 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v36 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v34 = v22;
          v28 = &v38;
          v29 = &v35;
          v30 = a1;
          v31 = &v39;
          v32 = &v36;
          v33 = &v34;
          if ((v9 & 0x80000000) != 0 && (v9 != 0x80000000 ? (v23 = v11 < (signed int)-v9) : (v23 = 1), v23)
            || (v24 = sub_22F3D9E58((unsigned int *)&v36), (v38 & 0x80000000) == 0) && v38 > v22 - v24)
          {
            v14 = sub_22F06B10C(&v28);
            goto LABEL_12;
          }
          v25 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v36, v35 + v38, (uint64_t)v27);
          v26 = sub_22F3E03F8(v25, 32);
          sub_22F3E0878(v26, v27);
          v18 = v27;
          goto LABEL_18;
        }
        v21 = (_QWORD *)((char *)v36 + v37 + 24);
      }
      else
      {
        v21 = v36 + 6;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v36);
  return v14;
}

uint64_t sub_22F06B10C(unsigned int **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 32;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 32;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = v10[2];
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06B39C(unsigned int **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 32;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 32;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = v10[2];
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06B630(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_QWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v38 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v36);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v36, 4) && sub_22F070058(a1, a2, (uint64_t)&v36, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v36);
    v11 = v10;
    v35 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v28 = v36;
        v29 = v37;
        v30 = 0;
        v31 = 0;
        if (v36)
          sub_22F3DFDF8(v36, (uint64_t)&v28);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v36, 0, (uint64_t)&v28);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = v28;
      *v16 = v28;
      v16[1] = v29;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v28;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v36))
    {
      if (((_DWORD)v37 + 1) > 1)
        v13 = (uint64_t *)((char *)v36 + v37 + 24);
      else
        v13 = v36 + 3;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v37)
      {
        if ((_DWORD)v37 == -1)
        {
          v20 = (_DWORD *)(v36[3] + 12);
LABEL_26:
          v22 = v19 / *v20;
          v34 = v22;
          v28 = &v38;
          v29 = &v35;
          v30 = a1;
          v31 = &v39;
          v32 = &v36;
          v33 = &v34;
          if (v9 < 0 && (v9 != 0x8000000000000000 ? (v23 = v11 < -v9) : (v23 = 1), v23)
            || (v24 = sub_22F3D9E58((unsigned int *)&v36), (v38 & 0x8000000000000000) == 0)
            && v22 - v24 < v38)
          {
            v14 = sub_22F06B8A4(&v28);
            goto LABEL_12;
          }
          v25 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v36, v35 + v38, (uint64_t)v27);
          v26 = sub_22F3E03F8(v25, 32);
          sub_22F3E0878(v26, v27);
          v18 = v27;
          goto LABEL_18;
        }
        v21 = (uint64_t *)((char *)v36 + v37 + 24);
      }
      else
      {
        v21 = v36 + 3;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8(&v36);
  return v14;
}

uint64_t sub_22F06B8A4(uint64_t **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 64;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 64;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *v10 + v11;
  else
    v12 = *v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06BB34(uint64_t **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 64;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 64;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *v10 + v11;
  else
    v12 = *v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06BDC8(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 1;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 1;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E4EBD50((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06C058(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;

  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v14);
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v12);
  if (v12 | v14)
  {
    if (v12 == v14)
    {
      if (v13 <= v15)
        v8 = 0;
      else
        v8 = 3;
      if (v13 >= v15)
        v7 = v8;
      else
        v7 = 2;
    }
    else
    {
      v7 = 4;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v10 = a3(a4, v7);
  *(_BYTE *)sub_22F3E03F8(v9, 8) = v10;
  sub_22F3E08B8((_QWORD **)&v12);
  sub_22F3E08B8((_QWORD **)&v14);
  return 1;
}

uint64_t sub_22F06C11C(uint64_t a1, unsigned int a2)
{
  int *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v13 = a2;
  v3 = sub_22F067004((uint64_t *)(a1 + 104), &v13);
  if ((int *)(*(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)) == v3)
    return *(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v13;
  v6 = (_QWORD *)*((_QWORD *)v3 + 1);
  v9 = v6;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (v6)
  {
    sub_22F3DFDF8(v6, (uint64_t)&v9);
    v8 = v9;
    v7 = HIDWORD(v10);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v4 = (uint64_t)v8 + v7 + 32;
  sub_22F3E08B8(&v9);
  return v4;
}

uint64_t sub_22F06C1BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  signed __int8 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  char v34;
  void *v35;
  unsigned int v36;
  char v37;
  void *v38;
  __int128 v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v7 = (char)*a4;
  v8 = *a5;
  v9 = (char)v8;
  if (v7 < 0)
    v7 = -v6;
  if ((v8 & 0x80u) != 0)
    v9 = -(char)v8;
  v10 = (char)(v8 ^ v6);
  if (v10 >= 0)
    LOBYTE(v11) = v9 * v7;
  else
    v11 = -(v9 * v7);
  if (*a4)
    v12 = v8 == 0;
  else
    v12 = 1;
  if (v12 || (v10 < 0 ? (v15 = 128) : (v15 = 127), v15 / v9 >= v7))
  {
    *(_BYTE *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v11;
    return 1;
  }
  else
  {
    *(_BYTE *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v11;
    sub_22F3D9C48(a4, (uint64_t)&v30);
    sub_22F3D9C48(a5, (uint64_t)&v32);
    llvm::APInt::operator*();
    v36 = v39;
    v35 = v38;
    v37 = BYTE4(v31);
    if (v33 >= 0x41 && v32)
      MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
    if (v31 >= 0x41 && v30)
      MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
    v17 = v16;
    v18 = *(_QWORD *)(v16 + 8);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
    {
      v38 = v40;
      v39 = xmmword_22F44E330;
      llvm::APInt::trunc((llvm::APInt *)&v35);
      v33 = v31;
      v32 = v30;
      v34 = v37;
      llvm::APInt::toString();
      if (v33 >= 0x41 && v32)
        MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
      sub_22EFF605C(v17);
      sub_22F3E1414(a1, v19, 2337, (uint64_t)&v30);
      sub_22E3B89A8(&v30, v38, v39);
      v20 = v30;
      if (!v30)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC(v31);
        v30 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = v30;
      v22 = *v30;
      *v30 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v18;
      sub_22E3BB0B8((uint64_t)&v30);
      if (v38 != v40)
        free(v38);
      v23 = 1;
    }
    else
    {
      sub_22EFF605C(v17);
      v38 = (void *)sub_22F072D74(a1, v25, 2255, 0);
      v26 = *sub_22F3C4700((unsigned __int8 ***)&v38);
      if (v26)
      {
        v27 = *v26;
        if (!*v26)
        {
          v27 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v26[1]);
          *v26 = v27;
        }
        v27[*v27 + 1] = 9;
        v28 = *v26;
        v29 = **v26;
        *v28 = v29 + 1;
        *(_QWORD *)&v28[8 * v29 + 16] = v18;
      }
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    }
    if (v36 >= 0x41 && v35)
      MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  }
  return v23;
}

uint64_t sub_22F06C534(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  signed __int16 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  char v34;
  void *v35;
  unsigned int v36;
  char v37;
  void *v38;
  __int128 v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v7 = (__int16)*a4;
  v8 = *a5;
  v9 = (__int16)v8;
  if (v7 < 0)
    v7 = -v6;
  if ((v8 & 0x8000u) != 0)
    v9 = -(__int16)v8;
  v10 = (__int16)(v8 ^ v6);
  if (v10 >= 0)
    LOWORD(v11) = v9 * v7;
  else
    v11 = -(v9 * v7);
  if (*a4)
    v12 = v8 == 0;
  else
    v12 = 1;
  if (v12 || (v10 < 0 ? (v15 = 0x8000) : (v15 = 0x7FFF), v15 / (unsigned __int16)v9 >= (unsigned __int16)v7))
  {
    *(_WORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v11;
    return 1;
  }
  else
  {
    *(_WORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v11;
    sub_22F3D9CCC(a4, (uint64_t)&v30);
    sub_22F3D9CCC(a5, (uint64_t)&v32);
    llvm::APInt::operator*();
    v36 = v39;
    v35 = v38;
    v37 = BYTE4(v31);
    if (v33 >= 0x41 && v32)
      MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
    if (v31 >= 0x41 && v30)
      MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
    v17 = v16;
    v18 = *(_QWORD *)(v16 + 8);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
    {
      v38 = v40;
      v39 = xmmword_22F44E330;
      llvm::APInt::trunc((llvm::APInt *)&v35);
      v33 = v31;
      v32 = v30;
      v34 = v37;
      llvm::APInt::toString();
      if (v33 >= 0x41 && v32)
        MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
      sub_22EFF605C(v17);
      sub_22F3E1414(a1, v19, 2337, (uint64_t)&v30);
      sub_22E3B89A8(&v30, v38, v39);
      v20 = v30;
      if (!v30)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC(v31);
        v30 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = v30;
      v22 = *v30;
      *v30 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v18;
      sub_22E3BB0B8((uint64_t)&v30);
      if (v38 != v40)
        free(v38);
      v23 = 1;
    }
    else
    {
      sub_22EFF605C(v17);
      v38 = (void *)sub_22F072D74(a1, v25, 2255, 0);
      v26 = *sub_22F3C4700((unsigned __int8 ***)&v38);
      if (v26)
      {
        v27 = *v26;
        if (!*v26)
        {
          v27 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v26[1]);
          *v26 = v27;
        }
        v27[*v27 + 1] = 9;
        v28 = *v26;
        v29 = **v26;
        *v28 = v29 + 1;
        *(_QWORD *)&v28[8 * v29 + 16] = v18;
      }
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    }
    if (v36 >= 0x41 && v35)
      MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  }
  return v23;
}

uint64_t sub_22F06C8AC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  char v32;
  void *v33;
  unsigned int v34;
  char v35;
  void *v36;
  __int128 v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v7 = *a5;
  if ((*a4 & 0x80000000) == 0)
    v8 = *a4;
  else
    v8 = -v6;
  if (v7 >= 0)
    v9 = *a5;
  else
    v9 = -v7;
  if ((v7 ^ v6) >= 0)
    v10 = v9 * v8;
  else
    v10 = -(v9 * v8);
  if (v6)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (v11 || v8 <= (((v7 ^ v6) >> 31) ^ 0x7FFFFFFFu) / v9)
  {
    *(_DWORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v10;
    return 1;
  }
  else
  {
    *(_DWORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v10;
    sub_22F3D9D50(a4, (uint64_t)&v28);
    sub_22F3D9D50(a5, (uint64_t)&v30);
    llvm::APInt::operator*();
    v34 = v37;
    v33 = v36;
    v35 = BYTE4(v29);
    if (v31 >= 0x41 && v30)
      MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    if (v29 >= 0x41 && v28)
      MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
    sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
    v15 = v14;
    v16 = *(_QWORD *)(v14 + 8);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
    {
      v36 = v38;
      v37 = xmmword_22F44E330;
      llvm::APInt::trunc((llvm::APInt *)&v33);
      v31 = v29;
      v30 = v28;
      v32 = v35;
      llvm::APInt::toString();
      if (v31 >= 0x41 && v30)
        MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
      sub_22EFF605C(v15);
      sub_22F3E1414(a1, v17, 2337, (uint64_t)&v28);
      sub_22E3B89A8(&v28, v36, v37);
      v18 = v28;
      if (!v28)
      {
        v18 = (unsigned __int8 *)sub_22E3B8AAC(v29);
        v28 = v18;
      }
      v18[*v18 + 1] = 9;
      v19 = v28;
      v20 = *v28;
      *v28 = v20 + 1;
      *(_QWORD *)&v19[8 * v20 + 16] = v16;
      sub_22E3BB0B8((uint64_t)&v28);
      if (v36 != v38)
        free(v36);
      v21 = 1;
    }
    else
    {
      sub_22EFF605C(v15);
      v36 = (void *)sub_22F072D74(a1, v23, 2255, 0);
      v24 = *sub_22F3C4700((unsigned __int8 ***)&v36);
      if (v24)
      {
        v25 = *v24;
        if (!*v24)
        {
          v25 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v24[1]);
          *v24 = v25;
        }
        v25[*v25 + 1] = 9;
        v26 = *v24;
        v27 = **v24;
        *v26 = v27 + 1;
        *(_QWORD *)&v26[8 * v27 + 16] = v16;
      }
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    }
    if (v34 >= 0x41 && v33)
      MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
  }
  return v21;
}

uint64_t sub_22F06CC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  char v32;
  void *v33;
  unsigned int v34;
  char v35;
  void *v36;
  __int128 v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v7 = *a5;
  if (*a4 >= 0)
    v8 = *a4;
  else
    v8 = -v6;
  if (v7 >= 0)
    v9 = *a5;
  else
    v9 = -v7;
  if ((v7 ^ v6) >= 0)
    v10 = v9 * v8;
  else
    v10 = -(uint64_t)(v9 * v8);
  if (v6)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (v11 || v8 <= (((v7 ^ v6) >> 63) ^ 0x7FFFFFFFFFFFFFFFuLL) / v9)
  {
    *sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v10;
    return 1;
  }
  else
  {
    *sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v10;
    sub_22F3D9DD4(a4, (uint64_t)&v28);
    sub_22F3D9DD4(a5, (uint64_t)&v30);
    llvm::APInt::operator*();
    v34 = v37;
    v33 = v36;
    v35 = BYTE4(v29);
    if (v31 >= 0x41 && v30)
      MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
    if (v29 >= 0x41 && v28)
      MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
    sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
    v15 = v14;
    v16 = *(_QWORD *)(v14 + 8);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
    {
      v36 = v38;
      v37 = xmmword_22F44E330;
      llvm::APInt::trunc((llvm::APInt *)&v33);
      v31 = v29;
      v30 = v28;
      v32 = v35;
      llvm::APInt::toString();
      if (v31 >= 0x41 && v30)
        MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
      sub_22EFF605C(v15);
      sub_22F3E1414(a1, v17, 2337, (uint64_t)&v28);
      sub_22E3B89A8(&v28, v36, v37);
      v18 = v28;
      if (!v28)
      {
        v18 = (unsigned __int8 *)sub_22E3B8AAC(v29);
        v28 = v18;
      }
      v18[*v18 + 1] = 9;
      v19 = v28;
      v20 = *v28;
      *v28 = v20 + 1;
      *(_QWORD *)&v19[8 * v20 + 16] = v16;
      sub_22E3BB0B8((uint64_t)&v28);
      if (v36 != v38)
        free(v36);
      v21 = 1;
    }
    else
    {
      sub_22EFF605C(v15);
      v36 = (void *)sub_22F072D74(a1, v23, 2255, 0);
      v24 = *sub_22F3C4700((unsigned __int8 ***)&v36);
      if (v24)
      {
        v25 = *v24;
        if (!*v24)
        {
          v25 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v24[1]);
          *v24 = v25;
        }
        v25[*v25 + 1] = 9;
        v26 = *v24;
        v27 = **v24;
        *v26 = v27 + 1;
        *(_QWORD *)&v26[8 * v27 + 16] = v16;
      }
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    }
    if (v34 >= 0x41 && v33)
      MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
  }
  return v21;
}

uint64_t sub_22F06CF6C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  void *v31;
  __int128 v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v8 = (char)*a4 - (char)*a5;
  *(_BYTE *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8;
  if (v8 == (char)v8)
    return 1;
  sub_22F3D9C48(a4, (uint64_t)&v31);
  sub_22F3D9C48(a5, (uint64_t)&v23);
  sub_22E5EDF90((llvm::APInt *)&v31, (uint64_t)&v28);
  if (v24 >= 0x41 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  if (v32 >= 0x41 && v31)
    MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v31 = v33;
    v32 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v28);
    v26 = v24;
    v25 = v23;
    v27 = v30;
    llvm::APInt::toString();
    if (v26 >= 0x41 && v25)
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
    sub_22EFF605C(v12);
    sub_22F3E1414(a1, v14, 2337, (uint64_t)&v23);
    sub_22E3B89A8(&v23, v31, v32);
    v15 = v23;
    if (!v23)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v24);
      v23 = v15;
    }
    v15[*v15 + 1] = 9;
    v16 = v23;
    v17 = *v23;
    *v23 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = v13;
    sub_22E3BB0B8((uint64_t)&v23);
    if (v31 != v33)
      free(v31);
    v9 = 1;
  }
  else
  {
    sub_22EFF605C(v12);
    v31 = (void *)sub_22F072D74(a1, v18, 2255, 0);
    v19 = *sub_22F3C4700((unsigned __int8 ***)&v31);
    if (v19)
    {
      v20 = *v19;
      if (!*v19)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = *v19;
      v22 = **v19;
      *v21 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v13;
    }
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22F06D270(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  void *v31;
  __int128 v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v8 = (__int16)*a4 - (__int16)*a5;
  *(_WORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8;
  if (v8 == (__int16)v8)
    return 1;
  sub_22F3D9CCC(a4, (uint64_t)&v31);
  sub_22F3D9CCC(a5, (uint64_t)&v23);
  sub_22E5EDF90((llvm::APInt *)&v31, (uint64_t)&v28);
  if (v24 >= 0x41 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  if (v32 >= 0x41 && v31)
    MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v31 = v33;
    v32 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v28);
    v26 = v24;
    v25 = v23;
    v27 = v30;
    llvm::APInt::toString();
    if (v26 >= 0x41 && v25)
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
    sub_22EFF605C(v12);
    sub_22F3E1414(a1, v14, 2337, (uint64_t)&v23);
    sub_22E3B89A8(&v23, v31, v32);
    v15 = v23;
    if (!v23)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v24);
      v23 = v15;
    }
    v15[*v15 + 1] = 9;
    v16 = v23;
    v17 = *v23;
    *v23 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = v13;
    sub_22E3BB0B8((uint64_t)&v23);
    if (v31 != v33)
      free(v31);
    v9 = 1;
  }
  else
  {
    sub_22EFF605C(v12);
    v31 = (void *)sub_22F072D74(a1, v18, 2255, 0);
    v19 = *sub_22F3C4700((unsigned __int8 ***)&v31);
    if (v19)
    {
      v20 = *v19;
      if (!*v19)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v20;
      }
      v20[*v20 + 1] = 9;
      v21 = *v19;
      v22 = **v19;
      *v21 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v13;
    }
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v29 >= 0x41 && v28)
    MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22F06D574(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  void *v32;
  __int128 v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *a5;
  *(_DWORD *)sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8 - v9;
  if (!__OFSUB__(v8, v9))
    return 1;
  sub_22F3D9D50(a4, (uint64_t)&v32);
  sub_22F3D9D50(a5, (uint64_t)&v24);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  if (v25 >= 0x41 && v24)
    MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v32 = v34;
    v33 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v29);
    v27 = v25;
    v26 = v24;
    v28 = v31;
    llvm::APInt::toString();
    if (v27 >= 0x41 && v26)
      MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
    sub_22EFF605C(v13);
    sub_22F3E1414(a1, v15, 2337, (uint64_t)&v24);
    sub_22E3B89A8(&v24, v32, v33);
    v16 = v24;
    if (!v24)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v16;
    }
    v16[*v16 + 1] = 9;
    v17 = v24;
    v18 = *v24;
    *v24 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v14;
    sub_22E3BB0B8((uint64_t)&v24);
    if (v32 != v34)
      free(v32);
    v10 = 1;
  }
  else
  {
    sub_22EFF605C(v13);
    v32 = (void *)sub_22F072D74(a1, v19, 2255, 0);
    v20 = *sub_22F3C4700((unsigned __int8 ***)&v32);
    if (v20)
    {
      v21 = *v20;
      if (!*v20)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
        *v20 = v21;
      }
      v21[*v21 + 1] = 9;
      v22 = *v20;
      v23 = **v20;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v14;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_22F06D87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  void *v32;
  __int128 v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *a5;
  *sub_22F3E03F8(*(_QWORD *)(a1 + 48), 8) = v8 - v9;
  if (!__OFSUB__(v8, v9))
    return 1;
  sub_22F3D9DD4(a4, (uint64_t)&v32);
  sub_22F3D9DD4(a5, (uint64_t)&v24);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  if (v25 >= 0x41 && v24)
    MEMORY[0x2348A0E84](v24, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  sub_22F3E1314(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 8);
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)))
  {
    v32 = v34;
    v33 = xmmword_22F44E330;
    llvm::APInt::trunc((llvm::APInt *)&v29);
    v27 = v25;
    v26 = v24;
    v28 = v31;
    llvm::APInt::toString();
    if (v27 >= 0x41 && v26)
      MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
    sub_22EFF605C(v13);
    sub_22F3E1414(a1, v15, 2337, (uint64_t)&v24);
    sub_22E3B89A8(&v24, v32, v33);
    v16 = v24;
    if (!v24)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v16;
    }
    v16[*v16 + 1] = 9;
    v17 = v24;
    v18 = *v24;
    *v24 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v14;
    sub_22E3BB0B8((uint64_t)&v24);
    if (v32 != v34)
      free(v32);
    v10 = 1;
  }
  else
  {
    sub_22EFF605C(v13);
    v32 = (void *)sub_22F072D74(a1, v19, 2255, 0);
    v20 = *sub_22F3C4700((unsigned __int8 ***)&v32);
    if (v20)
    {
      v21 = *v20;
      if (!*v20)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
        *v20 = v21;
      }
      v21[*v21 + 1] = 9;
      v22 = *v20;
      v23 = **v20;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v14;
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_22F06DB84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[4];
  unsigned __int8 *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 **v31;
  int *v32;
  int v33;
  char v34;
  unsigned __int8 *v35;
  char *v36;
  char v37;
  uint64_t v38;

  v38 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(char *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v37 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v35);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v35, 4) && sub_22F070058(a1, a2, (uint64_t)&v35, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v35);
    v11 = v10;
    v34 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v27 = v35;
        v28 = v36;
        v29 = 0;
        v30 = 0;
        if (v35)
          sub_22F3DFDF8((uint64_t *)v35, (uint64_t)&v27);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v35, 0, (uint64_t)&v27);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v27;
      *v16 = v27;
      v16[1] = v28;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v27;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v35))
    {
      if (((_DWORD)v36 + 1) > 1)
        v13 = &v35[v36 + 24];
      else
        v13 = v35 + 24;
      v19 = *(_DWORD *)(*(_QWORD *)v13 + 12);
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v35 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v33 = v22;
          v27 = (unsigned __int8 *)&v37;
          v28 = &v34;
          v29 = a1;
          v30 = &v38;
          v31 = &v35;
          v32 = &v33;
          if ((v9 & 0x80000000) == 0 && v9 > v11
            || (v23 = sub_22F3D9E58((unsigned int *)&v35), v37 < 0)
            && (v37 == -128 || v22 - v23 < -v37))
          {
            v14 = sub_22F06DDF8(&v27);
            goto LABEL_12;
          }
          v24 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v35, v34 - v37, (uint64_t)v26);
          v25 = sub_22F3E03F8(v24, 32);
          sub_22F3E0878(v25, v26);
          v18 = v26;
          goto LABEL_18;
        }
        v21 = &v35[v36 + 24];
      }
      else
      {
        v21 = v35 + 24;
      }
      v20 = (_DWORD *)(*(_QWORD *)v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v35);
  return v14;
}

uint64_t sub_22F06DDF8(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 8;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 8;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06E088(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 8;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 8;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06E31C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[4];
  unsigned __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int16 **v31;
  int *v32;
  int v33;
  __int16 v34;
  unsigned __int16 *v35;
  __int16 *v36;
  __int16 v37;
  uint64_t v38;

  v38 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(__int16 *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v37 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v35);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v35, 4) && sub_22F070058(a1, a2, (uint64_t)&v35, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v35);
    v11 = v10;
    v34 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v27 = v35;
        v28 = v36;
        v29 = 0;
        v30 = 0;
        if (v35)
          sub_22F3DFDF8((uint64_t *)v35, (uint64_t)&v27);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v35, 0, (uint64_t)&v27);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v27;
      *v16 = v27;
      v16[1] = v28;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v27;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v35))
    {
      if (((_DWORD)v36 + 1) > 1)
        v13 = (_QWORD *)((char *)v35 + v36 + 24);
      else
        v13 = v35 + 12;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v35 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v33 = v22;
          v27 = (unsigned __int16 *)&v37;
          v28 = &v34;
          v29 = a1;
          v30 = &v38;
          v31 = &v35;
          v32 = &v33;
          if ((v9 & 0x80000000) == 0 && v9 > v11
            || (v23 = sub_22F3D9E58((unsigned int *)&v35), v37 < 0)
            && (v37 == -32768 || v22 - v23 < (unsigned __int16)-v37))
          {
            v14 = sub_22F06E590(&v27);
            goto LABEL_12;
          }
          v24 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v35, v34 - v37, (uint64_t)v26);
          v25 = sub_22F3E03F8(v24, 32);
          sub_22F3E0878(v25, v26);
          v18 = v26;
          goto LABEL_18;
        }
        v21 = (_QWORD *)((char *)v35 + v36 + 24);
      }
      else
      {
        v21 = v35 + 12;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v35);
  return v14;
}

uint64_t sub_22F06E590(unsigned __int16 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 16;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 16;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06E820(unsigned __int16 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 16;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 16;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06EAB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[4];
  unsigned int *v27;
  int *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int **v31;
  int *v32;
  int v33;
  int v34;
  unsigned int *v35;
  int *v36;
  int v37;
  uint64_t v38;

  v38 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_DWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v37 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v35);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v35, 4) && sub_22F070058(a1, a2, (uint64_t)&v35, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v35);
    v11 = v10;
    v34 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v27 = v35;
        v28 = v36;
        v29 = 0;
        v30 = 0;
        if (v35)
          sub_22F3DFDF8((uint64_t *)v35, (uint64_t)&v27);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v35, 0, (uint64_t)&v27);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = (uint64_t *)v27;
      *v16 = v27;
      v16[1] = v28;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v27;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v35))
    {
      if (((_DWORD)v36 + 1) > 1)
        v13 = (_QWORD *)((char *)v35 + v36 + 24);
      else
        v13 = v35 + 6;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == -1)
        {
          v20 = (_DWORD *)(*((_QWORD *)v35 + 3) + 12);
LABEL_26:
          v22 = v19 / *v20;
          v33 = v22;
          v27 = (unsigned int *)&v37;
          v28 = &v34;
          v29 = a1;
          v30 = &v38;
          v31 = &v35;
          v32 = &v33;
          if ((v9 & 0x80000000) == 0 && v9 > v11
            || (v23 = sub_22F3D9E58((unsigned int *)&v35), v37 < 0)
            && (v37 == 0x80000000 || v22 - v23 < -v37))
          {
            v14 = sub_22F06ED2C(&v27);
            goto LABEL_12;
          }
          v24 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v35, v34 - v37, (uint64_t)v26);
          v25 = sub_22F3E03F8(v24, 32);
          sub_22F3E0878(v25, v26);
          v18 = v26;
          goto LABEL_18;
        }
        v21 = (_QWORD *)((char *)v35 + v36 + 24);
      }
      else
      {
        v21 = v35 + 6;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8((_QWORD **)&v35);
  return v14;
}

uint64_t sub_22F06ED2C(unsigned int **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 32;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 32;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = v10[2];
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06EFBC(unsigned int **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 32;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 32;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = v10[2];
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06F250(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[4];
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = v6 - *v4 - 24;
  v8 = 8;
  if (v7 <= 7)
  {
    do
    {
      v8 -= v7;
      v5 = *(_QWORD *)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 - v5 - 24;
    }
    while (v8 > v7);
  }
  v9 = *(_QWORD *)(v6 - v8);
  sub_22F3E04C8(v4, 8uLL);
  v37 = v9;
  sub_22F3CDF00(*(_QWORD **)(a1 + 48), (uint64_t *)&v35);
  if (sub_22F06FEF4(a1, a2, (uint64_t *)&v35, 4) && sub_22F070058(a1, a2, (uint64_t)&v35, 3))
  {
    v10 = sub_22F3D9E58((unsigned int *)&v35);
    v11 = v10;
    v34 = v10;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v27 = v35;
        v28 = v36;
        v29 = 0;
        v30 = 0;
        if (v35)
          sub_22F3DFDF8(v35, (uint64_t)&v27);
      }
      else
      {
        sub_22F3D9BC0((uint64_t)&v35, 0, (uint64_t)&v27);
      }
      v16 = sub_22F3E03F8(v12, 32);
      v17 = v27;
      *v16 = v27;
      v16[1] = v28;
      v16[2] = 0;
      v16[3] = 0;
      if (v17)
        sub_22F3DFDF8(v17, (uint64_t)v16);
      v18 = (uint64_t *)&v27;
LABEL_18:
      sub_22F3E08B8((_QWORD **)v18);
      v14 = 1;
      goto LABEL_12;
    }
    if (sub_22F06FC7C(a1, a2, (uint64_t *)&v35))
    {
      if (((_DWORD)v36 + 1) > 1)
        v13 = (uint64_t *)((char *)v35 + v36 + 24);
      else
        v13 = v35 + 3;
      v19 = *(_DWORD *)(*v13 + 12);
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == -1)
        {
          v20 = (_DWORD *)(v35[3] + 12);
LABEL_26:
          v22 = v19 / *v20;
          v33 = v22;
          v27 = &v37;
          v28 = &v34;
          v29 = a1;
          v30 = &v38;
          v31 = &v35;
          v32 = &v33;
          if ((v9 & 0x8000000000000000) == 0 && v11 < v9
            || (v23 = sub_22F3D9E58((unsigned int *)&v35), v37 < 0)
            && (v37 == 0x8000000000000000 || v22 - v23 < -(int)v37))
          {
            v14 = sub_22F06F4C8(&v27);
            goto LABEL_12;
          }
          v24 = *(_QWORD *)(a1 + 48);
          sub_22F3D9BC0((uint64_t)&v35, v34 - v37, (uint64_t)v26);
          v25 = sub_22F3E03F8(v24, 32);
          sub_22F3E0878(v25, v26);
          v18 = v26;
          goto LABEL_18;
        }
        v21 = (uint64_t *)((char *)v35 + v36 + 24);
      }
      else
      {
        v21 = v35 + 3;
      }
      v20 = (_DWORD *)(*v21 + 8);
      goto LABEL_26;
    }
  }
  v14 = 0;
LABEL_12:
  sub_22F3E08B8(&v35);
  return v14;
}

uint64_t sub_22F06F4C8(uint64_t **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 64;
  v29 = v2;
  v31 = 0;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 64;
  v26 = v4;
  v28 = 0;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *v10 + v11;
  else
    v12 = *v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06F758(uint64_t **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 64;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 64;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *v10 + v11;
  else
    v12 = *v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_22F06F9EC(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 ***v8;
  unsigned __int8 ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char v37;

  v2 = **a1;
  v30 = 1;
  v29 = v2;
  v31 = 1;
  sub_22E46361C((llvm::APInt *)&v29, (uint64_t)&v32);
  v3 = v33;
  v33 = 0;
  v36 = v3;
  v35 = v32;
  v37 = 0;
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  v4 = (unsigned __int8 **)*a1[1];
  v27 = 1;
  v26 = v4;
  v28 = 1;
  sub_22E46361C((llvm::APInt *)&v26, (uint64_t)&v29);
  v5 = v30;
  v30 = 0;
  v33 = v5;
  v32 = v29;
  v34 = 0;
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  sub_22E5EDF90((llvm::APInt *)&v32, (uint64_t)&v29);
  v6 = (uint64_t)a1[2];
  v25 = sub_22F3E0284(*(_QWORD *)(v6 + 64), *(_QWORD *)a1[3]);
  sub_22F0727C8(&v25);
  v26 = (unsigned __int8 **)sub_22F072D74(v6, v7, 2182, 0);
  v8 = sub_22F3C4700(&v26);
  v9 = v8;
  v10 = a1[4];
  v11 = *((unsigned int *)v10 + 2);
  if ((v11 + 1) > 1)
    v12 = *(_QWORD *)v10 + v11;
  else
    v12 = *(_QWORD *)v10;
  v13 = v12 + 24;
  v14 = *v8;
  if (*v8)
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v13 + 43);
    v16 = *v14;
    if (!*v14)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = *v14;
    v18 = **v14;
    *v17 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = v15 == 0;
    v19 = *v9;
    if (v19)
    {
      v20 = *(unsigned int *)a1[5];
      v21 = *v19;
      if (!*v19)
      {
        v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v19[1]);
        *v19 = v21;
      }
      v21[*v21 + 1] = 3;
      v22 = *v19;
      v23 = **v19;
      *v22 = v23 + 1;
      *(_QWORD *)&v22[8 * v23 + 16] = v20;
    }
  }
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x2348A0E84](v35, 0x1000C8000313F17);
  return 0;
}

BOOL sub_22F06FC7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v4 = *((unsigned int *)a3 + 2);
  if ((v4 + 1) > 1)
    v5 = *a3 + v4;
  else
    v5 = *a3;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 24) + 12);
  if (v6 == -1)
  {
    v8 = sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
    sub_22F3E138C(a1, &v8, 2277, 0);
  }
  return v6 != -1;
}

uint64_t sub_22F06FD00(uint64_t *a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = sub_22F3E0284(a1[8], a2);
  v7 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    if ((a3[2] - 1) > 0xFFFFFFFD)
    {
      result = sub_22F3E138C((uint64_t)a1, &v28, 2171, 0);
      if (!result)
        return result;
      v9 = (_QWORD *)result;
      v25 = *(unsigned __int8 **)result;
      if (!*(_QWORD *)result)
      {
        v25 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
        *v9 = v25;
      }
      result = 0;
      v11 = a4;
      v25[*v25 + 1] = 2;
    }
    else
    {
      result = sub_22F3E138C((uint64_t)a1, &v28, 2253, 0);
      if (!result)
        return result;
      v9 = (_QWORD *)result;
      v10 = *(unsigned __int8 **)result;
      if (!*(_QWORD *)result)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
        *v9 = v10;
      }
      result = 0;
      v11 = 2;
      v10[*v10 + 1] = 2;
    }
    v26 = (_BYTE *)*v9;
    v27 = *(unsigned __int8 *)*v9;
    *v26 = v27 + 1;
    *(_QWORD *)&v26[8 * v27 + 16] = v11;
    return result;
  }
  if (!*(_BYTE *)(v7 + 18))
    return 1;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 24) + 42);
  v13 = (unsigned __int8 **)sub_22F3E138C((uint64_t)a1, &v28, 2221, 1);
  if (v13)
  {
    v14 = v13;
    v15 = *v13;
    if (!v15)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v14[1]);
      *v14 = v15;
    }
    v15[*v15 + 1] = 2;
    v16 = *v14;
    v17 = **v14;
    *v16 = v17 + 1;
    *(_QWORD *)&v16[8 * v17 + 16] = a4;
    v16[(v17 + 1) + 1] = 2;
    v18 = *v14;
    v19 = **v14;
    *v18 = v19 + 1;
    *(_QWORD *)&v18[8 * v19 + 16] = v12 ^ 1;
  }
  sub_22F066EF0(*(uint64_t **)(*(_QWORD *)a3 + 24));
  v21 = v20;
  result = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  if ((_DWORD)v12)
  {
    if ((_DWORD)result)
    {
      v22 = (uint64_t)a1;
      v23 = v21;
      v24 = 2272;
LABEL_24:
      sub_22F072E10(v22, v23, v24);
      return 0;
    }
  }
  else if ((_DWORD)result)
  {
    v22 = (uint64_t)a1;
    v23 = v21;
    v24 = 100;
    goto LABEL_24;
  }
  return result;
}

BOOL sub_22F06FEF4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a3;
  if (!*a3)
  {
    v13 = sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
    v8 = (unsigned __int8 **)sub_22F3E138C(a1, &v13, 2253, 0);
    if (v8)
    {
      v9 = v8;
      v10 = *v8;
      if (!v10)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
        *v9 = v10;
      }
      v10[*v10 + 1] = 2;
      v11 = *v9;
      v12 = **v9;
      *v11 = v12 + 1;
      *(_QWORD *)&v11[8 * v12 + 16] = a4;
    }
  }
  return v4 != 0;
}

BOOL sub_22F06FFA0(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  _BOOL4 v7;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_22F3D9524(a3);
  if (v7)
  {
    v14 = sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
    v9 = (unsigned __int8 **)sub_22F3E138C(a1, &v14, 2172, 0);
    if (v9)
    {
      v10 = v9;
      v11 = *v9;
      if (!v11)
      {
        v11 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v10[1]);
        *v10 = v11;
      }
      v11[*v11 + 1] = 2;
      v12 = *v10;
      v13 = **v10;
      *v12 = v13 + 1;
      *(_QWORD *)&v12[8 * v13 + 16] = a4;
    }
  }
  return !v7;
}

BOOL sub_22F070058(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a3 + 12);
  if (v4 == -1)
  {
    v13 = sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
    v8 = (unsigned __int8 **)sub_22F3E138C(a1, &v13, 2257, 0);
    if (v8)
    {
      v9 = v8;
      v10 = *v8;
      if (!v10)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v9[1]);
        *v9 = v10;
      }
      v10[*v10 + 1] = 2;
      v11 = *v9;
      v12 = **v9;
      *v11 = v12 + 1;
      *(_QWORD *)&v11[8 * v12 + 16] = a4;
    }
  }
  return v4 != -1;
}

BOOL sub_22F070108(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  _BOOL8 result;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  unsigned __int8 **v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t **v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 **v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  int v85;

  v6 = sub_22F06FD00((uint64_t *)a1, a2, a3, 0);
  result = 0;
  if (v6)
  {
    result = sub_22F3DC47C(a1, a2, (uint64_t)a3);
    if (result)
    {
      v8 = sub_22F06FFA0(a1, a2, a3, 0);
      result = 0;
      if (v8)
      {
        if (!sub_22F3E0A2C(a3))
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16)) & 1) == 0)
          {
            v83 = (_QWORD *)sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
            v19 = (unsigned __int8 **)sub_22F3E138C(a1, (uint64_t *)&v83, 2174, 0);
            if (v19)
            {
              v20 = v19;
              v21 = *v19;
              if (!v21)
              {
                v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
                *v20 = v21;
              }
              v21[*v21 + 1] = 2;
              v22 = *v20;
              v23 = **v20;
              *v22 = v23 + 1;
              *(_QWORD *)&v22[8 * v23 + 16] = 0;
              v22[(v23 + 1) + 1] = 2;
              v24 = *v20;
              v25 = **v20;
              *v24 = v25 + 1;
              *(_QWORD *)&v24[8 * v25 + 16] = 0;
            }
          }
          return 0;
        }
        v9 = a3[2];
        v10 = *(_QWORD *)a3;
        if ((_DWORD)v9)
        {
          v11 = v10 + v9;
          if ((*(_BYTE *)(v10 + v9 + 20) & 8) == 0)
          {
            v26 = 0;
            v27 = (uint64_t **)(v10 + 24);
            v28 = (uint64_t **)(v11 + 24);
            if ((_DWORD)v9 == -1)
              v29 = v27;
            else
              v29 = v28;
            v30 = **v29;
            if ((v30 & 2) == 0)
            {
              v31 = v30 & 0xFFFFFFFFFFFFFFFCLL;
              if (v31)
              {
                if ((*(_DWORD *)(v31 + 28) & 0x7Fu) - 49 >= 3)
                  v26 = 0;
                else
                  v26 = v31;
              }
            }
            sub_22F3D9370((uint64_t)a3, (uint64_t)&v83);
            while (1)
            {
              if (!v84)
                goto LABEL_59;
              if ((*((_BYTE *)v83 + v84 + 20) & 8) != 0)
                break;
              sub_22F3D9370((uint64_t)&v83, (uint64_t)&v78);
              sub_22F3E09A4((uint64_t *)&v83, (uint64_t *)&v78);
              sub_22F3E08B8(&v78);
            }
            if (v84 == 0xFFFFFFFFLL)
            {
LABEL_59:
              v48 = v83 + 3;
              goto LABEL_60;
            }
            v48 = (_QWORD *)((char *)v83 + v84 + 24);
LABEL_60:
            v49 = *(_QWORD *)(*v48 + 24);
            v50 = *(unsigned int *)(v49 + 288);
            if ((_DWORD)v50)
            {
              v51 = 0;
              v52 = 24 * v50;
              while (1)
              {
                v53 = v85 + *(_DWORD *)(*(_QWORD *)(v49 + 280) + v51 + 8);
                v78 = v83;
                v79 = v53;
                v80 = v53;
                v81 = 0;
                v82 = 0;
                if (v83)
                {
                  sub_22F3DFDF8(v83, (uint64_t)&v78);
                  v53 = v79;
                  v54 = v78;
                }
                else
                {
                  v54 = 0;
                }
                if (!v53)
                  goto LABEL_77;
                v55 = (char *)v54 + v53;
                if ((v55[20] & 8) != 0)
                  break;
                sub_22F3E08B8(&v78);
                v51 += 24;
                if (v52 == v51)
                  goto LABEL_68;
              }
              if (v53 == -1)
              {
LABEL_77:
                v64 = (uint64_t **)(v54 + 3);
                goto LABEL_80;
              }
              v64 = (uint64_t **)(v55 + 24);
LABEL_80:
              v56 = 0;
              v65 = **v64;
              if ((v65 & 2) == 0)
              {
                v66 = v65 & 0xFFFFFFFFFFFFFFFCLL;
                if (v66)
                {
                  if ((*(_DWORD *)(v66 + 28) & 0x7Fu) - 49 >= 3)
                    v56 = 0;
                  else
                    v56 = v66;
                }
              }
              sub_22F3E08B8(&v78);
            }
            else
            {
LABEL_68:
              v56 = 0;
            }
            v78 = (_QWORD *)sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
            v67 = (unsigned __int8 **)sub_22F3E138C(a1, (uint64_t *)&v78, 2169, 0);
            if (v67)
            {
              v68 = v67;
              v69 = *v67;
              if (!v69)
              {
                v69 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v68[1]);
                *v68 = v69;
              }
              v69[*v69 + 1] = 2;
              v70 = *v68;
              v71 = **v68;
              *v70 = v71 + 1;
              *(_QWORD *)&v70[8 * v71 + 16] = 0;
              v70[(v71 + 1) + 1] = 11;
              v72 = *v68;
              v73 = **v68;
              *v72 = v73 + 1;
              *(_QWORD *)&v72[8 * v73 + 16] = v26;
              v72[(v73 + 1) + 1] = 2;
              v74 = *v68;
              v75 = **v68;
              *v74 = v75 + 1;
              *(_QWORD *)&v74[8 * v75 + 16] = v56 == 0;
              v74[(v75 + 1) + 1] = 11;
              v76 = *v68;
              v77 = **v68;
              *v76 = v77 + 1;
              *(_QWORD *)&v76[8 * v77 + 16] = v56;
            }
            sub_22F3E08B8(&v83);
            return 0;
          }
        }
        v12 = *(_QWORD *)(v10 + 8);
        if ((v12 & 0xFF00000000) == 0)
          goto LABEL_25;
        if (!*(_BYTE *)(v10 + 16))
          goto LABEL_25;
        v13 = *(uint64_t **)(v10 + 24);
        v14 = *((unsigned __int8 *)v13 + 42);
        if (!*((_BYTE *)v13 + 42))
          goto LABEL_25;
        v15 = *v13;
        v16 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v15 & 2) != 0 && v16)
        {
          v17 = (uint64_t *)(v16 + 8);
        }
        else
        {
          if ((v15 & 2) != 0
            || !v16
            || (v14 = *(_DWORD *)(v16 + 28) & 0x7F, (*(_DWORD *)(v16 + 28) & 0x7Fu) - 48 > 0x1A))
          {
LABEL_22:
            if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
            {
              v18 = *(_QWORD *)(a1 + 40);
              if (*(_DWORD *)(v18 + 324) == -1 || *(_DWORD *)(v18 + 320) != (_DWORD)v12)
              {
                v83 = (_QWORD *)sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
                v57 = (unsigned __int8 **)sub_22F3E138C(a1, (uint64_t *)&v83, 2173, 1);
                if (v57)
                {
                  v58 = v57;
                  v59 = *v57;
                  if (!v59)
                  {
                    v59 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v58[1]);
                    *v58 = v59;
                  }
                  v59[*v59 + 1] = 2;
                  v60 = *v58;
                  v61 = **v58;
                  *v60 = v61 + 1;
                  *(_QWORD *)&v60[8 * v61 + 16] = 0;
                }
                sub_22F066EF0(*(uint64_t **)(*(_QWORD *)a3 + 24));
                v63 = v62;
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
                  return 0;
                v46 = v63;
                v45 = a1;
                v47 = 2272;
                goto LABEL_75;
              }
            }
LABEL_25:
            if (!(_DWORD)v9 || (*(_BYTE *)(v10 + v9 + 20) & 0x10) == 0)
              return 1;
            v83 = (_QWORD *)sub_22F3E0284(*(_QWORD *)(a1 + 64), a2);
            v32 = a3[2];
            if ((v32 + 1) > 1)
              v33 = *(_QWORD *)a3 + v32;
            else
              v33 = *(_QWORD *)a3;
            v34 = 0;
            v35 = **(_QWORD **)(v33 + 24);
            if ((v35 & 2) == 0)
            {
              v36 = v35 & 0xFFFFFFFFFFFFFFFCLL;
              if (v36)
              {
                if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 49 >= 3)
                  v34 = 0;
                else
                  v34 = v36;
              }
            }
            v37 = (unsigned __int8 **)sub_22F3E138C(a1, (uint64_t *)&v83, 2170, 1);
            if (v37)
            {
              v38 = v37;
              v39 = *v37;
              if (!v39)
              {
                v39 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v38[1]);
                *v38 = v39;
              }
              v39[*v39 + 1] = 2;
              v40 = *v38;
              v41 = **v38;
              *v40 = v41 + 1;
              *(_QWORD *)&v40[8 * v41 + 16] = 0;
              v40[(v41 + 1) + 1] = 11;
              v42 = *v38;
              v43 = **v38;
              *v42 = v43 + 1;
              *(_QWORD *)&v42[8 * v43 + 16] = v34;
            }
            v44 = *(_DWORD *)(v34 + 24);
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
              return 0;
            v45 = a1;
            v46 = v44;
            v47 = 100;
LABEL_75:
            sub_22F072E10(v45, v46, v47);
            return 0;
          }
          v17 = (uint64_t *)(v16 + 48);
        }
        v14 = *v17;
        if ((*v17 & 1) != 0)
          goto LABEL_25;
        goto LABEL_22;
      }
    }
  }
  return result;
}

BOOL sub_22F07070C(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (!sub_22F06FD00(a1, a2, a3, 2)
    || !sub_22F3DC47C((uint64_t)a1, a2, (uint64_t)a3)
    || !sub_22F06FFA0((uint64_t)a1, a2, a3, 2))
  {
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if ((v7 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a3 + 16))
    {
      v8 = a1[5];
      if (*(_DWORD *)(v8 + 324) == -1 || *(_DWORD *)(v8 + 320) != (_DWORD)v7)
      {
        sub_22F3E135C(*(_QWORD *)(a1[8] + 16) + 8);
        sub_22F072828((uint64_t)a1, v9, 2238, 0, 0);
        return 0;
      }
    }
  }
  return sub_22F3DC5A4((uint64_t)a1, a2, (uint64_t *)a3);
}

BOOL sub_22F0707F4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a3;
  if (!*a3)
  {
    v6 = sub_22F3E0284(a1[8], a2);
    v7 = 0;
    v14 = v6;
    if ((v6 & 4) != 0)
    {
      v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*(unsigned __int8 *)v8 == 133)
          v7 = ((unint64_t)*v8 >> 18) & 1;
        else
          v7 = 0;
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) != 0)
    {
      v9 = (unsigned __int8 **)sub_22F3E138C((uint64_t)a1, &v14, 2273, 0);
      if (v9)
      {
        v10 = v9;
        v11 = *v9;
        if (!v11)
        {
          v11 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v10[1]);
          *v10 = v11;
        }
        v11[*v11 + 1] = 2;
        v12 = *v10;
        v13 = **v10;
        *v12 = v13 + 1;
        *(_QWORD *)&v12[8 * v13 + 16] = v7;
      }
    }
    else
    {
      sub_22F3E138C((uint64_t)a1, &v14, 103, 0);
    }
  }
  return v3 != 0;
}

uint64_t sub_22F0708F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(_DWORD *)(*(_QWORD *)(v2 + 16) + 28) & 0x7F) == 0x37)
    {
      v3 = *(unsigned int *)(a1 + 40);
      if ((v3 - 1) <= 0xFFFFFFFD)
      {
        v4 = (unsigned int *)(a1 + 32);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + v3 + 20) & 4) != 0)
          sub_22F3E0AD4(v4);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(unsigned int *)(a1 + 120);
  v7 = (unsigned int *)(v5 + 16 * v6);
  if (*(_DWORD *)(a1 + 112))
  {
    if ((_DWORD)v6)
    {
      v14 = 16 * v6;
      v8 = *(unsigned int **)(a1 + 104);
      while (*v8 >= 0xFFFFFFFE)
      {
        v8 += 4;
        v14 -= 16;
        if (!v14)
          goto LABEL_7;
      }
    }
    else
    {
      v8 = *(unsigned int **)(a1 + 104);
    }
  }
  else
  {
LABEL_7:
    v8 = (unsigned int *)(v5 + 16 * v6);
  }
  v9 = (unsigned int *)(v5 + 16 * v6);
LABEL_11:
  while (v8 != v9)
  {
    sub_22F3E0684(*(_QWORD *)(a1 + 16), *((_QWORD **)v8 + 1));
    v10 = v8 + 4;
    while (v10 != v7)
    {
      v11 = *v10;
      v10 += 4;
      if (v11 <= 0xFFFFFFFD)
      {
        v8 = v10 - 4;
        goto LABEL_11;
      }
    }
    v8 = v7;
  }
  sub_22F065CAC(a1 + 104);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v12)
    MEMORY[0x2348A0E84](v12, 0x1000C8077774924);
  sub_22F3E08B8((_QWORD **)(a1 + 32));
  return a1;
}

uint64_t sub_22F070A28(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _WORD *v16;
  _BYTE *v17;
  uint64_t result;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
  else
    v5 = 0;
  if (!v5
    || (*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
                  + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(v4 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4
    || (*(_DWORD *)(v4 + 28) & 0x7F) == 0x37)
  {
    goto LABEL_33;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
  v8 = *(_WORD *)(v4 + 80) & 0x7F;
  v9 = -40;
  if (v8 > 0x46)
  {
    if (v8 != 83)
    {
      if (v8 == 71)
      {
        v9 = -56;
        goto LABEL_26;
      }
      if (v8 == 81)
        goto LABEL_26;
LABEL_21:
      v10 = v8 - 52;
      v5 = v8 - 33 >= 5;
      v11 = -48;
      if (!v5)
        v11 = -64;
      if (v10 >= 6)
        v9 = v11;
      else
        v9 = -72;
    }
  }
  else
  {
    if (v8 > 0x18)
      goto LABEL_20;
    if (v8 != 16)
    {
      if (((1 << v8) & 0x1066) != 0)
        goto LABEL_26;
      if (v8 != 24)
      {
LABEL_20:
        if (v8 == 70)
        {
          v9 = -64;
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }
    v9 = -48;
  }
LABEL_26:
  v12 = *(_QWORD *)(v4 + 72 + v9 + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = (uint64_t)(v13 - 8);
  else
    v14 = 0;
  v15 = sub_22EF6477C(v7, v14);
  sub_22F070FE0(a2, (uint64_t **)(a1 + 32), v6, v15);
  v16 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 1uLL)
  {
    *v16 = 15917;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "->");
  }
LABEL_33:
  (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v4 + 88))(v4, a2);
  v17 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v17)
  {
    llvm::raw_ostream::write(a2, "(");
  }
  else
  {
    *v17 = 40;
    ++*((_QWORD *)a2 + 4);
  }
  result = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v19 = *(_BYTE *)(result + 16) == 26;
  else
    v19 = 0;
  if ((v19
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (result = sub_22F10CF48(result)) != 0)
    && (*(_QWORD *)(result + 16) & 0x3FFFC000000000) != 0)
  {
    v20 = sub_22F0665E4(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 56), *(_QWORD *)(**(_QWORD **)(v4 + 120) + 48));
    if ((v20 & 0xFF00000000) != 0)
      v21 = v20;
    else
      v21 = 9;
    __asm { BR              X9 }
  }
  v22 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v22)
    return llvm::raw_ostream::write(a2, ")");
  *v22 = 41;
  ++*((_QWORD *)a2 + 4);
  return result;
}

void sub_22F070FE0(llvm::raw_ostream *this, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v5;
  _BYTE *v8;
  unsigned int *v9;
  uint64_t **v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  __int128 *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  unsigned int *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _DWORD v36[5];
  uint64_t v37[4];
  uint64_t *v38;
  int v39;
  int v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD v43[10];

  v43[8] = *MEMORY[0x24BDAC8D0];
  if (!*a2)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v5 > 6uLL)
    {
      *(_DWORD *)((char *)v5 + 3) = 1920233580;
      *v5 = 1819047278;
      *((_QWORD *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, "nullptr");
    }
    return;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v8)
    {
      llvm::raw_ostream::write(this, "&");
    }
    else
    {
      *v8 = 38;
      ++*((_QWORD *)this + 4);
    }
  }
  v41 = (unsigned int *)v43;
  v42 = 0x200000000;
  sub_22F3E083C(&v38, a2);
  while ((v39 + 1) > 1 || v40)
  {
    v9 = v41;
    if (v42 >= HIDWORD(v42))
    {
      if (v41 <= (unsigned int *)&v38 && &v41[8 * v42] > (unsigned int *)&v38)
      {
        v13 = (char *)((char *)&v38 - (char *)v41);
        sub_22F3E02AC((uint64_t)&v41);
        v9 = v41;
        v10 = (uint64_t **)&v13[(_QWORD)v41];
      }
      else
      {
        sub_22F3E02AC((uint64_t)&v41);
        v10 = &v38;
        v9 = v41;
      }
    }
    else
    {
      v10 = &v38;
    }
    sub_22F3E083C((uint64_t **)&v9[8 * v42], v10);
    LODWORD(v42) = v42 + 1;
    v11 = v39;
    v12 = v40;
    if (v39 != v40)
    {
      v34 = v38;
      if (v39 == -1)
      {
        v35 = -1;
        memset(v36, 0, sizeof(v36));
        if (!v38)
          goto LABEL_19;
LABEL_18:
        sub_22F3DFDF8(v38, (uint64_t)&v34);
      }
      else
      {
        v35 = v39;
        v36[0] = v39;
        *(_QWORD *)&v36[1] = 0;
        *(_QWORD *)&v36[3] = 0;
        if (v38)
          goto LABEL_18;
      }
LABEL_19:
      sub_22F3D9148((uint64_t)&v34, (uint64_t)v37);
      goto LABEL_20;
    }
    sub_22F3D9370((uint64_t)&v38, (uint64_t)v37);
LABEL_20:
    sub_22F3E09A4((uint64_t *)&v38, v37);
    sub_22F3E08B8((_QWORD **)v37);
    if (v11 != v12)
      sub_22F3E08B8(&v34);
  }
  sub_22F3E08B8(&v38);
  v14 = *(_QWORD *)(*a2)[3];
  v15 = (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v14 & 2) != 0 || !v15)
  {
    if ((v14 & 2) != 0 && v15)
      sub_22F0D9044(v15, (uint64_t)this, 0, (__int128 *)(a3 + 15104), 0, "\n", 1uLL, 0);
  }
  else if ((v15[7] & 0x7Fu) - 75 >= 0xFFFFFFE5)
  {
    (*(void (**)(_DWORD *, llvm::raw_ostream *))(*(_QWORD *)v15 + 88))(v15, this);
  }
  v16 = v41;
  if ((_DWORD)v42)
  {
    v17 = (__int128 *)(a3 + 15104);
    v18 = &v41[8 * v42 - 8];
    do
    {
      v19 = v18[2];
      if ((v19 + 1) > 1)
        v20 = *(_QWORD *)v18 + v19;
      else
        v20 = *(_QWORD *)v18;
      if (*(_BYTE *)(*(_QWORD *)(v20 + 24) + 43))
      {
        v24 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v24)
        {
          llvm::raw_ostream::write(this, "[");
        }
        else
        {
          *v24 = 91;
          ++*((_QWORD *)this + 4);
        }
        sub_22F3D9148((uint64_t)v18, (uint64_t)&v38);
        sub_22F3D9E58((unsigned int *)&v38);
        v25 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if (*((_BYTE **)v25 + 3) == v26)
        {
          llvm::raw_ostream::write(v25, "]");
        }
        else
        {
          *v26 = 93;
          ++*((_QWORD *)v25 + 4);
        }
        sub_22F3E08B8(&v38);
      }
      else
      {
        v21 = sub_22F3D9E58(v18);
        v23 = *((_QWORD *)this + 3);
        v22 = *((_QWORD *)this + 4);
        if (v21)
        {
          if ((unint64_t)(v23 - v22) > 2)
          {
            *(_BYTE *)(v22 + 2) = 32;
            *(_WORD *)v22 = 11040;
            *((_QWORD *)this + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(this, " + ");
          }
          llvm::raw_ostream::operator<<();
        }
        else
        {
          if (v23 == v22)
          {
            llvm::raw_ostream::write(this, ".");
          }
          else
          {
            *(_BYTE *)v22 = 46;
            ++*((_QWORD *)this + 4);
          }
          v29 = v18[2];
          if ((v29 + 1) > 1)
            v30 = *(_QWORD *)v18 + v29;
          else
            v30 = *(_QWORD *)v18;
          v31 = **(_QWORD **)(v30 + 24);
          v32 = (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 2) != 0 || !v32)
          {
            if ((v31 & 2) != 0 && v32)
              sub_22F0D9044(v32, (uint64_t)this, 0, v17, 0, "\n", 1uLL, 0);
          }
          else if ((v32[7] & 0x7Fu) - 75 >= 0xFFFFFFE5)
          {
            (*(void (**)(_DWORD *, llvm::raw_ostream *))(*(_QWORD *)v32 + 88))(v32, this);
          }
        }
      }
      v27 = v18 - 8;
      v28 = v18 == v41;
      v18 -= 8;
    }
    while (!v28);
    if ((_DWORD)v42)
    {
      v33 = 8 * v42;
      do
      {
        sub_22F3E08B8((_QWORD **)&v27[v33]);
        v33 -= 8;
      }
      while (v33 * 4);
      v16 = v41;
    }
    else
    {
      v16 = v27 + 8;
    }
  }
  if (v16 != v43)
    free(v16);
}

uint64_t sub_22F071570(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
    return *(_QWORD *)(a1 + 8);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
}

uint64_t *sub_22F071598@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t ***a3@<X8>)
{
  uint64_t v5;
  uint64_t *result;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t **v15;
  unsigned int v16;

  v16 = a2;
  v5 = a1 + 104;
  result = (uint64_t *)sub_22F067004((uint64_t *)(a1 + 104), &v16);
  if ((uint64_t *)(*(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)) == result)
  {
    v8 = sub_22F3DC390(*(_QWORD *)(a1 + 24), v16);
    v10 = (uint64_t *)v9;
    v11 = *(unsigned int *)(v9 + 16) + 32;
    v7 = (uint64_t **)operator new[]();
    bzero(v7, v11);
    *v7 = 0;
    *((_DWORD *)v7 + 2) = -1;
    *((_BYTE *)v7 + 12) = 1;
    *((_WORD *)v7 + 8) = 0;
    *((_BYTE *)v7 + 18) = 0;
    v7[3] = v10;
    switch(v8)
    {
      case 0:
      case 1:
      case 8:
        *((_BYTE *)v7 + 32) = *(_BYTE *)(*(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v16);
        break;
      case 2:
      case 3:
        *((_WORD *)v7 + 16) = *(_WORD *)(*(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v16);
        break;
      case 4:
      case 5:
        *((_DWORD *)v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v16);
        break;
      case 6:
      case 7:
        v7[4] = *(uint64_t **)(*(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v16);
        break;
      case 9:
        sub_22F3E083C(v7 + 4, (uint64_t **)(*(_QWORD *)(a1 + 80) - *(unsigned int *)(a1 + 72) + v16));
        break;
      default:
        break;
    }
    v14 = v16;
    v15 = v7;
    sub_22F067FE0(v5, &v14, (uint64_t *)&v15, (uint64_t)&v13);
    v12 = (uint64_t)v15;
    v15 = 0;
    if (v12)
      MEMORY[0x2348A0E84](v12, 0x1000C8077774924);
    *a3 = v7;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 0;
  }
  else
  {
    v7 = (uint64_t **)result[1];
    *a3 = v7;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 0;
    if (!v7)
      return result;
  }
  return sub_22F3DFDF8((uint64_t *)v7, (uint64_t)a3);
}

uint64_t sub_22F07177C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 && *(_QWORD *)(v1 + 8))
    return *(_QWORD *)(a1 + 64);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

void sub_22F0717A4(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _DWORD v39[5];
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[6];

  v48[5] = *MEMORY[0x24BDAC8D0];
  v46 = v48;
  v47 = 0x500000000;
  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v10 = 0;
    v45 = 0;
    v7 = 1;
    goto LABEL_16;
  }
  v5 = **(_QWORD **)(v3 + 24);
  v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v5 & 2) != 0 || !v6 || (*(_DWORD *)(v6 + 28) & 0x7Fu) - 48 > 0x1A)
    v7 = v6 & (v5 << 62 >> 63) | 1;
  else
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = a1[2];
  v9 = (_DWORD)v8 == -1 || v8 == 0;
  v11 = *(_QWORD *)a1;
  if (v9)
    v12 = *(_QWORD *)a1 + 24;
  else
    v12 = *(_QWORD *)a1 + v8 + 24;
  v13 = *(_DWORD *)(*(_QWORD *)v12 + 12);
  v45 = 0;
  if (v13 == -1)
  {
    v10 = 0;
    goto LABEL_16;
  }
  v18 = a1[3];
  v40 = v11;
  v41 = v8;
  v42 = v18;
  v43 = 0;
  v44 = 0;
  if (v11 && !*(_BYTE *)(v11 + 16))
  {
    v19 = *(uint64_t **)v11;
    if (*(_QWORD *)v11)
      v19[2] = (uint64_t)&v40;
    v43 = 0;
    v44 = v19;
    *(_QWORD *)v11 = &v40;
  }
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFD)
  {
    while (v8 == v42)
    {
      v20 = **(_QWORD **)(v40 + v8 + 24);
      if ((v20 & 2) != 0)
        v21 = 0;
      else
        v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      if (v21)
      {
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          v26 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) + 32))(v21 & 0xFFFFFFFFFFFFFFF8);
        else
          v26 = 0;
        v27 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v27 = v47;
        }
        *((_QWORD *)v46 + v27) = v26;
        LODWORD(v47) = v47 + 1;
        v25 = v41;
        v24 = v40;
        if (v41 == -1)
        {
          v37 = v40;
          goto LABEL_45;
        }
        v28 = v41 - *(_DWORD *)(v40 + v41 + 16);
        v37 = v40;
        v38 = v28;
        v39[0] = v28;
        *(_QWORD *)&v39[1] = 0;
        *(_QWORD *)&v39[3] = 0;
LABEL_48:
        if (!*(_BYTE *)(v24 + 16))
        {
          v29 = *(_QWORD *)v24;
          if (*(_QWORD *)v24)
            *(_QWORD *)(v29 + 16) = &v37;
          *(_QWORD *)&v39[1] = 0;
          *(_QWORD *)&v39[3] = v29;
          *(_QWORD *)v24 = &v37;
        }
        goto LABEL_52;
      }
LABEL_32:
      v8 = v41;
      if ((unint64_t)v41 - 1 >= 0xFFFFFFFE)
        goto LABEL_64;
    }
    v22 = sub_22F3D9E58((unsigned int *)&v40);
    v23 = v47;
    if (v47 >= (unint64_t)HIDWORD(v47))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v47;
    }
    *((_QWORD *)v46 + v23) = v22;
    LODWORD(v47) = v47 + 1;
    v24 = v40;
    v25 = v41;
    v37 = v40;
    if (v41 == -1)
    {
LABEL_45:
      v38 = v25;
      memset(v39, 0, sizeof(v39));
      if (v24)
        goto LABEL_48;
    }
    else
    {
      v38 = v41;
      v39[0] = v41;
      *(_QWORD *)&v39[1] = 0;
      *(_QWORD *)&v39[3] = 0;
      if (v40)
        goto LABEL_48;
    }
LABEL_52:
    sub_22F3E09A4(&v40, &v37);
    v30 = v37;
    if (v37)
    {
      v31 = *(uint64_t **)v37;
      if (!*(_BYTE *)(v37 + 16))
      {
        v32 = *(uint64_t **)&v39[3];
        if (v31 == &v37)
        {
          *(_QWORD *)v37 = *(_QWORD *)&v39[3];
          v31 = v32;
        }
        v33 = *(_QWORD *)&v39[1];
        if (*(_QWORD *)&v39[1])
        {
          *(_QWORD *)(*(_QWORD *)&v39[1] + 24) = v32;
          v32 = *(uint64_t **)&v39[3];
        }
        if (v32)
          v32[2] = v33;
      }
      if (!v31 && *(_BYTE *)(v30 + 18))
        sub_22F3DFE5C((void *)(v30 - 24));
    }
    goto LABEL_32;
  }
LABEL_64:
  v10 = sub_22F3D9524(a1);
  v34 = v40;
  if (v40)
  {
    v35 = *(uint64_t **)v40;
    if (!*(_BYTE *)(v40 + 16))
    {
      if (v35 == &v40)
      {
        v35 = v44;
        *(_QWORD *)v40 = v44;
      }
      v36 = v43;
      if (v43)
        *(_QWORD *)(v43 + 24) = v44;
      if (v44)
        v44[2] = v36;
    }
    if (!v35 && *(_BYTE *)(v34 + 18))
      sub_22F3DFE5C((void *)(v34 - 24));
  }
LABEL_16:
  v14 = v3 == 0;
  v15 = v46;
  v16 = v47;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = -1;
  *(_DWORD *)a2 = 7;
  v17 = (void *)sub_22EF55C28(a2, v7, 0, &v45, v16, v10, v14);
  if ((_DWORD)v16)
    memcpy(v17, v15, 8 * v16);
  if (v46 != v48)
    free(v46);
}

uint64_t sub_22F071BC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (uint64_t *)(a1 + 248);
  v12 = a2;
  v13 = 0;
  if (!sub_22F246C54((uint64_t *)(a1 + 248), &v12, &v13)
    || v13 == *(_QWORD *)(a1 + 248) + 16 * *(unsigned int *)(a1 + 264))
  {
    if (a2)
    {
      v8 = a2;
      while (1)
      {
        v12 = v8;
        v13 = 0;
        if (sub_22F246C54(v4, &v12, &v13))
        {
          if (v13 != *(_QWORD *)(a1 + 248) + 16 * *(unsigned int *)(a1 + 264))
            break;
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        v7 = 0;
        v6 = 0;
        v5 = 0;
        if (!v8)
          return v7 | v5 | v6;
      }
      v10 = *(_DWORD *)(v13 + 8);
      v13 = a2;
      v11 = sub_22F283EC0(v4, &v13);
      v7 = 0;
      v6 = 0;
      v5 = 0;
      *((_DWORD *)v11 + 2) = v10;
    }
    else
    {
      v7 = 0;
      v6 = 0;
      v5 = 0;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v13 + 8) & 0xFFFFFF00;
    v6 = *(_DWORD *)(v13 + 8);
    v7 = 0x100000000;
  }
  return v7 | v5 | v6;
}

uint64_t sub_22F071CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;

  v2 = a2;
  v4 = 0;
  v5 = 1;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v6 = 0;
    v4 = !sub_22E3CB5E0(a2);
    v7 = v2;
    do
    {
      v8 = sub_22EFBC5B4(v7);
      v5 = v8 == 0;
      if (v8)
        break;
      if ((*(_BYTE *)(v7 + 72) & 3) != 0)
      {
        if (v6)
          break;
        v6 = 1;
      }
      v9 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
      if (v9 == v2)
        break;
      v7 = v9;
    }
    while (v9);
  }
  v14 = v2 & 0xFFFFFFFFFFFFFFFDLL;
  v10 = sub_22F3E0DB4(a1, &v14, *(_QWORD *)(v2 + 48), v4, v5);
  if (!HIDWORD(v10))
    return 0;
  v12 = v10;
  v13 = (uint64_t *)(a1 + 248);
  do
  {
    v14 = v2;
    *((_DWORD *)sub_22F283EC0(v13, &v14) + 2) = v12;
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  while (v2);
  return v12 | 0x100000000;
}

uint64_t sub_22F071DF4(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      if (*(_BYTE *)(v12 + 16) == 45)
      {
        v13 = sub_22F114198(*(_QWORD *)(v12 + 24));
        v14 = sub_22F0721D8((uint64_t)a1, v13);
        if (v14)
        {
          v20 = v14;
          result = sub_22E3CD3D4((uint64_t)(a1 + 16), 72, 3);
          *(_QWORD *)result = *a2;
          v22 = *(_DWORD *)(v20 + 644) + *(_DWORD *)(v20 + 640);
          if (v22 <= 8)
            v22 = 8;
          *(_DWORD *)(result + 8) = v22;
          *(_DWORD *)(result + 12) = v22;
          *(_DWORD *)(result + 16) = v22;
          *(_QWORD *)(result + 24) = v20;
          *(_QWORD *)(result + 32) = 0;
          *(_BYTE *)(result + 40) = a4;
          *(_BYTE *)(result + 41) = a6;
          *(_BYTE *)(result + 42) = a5;
          *(_BYTE *)(result + 43) = 0;
          *(_QWORD *)(result + 48) = sub_22F066A38;
          *(_QWORD *)(result + 56) = sub_22F066D38;
          v23 = sub_22F066E30;
          goto LABEL_20;
        }
      }
    }
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v18 = a3;
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        goto LABEL_6;
      v18 = sub_22F10CF48(a3);
      if (!v18)
        goto LABEL_6;
      v15 = *(_DWORD *)(v18 + 16);
    }
    v19 = *(_QWORD *)(v18 + 32);
    if (v15 == 4)
      break;
    if (v15 == 2)
    {
      v31 = (unint64_t *)(v18 + 40);
      if (*(_DWORD *)(v18 + 48) >= 0x41u)
        v31 = (unint64_t *)*v31;
      v32 = *v31;
      v33 = sub_22F0665E4(*a1, v19);
      if ((v33 & 0xFF00000000) != 0)
      {
        if (v32 >= 0xFFFFFFFF / dword_22F4A5A18[(int)v33])
          return 0;
        v39 = (uint64_t)(a1 + 16);
        v40 = v33;
        v25 = sub_22E3CD3D4(v39, 72, 3);
        v26 = a2;
        v27 = v40;
        v28 = v32;
        return sub_22F3CD948(v25, v26, v27, v28, a4, a5, a6);
      }
      result = sub_22F071DF4(a1, a2, *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0), a4, a5, 0);
      if (!result)
        return result;
      v34 = result;
      if (v32 >= 0xFFFFFFFF / (*(_DWORD *)(result + 16) + 16))
        return 0;
      result = sub_22E3CD3D4((uint64_t)(a1 + 16), 72, 3);
      *(_QWORD *)result = *a2;
      v35 = *(_DWORD *)(v34 + 16) + 16;
      *(_DWORD *)(result + 8) = v35;
      *(_DWORD *)(result + 12) = v35 * v32;
      if ((v35 * v32) <= 8)
        v36 = 8;
      else
        v36 = v35 * v32;
      *(_DWORD *)(result + 16) = v36;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = v34;
      *(_BYTE *)(result + 40) = a4;
      *(_BYTE *)(result + 41) = a6;
      *(_BYTE *)(result + 42) = a5;
LABEL_31:
      *(_BYTE *)(result + 43) = 1;
      *(_QWORD *)(result + 48) = sub_22F0667E0;
      *(_QWORD *)(result + 56) = sub_22F066910;
      v23 = sub_22F066994;
LABEL_20:
      *(_QWORD *)(result + 64) = v23;
      return result;
    }
LABEL_6:
    v16 = *(unsigned __int8 *)(a3 + 16);
    if (v16 == 6)
    {
      v17 = a3;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 6)
        goto LABEL_22;
      v17 = sub_22F10CF48(a3);
      if (!v17)
      {
        v16 = *(unsigned __int8 *)(a3 + 16);
LABEL_22:
        if (v16 != 12)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
          {
            result = sub_22F10CF48(a3);
            if (result)
            {
              a3 = result;
              goto LABEL_26;
            }
            return result;
          }
          return 0;
        }
LABEL_26:
        v24 = sub_22F0665E4(*a1, *(_QWORD *)(a3 + 32));
        v25 = sub_22E3CD3D4((uint64_t)(a1 + 16), 72, 3);
        v26 = a2;
        v27 = v24;
        v28 = 2;
        return sub_22F3CD948(v25, v26, v27, v28, a4, a5, a6);
      }
    }
    a3 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v29 = sub_22F0665E4(*a1, v19);
  if ((v29 & 0xFF00000000) != 0)
  {
    v37 = v29;
    v38 = sub_22E3CD3D4((uint64_t)(a1 + 16), 72, 3);
    return sub_22F3CD9FC(v38, a2, v37, a5);
  }
  result = sub_22F071DF4(a1, a2, *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0), a4, a5, 0);
  if (result)
  {
    v30 = result;
    result = sub_22E3CD3D4((uint64_t)(a1 + 16), 72, 3);
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(v30 + 16) + 16;
    *(_QWORD *)(result + 12) = 0x8FFFFFFFFLL;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = v30;
    *(_WORD *)(result + 40) = 1;
    *(_BYTE *)(result + 42) = a5;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_22F0721D8(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  unint64_t *v47;
  char *v48;
  __int128 v49;
  int v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[64];
  void *v65;
  uint64_t v66;
  _QWORD v67[34];

  v67[32] = *MEMORY[0x24BDAC8D0];
  v3 = sub_22EFC3500(a2);
  if (!v3)
    return 0;
  v6 = v3;
  v65 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 288), v3, &v65))
    v7 = v65 == (void *)(*(_QWORD *)(a1 + 272) + 16 * *(unsigned int *)(a1 + 288));
  else
    v7 = 1;
  if (!v7)
    return *((_QWORD *)v65 + 1);
  v65 = v67;
  v66 = 0x800000000;
  v62 = v64;
  v63 = 0x200000000;
  if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v10 = sub_22E46A3A0(v6);
    if (v10 != v11)
    {
      v12 = v10;
      v13 = v11;
      v9 = 0;
      while (1)
      {
        if ((*(_BYTE *)(v12 + 12) & 1) == 0)
        {
          v14 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
            v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
          v15 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v16 = sub_22F0721D8(a1, v15);
          if (!v16)
            goto LABEL_32;
          v17 = v16;
          v18 = sub_22E3CD3D4(a1 + 128, 72, 3);
          *(_QWORD *)v18 = v15 & 0xFFFFFFFFFFFFFFFDLL;
          v19 = *(_DWORD *)(v17 + 644) + *(_DWORD *)(v17 + 640);
          if (v19 <= 8)
            v19 = 8;
          *(_DWORD *)(v18 + 8) = v19;
          *(_DWORD *)(v18 + 12) = v19;
          *(_DWORD *)(v18 + 16) = v19;
          *(_QWORD *)(v18 + 24) = v17;
          *(_QWORD *)(v18 + 32) = 0;
          *(_DWORD *)(v18 + 40) = 0;
          *(_QWORD *)(v18 + 48) = sub_22F066A38;
          *(_QWORD *)(v18 + 56) = sub_22F066D38;
          *(_QWORD *)(v18 + 64) = sub_22F066E30;
          v20 = v9 + 16;
          v58 = (void *)v15;
          LODWORD(v59) = v20;
          v60 = v18;
          v61 = v17;
          v21 = (_OWORD *)sub_22E78DF7C((uint64_t)&v65, (unint64_t)&v58, 1);
          v22 = (char *)v65 + 32 * v66;
          v23 = v21[1];
          *v22 = *v21;
          v22[1] = v23;
          LODWORD(v66) = v66 + 1;
          v9 = ((*(_DWORD *)(v17 + 640) + 7) & 0xFFFFFFF8) + v20;
        }
        v12 += 24;
        if (v12 == v13)
          goto LABEL_23;
      }
    }
    v9 = 0;
LABEL_23:
    v24 = sub_22E483108(v6);
    if (v24 != v25)
    {
      v26 = v24;
      v27 = v25;
      v8 = 0;
      while (1)
      {
        v28 = *(_QWORD *)(**(_QWORD **)(v26 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v28 + 8) & 0xF) != 0)
          v28 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v26 + 16));
        v29 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v30 = sub_22F0721D8(a1, v29);
        if (!v30)
          break;
        v31 = v30;
        v32 = sub_22E3CD3D4(a1 + 128, 72, 3);
        *(_QWORD *)v32 = v29 & 0xFFFFFFFFFFFFFFFDLL;
        v33 = *(_DWORD *)(v31 + 644) + *(_DWORD *)(v31 + 640);
        if (v33 <= 8)
          v33 = 8;
        *(_DWORD *)(v32 + 8) = v33;
        *(_DWORD *)(v32 + 12) = v33;
        *(_DWORD *)(v32 + 16) = v33;
        *(_QWORD *)(v32 + 24) = v31;
        *(_QWORD *)(v32 + 32) = 0;
        *(_DWORD *)(v32 + 40) = 0;
        *(_QWORD *)(v32 + 48) = sub_22F066A38;
        *(_QWORD *)(v32 + 56) = sub_22F066D38;
        *(_QWORD *)(v32 + 64) = sub_22F066E30;
        v34 = v8 + 16;
        v58 = (void *)v29;
        LODWORD(v59) = v34;
        v60 = v32;
        v61 = v31;
        v35 = (_OWORD *)sub_22E78DF7C((uint64_t)&v62, (unint64_t)&v58, 1);
        v36 = (char *)v62 + 32 * v63;
        v37 = v35[1];
        *v36 = *v35;
        v36[1] = v37;
        LODWORD(v63) = v63 + 1;
        v8 = ((*(_DWORD *)(v31 + 640) + 7) & 0xFFFFFFF8) + v34;
        v26 += 24;
        if (v26 == v27)
          goto LABEL_34;
      }
LABEL_32:
      v4 = 0;
      goto LABEL_56;
    }
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
LABEL_34:
  v58 = &v60;
  v59 = 0x800000000;
  v38 = sub_22EFC3B90(v6);
  if (!v38)
    goto LABEL_52;
  v39 = v38;
LABEL_36:
  v40 = *(_QWORD *)(v39 + 48);
  if ((v40 & 1) != 0)
    v41 = 1;
  else
    v41 = *(_BYTE *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
  v42 = *(_DWORD *)(v39 + 68);
  v43 = sub_22F0665E4(*(uint64_t **)a1, *(_QWORD *)(v39 + 48));
  if ((v43 & 0xFF00000000) != 0)
  {
    v50 = v43;
    v55 = v39 & 0xFFFFFFFFFFFFFFFDLL;
    v44 = sub_22E3CD3D4(a1 + 128, 72, 3);
    sub_22F3CD8AC(v44, &v55, v50, v41, 0, (v42 & 2) != 0);
LABEL_41:
    v45 = v9 + 16;
    v55 = v39;
    v56 = v45;
    v57 = v44;
    v46 = (char *)v58;
    if (v59 >= HIDWORD(v59))
    {
      if (v58 <= &v55 && (char *)v58 + 24 * v59 > (char *)&v55)
      {
        v51 = (char *)&v55 - (_BYTE *)v58;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = (char *)v58;
        v47 = (unint64_t *)((char *)v58 + v51);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v47 = &v55;
        v46 = (char *)v58;
      }
    }
    else
    {
      v47 = &v55;
    }
    v48 = &v46[24 * v59];
    v49 = *(_OWORD *)v47;
    *((_QWORD *)v48 + 2) = v47[2];
    *(_OWORD *)v48 = v49;
    LODWORD(v59) = v59 + 1;
    v9 = ((*(_DWORD *)(v44 + 16) + 7) & 0xFFFFFFF8) + v45;
    while (1)
    {
      v39 = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v39)
        break;
      if ((*(_DWORD *)(v39 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_36;
    }
LABEL_52:
    v52 = a1 + 272;
    v4 = sub_22E3CD3D4(a1 + 128, 648, 3);
    v53 = v6;
    v54 = sub_22F3E0FC8(v4, v6, (uint64_t)&v65, (uint64_t)&v58, (uint64_t **)&v62, v8, v9);
    sub_22F2543D4((uint64_t)&v55, v52, &v53, &v54);
    goto LABEL_54;
  }
  v55 = v39 & 0xFFFFFFFFFFFFFFFDLL;
  v44 = sub_22F071DF4(a1, &v55, *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0), v41, 0, (v42 >> 1) & 1);
  if (v44)
    goto LABEL_41;
  v4 = 0;
LABEL_54:
  if (v58 != &v60)
    free(v58);
LABEL_56:
  if (v62 != v64)
    free(v62);
  if (v65 != v67)
    free(v65);
  return v4;
}

void sub_22F0727C8(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = *a1;
  v2 = (unsigned __int8 *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0 && v2)
  {
    if (*v2 - 102 > 0x84)
      sub_22F0D5A50((uint64_t)v2);
    else
      sub_22EFF605C((uint64_t)v2);
  }
  else if ((v1 & 4) == 0 && v2)
  {
    (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  }
}

uint64_t sub_22F072828(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  unsigned __int8 **v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 **v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int v60;
  _BYTE v61[64];
  uint64_t v62;
  void *v63;
  __int128 v64;
  _QWORD v65[18];

  v65[16] = *MEMORY[0x24BDAC8D0];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v11 = *(_QWORD *)a1;
  if (!*(_QWORD *)(v10 + 8))
  {
    (*(void (**)(uint64_t, _QWORD))(v11 + 72))(a1, 0);
    return 0;
  }
  v12 = v10;
  if (((*(uint64_t (**)(uint64_t))(v11 + 104))(a1) & 1) != 0)
    return 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) - 1;
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 1992) + 8)
                  + 28);
  if (v14 + 1 < v13)
    v15 = v14 + 1;
  else
    v15 = v13;
  if (v14)
    v13 = v15;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    v16 = 0;
  else
    v16 = v13;
  v17 = v12;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a5 ^ 1u);
  v18 = *(_QWORD *)(v12 + 8);
  v19 = *(unsigned int *)(v18 + 8);
  v20 = v18;
  if ((_DWORD)v19)
  {
    v60 = v16;
    v21 = *(_QWORD *)v18;
    v22 = 32 * v19;
    do
    {
      v23 = v21 + v22;
      v24 = *(_QWORD *)(v21 + v22 - 24);
      if (v24)
      {
        v25 = *(_QWORD *)(v23 - 16);
        if (v25)
        {
          sub_22E3BB10C(v25, v24);
          *(_QWORD *)(v23 - 24) = 0;
        }
      }
      v22 -= 32;
    }
    while (v22);
    v17 = v12;
    v20 = *(_QWORD *)(v12 + 8);
    v16 = v60;
  }
  *(_DWORD *)(v18 + 8) = 0;
  if (*(_DWORD *)(v20 + 12) < a4 + v16 + 1)
    sub_22F2F1F4C(v20);
  sub_22F072E10(a1, a2, a3);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) - 1;
    v27 = v14 != 0;
    v28 = v26 - v14;
    v29 = v26 > v14;
    v30 = v27 && v29 ? v14 >> 1 : 0;
    v31 = v27 && v29 ? (v14 & 1) + (v14 >> 1) : v26;
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (v32 != v33)
    {
      v34 = v33;
      v35 = 0;
      v36 = v26 - v30;
      while (1)
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
        v38 = v37;
        if (v35 < v31 || v35 >= v36)
          break;
        if (v31 == v35)
        {
          v39 = (unsigned __int8 **)sub_22F072E10(a1, v37, 2193);
          v40 = *v39;
          if (!*v39)
          {
            v40 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v39[1]);
            *v39 = v40;
          }
          v40[*v40 + 1] = 3;
          v41 = *v39;
          v42 = **v39;
          *v41 = v42 + 1;
          *(_QWORD *)&v41[8 * v42 + 16] = v28;
        }
LABEL_65:
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        ++v35;
        if (v32 == v34)
          return **(_QWORD **)(v17 + 8) + 8;
      }
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      if (!v43 || (v44 = v43, (*(_DWORD *)(v43 + 28) & 0x7F) != 0x37) || (*(_BYTE *)(v43 + 87) & 0x20) == 0)
      {
        v63 = v65;
        v64 = xmmword_22F44E310;
        sub_22F242C48((uint64_t)v61, (uint64_t)&v63);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v32 + 16))(v32, v61);
        v49 = (unsigned __int8 **)sub_22F072E10(a1, v38, 2191);
        sub_22E3B89A8(v49, *(void **)v62, *(_QWORD *)(v62 + 8));
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v61);
        if (v63 != v65)
          free(v63);
        goto LABEL_65;
      }
      v45 = (unsigned __int8 **)sub_22F072E10(a1, v38, 2214);
      v46 = v45;
      v47 = *(_WORD *)(v44 + 80) & 0x7F;
      v48 = -40;
      if (v47 > 0x46)
      {
        if (v47 != 83)
        {
          if (v47 == 71)
          {
            v48 = -56;
            goto LABEL_57;
          }
          if (v47 == 81)
            goto LABEL_57;
LABEL_51:
          v50 = v47 - 52;
          v51 = v47 - 33 >= 5;
          v52 = -64;
          if (v51)
            v52 = -48;
          v51 = v50 >= 6;
          v48 = -72;
          if (v51)
            v48 = v52;
        }
      }
      else
      {
        if (v47 > 0x18)
          goto LABEL_50;
        if (v47 != 16)
        {
          if (((1 << v47) & 0x1066) != 0)
            goto LABEL_57;
          if (v47 != 24)
          {
LABEL_50:
            if (v47 == 70)
            {
              v48 = -64;
              goto LABEL_57;
            }
            goto LABEL_51;
          }
        }
        v48 = -48;
      }
LABEL_57:
      v53 = *(_QWORD *)(v44 + 72 + v48 + 16);
      v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8);
      if ((v53 & 4) != 0)
        v54 = (_QWORD *)*v54;
      if (v54)
        v55 = v54 - 8;
      else
        v55 = 0;
      v56 = *v45;
      if (!*v46)
      {
        v56 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v46[1]);
        *v46 = v56;
      }
      v56[*v56 + 1] = 11;
      v57 = *v46;
      v58 = **v46;
      *v57 = v58 + 1;
      *(_QWORD *)&v57[8 * v58 + 16] = v55;
      goto LABEL_65;
    }
  }
  return **(_QWORD **)(v17 + 8) + 8;
}

uint64_t sub_22F072CEC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v9;

  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 8))
  {
    sub_22EFF605C(a2);
    return sub_22F072828(a1, v9, a3, a4, 0);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
    return 0;
  }
}

uint64_t sub_22F072D74(uint64_t a1, int a2, int a3, int a4)
{
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 8)
    && !*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 8) + 8))
  {
    return sub_22F072828(a1, a2, a3, a4, 1);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
  return 0;
}

uint64_t sub_22F072E10(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2128;
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + 8);
  v11 = a2;
  v14 = a3;
  v12 = 0;
  v13 = v6;
  v8 = sub_22E8928F4(v7, (unint64_t)&v11);
  if (v12 && v13)
    sub_22E3BB10C(v13, v12);
  v9 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 88))(a1, v8);
  return **(_QWORD **)(v9 + 8) + 32 * *(unsigned int *)(*(_QWORD *)(v9 + 8) + 8) - 24;
}

_QWORD *sub_22F072EB4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FAC61D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22F072EF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FAC61D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F072F44(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 15088);
  v4 = *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 120);
  v5 = sub_22F1E724C(v3, v4);
  sub_22F1E7344(v3, v4);
  return v5 << sub_22F28C8B4(a2);
}

uint64_t sub_22F072FB0(uint64_t a1, char a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(a1 + 16) + 15088);
  if ((a2 & 1) == 0 && v2[17] == 15 && v2[18] == 1 && v2[14] == 41)
    return 3;
  else
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 720))(v2);
}

BOOL sub_22F072FF4(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_22E463414(a2);
  if (result)
  {
    v5 = sub_22F0C975C(*(_QWORD *)(a1 + 16), a2);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 15088) + *(_QWORD *)(**(_QWORD **)(v6 + 15088) - 24));
    return **(_QWORD **)(v5 + 72) == v7 / sub_22EF5CDF0(v6, *(_QWORD *)(*(_QWORD *)(v6 + 16408) & 0xFFFFFFFFFFFFFFF0));
  }
  return result;
}

uint64_t sub_22F073068@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 2000) + 104) & 0xC) != 0)
  {
    result = operator new();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0x1000000000;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)result = &off_24FAC6248;
    *(_QWORD *)(result + 8) = v3;
    v5 = result + 128;
    *(_DWORD *)(result + 120) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = &off_24FAC6298;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0x1000000000;
    *(_DWORD *)(result + 48) = 0;
    v5 = result + 104;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 96) = 0;
  }
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  *a2 = result;
  return result;
}

uint64_t sub_22F073144()
{
  return 0;
}

uint64_t sub_22F073150()
{
  return 0;
}

uint64_t sub_22F07315C()
{
  return 0;
}

uint64_t sub_22F073164(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6248;
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  *(_QWORD *)a1 = &off_24FAC6298;
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(16 * *(unsigned int *)(a1 + 96)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  sub_22E6C6358(a1 + 16);
  return a1;
}

void sub_22F0731F8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6248;
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  *(_QWORD *)a1 = &off_24FAC6298;
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(16 * *(unsigned int *)(a1 + 96)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  sub_22E6C6358(a1 + 16);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F07329C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[28];
  int v6;
  uint64_t v7;

  v7 = a2;
  v3 = sub_22F07374C(a1, a2);
  v6 = v3;
  sub_22F294A80((uint64_t)v5, a1 + 128, &v7, &v6);
  return v3;
}

uint64_t sub_22F0732E8(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 48) + 1);
  *(_DWORD *)(a1 + 48) = v1;
  return v1;
}

uint64_t sub_22F0732FC()
{
  return 0;
}

uint64_t sub_22F073304(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  llvm *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D)
  {
    v3 = *(unsigned int *)(a2 + 100);
    *(_QWORD *)&v31 = a2 + 104;
    *((_QWORD *)&v31 + 1) = v3;
    v32 = 0;
    v4 = sub_22F0739B4(*(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 120), &v31, &v32);
    v5 = v32;
    if (v4)
    {
      result = (*((_DWORD *)v32 + 4) + 1);
LABEL_10:
      *((_DWORD *)v5 + 4) = result;
      return result;
    }
    v33 = v32;
    v7 = *(_DWORD *)(a1 + 112);
    v8 = *(unsigned int *)(a1 + 120);
    if (4 * v7 + 4 >= (3 * v8))
    {
      v9 = 2 * v8;
    }
    else
    {
      v9 = *(_DWORD *)(a1 + 120);
      if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 116) > v8 >> 3)
      {
LABEL_7:
        *(_DWORD *)(a1 + 112) = v7 + 1;
        if (*v5 != -1)
          --*(_DWORD *)(a1 + 116);
        *(_OWORD *)v5 = v31;
        *((_DWORD *)v5 + 4) = 0;
        result = 1;
        goto LABEL_10;
      }
    }
    v18 = *(llvm **)(a1 + 104);
    v19 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
    v21 = ((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8);
    if ((v21 + 1) > 0x40)
      v22 = (v21 + 1);
    else
      v22 = 64;
    *(_DWORD *)(a1 + 120) = v22;
    v23 = MEMORY[0x23489D23C]((_QWORD *)v22, 24 * v22, 8);
    *(_QWORD *)(a1 + 104) = v23;
    if (v18)
    {
      *(_QWORD *)(a1 + 112) = 0;
      v24 = *(unsigned int *)(a1 + 120);
      if ((_DWORD)v24)
      {
        v25 = 24 * v24;
        do
        {
          *v23 = xmmword_22F4572A0;
          v23 = (_OWORD *)((char *)v23 + 24);
          v25 -= 24;
        }
        while (v25);
      }
      if ((_DWORD)v8)
      {
        v26 = 24 * v8;
        v27 = v18;
        do
        {
          if (*(_QWORD *)v27 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v34 = 0;
            sub_22F0739B4(*(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 120), v27, &v34);
            v28 = v34;
            *(_OWORD *)v34 = *(_OWORD *)v27;
            *((_DWORD *)v28 + 4) = *((_DWORD *)v27 + 4);
            ++*(_DWORD *)(a1 + 112);
          }
          v27 = (llvm *)((char *)v27 + 24);
          v26 -= 24;
        }
        while (v26);
      }
      llvm::deallocate_buffer(v18, (void *)(24 * v8));
      v23 = *(_OWORD **)(a1 + 104);
      LODWORD(v29) = *(_DWORD *)(a1 + 120);
    }
    else
    {
      *(_QWORD *)(a1 + 112) = 0;
      v29 = *(unsigned int *)(a1 + 120);
      if ((_DWORD)v29)
      {
        v30 = 0;
        do
        {
          *(_OWORD *)((char *)v23 + v30) = xmmword_22F4572A0;
          v30 += 24;
        }
        while (24 * v29 != v30);
      }
    }
    sub_22F0739B4((uint64_t)v23, v29, &v31, &v33);
    v7 = *(_DWORD *)(a1 + 112);
    v5 = v33;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if ((v10 & 7) != 0)
    v11 = 0;
  else
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v31 = v11;
  if (!v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v12 + 16) != 45)
      v12 = 0;
    v13 = sub_22F114198(*(_QWORD *)(v12 + 24));
    v14 = sub_22EFC4258(v13);
    v15 = 0;
    if (v14)
    {
      v16 = *(_QWORD *)(v14 + 40);
      if ((v16 & 7) != 0)
        v15 = 0;
      else
        v15 = v16 & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)&v31 = v15;
  }
  v17 = sub_22E7448C8((_DWORD *)(a1 + 56), &v31);
  result = (*((_DWORD *)v17 + 2) + 1);
  *((_DWORD *)v17 + 2) = result;
  return result;
}

uint64_t sub_22F0735B8(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = (_DWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 7) != 0)
    v4 = 0;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  v8 = v4;
  v5 = sub_22E7448C8(v2, &v8);
  v6 = (*((_DWORD *)v5 + 2) + 1);
  *((_DWORD *)v5 + 2) = v6;
  return v6;
}

uint64_t sub_22F073600(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  if ((sub_22F246C54((uint64_t *)(a1 + 128), &v5, &v6) & 1) != 0)
    v3 = v6;
  else
    v3 = *(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144);
  return *(unsigned int *)(v3 + 8);
}

uint64_t sub_22F073654(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6298;
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(16 * *(unsigned int *)(a1 + 96)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  sub_22E6C6358(a1 + 16);
  return a1;
}

void sub_22F0736C8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6298;
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(16 * *(unsigned int *)(a1 + 96)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  sub_22E6C6358(a1 + 16);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F07374C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t v22;
  _BYTE v24[72];
  void *v25;
  __int128 v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(_WORD *)(a2 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_17;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_17;
    }
    if (v3 != 81)
    {
LABEL_12:
      v5 = v3 - 52;
      v6 = v3 - 33 >= 5;
      v7 = -48;
      if (!v6)
        v7 = -64;
      if (v5 >= 6)
        v4 = v7;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_11;
    if (v3 == 16)
    {
LABEL_4:
      v4 = -48;
      goto LABEL_17;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_4;
LABEL_11:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 72 + v4 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  v25 = v27;
  v26 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v24, (uint64_t)&v25);
  (*(void (**)(_QWORD, _QWORD *, _BYTE *))(**(_QWORD **)(a1 + 8) + 280))(*(_QWORD *)(a1 + 8), v10, v24);
  v12 = v25;
  v11 = v26;
  v13 = llvm::StringMapImpl::LookupBucketFor();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v13;
  v16 = *(_QWORD *)(v14 + 8 * v13);
  if (v16)
  {
    if (v16 != -8)
      goto LABEL_33;
    --*(_DWORD *)(a1 + 32);
  }
  v17 = MEMORY[0x23489D23C](v11 + 17, 8);
  v18 = v17;
  v19 = v17 + 16;
  if (v11)
    memcpy((void *)(v17 + 16), v12, v11);
  *(_BYTE *)(v19 + v11) = 0;
  *(_QWORD *)v18 = v11;
  *(_DWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v14 + 8 * v15) = v18;
  ++*(_DWORD *)(a1 + 28);
  for (i = (uint64_t *)(*(_QWORD *)(a1 + 16)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 16))); ; ++i)
  {
    v16 = *i;
    if (*i && v16 != -8)
      break;
  }
LABEL_33:
  v22 = (*(_DWORD *)(v16 + 8) + 1);
  *(_DWORD *)(v16 + 8) = v22;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v24);
  if (v25 != v27)
    free(v25);
  return v22;
}

uint64_t sub_22F0739B4(uint64_t a1, int a2, _QWORD *a3, uint64_t **a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  unsigned int v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v17 = 0;
    result = 0;
    goto LABEL_58;
  }
  v5 = a3;
  v6 = a2;
  v9 = *a3;
  v8 = a3[1];
  v10 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v71 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v71 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v71;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v11 = qword_253E4AB90;
  if (v8)
  {
    v12 = 0;
    v13 = v9 + 8 * v8;
    while (v12 <= 0x38)
    {
      v14 = v12 + 8;
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + v12) + 40);
      if ((v15 & 7) != 0)
        v16 = 0;
      else
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      *(uint64_t *)((char *)&v78 + v12) = v16;
      v12 += 8;
      if (8 * v8 == v14)
        goto LABEL_13;
    }
    v74 = v6;
    v20 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v11 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v21 = __ROR8__(v11 ^ 0xB492B66FBE98F273, 49);
    v22 = v11 ^ (v11 >> 47);
    v23 = v11 ^ (((0x9DDFEA08EB382D69 * (v22 ^ (0xB492B66FBE98F273 * v11))) ^ v11) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                               * (v22 ^ (0xB492B66FBE98F273 * v11)));
    v24 = v21 + v11 + v79;
    v25 = v83 + v21 - 0x4B6D499041670D8DLL * __ROR8__(v84 + v11 - 0x4B6D499041670D8DLL * v11, 42);
    v26 = v78 - 0x6D8ED9027DD26057 * v11;
    v27 = v22 + v26;
    v28 = v26 + v79 + v80;
    v29 = __ROR8__(v28, 44) + v26;
    v30 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v23) ^ ((0x9DDFEA08EB382D69 * v23) >> 47));
    v31 = (0xB492B66FBE98F273 * __ROR8__(v24, 37)) ^ v30;
    v32 = __ROR8__(v22 - 0x622015F714C7D297 * (v20 ^ (v20 >> 47)), 33);
    v33 = v29 + __ROR8__(v31 + v27 + v81, 21);
    v34 = 0xB492B66FBE98F273 * v32;
    v35 = v28 + v81;
    v36 = v30 + v82 - 0x4B6D499041670D8DLL * v32;
    v37 = __ROR8__(v83 + v84 + v36, 44) + v36 + __ROR8__(v25 + v80 + v85 + v36, 21);
    v38 = v83 + v84 + v36 + v85;
    if (v12 == 8 * v8)
    {
      v40 = 64;
    }
    else
    {
      v72 = v5;
      v73 = a4;
      v39 = v9 + v12;
      v40 = 64;
      do
      {
        v41 = 0;
        v42 = v31;
        do
        {
          v43 = v41 + 8;
          v44 = v39 + v41 + 8;
          v45 = *(_QWORD *)(*(_QWORD *)(v39 + v41) + 40);
          if ((v45 & 7) != 0)
            v46 = 0;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFFF8;
          *(uint64_t *)((char *)&v78 + v41) = v46;
          if (v44 == v13)
            break;
          v47 = v41 >= 0x31;
          v41 += 8;
        }
        while (!v47);
        if ((v43 & 0x7FFFFFFFFFFFFFB8) != 0)
        {
          v75 = v42;
          v76 = v40;
          v77 = v35;
          v48 = v38;
          sub_22E54F510(&v78, (_BYTE *)&v78 + v43, &v86);
          v42 = v75;
          v40 = v76;
          v38 = v48;
          v35 = v77;
        }
        v49 = v25 + v34 + v35 + v79;
        v25 = v83 + v35 - 0x4B6D499041670D8DLL * __ROR8__(v33 + v25 + v84, 42);
        v50 = v78 - 0x4B6D499041670D8DLL * v33;
        v31 = (0xB492B66FBE98F273 * __ROR8__(v49, 37)) ^ v37;
        v33 = __ROR8__(v50 + v79 + v80, 44) + v50 + __ROR8__(v31 + v38 + v50 + v81, 21);
        v39 += v43;
        v34 = 0xB492B66FBE98F273 * __ROR8__(v38 + v42, 33);
        v51 = v34 + v37 + v82;
        v35 = v50 + v79 + v80 + v81;
        v37 = __ROR8__(v83 + v84 + v51, 44) + v51 + __ROR8__(v25 + v80 + v51 + v85, 21);
        v38 = v83 + v84 + v51 + v85;
        v40 += v43;
      }
      while (v44 != v13);
      a4 = v73;
      v5 = v72;
    }
    v52 = 0x9DDFEA08EB382D69
        * (v38 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v38)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v38)));
    v53 = v31 - 0x4B6D499041670D8DLL * (v25 ^ (v25 >> 47)) - 0x622015F714C7D297 * (v52 ^ (v52 >> 47));
    v54 = 0x9DDFEA08EB382D69
        * (v37 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v37)));
    v55 = v34 - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47)) - 0x622015F714C7D297 * (v54 ^ (v54 >> 47));
    v19 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v55 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v55 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v55)))) >> 47));
    v6 = v74;
  }
  else
  {
    v14 = 0;
LABEL_13:
    LODWORD(v19) = sub_22E3D0FB4(&v78, v14, v11);
  }
  v56 = 0;
  v57 = (v6 - 1) & v19;
  v58 = *v5;
  v59 = v5[1];
  for (i = 1; ; ++i)
  {
    v17 = (uint64_t *)(a1 + 24 * v57);
    v61 = *v17;
    if (v58 == -1 || v61 == -1)
      break;
    if (v58 != -2 && v61 != -2)
    {
      if (v59 == v17[1])
      {
        if (!v59)
          goto LABEL_57;
        v62 = 8 * v59;
        v63 = *v5;
        v64 = *v17;
        while (1)
        {
          v65 = *(_QWORD *)(*(_QWORD *)v63 + 40);
          v66 = (v65 & 7) != 0 ? 0 : v65 & 0xFFFFFFFFFFFFFFF8;
          v67 = *(_QWORD *)(*(_QWORD *)v64 + 40);
          v68 = (v67 & 7) != 0 ? 0 : v67 & 0xFFFFFFFFFFFFFFF8;
          if (v66 != v68)
            break;
          v63 += 8;
          v64 += 8;
          v62 -= 8;
          if (!v62)
            goto LABEL_57;
        }
      }
      goto LABEL_48;
    }
    if (v58 == -2 && v61 == -2)
      goto LABEL_57;
LABEL_49:
    if (v56)
      v69 = 0;
    else
      v69 = v61 == -2;
    if (v69)
      v56 = (uint64_t *)(a1 + 24 * v57);
    v70 = v57 + i;
    v57 = v70 & (v6 - 1);
  }
  if (v58 == -1 && v61 == -1)
  {
LABEL_57:
    result = 1;
    goto LABEL_58;
  }
LABEL_48:
  if (v61 != -1)
    goto LABEL_49;
  result = 0;
  if (v56)
    v17 = v56;
LABEL_58:
  *a4 = v17;
  return result;
}

uint64_t sub_22F073F0C()
{
  return 0;
}

uint64_t sub_22F073F14(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC62E8;
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  return sub_22F076E30(a1);
}

void sub_22F073F6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC62E8;
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  sub_22F076E30(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F073FD8(uint64_t a1)
{
  return sub_22F29444C(a1 + 56);
}

void sub_22F073FE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  BOOL v26;
  const std::string::value_type *p_p;
  std::string::size_type v28;
  char *v29;
  unint64_t v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  uint64_t v33;
  void *__p;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a3 + 23) = 7;
  strcpy((char *)a3, "<lambda");
  v6 = sub_22F3B1CF4(a2);
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 112) & 0x7FFFFFFF;
  if (v6)
  {
    v8 = v6;
    if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x40)
    {
      v9 = *(_QWORD *)(v6 + 16);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      if (v10 && (*(_WORD *)(v10 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v10 - 24) & 0xFFFFFFFFFFFFFFF0);
        if (v12)
          v13 = *(_BYTE *)(v12 + 16) == 26;
        else
          v13 = 0;
        if (!v13)
        {
          v33 = v8;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          {
            v14 = 0;
LABEL_16:
            v15 = (*(_DWORD *)(v8 + 96) >> 20);
            if (v15 == 255)
            {
              v16 = v8;
              if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x53)
              {
                v17 = *(_QWORD *)(v8 + 16);
                v18 = v17 & 0xFFFFFFFFFFFFFFF8;
                if ((v17 & 4) != 0)
                  v18 = *(_QWORD *)v18;
                for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
                {
                  v20 = -40;
                  if (i > 70)
                  {
                    if (i == 71)
                    {
                      v20 = -56;
                    }
                    else if (i != 81)
                    {
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    if (i > 0x18)
                      goto LABEL_30;
                    if (i == 16)
                      goto LABEL_24;
                    if (((1 << i) & 0x1066) != 0)
                      goto LABEL_37;
                    if (i == 24)
                    {
LABEL_24:
                      v20 = -48;
                    }
                    else
                    {
LABEL_30:
                      if (i != 70)
                      {
LABEL_31:
                        v21 = i - 52;
                        if ((i - 33) >= 5)
                          v22 = -48;
                        else
                          v22 = -64;
                        if (v21 >= 6)
                          v20 = v22;
                        else
                          v20 = -72;
                        goto LABEL_37;
                      }
                      v20 = -64;
                    }
                  }
LABEL_37:
                  v23 = *(_QWORD *)(v18 + v20 + 16);
                  v18 = v23 & 0xFFFFFFFFFFFFFFF8;
                  if ((v23 & 4) != 0)
                    v18 = *(_QWORD *)v18;
                }
                v16 = v18 - 40;
              }
              v15 = sub_22F36F2CC(*(_QWORD *)(v16 + 88), v8);
            }
            v24 = (v14 - v15);
            if (v14 == v15)
            {
              v25 = &v38;
              v38 = 48;
            }
            else
            {
              v25 = v39;
              do
              {
                *--v25 = (v24 % 0xA) | 0x30;
                v26 = v24 > 9;
                v24 /= 0xAuLL;
              }
              while (v26);
            }
            sub_22E3B4274(&__p, v25, v39, v39 - v25);
            if (v36 >= 0)
              p_p = (const std::string::value_type *)&__p;
            else
              p_p = (const std::string::value_type *)__p;
            if (v36 >= 0)
              v28 = v36 & 0x7F;
            else
              v28 = v35;
            std::string::append((std::string *)a3, p_p, v28);
            if (v36 < 0)
              operator delete(__p);
            std::string::append((std::string *)a3, "_");
            goto LABEL_58;
          }
          v12 = sub_22F10CF48(v12);
          v8 = v33;
          if (!v12)
          {
            v14 = 0;
            goto LABEL_16;
          }
        }
        v14 = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
        goto LABEL_16;
      }
    }
  }
LABEL_58:
  if (v7
    || (v37 = a2, __p = 0, sub_22F25AD78((uint64_t *)(a1 + 80), &v37, &__p))
    && __p != (void *)(*(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96))
    && (v7 = *((_DWORD *)__p + 2)) != 0)
  {
    v29 = v39;
    v30 = v7;
    do
    {
      *--v29 = (v30 % 0xA) | 0x30;
      v26 = v30 > 9;
      v30 /= 0xAuLL;
    }
    while (v26);
  }
  else
  {
    v29 = &v38;
    v38 = 48;
  }
  sub_22E3B4274(&__p, v29, v39, v39 - v29);
  if (v36 >= 0)
    v31 = (const std::string::value_type *)&__p;
  else
    v31 = (const std::string::value_type *)__p;
  if (v36 >= 0)
    v32 = v36 & 0x7F;
  else
    v32 = v35;
  std::string::append((std::string *)a3, v31, v32);
  if (v36 < 0)
    operator delete(__p);
  std::string::push_back((std::string *)a3, 62);
}

uint64_t sub_22F0743D0(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t result;
  unint64_t v7;
  __int16 v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  _QWORD v25[2];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void **v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[10];
  _QWORD v34[10];
  llvm *v35;
  uint64_t v36;
  unsigned int v37;
  llvm *v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v4 = sub_22EFC0844(a2);
    if (sub_22EA0E084(a2))
      return 1;
    if (sub_22EFBFAF0(a2) || sub_22EFBFB90(a2))
      return 0;
    result = 1;
    if ((*(_BYTE *)(a2 + 40) & 7) != 0 || v4 == 1)
      return result;
    if (!v4)
      return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000) + 1) & 1) == 0)
    return 0;
  result = 1;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x3D && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    {
      if (sub_22EFB93F4(a2))
        return 0;
      v7 = sub_22F076E9C(a1, a2);
      v8 = *(_WORD *)(v7 + 8);
      v9 = (v8 & 0x7Fu) > 0x18 || ((1 << (v8 & 0x7F)) & 0x1000006) == 0;
      if (v9 && (v8 & 0x7Fu) - 52 > 5)
        goto LABEL_27;
      v10 = sub_22EFB948C(a2);
      if (!v10 || v10 == 3)
      {
        v8 = *(_WORD *)(v7 + 8);
LABEL_27:
        if ((v8 & 0x7F) != 0x53)
          return 1;
        v11 = sub_22EFB948C(a2);
        if (v11 == 1)
          return 1;
        if (v11 == 4)
          return 1;
        v18 = 0;
        v23 = 0;
        v24 = 0;
        v20 = 0;
        v21 = 0;
        v19 = 0;
        v22 = 0;
        v17 = MEMORY[0x24BED83D0] + 16;
        v25[0] = a1;
        v25[1] = &v17;
        v26 = 1;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v32 = 0x400000000;
        v33[8] = v34;
        v33[9] = 0x400000000;
        v34[8] = &v30;
        v34[9] = 0;
        v30 = (void **)&v31;
        v31 = v33;
        v41 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v40 = 0;
        v38 = 0;
        v39 = 0;
        sub_22F07715C((uint64_t)v25, a2, 0);
        v12 = v32;
        llvm::deallocate_buffer(v38, (void *)(24 * v40));
        llvm::deallocate_buffer(v35, (void *)(16 * v37));
        sub_22F0899DC((void **)&v31);
        llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v17);
        if (v12)
          return 1;
        if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 65 < 2)
          return 1;
        result = sub_22EFB9D84(a2);
        if (result)
          return 1;
        return result;
      }
      while (1)
      {
        v8 = *(_WORD *)(v7 + 8);
        v13 = v8 & 0x7F;
        if (v13 == 16 || v13 == 83)
          goto LABEL_27;
        v14 = -40;
        if (v13 > 70)
        {
          if (v13 == 71)
          {
            v14 = -56;
            goto LABEL_52;
          }
          if (v13 != 81)
            goto LABEL_46;
        }
        else
        {
          if (v13 > 0x18)
            goto LABEL_45;
          if (v13 == 16)
            goto LABEL_39;
          if (((1 << v13) & 0x1066) == 0)
          {
            if (v13 == 24)
            {
LABEL_39:
              v14 = -48;
              goto LABEL_52;
            }
LABEL_45:
            if (v13 == 70)
            {
              v14 = -64;
              goto LABEL_52;
            }
LABEL_46:
            v15 = v13 - 52;
            if ((v13 - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v14 = v16;
            else
              v14 = -72;
          }
        }
LABEL_52:
        v7 = sub_22F076E9C(a1, v7 + v14);
      }
    }
  }
  return result;
}

uint64_t sub_22F074734()
{
  return 0;
}

BOOL sub_22F07473C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  if (a2
    && *(_BYTE *)(a1 + 168)
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA
    && ((v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v5 = *(_BYTE *)(v4 + 16) == 26)
      : (v5 = 0),
        v5 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26 && sub_22F10CF48(v4)))
  {
    return sub_22F086BA4(a1, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F0747D0(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

void sub_22F0747DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD v18[4];
  int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  void **v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE v31[64];
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[64];
  void ***v35;
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  unsigned int v39;
  llvm *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v18[0] = &unk_24FAC3168;
  v18[3] = v8;
  v19 = 0;
  v20 = v9;
  v21 = "Mangling declaration";
  v10 = *(_DWORD *)(v8 + 28);
  v11 = (v10 & 0x7F) != 0x37 || v8 == 0;
  if (v11 && ((v10 & 0x7F) == 0x39 ? (v12 = v8 == 0) : (v12 = 1), v12))
  {
    v22 = a1;
    v23 = a4;
    v24 = 0;
    if (v8)
    {
      if ((v10 & 0x7Eu) - 52 <= 5 && (*(_QWORD *)(v8 + 144) & 6) == 4)
      {
        v13 = *(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8;
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v14)
            v8 = *(_QWORD *)(v14 + 48);
        }
      }
    }
    v25 = v8;
    v26 = 0;
    v27 = 0;
    v30 = 0x400000000;
    v32 = v34;
    v33 = 0x400000000;
    v35 = &v28;
    v36 = 0;
    v28 = (void **)&v29;
    v29 = v31;
    v43 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    sub_22F07715C((uint64_t)&v22, a2, a3);
    llvm::deallocate_buffer(v40, (void *)(24 * v42));
    llvm::deallocate_buffer(v37, (void *)(16 * v39));
  }
  else
  {
    v22 = a1;
    v23 = a4;
    v24 = 0;
    v15 = *(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v8 + 144) & 6) == 4 && v15 != 0)
    {
      v17 = *(_QWORD *)(v15 + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v17)
        v8 = *(_QWORD *)(v17 + 48);
    }
    v25 = v8;
    v27 = 0;
    v26 = a2 & 7;
    v30 = 0x400000000;
    v32 = v34;
    v33 = 0x400000000;
    v35 = &v28;
    v36 = 0;
    v28 = (void **)&v29;
    v29 = v31;
    v43 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    sub_22F07715C((uint64_t)&v22, a2, 0);
    llvm::deallocate_buffer(v40, (void *)(24 * v42));
    llvm::deallocate_buffer(v37, (void *)(16 * v39));
  }
  sub_22F0899DC((void **)&v29);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v18);
}

void **sub_22F074A50(uint64_t a1, unint64_t a2, uint64_t *a3, char a4, llvm::raw_ostream *this)
{
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v13;
  llvm::raw_ostream *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20[2];
  _QWORD v21[10];
  _QWORD v22[10];
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  v14 = this;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20[1] = (void *)0x400000000;
  v21[8] = v22;
  v21[9] = 0x400000000;
  v22[8] = &v19;
  v22[9] = 0;
  v19 = v20;
  v20[0] = v21;
  v29 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v28 = 0;
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 3) - v9;
  v26 = 0;
  v27 = 0;
  if (v10 > 2)
  {
    *(_BYTE *)(v9 + 2) = 84;
    *(_WORD *)v9 = 23135;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZT");
  }
  if (*(_OWORD *)(a3 + 3) != 0)
  {
    v11 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v11 + 1;
      *v11 = 99;
    }
  }
  sub_22F089DFC((uint64_t)&v13, *a3, a3[1]);
  if (*(_OWORD *)(a3 + 3) != 0)
    sub_22F089DFC((uint64_t)&v13, a3[3], a3[4]);
  if (sub_22E462B18(a2))
    a2 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
  sub_22F077260((uint64_t)&v13, a2, 0);
  if ((a4 & 1) == 0)
    sub_22F089F00((uint64_t)&v13, *(_QWORD *)(a1 + 8), a3[6]);
  llvm::deallocate_buffer(v26, (void *)(24 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  return sub_22F0899DC(v20);
}

void **sub_22F074C2C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, char a5, llvm::raw_ostream *this)
{
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  void **v24;
  void *v25[2];
  _QWORD v26[10];
  _QWORD v27[10];
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v18[0] = a1;
  v18[1] = this;
  v19 = 0;
  v11 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  v12 = (*(_QWORD *)(a2 + 144) & 6) != 4 || v11 == 0;
  v13 = a2;
  if (!v12)
  {
    v13 = a2;
    v14 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v14)
      v13 = *(_QWORD *)(v14 + 48);
  }
  v20 = v13;
  v22 = 0;
  v23 = 0;
  v21 = a3;
  v25[1] = (void *)0x400000000;
  v26[8] = v27;
  v26[9] = 0x400000000;
  v27[8] = &v24;
  v27[9] = 0;
  v24 = v25;
  v25[0] = v26;
  v34 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v15 = *((_QWORD *)this + 4);
  v16 = *((_QWORD *)this + 3) - v15;
  v33 = 0;
  if (v16 > 2)
  {
    *(_BYTE *)(v15 + 2) = 84;
    *(_WORD *)v15 = 23135;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZT");
  }
  sub_22F089DFC((uint64_t)v18, *a4, a4[1]);
  sub_22F077260((uint64_t)v18, a2 & 0xFFFFFFFFFFFFFFF8 | a3, 0);
  if ((a5 & 1) == 0)
    sub_22F089F00((uint64_t)v18, *(_QWORD *)(a1 + 8), a4[6]);
  llvm::deallocate_buffer(v31, (void *)(24 * v33));
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
  return sub_22F0899DC(v25);
}

void **sub_22F074DDC(uint64_t a1, uint64_t a2, int a3, llvm::raw_ostream *this)
{
  _DWORD *v6;
  unint64_t v7;
  _QWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  _QWORD v16[10];
  _QWORD v17[10];
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9[0] = a1;
  v9[1] = this;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v15[1] = (void *)0x400000000;
  v16[8] = v17;
  v16[9] = 0x400000000;
  v17[8] = &v14;
  v17[9] = 0;
  v14 = v15;
  v15[0] = v16;
  v24 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v23 = 0;
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 3) - (_QWORD)v6;
  v21 = 0;
  v22 = 0;
  if (v7 > 3)
  {
    *v6 = 1380407903;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZGR");
  }
  sub_22F0776D8((uint64_t)v9, a2, 0);
  sub_22F07E2B4((uint64_t)v9, a3 - 1);
  llvm::deallocate_buffer(v21, (void *)(24 * v23));
  llvm::deallocate_buffer(v18, (void *)(16 * v20));
  return sub_22F0899DC(v15);
}

void **sub_22F074F1C(uint64_t a1, unint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = (uint64_t)this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1448368735;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTV");
  }
  if (!sub_22F07DB5C(v7, a2))
    sub_22F0776D8((uint64_t)v7, a2, 0);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F07505C(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1230264927;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTI");
  }
  sub_22F07817C((uint64_t)v7, a2);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F075188(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1398037087;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTS");
  }
  sub_22F07817C((uint64_t)v7, a2);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F0752B8(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1447516767;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZGV");
  }
  sub_22F0776D8((uint64_t)v7, a2, 0);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

uint64_t sub_22F0753E8(int a1, int a2, llvm::raw_ostream *this)
{
  void *v3;
  uint64_t result;

  v3 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v3 <= 0x14uLL)
    return llvm::raw_ostream::write(this, "__cxx_global_var_init");
  qmemcpy(v3, "__cxx_global_var_init", 21);
  *((_QWORD *)this + 4) += 21;
  return result;
}

void **sub_22F075434(uint64_t *a1, unint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t *v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  _QWORD v23[10];
  _QWORD v24[10];
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a1;
  v16 = this;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[1] = (void *)0x400000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v24[8] = &v21;
  v24[9] = 0;
  v21 = v22;
  v22[0] = v23;
  v31 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v30 = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 3) - (_QWORD)v5;
  v28 = 0;
  v29 = 0;
  if (v6 > 6)
  {
    *(_DWORD *)((char *)v5 + 3) = 1601335156;
    *v5 = 1952735071;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "__dtor_");
  }
  if (sub_22F096440(a1, a2))
  {
    sub_22F07715C((uint64_t)&v15, a2, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if ((v7 & 7) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = *(unsigned int **)(v8 + 16);
        v12 = *v9;
        v10 = v9 + 4;
        v11 = v12;
        v13 = (void *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v12 <= *((_QWORD *)v16 + 3) - (_QWORD)v13)
        {
          if (v11)
          {
            memcpy(v13, v10, v11);
            *((_QWORD *)v16 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v16, (const char *)v10);
        }
      }
    }
  }
  llvm::deallocate_buffer(v28, (void *)(24 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  return sub_22F0899DC(v22);
}

void **sub_22F0755E0(uint64_t *a1, unint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t *v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  _QWORD v23[10];
  _QWORD v24[10];
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a1;
  v16 = this;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[1] = (void *)0x400000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v24[8] = &v21;
  v24[9] = 0;
  v21 = v22;
  v22[0] = v23;
  v31 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v30 = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 3) - (_QWORD)v5;
  v28 = 0;
  v29 = 0;
  if (v6 > 6)
  {
    *(_DWORD *)((char *)v5 + 3) = 1601465449;
    *v5 = 1768316767;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "__filt_");
  }
  if (sub_22F096440(a1, a2))
  {
    sub_22F07715C((uint64_t)&v15, a2, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if ((v7 & 7) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = *(unsigned int **)(v8 + 16);
        v12 = *v9;
        v10 = v9 + 4;
        v11 = v12;
        v13 = (void *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v12 <= *((_QWORD *)v16 + 3) - (_QWORD)v13)
        {
          if (v11)
          {
            memcpy(v13, v10, v11);
            *((_QWORD *)v16 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v16, (const char *)v10);
        }
      }
    }
  }
  llvm::deallocate_buffer(v28, (void *)(24 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  return sub_22F0899DC(v22);
}

void **sub_22F07578C(uint64_t *a1, unint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t *v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  _QWORD v23[10];
  _QWORD v24[10];
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a1;
  v16 = this;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[1] = (void *)0x400000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v24[8] = &v21;
  v24[9] = 0;
  v21 = v22;
  v22[0] = v23;
  v31 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v30 = 0;
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 3) - v5;
  v28 = 0;
  v29 = 0;
  if (v6 > 5)
  {
    *(_WORD *)(v5 + 4) = 24430;
    *(_DWORD *)v5 = 1768316767;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "__fin_");
  }
  if (sub_22F096440(a1, a2))
  {
    sub_22F07715C((uint64_t)&v15, a2, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if ((v7 & 7) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = *(unsigned int **)(v8 + 16);
        v12 = *v9;
        v10 = v9 + 4;
        v11 = v12;
        v13 = (void *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v12 <= *((_QWORD *)v16 + 3) - (_QWORD)v13)
        {
          if (v11)
          {
            memcpy(v13, v10, v11);
            *((_QWORD *)v16 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v16, (const char *)v10);
        }
      }
    }
  }
  llvm::deallocate_buffer(v28, (void *)(24 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  return sub_22F0899DC(v22);
}

uint64_t sub_22F075934(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void **sub_22F075940(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _WORD *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  void *v7;
  uint64_t v9;
  llvm::raw_ostream *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16[2];
  _QWORD v17[10];
  _QWORD v18[10];
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  llvm *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = this;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v16[1] = (void *)0x400000000;
  v17[8] = v18;
  v17[9] = 0x400000000;
  v18[8] = &v15;
  v18[9] = 0;
  v15 = v16;
  v16[0] = v17;
  v25 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v24 = 0;
  v4 = (_WORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v22 = 0;
  v23 = 0;
  if (v5 > 1)
  {
    *v4 = 23135;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "_Z");
  }
  sub_22F07817C((uint64_t)&v9, a2);
  v6 = v10;
  v7 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v7 > 0x14uLL)
  {
    qmemcpy(v7, ".MTL_CONTROL_POINT_FN", 21);
    *((_QWORD *)v6 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".MTL_CONTROL_POINT_FN");
  }
  llvm::deallocate_buffer(v22, (void *)(24 * v24));
  llvm::deallocate_buffer(v19, (void *)(16 * v21));
  return sub_22F0899DC(v16);
}

void **sub_22F075AB4(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  _QWORD v23[10];
  _QWORD v24[10];
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E547004(a2);
  sub_22F007D7C(*(unsigned __int8 **)(v6 + 40), *(_QWORD *)(a1 + 8), 0, (uint64_t)&v15);
  if (v16 >= 0x41 && v15 != 0)
    MEMORY[0x2348A0E84]();
  v8 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
    v9 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a2 + 48) & 7 | v8);
  v15 = a1;
  v16 = a3;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[1] = (void *)0x400000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v24[8] = &v21;
  v24[9] = 0;
  v21 = v22;
  v22[0] = v23;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  sub_22F07715C((uint64_t)&v15, a2, 0);
  v10 = v16;
  v11 = (void *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v11 > 0xCuLL)
  {
    qmemcpy(v11, ".MTL_FC_INIT_", 13);
    *((_QWORD *)v10 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v16, ".MTL_FC_INIT_");
  }
  v12 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, "_");
  }
  else
  {
    *v13 = 95;
    ++*((_QWORD *)v12 + 4);
  }
  sub_22F07817C((uint64_t)&v15, v9 & 0xFFFFFFFFFFFFFFF0);
  llvm::deallocate_buffer(v28, (void *)(24 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  return sub_22F0899DC(v22);
}

void **sub_22F075CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  unsigned int v11;
  void *v12;
  _QWORD v14[2];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20[2];
  _QWORD v21[10];
  _QWORD v22[10];
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v14[0] = a1;
  v14[1] = a4;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20[1] = (void *)0x400000000;
  v21[8] = v22;
  v21[9] = 0x400000000;
  v22[8] = &v19;
  v22[9] = 0;
  v19 = v20;
  v20[0] = v21;
  v29 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v28 = 0;
  v26 = 0;
  v27 = 0;
  v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v8 = *(unsigned int **)(v6 + 16);
  v11 = *v8;
  v9 = v8 + 4;
  v10 = v11;
  v12 = (void *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v12)
  {
    if (v10)
    {
      memcpy(v12, v9, v10);
      *((_QWORD *)v7 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, (const char *)v9);
  }
  sub_22F07817C((uint64_t)v14, a3);
  llvm::deallocate_buffer(v26, (void *)(24 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  return sub_22F0899DC(v20);
}

void sub_22F075E24(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  void *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int i;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  const void *v43;
  size_t v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[5];

  v53[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v7 = *(uint64_t **)v6;
    v8 = *(unsigned int *)(v6 + 8);
    v9 = *(uint64_t **)v6;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      v9 = *(uint64_t **)v6;
      while (*(_WORD *)(*v9 + 32) != 401)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_12;
      }
    }
    if (v9 != &v7[v8])
    {
      do
      {
        v12 = *v7++;
        v11 = v12;
      }
      while (*(_WORD *)(v12 + 32) != 401);
      v13 = *(const void **)(v11 + 40);
      v14 = *(unsigned int *)(v11 + 36);
      v15 = (void *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v15 >= v14)
      {
        if (!(_DWORD)v14)
          return;
LABEL_114:
        memcpy(v15, v13, v14);
        *((_QWORD *)a3 + 4) += v14;
        return;
      }
      goto LABEL_108;
    }
  }
LABEL_12:
  if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
    if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      goto LABEL_49;
    goto LABEL_103;
  }
  v16 = sub_22EFB9440(a2);
  v17 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v16)
  {
    if ((v17 - 67) < 0xFFFFFFF9)
    {
LABEL_104:
      v47 = *(_QWORD *)(a2 + 40);
      if ((v47 & 7) != 0)
        v48 = 0;
      else
        v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      v49 = *(unsigned int **)(v48 + 16);
      v50 = *v49;
      v13 = v49 + 4;
      v14 = v50;
      v15 = (void *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v50 <= *((_QWORD *)a3 + 3) - (_QWORD)v15)
      {
        if (!v14)
          return;
        goto LABEL_114;
      }
LABEL_108:
      llvm::raw_ostream::write(a3, (const char *)v13);
      return;
    }
    goto LABEL_103;
  }
  v18 = a2;
  if (v17 == 83)
  {
LABEL_48:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 88) + 2000) + 125) & 0x10) == 0)
      goto LABEL_104;
    goto LABEL_49;
  }
  v19 = *(_QWORD *)(a2 + 16);
  v20 = v19 & 0xFFFFFFFFFFFFFFF8;
  if ((v19 & 4) != 0)
    v20 = *(_QWORD *)v20;
  for (i = *(_WORD *)(v20 + 8) & 0x7F; i != 83; i = *(_WORD *)(v20 + 8) & 0x7F)
  {
    v22 = -40;
    if (i > 70)
    {
      if (i == 71)
      {
        v22 = -56;
      }
      else if (i != 81)
      {
        goto LABEL_34;
      }
    }
    else
    {
      if (i > 0x18)
        goto LABEL_33;
      if (i == 16)
        goto LABEL_27;
      if (((1 << i) & 0x1066) != 0)
        goto LABEL_40;
      if (i == 24)
      {
LABEL_27:
        v22 = -48;
      }
      else
      {
LABEL_33:
        if (i != 70)
        {
LABEL_34:
          v23 = i - 52;
          if ((i - 33) >= 5)
            v24 = -48;
          else
            v24 = -64;
          if (v23 >= 6)
            v22 = v24;
          else
            v22 = -72;
          goto LABEL_40;
        }
        v22 = -64;
      }
    }
LABEL_40:
    v25 = *(_QWORD *)(v20 + v22 + 16);
    v20 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 4) != 0)
      v20 = *(_QWORD *)v20;
  }
  if ((v17 - 67) < 0xFFFFFFF9)
  {
    v18 = v20 - 40;
    goto LABEL_48;
  }
LABEL_103:
  if (sub_22EFB93F4(a2))
    goto LABEL_104;
LABEL_49:
  v51 = v53;
  v52 = 0x400000000;
  v26 = sub_22F076E9C(a1, a2);
  if (v26)
  {
    v27 = v26;
    do
    {
      if ((*(_WORD *)(v27 + 8) & 0x7F) == 0x53)
        break;
      v28 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v52;
      }
      *((_QWORD *)v51 + v28) = v27;
      LODWORD(v52) = v52 + 1;
      v29 = *(_WORD *)(v27 + 8) & 0x7F;
      v30 = -40;
      if (v29 > 0x46)
      {
        if (v29 != 83)
        {
          if (v29 == 71)
          {
            v30 = -56;
          }
          else if (v29 != 81)
          {
            goto LABEL_65;
          }
        }
      }
      else
      {
        if (v29 > 0x18)
          goto LABEL_64;
        if (v29 == 16)
          goto LABEL_57;
        if (((1 << v29) & 0x1066) != 0)
          goto LABEL_71;
        if (v29 == 24)
        {
LABEL_57:
          v30 = -48;
        }
        else
        {
LABEL_64:
          if (v29 != 70)
          {
LABEL_65:
            v31 = v29 - 52;
            if (v29 - 33 >= 5)
              v32 = -48;
            else
              v32 = -64;
            if (v31 >= 6)
              v30 = v32;
            else
              v30 = -72;
            goto LABEL_71;
          }
          v30 = -64;
        }
      }
LABEL_71:
      v27 = sub_22F076E9C(a1, v27 + v30);
    }
    while (v27);
  }
  if ((_DWORD)v52)
  {
    v33 = 8 * v52;
    v34 = (char *)v51 - 8;
    do
    {
      v35 = *(_QWORD *)&v34[v33];
      v36 = *(_WORD *)(v35 + 8) & 0x7F;
      if ((v36 - 13) <= 0x3D)
      {
        switch(v36)
        {
          case 16:
          case 24:
            v38 = -48;
            break;
          case 71:
            v38 = -56;
            break;
          case 70:
            v38 = -64;
            break;
          default:
            if ((v36 - 52) < 6)
            {
              v38 = -72;
            }
            else if ((v36 - 33) >= 5)
            {
              v38 = -48;
            }
            else
            {
              v38 = -64;
            }
            break;
        }
        (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)(v35 + v38) + 88))(v35 + v38, a3);
        v39 = (_WORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v39 > 1uLL)
        {
          *v39 = 14906;
          *((_QWORD *)a3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a3, "::");
        }
      }
      v33 -= 8;
    }
    while (v33);
  }
  v40 = *(_QWORD *)(a2 + 40);
  if ((v40 & 7) != 0)
    v41 = 0;
  else
    v41 = v40 & 0xFFFFFFFFFFFFFFF8;
  v42 = *(unsigned int **)(v41 + 16);
  v45 = *v42;
  v43 = v42 + 4;
  v44 = v45;
  v46 = (void *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v45 <= *((_QWORD *)a3 + 3) - (_QWORD)v46)
  {
    if (v44)
    {
      memcpy(v46, v43, v44);
      *((_QWORD *)a3 + 4) += v44;
    }
  }
  else
  {
    llvm::raw_ostream::write(a3, (const char *)v43);
  }
  if (v51 != v53)
    free(v51);
}

double sub_22F076390(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  double result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  v4 = *((_QWORD *)a3 + 4);
  if ((unint64_t)(*((_QWORD *)a3 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 1178948191;
    result = *(double *)".MTL_VISIBLE_FN_REF";
    *(_OWORD *)v4 = *(_OWORD *)".MTL_VISIBLE_FN_REF";
    *((_QWORD *)a3 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a3, ".MTL_VISIBLE_FN_REF");
  }
  return result;
}

void **sub_22F07640C(uint64_t a1, unint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = (uint64_t)this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1414814303;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTT");
  }
  if (!sub_22F07DB5C(v7, a2))
    sub_22F0776D8((uint64_t)v7, a2, 0);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F07654C(uint64_t a1, unint64_t a2, int a3, unint64_t a4, llvm::raw_ostream *this)
{
  _DWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  llvm::raw_ostream *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18[2];
  _QWORD v19[10];
  _QWORD v20[10];
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  llvm *v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  v12 = this;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v18[1] = (void *)0x400000000;
  v19[8] = v20;
  v19[9] = 0x400000000;
  v20[8] = &v17;
  v20[9] = 0;
  v17 = v18;
  v18[0] = v19;
  v27 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v26 = 0;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 3) - (_QWORD)v7;
  v24 = 0;
  v25 = 0;
  if (v8 > 3)
  {
    *v7 = 1129601631;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTC");
  }
  if (!sub_22F07DB5C(&v11, a2))
    sub_22F0776D8((uint64_t)&v11, a2, 0);
  llvm::raw_ostream::operator<<();
  v9 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v9 + 1;
    *v9 = 95;
  }
  if (!sub_22F07DB5C(&v11, a4))
    sub_22F0776D8((uint64_t)&v11, a4, 0);
  llvm::deallocate_buffer(v24, (void *)(24 * v26));
  llvm::deallocate_buffer(v21, (void *)(16 * v23));
  return sub_22F0899DC(v18);
}

void **sub_22F0766F4(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1213487711;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTH");
  }
  sub_22F0776D8((uint64_t)v7, a2, 0);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F076824(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  _QWORD v14[10];
  _QWORD v15[10];
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = a1;
  v7[1] = this;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13[1] = (void *)0x400000000;
  v14[8] = v15;
  v14[9] = 0x400000000;
  v15[8] = &v12;
  v15[9] = 0;
  v12 = v13;
  v13[0] = v14;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  v19 = 0;
  v20 = 0;
  if (v5 > 3)
  {
    *v4 = 1465145951;
    *((_QWORD *)this + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "_ZTW");
  }
  sub_22F0776D8((uint64_t)v7, a2, 0);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  return sub_22F0899DC(v13);
}

void **sub_22F076954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  _QWORD v15[10];
  _QWORD v16[10];
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v8[1] = a3;
  v9 = 0;
  v3 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  v4 = (*(_QWORD *)(a2 + 144) & 6) != 4 || v3 == 0;
  v5 = a2;
  if (!v4)
  {
    v5 = a2;
    v6 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
      v5 = *(_QWORD *)(v6 + 48);
  }
  v10 = v5;
  v11 = 2;
  v12 = 0;
  v14[1] = (void *)0x400000000;
  v15[8] = v16;
  v15[9] = 0x400000000;
  v16[8] = &v13;
  v16[9] = 0;
  v13 = v14;
  v14[0] = v15;
  v23 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_22F07715C((uint64_t)v8, a2 & 0xFFFFFFFFFFFFFFF8 | 2, 0);
  llvm::deallocate_buffer(v20, (void *)(24 * v22));
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  return sub_22F0899DC(v14);
}

void **sub_22F076A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  _QWORD v15[10];
  _QWORD v16[10];
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v8[1] = a3;
  v9 = 0;
  v3 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
  v4 = (*(_QWORD *)(a2 + 144) & 6) != 4 || v3 == 0;
  v5 = a2;
  if (!v4)
  {
    v5 = a2;
    v6 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
      v5 = *(_QWORD *)(v6 + 48);
  }
  v10 = v5;
  v11 = 3;
  v12 = 0;
  v14[1] = (void *)0x400000000;
  v15[8] = v16;
  v15[9] = 0x400000000;
  v16[8] = &v13;
  v16[9] = 0;
  v13 = v14;
  v14[0] = v15;
  v23 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_22F07715C((uint64_t)v8, a2 & 0xFFFFFFFFFFFFFFF8 | 3, 0);
  llvm::deallocate_buffer(v20, (void *)(24 * v22));
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  return sub_22F0899DC(v14);
}

void **sub_22F076B9C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD v4[2];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  void *v10[2];
  _QWORD v11[10];
  _QWORD v12[10];
  llvm *v13;
  uint64_t v14;
  unsigned int v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4[0] = a1;
  v4[1] = a3;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v10[1] = (void *)0x400000000;
  v11[8] = v12;
  v11[9] = 0x400000000;
  v12[8] = &v9;
  v12[9] = 0;
  v9 = v10;
  v10[0] = v11;
  v19 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v18 = 0;
  v16 = 0;
  v17 = 0;
  sub_22F087674((uint64_t)v4, a2);
  llvm::deallocate_buffer(v16, (void *)(24 * v18));
  llvm::deallocate_buffer(v13, (void *)(16 * v15));
  return sub_22F0899DC(v10);
}

void **sub_22F076C78(uint64_t *a1, unint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  uint64_t *v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  _QWORD v23[10];
  _QWORD v24[10];
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a1;
  v16 = this;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22[1] = (void *)0x400000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  v24[8] = &v21;
  v24[9] = 0;
  v21 = v22;
  v22[0] = v23;
  v31 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v30 = 0;
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 3) - v5;
  v28 = 0;
  v29 = 0;
  if (v6 > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 1600485993;
    *(_QWORD *)v5 = *(_QWORD *)"__finalize_";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "__finalize_");
  }
  if (sub_22F096440(a1, a2))
  {
    sub_22F07715C((uint64_t)&v15, a2, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if ((v7 & 7) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v9 = *(unsigned int **)(v8 + 16);
        v12 = *v9;
        v10 = v9 + 4;
        v11 = v12;
        v13 = (void *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v12 <= *((_QWORD *)v16 + 3) - (_QWORD)v13)
        {
          if (v11)
          {
            memcpy(v13, v10, v11);
            *((_QWORD *)v16 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v16, (const char *)v10);
        }
      }
    }
  }
  llvm::deallocate_buffer(v28, (void *)(24 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  return sub_22F0899DC(v22);
}

uint64_t sub_22F076E28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_22F076E30(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24FAC64C0;
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(16 * *(unsigned int *)(a1 + 96)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(16 * *(unsigned int *)(a1 + 48)));
  return a1;
}

unint64_t sub_22F076E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t result;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  if (!a2)
  {
    do
    {
LABEL_5:
      if (v2)
      {
        if ((*(_DWORD *)(v2 + 28) & 0x7F) == 1)
        {
          v5 = *(_QWORD *)(v2 + 120);
          if (v5)
          {
            if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x40)
            {
              v28 = *(_QWORD *)(v5 + 16);
              goto LABEL_58;
            }
          }
        }
      }
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 18584);
      if (!v7)
      {
        sub_22EF6D84C(*(_QWORD *)(a1 + 8));
        v7 = *(_QWORD *)(v6 + 18584);
      }
      if (v7 == v2)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_DWORD *)(*(_QWORD *)(v8 + 15088) + 56);
        v10 = v9 > 0x28;
        v11 = (1 << v9) & 0x1800000003ELL;
        if (!v10 && v11 != 0)
        {
          v19 = *(_QWORD *)(a1 + 160);
          if (!v19)
          {
            v24 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v8 + 1960) + 80));
            if (v24)
              v25 = v24 + 40;
            else
              v25 = 0;
            v26 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 8) + 15192), "std", 3uLL);
            v27 = sub_22F3B2534(v8, v25, 0, 0, 0, v26, 0);
            *(_QWORD *)(a1 + 160) = v27;
            *(_DWORD *)(v27 + 28) |= 0x200u;
            v19 = *(_QWORD *)(a1 + 160);
          }
          if (v19)
            return v19 + 48;
          else
            return 0;
        }
      }
      v13 = *(_QWORD *)(v2 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      v15 = *(_WORD *)(v14 + 8) & 0x7F;
      if (v15 - 70 >= 2 && v15 != 2)
      {
        v21 = *(_DWORD *)(v2 + 28);
        if (!v2 || (*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
          goto LABEL_51;
        if (!sub_22EFB93F4(v2))
        {
          v21 = *(_DWORD *)(v2 + 28);
LABEL_51:
          if (!v2 || (v21 & 0x7Eu) - 58 < 0xFFFFFFFA || !sub_22EFB9440(v2))
            return sub_22EFCBB30(v14);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1960) + 80);
        v23 = sub_22E3CD31C((uint64_t *)(v22 + 72), v22);
        if (v23)
          return v23 + 40;
        else
          return 0;
      }
      if (v15 == 16)
        goto LABEL_25;
      if (v15 <= 0x18)
      {
        if (((1 << v15) & 0x1064) != 0)
        {
          v17 = -40;
          goto LABEL_35;
        }
        if (v15 == 24)
          goto LABEL_25;
      }
      if (v15 == 70)
        goto LABEL_33;
      if (v15 == 71)
      {
        v17 = -56;
        goto LABEL_35;
      }
      if (v15 - 52 < 6)
      {
        v17 = -72;
        goto LABEL_35;
      }
      if (v15 - 33 >= 5)
LABEL_25:
        v17 = -48;
      else
LABEL_33:
        v17 = -64;
LABEL_35:
      v2 = v14 + v17;
    }
    while (!(v14 + v17));
  }
  if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
    goto LABEL_5;
  v4 = *(_QWORD *)(v2 + 128);
  if (!v4)
    goto LABEL_5;
  if (((*(unsigned __int16 *)(v4 + 8) | (*(unsigned __int8 *)(v4 + 10) << 16)) & 0x100000) == 0)
    goto LABEL_5;
  v18 = sub_22F3B1CF4(v2);
  if (!v18 || (*(_DWORD *)(v18 + 28) & 0x7F) != 0x40)
    goto LABEL_5;
  v28 = *(_QWORD *)(v18 + 16);
LABEL_58:
  result = v28 & 0xFFFFFFFFFFFFFFF8;
  if ((v28 & 4) != 0)
    return *(_QWORD *)result;
  return result;
}

void sub_22F07715C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _WORD *v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(llvm::raw_ostream **)(a1 + 8);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 23135;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "_Z");
  }
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22F077260(a1, a2, a3);
  }
  else
  {
    v9 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
    if ((v9 - 60) >= 7
      && ((v9 - 48) <= 0x18 ? (v10 = ((1 << (v9 - 48)) & 0x120000F) == 0) : (v10 = 1), v10))
    {
      if (v9 != 68)
        v8 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * *(unsigned int *)(v8 + 64) - 8);
      v11 = a1;
      v13 = 0;
    }
    else
    {
      v11 = a1;
      v12 = a2;
      v13 = a3;
    }
    sub_22F0776D8(v11, v12, v13);
  }
}

void sub_22F077260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  unint64_t v18;
  void *v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  _BYTE v23[64];
  _QWORD *v24;
  char v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  __int128 v35;
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43[2];
  __int16 v44;
  unsigned int v45;
  int v46;
  char *v47;
  int v48;
  llvm *v49;
  uint64_t v50;
  unsigned int v51;
  llvm *v52;
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((sub_22F096440(*(uint64_t **)a1, a2 & 0xFFFFFFFFFFFFFFF8) & 1) == 0)
  {
    sub_22F0776D8(a1, a2, a3);
    return;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v40 = v42;
    v41 = 0x400000000;
  }
  else
  {
    LODWORD(v35) = 0;
    v38 = 0;
    v39 = 0;
    v36[0] = 0;
    v36[1] = 0;
    *((_QWORD *)&v35 + 1) = 0;
    v37 = 0;
    v34 = (void *)(MEMORY[0x24BED83D0] + 16);
    sub_22F077C40((uint64_t)v43, a1, (uint64_t)&v34);
    v44 = 257;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = *(unsigned __int8 *)(v7 + 16) - 27 > 0xFFFFFFFD;
    else
      v8 = 0;
    if (!v8)
      v7 = sub_22F10CF48(v7);
    v9 = v46;
    v46 = (v46 | 1) + 2;
    sub_22F07817C((uint64_t)v43, *(_QWORD *)(v7 + 24));
    v46 = v9;
    sub_22F078110((uint64_t)&v47);
    v40 = v42;
    v41 = 0x400000000;
    if (v48)
      sub_22F2ED24C(&v40, (uint64_t)&v47);
    llvm::deallocate_buffer(v52, (void *)(24 * v53));
    llvm::deallocate_buffer(v49, (void *)(16 * v51));
    sub_22F0899DC((void **)&v47);
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v34);
    if ((_DWORD)v41)
    {
      v34 = v36;
      v35 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)v23, (uint64_t)&v34);
      sub_22F077C40((uint64_t)v43, a1, (uint64_t)v23);
      HIBYTE(v44) = 1;
      v10 = sub_22E462B18(v6);
      v11 = v6;
      if (v10)
        v11 = v6 | ((*(_WORD *)(sub_22EFC8868(v6) + 96) & 0x80) == 0);
      sub_22F077D80(v43, v11, 0, 0);
      v12 = v24[1];
      sub_22F0779EC((uint64_t)v43, v6);
      sub_22F078110((uint64_t)&v47);
      v31 = v33;
      v32 = 0x400000000;
      sub_22E5C5180((uint64_t)&v31, v41, 0, 0);
      v29 = (uint64_t)v40 + 16 * v41;
      v30 = v40;
      v27 = &v47[16 * v48];
      v28 = v47;
      v26 = v31;
      v13 = (char *)sub_22F089D00((uint64_t *)&v30, &v29, (uint64_t *)&v28, &v27, (uint64_t *)&v26, (uint64_t)&v25);
      LODWORD(v32) = (unint64_t)(v13 - (_BYTE *)v31) >> 4;
      if (sub_22E462B18(v6))
        v6 |= (*(_WORD *)(sub_22EFC8868(v6) + 96) & 0x80) == 0;
      sub_22F077D80((uint64_t *)a1, v6, 0, (uint64_t)&v31);
      v14 = *(_QWORD *)(a1 + 8);
      v15 = v24[1];
      if (v15 >= v12)
        v16 = v12;
      else
        v16 = v24[1];
      v17 = (const void *)(*v24 + v16);
      v18 = v15 - v16;
      v19 = *(void **)(v14 + 32);
      if (v15 - v16 <= *(_QWORD *)(v14 + 24) - (_QWORD)v19)
      {
        if (v15 > v12)
        {
          memcpy(v19, v17, v15 - v16);
          *(_QWORD *)(v14 + 32) += v18;
        }
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), (const char *)v17);
      }
      v20 = v45;
      if (v45 > *(_DWORD *)(a1 + 36))
      {
        v21 = *(llvm **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = v49;
        v49 = v21;
        v22 = *(_QWORD *)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v50;
        v50 = v22;
        LODWORD(v21) = *(_DWORD *)(a1 + 248);
        *(_DWORD *)(a1 + 248) = v51;
        v51 = v21;
        *(_DWORD *)(a1 + 36) = v20;
      }
      if (v31 != v33)
        free(v31);
      llvm::deallocate_buffer(v52, (void *)(24 * v53));
      llvm::deallocate_buffer(v49, (void *)(16 * v51));
      sub_22F0899DC((void **)&v47);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v23);
      if (v34 != v36)
        free(v34);
      goto LABEL_14;
    }
  }
  sub_22F0776D8(a1, a2, a3);
  sub_22F0779EC(a1, v6);
LABEL_14:
  if (v40 != v42)
    free(v40);
}

void sub_22F0776D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  uint64_t v30[2];
  __int16 v31;
  char *v32;
  int v33;
  llvm *v34;
  unsigned int v35;
  llvm *v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_DWORD *)(v4 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
  {
    sub_22F077D80((uint64_t *)a1, a2, a3, 0);
    return;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v27 = v29;
    v28 = 0x400000000;
  }
  else
  {
    LODWORD(v22) = 0;
    v25 = 0;
    v26 = 0;
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    v5 = MEMORY[0x24BED83D0];
    v21 = (void *)(MEMORY[0x24BED83D0] + 16);
    sub_22F077C40((uint64_t)v30, a1, (uint64_t)&v21);
    v31 = 257;
    sub_22F07817C((uint64_t)v30, *(_QWORD *)(v4 + 48));
    sub_22F078110((uint64_t)&v32);
    v27 = v29;
    v28 = 0x400000000;
    if (v33)
      sub_22F2ED24C(&v27, (uint64_t)&v32);
    llvm::deallocate_buffer(v36, (void *)(24 * v37));
    llvm::deallocate_buffer(v34, (void *)(16 * v35));
    sub_22F0899DC((void **)&v32);
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v21);
    if ((_DWORD)v28)
    {
      v8 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 0;
      v11 = 0;
      v9 = 0;
      v12 = 0;
      v7 = v5 + 16;
      sub_22F077C40((uint64_t)v30, a1, (uint64_t)&v7);
      v31 = 257;
      sub_22F077D80(v30, v4, 0, 0);
      sub_22F078110((uint64_t)&v32);
      v21 = v23;
      v22 = 0x400000000;
      sub_22E5C5180((uint64_t)&v21, v28, 0, 0);
      v19 = (uint64_t)v27 + 16 * v28;
      v20 = v27;
      v17 = &v32[16 * v33];
      v18 = v32;
      v16 = v21;
      v6 = (char *)sub_22F089D00((uint64_t *)&v20, &v19, (uint64_t *)&v18, &v17, (uint64_t *)&v16, (uint64_t)&v15);
      LODWORD(v22) = (unint64_t)(v6 - (_BYTE *)v21) >> 4;
      sub_22F077D80((uint64_t *)a1, v4, 0, (uint64_t)&v21);
      if (v21 != v23)
        free(v21);
      llvm::deallocate_buffer(v36, (void *)(24 * v37));
      llvm::deallocate_buffer(v34, (void *)(16 * v35));
      sub_22F0899DC((void **)&v32);
      llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v7);
      goto LABEL_13;
    }
  }
  sub_22F077D80((uint64_t *)a1, v4, 0, 0);
LABEL_13:
  if (v27 != v29)
    free(v27);
}

void sub_22F0779EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  llvm::raw_ostream *v5;
  void *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  BOOL v23;

  v2 = a2;
  if (sub_22ECF9724(a2))
  {
    v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = (v4 & 0xFFFFFFFE) + 2;
    v5 = *(llvm::raw_ostream **)(a1 + 8);
    v6 = (void *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xCuLL)
    {
      qmemcpy(v6, "Ua9enable_ifI", 13);
      *((_QWORD *)v5 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v5, "Ua9enable_ifI");
    }
    sub_22EFC8E88(v2);
    v8 = *v7;
    sub_22EFC8E88(v2);
    for (i = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8); v8 != (uint64_t *)i; ++v8)
    {
      v11 = *v8;
      if (*v8 && *(_WORD *)(v11 + 32) == 167)
      {
        if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2000) + 250) << 16) & 0xE0000u) <= 0x50000)
        {
          v12 = *(llvm::raw_ostream **)(a1 + 8);
          v13 = (_BYTE *)*((_QWORD *)v12 + 4);
          if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
          {
            llvm::raw_ostream::write(v12);
          }
          else
          {
            *((_QWORD *)v12 + 4) = v13 + 1;
            *v13 = 88;
          }
          sub_22F07E3A4((uint64_t *)a1, *(unsigned __int8 **)(v11 + 40), 0xFFFFFFFFLL, 0);
          v14 = *(llvm::raw_ostream **)(a1 + 8);
          v15 = (_BYTE *)*((_QWORD *)v14 + 4);
          if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
          {
            llvm::raw_ostream::write(v14);
          }
          else
          {
            *((_QWORD *)v14 + 4) = v15 + 1;
            *v15 = 69;
          }
        }
        else
        {
          sub_22F081670((_QWORD *)a1, *(unsigned __int8 **)(v11 + 40));
        }
      }
    }
    v16 = *(llvm::raw_ostream **)(a1 + 8);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 69;
    }
    *(_DWORD *)(a1 + 40) = v4;
  }
  if (v2 && (*(_DWORD *)(v2 + 28) & 0x7F) == 0x37 && (*(_BYTE *)(v2 + 87) & 0x20) != 0 && *(_QWORD *)(v2 + 168))
    v2 = *(_QWORD *)(v2 + 176);
  v18 = *(_QWORD *)(v2 + 144) & 0xFFFFFFFFFFFFFFF8;
  v19 = (*(_QWORD *)(v2 + 144) & 6) != 4 || v18 == 0;
  if (v19 || (v20 = *(_QWORD *)(v18 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v21 = 0;
  }
  else
  {
    v21 = (*(_DWORD *)(v2 + 28) & 0x7Fu) - 58 < 0xFFFFFFFD;
    v2 = *(_QWORD *)(v20 + 48);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v22)
    v23 = *(_BYTE *)(v22 + 16) == 26;
  else
    v23 = 0;
  if (!v23)
    v22 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0));
  sub_22F087B34(a1, v22, v21, v2);
}

uint64_t sub_22F077C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a3;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = a1 + 232;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x400000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0x400000000;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 216) = a1 + 48;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  llvm::deallocate_buffer(0, 0);
  v8 = *(unsigned int *)(a2 + 248);
  *(_DWORD *)(v7 + 16) = v8;
  if ((_DWORD)v8)
  {
    v9 = (void *)MEMORY[0x23489D23C](16 * v8, 8);
    *(_QWORD *)(a1 + 232) = v9;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    memcpy(v9, *(const void **)(a2 + 232), 16 * *(unsigned int *)(a1 + 248));
  }
  else
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  llvm::deallocate_buffer(0, 0);
  v10 = *(unsigned int *)(a2 + 272);
  *(_DWORD *)(a1 + 272) = v10;
  if ((_DWORD)v10)
  {
    v11 = (void *)MEMORY[0x23489D23C](24 * v10, 8);
    *(_QWORD *)(a1 + 256) = v11;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    memcpy(v11, *(const void **)(a2 + 256), 24 * *(unsigned int *)(a1 + 272));
  }
  else
  {
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
  }
  *(_BYTE *)(a1 + 280) = 0;
  return a1;
}

void sub_22F077D80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t v36;

  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_22F076E9C(*a1, a2 & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_WORD *)(v9 + 8) & 0x7F;
  if ((*(_WORD *)(v9 + 8) & 0x7Eu) - 52 < 6 || v10 == 24 || v10 == 1)
  {
    v13 = sub_22EFB948C(v8);
    if (v13)
    {
      if (v13 != 3
        && (!v8
         || (*(_DWORD *)(v8 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD
         || (v19 = *(_QWORD *)(v8 + 128)) == 0
         || ((*(unsigned __int16 *)(v19 + 8) | (*(unsigned __int8 *)(v19 + 10) << 16)) & 0x100000) == 0))
      {
        while (1)
        {
          v14 = *(_WORD *)(v9 + 8);
          v20 = v14 & 0x7F;
          if (v20 == 16 || v20 == 83)
            goto LABEL_13;
          v21 = -40;
          if (v20 > 70)
          {
            if (v20 == 71)
            {
              v21 = -56;
              goto LABEL_44;
            }
            if (v20 != 81)
              goto LABEL_38;
          }
          else
          {
            if (v20 > 0x18)
              goto LABEL_37;
            if (v20 == 16)
              goto LABEL_31;
            if (((1 << v20) & 0x1066) == 0)
            {
              if (v20 == 24)
              {
LABEL_31:
                v21 = -48;
                goto LABEL_44;
              }
LABEL_37:
              if (v20 == 70)
              {
                v21 = -64;
                goto LABEL_44;
              }
LABEL_38:
              v22 = v20 - 52;
              if ((v20 - 33) >= 5)
                v23 = -48;
              else
                v23 = -64;
              if (v22 >= 6)
                v21 = v23;
              else
                v21 = -72;
            }
          }
LABEL_44:
          v9 = sub_22F076E9C(*a1, v9 + v21);
        }
      }
    }
  }
  if (sub_22F088D2C(a1, v8))
    goto LABEL_21;
  v14 = *(_WORD *)(v9 + 8);
LABEL_13:
  v15 = (v14 & 0x7E) - 52;
  v16 = v14 & 0x7F;
  v17 = v15 < 6 || v16 == 24;
  if (v17 || v16 == 1)
  {
LABEL_21:
    sub_22F088E58(a1, a2, a3, a4);
  }
  else
  {
    v24 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000);
    v25 = sub_22F088588(*(unsigned __int16 *)(v24 + 248) | (*(unsigned __int8 *)(v24 + 250) << 16), v8);
    if (v25)
    {
      v26 = v25;
      v27 = (llvm::raw_ostream *)a1[1];
      v28 = (_BYTE *)*((_QWORD *)v27 + 4);
      if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
      {
        llvm::raw_ostream::write(v27);
      }
      else
      {
        *((_QWORD *)v27 + 4) = v28 + 1;
        *v28 = 78;
      }
      sub_22F088668((uint64_t)a1, v26, 0);
      sub_22F08459C(a1, a2, a3, 0, a4);
      v34 = (llvm::raw_ostream *)a1[1];
      v35 = (_BYTE *)*((_QWORD *)v34 + 4);
      if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
      {
        llvm::raw_ostream::write(v34);
      }
      else
      {
        *((_QWORD *)v34 + 4) = v35 + 1;
        *v35 = 69;
      }
    }
    else
    {
      v29 = *(_WORD *)(v9 + 8) & 0x7F;
      if (v29 == 83 || v29 == 16 && sub_22F07DECC(*a1, v9 - 48))
      {
        v36 = 0;
        v30 = sub_22F087584(a2, a3, &v36);
        if (v30)
        {
          v32 = v30;
          sub_22F0843EC((uint64_t)a1, v30, v31, v9, a4);
          if ((v32 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
              v33 = 0;
            else
              v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v33 = 0;
          }
          sub_22F086C28(a1, v33, v36);
        }
        else
        {
          sub_22F0844F0(a1, a2, a3, v9, a4);
        }
      }
      else
      {
        sub_22F089830((llvm::raw_ostream *)a1, a2, a3, v9, a4, 0);
      }
    }
  }
}

uint64_t sub_22F078110(uint64_t a1)
{
  size_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= 2)
  {
    qsort(*(void **)a1, v2, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F2BB1DC);
    LODWORD(v2) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(sub_22EAA01BC(*(_QWORD *)a1, *(_QWORD *)a1 + 16 * v2)
                                         - *(_QWORD *)a1) >> 4;
  return a1;
}

void sub_22F07817C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v13;
  int8x16_t v15;
  int32x4_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x2_t v39;
  int v40;
  uint64_t v41;
  llvm::raw_ostream *v42;
  _QWORD *v43;
  const char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  uint64_t v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  _WORD *v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  llvm::raw_ostream *v63;
  _BYTE *v64;
  unsigned __int8 *v65;
  int v66;
  BOOL v67;
  llvm::raw_ostream *v68;
  __int16 *v69;
  const char *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  llvm::raw_ostream *v73;
  uint64_t v74;
  const char *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  char *v78;
  const char *v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  char *v82;
  const char *v83;
  char *v84;
  llvm::raw_ostream *v85;
  _BYTE *v86;
  llvm::raw_ostream *v87;
  _BYTE *v88;
  __int16 *v89;
  llvm::raw_ostream *v90;
  _BYTE *v91;
  _OWORD *v92;
  llvm::raw_ostream *v93;
  _QWORD *v94;
  llvm::raw_ostream *v95;
  _WORD *v96;
  llvm::raw_ostream *v97;
  _BYTE *v98;
  unsigned int v99;
  llvm::raw_ostream *v100;
  _WORD *v101;
  llvm::raw_ostream *v102;
  _BYTE *v103;
  llvm::raw_ostream *v104;
  _BYTE *v105;
  llvm::raw_ostream *v106;
  uint64_t v107;
  unsigned int v108;
  llvm::raw_ostream *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  llvm::raw_ostream *v122;
  _BYTE *v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  int v127;
  uint64_t v128;
  BOOL v129;
  llvm::raw_ostream *v130;
  _BYTE *v131;
  int v132;
  llvm::raw_ostream *v133;
  char *v134;
  char v135;
  llvm::raw_ostream *v136;
  _DWORD *v137;
  llvm::raw_ostream *v138;
  _BYTE *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  llvm::raw_ostream *v146;
  _BYTE *v147;
  llvm::raw_ostream *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _DWORD *v156;
  size_t v157;
  const char *v158;
  unsigned int v159;
  llvm::raw_ostream *v160;
  void *v161;
  llvm::raw_ostream *v162;
  _BYTE *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  __int16 v177;
  llvm::raw_ostream *v178;
  llvm::raw_ostream *v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE __p[24];
  __int128 v196;
  uint64_t v197;
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x600) == 0x200)
  {
    do
    {
      v3 = a2;
      v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
      v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (v5 && (*(_DWORD *)(v5 + 16) & 0x800FF) == 0x2E)
        break;
      a2 = sub_22F4098F0(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
    }
    while (a2 != v3);
    if ((v3 & 8) == 0)
      goto LABEL_6;
LABEL_8:
    v7 = *v4;
    v6 = v4[3] | v3 & 7;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v3 = v8 | a2 & 7;
  v4 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 8) != 0)
    goto LABEL_8;
LABEL_6:
  v6 = v3 & 7;
  v7 = (uint64_t)v4;
LABEL_9:
  if ((v6 & 0xCFFFFFFFFLL) != 0)
    goto LABEL_20;
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  v11 = v10 & 0xFF800FF;
  if (v9 && v11 == 115867659)
    goto LABEL_20;
  v13 = v10 & 0xFF000FF;
  if (v9 && v13 == 116391947)
    goto LABEL_20;
  v15 = (int8x16_t)vdupq_n_s32(v10);
  v16 = (int32x4_t)vandq_s8(v15, (int8x16_t)vdupq_n_s32(0xFC000FFu));
  if (v9)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v16, (int32x4_t)xmmword_22F45AEA0))) & 1 | ((v10 & 0xFE000FF) == 16777227))
      goto LABEL_20;
  }
  v31 = v13 == 117440523 || v11 == 118489099;
  v32 = !v31 || v9 == 0;
  v33 = !v32;
  v34 = *(_DWORD *)(v9 + 16);
  if (v34 == 38 || v33)
    goto LABEL_20;
  v35 = v16.i32[0] == 20971531 || (v10 & 0xFE000FF) == 18874379;
  v36 = v35;
  if (v9 && v36)
    goto LABEL_20;
  if (!v9 || v34 != 11)
  {
    if (v34 != 11)
    {
      v40 = *(unsigned __int8 *)(v7 + 16);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2000) + 250) & 0xF) << 16 <= 0x20000u
        || v40 != 14)
      {
        if (v40 != 15 || (v41 = v7) == 0)
        {
          if (v34 != 15)
            goto LABEL_20;
          v41 = sub_22F10CF48(v7);
          if (!v41)
            goto LABEL_20;
        }
        if (*(_QWORD *)(v41 + 24) >= 0x10uLL)
          goto LABEL_20;
      }
    }
LABEL_78:
    v17 = 0;
    goto LABEL_22;
  }
  v37 = (int32x4_t)vandq_s8(v15, (int8x16_t)xmmword_22F45ABC0);
  v38 = v37;
  v38.i32[1] = v37.i32[0];
  v38.i32[2] = v37.i32[0];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(vzip1q_s32(v37, (int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL)), (int32x4_t)xmmword_22F45ABD0), (int16x8_t)vceqq_s32(v38, (int32x4_t)xmmword_22F45ABE0)))) & 1) == 0)
  {
    v39 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL)), (int32x2_t)0x720000008000000);
    if ((v39.i8[4] & 1) == 0 && (v39.i8[0] & 1) == 0)
      goto LABEL_78;
  }
LABEL_20:
  if (sub_22F079AD8((uint64_t *)a1, v3))
    return;
  v17 = 1;
LABEL_22:
  v18 = HIDWORD(v6);
  if (BYTE4(v6) & 0xC | v6 && (*(_DWORD *)(*v4 + 16) & 0xFEu) - 2 <= 3)
  {
    v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 8), v3);
    LODWORD(v6) = 0;
    v18 = 0;
  }
  if (!(v18 & 0xC | v6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v19 + 16) != 16)
    {
      v23 = *(unsigned int *)(v7 + 16);
      switch(*(_DWORD *)(v7 + 16))
      {
        case 2u:
          v61 = *(llvm::raw_ostream **)(a1 + 8);
          v62 = (_BYTE *)*((_QWORD *)v61 + 4);
          if ((unint64_t)v62 >= *((_QWORD *)v61 + 3))
          {
            v61 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8));
          }
          else
          {
            *((_QWORD *)v61 + 4) = v62 + 1;
            *v62 = 65;
          }
          llvm::APInt::print((llvm::APInt *)(v7 + 40), v61);
          v25 = (char *)*((_QWORD *)v61 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)v61 + 3))
          {
            v24 = v61;
LABEL_227:
            llvm::raw_ostream::write(v24);
          }
          else
          {
            *((_QWORD *)v61 + 4) = v25 + 1;
LABEL_225:
            v26 = 95;
LABEL_226:
            *v25 = v26;
          }
          goto LABEL_228;
        case 3u:
          v85 = *(llvm::raw_ostream **)(a1 + 8);
          v86 = (_BYTE *)*((_QWORD *)v85 + 4);
          if ((unint64_t)v86 >= *((_QWORD *)v85 + 3))
          {
            llvm::raw_ostream::write(v85);
          }
          else
          {
            *((_QWORD *)v85 + 4) = v86 + 1;
            *v86 = 65;
          }
          v126 = *(unsigned __int8 **)(v7 + 48);
          if (!v126)
            goto LABEL_223;
          goto LABEL_222;
        case 4u:
          v73 = *(llvm::raw_ostream **)(a1 + 8);
          v89 = (__int16 *)*((_QWORD *)v73 + 4);
          if (*((_QWORD *)v73 + 3) - (_QWORD)v89 <= 1uLL)
          {
            v75 = "A_";
            goto LABEL_178;
          }
          v176 = 24385;
          goto LABEL_353;
        case 5u:
          v63 = *(llvm::raw_ostream **)(a1 + 8);
          v64 = (_BYTE *)*((_QWORD *)v63 + 4);
          if ((unint64_t)v64 >= *((_QWORD *)v63 + 3))
          {
            llvm::raw_ostream::write(v63);
          }
          else
          {
            *((_QWORD *)v63 + 4) = v64 + 1;
            *v64 = 65;
          }
          v126 = *(unsigned __int8 **)(v7 + 40);
          if (v126)
LABEL_222:
            sub_22F07E3A4((uint64_t *)a1, v126, 0xFFFFFFFFLL, 0);
LABEL_223:
          v24 = *(llvm::raw_ostream **)(a1 + 8);
          v25 = (char *)*((_QWORD *)v24 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
            goto LABEL_227;
          *((_QWORD *)v24 + 4) = v25 + 1;
          goto LABEL_225;
        case 6u:
          v73 = *(llvm::raw_ostream **)(a1 + 8);
          v74 = *((_QWORD *)v73 + 4);
          if ((unint64_t)(*((_QWORD *)v73 + 3) - v74) <= 8)
          {
            v75 = "U7_Atomic";
            goto LABEL_178;
          }
          *(_BYTE *)(v74 + 8) = 99;
          *(_QWORD *)v74 = *(_QWORD *)"U7_Atomic";
          v175 = *((_QWORD *)v73 + 4) + 9;
          goto LABEL_354;
        case 9u:
          v76 = *(llvm::raw_ostream **)(a1 + 8);
          v77 = (_BYTE *)*((_QWORD *)v76 + 4);
          if (*((_BYTE **)v76 + 3) == v77)
          {
            v76 = (llvm::raw_ostream *)llvm::raw_ostream::write(v76, "D");
            v78 = (char *)*((_QWORD *)v76 + 4);
          }
          else
          {
            *v77 = 68;
            v78 = (char *)(*((_QWORD *)v76 + 4) + 1);
            *((_QWORD *)v76 + 4) = v78;
          }
          if ((*(_BYTE *)(v7 + 32) & 1) != 0)
            v79 = "U";
          else
            v79 = "B";
          if (*((char **)v76 + 3) == v78)
          {
            llvm::raw_ostream::write(v76, v79);
          }
          else
          {
            *v78 = *v79;
            ++*((_QWORD *)v76 + 4);
          }
          v42 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          goto LABEL_140;
        case 0xAu:
          v73 = *(llvm::raw_ostream **)(a1 + 8);
          v92 = (_OWORD *)*((_QWORD *)v73 + 4);
          if (*((_QWORD *)v73 + 3) - (_QWORD)v92 <= 0xFuLL)
          {
            v75 = "U13block_pointer";
            goto LABEL_178;
          }
          *v92 = *(_OWORD *)"U13block_pointer";
          v175 = *((_QWORD *)v73 + 4) + 16;
          goto LABEL_354;
        case 0xBu:
          sub_22F07A344((_QWORD *)a1, v23);
          goto LABEL_42;
        case 0xCu:
          v24 = *(llvm::raw_ostream **)(a1 + 8);
          v25 = (char *)*((_QWORD *)v24 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
            goto LABEL_227;
          *((_QWORD *)v24 + 4) = v25 + 1;
          v26 = 67;
          goto LABEL_226;
        case 0xDu:
          v65 = *(unsigned __int8 **)(v7 + 24);
          v66 = *v65;
          v67 = (v66 - 161) > 0x33 || ((1 << (v66 + 95)) & 0xC000008000005) == 0;
          if (!v67 || v66 == 123)
          {
            v68 = *(llvm::raw_ostream **)(a1 + 8);
            v69 = (__int16 *)*((_QWORD *)v68 + 4);
            if (*((_QWORD *)v68 + 3) - (_QWORD)v69 <= 1uLL)
            {
              v70 = "Dt";
LABEL_118:
              llvm::raw_ostream::write(v68, v70);
              goto LABEL_119;
            }
            v177 = 29764;
          }
          else
          {
            v68 = *(llvm::raw_ostream **)(a1 + 8);
            v69 = (__int16 *)*((_QWORD *)v68 + 4);
            if (*((_QWORD *)v68 + 3) - (_QWORD)v69 <= 1uLL)
            {
              v70 = "DT";
              goto LABEL_118;
            }
            v177 = 21572;
          }
          *v69 = v177;
          *((_QWORD *)v68 + 4) += 2;
LABEL_119:
          sub_22F07E3A4((uint64_t *)a1, v65, 0xFFFFFFFFLL, 0);
LABEL_271:
          v133 = *(llvm::raw_ostream **)(a1 + 8);
          v134 = (char *)*((_QWORD *)v133 + 4);
          if ((unint64_t)v134 >= *((_QWORD *)v133 + 3))
          {
LABEL_274:
            llvm::raw_ostream::write(v133);
          }
          else
          {
            *((_QWORD *)v133 + 4) = v134 + 1;
            v135 = 69;
LABEL_273:
            *v134 = v135;
          }
          goto LABEL_42;
        case 0xEu:
          v42 = *(llvm::raw_ostream **)(a1 + 8);
          if ((v23 & 0x180000) == 0x80000)
            v44 = "Dc";
          else
            v44 = "Da";
          v60 = (_WORD *)*((_QWORD *)v42 + 4);
          if (*((_QWORD *)v42 + 3) - (_QWORD)v60 <= 1uLL)
            goto LABEL_248;
          *v60 = *(_WORD *)v44;
          v166 = *((_QWORD *)v42 + 4) + 2;
          goto LABEL_351;
        case 0xFu:
          v21 = *(_QWORD *)(v7 + 24);
          if (v21 >= 0x10)
            goto LABEL_33;
          *(_QWORD *)__p = *(_QWORD *)(v7 + 40);
          v48 = sub_22F0F08CC((uint64_t *)__p);
          if (!sub_22F07DB5C((uint64_t *)a1, v48))
          {
            v49 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v48 + 32))(v48);
            if (!sub_22F07DA88(a1, v49))
            {
              sub_22F0776D8(a1, v48, 0);
              *(_QWORD *)__p = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v48 + 32))(v48);
              v50 = *(_DWORD *)(a1 + 36);
              *(_DWORD *)(a1 + 36) = v50 + 1;
              *(_DWORD *)(sub_22F087EB4(a1 + 232, (uint64_t *)__p) + 8) = v50;
            }
          }
          goto LABEL_42;
        case 0x10u:
          goto LABEL_37;
        case 0x11u:
          v80 = *(llvm::raw_ostream **)(a1 + 8);
          v81 = (_BYTE *)*((_QWORD *)v80 + 4);
          if (*((_BYTE **)v80 + 3) == v81)
          {
            v80 = (llvm::raw_ostream *)llvm::raw_ostream::write(v80, "D");
            v82 = (char *)*((_QWORD *)v80 + 4);
          }
          else
          {
            *v81 = 68;
            v82 = (char *)(*((_QWORD *)v80 + 4) + 1);
            *((_QWORD *)v80 + 4) = v82;
          }
          if ((*(_BYTE *)(v7 + 40) & 2) != 0)
            v83 = "U";
          else
            v83 = "B";
          if (*((char **)v80 + 3) == v82)
          {
            llvm::raw_ostream::write(v80, v83);
          }
          else
          {
            *v82 = *v83;
            ++*((_QWORD *)v80 + 4);
          }
          sub_22F07E3A4((uint64_t *)a1, (unsigned __int8 *)(*(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFFFFCLL), 0xFFFFFFFFLL, 0);
          v42 = *(llvm::raw_ostream **)(a1 + 8);
LABEL_140:
          v84 = (char *)*((_QWORD *)v42 + 4);
          if (*((char **)v42 + 3) == v84)
          {
            v44 = "_";
            goto LABEL_248;
          }
          v167 = 95;
          goto LABEL_350;
        case 0x12u:
          if ((v23 >> 19) <= 4u)
            __asm { BR              X10 }
          v138 = *(llvm::raw_ostream **)(a1 + 8);
          v139 = (_BYTE *)*((_QWORD *)v138 + 4);
          if ((unint64_t)v139 >= *((_QWORD *)v138 + 3))
          {
            llvm::raw_ostream::write(v138);
          }
          else
          {
            *((_QWORD *)v138 + 4) = v139 + 1;
            *v139 = 78;
          }
          sub_22F0889D8(a1, *(_QWORD *)(v7 + 32));
          sub_22E54B3A4(*(_QWORD *)(a1 + 8), *(_QWORD *)(v7 + 40));
          goto LABEL_271;
        case 0x13u:
          if (*(_DWORD *)(v7 + 56) == 1)
          {
            v93 = *(llvm::raw_ostream **)(a1 + 8);
            v94 = (_QWORD *)*((_QWORD *)v93 + 4);
            if (*((_QWORD *)v93 + 3) - (_QWORD)v94 > 7uLL)
            {
              *v94 = 0x64656B6361703655;
              *((_QWORD *)v93 + 4) += 8;
            }
            else
            {
              llvm::raw_ostream::write(v93, "U6packed");
            }
          }
          v95 = *(llvm::raw_ostream **)(a1 + 8);
          v96 = (_WORD *)*((_QWORD *)v95 + 4);
          if (*((_QWORD *)v95 + 3) - (_QWORD)v96 > 1uLL)
          {
            *v96 = 30276;
            *((_QWORD *)v95 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v95, "Dv");
          }
          sub_22F07E3A4((uint64_t *)a1, *(unsigned __int8 **)(v7 + 40), 0xFFFFFFFFLL, 0);
          v97 = *(llvm::raw_ostream **)(a1 + 8);
          v98 = (_BYTE *)*((_QWORD *)v97 + 4);
          if ((unint64_t)v98 >= *((_QWORD *)v97 + 3))
          {
            llvm::raw_ostream::write(v97);
          }
          else
          {
            *((_QWORD *)v97 + 4) = v98 + 1;
            *v98 = 95;
          }
          v21 = *(_QWORD *)(v7 + 48);
          goto LABEL_33;
        case 0x14u:
          v146 = *(llvm::raw_ostream **)(a1 + 8);
          v147 = (_BYTE *)*((_QWORD *)v146 + 4);
          if ((unint64_t)v147 >= *((_QWORD *)v146 + 3))
          {
            llvm::raw_ostream::write(v146);
          }
          else
          {
            *((_QWORD *)v146 + 4) = v147 + 1;
            *v147 = 78;
          }
          v174 = sub_22F36E5B0(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
          sub_22F088BC8((uint64_t *)a1, v174);
          sub_22F083F48((uint64_t *)a1, v174, (__int128 *)(v7 + 48), *(_DWORD *)(v7 + 20));
          goto LABEL_271;
        case 0x15u:
          v99 = (v23 >> 19) & 0xF;
          if (v99 - 7 < 2)
          {
            v140 = *(_QWORD *)(*(_QWORD *)a1 + 16);
            v141 = sub_22F41A810(*(_QWORD *)(v140 + 32), 4, "cannot mangle this dependent fixed-length SVE vector type yet", 0x3DuLL);
            *(_DWORD *)(v140 + 312) = *(_DWORD *)(v7 + 56);
            *(_DWORD *)(v140 + 316) = v141;
            if (*(char *)(v140 + 311) < 0)
            {
              **(_BYTE **)(v140 + 288) = 0;
              *(_QWORD *)(v140 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v140 + 288) = 0;
              *(_BYTE *)(v140 + 311) = 0;
            }
            *(_QWORD *)__p = v140 + 320;
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = v140;
            LOWORD(v196) = 1;
            *(_BYTE *)(v140 + 320) = 0;
            *(_DWORD *)(v140 + 664) = 0;
            v168 = *(unsigned int *)(v140 + 776);
            if ((_DWORD)v168)
            {
              v169 = *(_QWORD *)(v140 + 768);
              v170 = 56 * v168;
              do
              {
                if (*(char *)(v169 + v170 - 9) < 0)
                  operator delete(*(void **)(v169 + v170 - 32));
                v170 -= 56;
              }
              while (v170);
            }
            *(_DWORD *)(v140 + 776) = 0;
            sub_22E3BB0B8((uint64_t)__p);
            goto LABEL_42;
          }
          if (v99 - 5 <= 1)
          {
            v142 = *(_QWORD *)a1;
            v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 15088);
            if (*(char *)(v143 + 55) < 0)
            {
              sub_22E3BB2B4(__p, *(void **)(v143 + 32), *(_QWORD *)(v143 + 40));
              v142 = *(_QWORD *)a1;
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v143 + 32);
              *(_QWORD *)&__p[16] = *(_QWORD *)(v143 + 48);
            }
            v196 = *(_OWORD *)(v143 + 56);
            v197 = *(_QWORD *)(v143 + 72);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v142 + 8) + 15088) + 56) - 3) > 1
              || HIDWORD(v196) <= 0x21 && ((1 << SBYTE12(v196)) & 0x3F0000888) != 0)
            {
              v164 = *(_QWORD *)(v142 + 16);
              v165 = sub_22F41A810(*(_QWORD *)(v164 + 32), 4, "cannot mangle this dependent neon vector type yet", 0x31uLL);
              *(_DWORD *)(v164 + 312) = *(_DWORD *)(v7 + 56);
              *(_DWORD *)(v164 + 316) = v165;
              if (*(char *)(v164 + 311) < 0)
              {
                **(_BYTE **)(v164 + 288) = 0;
                *(_QWORD *)(v164 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v164 + 288) = 0;
                *(_BYTE *)(v164 + 311) = 0;
              }
              v190 = (_QWORD *)(v164 + 320);
              v191 = 0;
              v192 = v164;
              LOWORD(v193) = 1;
              *(_BYTE *)(v164 + 320) = 0;
              *(_DWORD *)(v164 + 664) = 0;
              v171 = *(unsigned int *)(v164 + 776);
              if ((_DWORD)v171)
              {
                v172 = *(_QWORD *)(v164 + 768);
                v173 = 56 * v171;
                do
                {
                  if (*(char *)(v172 + v173 - 9) < 0)
                    operator delete(*(void **)(v172 + v173 - 32));
                  v173 -= 56;
                }
                while (v173);
              }
            }
            else
            {
              v164 = *(_QWORD *)(v142 + 16);
              v186 = sub_22F41A810(*(_QWORD *)(v164 + 32), 4, "cannot mangle this dependent neon vector type yet", 0x31uLL);
              *(_DWORD *)(v164 + 312) = *(_DWORD *)(v7 + 56);
              *(_DWORD *)(v164 + 316) = v186;
              if (*(char *)(v164 + 311) < 0)
              {
                **(_BYTE **)(v164 + 288) = 0;
                *(_QWORD *)(v164 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v164 + 288) = 0;
                *(_BYTE *)(v164 + 311) = 0;
              }
              v190 = (_QWORD *)(v164 + 320);
              v191 = 0;
              v192 = v164;
              LOWORD(v193) = 1;
              *(_BYTE *)(v164 + 320) = 0;
              *(_DWORD *)(v164 + 664) = 0;
              v187 = *(unsigned int *)(v164 + 776);
              if ((_DWORD)v187)
              {
                v188 = *(_QWORD *)(v164 + 768);
                v189 = 56 * v187;
                do
                {
                  if (*(char *)(v188 + v189 - 9) < 0)
                    operator delete(*(void **)(v188 + v189 - 32));
                  v189 -= 56;
                }
                while (v189);
              }
            }
            *(_DWORD *)(v164 + 776) = 0;
            sub_22E3BB0B8((uint64_t)&v190);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            goto LABEL_42;
          }
          v100 = *(llvm::raw_ostream **)(a1 + 8);
          v101 = (_WORD *)*((_QWORD *)v100 + 4);
          if (*((_QWORD *)v100 + 3) - (_QWORD)v101 > 1uLL)
          {
            *v101 = 30276;
            *((_QWORD *)v100 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v100, "Dv");
          }
          sub_22F07E3A4((uint64_t *)a1, *(unsigned __int8 **)(v7 + 48), 0xFFFFFFFFLL, 0);
          v102 = *(llvm::raw_ostream **)(a1 + 8);
          v103 = (_BYTE *)*((_QWORD *)v102 + 4);
          if ((unint64_t)v103 >= *((_QWORD *)v102 + 3))
          {
            llvm::raw_ostream::write(v102);
          }
          else
          {
            *((_QWORD *)v102 + 4) = v103 + 1;
            *v103 = 95;
          }
          v132 = (*(_DWORD *)(v7 + 16) >> 19) & 0xF;
          if (v132 == 4)
          {
            v133 = *(llvm::raw_ostream **)(a1 + 8);
            v134 = (char *)*((_QWORD *)v133 + 4);
            if ((unint64_t)v134 >= *((_QWORD *)v133 + 3))
              goto LABEL_274;
            *((_QWORD *)v133 + 4) = v134 + 1;
            v135 = 98;
          }
          else
          {
            if (v132 != 3)
            {
              v21 = *(_QWORD *)(v7 + 40);
              goto LABEL_33;
            }
            v133 = *(llvm::raw_ostream **)(a1 + 8);
            v134 = (char *)*((_QWORD *)v133 + 4);
            if ((unint64_t)v134 >= *((_QWORD *)v133 + 3))
              goto LABEL_274;
            *((_QWORD *)v133 + 4) = v134 + 1;
            v135 = 112;
          }
          goto LABEL_273;
        case 0x19u:
          v71 = *(llvm::raw_ostream **)(a1 + 8);
          v72 = (_BYTE *)*((_QWORD *)v71 + 4);
          if ((unint64_t)v72 >= *((_QWORD *)v71 + 3))
          {
            llvm::raw_ostream::write(v71);
          }
          else
          {
            *((_QWORD *)v71 + 4) = v72 + 1;
            *v72 = 70;
          }
          v127 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = (v127 | 1) + 2;
          sub_22F07817C(a1, *(_QWORD *)(v7 + 24));
          *(_DWORD *)(a1 + 40) = v127;
          goto LABEL_271;
        case 0x1Au:
          sub_22F07CE18((uint64_t *)a1, v7);
          goto LABEL_42;
        case 0x1Bu:
          goto LABEL_228;
        case 0x1Du:
          v52 = *(llvm::raw_ostream **)(a1 + 8);
          v53 = (_BYTE *)*((_QWORD *)v52 + 4);
          if (*((_BYTE **)v52 + 3) == v53)
          {
            llvm::raw_ostream::write(v52, "u");
          }
          else
          {
            *v53 = 117;
            ++*((_QWORD *)v52 + 4);
          }
          v54 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v55 = *((_QWORD *)v54 + 4);
          if ((unint64_t)(*((_QWORD *)v54 + 3) - v55) > 0xA)
          {
            *(_DWORD *)(v55 + 7) = 1701869940;
            *(_QWORD *)v55 = *(_QWORD *)"matrix_type";
            *((_QWORD *)v54 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v54, "matrix_type");
          }
          v109 = *(llvm::raw_ostream **)(a1 + 8);
          v110 = (_BYTE *)*((_QWORD *)v109 + 4);
          if (*((_BYTE **)v109 + 3) == v110)
          {
            llvm::raw_ostream::write(v109, "I");
          }
          else
          {
            *v110 = 73;
            ++*((_QWORD *)v109 + 4);
          }
          v111 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          v112 = sub_22EF67C8C(v111);
          v113 = sub_22EF5CDF0(v111, *(_QWORD *)(v112 & 0xFFFFFFFFFFFFFFF0));
          LODWORD(v114) = v113;
          *(_DWORD *)&__p[8] = v113;
          if (v113 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)__p);
            v116 = *(unsigned int *)&__p[8];
            __p[12] = 1;
            v115 = *(unsigned int *)(v7 + 40);
            if (*(_DWORD *)&__p[8] > 0x40u)
            {
              **(_QWORD **)__p = v115;
              bzero((void *)(*(_QWORD *)__p + 8), (((unint64_t)(v116 + 63) >> 3) - 8) & 0xFFFFFFF8);
              goto LABEL_189;
            }
          }
          else
          {
            __p[12] = 1;
            v115 = *(unsigned int *)(v7 + 40);
            LODWORD(v116) = v113;
          }
          if ((_DWORD)v116)
            v117 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v116;
          else
            v117 = 0;
          *(_QWORD *)__p = v117 & v115;
LABEL_189:
          v118 = sub_22EF67C8C(v111);
          sub_22F082234(a1, v118, (llvm::APInt *)__p);
          LODWORD(v191) = v114;
          if (v114 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v190);
            v114 = v191;
            BYTE4(v191) = 1;
            v119 = *(unsigned int *)(v7 + 44);
            if (v191 > 0x40)
            {
              *v190 = v119;
              bzero(v190 + 1, (((unint64_t)(v114 + 63) >> 3) - 8) & 0xFFFFFFF8);
LABEL_193:
              v121 = sub_22EF67C8C(v111);
              sub_22F082234(a1, v121, (llvm::APInt *)&v190);
              sub_22F07817C(a1, *(_QWORD *)(v7 + 32));
              v122 = *(llvm::raw_ostream **)(a1 + 8);
              v123 = (_BYTE *)*((_QWORD *)v122 + 4);
              if (*((_BYTE **)v122 + 3) == v123)
              {
                llvm::raw_ostream::write(v122, "E");
              }
              else
              {
                *v123 = 69;
                ++*((_QWORD *)v122 + 4);
              }
              if (v191 >= 0x41 && v190)
                MEMORY[0x2348A0E84](v190, 0x1000C8000313F17);
              if (*(_DWORD *)&__p[8] >= 0x41u && *(_QWORD *)__p)
                MEMORY[0x2348A0E84](*(_QWORD *)__p, 0x1000C8000313F17);
              goto LABEL_42;
            }
            if ((_DWORD)v191)
              goto LABEL_191;
          }
          else
          {
            BYTE4(v191) = 1;
            v119 = *(unsigned int *)(v7 + 44);
            if ((_DWORD)v114)
            {
LABEL_191:
              v120 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v114;
LABEL_192:
              v190 = (_QWORD *)(v120 & v119);
              goto LABEL_193;
            }
          }
          v120 = 0;
          goto LABEL_192;
        case 0x1Eu:
          v104 = *(llvm::raw_ostream **)(a1 + 8);
          v105 = (_BYTE *)*((_QWORD *)v104 + 4);
          if (*((_BYTE **)v104 + 3) == v105)
          {
            llvm::raw_ostream::write(v104, "u");
          }
          else
          {
            *v105 = 117;
            ++*((_QWORD *)v104 + 4);
          }
          v106 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v107 = *((_QWORD *)v106 + 4);
          if ((unint64_t)(*((_QWORD *)v106 + 3) - v107) > 0xA)
          {
            *(_DWORD *)(v107 + 7) = 1701869940;
            *(_QWORD *)v107 = *(_QWORD *)"matrix_type";
            *((_QWORD *)v106 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v106, "matrix_type");
          }
          v130 = *(llvm::raw_ostream **)(a1 + 8);
          v131 = (_BYTE *)*((_QWORD *)v130 + 4);
          if (*((_BYTE **)v130 + 3) == v131)
          {
            llvm::raw_ostream::write(v130, "I");
          }
          else
          {
            *v131 = 73;
            ++*((_QWORD *)v130 + 4);
          }
          sub_22F081670((_QWORD *)a1, *(unsigned __int8 **)(v7 + 48));
          sub_22F081670((_QWORD *)a1, *(unsigned __int8 **)(v7 + 56));
          sub_22F07817C(a1, *(_QWORD *)(v7 + 32));
          v42 = *(llvm::raw_ostream **)(a1 + 8);
          v84 = (char *)*((_QWORD *)v42 + 4);
          if (*((char **)v42 + 3) == v84)
          {
            v44 = "E";
            goto LABEL_248;
          }
          v167 = 69;
LABEL_350:
          *v84 = v167;
          v166 = *((_QWORD *)v42 + 4) + 1;
          goto LABEL_351;
        case 0x1Fu:
          v87 = *(llvm::raw_ostream **)(a1 + 8);
          v88 = (_BYTE *)*((_QWORD *)v87 + 4);
          if ((unint64_t)v88 >= *((_QWORD *)v87 + 3))
          {
            llvm::raw_ostream::write(v87);
          }
          else
          {
            *((_QWORD *)v87 + 4) = v88 + 1;
            *v88 = 77;
          }
          sub_22F07817C(a1, *(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFFFF0);
          v21 = *(_QWORD *)(v7 + 32);
          v128 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
          if (v128)
            v129 = *(_BYTE *)(v128 + 16) == 26;
          else
            v129 = 0;
          if (!v129)
            goto LABEL_33;
          sub_22F07CE18((uint64_t *)a1, *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
          ++*(_DWORD *)(a1 + 36);
          goto LABEL_42;
        case 0x20u:
        case 0x27u:
          v24 = *(llvm::raw_ostream **)(a1 + 8);
          v25 = (char *)*((_QWORD *)v24 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
            goto LABEL_227;
          *((_QWORD *)v24 + 4) = v25 + 1;
          v26 = 80;
          goto LABEL_226;
        case 0x21u:
          if (sub_22F409D44(v7))
          {
            v148 = *(llvm::raw_ostream **)(a1 + 8);
            v149 = *((_QWORD *)v148 + 4);
            if ((unint64_t)(*((_QWORD *)v148 + 3) - v149) > 9)
            {
              *(_WORD *)(v149 + 8) = 26223;
              *(_QWORD *)v149 = *(_QWORD *)"U8__kindof";
              *((_QWORD *)v148 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v148, "U8__kindof");
            }
          }
          if ((*(_BYTE *)(v7 + 19) & 0xFC) != 0)
          {
            *(_QWORD *)__p = &v196;
            *(_OWORD *)&__p[8] = xmmword_22F44E300;
            sub_22F242C48((uint64_t)&v190, (uint64_t)__p);
            v150 = (_QWORD *)v194;
            if ((unint64_t)(v193 - v194) > 8)
            {
              *(_BYTE *)(v194 + 8) = 111;
              *v150 = *(_QWORD *)"objcproto";
              v194 += 9;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v190, "objcproto");
            }
            v151 = *(_QWORD *)(v7 + 16);
            if (v151 >> 26)
            {
              v152 = v7 + 8 * ((v151 >> 19) & 0x7F) + 48;
              v153 = 8 * (v151 >> 26);
              do
              {
                v154 = *(_QWORD *)(*(_QWORD *)v152 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(*(_QWORD *)v152 + 40) & 7) != 0 || v154 == 0)
                {
                  v157 = 0;
                  v158 = "";
                }
                else
                {
                  v156 = *(_DWORD **)(v154 + 16);
                  v159 = *v156;
                  v158 = (const char *)(v156 + 4);
                  v157 = v159;
                }
                v160 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                v161 = (void *)*((_QWORD *)v160 + 4);
                if (v157 <= *((_QWORD *)v160 + 3) - (_QWORD)v161)
                {
                  if (v157)
                  {
                    memcpy(v161, v158, v157);
                    *((_QWORD *)v160 + 4) += v157;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v160, v158);
                }
                v152 += 8;
                v153 -= 8;
              }
              while (v153);
            }
            v162 = *(llvm::raw_ostream **)(a1 + 8);
            v163 = (_BYTE *)*((_QWORD *)v162 + 4);
            if ((unint64_t)v163 >= *((_QWORD *)v162 + 3))
            {
              llvm::raw_ostream::write(v162);
            }
            else
            {
              *((_QWORD *)v162 + 4) = v163 + 1;
              *v163 = 85;
            }
            v178 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            llvm::raw_ostream::write(v178, *(const char **)__p);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v190);
            if (*(__int128 **)__p != &v196)
              free(*(void **)__p);
          }
          sub_22F07817C(a1, *(_QWORD *)(v7 + 24));
          if (!sub_22F409CF8(v7))
            goto LABEL_42;
          v179 = *(llvm::raw_ostream **)(a1 + 8);
          v180 = (_BYTE *)*((_QWORD *)v179 + 4);
          if ((unint64_t)v180 >= *((_QWORD *)v179 + 3))
          {
            llvm::raw_ostream::write(v179);
          }
          else
          {
            *((_QWORD *)v179 + 4) = v180 + 1;
            *v180 = 73;
          }
          v181 = sub_22F10E414(v7);
          if (v182)
          {
            v183 = (uint64_t *)v181;
            v184 = 8 * v182;
            do
            {
              v185 = *v183++;
              sub_22F07817C(a1, v185);
              v184 -= 8;
            }
            while (v184);
          }
          goto LABEL_271;
        case 0x22u:
          v144 = *(_QWORD *)(sub_22F409D88(v7) + 40);
          if ((v144 & 7) != 0)
            v145 = 0;
          else
            v145 = v144 & 0xFFFFFFFFFFFFFFF8;
          sub_22E54B3A4(*(_QWORD *)(a1 + 8), v145);
          goto LABEL_42;
        case 0x24u:
          v73 = *(llvm::raw_ostream **)(a1 + 8);
          v89 = (__int16 *)*((_QWORD *)v73 + 4);
          if (*((_QWORD *)v73 + 3) - (_QWORD)v89 > 1uLL)
          {
            v176 = 28740;
LABEL_353:
            *v89 = v176;
            v175 = *((_QWORD *)v73 + 4) + 2;
LABEL_354:
            *((_QWORD *)v73 + 4) = v175;
          }
          else
          {
            v75 = "Dp";
LABEL_178:
            llvm::raw_ostream::write(v73, v75);
          }
LABEL_228:
          v21 = *(_QWORD *)(v7 + 32);
          goto LABEL_33;
        case 0x26u:
          v42 = *(llvm::raw_ostream **)(a1 + 8);
          v51 = *((_QWORD *)v42 + 4);
          if ((unint64_t)(*((_QWORD *)v42 + 3) - v51) <= 8)
          {
            v44 = "8ocl_pipe";
            goto LABEL_248;
          }
          *(_BYTE *)(v51 + 8) = 101;
          *(_QWORD *)v51 = *(_QWORD *)"8ocl_pipe";
          v166 = *((_QWORD *)v42 + 4) + 9;
          goto LABEL_351;
        case 0x28u:
          v56 = *(llvm::raw_ostream **)(a1 + 8);
          v57 = (_BYTE *)*((_QWORD *)v56 + 4);
          if ((unint64_t)v57 >= *((_QWORD *)v56 + 3))
          {
            llvm::raw_ostream::write(v56);
          }
          else
          {
            *((_QWORD *)v56 + 4) = v57 + 1;
            *v57 = 82;
          }
          if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
          {
            do
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v7)
              {
                v124 = *(_DWORD *)(v7 + 16);
                if ((v124 & 0xFE) == 0x28)
                  continue;
              }
              v7 = sub_22F10CF48(v7);
              v124 = *(_DWORD *)(v7 + 16);
            }
            while ((v124 & 0x100000) != 0);
          }
          goto LABEL_228;
        case 0x29u:
          v58 = *(llvm::raw_ostream **)(a1 + 8);
          v59 = (_BYTE *)*((_QWORD *)v58 + 4);
          if ((unint64_t)v59 >= *((_QWORD *)v58 + 3))
          {
            llvm::raw_ostream::write(v58);
          }
          else
          {
            *((_QWORD *)v58 + 4) = v59 + 1;
            *v59 = 79;
          }
          if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
          {
            do
            {
              v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v7)
              {
                v125 = *(_DWORD *)(v7 + 16);
                if ((v125 & 0xFE) == 0x28)
                  continue;
              }
              v7 = sub_22F10CF48(v7);
              v125 = *(_DWORD *)(v7 + 16);
            }
            while ((v125 & 0x100000) != 0);
          }
          goto LABEL_228;
        case 0x2Au:
          v42 = *(llvm::raw_ostream **)(a1 + 8);
          v47 = *((_QWORD *)v42 + 4);
          if ((unint64_t)(*((_QWORD *)v42 + 3) - v47) <= 0xA)
          {
            v44 = "_SUBSTPACK_";
            goto LABEL_248;
          }
          *(_DWORD *)(v47 + 7) = 1598767937;
          *(_QWORD *)v47 = *(_QWORD *)"_SUBSTPACK_";
          v166 = *((_QWORD *)v42 + 4) + 11;
          goto LABEL_351;
        case 0x2Cu:
        case 0x2Du:
          v45 = sub_22F114198(*(_QWORD *)(v7 + 24));
          goto LABEL_180;
        case 0x2Eu:
          *(_QWORD *)__p = *(_QWORD *)(v7 + 32);
          v46 = sub_22F0F08CC((uint64_t *)__p);
          if (v46)
          {
            sub_22F082B1C((uint64_t *)a1, v46, (__int128 *)(v7 + 40), *(_DWORD *)(v7 + 20));
          }
          else if (!sub_22F079AD8((uint64_t *)a1, v7 & 0xFFFFFFFFFFFFFFF0))
          {
            sub_22F088BC8((uint64_t *)a1, *(_QWORD *)(v7 + 32));
            sub_22F083F48((uint64_t *)a1, *(_QWORD *)(v7 + 32), (__int128 *)(v7 + 40), *(_DWORD *)(v7 + 20));
            sub_22F07D9CC(a1, v7 & 0xFFFFFFFFFFFFFFF0);
          }
          goto LABEL_42;
        case 0x2Fu:
          v108 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 32);
          sub_22F08379C(a1, v108 & 0x7FFF, HIWORD(v108));
          goto LABEL_42;
        case 0x30u:
        case 0x31u:
          v42 = *(llvm::raw_ostream **)(a1 + 8);
          v43 = (_QWORD *)*((_QWORD *)v42 + 4);
          if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 7uLL)
          {
            *v43 = 0x666F657079743675;
            v166 = *((_QWORD *)v42 + 4) + 8;
LABEL_351:
            *((_QWORD *)v42 + 4) = v166;
          }
          else
          {
            v44 = "u6typeof";
LABEL_248:
            llvm::raw_ostream::write(v42, v44);
          }
          goto LABEL_42;
        case 0x33u:
          if ((v23 & 0x400) != 0)
          {
            v90 = *(llvm::raw_ostream **)(a1 + 8);
            v91 = (_BYTE *)*((_QWORD *)v90 + 4);
            if ((unint64_t)v91 >= *((_QWORD *)v90 + 3))
            {
              llvm::raw_ostream::write(v90);
            }
            else
            {
              *((_QWORD *)v90 + 4) = v91 + 1;
              *v91 = 85;
            }
            if (!*(_DWORD *)(v7 + 40))
            {
              v136 = *(llvm::raw_ostream **)(a1 + 8);
              v137 = (_DWORD *)*((_QWORD *)v136 + 4);
              if (*((_QWORD *)v136 + 3) - (_QWORD)v137 > 3uLL)
              {
                *v137 = 1953850675;
                *((_QWORD *)v136 + 4) += 4;
              }
              else
              {
                llvm::raw_ostream::write(v136, "3eut");
              }
            }
          }
          v21 = *(_QWORD *)(v7 + 24);
          goto LABEL_33;
        case 0x34u:
          v45 = *(_QWORD *)(v7 + 24);
LABEL_180:
          sub_22F0776D8(a1, v45, 0);
          goto LABEL_42;
        case 0x37u:
        case 0x38u:
          sub_22F07D0E4((_QWORD *)a1, v7);
          goto LABEL_42;
        default:
          goto LABEL_42;
      }
    }
  }
  if (*(_BYTE *)(v7 + 16) != 16 || v7 == 0)
  {
    sub_22F079B94(a1, v6 | (v18 << 32), 0);
    v21 = v7 & 0xFFFFFFFFFFFFFFF0;
LABEL_33:
    v22 = a1;
  }
  else
  {
LABEL_37:
    v27 = *(_QWORD *)(v7 + 48);
    if ((v27 & 8) != 0)
    {
      v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v27 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
      v28 = v29 | *(_QWORD *)(v7 + 48) & 7;
    }
    else
    {
      v28 = *(_QWORD *)(v7 + 48) & 7;
    }
    v30 = v27 & 0xFFFFFFFFFFFFFFF0;
    sub_22F079B94(a1, v28, v7);
    v22 = a1;
    v21 = v30;
  }
  sub_22F07817C(v22, v21);
LABEL_42:
  if (v17)
    sub_22F07D9CC(a1, v3);
}

BOOL sub_22F079AD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0)
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v4 = 0;
  v5 = v4 | (v3 | a2) & 7;
  if (v5 <= 0x7FF && (v5 & 0x60F) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 16) == 45)
      {
        v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
        if (sub_22F07DB5C(a1, v8))
          return 1;
        a2 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
      }
    }
  }
  return sub_22F07DA88((uint64_t)a1, a2);
}

void sub_22F079B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  BOOL v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  const char *v28;
  unsigned int v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _WORD *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  std::string v44;
  std::string v45;
  char *v46;
  __int128 v47;
  _QWORD v48[8];
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 8);
    v7 = *((_QWORD *)v6 + 4);
    if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 4)
    {
      *(_BYTE *)(v7 + 4) = 73;
      *(_DWORD *)v7 = 1396781653;
      *((_QWORD *)v6 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v6, "U2ASI");
    }
    sub_22F07E3A4((uint64_t *)a1, *(unsigned __int8 **)(a3 + 40), 0xFFFFFFFFLL, 0);
    v8 = *(llvm::raw_ostream **)(a1 + 8);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "E");
    }
    else
    {
      *v9 = 69;
      ++*((_QWORD *)v8 + 4);
    }
  }
  if (a2 >= 0x800)
  {
    v46 = (char *)v48;
    v47 = xmmword_22F44E300;
    v10 = a2 >> 11;
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (a2 >> 11 <= 0x1A && !*(_BYTE *)(v11 + 15080))
      __asm { BR              X10 }
    v12 = v10 - 27;
    if (v10 < 0x1B)
      v12 = *(_DWORD *)(*(_QWORD *)(v11 + 15072) + 4 * v10);
    if (v12)
    {
      v13 = v12;
      v14 = (char *)&v50;
      do
      {
        *--v14 = (v13 % 0xA) | 0x30;
        v15 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v15);
    }
    else
    {
      if (!**(_DWORD **)(v11 + 15072))
        goto LABEL_38;
      v14 = &v49;
      v49 = 48;
    }
    sub_22E3B4274(&v44, v14, (char *)&v50, (char *)&v50 - v14);
    v16 = std::string::insert(&v44, 0, "AS");
    v45 = *v16;
    v17 = v45.__r_.__value_.__r.__words[2];
    v16->__r_.__value_.__r.__words[0] = 0;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v18 = HIBYTE(v17);
    v19 = (char)v18;
    v20 = (void *)v45.__r_.__value_.__r.__words[0];
    if ((v18 & 0x80u) == 0)
      v21 = &v45;
    else
      v21 = (std::string *)v45.__r_.__value_.__r.__words[0];
    v22 = v18 & 0x7F;
    if (v19 >= 0)
      size = v22;
    else
      size = v45.__r_.__value_.__l.__size_;
    *(_QWORD *)&v47 = 0;
    if (*((_QWORD *)&v47 + 1) < size)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v24 = v47;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      if (!size)
      {
LABEL_27:
        *(_QWORD *)&v47 = v25 + size;
        if (v19 < 0)
          operator delete(v20);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        v26 = v46;
        if ((_QWORD)v47)
        {
          sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), v46, v47);
          v26 = v46;
        }
        if (v26 != (char *)v48)
          free(v26);
        goto LABEL_38;
      }
    }
    memcpy(&v46[v24], v21, size);
    v25 = v47;
    goto LABEL_27;
  }
LABEL_38:
  v27 = (a2 >> 9) & 3;
  if (v27 == 1)
  {
    v28 = "MTLcoherent_device";
  }
  else
  {
    if (v27 != 2)
      goto LABEL_43;
    v28 = "MTLcoherent_system";
  }
  sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), v28, 0x12uLL);
LABEL_43:
  v29 = (a2 >> 6) & 7;
  if (v29 == 3)
    sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__weak", 6uLL);
  if ((a2 & 8) != 0)
    sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__unaligned", 0xBuLL);
  if (v29 == 2)
    sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__strong", 8uLL);
  if ((a2 & 0xC00000000) != 0)
  {
    sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__ptrauth", 9uLL);
    v30 = *(llvm::raw_ostream **)(a1 + 8);
    v31 = *((_QWORD *)v30 + 4);
    if ((unint64_t)(*((_QWORD *)v30 + 3) - v31) > 2)
    {
      *(_BYTE *)(v31 + 2) = 106;
      *(_WORD *)v31 = 19529;
      *((_QWORD *)v30 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v30, "ILj");
    }
    v32 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v33 = *((_QWORD *)v32 + 4);
    if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) > 2)
    {
      *(_BYTE *)(v33 + 2) = 98;
      *(_WORD *)v33 = 19525;
      *((_QWORD *)v32 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v32, "ELb");
    }
    v34 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v35 = *((_QWORD *)v34 + 4);
    if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 2)
    {
      *(_BYTE *)(v35 + 2) = 106;
      *(_WORD *)v35 = 19525;
      *((_QWORD *)v34 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v34, "ELj");
    }
    v36 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v37 = (_WORD *)*((_QWORD *)v36 + 4);
    if (*((_QWORD *)v36 + 3) - (_QWORD)v37 > 1uLL)
    {
      *v37 = 17733;
      *((_QWORD *)v36 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v36, "EE");
    }
  }
  if (v29 == 4)
  {
    sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__autoreleasing", 0xFuLL);
    if ((a2 & 2) != 0)
      goto LABEL_60;
LABEL_64:
    if ((a2 & 4) != 0)
      goto LABEL_69;
    goto LABEL_65;
  }
  if ((a2 & 2) == 0)
    goto LABEL_64;
LABEL_60:
  v38 = *(llvm::raw_ostream **)(a1 + 8);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if ((unint64_t)v39 >= *((_QWORD *)v38 + 3))
  {
    llvm::raw_ostream::write(v38);
    if ((a2 & 4) != 0)
      goto LABEL_69;
LABEL_65:
    if ((a2 & 1) == 0)
      return;
    goto LABEL_66;
  }
  *((_QWORD *)v38 + 4) = v39 + 1;
  *v39 = 114;
  if ((a2 & 4) == 0)
    goto LABEL_65;
LABEL_69:
  v42 = *(llvm::raw_ostream **)(a1 + 8);
  v43 = (_BYTE *)*((_QWORD *)v42 + 4);
  if ((unint64_t)v43 >= *((_QWORD *)v42 + 3))
  {
    llvm::raw_ostream::write(v42);
    if ((a2 & 1) == 0)
      return;
  }
  else
  {
    *((_QWORD *)v42 + 4) = v43 + 1;
    *v43 = 86;
    if ((a2 & 1) == 0)
      return;
  }
LABEL_66:
  v40 = *(llvm::raw_ostream **)(a1 + 8);
  v41 = (_BYTE *)*((_QWORD *)v40 + 4);
  if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
  {
    llvm::raw_ostream::write(v40);
  }
  else
  {
    *((_QWORD *)v40 + 4) = v41 + 1;
    *v41 = 75;
  }
}

void sub_22F07A344(_QWORD *a1, unsigned int a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  char v5;
  const char *v6;
  llvm::raw_ostream *v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  const void *v11;
  size_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  size_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const void *v35;
  size_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const void *v41;
  size_t v42;
  const char *v43;
  unint64_t v44;
  unint64_t v45;
  const void *v46;
  size_t v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  const void *v51;
  size_t v52;
  const char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  llvm::raw_ostream *v64;
  __int16 *v65;
  const char *p_p;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  unint64_t v80;
  unint64_t v81;
  const void *v82;
  size_t v83;
  const char *v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  void *v117;
  llvm::raw_ostream *v118;
  _BYTE *v119;
  llvm::raw_ostream *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t (*v125)(void);
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  void *v132;
  _OWORD *v133;
  void *v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  _OWORD *v144;
  void *v145;
  const char *v146;
  size_t v147;
  const char *v148;
  const char *v149;
  size_t v150;
  void *v151;
  const char *v152;
  size_t v153;
  __int16 v154;
  uint64_t v155;
  const char *v156;
  const char *v157;
  __int16 v158;
  const char *v159;
  const char *v160;
  const char *v161;
  const char *v162;
  const char *v163;
  const char *v164;
  const char *v165;
  const char *v166;
  const char *v167;
  __int128 v168;
  void *__p;
  unint64_t v170;
  uint64_t v171;

  __p = 0;
  v170 = 0;
  v171 = 0;
  switch((a2 >> 19) & 0x1FF)
  {
    case 0u:
      v6 = "ocl_image1d_ro";
      goto LABEL_441;
    case 1u:
      v6 = "ocl_image1d_array_ro";
      goto LABEL_441;
    case 2u:
      v6 = "ocl_image1d_buffer_ro";
      goto LABEL_441;
    case 3u:
      v6 = "ocl_image2d_ro";
      goto LABEL_441;
    case 4u:
      v6 = "ocl_image2d_array_ro";
      goto LABEL_441;
    case 5u:
      v6 = "ocl_image2d_depth_ro";
      goto LABEL_441;
    case 6u:
      v6 = "ocl_image2d_array_depth_ro";
      goto LABEL_441;
    case 7u:
      v6 = "ocl_image2d_msaa_ro";
      goto LABEL_441;
    case 8u:
      v6 = "ocl_image2d_array_msaa_ro";
      goto LABEL_441;
    case 9u:
      v6 = "ocl_image2d_msaa_depth_ro";
      goto LABEL_441;
    case 0xAu:
      v6 = "ocl_image2d_array_msaa_depth_ro";
      goto LABEL_441;
    case 0xBu:
      v6 = "ocl_image3d_ro";
      goto LABEL_441;
    case 0xCu:
      v6 = "ocl_image1d_wo";
      goto LABEL_441;
    case 0xDu:
      v6 = "ocl_image1d_array_wo";
      goto LABEL_441;
    case 0xEu:
      v6 = "ocl_image1d_buffer_wo";
      goto LABEL_441;
    case 0xFu:
      v6 = "ocl_image2d_wo";
      goto LABEL_441;
    case 0x10u:
      v6 = "ocl_image2d_array_wo";
      goto LABEL_441;
    case 0x11u:
      v6 = "ocl_image2d_depth_wo";
      goto LABEL_441;
    case 0x12u:
      v6 = "ocl_image2d_array_depth_wo";
      goto LABEL_441;
    case 0x13u:
      v6 = "ocl_image2d_msaa_wo";
      goto LABEL_441;
    case 0x14u:
      v6 = "ocl_image2d_array_msaa_wo";
      goto LABEL_441;
    case 0x15u:
      v6 = "ocl_image2d_msaa_depth_wo";
      goto LABEL_441;
    case 0x16u:
      v6 = "ocl_image2d_array_msaa_depth_wo";
      goto LABEL_441;
    case 0x17u:
      v6 = "ocl_image3d_wo";
      goto LABEL_441;
    case 0x18u:
      v6 = "ocl_image1d_rw";
      goto LABEL_441;
    case 0x19u:
      v6 = "ocl_image1d_array_rw";
      goto LABEL_441;
    case 0x1Au:
      v6 = "ocl_image1d_buffer_rw";
      goto LABEL_441;
    case 0x1Bu:
      v6 = "ocl_image2d_rw";
      goto LABEL_441;
    case 0x1Cu:
      v6 = "ocl_image2d_array_rw";
      goto LABEL_441;
    case 0x1Du:
      v6 = "ocl_image2d_depth_rw";
      goto LABEL_441;
    case 0x1Eu:
      v6 = "ocl_image2d_array_depth_rw";
      goto LABEL_441;
    case 0x1Fu:
      v6 = "ocl_image2d_msaa_rw";
      goto LABEL_441;
    case 0x20u:
      v6 = "ocl_image2d_array_msaa_rw";
      goto LABEL_441;
    case 0x21u:
      v6 = "ocl_image2d_msaa_depth_rw";
      goto LABEL_441;
    case 0x22u:
      v6 = "ocl_image2d_array_msaa_depth_rw";
      goto LABEL_441;
    case 0x23u:
      v6 = "ocl_image3d_rw";
      goto LABEL_441;
    case 0x24u:
      v6 = "ocl_intel_sub_group_avc_mce_payload_t";
      goto LABEL_441;
    case 0x25u:
      v6 = "ocl_intel_sub_group_avc_ime_payload_t";
      goto LABEL_441;
    case 0x26u:
      v6 = "ocl_intel_sub_group_avc_ref_payload_t";
      goto LABEL_441;
    case 0x27u:
      v6 = "ocl_intel_sub_group_avc_sic_payload_t";
      goto LABEL_441;
    case 0x28u:
      v6 = "ocl_intel_sub_group_avc_mce_result_t";
      goto LABEL_441;
    case 0x29u:
      v6 = "ocl_intel_sub_group_avc_ime_result_t";
      goto LABEL_441;
    case 0x2Au:
      v6 = "ocl_intel_sub_group_avc_ref_result_t";
      goto LABEL_441;
    case 0x2Bu:
      v6 = "ocl_intel_sub_group_avc_sic_result_t";
      goto LABEL_441;
    case 0x2Cu:
      v6 = "ocl_intel_sub_group_avc_ime_result_single_reference_streamout_t";
      goto LABEL_441;
    case 0x2Du:
      v6 = "ocl_intel_sub_group_avc_ime_result_dual_reference_streamout_t";
      goto LABEL_441;
    case 0x2Eu:
      v6 = "ocl_intel_sub_group_avc_ime_single_reference_streamin_t";
      goto LABEL_441;
    case 0x2Fu:
      v6 = "ocl_intel_sub_group_avc_ime_dual_reference_streamin_t";
LABEL_441:
      MEMORY[0x2348A0C14](&__p, v6);
      v64 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      if (v171 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      goto LABEL_874;
    case 0x30u:
      MEMORY[0x2348A0C14](&__p, "__SVInt8_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v80 = HIBYTE(v171) & 0x7F;
      else
        v80 = v170;
      v9 = "";
      if (v80 != 10)
        goto LABEL_835;
      if (v171 >= 0)
        v81 = HIBYTE(v171);
      else
        v81 = v170;
      if (v171 >= 0)
        v82 = &__p;
      else
        v82 = __p;
      if (v81 >= 0xA)
        v83 = 10;
      else
        v83 = v81;
      v84 = "__SVInt8_t";
      goto LABEL_830;
    case 0x31u:
      MEMORY[0x2348A0C14](&__p, "__SVInt16_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v8 = HIBYTE(v171) & 0x7F;
      else
        v8 = v170;
      v9 = "";
      if (v8 != 11)
        goto LABEL_835;
      if (v171 >= 0)
        v10 = HIBYTE(v171);
      else
        v10 = v170;
      if (v171 >= 0)
        v11 = &__p;
      else
        v11 = __p;
      if (v10 >= 0xB)
        v12 = 11;
      else
        v12 = v10;
      v13 = "__SVInt16_t";
      goto LABEL_486;
    case 0x32u:
      MEMORY[0x2348A0C14](&__p, "__SVInt32_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v85 = HIBYTE(v171) & 0x7F;
      else
        v85 = v170;
      v9 = "";
      if (v85 != 11)
        goto LABEL_835;
      if (v171 >= 0)
        v10 = HIBYTE(v171);
      else
        v10 = v170;
      if (v171 >= 0)
        v11 = &__p;
      else
        v11 = __p;
      if (v10 >= 0xB)
        v12 = 11;
      else
        v12 = v10;
      v13 = "__SVInt32_t";
      goto LABEL_486;
    case 0x33u:
      MEMORY[0x2348A0C14](&__p, "__SVInt64_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v14 = HIBYTE(v171) & 0x7F;
      else
        v14 = v170;
      v9 = "";
      if (v14 != 11)
        goto LABEL_835;
      if (v171 >= 0)
        v10 = HIBYTE(v171);
      else
        v10 = v170;
      if (v171 >= 0)
        v11 = &__p;
      else
        v11 = __p;
      if (v10 >= 0xB)
        v12 = 11;
      else
        v12 = v10;
      v13 = "__SVInt64_t";
      goto LABEL_486;
    case 0x34u:
      MEMORY[0x2348A0C14](&__p, "__SVUint8_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v86 = HIBYTE(v171) & 0x7F;
      else
        v86 = v170;
      v9 = "";
      if (v86 != 11)
        goto LABEL_835;
      if (v171 >= 0)
        v10 = HIBYTE(v171);
      else
        v10 = v170;
      if (v171 >= 0)
        v11 = &__p;
      else
        v11 = __p;
      if (v10 >= 0xB)
        v12 = 11;
      else
        v12 = v10;
      v13 = "__SVUint8_t";
LABEL_486:
      v87 = memcmp(v11, v13, v12) == 0;
      v88 = v10 == 11;
      goto LABEL_831;
    case 0x35u:
      MEMORY[0x2348A0C14](&__p, "__SVUint16_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v15 = HIBYTE(v171) & 0x7F;
      else
        v15 = v170;
      v9 = "";
      if (v15 != 12)
        goto LABEL_835;
      if (v171 >= 0)
        v16 = HIBYTE(v171);
      else
        v16 = v170;
      if (v171 >= 0)
        v17 = &__p;
      else
        v17 = __p;
      if (v16 >= 0xC)
        v18 = 12;
      else
        v18 = v16;
      v19 = "__SVUint16_t";
      goto LABEL_501;
    case 0x36u:
      MEMORY[0x2348A0C14](&__p, "__SVUint32_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v20 = HIBYTE(v171) & 0x7F;
      else
        v20 = v170;
      v9 = "";
      if (v20 != 12)
        goto LABEL_835;
      if (v171 >= 0)
        v16 = HIBYTE(v171);
      else
        v16 = v170;
      if (v171 >= 0)
        v17 = &__p;
      else
        v17 = __p;
      if (v16 >= 0xC)
        v18 = 12;
      else
        v18 = v16;
      v19 = "__SVUint32_t";
      goto LABEL_501;
    case 0x37u:
      MEMORY[0x2348A0C14](&__p, "__SVUint64_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v89 = HIBYTE(v171) & 0x7F;
      else
        v89 = v170;
      v9 = "";
      if (v89 != 12)
        goto LABEL_835;
      if (v171 >= 0)
        v16 = HIBYTE(v171);
      else
        v16 = v170;
      if (v171 >= 0)
        v17 = &__p;
      else
        v17 = __p;
      if (v16 >= 0xC)
        v18 = 12;
      else
        v18 = v16;
      v19 = "__SVUint64_t";
LABEL_501:
      v87 = memcmp(v17, v19, v18) == 0;
      v88 = v16 == 12;
      goto LABEL_831;
    case 0x38u:
      MEMORY[0x2348A0C14](&__p, "__SVFloat16_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v90 = HIBYTE(v171) & 0x7F;
      else
        v90 = v170;
      v9 = "";
      if (v90 != 13)
        goto LABEL_835;
      if (v171 >= 0)
        v22 = HIBYTE(v171);
      else
        v22 = v170;
      if (v171 >= 0)
        v23 = &__p;
      else
        v23 = __p;
      if (v22 >= 0xD)
        v24 = 13;
      else
        v24 = v22;
      v25 = "__SVFloat16_t";
      goto LABEL_530;
    case 0x39u:
      MEMORY[0x2348A0C14](&__p, "__SVFloat32_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v21 = HIBYTE(v171) & 0x7F;
      else
        v21 = v170;
      v9 = "";
      if (v21 != 13)
        goto LABEL_835;
      if (v171 >= 0)
        v22 = HIBYTE(v171);
      else
        v22 = v170;
      if (v171 >= 0)
        v23 = &__p;
      else
        v23 = __p;
      if (v22 >= 0xD)
        v24 = 13;
      else
        v24 = v22;
      v25 = "__SVFloat32_t";
      goto LABEL_530;
    case 0x3Au:
      MEMORY[0x2348A0C14](&__p, "__SVFloat64_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v91 = HIBYTE(v171) & 0x7F;
      else
        v91 = v170;
      v9 = "";
      if (v91 != 13)
        goto LABEL_835;
      if (v171 >= 0)
        v22 = HIBYTE(v171);
      else
        v22 = v170;
      if (v171 >= 0)
        v23 = &__p;
      else
        v23 = __p;
      if (v22 >= 0xD)
        v24 = 13;
      else
        v24 = v22;
      v25 = "__SVFloat64_t";
LABEL_530:
      v87 = memcmp(v23, v25, v24) == 0;
      v88 = v22 == 13;
      goto LABEL_831;
    case 0x3Bu:
      MEMORY[0x2348A0C14](&__p, "__SVBFloat16_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v92 = HIBYTE(v171) & 0x7F;
      else
        v92 = v170;
      v9 = "";
      if (v92 != 14)
        goto LABEL_835;
      if (v171 >= 0)
        v93 = HIBYTE(v171);
      else
        v93 = v170;
      if (v171 >= 0)
        v94 = &__p;
      else
        v94 = __p;
      if (v93 >= 0xE)
        v95 = 14;
      else
        v95 = v93;
      v87 = memcmp(v94, "__SVBFloat16_t", v95) == 0;
      v88 = v93 == 14;
      goto LABEL_831;
    case 0x3Cu:
      MEMORY[0x2348A0C14](&__p, "svint8x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v96 = HIBYTE(v171) & 0x7F;
      else
        v96 = v170;
      v9 = "";
      if (v96 != 18)
        goto LABEL_835;
      if (v171 >= 0)
        v45 = HIBYTE(v171);
      else
        v45 = v170;
      if (v171 >= 0)
        v46 = &__p;
      else
        v46 = __p;
      if (v45 >= 0x12)
        v47 = 18;
      else
        v47 = v45;
      v48 = "__clang_svint8x2_t";
      goto LABEL_559;
    case 0x3Du:
      MEMORY[0x2348A0C14](&__p, "svint16x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v26 = HIBYTE(v171) & 0x7F;
      else
        v26 = v170;
      v9 = "";
      if (v26 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint16x2_t";
      goto LABEL_785;
    case 0x3Eu:
      MEMORY[0x2348A0C14](&__p, "svint32x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v97 = HIBYTE(v171) & 0x7F;
      else
        v97 = v170;
      v9 = "";
      if (v97 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint32x2_t";
      goto LABEL_785;
    case 0x3Fu:
      MEMORY[0x2348A0C14](&__p, "svint64x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v31 = HIBYTE(v171) & 0x7F;
      else
        v31 = v170;
      v9 = "";
      if (v31 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint64x2_t";
      goto LABEL_785;
    case 0x40u:
      MEMORY[0x2348A0C14](&__p, "svuint8x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v32 = HIBYTE(v171) & 0x7F;
      else
        v32 = v170;
      v9 = "";
      if (v32 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svuint8x2_t";
      goto LABEL_785;
    case 0x41u:
      MEMORY[0x2348A0C14](&__p, "svuint16x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v98 = HIBYTE(v171) & 0x7F;
      else
        v98 = v170;
      v9 = "";
      if (v98 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint16x2_t";
      goto LABEL_800;
    case 0x42u:
      MEMORY[0x2348A0C14](&__p, "svuint32x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v99 = HIBYTE(v171) & 0x7F;
      else
        v99 = v170;
      v9 = "";
      if (v99 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint32x2_t";
      goto LABEL_800;
    case 0x43u:
      MEMORY[0x2348A0C14](&__p, "svuint64x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v100 = HIBYTE(v171) & 0x7F;
      else
        v100 = v170;
      v9 = "";
      if (v100 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint64x2_t";
      goto LABEL_800;
    case 0x44u:
      MEMORY[0x2348A0C14](&__p, "svfloat16x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v33 = HIBYTE(v171) & 0x7F;
      else
        v33 = v170;
      v9 = "";
      if (v33 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat16x2_t";
      goto LABEL_714;
    case 0x45u:
      MEMORY[0x2348A0C14](&__p, "svfloat32x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v38 = HIBYTE(v171) & 0x7F;
      else
        v38 = v170;
      v9 = "";
      if (v38 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat32x2_t";
      goto LABEL_714;
    case 0x46u:
      MEMORY[0x2348A0C14](&__p, "svfloat64x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v101 = HIBYTE(v171) & 0x7F;
      else
        v101 = v170;
      v9 = "";
      if (v101 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat64x2_t";
      goto LABEL_714;
    case 0x47u:
      MEMORY[0x2348A0C14](&__p, "svbfloat16x2_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v39 = HIBYTE(v171) & 0x7F;
      else
        v39 = v170;
      v9 = "";
      if (v39 != 22)
        goto LABEL_835;
      if (v171 >= 0)
        v40 = HIBYTE(v171);
      else
        v40 = v170;
      if (v171 >= 0)
        v41 = &__p;
      else
        v41 = __p;
      if (v40 >= 0x16)
        v42 = 22;
      else
        v42 = v40;
      v43 = "__clang_svbfloat16x2_t";
      goto LABEL_815;
    case 0x48u:
      MEMORY[0x2348A0C14](&__p, "svint8x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v44 = HIBYTE(v171) & 0x7F;
      else
        v44 = v170;
      v9 = "";
      if (v44 != 18)
        goto LABEL_835;
      if (v171 >= 0)
        v45 = HIBYTE(v171);
      else
        v45 = v170;
      if (v171 >= 0)
        v46 = &__p;
      else
        v46 = __p;
      if (v45 >= 0x12)
        v47 = 18;
      else
        v47 = v45;
      v48 = "__clang_svint8x3_t";
      goto LABEL_559;
    case 0x49u:
      MEMORY[0x2348A0C14](&__p, "svint16x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v102 = HIBYTE(v171) & 0x7F;
      else
        v102 = v170;
      v9 = "";
      if (v102 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint16x3_t";
      goto LABEL_785;
    case 0x4Au:
      MEMORY[0x2348A0C14](&__p, "svint32x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v103 = HIBYTE(v171) & 0x7F;
      else
        v103 = v170;
      v9 = "";
      if (v103 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint32x3_t";
      goto LABEL_785;
    case 0x4Bu:
      MEMORY[0x2348A0C14](&__p, "svint64x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v104 = HIBYTE(v171) & 0x7F;
      else
        v104 = v170;
      v9 = "";
      if (v104 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint64x3_t";
      goto LABEL_785;
    case 0x4Cu:
      MEMORY[0x2348A0C14](&__p, "svuint8x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v105 = HIBYTE(v171) & 0x7F;
      else
        v105 = v170;
      v9 = "";
      if (v105 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svuint8x3_t";
      goto LABEL_785;
    case 0x4Du:
      MEMORY[0x2348A0C14](&__p, "svuint16x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v49 = HIBYTE(v171) & 0x7F;
      else
        v49 = v170;
      v9 = "";
      if (v49 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint16x3_t";
      goto LABEL_800;
    case 0x4Eu:
      MEMORY[0x2348A0C14](&__p, "svuint32x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v54 = HIBYTE(v171) & 0x7F;
      else
        v54 = v170;
      v9 = "";
      if (v54 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint32x3_t";
      goto LABEL_800;
    case 0x4Fu:
      MEMORY[0x2348A0C14](&__p, "svuint64x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v106 = HIBYTE(v171) & 0x7F;
      else
        v106 = v170;
      v9 = "";
      if (v106 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint64x3_t";
      goto LABEL_800;
    case 0x50u:
      MEMORY[0x2348A0C14](&__p, "svfloat16x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v107 = HIBYTE(v171) & 0x7F;
      else
        v107 = v170;
      v9 = "";
      if (v107 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat16x3_t";
      goto LABEL_714;
    case 0x51u:
      MEMORY[0x2348A0C14](&__p, "svfloat32x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v55 = HIBYTE(v171) & 0x7F;
      else
        v55 = v170;
      v9 = "";
      if (v55 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat32x3_t";
      goto LABEL_714;
    case 0x52u:
      MEMORY[0x2348A0C14](&__p, "svfloat64x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v56 = HIBYTE(v171) & 0x7F;
      else
        v56 = v170;
      v9 = "";
      if (v56 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat64x3_t";
      goto LABEL_714;
    case 0x53u:
      MEMORY[0x2348A0C14](&__p, "svbfloat16x3_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v108 = HIBYTE(v171) & 0x7F;
      else
        v108 = v170;
      v9 = "";
      if (v108 != 22)
        goto LABEL_835;
      if (v171 >= 0)
        v40 = HIBYTE(v171);
      else
        v40 = v170;
      if (v171 >= 0)
        v41 = &__p;
      else
        v41 = __p;
      if (v40 >= 0x16)
        v42 = 22;
      else
        v42 = v40;
      v43 = "__clang_svbfloat16x3_t";
      goto LABEL_815;
    case 0x54u:
      MEMORY[0x2348A0C14](&__p, "svint8x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v57 = HIBYTE(v171) & 0x7F;
      else
        v57 = v170;
      v9 = "";
      if (v57 != 18)
        goto LABEL_835;
      if (v171 >= 0)
        v45 = HIBYTE(v171);
      else
        v45 = v170;
      if (v171 >= 0)
        v46 = &__p;
      else
        v46 = __p;
      if (v45 >= 0x12)
        v47 = 18;
      else
        v47 = v45;
      v48 = "__clang_svint8x4_t";
LABEL_559:
      v87 = memcmp(v46, v48, v47) == 0;
      v88 = v45 == 18;
      goto LABEL_831;
    case 0x55u:
      MEMORY[0x2348A0C14](&__p, "svint16x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v109 = HIBYTE(v171) & 0x7F;
      else
        v109 = v170;
      v9 = "";
      if (v109 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint16x4_t";
      goto LABEL_785;
    case 0x56u:
      MEMORY[0x2348A0C14](&__p, "svint32x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v110 = HIBYTE(v171) & 0x7F;
      else
        v110 = v170;
      v9 = "";
      if (v110 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint32x4_t";
      goto LABEL_785;
    case 0x57u:
      MEMORY[0x2348A0C14](&__p, "svint64x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v111 = HIBYTE(v171) & 0x7F;
      else
        v111 = v170;
      v9 = "";
      if (v111 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svint64x4_t";
      goto LABEL_785;
    case 0x58u:
      MEMORY[0x2348A0C14](&__p, "svuint8x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v112 = HIBYTE(v171) & 0x7F;
      else
        v112 = v170;
      v9 = "";
      if (v112 != 19)
        goto LABEL_835;
      if (v171 >= 0)
        v27 = HIBYTE(v171);
      else
        v27 = v170;
      if (v171 >= 0)
        v28 = &__p;
      else
        v28 = __p;
      if (v27 >= 0x13)
        v29 = 19;
      else
        v29 = v27;
      v30 = "__clang_svuint8x4_t";
LABEL_785:
      v87 = memcmp(v28, v30, v29) == 0;
      v88 = v27 == 19;
      goto LABEL_831;
    case 0x59u:
      MEMORY[0x2348A0C14](&__p, "svuint16x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v113 = HIBYTE(v171) & 0x7F;
      else
        v113 = v170;
      v9 = "";
      if (v113 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint16x4_t";
      goto LABEL_800;
    case 0x5Au:
      MEMORY[0x2348A0C14](&__p, "svuint32x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v58 = HIBYTE(v171) & 0x7F;
      else
        v58 = v170;
      v9 = "";
      if (v58 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint32x4_t";
      goto LABEL_800;
    case 0x5Bu:
      MEMORY[0x2348A0C14](&__p, "svuint64x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v59 = HIBYTE(v171) & 0x7F;
      else
        v59 = v170;
      v9 = "";
      if (v59 != 20)
        goto LABEL_835;
      if (v171 >= 0)
        v50 = HIBYTE(v171);
      else
        v50 = v170;
      if (v171 >= 0)
        v51 = &__p;
      else
        v51 = __p;
      if (v50 >= 0x14)
        v52 = 20;
      else
        v52 = v50;
      v53 = "__clang_svuint64x4_t";
LABEL_800:
      v87 = memcmp(v51, v53, v52) == 0;
      v88 = v50 == 20;
      goto LABEL_831;
    case 0x5Cu:
      MEMORY[0x2348A0C14](&__p, "svfloat16x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v60 = HIBYTE(v171) & 0x7F;
      else
        v60 = v170;
      v9 = "";
      if (v60 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat16x4_t";
      goto LABEL_714;
    case 0x5Du:
      MEMORY[0x2348A0C14](&__p, "svfloat32x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v61 = HIBYTE(v171) & 0x7F;
      else
        v61 = v170;
      v9 = "";
      if (v61 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat32x4_t";
      goto LABEL_714;
    case 0x5Eu:
      MEMORY[0x2348A0C14](&__p, "svfloat64x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v62 = HIBYTE(v171) & 0x7F;
      else
        v62 = v170;
      v9 = "";
      if (v62 != 21)
        goto LABEL_835;
      if (v171 >= 0)
        v34 = HIBYTE(v171);
      else
        v34 = v170;
      if (v171 >= 0)
        v35 = &__p;
      else
        v35 = __p;
      if (v34 >= 0x15)
        v36 = 21;
      else
        v36 = v34;
      v37 = "__clang_svfloat64x4_t";
LABEL_714:
      v87 = memcmp(v35, v37, v36) == 0;
      v88 = v34 == 21;
      goto LABEL_831;
    case 0x5Fu:
      MEMORY[0x2348A0C14](&__p, "svbfloat16x4_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v114 = HIBYTE(v171) & 0x7F;
      else
        v114 = v170;
      v9 = "";
      if (v114 != 22)
        goto LABEL_835;
      if (v171 >= 0)
        v40 = HIBYTE(v171);
      else
        v40 = v170;
      if (v171 >= 0)
        v41 = &__p;
      else
        v41 = __p;
      if (v40 >= 0x16)
        v42 = 22;
      else
        v42 = v40;
      v43 = "__clang_svbfloat16x4_t";
LABEL_815:
      v87 = memcmp(v41, v43, v42) == 0;
      v88 = v40 == 22;
      goto LABEL_831;
    case 0x60u:
      MEMORY[0x2348A0C14](&__p, "__SVBool_t");
      v7 = (llvm::raw_ostream *)a1[1];
      if (v171 >= 0)
        v115 = HIBYTE(v171) & 0x7F;
      else
        v115 = v170;
      v9 = "";
      if (v115 != 10)
        goto LABEL_835;
      if (v171 >= 0)
        v81 = HIBYTE(v171);
      else
        v81 = v170;
      if (v171 >= 0)
        v82 = &__p;
      else
        v82 = __p;
      if (v81 >= 0xA)
        v83 = 10;
      else
        v83 = v81;
      v84 = "__SVBool_t";
LABEL_830:
      v87 = memcmp(v82, v84, v83) == 0;
      v88 = v81 == 10;
LABEL_831:
      if (!v88)
        v87 = 0;
      if (v87)
        v9 = "u";
LABEL_835:
      v116 = strlen(v9);
      v117 = (void *)*((_QWORD *)v7 + 4);
      if (v116 <= *((_QWORD *)v7 + 3) - (_QWORD)v117)
      {
        if (v116)
        {
          v146 = v9;
          v147 = v116;
          memcpy(v117, v146, v116);
          *((_QWORD *)v7 + 4) += v147;
        }
      }
      else
      {
        llvm::raw_ostream::write(v7, v9);
      }
      goto LABEL_871;
    case 0x61u:
      v63 = "__vector_quad";
      goto LABEL_868;
    case 0x62u:
      v63 = "__vector_pair";
      goto LABEL_868;
    case 0x63u:
      v63 = "__rvv_int8mf8_t";
      goto LABEL_868;
    case 0x64u:
      v63 = "__rvv_int8mf4_t";
      goto LABEL_868;
    case 0x65u:
      v63 = "__rvv_int8mf2_t";
      goto LABEL_868;
    case 0x66u:
      v63 = "__rvv_int8m1_t";
      goto LABEL_868;
    case 0x67u:
      v63 = "__rvv_int8m2_t";
      goto LABEL_868;
    case 0x68u:
      v63 = "__rvv_int8m4_t";
      goto LABEL_868;
    case 0x69u:
      v63 = "__rvv_int8m8_t";
      goto LABEL_868;
    case 0x6Au:
      v63 = "__rvv_uint8mf8_t";
      goto LABEL_868;
    case 0x6Bu:
      v63 = "__rvv_uint8mf4_t";
      goto LABEL_868;
    case 0x6Cu:
      v63 = "__rvv_uint8mf2_t";
      goto LABEL_868;
    case 0x6Du:
      v63 = "__rvv_uint8m1_t";
      goto LABEL_868;
    case 0x6Eu:
      v63 = "__rvv_uint8m2_t";
      goto LABEL_868;
    case 0x6Fu:
      v63 = "__rvv_uint8m4_t";
      goto LABEL_868;
    case 0x70u:
      v63 = "__rvv_uint8m8_t";
      goto LABEL_868;
    case 0x71u:
      v63 = "__rvv_int16mf4_t";
      goto LABEL_868;
    case 0x72u:
      v63 = "__rvv_int16mf2_t";
      goto LABEL_868;
    case 0x73u:
      v63 = "__rvv_int16m1_t";
      goto LABEL_868;
    case 0x74u:
      v63 = "__rvv_int16m2_t";
      goto LABEL_868;
    case 0x75u:
      v63 = "__rvv_int16m4_t";
      goto LABEL_868;
    case 0x76u:
      v63 = "__rvv_int16m8_t";
      goto LABEL_868;
    case 0x77u:
      v63 = "__rvv_uint16mf4_t";
      goto LABEL_868;
    case 0x78u:
      v63 = "__rvv_uint16mf2_t";
      goto LABEL_868;
    case 0x79u:
      v63 = "__rvv_uint16m1_t";
      goto LABEL_868;
    case 0x7Au:
      v63 = "__rvv_uint16m2_t";
      goto LABEL_868;
    case 0x7Bu:
      v63 = "__rvv_uint16m4_t";
      goto LABEL_868;
    case 0x7Cu:
      v63 = "__rvv_uint16m8_t";
      goto LABEL_868;
    case 0x7Du:
      v63 = "__rvv_int32mf2_t";
      goto LABEL_868;
    case 0x7Eu:
      v63 = "__rvv_int32m1_t";
      goto LABEL_868;
    case 0x7Fu:
      v63 = "__rvv_int32m2_t";
      goto LABEL_868;
    case 0x80u:
      v63 = "__rvv_int32m4_t";
      goto LABEL_868;
    case 0x81u:
      v63 = "__rvv_int32m8_t";
      goto LABEL_868;
    case 0x82u:
      v63 = "__rvv_uint32mf2_t";
      goto LABEL_868;
    case 0x83u:
      v63 = "__rvv_uint32m1_t";
      goto LABEL_868;
    case 0x84u:
      v63 = "__rvv_uint32m2_t";
      goto LABEL_868;
    case 0x85u:
      v63 = "__rvv_uint32m4_t";
      goto LABEL_868;
    case 0x86u:
      v63 = "__rvv_uint32m8_t";
      goto LABEL_868;
    case 0x87u:
      v63 = "__rvv_int64m1_t";
      goto LABEL_868;
    case 0x88u:
      v63 = "__rvv_int64m2_t";
      goto LABEL_868;
    case 0x89u:
      v63 = "__rvv_int64m4_t";
      goto LABEL_868;
    case 0x8Au:
      v63 = "__rvv_int64m8_t";
      goto LABEL_868;
    case 0x8Bu:
      v63 = "__rvv_uint64m1_t";
      goto LABEL_868;
    case 0x8Cu:
      v63 = "__rvv_uint64m2_t";
      goto LABEL_868;
    case 0x8Du:
      v63 = "__rvv_uint64m4_t";
      goto LABEL_868;
    case 0x8Eu:
      v63 = "__rvv_uint64m8_t";
      goto LABEL_868;
    case 0x8Fu:
      v63 = "__rvv_float16mf4_t";
      goto LABEL_868;
    case 0x90u:
      v63 = "__rvv_float16mf2_t";
      goto LABEL_868;
    case 0x91u:
      v63 = "__rvv_float16m1_t";
      goto LABEL_868;
    case 0x92u:
      v63 = "__rvv_float16m2_t";
      goto LABEL_868;
    case 0x93u:
      v63 = "__rvv_float16m4_t";
      goto LABEL_868;
    case 0x94u:
      v63 = "__rvv_float16m8_t";
      goto LABEL_868;
    case 0x95u:
      v63 = "__rvv_float32mf2_t";
      goto LABEL_868;
    case 0x96u:
      v63 = "__rvv_float32m1_t";
      goto LABEL_868;
    case 0x97u:
      v63 = "__rvv_float32m2_t";
      goto LABEL_868;
    case 0x98u:
      v63 = "__rvv_float32m4_t";
      goto LABEL_868;
    case 0x99u:
      v63 = "__rvv_float32m8_t";
      goto LABEL_868;
    case 0x9Au:
      v63 = "__rvv_float64m1_t";
      goto LABEL_868;
    case 0x9Bu:
      v63 = "__rvv_float64m2_t";
      goto LABEL_868;
    case 0x9Cu:
      v63 = "__rvv_float64m4_t";
      goto LABEL_868;
    case 0x9Du:
      v63 = "__rvv_float64m8_t";
      goto LABEL_868;
    case 0x9Eu:
      v63 = "__rvv_BOOL1_t";
      goto LABEL_868;
    case 0x9Fu:
      v63 = "__rvv_BOOL2_t";
      goto LABEL_868;
    case 0xA0u:
      v63 = "__rvv_BOOL4_t";
      goto LABEL_868;
    case 0xA1u:
      v63 = "__rvv_BOOL8_t";
      goto LABEL_868;
    case 0xA2u:
      v63 = "__rvv_BOOL16_t";
      goto LABEL_868;
    case 0xA3u:
      v63 = "__rvv_BOOL32_t";
      goto LABEL_868;
    case 0xA4u:
      v63 = "__rvv_BOOL64_t";
LABEL_868:
      MEMORY[0x2348A0C14](&__p, v63);
      v118 = (llvm::raw_ostream *)a1[1];
      v119 = (_BYTE *)*((_QWORD *)v118 + 4);
      if ((unint64_t)v119 >= *((_QWORD *)v118 + 3))
      {
        llvm::raw_ostream::write(v118);
      }
      else
      {
        *((_QWORD *)v118 + 4) = v119 + 1;
        *v119 = 117;
      }
LABEL_871:
      v64 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      if (v171 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      goto LABEL_874;
    case 0xA5u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 118;
      goto LABEL_904;
    case 0xA6u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 98;
      goto LABEL_904;
    case 0xA7u:
    case 0xB2u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 99;
      goto LABEL_904;
    case 0xA8u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 104;
      goto LABEL_904;
    case 0xA9u:
    case 0xB4u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 119;
      goto LABEL_904;
    case 0xAAu:
      v64 = (llvm::raw_ostream *)a1[1];
      v65 = (__int16 *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v65 <= 1uLL)
      {
        p_p = "Du";
        goto LABEL_874;
      }
      v154 = 30020;
      goto LABEL_1010;
    case 0xABu:
      v64 = (llvm::raw_ostream *)a1[1];
      v65 = (__int16 *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v65 <= 1uLL)
      {
        p_p = "Ds";
        goto LABEL_874;
      }
      v154 = 29508;
      goto LABEL_1010;
    case 0xACu:
      v64 = (llvm::raw_ostream *)a1[1];
      v65 = (__int16 *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v65 <= 1uLL)
      {
        p_p = "Di";
        goto LABEL_874;
      }
      v154 = 26948;
      goto LABEL_1010;
    case 0xADu:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 116;
      goto LABEL_904;
    case 0xAEu:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 106;
      goto LABEL_904;
    case 0xAFu:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 109;
      goto LABEL_904;
    case 0xB0u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 121;
      goto LABEL_904;
    case 0xB1u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 111;
      goto LABEL_904;
    case 0xB3u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 97;
      goto LABEL_904;
    case 0xB5u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 115;
      goto LABEL_904;
    case 0xB6u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 105;
      goto LABEL_904;
    case 0xB7u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 108;
      goto LABEL_904;
    case 0xB8u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 120;
      goto LABEL_904;
    case 0xB9u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 110;
      goto LABEL_904;
    case 0xD2u:
      v64 = (llvm::raw_ostream *)a1[1];
      v65 = (__int16 *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v65 <= 1uLL)
      {
        p_p = "Dh";
        goto LABEL_874;
      }
      v154 = 26692;
      goto LABEL_1010;
    case 0xD3u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
        goto LABEL_991;
      *((_QWORD *)v3 + 4) = v4 + 1;
      v5 = 102;
      goto LABEL_904;
    case 0xD4u:
      v3 = (llvm::raw_ostream *)a1[1];
      v4 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
      {
LABEL_991:
        llvm::raw_ostream::write(v3);
      }
      else
      {
        *((_QWORD *)v3 + 4) = v4 + 1;
        v5 = 100;
LABEL_904:
        *v4 = v5;
      }
      goto LABEL_875;
    case 0xD5u:
      v120 = (llvm::raw_ostream *)a1[1];
      v121 = *(_QWORD *)(*a1 + 8);
      v122 = *(_QWORD *)(*(_QWORD *)(v121 + 2000) + 72);
      v123 = (v122 & 0x800000000) == 0 || (_DWORD)v122 == 0;
      v124 = 15096;
      if (v123)
        v124 = 15088;
      v125 = *(uint64_t (**)(void))(**(_QWORD **)(v121 + v124) + 160);
      goto LABEL_988;
    case 0xD6u:
      v64 = (llvm::raw_ostream *)a1[1];
      v67 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v67) <= 4)
      {
        p_p = "DF16_";
        goto LABEL_874;
      }
      *(_BYTE *)(v67 + 4) = 95;
      *(_DWORD *)v67 = 909198916;
      v155 = *((_QWORD *)v64 + 4) + 5;
      goto LABEL_1052;
    case 0xD7u:
      v68 = *(_QWORD *)(*a1 + 8);
      v69 = *(_QWORD *)(v68 + 2000);
      v70 = *(_QWORD *)(v69 + 72);
      if ((_DWORD)v70)
        v71 = (v70 & 0x800000000) == 0;
      else
        v71 = 1;
      if (!v71 || (*(_BYTE *)(v69 + 104) & 4) != 0)
        v72 = 15096;
      else
        v72 = 15088;
      v120 = (llvm::raw_ostream *)a1[1];
      v125 = *(uint64_t (**)(void))(**(_QWORD **)(v68 + v72) + 184);
      goto LABEL_988;
    case 0xD8u:
      v120 = (llvm::raw_ostream *)a1[1];
      v126 = *(_QWORD *)(*a1 + 8);
      v127 = *(_QWORD *)(*(_QWORD *)(v126 + 2000) + 72);
      v128 = (v127 & 0x800000000) == 0 || (_DWORD)v127 == 0;
      v129 = 15096;
      if (v128)
        v129 = 15088;
      v125 = *(uint64_t (**)(void))(**(_QWORD **)(v126 + v129) + 168);
      goto LABEL_988;
    case 0xD9u:
      v120 = (llvm::raw_ostream *)a1[1];
      v125 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(*a1 + 8) + 15088) + 176);
LABEL_988:
      v148 = (const char *)v125();
      if (!v148)
        goto LABEL_875;
      v149 = v148;
      v150 = strlen(v148);
      v151 = (void *)*((_QWORD *)v120 + 4);
      if (v150 > *((_QWORD *)v120 + 3) - (_QWORD)v151)
      {
        v64 = v120;
        p_p = v149;
        goto LABEL_874;
      }
      if (v150)
      {
        v152 = v149;
        v153 = v150;
        memcpy(v151, v152, v150);
        *((_QWORD *)v120 + 4) += v153;
      }
      goto LABEL_875;
    case 0xDAu:
      v64 = (llvm::raw_ostream *)a1[1];
      v65 = (__int16 *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v65 <= 1uLL)
      {
        p_p = "Dn";
        goto LABEL_874;
      }
      v154 = 28228;
LABEL_1010:
      *v65 = v154;
      v155 = *((_QWORD *)v64 + 4) + 2;
      goto LABEL_1052;
    case 0xDBu:
      v64 = (llvm::raw_ostream *)a1[1];
      v74 = (_QWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v74 <= 0xCuLL)
      {
        p_p = "11objc_object";
        goto LABEL_874;
      }
      v157 = "11objc_object";
      goto LABEL_1012;
    case 0xDCu:
      v64 = (llvm::raw_ostream *)a1[1];
      v130 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v130) <= 0xB)
      {
        p_p = "10objc_class";
        goto LABEL_874;
      }
      *(_DWORD *)(v130 + 8) = 1936941420;
      *(_QWORD *)v130 = *(_QWORD *)"10objc_class";
      v155 = *((_QWORD *)v64 + 4) + 12;
      goto LABEL_1052;
    case 0xDDu:
      v64 = (llvm::raw_ostream *)a1[1];
      v73 = (_QWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v73 <= 0xEuLL)
      {
        p_p = "13objc_selector";
        goto LABEL_874;
      }
      v156 = "13objc_selector";
      goto LABEL_1015;
    case 0xDEu:
      v64 = (llvm::raw_ostream *)a1[1];
      v74 = (_QWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v74 <= 0xCuLL)
      {
        p_p = "11ocl_sampler";
        goto LABEL_874;
      }
      v157 = "11ocl_sampler";
LABEL_1012:
      *v74 = *(_QWORD *)v157;
      *(_QWORD *)((char *)v74 + 5) = *(_QWORD *)(v157 + 5);
      v155 = *((_QWORD *)v64 + 4) + 13;
      goto LABEL_1052;
    case 0xDFu:
      v64 = (llvm::raw_ostream *)a1[1];
      v75 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v75) <= 9)
      {
        p_p = "9ocl_event";
        goto LABEL_874;
      }
      v158 = 29806;
      v159 = "9ocl_event";
      goto LABEL_1001;
    case 0xE0u:
      v64 = (llvm::raw_ostream *)a1[1];
      v76 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v76 <= 0xDuLL)
      {
        p_p = "12ocl_clkevent";
        goto LABEL_874;
      }
      qmemcpy(v76, "12ocl_clkevent", 14);
      v155 = *((_QWORD *)v64 + 4) + 14;
      goto LABEL_1052;
    case 0xE1u:
      v64 = (llvm::raw_ostream *)a1[1];
      v75 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v75) <= 9)
      {
        p_p = "9ocl_queue";
        goto LABEL_874;
      }
      v158 = 25973;
      v159 = "9ocl_queue";
LABEL_1001:
      *(_WORD *)(v75 + 8) = v158;
      *(_QWORD *)v75 = *(_QWORD *)v159;
      v155 = *((_QWORD *)v64 + 4) + 10;
      goto LABEL_1052;
    case 0xE2u:
      v64 = (llvm::raw_ostream *)a1[1];
      v73 = (_QWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v73 <= 0xEuLL)
      {
        p_p = "13ocl_reserveid";
        goto LABEL_874;
      }
      v156 = "13ocl_reserveid";
LABEL_1015:
      *v73 = *(_QWORD *)v156;
      *(_QWORD *)((char *)v73 + 7) = *(_QWORD *)(v156 + 7);
      v155 = *((_QWORD *)v64 + 4) + 15;
      goto LABEL_1052;
    case 0xE3u:
      v64 = (llvm::raw_ostream *)a1[1];
      v77 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v77) <= 0x15)
      {
        p_p = "20__metal_texture_1d_t";
        goto LABEL_874;
      }
      v160 = "20__metal_texture_1d_t";
      goto LABEL_1035;
    case 0xE4u:
      v64 = (llvm::raw_ostream *)a1[1];
      v131 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v131 <= 0x1BuLL)
      {
        p_p = "26__metal_texture_1d_array_t";
        goto LABEL_874;
      }
      v163 = "26__metal_texture_1d_array_t";
      goto LABEL_1031;
    case 0xE5u:
      v64 = (llvm::raw_ostream *)a1[1];
      v77 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v77) <= 0x15)
      {
        p_p = "20__metal_texture_2d_t";
        goto LABEL_874;
      }
      v160 = "20__metal_texture_2d_t";
      goto LABEL_1035;
    case 0xE6u:
      v64 = (llvm::raw_ostream *)a1[1];
      v131 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v131 <= 0x1BuLL)
      {
        p_p = "26__metal_texture_2d_array_t";
        goto LABEL_874;
      }
      v163 = "26__metal_texture_2d_array_t";
      goto LABEL_1031;
    case 0xE7u:
      v64 = (llvm::raw_ostream *)a1[1];
      v77 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v77) <= 0x15)
      {
        p_p = "20__metal_texture_3d_t";
        goto LABEL_874;
      }
      v160 = "20__metal_texture_3d_t";
      goto LABEL_1035;
    case 0xE8u:
      v64 = (llvm::raw_ostream *)a1[1];
      v132 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v132 <= 0x17uLL)
      {
        p_p = "22__metal_texture_cube_t";
        goto LABEL_874;
      }
      qmemcpy(v132, "22__metal_texture_cube_t", 24);
      v155 = *((_QWORD *)v64 + 4) + 24;
      goto LABEL_1052;
    case 0xE9u:
      v64 = (llvm::raw_ostream *)a1[1];
      v133 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v133 <= 0x1DuLL)
      {
        p_p = "28__metal_texture_cube_array_t";
        goto LABEL_874;
      }
      v164 = "28__metal_texture_cube_array_t";
      goto LABEL_1049;
    case 0xEAu:
      v64 = (llvm::raw_ostream *)a1[1];
      v134 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v134 <= 0x18uLL)
      {
        p_p = "23__metal_texture_2d_ms_t";
        goto LABEL_874;
      }
      qmemcpy(v134, "23__metal_texture_2d_ms_t", 25);
      v155 = *((_QWORD *)v64 + 4) + 25;
      goto LABEL_1052;
    case 0xEBu:
      v64 = (llvm::raw_ostream *)a1[1];
      v135 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v135 <= 0x1EuLL)
      {
        p_p = "29__metal_texture_2d_ms_array_t";
        goto LABEL_874;
      }
      v165 = "29__metal_texture_2d_ms_array_t";
      goto LABEL_1051;
    case 0xECu:
      v64 = (llvm::raw_ostream *)a1[1];
      v78 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v78 <= 0x1CuLL)
      {
        p_p = "27__metal_texture_buffer_1d_t";
        goto LABEL_874;
      }
      v161 = "27__metal_texture_buffer_1d_t";
      goto LABEL_1025;
    case 0xEDu:
      v64 = (llvm::raw_ostream *)a1[1];
      v136 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v136) <= 0x13)
      {
        p_p = "18__metal_depth_2d_t";
        goto LABEL_874;
      }
      *(_DWORD *)(v136 + 16) = 1952408626;
      *(_OWORD *)v136 = *(_OWORD *)"18__metal_depth_2d_t";
      v155 = *((_QWORD *)v64 + 4) + 20;
      goto LABEL_1052;
    case 0xEEu:
      v64 = (llvm::raw_ostream *)a1[1];
      v79 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v79 <= 0x19uLL)
      {
        p_p = "24__metal_depth_2d_array_t";
        goto LABEL_874;
      }
      v162 = "24__metal_depth_2d_array_t";
      goto LABEL_1028;
    case 0xEFu:
      v64 = (llvm::raw_ostream *)a1[1];
      v77 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v77) <= 0x15)
      {
        p_p = "20__metal_depth_cube_t";
        goto LABEL_874;
      }
      v160 = "20__metal_depth_cube_t";
      goto LABEL_1035;
    case 0xF0u:
      v64 = (llvm::raw_ostream *)a1[1];
      v131 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v131 <= 0x1BuLL)
      {
        p_p = "26__metal_depth_cube_array_t";
        goto LABEL_874;
      }
      v163 = "26__metal_depth_cube_array_t";
LABEL_1031:
      *v131 = *(_OWORD *)v163;
      *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)(v163 + 12);
      v155 = *((_QWORD *)v64 + 4) + 28;
      goto LABEL_1052;
    case 0xF1u:
      v64 = (llvm::raw_ostream *)a1[1];
      v137 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v137) <= 0x16)
      {
        p_p = "21__metal_depth_2d_ms_t";
        goto LABEL_874;
      }
      v166 = "21__metal_depth_2d_ms_t";
      goto LABEL_1040;
    case 0xF2u:
      v64 = (llvm::raw_ostream *)a1[1];
      v78 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v78 <= 0x1CuLL)
      {
        p_p = "27__metal_depth_2d_ms_array_t";
        goto LABEL_874;
      }
      v161 = "27__metal_depth_2d_ms_array_t";
      goto LABEL_1025;
    case 0xF3u:
      v64 = (llvm::raw_ostream *)a1[1];
      v138 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v138) <= 0x12)
      {
        p_p = "17__metal_sampler_t";
        goto LABEL_874;
      }
      *(_DWORD *)(v138 + 15) = 1952412261;
      *(_OWORD *)v138 = *(_OWORD *)"17__metal_sampler_t";
      v155 = *((_QWORD *)v64 + 4) + 19;
      goto LABEL_1052;
    case 0xF4u:
      v64 = (llvm::raw_ostream *)a1[1];
      v78 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v78 <= 0x1CuLL)
      {
        p_p = "27__metal_threadgroup_event_t";
        goto LABEL_874;
      }
      v161 = "27__metal_threadgroup_event_t";
LABEL_1025:
      *v78 = *(_OWORD *)v161;
      *(_OWORD *)((char *)v78 + 13) = *(_OWORD *)(v161 + 13);
      v155 = *((_QWORD *)v64 + 4) + 29;
      goto LABEL_1052;
    case 0xF5u:
      v64 = (llvm::raw_ostream *)a1[1];
      v77 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v77) <= 0x15)
      {
        p_p = "20__metal_imageblock_t";
        goto LABEL_874;
      }
      v160 = "20__metal_imageblock_t";
LABEL_1035:
      *(_OWORD *)v77 = *(_OWORD *)v160;
      *(_QWORD *)(v77 + 14) = *(_QWORD *)(v160 + 14);
      v155 = *((_QWORD *)v64 + 4) + 22;
      goto LABEL_1052;
    case 0xF6u:
      v64 = (llvm::raw_ostream *)a1[1];
      v135 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v135 <= 0x1EuLL)
      {
        p_p = "29__metal_patch_control_point_t";
        goto LABEL_874;
      }
      v165 = "29__metal_patch_control_point_t";
      goto LABEL_1051;
    case 0xF7u:
      v64 = (llvm::raw_ostream *)a1[1];
      v79 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v79 <= 0x19uLL)
      {
        p_p = "24__metal_command_buffer_t";
        goto LABEL_874;
      }
      v162 = "24__metal_command_buffer_t";
LABEL_1028:
      *v79 = *(_OWORD *)v162;
      *(_OWORD *)((char *)v79 + 10) = *(_OWORD *)(v162 + 10);
      v155 = *((_QWORD *)v64 + 4) + 26;
      goto LABEL_1052;
    case 0xF8u:
      v64 = (llvm::raw_ostream *)a1[1];
      v139 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v139 <= 0x20uLL)
      {
        p_p = "31__metal_render_pipeline_state_t";
        goto LABEL_874;
      }
      qmemcpy(v139, "31__metal_render_pipeline_state_t", 33);
      v155 = *((_QWORD *)v64 + 4) + 33;
      goto LABEL_1052;
    case 0xF9u:
      v64 = (llvm::raw_ostream *)a1[1];
      v140 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v140) <= 0x21)
      {
        p_p = "32__metal_compute_pipeline_state_t";
        goto LABEL_874;
      }
      *(_WORD *)(v140 + 32) = 29791;
      v167 = "32__metal_compute_pipeline_state_t";
      goto LABEL_1042;
    case 0xFAu:
      v64 = (llvm::raw_ostream *)a1[1];
      v137 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v137) <= 0x16)
      {
        p_p = "21__metal_interpolant_t";
        goto LABEL_874;
      }
      v166 = "21__metal_interpolant_t";
LABEL_1040:
      *(_OWORD *)v137 = *(_OWORD *)v166;
      *(_QWORD *)(v137 + 15) = *(_QWORD *)(v166 + 15);
      v155 = *((_QWORD *)v64 + 4) + 23;
      goto LABEL_1052;
    case 0xFBu:
      v64 = (llvm::raw_ostream *)a1[1];
      v140 = *((_QWORD *)v64 + 4);
      if ((unint64_t)(*((_QWORD *)v64 + 3) - v140) <= 0x21)
      {
        p_p = "32__metal_visible_function_table_t";
        goto LABEL_874;
      }
      *(_WORD *)(v140 + 32) = 29791;
      v167 = "32__metal_visible_function_table_t";
LABEL_1042:
      v168 = *((_OWORD *)v167 + 1);
      *(_OWORD *)v140 = *(_OWORD *)v167;
      *(_OWORD *)(v140 + 16) = v168;
      v155 = *((_QWORD *)v64 + 4) + 34;
      goto LABEL_1052;
    case 0xFCu:
      v64 = (llvm::raw_ostream *)a1[1];
      v141 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v141 <= 0x26uLL)
      {
        p_p = "37__metal_intersection_function_table_t";
        goto LABEL_874;
      }
      qmemcpy(v141, "37__metal_intersection_function_table_t", 39);
      v155 = *((_QWORD *)v64 + 4) + 39;
      goto LABEL_1052;
    case 0xFDu:
      v64 = (llvm::raw_ostream *)a1[1];
      v142 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v142 <= 0x2AuLL)
      {
        p_p = "41__metal_instance_acceleration_structure_t";
        goto LABEL_874;
      }
      qmemcpy(v142, "41__metal_instance_acceleration_structure_t", 43);
      v155 = *((_QWORD *)v64 + 4) + 43;
      goto LABEL_1052;
    case 0xFEu:
      v64 = (llvm::raw_ostream *)a1[1];
      v143 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v143 <= 0x2BuLL)
      {
        p_p = "42__metal_primitive_acceleration_structure_t";
        goto LABEL_874;
      }
      qmemcpy(v143, "42__metal_primitive_acceleration_structure_t", 44);
      v155 = *((_QWORD *)v64 + 4) + 44;
      goto LABEL_1052;
    case 0xFFu:
      v64 = (llvm::raw_ostream *)a1[1];
      v144 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v144 <= 0xFuLL)
      {
        p_p = "14__metal_mesh_t";
        goto LABEL_874;
      }
      *v144 = *(_OWORD *)"14__metal_mesh_t";
      v155 = *((_QWORD *)v64 + 4) + 16;
      goto LABEL_1052;
    case 0x100u:
      v64 = (llvm::raw_ostream *)a1[1];
      v145 = (void *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v145 <= 0x1FuLL)
      {
        p_p = "30__metal_mesh_grid_properties_t";
        goto LABEL_874;
      }
      qmemcpy(v145, "30__metal_mesh_grid_properties_t", 32);
      v155 = *((_QWORD *)v64 + 4) + 32;
      goto LABEL_1052;
    case 0x101u:
      v64 = (llvm::raw_ostream *)a1[1];
      v133 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v133 <= 0x1DuLL)
      {
        p_p = "28__metal_intersection_query_t";
        goto LABEL_874;
      }
      v164 = "28__metal_intersection_query_t";
LABEL_1049:
      *v133 = *(_OWORD *)v164;
      *(_OWORD *)((char *)v133 + 14) = *(_OWORD *)(v164 + 14);
      v155 = *((_QWORD *)v64 + 4) + 30;
      goto LABEL_1052;
    case 0x102u:
      v64 = (llvm::raw_ostream *)a1[1];
      v135 = (_OWORD *)*((_QWORD *)v64 + 4);
      if (*((_QWORD *)v64 + 3) - (_QWORD)v135 > 0x1EuLL)
      {
        v165 = "29__metal_intersection_result_t";
LABEL_1051:
        *v135 = *(_OWORD *)v165;
        *(_OWORD *)((char *)v135 + 15) = *(_OWORD *)(v165 + 15);
        v155 = *((_QWORD *)v64 + 4) + 31;
LABEL_1052:
        *((_QWORD *)v64 + 4) = v155;
      }
      else
      {
        p_p = "29__metal_intersection_result_t";
LABEL_874:
        llvm::raw_ostream::write(v64, p_p);
      }
LABEL_875:
      if (SHIBYTE(v171) < 0)
        operator delete(__p);
      return;
    default:
      goto LABEL_875;
  }
}

llvm::raw_ostream *sub_22F07CE18(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _WORD *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  const char *v18;
  _WORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *result;
  _BYTE *v23;
  unsigned __int8 *v24;
  uint64_t v25;

  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x80000)
    __asm { BR              X10 }
  v5 = sub_22E47E1B0(a2);
  sub_22F079B94((uint64_t)a1, v5, 0);
  if (sub_22F1139AC(a2))
  {
    v6 = (llvm::raw_ostream *)a1[1];
    v7 = (_WORD *)*((_QWORD *)v6 + 4);
    v8 = *((_QWORD *)v6 + 3) - (_QWORD)v7;
    if (((*(_QWORD *)(a2 + 16) >> 54) & 0xF) - 6 <= 2)
    {
      if (v8 > 1)
      {
        *v7 = 20292;
        *((_QWORD *)v6 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v6, "DO");
      }
      v24 = (unsigned __int8 *)sub_22F257D3C(a2);
      sub_22F07E3A4(a1, v24, 0xFFFFFFFFLL, 0);
    }
    else
    {
      if (v8 > 1)
      {
        *v7 = 30532;
        *((_QWORD *)v6 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v6, "Dw");
      }
      v9 = *(_QWORD *)(a2 + 16);
      if ((v9 & 0x3C0000000000000) == 0x80000000000000)
      {
        v10 = (_DWORD *)((a2 + 8 * (unsigned __int16)(v9 >> 38) + 4 * ((v9 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
        v13 = *v10;
        v12 = (uint64_t *)(v10 + 2);
        v11 = v13;
        if (v13)
        {
          v14 = 8 * v11;
          do
          {
            v15 = *v12++;
            sub_22F07817C(a1, v15);
            v14 -= 8;
          }
          while (v14);
        }
      }
    }
    v16 = (llvm::raw_ostream *)a1[1];
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if (*((_BYTE **)v16 + 3) == v17)
    {
      v18 = "E";
LABEL_16:
      llvm::raw_ostream::write(v16, v18);
      goto LABEL_17;
    }
    *v17 = 69;
    v25 = *((_QWORD *)v16 + 4) + 1;
  }
  else
  {
    if (sub_22F113A44(a2))
      goto LABEL_17;
    v16 = (llvm::raw_ostream *)a1[1];
    v19 = (_WORD *)*((_QWORD *)v16 + 4);
    if (*((_QWORD *)v16 + 3) - (_QWORD)v19 <= 1uLL)
    {
      v18 = "Do";
      goto LABEL_16;
    }
    *v19 = 28484;
    v25 = *((_QWORD *)v16 + 4) + 2;
  }
  *((_QWORD *)v16 + 4) = v25;
LABEL_17:
  v20 = (llvm::raw_ostream *)a1[1];
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 70;
  }
  sub_22F087B34((uint64_t)a1, a2, 1, 0);
  sub_22F088CC8((llvm::raw_ostream *)a1, *(_DWORD *)(a2 + 20) & 3);
  result = (llvm::raw_ostream *)a1[1];
  v23 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v23 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v23 + 1;
  *v23 = 69;
  return result;
}

void sub_22F07D0E4(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  const char *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _QWORD *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  int v18;
  llvm::raw_ostream *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  void *v30;
  _WORD *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  int v40;
  const char *v41;
  size_t v42;
  llvm::raw_ostream *v43;
  void *v44;
  void *v45;
  size_t v46;
  size_t v47;
  int v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  const char *v51;
  void *__p[2];
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[4];
  __int16 v61;
  _QWORD v62[4];
  __int16 v63;
  char *v64;
  char v65;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = (v4 >> 19) & 0xF;
  if ((v5 - 5) >= 2)
  {
    if ((v5 - 7) < 2)
    {
      v6 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FF;
      v7 = "__SVInt8_t";
      v8 = 10;
      switch(v6)
      {
        case 168:
          v9 = v4 & 0x780000;
          if (v9 == 3670016)
            v7 = "__SVUint8_t";
          else
            v7 = "__SVBool_t";
          if (v9 == 3670016)
            v8 = 11;
          else
            v8 = 10;
          goto LABEL_49;
        case 169:
        case 170:
        case 171:
        case 172:
        case 176:
        case 177:
        case 178:
        case 180:
          goto LABEL_106;
        case 173:
          v7 = "__SVUint16_t";
          goto LABEL_45;
        case 174:
          v7 = "__SVUint32_t";
          goto LABEL_45;
        case 175:
          v7 = "__SVUint64_t";
LABEL_45:
          v8 = 12;
          goto LABEL_49;
        case 179:
          goto LABEL_49;
        case 181:
          v7 = "__SVInt16_t";
          goto LABEL_48;
        case 182:
          v7 = "__SVInt32_t";
          goto LABEL_48;
        case 183:
          v7 = "__SVInt64_t";
LABEL_48:
          v8 = 11;
LABEL_49:
          sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), a2);
          v26 = (llvm::raw_ostream *)a1[1];
          v27 = *((_QWORD *)v26 + 4);
          if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 0xA)
          {
            *(_DWORD *)(v27 + 7) = 1230195798;
            *(_QWORD *)v27 = *(_QWORD *)"9__SVE_VLSI";
            v28 = (_BYTE *)(*((_QWORD *)v26 + 4) + 11);
            *((_QWORD *)v26 + 4) = v28;
          }
          else
          {
            v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(v26, "9__SVE_VLSI");
            v28 = (_BYTE *)*((_QWORD *)v26 + 4);
          }
          if ((unint64_t)v28 >= *((_QWORD *)v26 + 3))
          {
            llvm::raw_ostream::write(v26);
          }
          else
          {
            *((_QWORD *)v26 + 4) = v28 + 1;
            *v28 = 117;
          }
          v29 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v30 = (void *)*((_QWORD *)v29 + 4);
          if (v8 <= *((_QWORD *)v29 + 3) - (_QWORD)v30)
          {
            memcpy(v30, v7, v8);
            v31 = (_WORD *)(*((_QWORD *)v29 + 4) + v8);
            *((_QWORD *)v29 + 4) = v31;
          }
          else
          {
            v29 = (llvm::raw_ostream *)llvm::raw_ostream::write(v29, v7);
            v31 = (_WORD *)*((_QWORD *)v29 + 4);
          }
          if (*((_QWORD *)v29 + 3) - (_QWORD)v31 > 1uLL)
          {
            *v31 = 27212;
            *((_QWORD *)v29 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v29, "Lj");
          }
          v32 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
          v33 = (_WORD *)*((_QWORD *)v32 + 4);
          if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
          {
            *v33 = 17733;
            *((_QWORD *)v32 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v32, "EE");
          }
          break;
        default:
          __asm { BR              X10 }
          return;
      }
      return;
    }
    if (v5 == 1)
    {
      v12 = (llvm::raw_ostream *)a1[1];
      v13 = (_QWORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 7uLL)
      {
        *v13 = 0x64656B6361703655;
        *((_QWORD *)v12 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v12, "U6packed");
      }
    }
    v14 = (llvm::raw_ostream *)a1[1];
    v15 = (_WORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 30276;
      *((_QWORD *)v14 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v14, "Dv");
    }
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 95;
    }
    v18 = (*(_DWORD *)(a2 + 16) >> 19) & 0xF;
    if (v18 == 4)
    {
      v19 = (llvm::raw_ostream *)a1[1];
      v20 = (char *)*((_QWORD *)v19 + 4);
      if ((unint64_t)v20 < *((_QWORD *)v19 + 3))
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        v21 = 98;
        goto LABEL_35;
      }
    }
    else
    {
      if (v18 != 3)
      {
        sub_22F07817C(a1, *(_QWORD *)(a2 + 32));
        return;
      }
      v19 = (llvm::raw_ostream *)a1[1];
      v20 = (char *)*((_QWORD *)v19 + 4);
      if ((unint64_t)v20 < *((_QWORD *)v19 + 3))
      {
        *((_QWORD *)v19 + 4) = v20 + 1;
        v21 = 112;
LABEL_35:
        *v20 = v21;
        return;
      }
    }
    llvm::raw_ostream::write(v19);
    return;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 15088);
  if (*(char *)(v11 + 55) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v11 + 32), *(_QWORD *)(v11 + 40));
    v10 = *a1;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v11 + 32);
    v53 = *(_QWORD *)(v11 + 48);
  }
  v54 = *(_OWORD *)(v11 + 56);
  v55 = *(_QWORD *)(v11 + 72);
  v22 = *(_QWORD *)(v10 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v22 + 15088) + 56) - 3) > 1
    || HIDWORD(v54) <= 0x21 && ((1 << SBYTE12(v54)) & 0x3F0000888) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
    v24 = (*(_DWORD *)(v23 + 16) >> 19) & 0x1FF;
    if ((*(_DWORD *)(a2 + 16) & 0x780000) == 0x300000)
    {
      v25 = "poly8_t";
      switch(v24)
      {
        case 173:
        case 181:
          v25 = "poly16_t";
          goto LABEL_69;
        case 174:
        case 175:
        case 177:
        case 178:
        case 180:
        case 182:
        case 183:
          goto LABEL_106;
        case 176:
        case 184:
          v25 = "poly64_t";
          goto LABEL_69;
        default:
          goto LABEL_69;
      }
    }
    v25 = "int8_t";
    switch(v24)
    {
      case 168:
        v25 = "uint8_t";
        goto LABEL_69;
      case 169:
      case 170:
      case 171:
      case 172:
      case 175:
      case 177:
      case 178:
      case 180:
      case 183:
        goto LABEL_106;
      case 173:
        v25 = "uint16_t";
        goto LABEL_69;
      case 174:
        v25 = "uint32_t";
        goto LABEL_69;
      case 176:
        v25 = "uint64_t";
        goto LABEL_69;
      case 179:
        goto LABEL_69;
      case 181:
        v25 = "int16_t";
        goto LABEL_69;
      case 182:
        v25 = "int32_t";
        goto LABEL_69;
      case 184:
        v25 = "int64_t";
LABEL_69:
        v39 = *(_DWORD *)(a2 + 20);
        v40 = v39 * sub_22EF5CDF0(v22, v23);
        if (v40 == 64)
          v41 = "__simd64_";
        else
          v41 = "__simd128_";
        if (v40 == 64)
          v42 = 9;
        else
          v42 = 10;
        strlen(v25);
        llvm::raw_ostream::operator<<();
        v43 = (llvm::raw_ostream *)a1[1];
        v44 = (void *)*((_QWORD *)v43 + 4);
        if (v42 <= *((_QWORD *)v43 + 3) - (_QWORD)v44)
        {
          memcpy(v44, v41, v42);
          v45 = (void *)(*((_QWORD *)v43 + 4) + v42);
          *((_QWORD *)v43 + 4) = v45;
        }
        else
        {
          v43 = (llvm::raw_ostream *)llvm::raw_ostream::write(v43, v41);
          v45 = (void *)*((_QWORD *)v43 + 4);
        }
        v46 = strlen(v25);
        v47 = v46;
        if (v46 <= *((_QWORD *)v43 + 3) - (_QWORD)v45)
        {
          if (v46)
          {
            memcpy(v45, v25, v46);
            *((_QWORD *)v43 + 4) += v47;
          }
        }
        else
        {
          llvm::raw_ostream::write(v43, v25);
        }
        break;
      default:
        __asm { BR              X10 }
        return;
    }
  }
  else
  {
    v34 = (uint64_t *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
    sub_22EF5CDF0(v22, *v34);
    v35 = ((unint64_t)*(unsigned int *)(*v34 + 16) >> 19) & 0x1FF;
    if ((*(_DWORD *)(a2 + 16) & 0x780000) == 0x300000)
    {
      v36 = 8 * v35 - 1344;
      v37 = *(char **)((char *)off_24FAC6418 + v36);
      v38 = *(_QWORD *)((char *)&unk_22F4A5FC8 + v36);
    }
    else
    {
      v48 = v35 - 168;
      v37 = "Int8";
      v38 = 4;
      switch(v48)
      {
        case 0:
          v37 = "Uint8";
          goto LABEL_100;
        case 1:
        case 2:
        case 3:
        case 4:
        case 9:
        case 10:
        case 12:
LABEL_106:
          __break(1u);
          return;
        case 5:
          v37 = "Uint16";
          goto LABEL_97;
        case 6:
          v37 = "Uint32";
          goto LABEL_97;
        case 7:
        case 8:
          v37 = "Uint64";
LABEL_97:
          v38 = 6;
          break;
        case 11:
          break;
        case 13:
          v37 = "Int16";
          goto LABEL_100;
        case 14:
          v37 = "Int32";
          goto LABEL_100;
        case 15:
        case 16:
          v37 = "Int64";
LABEL_100:
          v38 = 5;
          break;
        default:
          __asm { BR              X10 }
          return;
      }
    }
    v57 = 1283;
    v56[0] = "__";
    v56[2] = v37;
    v56[3] = v38;
    v58[0] = v56;
    v58[2] = "x";
    v59 = 770;
    v49 = *(unsigned int *)(a2 + 20);
    v60[0] = v58;
    v60[2] = v49;
    v61 = 2050;
    v62[0] = v60;
    v62[2] = "_t";
    v63 = 770;
    llvm::Twine::str((llvm::Twine *)v62);
    v50 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    if (v65 >= 0)
      v51 = (const char *)&v64;
    else
      v51 = v64;
    llvm::raw_ostream::write(v50, v51);
    if (v65 < 0)
      operator delete(v64);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
}

uint64_t sub_22F07D9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0)
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v4 = 0;
  v5 = v4 | (v3 | a2) & 7;
  v6 = v5 <= 0x7FF && (v5 & 0x60F) == 0;
  if (v6
    && (v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
    && *(_BYTE *)(v7 + 16) == 45)
  {
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
  else
  {
    v11 = a2;
  }
  v9 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = v9 + 1;
  result = sub_22F087EB4(a1 + 232, &v11);
  *(_DWORD *)(result + 8) = v9;
  return result;
}

BOOL sub_22F07DA88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;

  v3 = *(_QWORD *)(a1 + 232);
  v4 = *(unsigned int *)(a1 + 248);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & (37 * a2);
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  v10 = (uint64_t *)(v3 + 16 * v4);
  if (v10 != v6)
  {
    v11 = *((_DWORD *)v6 + 2);
    v12 = *(llvm::raw_ostream **)(a1 + 8);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 83;
    }
    sub_22F07E2B4(a1, v11);
  }
  return v10 != v6;
}

BOOL sub_22F07DB5C(uint64_t *a1, unint64_t a2)
{
  int v4;
  int v5;
  _BOOL8 result;
  llvm::raw_ostream *v7;
  __int16 *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  __int16 *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;

  v4 = *(_DWORD *)(a2 + 28);
  v5 = v4 & 0x7F;
  if (!a2 || v5 != 16)
  {
    if (a2 && v5 == 28)
    {
      v10 = sub_22F076E9C(*a1, a2);
      if ((*(_WORD *)(v10 + 8) & 0x7F) == 0x10)
      {
        result = sub_22F07DECC(*a1, v10 - 48);
        if (!result)
          return result;
        v11 = sub_22EFB9D84(a2);
        result = 0;
        if (v11)
          return result;
        v12 = *(_QWORD *)(a2 + 40);
        if ((v12 & 7) != 0)
          v13 = 0;
        else
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        v14 = *(_QWORD *)(v13 + 16);
        if (*(_DWORD *)v14 == 12)
        {
          v27 = *(_QWORD *)(v14 + 16);
          v28 = *(_DWORD *)(v14 + 24);
          if (v27 == 0x74735F6369736162 && v28 == 1735289202)
          {
            v7 = (llvm::raw_ostream *)a1[1];
            v8 = (__int16 *)*((_QWORD *)v7 + 4);
            if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
            {
              v9 = "Sb";
              goto LABEL_6;
            }
            v30 = 25171;
            goto LABEL_48;
          }
        }
        else if (*(_DWORD *)v14 == 9)
        {
          v15 = *(_QWORD *)(v14 + 16);
          v16 = *(unsigned __int8 *)(v14 + 24);
          if (v15 == 0x6F7461636F6C6C61 && v16 == 114)
          {
            v7 = (llvm::raw_ostream *)a1[1];
            v8 = (__int16 *)*((_QWORD *)v7 + 4);
            if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
            {
              v9 = "Sa";
              goto LABEL_6;
            }
            v30 = 24915;
LABEL_48:
            *v8 = v30;
            *((_QWORD *)v7 + 4) += 2;
            return 1;
          }
        }
      }
      return 0;
    }
    v18 = v4 & 0x7E;
    if (v18 == 36)
    {
      v19 = sub_22F076E9C(*a1, a2);
      if ((*(_WORD *)(v19 + 8) & 0x7F) == 0x10 && sub_22F07DECC(*a1, v19 - 48))
      {
        v20 = *(_QWORD *)(a2 + 152);
        v21 = v20 & 0xFFFFFFFFFFFFFFF8;
        if ((v20 & 4) != 0 && v21)
        {
          do
          {
            v22 = *(_QWORD *)(*(_QWORD *)v21 + 152);
            v21 = v22 & 0xFFFFFFFFFFFFFFF8;
          }
          while ((v22 & 4) != 0 && v21);
        }
        v23 = sub_22EFB9D84(v21);
        LOBYTE(v4) = 0;
        if (v23)
          return (v18 == 36) & v4;
        if (sub_22F07E010(a1, (_QWORD *)a2, "basic_string", 12, 1))
        {
          v24 = (llvm::raw_ostream *)a1[1];
          v25 = (__int16 *)*((_QWORD *)v24 + 4);
          if (*((_QWORD *)v24 + 3) - (_QWORD)v25 <= 1uLL)
          {
            v26 = "Ss";
LABEL_57:
            llvm::raw_ostream::write(v24, v26);
LABEL_58:
            LOBYTE(v4) = 1;
            return (v18 == 36) & v4;
          }
          v32 = 29523;
          goto LABEL_65;
        }
        if (sub_22F07E010(a1, (_QWORD *)a2, "basic_istream", 13, 0))
        {
          v24 = (llvm::raw_ostream *)a1[1];
          v25 = (__int16 *)*((_QWORD *)v24 + 4);
          if (*((_QWORD *)v24 + 3) - (_QWORD)v25 <= 1uLL)
          {
            v26 = "Si";
            goto LABEL_57;
          }
          v32 = 26963;
LABEL_65:
          *v25 = v32;
          *((_QWORD *)v24 + 4) += 2;
          goto LABEL_58;
        }
        if (sub_22F07E010(a1, (_QWORD *)a2, "basic_ostream", 13, 0))
        {
          v24 = (llvm::raw_ostream *)a1[1];
          v25 = (__int16 *)*((_QWORD *)v24 + 4);
          if (*((_QWORD *)v24 + 3) - (_QWORD)v25 <= 1uLL)
          {
            v26 = "So";
            goto LABEL_57;
          }
          v32 = 28499;
          goto LABEL_65;
        }
        v31 = sub_22F07E010(a1, (_QWORD *)a2, "basic_iostream", 14, 0);
        LOBYTE(v4) = 0;
        if (v31)
        {
          v24 = (llvm::raw_ostream *)a1[1];
          v25 = (__int16 *)*((_QWORD *)v24 + 4);
          if (*((_QWORD *)v24 + 3) - (_QWORD)v25 <= 1uLL)
          {
            v26 = "Sd";
            goto LABEL_57;
          }
          v32 = 25683;
          goto LABEL_65;
        }
      }
      else
      {
        LOBYTE(v4) = 0;
      }
    }
    return (v18 == 36) & v4;
  }
  result = sub_22F07DECC(*a1, a2);
  if (result)
  {
    v7 = (llvm::raw_ostream *)a1[1];
    v8 = (__int16 *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
    {
      v9 = "St";
LABEL_6:
      llvm::raw_ostream::write(v7, v9);
      return 1;
    }
    v30 = 29779;
    goto LABEL_48;
  }
  return result;
}

BOOL sub_22F07DECC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = a2;
  v3 = a2 + 48;
  if (!a2)
    v3 = 0;
  v4 = *(_WORD *)(v3 + 8) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_19;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_19;
    }
    if (v4 != 81)
    {
LABEL_14:
      if (v4 - 52 < 6)
      {
        v5 = -72;
      }
      else
      {
        v5 = -48;
        if (v4 - 33 < 5)
          v5 = -64;
      }
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_13;
    if (v4 == 16)
    {
LABEL_6:
      v5 = -48;
      goto LABEL_19;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_6;
LABEL_13:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  if ((*(_WORD *)(sub_22F076E9C(a1, v3 + v5) + 8) & 0x7F) != 0x53)
    return 0;
  if ((*(_BYTE *)(v2 + 80) & 3) == 0)
    v2 = *(_QWORD *)(v2 + 104) & 0xFFFFFFFFFFFFFFF8;
  result = 0;
  v7 = *(_QWORD *)(v2 + 40);
  if ((v7 & 7) == 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (*(_DWORD *)v9 == 3)
      {
        v10 = *(unsigned __int16 *)(v9 + 16);
        v11 = *(unsigned __int8 *)(v9 + 18);
        return v10 == 29811 && v11 == 100;
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_22F07E010(uint64_t *a1, _QWORD *a2, void *__s2, uint64_t a4, int a5)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  unsigned int v11;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v19;
  _BOOL8 result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v6 = a2[5];
  if ((v6 & 7) != 0)
    v7 = 0;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned int **)(v7 + 16);
  v11 = *v8;
  v9 = v8 + 4;
  v10 = v11;
  if (v11 != a4 || v10 && memcmp(v9, __s2, v10))
    return 0;
  v14 = (_DWORD *)a2[21];
  v15 = a5 ? 3 : 2;
  if (v14[2] != v15)
    return 0;
  v16 = *(_QWORD *)(*(_QWORD *)v14 + 8);
  if (v16 < 0x10)
    return 0;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v17 || *(_DWORD *)(v17 + 16) != 11)
    return 0;
  v19 = *(_DWORD *)(v17 + 16) & 0xFF80000;
  if (v19 != 93323264 && v19 != 87556096)
    return 0;
  result = sub_22F07E168(a1, *(_QWORD *)(*(_QWORD *)v14 + 32), "char_traits", 11, *(_QWORD *)(*(_QWORD *)v14 + 8));
  if ((_DWORD)result)
  {
    if (!a5 || (result = sub_22F07E168(a1, *(_QWORD *)(*(_QWORD *)v14 + 56), "allocator", 9, v16), (_DWORD)result))
    {
      v22 = a2[19];
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 4) != 0 && v23)
      {
        do
        {
          v24 = *(_QWORD *)(*(_QWORD *)v23 + 152);
          v23 = v24 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v24 & 4) != 0 && v23);
      }
      return sub_22EFB9D84(v23) == 0;
    }
  }
  return result;
}

BOOL sub_22F07E168(uint64_t *a1, unint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  const void *v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (a2 < 0x10)
    return 0;
  result = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 16) == 45)
    {
      v11 = sub_22F114198(*(_QWORD *)(v7 + 24));
      result = 0;
      if (v11)
      {
        if ((*(_DWORD *)(v11 + 28) & 0x7E) == 0x24)
        {
          v12 = *(_QWORD *)(v11 + 40);
          if ((v12 & 7) != 0)
            v13 = 0;
          else
            v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          v14 = *(unsigned int **)(v13 + 16);
          v17 = *v14;
          v15 = v14 + 4;
          v16 = v17;
          if (v17 != a4 || v16 && memcmp(v15, a3, v16))
            return 0;
          v18 = sub_22F076E9C(*a1, v11);
          if ((*(_WORD *)(v18 + 8) & 0x7F) != 0x10)
            return 0;
          result = sub_22F07DECC(*a1, v18 - 48);
          if (!result)
            return result;
          v19 = *(_DWORD **)(v11 + 168);
          if (v19[2] == 1 && *(_QWORD *)(*(_QWORD *)v19 + 8) == a5)
          {
            v20 = *(_QWORD *)(v11 + 152);
            v21 = v20 & 0xFFFFFFFFFFFFFFF8;
            if ((v20 & 4) != 0 && v21)
            {
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v21 + 152);
                v21 = v22 & 0xFFFFFFFFFFFFFFF8;
              }
              while ((v22 & 4) != 0 && v21);
            }
            return sub_22EFB9D84(v21) == 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F07E2B4(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  _BYTE v11[7];

  if (a2)
  {
    v3 = a2 - 1;
    if (a2 == 1)
    {
      v4 = *(llvm::raw_ostream **)(a1 + 8);
      v5 = (_BYTE *)*((_QWORD *)v4 + 4);
      if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
      {
        llvm::raw_ostream::write(v4);
      }
      else
      {
        *((_QWORD *)v4 + 4) = v5 + 1;
        *v5 = 48;
      }
    }
    else
    {
      v6 = 0;
      do
      {
        if (v3 % 0x24 >= 0xA)
          v7 = 55;
        else
          v7 = 48;
        v11[v6-- + 6] = v7 + v3 % 0x24;
        v8 = v3 > 0x23;
        v3 /= 0x24u;
      }
      while (v8);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), &v11[v6 + 7]);
    }
  }
  result = *(llvm::raw_ostream **)(a1 + 8);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v10 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v10 + 1;
  *v10 = 95;
  return result;
}

void sub_22F07E3A4(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  int v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::APFloatBase *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  _WORD *v49;
  llvm::raw_ostream *v50;
  BOOL v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  llvm::raw_ostream *v74;
  _BYTE *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  llvm::raw_ostream *v78;
  _BYTE *v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  llvm::raw_ostream *v82;
  _BYTE *v83;
  llvm::raw_ostream *v84;
  _BYTE *v85;
  llvm::raw_ostream *v86;
  _DWORD *v87;
  const char *v88;
  llvm::raw_ostream *v89;
  _BYTE *v90;
  llvm::raw_ostream *v91;
  _BYTE *v92;
  llvm::raw_ostream *v93;
  _BYTE *v94;
  llvm::raw_ostream *v95;
  _BYTE *v96;
  llvm::raw_ostream *v97;
  _BYTE *v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  llvm::raw_ostream *v101;
  _WORD *v102;
  char v103;
  char *v104;
  llvm::raw_ostream *v105;
  _BYTE *v106;
  llvm::raw_ostream *v107;
  _BYTE *v108;
  llvm::raw_ostream *v109;
  _BYTE *v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  llvm::raw_ostream *v113;
  _BYTE *v114;
  llvm::raw_ostream *v115;
  _BYTE *v116;
  llvm::raw_ostream *v117;
  _BYTE *v118;
  llvm::raw_ostream *v119;
  _BYTE *v120;
  llvm::raw_ostream *v121;
  _BYTE *v122;
  llvm::raw_ostream *v123;
  _BYTE *v124;
  llvm::raw_ostream *v125;
  _BYTE *v126;
  llvm::raw_ostream *v127;
  _BYTE *v128;
  llvm::raw_ostream *v129;
  _BYTE *v130;
  llvm::raw_ostream *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned __int8 *v147;
  llvm::raw_ostream *v148;
  uint64_t v149;
  const char *v150;
  llvm::raw_ostream *v151;
  _BYTE *v152;
  unsigned __int8 *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::APFloatBase *v156;
  uint64_t v157;
  llvm::raw_ostream *v158;
  _BYTE *v159;
  unint64_t v160;
  llvm::raw_ostream *v161;
  __int16 *v162;
  const char *v163;
  llvm::raw_ostream *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  int v172;
  __int128 *v173;
  int v174;
  unsigned int v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  __int128 *v186;
  int v187;
  uint64_t v188;
  const char *v189;
  llvm::raw_ostream *v190;
  _WORD *v191;
  uint64_t v192;
  llvm::raw_ostream *v193;
  _WORD *v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  unint64_t *v199;
  llvm::raw_ostream *v200;
  char *v201;
  llvm::raw_ostream *v202;
  _WORD *v203;
  llvm::raw_ostream *v204;
  const char *v205;
  _WORD *v206;
  unsigned __int8 *v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v212;
  llvm::raw_ostream *v213;
  _BYTE *v214;
  uint64_t v215;
  llvm::raw_ostream *v216;
  __int16 *v217;
  const char *v218;
  unint64_t v219;
  int v220;
  unsigned __int8 *v221;
  int v222;
  unsigned __int8 *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  llvm::raw_ostream *v232;
  void *v233;
  unint64_t v234;
  llvm::raw_ostream *v235;
  _WORD *v236;
  uint64_t v237;
  unsigned __int8 *v238;
  uint64_t v239;
  __int128 v240;
  llvm::raw_ostream *v241;
  _WORD *v242;
  uint64_t v243;
  int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  int v250;
  BOOL v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  llvm::raw_ostream *v257;
  _WORD *v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  uint64_t v262;
  llvm::raw_ostream *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unint64_t v268;
  llvm::raw_ostream *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  size_t v273;
  char *v274;
  llvm::raw_ostream *v275;
  uint64_t v276;
  llvm::raw_ostream *v277;
  void *v278;
  llvm::raw_ostream *v279;
  void *v280;
  llvm::raw_ostream *v281;
  _WORD *v282;
  uint64_t v283;
  unsigned __int8 *v284;
  unint64_t v285;
  uint64_t v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  __int16 *v289;
  unsigned __int8 *v290;
  _DWORD *v291;
  uint64_t v292;
  int v293;
  llvm::raw_ostream *v294;
  _WORD *v295;
  uint64_t v296;
  unint64_t v297;
  llvm::raw_ostream *v298;
  _WORD *v299;
  unsigned int v300;
  llvm::raw_ostream *v301;
  _WORD *v302;
  uint64_t v303;
  llvm::raw_ostream *v304;
  _WORD *v305;
  __int16 *v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  int v309;
  BOOL v310;
  BOOL v311;
  unsigned __int8 *v312;
  unsigned __int8 **v313;
  int v314;
  int v315;
  llvm::raw_ostream *v316;
  __int16 *v317;
  unint64_t v318;
  const char *v319;
  llvm::raw_ostream *v320;
  _BYTE *v321;
  int v322;
  BOOL v323;
  unsigned __int8 *v324;
  unsigned __int8 **v325;
  unsigned __int8 **v326;
  uint64_t v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unsigned __int8 *v330;
  unsigned __int8 *v331;
  uint64_t v332;
  llvm::raw_ostream *v333;
  _WORD *v334;
  unint64_t v335;
  const char *v336;
  llvm::raw_ostream *v337;
  _WORD *v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  llvm::raw_ostream *v344;
  _WORD *v345;
  llvm::raw_ostream *v346;
  _BYTE *v347;
  llvm::raw_ostream *v348;
  _WORD *v349;
  _BYTE *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  llvm::raw_ostream *v354;
  _DWORD *v355;
  llvm::raw_ostream *v356;
  __int16 *v357;
  const char *v358;
  uint64_t v359;
  unint64_t v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  uint64_t v363;
  unsigned __int8 *v364;
  uint64_t v365;
  unsigned __int8 *v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE *v369;
  BOOL v370;
  llvm::raw_ostream *v371;
  _BYTE *v372;
  llvm::raw_ostream *v373;
  _WORD *v374;
  _BYTE *v375;
  llvm::raw_ostream *v376;
  _WORD *v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  llvm::raw_ostream *v384;
  char *v385;
  char v386;
  llvm::raw_ostream *v387;
  void *v388;
  unint64_t v389;
  llvm::raw_ostream *v390;
  _BYTE *v391;
  uint64_t v392;
  uint64_t v393;
  llvm::raw_ostream *v394;
  _BYTE *v395;
  uint64_t v396;
  llvm::raw_ostream *v397;
  _WORD *v398;
  unint64_t v399;
  llvm::raw_ostream *v400;
  _BYTE *v401;
  unint64_t v402;
  uint64_t *v403;
  __int16 v404;
  int v405;
  const char *v406;
  llvm::raw_ostream *v407;
  _BYTE *v408;
  unint64_t v409;
  llvm::raw_ostream *v410;
  uint64_t v411;
  __int16 v412;
  __int16 v413;
  uint64_t v414;
  __int16 v415;
  __int16 v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  __int16 v422;
  llvm::raw_ostream *v423;
  _WORD *v424;
  int v425;
  BOOL v426;
  unsigned __int8 *v427;
  uint64_t *v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  int v435;
  uint64_t v436;
  int v437;
  int v438;
  uint64_t v439;
  int v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  int v447;
  int v448;
  uint64_t v449;
  int v450;
  int v451;
  __int16 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  int v479;
  _QWORD v480[3];
  __int16 v481;
  _QWORD v482[3];
  __int16 v483;
  _QWORD v484[3];
  __int16 v485;
  _QWORD v486[3];
  __int16 v487;
  _QWORD v488[3];
  __int16 v489;
  _QWORD v490[3];
  __int16 v491;
  _QWORD v492[3];
  __int16 v493;
  uint64_t v494[2];
  char *v495;
  char *v496;
  uint64_t *v497;
  char v498;
  char v499;
  char v500[8];
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;

  v8 = 0;
  v505 = *MEMORY[0x24BDAC8D0];
  v499 = a4;
  v498 = 1;
  v495 = &v499;
  v496 = &v498;
  v497 = a1;
  v494[0] = (uint64_t)a1;
  v494[1] = (uint64_t)&v495;
  v9 = a1 + 1;
  while (2)
  {
    switch(*a2)
    {
      case 0x66u:
        if (a4)
        {
          v394 = (llvm::raw_ostream *)*v9;
          v395 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v395 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v394);
          }
          else
          {
            *((_QWORD *)v394 + 4) = v395 + 1;
            *v395 = 88;
          }
        }
        *v496 = 0;
        v21 = *(_QWORD *)(*a1 + 16);
        v417 = sub_22F41A810(*(_QWORD *)(v21 + 32), 4, "?: operator with omitted middle operand cannot be mangled", 0x39uLL);
        sub_22EFF605C((uint64_t)a2);
        *(_DWORD *)(v21 + 312) = v418;
        *(_DWORD *)(v21 + 316) = v417;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v133 = v21 + 320;
        v503 = (unint64_t)(v21 + 320);
        *(_QWORD *)&v504 = v21;
        WORD4(v504) = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v419 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v419)
        {
          v420 = *(_QWORD *)(v21 + 768);
          v421 = 56 * v419;
          do
          {
            if (*(char *)(v420 + v421 - 9) < 0)
              operator delete(*(void **)(v420 + v421 - 32));
            v421 -= 56;
          }
          while (v421);
        }
        goto LABEL_199;
      case 0x67u:
        if (a4)
        {
          v80 = (llvm::raw_ostream *)*v9;
          v81 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v81 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v80);
          }
          else
          {
            *((_QWORD *)v80 + 4) = v81 + 1;
            *v81 = 88;
          }
        }
        *v496 = 0;
        v281 = (llvm::raw_ostream *)*v9;
        v282 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v282 > 1uLL)
        {
          *v282 = 30065;
          *((_QWORD *)v281 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v281, "qu");
        }
        sub_22F07E3A4(a1, *((_QWORD *)a2 + 3), 0xFFFFFFFFLL, 0);
        sub_22F07E3A4(a1, *((_QWORD *)a2 + 4), a3, 0);
        v196 = *((_QWORD *)a2 + 5);
        v271 = a1;
        v283 = a3;
        goto LABEL_600;
      case 0x6Bu:
        if (a4)
        {
          v82 = (llvm::raw_ostream *)*v9;
          v83 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v83 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v82);
          }
          else
          {
            *((_QWORD *)v82 + 4) = v83 + 1;
            *v83 = 88;
          }
        }
        *v496 = 0;
        v161 = (llvm::raw_ostream *)*v9;
        v162 = *(__int16 **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v162 <= 1uLL)
        {
          v163 = "ix";
          goto LABEL_425;
        }
        v412 = 30825;
        goto LABEL_755;
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x72u:
      case 0x73u:
      case 0x8Bu:
      case 0x8Fu:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Eu:
      case 0xA6u:
      case 0xA7u:
      case 0xA8u:
      case 0xABu:
      case 0xB0u:
      case 0xB1u:
      case 0xB9u:
      case 0xBDu:
      case 0xC2u:
      case 0xC4u:
      case 0xC5u:
      case 0xC6u:
      case 0xC7u:
      case 0xC8u:
      case 0xC9u:
      case 0xCAu:
      case 0xCBu:
      case 0xCCu:
      case 0xCDu:
      case 0xCEu:
      case 0xCFu:
      case 0xD0u:
      case 0xD1u:
      case 0xD8u:
      case 0xD9u:
      case 0xDBu:
      case 0xDDu:
      case 0xDFu:
      case 0xE0u:
      case 0xE4u:
      case 0xE5u:
      case 0xE6u:
      case 0xEAu:
        if (a4)
        {
          v19 = (llvm::raw_ostream *)*v9;
          v20 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v20 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v19);
          }
          else
          {
            *((_QWORD *)v19 + 4) = v20 + 1;
            *v20 = 88;
          }
        }
        *v496 = 0;
        if (*((_BYTE *)a1 + 16))
          goto LABEL_622;
        v21 = *(_QWORD *)(*a1 + 16);
        v22 = sub_22F41A810(*(_QWORD *)(v21 + 32), 4, "cannot yet mangle expression type %0", 0x24uLL);
        sub_22EFF605C((uint64_t)a2);
        *(_DWORD *)(v21 + 312) = v23;
        *(_DWORD *)(v21 + 316) = v22;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v133 = v21 + 320;
        v503 = (unint64_t)(v21 + 320);
        *(_QWORD *)&v504 = v21;
        WORD4(v504) = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v134 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v134)
        {
          v135 = *(_QWORD *)(v21 + 768);
          v136 = 56 * v134;
          do
          {
            if (*(char *)(v135 + v136 - 9) < 0)
              operator delete(*(void **)(v135 + v136 - 32));
            v136 -= 56;
          }
          while (v136);
        }
LABEL_199:
        *(_DWORD *)(v21 + 776) = 0;
        v137 = *(_QWORD *)sub_22F0D3748(*a2);
        v138 = *(unsigned __int8 *)(v21 + 320);
        *(_BYTE *)(v133 + v138 + 1) = 1;
        *(_BYTE *)(v21 + 320) = v138 + 1;
        *(_QWORD *)(v133 + 8 * v138 + 16) = v137;
        sub_22F0D4E74((uint64_t)a2);
        sub_22E4D6448(v21 + 656, v139, 1);
        v140 = &v503;
LABEL_200:
        sub_22E3BB0B8((uint64_t)v140);
        return;
      case 0x70u:
      case 0x71u:
        if (a4)
        {
          v28 = (llvm::raw_ostream *)*v9;
          v29 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v29 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v28);
          }
          else
          {
            *((_QWORD *)v28 + 4) = v29 + 1;
            *v29 = 88;
          }
        }
        *v496 = 0;
        v160 = ((unint64_t)*(unsigned int *)a2 >> 18) & 0x3F;
        if ((_DWORD)v160)
        {
          sub_22F082370((llvm::raw_ostream *)a1, dword_22F4A2BC4[v160], 2);
        }
        else
        {
          v161 = (llvm::raw_ostream *)*v9;
          v162 = *(__int16 **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v162 > 1uLL)
          {
            v412 = 29540;
LABEL_755:
            *v162 = v412;
            *((_QWORD *)v161 + 4) += 2;
          }
          else
          {
            v163 = "ds";
LABEL_425:
            llvm::raw_ostream::write(v161, v163);
          }
        }
        sub_22F07E3A4(a1, *((_QWORD *)a2 + 2), 0xFFFFFFFFLL, 0);
        goto LABEL_546;
      case 0x74u:
      case 0xD6u:
      case 0xE2u:
        a2 += 24;
        goto LABEL_24;
      case 0x75u:
        v101 = (llvm::raw_ostream *)*v9;
        v102 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v102 > 1uLL)
        {
          *v102 = 25164;
          *((_QWORD *)v101 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v101, "Lb");
        }
        v50 = (llvm::raw_ostream *)*v9;
        v51 = (a2[2] & 4) == 0;
        goto LABEL_140;
      case 0x76u:
        if ((*(_DWORD *)a2 & 0x300000) != 0x100000)
        {
          v15 = *(_DWORD *)a2;
          v16 = v15 == 119;
          if (v15 == 119)
            v17 = a2;
          else
            v17 = 0;
          v18 = v17 + 48;
          if (v16)
            a2 = v18;
          else
            a2 += 40;
LABEL_24:
          a2 = *(unsigned __int8 **)a2;
          continue;
        }
        if (a4)
        {
          v407 = (llvm::raw_ostream *)*v9;
          v408 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v408 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v407);
          }
          else
          {
            *((_QWORD *)v407 + 4) = v408 + 1;
            *v408 = 88;
          }
        }
        *v496 = 0;
        v423 = (llvm::raw_ostream *)*v9;
        v424 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v424 > 1uLL)
        {
          *v424 = 27753;
          *((_QWORD *)v423 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v423, "il");
        }
        v425 = *a2;
        v426 = v425 == 119;
        if (v425 == 119)
          v427 = a2;
        else
          v427 = 0;
        v428 = (uint64_t *)(v427 + 48);
        if (v426)
          v429 = v428;
        else
          v429 = (uint64_t *)(a2 + 40);
        v430 = *((unsigned int *)a2 + 8);
        if ((_DWORD)v430)
        {
          v431 = 8 * v430;
          do
          {
            v432 = *v429++;
            sub_22F07E3A4(a1, v432, 0xFFFFFFFFLL, 0);
            v431 -= 8;
          }
          while (v431);
        }
LABEL_359:
        v86 = (llvm::raw_ostream *)*v9;
LABEL_567:
        v350 = (_BYTE *)*((_QWORD *)v86 + 4);
        if (*((_BYTE **)v86 + 3) == v350)
        {
          v88 = "E";
LABEL_593:
          llvm::raw_ostream::write(v86, v88);
        }
        else
        {
          *v350 = 69;
          v396 = *((_QWORD *)v86 + 4) + 1;
LABEL_784:
          *((_QWORD *)v86 + 4) = v396;
        }
LABEL_622:
        if (v499)
          v370 = v498 == 0;
        else
          v370 = 0;
        if (v370)
        {
          v371 = (llvm::raw_ostream *)*v9;
          v372 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v372 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v371);
          }
          else
          {
            *((_QWORD *)v371 + 4) = v372 + 1;
            *v372 = 69;
          }
        }
        return;
      case 0x77u:
        if (a4)
        {
          v99 = (llvm::raw_ostream *)*v9;
          v100 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v100 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v99);
          }
          else
          {
            *((_QWORD *)v99 + 4) = v100 + 1;
            *v100 = 88;
          }
        }
        *v496 = 0;
        v314 = *((_DWORD *)a2 + 8);
        v315 = *(_DWORD *)a2;
        v316 = (llvm::raw_ostream *)*v9;
        v317 = *(__int16 **)(*v9 + 32);
        v318 = *(_QWORD *)(*v9 + 24) - (_QWORD)v317;
        if ((*(_DWORD *)a2 & 0x100000) != 0)
        {
          if (v318 <= 1)
          {
            v319 = "tl";
LABEL_503:
            llvm::raw_ostream::write(v316, v319);
            goto LABEL_504;
          }
          v422 = 27764;
        }
        else
        {
          if (v318 <= 1)
          {
            v319 = "cv";
            goto LABEL_503;
          }
          v422 = 30307;
        }
        *v317 = v422;
        *((_QWORD *)v316 + 4) += 2;
LABEL_504:
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
        if ((v315 & 0x100000) == 0 && v314 != 1)
        {
          v320 = (llvm::raw_ostream *)*v9;
          v321 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v321 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v320);
          }
          else
          {
            *((_QWORD *)v320 + 4) = v321 + 1;
            *v321 = 95;
          }
        }
        v322 = *(_DWORD *)a2;
        v323 = v322 == 119;
        if (v322 == 119)
          v324 = a2;
        else
          v324 = 0;
        v325 = (unsigned __int8 **)(v324 + 48);
        if (v323)
          v326 = v325;
        else
          v326 = (unsigned __int8 **)(a2 + 40);
        if ((*(_DWORD *)a2 & 0x200000) != 0)
        {
          v330 = sub_22EFFED0C(*v326);
          v331 = sub_22EFFED0C(*((unsigned __int8 **)v330 + 2));
          sub_22F0817C4((uint64_t)a1, (unint64_t)v331);
        }
        else
        {
          v327 = *((unsigned int *)a2 + 8);
          if ((_DWORD)v327)
          {
            v328 = 8 * v327;
            do
            {
              v329 = *v326++;
              sub_22F07E3A4(a1, v329, 0xFFFFFFFFLL, 0);
              v328 -= 8;
            }
            while (v328);
          }
        }
        if ((v315 & 0x100000) == 0 && v314 == 1)
          goto LABEL_622;
        goto LABEL_618;
      case 0x78u:
        v10 = (unsigned __int8 *)sub_22EFBC5B4(*((_QWORD *)a2 + 2));
        a2 = 0;
        if (!v10)
          continue;
        a2 = v10;
        if ((*v10 & 0xFE) != 0xAC)
          continue;
        a2 = v10 + 16;
        goto LABEL_24;
      case 0x79u:
        v11 = *((_QWORD *)a2 + 2);
        a2 = 0;
        v12 = *(_QWORD *)(v11 + 72) & 3;
        if ((_DWORD)v12)
          v13 = (_DWORD)v12 == 3;
        else
          v13 = 1;
        if (v13)
          continue;
        a2 = (unsigned __int8 *)(*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(v11 + 68) & 1) == 0)
          continue;
        goto LABEL_24;
      case 0x7Au:
        if (a4)
        {
          v113 = (llvm::raw_ostream *)*v9;
          v114 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v114 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v113);
          }
          else
          {
            *((_QWORD *)v113 + 4) = v114 + 1;
            *v114 = 88;
          }
        }
        *v496 = 0;
        if ((a2[2] & 4) != 0)
        {
          v337 = (llvm::raw_ostream *)*v9;
          v338 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v338 > 1uLL)
          {
            *v338 = 29543;
            *((_QWORD *)v337 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v337, "gs");
          }
        }
        v148 = (llvm::raw_ostream *)*v9;
        if ((a2[2] & 8) != 0)
          v150 = "da";
        else
          v150 = "dl";
        v289 = (__int16 *)*((_QWORD *)v148 + 4);
        if (*((_QWORD *)v148 + 3) - (_QWORD)v289 <= 1uLL)
          goto LABEL_545;
        v413 = *(_WORD *)v150;
        goto LABEL_739;
      case 0x7Bu:
        if (a4)
        {
          v36 = (llvm::raw_ostream *)*v9;
          v37 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v37 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v36);
          }
          else
          {
            *((_QWORD *)v36 + 4) = v37 + 1;
            *v37 = 88;
          }
        }
        *v496 = 0;
        v176 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if (v176)
        {
          if (sub_22EFFFB48(*((unsigned __int8 **)a2 + 2)))
            v177 = 0;
          else
            v177 = v176;
        }
        else
        {
          v177 = 0;
        }
        v178 = *(unsigned int *)a2;
        v179 = *((_QWORD *)a2 + 4);
        v180 = *((_QWORD *)a2 + 6);
        if ((v178 & 0x80000) != 0 && *((_DWORD *)a2 + 18))
        {
          v181 = (uint64_t)&a2[16 * ((v178 >> 19) & 1) + 72];
          v182 = *((_DWORD *)a2 + 21);
        }
        else
        {
          v181 = 0;
          v182 = 0;
        }
        if (v177)
          sub_22F081838((uint64_t)a1, v177, (v178 >> 18) & 1);
        v183 = a1;
        v184 = v179;
        v185 = v180;
        v186 = (__int128 *)v181;
        v187 = v182;
        goto LABEL_575;
      case 0x7Cu:
        if (a4)
        {
          v38 = (llvm::raw_ostream *)*v9;
          v39 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v39 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v38);
          }
          else
          {
            *((_QWORD *)v38 + 4) = v39 + 1;
            *v39 = 88;
          }
        }
        *v496 = 0;
        v188 = *((_QWORD *)a2 + 5);
        if (v188)
        {
          if ((*(_BYTE *)(v188 + 1) & 0x20) != 0)
          {
            v190 = (llvm::raw_ostream *)*v9;
            if (*((_QWORD *)a2 + 6))
              v189 = "fR";
            else
              v189 = "fr";
LABEL_279:
            v191 = (_WORD *)*((_QWORD *)v190 + 4);
            if (*((_QWORD *)v190 + 3) - (_QWORD)v191 > 1uLL)
            {
              *v191 = *(_WORD *)v189;
              *((_QWORD *)v190 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v190, v189);
            }
            v192 = *((unsigned int *)a2 + 14);
            if ((_DWORD)v192)
            {
              sub_22F082370((llvm::raw_ostream *)a1, dword_22F4A2BC4[v192], 2);
            }
            else
            {
              v193 = (llvm::raw_ostream *)*v9;
              v194 = *(_WORD **)(*v9 + 32);
              if (*(_QWORD *)(*v9 + 24) - (_QWORD)v194 > 1uLL)
              {
                *v194 = 29540;
                *((_QWORD *)v193 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v193, "ds");
              }
            }
            v195 = *((_QWORD *)a2 + 5);
            if (v195)
              sub_22F07E3A4(a1, v195, 0xFFFFFFFFLL, 0);
            v196 = *((_QWORD *)a2 + 6);
            if (v196)
              goto LABEL_598;
            goto LABEL_622;
          }
          v189 = "fL";
        }
        else
        {
          v189 = "fl";
        }
        v190 = (llvm::raw_ostream *)*v9;
        goto LABEL_279;
      case 0x7Eu:
        if (a4)
        {
          v46 = (llvm::raw_ostream *)*v9;
          v47 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v47 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v46);
          }
          else
          {
            *((_QWORD *)v46 + 4) = v47 + 1;
            *v47 = 88;
          }
        }
        *v496 = 0;
        if ((a2[2] & 4) != 0)
        {
          v202 = (llvm::raw_ostream *)*v9;
          v203 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v203 > 1uLL)
          {
            *v203 = 29543;
            *((_QWORD *)v202 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v202, "gs");
          }
        }
        v204 = (llvm::raw_ostream *)*v9;
        if ((a2[2] & 8) != 0)
          v205 = "na";
        else
          v205 = "nw";
        v206 = (_WORD *)*((_QWORD *)v204 + 4);
        if (*((_QWORD *)v204 + 3) - (_QWORD)v206 > 1uLL)
        {
          *v206 = *(_WORD *)v205;
          *((_QWORD *)v204 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v204, v205);
        }
        v207 = a2 + 56;
        v208 = *((unsigned int *)a2 + 1);
        if ((*(_DWORD *)a2 & 0x1800000) != 0)
          v209 = ((*(_DWORD *)a2 >> 19) & 1) + 1;
        else
          v209 = (*(_DWORD *)a2 >> 19) & 1;
        if ((_DWORD)v208)
        {
          v210 = 8 * v208;
          v211 = &v207[8 * v209];
          do
          {
            v212 = *(_QWORD *)v211;
            v211 += 8;
            sub_22F07E3A4(a1, v212, 0xFFFFFFFFLL, 0);
            v210 -= 8;
          }
          while (v210);
        }
        v213 = (llvm::raw_ostream *)*v9;
        v214 = *(_BYTE **)(*v9 + 32);
        if ((unint64_t)v214 >= *(_QWORD *)(*v9 + 24))
        {
          llvm::raw_ostream::write(v213);
        }
        else
        {
          *((_QWORD *)v213 + 4) = v214 + 1;
          *v214 = 95;
        }
        v215 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
        if (!v215 || *(_BYTE *)(v215 + 16) != 39)
          v215 = sub_22F10CF48(v215);
        sub_22F07817C(a1, *(_QWORD *)(v215 + 32));
        if ((*(_DWORD *)a2 & 0x1800000) == 0)
          goto LABEL_618;
        if ((*(_DWORD *)a2 & 0x1800000) == 0x1800000)
        {
          v216 = (llvm::raw_ostream *)*v9;
          v217 = *(__int16 **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v217 <= 1uLL)
          {
            v218 = "il";
LABEL_326:
            llvm::raw_ostream::write(v216, v218);
            goto LABEL_327;
          }
          v452 = 27753;
        }
        else
        {
          v216 = (llvm::raw_ostream *)*v9;
          v217 = *(__int16 **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v217 <= 1uLL)
          {
            v218 = "pi";
            goto LABEL_326;
          }
          v452 = 26992;
        }
        *v217 = v452;
        *((_QWORD *)v216 + 4) += 2;
LABEL_327:
        v219 = *(unsigned int *)a2;
        v220 = v219 & 0x1800000;
        if ((v219 & 0x1800000) != 0)
          v221 = *(unsigned __int8 **)&v207[8 * ((v219 >> 19) & 1)];
        else
          v221 = 0;
        v222 = *v221;
        if ((v222 & 0xFE) == 0x76)
        {
          if (v222 == 119)
            v223 = v221;
          else
            v223 = 0;
          v224 = (uint64_t *)(v223 + 48);
          if (v222 == 119)
            v225 = v224;
          else
            v225 = (uint64_t *)(v221 + 40);
          v226 = *((unsigned int *)v221 + 8);
          if ((_DWORD)v226)
          {
            v227 = 8 * v226;
            do
            {
              v228 = *v225++;
              sub_22F07E3A4(a1, v228, 0xFFFFFFFFLL, 0);
              v227 -= 8;
            }
            while (v227);
          }
        }
        else if (v222 == 215)
        {
          v229 = *((unsigned int *)v221 + 1);
          if ((_DWORD)v229)
          {
            v230 = (uint64_t *)(v221 + 24);
            do
            {
              v231 = *v230++;
              sub_22F07E3A4(a1, v231, 0xFFFFFFFFLL, 0);
              --v229;
            }
            while (v229);
          }
        }
        else if (v220 == 25165824 && v222 == 180)
        {
          sub_22F0817C4((uint64_t)a1, (unint64_t)v221);
        }
        else
        {
          sub_22F07E3A4(a1, v221, 0xFFFFFFFFLL, 0);
        }
        goto LABEL_618;
      case 0x7Fu:
        if (a4)
        {
          v111 = (llvm::raw_ostream *)*v9;
          v112 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v112 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v111);
          }
          else
          {
            *((_QWORD *)v111 + 4) = v112 + 1;
            *v112 = 88;
          }
        }
        *v496 = 0;
        v86 = (llvm::raw_ostream *)*v9;
        v306 = *(__int16 **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v306 <= 1uLL)
        {
          v336 = "nx";
          goto LABEL_586;
        }
        v416 = 30830;
        goto LABEL_760;
      case 0x80u:
        v86 = (llvm::raw_ostream *)*v9;
        v87 = *(_DWORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v87 <= 3uLL)
        {
          v88 = "LDnE";
          goto LABEL_593;
        }
        *v87 = 1164854348;
        v396 = *((_QWORD *)v86 + 4) + 4;
        goto LABEL_784;
      case 0x81u:
        if (a4)
        {
          v40 = (llvm::raw_ostream *)*v9;
          v41 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v41 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v40);
          }
          else
          {
            *((_QWORD *)v40 + 4) = v41 + 1;
            *v41 = 88;
          }
        }
        *v496 = 0;
        v197 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if (v197)
          sub_22F081838((uint64_t)a1, v197, a2[24] & 1);
        v198 = *((_QWORD *)a2 + 4);
        v199 = (unint64_t *)*((_QWORD *)a2 + 6);
        if (v199)
        {
          if (v198)
          {
            sub_22F0819C4(a1, v198, 1u);
            sub_22F081CF0(a1, *v199, "", 0);
            v200 = (llvm::raw_ostream *)a1[1];
            goto LABEL_638;
          }
          v373 = (llvm::raw_ostream *)*v9;
          v374 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v374 > 1uLL)
          {
            *v374 = 29299;
            *((_QWORD *)v373 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v373, "sr");
          }
          if ((sub_22F081CF0(a1, *v199, "", 0) & 1) == 0)
          {
            v200 = (llvm::raw_ostream *)*v9;
LABEL_638:
            v375 = (_BYTE *)*((_QWORD *)v200 + 4);
            if ((unint64_t)v375 >= *((_QWORD *)v200 + 3))
            {
              llvm::raw_ostream::write(v200);
            }
            else
            {
              *((_QWORD *)v200 + 4) = v375 + 1;
              *v375 = 69;
            }
          }
        }
        else if (v198)
        {
          sub_22F0819C4(a1, v198, 0);
        }
        v376 = (llvm::raw_ostream *)*v9;
        v377 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v377 > 1uLL)
        {
          *v377 = 28260;
          *((_QWORD *)v376 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v376, "dn");
        }
        v378 = 0;
        v379 = *((_QWORD *)a2 + 8);
        if ((v379 & 1) == 0)
        {
          v380 = (unint64_t *)(v379 & 0xFFFFFFFFFFFFFFFELL);
          if (v380)
            v378 = *v380;
        }
        sub_22F081CF0(a1, v378, "", 0);
        goto LABEL_622;
      case 0x82u:
        if (a4)
        {
          v74 = (llvm::raw_ostream *)*v9;
          v75 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v75 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v74);
          }
          else
          {
            *((_QWORD *)v74 + 4) = v75 + 1;
            *v75 = 88;
          }
        }
        *v496 = 0;
        v503 = 0u;
        v504 = 0u;
        sub_22F05FD5C((uint64_t *)a2, &v503);
        sub_22F082370((llvm::raw_ostream *)a1, dword_22F4A2BC4[v503], 2);
        sub_22F07E3A4(a1, *((_QWORD *)&v503 + 1), 0xFFFFFFFFLL, 0);
        v196 = v504;
        goto LABEL_598;
      case 0x83u:
        if (a4)
        {
          v95 = (llvm::raw_ostream *)*v9;
          v96 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v96 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v95);
          }
          else
          {
            *((_QWORD *)v95 + 4) = v96 + 1;
            *v96 = 88;
          }
        }
        *v496 = 0;
        v304 = (llvm::raw_ostream *)*v9;
        v305 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v305 > 1uLL)
        {
          *v305 = 30307;
          *((_QWORD *)v304 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v304, "cv");
        }
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
        v86 = (llvm::raw_ostream *)a1[1];
        v306 = (__int16 *)*((_QWORD *)v86 + 4);
        if (*((_QWORD *)v86 + 3) - (_QWORD)v306 <= 1uLL)
        {
          v88 = "_E";
          goto LABEL_593;
        }
        v415 = 17759;
        goto LABEL_783;
      case 0x84u:
      case 0xACu:
      case 0xADu:
        goto LABEL_23;
      case 0x85u:
        if (a4)
        {
          v105 = (llvm::raw_ostream *)*v9;
          v106 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v106 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v105);
          }
          else
          {
            *((_QWORD *)v105 + 4) = v106 + 1;
            *v106 = 88;
          }
        }
        *v496 = 0;
        v86 = (llvm::raw_ostream *)*v9;
        v332 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v332) <= 2)
        {
          v88 = "fpT";
          goto LABEL_593;
        }
        *(_BYTE *)(v332 + 2) = 84;
        *(_WORD *)v332 = 28774;
        v396 = *((_QWORD *)v86 + 4) + 3;
        goto LABEL_784;
      case 0x86u:
        if (a4)
        {
          v125 = (llvm::raw_ostream *)*v9;
          v126 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v126 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v125);
          }
          else
          {
            *((_QWORD *)v125 + 4) = v126 + 1;
            *v126 = 88;
          }
        }
        *v496 = 0;
        v86 = (llvm::raw_ostream *)*v9;
        v306 = *(__int16 **)(*v9 + 32);
        v352 = *(_QWORD *)(*v9 + 24) - (_QWORD)v306;
        if (*((_QWORD *)a2 + 2))
        {
          if (v352 > 1)
          {
            v416 = 30580;
LABEL_760:
            *v306 = v416;
            *((_QWORD *)v86 + 4) += 2;
          }
          else
          {
            v336 = "tw";
LABEL_586:
            llvm::raw_ostream::write(v86, v336);
          }
LABEL_587:
          v196 = *((_QWORD *)a2 + 2);
          goto LABEL_598;
        }
        if (v352 <= 1)
        {
          v88 = "tr";
          goto LABEL_593;
        }
        v415 = 29300;
LABEL_783:
        *v306 = v415;
        v396 = *((_QWORD *)v86 + 4) + 2;
        goto LABEL_784;
      case 0x87u:
        if (a4)
        {
          v107 = (llvm::raw_ostream *)*v9;
          v108 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v108 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v107);
          }
          else
          {
            *((_QWORD *)v107 + 4) = v108 + 1;
            *v108 = 88;
          }
        }
        *v496 = 0;
        v333 = (llvm::raw_ostream *)*v9;
        v334 = *(_WORD **)(*v9 + 32);
        v335 = *(_QWORD *)(*v9 + 24) - (_QWORD)v334;
        if ((a2[16] & 4) == 0)
        {
          if (v335 > 1)
          {
            *v334 = 25972;
            *((_QWORD *)v333 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v333, "te");
          }
          v196 = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_598;
        }
        if (v335 > 1)
        {
          *v334 = 26996;
          *((_QWORD *)v333 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v333, "ti");
        }
        v399 = sub_22F3C5464((uint64_t)a2, *(_QWORD *)(*a1 + 8));
        goto LABEL_705;
      case 0x88u:
        if (a4)
        {
          v117 = (llvm::raw_ostream *)*v9;
          v118 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v118 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v117);
          }
          else
          {
            *((_QWORD *)v117 + 4) = v118 + 1;
            *v118 = 88;
          }
        }
        *v496 = 0;
        if (!*((_DWORD *)a2 + 6))
        {
          v308 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
LABEL_562:
          v348 = (llvm::raw_ostream *)*v9;
          v349 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v349 > 1uLL)
          {
            *v349 = 27764;
            *((_QWORD *)v348 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v348, "tl");
          }
          sub_22F07817C(a1, *((_QWORD *)a2 + 1));
          v259 = (uint64_t)a1;
          v260 = (unint64_t)v308;
LABEL_565:
          sub_22F0817C4(v259, v260);
LABEL_566:
          v86 = (llvm::raw_ostream *)a1[1];
          goto LABEL_567;
        }
        v343 = *((unsigned int *)a2 + 1);
        v344 = (llvm::raw_ostream *)*v9;
        v345 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v345 > 1uLL)
        {
          *v345 = 30307;
          *((_QWORD *)v344 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v344, "cv");
        }
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
        if ((_DWORD)v343 != 1)
        {
          v346 = (llvm::raw_ostream *)*v9;
          v347 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v347 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v346);
          }
          else
          {
            *((_QWORD *)v346 + 4) = v347 + 1;
            *v347 = 95;
          }
          if (!(_DWORD)v343)
            goto LABEL_618;
        }
        v381 = (uint64_t *)(a2 + 32);
        v382 = v343;
        do
        {
          v383 = *v381++;
          sub_22F07E3A4(a1, v383, 0xFFFFFFFFLL, 0);
          --v382;
        }
        while (v382);
        if ((_DWORD)v343 != 1)
          goto LABEL_618;
        goto LABEL_622;
      case 0x89u:
        if (a4)
        {
          v72 = (llvm::raw_ostream *)*v9;
          v73 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v73 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v72);
          }
          else
          {
            *((_QWORD *)v72 + 4) = v73 + 1;
            *v73 = 88;
          }
        }
        *v496 = 0;
        v262 = *(_QWORD *)(*a1 + 8);
        if (((*(unsigned __int8 *)(*(_QWORD *)(v262 + 2000) + 250) << 16) & 0xE0000u) > 0x50000)
        {
          v263 = (llvm::raw_ostream *)*v9;
          v264 = *(_QWORD *)(*v9 + 32);
          if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v264) > 9)
          {
            *(_WORD *)(v264 + 8) = 26223;
            *(_QWORD *)v264 = *(_QWORD *)"u8__uuidof";
            *((_QWORD *)v263 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v263, "u8__uuidof");
          }
          v265 = *((_QWORD *)a2 + 2);
          if ((v265 & 4) != 0)
          {
            v389 = sub_22F3C5464((uint64_t)a2, *(_QWORD *)(*a1 + 8));
LABEL_714:
            sub_22F07817C(a1, v389);
          }
          else
          {
            v266 = (unsigned __int8 *)(v265 & 0xFFFFFFFFFFFFFFF8);
LABEL_401:
            sub_22F081670(a1, v266);
          }
          goto LABEL_618;
        }
        v267 = *((_QWORD *)a2 + 2);
        if ((v267 & 4) == 0)
        {
          v268 = v267 & 0xFFFFFFFFFFFFFFF8;
          v269 = (llvm::raw_ostream *)*v9;
          v270 = *(_QWORD *)(*v9 + 32);
          if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v270) > 0xA)
          {
            *(_DWORD *)(v270 + 7) = 2053533540;
            *(_QWORD *)v270 = *(_QWORD *)"u8__uuidofz";
            *((_QWORD *)v269 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v269, "u8__uuidofz");
          }
          v271 = a1;
          v196 = v268;
          goto LABEL_599;
        }
        v409 = sub_22F3C5464((uint64_t)a2, v262);
        v410 = (llvm::raw_ostream *)*v9;
        v411 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v411) > 0xA)
        {
          *(_DWORD *)(v411 + 7) = 1952870244;
          *(_QWORD *)v411 = *(_QWORD *)"u8__uuidoft";
          *((_QWORD *)v410 + 4) += 11;
        }
        else
        {
          llvm::raw_ostream::write(v410, "u8__uuidoft");
        }
        v403 = a1;
        v399 = v409;
        goto LABEL_706;
      case 0x8Au:
      case 0x8Cu:
      case 0x8Eu:
        if (a4)
        {
          v24 = (llvm::raw_ostream *)*v9;
          v25 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v25 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v24);
          }
          else
          {
            *((_QWORD *)v24 + 4) = v25 + 1;
            *v25 = 88;
          }
        }
        *v496 = 0;
        v141 = a2[3];
        v142 = *(unsigned __int8 **)&a2[v141];
        if (!v142)
          goto LABEL_606;
        v143 = *(unsigned __int8 **)&a2[v141];
        while (2)
        {
          v144 = v143;
          v145 = *v143;
          if (v145 > 0xD5)
          {
            if (v145 == 233)
            {
              v145 = *(_DWORD *)v143;
              if ((*(_DWORD *)v143 & 0x7C0000) != 0x300000)
                goto LABEL_603;
              v147 = v143 + 16;
            }
            else
            {
              if (v145 != 214)
                goto LABEL_603;
              v147 = v143 + 24;
            }
          }
          else
          {
            if (v145 != 155)
            {
              if (v145 != 176)
                goto LABEL_603;
              v146 = *((unsigned int *)v143 + 5);
              if ((_DWORD)v146 != -1)
              {
                v147 = &v143[8 * v146 + 40];
                v145 = 176;
                goto LABEL_218;
              }
              v145 = 176;
LABEL_603:
              if (v142 == v144
                || v145 != 211
                || *((_QWORD *)v144 + 5)
                || *((_DWORD *)v144 + 1) && sub_22E8BB0E8(*((_QWORD *)v144 + 8) & 0xFFFFFFFFFFFFFFFCLL))
              {
LABEL_606:
                v356 = (llvm::raw_ostream *)*v9;
                v357 = *(__int16 **)(*v9 + 32);
                if (*(_QWORD *)(*v9 + 24) - (_QWORD)v357 <= 1uLL)
                {
                  v358 = "cl";
LABEL_608:
                  llvm::raw_ostream::write(v356, v358);
LABEL_609:
                  v359 = *((unsigned int *)a2 + 4);
                  v360 = *(unsigned int *)a2;
                  v361 = &a2[v360 >> 24];
                  if ((_DWORD)v359)
                  {
                    v362 = &v361[8 * ((v360 >> 18) & 1) + 8];
                    v363 = 8 * v359;
                    do
                    {
                      v364 = *(unsigned __int8 **)v362;
                      v362 += 8;
                      if (*v364 == 213)
                        v359 = 0xFFFFFFFFLL;
                      else
                        v359 = v359;
                      v363 -= 8;
                    }
                    while (v363);
                  }
                  sub_22F07E3A4(a1, *(_QWORD *)v361, v359, 0);
                  v365 = *((unsigned int *)a2 + 4);
                  if ((_DWORD)v365)
                  {
                    v366 = &a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                             + 8
                             + ((unint64_t)*(unsigned int *)a2 >> 24)];
                    v367 = 8 * v365;
                    do
                    {
                      v368 = *(_QWORD *)v366;
                      v366 += 8;
                      sub_22F07E3A4(a1, v368, 0xFFFFFFFFLL, 0);
                      v367 -= 8;
                    }
                    while (v367);
                  }
LABEL_618:
                  v164 = (llvm::raw_ostream *)*v9;
LABEL_619:
                  v369 = (_BYTE *)*((_QWORD *)v164 + 4);
                  if ((unint64_t)v369 >= *((_QWORD *)v164 + 3))
                  {
                    llvm::raw_ostream::write(v164);
                  }
                  else
                  {
                    *((_QWORD *)v164 + 4) = v369 + 1;
                    *v369 = 69;
                  }
                  goto LABEL_622;
                }
                v404 = 27747;
              }
              else
              {
                v356 = (llvm::raw_ostream *)*v9;
                v357 = *(__int16 **)(*v9 + 32);
                if (*(_QWORD *)(*v9 + 24) - (_QWORD)v357 <= 1uLL)
                {
                  v358 = "cp";
                  goto LABEL_608;
                }
                v404 = 28771;
              }
              *v357 = v404;
              *((_QWORD *)v356 + 4) += 2;
              goto LABEL_609;
            }
            if ((**((_DWORD **)v143 + 2) & 0x18000) != 0)
            {
              v145 = 155;
              goto LABEL_603;
            }
            v147 = v143 + 24;
            if (!v144[48])
              v147 = v144 + 32;
            v145 = 155;
          }
LABEL_218:
          v143 = *(unsigned __int8 **)v147;
          if (v143 == v144)
            goto LABEL_603;
          continue;
        }
      case 0x8Du:
        if (a4)
        {
          v115 = (llvm::raw_ostream *)*v9;
          v116 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v116 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v115);
          }
          else
          {
            *((_QWORD *)v115 + 4) = v116 + 1;
            *v116 = 88;
          }
        }
        *v496 = 0;
        v339 = *((unsigned int *)a2 + 4);
        v340 = *((_DWORD *)a2 + 1) & 0x3F;
        if (v340 != 41)
          sub_22F082370((llvm::raw_ostream *)a1, v340, *((_DWORD *)a2 + 4));
        if ((_DWORD)v339)
        {
          v341 = 0;
          v342 = 8 * v339;
          do
          {
            sub_22F07E3A4(a1, *(_QWORD *)&a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8+ v341+ ((unint64_t)*(unsigned int *)a2 >> 24)], 0xFFFFFFFFLL, 0);
            v341 += 8;
          }
          while (v342 != v341);
        }
        goto LABEL_622;
      case 0x90u:
        if (a4)
        {
          v123 = (llvm::raw_ostream *)*v9;
          v124 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v124 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v123);
          }
          else
          {
            *((_QWORD *)v123 + 4) = v124 + 1;
            *v124 = 88;
          }
        }
        *v496 = 0;
        goto LABEL_580;
      case 0x91u:
        if (a4)
        {
          v97 = (llvm::raw_ostream *)*v9;
          v98 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v98 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v97);
          }
          else
          {
            *((_QWORD *)v97 + 4) = v98 + 1;
            *v98 = 88;
          }
        }
        *v496 = 0;
        v307 = sub_22EFFED0C(*((unsigned __int8 **)a2 + 2));
        v308 = v307;
        v309 = *v307;
        if ((v309 & 0xFE) != 0x76)
          goto LABEL_493;
        if (HIDWORD(*((_QWORD *)v307 + 3)))
          v310 = *((_QWORD *)v307 + 3) == 0;
        else
          v310 = 1;
        if (v310)
        {
          v311 = v309 == 119;
          if (v309 == 119)
            v312 = v307;
          else
            v312 = 0;
          v313 = (unsigned __int8 **)(v312 + 48);
          if (!v311)
            v313 = (unsigned __int8 **)(v307 + 40);
          v308 = sub_22EFFED0C(*v313);
          v309 = *v308;
LABEL_493:
          if (v309 == 132)
          {
            v308 = sub_22EFFED0C(*((unsigned __int8 **)v308 + 2));
            v309 = *v308;
          }
          if (v309 == 180)
            goto LABEL_562;
        }
LABEL_580:
        v201 = "cv";
LABEL_581:
        sub_22F082A90((uint64_t)a1, (uint64_t)a2, v201, 2uLL);
        goto LABEL_622;
      case 0x92u:
        if (a4)
        {
          v109 = (llvm::raw_ostream *)*v9;
          v110 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v110 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v109);
          }
          else
          {
            *((_QWORD *)v109 + 4) = v110 + 1;
            *v110 = 88;
          }
        }
        *v496 = 0;
        v201 = "ac";
        goto LABEL_581;
      case 0x93u:
        if (a4)
        {
          v44 = (llvm::raw_ostream *)*v9;
          v45 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v45 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v44);
          }
          else
          {
            *((_QWORD *)v44 + 4) = v45 + 1;
            *v45 = 88;
          }
        }
        *v496 = 0;
        v201 = "cc";
        goto LABEL_581;
      case 0x94u:
        if (a4)
        {
          v121 = (llvm::raw_ostream *)*v9;
          v122 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v122 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v121);
          }
          else
          {
            *((_QWORD *)v121 + 4) = v122 + 1;
            *v122 = 88;
          }
        }
        *v496 = 0;
        v201 = "dc";
        goto LABEL_581;
      case 0x95u:
        if (a4)
        {
          v70 = (llvm::raw_ostream *)*v9;
          v71 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v71 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v70);
          }
          else
          {
            *((_QWORD *)v70 + 4) = v71 + 1;
            *v71 = 88;
          }
        }
        *v496 = 0;
        v201 = "rc";
        goto LABEL_581;
      case 0x96u:
        if (a4)
        {
          v68 = (llvm::raw_ostream *)*v9;
          v69 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v69 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v68);
          }
          else
          {
            *((_QWORD *)v68 + 4) = v69 + 1;
            *v69 = 88;
          }
        }
        *v496 = 0;
        v201 = "sc";
        goto LABEL_581;
      case 0x97u:
        goto LABEL_580;
      case 0x98u:
        if (a4)
        {
          v76 = (llvm::raw_ostream *)*v9;
          v77 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v77 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v76);
          }
          else
          {
            *((_QWORD *)v76 + 4) = v77 + 1;
            *v77 = 88;
          }
        }
        *v496 = 0;
        v272 = a2[40] & 3;
        v273 = qword_22F4A6010[v272];
        v274 = off_24FAC6460[v272];
        v275 = (llvm::raw_ostream *)*v9;
        v276 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v276) > 2)
        {
          *(_BYTE *)(v276 + 2) = 85;
          *(_WORD *)v276 = 12662;
          *((_QWORD *)v275 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v275, "v1U");
        }
        v277 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v278 = (void *)*((_QWORD *)v277 + 4);
        if (v273 <= *((_QWORD *)v277 + 3) - (_QWORD)v278)
        {
          memcpy(v278, v274, v273);
          *((_QWORD *)v277 + 4) += v273;
        }
        else
        {
          llvm::raw_ostream::write(v277, v274);
        }
        goto LABEL_580;
      case 0x99u:
        v8 = *((_QWORD *)a2 + 1);
LABEL_23:
        a2 += 16;
        goto LABEL_24;
      case 0x9Au:
        v127 = (llvm::raw_ostream *)*v9;
        v128 = *(_BYTE **)(*v9 + 32);
        if ((unint64_t)v128 >= *(_QWORD *)(*v9 + 24))
        {
          llvm::raw_ostream::write(v127);
        }
        else
        {
          *((_QWORD *)v127 + 4) = v128 + 1;
          *v128 = 76;
        }
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
        llvm::raw_ostream::operator<<();
        goto LABEL_243;
      case 0x9Du:
        v64 = (llvm::raw_ostream *)*v9;
        v65 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v65) > 2)
        {
          *(_BYTE *)(v65 + 2) = 90;
          *(_WORD *)v65 = 24396;
          *((_QWORD *)v64 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v64, "L_Z");
        }
        sub_22F082B1C(a1, *((_QWORD *)a2 + 9), (__int128 *)(a2 + 104), *((_DWORD *)a2 + 22));
        goto LABEL_243;
      case 0x9Fu:
      case 0xA2u:
        if (a4)
        {
          v26 = (llvm::raw_ostream *)*v9;
          v27 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v27 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v26);
          }
          else
          {
            *((_QWORD *)v26 + 4) = v27 + 1;
            *v27 = 88;
          }
        }
        *v496 = 0;
        v148 = (llvm::raw_ostream *)*v9;
        v149 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v149) <= 0xA)
        {
          v150 = "v18co_await";
          goto LABEL_545;
        }
        v405 = 1953063287;
        v406 = "v18co_await";
        goto LABEL_732;
      case 0xA0u:
        if (a4)
        {
          v91 = (llvm::raw_ostream *)*v9;
          v92 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v92 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v91);
          }
          else
          {
            *((_QWORD *)v91 + 4) = v92 + 1;
            *v92 = 88;
          }
        }
        *v496 = 0;
        v148 = (llvm::raw_ostream *)*v9;
        v149 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v149) <= 0xA)
        {
          v150 = "v18co_yield";
          goto LABEL_545;
        }
        v405 = 1684825449;
        v406 = "v18co_yield";
LABEL_732:
        *(_DWORD *)(v149 + 7) = v405;
        *(_QWORD *)v149 = *(_QWORD *)v406;
        v414 = *((_QWORD *)v148 + 4) + 11;
        goto LABEL_740;
      case 0xA1u:
        goto LABEL_417;
      case 0xA3u:
        if (a4)
        {
          v119 = (llvm::raw_ostream *)*v9;
          v120 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v120 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v119);
          }
          else
          {
            *((_QWORD *)v119 + 4) = v120 + 1;
            *v120 = 88;
          }
        }
        *v496 = 0;
        v184 = *((_QWORD *)a2 + 2);
        v185 = *((_QWORD *)a2 + 4);
        v351 = *(unsigned int *)a2;
        if ((v351 & 0x40000) == 0 || !*((_DWORD *)a2 + 14))
          goto LABEL_573;
        v186 = (__int128 *)&a2[16 * ((v351 >> 18) & 1) + 56];
        v187 = *((_DWORD *)a2 + 17);
        goto LABEL_574;
      case 0xA4u:
        if (a4)
        {
          v93 = (llvm::raw_ostream *)*v9;
          v94 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v94 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v93);
          }
          else
          {
            *((_QWORD *)v93 + 4) = v94 + 1;
            *v94 = 88;
          }
        }
        *v496 = 0;
        if (!((unsigned __int16)*((_DWORD *)a2 + 5) >> 1))
          goto LABEL_474;
        v290 = a2 + 32;
        v291 = (_DWORD *)(*((_QWORD *)a2 + 3) + 8);
        v292 = 24 * ((unsigned __int16)*((_DWORD *)a2 + 5) >> 1);
        while (1)
        {
          v293 = *(v291 - 2);
          if (v293 == 1)
          {
            v298 = (llvm::raw_ostream *)*v9;
            v299 = *(_WORD **)(*v9 + 32);
            if (*(_QWORD *)(*v9 + 24) - (_QWORD)v299 > 1uLL)
            {
              *v299 = 30820;
              *((_QWORD *)v298 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v298, "dx");
            }
            v300 = *v291 + 1;
          }
          else
          {
            if (!v293)
            {
              v294 = (llvm::raw_ostream *)*v9;
              v295 = *(_WORD **)(*v9 + 32);
              if (*(_QWORD *)(*v9 + 24) - (_QWORD)v295 > 1uLL)
              {
                *v295 = 26980;
                *((_QWORD *)v294 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v294, "di");
              }
              v296 = *(_QWORD *)v291;
              if ((*(_QWORD *)v291 & 1) != 0)
              {
                v297 = v296 & 0xFFFFFFFFFFFFFFFELL;
              }
              else
              {
                v303 = *(_QWORD *)(v296 + 40);
                if ((v303 & 7) != 0)
                  v297 = 0;
                else
                  v297 = v303 & 0xFFFFFFFFFFFFFFF8;
              }
              sub_22E54B3A4(*v9, v297);
              goto LABEL_466;
            }
            v301 = (llvm::raw_ostream *)*v9;
            v302 = *(_WORD **)(*v9 + 32);
            if (*(_QWORD *)(*v9 + 24) - (_QWORD)v302 > 1uLL)
            {
              *v302 = 22628;
              *((_QWORD *)v301 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v301, "dX");
            }
            sub_22F07E3A4(a1, *(_QWORD *)&v290[8 * (*v291 + 1)], 0xFFFFFFFFLL, 0);
            v300 = *v291 + 2;
          }
          sub_22F07E3A4(a1, *(_QWORD *)&v290[8 * v300], 0xFFFFFFFFLL, 0);
LABEL_466:
          v291 += 6;
          v292 -= 24;
          if (!v292)
          {
LABEL_474:
            v196 = sub_22E487828((uint64_t)a2);
LABEL_598:
            v271 = a1;
LABEL_599:
            v283 = 0xFFFFFFFFLL;
LABEL_600:
            sub_22F07E3A4(v271, v196, v283, 0);
            goto LABEL_622;
          }
        }
      case 0xA9u:
        sub_22F082EE8(*(_QWORD *)(*a1 + 16));
        goto LABEL_622;
      case 0xAAu:
        v32 = *((_QWORD *)a2 + 1);
        v33 = llvm::APFloatBase::EnumToSemantics();
        sub_22E4F00CC((uint64_t)(a2 + 16), v33, (uint64_t)&v503);
        v34 = sub_22F082E44((llvm::raw_ostream **)a1, v32, (uint64_t)&v503);
        v35 = *((_QWORD *)&v503 + 1);
        if (llvm::APFloatBase::PPCDoubleDouble(v34) == v35)
          sub_22E463170((llvm::APFloatBase *)&v504);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v503 + 8));
        goto LABEL_622;
      case 0xAEu:
        if (a4)
        {
          v78 = (llvm::raw_ostream *)*v9;
          v79 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v79 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v78);
          }
          else
          {
            *((_QWORD *)v78 + 4) = v79 + 1;
            *v79 = 88;
          }
        }
        *v496 = 0;
        v279 = (llvm::raw_ostream *)*v9;
        v280 = *(void **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v280 > 0xDuLL)
        {
          qmemcpy(v280, "v110_SUBSTPACK", 14);
          *((_QWORD *)v279 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(v279, "v110_SUBSTPACK");
        }
LABEL_417:
        sub_22F082C90(v494, *((_QWORD *)a2 + 2));
        goto LABEL_622;
      case 0xAFu:
        v57 = *((_QWORD *)a2 + 1);
        DWORD2(v503) = 32;
        *(_QWORD *)&v503 = 0;
        BYTE12(v503) = 1;
        goto LABEL_181;
      case 0xB2u:
        v62 = (llvm::raw_ostream *)*v9;
        v63 = *(_BYTE **)(*v9 + 32);
        if ((unint64_t)v63 >= *(_QWORD *)(*v9 + 24))
        {
          llvm::raw_ostream::write(v62);
        }
        else
        {
          *((_QWORD *)v62 + 4) = v63 + 1;
          *v63 = 76;
        }
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
        v153 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if (*v153 == 170)
        {
          v154 = llvm::APFloatBase::EnumToSemantics();
          sub_22E4F00CC((uint64_t)(v153 + 16), v154, (uint64_t)v500);
          sub_22E99C474((llvm::APFloatBase *)((char *)&v503 + 8), v501);
          sub_22F082FAC((llvm::raw_ostream **)a1, (uint64_t)&v503);
          v155 = *((_QWORD *)&v503 + 1);
          v157 = llvm::APFloatBase::PPCDoubleDouble(v156);
          if (v157 == v155)
            sub_22E463170((llvm::APFloatBase *)&v504);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v503 + 8));
          if (v157 == v501)
            sub_22E463170((llvm::APFloatBase *)&v502);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v501);
          v158 = (llvm::raw_ostream *)*v9;
          v159 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v159 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v158);
          }
          else
          {
            *((_QWORD *)v158 + 4) = v159 + 1;
            *v159 = 95;
          }
          v165 = llvm::APFloatBase::EnumToSemantics();
          sub_22E4F00CC((uint64_t)(v153 + 16), v165, (uint64_t)&v503);
          sub_22F082FAC((llvm::raw_ostream **)a1, (uint64_t)&v503);
          if (v157 == *((_QWORD *)&v503 + 1))
            sub_22E463170((llvm::APFloatBase *)&v504);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v503 + 8));
        }
        else
        {
          v397 = (llvm::raw_ostream *)*v9;
          v398 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v398 > 1uLL)
          {
            *v398 = 24368;
            *((_QWORD *)v397 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v397, "0_");
          }
          sub_22F257F94(*((_QWORD *)a2 + 2) + 16, (llvm::APInt *)&v476);
          DWORD2(v503) = v477;
          *(_QWORD *)&v503 = v476;
          v477 = 0;
          BYTE12(v503) = !sub_22F110930(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0));
          sub_22F08310C((uint64_t)a1, (llvm::APInt *)&v503);
          if (DWORD2(v503) >= 0x41 && (_QWORD)v503)
            MEMORY[0x2348A0E84](v503, 0x1000C8000313F17);
        }
        goto LABEL_618;
      case 0xB4u:
        if (a4)
        {
          v60 = (llvm::raw_ostream *)*v9;
          v61 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v61 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v60);
          }
          else
          {
            *((_QWORD *)v60 + 4) = v61 + 1;
            *v61 = 88;
          }
        }
        *v496 = 0;
        v257 = (llvm::raw_ostream *)*v9;
        v258 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v258 > 1uLL)
        {
          *v258 = 27753;
          *((_QWORD *)v257 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v257, "il");
        }
        v259 = (uint64_t)a1;
        v260 = (unint64_t)a2;
        goto LABEL_565;
      case 0xB5u:
        sub_22F257F94((uint64_t)(a2 + 16), (llvm::APInt *)&v478);
        DWORD2(v503) = v479;
        *(_QWORD *)&v503 = v478;
        v479 = 0;
        BYTE12(v503) = !sub_22F110930(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0));
        v57 = *((_QWORD *)a2 + 1);
LABEL_181:
        v56 = (uint64_t)a1;
        goto LABEL_182;
      case 0xB6u:
        v390 = (llvm::raw_ostream *)*v9;
        v391 = *(_BYTE **)(*v9 + 32);
        if (*(_BYTE **)(*v9 + 24) == v391)
        {
          llvm::raw_ostream::write(v390, "L");
        }
        else
        {
          *v391 = 76;
          ++*((_QWORD *)v390 + 4);
        }
        v392 = *(_QWORD *)(*a1 + 8);
        v393 = sub_22F3C61E8((uint64_t)a2);
        v234 = sub_22EF6477C(v392, v393);
        goto LABEL_350;
      case 0xBAu:
        v14 = *((_QWORD *)a2 + 2);
        a2 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 4) == 0)
          continue;
        a2 += 40;
        goto LABEL_24;
      case 0xBBu:
        if (a4)
        {
          v131 = (llvm::raw_ostream *)*v9;
          v132 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v132 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v131);
          }
          else
          {
            *((_QWORD *)v131 + 4) = v132 + 1;
            *v132 = 88;
          }
        }
        *v496 = 0;
        v354 = (llvm::raw_ostream *)*v9;
        v355 = *(_DWORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v355 > 3uLL)
        {
          *v355 = 2020178025;
          *((_QWORD *)v354 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v354, "ixix");
        }
        sub_22F07E3A4(a1, *((_QWORD *)a2 + 2), 0xFFFFFFFFLL, 0);
        sub_22F07E3A4(a1, *((_QWORD *)a2 + 3), 0xFFFFFFFFLL, 0);
        v196 = *((_QWORD *)a2 + 4);
        goto LABEL_598;
      case 0xBCu:
        if (a4)
        {
          v30 = (llvm::raw_ostream *)*v9;
          v31 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v31 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v30);
          }
          else
          {
            *((_QWORD *)v30 + 4) = v31 + 1;
            *v31 = 88;
          }
        }
        *v496 = 0;
        v166 = *(unsigned int *)a2;
        if ((v166 & 0x80000) != 0)
          v167 = *((_QWORD *)a2 + 6);
        else
          v167 = 0;
        v168 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v169 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
        if ((v166 & 0x100000) != 0
          && (v170 = &a2[24 * ((v166 >> 19) & 1)], v172 = *((_DWORD *)v170 + 12), v171 = v170 + 48, v172))
        {
          v173 = (__int128 *)&v171[16 * ((v166 >> 20) & 1)];
          v174 = *((_DWORD *)v171 + 3);
        }
        else
        {
          v173 = 0;
          v174 = 0;
        }
        if (!v168)
          goto LABEL_442;
        v175 = (v166 >> 18) & 1;
        goto LABEL_441;
      case 0xC3u:
        v48 = (llvm::raw_ostream *)*v9;
        v49 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v49 > 1uLL)
        {
          *v49 = 25164;
          *((_QWORD *)v48 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v48, "Lb");
        }
        v50 = (llvm::raw_ostream *)*v9;
        v51 = a2[16] == 0;
LABEL_140:
        if (v51)
          v103 = 48;
        else
          v103 = 49;
        v104 = (char *)*((_QWORD *)v50 + 4);
        if ((unint64_t)v104 >= *((_QWORD *)v50 + 3))
        {
          llvm::raw_ostream::write(v50);
        }
        else
        {
          *((_QWORD *)v50 + 4) = v104 + 1;
          *v104 = v103;
        }
        goto LABEL_618;
      case 0xD3u:
        if (a4)
        {
          v58 = (llvm::raw_ostream *)*v9;
          v59 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v59 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v58);
          }
          else
          {
            *((_QWORD *)v58 + 4) = v59 + 1;
            *v59 = 88;
          }
        }
        *v496 = 0;
        v184 = *((_QWORD *)a2 + 5);
        v185 = *((_QWORD *)a2 + 2);
        v253 = *(unsigned int *)a2;
        if ((v253 & 0x40000) != 0
          && ((v254 = *((unsigned int *)a2 + 1), *(_DWORD *)a2 != 211)
            ? (v255 = a2 + 80)
            : (v255 = a2 + 64),
              *(_DWORD *)&v255[8 * v254]))
        {
          v256 = &v255[8 * v254];
          v186 = (__int128 *)&v256[16 * ((v253 >> 18) & 1)];
          v187 = *((_DWORD *)v256 + 3);
        }
        else
        {
LABEL_573:
          v186 = 0;
          v187 = 0;
        }
LABEL_574:
        v183 = a1;
        goto LABEL_575;
      case 0xD4u:
        if (a4)
        {
          v84 = (llvm::raw_ostream *)*v9;
          v85 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v85 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v84);
          }
          else
          {
            *((_QWORD *)v84 + 4) = v85 + 1;
            *v85 = 88;
          }
        }
        *v496 = 0;
        v284 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
        if (v284)
        {
          if (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)))
            v168 = 0;
          else
            v168 = v284;
        }
        else
        {
          v168 = 0;
        }
        v285 = *(unsigned int *)a2;
        v167 = *((_QWORD *)a2 + 5);
        v169 = *((_QWORD *)a2 + 2);
        if ((v285 & 0x40000) != 0
          && ((v286 = *((unsigned int *)a2 + 1), *(_DWORD *)a2 != 211)
            ? (v287 = a2 + 80)
            : (v287 = a2 + 64),
              *(_DWORD *)&v287[8 * v286]))
        {
          v288 = &v287[8 * v286];
          v173 = (__int128 *)&v288[16 * ((v285 >> 18) & 1)];
          v174 = *((_DWORD *)v288 + 3);
        }
        else
        {
          v173 = 0;
          v174 = 0;
        }
        if (!v168)
          goto LABEL_442;
        v175 = (v285 >> 19) & 1;
LABEL_441:
        sub_22F081838((uint64_t)a1, v168, v175);
LABEL_442:
        v183 = a1;
        v184 = v167;
        v185 = v169;
        v186 = v173;
        v187 = v174;
LABEL_575:
        sub_22F081FF0(v183, v184, v185, v186, v187, a3);
        goto LABEL_622;
      case 0xD5u:
        if (a4)
        {
          v89 = (llvm::raw_ostream *)*v9;
          v90 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v90 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v89);
          }
          else
          {
            *((_QWORD *)v89 + 4) = v90 + 1;
            *v90 = 88;
          }
        }
        *v496 = 0;
        v148 = (llvm::raw_ostream *)*v9;
        v289 = *(__int16 **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v289 > 1uLL)
        {
          v413 = 28787;
LABEL_739:
          *v289 = v413;
          v414 = *((_QWORD *)v148 + 4) + 2;
LABEL_740:
          *((_QWORD *)v148 + 4) = v414;
        }
        else
        {
          v150 = "sp";
LABEL_545:
          llvm::raw_ostream::write(v148, v150);
        }
LABEL_546:
        v196 = *((_QWORD *)a2 + 3);
        goto LABEL_598;
      case 0xDCu:
        if (a4)
        {
          v52 = (llvm::raw_ostream *)*v9;
          v53 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v53 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v52);
          }
          else
          {
            *((_QWORD *)v52 + 4) = v53 + 1;
            *v53 = 88;
          }
        }
        *v496 = 0;
        v232 = (llvm::raw_ostream *)*v9;
        v233 = *(void **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v233 > 0x23uLL)
        {
          qmemcpy(v233, "u33__builtin_sycl_unique_stable_name", 36);
          *((_QWORD *)v232 + 4) += 36;
        }
        else
        {
          llvm::raw_ostream::write(v232, "u33__builtin_sycl_unique_stable_name");
        }
        v234 = **((_QWORD **)a2 + 4);
LABEL_350:
        sub_22F07817C(a1, v234);
        goto LABEL_566;
      case 0xDEu:
        if (a4)
        {
          v54 = (llvm::raw_ostream *)*v9;
          v55 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v55 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v54);
          }
          else
          {
            *((_QWORD *)v54 + 4) = v55 + 1;
            *v55 = 88;
          }
        }
        *v496 = 0;
        if ((a2[2] & 1) == 0 || !*((_DWORD *)a2 + 7))
        {
          v241 = (llvm::raw_ostream *)*v9;
          v242 = *(_WORD **)(*v9 + 32);
          if (*(_QWORD *)(*v9 + 24) - (_QWORD)v242 > 1uLL)
          {
            *v242 = 23155;
            *((_QWORD *)v241 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v241, "sZ");
          }
          v243 = *((_QWORD *)a2 + 4);
          v244 = *(_DWORD *)(v243 + 28) & 0x7F;
          if (v243 && v244 == 38)
          {
            v245 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v243 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 32);
            v246 = v245 & 0x7FFF;
            v247 = HIWORD(v245);
          }
          else
          {
            if (v243 && v244 == 59)
            {
              v248 = *(_DWORD *)(v243 + 68);
            }
            else
            {
              if (!v243 || v244 != 32)
              {
                sub_22F0838A0((uint64_t)a1, v243);
                goto LABEL_622;
              }
              v248 = *(_DWORD *)(v243 + 64);
            }
            v246 = v248 & 0xFFFFF;
            v247 = v248 >> 20;
          }
          sub_22F08379C((uint64_t)a1, v246, v247);
          goto LABEL_622;
        }
        v235 = (llvm::raw_ostream *)*v9;
        v236 = *(_WORD **)(*v9 + 32);
        if (*(_QWORD *)(*v9 + 24) - (_QWORD)v236 > 1uLL)
        {
          *v236 = 20595;
          *((_QWORD *)v235 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v235, "sP");
        }
        v237 = *((unsigned int *)a2 + 7);
        if ((_DWORD)v237)
        {
          v238 = a2 + 40;
          v239 = 24 * v237;
          do
          {
            v240 = *(_OWORD *)v238;
            v475 = *((_QWORD *)v238 + 2);
            v474 = v240;
            sub_22F0832A4(a1, (uint64_t)&v474, 0);
            v238 += 24;
            v239 -= 24;
          }
          while (v239);
        }
        goto LABEL_359;
      case 0xE1u:
        v42 = (llvm::raw_ostream *)*v9;
        v43 = *(_BYTE **)(*v9 + 32);
        if ((unint64_t)v43 >= *(_QWORD *)(*v9 + 24))
        {
          llvm::raw_ostream::write(v42);
        }
        else
        {
          *((_QWORD *)v42 + 4) = v43 + 1;
          *v43 = 76;
        }
        sub_22F07817C(a1, *((_QWORD *)a2 + 1));
LABEL_243:
        v164 = (llvm::raw_ostream *)a1[1];
        goto LABEL_619;
      case 0xE3u:
        if (a4)
        {
          v129 = (llvm::raw_ostream *)*v9;
          v130 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v130 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v129);
          }
          else
          {
            *((_QWORD *)v129 + 4) = v130 + 1;
            *v130 = 88;
          }
        }
        *v496 = 0;
        v86 = (llvm::raw_ostream *)*v9;
        v353 = *(_QWORD *)(*v9 + 32);
        if ((unint64_t)(*(_QWORD *)(*v9 + 24) - v353) <= 0xA)
        {
          v88 = "_SUBSTPACK_";
          goto LABEL_593;
        }
        *(_DWORD *)(v353 + 7) = 1598767937;
        *(_QWORD *)v353 = *(_QWORD *)"_SUBSTPACK_";
        v396 = *((_QWORD *)v86 + 4) + 11;
        goto LABEL_784;
      case 0xE8u:
        if ((a2[1] & 0x40) != 0)
        {
          if (a4)
          {
            v151 = (llvm::raw_ostream *)*v9;
            v152 = *(_BYTE **)(*v9 + 32);
            if ((unint64_t)v152 >= *(_QWORD *)(*v9 + 24))
            {
              llvm::raw_ostream::write(v151);
            }
            else
            {
              *((_QWORD *)v151 + 4) = v152 + 1;
              *v152 = 88;
            }
          }
          *v496 = 0;
          switch((*(_DWORD *)a2 >> 18) & 0xF)
          {
            case 0:
              v384 = (llvm::raw_ostream *)*v9;
              v385 = *(char **)(*v9 + 32);
              if ((unint64_t)v385 >= *(_QWORD *)(*v9 + 24))
                goto LABEL_696;
              *((_QWORD *)v384 + 4) = v385 + 1;
              v386 = 115;
              goto LABEL_674;
            case 1:
              goto LABEL_672;
            case 2:
              if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 250) << 16) & 0xE0000u) > 0x50000)
              {
                v387 = (llvm::raw_ostream *)*v9;
                v388 = *(void **)(*v9 + 32);
                if (*(_QWORD *)(*v9 + 24) - (_QWORD)v388 > 0xDuLL)
                {
                  qmemcpy(v388, "u11__alignof__", 14);
                  *((_QWORD *)v387 + 4) += 14;
                }
                else
                {
                  llvm::raw_ostream::write(v387, "u11__alignof__");
                }
                v266 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                if ((a2[2] & 0x40) != 0)
                {
                  v389 = *(_QWORD *)v266;
                  goto LABEL_714;
                }
                goto LABEL_401;
              }
LABEL_672:
              v384 = (llvm::raw_ostream *)*v9;
              v385 = *(char **)(*v9 + 32);
              if ((unint64_t)v385 >= *(_QWORD *)(*v9 + 24))
              {
LABEL_696:
                llvm::raw_ostream::write(v384);
              }
              else
              {
                *((_QWORD *)v384 + 4) = v385 + 1;
                v386 = 97;
LABEL_674:
                *v385 = v386;
              }
              v400 = (llvm::raw_ostream *)*v9;
              v402 = *(_QWORD *)(*v9 + 24);
              v401 = *(_BYTE **)(*v9 + 32);
              if ((a2[2] & 0x40) == 0)
              {
                if ((unint64_t)v401 >= v402)
                {
                  llvm::raw_ostream::write(v400);
                }
                else
                {
                  *((_QWORD *)v400 + 4) = v401 + 1;
                  *v401 = 122;
                }
                goto LABEL_587;
              }
              if ((unint64_t)v401 >= v402)
              {
                llvm::raw_ostream::write(v400);
              }
              else
              {
                *((_QWORD *)v400 + 4) = v401 + 1;
                *v401 = 116;
              }
              v399 = **((_QWORD **)a2 + 2);
              break;
            case 3:
              v436 = *(_QWORD *)(*a1 + 16);
              v437 = sub_22F41A810(*(_QWORD *)(v436 + 32), 4, "cannot yet mangle __builtin_ptrauth_type_discriminator expression", 0x41uLL);
              sub_22EFF605C((uint64_t)a2);
              *(_DWORD *)(v436 + 312) = v438;
              *(_DWORD *)(v436 + 316) = v437;
              if (*(char *)(v436 + 311) < 0)
              {
                **(_BYTE **)(v436 + 288) = 0;
                *(_QWORD *)(v436 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v436 + 288) = 0;
                *(_BYTE *)(v436 + 311) = 0;
              }
              v492[0] = v436 + 320;
              v492[1] = 0;
              v492[2] = v436;
              v493 = 1;
              *(_BYTE *)(v436 + 320) = 0;
              *(_DWORD *)(v436 + 664) = 0;
              v456 = *(unsigned int *)(v436 + 776);
              if ((_DWORD)v456)
              {
                v457 = *(_QWORD *)(v436 + 768);
                v458 = 56 * v456;
                do
                {
                  if (*(char *)(v457 + v458 - 9) < 0)
                    operator delete(*(void **)(v457 + v458 - 32));
                  v458 -= 56;
                }
                while (v458);
              }
              *(_DWORD *)(v436 + 776) = 0;
              v140 = (__int128 *)v492;
              goto LABEL_200;
            case 4:
              v446 = *(_QWORD *)(*a1 + 16);
              v447 = sub_22F41A810(*(_QWORD *)(v446 + 32), 4, "cannot yet mangle __builtin_xnu_type_signature expression", 0x39uLL);
              sub_22EFF605C((uint64_t)a2);
              *(_DWORD *)(v446 + 312) = v448;
              *(_DWORD *)(v446 + 316) = v447;
              if (*(char *)(v446 + 311) < 0)
              {
                **(_BYTE **)(v446 + 288) = 0;
                *(_QWORD *)(v446 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v446 + 288) = 0;
                *(_BYTE *)(v446 + 311) = 0;
              }
              v490[0] = v446 + 320;
              v490[1] = 0;
              v490[2] = v446;
              v491 = 1;
              *(_BYTE *)(v446 + 320) = 0;
              *(_DWORD *)(v446 + 664) = 0;
              v468 = *(unsigned int *)(v446 + 776);
              if ((_DWORD)v468)
              {
                v469 = *(_QWORD *)(v446 + 768);
                v470 = 56 * v468;
                do
                {
                  if (*(char *)(v469 + v470 - 9) < 0)
                    operator delete(*(void **)(v469 + v470 - 32));
                  v470 -= 56;
                }
                while (v470);
              }
              *(_DWORD *)(v446 + 776) = 0;
              v140 = (__int128 *)v490;
              goto LABEL_200;
            case 5:
              v439 = *(_QWORD *)(*a1 + 16);
              v440 = sub_22F41A810(*(_QWORD *)(v439 + 32), 4, "cannot yet mangle __builtin_xnu_type_summary expression", 0x37uLL);
              sub_22EFF605C((uint64_t)a2);
              *(_DWORD *)(v439 + 312) = v441;
              *(_DWORD *)(v439 + 316) = v440;
              if (*(char *)(v439 + 311) < 0)
              {
                **(_BYTE **)(v439 + 288) = 0;
                *(_QWORD *)(v439 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v439 + 288) = 0;
                *(_BYTE *)(v439 + 311) = 0;
              }
              v488[0] = v439 + 320;
              v488[1] = 0;
              v488[2] = v439;
              v489 = 1;
              *(_BYTE *)(v439 + 320) = 0;
              *(_DWORD *)(v439 + 664) = 0;
              v459 = *(unsigned int *)(v439 + 776);
              if ((_DWORD)v459)
              {
                v460 = *(_QWORD *)(v439 + 768);
                v461 = 56 * v459;
                do
                {
                  if (*(char *)(v460 + v461 - 9) < 0)
                    operator delete(*(void **)(v460 + v461 - 32));
                  v461 -= 56;
                }
                while (v461);
              }
              *(_DWORD *)(v439 + 776) = 0;
              v140 = (__int128 *)v488;
              goto LABEL_200;
            case 6:
              v449 = *(_QWORD *)(*a1 + 16);
              v450 = sub_22F41A810(*(_QWORD *)(v449 + 32), 4, "cannot yet mangle __builtin_tmo_get_type_data expression", 0x38uLL);
              sub_22EFF605C((uint64_t)a2);
              *(_DWORD *)(v449 + 312) = v451;
              *(_DWORD *)(v449 + 316) = v450;
              if (*(char *)(v449 + 311) < 0)
              {
                **(_BYTE **)(v449 + 288) = 0;
                *(_QWORD *)(v449 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v449 + 288) = 0;
                *(_BYTE *)(v449 + 311) = 0;
              }
              v486[0] = v449 + 320;
              v486[1] = 0;
              v486[2] = v449;
              v487 = 1;
              *(_BYTE *)(v449 + 320) = 0;
              *(_DWORD *)(v449 + 664) = 0;
              v471 = *(unsigned int *)(v449 + 776);
              if ((_DWORD)v471)
              {
                v472 = *(_QWORD *)(v449 + 768);
                v473 = 56 * v471;
                do
                {
                  if (*(char *)(v472 + v473 - 9) < 0)
                    operator delete(*(void **)(v472 + v473 - 32));
                  v473 -= 56;
                }
                while (v473);
              }
              *(_DWORD *)(v449 + 776) = 0;
              v140 = (__int128 *)v486;
              goto LABEL_200;
            case 7:
              v433 = *(_QWORD *)(*a1 + 16);
              v434 = sub_22F41A810(*(_QWORD *)(v433 + 32), 4, "cannot yet mangle __builtin_tmo_get_type_descriptor expression", 0x3EuLL);
              sub_22EFF605C((uint64_t)a2);
              *(_DWORD *)(v433 + 312) = v435;
              *(_DWORD *)(v433 + 316) = v434;
              if (*(char *)(v433 + 311) < 0)
              {
                **(_BYTE **)(v433 + 288) = 0;
                *(_QWORD *)(v433 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v433 + 288) = 0;
                *(_BYTE *)(v433 + 311) = 0;
              }
              v484[0] = v433 + 320;
              v484[1] = 0;
              v484[2] = v433;
              v485 = 1;
              *(_BYTE *)(v433 + 320) = 0;
              *(_DWORD *)(v433 + 664) = 0;
              v453 = *(unsigned int *)(v433 + 776);
              if ((_DWORD)v453)
              {
                v454 = *(_QWORD *)(v433 + 768);
                v455 = 56 * v453;
                do
                {
                  if (*(char *)(v454 + v455 - 9) < 0)
                    operator delete(*(void **)(v454 + v455 - 32));
                  v455 -= 56;
                }
                while (v455);
              }
              *(_DWORD *)(v433 + 776) = 0;
              v140 = (__int128 *)v484;
              goto LABEL_200;
            case 8:
              v444 = *(_QWORD *)(*a1 + 16);
              v445 = sub_22F41A810(*(_QWORD *)(v444 + 32), 4, "cannot yet mangle vec_step expression", 0x25uLL);
              *(_DWORD *)(v444 + 312) = 0;
              *(_DWORD *)(v444 + 316) = v445;
              if (*(char *)(v444 + 311) < 0)
              {
                **(_BYTE **)(v444 + 288) = 0;
                *(_QWORD *)(v444 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v444 + 288) = 0;
                *(_BYTE *)(v444 + 311) = 0;
              }
              v482[0] = v444 + 320;
              v482[1] = 0;
              v482[2] = v444;
              v483 = 1;
              *(_BYTE *)(v444 + 320) = 0;
              *(_DWORD *)(v444 + 664) = 0;
              v465 = *(unsigned int *)(v444 + 776);
              if ((_DWORD)v465)
              {
                v466 = *(_QWORD *)(v444 + 768);
                v467 = 56 * v465;
                do
                {
                  if (*(char *)(v466 + v467 - 9) < 0)
                    operator delete(*(void **)(v466 + v467 - 32));
                  v467 -= 56;
                }
                while (v467);
              }
              *(_DWORD *)(v444 + 776) = 0;
              v140 = (__int128 *)v482;
              goto LABEL_200;
            case 9:
              v442 = *(_QWORD *)(*a1 + 16);
              v443 = sub_22F41A810(*(_QWORD *)(v442 + 32), 4, "cannot yet mangle __builtin_omp_required_simd_align expression", 0x3EuLL);
              *(_DWORD *)(v442 + 312) = 0;
              *(_DWORD *)(v442 + 316) = v443;
              if (*(char *)(v442 + 311) < 0)
              {
                **(_BYTE **)(v442 + 288) = 0;
                *(_QWORD *)(v442 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v442 + 288) = 0;
                *(_BYTE *)(v442 + 311) = 0;
              }
              v480[0] = v442 + 320;
              v480[1] = 0;
              v480[2] = v442;
              v481 = 1;
              *(_BYTE *)(v442 + 320) = 0;
              *(_DWORD *)(v442 + 664) = 0;
              v462 = *(unsigned int *)(v442 + 776);
              if ((_DWORD)v462)
              {
                v463 = *(_QWORD *)(v442 + 768);
                v464 = 56 * v462;
                do
                {
                  if (*(char *)(v463 + v464 - 9) < 0)
                    operator delete(*(void **)(v463 + v464 - 32));
                  v464 -= 56;
                }
                while (v464);
              }
              *(_DWORD *)(v442 + 776) = 0;
              v140 = (__int128 *)v480;
              goto LABEL_200;
            default:
              goto LABEL_622;
          }
LABEL_705:
          v403 = a1;
LABEL_706:
          sub_22F07817C(v403, v399);
          goto LABEL_622;
        }
        if (v8 < 0x10)
          goto LABEL_74;
        v249 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v250 = *(_DWORD *)(v249 + 16);
        if (v249)
          v251 = v250 == 11;
        else
          v251 = 0;
        if (v251)
        {
          if (((*(_DWORD *)(v249 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_75;
        }
        else if (v249 && v250 == 44)
        {
          v252 = sub_22F114198(*(_QWORD *)(v249 + 24));
          if (((*(_BYTE *)(v252 + 74) & 1) != 0 || *(_QWORD *)(v252 + 128) > 7uLL)
            && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v249 + 24)) + 76) & 0x80) == 0)
          {
LABEL_75:
            sub_22F007D7C(a2, *(_QWORD *)(*a1 + 8), 0, (uint64_t)&v503);
            v56 = (uint64_t)a1;
            v57 = v8;
LABEL_182:
            sub_22F082234(v56, v57, (llvm::APInt *)&v503);
            if (DWORD2(v503) >= 0x41 && (_QWORD)v503)
              MEMORY[0x2348A0E84](v503, 0x1000C8000313F17);
            goto LABEL_622;
          }
        }
        else if (v250 == 9)
        {
          goto LABEL_75;
        }
LABEL_74:
        v8 = *((_QWORD *)a2 + 1);
        goto LABEL_75;
      case 0xE9u:
        if (a4)
        {
          v66 = (llvm::raw_ostream *)*v9;
          v67 = *(_BYTE **)(*v9 + 32);
          if ((unint64_t)v67 >= *(_QWORD *)(*v9 + 24))
          {
            llvm::raw_ostream::write(v66);
          }
          else
          {
            *((_QWORD *)v66 + 4) = v67 + 1;
            *v67 = 88;
          }
        }
        *v496 = 0;
        v261 = sub_22EFFA1CC((*(_DWORD *)a2 >> 18) & 0x1F);
        sub_22F082370((llvm::raw_ostream *)a1, v261, 1);
        goto LABEL_587;
      default:
        goto LABEL_622;
    }
  }
}

void *sub_22F0815CC(llvm::raw_ostream *a1, const char *a2, size_t a3)
{
  _BYTE *v5;
  llvm::raw_ostream *v6;
  void *result;

  v5 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v5 + 1;
    *v5 = 85;
  }
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  result = (void *)*((_QWORD *)v6 + 4);
  if (a3 > *((_QWORD *)v6 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(v6, a2);
  if (a3)
  {
    result = memcpy(result, a2, a3);
    *((_QWORD *)v6 + 4) += a3;
  }
  return result;
}

llvm::raw_ostream *sub_22F081670(_QWORD *a1, unsigned __int8 *a2)
{
  llvm::raw_ostream *result;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _BYTE *v12;

  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 250) << 16) & 0xE0000u) > 0x50000)
    return (llvm::raw_ostream *)sub_22F07E3A4(a1, a2, 0xFFFFFFFFLL, 1);
  v4 = sub_22EFFA6B0(a2);
  v5 = v4;
  if (*v4 == 161
    && ((v6 = *((_QWORD *)v4 + 2), v7 = *(_DWORD *)(v6 + 28), (v7 & 0x7Fu) - 60 < 7) || (v7 & 0x7Eu) - 52 <= 5))
  {
    v8 = (llvm::raw_ostream *)a1[1];
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 76;
    }
    sub_22F07715C(a1, v6, 0);
  }
  else
  {
    v10 = (llvm::raw_ostream *)a1[1];
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 88;
    }
    sub_22F07E3A4(a1, v5, 0xFFFFFFFFLL, 0);
  }
  result = (llvm::raw_ostream *)a1[1];
  v12 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v12 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v12 + 1;
  *v12 = 69;
  return result;
}

uint64_t sub_22F0817C4(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v2 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v2 = a2;
  v3 = *(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16);
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = result;
    v5 = 0;
    v6 = (v3 >> 3);
    do
      result = sub_22F07E3A4(v4, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v5++), 0xFFFFFFFFLL, 0);
    while (v6 != v5);
  }
  return result;
}

llvm::raw_ostream *sub_22F081838(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  llvm::raw_ostream *result;
  _DWORD *v11;
  const char *v12;
  _WORD *v13;

  v4 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6 && *(_BYTE *)(v6 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 75) & 1) != 0 && *v4 == 188)
  {
    do
    {
      v7 = *(_DWORD *)v4;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    }
    while (v8
         && *(_BYTE *)(v8 + 16) == 45
         && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v8 + 24)) + 75) & 1) != 0
         && *v4 == 188);
    a3 = (v7 >> 18) & 1;
  }
  v9 = sub_22EFFFB48(v4);
  result = *(llvm::raw_ostream **)(a1 + 8);
  if (v9)
  {
    v11 = (_DWORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v11 > 6uLL)
    {
      *(_DWORD *)((char *)v11 + 3) = 1416652389;
      *v11 = 1701082212;
      *((_QWORD *)result + 4) += 7;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "dtdefpT");
    }
  }
  else
  {
    if (a3)
      v12 = "pt";
    else
      v12 = "dt";
    v13 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v13 > 1uLL)
    {
      *v13 = *(_WORD *)v12;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(result, v12);
    }
    return (llvm::raw_ostream *)sub_22F07E3A4(a1, v4, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_22F0819C4(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  char *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  int v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  _WORD *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  uint64_t v23;
  BOOL v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = (v7 >> 1) & 3;
    if (v8 - 2 >= 2)
    {
      if (v8 == 1)
      {
        v15 = *(_DWORD *)(v5 + 28) & 0x7F;
        if ((v15 - 35) >= 3)
        {
          v16 = v7 & 0xFFFFFFFFFFFFFFF8;
          if (v15 == 16)
          {
            if (v16)
            {
              sub_22F0819C4(a1, v16, 1);
            }
            else
            {
              v21 = (llvm::raw_ostream *)a1[1];
              v22 = (_WORD *)*((_QWORD *)v21 + 4);
              if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
              {
                *v22 = 29299;
                *((_QWORD *)v21 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v21, "sr");
              }
            }
            v23 = *(_QWORD *)(a2 + 16);
            v24 = (*(_DWORD *)(v23 + 28) & 0x7F) == 16;
          }
          else
          {
            if (v16)
            {
              sub_22F0819C4(a1, v16, 1);
            }
            else
            {
              v25 = (llvm::raw_ostream *)a1[1];
              v26 = (_WORD *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 1uLL)
              {
                *v26 = 29299;
                *((_QWORD *)v25 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v25, "sr");
              }
            }
            v23 = *(_QWORD *)(a2 + 16);
            v24 = (*(_DWORD *)(v23 + 28) & 0x7F) == 17;
          }
          if (v24)
            v27 = v23;
          else
            v27 = 0;
          v28 = *(_QWORD *)(v27 + 40);
          if ((v28 & 7) != 0)
            v29 = 0;
          else
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
          sub_22E54B3A4(a1[1], v29);
          sub_22F083BA0((uint64_t)a1, v27, 0);
        }
      }
      else
      {
        if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          sub_22F0819C4(a1, v7 & 0xFFFFFFFFFFFFFFF8, 1);
        }
        else
        {
          v30 = (llvm::raw_ostream *)a1[1];
          v31 = (_WORD *)*((_QWORD *)v30 + 4);
          if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 1uLL)
          {
            *v31 = 29299;
            *((_QWORD *)v30 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v30, "sr");
          }
        }
        if ((*(_BYTE *)(a2 + 8) & 6) != 0)
          v32 = 0;
        else
          v32 = *(_QWORD *)(a2 + 16);
        sub_22E54B3A4(a1[1], v32);
      }
      goto LABEL_11;
    }
    v9 = v5 & (v7 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0;
    if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      sub_22F0819C4(a1, v7 & 0xFFFFFFFFFFFFFFF8, 1);
    }
    else
    {
      v10 = (llvm::raw_ostream *)a1[1];
      v11 = (_WORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
      {
        *v11 = 29299;
        *((_QWORD *)v10 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v10, "sr");
      }
    }
    if (a3)
      v12 = "N";
    else
      v12 = "";
    if ((sub_22F081CF0(a1, v9, v12, a3) & 1) == 0)
    {
LABEL_11:
      if ((a3 & 1) == 0)
      {
        v13 = (llvm::raw_ostream *)a1[1];
        v14 = (_BYTE *)*((_QWORD *)v13 + 4);
        if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
        {
          llvm::raw_ostream::write(v13);
        }
        else
        {
          *((_QWORD *)v13 + 4) = v14 + 1;
          *v14 = 69;
        }
      }
    }
  }
  else
  {
    v17 = (llvm::raw_ostream *)a1[1];
    v18 = (_WORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 29543;
      *((_QWORD *)v17 + 4) += 2;
      if (!a3)
        return;
    }
    else
    {
      llvm::raw_ostream::write(v17, "gs");
      if (!a3)
        return;
    }
    v19 = (llvm::raw_ostream *)a1[1];
    v20 = (_WORD *)*((_QWORD *)v19 + 4);
    if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 1uLL)
    {
      *v20 = 29299;
      *((_QWORD *)v19 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v19, "sr");
    }
  }
}

uint64_t sub_22F081CF0(uint64_t *a1, unint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  while (2)
  {
    v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    switch(*(_BYTE *)(v8 + 16))
    {
      case 0xD:
      case 0x2B:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x33:
LABEL_16:
        v17 = a1[1];
        v18 = *(void **)(v17 + 32);
        if (a4 <= *(_QWORD *)(v17 + 24) - (_QWORD)v18)
        {
          if (a4)
          {
            memcpy(v18, a3, a4);
            *(_QWORD *)(v17 + 32) += a4;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a1[1], a3);
        }
        sub_22F07817C(a1, a2);
        return 1;
      case 0x12:
        sub_22E54B3A4(a1[1], *(_QWORD *)(v8 + 40));
        return 0;
      case 0x14:
        v34 = sub_22F36E5B0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
        sub_22E54B3A4(a1[1], *(_QWORD *)(v8 + 40));
        v30 = (__int128 *)(v8 + 48);
        v31 = *(_DWORD *)(v8 + 20);
        v32 = a1;
        v33 = v34;
        goto LABEL_36;
      case 0x18:
        a2 = *(_QWORD *)(v8 + 40);
        continue;
      case 0x1B:
      case 0x2C:
      case 0x2D:
        v9 = sub_22F114198(*(_QWORD *)(v8 + 24));
        v10 = *(_QWORD *)(v9 + 40);
        goto LABEL_6;
      case 0x2A:
        v13 = a1[1];
        v14 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(*(_QWORD *)(v13 + 24) - v14) > 0xA)
        {
          result = 0;
          *(_DWORD *)(v14 + 7) = 1598767937;
          *(_QWORD *)v14 = *(_QWORD *)"_SUBSTPACK_";
          *(_QWORD *)(v13 + 32) += 11;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a1[1], "_SUBSTPACK_");
          return 0;
        }
        return result;
      case 0x2E:
        v15 = *(_QWORD *)(v8 + 32);
        v35 = v15;
        switch(sub_22F0F084C(&v35))
        {
          case 0u:
          case 3u:
            v16 = sub_22F0F08CC(&v35);
            if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x20)
              goto LABEL_16;
            v27 = v16;
            v28 = *(_QWORD *)(v16 + 40);
            if ((v28 & 7) != 0)
              v29 = 0;
            else
              v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            sub_22E54B3A4(a1[1], v29);
            v25 = (uint64_t)a1;
            v26 = v27;
            goto LABEL_34;
          case 5u:
            v19 = v15 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) & 3) != 2)
              v19 = 0;
            sub_22F084044(a1, *(_QWORD *)(v19 + 24));
            break;
          case 6u:
            v20 = (llvm::raw_ostream *)a1[1];
            v21 = *((_QWORD *)v20 + 4);
            if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 0xA)
            {
              *(_DWORD *)(v21 + 7) = 1598767937;
              *(_QWORD *)v21 = *(_QWORD *)"_SUBSTPACK_";
              *((_QWORD *)v20 + 4) += 11;
            }
            else
            {
              llvm::raw_ostream::write(v20, "_SUBSTPACK_");
            }
            break;
          case 7u:
            v22 = sub_22F0F08CC(&v35);
            v23 = *(_QWORD *)(v22 + 40);
            if ((v23 & 7) != 0)
              v24 = 0;
            else
              v24 = v23 & 0xFFFFFFFFFFFFFFF8;
            sub_22E54B3A4(a1[1], v24);
            v25 = (uint64_t)a1;
            v26 = v22;
LABEL_34:
            sub_22F083BA0(v25, v26, 0);
            break;
          default:
            break;
        }
        v30 = (__int128 *)(v8 + 40);
        v31 = *(_DWORD *)(v8 + 20);
        v32 = a1;
        v33 = 0;
LABEL_36:
        sub_22F083F48(v32, v33, v30, v31);
        return 0;
      case 0x32:
      case 0x34:
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(_QWORD *)(v9 + 40);
LABEL_6:
        if ((v10 & 7) != 0)
          v11 = 0;
        else
          v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        sub_22E54B3A4(a1[1], v11);
        sub_22F083BA0((uint64_t)a1, v9, 0);
        return 0;
      case 0x35:
        a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 64) + 48) & 0xFFFFFFFFFFFFFFF0;
        continue;
      default:
        return 0;
    }
  }
}

void sub_22F081FF0(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, uint64_t a6)
{
  int v11;
  unsigned int v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  if (a2)
    sub_22F0819C4(a1, a2, 0);
  v11 = a3 & 7;
  if (v11 == 7)
  {
    v12 = *(_DWORD *)(a3 & 0xFFFFFFFFFFFFFFF8);
    if (v12 >= 3)
      v12 = 3;
    v11 = v12 | 8;
  }
  switch(v11)
  {
    case 0:
      if ((a3 & 7) != 0)
        v15 = 0;
      else
        v15 = a3 & 0xFFFFFFFFFFFFFFF8;
      sub_22E54B3A4(a1[1], v15);
      goto LABEL_16;
    case 4:
      v23 = (llvm::raw_ostream *)a1[1];
      v24 = (_WORD *)*((_QWORD *)v23 + 4);
      if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 1uLL)
      {
        *v24 = 28260;
        *((_QWORD *)v23 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v23, "dn");
      }
      if ((a3 & 7) - 3 > 2)
        v25 = 0;
      else
        v25 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_22F081CF0(a1, v25, "", 0);
      if (!a4)
        return;
      goto LABEL_17;
    case 5:
    case 6:
    case 9:
      v13 = (llvm::raw_ostream *)a1[1];
      v14 = (_WORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
      {
        *v14 = 28271;
        *((_QWORD *)v13 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v13, "on");
      }
      sub_22F084264(a1, a3, a6);
      if (!a4)
        return;
      goto LABEL_17;
    default:
LABEL_16:
      if (a4)
      {
LABEL_17:
        v16 = (llvm::raw_ostream *)a1[1];
        v17 = (_BYTE *)*((_QWORD *)v16 + 4);
        if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
        {
          llvm::raw_ostream::write(v16);
        }
        else
        {
          *((_QWORD *)v16 + 4) = v17 + 1;
          *v17 = 73;
        }
        *(_QWORD *)&v26 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v18 = sub_22F0F08CC((uint64_t *)&v26);
        if (v18)
          v28 = v18;
        if (a5)
        {
          v19 = 0;
          do
          {
            v26 = *a4;
            v27 = *((_QWORD *)a4 + 2);
            v20 = sub_22F0840DC((uint64_t *)&v28, v19, (int *)a4);
            sub_22F0832A4(a1, (uint64_t)&v26, v20);
            ++v19;
            a4 += 2;
          }
          while (a5 != v19);
        }
        v21 = (llvm::raw_ostream *)a1[1];
        v22 = (_BYTE *)*((_QWORD *)v21 + 4);
        if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
        {
          llvm::raw_ostream::write(v21);
        }
        else
        {
          *((_QWORD *)v21 + 4) = v22 + 1;
          *v22 = 69;
        }
      }
      return;
  }
}

llvm::raw_ostream *sub_22F082234(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  BOOL v9;
  llvm::raw_ostream *v10;
  unsigned int v11;
  BOOL v12;
  char v14;
  char *v15;
  llvm::raw_ostream *result;
  _BYTE *v17;

  v6 = *(llvm::raw_ostream **)(a1 + 8);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 76;
  }
  sub_22F07817C(a1, a2);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 87031819;
  else
    v9 = 0;
  if (v9)
  {
    v10 = *(llvm::raw_ostream **)(a1 + 8);
    v11 = *((_DWORD *)a3 + 2);
    if (v11 > 0x40)
      v12 = llvm::APInt::countLeadingZerosSlowCase(a3) == v11;
    else
      v12 = *(_QWORD *)a3 == 0;
    if (v12)
      v14 = 48;
    else
      v14 = 49;
    v15 = (char *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v15 + 1;
      *v15 = v14;
    }
  }
  else
  {
    sub_22F08310C(a1, a3);
  }
  result = *(llvm::raw_ostream **)(a1 + 8);
  v17 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v17 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v17 + 1;
  *v17 = 69;
  return result;
}

llvm::raw_ostream *sub_22F082370(llvm::raw_ostream *result, int a2, int a3)
{
  __int16 *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  __int16 v7;

  switch(a2)
  {
    case 1:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "nw";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 30574;
      goto LABEL_135;
    case 2:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "dl";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 27748;
      goto LABEL_135;
    case 3:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "na";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 24942;
      goto LABEL_135;
    case 4:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "da";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 24932;
      goto LABEL_135;
    case 5:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v5 = "pl";
      v6 = "ps";
      goto LABEL_26;
    case 6:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v5 = "mi";
      v6 = "ng";
      goto LABEL_26;
    case 7:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v5 = "ml";
      v6 = "de";
      goto LABEL_26;
    case 8:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "dv";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 30308;
      goto LABEL_135;
    case 9:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "rm";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28018;
      goto LABEL_135;
    case 10:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "eo";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28517;
      goto LABEL_135;
    case 11:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v5 = "an";
      v6 = "ad";
LABEL_26:
      if (a3 == 1)
        v4 = v6;
      else
        v4 = v5;
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      v7 = *(_WORD *)v4;
      goto LABEL_135;
    case 12:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "or";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29295;
      goto LABEL_135;
    case 13:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "co";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28515;
      goto LABEL_135;
    case 14:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "nt";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29806;
      goto LABEL_135;
    case 15:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "aS";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 21345;
      goto LABEL_135;
    case 16:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "lt";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29804;
      goto LABEL_135;
    case 17:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "gt";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29799;
      goto LABEL_135;
    case 18:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "pL";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 19568;
      goto LABEL_135;
    case 19:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "mI";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 18797;
      goto LABEL_135;
    case 20:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "mL";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 19565;
      goto LABEL_135;
    case 21:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "dV";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 22116;
      goto LABEL_135;
    case 22:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "rM";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 19826;
      goto LABEL_135;
    case 23:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "eO";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 20325;
      goto LABEL_135;
    case 24:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "aN";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 20065;
      goto LABEL_135;
    case 25:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "oR";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 21103;
      goto LABEL_135;
    case 26:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "ls";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29548;
      goto LABEL_135;
    case 27:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "rs";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29554;
      goto LABEL_135;
    case 28:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "lS";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 21356;
      goto LABEL_135;
    case 29:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "rS";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 21362;
      goto LABEL_135;
    case 30:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "eq";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29029;
      goto LABEL_135;
    case 31:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "ne";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 25966;
      goto LABEL_135;
    case 32:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "le";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 25964;
      goto LABEL_135;
    case 33:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "ge";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 25959;
      goto LABEL_135;
    case 34:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "ss";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29555;
      goto LABEL_135;
    case 35:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "aa";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 24929;
      goto LABEL_135;
    case 36:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "oo";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28527;
      goto LABEL_135;
    case 37:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "pp";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28784;
      goto LABEL_135;
    case 38:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "mm";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28013;
      goto LABEL_135;
    case 39:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "cm";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28003;
      goto LABEL_135;
    case 40:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "pm";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 28016;
      goto LABEL_135;
    case 41:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "pt";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 29808;
      goto LABEL_135;
    case 42:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "cl";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 27747;
      goto LABEL_135;
    case 43:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "ix";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 30825;
      goto LABEL_135;
    case 44:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 <= 1uLL)
      {
        v4 = "qu";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      v7 = 30065;
      goto LABEL_135;
    case 45:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v3 = (__int16 *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v3 > 1uLL)
      {
        v7 = 30561;
LABEL_135:
        *v3 = v7;
        *((_QWORD *)result + 4) += 2;
      }
      else
      {
        v4 = "aw";
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v4);
      }
      return result;
    default:
      return result;
  }
}

uint64_t sub_22F082A90(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  llvm::raw_ostream *v7;
  void *v8;

  v7 = *(llvm::raw_ostream **)(a1 + 8);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (a4 <= *((_QWORD *)v7 + 3) - (_QWORD)v8)
  {
    if (a4)
    {
      memcpy(v8, a3, a4);
      *((_QWORD *)v7 + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, a3);
  }
  sub_22F07817C(a1, *(_QWORD *)(a2 + 8));
  return sub_22F07E3A4(a1, *(_QWORD *)(a2 + 16), 0xFFFFFFFFLL, 0);
}

llvm::raw_ostream *sub_22F082B1C(uint64_t *a1, uint64_t a2, __int128 *a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t v14;
  llvm::raw_ostream *result;
  _BYTE *v16;

  v8 = sub_22F076E9C(*a1, a2);
  v9 = v8;
  v10 = *(_WORD *)(v8 + 8) & 0x7F;
  if (v10 == 83 || v10 == 16 && sub_22F07DECC(*a1, v8 - 48))
  {
    sub_22F0843EC(a1, a2, 0, v9, 0);
    if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
        v11 = 0;
      else
        v11 = a2 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v11 = 0;
    }
    return sub_22F083F48(a1, v11, a3, a4);
  }
  else
  {
    v12 = (llvm::raw_ostream *)a1[1];
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 78;
    }
    sub_22F088228((uint64_t)a1, a2, 0, 0);
    if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
        v14 = 0;
      else
        v14 = a2 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v14 = 0;
    }
    sub_22F083F48(a1, v14, a3, a4);
    result = (llvm::raw_ostream *)a1[1];
    v16 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v16 >= *((_QWORD *)result + 3))
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    }
    else
    {
      *((_QWORD *)result + 4) = v16 + 1;
      *v16 = 69;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F082C90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  switch(v4)
  {
    case ';':
      v6 = a1[1];
      if (**(_BYTE **)v6 && **(_BYTE **)(v6 + 8))
      {
        v7 = *(llvm::raw_ostream **)(*(_QWORD *)(v6 + 16) + 8);
        v8 = (_BYTE *)*((_QWORD *)v7 + 4);
        if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
        {
          llvm::raw_ostream::write(v7);
        }
        else
        {
          *((_QWORD *)v7 + 4) = v8 + 1;
          *v8 = 88;
        }
      }
      **(_BYTE **)(v6 + 8) = 0;
      return sub_22F08379C(v3, *(_DWORD *)(a2 + 68) & 0xFFFFF, *(_DWORD *)(a2 + 68) >> 20);
    case '@':
      v9 = a1[1];
      if (**(_BYTE **)v9 && **(_BYTE **)(v9 + 8))
      {
        v10 = *(llvm::raw_ostream **)(*(_QWORD *)(v9 + 16) + 8);
        v11 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10);
        }
        else
        {
          *((_QWORD *)v10 + 4) = v11 + 1;
          *v11 = 88;
        }
      }
      **(_BYTE **)(v9 + 8) = 0;
      return sub_22F0838A0(v3, a2);
    case 'C':
      return sub_22F082234(*a1, *(_QWORD *)(a2 + 48), (llvm::APInt *)(a2 + 64));
    default:
      v12 = *(llvm::raw_ostream **)(v3 + 8);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
      {
        llvm::raw_ostream::write(v12);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 76;
      }
      sub_22F07715C(v3, a2, 0);
      result = *(llvm::raw_ostream **)(v3 + 8);
      v14 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v14 >= *((_QWORD *)result + 3))
      {
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v14 + 1;
        *v14 = 69;
      }
      break;
  }
  return result;
}

llvm::raw_ostream *sub_22F082E44(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v6 = a1[1];
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 76;
  }
  sub_22F07817C(a1, a2);
  sub_22F082FAC(a1, a3);
  result = a1[1];
  v9 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v9 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v9 + 1;
  *v9 = 69;
  return result;
}

uint64_t sub_22F082EE8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  __int16 v8;

  v2 = sub_22F41A810(*(_QWORD *)(a1 + 32), 4, "cannot mangle fixed point literals yet", 0x26uLL);
  *(_DWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = v2;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v7[0] = a1 + 320;
  v7[1] = 0;
  v7[2] = a1;
  v8 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v3 = *(unsigned int *)(a1 + 776);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 768);
    v5 = 56 * v3;
    do
    {
      if (*(char *)(v4 + v5 - 9) < 0)
        operator delete(*(void **)(v4 + v5 - 32));
      v5 -= 56;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 776) = 0;
  return sub_22E3BB0B8((uint64_t)v7);
}

void sub_22F082FAC(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  char *v11;
  __int128 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v4)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v3);
  v5 = (v10 + 3) >> 2;
  v11 = (char *)v13;
  v12 = xmmword_22F45EE20;
  sub_22E47EFD8((size_t *)&v11, v5, 0);
  if (v10 + 3 >= 4)
  {
    v6 = 0;
    v7 = 4 * v5 - 4;
    do
    {
      if (v10 >= 0x41)
        v8 = v9;
      else
        v8 = &v9;
      v11[v6++] = byte_22F4A5FB8[(v8[v7 >> 6] >> (v7 & 0x3C)) & 0xFLL];
      v7 -= 4;
    }
    while (v5 != v6);
  }
  llvm::raw_ostream::write(a1[1], v11);
  if (v11 != (char *)v13)
    free(v11);
  if (v10 >= 0x41)
  {
    if (v9)
      MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
  }
}

uint64_t sub_22F08310C(uint64_t a1, llvm::APInt *this)
{
  uint64_t result;
  unsigned int v5;
  char v6;
  llvm::APInt *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;

  if (*((_BYTE *)this + 12))
    return llvm::APInt::print(this, *(llvm::raw_ostream **)(a1 + 8));
  v5 = *((_DWORD *)this + 2);
  v6 = v5 - 1;
  v7 = v5 >= 0x41 ? (llvm::APInt *)(*(_QWORD *)this + 8 * ((v5 - 1) >> 6)) : this;
  if (((*(_QWORD *)v7 >> v6) & 1) == 0)
    return llvm::APInt::print(this, *(llvm::raw_ostream **)(a1 + 8));
  v8 = *(llvm::raw_ostream **)(a1 + 8);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 110;
  }
  v10 = *((_DWORD *)this + 2);
  v11 = v10 - 1;
  if (v10 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)this + 8 * (v11 >> 6)) >> v11) & 1) != 0)
    {
      v18 = *((_DWORD *)this + 2);
      llvm::APInt::initSlowCase((llvm::APInt *)&v17, this);
      v10 = v18;
      if (v18 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v17);
LABEL_20:
        llvm::APInt::operator++();
        v16 = v18;
        v15 = v17;
        v18 = 0;
        goto LABEL_23;
      }
      v12 = v17;
LABEL_16:
      v13 = ~v12;
      if (v10)
        v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
      else
        v14 = 0;
      v17 = v14 & v13;
      goto LABEL_20;
    }
    v16 = *((_DWORD *)this + 2);
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, this);
  }
  else
  {
    v12 = *(_QWORD *)this;
    if (((*(_QWORD *)this >> v11) & 1) != 0)
    {
      v18 = *((_DWORD *)this + 2);
      goto LABEL_16;
    }
    v16 = *((_DWORD *)this + 2);
    v15 = v12;
  }
LABEL_23:
  result = llvm::APInt::print((llvm::APInt *)&v15, *(llvm::raw_ostream **)(a1 + 8));
  if (v16 >= 0x41)
  {
    result = v15;
    if (v15)
      return MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
  }
  return result;
}

void sub_22F0832A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _WORD *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[24];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if ((sub_22F0EEB00(a2) & 2) == 0 || (sub_22F0EEB00(a2) & 4) != 0)
  {
    sub_22EF6871C((unsigned int *)a2, (uint64_t)v37);
    *(_OWORD *)a2 = *(_OWORD *)v37;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v37[16];
  }
  switch(*(_DWORD *)a2)
  {
    case 1:
      sub_22F07817C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 2:
      v6 = *(uint64_t **)(a2 + 16);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        v7 = *(_QWORD *)(v6[6] & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
          v7 = (unint64_t)sub_22F10D2BC(v6[6]);
        sub_22F0854CC((uint64_t)a1, v7 & 0xFFFFFFFFFFFFFFF0, (uint64_t)(v6 + 8), 1, a3);
      }
      else
      {
        v16 = *(_QWORD *)(*a1 + 8);
        *(_DWORD *)v37 = 0;
        if (sub_22EFBAEF8((uint64_t)v6))
        {
          v32 = 0;
          sub_22F364DA4((uint64_t)&v32, (uint64_t)v6, 0, 0);
          if (*(_DWORD *)v37 >= 2u)
            sub_22EF53BC0((uint64_t *)v37);
          *(_DWORD *)v37 = v32;
          *(_OWORD *)&v37[8] = v33;
          v38 = v34;
          v39 = v35;
          v40 = v36;
        }
        else
        {
          v17 = v6[6];
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFEu)
             - 2 <= 3
            && (v18 = sub_22F36A2BC(v16, v17), sub_22EF6845C(v16, v18, *(_QWORD *)(a2 + 8)))
            && ((*(unsigned __int8 *)(*(_QWORD *)(v16 + 2000) + 250) << 16) & 0xE0000u) > 0x50000)
          {
            v19 = (*(uint64_t (**)(uint64_t *))(*v6 + 32))(v6);
            v31 = 0;
            v33 = 0u;
            v34 = 0u;
            *(_QWORD *)&v35 = 0;
            DWORD2(v35) = -1;
            v32 = 7;
            *(_QWORD *)sub_22EF55C28((uint64_t)&v32, v19 & 0xFFFFFFFFFFFFFFFCLL, 0, &v31, 1u, 0, 0) = 0;
          }
          else
          {
            v28 = (*(uint64_t (**)(uint64_t *))(*v6 + 32))(v6);
            v31 = 0;
            v33 = 0u;
            v34 = 0u;
            *(_QWORD *)&v35 = 0;
            DWORD2(v35) = -1;
            v32 = 7;
            sub_22EF55C28((uint64_t)&v32, v28 & 0xFFFFFFFFFFFFFFFCLL, 0, &v31, 0, 0, 0);
          }
          if (*(_DWORD *)v37 >= 2u)
            sub_22EF53BC0((uint64_t *)v37);
          *(_DWORD *)v37 = v32;
          *(_OWORD *)&v37[8] = v33;
          v38 = v34;
          v39 = v35;
          v40 = v36;
        }
        sub_22F0854CC((uint64_t)a1, *(_QWORD *)(a2 + 8), (uint64_t)v37, 1, a3);
        if (*(_DWORD *)v37 >= 2u)
          sub_22EF53BC0((uint64_t *)v37);
      }
      break;
    case 3:
      v8 = *(_QWORD *)(a2 + 8);
      v9 = (llvm::raw_ostream *)a1[1];
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v10 + 1;
        *v10 = 76;
      }
      sub_22F07817C(a1, v8);
      v20 = (llvm::raw_ostream *)a1[1];
      v21 = (_WORD *)*((_QWORD *)v20 + 4);
      if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 1uLL)
      {
        *v21 = 17712;
        *((_QWORD *)v20 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v20, "0E");
      }
      break;
    case 4:
      v11 = *(_QWORD *)(a2 + 16);
      sub_22E466FDC(a2, (uint64_t)v37);
      sub_22F082234((uint64_t)a1, v11, (llvm::APInt *)v37);
      if (*(_DWORD *)&v37[8] >= 0x41u && *(_QWORD *)v37)
        MEMORY[0x2348A0E84](*(_QWORD *)v37, 0x1000C8000313F17);
      break;
    case 5:
      goto LABEL_17;
    case 6:
      v12 = (llvm::raw_ostream *)a1[1];
      v13 = (_WORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 28740;
        *((_QWORD *)v12 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v12, "Dp");
      }
LABEL_17:
      sub_22F0887BC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      sub_22F081670(a1, *(unsigned __int8 **)(a2 + 8));
      break;
    case 8:
      v14 = (llvm::raw_ostream *)a1[1];
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        llvm::raw_ostream::write(v14);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 74;
      }
      v22 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v22)
      {
        v23 = *(__int128 **)(a2 + 8);
        v24 = 24 * v22;
        do
        {
          v25 = *v23;
          v30 = *((_QWORD *)v23 + 2);
          v29 = v25;
          sub_22F0832A4(a1, &v29, a3);
          v23 = (__int128 *)((char *)v23 + 24);
          v24 -= 24;
        }
        while (v24);
      }
      v26 = (llvm::raw_ostream *)a1[1];
      v27 = (_BYTE *)*((_QWORD *)v26 + 4);
      if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
      {
        llvm::raw_ostream::write(v26);
      }
      else
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        *v27 = 69;
      }
      break;
    default:
      return;
  }
}

llvm::raw_ostream *sub_22F08379C(uint64_t a1, int a2, int a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  v6 = *(llvm::raw_ostream **)(a1 + 8);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6);
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 84;
    if (!a2)
    {
LABEL_10:
      if (!a3)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  v8 = *(llvm::raw_ostream **)(a1 + 8);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 76;
  }
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 < *((_QWORD *)v10 + 3))
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 95;
    goto LABEL_10;
  }
  llvm::raw_ostream::write(v10);
  if (a3)
LABEL_11:
    llvm::raw_ostream::operator<<();
LABEL_12:
  result = *(llvm::raw_ostream **)(a1 + 8);
  v13 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v13 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v13 + 1;
  *v13 = 95;
  return result;
}

llvm::raw_ostream *sub_22F0838A0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _WORD *v16;
  unint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *result;
  _BYTE *v33;

  v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0x1000) != 0)
    v5 = 0;
  else
    v5 = (v4 >> 13) & 0x7F;
  v6 = (v4 >> 20);
  if (v6 == 255)
  {
    v7 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v9 = *(_QWORD *)v9;
      for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
      {
        v11 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v11 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_19;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_18;
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_25;
          if (i == 24)
          {
LABEL_12:
            v11 = -48;
          }
          else
          {
LABEL_18:
            if (i != 70)
            {
LABEL_19:
              v12 = i - 52;
              if ((i - 33) >= 5)
                v13 = -48;
              else
                v13 = -64;
              if (v12 >= 6)
                v11 = v13;
              else
                v11 = -72;
              goto LABEL_25;
            }
            v11 = -64;
          }
        }
LABEL_25:
        v14 = *(_QWORD *)(v9 + v11 + 16);
        v9 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 4) != 0)
          v9 = *(_QWORD *)v9;
      }
      v7 = v9 - 40;
    }
    v6 = sub_22F36F2CC(*(_QWORD *)(v7 + 88), a2);
  }
  v15 = *(llvm::raw_ostream **)(a1 + 8);
  v16 = (_WORD *)*((_QWORD *)v15 + 4);
  v17 = *((_QWORD *)v15 + 3) - (_QWORD)v16;
  if (*(_DWORD *)(a1 + 40) >> 1 == (*(_DWORD *)(a1 + 40) & 1) + v5)
  {
    if (v17 > 1)
    {
      *v16 = 28774;
      *((_QWORD *)v15 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v15, "fp");
    }
  }
  else
  {
    if (v17 > 1)
    {
      *v16 = 19558;
      *((_QWORD *)v15 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v15, "fL");
    }
    v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v19 = (_BYTE *)*((_QWORD *)v18 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
    {
      llvm::raw_ostream::write(v18);
    }
    else
    {
      *((_QWORD *)v18 + 4) = v19 + 1;
      *v19 = 112;
    }
  }
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_BYTE *)(v21 + 16) == 16;
  else
    v22 = 0;
  if (v22)
  {
    v26 = *(_QWORD *)(v21 + 48);
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v27 & 8) != 0)
    {
      v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    v30 = v28 | v29 | (v27 | v26) & 7;
    v31 = a1;
  }
  else
  {
    v23 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v23 & 8) != 0)
    {
      v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v30 = v24 | v25 | (v23 | v20) & 7;
    v31 = a1;
    v21 = 0;
  }
  sub_22F079B94(v31, v30, v21);
  if (v6)
    llvm::raw_ostream::operator<<();
  result = *(llvm::raw_ostream **)(a1 + 8);
  v33 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v33 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v33 + 1;
  *v33 = 95;
  return result;
}

void sub_22F083BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  llvm::raw_ostream *v4;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *i;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  _BYTE *v27;
  const void *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *__base;
  size_t __nel;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(llvm::raw_ostream **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
    a3 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = *(_DWORD *)(v6 + 28);
  if ((v7 & 0x7F) != 0x10 || (v7 & 0x7Eu) - 58 > 0xFFFFFFF9)
  {
    __base = v38;
    __nel = 0x400000000;
    if ((v7 & 0x100) == 0)
      goto LABEL_22;
    sub_22EFC8E88(v6);
    v10 = *(uint64_t **)v9;
    v11 = *(unsigned int *)(v9 + 8);
    v12 = *(uint64_t **)v9;
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      v12 = *(uint64_t **)v9;
      while (*(_WORD *)(*v12 + 32) != 361)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_22;
      }
    }
    if (v12 != &v10[v11])
    {
      do
      {
        v32 = *v10++;
        v31 = v32;
      }
      while (*(_WORD *)(v32 + 32) != 361);
      sub_22F3E15EC((unsigned int *)v3, *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 8), *(_BYTE **)(v31 + 40), (_BYTE *)(*(_QWORD *)(v31 + 40) + 16 * *(unsigned int *)(v31 + 36)));
      sub_22F3E15EC((unsigned int *)&__base, (uint64_t)__base + 16 * __nel, *(_BYTE **)(v31 + 40), (_BYTE *)(*(_QWORD *)(v31 + 40) + 16 * *(unsigned int *)(v31 + 36)));
      if (!a3)
        goto LABEL_23;
    }
    else
    {
LABEL_22:
      if (!a3)
      {
LABEL_23:
        v19 = __nel;
        v20 = __base;
        if (__nel >= 2)
        {
          qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22F2BB1DC);
          v20 = __base;
          v19 = __nel;
        }
        v21 = sub_22EAA01BC((uint64_t)v20, (uint64_t)v20 + 16 * v19);
        v22 = (char *)__base;
        v23 = (unint64_t)(v21 - (_QWORD)__base) >> 4;
        LODWORD(__nel) = v23;
        if ((_DWORD)v23)
        {
          v24 = (char *)__base + 16 * v23;
          do
          {
            v25 = *(_OWORD *)v22;
            v26 = *(unsigned int *)(v3 + 88);
            if (v26 >= *(unsigned int *)(v3 + 92))
            {
              v35 = *(_OWORD *)v22;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v35;
              v26 = *(unsigned int *)(v3 + 88);
            }
            *(_OWORD *)(*(_QWORD *)(v3 + 80) + 16 * v26) = v25;
            ++*(_DWORD *)(v3 + 88);
            v27 = (_BYTE *)*((_QWORD *)v4 + 4);
            if (*((_BYTE **)v4 + 3) == v27)
            {
              llvm::raw_ostream::write(v4, "B");
            }
            else
            {
              *v27 = 66;
              ++*((_QWORD *)v4 + 4);
            }
            llvm::raw_ostream::operator<<();
            v28 = *(const void **)v22;
            v29 = *((_QWORD *)v22 + 1);
            v30 = (void *)*((_QWORD *)v4 + 4);
            if (v29 <= *((_QWORD *)v4 + 3) - (_QWORD)v30)
            {
              if (v29)
              {
                memcpy(v30, v28, *((_QWORD *)v22 + 1));
                *((_QWORD *)v4 + 4) += v29;
              }
            }
            else
            {
              llvm::raw_ostream::write(v4, (const char *)v28);
            }
            v22 += 16;
          }
          while (v22 != v24);
          v22 = (char *)__base;
        }
        if (v22 != (char *)v38)
          free(v22);
        return;
      }
    }
    sub_22F3E1788((unsigned int *)v3, *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 8), *(__int128 **)a3, (__int128 *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 8)));
    sub_22F3E1788((unsigned int *)&__base, (uint64_t)__base + 16 * __nel, *(__int128 **)a3, (__int128 *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 8)));
    goto LABEL_23;
  }
  if ((v7 & 0x100) != 0)
  {
    sub_22EFC8E88(v6);
    v15 = *(uint64_t **)v14;
    v16 = *(unsigned int *)(v14 + 8);
    i = *(uint64_t **)v14;
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      for (i = *(uint64_t **)v14; *(_WORD *)(*i + 32) != 361; ++i)
      {
        v18 -= 8;
        if (!v18)
          return;
      }
    }
    if (i != &v15[v16])
    {
      do
      {
        v34 = *v15++;
        v33 = v34;
      }
      while (*(_WORD *)(v34 + 32) != 361);
      sub_22F3E15EC((unsigned int *)v3, *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 8), *(_BYTE **)(v33 + 40), (_BYTE *)(*(_QWORD *)(v33 + 40) + 16 * *(unsigned int *)(v33 + 36)));
    }
  }
}

llvm::raw_ostream *sub_22F083F48(uint64_t *a1, uint64_t a2, __int128 *a3, int a4)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  llvm::raw_ostream *result;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v8 = (llvm::raw_ostream *)a1[1];
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 73;
  }
  v20 = a2;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v10 = sub_22F0F08CC(&v20);
  if (v10)
    v17 = v10;
  if (a4)
  {
    v11 = 0;
    do
    {
      v15 = *a3;
      v16 = *((_QWORD *)a3 + 2);
      v12 = sub_22F0840DC((uint64_t *)&v17, v11, (int *)a3);
      sub_22F0832A4(a1, (uint64_t)&v15, v12);
      ++v11;
      a3 = (__int128 *)((char *)a3 + 24);
    }
    while (a4 != v11);
  }
  result = (llvm::raw_ostream *)a1[1];
  v14 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v14 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v14 + 1;
  *v14 = 69;
  return result;
}

uint64_t sub_22F084044(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v3 = sub_22F0F08CC(&v8);
  if (v3)
  {
    v4 = v3;
    if (sub_22F07DB5C(a1, v3))
    {
      return 1;
    }
    else
    {
      v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 32))(v4);
      return sub_22F07DA88((uint64_t)a1, v7);
    }
  }
  else
  {
    sub_22EF65464(*(_QWORD *)(*a1 + 8), &v8);
    v8 = v6;
    return sub_22F07DA88((uint64_t)a1, v6);
  }
}

BOOL sub_22F0840DC(uint64_t *a1, unsigned int a2, int *a3)
{
  _BOOL8 result;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (!*a1 || *((_BYTE *)a1 + 8))
    return 1;
  v6 = a1[2];
  if (v6)
    goto LABEL_11;
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 56) + 8 * a2 + 16);
  v7 = sub_22EFC78D8(v6);
  v8 = *a3;
  if (v7)
    v9 = v8 == 8;
  else
    v9 = 1;
  if (!v9)
  {
    a1[2] = v6;
LABEL_11:
    v8 = *a3;
  }
  if (v8 != 1)
  {
    if (v8 == 7)
    {
      if (**((unsigned __int8 **)a3 + 1) != 213)
        goto LABEL_21;
    }
    else if (((1 << v8) & 0x13D) != 0)
    {
      goto LABEL_21;
    }
LABEL_17:
    if (!sub_22EFC78D8(v6) || a1[2])
    {
      result = 1;
      *((_BYTE *)a1 + 8) = 1;
      return result;
    }
    goto LABEL_21;
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
    goto LABEL_17;
LABEL_21:
  v10 = *a1;
  if (!*a1 || (*(_DWORD *)(v10 + 28) & 0x7F) != 0x1D)
    goto LABEL_30;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 4) != 0)
    v12 = *(_QWORD *)v12;
  result = 1;
  if (v12)
  {
    if ((*(_WORD *)(v12 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v13 = *(_QWORD *)(v12 + 64);
      if (v13)
      {
        if (((*(unsigned __int16 *)(v13 + 8) | (*(unsigned __int8 *)(v13 + 10) << 16)) & 0x100000) != 0
          && (*(_BYTE *)(v13 + 104) & 4) != 0)
        {
LABEL_30:
          result = 0;
          if (v6)
          {
            if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x3B)
            {
              v14 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
              v15 = 0;
              return sub_22F110500((uint64_t)&v15, v14) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_22F084264(uint64_t *a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  unsigned int v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;

  v5 = a2 & 7;
  v6 = v5;
  if (v5 == 7)
  {
    v7 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v7 >= 3)
      v7 = 3;
    v6 = v7 | 8;
  }
  switch(v6)
  {
    case 9:
      v11 = (llvm::raw_ostream *)a1[1];
      v12 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 26988;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, "li");
      }
      if ((~(_BYTE)a2 & 7) != 0)
        goto LABEL_22;
      v13 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v13 >= 3)
        v13 = 3;
      if (v13 != 1)
LABEL_22:
        v14 = 0;
      else
        v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_22E54B3A4(a1[1], v14);
      break;
    case 6:
      if ((a2 & 7) == 6)
        v15 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      else
        v15 = 0;
      sub_22F082370((llvm::raw_ostream *)a1, v15, a3);
      break;
    case 5:
      v8 = (llvm::raw_ostream *)a1[1];
      v9 = (_WORD *)*((_QWORD *)v8 + 4);
      if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 30307;
        *((_QWORD *)v8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v8, "cv");
      }
      if ((v5 - 3) > 2)
        v10 = 0;
      else
        v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_22F07817C((uint64_t)a1, v10);
      break;
  }
}

uint64_t sub_22F0843EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  result = sub_22F07DB5C((uint64_t *)a1, a2 & 0xFFFFFFFFFFFFFFF8);
  if ((result & 1) == 0)
  {
    v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10);
    result = sub_22F07DA88(a1, v12);
    if ((result & 1) == 0)
    {
      v13 = *(_DWORD *)(v10 + 28);
      if ((v13 & 0x7F) == 0x20)
      {
        sub_22F08379C(a1, *(_DWORD *)(v10 + 64) & 0xFFFFF, *(_DWORD *)(v10 + 64) >> 20);
      }
      else
      {
        if ((v13 & 0x7E) == 0x1A)
        {
          v14 = (uint64_t *)a1;
          v15 = a2;
        }
        else
        {
          v15 = a2 & 7 | *(_QWORD *)(v10 + 48);
          v14 = (uint64_t *)a1;
        }
        sub_22F0844F0(v14, v15, a3, a4, a5);
      }
      v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10);
      v16 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = v16 + 1;
      result = sub_22F087EB4(a1 + 232, &v17);
      *(_DWORD *)(result + 8) = v16;
    }
  }
  return result;
}

void sub_22F0844F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::raw_ostream *v10;
  _WORD *v11;

  if ((*(_WORD *)(a4 + 8) & 0x7F) == 0x10 && sub_22F07DECC(*a1, a4 - 48))
  {
    v10 = (llvm::raw_ostream *)a1[1];
    v11 = (_WORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 29779;
      *((_QWORD *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, "St");
    }
  }
  sub_22F08459C(a1, a2, a3, a4, a5);
}

void sub_22F08459C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  std::string *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  llvm::raw_ostream *v21;
  __int16 *v22;
  const char *v23;
  unint64_t v24;
  int v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  char *v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  unint64_t v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  char *v52;
  char v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  unint64_t v56;
  llvm::raw_ostream *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  llvm::raw_ostream *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t (*v75)(_QWORD, unint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  llvm::raw_ostream *v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  llvm::raw_ostream *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  _DWORD *v92;
  size_t v93;
  unsigned int v94;
  __int16 v95;
  char *v96;
  const void *p_p;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  BOOL v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  llvm::raw_ostream *v110;
  _BYTE *v111;
  llvm::raw_ostream *v112;
  _WORD *v113;
  llvm::raw_ostream *v114;
  _BYTE *v115;
  uint64_t (*v116)(_QWORD, unint64_t);
  uint64_t v117;
  llvm::raw_ostream *v118;
  _BYTE *v119;
  void *__p;
  size_t v121;
  char v122;
  void *v123;
  __int128 v124;
  _WORD v125[25];
  char v126;
  uint64_t v127;

  v6 = a2;
  v127 = *MEMORY[0x24BDAC8D0];
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  if (a4 && v8)
  {
    v10 = *(_WORD *)(a4 + 8) & 0x7F;
    if ((v10 == 83 || v10 == 16) && sub_22EFB948C(a2 & 0xFFFFFFFFFFFFFFF8) >= 3)
    {
      v12 = (std::string *)sub_22EFB9D84(v8);
      if (v12)
      {
        v13 = sub_22EC6212C(v12);
        sub_22F086D2C((uint64_t)a1, (uint64_t)v13, v14);
      }
    }
  }
  v15 = v9 & 7;
  if (v15 == 7)
  {
    v16 = *(_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= 3)
      v16 = 3;
    v15 = v16 | 8;
  }
  v17 = -1;
  switch(v15)
  {
    case 0:
      if ((v9 & 7) != 0)
        v24 = 0;
      else
        v24 = v9 & 0xFFFFFFFFFFFFFFF8;
      v25 = *(_DWORD *)(v8 + 28) & 0x7F;
      if (v8 && v25 == 61)
      {
        v26 = (llvm::raw_ostream *)a1[1];
        v27 = (_WORD *)*((_QWORD *)v26 + 4);
        if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 1uLL)
        {
          *v27 = 17220;
          *((_QWORD *)v26 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v26, "DC");
        }
        v28 = *(unsigned int *)(v8 + 100);
        if ((_DWORD)v28)
        {
          v29 = (uint64_t *)(v8 + 104);
          v30 = 8 * v28;
          do
          {
            v31 = *v29++;
            v32 = *(_QWORD *)(v31 + 40);
            if ((v32 & 7) != 0)
              v33 = 0;
            else
              v33 = v32 & 0xFFFFFFFFFFFFFFF8;
            sub_22E54B3A4(a1[1], v33);
            v30 -= 8;
          }
          while (v30);
        }
        v34 = (llvm::raw_ostream *)a1[1];
        v35 = (char *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          v36 = 69;
LABEL_48:
          *v35 = v36;
          goto LABEL_185;
        }
LABEL_94:
        llvm::raw_ostream::write(v34);
        goto LABEL_185;
      }
      if (v8 && v25 == 69)
      {
        v123 = v125;
        v124 = xmmword_22F4A5A40;
        sub_22F242C48((uint64_t)&__p, (uint64_t)&v123);
        (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)*a1 + 136))(*a1, v8, &__p);
        v63 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        llvm::raw_ostream::write(v63, (const char *)v123);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
        v64 = v123;
        if (v123 == v125)
          return;
        goto LABEL_206;
      }
      if (v8 && v25 == 72)
      {
        v44 = (llvm::raw_ostream *)a1[1];
        v45 = (_WORD *)*((_QWORD *)v44 + 4);
        if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
        {
          *v45 = 16724;
          *((_QWORD *)v44 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v44, "TA");
        }
        v46 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v46 + 8) & 0xF) != 0)
          v46 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v8 + 48));
        sub_22F0854CC((uint64_t)a1, v46 & 0xFFFFFFFFFFFFFFF0, v8 + 64, 1, 0);
        return;
      }
      if (v24)
      {
        if (sub_22F086BA4(*a1, v8) && !*((_BYTE *)a1 + 280))
        {
          v54 = (llvm::raw_ostream *)a1[1];
          v55 = (_BYTE *)*((_QWORD *)v54 + 4);
          if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
          {
            llvm::raw_ostream::write(v54);
          }
          else
          {
            *((_QWORD *)v54 + 4) = v55 + 1;
            *v55 = 76;
          }
        }
        if (v8 && (*(_DWORD *)(v8 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          v83 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (!v83 || *(unsigned __int8 *)(v83 + 16) - 27 <= 0xFFFFFFFD)
            v83 = sub_22F10CF48(v83);
          v84 = *(_QWORD *)(v83 + 16);
          v85 = sub_22E462B18(v8);
          if ((v6 & 7) == 1 && v85)
          {
            v86 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v87 = (uint64_t)v86;
            v88 = (void *)*((_QWORD *)v86 + 4);
            if (*((_QWORD *)v86 + 3) - (_QWORD)v88 <= 0xEuLL)
            {
              v89 = "__device_stub__";
LABEL_181:
              v87 = llvm::raw_ostream::write(v86, v89);
              v91 = *(void **)(v87 + 32);
              goto LABEL_182;
            }
            qmemcpy(v88, "__device_stub__", 15);
            v91 = (void *)(*((_QWORD *)v86 + 4) + 15);
            goto LABEL_221;
          }
          if ((v84 & 0xF80000) == 0x400000)
          {
            v86 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v87 = (uint64_t)v86;
            v90 = *((_QWORD *)v86 + 4);
            if ((unint64_t)(*((_QWORD *)v86 + 3) - v90) <= 0xB)
            {
              v89 = "__regcall3__";
              goto LABEL_181;
            }
            *(_DWORD *)(v90 + 8) = 1600074604;
            *(_QWORD *)v90 = *(_QWORD *)"__regcall3__";
            v91 = (void *)(*((_QWORD *)v86 + 4) + 12);
LABEL_221:
            *(_QWORD *)(v87 + 32) = v91;
LABEL_182:
            v92 = *(_DWORD **)(v24 + 16);
            v94 = *v92;
            v23 = (const char *)(v92 + 4);
            v93 = v94;
            if ((unint64_t)v94 <= *(_QWORD *)(v87 + 24) - (_QWORD)v91)
            {
              if (v93)
              {
                memcpy(v91, v23, v93);
                *(_QWORD *)(v87 + 32) += v93;
              }
            }
            else
            {
              v21 = (llvm::raw_ostream *)v87;
LABEL_32:
              llvm::raw_ostream::write(v21, v23);
            }
            goto LABEL_185;
          }
        }
        sub_22E54B3A4(a1[1], v24);
        goto LABEL_185;
      }
      if (v8 && v25 == 16)
      {
        v56 = *(_QWORD *)(v8 + 40);
        if (v56 < 8 || (v56 & 7) != 0)
        {
          v57 = (llvm::raw_ostream *)a1[1];
          v58 = (void *)*((_QWORD *)v57 + 4);
          if (*((_QWORD *)v57 + 3) - (_QWORD)v58 > 0xDuLL)
          {
            qmemcpy(v58, "12_GLOBAL__N_1", 14);
            *((_QWORD *)v57 + 4) += 14;
          }
          else
          {
            llvm::raw_ostream::write(v57, "12_GLOBAL__N_1");
          }
          return;
        }
      }
      else
      {
        if (v8 && (v25 - 67) >= 0xFFFFFFF9)
        {
          v59 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v60 = sub_22EFC4258(v59);
          if (v60)
          {
            v61 = *(_QWORD *)(v60 + 40);
            if ((v61 & 7) != 0)
              v62 = 0;
            else
              v62 = v61 & 0xFFFFFFFFFFFFFFF8;
            sub_22E54B3A4(a1[1], v62);
          }
          return;
        }
        if ((v25 - 19) < 5)
          return;
      }
      v71 = *(_QWORD *)(v8 + 120);
      if ((v71 & 4) == 0)
      {
        v72 = v71 & 0xFFFFFFFFFFFFFFF8;
        if (v72)
        {
          v73 = *(_QWORD *)(v72 + 40);
          if ((v73 & 7) != 0)
            v74 = 0;
          else
            v74 = v73 & 0xFFFFFFFFFFFFFFF8;
          sub_22E54B3A4(a1[1], v74);
          sub_22F083BA0((uint64_t)a1, v8, 0);
          return;
        }
      }
      if (v8)
      {
        if ((v25 - 38) >= 0xFFFFFFFD)
        {
          v75 = (uint64_t (*)(_QWORD, unint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 296))(*a1);
          v76 = v75(*(_QWORD *)(*a1 + 8), v8);
          v77 = *(_QWORD *)(v8 + 128);
          if (v77)
          {
            if (((*(unsigned __int16 *)(v77 + 8) | (*(unsigned __int8 *)(v77 + 10) << 16)) & 0x100000) != 0
              && ((v76 & 0xFF00000000) != 0 && (_DWORD)v76
               || (v76 & 0xFF00000000) == 0 && (*(_DWORD *)(v77 + 112) & 0x7FFFFFFF) != 0))
            {
              v104 = sub_22F3B1CF4(v8);
              if (v104)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 250) & 0xFu) <= 6)
                {
                  v105 = v104;
                  v106 = (*(_DWORD *)(v104 + 28) & 0x7F) - 49;
                  if (v106 <= 0x11 && ((1 << v106) & 0x37807) != 0)
                  {
                    v107 = *(_QWORD *)(v104 + 40);
                    if ((v107 & 7) == 0 && (v107 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      sub_22E54B3A4(a1[1], v107 & 0xFFFFFFFFFFFFFFF8);
                      v123 = 0;
                      v108 = sub_22F087584(v105, 0, &v123);
                      if (v108)
                      {
                        if ((v108 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          if ((*(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
                            v109 = 0;
                          else
                            v109 = v108 & 0xFFFFFFFFFFFFFFF8;
                        }
                        else
                        {
                          v109 = 0;
                        }
                        sub_22F086C28(a1, v109, (uint64_t)v123);
                      }
                      v110 = (llvm::raw_ostream *)a1[1];
                      v111 = (_BYTE *)*((_QWORD *)v110 + 4);
                      if ((unint64_t)v111 >= *((_QWORD *)v110 + 3))
                      {
                        llvm::raw_ostream::write(v110);
                      }
                      else
                      {
                        *((_QWORD *)v110 + 4) = v111 + 1;
                        *v111 = 77;
                      }
                    }
                  }
                }
              }
              v112 = (llvm::raw_ostream *)a1[1];
              v113 = (_WORD *)*((_QWORD *)v112 + 4);
              if (*((_QWORD *)v112 + 3) - (_QWORD)v113 > 1uLL)
              {
                *v113 = 27733;
                *((_QWORD *)v112 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v112, "Ul");
              }
              sub_22F087674((uint64_t)a1, v8);
              v114 = (llvm::raw_ostream *)a1[1];
              v115 = (_BYTE *)*((_QWORD *)v114 + 4);
              if (*((_BYTE **)v114 + 3) == v115)
              {
                llvm::raw_ostream::write(v114, "E");
              }
              else
              {
                *v115 = 69;
                ++*((_QWORD *)v114 + 4);
              }
              v116 = (uint64_t (*)(_QWORD, unint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 296))(*a1);
              v117 = v116(*(_QWORD *)(*a1 + 8), v8);
              if ((v117 & 0xFF00000000) == 0)
                LODWORD(v117) = *(_DWORD *)(*(_QWORD *)(v8 + 128) + 112) & 0x7FFFFFFF;
              if (v117 >= 2)
                sub_22F087528((uint64_t)a1, (v117 - 2));
              v118 = (llvm::raw_ostream *)a1[1];
              v119 = (_BYTE *)*((_QWORD *)v118 + 4);
              if ((unint64_t)v119 >= *((_QWORD *)v118 + 3))
              {
                llvm::raw_ostream::write(v118);
              }
              else
              {
                *((_QWORD *)v118 + 4) = v119 + 1;
                *v119 = 95;
              }
              return;
            }
          }
        }
      }
      if (sub_22EFB948C(v8) >= 3)
      {
        v78 = *(_QWORD *)(*a1 + 8);
        v123 = (void *)v8;
        v79 = sub_22EF7402C(v78 + 1800, (uint64_t *)&v123);
        if (*(_QWORD *)(v78 + 1832) == v79)
          v80 = 1;
        else
          v80 = *(_DWORD *)(v79 + 8);
        v81 = (llvm::raw_ostream *)a1[1];
        v82 = (_WORD *)*((_QWORD *)v81 + 4);
        if (*((_QWORD *)v81 + 3) - (_QWORD)v82 > 1uLL)
        {
          *v82 = 29781;
          *((_QWORD *)v81 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v81, "Ut");
        }
        if (v80 >= 2)
          llvm::raw_ostream::operator<<();
        v34 = (llvm::raw_ostream *)a1[1];
        v35 = (char *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v35 < *((_QWORD *)v34 + 3))
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          v36 = 95;
          goto LABEL_48;
        }
        goto LABEL_94;
      }
      if (*((_BYTE *)a1 + 16))
      {
        v123 = v125;
        v125[0] = 24356;
        v124 = xmmword_22F45ABF0;
LABEL_193:
        v96 = &v126;
        v126 = 48;
        goto LABEL_194;
      }
      v100 = *a1 + 80;
      v101 = *(unsigned int *)(*a1 + 88);
      __p = (void *)v8;
      v121 = v101;
      sub_22F270EE0(v100, &__p, (uint64_t *)&v121, (uint64_t)&v123);
      v102 = *((unsigned int *)v123 + 2);
      v123 = v125;
      v125[0] = 24356;
      v124 = xmmword_22F45ABF0;
      if (!v102)
        goto LABEL_193;
      v96 = (char *)&v127;
      do
      {
        *--v96 = (v102 % 0xA) | 0x30;
        v103 = v102 > 9;
        v102 /= 0xAuLL;
      }
      while (v103);
LABEL_194:
      sub_22E3B4274(&__p, v96, (char *)&v127, (char *)&v127 - v96);
      if (v122 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v122 >= 0)
        v98 = v122 & 0x7F;
      else
        v98 = v121;
      v99 = v124;
      if (*((_QWORD *)&v124 + 1) >= (unint64_t)v124 + v98)
      {
        if (!v98)
          goto LABEL_203;
        goto LABEL_202;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v99 = v124;
      if (v98)
      {
LABEL_202:
        memcpy((char *)v123 + v99, p_p, v98);
        v99 = v124;
      }
LABEL_203:
      *(_QWORD *)&v124 = v99 + v98;
      if (v122 < 0)
        operator delete(__p);
      llvm::raw_ostream::operator<<();
      llvm::raw_ostream::write((llvm::raw_ostream *)a1[1], (const char *)v123);
      v64 = v123;
      if (v123 != v125)
LABEL_206:
        free(v64);
      return;
    case 3:
      if ((*(_BYTE *)(v8 + 87) & 0x20) == 0 || !*(_QWORD *)(v8 + 168))
      {
        v40 = 0;
        v41 = 0;
        goto LABEL_56;
      }
      v37 = *(_QWORD *)(v8 + 176);
      v38 = *(_WORD *)(v37 + 80) & 0x7F;
      v39 = -40;
      if (v38 > 0x46)
      {
        switch(v38)
        {
          case 'S':
            goto LABEL_133;
          case 'G':
            v39 = -56;
            goto LABEL_133;
          case 'Q':
            goto LABEL_133;
        }
      }
      else
      {
        if (v38 <= 0x18)
        {
          if (v38 == 16)
            goto LABEL_54;
          if (((1 << v38) & 0x1066) != 0)
            goto LABEL_133;
          if (v38 == 24)
          {
LABEL_54:
            v39 = -48;
LABEL_133:
            v65 = *(_QWORD *)(v37 + 72 + v39 + 16);
            v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
            if ((v65 & 4) != 0)
              v66 = (_QWORD *)*v66;
            if (v66)
              v41 = v66 - 8;
            else
              v41 = 0;
            v67 = *(_QWORD *)(v37 + 144);
            v68 = v67 & 6;
            v69 = v67 & 0xFFFFFFFFFFFFFFF8;
            if (v68 == 4 && v69 != 0)
            {
              v42 = *(_QWORD *)(v69 + 24);
              v40 = *(_QWORD *)(v69 + 16) & 0xFFFFFFFFFFFFFFF8;
LABEL_57:
              if (a1[3] == v8)
                v43 = *((_DWORD *)a1 + 8);
              else
                v43 = 0;
              v47 = (llvm::raw_ostream *)a1[1];
              v48 = (_BYTE *)*((_QWORD *)v47 + 4);
              if ((unint64_t)v48 >= *((_QWORD *)v47 + 3))
              {
                llvm::raw_ostream::write(v47);
                if (!v41)
                  goto LABEL_80;
              }
              else
              {
                *((_QWORD *)v47 + 4) = v48 + 1;
                *v48 = 67;
                if (!v41)
                  goto LABEL_80;
              }
              v49 = (llvm::raw_ostream *)a1[1];
              v50 = (_BYTE *)*((_QWORD *)v49 + 4);
              if ((unint64_t)v50 >= *((_QWORD *)v49 + 3))
              {
                llvm::raw_ostream::write(v49);
              }
              else
              {
                *((_QWORD *)v49 + 4) = v50 + 1;
                *v50 = 73;
              }
LABEL_80:
              if (v43 == 2)
              {
                v51 = (llvm::raw_ostream *)a1[1];
                v52 = (char *)*((_QWORD *)v51 + 4);
                if ((unint64_t)v52 < *((_QWORD *)v51 + 3))
                {
                  *((_QWORD *)v51 + 4) = v52 + 1;
                  v53 = 53;
                  goto LABEL_89;
                }
              }
              else if (v43 == 1)
              {
                v51 = (llvm::raw_ostream *)a1[1];
                v52 = (char *)*((_QWORD *)v51 + 4);
                if ((unint64_t)v52 < *((_QWORD *)v51 + 3))
                {
                  *((_QWORD *)v51 + 4) = v52 + 1;
                  v53 = 50;
                  goto LABEL_89;
                }
              }
              else
              {
                if (v43)
                  goto LABEL_90;
                v51 = (llvm::raw_ostream *)a1[1];
                v52 = (char *)*((_QWORD *)v51 + 4);
                if ((unint64_t)v52 < *((_QWORD *)v51 + 3))
                {
                  *((_QWORD *)v51 + 4) = v52 + 1;
                  v53 = 49;
LABEL_89:
                  *v52 = v53;
LABEL_90:
                  if (!v41)
                    goto LABEL_92;
                  goto LABEL_91;
                }
              }
              llvm::raw_ostream::write(v51);
              if (!v41)
              {
LABEL_92:
                if (v42)
                  sub_22F086C28(a1, v40, v42);
LABEL_185:
                sub_22F083BA0((uint64_t)a1, v8, a5);
                return;
              }
LABEL_91:
              sub_22F0776D8(a1, v41, 0);
              goto LABEL_92;
            }
            v40 = 0;
LABEL_56:
            v42 = 0;
            goto LABEL_57;
          }
        }
        if (v38 == 70)
        {
LABEL_131:
          v39 = -64;
          goto LABEL_133;
        }
      }
      if (v38 - 52 < 6)
      {
        v39 = -72;
        goto LABEL_133;
      }
      if (v38 - 33 < 5)
        goto LABEL_131;
      goto LABEL_54;
    case 4:
      if (a1[3] == v8)
      {
        switch(*((_DWORD *)a1 + 8))
        {
          case 0:
            v21 = (llvm::raw_ostream *)a1[1];
            v22 = (__int16 *)*((_QWORD *)v21 + 4);
            if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
            {
              v23 = "D0";
              goto LABEL_32;
            }
            v95 = 12356;
            break;
          case 1:
            goto LABEL_30;
          case 2:
            v21 = (llvm::raw_ostream *)a1[1];
            v22 = (__int16 *)*((_QWORD *)v21 + 4);
            if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
            {
              v23 = "D2";
              goto LABEL_32;
            }
            v95 = 12868;
            break;
          case 3:
            v21 = (llvm::raw_ostream *)a1[1];
            v22 = (__int16 *)*((_QWORD *)v21 + 4);
            if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
            {
              v23 = "D5";
              goto LABEL_32;
            }
            v95 = 13636;
            break;
          default:
            goto LABEL_185;
        }
      }
      else
      {
LABEL_30:
        v21 = (llvm::raw_ostream *)a1[1];
        v22 = (__int16 *)*((_QWORD *)v21 + 4);
        if (*((_QWORD *)v21 + 3) - (_QWORD)v22 <= 1uLL)
        {
          v23 = "D1";
          goto LABEL_32;
        }
        v95 = 12612;
      }
      *v22 = v95;
      *((_QWORD *)v21 + 4) += 2;
      goto LABEL_185;
    case 5:
    case 9:
      goto LABEL_16;
    case 6:
      if (v8)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v18)
          v19 = *(_BYTE *)(v18 + 16) == 26;
        else
          v19 = 0;
        if (v19
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v18 = sub_22F10CF48(v18)) != 0)
        {
          v17 = (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38);
        }
        else
        {
          v17 = 0;
        }
        if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8) + 80) & 0xE000) == 0x4000)
            v20 = 0;
          else
            v20 = (*(_QWORD *)(v8 + 40) & 7) != 6
               || (*(_DWORD *)(*(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF8) - 5) < 0xFFFFFFFC;
          v17 += v20;
        }
      }
      else
      {
        v17 = -1;
      }
LABEL_16:
      sub_22F084264(a1, v9, v17);
      goto LABEL_185;
    default:
      return;
  }
}

void sub_22F0854CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;
  BOOL v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  BOOL v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  _WORD *v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  llvm::APFloatBase *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::raw_ostream *v55;
  _WORD *v56;
  unsigned int v57;
  llvm::APInt *v58;
  unsigned int v59;
  unint64_t v60;
  llvm::raw_ostream *v61;
  _WORD *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  char v67;
  unsigned int i;
  unsigned int v69;
  llvm::raw_ostream *v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  llvm::raw_ostream *v78;
  _WORD *v79;
  char v80;
  llvm::raw_ostream *v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  llvm::raw_ostream *v86;
  _BYTE *v87;
  int v88;
  llvm::raw_ostream *v89;
  _BYTE *v90;
  llvm::raw_ostream *v91;
  __int16 *v92;
  const char *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  llvm::raw_ostream *v97;
  uint64_t v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  _BYTE *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  llvm::raw_ostream *v107;
  _BYTE *v108;
  int v109;
  llvm::raw_ostream *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  llvm::raw_ostream *v114;
  _BYTE *v115;
  unint64_t v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t **v125;
  unint64_t v126;
  char v127;
  llvm::raw_ostream *v128;
  _BYTE *v129;
  uint64_t *v130;
  uint64_t v131;
  llvm::raw_ostream *v132;
  _WORD *v133;
  llvm::raw_ostream *v134;
  _WORD *v135;
  llvm::raw_ostream *v136;
  _WORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  llvm::raw_ostream *v143;
  _WORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t **v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  llvm::raw_ostream *v154;
  _BYTE *v155;
  llvm::raw_ostream *v156;
  uint64_t v157;
  llvm::raw_ostream *v158;
  _WORD *v159;
  llvm::raw_ostream *v160;
  _QWORD *v161;
  llvm::raw_ostream *v162;
  _WORD *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  llvm::raw_ostream *v167;
  _BYTE *v168;
  llvm::raw_ostream *v169;
  _BYTE *v170;
  llvm::raw_ostream *v171;
  _BYTE *v172;
  llvm::raw_ostream *v173;
  _BYTE *v174;
  llvm::raw_ostream *v175;
  _WORD *v176;
  llvm::raw_ostream *v177;
  _BYTE *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int v190;
  unint64_t v191;
  llvm::raw_ostream *v192;
  _BYTE *v193;
  int v194;
  _QWORD *v195;
  unsigned int v196;
  BOOL v197;
  uint64_t v198;
  llvm::raw_ostream *v199;
  _BYTE *v200;
  uint64_t v201;
  __int16 v202;
  llvm::raw_ostream *v203;
  _WORD *v204;
  BOOL v205;
  llvm::raw_ostream *v206;
  _BYTE *v207;
  llvm::raw_ostream *v208;
  _BYTE *v209;
  llvm::raw_ostream *v210;
  _BYTE *v211;
  llvm::raw_ostream *v212;
  _WORD *v213;
  llvm::raw_ostream *v214;
  _DWORD *v215;
  uint64_t v216;
  void *v217[2];
  _QWORD v218[18];

  v218[16] = *MEMORY[0x24BDAC8D0];
  v216 = 0;
  v9 = sub_22EF67F34(*(_QWORD *)(*(_QWORD *)a1 + 8), a2, &v216);
  v10 = v9;
  switch(*(_DWORD *)a3)
  {
    case 0:
    case 1:
      goto LABEL_2;
    case 2:
      sub_22F082234(a1, v9, (llvm::APInt *)(a3 + 8));
      return;
    case 3:
      sub_22F082E44((llvm::raw_ostream **)a1, v9, a3 + 8);
      return;
    case 4:
      sub_22F082EE8(*(_QWORD *)(*(_QWORD *)a1 + 16));
      return;
    case 5:
      v20 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if (v20)
        v21 = *(_BYTE *)(v20 + 16) == 12;
      else
        v21 = 0;
      if (!v21)
        v20 = sub_22F10CF48(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (a4)
      {
        v22 = *(llvm::raw_ostream **)(a1 + 8);
        v23 = (_BYTE *)*((_QWORD *)v22 + 4);
        if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
        {
          llvm::raw_ostream::write(v22);
        }
        else
        {
          *((_QWORD *)v22 + 4) = v23 + 1;
          *v23 = 88;
        }
      }
      v55 = *(llvm::raw_ostream **)(a1 + 8);
      v56 = (_WORD *)*((_QWORD *)v55 + 4);
      if (*((_QWORD *)v55 + 3) - (_QWORD)v56 > 1uLL)
      {
        *v56 = 27764;
        *((_QWORD *)v55 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v55, "tl");
      }
      sub_22F07817C(a1, v10);
      v57 = *(_DWORD *)(a3 + 16);
      if (v57 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a3 + 8)) != v57)
          goto LABEL_108;
      }
      else if (*(_QWORD *)(a3 + 8))
      {
        goto LABEL_108;
      }
      v58 = (llvm::APInt *)(a3 + 24);
      v59 = *(_DWORD *)(a3 + 32);
      if (v59 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a3 + 24)) == v59)
          goto LABEL_111;
      }
      else if (!*(_QWORD *)v58)
      {
        goto LABEL_125;
      }
LABEL_108:
      sub_22F082234(a1, *(_QWORD *)(v20 + 32), (llvm::APInt *)(a3 + 8));
      v59 = *(_DWORD *)(a3 + 32);
      v58 = (llvm::APInt *)(a3 + 24);
      if (v59 <= 0x40)
      {
        if (!*(_QWORD *)v58)
          goto LABEL_125;
        goto LABEL_112;
      }
LABEL_111:
      if (llvm::APInt::countLeadingZerosSlowCase(v58) == v59)
        goto LABEL_125;
LABEL_112:
      sub_22F082234(a1, *(_QWORD *)(v20 + 32), v58);
      goto LABEL_125;
    case 6:
      v13 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if (v13)
        v14 = *(_BYTE *)(v13 + 16) == 12;
      else
        v14 = 0;
      if (!v14)
        v13 = sub_22F10CF48(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (a4)
      {
        v15 = *(llvm::raw_ostream **)(a1 + 8);
        v16 = (_BYTE *)*((_QWORD *)v15 + 4);
        if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
        {
          llvm::raw_ostream::write(v15);
        }
        else
        {
          *((_QWORD *)v15 + 4) = v16 + 1;
          *v16 = 88;
        }
      }
      v44 = *(llvm::raw_ostream **)(a1 + 8);
      v45 = (_WORD *)*((_QWORD *)v44 + 4);
      if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
      {
        *v45 = 27764;
        *((_QWORD *)v44 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v44, "tl");
      }
      v46 = (llvm::APFloatBase *)sub_22F07817C(a1, v10);
      v47 = *(_QWORD *)(a3 + 16);
      v48 = llvm::APFloatBase::PPCDoubleDouble(v46);
      v49 = v48;
      v50 = *(_QWORD *)(a3 + 24);
      if (v48 != v47)
        v50 = a3 + 8;
      if ((*(_BYTE *)(v50 + 28) & 0xF) != 3)
        goto LABEL_66;
      v51 = a3 + 40;
      v52 = *(_QWORD *)(a3 + 48);
      v53 = *(_QWORD *)(a3 + 56);
      if (v48 == v52)
        v51 = *(_QWORD *)(a3 + 56);
      if ((*(_BYTE *)(v51 + 28) & 0xF) != 3)
      {
LABEL_66:
        sub_22F082E44((llvm::raw_ostream **)a1, *(_QWORD *)(v13 + 32), a3 + 8);
        v52 = *(_QWORD *)(a3 + 48);
        v53 = *(_QWORD *)(a3 + 56);
      }
      if (v49 == v52)
        v54 = v53;
      else
        v54 = a3 + 40;
      if ((*(_BYTE *)(v54 + 28) & 0xF) != 3)
        sub_22F082E44((llvm::raw_ostream **)a1, *(_QWORD *)(v13 + 32), a3 + 40);
      goto LABEL_125;
    case 7:
      v27 = *(_BYTE *)(a3 + 52);
      if ((v27 & 1) != 0)
        goto LABEL_40;
      v28 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)v217 = v28;
      if ((~(_BYTE)v28 & 3) != 0)
      {
        if ((unint64_t)v28 > 3)
          goto LABEL_35;
      }
      else
      {
        if ((v28 & 4) != 0)
          v205 = (unint64_t)v28 > 7;
        else
          v205 = (v28 & 0x7FFFFFFF8) != 0;
        if (v205)
        {
LABEL_35:
          v29 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          v30 = *(_DWORD *)(a3 + 48);
          if (v30 == -1)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFE) == 0x28)
            {
              if (a4)
              {
                v102 = *(llvm::raw_ostream **)(a1 + 8);
                v103 = (_BYTE *)*((_QWORD *)v102 + 4);
                if ((unint64_t)v103 >= *((_QWORD *)v102 + 3))
                {
                  llvm::raw_ostream::write(v102);
                }
                else
                {
                  *((_QWORD *)v102 + 4) = v103 + 1;
                  *v103 = 88;
                }
              }
              v156 = *(llvm::raw_ostream **)(a1 + 8);
              v157 = *((_QWORD *)v156 + 4);
              if ((unint64_t)(*((_QWORD *)v156 + 3) - v157) > 4)
              {
                *(_BYTE *)(v157 + 4) = 80;
                *(_DWORD *)v157 = 1986225508;
                *((_QWORD *)v156 + 4) += 5;
              }
              else
              {
                llvm::raw_ostream::write(v156, "decvP");
              }
              v10 = sub_22F10ACF8(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
            }
            else
            {
              if (a4)
              {
                v114 = *(llvm::raw_ostream **)(a1 + 8);
                v115 = (_BYTE *)*((_QWORD *)v114 + 4);
                if ((unint64_t)v115 >= *((_QWORD *)v114 + 3))
                {
                  llvm::raw_ostream::write(v114);
                }
                else
                {
                  *((_QWORD *)v114 + 4) = v115 + 1;
                  *v115 = 88;
                }
              }
              v158 = *(llvm::raw_ostream **)(a1 + 8);
              v159 = (_WORD *)*((_QWORD *)v158 + 4);
              if (*((_QWORD *)v158 + 3) - (_QWORD)v159 > 1uLL)
              {
                *v159 = 30307;
                *((_QWORD *)v158 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v158, "cv");
              }
            }
            sub_22F07817C(a1, v10);
            v160 = *(llvm::raw_ostream **)(a1 + 8);
            v161 = (_QWORD *)*((_QWORD *)v160 + 4);
            if (*((_QWORD *)v160 + 3) - (_QWORD)v161 > 7uLL)
            {
              v88 = 0;
              *v161 = 0x6461635076636C70;
              *((_QWORD *)v160 + 4) += 8;
            }
            else
            {
              llvm::raw_ostream::write(v160, "plcvPcad");
              v88 = 0;
            }
            v142 = 1;
            goto LABEL_257;
          }
          if (v27 & 2 | v30)
          {
            if (a4)
            {
              v31 = *(llvm::raw_ostream **)(a1 + 8);
              v32 = (_BYTE *)*((_QWORD *)v31 + 4);
              if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
              {
                llvm::raw_ostream::write(v31);
              }
              else
              {
                *((_QWORD *)v31 + 4) = v32 + 1;
                *v32 = 88;
              }
            }
            v130 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
            v131 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
            if (a5 && sub_22F10DFD8(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0)))
            {
              v132 = *(llvm::raw_ostream **)(a1 + 8);
              v133 = (_WORD *)*((_QWORD *)v132 + 4);
              if (*((_QWORD *)v132 + 3) - (_QWORD)v133 > 1uLL)
              {
                *v133 = 30307;
                *((_QWORD *)v132 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v132, "cv");
              }
              sub_22F07817C(a1, v10);
              v131 = *v130;
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
            {
              v134 = *(llvm::raw_ostream **)(a1 + 8);
              v135 = (_WORD *)*((_QWORD *)v134 + 4);
              if (*((_QWORD *)v134 + 3) - (_QWORD)v135 > 1uLL)
              {
                *v135 = 25697;
                *((_QWORD *)v134 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v134, "ad");
              }
            }
            v136 = *(llvm::raw_ostream **)(a1 + 8);
            v137 = (_WORD *)*((_QWORD *)v136 + 4);
            if (*((_QWORD *)v136 + 3) - (_QWORD)v137 > 1uLL)
            {
              *v137 = 28531;
              *((_QWORD *)v136 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v136, "so");
            }
            v138 = *v130;
            if (sub_22F10DFD8(*v130))
            {
              v139 = sub_22F087468(v29, a3);
              v140 = *(_QWORD *)(v139 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v140 + 8) & 0xF) != 0)
                v140 = (unint64_t)sub_22F10D2BC(v139);
              v141 = v140 & 0xFFFFFFFFFFFFFFF0;
            }
            else
            {
              v141 = sub_22F10ACF8(v138);
            }
            sub_22F07817C(a1, v141);
            v88 = 0;
            v142 = 2;
            goto LABEL_257;
          }
          v104 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
          if (!a5
            || (v105 = sub_22F10ACF8(*v104),
                v106 = sub_22F087468(v29, a3),
                (*(_QWORD *)((v105 & 0xFFFFFFFFFFFFFFF0) + 8) | v105 & 7) == (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFF0)
                                                                                          + 8) | v106 & 7))
            || ((*(unsigned __int8 *)(*(_QWORD *)(v29 + 2000) + 250) << 16) & 0xE0000u) <= 0x50000)
          {
            v109 = 0;
            v88 = 1;
          }
          else
          {
            if (a4)
            {
              v107 = *(llvm::raw_ostream **)(a1 + 8);
              v108 = (_BYTE *)*((_QWORD *)v107 + 4);
              if ((unint64_t)v108 >= *((_QWORD *)v107 + 3))
              {
                llvm::raw_ostream::write(v107);
              }
              else
              {
                *((_QWORD *)v107 + 4) = v108 + 1;
                *v108 = 88;
              }
            }
            v203 = *(llvm::raw_ostream **)(a1 + 8);
            v204 = (_WORD *)*((_QWORD *)v203 + 4);
            if (*((_QWORD *)v203 + 3) - (_QWORD)v204 > 1uLL)
            {
              *v204 = 30307;
              *((_QWORD *)v203 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v203, "cv");
            }
            sub_22F07817C(a1, v10);
            v88 = 0;
            v109 = 1;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
          {
            if (((v109 | a4 ^ 1) & 1) == 0)
            {
              v110 = *(llvm::raw_ostream **)(a1 + 8);
              v111 = (_BYTE *)*((_QWORD *)v110 + 4);
              if ((unint64_t)v111 >= *((_QWORD *)v110 + 3))
              {
                llvm::raw_ostream::write(v110);
              }
              else
              {
                *((_QWORD *)v110 + 4) = v111 + 1;
                *v111 = 88;
              }
            }
            v162 = *(llvm::raw_ostream **)(a1 + 8);
            v163 = (_WORD *)*((_QWORD *)v162 + 4);
            if (*((_QWORD *)v162 + 3) - (_QWORD)v163 > 1uLL)
            {
              v88 = 0;
              v142 = 0;
              *v163 = 25697;
              *((_QWORD *)v162 + 4) += 2;
LABEL_257:
              v164 = sub_22EF52AD4((unint64_t *)v217);
              v165 = (unint64_t)v217[0] & 0xFFFFFFFFFFFFFFFCLL;
              v166 = (uint64_t)v217[0] & 3;
              if (((uint64_t)v217[0] & 3) != 0 || !v165)
              {
                if (v166 == 1 && v165)
                {
                  if (v88 && a4)
                  {
                    v169 = *(llvm::raw_ostream **)(a1 + 8);
                    v170 = (_BYTE *)*((_QWORD *)v169 + 4);
                    if ((unint64_t)v170 >= *((_QWORD *)v169 + 3))
                    {
                      llvm::raw_ostream::write(v169);
                    }
                    else
                    {
                      *((_QWORD *)v169 + 4) = v170 + 1;
                      *v170 = 88;
                    }
                  }
                  sub_22F07E3A4(a1, v165, 0xFFFFFFFFLL, 0);
                }
                else
                {
                  if (v166 != 2)
                    v165 = 0;
                  if (v88 && a4)
                  {
                    v171 = *(llvm::raw_ostream **)(a1 + 8);
                    v172 = (_BYTE *)*((_QWORD *)v171 + 4);
                    if ((unint64_t)v172 >= *((_QWORD *)v171 + 3))
                    {
                      llvm::raw_ostream::write(v171);
                    }
                    else
                    {
                      *((_QWORD *)v171 + 4) = v172 + 1;
                      *v172 = 88;
                    }
                  }
                  v175 = *(llvm::raw_ostream **)(a1 + 8);
                  v176 = (_WORD *)*((_QWORD *)v175 + 4);
                  if (*((_QWORD *)v175 + 3) - (_QWORD)v176 > 1uLL)
                  {
                    *v176 = 26996;
                    *((_QWORD *)v175 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v175, "ti");
                  }
                  sub_22F07817C(a1, v165 & 0xFFFFFFFFFFFFFFF0);
                }
                v88 = 0;
              }
              else
              {
                v167 = *(llvm::raw_ostream **)(a1 + 8);
                v168 = (_BYTE *)*((_QWORD *)v167 + 4);
                if ((unint64_t)v168 >= *((_QWORD *)v167 + 3))
                {
                  llvm::raw_ostream::write(v167);
                }
                else
                {
                  *((_QWORD *)v167 + 4) = v168 + 1;
                  *v168 = 76;
                }
                sub_22F07715C(a1, v165, 0);
                v173 = *(llvm::raw_ostream **)(a1 + 8);
                v174 = (_BYTE *)*((_QWORD *)v173 + 4);
                if ((unint64_t)v174 >= *((_QWORD *)v173 + 3))
                {
                  llvm::raw_ostream::write(v173);
                }
                else
                {
                  *((_QWORD *)v173 + 4) = v174 + 1;
                  *v174 = 69;
                }
              }
              if (v142 != 2)
              {
                if (v142 != 1)
                  goto LABEL_130;
                v177 = *(llvm::raw_ostream **)(a1 + 8);
                v178 = (_BYTE *)*((_QWORD *)v177 + 4);
                if ((unint64_t)v178 >= *((_QWORD *)v177 + 3))
                {
                  llvm::raw_ostream::write(v177);
                }
                else
                {
                  *((_QWORD *)v177 + 4) = v178 + 1;
                  *v178 = 76;
                }
                v201 = sub_22EF5B0AC(v29, *(_DWORD *)(*(_QWORD *)(v29 + 15088) + *(_QWORD *)(**(_QWORD **)(v29 + 15088) - 24) + 120));
                sub_22F07817C(a1, v201);
                sub_22F087528(a1, *(_QWORD *)(a3 + 24));
                goto LABEL_333;
              }
              v179 = *(_QWORD *)(a3 + 24);
              if (v179)
                sub_22F087528(a1, v179);
              v180 = (*(unsigned __int8 *)(a3 + 52) >> 1) & 1;
              v181 = *(unsigned int *)(a3 + 48);
              v182 = (unint64_t *)(a3 + 56);
              if ((v181 - 3) <= 0xFFFFFFFB)
              {
                v182 = (unint64_t *)*v182;
              }
              else if (!(_DWORD)v181)
              {
LABEL_328:
                if ((v180 & 1) != 0)
                {
                  v199 = *(llvm::raw_ostream **)(a1 + 8);
                  v200 = (_BYTE *)*((_QWORD *)v199 + 4);
                  if ((unint64_t)v200 >= *((_QWORD *)v199 + 3))
                  {
                    llvm::raw_ostream::write(v199);
                  }
                  else
                  {
                    *((_QWORD *)v199 + 4) = v200 + 1;
                    *v200 = 112;
                  }
                }
LABEL_333:
                v86 = *(llvm::raw_ostream **)(a1 + 8);
                v87 = (_BYTE *)*((_QWORD *)v86 + 4);
                if ((unint64_t)v87 < *((_QWORD *)v86 + 3))
                  goto LABEL_127;
                llvm::raw_ostream::write(v86);
                goto LABEL_130;
              }
              v183 = &v182[v181];
              while (1)
              {
                v184 = *v182;
                v185 = *(_QWORD *)(v164 & 0xFFFFFFFFFFFFFFF0);
                if (v185 && (*(_DWORD *)(v185 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
                {
                  v194 = *(_DWORD *)(v185 + 16);
                }
                else
                {
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
                    || (v198 = sub_22F10CF48(*(_QWORD *)(v164 & 0xFFFFFFFFFFFFFFF0))) == 0)
                  {
                    v187 = v184 & 0xFFFFFFFFFFFFFFF8;
                    if ((v184 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v187 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
                    {
                      v188 = *(_QWORD *)(v187 + 16);
                      v189 = v188 & 0xFFFFFFFFFFFFFFF8;
                      if ((v188 & 4) != 0)
                        v189 = *(_QWORD *)v189;
                      v190 = (*(_WORD *)(v189 + 8) & 0x7E) - 34;
                      if (v189)
                        v191 = v189 - 64;
                      else
                        v191 = 0;
                      if (v190 >= 4)
                        v191 = 0;
                      if ((*(_DWORD *)(v191 + 72) & 0xE000) == 0x4000)
                      {
                        v192 = *(llvm::raw_ostream **)(a1 + 8);
                        v193 = (_BYTE *)*((_QWORD *)v192 + 4);
                        if ((unint64_t)v193 >= *((_QWORD *)v192 + 3))
                        {
                          llvm::raw_ostream::write(v192);
                        }
                        else
                        {
                          *((_QWORD *)v192 + 4) = v193 + 1;
                          *v193 = 95;
                        }
                        if (sub_22EFC306C(v184 & 0xFFFFFFFFFFFFFFF8))
                        {
                          sub_22EFC306C(v184 & 0xFFFFFFFFFFFFFFF8);
                          llvm::raw_ostream::operator<<();
                        }
                      }
                      v164 = *(_QWORD *)(v187 + 48);
                    }
                    else
                    {
                      v164 = sub_22EF6477C(v29, v184 & 0xFFFFFFFFFFFFFFF8);
                    }
                    goto LABEL_315;
                  }
                  v185 = v198;
                  v194 = *(unsigned __int8 *)(v198 + 16);
                }
                if (v194 == 2)
                  break;
LABEL_325:
                v164 = *(_QWORD *)(v185 + 32);
LABEL_315:
                if (++v182 == v183)
                  goto LABEL_328;
              }
              v195 = (_QWORD *)(v185 + 40);
              v196 = *(_DWORD *)(v185 + 48);
              if (v196 >= 0x41)
              {
                if (v196 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v185 + 40)) > 0x40)
                {
                  v197 = 0;
                  goto LABEL_324;
                }
                v195 = *(_QWORD **)(v185 + 40);
              }
              v197 = *v195 == v184;
LABEL_324:
              LOBYTE(v180) = v180 | v197;
              goto LABEL_325;
            }
            llvm::raw_ostream::write(v162, "ad");
            v88 = 0;
          }
          v142 = 0;
          goto LABEL_257;
        }
      }
      if (*(_QWORD *)(a3 + 24))
      {
        v206 = *(llvm::raw_ostream **)(a1 + 8);
        v207 = (_BYTE *)*((_QWORD *)v206 + 4);
        if (*((_BYTE **)v206 + 3) == v207)
        {
          llvm::raw_ostream::write(v206, "L");
        }
        else
        {
          *v207 = 76;
          ++*((_QWORD *)v206 + 4);
        }
        sub_22F07817C(a1, v10);
        v208 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v209 = (_BYTE *)*((_QWORD *)v208 + 4);
        if ((unint64_t)v209 >= *((_QWORD *)v208 + 3))
        {
          llvm::raw_ostream::write(v208);
        }
        else
        {
          *((_QWORD *)v208 + 4) = v209 + 1;
          *v209 = 69;
        }
        v88 = 1;
        goto LABEL_130;
      }
      if (a4)
      {
        v210 = *(llvm::raw_ostream **)(a1 + 8);
        v211 = (_BYTE *)*((_QWORD *)v210 + 4);
        if ((unint64_t)v211 >= *((_QWORD *)v210 + 3))
        {
          llvm::raw_ostream::write(v210);
        }
        else
        {
          *((_QWORD *)v210 + 4) = v211 + 1;
          *v211 = 88;
        }
      }
      v212 = *(llvm::raw_ostream **)(a1 + 8);
      v213 = (_WORD *)*((_QWORD *)v212 + 4);
      if (*((_QWORD *)v212 + 3) - (_QWORD)v213 > 1uLL)
      {
        *v213 = 25458;
        *((_QWORD *)v212 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v212, "rc");
      }
      sub_22F07817C(a1, v10);
      v214 = *(llvm::raw_ostream **)(a1 + 8);
      v215 = (_DWORD *)*((_QWORD *)v214 + 4);
      if (*((_QWORD *)v214 + 3) - (_QWORD)v215 > 3uLL)
      {
        *v215 = 1160800588;
        *((_QWORD *)v214 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v214, "Li0E");
      }
      if (!a4)
        goto LABEL_129;
      goto LABEL_125;
    case 8:
      v35 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if (v35)
        v36 = *(unsigned __int8 *)(v35 + 16) - 57 > 0xFFFFFFFD;
      else
        v36 = 0;
      if (!v36)
        v35 = sub_22F10CF48(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (a4)
      {
        v37 = *(llvm::raw_ostream **)(a1 + 8);
        v38 = (_BYTE *)*((_QWORD *)v37 + 4);
        if ((unint64_t)v38 >= *((_QWORD *)v37 + 3))
        {
          llvm::raw_ostream::write(v37);
        }
        else
        {
          *((_QWORD *)v37 + 4) = v38 + 1;
          *v38 = 88;
        }
      }
      v70 = *(llvm::raw_ostream **)(a1 + 8);
      v71 = (_WORD *)*((_QWORD *)v70 + 4);
      if (*((_QWORD *)v70 + 3) - (_QWORD)v71 > 1uLL)
      {
        *v71 = 27764;
        *((_QWORD *)v70 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v70, "tl");
      }
      sub_22F07817C(a1, v10);
      v72 = *(unsigned int *)(a3 + 16);
      v73 = v72 + 1;
      v74 = 72 * v72 - 72;
      while (--v73)
      {
        sub_22F086EE8(*(_QWORD *)(v35 + 32), *(_QWORD *)(a3 + 8) + v74);
        v74 -= 72;
        if ((v75 & 1) == 0)
        {
          if ((_DWORD)v73)
          {
            v76 = 0;
            v77 = 72 * v73;
            do
            {
              sub_22F0854CC(a1, *(_QWORD *)(v35 + 32), *(_QWORD *)(a3 + 8) + v76, 0, 0);
              v76 += 72;
            }
            while (v77 != v76);
          }
          goto LABEL_125;
        }
      }
      goto LABEL_125;
    case 9:
      v24 = sub_22F10CEE8(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (a4)
      {
        v25 = *(llvm::raw_ostream **)(a1 + 8);
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
        {
          llvm::raw_ostream::write(v25);
        }
        else
        {
          *((_QWORD *)v25 + 4) = v26 + 1;
          *v26 = 88;
        }
      }
      v60 = v24 & 0xFFFFFFFFFFFFFFF0;
      v61 = *(llvm::raw_ostream **)(a1 + 8);
      v62 = (_WORD *)*((_QWORD *)v61 + 4);
      if (*((_QWORD *)v61 + 3) - (_QWORD)v62 > 1uLL)
      {
        *v62 = 27764;
        *((_QWORD *)v61 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v61, "tl");
      }
      sub_22F07817C(a1, v10);
      v63 = *(_DWORD *)(a3 + 16);
      v64 = *(_DWORD *)(a3 + 20);
      if (v63 == v64)
        goto LABEL_88;
      sub_22F086EE8(v60, *(_QWORD *)(a3 + 8) + 72 * v63);
      if (!v65)
        goto LABEL_91;
      v64 = *(_DWORD *)(a3 + 16);
LABEL_88:
      v66 = 72 * v64++ - 72;
      while (v66 != -72)
      {
        sub_22F086EE8(v60, *(_QWORD *)(a3 + 8) + v66);
        --v64;
        v66 -= 72;
        if ((v67 & 1) == 0)
        {
LABEL_91:
          if (v64)
          {
            for (i = 0; i != v64; ++i)
            {
              v69 = *(_DWORD *)(a3 + 16);
              if (i < v69)
                v69 = i;
              sub_22F0854CC(a1, v60, *(_QWORD *)(a3 + 8) + 72 * v69, 0, 0);
            }
          }
          goto LABEL_125;
        }
      }
      goto LABEL_125;
    case 0xA:
      v112 = sub_22F10C2A4(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
      if (v112)
      {
        if ((*(_DWORD *)(v112 + 28) & 0x7Fu) - 35 >= 3)
          v113 = 0;
        else
          v113 = v112;
      }
      else
      {
        v113 = 0;
      }
      v116 = sub_22EFC3B90(v113);
      v217[0] = v218;
      v217[1] = (void *)0x1000000000;
      sub_22F271D38((uint64_t)v217, v116, 0);
      v117 = v217[1];
      if (!LODWORD(v217[1]))
        goto LABEL_189;
      do
      {
        v118 = *((_QWORD *)v217[0] + v117 - 1);
        if ((*(_BYTE *)(v118 + 68) & 1) == 0 || *(_QWORD *)(v118 + 40))
        {
          v119 = *(_QWORD *)(v118 + 48);
          v120 = sub_22EFC306C(v118);
          sub_22F086EE8(v119, *(_QWORD *)(a3 + 8) + 72 * (*(_DWORD *)(a3 + 16) + v120));
          if (!v121)
            break;
          v117 = v217[1];
        }
        LODWORD(v217[1]) = --v117;
      }
      while (v117);
LABEL_189:
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v113 + 104) + 96), *(_QWORD *)(v113 + 104));
      v122 = *(_QWORD *)(v113 + 128);
      v123 = *(_QWORD *)(v122 + 24);
      if ((v123 & 1) != 0)
        v123 = sub_22EFCF510(v122);
      v124 = (uint64_t)(sub_22F24CD30(v113) - v123) / 24;
      if (!LODWORD(v217[1]))
      {
        v125 = (uint64_t **)(v123 + 24 * v124 - 8);
        while (v124)
        {
          v126 = *(_QWORD *)(**v125 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v126 + 8) & 0xF) != 0)
            v126 = (unint64_t)sub_22F10D2BC(**v125);
          sub_22F086EE8(v126 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a3 + 8) + 72 * (v124 - 1));
          v125 -= 3;
          --v124;
          if ((v127 & 1) == 0)
          {
            LODWORD(v124) = v124 + 1;
            break;
          }
        }
      }
      if (a4)
      {
        v128 = *(llvm::raw_ostream **)(a1 + 8);
        v129 = (_BYTE *)*((_QWORD *)v128 + 4);
        if ((unint64_t)v129 >= *((_QWORD *)v128 + 3))
        {
          llvm::raw_ostream::write(v128);
        }
        else
        {
          *((_QWORD *)v128 + 4) = v129 + 1;
          *v129 = 88;
        }
      }
      v143 = *(llvm::raw_ostream **)(a1 + 8);
      v144 = (_WORD *)*((_QWORD *)v143 + 4);
      if (*((_QWORD *)v143 + 3) - (_QWORD)v144 > 1uLL)
      {
        *v144 = 27764;
        *((_QWORD *)v143 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v143, "tl");
      }
      sub_22F07817C(a1, v10);
      if ((_DWORD)v124)
      {
        v145 = 0;
        v146 = 72 * v124;
        v147 = (uint64_t **)(v123 + 16);
        do
        {
          v148 = *(_QWORD *)(**v147 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v148 + 8) & 0xF) != 0)
            v148 = (unint64_t)sub_22F10D2BC(**v147);
          sub_22F0854CC(a1, v148 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a3 + 8) + v145, 0, 0);
          v145 += 72;
          v147 += 3;
        }
        while (v146 != v145);
      }
      if (LODWORD(v217[1]))
      {
        v149 = 0;
        v150 = 8 * LODWORD(v217[1]);
        do
        {
          v151 = *(_QWORD *)((char *)v217[0] + v149);
          if ((*(_BYTE *)(v151 + 68) & 1) == 0 || *(_QWORD *)(v151 + 40))
          {
            v152 = *(_QWORD *)(v151 + 48);
            v153 = sub_22EFC306C(v151);
            sub_22F0854CC(a1, v152, *(_QWORD *)(a3 + 8) + 72 * (*(_DWORD *)(a3 + 16) + v153), 0, 0);
          }
          v149 += 8;
        }
        while (v150 != v149);
      }
      v154 = *(llvm::raw_ostream **)(a1 + 8);
      v155 = (_BYTE *)*((_QWORD *)v154 + 4);
      if ((unint64_t)v155 >= *((_QWORD *)v154 + 3))
      {
        llvm::raw_ostream::write(v154);
      }
      else
      {
        *((_QWORD *)v154 + 4) = v155 + 1;
        *v155 = 69;
      }
      if (v217[0] != v218)
        free(v217[0]);
      goto LABEL_129;
    case 0xB:
      v39 = *(_QWORD *)(a3 + 8);
      if (!v39)
      {
LABEL_2:
        v11 = *(llvm::raw_ostream **)(a1 + 8);
        v12 = (_BYTE *)*((_QWORD *)v11 + 4);
        if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
        {
          llvm::raw_ostream::write(v11);
        }
        else
        {
          *((_QWORD *)v11 + 4) = v12 + 1;
          *v12 = 76;
        }
        sub_22F07817C(a1, v10);
        goto LABEL_132;
      }
      if (a4)
      {
        v40 = *(llvm::raw_ostream **)(a1 + 8);
        v41 = (_BYTE *)*((_QWORD *)v40 + 4);
        if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
        {
          llvm::raw_ostream::write(v40);
        }
        else
        {
          *((_QWORD *)v40 + 4) = v41 + 1;
          *v41 = 88;
        }
      }
      v78 = *(llvm::raw_ostream **)(a1 + 8);
      v79 = (_WORD *)*((_QWORD *)v78 + 4);
      if (*((_QWORD *)v78 + 3) - (_QWORD)v79 > 1uLL)
      {
        *v79 = 27764;
        *((_QWORD *)v78 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v78, "tl");
      }
      sub_22F07817C(a1, v10);
      sub_22F086EE8(v10, a3);
      if ((v80 & 1) == 0)
      {
        v81 = *(llvm::raw_ostream **)(a1 + 8);
        v82 = (_WORD *)*((_QWORD *)v81 + 4);
        if (*((_QWORD *)v81 + 3) - (_QWORD)v82 > 1uLL)
        {
          *v82 = 26980;
          *((_QWORD *)v81 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v81, "di");
        }
        v83 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
        if ((*(_DWORD *)(v83 + 28) & 0x7Fu) - 35 >= 3)
          v84 = 0;
        else
          v84 = v83;
        v85 = sub_22F08730C(*(_DWORD *)(v84 + 24), *(_QWORD *)(*(_QWORD *)a1 + 16), v39);
        if (v85)
          sub_22E54B3A4(*(_QWORD *)(a1 + 8), v85);
        sub_22F0854CC(a1, *(_QWORD *)(v39 + 48), *(_QWORD *)(a3 + 16), 0, 0);
      }
      goto LABEL_125;
    case 0xC:
      if (*(_QWORD *)(a3 + 8) <= 7uLL)
      {
LABEL_40:
        v33 = *(llvm::raw_ostream **)(a1 + 8);
        v34 = (_BYTE *)*((_QWORD *)v33 + 4);
        if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
        {
          llvm::raw_ostream::write(v33);
        }
        else
        {
          *((_QWORD *)v33 + 4) = v34 + 1;
          *v34 = 76;
        }
        sub_22F07817C(a1, v10);
        v42 = *(llvm::raw_ostream **)(a1 + 8);
        v43 = (_WORD *)*((_QWORD *)v42 + 4);
        if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 1uLL)
        {
          *v43 = 17712;
          *((_QWORD *)v42 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v42, "0E");
        }
        return;
      }
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if (a4)
      {
        v18 = *(llvm::raw_ostream **)(a1 + 8);
        v19 = (_BYTE *)*((_QWORD *)v18 + 4);
        if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
        {
          llvm::raw_ostream::write(v18);
        }
        else
        {
          *((_QWORD *)v18 + 4) = v19 + 1;
          *v19 = 88;
        }
      }
      if (*(_DWORD *)(a3 + 16))
      {
        v91 = *(llvm::raw_ostream **)(a1 + 8);
        v92 = (__int16 *)*((_QWORD *)v91 + 4);
        if (*((_QWORD *)v91 + 3) - (_QWORD)v92 <= 1uLL)
        {
          v93 = "mc";
LABEL_140:
          llvm::raw_ostream::write(v91, v93);
LABEL_141:
          sub_22F07817C(a1, v10);
          goto LABEL_152;
        }
        v202 = 25453;
        goto LABEL_338;
      }
      if (a5)
      {
        v94 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
        if (v94)
          v95 = *(_BYTE *)(v94 + 16) == 31;
        else
          v95 = 0;
        if (!v95)
          v94 = sub_22F10CF48(v94);
        v96 = *(_QWORD *)((*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) + 48);
        if ((*(_QWORD *)((*(_QWORD *)(v94 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v94 + 32) & 7) != (*(_QWORD *)((v96 & 0xFFFFFFFFFFFFFFF0) + 8) | v96 & 7)
          && ((*(unsigned __int8 *)(*(_QWORD *)(v17 + 2000) + 250) << 16) & 0xE0000u) > 0x50000)
        {
          v91 = *(llvm::raw_ostream **)(a1 + 8);
          v92 = (__int16 *)*((_QWORD *)v91 + 4);
          if (*((_QWORD *)v91 + 3) - (_QWORD)v92 <= 1uLL)
          {
            v93 = "cv";
            goto LABEL_140;
          }
          v202 = 30307;
LABEL_338:
          *v92 = v202;
          *((_QWORD *)v91 + 4) += 2;
          goto LABEL_141;
        }
      }
LABEL_152:
      v97 = *(llvm::raw_ostream **)(a1 + 8);
      v98 = *((_QWORD *)v97 + 4);
      if ((unint64_t)(*((_QWORD *)v97 + 3) - v98) > 2)
      {
        *(_BYTE *)(v98 + 2) = 76;
        *(_WORD *)v98 = 25697;
        *((_QWORD *)v97 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v97, "adL");
      }
      sub_22F07715C(a1, *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8, 0);
      v99 = *(llvm::raw_ostream **)(a1 + 8);
      v100 = (_BYTE *)*((_QWORD *)v99 + 4);
      if ((unint64_t)v100 >= *((_QWORD *)v99 + 3))
      {
        llvm::raw_ostream::write(v99);
      }
      else
      {
        *((_QWORD *)v99 + 4) = v100 + 1;
        *v100 = 69;
      }
      if (!*(_DWORD *)(a3 + 16))
        goto LABEL_129;
      v101 = sub_22F3689B4(*(_QWORD *)(*(_QWORD *)a1 + 8), a3);
      if (v101)
        sub_22F087528(a1, v101);
LABEL_125:
      v86 = *(llvm::raw_ostream **)(a1 + 8);
      v87 = (_BYTE *)*((_QWORD *)v86 + 4);
      if ((unint64_t)v87 >= *((_QWORD *)v86 + 3))
      {
        llvm::raw_ostream::write(v86);
LABEL_129:
        v88 = 0;
      }
      else
      {
        v88 = 0;
LABEL_127:
        *((_QWORD *)v86 + 4) = v87 + 1;
        *v87 = 69;
      }
LABEL_130:
      if (!v88 && a4)
      {
LABEL_132:
        v89 = *(llvm::raw_ostream **)(a1 + 8);
        v90 = (_BYTE *)*((_QWORD *)v89 + 4);
        if ((unint64_t)v90 >= *((_QWORD *)v89 + 3))
        {
          llvm::raw_ostream::write(v89);
        }
        else
        {
          *((_QWORD *)v89 + 4) = v90 + 1;
          *v90 = 69;
        }
      }
      return;
    default:
      return;
  }
}

BOOL sub_22F086BA4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  BOOL v6;
  _BOOL8 result;

  result = 0;
  if (a2)
  {
    v4 = sub_22EFB948C(a2);
    if ((v4 == 4 || v4 == 1) && sub_22EFB948C(a2) <= 2)
    {
      v5 = *(_WORD *)(sub_22F076E9C(a1, a2) + 8) & 0x7F;
      v6 = v5 == 83 || v5 == 16;
      if (v6 && !sub_22EFC83D8(a2))
        return 1;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F086C28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 *v12;
  uint64_t v13;
  _BOOL8 v14;
  llvm::raw_ostream *result;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (llvm::raw_ostream *)a1[1];
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 73;
  }
  v21 = 0;
  v22 = a2;
  v19 = 0;
  v20 = 0;
  v8 = sub_22F0F08CC(&v22);
  if (v8)
    v19 = v8;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      v12 = (__int128 *)(*(_QWORD *)a3 + v10);
      v13 = *((_QWORD *)v12 + 2);
      v17 = *v12;
      v18 = v13;
      v14 = sub_22F0840DC((uint64_t *)&v19, i, (int *)v12);
      sub_22F0832A4(a1, (uint64_t)&v17, v14);
      v10 += 24;
    }
  }
  result = (llvm::raw_ostream *)a1[1];
  v16 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v16 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v16 + 1;
  *v16 = 69;
  return result;
}

llvm::raw_ostream *sub_22F086D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  unint64_t v9;
  size_t v10;
  const void *v11;
  unint64_t v12;
  size_t v13;
  const void *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  void *v18;
  int v19;
  _BYTE v20[24];
  __int128 v21;
  _DWORD v22[4];
  __int128 v23;

  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v4 = a1 + 256;
  *(_QWORD *)&v21 = 0;
  if (!sub_22F271990((uint64_t *)(a1 + 256), (uint64_t)&v23, &v21)
    || (v5 = v21, (_QWORD)v21 == *(_QWORD *)(a1 + 256) + 24 * *(unsigned int *)(a1 + 272)))
  {
    LOBYTE(v21) = 46;
    v9 = llvm::StringRef::rfind();
    if (v9 == -1)
    {
      v10 = *((_QWORD *)&v23 + 1);
      v11 = (const void *)v23;
    }
    else
    {
      v11 = (const void *)v23;
      if (*((_QWORD *)&v23 + 1) >= v9)
        v10 = v9;
      else
        v10 = *((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1) >= v9 + 1)
        v12 = v9 + 1;
      else
        v12 = *((_QWORD *)&v23 + 1);
      v13 = *((_QWORD *)&v23 + 1) - v12;
      if (*((_QWORD *)&v23 + 1) != v12)
      {
        v14 = (const void *)(v23 + v12);
        sub_22F086D2C(a1, v23, v10);
        v10 = v13;
        v11 = v14;
      }
    }
    v15 = *(llvm::raw_ostream **)(a1 + 8);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
    {
      llvm::raw_ostream::write(v15);
    }
    else
    {
      *((_QWORD *)v15 + 4) = v16 + 1;
      *v16 = 87;
    }
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v18 = (void *)*((_QWORD *)v17 + 4);
    if (v10 <= *((_QWORD *)v17 + 3) - (_QWORD)v18)
    {
      if (v10)
      {
        memcpy(v18, v11, v10);
        *((_QWORD *)v17 + 4) += v10;
      }
    }
    else
    {
      llvm::raw_ostream::write(v17, (const char *)v11);
    }
    v19 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v19 + 1;
    v21 = v23;
    v22[0] = v19;
    return (llvm::raw_ostream *)sub_22F2718F4((uint64_t)v20, v4, &v21, v22);
  }
  else
  {
    v6 = *(llvm::raw_ostream **)(a1 + 8);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 83;
    }
    return sub_22F07E2B4(a1, *(_DWORD *)(v5 + 16));
  }
}

void sub_22F086EE8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_22F086F2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_22F10CEE8(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0;
  v3 = *(unsigned int *)(v0 + 16);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 72 * v3;
    while ((((uint64_t (*)(unint64_t, uint64_t))sub_22F086EE8)(v2, *(_QWORD *)(v0 + 8) + v4) & 1) != 0)
    {
      v4 += 72;
      if (v5 == v4)
      {
        v6 = *(unsigned int *)(v0 + 16);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
    v6 = 0;
LABEL_7:
    if (v6 != *(_DWORD *)(v0 + 20))
      JUMPOUT(0x22F086F14);
    return 1;
  }
}

void sub_22F0872BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t v10;

  sub_22F26307C((_DWORD *)(v10 + 8), (uint64_t)&a9);
  if (a10 > 0x40)
  {
    llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&a9);
    if (a9)
      MEMORY[0x2348A0E84](a9, 0x1000C8000313F17);
    JUMPOUT(0x22F0872A0);
  }
  JUMPOUT(0x22F087194);
}

unint64_t sub_22F08730C(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  __int16 v16;

  v4 = *(_QWORD *)(a3 + 40);
  result = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) == 0 && result != 0)
    return result;
  if ((*(_BYTE *)(a3 + 68) & 1) != 0)
    return 0;
  v8 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v8 && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3)
    v8 = 0;
  v9 = sub_22EFC3B90(v8);
  if (!v9)
  {
LABEL_16:
    v11 = sub_22F41A810(*(_QWORD *)(a2 + 32), 4, "cannot mangle this unnamed union NTTP yet", 0x29uLL);
    *(_DWORD *)(a2 + 312) = a1;
    *(_DWORD *)(a2 + 316) = v11;
    if (*(char *)(a2 + 311) < 0)
    {
      **(_BYTE **)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 288) = 0;
      *(_BYTE *)(a2 + 311) = 0;
    }
    v15[0] = a2 + 320;
    v15[1] = 0;
    v15[2] = a2;
    v16 = 1;
    *(_BYTE *)(a2 + 320) = 0;
    *(_DWORD *)(a2 + 664) = 0;
    v12 = *(unsigned int *)(a2 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a2 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    *(_DWORD *)(a2 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v15);
    return 0;
  }
  v10 = v9;
LABEL_12:
  result = sub_22F08730C(a1, a2, v10);
  if (!result)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v10)
        goto LABEL_16;
      if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 49 <= 2)
        goto LABEL_12;
    }
  }
  return result;
}

unint64_t sub_22F087468(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v13;

  v13 = *(_OWORD *)(a2 + 8);
  v4 = sub_22EF52AD4((unint64_t *)&v13);
  v5 = *(unsigned int *)(a2 + 48);
  v6 = (unint64_t *)(a2 + 56);
  if ((v5 - 3) <= 0xFFFFFFFB)
  {
    v6 = (unint64_t *)*v6;
  }
  else if (!(_DWORD)v5)
  {
    return v4;
  }
  v7 = &v6[v5];
  do
  {
    v8 = *v6;
    v9 = sub_22EF5C728(a1, v4);
    if (v9)
    {
      v4 = *(_QWORD *)(v9 + 32);
    }
    else
    {
      v10 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0
        && (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
      {
        v4 = *(_QWORD *)(v10 + 48);
      }
      else
      {
        v4 = sub_22EF6477C(a1, v10);
      }
    }
    ++v6;
  }
  while (v6 != v7);
  return v4;
}

uint64_t sub_22F087528(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  if (a2 < 0)
  {
    v2 = *(llvm::raw_ostream **)(a1 + 8);
    v3 = (_BYTE *)*((_QWORD *)v2 + 4);
    if ((unint64_t)v3 >= *((_QWORD *)v2 + 3))
    {
      llvm::raw_ostream::write(v2);
    }
    else
    {
      *((_QWORD *)v2 + 4) = v3 + 1;
      *v3 = 110;
    }
  }
  return llvm::raw_ostream::operator<<();
}

unint64_t sub_22F087584(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 28);
  v5 = v4 & 0x7E;
  if ((a1 & 0xFFFFFFFFFFFFFFF8) != 0 && (v5 - 58) >= 0xFFFFFFFA)
  {
    v6 = v3[18] & 0xFFFFFFFFFFFFFFF8;
    if ((v3[18] & 6) == 4 && v6 != 0)
    {
      v8 = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        *a3 = *(_QWORD *)(v6 + 24);
        return v8 | a1 & 7;
      }
    }
  }
  else if (v3 && v5 == 36)
  {
    *a3 = v3[21];
    for (i = v3[19]; ; i = *(_QWORD *)(*(_QWORD *)v11 + 152))
    {
      v11 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) == 0 || !v11)
        break;
    }
    return v11 | a1 & 7;
  }
  if (!v3)
    return 0;
  v12 = (v4 & 0x7F) - 67;
  v9 = 0;
  if (v12 >= 0xFFFFFFFE)
  {
    *a3 = v3[16];
    v13 = v3[14];
    v11 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0 && v11)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v11 + 112);
        v11 = v15 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v15 & 4) != 0 && v11);
    }
    return v11 | a1 & 7;
  }
  return v9;
}

void sub_22F087674(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;

  v4 = sub_22F3B1C84(a2);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      sub_22F08770C(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 128) + 136) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 128) + 136) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_22EFD47B4(a2);
  sub_22F087B34(a1, v9, 0, v11);
}

void sub_22F08770C(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _WORD *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _WORD *v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;

  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v4 == 38)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 33) & 0x80) != 0)
    {
      v5 = *(llvm::raw_ostream **)(a1 + 8);
      v6 = (_WORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 1uLL)
      {
        *v6 = 28756;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, "Tp");
      }
    }
    v7 = *(llvm::raw_ostream **)(a1 + 8);
    v8 = (_WORD *)*((_QWORD *)v7 + 4);
    if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 1uLL)
    {
      v9 = "Ty";
LABEL_8:
      llvm::raw_ostream::write(v7, v9);
      return;
    }
    *v8 = 31060;
    v43 = *((_QWORD *)v7 + 4) + 2;
LABEL_57:
    *((_QWORD *)v7 + 4) = v43;
    return;
  }
  if (a2 && v4 == 59)
  {
    if (*(_BYTE *)(a2 + 81))
    {
      v10 = *(unsigned int *)(a2 + 84);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)(a2 + 88);
        do
        {
          v12 = *(llvm::raw_ostream **)(a1 + 8);
          v13 = (_WORD *)*((_QWORD *)v12 + 4);
          if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
          {
            *v13 = 28244;
            *((_QWORD *)v12 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v12, "Tn");
          }
          v14 = *v11;
          v11 += 2;
          sub_22F07817C(a1, v14);
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 48);
      if (*(_BYTE *)(a2 + 80))
      {
        v28 = *(llvm::raw_ostream **)(a1 + 8);
        v29 = (_WORD *)*((_QWORD *)v28 + 4);
        if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 1uLL)
        {
          *v29 = 28756;
          *((_QWORD *)v28 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v28, "Tp");
        }
        if ((v30 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v30 + 16) == 36
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
          && (v30 = sub_22F10CF48(v30)) != 0)
        {
          v27 = *(_QWORD *)(v30 + 32);
        }
      }
      v31 = *(llvm::raw_ostream **)(a1 + 8);
      v32 = (_WORD *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v32 > 1uLL)
      {
        *v32 = 28244;
        *((_QWORD *)v31 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v31, "Tn");
      }
      sub_22F07817C(a1, v27);
    }
  }
  else if (a2 && v4 == 32)
  {
    if (!*(_BYTE *)(a2 + 81))
    {
      if (*(_BYTE *)(a2 + 80))
      {
        v33 = *(llvm::raw_ostream **)(a1 + 8);
        v34 = (_WORD *)*((_QWORD *)v33 + 4);
        if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
        {
          *v34 = 28756;
          *((_QWORD *)v33 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v33, "Tp");
        }
      }
      v35 = *(llvm::raw_ostream **)(a1 + 8);
      v36 = (_WORD *)*((_QWORD *)v35 + 4);
      if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 1uLL)
      {
        *v36 = 29780;
        *((_QWORD *)v35 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v35, "Tt");
      }
      v37 = *(_QWORD *)(a2 + 56);
      v38 = *(_DWORD *)(v37 + 12) & 0x1FFFFFFF;
      if ((_DWORD)v38)
      {
        v39 = (uint64_t *)(v37 + 16);
        v40 = 8 * v38;
        do
        {
          v41 = *v39++;
          sub_22F08770C(a1, v41);
          v40 -= 8;
        }
        while (v40);
      }
      v7 = *(llvm::raw_ostream **)(a1 + 8);
      v42 = (_BYTE *)*((_QWORD *)v7 + 4);
      if (*((_BYTE **)v7 + 3) == v42)
      {
        v9 = "E";
        goto LABEL_8;
      }
      *v42 = 69;
      v43 = *((_QWORD *)v7 + 4) + 1;
      goto LABEL_57;
    }
    v15 = *(unsigned int *)(a2 + 84);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = a2 + 88;
      do
      {
        v18 = *(llvm::raw_ostream **)(a1 + 8);
        v19 = (_WORD *)*((_QWORD *)v18 + 4);
        if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
        {
          *v19 = 29780;
          *((_QWORD *)v18 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v18, "Tt");
        }
        v20 = *(_QWORD *)(v17 + 8 * v16);
        v21 = *(_DWORD *)(v20 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v21)
        {
          v22 = (uint64_t *)(v20 + 16);
          v23 = 8 * v21;
          do
          {
            v24 = *v22++;
            sub_22F08770C(a1, v24);
            v23 -= 8;
          }
          while (v23);
        }
        v25 = *(llvm::raw_ostream **)(a1 + 8);
        v26 = (_BYTE *)*((_QWORD *)v25 + 4);
        if (*((_BYTE **)v25 + 3) == v26)
        {
          llvm::raw_ostream::write(v25, "E");
        }
        else
        {
          *v26 = 69;
          ++*((_QWORD *)v25 + 4);
        }
        ++v16;
      }
      while (v16 != v15);
    }
  }
}

void sub_22F087B34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  llvm::raw_ostream *v27;
  _OWORD *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;

  v7 = *(_DWORD *)(a1 + 40);
  v8 = (v7 & 0xFFFFFFFE) + 2;
  *(_DWORD *)(a1 + 40) = v8;
  if (a3)
  {
    *(_DWORD *)(a1 + 40) = v8 | 1;
    if (!a4 && (*(_QWORD *)(a2 + 16) & 0x2000000) != 0)
      sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "ns_returns_retained", 0x13uLL);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v11 & 8) != 0 && (*(_WORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
    {
      if ((v9 & 8) != 0)
      {
        v10 = *(_QWORD *)v10;
        v12 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFFFFFFFE3FLL | *(_QWORD *)(a2 + 24) & 7;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 24) & 7;
      }
      if ((v12 & 0xCFFFFFFF8) != 0)
        v9 = sub_22EF5DBC4(*(_QWORD *)(*(_QWORD *)a1 + 8), v10, v12);
      else
        v9 = v10 & 0xFFFFFFFFFFFFFFF0 | v12 & 7;
    }
    sub_22F07817C(a1, v9);
    *(_DWORD *)(a1 + 40) &= ~1u;
  }
  v13 = *(_QWORD *)(a2 + 16);
  if ((v13 & 0x83FFFC000000000) != 0)
  {
    if ((v13 & 0x3FFFC000000000) != 0)
    {
      v14 = 0;
      v15 = (unsigned __int16)(v13 >> 38);
      do
      {
        if (a4 || (*(_QWORD *)(a2 + 16) & 0x400000000000000) == 0)
          goto LABEL_26;
        v16 = *(_BYTE *)(sub_22E47E270(a2) + v14);
        if ((v16 & 0xFu) - 1 > 3)
        {
          if ((v16 & 0x10) == 0)
          {
LABEL_24:
            if ((v16 & 0x40) == 0)
              goto LABEL_26;
LABEL_25:
            sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "noescape", 8uLL);
            goto LABEL_26;
          }
        }
        else
        {
          sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), off_24FAC6478[(v16 & 0xF) - 1], qword_22F4A6028[(v16 & 0xF) - 1]);
          if ((v16 & 0x10) == 0)
            goto LABEL_24;
        }
        sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "ns_consumed", 0xBuLL);
        if ((v16 & 0x40) != 0)
          goto LABEL_25;
LABEL_26:
        v17 = sub_22EF69FD4(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(a2 + 40 + 8 * v14));
        sub_22F07817C(a1, v17);
        if (!a4)
          goto LABEL_34;
        v18 = *(_QWORD *)(*(_QWORD *)(a4 + 120) + 8 * v14);
        if ((*(_BYTE *)(v18 + 29) & 1) == 0)
          goto LABEL_34;
        sub_22EFC8E88(v18);
        v20 = *(uint64_t **)v19;
        v21 = *(unsigned int *)(v19 + 8);
        v22 = *(uint64_t **)v19;
        if ((_DWORD)v21)
        {
          v23 = 8 * v21;
          v22 = *(uint64_t **)v19;
          while (*(_WORD *)(*v22 + 32) != 83)
          {
            ++v22;
            v23 -= 8;
            if (!v23)
              goto LABEL_34;
          }
        }
        if (v22 == &v20[v21])
          goto LABEL_34;
        do
        {
          v25 = *v20++;
          v24 = v25;
        }
        while (*(_WORD *)(v25 + 32) != 83);
        v26 = sub_22F248BA8(v24);
        v27 = *(llvm::raw_ostream **)(a1 + 8);
        v28 = (_OWORD *)*((_QWORD *)v27 + 4);
        v29 = *((_QWORD *)v27 + 3) - (_QWORD)v28;
        if (v26)
        {
          if (v29 > 0x1A)
          {
            qmemcpy(v28, "U25pass_dynamic_object_size", 27);
            v31 = *((_QWORD *)v27 + 4) + 27;
LABEL_46:
            *((_QWORD *)v27 + 4) = v31;
            goto LABEL_43;
          }
          v30 = "U25pass_dynamic_object_size";
        }
        else
        {
          if (v29 > 0x12)
          {
            *(_DWORD *)((char *)v28 + 15) = 1702521203;
            *v28 = *(_OWORD *)"U17pass_object_size";
            v31 = *((_QWORD *)v27 + 4) + 19;
            goto LABEL_46;
          }
          v30 = "U17pass_object_size";
        }
        llvm::raw_ostream::write(v27, v30);
LABEL_43:
        llvm::raw_ostream::operator<<();
LABEL_34:
        ++v14;
      }
      while (v14 != v15);
    }
    *(_DWORD *)(a1 + 40) = v7;
    if ((*(_BYTE *)(a2 + 23) & 8) != 0)
    {
      v32 = *(llvm::raw_ostream **)(a1 + 8);
      v33 = (_BYTE *)*((_QWORD *)v32 + 4);
      if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
      {
        llvm::raw_ostream::write(v32);
      }
      else
      {
        *((_QWORD *)v32 + 4) = v33 + 1;
        *v33 = 122;
      }
    }
  }
  else
  {
    v34 = *(llvm::raw_ostream **)(a1 + 8);
    v35 = (_BYTE *)*((_QWORD *)v34 + 4);
    if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
    {
      llvm::raw_ostream::write(v34);
    }
    else
    {
      *((_QWORD *)v34 + 4) = v35 + 1;
      *v35 = 118;
    }
    *(_DWORD *)(a1 + 40) = v7;
  }
}

uint64_t sub_22F087EB4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_22F0880AC(a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = (37 * *a2) & v14;
    result = *(_QWORD *)a1 + 16 * v15;
    v16 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v18 = 1;
    while (v16 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -2;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_QWORD *)result;
      if (v13 == *(_QWORD *)result)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_22F0880AC(a1, v4);
    v13 = *a2;
    v21 = *(_DWORD *)(a1 + 16) - 1;
    v22 = (37 * *a2) & v21;
    result = *(_QWORD *)a1 + 16 * v22;
    v23 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v24 = 1;
    while (v23 != -1)
    {
      if (v17)
        v25 = 0;
      else
        v25 = v23 == -2;
      if (v25)
        v17 = result;
      v26 = v22 + v24++;
      v22 = v26 & v21;
      result = *(_QWORD *)a1 + 16 * v22;
      v23 = *(_QWORD *)result;
      if (v13 == *(_QWORD *)result)
        goto LABEL_16;
    }
LABEL_43:
    if (v17)
      result = v17;
  }
  v13 = *(_QWORD *)result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_22F0880AC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[2 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[2 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_12;
            }
            if (v20)
              v18 = v20;
          }
LABEL_12:
          *v18 = v16;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v15 + 2);
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 = (llvm *)((char *)v15 + 16);
      }
      while (v15 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24)
    {
      v25 = 16 * v24;
      do
      {
        *result = -1;
        result += 2;
        v25 -= 16;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_22F088228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  result = sub_22F07DB5C((uint64_t *)a1, a2 & 0xFFFFFFFFFFFFFFF8);
  if ((result & 1) == 0)
  {
    v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
    result = sub_22F07DA88(a1, v10);
    if ((result & 1) == 0)
    {
      if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x20)
      {
        sub_22F08379C(a1, *(_DWORD *)(v8 + 64) & 0xFFFFF, *(_DWORD *)(v8 + 64) >> 20);
      }
      else
      {
        v11 = sub_22F076E9C(*(_QWORD *)a1, v8);
        sub_22F08834C(a1, v11, a4);
        if ((*(_DWORD *)(v8 + 28) & 0x7E) == 0x1A)
        {
          v12 = a1;
          v13 = a2;
        }
        else
        {
          v13 = a2 & 7 | *(_QWORD *)(v8 + 48);
          v12 = a1;
        }
        sub_22F08459C(v12, v13, a3, v11, 0);
      }
      v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 32))(v8);
      v14 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = v14 + 1;
      result = sub_22F087EB4(a1 + 232, &v15);
      *(_DWORD *)(result + 8) = v14;
    }
  }
  return result;
}

uint64_t sub_22F08834C(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_WORD *)(a2 + 8);
  v4 = v3 & 0x7F;
  if (v4 == 83)
    return result;
  v6 = result;
  if ((_DWORD)a3)
  {
    v7 = (v3 & 0x7Eu) - 52 < 6 || v4 == 1;
    if (v7 || v4 == 24)
      return result;
  }
  v9 = -40;
  if (v4 > 70)
  {
    if (v4 != 83)
    {
      if (v4 == 71)
      {
        v9 = -56;
        goto LABEL_26;
      }
      if (v4 == 81)
        goto LABEL_26;
LABEL_21:
      v10 = v4 - 52;
      v11 = (v4 - 33) >= 5;
      v12 = -48;
      if (!v11)
        v12 = -64;
      if (v10 >= 6)
        v9 = v12;
      else
        v9 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_20;
    if (v4 != 16)
    {
      if (((1 << v4) & 0x1066) != 0)
        goto LABEL_26;
      if (v4 != 24)
      {
LABEL_20:
        if (v4 == 70)
        {
          v9 = -64;
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }
    v9 = -48;
  }
LABEL_26:
  v13 = a2 + v9;
  result = sub_22F07DB5C((uint64_t *)result, a2 + v9);
  if ((result & 1) == 0)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    result = sub_22F07DA88(v6, v14);
    if ((result & 1) == 0)
    {
      v26 = 0;
      v15 = sub_22F087584(v13, 0, &v26);
      if (v15)
      {
        v17 = v15;
        sub_22F088228(v6, v15, v16, 0);
        if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
            v18 = 0;
          else
            v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v18 = 0;
        }
        sub_22F086C28((uint64_t *)v6, v18, v26);
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 2000);
        v20 = sub_22F088588(*(unsigned __int16 *)(v19 + 248) | (*(unsigned __int8 *)(v19 + 250) << 16), v13);
        if (v20)
        {
          sub_22F088668(v6, v20, a3);
          v21 = v6;
          v22 = v13;
          v23 = 0;
        }
        else
        {
          v24 = sub_22F076E9C(*(_QWORD *)v6, v13);
          sub_22F08834C(v6, v24, a3);
          v21 = v6;
          v22 = v13;
          v23 = v24;
        }
        sub_22F08459C(v21, v22, 0, v23, 0);
      }
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v25 = *(_DWORD *)(v6 + 36);
      *(_DWORD *)(v6 + 36) = v25 + 1;
      result = sub_22F087EB4(v6 + 232, &v27);
      *(_DWORD *)(result + 8) = v25;
    }
  }
  return result;
}

uint64_t sub_22F088588(int a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  if ((a1 & 0xF0000u) < 0x70000)
    return 0;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v4 == 1)
  {
    v2 = *(_QWORD *)(a2 + 120);
    if (!v2)
      return v2;
    v5 = *(_DWORD *)(v2 + 28) & 0x7F;
    if ((v5 - 13) >= 0x3E)
      return 0;
    goto LABEL_8;
  }
  v2 = 0;
  if (a2 && (v4 - 38) >= 0xFFFFFFFD)
  {
    v6 = *(_QWORD *)(a2 + 128);
    if (!v6 || ((*(unsigned __int16 *)(v6 + 8) | (*(unsigned __int8 *)(v6 + 10) << 16)) & 0x100000) == 0)
      return 0;
    v7 = sub_22F3B1CF4(a2);
    v2 = v7;
    if (!v7)
      return v2;
    v5 = *(_DWORD *)(v7 + 28) & 0x7F;
    if ((v5 - 13) > 0x3D)
      return 0;
LABEL_8:
    if ((v5 - 60) <= 6)
    {
      if (!sub_22E3CB5E0(v2))
        return v2;
      v5 = *(_DWORD *)(v2 + 28) & 0x7F;
    }
    if ((v5 - 49) <= 2)
      return v2;
    return 0;
  }
  return v2;
}

uint64_t sub_22F088668(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_22F07DB5C((uint64_t *)a1, a2);
  if ((result & 1) == 0)
  {
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
    result = sub_22F07DA88(a1, v7);
    if ((result & 1) == 0)
    {
      v16 = 0;
      v8 = sub_22F087584(a2, 0, &v16);
      if (v8)
      {
        v10 = v8;
        sub_22F088228(a1, v8, v9, a3);
        if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
            v11 = 0;
          else
            v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v11 = 0;
        }
        sub_22F086C28((uint64_t *)a1, v11, v16);
      }
      else
      {
        v12 = sub_22F076E9C(*(_QWORD *)a1, a2);
        sub_22F08834C(a1, v12, a3);
        sub_22F08459C(a1, a2, 0, v12, 0);
      }
      v13 = *(llvm::raw_ostream **)(a1 + 8);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
      {
        llvm::raw_ostream::write(v13);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v14 + 1;
        *v14 = 77;
      }
      v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
      v15 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = v15 + 1;
      result = sub_22F087EB4(a1 + 232, &v17);
      *(_DWORD *)(result + 8) = v15;
    }
  }
  return result;
}

uint64_t sub_22F0887BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v3 = (uint64_t)a1;
  v13 = a2;
  while (1)
  {
    result = sub_22F084044(a1, a2);
    if ((result & 1) != 0)
      return result;
    v5 = sub_22F0F084C(&v13);
    if (v5 != 5)
    {
      switch(v5)
      {
        case 0:
        case 7:
          v7 = &v13;
          goto LABEL_14;
        case 3:
          if ((v2 & 6) == 4)
            v8 = v2 & 0xFFFFFFFFFFFFFFF8;
          else
            v8 = 0;
          v7 = (uint64_t *)(v8 + 16);
LABEL_14:
          v9 = sub_22F0F08CC(v7);
          if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) == 0x20)
            sub_22F08379C(v3, *(_DWORD *)(v9 + 64) & 0xFFFFF, *(_DWORD *)(v9 + 64) >> 20);
          else
            sub_22F0776D8(v3, v9, 0);
          break;
        case 4:
          if ((~(_BYTE)v2 & 6) != 0)
            v10 = 0;
          else
            v10 = v2 & 0xFFFFFFFFFFFFFFF8;
          sub_22F0819C4(v3, *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8, 0);
          sub_22E54B3A4(*(_QWORD *)(v3 + 8), *(_QWORD *)(v10 + 16));
          break;
        case 6:
          v11 = *(llvm::raw_ostream **)(v3 + 8);
          v12 = *((_QWORD *)v11 + 4);
          if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0xA)
          {
            *(_DWORD *)(v12 + 7) = 1598767937;
            *(_QWORD *)v12 = *(_QWORD *)"_SUBSTPACK_";
            *((_QWORD *)v11 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v11, "_SUBSTPACK_");
          }
          break;
        default:
          return sub_22F088954((_DWORD *)v3, v2);
      }
      return sub_22F088954((_DWORD *)v3, v2);
    }
    v6 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) & 3) != 2)
      v6 = 0;
    v2 = *(_QWORD *)(v6 + 24);
    v13 = v2;
    a1 = (uint64_t *)v3;
    a2 = v2;
  }
}

uint64_t sub_22F088954(_DWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v3 = sub_22F0F08CC(&v7);
  if (v3)
  {
    v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  else
  {
    sub_22EF65464(*(_QWORD *)(*(_QWORD *)a1 + 8), &v7);
    v7 = v4;
  }
  v8 = v4;
  v5 = a1[9];
  a1[9] = v5 + 1;
  result = sub_22F087EB4((uint64_t)(a1 + 58), &v8);
  *(_DWORD *)(result + 8) = v5;
  return result;
}

uint64_t sub_22F0889D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = (uint64_t *)result;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (v5 >> 1) & 3;
    if (v6 - 2 >= 2)
    {
      if (v6 == 1)
      {
        v16 = *(_QWORD *)(a2 + 8) & 6;
        if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x10)
        {
          if (v16 == 2)
            v17 = *(_QWORD *)(a2 + 16);
          else
            v17 = 0;
        }
        else
        {
          if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x11 && v16 == 2)
            v17 = *(_QWORD *)(a2 + 16);
          else
            v17 = 0;
          do
          {
            v17 = *(_QWORD *)(v17 + 88);
            if (v17)
              v19 = (*(_DWORD *)(v17 + 28) & 0x7F) == 17;
            else
              v19 = 0;
          }
          while (v19);
        }
        return sub_22F0776D8(result, v17, 0);
      }
      else
      {
        sub_22F0889D8(result, v5 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_BYTE *)(a2 + 8) & 6) != 0)
          v20 = 0;
        else
          v20 = *(_QWORD *)(a2 + 16);
        return (uint64_t)sub_22E54B3A4(v4[1], v20);
      }
    }
    else
    {
      v7 = (uint64_t *)(v2 & (v5 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0);
      v8 = sub_22F10D628(*v7);
      if (v8)
      {
        v9 = v8;
        v10 = v8 & 0xFFFFFFFFFFFFFFF0;
        result = sub_22F079AD8(v4, v8 & 0xFFFFFFFFFFFFFFF0);
        if ((result & 1) == 0)
        {
          sub_22F088BC8(v4, *(_QWORD *)(v9 + 32));
          sub_22F083F48(v4, *(_QWORD *)(v9 + 32), (__int128 *)(v9 + 40), *(_DWORD *)(v9 + 20));
          v11 = (uint64_t)v4;
          v12 = v10;
          return sub_22F07D9CC(v11, v12);
        }
      }
      else
      {
        v13 = *v7;
        if (*v7)
          v14 = *(_BYTE *)(*v7 + 16) == 20;
        else
          v14 = 0;
        if (v14
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 20
          && (v13 = sub_22F10CF48(*v7)) != 0)
        {
          result = sub_22F079AD8(v4, v13 & 0xFFFFFFFFFFFFFFF0);
          if ((result & 1) == 0)
          {
            v15 = sub_22F36E5B0(*(_QWORD *)(*v4 + 8), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40));
            sub_22F088BC8(v4, v15);
            sub_22F083F48(v4, v15, (__int128 *)(v13 + 48), *(_DWORD *)(v13 + 20));
            v11 = (uint64_t)v4;
            v12 = v13 & 0xFFFFFFFFFFFFFFF0;
            return sub_22F07D9CC(v11, v12);
          }
        }
        else
        {
          return sub_22F07817C(v4, v7);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F088BC8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v4 = sub_22F0F08CC(&v10);
  if (v4)
    return sub_22F088228((uint64_t)a1, v4, 0, 0);
  if ((~(_BYTE)a2 & 6) != 0)
    v6 = 0;
  else
    v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 250) << 16) & 0xE0000;
  if (v7 < 0x60000 || (result = sub_22F084044(a1, a2), (result & 1) == 0))
  {
    v8 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
      sub_22F0889D8(a1, v8);
    if (v7 >> 17 > 2 || (result = sub_22F084044(a1, a2), (result & 1) == 0))
    {
      v9 = *(_QWORD *)(v6 + 16);
      if (v9)
        sub_22E54B3A4(a1[1], v9);
      return sub_22F088954(a1, a2);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F088CC8(llvm::raw_ostream *result, int a2)
{
  char *v2;
  char v3;

  if (a2 == 2)
  {
    result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
    v2 = (char *)*((_QWORD *)result + 4);
    if ((unint64_t)v2 < *((_QWORD *)result + 3))
    {
      *((_QWORD *)result + 4) = v2 + 1;
      v3 = 79;
      goto LABEL_7;
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  }
  if (a2 != 1)
    return result;
  result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
  v2 = (char *)*((_QWORD *)result + 4);
  if ((unint64_t)v2 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v2 + 1;
  v3 = 82;
LABEL_7:
  *v2 = v3;
  return result;
}

uint64_t sub_22F088D2C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int16 v5;
  int v6;
  BOOL v7;
  uint64_t v9;

  while (1)
  {
    v4 = sub_22F076E9C(*a1, a2);
    v5 = *(_WORD *)(v4 + 8);
    v6 = v5 & 0x7F;
    if (v6 == 16 || v6 == 83)
      return 0;
    v7 = (v5 & 0x7Eu) - 52 < 6 || v6 == 24;
    if (v7 || v6 == 1)
      break;
    v9 = -40;
    if (v6 > 70)
    {
      if (v6 == 71)
      {
        v9 = -56;
        goto LABEL_25;
      }
      if (v6 != 81)
        goto LABEL_20;
    }
    else
    {
      if (v6 > 0x18)
        goto LABEL_19;
      if (v6 == 16)
        goto LABEL_13;
      if (((1 << v6) & 0x1066) == 0)
      {
        if (v6 == 24)
        {
LABEL_13:
          v9 = -48;
          goto LABEL_25;
        }
LABEL_19:
        if (v6 == 70)
        {
          v9 = -64;
          goto LABEL_25;
        }
LABEL_20:
        if ((v6 - 52) < 6)
        {
          v9 = -72;
        }
        else if ((v6 - 33) >= 5)
        {
          v9 = -48;
        }
        else
        {
          v9 = -64;
        }
      }
    }
LABEL_25:
    a2 = v4 + v9;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 34 >= 4)
    return 0;
  else
    return a2;
}

void sub_22F088E58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  BOOL v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int j;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  llvm::raw_ostream *v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  _WORD *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int i;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  llvm::raw_ostream *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  _QWORD v102[12];

  v6 = a2;
  v102[10] = *MEMORY[0x24BDAC8D0];
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_22F088D2C(a1, a2 & 0xFFFFFFFFFFFFFFF8);
  if (v9)
    v10 = v9;
  else
    v10 = v8;
  v11 = sub_22F076E9C(*a1, v10);
  v12 = (llvm::raw_ostream *)a1[1];
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 90;
  }
  v98 = &v100;
  v99 = 0x400000000;
  v101[0] = v102;
  v101[1] = 0x400000000;
  v14 = a1[6];
  v102[8] = a1 + 6;
  v102[9] = v14;
  a1[6] = (uint64_t)&v98;
  v15 = *(_WORD *)(v11 + 8) & 0x7F;
  if (v15 != 24 || v11 == 0)
  {
    v17 = v6;
    v18 = a4;
    v19 = a3;
    if (v15 != 1 || v11 == 0)
    {
      if (v11)
        v21 = v11 - 72;
      else
        v21 = 0;
      if (v11 && v15 == 55)
      {
        v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      else if (v11 && v15 == 57)
      {
        v21 = v21 & 0xFFFFFFFFFFFFFFF8 | 1;
      }
      else if (sub_22E462B18(v21))
      {
        v21 = v21 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v21) + 96) & 0x80) == 0);
      }
      sub_22F077260(a1, v21, 0);
    }
    else if (sub_22F088D2C(a1, v11 - 40)
           || ((v22 = sub_22F076E9C(*a1, v11 - 40),
                v23 = *(_WORD *)(v22 + 8) & 0x7F,
                (*(_WORD *)(v22 + 8) & 0x7Eu) - 52 >= 6)
             ? (v24 = v23 == 24)
             : (v24 = 1),
               !v24 ? (v25 = v23 == 1) : (v25 = 1),
               v25))
    {
      sub_22F088E58(a1, v11 - 40, 0, 0);
    }
    else
    {
      v96 = v22;
      v50 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000);
      v51 = sub_22F088588(*(unsigned __int16 *)(v50 + 248) | (*(unsigned __int8 *)(v50 + 250) << 16), v11 - 40);
      if (v51)
        sub_22F088668((uint64_t)a1, v51, 0);
      else
        sub_22F08834C((uint64_t)a1, v96, 0);
      sub_22F089A7C(a1, v11 - 40);
    }
    a3 = v19;
    a4 = v18;
    v6 = v17;
  }
  else
  {
    sub_22F3E8270(*a1, v11 - 48);
  }
  sub_22F2ED24C(&v98, (uint64_t)v101);
  sub_22F0899DC((void **)&v98);
  v26 = (llvm::raw_ostream *)a1[1];
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26);
    if (v9)
      goto LABEL_42;
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 69;
    if (v9)
    {
LABEL_42:
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      {
        v28 = *(_QWORD *)(v9 + 128);
        if (v28)
        {
          if (((*(unsigned __int16 *)(v28 + 8) | (*(unsigned __int8 *)(v28 + 10) << 16)) & 0x100000) != 0)
          {
            v69 = sub_22F3B1CF4(v9);
            if (v69)
            {
              v70 = v69;
              if ((*(_DWORD *)(v69 + 28) & 0x7F) == 0x40)
              {
                v71 = *(_QWORD *)(v69 + 16);
                v72 = v71 & 0xFFFFFFFFFFFFFFF8;
                if ((v71 & 4) != 0)
                  v72 = *(_QWORD *)v72;
                if (v72 && (*(_WORD *)(v72 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
                {
                  v73 = (llvm::raw_ostream *)a1[1];
                  v74 = (_BYTE *)*((_QWORD *)v73 + 4);
                  if ((unint64_t)v74 >= *((_QWORD *)v73 + 3))
                  {
                    llvm::raw_ostream::write(v73);
                  }
                  else
                  {
                    *((_QWORD *)v73 + 4) = v74 + 1;
                    *v74 = 100;
                  }
                  v83 = *(_QWORD *)(*(_QWORD *)(v72 - 24) & 0xFFFFFFFFFFFFFFF0);
                  if (v83 && *(_BYTE *)(v83 + 16) == 26
                    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                    && (v83 = sub_22F10CF48(v83)) != 0)
                  {
                    v84 = (unsigned __int16)(*(_QWORD *)(v83 + 16) >> 38);
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v85 = (*(_DWORD *)(v70 + 96) >> 20);
                  if (v85 == 255)
                  {
                    v86 = v70;
                    if ((*(_DWORD *)(v70 + 28) & 0x7F) != 0x53)
                    {
                      v87 = *(_QWORD *)(v70 + 16);
                      v88 = v87 & 0xFFFFFFFFFFFFFFF8;
                      if ((v87 & 4) != 0)
                        v88 = *(_QWORD *)v88;
                      for (i = *(_WORD *)(v88 + 8) & 0x7F; i != 83; i = *(_WORD *)(v88 + 8) & 0x7F)
                      {
                        v90 = -40;
                        if (i > 70)
                        {
                          if (i == 71)
                          {
                            v90 = -56;
                          }
                          else if (i != 81)
                          {
                            goto LABEL_168;
                          }
                        }
                        else
                        {
                          if (i > 0x18)
                            goto LABEL_167;
                          if (i == 16)
                            goto LABEL_161;
                          if (((1 << i) & 0x1066) != 0)
                            goto LABEL_174;
                          if (i == 24)
                          {
LABEL_161:
                            v90 = -48;
                          }
                          else
                          {
LABEL_167:
                            if (i != 70)
                            {
LABEL_168:
                              v91 = i - 52;
                              if ((i - 33) >= 5)
                                v92 = -48;
                              else
                                v92 = -64;
                              if (v91 >= 6)
                                v90 = v92;
                              else
                                v90 = -72;
                              goto LABEL_174;
                            }
                            v90 = -64;
                          }
                        }
LABEL_174:
                        v93 = *(_QWORD *)(v88 + v90 + 16);
                        v88 = v93 & 0xFFFFFFFFFFFFFFF8;
                        if ((v93 & 4) != 0)
                          v88 = *(_QWORD *)v88;
                      }
                      v86 = v88 - 40;
                    }
                    v85 = sub_22F36F2CC(*(_QWORD *)(v86 + 88), v70);
                  }
                  if ((v84 - v85) >= 2)
                    sub_22F087528((uint64_t)a1, (v84 - v85 - 2));
                  v94 = (llvm::raw_ostream *)a1[1];
                  v95 = (_BYTE *)*((_QWORD *)v94 + 4);
                  if ((unint64_t)v95 >= *((_QWORD *)v94 + 3))
                  {
                    llvm::raw_ostream::write(v94);
                  }
                  else
                  {
                    *((_QWORD *)v94 + 4) = v95 + 1;
                    *v95 = 95;
                  }
                }
              }
            }
          }
        }
      }
      if (v9 != v8)
      {
        v29 = *a1;
        if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7F) != 1)
        {
          v39 = sub_22F076E9C(v29, v8);
          sub_22F089830((llvm::raw_ostream *)a1, v6, a3, v39, a4, 1);
          if (!v10)
            return;
          goto LABEL_69;
        }
        v30 = sub_22F088588(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 2000) + 248) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 2000) + 250) << 16), v8);
        if (v30)
        {
          sub_22F088668((uint64_t)a1, v30, 1);
        }
        else
        {
          v40 = sub_22F076E9C(*a1, v8);
          sub_22F08834C((uint64_t)a1, v40, 1);
        }
        goto LABEL_68;
      }
      v36 = a1;
      v37 = v8;
      v38 = 0;
LABEL_65:
      sub_22F08459C(v36, v37, v38, v11, a4);
      if (!v10)
        return;
      goto LABEL_69;
    }
  }
  if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7F) != 1)
  {
    v36 = a1;
    v37 = v6;
    v38 = a3;
    goto LABEL_65;
  }
  v31 = *(_QWORD *)(v8 + 120);
  if (v31 && (*(_DWORD *)(v31 + 28) & 0x7F) == 0x40)
  {
    v32 = *(_QWORD *)(v31 + 16);
    v33 = v32 & 0xFFFFFFFFFFFFFFF8;
    if ((v32 & 4) != 0)
      v33 = *(_QWORD *)v33;
    if (v33 && (*(_WORD *)(v33 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v34 = (llvm::raw_ostream *)a1[1];
      v35 = (_BYTE *)*((_QWORD *)v34 + 4);
      if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
      {
        llvm::raw_ostream::write(v34);
      }
      else
      {
        *((_QWORD *)v34 + 4) = v35 + 1;
        *v35 = 100;
      }
      v56 = *(_QWORD *)(*(_QWORD *)(v33 - 24) & 0xFFFFFFFFFFFFFFF0);
      if (v56 && *(_BYTE *)(v56 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v56 = sub_22F10CF48(v56)) != 0)
      {
        v57 = (unsigned __int16)(*(_QWORD *)(v56 + 16) >> 38);
      }
      else
      {
        v57 = 0;
      }
      v58 = (*(_DWORD *)(v31 + 96) >> 20);
      if (v58 == 255)
      {
        v59 = v31;
        if ((*(_DWORD *)(v31 + 28) & 0x7F) != 0x53)
        {
          v60 = *(_QWORD *)(v31 + 16);
          v61 = v60 & 0xFFFFFFFFFFFFFFF8;
          if ((v60 & 4) != 0)
            v61 = *(_QWORD *)v61;
          for (j = *(_WORD *)(v61 + 8) & 0x7F; j != 83; j = *(_WORD *)(v61 + 8) & 0x7F)
          {
            v63 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v63 = -56;
              }
              else if (j != 81)
              {
                goto LABEL_109;
              }
            }
            else
            {
              if (j > 0x18)
                goto LABEL_108;
              if (j == 16)
                goto LABEL_102;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_115;
              if (j == 24)
              {
LABEL_102:
                v63 = -48;
              }
              else
              {
LABEL_108:
                if (j != 70)
                {
LABEL_109:
                  v64 = j - 52;
                  if ((j - 33) >= 5)
                    v65 = -48;
                  else
                    v65 = -64;
                  if (v64 >= 6)
                    v63 = v65;
                  else
                    v63 = -72;
                  goto LABEL_115;
                }
                v63 = -64;
              }
            }
LABEL_115:
            v66 = *(_QWORD *)(v61 + v63 + 16);
            v61 = v66 & 0xFFFFFFFFFFFFFFF8;
            if ((v66 & 4) != 0)
              v61 = *(_QWORD *)v61;
          }
          v59 = v61 - 40;
        }
        v58 = sub_22F36F2CC(*(_QWORD *)(v59 + 88), v31);
      }
      if ((v57 - v58) >= 2)
        sub_22F087528((uint64_t)a1, (v57 - v58 - 2));
      v67 = (llvm::raw_ostream *)a1[1];
      v68 = (_BYTE *)*((_QWORD *)v67 + 4);
      if ((unint64_t)v68 >= *((_QWORD *)v67 + 3))
      {
        llvm::raw_ostream::write(v67);
      }
      else
      {
        *((_QWORD *)v67 + 4) = v68 + 1;
        *v68 = 95;
      }
    }
  }
LABEL_68:
  sub_22F089A7C(a1, v8);
  if (!v10)
    return;
LABEL_69:
  v41 = *(_DWORD *)(v10 + 28) & 0x7F;
  if ((v41 - 75) < 0xFFFFFFC2)
    return;
  v42 = (_QWORD *)*a1;
  v97 = v10;
  v43 = v41 - 38;
  if (v43 >= 0xFFFFFFFD)
  {
    v44 = *(_QWORD *)(v10 + 128);
    if (v44 && ((*(unsigned __int16 *)(v44 + 8) | (*(unsigned __int8 *)(v44 + 10) << 16)) & 0x100000) != 0)
      return;
LABEL_75:
    v45 = *(_QWORD *)(v10 + 40);
    if ((v45 & 7) != 0 || (v46 = v45 & 0xFFFFFFFFFFFFFFF8) == 0 || !**(_DWORD **)(v46 + 16))
    {
      v47 = *(_QWORD *)(v10 + 120);
      if (v47 < 8 || (v47 & 4) != 0)
        return;
    }
    goto LABEL_80;
  }
  if (v43 >= 0xFFFFFFFB)
    goto LABEL_75;
LABEL_80:
  if (sub_22EFB948C(v10) < 3)
  {
    v52 = sub_22F3E1914(v42 + 16, &v97);
    v53 = *((_DWORD *)v52 + 2);
    if (!v53)
    {
      v78 = v52;
      v79 = (uint64_t *)sub_22F076E9C((uint64_t)v42, v97);
      v80 = *(_QWORD *)(v97 + 40);
      if ((v80 & 7) != 0)
        v81 = 0;
      else
        v81 = v80 & 0xFFFFFFFFFFFFFFF8;
      v98 = v79;
      v99 = v81;
      v82 = sub_22F3E1974(v42 + 13, &v98);
      v53 = *((_DWORD *)v82 + 4) + 1;
      *((_DWORD *)v82 + 4) = v53;
      *((_DWORD *)v78 + 2) = v53;
    }
  }
  else
  {
    v48 = v42[1];
    v98 = (uint64_t *)v10;
    v49 = sub_22EF7402C(v48 + 1800, (uint64_t *)&v98);
    if (*(_QWORD *)(v48 + 1832) == v49)
      return;
    v53 = *(_DWORD *)(v49 + 8);
  }
  if (v53 != 1)
  {
    v54 = (llvm::raw_ostream *)a1[1];
    if ((v53 - 2) > 9)
    {
      v75 = (_WORD *)*((_QWORD *)v54 + 4);
      if (*((_QWORD *)v54 + 3) - (_QWORD)v75 > 1uLL)
      {
        *v75 = 24415;
        *((_QWORD *)v54 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v54, "__");
      }
      v76 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v77 = (_BYTE *)*((_QWORD *)v76 + 4);
      if ((unint64_t)v77 >= *((_QWORD *)v76 + 3))
      {
        llvm::raw_ostream::write(v76);
      }
      else
      {
        *((_QWORD *)v76 + 4) = v77 + 1;
        *v77 = 95;
      }
    }
    else
    {
      v55 = (_BYTE *)*((_QWORD *)v54 + 4);
      if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
      {
        llvm::raw_ostream::write(v54);
      }
      else
      {
        *((_QWORD *)v54 + 4) = v55 + 1;
        *v55 = 95;
      }
      llvm::raw_ostream::operator<<();
    }
  }
}

llvm::raw_ostream *sub_22F089830(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  llvm::raw_ostream *result;
  _BYTE *v24;
  uint64_t v25;

  v12 = a2 & 0xFFFFFFFFFFFFFFF8;
  v13 = (llvm::raw_ostream *)*((_QWORD *)a1 + 1);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 78;
  }
  if ((*(_DWORD *)(v12 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC && v12 != 0)
  {
    v16 = sub_22E46BB88(v12);
    sub_22F079B94((uint64_t)a1, v16 & 0xFFFFFFFFFFFFFFFDLL, 0);
    v17 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v17)
      v18 = *(_BYTE *)(v17 + 16) == 26;
    else
      v18 = 0;
    if (!v18)
      v17 = sub_22F10CF48(v17);
    sub_22F088CC8(a1, *(_DWORD *)(v17 + 20) & 3);
  }
  v25 = 0;
  v19 = sub_22F087584(a2, a3, &v25);
  if (v19)
  {
    v21 = v19;
    sub_22F088228((uint64_t)a1, v19, v20, a6);
    if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 26 >= 7)
        v22 = 0;
      else
        v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v22 = 0;
    }
    sub_22F086C28((uint64_t *)a1, v22, v25);
  }
  else
  {
    sub_22F08834C((uint64_t)a1, a4, a6);
    sub_22F08459C((uint64_t *)a1, a2, a3, a4, a5);
  }
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 1);
  v24 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v24 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v24 + 1;
  *v24 = 69;
  return result;
}

void **sub_22F0899DC(void **a1)
{
  unsigned int *v2;
  void *v3;
  void **v4;

  v2 = (unsigned int *)a1[21];
  if (v2)
  {
    sub_22F3E15EC(v2, *(_QWORD *)v2 + 16 * v2[2], *a1, (_BYTE *)*a1 + 16 * *((unsigned int *)a1 + 2));
    sub_22F3E15EC((unsigned int *)a1[21] + 20, *((_QWORD *)a1[21] + 10) + 16 * *((unsigned int *)a1[21] + 22), a1[10], (_BYTE *)a1[10] + 16 * *((unsigned int *)a1 + 22));
    v3 = a1[21];
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)a1[20] = v3;
  v4 = (void **)a1[10];
  if (v4 != a1 + 12)
    free(v4);
  if (*a1 != a1 + 2)
    free(*a1);
  return a1;
}

llvm::raw_ostream *sub_22F089A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  int v16;
  int v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  llvm::raw_ostream *result;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v4 = *(_QWORD *)(a2 + 120);
  if (v4 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 250) & 0xFu) <= 6)
  {
    v5 = (*(_DWORD *)(v4 + 28) & 0x7F) - 49;
    v6 = v5 > 0x11;
    v7 = (1 << v5) & 0x3F807;
    if (!v6 && v7 != 0)
    {
      v9 = *(_QWORD *)(v4 + 16);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      if ((*(_WORD *)(v10 + 8) & 0x7Eu) - 34 <= 3)
      {
        v11 = *(_QWORD *)(v4 + 40);
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 7) == 0 && v12 != 0)
        {
          sub_22E54B3A4(a1[1], v12);
          sub_22F083BA0((uint64_t)a1, v4, 0);
          v14 = (llvm::raw_ostream *)a1[1];
          v15 = (_BYTE *)*((_QWORD *)v14 + 4);
          if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
          {
            llvm::raw_ostream::write(v14);
          }
          else
          {
            *((_QWORD *)v14 + 4) = v15 + 1;
            *v15 = 77;
          }
        }
      }
    }
  }
  v16 = *(_DWORD *)(a2 + 116);
  if (v16)
  {
    v17 = v16 - 1;
  }
  else
  {
    v22 = *a1 + 32;
    v23 = *(unsigned int *)(*a1 + 40);
    v24 = a2;
    v25 = v23;
    sub_22F2611B4(v22, &v24, &v25, (uint64_t)v26);
    v17 = *(_DWORD *)(v26[0] + 8);
  }
  v18 = (llvm::raw_ostream *)a1[1];
  v19 = (_WORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 <= 1uLL)
  {
    llvm::raw_ostream::write(v18, "Ub");
    if (!v17)
      goto LABEL_22;
    goto LABEL_21;
  }
  *v19 = 25173;
  *((_QWORD *)v18 + 4) += 2;
  if (v17)
LABEL_21:
    llvm::raw_ostream::operator<<();
LABEL_22:
  result = (llvm::raw_ostream *)a1[1];
  v21 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v21 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v21 + 1;
  *v21 = 95;
  return result;
}

int64x2_t *sub_22F089C30(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int64x2_t *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3E1B90(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (int64x2_t *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (int64x2_t *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_OWORD *sub_22F089D00(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t a6)
{
  const void *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t *v15;
  BOOL v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (const void *)*a1;
  v9 = *a2;
  if (*a1 == *a2)
  {
LABEL_10:
    v19 = 0;
    v17 = (_OWORD *)*a5;
  }
  else
  {
    v12 = *a3;
    if (v12 != *a4)
    {
      while (!sub_22E78C8FC(a6, (uint64_t)v8, v12))
      {
        v16 = sub_22E78C8FC(a6, *a3, *a1);
        v15 = a3;
        if (!v16)
          goto LABEL_6;
LABEL_7:
        *v15 += 16;
        v8 = (const void *)*a1;
        v9 = *a2;
        if (*a1 == *a2)
          goto LABEL_10;
        v12 = *a3;
        if (*a3 == *a4)
          goto LABEL_9;
      }
      *(_OWORD *)*a5 = *(_OWORD *)*a1;
      v15 = a5;
LABEL_6:
      *a1 += 16;
      goto LABEL_7;
    }
LABEL_9:
    v17 = (_OWORD *)*a5;
    v18 = v9 - (_QWORD)v8;
    memmove(v17, v8, v9 - (_QWORD)v8);
    v19 = v18 >> 4;
  }
  return &v17[v19];
}

llvm::raw_ostream *sub_22F089DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  _BYTE *v6;
  unint64_t v7;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *result;
  _BYTE *v14;

  v5 = *(llvm::raw_ostream **)(a1 + 8);
  v7 = *((_QWORD *)v5 + 3);
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (a3)
  {
    if ((unint64_t)v6 >= v7)
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 118;
    }
    sub_22F087528(a1, a2);
    v9 = *(llvm::raw_ostream **)(a1 + 8);
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      llvm::raw_ostream::write(v9);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 95;
    }
    v11 = a1;
    v12 = a3;
  }
  else
  {
    if ((unint64_t)v6 >= v7)
    {
      llvm::raw_ostream::write(v5);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 104;
    }
    v11 = a1;
    v12 = a2;
  }
  sub_22F087528(v11, v12);
  result = *(llvm::raw_ostream **)(a1 + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v14 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v14 + 1;
  *v14 = 95;
  return result;
}

uint64_t sub_22F089F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t result;
  _WORD *v21;
  _WORD *v22;
  __int16 v23;
  char v24;
  _WORD *v25;
  unint64_t v26;
  BOOL v27;
  _BYTE *v28;
  _WORD *v29;

  v5 = *(_QWORD *)(a2 + 2000);
  v6 = sub_22F10AEAC(a3);
  v7 = sub_22F36FC78(a2, v6);
  sub_22EF5E978(a2, v6);
  sub_22F0815CC(*(llvm::raw_ostream **)(a1 + 8), "__vtptrauth", 0xBuLL);
  v8 = *(llvm::raw_ostream **)(a1 + 8);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "I");
  }
  else
  {
    *v9 = 73;
    ++*((_QWORD *)v8 + 4);
  }
  if ((*(_BYTE *)(v7 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v7);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    v13 = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      v13 = *(uint64_t **)v10;
      while (*(_WORD *)(*v13 + 32) != 343)
      {
        ++v13;
        v14 -= 8;
        if (!v14)
          goto LABEL_17;
      }
    }
    if (v13 != &v11[v12])
    {
      do
      {
        v16 = *v11++;
        v15 = v16;
      }
      while (*(_WORD *)(v16 + 32) != 343);
      v17 = (_WORD *)*((_QWORD *)v8 + 4);
      if (*((_QWORD *)v8 + 3) - (_QWORD)v17 > 1uLL)
      {
        *v17 = 27212;
        *((_QWORD *)v8 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v8, "Lj");
      }
      llvm::raw_ostream::operator<<();
      v18 = (_WORD *)*((_QWORD *)v8 + 4);
      v19 = *((_QWORD *)v8 + 3) - (_QWORD)v18;
      if (*(_DWORD *)(v15 + 40))
      {
        if (v19 > 1)
        {
          *v18 = 25164;
          *((_QWORD *)v8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v8, "Lb");
        }
        result = llvm::raw_ostream::operator<<();
      }
      else
      {
        if (v19 > 1)
        {
          *v18 = 25164;
          *((_QWORD *)v8 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v8, "Lb");
        }
        result = llvm::raw_ostream::operator<<();
      }
      switch(*(_DWORD *)(v15 + 44))
      {
        case 0:
          v23 = *(_WORD *)(v5 + 16);
          goto LABEL_22;
        case 1:
          v25 = (_WORD *)*((_QWORD *)v8 + 4);
          if (*((_QWORD *)v8 + 3) - (_QWORD)v25 > 1uLL)
            goto LABEL_32;
          goto LABEL_24;
        case 2:
          v25 = (_WORD *)*((_QWORD *)v8 + 4);
          v27 = *((_QWORD *)v8 + 3) - (_QWORD)v25 > 1uLL;
          goto LABEL_34;
        case 3:
          v29 = (_WORD *)*((_QWORD *)v8 + 4);
          if (*((_QWORD *)v8 + 3) - (_QWORD)v29 <= 1uLL)
            goto LABEL_24;
          *v29 = 27212;
          *((_QWORD *)v8 + 4) += 2;
          goto LABEL_25;
        default:
          goto LABEL_37;
      }
    }
  }
LABEL_17:
  v21 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v21 > 1uLL)
  {
    *v21 = 27212;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Lj");
  }
  llvm::raw_ostream::operator<<();
  v22 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 25164;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Lb");
  }
  llvm::raw_ostream::operator<<();
  v23 = *(_WORD *)(v5 + 16);
LABEL_22:
  v24 = v23;
  v25 = (_WORD *)*((_QWORD *)v8 + 4);
  v26 = *((_QWORD *)v8 + 3) - (_QWORD)v25;
  v27 = v26 > 1;
  if ((v24 & 0x10) != 0)
  {
LABEL_34:
    if (v27)
    {
      *v25 = 27212;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v8, "Lj");
    }
    result = llvm::raw_ostream::operator<<();
  }
  else
  {
    if (v26 > 1)
    {
LABEL_32:
      *v25 = 27212;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
LABEL_24:
      llvm::raw_ostream::write(v8, "Lj");
    }
LABEL_25:
    result = llvm::raw_ostream::operator<<();
  }
LABEL_37:
  v28 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v28)
    return llvm::raw_ostream::write(v8, "E");
  *v28 = 69;
  ++*((_QWORD *)v8 + 4);
  return result;
}

void sub_22F08A2FC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  llvm::json::OStream *v5;
  std::string __p;
  _BYTE v7[32];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v4 = sub_22EFB5D7C(a2);
    if (v4 != a2)
    {
      v5 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v4);
      sub_22E732810((uint64_t)v7, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v5, (const llvm::json::Value *)v7);
      llvm::json::OStream::attributeEnd(v5);
      llvm::json::Value::destroy((llvm::json::Value *)v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A3C4(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 10));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A494(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 6));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A564(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 11));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A634(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 8));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A704(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 12));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A7D4(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 13));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22F08A8A4(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  llvm::json::OStream *v4;
  std::string __p;
  _BYTE v6[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a2 & 3) == 0)
  {
    v3 = sub_22E3CD31C(a2, (uint64_t)(a2 - 9));
    if (v3)
    {
      v4 = (llvm::json::OStream *)(a1 + 1048);
      sub_22F08CA44(&__p, v3);
      sub_22E732810((uint64_t)v6, (__int128 *)&__p);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v6);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_22F08A974(uint64_t a1, unint64_t a2)
{
  char v4;
  const char *v5;
  size_t v6;
  std::string __p;
  _BYTE v9[32];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  switch(*(_WORD *)(a2 + 32))
  {
    case 0:
      v4 = 0;
      v5 = "AddressSpaceAttr";
      break;
    case 1:
      v4 = 0;
      v5 = "ArmMveStrictPolymorphismAttr";
      break;
    case 2:
      v4 = 0;
      v5 = "BTFTypeTagAttr";
      break;
    case 3:
      v4 = 0;
      v5 = "CmseNSCallAttr";
      break;
    case 4:
      v4 = 0;
      v5 = "MetalConstantAddressSpaceAttr";
      break;
    case 5:
      v4 = 0;
      v5 = "MetalDeviceAddressSpaceAttr";
      break;
    case 6:
      v4 = 0;
      v5 = "MetalObjectDataAddressSpaceAttr";
      break;
    case 7:
      v4 = 0;
      v5 = "MetalRayDataAddressSpaceAttr";
      break;
    case 8:
      v4 = 0;
      v5 = "MetalThreadAddressSpaceAttr";
      break;
    case 9:
      v4 = 0;
      v5 = "MetalThreadGroupAddressSpaceAttr";
      break;
    case 0xA:
      v4 = 0;
      v5 = "MetalThreadGroupImageblockAddressSpaceAttr";
      break;
    case 0xB:
      v4 = 0;
      v5 = "MetalVisibleAttr";
      break;
    case 0xC:
      v4 = 0;
      v5 = "NoDerefAttr";
      break;
    case 0xD:
      v4 = 0;
      v5 = "ObjCGCAttr";
      break;
    case 0xE:
      v4 = 0;
      v5 = "ObjCInertUnsafeUnretainedAttr";
      break;
    case 0xF:
      v4 = 0;
      v5 = "ObjCKindOfAttr";
      break;
    case 0x10:
      v4 = 0;
      v5 = "OpenCLConstantAddressSpaceAttr";
      break;
    case 0x11:
      v4 = 0;
      v5 = "OpenCLGenericAddressSpaceAttr";
      break;
    case 0x12:
      v4 = 0;
      v5 = "OpenCLGlobalAddressSpaceAttr";
      break;
    case 0x13:
      v4 = 0;
      v5 = "OpenCLGlobalDeviceAddressSpaceAttr";
      break;
    case 0x14:
      v4 = 0;
      v5 = "OpenCLGlobalHostAddressSpaceAttr";
      break;
    case 0x15:
      v4 = 0;
      v5 = "OpenCLInteropConstantAddressSpaceAttr";
      break;
    case 0x16:
      v4 = 0;
      v5 = "OpenCLInteropGlobalAddressSpaceAttr";
      break;
    case 0x17:
      v4 = 0;
      v5 = "OpenCLInteropLocalAddressSpaceAttr";
      break;
    case 0x18:
      v4 = 0;
      v5 = "OpenCLInteropPrivateAddressSpaceAttr";
      break;
    case 0x19:
      v4 = 0;
      v5 = "OpenCLLocalAddressSpaceAttr";
      break;
    case 0x1A:
      v4 = 0;
      v5 = "OpenCLPrivateAddressSpaceAttr";
      break;
    case 0x1B:
      v4 = 0;
      v5 = "PointerAuthAttr";
      break;
    case 0x1C:
      v4 = 0;
      v5 = "Ptr32Attr";
      break;
    case 0x1D:
      v4 = 0;
      v5 = "Ptr64Attr";
      break;
    case 0x1E:
      v4 = 0;
      v5 = "PtrAutoAttrAttr";
      break;
    case 0x1F:
      v4 = 0;
      v5 = "PtrAutoNullTerminatedAttrAttr";
      break;
    case 0x20:
      v4 = 0;
      v5 = "SPtrAttr";
      break;
    case 0x21:
      v4 = 0;
      v5 = "TypeNonNullAttr";
      break;
    case 0x22:
      v4 = 0;
      v5 = "TypeNullUnspecifiedAttr";
      break;
    case 0x23:
      v4 = 0;
      v5 = "TypeNullableAttr";
      break;
    case 0x24:
      v4 = 0;
      v5 = "TypeNullableResultAttr";
      break;
    case 0x25:
      v4 = 0;
      v5 = "UPtrAttr";
      break;
    case 0x26:
      v4 = 0;
      v5 = "XnuUsageSemanticsAttr";
      break;
    case 0x27:
      v4 = 0;
      v5 = "FallThroughAttr";
      break;
    case 0x28:
      v4 = 0;
      v5 = "LikelyAttr";
      break;
    case 0x29:
      v4 = 0;
      v5 = "MustTailAttr";
      break;
    case 0x2A:
      v4 = 0;
      v5 = "OpenCLUnrollHintAttr";
      break;
    case 0x2B:
      v4 = 0;
      v5 = "SuppressAttr";
      break;
    case 0x2C:
      v4 = 0;
      v5 = "UnlikelyAttr";
      break;
    case 0x2D:
      v4 = 0;
      v5 = "AlwaysInlineAttr";
      break;
    case 0x2E:
      v4 = 0;
      v5 = "AnalyzerSuppressAttr";
      break;
    case 0x2F:
      v4 = 0;
      v5 = "NoInlineAttr";
      break;
    case 0x30:
      v4 = 0;
      v5 = "NoMergeAttr";
      break;
    case 0x31:
      v4 = 0;
      v5 = "AArch64SVEPcsAttr";
      break;
    case 0x32:
      v4 = 0;
      v5 = "AArch64VectorPcsAttr";
      break;
    case 0x33:
      v4 = 0;
      v5 = "AcquireHandleAttr";
      break;
    case 0x34:
      v4 = 0;
      v5 = "AnyX86NoCfCheckAttr";
      break;
    case 0x35:
      v4 = 0;
      v5 = "CDeclAttr";
      break;
    case 0x36:
      v4 = 0;
      v5 = "FastCallAttr";
      break;
    case 0x37:
      v4 = 0;
      v5 = "IntelOclBiccAttr";
      break;
    case 0x38:
      v4 = 0;
      v5 = "IntersectionCallAttr";
      break;
    case 0x39:
      v4 = 0;
      v5 = "LifetimeBoundAttr";
      break;
    case 0x3A:
      v4 = 0;
      v5 = "MSABIAttr";
      break;
    case 0x3B:
      v4 = 0;
      v5 = "NSReturnsRetainedAttr";
      break;
    case 0x3C:
      v4 = 0;
      v5 = "ObjCOwnershipAttr";
      break;
    case 0x3D:
      v4 = 0;
      v5 = "PascalAttr";
      break;
    case 0x3E:
      v4 = 0;
      v5 = "PcsAttr";
      break;
    case 0x3F:
      v4 = 0;
      v5 = "PreserveAllAttr";
      break;
    case 0x40:
      v4 = 0;
      v5 = "PreserveMostAttr";
      break;
    case 0x41:
      v4 = 0;
      v5 = "RegCallAttr";
      break;
    case 0x42:
      v4 = 0;
      v5 = "StdCallAttr";
      break;
    case 0x43:
      v4 = 0;
      v5 = "SwiftAsyncCallAttr";
      break;
    case 0x44:
      v4 = 0;
      v5 = "SwiftCallAttr";
      break;
    case 0x45:
      v4 = 0;
      v5 = "SysVABIAttr";
      break;
    case 0x46:
      v4 = 0;
      v5 = "ThisCallAttr";
      break;
    case 0x47:
      v4 = 0;
      v5 = "VAListSizeAttr";
      break;
    case 0x48:
      v4 = 0;
      v5 = "VectorCallAttr";
      break;
    case 0x49:
      v4 = 0;
      v5 = "SwiftAsyncContextAttr";
      break;
    case 0x4A:
      v4 = 0;
      v5 = "SwiftContextAttr";
      break;
    case 0x4B:
      v4 = 0;
      v5 = "SwiftErrorResultAttr";
      break;
    case 0x4C:
      v4 = 0;
      v5 = "SwiftIndirectResultAttr";
      break;
    case 0x4D:
      v4 = 0;
      v5 = "AnnotateAttr";
      break;
    case 0x4E:
      v4 = 0;
      v5 = "CFConsumedAttr";
      break;
    case 0x4F:
      v4 = 0;
      v5 = "CarriesDependencyAttr";
      break;
    case 0x50:
      v4 = 0;
      v5 = "NSConsumedAttr";
      break;
    case 0x51:
      v4 = 0;
      v5 = "NonNullAttr";
      break;
    case 0x52:
      v4 = 0;
      v5 = "OSConsumedAttr";
      break;
    case 0x53:
      v4 = 0;
      v5 = "PassObjectSizeAttr";
      break;
    case 0x54:
      v4 = 0;
      v5 = "ReleaseHandleAttr";
      break;
    case 0x55:
      v4 = 0;
      v5 = "UseHandleAttr";
      break;
    case 0x56:
      v4 = 0;
      v5 = "AMDGPUFlatWorkGroupSizeAttr";
      break;
    case 0x57:
      v4 = 0;
      v5 = "AMDGPUNumSGPRAttr";
      break;
    case 0x58:
      v4 = 0;
      v5 = "AMDGPUNumVGPRAttr";
      break;
    case 0x59:
      v4 = 0;
      v5 = "AMDGPUWavesPerEUAttr";
      break;
    case 0x5A:
      v4 = 0;
      v5 = "ARMInterruptAttr";
      break;
    case 0x5B:
      v4 = 0;
      v5 = "AVRInterruptAttr";
      break;
    case 0x5C:
      v4 = 0;
      v5 = "AVRSignalAttr";
      break;
    case 0x5D:
      v4 = 0;
      v5 = "AcquireCapabilityAttr";
      break;
    case 0x5E:
      v4 = 0;
      v5 = "AcquiredAfterAttr";
      break;
    case 0x5F:
      v4 = 0;
      v5 = "AcquiredBeforeAttr";
      break;
    case 0x60:
      v4 = 0;
      v5 = "AlignMac68kAttr";
      break;
    case 0x61:
      v4 = 0;
      v5 = "AlignNaturalAttr";
      break;
    case 0x62:
      v4 = 0;
      v5 = "AlignedAttr";
      break;
    case 0x63:
      v4 = 0;
      v5 = "AllocAlignAttr";
      break;
    case 0x64:
      v4 = 0;
      v5 = "AllocSizeAttr";
      break;
    case 0x65:
      v4 = 0;
      v5 = "AlwaysDestroyAttr";
      break;
    case 0x66:
      v4 = 0;
      v5 = "AnalyzerNoReturnAttr";
      break;
    case 0x67:
      v4 = 0;
      v5 = "AnyX86InterruptAttr";
      break;
    case 0x68:
      v4 = 0;
      v5 = "AnyX86NoCallerSavedRegistersAttr";
      break;
    case 0x69:
      v4 = 0;
      v5 = "ArcWeakrefUnavailableAttr";
      break;
    case 0x6A:
      v4 = 0;
      v5 = "ArgumentWithTypeTagAttr";
      break;
    case 0x6B:
      v4 = 0;
      v5 = "ArmBuiltinAliasAttr";
      break;
    case 0x6C:
      v4 = 0;
      v5 = "ArtificialAttr";
      break;
    case 0x6D:
      v4 = 0;
      v5 = "AsmLabelAttr";
      break;
    case 0x6E:
      v4 = 0;
      v5 = "AssertCapabilityAttr";
      break;
    case 0x6F:
      v4 = 0;
      v5 = "AssertExclusiveLockAttr";
      break;
    case 0x70:
      v4 = 0;
      v5 = "AssertSharedLockAttr";
      break;
    case 0x71:
      v4 = 0;
      v5 = "AssumeAlignedAttr";
      break;
    case 0x72:
      v4 = 0;
      v5 = "AssumptionAttr";
      break;
    case 0x73:
      v4 = 0;
      v5 = "AvailabilityAttr";
      break;
    case 0x74:
      v4 = 0;
      v5 = "BPFPreserveAccessIndexAttr";
      break;
    case 0x75:
      v4 = 0;
      v5 = "BTFDeclTagAttr";
      break;
    case 0x76:
      v4 = 0;
      v5 = "BlocksAttr";
      break;
    case 0x77:
      v4 = 0;
      v5 = "BuiltinAttr";
      break;
    case 0x78:
      v4 = 0;
      v5 = "C11NoReturnAttr";
      break;
    case 0x79:
      v4 = 0;
      v5 = "CFAuditedTransferAttr";
      break;
    case 0x7A:
      v4 = 0;
      v5 = "CFGuardAttr";
      break;
    case 0x7B:
      v4 = 0;
      v5 = "CFICanonicalJumpTableAttr";
      break;
    case 0x7C:
      v4 = 0;
      v5 = "CFReturnsNotRetainedAttr";
      break;
    case 0x7D:
      v4 = 0;
      v5 = "CFReturnsRetainedAttr";
      break;
    case 0x7E:
      v4 = 0;
      v5 = "CFUnknownTransferAttr";
      break;
    case 0x7F:
      v4 = 0;
      v5 = "CPUDispatchAttr";
      break;
    case 0x80:
      v4 = 0;
      v5 = "CPUSpecificAttr";
      break;
    case 0x81:
      v4 = 0;
      v5 = "CUDAConstantAttr";
      break;
    case 0x82:
      v4 = 0;
      v5 = "CUDADeviceAttr";
      break;
    case 0x83:
      v4 = 0;
      v5 = "CUDADeviceBuiltinSurfaceTypeAttr";
      break;
    case 0x84:
      v4 = 0;
      v5 = "CUDADeviceBuiltinTextureTypeAttr";
      break;
    case 0x85:
      v4 = 0;
      v5 = "CUDAGlobalAttr";
      break;
    case 0x86:
      v4 = 0;
      v5 = "CUDAHostAttr";
      break;
    case 0x87:
      v4 = 0;
      v5 = "CUDAInvalidTargetAttr";
      break;
    case 0x88:
      v4 = 0;
      v5 = "CUDALaunchBoundsAttr";
      break;
    case 0x89:
      v4 = 0;
      v5 = "CUDASharedAttr";
      break;
    case 0x8A:
      v4 = 0;
      v5 = "CXX11NoReturnAttr";
      break;
    case 0x8B:
      v4 = 0;
      v5 = "CallableWhenAttr";
      break;
    case 0x8C:
      v4 = 0;
      v5 = "CallbackAttr";
      break;
    case 0x8D:
      v4 = 0;
      v5 = "CapabilityAttr";
      break;
    case 0x8E:
      v4 = 0;
      v5 = "CapturedRecordAttr";
      break;
    case 0x8F:
      v4 = 0;
      v5 = "CleanupAttr";
      break;
    case 0x90:
      v4 = 0;
      v5 = "CmseNSEntryAttr";
      break;
    case 0x91:
      v4 = 0;
      v5 = "CodeSegAttr";
      break;
    case 0x92:
      v4 = 0;
      v5 = "ColdAttr";
      break;
    case 0x93:
      v4 = 0;
      v5 = "CommonAttr";
      break;
    case 0x94:
      v4 = 0;
      v5 = "ConstAttr";
      break;
    case 0x95:
      v4 = 0;
      v5 = "ConstInitAttr";
      break;
    case 0x96:
      v4 = 0;
      v5 = "ConstructorAttr";
      break;
    case 0x97:
      v4 = 0;
      v5 = "ConsumableAttr";
      break;
    case 0x98:
      v4 = 0;
      v5 = "ConsumableAutoCastAttr";
      break;
    case 0x99:
      v4 = 0;
      v5 = "ConsumableSetOnReadAttr";
      break;
    case 0x9A:
      v4 = 0;
      v5 = "ConvergentAttr";
      break;
    case 0x9B:
      v4 = 0;
      v5 = "DLLExportAttr";
      break;
    case 0x9C:
      v4 = 0;
      v5 = "DLLExportStaticLocalAttr";
      break;
    case 0x9D:
      v4 = 0;
      v5 = "DLLImportAttr";
      break;
    case 0x9E:
      v4 = 0;
      v5 = "DLLImportStaticLocalAttr";
      break;
    case 0x9F:
      v4 = 0;
      v5 = "DependerDeclsAttr";
      break;
    case 0xA0:
      v4 = 0;
      v5 = "DeprecatedAttr";
      break;
    case 0xA1:
      v4 = 0;
      v5 = "DestructorAttr";
      break;
    case 0xA2:
      v4 = 0;
      v5 = "DiagnoseAsBuiltinAttr";
      break;
    case 0xA3:
      v4 = 0;
      v5 = "DiagnoseIfAttr";
      break;
    case 0xA4:
      v4 = 0;
      v5 = "DisableSanitizerInstrumentationAttr";
      break;
    case 0xA5:
      v4 = 0;
      v5 = "DisableTailCallsAttr";
      break;
    case 0xA6:
      v4 = 0;
      v5 = "EmptyBasesAttr";
      break;
    case 0xA7:
      v4 = 0;
      v5 = "EnableIfAttr";
      break;
    case 0xA8:
      v4 = 0;
      v5 = "EnforceTCBAttr";
      break;
    case 0xA9:
      v4 = 0;
      v5 = "EnforceTCBLeafAttr";
      break;
    case 0xAA:
      v4 = 0;
      v5 = "EnumExtensibilityAttr";
      break;
    case 0xAB:
      v4 = 0;
      v5 = "ErrorAttr";
      break;
    case 0xAC:
      v4 = 0;
      v5 = "ExcludeFromExplicitInstantiationAttr";
      break;
    case 0xAD:
      v4 = 0;
      v5 = "ExclusiveTrylockFunctionAttr";
      break;
    case 0xAE:
      v4 = 0;
      v5 = "ExternalSourceSymbolAttr";
      break;
    case 0xAF:
      v4 = 0;
      v5 = "ExternallyInitializedAttr";
      break;
    case 0xB0:
      v4 = 0;
      v5 = "FinalAttr";
      break;
    case 0xB1:
      v4 = 0;
      v5 = "FlagEnumAttr";
      break;
    case 0xB2:
      v4 = 0;
      v5 = "FlattenAttr";
      break;
    case 0xB3:
      v4 = 0;
      v5 = "FormatAttr";
      break;
    case 0xB4:
      v4 = 0;
      v5 = "FormatArgAttr";
      break;
    case 0xB5:
      v4 = 0;
      v5 = "GNUInlineAttr";
      break;
    case 0xB6:
      v4 = 0;
      v5 = "GuardedByAttr";
      break;
    case 0xB7:
      v4 = 0;
      v5 = "GuardedVarAttr";
      break;
    case 0xB8:
      v4 = 0;
      v5 = "HIPManagedAttr";
      break;
    case 0xB9:
      v4 = 0;
      v5 = "HLSLNumThreadsAttr";
      break;
    case 0xBA:
      v4 = 0;
      v5 = "HLSLSV_GroupIndexAttr";
      break;
    case 0xBB:
      v4 = 0;
      v5 = "HLSLShaderAttr";
      break;
    case 0xBC:
      v4 = 0;
      v5 = "HotAttr";
      break;
    case 0xBD:
      v4 = 0;
      v5 = "IBActionAttr";
      break;
    case 0xBE:
      v4 = 0;
      v5 = "IBOutletAttr";
      break;
    case 0xBF:
      v4 = 0;
      v5 = "IBOutletCollectionAttr";
      break;
    case 0xC0:
      v4 = 0;
      v5 = "InitPriorityAttr";
      break;
    case 0xC1:
      v4 = 0;
      v5 = "InternalLinkageAttr";
      break;
    case 0xC2:
      v4 = 0;
      v5 = "LTOVisibilityPublicAttr";
      break;
    case 0xC3:
      v4 = 0;
      v5 = "LayoutVersionAttr";
      break;
    case 0xC4:
      v4 = 0;
      v5 = "LeafAttr";
      break;
    case 0xC5:
      v4 = 0;
      v5 = "LockReturnedAttr";
      break;
    case 0xC6:
      v4 = 0;
      v5 = "LocksExcludedAttr";
      break;
    case 0xC7:
      v4 = 0;
      v5 = "M68kInterruptAttr";
      break;
    case 0xC8:
      v4 = 0;
      v5 = "MIGServerRoutineAttr";
      break;
    case 0xC9:
      v4 = 0;
      v5 = "MSAllocatorAttr";
      break;
    case 0xCA:
      v4 = 0;
      v5 = "MSInheritanceAttr";
      break;
    case 0xCB:
      v4 = 0;
      v5 = "MSNoVTableAttr";
      break;
    case 0xCC:
      v4 = 0;
      v5 = "MSP430InterruptAttr";
      break;
    case 0xCD:
      v4 = 0;
      v5 = "MSStructAttr";
      break;
    case 0xCE:
      v4 = 0;
      v5 = "MSVtorDispAttr";
      break;
    case 0xCF:
      v4 = 0;
      v5 = "MaxFieldAlignmentAttr";
      break;
    case 0xD0:
      v4 = 0;
      v5 = "MayAliasAttr";
      break;
    case 0xD1:
      v4 = 0;
      v5 = "MaybeUndefAttr";
      break;
    case 0xD2:
      v4 = 0;
      v5 = "MetalFunctionConstantAttr";
      break;
    case 0xD3:
      v4 = 0;
      v5 = "MicroMipsAttr";
      break;
    case 0xD4:
      v4 = 0;
      v5 = "MinSizeAttr";
      break;
    case 0xD5:
      v4 = 0;
      v5 = "MinVectorWidthAttr";
      break;
    case 0xD6:
      v4 = 0;
      v5 = "Mips16Attr";
      break;
    case 0xD7:
      v4 = 0;
      v5 = "MipsInterruptAttr";
      break;
    case 0xD8:
      v4 = 0;
      v5 = "MipsLongCallAttr";
      break;
    case 0xD9:
      v4 = 0;
      v5 = "MipsShortCallAttr";
      break;
    case 0xDA:
      v4 = 0;
      v5 = "NSConsumesSelfAttr";
      break;
    case 0xDB:
      v4 = 0;
      v5 = "NSErrorDomainAttr";
      break;
    case 0xDC:
      v4 = 0;
      v5 = "NSReturnsAutoreleasedAttr";
      break;
    case 0xDD:
      v4 = 0;
      v5 = "NSReturnsNotRetainedAttr";
      break;
    case 0xDE:
      v4 = 0;
      v5 = "NakedAttr";
      break;
    case 0xDF:
      v4 = 0;
      v5 = "NoAliasAttr";
      break;
    case 0xE0:
      v4 = 0;
      v5 = "NoCommonAttr";
      break;
    case 0xE1:
      v4 = 0;
      v5 = "NoDebugAttr";
      break;
    case 0xE2:
      v4 = 0;
      v5 = "NoDestroyAttr";
      break;
    case 0xE3:
      v4 = 0;
      v5 = "NoDuplicateAttr";
      break;
    case 0xE4:
      v4 = 0;
      v5 = "NoInstrumentFunctionAttr";
      break;
    case 0xE5:
      v4 = 0;
      v5 = "NoMicroMipsAttr";
      break;
    case 0xE6:
      v4 = 0;
      v5 = "NoMips16Attr";
      break;
    case 0xE7:
      v4 = 0;
      v5 = "NoProfileFunctionAttr";
      break;
    case 0xE8:
      v4 = 0;
      v5 = "NoRandomizeLayoutAttr";
      break;
    case 0xE9:
      v4 = 0;
      v5 = "NoReturnAttr";
      break;
    case 0xEA:
      v4 = 0;
      v5 = "NoSanitizeAttr";
      break;
    case 0xEB:
      v4 = 0;
      v5 = "NoSpeculativeLoadHardeningAttr";
      break;
    case 0xEC:
      v4 = 0;
      v5 = "NoSplitStackAttr";
      break;
    case 0xED:
      v4 = 0;
      v5 = "NoStackProtectorAttr";
      break;
    case 0xEE:
      v4 = 0;
      v5 = "NoThreadSafetyAnalysisAttr";
      break;
    case 0xEF:
      v4 = 0;
      v5 = "NoThrowAttr";
      break;
    case 0xF0:
      v4 = 0;
      v5 = "NoTracepointAttr";
      break;
    case 0xF1:
      v4 = 0;
      v5 = "NoUniqueAddressAttr";
      break;
    case 0xF2:
      v4 = 0;
      v5 = "NotTailCalledAttr";
      break;
    case 0xF3:
      v4 = 0;
      v5 = "OMPAllocateDeclAttr";
      break;
    case 0xF4:
      v4 = 0;
      v5 = "OMPCaptureNoInitAttr";
      break;
    case 0xF5:
      v4 = 0;
      v5 = "OMPDeclareTargetDeclAttr";
      break;
    case 0xF6:
      v4 = 0;
      v5 = "OMPDeclareVariantAttr";
      break;
    case 0xF7:
      v4 = 0;
      v5 = "OMPThreadPrivateDeclAttr";
      break;
    case 0xF8:
      v4 = 0;
      v5 = "OSConsumesThisAttr";
      break;
    case 0xF9:
      v4 = 0;
      v5 = "OSReturnsNotRetainedAttr";
      break;
    case 0xFA:
      v4 = 0;
      v5 = "OSReturnsRetainedAttr";
      break;
    case 0xFB:
      v4 = 0;
      v5 = "OSReturnsRetainedOnNonZeroAttr";
      break;
    case 0xFC:
      v4 = 0;
      v5 = "OSReturnsRetainedOnZeroAttr";
      break;
    case 0xFD:
      v4 = 0;
      v5 = "ObjCBridgeAttr";
      break;
    case 0xFE:
      v4 = 0;
      v5 = "ObjCBridgeMutableAttr";
      break;
    case 0xFF:
      v4 = 0;
      v5 = "ObjCBridgeRelatedAttr";
      break;
    case 0x100:
      v4 = 0;
      v5 = "ObjCCompleteDefinitionAttr";
      break;
    case 0x101:
      v4 = 0;
      v5 = "ObjCExceptionAttr";
      break;
    case 0x102:
      v4 = 0;
      v5 = "ObjCExplicitProtocolImplAttr";
      break;
    case 0x103:
      v4 = 0;
      v5 = "ObjCExternallyRetainedAttr";
      break;
    case 0x104:
      v4 = 0;
      v5 = "ObjCIndependentClassAttr";
      break;
    case 0x105:
      v4 = 0;
      v5 = "ObjCMethodFamilyAttr";
      break;
    case 0x106:
      v4 = 0;
      v5 = "ObjCNSObjectAttr";
      break;
    case 0x107:
      v4 = 0;
      v5 = "ObjCPreciseLifetimeAttr";
      break;
    case 0x108:
      v4 = 0;
      v5 = "ObjCRequiresPropertyDefsAttr";
      break;
    case 0x109:
      v4 = 0;
      v5 = "ObjCRequiresSuperAttr";
      break;
    case 0x10A:
      v4 = 0;
      v5 = "ObjCReturnsInnerPointerAttr";
      break;
    case 0x10B:
      v4 = 0;
      v5 = "ObjCRootClassAttr";
      break;
    case 0x10C:
      v4 = 0;
      v5 = "ObjCSubclassingRestrictedAttr";
      break;
    case 0x10D:
      v4 = 0;
      v5 = "ObjCSuppressDirectPropertyAttr";
      break;
    case 0x10E:
      v4 = 0;
      v5 = "OpenCLIntelReqdSubGroupSizeAttr";
      break;
    case 0x10F:
      v4 = 0;
      v5 = "OpenCLKernelAttr";
      break;
    case 0x110:
      v4 = 0;
      v5 = "OptimizeNoneAttr";
      break;
    case 0x111:
      v4 = 0;
      v5 = "OverrideAttr";
      break;
    case 0x112:
      v4 = 0;
      v5 = "OwnerAttr";
      break;
    case 0x113:
      v4 = 0;
      v5 = "OwnershipAttr";
      break;
    case 0x114:
      v4 = 0;
      v5 = "PackedAttr";
      break;
    case 0x115:
      v4 = 0;
      v5 = "ParamTypestateAttr";
      break;
    case 0x116:
      v4 = 0;
      v5 = "PatchableFunctionEntryAttr";
      break;
    case 0x117:
      v4 = 0;
      v5 = "PointerAttr";
      break;
    case 0x118:
      v4 = 0;
      v5 = "PointerAuthStructAttr";
      break;
    case 0x119:
      v4 = 0;
      v5 = "PragmaClangBSSSectionAttr";
      break;
    case 0x11A:
      v4 = 0;
      v5 = "PragmaClangDataSectionAttr";
      break;
    case 0x11B:
      v4 = 0;
      v5 = "PragmaClangRelroSectionAttr";
      break;
    case 0x11C:
      v4 = 0;
      v5 = "PragmaClangRodataSectionAttr";
      break;
    case 0x11D:
      v4 = 0;
      v5 = "PragmaClangTextSectionAttr";
      break;
    case 0x11E:
      v4 = 0;
      v5 = "PreferredNameAttr";
      break;
    case 0x11F:
      v4 = 0;
      v5 = "PtGuardedByAttr";
      break;
    case 0x120:
      v4 = 0;
      v5 = "PtGuardedVarAttr";
      break;
    case 0x121:
      v4 = 0;
      v5 = "PureAttr";
      break;
    case 0x122:
      v4 = 0;
      v5 = "RISCVInterruptAttr";
      break;
    case 0x123:
      v4 = 0;
      v5 = "RandomizeLayoutAttr";
      break;
    case 0x124:
      v4 = 0;
      v5 = "ReadOnlyPlacementAttr";
      break;
    case 0x125:
      v4 = 0;
      v5 = "ReinitializesAttr";
      break;
    case 0x126:
      v4 = 0;
      v5 = "ReleaseCapabilityAttr";
      break;
    case 0x127:
      v4 = 0;
      v5 = "ReqdWorkGroupSizeAttr";
      break;
    case 0x128:
      v4 = 0;
      v5 = "RequiresCapabilityAttr";
      break;
    case 0x129:
      v4 = 0;
      v5 = "RestrictAttr";
      break;
    case 0x12A:
      v4 = 0;
      v5 = "RetainAttr";
      break;
    case 0x12B:
      v4 = 0;
      v5 = "ReturnTypestateAttr";
      break;
    case 0x12C:
      v4 = 0;
      v5 = "ReturnsNonNullAttr";
      break;
    case 0x12D:
      v4 = 0;
      v5 = "ReturnsTwiceAttr";
      break;
    case 0x12E:
      v4 = 0;
      v5 = "SYCLKernelAttr";
      break;
    case 0x12F:
      v4 = 0;
      v5 = "SYCLSpecialClassAttr";
      break;
    case 0x130:
      v4 = 0;
      v5 = "ScopedLockableAttr";
      break;
    case 0x131:
      v4 = 0;
      v5 = "SectionAttr";
      break;
    case 0x132:
      v4 = 0;
      v5 = "SelectAnyAttr";
      break;
    case 0x133:
      v4 = 0;
      v5 = "SentinelAttr";
      break;
    case 0x134:
      v4 = 0;
      v5 = "SetTypestateAttr";
      break;
    case 0x135:
      v4 = 0;
      v5 = "SharedTrylockFunctionAttr";
      break;
    case 0x136:
      v4 = 0;
      v5 = "SpeculativeLoadHardeningAttr";
      break;
    case 0x137:
      v4 = 0;
      v5 = "StandaloneDebugAttr";
      break;
    case 0x138:
      v4 = 0;
      v5 = "StrictFPAttr";
      break;
    case 0x139:
      v4 = 0;
      v5 = "SwiftAsyncAttr";
      break;
    case 0x13A:
      v4 = 0;
      v5 = "SwiftAsyncErrorAttr";
      break;
    case 0x13B:
      v4 = 0;
      v5 = "SwiftAsyncNameAttr";
      break;
    case 0x13C:
      v4 = 0;
      v5 = "SwiftAttrAttr";
      break;
    case 0x13D:
      v4 = 0;
      v5 = "SwiftBridgeAttr";
      break;
    case 0x13E:
      v4 = 0;
      v5 = "SwiftBridgedTypedefAttr";
      break;
    case 0x13F:
      v4 = 0;
      v5 = "SwiftErrorAttr";
      break;
    case 0x140:
      v4 = 0;
      v5 = "SwiftImportAsNonGenericAttr";
      break;
    case 0x141:
      v4 = 0;
      v5 = "SwiftImportPropertyAsAccessorsAttr";
      break;
    case 0x142:
      v4 = 0;
      v5 = "SwiftNameAttr";
      break;
    case 0x143:
      v4 = 0;
      v5 = "SwiftNewTypeAttr";
      break;
    case 0x144:
      v4 = 0;
      v5 = "SwiftPrivateAttr";
      break;
    case 0x145:
      v4 = 0;
      v5 = "SymbolMetadataFootnoteAttr";
      break;
    case 0x146:
      v4 = 0;
      v5 = "TLSModelAttr";
      break;
    case 0x147:
      v4 = 0;
      v5 = "TargetAttr";
      break;
    case 0x148:
      v4 = 0;
      v5 = "TargetClonesAttr";
      break;
    case 0x149:
      v4 = 0;
      v5 = "TestTypestateAttr";
      break;
    case 0x14A:
      v4 = 0;
      v5 = "TracepointAttr";
      break;
    case 0x14B:
      v4 = 0;
      v5 = "TransparentUnionAttr";
      break;
    case 0x14C:
      v4 = 0;
      v5 = "TrivialABIAttr";
      break;
    case 0x14D:
      v4 = 0;
      v5 = "TryAcquireCapabilityAttr";
      break;
    case 0x14E:
      v4 = 0;
      v5 = "TypeTagForDatatypeAttr";
      break;
    case 0x14F:
      v4 = 0;
      v5 = "TypeVisibilityAttr";
      break;
    case 0x150:
      v4 = 0;
      v5 = "TypedMemoryAttr";
      break;
    case 0x151:
      v4 = 0;
      v5 = "UnavailableAttr";
      break;
    case 0x152:
      v4 = 0;
      v5 = "UninitializedAttr";
      break;
    case 0x153:
      v4 = 0;
      v5 = "UnusedAttr";
      break;
    case 0x154:
      v4 = 0;
      v5 = "UsedAttr";
      break;
    case 0x155:
      v4 = 0;
      v5 = "UsingIfExistsAttr";
      break;
    case 0x156:
      v4 = 0;
      v5 = "UuidAttr";
      break;
    case 0x157:
      v4 = 0;
      v5 = "VTablePointerAuthenticationAttr";
      break;
    case 0x158:
      v4 = 0;
      v5 = "VecReturnAttr";
      break;
    case 0x159:
      v4 = 0;
      v5 = "VecTypeHintAttr";
      break;
    case 0x15A:
      v4 = 0;
      v5 = "VisibilityAttr";
      break;
    case 0x15B:
      v4 = 0;
      v5 = "WarnUnusedAttr";
      break;
    case 0x15C:
      v4 = 0;
      v5 = "WarnUnusedResultAttr";
      break;
    case 0x15D:
      v4 = 0;
      v5 = "WeakAttr";
      break;
    case 0x15E:
      v4 = 0;
      v5 = "WeakImportAttr";
      break;
    case 0x15F:
      v4 = 0;
      v5 = "WeakRefAttr";
      break;
    case 0x160:
      v4 = 0;
      v5 = "WebAssemblyExportNameAttr";
      break;
    case 0x161:
      v4 = 0;
      v5 = "WebAssemblyImportModuleAttr";
      break;
    case 0x162:
      v4 = 0;
      v5 = "WebAssemblyImportNameAttr";
      break;
    case 0x163:
      v4 = 0;
      v5 = "WorkGroupSizeHintAttr";
      break;
    case 0x164:
      v4 = 0;
      v5 = "X86ForceAlignArgPointerAttr";
      break;
    case 0x165:
      v4 = 0;
      v5 = "XRayInstrumentAttr";
      break;
    case 0x166:
      v4 = 0;
      v5 = "XRayLogArgsAttr";
      break;
    case 0x167:
      v4 = 0;
      v5 = "ZeroCallUsedRegsAttr";
      break;
    case 0x168:
      v4 = 0;
      v5 = "AArch64FarAddressSpaceAttr";
      break;
    case 0x169:
      v4 = 0;
      v5 = "AbiTagAttr";
      break;
    case 0x16A:
      v4 = 0;
      v5 = "AliasAttr";
      break;
    case 0x16B:
      v4 = 0;
      v5 = "AlignValueAttr";
      break;
    case 0x16C:
      v4 = 0;
      v5 = "BuiltinAliasAttr";
      break;
    case 0x16D:
      v4 = 0;
      v5 = "CalledOnceAttr";
      break;
    case 0x16E:
      v4 = 0;
      v5 = "IFuncAttr";
      break;
    case 0x16F:
      v4 = 0;
      v5 = "InitSegAttr";
      break;
    case 0x170:
      v4 = 0;
      v5 = "LoaderUninitializedAttr";
      break;
    case 0x171:
      v4 = 0;
      v5 = "LoopHintAttr";
      break;
    case 0x172:
      v4 = 0;
      v5 = "MetalAcceptIntersectionAttr";
      break;
    case 0x173:
      v4 = 0;
      v5 = "MetalAmplificationCountAttr";
      break;
    case 0x174:
      v4 = 0;
      v5 = "MetalAmplificationIdAttr";
      break;
    case 0x175:
      v4 = 0;
      v5 = "MetalArrayRefSizeAttr";
      break;
    case 0x176:
      v4 = 0;
      v5 = "MetalAttributeIndexAttr";
      break;
    case 0x177:
      v4 = 0;
      v5 = "MetalBarycentricCoordAttr";
      break;
    case 0x178:
      v4 = 0;
      v5 = "MetalBaseInstanceAttr";
      break;
    case 0x179:
      v4 = 0;
      v5 = "MetalBaseVertexAttr";
      break;
    case 0x17A:
      v4 = 0;
      v5 = "MetalBlendSourceIndexAttr";
      break;
    case 0x17B:
      v4 = 0;
      v5 = "MetalBufferIndexAttr";
      break;
    case 0x17C:
      v4 = 0;
      v5 = "MetalCenterNoPerspectiveAttr";
      break;
    case 0x17D:
      v4 = 0;
      v5 = "MetalCenterPerspectiveAttr";
      break;
    case 0x17E:
      v4 = 0;
      v5 = "MetalCentroidNoPerspectiveAttr";
      break;
    case 0x17F:
      v4 = 0;
      v5 = "MetalCentroidPerspectiveAttr";
      break;
    case 0x180:
      v4 = 0;
      v5 = "MetalClipDistanceAttr";
      break;
    case 0x181:
      v4 = 0;
      v5 = "MetalColorAttr";
      break;
    case 0x182:
      v4 = 0;
      v5 = "MetalContinueSearchAttr";
      break;
    case 0x183:
      v4 = 0;
      v5 = "MetalCurveParameterAttr";
      break;
    case 0x184:
      v4 = 0;
      v5 = "MetalDepthAttr";
      break;
    case 0x185:
      v4 = 0;
      v5 = "MetalDirectionAttr";
      break;
    case 0x186:
      v4 = 0;
      v5 = "MetalDispatchQuadGroupsPerGroupAttr";
      break;
    case 0x187:
      v4 = 0;
      v5 = "MetalDispatchSIMDGroupsPerGroupAttr";
      break;
    case 0x188:
      v4 = 0;
      v5 = "MetalDispatchThreadsPerGroupAttr";
      break;
    case 0x189:
      v4 = 0;
      v5 = "MetalDistanceAttr";
      break;
    case 0x18A:
      v4 = 0;
      v5 = "MetalEarlyFragmentTestsAttr";
      break;
    case 0x18B:
      v4 = 0;
      v5 = "MetalFlatAttr";
      break;
    case 0x18C:
      v4 = 0;
      v5 = "MetalFragmentAttr";
      break;
    case 0x18D:
      v4 = 0;
      v5 = "MetalFrontFacingAttr";
      break;
    case 0x18E:
      v4 = 0;
      v5 = "MetalFunctionGroupsAttr";
      break;
    case 0x18F:
      v4 = 0;
      v5 = "MetalGeometryIdAttr";
      break;
    case 0x190:
      v4 = 0;
      v5 = "MetalGeometryIntersectionFunctionTableOffsetAttr";
      break;
    case 0x191:
      v4 = 0;
      v5 = "MetalHostNameAttr";
      break;
    case 0x192:
      v4 = 0;
      v5 = "MetalIdAttr";
      break;
    case 0x193:
      v4 = 0;
      v5 = "MetalImageblockAliasImplicitAttr";
      break;
    case 0x194:
      v4 = 0;
      v5 = "MetalImageblockDataAttr";
      break;
    case 0x195:
      v4 = 0;
      v5 = "MetalInstanceIdAttr";
      break;
    case 0x196:
      v4 = 0;
      v5 = "MetalInstanceIntersectionFunctionTableOffsetAttr";
      break;
    case 0x197:
      v4 = 0;
      v5 = "MetalIntersectionAttr";
      break;
    case 0x198:
      v4 = 0;
      v5 = "MetalInvariantAttr";
      break;
    case 0x199:
      v4 = 0;
      v5 = "MetalKernelAttr";
      break;
    case 0x19A:
      v4 = 0;
      v5 = "MetalKeyFrameCountAttr";
      break;
    case 0x19B:
      v4 = 0;
      v5 = "MetalLocalIndexAttr";
      break;
    case 0x19C:
      v4 = 0;
      v5 = "MetalMaxDistanceAttr";
      break;
    case 0x19D:
      v4 = 0;
      v5 = "MetalMaxTotalThreadGroupsPerMeshGridAttr";
      break;
    case 0x19E:
      v4 = 0;
      v5 = "MetalMaxTotalThreadsPerThreadGroupAttr";
      break;
    case 0x19F:
      v4 = 0;
      v5 = "MetalMeshAttr";
      break;
    case 0x1A0:
      v4 = 0;
      v5 = "MetalMinDistanceAttr";
      break;
    case 0x1A1:
      v4 = 0;
      v5 = "MetalMotionEndTimeAttr";
      break;
    case 0x1A2:
      v4 = 0;
      v5 = "MetalMotionStartTimeAttr";
      break;
    case 0x1A3:
      v4 = 0;
      v5 = "MetalNoUserResourceStoresAttr";
      break;
    case 0x1A4:
      v4 = 0;
      v5 = "MetalObjectAttr";
      break;
    case 0x1A5:
      v4 = 0;
      v5 = "MetalObjectToWorldTransformAttr";
      break;
    case 0x1A6:
      v4 = 0;
      v5 = "MetalOpaqueAttr";
      break;
    case 0x1A7:
      v4 = 0;
      v5 = "MetalOriginAttr";
      break;
    case 0x1A8:
      v4 = 0;
      v5 = "MetalPatchAttr";
      break;
    case 0x1A9:
      v4 = 0;
      v5 = "MetalPatchIdAttr";
      break;
    case 0x1AA:
      v4 = 0;
      v5 = "MetalPayloadAttr";
      break;
    case 0x1AB:
      v4 = 0;
      v5 = "MetalPixelPosTileAttr";
      break;
    case 0x1AC:
      v4 = 0;
      v5 = "MetalPixelsPerTileAttr";
      break;
    case 0x1AD:
      v4 = 0;
      v5 = "MetalPointCoordAttr";
      break;
    case 0x1AE:
      v4 = 0;
      v5 = "MetalPointSizeAttr";
      break;
    case 0x1AF:
      v4 = 0;
      v5 = "MetalPositionAttr";
      break;
    case 0x1B0:
      v4 = 0;
      v5 = "MetalPositionInPatchAttr";
      break;
    case 0x1B1:
      v4 = 0;
      v5 = "MetalPostDepthCoverageAttr";
      break;
    case 0x1B2:
      v4 = 0;
      v5 = "MetalPrimitiveCulledAttr";
      break;
    case 0x1B3:
      v4 = 0;
      v5 = "MetalPrimitiveDataAttr";
      break;
    case 0x1B4:
      v4 = 0;
      v5 = "MetalPrimitiveIdAttr";
      break;
    case 0x1B5:
      v4 = 0;
      v5 = "MetalQuadGroupIndexGroupAttr";
      break;
    case 0x1B6:
      v4 = 0;
      v5 = "MetalQuadGroupsPerGroupAttr";
      break;
    case 0x1B7:
      v4 = 0;
      v5 = "MetalRasterOrderGroupIndexAttr";
      break;
    case 0x1B8:
      v4 = 0;
      v5 = "MetalRenderTargetArrayIndexAttr";
      break;
    case 0x1B9:
      v4 = 0;
      v5 = "MetalSIMDGroupIndexGroupAttr";
      break;
    case 0x1BA:
      v4 = 0;
      v5 = "MetalSIMDGroupsPerGroupAttr";
      break;
    case 0x1BB:
      v4 = 0;
      v5 = "MetalSampleIdAttr";
      break;
    case 0x1BC:
      v4 = 0;
      v5 = "MetalSampleMaskAttr";
      break;
    case 0x1BD:
      v4 = 0;
      v5 = "MetalSampleNoPerspectiveAttr";
      break;
    case 0x1BE:
      v4 = 0;
      v5 = "MetalSamplePerspectiveAttr";
      break;
    case 0x1BF:
      v4 = 0;
      v5 = "MetalSamplerIndexAttr";
      break;
    case 0x1C0:
      v4 = 0;
      v5 = "MetalSharedAttr";
      break;
    case 0x1C1:
      v4 = 0;
      v5 = "MetalStageInAttr";
      break;
    case 0x1C2:
      v4 = 0;
      v5 = "MetalStageInGridOriginAttr";
      break;
    case 0x1C3:
      v4 = 0;
      v5 = "MetalStageInGridSizeAttr";
      break;
    case 0x1C4:
      v4 = 0;
      v5 = "MetalStencilAttr";
      break;
    case 0x1C5:
      v4 = 0;
      v5 = "MetalTextureIndexAttr";
      break;
    case 0x1C6:
      v4 = 0;
      v5 = "MetalThreadExecWidthAttr";
      break;
    case 0x1C7:
      v4 = 0;
      v5 = "MetalThreadGroupPosGridAttr";
      break;
    case 0x1C8:
      v4 = 0;
      v5 = "MetalThreadGroupsPerGridAttr";
      break;
    case 0x1C9:
      v4 = 0;
      v5 = "MetalThreadIndexGroupAttr";
      break;
    case 0x1CA:
      v4 = 0;
      v5 = "MetalThreadIndexQuadGroupAttr";
      break;
    case 0x1CB:
      v4 = 0;
      v5 = "MetalThreadIndexSIMDGroupAttr";
      break;
    case 0x1CC:
      v4 = 0;
      v5 = "MetalThreadPosGridAttr";
      break;
    case 0x1CD:
      v4 = 0;
      v5 = "MetalThreadPosGroupAttr";
      break;
    case 0x1CE:
      v4 = 0;
      v5 = "MetalThreadsPerGridAttr";
      break;
    case 0x1CF:
      v4 = 0;
      v5 = "MetalThreadsPerGroupAttr";
      break;
    case 0x1D0:
      v4 = 0;
      v5 = "MetalThreadsPerSIMDGroupAttr";
      break;
    case 0x1D1:
      v4 = 0;
      v5 = "MetalTileIndexAttr";
      break;
    case 0x1D2:
      v4 = 0;
      v5 = "MetalTimeAttr";
      break;
    case 0x1D3:
      v4 = 0;
      v5 = "MetalUserDefinedAttr";
      break;
    case 0x1D4:
      v4 = 0;
      v5 = "MetalUserInstanceIdAttr";
      break;
    case 0x1D5:
      v4 = 0;
      v5 = "MetalVertexAttr";
      break;
    case 0x1D6:
      v4 = 0;
      v5 = "MetalVertexIdAttr";
      break;
    case 0x1D7:
      v4 = 0;
      v5 = "MetalViewportArrayIndexAttr";
      break;
    case 0x1D8:
      v4 = 0;
      v5 = "MetalWorldSpaceDirectionAttr";
      break;
    case 0x1D9:
      v4 = 0;
      v5 = "MetalWorldSpaceOriginAttr";
      break;
    case 0x1DA:
      v4 = 0;
      v5 = "MetalWorldToObjectTransformAttr";
      break;
    case 0x1DB:
      v4 = 0;
      v5 = "ModeAttr";
      break;
    case 0x1DC:
      v4 = 0;
      v5 = "NoBuiltinAttr";
      break;
    case 0x1DD:
      v4 = 0;
      v5 = "NoEscapeAttr";
      break;
    case 0x1DE:
      v4 = 0;
      v5 = "OMPCaptureKindAttr";
      break;
    case 0x1DF:
      v4 = 0;
      v5 = "OMPDeclareSimdDeclAttr";
      break;
    case 0x1E0:
      v4 = 0;
      v5 = "OMPReferencedVarAttr";
      break;
    case 0x1E1:
      v4 = 0;
      v5 = "ObjCBoxableAttr";
      break;
    case 0x1E2:
      v4 = 0;
      v5 = "ObjCClassStubAttr";
      break;
    case 0x1E3:
      v4 = 0;
      v5 = "ObjCDesignatedInitializerAttr";
      break;
    case 0x1E4:
      v4 = 0;
      v5 = "ObjCDirectAttr";
      break;
    case 0x1E5:
      v4 = 0;
      v5 = "ObjCDirectMembersAttr";
      break;
    case 0x1E6:
      v4 = 0;
      v5 = "ObjCNonLazyClassAttr";
      break;
    case 0x1E7:
      v4 = 0;
      v5 = "ObjCNonRuntimeProtocolAttr";
      break;
    case 0x1E8:
      v4 = 0;
      v5 = "ObjCRuntimeNameAttr";
      break;
    case 0x1E9:
      v4 = 0;
      v5 = "ObjCRuntimeVisibleAttr";
      break;
    case 0x1EA:
      v4 = 0;
      v5 = "ObjCSuppressDirectAttr";
      break;
    case 0x1EB:
      v4 = 0;
      v5 = "OpenCLAccessAttr";
      break;
    case 0x1EC:
      v4 = 0;
      v5 = "OverloadableAttr";
      break;
    case 0x1ED:
      v4 = 0;
      v5 = "RenderScriptKernelAttr";
      break;
    case 0x1EE:
      v4 = 0;
      v5 = "SwiftObjCMembersAttr";
      break;
    case 0x1EF:
      v4 = 0;
      v5 = "SwiftVersionedAttr";
      break;
    case 0x1F0:
      v4 = 0;
      v5 = "SwiftVersionedRemovalAttr";
      break;
    case 0x1F1:
      v4 = 0;
      v5 = "ThreadAttr";
      break;
    default:
      v5 = 0;
      v4 = 1;
      break;
  }
  sub_22F08CA44(&__p, a2);
  sub_22E732810((uint64_t)v9, (__int128 *)&__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v9);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v4 & 1) != 0)
    v6 = 0;
  else
    v6 = strlen(v5);
  sub_22E732740((llvm::json::Value *)v9, (uint64_t)v5, v6);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v9);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)v9);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 1048));
  sub_22F3E278C(a1, *(_QWORD *)(a2 + 16));
  llvm::json::OStream::objectEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  sub_22F3E1D20(a1, (uint64_t)"inherited", 9, *(_BYTE *)(a2 + 34) & 1);
  return sub_22F3E1D20(a1, (uint64_t)"implicit", 8, (*(unsigned __int8 *)(a2 + 34) >> 2) & 1);
}

void sub_22F08CA44(std::string *a1, unint64_t a2)
{
  char *v3;
  BOOL v4;
  std::string *v5;
  std::string v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (char *)&v8;
    do
    {
      *--v3 = a0123456789abcd_2[a2 & 0xF] | 0x20;
      v4 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v4);
  }
  else
  {
    v3 = &v7;
    v7 = 48;
  }
  sub_22E3B4274(&v6, v3, (char *)&v8, (char *)&v8 - v3);
  v5 = std::string::insert(&v6, 0, "0x");
  *a1 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

uint64_t sub_22F08CB28(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  llvm::json::OStream *v4;
  const char **v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  uint64_t v13;
  unsigned int v14;
  std::string __p;
  __int16 v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    v4 = (llvm::json::OStream *)(result + 1048);
    sub_22F08CA44(&__p, (unint64_t)a2);
    sub_22E732810((uint64_t)&v16, (__int128 *)&__p);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v16);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = (const char **)sub_22F0D3748(*a2);
    v6 = *v5;
    if (*v5)
      v7 = strlen(*v5);
    else
      v7 = 0;
    sub_22E732740((llvm::json::Value *)&v16, (uint64_t)v6, v7);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v16);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v16);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v4);
    sub_22F0D4E74((uint64_t)a2);
    sub_22F3E278C(v3, v8);
    llvm::json::OStream::objectEnd(v4);
    llvm::json::OStream::attributeEnd(v4);
    if ((*a2 + 21) >= 0x7Bu)
    {
      sub_22F08CDA0((uint64_t)&v12, v3, *((_QWORD *)a2 + 1), 1);
      v16 = 7;
      v17 = v12;
      v18 = v13;
      v12 = 0;
      v13 = 0;
      v19 = v14;
      v14 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)&v16);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
      sub_22F095054((uint64_t *)&v12);
      llvm::deallocate_buffer(v12, (void *)(56 * v14));
      v9 = ((unint64_t)*(unsigned int *)a2 >> 8) & 3;
      if ((_DWORD)v9 == 3)
      {
        v10 = 0;
        v11 = 0;
      }
      else
      {
        v10 = off_24FAC6498[v9];
        v11 = strlen(v10);
      }
      sub_22E732740((llvm::json::Value *)&v16, (uint64_t)v10, v11);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)&v16);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
    }
    return sub_22F08D01C(v3, (unsigned int *)a2);
  }
  return result;
}

void sub_22F08CDA0(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  llvm::json::Value *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::json::Value *v17;
  uint64_t v18;
  std::string v19;
  uint64_t v20[3];
  __int128 v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;
  __int128 *v25[3];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 8) != 0)
  {
    v10 = *v8;
    v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a3 & 7;
  }
  else
  {
    v9 = a3 & 7;
    v10 = a3 & 0xFFFFFFFFFFFFFFF0;
  }
  sub_22F094D70((uint64_t *)v25, (uint64_t)"qualType", 8);
  v11 = (_OWORD *)(a2 + 1256);
  __p = 0uLL;
  v24 = 0;
  sub_22F1193C0(v10, v9, &__p, v11);
  sub_22E732810((uint64_t)v26, &__p);
  sub_22F3E815C(a1, v25, 1);
  llvm::json::Value::destroy((llvm::json::Value *)v26);
  sub_22F094F48((uint64_t *)v25, 0);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  if (a3 >= 0x10 && a4)
  {
    v12 = sub_22F10D058(a3);
    if (v10 != v12 || v13 != v9)
    {
      v22 = 0;
      v21 = 0uLL;
      sub_22F1193C0(v12, v13, &v21, v11);
      sub_22E732810((uint64_t)v25, &v21);
      sub_22F094D70(v20, (uint64_t)"desugaredQualType", 17);
      v14 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v14);
      llvm::json::Value::moveFrom();
      v15 = v20[0];
      v20[0] = 0;
      if (v15)
      {
        if (*(char *)(v15 + 23) < 0)
          operator delete(*(void **)v15);
        MEMORY[0x2348A0E9C](v15, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)v25);
      if (SHIBYTE(v22) < 0)
        operator delete((void *)v21);
    }
    v16 = sub_22F10D4DC(*v8);
    if (v16)
    {
      sub_22F08CA44(&v19, *(_QWORD *)(v16 + 24));
      sub_22E732810((uint64_t)v25, (__int128 *)&v19);
      sub_22F094D70(v20, (uint64_t)"typeAliasDeclId", 15);
      v17 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v17);
      llvm::json::Value::moveFrom();
      v18 = v20[0];
      v20[0] = 0;
      if (v18)
      {
        if (*(char *)(v18 + 23) < 0)
          operator delete(*(void **)v18);
        MEMORY[0x2348A0E9C](v18, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)v25);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_22F08D01C(uint64_t a1, unsigned int *a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)a2;
  if ((v3 & 0xFE) == 0x70)
  {
    v4 = *a2;
    switch((v4 >> 18) & 0x3F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x20u:
        return sub_22F3E6750(a1, v4);
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        return sub_22F3E67F0(a1, (uint64_t)a2);
      default:
        v3 = v4;
        goto LABEL_8;
    }
  }
  if (v3 == 233)
  {
    switch((*a2 >> 18) & 0x1F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        return sub_22F3E6618(a1, (uint64_t)a2);
      default:
        v3 = *a2;
        break;
    }
  }
LABEL_8:
  __asm { BR              X10 }
  return result;
}

void sub_22F08E8C0(uint64_t a1, unint64_t a2)
{
  llvm::json::OStream *v4;
  _BYTE *v5;
  __int16 v6;
  __int128 v7;
  char v8;
  std::string __p;
  _QWORD v10[2];
  const char *v11;
  unsigned int v12;
  __int16 v13;
  llvm *v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22F08CA44(&__p, a2);
  sub_22E732810((uint64_t)v10, (__int128 *)&__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)v10);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a2)
  {
    v5 = (_BYTE *)sub_22F40A538(a2);
    if (*v5)
    {
      v10[0] = v5;
      v11 = "Type";
      v6 = 771;
    }
    else
    {
      v10[0] = "Type";
      v6 = 259;
    }
    v13 = v6;
    llvm::Twine::str((llvm::Twine *)v10);
    sub_22E732810((uint64_t)&v14, &v7);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v14);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v14);
    if (v8 < 0)
      operator delete((void *)v7);
    sub_22F08CDA0((uint64_t)&v14, a1, a2 & 0xFFFFFFFFFFFFFFF0, 0);
    LOWORD(v10[0]) = 7;
    v10[1] = v14;
    v11 = v15;
    v14 = 0;
    v15 = 0;
    v12 = v16;
    v16 = 0;
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)v10);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)v10);
    sub_22F095054((uint64_t *)&v14);
    llvm::deallocate_buffer(v14, (void *)(56 * v16));
    sub_22F3E1D20(a1, (uint64_t)"containsErrors", 14, (*(_DWORD *)(a2 + 16) >> 12) & 1);
    sub_22F3E1D20(a1, (uint64_t)"isDependent", 11, (*(_DWORD *)(a2 + 16) >> 10) & 1);
    sub_22F3E1D20(a1, (uint64_t)"isInstantiationDependent", 24, (*(_DWORD *)(a2 + 16) >> 9) & 1);
    sub_22F3E1D20(a1, (uint64_t)"isVariablyModified", 18, (*(_DWORD *)(a2 + 16) >> 11) & 1);
    sub_22F3E1D20(a1, (uint64_t)"containsUnexpandedPack", 22, (*(_DWORD *)(a2 + 16) >> 8) & 1);
    sub_22F3E1D20(a1, (uint64_t)"isImported", 10, (*(_DWORD *)(a2 + 16) >> 18) & 1);
    sub_22F3E1DA4(a1, a2);
  }
}

void sub_22F08EB50(uint64_t a1, unint64_t a2)
{
  llvm::json::OStream *v4;
  llvm *v5;
  unint64_t v6;
  std::string v7;
  llvm *v8;
  unint64_t v9;
  unsigned int v10;
  std::string __p;
  __int16 v12;
  llvm *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22F08CA44(&__p, a2);
  sub_22E732810((uint64_t)&v12, (__int128 *)&__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v12);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_22E732740((llvm::json::Value *)&v12, (uint64_t)"QualType", 8);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v12);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v12);
  sub_22F08CDA0((uint64_t)&v8, a1, a2, 1);
  v12 = 7;
  v13 = v8;
  v14 = v9;
  v8 = 0;
  v9 = 0;
  v15 = v10;
  v10 = 0;
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v12);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v12);
  sub_22F095054((uint64_t *)&v8);
  llvm::deallocate_buffer(v8, (void *)(56 * v10));
  v5 = (llvm *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
  {
    v5 = *(llvm **)v5;
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
  }
  else
  {
    v6 = a2 & 7;
  }
  v8 = v5;
  v9 = v6;
  sub_22F40B554(&v9, &v7);
  sub_22E732810((uint64_t)&v12, (__int128 *)&v7);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v12);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v12);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_22F08ED54(uint64_t a1, unint64_t a2)
{
  llvm::json::OStream *v4;
  char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  std::string v13;
  __int128 v14;
  char v15;
  std::string __p;
  const char *v17;
  char v18;
  const char *v19;
  __int16 v20;
  _BYTE v21[32];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22F08CA44(&__p, a2);
  sub_22E732810((uint64_t)&v17, (__int128 *)&__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v17);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a2)
  {
    v5 = sub_22F3AEA44(a2);
    if (*v5)
    {
      v17 = v5;
      v19 = "Decl";
      v6 = 771;
    }
    else
    {
      v17 = "Decl";
      v6 = 259;
    }
    v20 = v6;
    llvm::Twine::str((llvm::Twine *)&v17);
    sub_22E732810((uint64_t)v21, &v14);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)v21);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)v21);
    if (v15 < 0)
      operator delete((void *)v14);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v4);
    sub_22F3E2680(a1, *(_DWORD *)(a2 + 24));
    llvm::json::OStream::objectEnd(v4);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v4);
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22F3E278C(a1, v7);
    llvm::json::OStream::objectEnd(v4);
    llvm::json::OStream::attributeEnd(v4);
    sub_22F3E1D20(a1, (uint64_t)"isImplicit", 10, (*(_DWORD *)(a2 + 28) >> 9) & 1);
    sub_22F3E1D20(a1, (uint64_t)"isInvalid", 9, (*(_DWORD *)(a2 + 28) >> 7) & 1);
    if (sub_22EFC9084(a2, 1))
    {
      LOWORD(v17) = 1;
      v18 = 1;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 29) & 8) == 0)
        goto LABEL_14;
      LOWORD(v17) = 1;
      v18 = 1;
    }
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v17);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v17);
LABEL_14:
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
      sub_22F3E1D20(a1, (uint64_t)"isHidden", 8, (*(_QWORD *)(a2 + 8) >> 2) & 1);
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 4) == 0)
      goto LABEL_35;
    v10 = v8 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if (*(_QWORD *)(v10 + 8) == v9)
      goto LABEL_35;
    v11 = *(_WORD *)(v9 + 8) & 0x7F;
    v12 = -40;
    if (v11 > 0x46)
    {
      switch(v11)
      {
        case 'S':
          goto LABEL_33;
        case 'G':
          v12 = -56;
          goto LABEL_33;
        case 'Q':
LABEL_33:
          sub_22F08CA44(&v13, v9 + v12);
          sub_22E732810((uint64_t)&v17, (__int128 *)&v13);
          llvm::json::OStream::attributeBegin();
          llvm::json::OStream::value(v4, (const llvm::json::Value *)&v17);
          llvm::json::OStream::attributeEnd(v4);
          llvm::json::Value::destroy((llvm::json::Value *)&v17);
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v13.__r_.__value_.__l.__data_);
LABEL_35:
          sub_22F3E1C68(a1, a2);
          sub_22F3E1E48(a1, a2);
          return;
      }
    }
    else
    {
      if (v11 <= 0x18)
      {
        if (v11 == 16)
        {
LABEL_21:
          v12 = -48;
          goto LABEL_33;
        }
        if (((1 << v11) & 0x1066) != 0)
          goto LABEL_33;
        if (v11 == 24)
          goto LABEL_21;
      }
      if (v11 == 70)
      {
LABEL_31:
        v12 = -64;
        goto LABEL_33;
      }
    }
    if (v11 - 52 >= 6)
    {
      if (v11 - 33 >= 5)
        goto LABEL_21;
      goto LABEL_31;
    }
    v12 = -72;
    goto LABEL_33;
  }
}

uint64_t sub_22F08F120(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  llvm::json::OStream *v4;
  char *v5;
  size_t v6;
  std::string __p;
  _BYTE v8[32];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    v4 = (llvm::json::OStream *)(result + 1048);
    sub_22F08CA44(&__p, a2);
    sub_22E732810((uint64_t)v8, (__int128 *)&__p);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)v8);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = sub_22F3A7DB4(a2);
    v6 = strlen(v5);
    sub_22E732740((llvm::json::Value *)v8, (uint64_t)v5, v6);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)v8);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)v8);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v4);
    sub_22F3E2680(v3, *(_DWORD *)a2);
    llvm::json::OStream::objectEnd(v4);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v4);
    sub_22F3E278C(v3, *(_QWORD *)(a2 + 4));
    llvm::json::OStream::objectEnd(v4);
    llvm::json::OStream::attributeEnd(v4);
    return sub_22F3E1F04(v3, a2);
  }
  return result;
}

uint64_t sub_22F08F2B8(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  llvm::json::OStream *v8;
  llvm *v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  llvm *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (llvm::json::OStream *)(a1 + 1048);
  sub_22E732740((llvm::json::Value *)&v13, (uint64_t)"TemplateArgument", 16);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v8, (const llvm::json::Value *)&v13);
  llvm::json::OStream::attributeEnd(v8);
  llvm::json::Value::destroy((llvm::json::Value *)&v13);
  if (HIDWORD(a3) && (_DWORD)a3)
  {
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::objectBegin(v8);
    sub_22F3E278C(a1, a3);
    llvm::json::OStream::objectEnd(v8);
    llvm::json::OStream::attributeEnd(v8);
  }
  if (a4)
  {
    sub_22F08F470((uint64_t)&v10, a1, a4);
    v13 = 7;
    v14 = v10;
    v15 = v11;
    v10 = 0;
    v11 = 0;
    v16 = v12;
    v12 = 0;
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v8, (const llvm::json::Value *)&v13);
    llvm::json::OStream::attributeEnd(v8);
    llvm::json::Value::destroy((llvm::json::Value *)&v13);
    sub_22F095054((uint64_t *)&v10);
    llvm::deallocate_buffer(v10, (void *)(56 * v12));
  }
  return sub_22F3E1F70(a1, a2);
}

void sub_22F08F470(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 *v6;
  __int16 v7;
  llvm::json::Value *v8;
  uint64_t v9;
  unsigned int v10;
  llvm::json::Value *v11;
  llvm *v12;
  llvm::json::Value *v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  uint64_t v17[3];
  __int128 v18;
  char v19;
  std::string __p;
  llvm *v21;
  const char *v22;
  unsigned int v23;
  __int128 *v24[2];
  const char *v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_22F094D70((uint64_t *)v24, (uint64_t)"id", 2);
  sub_22F08CA44(&__p, a3);
  sub_22E732810((uint64_t)&v26, (__int128 *)&__p);
  sub_22F3E815C(a1, v24, 1);
  llvm::json::Value::destroy((llvm::json::Value *)&v26);
  sub_22F094F48((uint64_t *)v24, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3)
  {
    v6 = (__int128 *)sub_22F3AEA44(a3);
    if (*(_BYTE *)v6)
    {
      v24[0] = v6;
      v25 = "Decl";
      v7 = 771;
    }
    else
    {
      v24[0] = (__int128 *)"Decl";
      v7 = 259;
    }
    v27 = v7;
    llvm::Twine::str((llvm::Twine *)v24);
    sub_22E732810((uint64_t)&v21, &v18);
    sub_22F094D70(v17, (uint64_t)"kind", 4);
    v8 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v8);
    llvm::json::Value::moveFrom();
    v9 = v17[0];
    v17[0] = 0;
    if (v9)
    {
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      MEMORY[0x2348A0E9C](v9, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v21);
    if (v19 < 0)
      operator delete((void *)v18);
    v10 = (*(_DWORD *)(a3 + 28) & 0x7F) - 75;
    if (v10 >= 0xFFFFFFC2)
    {
      v17[0] = *(_QWORD *)(a3 + 40);
      sub_22EFC683C(v17, v15);
      sub_22E732810((uint64_t)v24, (__int128 *)v15);
      sub_22F094D70((uint64_t *)&v21, (uint64_t)"name", 4);
      v11 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v11);
      llvm::json::Value::moveFrom();
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*((char *)v12 + 23) < 0)
          operator delete(*(void **)v12);
        MEMORY[0x2348A0E9C](v12, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)v24);
      if (v16 < 0)
        operator delete(v15[0]);
      v10 = (*(_DWORD *)(a3 + 28) & 0x7F) - 75;
    }
    if (v10 >= 0xFFFFFFE5)
    {
      sub_22F08CDA0((uint64_t)&v21, a2, *(_QWORD *)(a3 + 48), 1);
      LOWORD(v24[0]) = 7;
      v24[1] = (__int128 *)v21;
      v25 = v22;
      v21 = 0;
      v22 = 0;
      v26 = v23;
      v23 = 0;
      sub_22F094D70(v17, (uint64_t)"type", 4);
      v13 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v13);
      llvm::json::Value::moveFrom();
      v14 = v17[0];
      v17[0] = 0;
      if (v14)
      {
        if (*(char *)(v14 + 23) < 0)
          operator delete(*(void **)v14);
        MEMORY[0x2348A0E9C](v14, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)v24);
      sub_22F095054((uint64_t *)&v21);
      llvm::deallocate_buffer(v21, (void *)(56 * v23));
    }
  }
}

uint64_t sub_22F08F7A8(uint64_t a1, uint64_t *a2)
{
  llvm::json::OStream *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  llvm *v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22E732740((llvm::json::Value *)&v14, (uint64_t)"CXXCtorInitializer", 18);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v14);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v14);
  v5 = *a2;
  v6 = *a2 & 6;
  if (v6)
  {
    if (v6 != 4 && v6 != 2)
      goto LABEL_13;
    if (v6 == 4)
    {
      v9 = *(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 56)
                     + 8 * *(unsigned int *)((v5 & 0xFFFFFFFFFFFFFFF8) + 64)
                     - 8);
    }
    else
    {
      v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v6 == 2)
        v9 = v8;
      else
        v9 = 0;
    }
    sub_22F08F470((uint64_t)&v11, a1, v9);
    v14 = 7;
    v15 = v11;
    v16 = v12;
    v11 = 0;
    v12 = 0;
    v17 = v13;
    v13 = 0;
  }
  else
  {
    if ((*((_WORD *)a2 + 14) & 1) != 0)
    {
LABEL_13:
      sub_22F08CDA0((uint64_t)&v11, a1, *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8), 1);
      v14 = 7;
      v15 = v11;
      v16 = v12;
      v11 = 0;
      v12 = 0;
      v17 = v13;
      v13 = 0;
      goto LABEL_16;
    }
    sub_22F08CDA0((uint64_t)&v11, a1, *(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 1);
    v14 = 7;
    v15 = v11;
    v16 = v12;
    v11 = 0;
    v12 = 0;
    v17 = v13;
    v13 = 0;
  }
LABEL_16:
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v14);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v14);
  sub_22F095054((uint64_t *)&v11);
  return llvm::deallocate_buffer(v11, (void *)(56 * v13));
}

uint64_t sub_22F08F9D0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  llvm::json::OStream *v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  BOOL v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    switch(*(_DWORD *)a2)
    {
      case 0:
        v4 = (llvm::json::OStream *)(result + 1048);
        v5 = "TypeRequirement";
        v6 = 15;
        goto LABEL_8;
      case 1:
        v4 = (llvm::json::OStream *)(result + 1048);
        v5 = "SimpleRequirement";
        goto LABEL_7;
      case 2:
        v4 = (llvm::json::OStream *)(result + 1048);
        v5 = "CompoundRequirement";
        v6 = 19;
        goto LABEL_8;
      case 3:
        v4 = (llvm::json::OStream *)(result + 1048);
        v5 = "NestedRequirement";
LABEL_7:
        v6 = 17;
LABEL_8:
        sub_22E732740((llvm::json::Value *)&v8, (uint64_t)v5, v6);
        llvm::json::OStream::attributeBegin();
        llvm::json::OStream::value(v4, (const llvm::json::Value *)&v8);
        llvm::json::OStream::attributeEnd(v4);
        llvm::json::Value::destroy((llvm::json::Value *)&v8);
        break;
      default:
        break;
    }
    if ((*(_DWORD *)a2 - 3) >= 0xFFFFFFFE)
      sub_22F3E1D20(v3, (uint64_t)"noexcept", 8, *(_DWORD *)(a2 + 16) != 0);
    sub_22F3E1D20(v3, (uint64_t)"isDependent", 11, *(_BYTE *)(a2 + 4) & 1);
    v7 = *(unsigned __int8 *)(a2 + 4);
    if ((v7 & 1) == 0)
    {
      v8 = 1;
      v9 = (v7 & 4) != 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(v3 + 1048), (const llvm::json::Value *)&v8);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(v3 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v8);
      v7 = *(unsigned __int8 *)(a2 + 4);
    }
    return sub_22F3E1D20(v3, (uint64_t)"containsUnexpandedPack", 22, (v7 >> 1) & 1);
  }
  return result;
}

void sub_22F08FB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[8];
  void *v18[2];
  uint64_t v19;
  _BYTE v20[32];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  LODWORD(v10) = 0;
  LOBYTE(v14) = 0;
  v15 = 0;
  LODWORD(v16) = 1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v9 = MEMORY[0x24BED83D8] + 16;
  *(_QWORD *)v17 = v18;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22EF53F70(a2, (llvm::raw_ostream *)&v9, *(_QWORD *)(a1 + 1240) + 15104, a3);
  if (*(char *)(*(_QWORD *)v17 + 23) < 0)
  {
    sub_22E3BB2B4(__p, **(void ***)v17, *(_QWORD *)(*(_QWORD *)v17 + 8));
  }
  else
  {
    v6 = **(_OWORD **)v17;
    v8 = *(_QWORD *)(*(_QWORD *)v17 + 16);
    *(_OWORD *)__p = v6;
  }
  sub_22E732810((uint64_t)v20, (__int128 *)__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v20);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)v20);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v9);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_22F08FCF4(uint64_t a1, unint64_t a2)
{
  llvm::json::OStream *v4;
  char *v5;
  __int16 v6;
  unsigned int v7;
  void *v8[2];
  char v9;
  __int128 v10;
  char v11;
  std::string __p;
  _QWORD v13[2];
  const char *v14;
  unsigned int v15;
  __int16 v16;
  llvm *v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22F08CA44(&__p, a2);
  sub_22E732810((uint64_t)v13, (__int128 *)&__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)v13);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a2)
  {
    v5 = sub_22F3AEA44(a2);
    if (*v5)
    {
      v13[0] = v5;
      v14 = "Decl";
      v6 = 771;
    }
    else
    {
      v13[0] = "Decl";
      v6 = 259;
    }
    v16 = v6;
    llvm::Twine::str((llvm::Twine *)v13);
    sub_22E732810((uint64_t)&v17, &v10);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v17);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v17);
    if (v11 < 0)
      operator delete((void *)v10);
    v7 = (*(_DWORD *)(a2 + 28) & 0x7F) - 75;
    if (v7 >= 0xFFFFFFC2)
    {
      v17 = *(llvm **)(a2 + 40);
      sub_22EFC683C((uint64_t *)&v17, v8);
      sub_22E732810((uint64_t)v13, (__int128 *)v8);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v13);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v13);
      if (v9 < 0)
        operator delete(v8[0]);
      v7 = (*(_DWORD *)(a2 + 28) & 0x7F) - 75;
    }
    if (v7 >= 0xFFFFFFE5)
    {
      sub_22F08CDA0((uint64_t)&v17, a1, *(_QWORD *)(a2 + 48), 1);
      LOWORD(v13[0]) = 7;
      v13[1] = v17;
      v14 = v18;
      v17 = 0;
      v18 = 0;
      v15 = v19;
      v19 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)v13);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)v13);
      sub_22F095054((uint64_t *)&v17);
      llvm::deallocate_buffer(v17, (void *)(56 * v19));
    }
  }
}

uint64_t sub_22F08FF58(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  llvm::json::Value *v4;
  uint64_t v5;
  llvm::json::Value *v6;
  uint64_t v7;
  llvm::json::Value *v8;
  uint64_t v9;
  llvm::json::Value *v10;
  uint64_t v11;
  llvm::json::Value *v12;
  uint64_t v13;
  llvm::json::Value *v14;
  uint64_t v15;
  llvm::json::Value *v16;
  uint64_t v17;
  llvm::json::Value *v18;
  uint64_t v19;
  llvm::json::Value *v20;
  uint64_t v21;
  llvm::json::Value *v22;
  uint64_t v23;
  llvm::json::Value *v24;
  uint64_t v25;
  llvm::json::Value *v26;
  uint64_t v27;
  llvm::json::Value *v28;
  uint64_t v29;
  llvm::json::Value *v30;
  uint64_t v31;
  llvm::json::Value *v32;
  uint64_t v33;
  llvm::json::Value *v34;
  uint64_t v35;
  llvm::json::Value *v36;
  uint64_t v37;
  llvm::json::Value *v38;
  uint64_t v39;
  llvm::json::Value *v40;
  uint64_t v41;
  llvm::json::Value *v42;
  uint64_t v43;
  llvm::json::Value *v44;
  uint64_t v45;
  llvm::json::Value *v46;
  uint64_t v47;
  llvm::json::Value *v48;
  uint64_t v49;
  llvm::json::Value *v50;
  uint64_t v51;
  llvm::json::Value *v52;
  uint64_t v53;
  llvm::json::Value *v54;
  uint64_t v55;
  llvm::json::Value *v56;
  uint64_t v57;
  llvm::json::Value *v58;
  uint64_t v59;
  llvm::json::Value *v60;
  uint64_t v61;
  llvm::json::Value *v62;
  uint64_t v63;
  llvm::json::Value *v64;
  uint64_t v65;
  llvm::json::Value *v66;
  uint64_t v67;
  llvm::json::Value *v68;
  uint64_t v69;
  llvm::json::Value *v70;
  uint64_t v71;
  llvm::json::Value *v72;
  uint64_t v73;
  llvm::json::Value *v74;
  uint64_t v75;
  llvm::json::Value *v76;
  uint64_t v77;
  llvm::json::Value *v78;
  uint64_t v79;
  llvm::json::Value *v80;
  uint64_t v81;
  llvm::json::Value *v82;
  uint64_t v83;
  llvm::json::Value *v84;
  uint64_t v85;
  llvm::json::Value *v86;
  uint64_t v87;
  llvm::json::Value *v88;
  uint64_t v89;
  llvm::json::Value *v90;
  uint64_t v91;
  llvm::json::Value *v92;
  uint64_t v93;
  llvm::json::Value *v94;
  uint64_t v95;
  llvm::json::Value *v96;
  uint64_t v97;
  llvm::json::Value *v98;
  uint64_t v99;
  llvm::json::Value *v100;
  uint64_t v101;
  llvm::json::Value *v102;
  uint64_t v103;
  llvm::json::Value *v104;
  uint64_t v105;
  llvm::json::Value *v106;
  uint64_t v107;
  llvm::json::Value *v108;
  uint64_t v109;
  llvm::json::Value *v110;
  uint64_t v111;
  llvm::json::Value *v112;
  uint64_t v113;
  llvm::json::Value *v114;
  uint64_t v115;
  llvm::json::Value *v116;
  uint64_t v117;
  llvm::json::Value *v118;
  uint64_t v119;
  llvm::json::Value *v120;
  uint64_t v121;
  llvm::json::Value *v122;
  uint64_t v123;
  llvm::json::Value *v124;
  uint64_t v125;
  llvm::json::Value *v126;
  uint64_t v127;
  llvm::json::Value *v128;
  uint64_t v129;
  llvm::json::Value *v130;
  uint64_t v131;
  llvm::json::Value *v132;
  uint64_t v133;
  llvm::json::Value *v134;
  uint64_t v135;
  llvm::json::Value *v136;
  uint64_t v137;
  llvm::json::Value *v138;
  uint64_t v139;
  llvm::json::Value *v140;
  uint64_t v141;
  llvm::json::Value *v143;
  uint64_t v144;
  llvm *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148[3];
  __int16 v149;
  llvm *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
  {
    if (((*(unsigned __int16 *)(v3 + 8) | (*(unsigned __int8 *)(v3 + 10) << 16)) & 0x100000) == 0
      || (*(_BYTE *)(v3 + 104) & 4) == 0)
    {
      goto LABEL_3;
    }
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isGenericLambda", 15);
    v143 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v143);
    llvm::json::Value::moveFrom();
    v144 = v148[0];
    v148[0] = 0;
    if (v144)
    {
      if (*(char *)(v144 + 23) < 0)
        operator delete(*(void **)v144);
      MEMORY[0x2348A0E9C](v144, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
    v3 = *(_QWORD *)(a2 + 128);
    if (v3)
    {
LABEL_3:
      if (((*(unsigned __int16 *)(v3 + 8) | (*(unsigned __int8 *)(v3 + 10) << 16)) & 0x100000) != 0)
      {
        v149 = 1;
        LOBYTE(v150) = 1;
        sub_22F094D70(v148, (uint64_t)"isLambda", 8);
        v4 = (llvm::json::Value *)llvm::json::Object::operator[]();
        llvm::json::Value::destroy(v4);
        llvm::json::Value::moveFrom();
        v5 = v148[0];
        v148[0] = 0;
        if (v5)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x2348A0E9C](v5, 0x1012C40EC159624);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v149);
      }
    }
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x200) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isEmpty", 7);
    v6 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v6);
    llvm::json::Value::moveFrom();
    v7 = v148[0];
    v148[0] = 0;
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x2348A0E9C](v7, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x80) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isAggregate", 11);
    v8 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v8);
    llvm::json::Value::moveFrom();
    v9 = v148[0];
    v148[0] = 0;
    if (v9)
    {
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      MEMORY[0x2348A0E9C](v9, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x1000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isStandardLayout", 16);
    v10 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v10);
    llvm::json::Value::moveFrom();
    v11 = v148[0];
    v148[0] = 0;
    if (v11)
    {
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      MEMORY[0x2348A0E9C](v11, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD12A8(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isTriviallyCopyable", 19);
    v12 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v12);
    llvm::json::Value::moveFrom();
    v13 = v148[0];
    v148[0] = 0;
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      MEMORY[0x2348A0E9C](v13, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isPOD", 5);
    v14 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v14);
    llvm::json::Value::moveFrom();
    v15 = v148[0];
    v148[0] = 0;
    if (v15)
    {
      if (*(char *)(v15 + 23) < 0)
        operator delete(*(void **)v15);
      MEMORY[0x2348A0E9C](v15, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD12A8(a2) && sub_22E49F698(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isTrivial", 9);
    v16 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v16);
    llvm::json::Value::moveFrom();
    v17 = v148[0];
    v148[0] = 0;
    if (v17)
    {
      if (*(char *)(v17 + 23) < 0)
        operator delete(*(void **)v17);
      MEMORY[0x2348A0E9C](v17, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x400) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isPolymorphic", 13);
    v18 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v18);
    llvm::json::Value::moveFrom();
    v19 = v148[0];
    v148[0] = 0;
    if (v19)
    {
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      MEMORY[0x2348A0E9C](v19, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x800) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isAbstract", 10);
    v20 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v20);
    llvm::json::Value::moveFrom();
    v21 = v148[0];
    v148[0] = 0;
    if (v21)
    {
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      MEMORY[0x2348A0E9C](v21, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EAE4B48(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isLiteral", 9);
    v22 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v22);
    llvm::json::Value::moveFrom();
    v23 = v148[0];
    v148[0] = 0;
    if (v23)
    {
      if (*(char *)(v23 + 23) < 0)
        operator delete(*(void **)v23);
      MEMORY[0x2348A0E9C](v23, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if ((*(_BYTE *)(a2 + 76) & 0x18) == 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"canPassInRegisters", 18);
    v24 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v24);
    llvm::json::Value::moveFrom();
    v25 = v148[0];
    v148[0] = 0;
    if (v25)
    {
      if (*(char *)(v25 + 23) < 0)
        operator delete(*(void **)v25);
      MEMORY[0x2348A0E9C](v25, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 1) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasUserDeclaredConstructor", 26);
    v26 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v26);
    llvm::json::Value::moveFrom();
    v27 = v148[0];
    v148[0] = 0;
    if (v27)
    {
      if (*(char *)(v27 + 23) < 0)
        operator delete(*(void **)v27);
      MEMORY[0x2348A0E9C](v27, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E49F8B4(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasConstexprNonCopyMoveConstructor", 34);
    v28 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v28);
    llvm::json::Value::moveFrom();
    v29 = v148[0];
    v148[0] = 0;
    if (v29)
    {
      if (*(char *)(v29 + 23) < 0)
        operator delete(*(void **)v29);
      MEMORY[0x2348A0E9C](v29, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x80000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasMutableFields", 16);
    v30 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v30);
    llvm::json::Value::moveFrom();
    v31 = v148[0];
    v148[0] = 0;
    if (v31)
    {
      if (*(char *)(v31 + 23) < 0)
        operator delete(*(void **)v31);
      MEMORY[0x2348A0E9C](v31, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasVariantMembers", 17);
    v32 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v32);
    llvm::json::Value::moveFrom();
    v33 = v148[0];
    v148[0] = 0;
    if (v33)
    {
      if (*(char *)(v33 + 23) < 0)
        operator delete(*(void **)v33);
      MEMORY[0x2348A0E9C](v33, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EC4FB1C(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"canConstDefaultInit", 19);
    v34 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v34);
    llvm::json::Value::moveFrom();
    v35 = v148[0];
    v148[0] = 0;
    if (v35)
    {
      if (*(char *)(v35 + 23) < 0)
        operator delete(*(void **)v35);
      MEMORY[0x2348A0E9C](v35, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  v145 = 0;
  v146 = 0;
  v147 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x100) != 0 || sub_22E49F6F8(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"exists", 6);
    v36 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v36);
    llvm::json::Value::moveFrom();
    v37 = v148[0];
    v148[0] = 0;
    if (v37)
    {
      if (*(char *)(v37 + 23) < 0)
        operator delete(*(void **)v37);
      MEMORY[0x2348A0E9C](v37, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E49F698(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v38 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v38);
    llvm::json::Value::moveFrom();
    v39 = v148[0];
    v148[0] = 0;
    if (v39)
    {
      if (*(char *)(v39 + 23) < 0)
        operator delete(*(void **)v39);
      MEMORY[0x2348A0E9C](v39, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22F333374(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v40 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v40);
    llvm::json::Value::moveFrom();
    v41 = v148[0];
    v148[0] = 0;
    if (v41)
    {
      if (*(char *)(v41 + 23) < 0)
        operator delete(*(void **)v41);
      MEMORY[0x2348A0E9C](v41, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x80) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userProvided", 12);
    v42 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v42);
    llvm::json::Value::moveFrom();
    v43 = v148[0];
    v148[0] = 0;
    if (v43)
    {
      if (*(char *)(v43 + 23) < 0)
        operator delete(*(void **)v43);
      MEMORY[0x2348A0E9C](v43, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EAE4D48(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"isConstexpr", 11);
    v44 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v44);
    llvm::json::Value::moveFrom();
    v45 = v148[0];
    v148[0] = 0;
    if (v45)
    {
      if (*(char *)(v45 + 23) < 0)
        operator delete(*(void **)v45);
      MEMORY[0x2348A0E9C](v45, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E49F6F8(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v46 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v46);
    llvm::json::Value::moveFrom();
    v47 = v148[0];
    v148[0] = 0;
    if (v47)
    {
      if (*(char *)(v47 + 23) < 0)
        operator delete(*(void **)v47);
      MEMORY[0x2348A0E9C](v47, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E49F910(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"defaultedIsConstexpr", 20);
    v48 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v48);
    llvm::json::Value::moveFrom();
    v49 = v148[0];
    v148[0] = 0;
    if (v49)
    {
      if (*(char *)(v49 + 23) < 0)
        operator delete(*(void **)v49);
      MEMORY[0x2348A0E9C](v49, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"defaultCtor", 11);
  v50 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v50);
  llvm::json::Value::moveFrom();
  v51 = v148[0];
  v148[0] = 0;
  if (v51)
  {
    if (*(char *)(v51 + 23) < 0)
      operator delete(*(void **)v51);
    MEMORY[0x2348A0E9C](v51, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  llvm::deallocate_buffer(v145, (void *)(56 * v147));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  if (sub_22EB87B38(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"simple", 6);
    v52 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v52);
    llvm::json::Value::moveFrom();
    v53 = v148[0];
    v148[0] = 0;
    if (v53)
    {
      if (*(char *)(v53 + 23) < 0)
        operator delete(*(void **)v53);
      MEMORY[0x2348A0E9C](v53, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x10000000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v54 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v54);
    llvm::json::Value::moveFrom();
    v55 = v148[0];
    v148[0] = 0;
    if (v55)
    {
      if (*(char *)(v55 + 23) < 0)
        operator delete(*(void **)v55);
      MEMORY[0x2348A0E9C](v55, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E3CD2C4(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v56 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v56);
    llvm::json::Value::moveFrom();
    v57 = v148[0];
    v148[0] = 0;
    if (v57)
    {
      if (*(char *)(v57 + 23) < 0)
        operator delete(*(void **)v57);
      MEMORY[0x2348A0E9C](v57, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 4) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userDeclared", 12);
    v58 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v58);
    llvm::json::Value::moveFrom();
    v59 = v148[0];
    v148[0] = 0;
    if (v59)
    {
      if (*(char *)(v59 + 23) < 0)
        operator delete(*(void **)v59);
      MEMORY[0x2348A0E9C](v59, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD0B3C(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasConstParam", 13);
    v60 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v60);
    llvm::json::Value::moveFrom();
    v61 = v148[0];
    v148[0] = 0;
    if (v61)
    {
      if (*(char *)(v61 + 23) < 0)
        operator delete(*(void **)v61);
      MEMORY[0x2348A0E9C](v61, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EAB82EC(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"implicitHasConstParam", 21);
    v62 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v62);
    llvm::json::Value::moveFrom();
    v63 = v148[0];
    v148[0] = 0;
    if (v63)
    {
      if (*(char *)(v63 + 23) < 0)
        operator delete(*(void **)v63);
      MEMORY[0x2348A0E9C](v63, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x200) == 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v64 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v64);
    llvm::json::Value::moveFrom();
    v65 = v148[0];
    v148[0] = 0;
    if (v65)
    {
      if (*(char *)(v65 + 23) < 0)
        operator delete(*(void **)v65);
      MEMORY[0x2348A0E9C](v65, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EABD2CC(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsOverloadResolution", 23);
    v66 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v66);
    llvm::json::Value::moveFrom();
    v67 = v148[0];
    v148[0] = 0;
    if (v67)
    {
      if (*(char *)(v67 + 23) < 0)
        operator delete(*(void **)v67);
      MEMORY[0x2348A0E9C](v67, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if ((sub_22EABD2CC(a2) & 1) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((**(_QWORD **)(a2 + 128) & 0x400000000) != 0)
    {
      v149 = 1;
      LOBYTE(v150) = 1;
      sub_22F094D70(v148, (uint64_t)"defaultedIsDeleted", 18);
      v68 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v68);
      llvm::json::Value::moveFrom();
      v69 = v148[0];
      v148[0] = 0;
      if (v69)
      {
        if (*(char *)(v69 + 23) < 0)
          operator delete(*(void **)v69);
        MEMORY[0x2348A0E9C](v69, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)&v149);
    }
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"copyCtor", 8);
  v70 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v70);
  llvm::json::Value::moveFrom();
  v71 = v148[0];
  v148[0] = 0;
  if (v71)
  {
    if (*(char *)(v71 + 23) < 0)
      operator delete(*(void **)v71);
    MEMORY[0x2348A0E9C](v71, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  llvm::deallocate_buffer(v145, (void *)(56 * v147));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x400) != 0 || sub_22EABDAF8(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"exists", 6);
    v72 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v72);
    llvm::json::Value::moveFrom();
    v73 = v148[0];
    v148[0] = 0;
    if (v73)
    {
      if (*(char *)(v73 + 23) < 0)
        operator delete(*(void **)v73);
      MEMORY[0x2348A0E9C](v73, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD0F40(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"simple", 6);
    v74 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v74);
    llvm::json::Value::moveFrom();
    v75 = v148[0];
    v148[0] = 0;
    if (v75)
    {
      if (*(char *)(v75 + 23) < 0)
        operator delete(*(void **)v75);
      MEMORY[0x2348A0E9C](v75, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EACBAD4(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v76 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v76);
    llvm::json::Value::moveFrom();
    v77 = v148[0];
    v148[0] = 0;
    if (v77)
    {
      if (*(char *)(v77 + 23) < 0)
        operator delete(*(void **)v77);
      MEMORY[0x2348A0E9C](v77, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EB1C044(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v78 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v78);
    llvm::json::Value::moveFrom();
    v79 = v148[0];
    v148[0] = 0;
    if (v79)
    {
      if (*(char *)(v79 + 23) < 0)
        operator delete(*(void **)v79);
      MEMORY[0x2348A0E9C](v79, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 8) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userDeclared", 12);
    v80 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v80);
    llvm::json::Value::moveFrom();
    v81 = v148[0];
    v148[0] = 0;
    if (v81)
    {
      if (*(char *)(v81 + 23) < 0)
        operator delete(*(void **)v81);
      MEMORY[0x2348A0E9C](v81, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EABDAF8(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v82 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v82);
    llvm::json::Value::moveFrom();
    v83 = v148[0];
    v148[0] = 0;
    if (v83)
    {
      if (*(char *)(v83 + 23) < 0)
        operator delete(*(void **)v83);
      MEMORY[0x2348A0E9C](v83, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x40000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsOverloadResolution", 23);
    v84 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v84);
    llvm::json::Value::moveFrom();
    v85 = v148[0];
    v148[0] = 0;
    if (v85)
    {
      if (*(char *)(v85 + 23) < 0)
        operator delete(*(void **)v85);
      MEMORY[0x2348A0E9C](v85, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x40000000) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((**(_QWORD **)(a2 + 128) & 0x800000000) != 0)
    {
      v149 = 1;
      LOBYTE(v150) = 1;
      sub_22F094D70(v148, (uint64_t)"defaultedIsDeleted", 18);
      v86 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v86);
      llvm::json::Value::moveFrom();
      v87 = v148[0];
      v148[0] = 0;
      if (v87)
      {
        if (*(char *)(v87 + 23) < 0)
          operator delete(*(void **)v87);
        MEMORY[0x2348A0E9C](v87, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)&v149);
    }
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"moveCtor", 8);
  v88 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v88);
  llvm::json::Value::moveFrom();
  v89 = v148[0];
  v148[0] = 0;
  if (v89)
  {
    if (*(char *)(v89 + 23) < 0)
      operator delete(*(void **)v89);
    MEMORY[0x2348A0E9C](v89, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  llvm::deallocate_buffer(v145, (void *)(56 * v147));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  if (sub_22EFD0FC4(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"simple", 6);
    v90 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v90);
    llvm::json::Value::moveFrom();
    v91 = v148[0];
    v148[0] = 0;
    if (v91)
    {
      if (*(char *)(v91 + 23) < 0)
        operator delete(*(void **)v91);
      MEMORY[0x2348A0E9C](v91, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x40000000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v92 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v92);
    llvm::json::Value::moveFrom();
    v93 = v148[0];
    v148[0] = 0;
    if (v93)
    {
      if (*(char *)(v93 + 23) < 0)
        operator delete(*(void **)v93);
      MEMORY[0x2348A0E9C](v93, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22E69200C(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v94 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v94);
    llvm::json::Value::moveFrom();
    v95 = v148[0];
    v148[0] = 0;
    if (v95)
    {
      if (*(char *)(v95 + 23) < 0)
        operator delete(*(void **)v95);
      MEMORY[0x2348A0E9C](v95, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD0BB4(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"hasConstParam", 13);
    v96 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v96);
    llvm::json::Value::moveFrom();
    v97 = v148[0];
    v148[0] = 0;
    if (v97)
    {
      if (*(char *)(v97 + 23) < 0)
        operator delete(*(void **)v97);
      MEMORY[0x2348A0E9C](v97, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (((*(unsigned __int16 *)(*(_QWORD *)(a2 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(a2 + 128) + 10) << 16)) & 0x10000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"implicitHasConstParam", 21);
    v98 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v98);
    llvm::json::Value::moveFrom();
    v99 = v148[0];
    v148[0] = 0;
    if (v99)
    {
      if (*(char *)(v99 + 23) < 0)
        operator delete(*(void **)v99);
      MEMORY[0x2348A0E9C](v99, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x10) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userDeclared", 12);
    v100 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v100);
    llvm::json::Value::moveFrom();
    v101 = v148[0];
    v148[0] = 0;
    if (v101)
    {
      if (*(char *)(v101 + 23) < 0)
        operator delete(*(void **)v101);
      MEMORY[0x2348A0E9C](v101, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x800) == 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v102 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v102);
    llvm::json::Value::moveFrom();
    v103 = v148[0];
    v148[0] = 0;
    if (v103)
    {
      if (*(char *)(v103 + 23) < 0)
        operator delete(*(void **)v103);
      MEMORY[0x2348A0E9C](v103, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EABE304(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsOverloadResolution", 23);
    v104 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v104);
    llvm::json::Value::moveFrom();
    v105 = v148[0];
    v148[0] = 0;
    if (v105)
    {
      if (*(char *)(v105 + 23) < 0)
        operator delete(*(void **)v105);
      MEMORY[0x2348A0E9C](v105, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"copyAssign", 10);
  v106 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v106);
  llvm::json::Value::moveFrom();
  v107 = v148[0];
  v148[0] = 0;
  if (v107)
  {
    if (*(char *)(v107 + 23) < 0)
      operator delete(*(void **)v107);
    MEMORY[0x2348A0E9C](v107, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  llvm::deallocate_buffer(v145, (void *)(56 * v147));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x1000) != 0 || sub_22EABE940(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"exists", 6);
    v108 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v108);
    llvm::json::Value::moveFrom();
    v109 = v148[0];
    v148[0] = 0;
    if (v109)
    {
      if (*(char *)(v109 + 23) < 0)
        operator delete(*(void **)v109);
      MEMORY[0x2348A0E9C](v109, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EFD101C(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"simple", 6);
    v110 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v110);
    llvm::json::Value::moveFrom();
    v111 = v148[0];
    v148[0] = 0;
    if (v111)
    {
      if (*(char *)(v111 + 23) < 0)
        operator delete(*(void **)v111);
      MEMORY[0x2348A0E9C](v111, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EACA488(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v112 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v112);
    llvm::json::Value::moveFrom();
    v113 = v148[0];
    v148[0] = 0;
    if (v113)
    {
      if (*(char *)(v113 + 23) < 0)
        operator delete(*(void **)v113);
      MEMORY[0x2348A0E9C](v113, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EAE8D9C(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v114 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v114);
    llvm::json::Value::moveFrom();
    v115 = v148[0];
    v148[0] = 0;
    if (v115)
    {
      if (*(char *)(v115 + 23) < 0)
        operator delete(*(void **)v115);
      MEMORY[0x2348A0E9C](v115, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x20) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userDeclared", 12);
    v116 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v116);
    llvm::json::Value::moveFrom();
    v117 = v148[0];
    v148[0] = 0;
    if (v117)
    {
      if (*(char *)(v117 + 23) < 0)
        operator delete(*(void **)v117);
      MEMORY[0x2348A0E9C](v117, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  if (sub_22EABE940(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v118 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v118);
    llvm::json::Value::moveFrom();
    v119 = v148[0];
    v148[0] = 0;
    if (v119)
    {
      if (*(char *)(v119 + 23) < 0)
        operator delete(*(void **)v119);
      MEMORY[0x2348A0E9C](v119, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsOverloadResolution", 23);
    v120 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v120);
    llvm::json::Value::moveFrom();
    v121 = v148[0];
    v148[0] = 0;
    if (v121)
    {
      if (*(char *)(v121 + 23) < 0)
        operator delete(*(void **)v121);
      MEMORY[0x2348A0E9C](v121, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"moveAssign", 10);
  v122 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v122);
  llvm::json::Value::moveFrom();
  v123 = v148[0];
  v148[0] = 0;
  if (v123)
  {
    if (*(char *)(v123 + 23) < 0)
      operator delete(*(void **)v123);
    MEMORY[0x2348A0E9C](v123, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  llvm::deallocate_buffer(v145, (void *)(56 * v147));
  v145 = 0;
  v146 = 0;
  v147 = 0;
  if (sub_22EFD10A0(a2))
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"simple", 6);
    v124 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v124);
    llvm::json::Value::moveFrom();
    v125 = v148[0];
    v148[0] = 0;
    if (v125)
    {
      if (*(char *)(v125 + 23) < 0)
        operator delete(*(void **)v125);
      MEMORY[0x2348A0E9C](v125, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x8000000000000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"irrelevant", 10);
    v126 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v126);
    llvm::json::Value::moveFrom();
    v127 = v148[0];
    v148[0] = 0;
    if (v127)
    {
      if (*(char *)(v127 + 23) < 0)
        operator delete(*(void **)v127);
      MEMORY[0x2348A0E9C](v127, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100000000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"trivial", 7);
    v128 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v128);
    llvm::json::Value::moveFrom();
    v129 = v148[0];
    v148[0] = 0;
    if (v129)
    {
      if (*(char *)(v129 + 23) < 0)
        operator delete(*(void **)v129);
      MEMORY[0x2348A0E9C](v129, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x100000000000) == 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"nonTrivial", 10);
    v130 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v130);
    llvm::json::Value::moveFrom();
    v131 = v148[0];
    v148[0] = 0;
    if (v131)
    {
      if (*(char *)(v131 + 23) < 0)
        operator delete(*(void **)v131);
      MEMORY[0x2348A0E9C](v131, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x40) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"userDeclared", 12);
    v132 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v132);
    llvm::json::Value::moveFrom();
    v133 = v148[0];
    v148[0] = 0;
    if (v133)
    {
      if (*(char *)(v133 + 23) < 0)
        operator delete(*(void **)v133);
      MEMORY[0x2348A0E9C](v133, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x2000) == 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsImplicit", 13);
    v134 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v134);
    llvm::json::Value::moveFrom();
    v135 = v148[0];
    v148[0] = 0;
    if (v135)
    {
      if (*(char *)(v135 + 23) < 0)
        operator delete(*(void **)v135);
      MEMORY[0x2348A0E9C](v135, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x200000000) != 0)
  {
    v149 = 1;
    LOBYTE(v150) = 1;
    sub_22F094D70(v148, (uint64_t)"needsOverloadResolution", 23);
    v136 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v136);
    llvm::json::Value::moveFrom();
    v137 = v148[0];
    v148[0] = 0;
    if (v137)
    {
      if (*(char *)(v137 + 23) < 0)
        operator delete(*(void **)v137);
      MEMORY[0x2348A0E9C](v137, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v149);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((**(_QWORD **)(a2 + 128) & 0x200000000) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((**(_QWORD **)(a2 + 128) & 0x4000000000) != 0)
    {
      v149 = 1;
      LOBYTE(v150) = 1;
      sub_22F094D70(v148, (uint64_t)"defaultedIsDeleted", 18);
      v138 = (llvm::json::Value *)llvm::json::Object::operator[]();
      llvm::json::Value::destroy(v138);
      llvm::json::Value::moveFrom();
      v139 = v148[0];
      v148[0] = 0;
      if (v139)
      {
        if (*(char *)(v139 + 23) < 0)
          operator delete(*(void **)v139);
        MEMORY[0x2348A0E9C](v139, 0x1012C40EC159624);
      }
      llvm::json::Value::destroy((llvm::json::Value *)&v149);
    }
  }
  v149 = 7;
  v150 = v145;
  v151 = v146;
  v145 = 0;
  v146 = 0;
  v152 = v147;
  v147 = 0;
  sub_22F094D70(v148, (uint64_t)"dtor", 4);
  v140 = (llvm::json::Value *)llvm::json::Object::operator[]();
  llvm::json::Value::destroy(v140);
  llvm::json::Value::moveFrom();
  v141 = v148[0];
  v148[0] = 0;
  if (v141)
  {
    if (*(char *)(v141 + 23) < 0)
      operator delete(*(void **)v141);
    MEMORY[0x2348A0E9C](v141, 0x1012C40EC159624);
  }
  llvm::json::Value::destroy((llvm::json::Value *)&v149);
  sub_22F095054((uint64_t *)&v145);
  return llvm::deallocate_buffer(v145, (void *)(56 * v147));
}

uint64_t sub_22F092898(uint64_t a1, uint64_t a2)
{
  char v4;
  unint64_t v5;
  unint64_t v6;
  llvm::json::OStream *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  llvm::json::Value *v11;
  llvm::json::Value *v12;
  unint64_t *v13;
  uint64_t v14;
  llvm::json::OStream *v15;
  const char *v16;
  uint64_t v17;
  llvm *v19;
  llvm::json::Value *v20;
  unsigned int v21;
  llvm::json::Value *v22;
  llvm::json::Value *v23;
  unint64_t v24;
  char v25[2];
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t *v29;
  uint64_t v30;
  llvm::json::Value **v31;
  llvm *v32;
  llvm::json::Value *v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  sub_22E4913B4(a2, (uint64_t)v25);
  sub_22F3E1D20(a1, (uint64_t)"trailingReturn", 14, (v26 >> 1) & 1);
  v4 = sub_22E47E20C(a2);
  sub_22F3E1D20(a1, (uint64_t)"const", 5, v4 & 1);
  v5 = sub_22E47E20C(a2);
  sub_22F3E1D20(a1, (uint64_t)"volatile", 8, (v5 >> 2) & 1);
  v6 = sub_22E47E20C(a2);
  sub_22F3E1D20(a1, (uint64_t)"restrict", 8, (v6 >> 1) & 1);
  sub_22F3E1D20(a1, (uint64_t)"variadic", 8, v26 & 1);
  if (v27 == 2)
  {
    v7 = (llvm::json::OStream *)(a1 + 1048);
    v8 = "&&";
    v9 = 2;
  }
  else
  {
    if (v27 != 1)
      goto LABEL_6;
    v7 = (llvm::json::OStream *)(a1 + 1048);
    v8 = "&";
    v9 = 1;
  }
  sub_22E732740((llvm::json::Value *)&v31, (uint64_t)v8, v9);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v7, (const llvm::json::Value *)&v31);
  llvm::json::OStream::attributeEnd(v7);
  llvm::json::Value::destroy((llvm::json::Value *)&v31);
LABEL_6:
  switch(v28)
  {
    case 1:
    case 2:
      sub_22E732740((llvm::json::Value *)&v31, (uint64_t)"throw", 5);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v31);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v31);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      if (v30)
      {
        v11 = 0;
        v13 = v29;
        v14 = 8 * v30;
        do
        {
          sub_22F08CDA0((uint64_t)&v19, a1, *v13, 1);
          LOWORD(v31) = 7;
          v32 = v19;
          v33 = v20;
          v19 = 0;
          v20 = 0;
          LODWORD(v34) = v21;
          v21 = 0;
          if ((unint64_t)v11 >= v24)
          {
            v11 = sub_22F09585C(&v22);
          }
          else
          {
            llvm::json::Value::moveFrom();
            v11 = (llvm::json::Value *)((char *)v11 + 32);
          }
          v23 = v11;
          llvm::json::Value::destroy((llvm::json::Value *)&v31);
          sub_22F095054((uint64_t *)&v19);
          llvm::deallocate_buffer(v19, (void *)(56 * v21));
          ++v13;
          v14 -= 8;
        }
        while (v14);
        v12 = v22;
        v10 = v24;
      }
      LOWORD(v31) = 8;
      v32 = v12;
      v33 = v11;
      v34 = v10;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v31);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v31);
      v31 = &v22;
      sub_22F095968((void ***)&v31);
      return sub_22F3E28FC(a1, *(_QWORD *)(a2 + 16));
    case 3:
      v15 = (llvm::json::OStream *)(a1 + 1048);
      sub_22E732740((llvm::json::Value *)&v31, (uint64_t)"throw", 5);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v31);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v31);
      LOWORD(v31) = 1;
      LOBYTE(v32) = 1;
      goto LABEL_20;
    case 4:
      v15 = (llvm::json::OStream *)(a1 + 1048);
      v16 = "nothrow";
      v17 = 7;
      goto LABEL_19;
    case 5:
      v15 = (llvm::json::OStream *)(a1 + 1048);
      v16 = "noexcept";
      v17 = 8;
LABEL_19:
      sub_22E732740((llvm::json::Value *)&v31, (uint64_t)v16, v17);
      goto LABEL_20;
    case 7:
    case 8:
      v15 = (llvm::json::OStream *)(a1 + 1048);
      sub_22E732740((llvm::json::Value *)&v31, (uint64_t)"noexcept", 8);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v31);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v31);
      LOWORD(v31) = 1;
      LOBYTE(v32) = v28 == 8;
LABEL_20:
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v15, (const llvm::json::Value *)&v31);
      llvm::json::OStream::attributeEnd(v15);
      llvm::json::Value::destroy((llvm::json::Value *)&v31);
      break;
    default:
      return sub_22F3E28FC(a1, *(_QWORD *)(a2 + 16));
  }
  return sub_22F3E28FC(a1, *(_QWORD *)(a2 + 16));
}

void sub_22F092D04(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::json::OStream *v5;
  const char *v6;
  uint64_t v7;
  char v8;
  std::string::size_type size;
  llvm::json::OStream *v10;
  std::string __p;
  std::string __src;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)(a2 + 16) >> 22) & 7;
  if (v4 == 1)
  {
    v5 = (llvm::json::OStream *)(a1 + 1048);
    v6 = "static";
    v7 = 6;
  }
  else
  {
    if (v4 != 2)
      goto LABEL_6;
    v5 = (llvm::json::OStream *)(a1 + 1048);
    v6 = "*";
    v7 = 1;
  }
  sub_22E732740((llvm::json::Value *)v13, (uint64_t)v6, v7);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v5, (const llvm::json::Value *)v13);
  llvm::json::OStream::attributeEnd(v5);
  llvm::json::Value::destroy((llvm::json::Value *)v13);
LABEL_6:
  v13[0] = ((unint64_t)*(unsigned int *)(a2 + 16) >> 19) & 7;
  sub_22F40B554(v13, &__src);
  v8 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  size = *((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x7F;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __src.__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = (llvm::json::OStream *)(a1 + 1048);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_22E3BB2B4(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      __p = __src;
    sub_22E732810((uint64_t)v13, (__int128 *)&__p);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v10, (const llvm::json::Value *)v13);
    llvm::json::OStream::attributeEnd(v10);
    llvm::json::Value::destroy((llvm::json::Value *)v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  }
  if (v8 < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

void sub_22F092E90(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *__p[2];
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_22F3E1D20(a1, (uint64_t)"isAlias", 7, (*(_DWORD *)(a2 + 16) >> 19) & 1);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = v16;
  llvm::raw_ostream::SetBufferAndMode();
  v18[0] = *(_QWORD *)(a2 + 32);
  sub_22F402048(v18, (llvm::raw_ostream *)&v7, a1 + 1256, 1);
  if (*((char *)v15 + 23) < 0)
  {
    sub_22E3BB2B4(__p, *v15, (unint64_t)v15[1]);
  }
  else
  {
    v4 = *(_OWORD *)v15;
    v6 = v15[2];
    *(_OWORD *)__p = v4;
  }
  sub_22E732810((uint64_t)v18, (__int128 *)__p);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v18);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)v18);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_22F092FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  void *__p[2];
  void *v8;
  void *v9[2];
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    LODWORD(v15) = 0;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v14 = MEMORY[0x24BED83D8] + 16;
    v22 = v9;
    llvm::raw_ostream::SetBufferAndMode();
    sub_22F0AAD88(v4, (llvm::raw_ostream *)&v14, (__int128 *)(a1 + 1256), 1);
    if (*((char *)v22 + 23) < 0)
    {
      sub_22E3BB2B4(__p, *v22, (unint64_t)v22[1]);
    }
    else
    {
      v5 = *(_OWORD *)v22;
      v8 = v22[2];
      *(_OWORD *)__p = v5;
    }
    sub_22E732810((uint64_t)&v11, (__int128 *)__p);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v11);
    llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
    llvm::json::Value::destroy((llvm::json::Value *)&v11);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
  if ((*(_BYTE *)(a2 + 19) & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      sub_22F08F470((uint64_t)&v11, a1, v6);
      LOWORD(v14) = 7;
      v15 = v11;
      v16 = v12;
      v11 = 0;
      v12 = 0;
      LODWORD(v17) = v13;
      v13 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v14);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v14);
      sub_22F095054((uint64_t *)&v11);
      llvm::deallocate_buffer(v11, (void *)(56 * v13));
    }
  }
}

void sub_22F0931F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  void *v7;
  void *v8[2];
  uint64_t v9;
  void *__src[2];
  uint64_t v11;
  void *__p[2];
  char v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 40))
  {
    sub_22EFC683C((uint64_t *)(a2 + 40), __p);
    sub_22E732810((uint64_t)v14, (__int128 *)__p);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v14);
    llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
    llvm::json::Value::destroy((llvm::json::Value *)v14);
    if (v13 < 0)
      operator delete(__p[0]);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    if ((*(_WORD *)(v5 + 8) & 0x7F) != 0x51 && ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9 || !sub_22E3CB5E0(a2)))
    {
      sub_22F3E864C((uint64_t ***)(a1 + 1248), a2, __src);
      v6 = HIBYTE(v11);
      v7 = (void *)(HIBYTE(v11) & 0x7F);
      if (v11 < 0)
        v7 = __src[1];
      if (v7)
      {
        if (SHIBYTE(v11) < 0)
        {
          sub_22E3BB2B4(v8, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          *(_OWORD *)v8 = *(_OWORD *)__src;
          v9 = v11;
        }
        sub_22E732810((uint64_t)v14, (__int128 *)v8);
        llvm::json::OStream::attributeBegin();
        llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)v14);
        llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
        llvm::json::Value::destroy((llvm::json::Value *)v14);
        if (SHIBYTE(v9) < 0)
          operator delete(v8[0]);
        v6 = HIBYTE(v11);
      }
      if (v6 < 0)
        operator delete(__src[0]);
    }
  }
}

void sub_22F0933A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  llvm::json::OStream *v15;
  std::string v16;
  std::string v17;
  void *__p;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  std::string *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  memset(&v17, 0, sizeof(v17));
  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    LODWORD(v19) = 0;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    __p = (void *)(MEMORY[0x24BED83D8] + 16);
    v26 = &v17;
    llvm::raw_ostream::SetBufferAndMode();
    v5 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v7 = *(_QWORD *)v7;
      for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
      {
        v9 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v9 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_16;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_15;
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v9 = -48;
          }
          else
          {
LABEL_15:
            if (i != 70)
            {
LABEL_16:
              v10 = i - 52;
              if ((i - 33) >= 5)
                v11 = -48;
              else
                v11 = -64;
              if (v10 >= 6)
                v9 = v11;
              else
                v9 = -72;
              goto LABEL_22;
            }
            v9 = -64;
          }
        }
LABEL_22:
        v12 = *(_QWORD *)(v7 + v9 + 16);
        v7 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v7 = *(_QWORD *)v7;
      }
      v5 = v7 - 40;
    }
    sub_22F0AAD88(v4, (llvm::raw_ostream *)&__p, (__int128 *)(*(_QWORD *)(v5 + 88) + 15104), 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  }
  sub_22EFC683C((uint64_t *)(a2 + 40), &__p);
  if (v20 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v20 >= 0)
    v14 = HIBYTE(v20) & 0x7F;
  else
    v14 = v19;
  std::string::append(&v17, p_p, v14);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v15 = (llvm::json::OStream *)(a1 + 1048);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    sub_22E3BB2B4(&v16, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v16 = v17;
  sub_22E732810((uint64_t)&__p, (__int128 *)&v16);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v15, (const llvm::json::Value *)&__p);
  llvm::json::OStream::attributeEnd(v15);
  llvm::json::Value::destroy((llvm::json::Value *)&__p);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_22F093648(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_22F093698(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  llvm::json::OStream *v25;
  __int128 v26;
  char v27;
  _BYTE v28[88];

  v27 = 9;
  strcpy((char *)&v26, "protected");
  sub_22E732810((uint64_t)v28, &v26);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v25, (const llvm::json::Value *)v28);
  llvm::json::OStream::attributeEnd(v25);
  llvm::json::Value::destroy((llvm::json::Value *)v28);
  if (v27 < 0)
    operator delete((void *)v26);
}

void sub_22F093764(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm *v15;
  unint64_t *v16;
  uint64_t v17;
  llvm *v18;
  llvm *v19;
  unsigned int v20;
  llvm *v21;
  llvm *v22;
  unint64_t v23;
  llvm **v24;
  llvm *v25;
  llvm *v26;
  unint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_22F0931F0(a1, a2);
  sub_22F08F470((uint64_t)&v21, a1, *(_QWORD *)(a2 + 104));
  LOWORD(v24) = 7;
  v25 = v21;
  v26 = v22;
  v21 = 0;
  v22 = 0;
  LODWORD(v27) = v23;
  LODWORD(v23) = 0;
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v24);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)&v24);
  sub_22F095054((uint64_t *)&v21);
  llvm::deallocate_buffer(v21, (void *)(56 * v23));
  if (!a2 || (v4 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_22;
          }
          v8 = -64;
        }
      }
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = sub_22F368C34(*(_QWORD *)(v4 + 88), a2);
  sub_22F08F470((uint64_t)&v21, a1, v12);
  LOWORD(v24) = 7;
  v25 = v21;
  v26 = v22;
  v21 = 0;
  v22 = 0;
  LODWORD(v27) = v23;
  LODWORD(v23) = 0;
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v24);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)&v24);
  sub_22F095054((uint64_t *)&v21);
  llvm::deallocate_buffer(v21, (void *)(56 * v23));
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v13 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(unint64_t **)(v13 + 16);
    v17 = 8 * v14;
    do
    {
      sub_22F08F470((uint64_t)&v18, a1, *v16);
      LOWORD(v24) = 7;
      v25 = v18;
      v26 = v19;
      v18 = 0;
      v19 = 0;
      LODWORD(v27) = v20;
      v20 = 0;
      if ((unint64_t)v15 >= v23)
      {
        v15 = sub_22F09585C(&v21);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v15 = (llvm *)((char *)v15 + 32);
      }
      v22 = v15;
      llvm::json::Value::destroy((llvm::json::Value *)&v24);
      sub_22F095054((uint64_t *)&v18);
      llvm::deallocate_buffer(v18, (void *)(56 * v20));
      ++v16;
      v17 -= 8;
    }
    while (v17);
    if (v21 != v15)
    {
      LOWORD(v24) = 8;
      v25 = v21;
      v26 = v15;
      v27 = v23;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v24);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v24);
    }
  }
  v24 = &v21;
  sub_22F095968((void ***)&v24);
}

void sub_22F093B20(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  llvm::json::Value *v8;
  llvm::json::OStream *v9;
  llvm *v10;
  llvm::json::Value *v11;
  unsigned int v12;
  llvm::json::Value *v13;
  llvm::json::Value *v14;
  unint64_t v15;
  llvm::json::Value **v16;
  llvm *v17;
  llvm::json::Value *v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22F0931F0(a1, a2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v4 = sub_22F259248(a2);
  if ((unint64_t *)v4 != v5)
  {
    v6 = (unint64_t *)v4;
    v7 = v5;
    v8 = 0;
    do
    {
      sub_22F08F470((uint64_t)&v10, a1, *v6);
      LOWORD(v16) = 7;
      v17 = v10;
      v18 = v11;
      v10 = 0;
      v11 = 0;
      LODWORD(v19) = v12;
      v12 = 0;
      if ((unint64_t)v8 >= v15)
      {
        v8 = sub_22F09585C(&v13);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v8 = (llvm::json::Value *)((char *)v8 + 32);
      }
      v14 = v8;
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
      sub_22F095054((uint64_t *)&v10);
      llvm::deallocate_buffer(v10, (void *)(56 * v12));
      ++v6;
    }
    while (v6 != v7);
    if (v13 != v8)
    {
      v9 = (llvm::json::OStream *)(a1 + 1048);
      LOWORD(v16) = 8;
      v17 = v13;
      v18 = v8;
      v19 = v15;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v9, (const llvm::json::Value *)&v16);
      llvm::json::OStream::attributeEnd(v9);
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
    }
  }
  v16 = &v13;
  sub_22F095968((void ***)&v16);
}

void sub_22F093CB8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  llvm *v9;
  llvm *v10;
  llvm *v11;
  unsigned int v12;
  llvm *v13;
  llvm *v14;
  unint64_t v15;
  llvm **v16;
  llvm *v17;
  llvm *v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22F0931F0(a1, a2);
  v4 = sub_22F3B46CC(a2);
  sub_22F08F470((uint64_t)&v13, a1, v4);
  LOWORD(v16) = 7;
  v17 = v13;
  v13 = 0;
  v18 = v14;
  v14 = 0;
  LODWORD(v19) = v15;
  LODWORD(v15) = 0;
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v16);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)&v16);
  sub_22F095054((uint64_t *)&v13);
  llvm::deallocate_buffer(v13, (void *)(56 * v15));
  v5 = sub_22F3B4E88(a2);
  sub_22F08F470((uint64_t)&v13, a1, v5);
  LOWORD(v16) = 7;
  v17 = v13;
  v13 = 0;
  v18 = v14;
  v14 = 0;
  LODWORD(v19) = v15;
  LODWORD(v15) = 0;
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v16);
  llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
  llvm::json::Value::destroy((llvm::json::Value *)&v16);
  sub_22F095054((uint64_t *)&v13);
  llvm::deallocate_buffer(v13, (void *)(56 * v15));
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v6 = (unint64_t *)sub_22F2590A8(a2);
  v7 = sub_22F25910C(a2);
  if (v6 != (unint64_t *)v7)
  {
    v8 = (unint64_t *)v7;
    v9 = 0;
    do
    {
      sub_22F08F470((uint64_t)&v10, a1, *v6);
      LOWORD(v16) = 7;
      v17 = v10;
      v18 = v11;
      v10 = 0;
      v11 = 0;
      LODWORD(v19) = v12;
      v12 = 0;
      if ((unint64_t)v9 >= v15)
      {
        v9 = sub_22F09585C(&v13);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v9 = (llvm *)((char *)v9 + 32);
      }
      v14 = v9;
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
      sub_22F095054((uint64_t *)&v10);
      llvm::deallocate_buffer(v10, (void *)(56 * v12));
      ++v6;
    }
    while (v6 != v8);
    if (v13 != v9)
    {
      LOWORD(v16) = 8;
      v17 = v13;
      v18 = v9;
      v19 = v15;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v16);
      llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
      llvm::json::Value::destroy((llvm::json::Value *)&v16);
    }
  }
  v16 = &v13;
  sub_22F095968((void ***)&v16);
}

uint64_t sub_22F093F88(uint64_t a1, uint64_t a2)
{
  sub_22F3E1D20(a1, (uint64_t)"variadic", 8, (*(_DWORD *)(a2 + 48) >> 13) & 1);
  return sub_22F3E1D20(a1, (uint64_t)"capturesThis", 12, (*(_DWORD *)(a2 + 48) >> 14) & 1);
}

void sub_22F093FD8(uint64_t a1, uint64_t a2)
{
  llvm::json::OStream *v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::json::Value *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  const char *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::json::Value *v20;
  uint64_t v21;
  unint64_t v22;
  llvm::json::Value *v23;
  llvm::json::Value *v24;
  unint64_t v25;
  uint64_t v26[3];
  llvm *v27;
  llvm::json::Value *v28;
  unsigned int v29;
  llvm::json::Value **v30;
  llvm *v31;
  llvm::json::Value *v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  v5 = sub_22F3C1C54((*(_DWORD *)a2 >> 18) & 0x7F);
  v6 = strlen(v5);
  sub_22E732740((llvm::json::Value *)&v30, (uint64_t)v5, v6);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)&v30);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)&v30);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v7 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v7)
  {
    v8 = sub_22EFFB554((unsigned __int8 *)a2);
    v9 = 0;
    v10 = 8 * v7;
    do
    {
      v11 = *(_QWORD *)v8;
      v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
        v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)v8 + 16));
      v13 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      sub_22F094D70((uint64_t *)&v30, (uint64_t)"name", 4);
      v14 = *(_QWORD *)(v13 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v13 + 40) & 7) != 0 || v14 == 0)
      {
        v18 = 0;
        v17 = "";
      }
      else
      {
        v16 = *(_DWORD **)(v14 + 16);
        v19 = *v16;
        v17 = (const char *)(v16 + 4);
        v18 = v19;
      }
      sub_22E732740((llvm::json::Value *)v33, (uint64_t)v17, v18);
      sub_22F3E815C((uint64_t)&v27, (__int128 **)&v30, 1);
      llvm::json::Value::destroy((llvm::json::Value *)v33);
      sub_22F094F48((uint64_t *)&v30, 0);
      if ((*(_BYTE *)(v11 + 12) & 1) != 0)
      {
        LOWORD(v30) = 1;
        LOBYTE(v31) = 1;
        sub_22F094D70(v26, (uint64_t)"isVirtual", 9);
        v20 = (llvm::json::Value *)llvm::json::Object::operator[]();
        llvm::json::Value::destroy(v20);
        llvm::json::Value::moveFrom();
        v21 = v26[0];
        v26[0] = 0;
        if (v21)
        {
          if (*(char *)(v21 + 23) < 0)
            operator delete(*(void **)v21);
          MEMORY[0x2348A0E9C](v21, 0x1012C40EC159624);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v30);
      }
      LOWORD(v30) = 7;
      v31 = v27;
      v32 = v28;
      v27 = 0;
      v28 = 0;
      LODWORD(v33[0]) = v29;
      v29 = 0;
      if ((unint64_t)v9 >= v25)
      {
        v9 = sub_22F09585C(&v23);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v9 = (llvm::json::Value *)((char *)v9 + 32);
      }
      v24 = v9;
      llvm::json::Value::destroy((llvm::json::Value *)&v30);
      sub_22F095054((uint64_t *)&v27);
      llvm::deallocate_buffer(v27, (void *)(56 * v29));
      v8 += 8;
      v10 -= 8;
    }
    while (v10);
    if (v23 != v9)
    {
      LOWORD(v30) = 8;
      v31 = v23;
      v32 = v9;
      v33[0] = v25;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v4, (const llvm::json::Value *)&v30);
      llvm::json::OStream::attributeEnd(v4);
      llvm::json::Value::destroy((llvm::json::Value *)&v30);
    }
  }
  v22 = sub_22EFFB4A0(a2);
  if (v22)
  {
    sub_22F08F470((uint64_t)&v27, a1, v22);
    LOWORD(v30) = 7;
    v31 = v27;
    v32 = v28;
    v27 = 0;
    v28 = 0;
    LODWORD(v33[0]) = v29;
    v29 = 0;
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v30);
    llvm::json::OStream::attributeEnd(v4);
    llvm::json::Value::destroy((llvm::json::Value *)&v30);
    sub_22F095054((uint64_t *)&v27);
    llvm::deallocate_buffer(v27, (void *)(56 * v29));
  }
  v30 = &v23;
  sub_22F095968((void ***)&v30);
}

uint64_t sub_22F094398(uint64_t a1, char *a2, unint64_t a3)
{
  void *__p[2];
  char v6;

  sub_22E3B4274(__p, a2, &a2[a3], a3);
  sub_22E732810(a1, (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1;
}

const char *sub_22F0943EC(uint64_t a1, unsigned int a2)
{
  const char **v2;
  const char *v3;

  if (a1)
  {
    if (a2 < 0xC6)
      v2 = (const char **)&(&off_24FAC12E8)[3 * a2];
    else
      v2 = *(const char ***)(*(_QWORD *)(a1 + 16) + 8 * a2 - 1584);
    v3 = *v2;
    if (*v2)
LABEL_8:
      strlen(v3);
  }
  else
  {
    if (a2 <= 0xC5)
    {
      v3 = (&off_24FAC12E8)[3 * a2];
      if (!v3)
        return v3;
      goto LABEL_8;
    }
    return "<invalid>";
  }
  return v3;
}

void sub_22F094488(uint64_t a1, uint64_t a2)
{
  llvm::json::OStream *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14[5];

  v14[4] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = (llvm::json::OStream *)(a1 + 1048);
  v4 = sub_22F0943EC(*(_QWORD *)(a1 + 1272), *(_DWORD *)(a2 + 12) >> 12);
  sub_22E732740((llvm::json::Value *)v14, (uint64_t)v4, v5);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v3, (const llvm::json::Value *)v14);
  llvm::json::OStream::attributeEnd(v3);
  llvm::json::Value::destroy((llvm::json::Value *)v14);
  switch((*(_DWORD *)(a2 + 12) >> 9) & 7)
  {
    case 0:
      v6 = "normal";
      goto LABEL_8;
    case 1:
      v6 = "bold";
      v7 = 4;
      goto LABEL_9;
    case 2:
      v6 = "monospaced";
      goto LABEL_6;
    case 3:
      v6 = "emphasized";
LABEL_6:
      v7 = 10;
      goto LABEL_9;
    case 4:
      v6 = "anchor";
LABEL_8:
      v7 = 6;
LABEL_9:
      sub_22E732740((llvm::json::Value *)v14, (uint64_t)v6, v7);
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v3, (const llvm::json::Value *)v14);
      llvm::json::OStream::attributeEnd(v3);
      llvm::json::Value::destroy((llvm::json::Value *)v14);
      break;
    default:
      break;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (*(_DWORD *)(a2 + 24))
  {
    v8 = 0;
    v9 = 0;
    v10 = 24 * *(unsigned int *)(a2 + 24);
    do
    {
      sub_22E732740((llvm::json::Value *)v14, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8 + 16));
      if (v9 >= v13)
      {
        v9 = (void **)sub_22F09585C((llvm::json::Value **)&v11);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v9 += 4;
      }
      v12 = v9;
      llvm::json::Value::destroy((llvm::json::Value *)v14);
      v8 += 24;
    }
    while (v10 != v8);
    if (v11 != v9)
    {
      LOWORD(v14[0]) = 8;
      v14[1] = v11;
      v14[2] = v9;
      v14[3] = v13;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v3, (const llvm::json::Value *)v14);
      llvm::json::OStream::attributeEnd(v3);
      llvm::json::Value::destroy((llvm::json::Value *)v14);
    }
  }
  v14[0] = (void **)&v11;
  sub_22F095968(v14);
}

void sub_22F0946D4(uint64_t a1, uint64_t a2)
{
  llvm::json::OStream *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  llvm::json::Value *v8;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  llvm::json::OStream *v12;
  void **v13;
  void **v14;
  void **v15;
  _BYTE v16[32];
  uint64_t v17;
  _BYTE v18[32];
  uint64_t v19;
  void **v20[8];
  _BYTE v21[32];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::json::OStream *)(a1 + 1048);
  sub_22E732740((llvm::json::Value *)v20, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v4, (const llvm::json::Value *)v20);
  llvm::json::OStream::attributeEnd(v4);
  llvm::json::Value::destroy((llvm::json::Value *)v20);
  sub_22F3E1D20(a1, (uint64_t)"selfClosing", 11, (*(unsigned __int16 *)(a2 + 12) >> 10) & 1);
  sub_22F3E1D20(a1, (uint64_t)"malformed", 9, (*(unsigned __int16 *)(a2 + 12) >> 9) & 1);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v5 = *(unsigned int *)(a2 + 48);
  if (*(_DWORD *)(a2 + 48))
  {
    v12 = v4;
    v6 = 0;
    do
    {
      sub_22E732740((llvm::json::Value *)v18, (uint64_t)"name", 4);
      sub_22E732740((llvm::json::Value *)&v19, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56 * v6 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56 * v6 + 16));
      llvm::json::Value::Value();
      sub_22E732740((llvm::json::Value *)v16, (uint64_t)"value", 5);
      sub_22E732740((llvm::json::Value *)&v17, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56 * v6 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56 * v6 + 48));
      llvm::json::Value::Value();
      llvm::json::Value::Value();
      v7 = v14;
      if (v14 >= v15)
      {
        v8 = sub_22F09585C((llvm::json::Value **)&v13);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v8 = (llvm::json::Value *)(v7 + 4);
      }
      v14 = (void **)v8;
      llvm::json::Value::destroy((llvm::json::Value *)v21);
      for (i = 4; i != -4; i -= 4)
        llvm::json::Value::destroy((llvm::json::Value *)&v20[i]);
      for (j = 32; j != -32; j -= 32)
        llvm::json::Value::destroy((llvm::json::Value *)&v16[j]);
      for (k = 32; k != -32; k -= 32)
        llvm::json::Value::destroy((llvm::json::Value *)&v18[k]);
      ++v6;
    }
    while (v6 != v5);
    if (v13 != v14)
    {
      LOWORD(v20[0]) = 8;
      v20[1] = v13;
      v20[2] = v14;
      v20[3] = v15;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v12, (const llvm::json::Value *)v20);
      llvm::json::OStream::attributeEnd(v12);
      llvm::json::Value::destroy((llvm::json::Value *)v20);
    }
  }
  v20[0] = (void **)&v13;
  sub_22F095968(v20);
}

void sub_22F094974(uint64_t a1, uint64_t a2)
{
  llvm::json::OStream *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12[5];

  v12[4] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = (llvm::json::OStream *)(a1 + 1048);
  v4 = sub_22F0943EC(*(_QWORD *)(a1 + 1272), (*(_DWORD *)(a2 + 12) >> 8) & 0xFFFFF);
  sub_22E732740((llvm::json::Value *)v12, (uint64_t)v4, v5);
  llvm::json::OStream::attributeBegin();
  llvm::json::OStream::value(v3, (const llvm::json::Value *)v12);
  llvm::json::OStream::attributeEnd(v3);
  llvm::json::Value::destroy((llvm::json::Value *)v12);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (*(_DWORD *)(a2 + 24))
  {
    v6 = 0;
    v7 = 0;
    v8 = 24 * *(unsigned int *)(a2 + 24);
    do
    {
      sub_22E732740((llvm::json::Value *)v12, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v6 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 16) + v6 + 16));
      if (v7 >= v11)
      {
        v7 = (void **)sub_22F09585C((llvm::json::Value **)&v9);
      }
      else
      {
        llvm::json::Value::moveFrom();
        v7 += 4;
      }
      v10 = v7;
      llvm::json::Value::destroy((llvm::json::Value *)v12);
      v6 += 24;
    }
    while (v8 != v6);
    if (v9 != v7)
    {
      LOWORD(v12[0]) = 8;
      v12[1] = v9;
      v12[2] = v7;
      v12[3] = v11;
      v10 = 0;
      v11 = 0;
      v9 = 0;
      llvm::json::OStream::attributeBegin();
      llvm::json::OStream::value(v3, (const llvm::json::Value *)v12);
      llvm::json::OStream::attributeEnd(v3);
      llvm::json::Value::destroy((llvm::json::Value *)v12);
    }
  }
  v12[0] = (void **)&v9;
  sub_22F095968(v12);
}

void sub_22F094B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::json::Value *v11;
  uint64_t v12;
  llvm::json::Value *v13;
  llvm::json::OStream *v14;
  llvm::json::Value *v15;
  llvm::json::Value *v16;
  unint64_t v17;
  llvm::json::Value **v18;
  llvm::json::Value *v19;
  llvm::json::Value *v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 24))
  {
    if (*(_QWORD *)(a2 + 48))
    {
      v5 = sub_22EFA613C(a2, a3);
      v7 = v6;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 16);
      v5 = *(void **)(v8 + 8);
      v7 = *(_QWORD *)(v8 + 16);
    }
    sub_22E732740((llvm::json::Value *)&v18, (uint64_t)v5, v7);
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value((llvm::json::OStream *)(a1 + 1048), (const llvm::json::Value *)&v18);
    llvm::json::OStream::attributeEnd((llvm::json::OStream *)(a1 + 1048));
    llvm::json::Value::destroy((llvm::json::Value *)&v18);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = 4 * v9;
      do
      {
        v13 = (llvm::json::Value *)*(unsigned int *)(*(_QWORD *)(a2 + 40) + v10);
        LOWORD(v18) = 3;
        v19 = v13;
        if ((unint64_t)v11 >= v17)
        {
          v11 = sub_22F09585C(&v15);
        }
        else
        {
          llvm::json::Value::moveFrom();
          v11 = (llvm::json::Value *)((char *)v11 + 32);
        }
        v16 = v11;
        llvm::json::Value::destroy((llvm::json::Value *)&v18);
        v10 += 4;
      }
      while (v12 != v10);
      if (v15 != v11)
      {
        v14 = (llvm::json::OStream *)(a1 + 1048);
        LOWORD(v18) = 8;
        v19 = v15;
        v20 = v11;
        v21 = v17;
        v16 = 0;
        v17 = 0;
        v15 = 0;
        llvm::json::OStream::attributeBegin();
        llvm::json::OStream::value(v14, (const llvm::json::Value *)&v18);
        llvm::json::OStream::attributeEnd(v14);
        llvm::json::Value::destroy((llvm::json::Value *)&v18);
      }
    }
    v18 = &v15;
    sub_22F095968((void ***)&v18);
  }
}

uint64_t *sub_22F094CD4(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6[3];

  *(_QWORD *)(a1 + 8) = 0;
  result = sub_22F094D70((uint64_t *)v6, -1, 0);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    result = *(uint64_t **)a1;
    v4 = 56 * v3;
    do
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      result = sub_22F094F9C(result, v6) + 7;
      v4 -= 56;
    }
    while (v4);
  }
  v5 = v6[0];
  v6[0] = 0;
  if (v5)
  {
    if (*((char *)v5 + 23) < 0)
      operator delete(*(void **)v5);
    return (uint64_t *)MEMORY[0x2348A0E9C](v5, 0x1012C40EC159624);
  }
  return result;
}

uint64_t *sub_22F094D70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v9;
  uint64_t v10;
  __int128 v11;

  *a1 = 0;
  a1[1] = a2;
  v4 = a1 + 1;
  a1[2] = a3;
  if ((llvm::json::isUTF8() & 1) == 0)
  {
    llvm::json::fixUTF8();
    sub_22F094E48(&v10, (uint64_t)&__p);
    v6 = v10;
    v10 = 0;
    sub_22F094F48(a1, v6);
    *v4 = v11;
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x2348A0E9C](v7, 0x1012C40EC159624);
    }
    if (v9 < 0)
      operator delete(__p);
  }
  return a1;
}

uint64_t *sub_22F094E48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = operator new();
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  if ((llvm::json::isUTF8() & 1) == 0)
  {
    llvm::json::fixUTF8();
    v10 = *a1;
    if (*(char *)(*a1 + 23) < 0)
      operator delete(*(void **)v10);
    *(_QWORD *)(v10 + 16) = v12;
    *(_OWORD *)v10 = v11;
  }
  v5 = *a1;
  v6 = *(_BYTE *)(*a1 + 23);
  v7 = v6 < 0;
  if (v6 < 0)
    v5 = *(_QWORD *)*a1;
  v8 = v6 & 0x7F;
  if (v7)
    v8 = *(_QWORD *)(*a1 + 8);
  a1[1] = v5;
  a1[2] = v8;
  return a1;
}

uint64_t *sub_22F094F48(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t *sub_22F094F9C(uint64_t *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;

  if (*a2)
  {
    v4 = operator new();
    v5 = v4;
    v6 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      sub_22E3BB2B4((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    sub_22F094F48(a1, v5);
    v8 = *a1;
    v9 = *(_BYTE *)(*a1 + 23);
    v10 = v9 < 0;
    if (v9 < 0)
      v8 = *(_QWORD *)*a1;
    v11 = v9 & 0x7F;
    if (v10)
      v11 = *(_QWORD *)(*a1 + 8);
    a1[1] = v8;
    a1[2] = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  }
  return a1;
}

uint64_t *sub_22F095054(uint64_t *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  llvm::json::Value *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  void *__s2;
  size_t __n;

  if (*((_DWORD *)result + 4))
  {
    v1 = (unsigned int *)result;
    sub_22F094D70(&v11, -1, 0);
    result = sub_22F094D70(&v8, -2, 0);
    v2 = v1[4];
    if ((_DWORD)v2)
    {
      v3 = 56 * v2;
      v4 = (llvm::json::Value *)(*(_QWORD *)v1 + 24);
      do
      {
        v5 = (const void *)*((_QWORD *)v4 - 2);
        if (__s2 == (void *)-2)
        {
          if (v5 == (const void *)-2)
            goto LABEL_23;
        }
        else if (__s2 == (void *)-1)
        {
          if (v5 == (const void *)-1)
            goto LABEL_23;
        }
        else if (*((_QWORD *)v4 - 1) == __n && (!__n || !memcmp(*((const void **)v4 - 2), __s2, __n)))
        {
          goto LABEL_23;
        }
        if (v9 == (void *)-2)
        {
          if (v5 == (const void *)-2)
            goto LABEL_23;
        }
        else if (v9 == (void *)-1)
        {
          if (v5 == (const void *)-1)
            goto LABEL_23;
        }
        else if (*((_QWORD *)v4 - 1) == v10 && (!v10 || !memcmp(v5, v9, v10)))
        {
          goto LABEL_23;
        }
        llvm::json::Value::destroy(v4);
LABEL_23:
        result = sub_22F094F48((uint64_t *)v4 - 3, 0);
        v4 = (llvm::json::Value *)((char *)v4 + 56);
        v3 -= 56;
      }
      while (v3);
    }
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0)
        operator delete(*(void **)v6);
      result = (uint64_t *)MEMORY[0x2348A0E9C](v6, 0x1012C40EC159624);
    }
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      return (uint64_t *)MEMORY[0x2348A0E9C](v7, 0x1012C40EC159624);
    }
  }
  return result;
}

uint64_t sub_22F0951E4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int HashValue;
  uint64_t v9;
  unsigned int v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  int v24;
  int v25;
  const void *v26;
  const void *v27;
  int v28;
  BOOL v29;
  BOOL v30;
  char *v31;
  const void *v32;
  size_t v33;
  uint64_t v34;
  const void *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v42;
  int v43;
  unsigned int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  const void *v48;
  uint64_t v49;
  const void *v50;
  size_t v51;
  size_t v52;
  const void *v53;
  const void *v54;
  uint64_t v55[3];
  uint64_t v56[3];

  if (!a2)
  {
    v38 = 0;
    *a4 = 0;
    return v38;
  }
  sub_22F094D70(v56, -1, 0);
  sub_22F094D70(v55, -2, 0);
  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
  v9 = 0;
  v10 = a2 - 1;
  v11 = *(const void **)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = (const void *)v56[1];
  v14 = v56[2];
  v15 = 1;
  v16 = (const void *)v55[1];
  v17 = v55[2];
  while (1)
  {
    v18 = HashValue & v10;
    v19 = a1 + 56 * (HashValue & v10);
    v20 = *(char **)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    if (v20 == (char *)-2)
    {
      if (v11 == (const void *)-2)
        goto LABEL_34;
    }
    else if (v20 == (char *)-1)
    {
      if (v11 == (const void *)-1)
        goto LABEL_34;
    }
    else if (v12 == v21)
    {
      if (!v12)
        goto LABEL_34;
      v45 = v14;
      v48 = v13;
      v51 = v17;
      v53 = v16;
      v22 = v9;
      v42 = v10;
      v23 = v11;
      v24 = v15;
      v25 = memcmp(v11, v20, v12);
      v17 = v51;
      v16 = v53;
      v15 = v24;
      v14 = v45;
      v13 = v48;
      v11 = v23;
      v10 = v42;
      v9 = v22;
      if (!v25)
      {
LABEL_34:
        v38 = 1;
        goto LABEL_35;
      }
    }
    if (v13 != (const void *)-2)
      break;
    if (v20 == (char *)-2)
      goto LABEL_45;
LABEL_21:
    if (v16 == (const void *)-2)
    {
      v29 = v20 + 2 == 0;
    }
    else if (v16 == (const void *)-1)
    {
      v29 = v20 + 1 == 0;
    }
    else
    {
      v30 = v21 == v17;
      if (!v17 || v21 != v17)
        goto LABEL_31;
      v31 = v20;
      v47 = v14;
      v50 = v13;
      v32 = v16;
      v33 = v17;
      v34 = v9;
      v44 = v10;
      v35 = v11;
      v36 = v15;
      v37 = memcmp(v31, v16, v17);
      v17 = v33;
      v16 = v32;
      v15 = v36;
      v14 = v47;
      v13 = v50;
      v11 = v35;
      v10 = v44;
      v9 = v34;
      v29 = v37 == 0;
    }
    v30 = v29;
LABEL_31:
    if (v30 && v9 == 0)
      v9 = v19;
    HashValue = v15 + v18;
    ++v15;
  }
  if (v13 == (const void *)-1)
  {
    if (v20 == (char *)-1)
      goto LABEL_45;
    goto LABEL_21;
  }
  if (v21 != v14)
    goto LABEL_21;
  if (v14)
  {
    v26 = v13;
    v52 = v17;
    v54 = v16;
    v46 = v12;
    v49 = v9;
    v27 = v11;
    v43 = v15;
    v28 = memcmp(v20, v13, v14);
    v17 = v52;
    v16 = v54;
    v15 = v43;
    v11 = v27;
    v12 = v46;
    v9 = v49;
    v13 = v26;
    if (v28)
      goto LABEL_21;
  }
LABEL_45:
  v38 = 0;
  if (v9)
    v19 = v9;
LABEL_35:
  *a4 = v19;
  v39 = v55[0];
  v55[0] = 0;
  if (v39)
  {
    if (*(char *)(v39 + 23) < 0)
      operator delete(*(void **)v39);
    MEMORY[0x2348A0E9C](v39, 0x1012C40EC159624);
  }
  v40 = v56[0];
  v56[0] = 0;
  if (v40)
  {
    if (*(char *)(v40 + 23) < 0)
      operator delete(*(void **)v40);
    MEMORY[0x2348A0E9C](v40, 0x1012C40EC159624);
  }
  return v38;
}

uint64_t sub_22F0954A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  const void *v8;
  uint64_t v9;
  uint64_t v11;
  void *__s2;
  size_t __n;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F0955E8(a1, v6);
  v11 = 0;
  sub_22F0951E4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v11);
  a3 = v11;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  sub_22F094D70(&v11, -1, 0);
  v8 = *(const void **)(a3 + 8);
  if (__s2 == (void *)-2)
  {
    if (v8 != (const void *)-2)
      goto LABEL_12;
  }
  else
  {
    if (__s2 == (void *)-1)
    {
      if (v8 == (const void *)-1)
        goto LABEL_13;
LABEL_12:
      --*(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
    if (*(_QWORD *)(a3 + 16) != __n || __n && memcmp(v8, __s2, __n))
      goto LABEL_12;
  }
LABEL_13:
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x2348A0E9C](v9, 0x1012C40EC159624);
  }
  return a3;
}

uint64_t *sub_22F0955E8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  void *__s2;
  size_t __n;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  if (!v4)
    return sub_22F094CD4(a1);
  sub_22F094CD4(a1);
  sub_22F094D70(&v20, -1, 0);
  sub_22F094D70(&v17, -2, 0);
  if ((_DWORD)v3)
  {
    v9 = 56 * v3;
    v10 = (uint64_t)v4;
    do
    {
      v11 = *(const void **)(v10 + 8);
      if (__s2 == (void *)-2)
      {
        if (v11 == (const void *)-2)
          goto LABEL_26;
      }
      else if (__s2 == (void *)-1)
      {
        if (v11 == (const void *)-1)
          goto LABEL_26;
      }
      else if (*(_QWORD *)(v10 + 16) == __n && (!__n || !memcmp(*(const void **)(v10 + 8), __s2, __n)))
      {
        goto LABEL_26;
      }
      if (v18 == (void *)-2)
      {
        if (v11 == (const void *)-2)
          goto LABEL_26;
      }
      else if (v18 == (void *)-1)
      {
        if (v11 == (const void *)-1)
          goto LABEL_26;
      }
      else if (*(_QWORD *)(v10 + 16) == v19 && (!v19 || !memcmp(v11, v18, v19)))
      {
        goto LABEL_26;
      }
      v23 = 0;
      sub_22F0951E4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v10, &v23);
      v12 = v23;
      v13 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      sub_22F094F48((uint64_t *)v12, v13);
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v10 + 8);
      llvm::json::Value::moveFrom();
      ++*(_DWORD *)(a1 + 8);
      llvm::json::Value::destroy((llvm::json::Value *)(v10 + 24));
LABEL_26:
      sub_22F094F48((uint64_t *)v10, 0);
      v10 += 56;
      v9 -= 56;
    }
    while (v9);
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x2348A0E9C](v14, 0x1012C40EC159624);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x2348A0E9C](v15, 0x1012C40EC159624);
  }
  return (uint64_t *)llvm::deallocate_buffer(v4, (void *)(56 * v3));
}

llvm::json::Value *sub_22F09585C(llvm::json::Value **a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  llvm::json::Value *v7;
  llvm::json::Value *v8;
  llvm::json::Value *v9;
  llvm::json::Value *v10;
  llvm::json::Value *v11;
  llvm::json::Value *v12;

  v1 = (a1[1] - *a1) >> 5;
  v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) >> 59)
    abort();
  v4 = a1[2] - *a1;
  if (v4 >> 4 > v2)
    v2 = v4 >> 4;
  if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFE0)
    v5 = 0x7FFFFFFFFFFFFFFLL;
  else
    v5 = v2;
  if (v5)
  {
    if (v5 >> 59)
      sub_22E3B3F8C();
    v6 = (char *)operator new(32 * v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (llvm::json::Value *)&v6[32 * v1];
  v8 = (llvm::json::Value *)&v6[32 * v5];
  llvm::json::Value::moveFrom();
  v9 = (llvm::json::Value *)((char *)v7 + 32);
  v11 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v7;
    a1[1] = v9;
    a1[2] = v8;
  }
  else
  {
    do
    {
      v7 = (llvm::json::Value *)((char *)v7 - 32);
      v10 = (llvm::json::Value *)((char *)v10 - 32);
      llvm::json::Value::moveFrom();
    }
    while (v10 != v11);
    v10 = *a1;
    v12 = a1[1];
    *a1 = v7;
    a1[1] = v9;
    a1[2] = v8;
    while (v12 != v10)
    {
      v12 = (llvm::json::Value *)((char *)v12 - 32);
      llvm::json::Value::destroy(v12);
    }
  }
  if (v10)
    operator delete(v10);
  return v9;
}

void sub_22F095968(void ***a1)
{
  void **v1;
  llvm::json::Value *v2;
  llvm::json::Value *v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::json::Value *)**a1;
  if (v2)
  {
    v4 = (llvm::json::Value *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (llvm::json::Value *)((char *)v4 - 32);
        llvm::json::Value::destroy(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22F0959D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  llvm::json::OStream *v4;
  __int16 v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  sub_22F3E22EC(v2, *(_DWORD *)a1, 0);
  result = sub_22F1E2440(*(_QWORD **)(v2 + 1232), *(_DWORD *)(a1 + 4), 0);
  if ((_DWORD)result)
  {
    v4 = (llvm::json::OStream *)(v2 + 1048);
    v5 = 1;
    v6 = 1;
    llvm::json::OStream::attributeBegin();
    llvm::json::OStream::value(v4, (const llvm::json::Value *)&v5);
    llvm::json::OStream::attributeEnd(v4);
    return llvm::json::Value::destroy((llvm::json::Value *)&v5);
  }
  return result;
}

unint64_t sub_22F095A90(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  llvm::json::Value *v6;
  void **v7;
  unsigned int v8;
  uint64_t v9;
  void *__p;
  llvm *__dst;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  result = sub_22E46A3A0(a1[1]);
  if (result != v3)
  {
    v4 = result;
    v5 = *(_QWORD *)(**(_QWORD **)(result + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v5 + 8) & 0xF) != 0)
      v5 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v4 + 16));
    sub_22F08CDA0((uint64_t)&__dst, v1, v5 & 0xFFFFFFFFFFFFFFF0, 1);
    v14 = 7;
    v15 = __dst;
    v16 = v12;
    __dst = 0;
    v12 = 0;
    v17 = v13;
    v13 = 0;
    sub_22F094D70((uint64_t *)&__p, (uint64_t)"type", 4);
    v6 = (llvm::json::Value *)llvm::json::Object::operator[]();
    llvm::json::Value::destroy(v6);
    llvm::json::Value::moveFrom();
    v7 = (void **)__p;
    __p = 0;
    if (v7)
    {
      if (*((char *)v7 + 23) < 0)
        operator delete(*v7);
      MEMORY[0x2348A0E9C](v7, 0x1012C40EC159624);
    }
    llvm::json::Value::destroy((llvm::json::Value *)&v14);
    sub_22F095054((uint64_t *)&__dst);
    llvm::deallocate_buffer(__dst, (void *)(56 * v13));
    LODWORD(v9) = *(unsigned __int8 *)(v4 + 12);
    v8 = (v9 >> 2) & 3;
    LODWORD(v9) = v9 & 2;
    if (v8 == 3)
      v9 = v9;
    else
      v9 = v8;
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_22F095F9C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  unsigned int v16;
  uint64_t v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 72);
  v5 = v4 & 6;
  v6 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v5 == 2)
    v7 = v4 & 0xFFFFFFFFFFFFFFF8;
  else
    v7 = 0;
  if (v7)
    v3 = v7;
  v8 = *(_QWORD *)(v3 + 72);
  v9 = v8 & 6;
  v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if (v9 == 4 && v10 != 0)
    v10 = (uint64_t *)v10[1];
  v12 = *v10;
  v16 = 1;
  v17 = v12;
  if (v5 != 2 || v6 == 0)
  {
    if (v5 != 4 || v6 == 0)
      v6 = 0;
    else
      v6 = (_QWORD *)*v6;
  }
  return sub_22F08F2B8(v2, &v16, 0, (unint64_t)v6);
}

uint64_t sub_22F09605C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v15;
  unint64_t v16;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 72);
  v5 = v4 & 3;
  v6 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if (v5 == 1)
    v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  else
    v7 = 0;
  if (v7)
    v3 = v7;
  v8 = *(_QWORD *)(v3 + 72);
  v9 = v8 & 3;
  v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if (v9 == 2 && v10 != 0)
    v10 = *(_QWORD *)(v10 + 8);
  v15 = 7;
  v16 = v10;
  if (v5 != 1 || v6 == 0)
  {
    if (v5 != 2 || v6 == 0)
      v6 = 0;
    else
      v6 = (_QWORD *)*v6;
  }
  return sub_22F08F2B8(v2, &v15, 0, (unint64_t)v6);
}

uint64_t sub_22F096118(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int *v8;
  unint64_t v9;

  v1 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(v1 + 72);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 6) != 2 || v5 == 0)
  {
    if ((v4 & 6) != 4 || v5 == 0)
    {
      v8 = sub_22F259350(v1);
      v5 = 0;
    }
    else
    {
      v5 = (_QWORD *)*v5;
      v8 = sub_22F259350(v1);
      if (v5)
        goto LABEL_12;
    }
    v9 = 0;
    return sub_22F08F2B8(v2, (unsigned int *)v8, v9, (unint64_t)v5);
  }
  v8 = sub_22F259350(v1);
LABEL_12:
  v9 = sub_22F3B9FB0((uint64_t)v5);
  return sub_22F08F2B8(v2, (unsigned int *)v8, v9, (unint64_t)v5);
}

uint64_t *sub_22F0961DC(uint64_t *result)
{
  _DWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  llvm::json::OStream *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  llvm::json::Value *v10;
  uint64_t v11;
  const char **v12;
  const char *v13;
  size_t v14;
  llvm::json::Value *v15;
  uint64_t v16;
  uint64_t v17[3];
  std::string __p;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = (_DWORD *)result[1];
  v4 = *v1;
  v3 = v1 + 6;
  v2 = v4;
  if (v4 >= 0x80000)
  {
    v5 = *result;
    v6 = (llvm::json::OStream *)(*result + 1048);
    v7 = 8 * (v2 >> 19);
    do
    {
      v8 = *v3 & 0xFFFFFFFFFFFFFFF8;
      if ((*v3 & 4) != 0 || !v8)
      {
        if ((*v3 & 4) != 0)
          v9 = (unsigned __int8 *)(*v3 & 0xFFFFFFFFFFFFFFF8);
        else
          v9 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        sub_22F08CA44(&__p, (unint64_t)v9);
        sub_22E732810((uint64_t)&v22, (__int128 *)&__p);
        sub_22F094D70(v17, (uint64_t)"id", 2);
        v10 = (llvm::json::Value *)llvm::json::Object::operator[]();
        llvm::json::Value::destroy(v10);
        llvm::json::Value::moveFrom();
        v11 = v17[0];
        v17[0] = 0;
        if (v11)
        {
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          MEMORY[0x2348A0E9C](v11, 0x1012C40EC159624);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v22);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (const char **)sub_22F0D3748(*v9);
        v13 = *v12;
        if (*v12)
          v14 = strlen(*v12);
        else
          v14 = 0;
        sub_22E732740((llvm::json::Value *)&v22, (uint64_t)v13, v14);
        sub_22F094D70(v17, (uint64_t)"kind", 4);
        v15 = (llvm::json::Value *)llvm::json::Object::operator[]();
        llvm::json::Value::destroy(v15);
        llvm::json::Value::moveFrom();
        v16 = v17[0];
        v17[0] = 0;
        if (v16)
        {
          if (*(char *)(v16 + 23) < 0)
            operator delete(*(void **)v16);
          MEMORY[0x2348A0E9C](v16, 0x1012C40EC159624);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v22);
      }
      else
      {
        sub_22F08F470((uint64_t)&v19, v5, v8);
      }
      v22 = 7;
      v23 = v19;
      v24 = v20;
      v19 = 0;
      v20 = 0;
      v25 = v21;
      v21 = 0;
      llvm::json::OStream::value(v6, (const llvm::json::Value *)&v22);
      llvm::json::Value::destroy((llvm::json::Value *)&v22);
      sub_22F095054((uint64_t *)&v19);
      result = (uint64_t *)llvm::deallocate_buffer(v19, (void *)(56 * v21));
      ++v3;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22F096440(uint64_t *a1, unint64_t a2)
{
  uint64_t v5;
  int v6;

  if (sub_22F096534(a1[1], a2) || (sub_22EFB948C(a2) | 4) != 6 && sub_22EFB9D84(a2))
    return 1;
  v5 = **(_QWORD **)(a1[1] + 2000);
  if ((v5 & 0x100) == 0)
  {
    if (((*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 56))(a1, a2) & 1) != 0)
      return 1;
    v5 = **(_QWORD **)(a1[1] + 2000);
  }
  if ((v5 & 0x100) == 0 && (*(_BYTE *)(a2 + 29) & 1) == 0)
    return 0;
  if (sub_22E3D1740(a2))
    return 1;
  v6 = *(_DWORD *)(a2 + 28);
  if ((v6 & 0x7F) == 0x45 || (v6 & 0x7Eu) - 52 <= 5 && sub_22E9A9E30(a2))
    return 1;
  return (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 40))(a1, a2);
}

uint64_t sub_22F096534(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = *(_DWORD **)(a1 + 15088);
  if ((v4[14] - 63) <= 1
    && v4[17] != 40
    && a2
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA
    && sub_22EFBFAF0(a2)
    && (*(_BYTE *)(a2 + 82) & 0x30) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v6 = v5 && *(_BYTE *)(v5 + 16) == 26;
    if ((v6
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v5 = sub_22F10CF48(v5)) != 0)
      && (*(_QWORD *)(v5 + 16) & 0x3FFFC000000000) == 0x8000000000)
    {
      return 5;
    }
  }
  if (v4[17] != 15 || (v4[14] - 41) > 1)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) != 0)
  {
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      if (sub_22EFB9440(a2))
        goto LABEL_24;
LABEL_23:
      if (v4[37] != 11)
        goto LABEL_24;
      return 0;
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 > 6 || !sub_22EFB93F4(a2))
      goto LABEL_23;
  }
LABEL_24:
  result = 0;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
    else
      v9 = 0;
    if (!v9)
      v8 = sub_22F10CF48(v8);
    v10 = (((unint64_t)*(unsigned int *)(v8 + 16) >> 19) & 0x1F) - 1;
    if (v10 <= 3)
      return dword_22F4A6770[v10];
    return 0;
  }
  return result;
}

void sub_22F0966E8(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  BOOL v19;
  _BYTE *v20;
  _BYTE *v21;
  void (*v22)(_QWORD *, unint64_t, llvm::raw_ostream *);
  int v23;
  _OWORD *v24;
  llvm::raw_ostream *v25;
  int v26;
  int v27;
  char v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  const void *v39;
  size_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;

  v8 = a1[1];
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2 & 0xFFFFFFFFFFFFFFF8);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    v13 = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      v13 = *(uint64_t **)v10;
      while (*(_WORD *)(*v13 + 32) != 109)
      {
        ++v13;
        v14 -= 8;
        if (!v14)
          goto LABEL_19;
      }
    }
    if (v13 != &v11[v12])
    {
      do
      {
        v16 = *v11++;
        v15 = v16;
      }
      while (*(_WORD *)(v16 + 32) != 109);
      if (*(_BYTE *)(v15 + 48))
      {
        v17 = *(_DWORD *)(v15 + 36);
        if (v17 < 5
          || ((v18 = *(const char **)(v15 + 40), *(_DWORD *)v18 == 1836477548) ? (v19 = v18[4] == 46) : (v19 = 0), !v19))
        {
          v20 = *(_BYTE **)(*(_QWORD *)(a1[1] + 15088) + 128);
          if (v20 && *v20)
          {
            v21 = (_BYTE *)*((_QWORD *)a4 + 4);
            if ((unint64_t)v21 >= *((_QWORD *)a4 + 3))
            {
              llvm::raw_ostream::write(a4);
            }
            else
            {
              *((_QWORD *)a4 + 4) = v21 + 1;
              *v21 = 1;
            }
          }
          v18 = *(const char **)(v15 + 40);
          v30 = *(unsigned int *)(v15 + 36);
          v31 = (void *)*((_QWORD *)a4 + 4);
          if (*((_QWORD *)a4 + 3) - (_QWORD)v31 < v30)
            goto LABEL_51;
LABEL_37:
          if (!(_DWORD)v30)
            return;
          memcpy(v31, v18, v30);
          v32 = *((_QWORD *)a4 + 4) + v30;
          goto LABEL_39;
        }
      }
      else
      {
        v18 = *(const char **)(v15 + 40);
        v17 = *(_DWORD *)(v15 + 36);
      }
      v30 = v17;
      v31 = (void *)*((_QWORD *)a4 + 4);
      if (*((_QWORD *)a4 + 3) - (_QWORD)v31 < (unint64_t)v17)
      {
LABEL_51:
        v25 = a4;
        goto LABEL_52;
      }
      goto LABEL_37;
    }
  }
LABEL_19:
  if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) == 0x45)
  {
    v22 = *(void (**)(_QWORD *, unint64_t, llvm::raw_ostream *))(*a1 + 136);
LABEL_22:
    v22(a1, v9, a4);
    return;
  }
  if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 52 <= 5 && sub_22E9A9E30(v9))
  {
    v22 = *(void (**)(_QWORD *, unint64_t, llvm::raw_ostream *))(*a1 + 216);
    goto LABEL_22;
  }
  v23 = sub_22F096534(v8, v9);
  if (v23 == 5)
  {
    v24 = (_OWORD *)*((_QWORD *)a4 + 4);
    if (*((_QWORD *)a4 + 3) - (_QWORD)v24 <= 0xFuLL)
    {
      v18 = "__main_argc_argv";
      v25 = a4;
LABEL_52:
      llvm::raw_ostream::write(v25, v18);
      return;
    }
    *v24 = *(_OWORD *)"__main_argc_argv";
    v32 = *((_QWORD *)a4 + 4) + 16;
LABEL_39:
    *((_QWORD *)a4 + 4) = v32;
    return;
  }
  v26 = v23;
  v27 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 40))(a1, v9);
  if (!v26 || (v28 = v27, v29 = *(_QWORD *)(a1[1] + 15088), v27) && *(_DWORD *)(v29 + 148) == 11)
  {
    if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) == 0x18)
      sub_22F3E8270((uint64_t)a1, v9);
    else
      (*(void (**)(_QWORD *, uint64_t, uint64_t, llvm::raw_ostream *))(*a1 + 72))(a1, a2, a3, a4);
    return;
  }
  v33 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v33 + 1;
    *v33 = 1;
  }
  if (v26 == 1)
  {
    v34 = (char *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v34 < *((_QWORD *)a4 + 3))
    {
      *((_QWORD *)a4 + 4) = v34 + 1;
      v35 = 64;
LABEL_55:
      *v34 = v35;
      if ((v28 & 1) == 0)
        goto LABEL_56;
LABEL_70:
      if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) == 0x18)
        sub_22F3E8270((uint64_t)a1, v9);
      else
        (*(void (**)(_QWORD *, uint64_t, uint64_t, llvm::raw_ostream *))(*a1 + 72))(a1, a2, a3, a4);
      goto LABEL_73;
    }
    llvm::raw_ostream::write(a4);
    goto LABEL_69;
  }
  if (v26 == 2)
  {
    v43 = *((_QWORD *)a4 + 4);
    if ((unint64_t)(*((_QWORD *)a4 + 3) - v43) > 0xB)
    {
      *(_DWORD *)(v43 + 8) = 1600074604;
      *(_QWORD *)v43 = *(_QWORD *)"__regcall3__";
      *((_QWORD *)a4 + 4) += 12;
      if ((v28 & 1) != 0)
        goto LABEL_70;
    }
    else
    {
      llvm::raw_ostream::write(a4, "__regcall3__");
      if ((v28 & 1) != 0)
        goto LABEL_70;
    }
    goto LABEL_56;
  }
  if (v26 != 4)
  {
LABEL_69:
    if ((v28 & 1) != 0)
      goto LABEL_70;
    goto LABEL_56;
  }
  v34 = (char *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v34 < *((_QWORD *)a4 + 3))
  {
    *((_QWORD *)a4 + 4) = v34 + 1;
    v35 = 95;
    goto LABEL_55;
  }
  llvm::raw_ostream::write(a4);
  if ((v28 & 1) != 0)
    goto LABEL_70;
LABEL_56:
  v36 = *(_QWORD *)(v9 + 40);
  if ((v36 & 7) != 0)
    v37 = 0;
  else
    v37 = v36 & 0xFFFFFFFFFFFFFFF8;
  v38 = *(unsigned int **)(v37 + 16);
  v41 = *v38;
  v39 = v38 + 4;
  v40 = v41;
  v42 = (void *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v41 <= *((_QWORD *)a4 + 3) - (_QWORD)v42)
  {
    if (v40)
    {
      memcpy(v42, v39, v40);
      *((_QWORD *)a4 + 4) += v40;
    }
  }
  else
  {
    llvm::raw_ostream::write(a4, (const char *)v39);
  }
LABEL_73:
  v44 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v44 || (v45 = *(unsigned __int8 *)(v44 + 16), (v45 - 27) <= 0xFFFFFFFD))
  {
    v44 = sub_22F10CF48(v44);
    v45 = *(unsigned __int8 *)(v44 + 16);
  }
  if (v45 == 26)
    v46 = v44;
  else
    v46 = 0;
  if (v26 == 3)
  {
    v47 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v47 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v47 + 1;
      *v47 = 64;
    }
  }
  v48 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v48 < *((_QWORD *)a4 + 3))
  {
    *((_QWORD *)a4 + 4) = v48 + 1;
    *v48 = 64;
    if (v46)
      goto LABEL_85;
LABEL_96:
    v55 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v55 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v55 + 1;
      *v55 = 48;
    }
    return;
  }
  llvm::raw_ostream::write(a4);
  if (!v46)
    goto LABEL_96;
LABEL_85:
  v49 = 0;
  if (v9 && (*(_DWORD *)(v9 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9) + 80) & 0xE000) == 0x4000)
      v49 = 0;
    else
      v49 = (*(_QWORD *)(v9 + 40) & 7) != 6
         || (*(_DWORD *)(*(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFF8) - 5) < 0xFFFFFFFC;
  }
  if ((unsigned __int16)(*(_QWORD *)(v46 + 16) >> 38))
  {
    v50 = (uint64_t *)(v46 + 40);
    v51 = 8 * (unsigned __int16)(*(_QWORD *)(v46 + 16) >> 38);
    do
    {
      if ((sub_22F1110EC(*(_QWORD *)(*v50 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
        break;
      v52 = *v50++;
      v53 = sub_22EF5CDF0(v8, *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0));
      v54 = *(unsigned __int8 *)(v29 + *(_QWORD *)(*(_QWORD *)v29 - 24));
      v49 += (v53 + v54 - 1) / v54;
      v51 -= 8;
    }
    while (v51);
  }
  llvm::raw_ostream::operator<<();
}

void *sub_22F096D68(uint64_t a1, const void *a2, size_t a3, uint64_t a4, llvm::raw_ostream *a5)
{
  uint64_t v8;
  _WORD *v9;
  void *v10;
  void *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v8 = *(unsigned int *)(a1 + 64);
  v12 = a4;
  v13 = v8;
  sub_22F2611B4(a1 + 56, &v12, &v13, (uint64_t)v14);
  v9 = (_WORD *)*((_QWORD *)a5 + 4);
  if (*(_DWORD *)(v14[0] + 8))
  {
    if (*((_QWORD *)a5 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 24415;
      v10 = (void *)(*((_QWORD *)a5 + 4) + 2);
      *((_QWORD *)a5 + 4) = v10;
    }
    else
    {
      a5 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, "__");
      v10 = (void *)*((_QWORD *)a5 + 4);
    }
    if (a3 <= *((_QWORD *)a5 + 3) - (_QWORD)v10)
    {
      if (a3)
      {
        memcpy(v10, a2, a3);
        v10 = (void *)(*((_QWORD *)a5 + 4) + a3);
        *((_QWORD *)a5 + 4) = v10;
      }
    }
    else
    {
      a5 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, (const char *)a2);
      v10 = (void *)*((_QWORD *)a5 + 4);
    }
    if (*((_QWORD *)a5 + 3) - (_QWORD)v10 > 0xDuLL)
    {
      qmemcpy(v10, "_block_invoke_", 14);
      *((_QWORD *)a5 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(a5, "_block_invoke_");
    }
    return (void *)llvm::raw_ostream::operator<<();
  }
  else
  {
    if (*((_QWORD *)a5 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 24415;
      result = (void *)(*((_QWORD *)a5 + 4) + 2);
      *((_QWORD *)a5 + 4) = result;
    }
    else
    {
      a5 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, "__");
      result = (void *)*((_QWORD *)a5 + 4);
    }
    if (a3 <= *((_QWORD *)a5 + 3) - (_QWORD)result)
    {
      if (a3)
      {
        memcpy(result, a2, a3);
        result = (void *)(*((_QWORD *)a5 + 4) + a3);
        *((_QWORD *)a5 + 4) = result;
      }
    }
    else
    {
      a5 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, (const char *)a2);
      result = (void *)*((_QWORD *)a5 + 4);
    }
    if (*((_QWORD *)a5 + 3) - (_QWORD)result > 0xCuLL)
    {
      qmemcpy(result, "_block_invoke", 13);
      *((_QWORD *)a5 + 4) += 13;
    }
    else
    {
      return (void *)llvm::raw_ostream::write(a5, "_block_invoke");
    }
  }
  return result;
}

void sub_22F096F84(uint64_t a1, unint64_t a2, uint64_t a3, llvm::raw_ostream *a4)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  const void *v26;
  size_t v27;
  unsigned int v28;
  int v29;
  _BYTE v30[24];
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  void *v36;
  __int128 v37;
  _QWORD v38[10];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v36 = v38;
  v37 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v30, (uint64_t)&v36);
  v8 = *(_WORD *)(a2 + 8);
  v9 = v8 & 0x7F;
  if (a2 && v9 == 24)
  {
    sub_22F3E8270(a1, a2 - 48);
    goto LABEL_52;
  }
  if (v9 == 1)
  {
    while (1)
    {
      v8 = *(_WORD *)(a2 + 8);
      if ((v8 & 0x7F) != 1)
        break;
      v10 = *(unsigned int *)(a1 + 64);
      v33 = a2 - 40;
      v34 = v10;
      sub_22F2611B4(a1 + 56, &v33, &v34, (uint64_t)v35);
      v11 = *(_WORD *)(a2 + 8) & 0x7F;
      v12 = -40;
      if (v11 > 0x46)
      {
        if (v11 != 83)
        {
          if (v11 == 71)
          {
            v12 = -56;
          }
          else if (v11 != 81)
          {
            goto LABEL_16;
          }
        }
      }
      else
      {
        if (v11 > 0x18)
          goto LABEL_15;
        if (v11 == 16)
          goto LABEL_8;
        if (((1 << v11) & 0x1066) != 0)
          goto LABEL_22;
        if (v11 == 24)
        {
LABEL_8:
          v12 = -48;
        }
        else
        {
LABEL_15:
          if (v11 != 70)
          {
LABEL_16:
            v13 = v11 - 52;
            if (v11 - 33 >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_22;
          }
          v12 = -64;
        }
      }
LABEL_22:
      v15 = *(_QWORD *)(a2 + v12 + 16);
      a2 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        a2 = *(_QWORD *)a2;
      if (!a2)
      {
        v29 = MEMORY[8] & 0x7F;
        goto LABEL_30;
      }
    }
  }
  v29 = v8 & 0x7F;
  v16 = a2 - 72;
  if (v29 == 57)
  {
    sub_22F3E8570((_QWORD *)a1, v16, 1u, a3, a4);
    goto LABEL_52;
  }
  if (v29 == 55)
  {
    sub_22F3E8570((_QWORD *)a1, v16, 0, a3, a4);
    goto LABEL_52;
  }
LABEL_30:
  if ((v29 - 13) > 0x3D)
    goto LABEL_52;
  v17 = *(_WORD *)(a2 + 8) & 0x7F;
  v18 = -40;
  if (v17 > 0x46)
  {
    if (v17 != 83)
    {
      if (v17 == 71)
      {
        v18 = -56;
        goto LABEL_50;
      }
      if (v17 == 81)
        goto LABEL_50;
LABEL_45:
      v19 = v17 - 52;
      v20 = v17 - 33 >= 5;
      v21 = -48;
      if (!v20)
        v21 = -64;
      if (v19 >= 6)
        v18 = v21;
      else
        v18 = -72;
    }
  }
  else
  {
    if (v17 > 0x18)
      goto LABEL_44;
    if (v17 != 16)
    {
      if (((1 << v17) & 0x1066) != 0)
        goto LABEL_50;
      if (v17 != 24)
      {
LABEL_44:
        if (v17 == 70)
        {
          v18 = -64;
          goto LABEL_50;
        }
        goto LABEL_45;
      }
    }
    v18 = -48;
  }
LABEL_50:
  v22 = a2 + v18;
  if ((sub_22F096440((uint64_t *)a1, v22) & 1) != 0
    || (v23 = *(_QWORD *)(v22 + 40), (v23 & 7) != 0)
    || (v24 = v23 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    sub_22F0966E8((_QWORD *)a1, v22, 0, (llvm::raw_ostream *)v30);
  }
  else
  {
    v25 = *(unsigned int **)(v24 + 16);
    v28 = *v25;
    v26 = v25 + 4;
    v27 = v28;
    if (v28 <= (unint64_t)(v31 - (_QWORD)v32))
    {
      if (v27)
      {
        memcpy(v32, v26, v27);
        v32 += v27;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v30, (const char *)v26);
    }
  }
LABEL_52:
  sub_22F096D68(a1, v36, v37, a3, a4);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v30);
  if (v36 != v38)
    free(v36);
}

void sub_22F0972FC(uint64_t a1, uint64_t a2, llvm::raw_ostream *this, int a4, int a5)
{
  const char *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  const void *v14;
  size_t v15;
  unsigned int v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  const void *v24;
  size_t v25;
  unsigned int v26;
  void *v27;
  char v28;
  char *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v36;
  const void *v37;
  size_t v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  unsigned int *v49;
  const void *v50;
  size_t v51;
  unsigned int v52;
  void *v53;
  _BYTE *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  const void *v69;
  size_t v70;
  unsigned int v71;
  void *v72;
  _BYTE *v73;
  uint64_t v74;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000) + 400) >= 5u)
  {
    if ((*(_BYTE *)(a2 + 58) & 2) != 0)
      v8 = "_i_";
    else
      v8 = "_c_";
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 2)
    {
      *(_WORD *)v9 = *(_WORD *)v8;
      *(_BYTE *)(v9 + 2) = v8[2];
      *((_QWORD *)this + 4) += 3;
      v10 = this;
    }
    else
    {
      v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, v8);
    }
    v11 = *(_QWORD *)(sub_22EFDC9F0(a2) + 40);
    if ((v11 & 7) == 0)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        v13 = *(unsigned int **)(v12 + 16);
        v16 = *v13;
        v14 = v13 + 4;
        v15 = v16;
        v17 = (void *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v16 <= *((_QWORD *)v10 + 3) - (_QWORD)v17)
        {
          if (v15)
          {
            memcpy(v17, v14, v15);
            *((_QWORD *)v10 + 4) += v15;
          }
        }
        else
        {
          v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, (const char *)v14);
        }
      }
    }
    v19 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v19 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10);
      if (!a5)
        goto LABEL_74;
    }
    else
    {
      *((_QWORD *)v10 + 4) = v19 + 1;
      *v19 = 95;
      if (!a5)
      {
LABEL_74:
        v59 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v59 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v59 + 1;
          *v59 = 95;
        }
        v60 = *(_QWORD *)(a2 + 40);
        if ((v60 & 7u) >= 2)
        {
          if ((v60 & 7) == 2)
            v61 = 1;
          else
            v61 = *(_DWORD *)(v60 & 0xFFFFFFFFFFFFFFF8) - 3;
        }
        else
        {
          v61 = 0;
        }
        v62 = 0;
        if (v61 <= 1)
          v63 = 1;
        else
          v63 = v61;
        v64 = v60 & 7;
        v65 = v60 & 0xFFFFFFFFFFFFFFF8;
        v66 = 8 * v63;
        do
        {
          v67 = v65;
          if (v64 == 7)
            v67 = *(_QWORD *)(v65 + v62 + 16);
          if (v67)
          {
            v68 = *(unsigned int **)(v67 + 16);
            v71 = *v68;
            v69 = v68 + 4;
            v70 = v71;
            v72 = (void *)*((_QWORD *)this + 4);
            if ((unint64_t)v71 <= *((_QWORD *)this + 3) - (_QWORD)v72)
            {
              if (v70)
              {
                memcpy(v72, v69, v70);
                *((_QWORD *)this + 4) += v70;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, (const char *)v69);
            }
          }
          if (v61)
          {
            v73 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v73 >= *((_QWORD *)this + 3))
            {
              llvm::raw_ostream::write(this);
            }
            else
            {
              *((_QWORD *)this + 4) = v73 + 1;
              *v73 = 95;
            }
          }
          v62 += 8;
        }
        while (v66 != v62);
        return;
      }
    }
    v20 = sub_22EFDCA50(a2);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 40);
      if ((v21 & 7) == 0)
      {
        v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          v23 = *(unsigned int **)(v22 + 16);
          v26 = *v23;
          v24 = v23 + 4;
          v25 = v26;
          v27 = (void *)*((_QWORD *)this + 4);
          if ((unint64_t)v26 <= *((_QWORD *)this + 3) - (_QWORD)v27)
          {
            if (v25)
            {
              memcpy(v27, v24, v25);
              *((_QWORD *)this + 4) += v25;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)v24);
          }
        }
      }
    }
    goto LABEL_74;
  }
  if (a4)
  {
    v18 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v18 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *((_QWORD *)this + 4) = v18 + 1;
      *v18 = 1;
    }
  }
  if ((*(_BYTE *)(a2 + 58) & 2) != 0)
    v28 = 45;
  else
    v28 = 43;
  v29 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v29 >= *((_QWORD *)this + 3))
  {
    v30 = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v29 + 1;
    *v29 = v28;
    v30 = this;
  }
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 91;
  }
  v32 = sub_22EFDCA50(a2);
  if (v32)
  {
    v33 = v32;
    v34 = *(_QWORD *)(*(_QWORD *)(v32 + 104) + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*(_QWORD *)(v32 + 104) + 40) & 7) == 0 && v34 != 0)
    {
      v36 = *(unsigned int **)(v34 + 16);
      v39 = *v36;
      v37 = v36 + 4;
      v38 = v39;
      v40 = (void *)*((_QWORD *)this + 4);
      if ((unint64_t)v39 <= *((_QWORD *)this + 3) - (_QWORD)v40)
      {
        if (v38)
        {
          memcpy(v40, v37, v38);
          *((_QWORD *)this + 4) += v38;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, (const char *)v37);
      }
    }
    if (a5)
    {
      v54 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v54 >= *((_QWORD *)this + 3))
      {
        v55 = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v54 + 1;
        *v54 = 40;
        v55 = this;
      }
      (*(void (**)(unint64_t, llvm::raw_ostream *))(*(_QWORD *)v33 + 88))(v33, v55);
      v56 = (_BYTE *)*((_QWORD *)v55 + 4);
      if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
      {
        llvm::raw_ostream::write(v55);
      }
      else
      {
        *((_QWORD *)v55 + 4) = v56 + 1;
        *v56 = 41;
      }
    }
  }
  else
  {
    v41 = *(_QWORD *)(a2 + 16);
    v42 = v41 & 0xFFFFFFFFFFFFFFF8;
    if ((v41 & 4) != 0)
      v42 = *(_QWORD *)v42;
    v43 = (*(_WORD *)(v42 + 8) & 0x7F) - 19;
    if (v42)
      v44 = v42 - 48;
    else
      v44 = 0;
    if (v43 >= 5)
      v44 = 0;
    v45 = *(_QWORD *)(v44 + 40);
    v46 = v45 & 7;
    v47 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v46)
      v48 = 1;
    else
      v48 = v47 == 0;
    if (!v48)
    {
      v49 = *(unsigned int **)(v47 + 16);
      v52 = *v49;
      v50 = v49 + 4;
      v51 = v52;
      v53 = (void *)*((_QWORD *)this + 4);
      if ((unint64_t)v52 <= *((_QWORD *)this + 3) - (_QWORD)v53)
      {
        if (v51)
        {
          memcpy(v53, v50, v51);
          *((_QWORD *)this + 4) += v51;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, (const char *)v50);
      }
    }
  }
  v57 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v57 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v57 + 1;
    *v57 = 32;
  }
  v74 = *(_QWORD *)(a2 + 40);
  sub_22F1D3D6C(&v74, this);
  v58 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v58 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v58 + 1;
    *v58 = 93;
  }
}

uint64_t **sub_22F097838(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x23489C12C](v2 + 1);
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    MEMORY[0x2348A0E9C](v2, 0x10B2C4007B6BCF5);
  }
  return a1;
}

uint64_t sub_22F09789C(uint64_t **a1, unint64_t a2, llvm::raw_ostream *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[64];
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v9, (uint64_t)&v10);
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    if ((sub_22EFC7ADC(a2 + 72) & 1) != 0)
      goto LABEL_8;
LABEL_7:
    if ((sub_22F097A08(a1, a2, (llvm::raw_ostream *)v9) & 1) != 0)
    {
LABEL_8:
      v7 = 1;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && (v6 - 67) >= 0xFFFFFFF9)
    goto LABEL_7;
  if (a2 && v6 == 24)
  {
    sub_22F0972FC((uint64_t)*a1, a2, a3, 0, 1);
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  v7 = 1;
  if (a2 && v6 == 22)
  {
    sub_22F3E86C8(a2, (llvm::raw_ostream *)v9);
LABEL_15:
    llvm::Mangler::getNameWithPrefix();
    goto LABEL_16;
  }
LABEL_17:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v9);
  if (v10 != v12)
    free(v10);
  return v7;
}

uint64_t sub_22F097A08(uint64_t **a1, unint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t result;
  _DWORD *v9;
  const char *v10;
  size_t v11;
  unsigned int v12;
  void *v13;

  v4 = a2;
  if (sub_22F096440(*a1, a2))
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x39)
    {
      v4 = v4 & 0xFFFFFFFFFFFFFFF8 | 1;
    }
    else if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x37)
    {
      v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    else if (sub_22E462B18(v4) && sub_22E462B18(v4))
    {
      v4 = v4 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v4) + 96) & 0x80) == 0);
    }
    sub_22F0966E8(*a1, v4, 0, a3);
    return 0;
  }
  v6 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v4 + 40) & 7) != 0 || v6 == 0)
    return 1;
  v9 = *(_DWORD **)(v6 + 16);
  v12 = *v9;
  v10 = (const char *)(v9 + 4);
  v11 = v12;
  v13 = (void *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v12 > *((_QWORD *)a3 + 3) - (_QWORD)v13)
  {
    llvm::raw_ostream::write(a3, v10);
    return 0;
  }
  if (!v11)
    return 0;
  memcpy(v13, v10, v11);
  result = 0;
  *((_QWORD *)a3 + 4) += v11;
  return result;
}

uint64_t sub_22F097B20(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = MEMORY[0x24BED83D8] + 16;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetBufferAndMode();
  return a1;
}

uint64_t sub_22F097B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;

  *(_QWORD *)a1 = sub_22F368DF4(a2, 0);
  v4 = *(_QWORD *)(a2 + 15088);
  v5 = (const char *)(v4 + 104);
  if ((*(char *)(v4 + 127) & 0x80000000) == 0 || (v5 = *(const char **)v5) != 0)
    strlen(v5);
  *(_WORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 64;
  *(_OWORD *)(a1 + 48) = xmmword_22F44E360;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x1000000000;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x800000000;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x800000000;
  llvm::DataLayout::reset();
  return a1;
}

uint64_t sub_22F097C40(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)(a1 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if (!*(_QWORD *)(a1 + 128))
      return 3;
  }
  v4 = *(_QWORD *)(a1 + 104);
  v3 = (uint64_t *)(a1 + 104);
  sub_22E3CD31C((uint64_t *)(v4 + 96), v4);
  if (((*(unsigned __int16 *)(v3[3] + 8) | (*(unsigned __int8 *)(v3[3] + 10) << 16)) & 0x200000) != 0)
    return 3;
  sub_22E3CD31C((uint64_t *)(*v3 + 96), *v3);
  if (*(_DWORD *)(*v2 + 20))
    return 2;
  sub_22E3CD31C((uint64_t *)(*v3 + 96), *v3);
  if (!*(_DWORD *)(*v2 + 16))
    return 0;
  while (1)
  {
    sub_22E3CD31C((uint64_t *)(*v3 + 96), *v3);
    if (*(_DWORD *)(*v2 + 16) > 1u)
      break;
    sub_22E3CD31C((uint64_t *)(*v3 + 96), *v3);
    v6 = *(_QWORD *)(*v2 + 24);
    if ((v6 & 1) != 0)
      v6 = sub_22EFCF510(*v2);
    v7 = **(_QWORD **)(v6 + 16);
    v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
      v8 = (unint64_t)sub_22F10D2BC(v7);
    v9 = sub_22F10C2A4(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
    if (v9)
      v10 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v9;
    else
      v10 = 0;
    sub_22E3CD31C((uint64_t *)(*v3 + 96), *v3);
    if ((*(_QWORD *)*v2 & 0x400) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
      if ((**(_QWORD **)(v10 + 128) & 0x400) == 0)
        break;
    }
    v3 = (uint64_t *)(v10 + 104);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
    v2 = (uint64_t *)(v10 + 128);
    if (!*(_DWORD *)(*(_QWORD *)(v10 + 128) + 16))
      return 0;
  }
  return 1;
}

uint64_t sub_22F097DCC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24FAC65B8;
  v2 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if ((*(_BYTE *)(a1 + 160) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 168), (void *)(16 * *(unsigned int *)(a1 + 176)));
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 96), (void *)(16 * *(unsigned int *)(a1 + 104)));
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 32)));
  return a1;
}

void sub_22F097E64(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24FAC65B8;
  v2 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if ((*(_BYTE *)(a1 + 160) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 168), (void *)(16 * *(unsigned int *)(a1 + 176)));
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 96), (void *)(16 * *(unsigned int *)(a1 + 104)));
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 32)));
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F097F0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned __int8 *v19;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088);
  v4 = (unsigned __int8 *)v3 + *(_QWORD *)(*v3 - 24);
  v5 = *v4;
  v6 = v4[4];
  v7 = sub_22F40AE38(a2);
  v8 = sub_22F3E87A8(v7);
  v9 = sub_22F28C8B4(a2);
  v10 = sub_22F28C8B4(a2);
  if (v9)
    v11 = 1;
  else
    v11 = 2;
  if (v9)
    v12 = v5;
  else
    v12 = 0;
  if (v8 > 0 && v10)
    v13 = v11;
  else
    v13 = !v9;
  v14 = v8 == 3;
  if (v8 > 1)
    ++v14;
  v15 = v14 + v13;
  v16 = (v12 + v15 * v6);
  if ((v15 + v9) >= 2 && (llvm::Triple::isArch32Bit((llvm::Triple *)(v3 + 4)) & 1) != 0)
  {
    v17 = 64;
  }
  else
  {
    v18 = (char *)v3 + *(_QWORD *)(*v3 - 24);
    if (v9)
      v19 = (unsigned __int8 *)(v18 + 1);
    else
      v19 = (unsigned __int8 *)(v18 + 5);
    v17 = *v19;
  }
  if (llvm::Triple::isArch64Bit((llvm::Triple *)(v3 + 4)))
    return (v16 + v17 - 1) / v17 * v17;
  return v16;
}

uint64_t sub_22F098034(uint64_t a1, char a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 15088);
  if ((a2 & 1) != 0 || v2[14] != 41)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 720))(v2);
  else
    return 3;
}

uint64_t sub_22F098064@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 2000);
  if ((*(_BYTE *)(v4 + 68) & 0x20) != 0 && *(_QWORD *)(v3 + 15096))
  {
    v5 = *(_QWORD *)(a1 + 232);
    v6 = operator new();
    v7 = v6;
    *(_QWORD *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    v8 = &off_24FAC6628;
  }
  else
  {
    if ((*(_BYTE *)(v4 + 104) & 0xC) == 0)
    {
      result = operator new();
      v7 = result;
      *(_QWORD *)(result + 32) = 0;
      *(_DWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = &off_24FAC6678;
      *(_DWORD *)(result + 24) = 0;
      goto LABEL_8;
    }
    v5 = *(_QWORD *)(a1 + 232);
    v6 = operator new();
    v7 = v6;
    *(_QWORD *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    v8 = &off_24FAC66C8;
  }
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = 0;
  result = operator new();
  *(_QWORD *)result = &off_24FAC6298;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0x1000000000;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(v7 + 48) = result;
LABEL_8:
  *a2 = v7;
  return result;
}

_QWORD *sub_22F0981B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F2A150C((_DWORD *)(a1 + 16), &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F0981EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_22F2A150C((_DWORD *)(a1 + 16), &v3)[1];
}

_QWORD *sub_22F098218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = sub_22F2A150C((_DWORD *)(a1 + 160), &v7);
  if (!result[1])
    result[1] = v5;
  return result;
}

uint64_t sub_22F098280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v2 = a1 + 160;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = 0;
  v4 = sub_22F2891B4(v2, v3, &v6);
  result = 0;
  if (v4)
    return *(_QWORD *)(v6 + 8);
  return result;
}

_QWORD *sub_22F0982DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  result = sub_22F2A150C((_DWORD *)(a1 + 88), &v7);
  if (!result[1])
    result[1] = v5;
  return result;
}

uint64_t sub_22F098344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v2 = a1 + 88;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = 0;
  v4 = sub_22F2891B4(v2, v3, &v6);
  result = 0;
  if (v4)
    return *(_QWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22F0983A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAC6628;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22F098404(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAC6628;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F098478(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 32) + 1);
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

uint64_t sub_22F09848C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = sub_22F283EC0((uint64_t *)(a1 + 8), &v4);
  v2 = (*((_DWORD *)v1 + 2) + 1);
  *((_DWORD *)v1 + 2) = v2;
  return v2;
}

uint64_t sub_22F0984C4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;

  sub_22EFBB794(a2);
  if (v3)
  {
    result = (*(_DWORD *)(a1 + 40) + 1);
    *(_DWORD *)(a1 + 40) = result;
  }
  else
  {
    result = (*(_DWORD *)(a1 + 36) + 1);
    *(_DWORD *)(a1 + 36) = result;
  }
  return result;
}

uint64_t sub_22F098508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22F098510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22F098518(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_22F098528(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22F098568(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0985B8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAC66C8;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22F09861C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAC66C8;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &off_24FAC6678;
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F098690(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_22F0986A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 202; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 202);
  return result;
}

uint64_t sub_22F098700(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 206; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 206);
  return result;
}

uint64_t sub_22F098760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a2;
  *(_DWORD *)(v4 + 24) = 1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  *(_QWORD *)v4 = off_24FAC6718;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_DWORD *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 224) = v4 + 248;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_DWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 216) = 0;
  *(_OWORD *)(v4 + 232) = xmmword_22F44E350;
  v5 = sub_22E6155EC(*(_QWORD **)(a1 + 1992), *(_DWORD *)(*(_QWORD *)(a1 + 1992) + 344));
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 88);
    do
    {
      v7 = *(_QWORD *)(v6 + 8);
      if ((v7 & 2) == 0)
        break;
      v6 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v6);
    v8 = llvm::xxHash64();
    if (v8)
    {
      v9 = (char *)&v20;
      do
      {
        *--v9 = a0123456789abcd_2[v8 & 0xF];
        v10 = v8 > 0xF;
        v8 >>= 4;
      }
      while (v10);
    }
    else
    {
      v9 = &v19;
      v19 = 48;
    }
    sub_22E3B4274(__p, v9, (char *)&v20, (char *)&v20 - v9);
    v12 = v18;
    if (v18 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v18 >= 0)
      v14 = v18 & 0x7F;
    else
      v14 = (size_t)__p[1];
    *(_QWORD *)(v4 + 232) = 0;
    if (*(_QWORD *)(v4 + 240) < v14)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v15 = *(_QWORD *)(v4 + 232);
    }
    else
    {
      v15 = 0;
      if (!v14)
        goto LABEL_22;
    }
    memcpy((void *)(*(_QWORD *)(v4 + 224) + v15), v13, v14);
    v15 = *(_QWORD *)(v4 + 232);
    v12 = v18;
LABEL_22:
    *(_QWORD *)(v4 + 232) = v15 + v14;
    if (v12 < 0)
      operator delete(__p[0]);
    return v4;
  }
  v11 = 0;
  *(_QWORD *)(v4 + 232) = 0;
  if (!*(_QWORD *)(v4 + 240))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v11 = *(_QWORD *)(v4 + 232);
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 224) + v11) = 48;
  ++*(_QWORD *)(v4 + 232);
  return v4;
}

uint64_t sub_22F0989A0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24FAC6718;
  v2 = *(void **)(a1 + 224);
  if (v2 != (void *)(a1 + 248))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 200), (void *)(16 * *(unsigned int *)(a1 + 216)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 176), (void *)(16 * *(unsigned int *)(a1 + 192)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 152), (void *)(16 * *(unsigned int *)(a1 + 168)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 104), (void *)(24 * *(unsigned int *)(a1 + 120)));
  return sub_22F076E30(a1);
}

void sub_22F098A48(uint64_t a1)
{
  sub_22F0989A0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

std::string *sub_22F098A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  BOOL v26;
  const std::string::value_type *p_p;
  std::string::size_type v28;
  char *v29;
  unint64_t v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  uint64_t v34;
  void *__p;
  std::string::size_type v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a3 + 23) = 8;
  strcpy((char *)a3, "<lambda_");
  v6 = sub_22F3B1CF4(a2);
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 128) + 112) & 0x7FFFFFFF;
  if (v6)
  {
    v8 = v6;
    if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x40)
    {
      v9 = *(_QWORD *)(v6 + 16);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      if (v10 && (*(_WORD *)(v10 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v10 - 24) & 0xFFFFFFFFFFFFFFF0);
        if (v12)
          v13 = *(_BYTE *)(v12 + 16) == 26;
        else
          v13 = 0;
        if (!v13)
        {
          v34 = v8;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          {
            v14 = 0;
LABEL_16:
            v15 = (*(_DWORD *)(v8 + 96) >> 20);
            if (v15 == 255)
            {
              v16 = v8;
              if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x53)
              {
                v17 = *(_QWORD *)(v8 + 16);
                v18 = v17 & 0xFFFFFFFFFFFFFFF8;
                if ((v17 & 4) != 0)
                  v18 = *(_QWORD *)v18;
                for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
                {
                  v20 = -40;
                  if (i > 70)
                  {
                    if (i == 71)
                    {
                      v20 = -56;
                    }
                    else if (i != 81)
                    {
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    if (i > 0x18)
                      goto LABEL_30;
                    if (i == 16)
                      goto LABEL_24;
                    if (((1 << i) & 0x1066) != 0)
                      goto LABEL_37;
                    if (i == 24)
                    {
LABEL_24:
                      v20 = -48;
                    }
                    else
                    {
LABEL_30:
                      if (i != 70)
                      {
LABEL_31:
                        v21 = i - 52;
                        if ((i - 33) >= 5)
                          v22 = -48;
                        else
                          v22 = -64;
                        if (v21 >= 6)
                          v20 = v22;
                        else
                          v20 = -72;
                        goto LABEL_37;
                      }
                      v20 = -64;
                    }
                  }
LABEL_37:
                  v23 = *(_QWORD *)(v18 + v20 + 16);
                  v18 = v23 & 0xFFFFFFFFFFFFFFF8;
                  if ((v23 & 4) != 0)
                    v18 = *(_QWORD *)v18;
                }
                v16 = v18 - 40;
              }
              v15 = sub_22F36F2CC(*(_QWORD *)(v16 + 88), v8);
            }
            v24 = (v14 - v15);
            if (v14 == v15)
            {
              v25 = &v39;
              v39 = 48;
            }
            else
            {
              v25 = v40;
              do
              {
                *--v25 = (v24 % 0xA) | 0x30;
                v26 = v24 > 9;
                v24 /= 0xAuLL;
              }
              while (v26);
            }
            sub_22E3B4274(&__p, v25, v40, v40 - v25);
            if (v37 >= 0)
              p_p = (const std::string::value_type *)&__p;
            else
              p_p = (const std::string::value_type *)__p;
            if (v37 >= 0)
              v28 = v37 & 0x7F;
            else
              v28 = v36;
            std::string::append((std::string *)a3, p_p, v28);
            if (v37 < 0)
              operator delete(__p);
            std::string::append((std::string *)a3, "_");
            goto LABEL_58;
          }
          v12 = sub_22F10CF48(v12);
          v8 = v34;
          if (!v12)
          {
            v14 = 0;
            goto LABEL_16;
          }
        }
        v14 = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
        goto LABEL_16;
      }
    }
  }
LABEL_58:
  if (v7
    || (v38 = a2, __p = 0, sub_22F246C54((uint64_t *)(a1 + 152), &v38, &__p))
    && __p != (void *)(*(_QWORD *)(a1 + 152) + 16 * *(unsigned int *)(a1 + 168))
    && (v7 = *((_DWORD *)__p + 2)) != 0)
  {
    v29 = v40;
    v30 = v7;
    do
    {
      *--v29 = (v30 % 0xA) | 0x30;
      v26 = v30 > 9;
      v30 /= 0xAuLL;
    }
    while (v26);
  }
  else
  {
    v29 = &v39;
    v39 = 48;
  }
  sub_22E3B4274(&__p, v29, v40, v40 - v29);
  if (v37 >= 0)
    v31 = (const std::string::value_type *)&__p;
  else
    v31 = (const std::string::value_type *)__p;
  if (v37 >= 0)
    v32 = v37 & 0x7F;
  else
    v32 = v36;
  std::string::append((std::string *)a3, v31, v32);
  if (v37 < 0)
    operator delete(__p);
  return std::string::append((std::string *)a3, ">");
}

uint64_t sub_22F098E5C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v8;
  __int16 v9;
  BOOL v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
    goto LABEL_8;
  v4 = sub_22EFC0844(a2);
  if (sub_22EA0E084(a2))
    return 1;
  if (sub_22EFBFB90(a2))
    return 0;
  result = 1;
  if ((*(_BYTE *)(a2 + 40) & 7) == 0 && v4 != 1)
  {
    if (v4)
    {
LABEL_8:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000) + 1) & 1) == 0)
        return 0;
      if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 >= 7)
        v6 = 0;
      else
        v6 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3D || v6 == 0)
        return 1;
      if (sub_22EFB93F4(v6))
        return 0;
      v8 = sub_22F09CA5C(a2);
      v9 = *(_WORD *)(v8 + 8);
      v10 = (v9 & 0x7Fu) > 0x18 || ((1 << (v9 & 0x7F)) & 0x1000006) == 0;
      if (v10 && (v9 & 0x7Fu) - 52 > 5)
        goto LABEL_28;
      v11 = sub_22EFB948C(a2);
      if (!v11 || v11 == 3)
      {
        v9 = *(_WORD *)(v8 + 8);
LABEL_28:
        if ((v9 & 0x7F) == 0x53)
        {
          v12 = sub_22EFB948C(a2);
          if ((v12 == 4 || v12 == 1) && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 65 >= 2)
          {
            v13 = *(_QWORD *)(a2 + 40);
            if (v13 >= 8 && (v13 & 7) == 0)
              return 0;
          }
        }
        return 1;
      }
      while (1)
      {
        v9 = *(_WORD *)(v8 + 8);
        v14 = v9 & 0x7F;
        if (v14 == 16 || v14 == 83)
          goto LABEL_28;
        v15 = -40;
        if (v14 > 70)
        {
          if (v14 == 71)
          {
            v15 = -56;
            goto LABEL_53;
          }
          if (v14 != 81)
            goto LABEL_47;
        }
        else
        {
          if (v14 > 0x18)
            goto LABEL_46;
          if (v14 == 16)
            goto LABEL_40;
          if (((1 << v14) & 0x1066) == 0)
          {
            if (v14 == 24)
            {
LABEL_40:
              v15 = -48;
              goto LABEL_53;
            }
LABEL_46:
            if (v14 == 70)
            {
              v15 = -64;
              goto LABEL_53;
            }
LABEL_47:
            v16 = v14 - 52;
            if ((v14 - 33) >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v15 = v17;
            else
              v15 = -72;
          }
        }
LABEL_53:
        v8 = sub_22F09CA5C(v8 + v15);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F099098()
{
  return 1;
}

void sub_22F0990A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  char *v18[2];
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD v30[4];
  _QWORD v31[6];
  _QWORD v32[3];
  _QWORD *v33[2];
  BOOL v34;
  _QWORD v35[10];
  _QWORD *v36;
  __int128 v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1992);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v10[0] = &unk_24FAC3168;
  v10[3] = v8;
  v11 = 0;
  v12 = v9;
  v13 = "Mangling declaration";
  v35[0] = &off_24FAC6870;
  sub_22F242C48((uint64_t)v35, (uint64_t)&v36);
  v35[0] = &off_24FAC6870;
  v35[9] = a4;
  v36 = v38;
  v37 = xmmword_22F44E300;
  if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x37 && v8 || (*(_DWORD *)(v8 + 28) & 0x7F) == 0x39 && v8)
  {
    v14 = a1;
    v15 = v35;
    v16 = sub_22F09CFB0(v8);
    v17 = a2 & 7;
  }
  else
  {
    v14 = a1;
    v15 = v35;
    v16 = 0;
    v17 = -1;
  }
  v18[0] = (char *)&v19;
  v18[1] = (char *)0xA00000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v30[2] = v31;
  v30[3] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0;
  v32[0] = 0;
  v32[1] = 1;
  v33[1] = 0;
  v33[0] = 0;
  v32[2] = v33;
  v34 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  sub_22F09CC20((uint64_t)&v14, a2, a3, "?", 1uLL);
  sub_22F258024(v33[0]);
  sub_22E3B4EF4((uint64_t)v30);
  llvm::deallocate_buffer(v26, (void *)(24 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  sub_22E3B9848(v18);
  sub_22F09CD88((uint64_t)v35);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v10);
}

uint64_t sub_22F0992F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::raw_ostream *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  int v17;
  char *v18[2];
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD v30[4];
  _QWORD v31[6];
  _QWORD v32[3];
  _QWORD *v33[2];
  BOOL v34;
  char *v35[4];
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v40[8] = *MEMORY[0x24BDAC8D0];
  v35[0] = (char *)&off_24FAC6870;
  v9 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v35, (uint64_t)&v38);
  v35[0] = (char *)&off_24FAC6870;
  v37 = a5;
  v38 = v40;
  v39 = xmmword_22F44E300;
  v16[0] = a1;
  v16[1] = v35;
  v16[2] = 0;
  v17 = -1;
  v18[0] = (char *)&v19;
  v18[1] = (char *)0xA00000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v30[2] = v31;
  v30[3] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0;
  v32[0] = 0;
  v32[1] = 1;
  v33[0] = 0;
  v33[1] = 0;
  v32[2] = v33;
  v34 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v10 = v36;
  if (v36 >= v35[3])
  {
    llvm::raw_ostream::write(v9);
  }
  else
  {
    ++v36;
    *v10 = 63;
  }
  if (sub_22E462B18(a2))
    v11 = a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0);
  else
    v11 = a2;
  sub_22F09CFFC((uint64_t)v16, v11, 0);
  if (*(_OWORD *)(a3 + 24) == 0)
    v12 = (*(_DWORD *)(a2 + 28) >> 13) & 3;
  else
    v12 = 0;
  sub_22F0AA378(v12, (unsigned int *)a3, (uint64_t)v16, v35);
  v13 = *(_QWORD *)(a3 + 40);
  if (!v13)
    v13 = a2;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 26)
    v14 = sub_22F10CF48(v14);
  sub_22F0A709C((uint64_t)v16, v14, a2, 0, 1);
  sub_22F258024(v33[0]);
  sub_22E3B4EF4((uint64_t)v30);
  llvm::deallocate_buffer(v26, (void *)(24 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  sub_22E3B9848(v18);
  return sub_22F09CD88((uint64_t)v35);
}

uint64_t sub_22F09956C(uint64_t a1, unint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  int v22;
  char *v23[2];
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD v35[4];
  _QWORD v36[6];
  _QWORD v37[3];
  _QWORD *v38[2];
  BOOL v39;
  char *v40[4];
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  _QWORD v45[9];

  v45[8] = *MEMORY[0x24BDAC8D0];
  v40[0] = (char *)&off_24FAC6870;
  sub_22F242C48((uint64_t)v40, (uint64_t)&v43);
  v40[0] = (char *)&off_24FAC6870;
  v42 = a6;
  v43 = v45;
  v44 = xmmword_22F44E300;
  v21[0] = a1;
  v21[1] = v40;
  v21[2] = sub_22F09CFB0(a2);
  v22 = a3;
  v23[0] = (char *)&v24;
  v23[1] = (char *)0xA00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  v35[2] = v36;
  v35[3] = 0x400000000;
  v36[4] = v37;
  v36[5] = 0;
  v37[0] = 0;
  v37[1] = 1;
  v38[0] = 0;
  v38[1] = 0;
  v37[2] = v38;
  v39 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  if ((char *)(v40[3] - (char *)v41) > (char *)3)
    *v41++ = 1163870015;
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)v40, "??_E");
  v11 = *(_WORD *)(a2 + 80) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 == 83)
      goto LABEL_19;
    if (v11 == 71)
    {
      v12 = -56;
      goto LABEL_19;
    }
    if (v11 != 81)
    {
LABEL_14:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_13;
    if (v11 == 16)
    {
LABEL_6:
      v12 = -48;
      goto LABEL_19;
    }
    if (((1 << v11) & 0x1066) == 0)
    {
      if (v11 == 24)
        goto LABEL_6;
LABEL_13:
      if (v11 == 70)
      {
        v12 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  v16 = *(_QWORD *)(a2 + 72 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v18 = (uint64_t)(v17 - 8);
  else
    v18 = 0;
  sub_22F09CFFC((uint64_t)v21, v18, 0);
  sub_22F0AA378((*(_DWORD *)(a2 + 28) >> 13) & 3, a4, (uint64_t)v21, v40);
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v19 || *(_BYTE *)(v19 + 16) != 26)
    v19 = sub_22F10CF48(v19);
  sub_22F0A709C((uint64_t)v21, v19, a2, 0, 1);
  sub_22F258024(v38[0]);
  sub_22E3B4EF4((uint64_t)v35);
  llvm::deallocate_buffer(v31, (void *)(24 * v33));
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  sub_22E3B9848(v23);
  return sub_22F09CD88((uint64_t)v40);
}

uint64_t sub_22F09987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _QWORD v11[3];
  int v12;
  char *v13[2];
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD v26[6];
  _QWORD v27[3];
  _QWORD *v28[2];
  BOOL v29;
  _QWORD v30[4];
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v30[0] = &off_24FAC6870;
  v7 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v30, (uint64_t)&v33);
  v30[0] = &off_24FAC6870;
  v32 = a4;
  v33 = v35;
  v34 = xmmword_22F44E300;
  v11[0] = a1;
  v11[1] = v30;
  v11[2] = 0;
  v12 = -1;
  v13[0] = (char *)&v14;
  v13[1] = (char *)0xA00000000;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  v25[2] = v26;
  v25[3] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0;
  v27[0] = 0;
  v27[1] = 1;
  v28[0] = 0;
  v28[1] = 0;
  v27[2] = v28;
  v29 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  if (v30[3] - (_QWORD)v31 > 3uLL)
    *v31++ = 1414669375;
  else
    llvm::raw_ostream::write(v7, "?$RT");
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 64;
  }
  sub_22F09CC20((uint64_t)v11, a2, 0, "", 0);
  sub_22F258024(v28[0]);
  sub_22E3B4EF4((uint64_t)v25);
  llvm::deallocate_buffer(v21, (void *)(24 * v23));
  llvm::deallocate_buffer(v18, (void *)(16 * v20));
  llvm::deallocate_buffer(v15, (void *)(16 * v17));
  sub_22E3B9848(v13);
  return sub_22F09CD88((uint64_t)v30);
}

uint64_t sub_22F099AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2, 0, 0, a3);
}

uint64_t sub_22F099AC0(llvm::APInt *a1, unint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::APInt *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  char *v15[2];
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD v27[4];
  _QWORD v28[6];
  _QWORD v29[3];
  _QWORD *v30[2];
  BOOL v31;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v32[0] = &off_24FAC6870;
  v6 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v32, (uint64_t)&v35);
  v32[0] = &off_24FAC6870;
  v34 = a3;
  v35 = v37;
  v36 = xmmword_22F44E300;
  v11 = a1;
  v12 = (llvm::raw_ostream *)v32;
  v13 = 0;
  v14 = -1;
  v15[0] = (char *)&v16;
  v15[1] = (char *)0xA00000000;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v27;
  v27[0] = 0;
  v27[1] = 0;
  v27[2] = v28;
  v27[3] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0;
  v29[0] = 0;
  v29[1] = 1;
  v30[0] = 0;
  v30[1] = 0;
  v29[2] = v30;
  v31 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  v7 = (_DWORD *)v33;
  if ((unint64_t)(v32[3] - v33) > 4)
  {
    *(_BYTE *)(v33 + 4) = 48;
    *v7 = 1381973823;
    v33 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v6, "??_R0");
  }
  sub_22F0A1E3C(&v11, a2, 0, 3);
  v8 = v12;
  v9 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 14400;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "@8");
  }
  sub_22F258024(v30[0]);
  sub_22E3B4EF4((uint64_t)v27);
  llvm::deallocate_buffer(v23, (void *)(24 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  sub_22E3B9848(v15);
  return sub_22F09CD88((uint64_t)v32);
}

char **sub_22F099CEC(llvm::APInt *a1, unint64_t a2, llvm::raw_ostream *this)
{
  _BYTE *v4;
  llvm::APInt *v6[3];
  int v7;
  char *v8[2];
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  unsigned int v12;
  llvm *v13;
  uint64_t v14;
  unsigned int v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD v20[4];
  _QWORD v21[6];
  _QWORD v22[3];
  _QWORD *v23[2];
  BOOL v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6[0] = a1;
  v6[1] = this;
  v6[2] = 0;
  v7 = -1;
  v8[0] = (char *)&v9;
  v8[1] = (char *)0xA00000000;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  v20[2] = v21;
  v20[3] = 0x400000000;
  v21[4] = v22;
  v21[5] = 0;
  v22[0] = 0;
  v22[1] = 1;
  v23[0] = 0;
  v23[1] = 0;
  v22[2] = v23;
  v24 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 46;
  }
  sub_22F0A1E3C(v6, a2, 0, 3);
  sub_22F258024(v23[0]);
  sub_22E3B4EF4((uint64_t)v20);
  llvm::deallocate_buffer(v16, (void *)(24 * v18));
  llvm::deallocate_buffer(v13, (void *)(16 * v15));
  llvm::deallocate_buffer(v10, (void *)(16 * v12));
  return sub_22E3B9848(v8);
}

char **sub_22F099E78(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  _BYTE *v37;
  char v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  int v45;
  char *v46[2];
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  unsigned int v50;
  llvm *v51;
  uint64_t v52;
  unsigned int v53;
  llvm *v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD v58[4];
  _QWORD v59[6];
  _QWORD v60[3];
  _QWORD *v61[2];
  BOOL v62;
  uint64_t __s;
  __int16 v64;
  _BYTE v65[22];

  *(_QWORD *)&v65[6] = *MEMORY[0x24BDAC8D0];
  v42 = a1;
  v43 = this;
  v44 = 0;
  v45 = -1;
  v46[0] = (char *)&v47;
  v46[1] = (char *)0xA00000000;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = v58;
  v58[0] = 0;
  v58[1] = 0;
  v58[2] = v59;
  v58[3] = 0x400000000;
  v59[4] = v60;
  v59[5] = 0;
  v60[0] = 0;
  v60[1] = 1;
  v61[0] = 0;
  v61[1] = 0;
  v60[2] = v61;
  v62 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v5 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 24384;
    *(_DWORD *)v5 = 1130315583;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "??_C@_");
  }
  v6 = sub_22EF5C728(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (*(_BYTE *)(v6 + 16) == 2)
    v7 = v6;
  else
    v7 = 0;
  v8 = (_QWORD *)(v7 + 40);
  if (*(_DWORD *)(v7 + 48) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = ((*(_DWORD *)a2 >> 21) & 7u) * *(_DWORD *)v8;
  v11 = *((_QWORD *)v43 + 3);
  v10 = (char *)*((_QWORD *)v43 + 4);
  if ((*(_DWORD *)a2 & 0x1C0000) == 0x40000)
  {
    if ((unint64_t)v10 < v11)
    {
      *((_QWORD *)v43 + 4) = v10 + 1;
      v12 = 49;
LABEL_13:
      *v10 = v12;
      goto LABEL_15;
    }
  }
  else if ((unint64_t)v10 < v11)
  {
    *((_QWORD *)v43 + 4) = v10 + 1;
    v12 = 48;
    goto LABEL_13;
  }
  llvm::raw_ostream::write(v43);
LABEL_15:
  sub_22F0A8DC0((uint64_t)&v42, v9);
  if ((_DWORD)v9)
  {
    v13 = 0;
    v14 = a2 + 20;
    do
    {
      v15 = (*(_DWORD *)a2 >> 21) & 7;
      v16 = v13 / v15;
      if (v16 >= *(_DWORD *)(a2 + 16))
      {
        LOBYTE(v18) = 0;
      }
      else
      {
        if (v15 == 4)
        {
          v17 = *(_DWORD *)(v14 + 4 * *(unsigned int *)(a2 + 4) + 4 * v16);
        }
        else if (v15 == 2)
        {
          v17 = *(unsigned __int16 *)(v14 + 4 * *(unsigned int *)(a2 + 4) + 2 * v16);
        }
        else
        {
          v17 = *(unsigned __int8 *)(v14 + 4 * *(unsigned int *)(a2 + 4) + v16);
        }
        v18 = v17 >> (8 * (v13 % v15));
      }
      LOBYTE(__s) = v18;
      llvm::JamCRC::update();
      ++v13;
    }
    while ((_DWORD)v9 != v13);
  }
  sub_22F0A8DC0((uint64_t)&v42, 0xFFFFFFFFLL);
  if ((*(_DWORD *)a2 & 0x1C0000) == 0x40000)
    v19 = 64;
  else
    v19 = 32;
  if (v9 >= v19)
    v20 = v19;
  else
    v20 = v9;
  if (v20)
  {
    v22 = 0;
    v23 = a2 + 20;
    do
    {
      v24 = (*(_DWORD *)a2 >> 21) & 7;
      v25 = *(_DWORD *)(a2 + 16);
      v26 = v22 / v24;
      if ((*(_DWORD *)a2 & 0x1C0000) == 0x40000)
      {
        if (v26 < v25)
        {
          if (v24 == 4)
          {
            v27 = *(_DWORD *)(v23 + 4 * *(unsigned int *)(a2 + 4) + 4 * v26);
          }
          else if (v24 == 2)
          {
            v27 = *(unsigned __int16 *)(v23 + 4 * *(unsigned int *)(a2 + 4) + 2 * v26);
          }
          else
          {
            v27 = *(unsigned __int8 *)(v23 + 4 * *(unsigned int *)(a2 + 4) + v26);
          }
          v29 = v24 + ~(v22 % v24);
LABEL_52:
          v28 = v27 >> (8 * v29);
          goto LABEL_53;
        }
      }
      else if (v26 < v25)
      {
        if (v24 == 4)
        {
          v27 = *(_DWORD *)(v23 + 4 * *(unsigned int *)(a2 + 4) + 4 * v26);
        }
        else if (v24 == 2)
        {
          v27 = *(unsigned __int16 *)(v23 + 4 * *(unsigned int *)(a2 + 4) + 2 * v26);
        }
        else
        {
          v27 = *(unsigned __int8 *)(v23 + 4 * *(unsigned int *)(a2 + 4) + v26);
        }
        v29 = v22 % v24;
        goto LABEL_52;
      }
      LOBYTE(v28) = 0;
LABEL_53:
      if (v28 == 36 || (word_22F4ADB24[v28] & 0xE8) != 0)
      {
        v30 = v43;
        v32 = (_BYTE *)*((_QWORD *)v43 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)v43 + 3))
          goto LABEL_77;
        *((_QWORD *)v43 + 4) = v32 + 1;
        *v32 = v28;
      }
      else
      {
        if ((word_22F4ADB24[v28 & 0x7F] & 0x60) != 0)
        {
          v30 = v43;
          v31 = (_BYTE *)*((_QWORD *)v43 + 4);
          if ((unint64_t)v31 >= *((_QWORD *)v43 + 3))
          {
            v30 = (llvm::raw_ostream *)llvm::raw_ostream::write(v43);
          }
          else
          {
            *((_QWORD *)v43 + 4) = v31 + 1;
            *v31 = 63;
          }
          v38 = v28 & 0x7F;
        }
        else
        {
          v64 = 11559;
          __s = *(_QWORD *)",/\\:. \n\t'-";
          v33 = memchr(&__s, (char)v28, 0xAuLL);
          if (v33)
            v34 = v33;
          else
            v34 = v65;
          v35 = v43;
          if (v34 - (_BYTE *)&__s != 10)
          {
            v39 = (_BYTE *)*((_QWORD *)v43 + 4);
            if ((unint64_t)v39 >= *((_QWORD *)v43 + 3))
            {
              llvm::raw_ostream::write(v43);
            }
            else
            {
              *((_QWORD *)v43 + 4) = v39 + 1;
              *v39 = 63;
            }
            llvm::raw_ostream::operator<<();
            goto LABEL_78;
          }
          v36 = (_WORD *)*((_QWORD *)v43 + 4);
          if (*((_QWORD *)v43 + 3) - (_QWORD)v36 > 1uLL)
          {
            *v36 = 9279;
            *((_QWORD *)v35 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v43, "?$");
          }
          v37 = (_BYTE *)*((_QWORD *)v43 + 4);
          if ((unint64_t)v37 >= *((_QWORD *)v43 + 3))
          {
            llvm::raw_ostream::write(v43);
          }
          else
          {
            *((_QWORD *)v43 + 4) = v37 + 1;
            *v37 = (v28 >> 4) + 65;
          }
          v30 = v43;
          v38 = (v28 & 0xF) + 65;
        }
        v40 = (_BYTE *)*((_QWORD *)v30 + 4);
        if ((unint64_t)v40 >= *((_QWORD *)v30 + 3))
        {
LABEL_77:
          llvm::raw_ostream::write(v30);
          goto LABEL_78;
        }
        *((_QWORD *)v30 + 4) = v40 + 1;
        *v40 = v38;
      }
LABEL_78:
      ++v22;
    }
    while (v22 != v20);
  }
  v21 = (_BYTE *)*((_QWORD *)v43 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v43 + 3))
  {
    llvm::raw_ostream::write(v43);
  }
  else
  {
    *((_QWORD *)v43 + 4) = v21 + 1;
    *v21 = 64;
  }
  sub_22F258024(v61[0]);
  sub_22E3B4EF4((uint64_t)v58);
  llvm::deallocate_buffer(v54, (void *)(24 * v56));
  llvm::deallocate_buffer(v51, (void *)(16 * v53));
  llvm::deallocate_buffer(v48, (void *)(16 * v50));
  return sub_22E3B9848(v46);
}

uint64_t sub_22F09A458(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *v12;
  size_t v13;
  void *v14;
  unsigned int v16;
  _QWORD *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  int v20;
  char *v21[2];
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  llvm *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD v33[4];
  _QWORD v34[6];
  _QWORD v35[3];
  _QWORD *v36[2];
  BOOL v37;
  _QWORD v38[4];
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  _QWORD v43[9];

  v43[8] = *MEMORY[0x24BDAC8D0];
  v38[0] = &off_24FAC6870;
  sub_22F242C48((uint64_t)v38, (uint64_t)&v41);
  v38[0] = &off_24FAC6870;
  v40 = a3;
  v41 = v43;
  v42 = xmmword_22F44E300;
  v17 = a1;
  v18 = (llvm::raw_ostream *)v38;
  v19 = 0;
  v20 = -1;
  v21[0] = (char *)&v22;
  v21[1] = (char *)0xA00000000;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = v33;
  v33[0] = 0;
  v33[1] = 0;
  v33[2] = v34;
  v33[3] = 0x400000000;
  v34[4] = v35;
  v34[5] = 0;
  v35[0] = 0;
  v35[1] = 1;
  v36[0] = 0;
  v36[1] = 0;
  v35[2] = v36;
  v37 = *(_BYTE *)(*(_QWORD *)(a1[1] + 15088) + *(_QWORD *)(**(_QWORD **)(a1[1] + 15088) - 24)) == 64;
  v6 = sub_22EFB948C(a2);
  if (v6 < 3)
  {
    v10 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v10) > 4)
    {
      *(_BYTE *)(v10 + 4) = 64;
      *(_DWORD *)v10 = 827532351;
      v39 += 5;
    }
    else
    {
      llvm::raw_ostream::write(v18, "?$S1@");
    }
    v16 = 0;
  }
  else
  {
    sub_22EFBB794(a2);
    if (v7)
      v8 = "??__J";
    else
      v8 = "??_B";
    if (v7)
      v9 = 5;
    else
      v9 = 4;
    if (v9 <= v38[3] - (_QWORD)v39)
    {
      memcpy(v39, v8, v9);
      v39 += v9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v38, v8);
    }
    v16 = 0;
    if ((sub_22F0AA038(a1, a2, (int *)&v16) & 1) == 0)
    {
      sub_22F09CC20((uint64_t)&v17, a2, 0, "", 0);
      goto LABEL_16;
    }
  }
  sub_22F09F810((uint64_t)&v17, a2);
LABEL_16:
  v11 = v18;
  if (v6 <= 2)
    v12 = "@4IA";
  else
    v12 = "@5";
  if (v6 <= 2)
    v13 = 4;
  else
    v13 = 2;
  v14 = (void *)*((_QWORD *)v18 + 4);
  if (v13 <= *((_QWORD *)v18 + 3) - (_QWORD)v14)
  {
    memcpy(v14, v12, v13);
    *((_QWORD *)v11 + 4) += v13;
  }
  else
  {
    llvm::raw_ostream::write(v18, v12);
  }
  if (v16)
    sub_22F0A8DC0((uint64_t)&v17, v16);
  sub_22F258024(v36[0]);
  sub_22E3B4EF4((uint64_t)v33);
  llvm::deallocate_buffer(v29, (void *)(24 * v31));
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  sub_22E3B9848(v21);
  return sub_22F09CD88((uint64_t)v38);
}

uint64_t sub_22F09A770(llvm::APInt *a1, uint64_t a2, uint64_t a3)
{
  return sub_22F0AA6AC(a1, a2, 69, a3);
}

uint64_t sub_22F09A77C(llvm::APInt *a1, uint64_t a2, uint64_t a3)
{
  return sub_22F0AA6AC(a1, a2, 70, a3);
}

uint64_t sub_22F09A788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  _DWORD *v6;
  _QWORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  char *v14[2];
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  llvm *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD v26[4];
  _QWORD v27[6];
  _QWORD v28[3];
  _QWORD *v29[2];
  BOOL v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v31[0] = &off_24FAC6870;
  v5 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v31, (uint64_t)&v34);
  v31[0] = &off_24FAC6870;
  v33 = a3;
  v34 = v36;
  v35 = xmmword_22F44E300;
  v12[0] = a1;
  v12[1] = v31;
  v12[2] = 0;
  v13 = -1;
  v14[0] = (char *)&v15;
  v14[1] = (char *)0xA00000000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = v26;
  v26[0] = 0;
  v26[1] = 0;
  v26[2] = v27;
  v26[3] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0;
  v28[0] = 0;
  v28[1] = 1;
  v29[0] = 0;
  v29[1] = 0;
  v28[2] = v29;
  v30 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v6 = (_DWORD *)v32;
  if ((unint64_t)(v31[3] - v32) > 5)
  {
    *(_WORD *)(v32 + 4) = 9332;
    *v6 = 1818846783;
    v32 += 6;
  }
  else
  {
    llvm::raw_ostream::write(v5, "?filt$");
  }
  v7 = sub_22F3E1914((uint64_t *)(a1 + 176), &v11);
  ++*((_DWORD *)v7 + 2);
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 64;
    *(_WORD *)v9 = 12352;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, "@0@");
  }
  sub_22F09CFFC((uint64_t)v12, v11, 0);
  sub_22F258024(v29[0]);
  sub_22E3B4EF4((uint64_t)v26);
  llvm::deallocate_buffer(v22, (void *)(24 * v24));
  llvm::deallocate_buffer(v19, (void *)(16 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  sub_22E3B9848(v14);
  return sub_22F09CD88((uint64_t)v31);
}

uint64_t sub_22F09A9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  _DWORD *v6;
  _QWORD *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  char *v14[2];
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  llvm *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD v26[4];
  _QWORD v27[6];
  _QWORD v28[3];
  _QWORD *v29[2];
  BOOL v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v31[0] = &off_24FAC6870;
  v5 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v31, (uint64_t)&v34);
  v31[0] = &off_24FAC6870;
  v33 = a3;
  v34 = v36;
  v35 = xmmword_22F44E300;
  v12[0] = a1;
  v12[1] = v31;
  v12[2] = 0;
  v13 = -1;
  v14[0] = (char *)&v15;
  v14[1] = (char *)0xA00000000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = v26;
  v26[0] = 0;
  v26[1] = 0;
  v26[2] = v27;
  v26[3] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0;
  v28[0] = 0;
  v28[1] = 1;
  v29[0] = 0;
  v29[1] = 0;
  v28[2] = v29;
  v30 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v6 = (_DWORD *)v32;
  if ((unint64_t)(v31[3] - v32) > 4)
  {
    *(_BYTE *)(v32 + 4) = 36;
    *v6 = 1852401215;
    v32 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v5, "?fin$");
  }
  v7 = sub_22F3E1914((uint64_t *)(a1 + 200), &v11);
  ++*((_DWORD *)v7 + 2);
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 64;
    *(_WORD *)v9 = 12352;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, "@0@");
  }
  sub_22F09CFFC((uint64_t)v12, v11, 0);
  sub_22F258024(v29[0]);
  sub_22E3B4EF4((uint64_t)v26);
  llvm::deallocate_buffer(v22, (void *)(24 * v24));
  llvm::deallocate_buffer(v19, (void *)(16 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  sub_22E3B9848(v14);
  return sub_22F09CD88((uint64_t)v31);
}

char **sub_22F09AC28(llvm::APInt *a1, unint64_t a2, llvm::raw_ostream *this)
{
  _BYTE *v4;
  llvm::APInt *v6[3];
  int v7;
  char *v8[2];
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  unsigned int v12;
  llvm *v13;
  uint64_t v14;
  unsigned int v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD v20[4];
  _QWORD v21[6];
  _QWORD v22[3];
  _QWORD *v23[2];
  BOOL v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6[0] = a1;
  v6[1] = this;
  v6[2] = 0;
  v7 = -1;
  v8[0] = (char *)&v9;
  v8[1] = (char *)0xA00000000;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  v20[2] = v21;
  v20[3] = 0x400000000;
  v21[4] = v22;
  v21[5] = 0;
  v22[0] = 0;
  v22[1] = 1;
  v23[0] = 0;
  v23[1] = 0;
  v22[2] = v23;
  v24 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 63;
  }
  sub_22F0A1E3C(v6, a2, 0, 1);
  sub_22F258024(v23[0]);
  sub_22E3B4EF4((uint64_t)v20);
  llvm::deallocate_buffer(v16, (void *)(24 * v18));
  llvm::deallocate_buffer(v13, (void *)(16 * v15));
  llvm::deallocate_buffer(v10, (void *)(16 * v12));
  return sub_22E3B9848(v8);
}

uint64_t sub_22F09ADB4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  unint64_t v11;
  const char *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  int v23;
  char *v24[2];
  uint64_t v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  llvm *v29;
  uint64_t v30;
  unsigned int v31;
  llvm *v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD v36[4];
  _QWORD v37[6];
  _QWORD v38[3];
  _QWORD *v39[2];
  BOOL v40;
  _QWORD v41[4];
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v41[0] = &off_24FAC6870;
  sub_22F242C48((uint64_t)v41, (uint64_t)&v44);
  v41[0] = &off_24FAC6870;
  v43 = a5;
  v44 = v46;
  v45 = xmmword_22F44E300;
  v20 = a1;
  v21 = (llvm::raw_ostream *)v41;
  v22 = 0;
  v23 = -1;
  v24[0] = (char *)&v25;
  v24[1] = (char *)0xA00000000;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = v36;
  v36[0] = 0;
  v36[1] = 0;
  v36[2] = v37;
  v36[3] = 0x400000000;
  v37[4] = v38;
  v37[5] = 0;
  v38[0] = 0;
  v38[1] = 1;
  v39[0] = 0;
  v39[1] = 0;
  v38[2] = v39;
  v40 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v10 = sub_22E49F808(a2);
  v11 = v41[3] - (_QWORD)v42;
  if (v10)
  {
    if (v11 <= 3)
    {
      v12 = "??_S";
LABEL_6:
      llvm::raw_ostream::write((llvm::raw_ostream *)v41, v12);
      goto LABEL_7;
    }
    v19 = 1398751039;
  }
  else
  {
    if (v11 <= 3)
    {
      v12 = "??_7";
      goto LABEL_6;
    }
    v19 = 928988991;
  }
  *v42++ = v19;
LABEL_7:
  sub_22F09CFFC((uint64_t)&v20, a2, 0);
  v13 = v21;
  v14 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 16950;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, "6B");
  }
  if (a4)
  {
    v15 = 8 * a4;
    do
    {
      v16 = *a3++;
      sub_22F09CFFC((uint64_t)&v20, v16, 0);
      v15 -= 8;
    }
    while (v15);
  }
  v17 = (_BYTE *)*((_QWORD *)v21 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v21 + 3))
  {
    llvm::raw_ostream::write(v21);
  }
  else
  {
    *((_QWORD *)v21 + 4) = v17 + 1;
    *v17 = 64;
  }
  sub_22F258024(v39[0]);
  sub_22E3B4EF4((uint64_t)v36);
  llvm::deallocate_buffer(v32, (void *)(24 * v34));
  llvm::deallocate_buffer(v29, (void *)(16 * v31));
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
  sub_22E3B9848(v24);
  return sub_22F09CD88((uint64_t)v41);
}

uint64_t sub_22F09B060(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  int v20;
  char *v21[2];
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  llvm *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD v33[4];
  _QWORD v34[6];
  _QWORD v35[3];
  _QWORD *v36[2];
  BOOL v37;
  _QWORD v38[4];
  _DWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  _QWORD v43[9];

  v43[8] = *MEMORY[0x24BDAC8D0];
  v38[0] = &off_24FAC6870;
  v10 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v38, (uint64_t)&v41);
  v38[0] = &off_24FAC6870;
  v40 = a5;
  v41 = v43;
  v42 = xmmword_22F44E300;
  v17 = a1;
  v18 = (llvm::raw_ostream *)v38;
  v19 = 0;
  v20 = -1;
  v21[0] = (char *)&v22;
  v21[1] = (char *)0xA00000000;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = v33;
  v33[0] = 0;
  v33[1] = 0;
  v33[2] = v34;
  v33[3] = 0x400000000;
  v34[4] = v35;
  v34[5] = 0;
  v35[0] = 0;
  v35[1] = 1;
  v36[0] = 0;
  v36[1] = 0;
  v35[2] = v36;
  v37 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  if (v38[3] - (_QWORD)v39 > 3uLL)
    *v39++ = 945766207;
  else
    llvm::raw_ostream::write(v10, "??_8");
  sub_22F09CFFC((uint64_t)&v17, a2, 0);
  v11 = v18;
  v12 = (_WORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v12 > 1uLL)
  {
    *v12 = 16951;
    *((_QWORD *)v11 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "7B");
  }
  if (a4)
  {
    v13 = 8 * a4;
    do
    {
      v14 = *a3++;
      sub_22F09CFFC((uint64_t)&v17, v14, 0);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v15 + 1;
    *v15 = 64;
  }
  sub_22F258024(v36[0]);
  sub_22E3B4EF4((uint64_t)v33);
  llvm::deallocate_buffer(v29, (void *)(24 * v31));
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  sub_22E3B9848(v21);
  return sub_22F09CD88((uint64_t)v38);
}

uint64_t sub_22F09B2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  int v17;
  char *v18[2];
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD v30[4];
  _QWORD v31[6];
  _QWORD v32[3];
  _QWORD *v33[2];
  BOOL v34;
  _QWORD v35[4];
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v40[8] = *MEMORY[0x24BDAC8D0];
  v35[0] = &off_24FAC6870;
  v7 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v35, (uint64_t)&v38);
  v35[0] = &off_24FAC6870;
  v37 = a4;
  v38 = v40;
  v39 = xmmword_22F44E300;
  v14 = a1;
  v15 = (llvm::raw_ostream *)v35;
  v16 = 0;
  v17 = -1;
  v18[0] = (char *)&v19;
  v18[1] = (char *)0xA00000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v30[2] = v31;
  v30[3] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0;
  v32[0] = 0;
  v32[1] = 1;
  v33[0] = 0;
  v33[1] = 0;
  v32[2] = v33;
  v34 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v8 = (_DWORD *)v36;
  if ((unint64_t)(v35[3] - v36) > 4)
  {
    *(_BYTE *)(v36 + 4) = 83;
    *v8 = 1398023231;
    v36 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v7, "?$TSS");
  }
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
  {
    llvm::raw_ostream::write(v9);
  }
  else
  {
    *((_QWORD *)v9 + 4) = v10 + 1;
    *v10 = 64;
  }
  sub_22F09F810((uint64_t)&v14, a2);
  v11 = v15;
  v12 = (_DWORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 1095251008;
    *((_QWORD *)v11 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v15, "@4HA");
  }
  sub_22F258024(v33[0]);
  sub_22E3B4EF4((uint64_t)v30);
  llvm::deallocate_buffer(v26, (void *)(24 * v28));
  llvm::deallocate_buffer(v23, (void *)(16 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  sub_22E3B9848(v18);
  return sub_22F09CD88((uint64_t)v35);
}

uint64_t sub_22F09B544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _QWORD v11[3];
  int v12;
  char *v13[2];
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD v26[6];
  _QWORD v27[3];
  _QWORD *v28[2];
  BOOL v29;
  _QWORD v30[4];
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v30[0] = &off_24FAC6870;
  v8 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v30, (uint64_t)&v33);
  v30[0] = &off_24FAC6870;
  v32 = a4;
  v33 = v35;
  v34 = xmmword_22F44E300;
  v11[0] = a1;
  v11[1] = v30;
  v11[2] = 0;
  v12 = -1;
  v13[0] = (char *)&v14;
  v13[1] = (char *)0xA00000000;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  v25[2] = v26;
  v25[3] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0;
  v27[0] = 0;
  v27[1] = 1;
  v28[0] = 0;
  v28[1] = 0;
  v27[2] = v28;
  v29 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v9 = v31;
  if ((unint64_t)v31 >= v30[3])
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    ++v31;
    *v9 = 63;
  }
  sub_22F0A9C44(v11, a2, a3);
  sub_22F258024(v28[0]);
  sub_22E3B4EF4((uint64_t)v25);
  llvm::deallocate_buffer(v21, (void *)(24 * v23));
  llvm::deallocate_buffer(v18, (void *)(16 * v20));
  llvm::deallocate_buffer(v15, (void *)(16 * v17));
  sub_22E3B9848(v13);
  return sub_22F09CD88((uint64_t)v30);
}

uint64_t sub_22F09B720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  int v15;
  char *v16[2];
  uint64_t v17;
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  llvm *v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD v28[4];
  _QWORD v29[6];
  _QWORD v30[3];
  _QWORD *v31[2];
  BOOL v32;
  _QWORD v33[4];
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v33[0] = &off_24FAC6870;
  v8 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v33, (uint64_t)&v36);
  v33[0] = &off_24FAC6870;
  v35 = a4;
  v36 = v38;
  v37 = xmmword_22F44E300;
  v12 = a1;
  v13 = (llvm::raw_ostream *)v33;
  v14 = 0;
  v15 = -1;
  v16[0] = (char *)&v17;
  v16[1] = (char *)0xA00000000;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v28;
  v28[0] = 0;
  v28[1] = 0;
  v28[2] = v29;
  v28[3] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0;
  v30[0] = 0;
  v30[1] = 1;
  v31[0] = 0;
  v31[1] = 0;
  v30[2] = v31;
  v32 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  if (v33[3] - (_QWORD)v34 > 3uLL)
    *v34++ = 1264533311;
  else
    llvm::raw_ostream::write(v8, "??_K");
  sub_22F09CFFC((uint64_t)&v12, a2, 0);
  v9 = v13;
  v10 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 17188;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v13, "$C");
  }
  sub_22F09CFFC((uint64_t)&v12, a3, 0);
  sub_22F258024(v31[0]);
  sub_22E3B4EF4((uint64_t)v28);
  llvm::deallocate_buffer(v24, (void *)(24 * v26));
  llvm::deallocate_buffer(v21, (void *)(16 * v23));
  llvm::deallocate_buffer(v18, (void *)(16 * v20));
  sub_22E3B9848(v16);
  return sub_22F09CD88((uint64_t)v33);
}

uint64_t sub_22F09B95C(llvm::APInt *a1, unint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v13;
  _WORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  llvm::APInt *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  int v22;
  char *v23[2];
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD v35[4];
  _QWORD v36[6];
  _QWORD v37[3];
  _QWORD *v38[2];
  BOOL v39;
  _QWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  _QWORD v45[9];

  v45[8] = *MEMORY[0x24BDAC8D0];
  v40[0] = &off_24FAC6870;
  v13 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v40, (uint64_t)&v43);
  v40[0] = &off_24FAC6870;
  v42 = a7;
  v43 = v45;
  v44 = xmmword_22F44E300;
  v19 = a1;
  v20 = (llvm::raw_ostream *)v40;
  v21 = 0;
  v22 = -1;
  v23[0] = (char *)&v24;
  v23[1] = (char *)0xA00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  v35[2] = v36;
  v35[3] = 0x400000000;
  v36[4] = v37;
  v36[5] = 0;
  v37[0] = 0;
  v37[1] = 1;
  v38[0] = 0;
  v38[1] = 0;
  v37[2] = v38;
  v39 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  v14 = (_WORD *)v41;
  if ((unint64_t)(v40[3] - v41) > 2)
  {
    *(_BYTE *)(v41 + 2) = 73;
    *v14 = 21599;
    v41 += 3;
    if (!a3)
      goto LABEL_6;
  }
  else
  {
    llvm::raw_ostream::write(v13, "_TI");
    if (!a3)
      goto LABEL_6;
  }
  v15 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v15 + 1;
    *v15 = 67;
  }
LABEL_6:
  if (a4)
  {
    v16 = (_BYTE *)*((_QWORD *)v20 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v20 + 3))
    {
      llvm::raw_ostream::write(v20);
      if (!a5)
        goto LABEL_15;
      goto LABEL_12;
    }
    *((_QWORD *)v20 + 4) = v16 + 1;
    *v16 = 86;
  }
  if (!a5)
    goto LABEL_15;
LABEL_12:
  v17 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v17 + 1;
    *v17 = 85;
  }
LABEL_15:
  llvm::raw_ostream::operator<<();
  sub_22F0A1E3C(&v19, a2, 0, 3);
  sub_22F258024(v38[0]);
  sub_22E3B4EF4((uint64_t)v35);
  llvm::deallocate_buffer(v31, (void *)(24 * v33));
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  sub_22E3B9848(v23);
  return sub_22F09CD88((uint64_t)v40);
}

uint64_t sub_22F09BC0C(llvm::APInt *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  llvm::APInt *v9[3];
  int v10;
  char *v11[2];
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  unsigned int v15;
  llvm *v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD v23[4];
  _QWORD v24[6];
  _QWORD v25[3];
  _QWORD *v26[2];
  BOOL v27;
  _QWORD v28[4];
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x24BDAC8D0];
  v28[0] = &off_24FAC6870;
  v7 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v28, (uint64_t)&v31);
  v28[0] = &off_24FAC6870;
  v30 = a4;
  v31 = v33;
  v32 = xmmword_22F44E300;
  v9[0] = a1;
  v9[1] = (llvm::APInt *)v28;
  v9[2] = 0;
  v10 = -1;
  v11[0] = (char *)&v12;
  v11[1] = (char *)0xA00000000;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = v23;
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = v24;
  v23[3] = 0x400000000;
  v24[4] = v25;
  v24[5] = 0;
  v25[0] = 0;
  v25[1] = 1;
  v26[0] = 0;
  v26[1] = 0;
  v25[2] = v26;
  v27 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 1) + 15088) - 24)) == 64;
  if (v28[3] - (_QWORD)v29 > 3uLL)
    *v29++ = 1096041311;
  else
    llvm::raw_ostream::write(v7, "_CTA");
  llvm::raw_ostream::operator<<();
  sub_22F0A1E3C(v9, a2, 0, 3);
  sub_22F258024(v26[0]);
  sub_22E3B4EF4((uint64_t)v23);
  llvm::deallocate_buffer(v19, (void *)(24 * v21));
  llvm::deallocate_buffer(v16, (void *)(16 * v18));
  llvm::deallocate_buffer(v13, (void *)(16 * v15));
  sub_22E3B9848(v11);
  return sub_22F09CD88((uint64_t)v28);
}

char **sub_22F09BE0C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6, int a7, int a8, llvm::raw_ostream *a9)
{
  uint64_t v13;
  int v14;
  const char *v15;
  _BYTE v19[72];
  void *v20;
  __int128 v21;
  _BYTE v22[64];
  _QWORD v23[9];
  void **v24;
  _BYTE *v25;
  __int128 v26;
  _BYTE v27[64];
  void *v28;
  __int128 v29;
  _BYTE v30[64];
  _QWORD *v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  int v34;
  char *v35[2];
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  unsigned int v39;
  llvm *v40;
  uint64_t v41;
  unsigned int v42;
  llvm *v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD v47[4];
  _QWORD v48[6];
  _QWORD v49[3];
  _QWORD *v50[2];
  BOOL v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v31 = a1;
  v32 = a9;
  v33 = 0;
  v34 = -1;
  v35[0] = (char *)&v36;
  v35[1] = (char *)0xA00000000;
  v38 = 0;
  v37 = 0;
  v39 = 0;
  v41 = 0;
  v40 = 0;
  v42 = 0;
  v44 = 0;
  v43 = 0;
  v45 = 0;
  v46 = v47;
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = v48;
  v47[3] = 0x400000000;
  v48[4] = v49;
  v48[5] = 0;
  v49[0] = 0;
  v49[1] = 1;
  v50[1] = 0;
  v50[0] = 0;
  v49[2] = v50;
  v51 = *(_BYTE *)(*(_QWORD *)(v31[1] + 15088) + *(_QWORD *)(**(_QWORD **)(v31[1] + 15088) - 24)) == 64;
  v13 = *((_QWORD *)a9 + 4);
  if ((unint64_t)(*((_QWORD *)a9 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 84;
    *(_WORD *)v13 = 17247;
    *((_QWORD *)a9 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a9, "_CT");
  }
  v28 = v30;
  v29 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)&v20, (uint64_t)&v28);
  v23[0] = &off_24FAC6870;
  sub_22F242C48((uint64_t)v23, (uint64_t)&v25);
  v23[0] = &off_24FAC6870;
  v24 = &v20;
  v25 = v27;
  v26 = xmmword_22F44E300;
  (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*a1 + 112))(a1, a2, v23);
  sub_22F09CD88((uint64_t)v23);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
  llvm::raw_ostream::write(v32, (const char *)v28);
  v14 = *(_DWORD *)(*(_QWORD *)(a1[1] + 2000) + 192);
  v20 = v22;
  v21 = xmmword_22F44E300;
  if (a3)
  {
    v15 = v22;
    if ((v14 - 191400000) <= 0xFFEAA33F)
    {
      sub_22F242C48((uint64_t)v19, (uint64_t)&v20);
      v23[0] = &off_24FAC6870;
      sub_22F242C48((uint64_t)v23, (uint64_t)&v25);
      v23[0] = &off_24FAC6870;
      v24 = (void **)v19;
      v25 = v27;
      v26 = xmmword_22F44E300;
      (*(void (**)(_QWORD *, unint64_t, _QWORD, _QWORD *))(*a1 + 72))(a1, a3 & 0xFFFFFFFFFFFFFFF8 | a4, 0, v23);
      sub_22F09CD88((uint64_t)v23);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v19);
      v15 = (const char *)v20;
    }
  }
  else
  {
    v15 = v22;
  }
  llvm::raw_ostream::write(v32, v15);
  llvm::raw_ostream::operator<<();
  if (a7 != -1)
  {
    llvm::raw_ostream::operator<<();
    llvm::raw_ostream::operator<<();
    goto LABEL_11;
  }
  if (a6)
LABEL_11:
    llvm::raw_ostream::operator<<();
  if (v20 != v22)
    free(v20);
  if (v28 != v30)
    free(v28);
  sub_22F258024(v50[0]);
  sub_22E3B4EF4((uint64_t)v47);
  llvm::deallocate_buffer(v43, (void *)(24 * v45));
  llvm::deallocate_buffer(v40, (void *)(16 * v42));
  llvm::deallocate_buffer(v37, (void *)(16 * v39));
  return sub_22E3B9848(v35);
}

uint64_t sub_22F09C1B8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  llvm::raw_ostream *v14;
  _DWORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  int v22;
  char *v23[2];
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  uint64_t v29;
  unsigned int v30;
  llvm *v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD v35[4];
  _QWORD v36[6];
  _QWORD v37[3];
  _QWORD *v38[2];
  BOOL v39;
  _QWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  _QWORD v45[9];

  v45[8] = *MEMORY[0x24BDAC8D0];
  v40[0] = &off_24FAC6870;
  v14 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v40, (uint64_t)&v43);
  v40[0] = &off_24FAC6870;
  v42 = a7;
  v43 = v45;
  v44 = xmmword_22F44E300;
  v19 = a1;
  v20 = (llvm::raw_ostream *)v40;
  v21 = 0;
  v22 = -1;
  v23[0] = (char *)&v24;
  v23[1] = (char *)0xA00000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  v35[2] = v36;
  v35[3] = 0x400000000;
  v36[4] = v37;
  v36[5] = 0;
  v37[0] = 0;
  v37[1] = 1;
  v38[0] = 0;
  v38[1] = 0;
  v37[2] = v38;
  v39 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v15 = (_DWORD *)v41;
  if ((unint64_t)(v40[3] - v41) > 4)
  {
    *(_BYTE *)(v41 + 4) = 49;
    *v15 = 1381973823;
    v41 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v14, "??_R1");
  }
  sub_22F0A8DC0((uint64_t)&v19, a3);
  sub_22F0A8DC0((uint64_t)&v19, a4);
  sub_22F0A8DC0((uint64_t)&v19, a5);
  sub_22F0A8DC0((uint64_t)&v19, a6);
  sub_22F09CFFC((uint64_t)&v19, a2, 0);
  v16 = v20;
  v17 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v17)
  {
    llvm::raw_ostream::write(v20, "8");
  }
  else
  {
    *v17 = 56;
    ++*((_QWORD *)v16 + 4);
  }
  sub_22F258024(v38[0]);
  sub_22E3B4EF4((uint64_t)v35);
  llvm::deallocate_buffer(v31, (void *)(24 * v33));
  llvm::deallocate_buffer(v28, (void *)(16 * v30));
  llvm::deallocate_buffer(v25, (void *)(16 * v27));
  sub_22E3B9848(v23);
  return sub_22F09CD88((uint64_t)v40);
}

uint64_t sub_22F09C42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  char *v15[2];
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD v27[4];
  _QWORD v28[6];
  _QWORD v29[3];
  _QWORD *v30[2];
  BOOL v31;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v32[0] = &off_24FAC6870;
  v6 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v32, (uint64_t)&v35);
  v32[0] = &off_24FAC6870;
  v34 = a3;
  v35 = v37;
  v36 = xmmword_22F44E300;
  v11 = a1;
  v12 = (llvm::raw_ostream *)v32;
  v13 = 0;
  v14 = -1;
  v15[0] = (char *)&v16;
  v15[1] = (char *)0xA00000000;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v27;
  v27[0] = 0;
  v27[1] = 0;
  v27[2] = v28;
  v27[3] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0;
  v29[0] = 0;
  v29[1] = 1;
  v30[0] = 0;
  v30[1] = 0;
  v29[2] = v30;
  v31 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v7 = (_DWORD *)v33;
  if ((unint64_t)(v32[3] - v33) > 4)
  {
    *(_BYTE *)(v33 + 4) = 50;
    *v7 = 1381973823;
    v33 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v6, "??_R2");
  }
  sub_22F09CFFC((uint64_t)&v11, a2, 0);
  v8 = v12;
  v9 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v9)
  {
    llvm::raw_ostream::write(v12, "8");
  }
  else
  {
    *v9 = 56;
    ++*((_QWORD *)v8 + 4);
  }
  sub_22F258024(v30[0]);
  sub_22E3B4EF4((uint64_t)v27);
  llvm::deallocate_buffer(v23, (void *)(24 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  sub_22E3B9848(v15);
  return sub_22F09CD88((uint64_t)v32);
}

uint64_t sub_22F09C650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  char *v15[2];
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  llvm *v20;
  uint64_t v21;
  unsigned int v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD v27[4];
  _QWORD v28[6];
  _QWORD v29[3];
  _QWORD *v30[2];
  BOOL v31;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v32[0] = &off_24FAC6870;
  v6 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)v32, (uint64_t)&v35);
  v32[0] = &off_24FAC6870;
  v34 = a3;
  v35 = v37;
  v36 = xmmword_22F44E300;
  v11 = a1;
  v12 = (llvm::raw_ostream *)v32;
  v13 = 0;
  v14 = -1;
  v15[0] = (char *)&v16;
  v15[1] = (char *)0xA00000000;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v27;
  v27[0] = 0;
  v27[1] = 0;
  v27[2] = v28;
  v27[3] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0;
  v29[0] = 0;
  v29[1] = 1;
  v30[0] = 0;
  v30[1] = 0;
  v29[2] = v30;
  v31 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                 + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)) == 64;
  v7 = (_DWORD *)v33;
  if ((unint64_t)(v32[3] - v33) > 4)
  {
    *(_BYTE *)(v33 + 4) = 51;
    *v7 = 1381973823;
    v33 += 5;
  }
  else
  {
    llvm::raw_ostream::write(v6, "??_R3");
  }
  sub_22F09CFFC((uint64_t)&v11, a2, 0);
  v8 = v12;
  v9 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v9)
  {
    llvm::raw_ostream::write(v12, "8");
  }
  else
  {
    *v9 = 56;
    ++*((_QWORD *)v8 + 4);
  }
  sub_22F258024(v30[0]);
  sub_22E3B4EF4((uint64_t)v27);
  llvm::deallocate_buffer(v23, (void *)(24 * v25));
  llvm::deallocate_buffer(v20, (void *)(16 * v22));
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  sub_22E3B9848(v15);
  return sub_22F09CD88((uint64_t)v32);
}

void sub_22F09C874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5)
{
  BOOL v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _BYTE v18[72];
  char *v19;
  unint64_t v20[2];
  _QWORD v21[9];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v19 = (char *)v21;
  *(_OWORD *)v20 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v18, (uint64_t)&v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 232))(a1, a2, a3, a4, v18);
  if (v20[0] >= 3 && (*(_WORD *)v19 == 16191 ? (v10 = v19[2] == 64) : (v10 = 0), v10))
  {
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, v19);
    v17 = *((_QWORD *)v16 + 4);
    if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) <= 5)
    {
      v14 = "??_R4@";
      goto LABEL_16;
    }
    *(_WORD *)(v17 + 4) = 16436;
    *(_DWORD *)v17 = 1381973823;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    v11 = *((_QWORD *)a5 + 4);
    if ((unint64_t)(*((_QWORD *)a5 + 3) - v11) > 4)
    {
      *(_BYTE *)(v11 + 4) = 52;
      *(_DWORD *)v11 = 1381973823;
      v12 = (void *)(*((_QWORD *)a5 + 4) + 5);
      *((_QWORD *)a5 + 4) = v12;
    }
    else
    {
      a5 = (llvm::raw_ostream *)llvm::raw_ostream::write(a5, "??_R4");
      v12 = (void *)*((_QWORD *)a5 + 4);
    }
    v13 = 4;
    if (v20[0] < 4)
      v13 = v20[0];
    v14 = &v19[v13];
    v15 = v20[0] - v13;
    if (v20[0] - v13 > *((_QWORD *)a5 + 3) - (_QWORD)v12)
    {
      v16 = a5;
LABEL_16:
      llvm::raw_ostream::write(v16, v14);
      goto LABEL_17;
    }
    if (v20[0] >= 5)
    {
      memcpy(v12, v14, v20[0] - v13);
      *((_QWORD *)a5 + 4) += v15;
    }
  }
LABEL_17:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v18);
  if (v19 != (char *)v21)
    free(v19);
}

unint64_t sub_22F09CA5C(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  result = sub_22F09CBA4(a1);
  if (result)
    return result;
  while (1)
  {
    if (v1)
    {
      if ((*(_DWORD *)(v1 + 28) & 0x7F) == 1)
      {
        v3 = *(_QWORD *)(v1 + 120);
        if (v3)
        {
          if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x40)
            break;
        }
      }
    }
    v4 = *(_QWORD *)(v1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    v6 = *(_WORD *)(v5 + 8) & 0x7F;
    if (v6 - 70 >= 2 && v6 != 2)
      return sub_22EFCBB30(v5);
    if (v6 != 16)
    {
      if (v6 > 0x18)
        goto LABEL_19;
      if (((1 << v6) & 0x1064) != 0)
      {
        v8 = -40;
        goto LABEL_26;
      }
      if (v6 != 24)
      {
LABEL_19:
        if (v6 == 70)
        {
          v8 = -64;
        }
        else if (v6 == 71)
        {
          v8 = -56;
        }
        else if (v6 - 52 < 6)
        {
          v8 = -72;
        }
        else if (v6 - 33 >= 5)
        {
          v8 = -48;
        }
        else
        {
          v8 = -64;
        }
        goto LABEL_26;
      }
    }
    v8 = -48;
LABEL_26:
    v1 = v5 + v8;
    result = sub_22F09CBA4(v5 + v8);
    if (result)
      return result;
  }
  v9 = *(_QWORD *)(v3 + 16);
  result = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 4) != 0)
    return *(_QWORD *)result;
  return result;
}

unint64_t sub_22F09CBA4(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v3 = *(_QWORD *)(a1 + 128);
    if (!v3 || ((*(unsigned __int16 *)(v3 + 8) | (*(unsigned __int8 *)(v3 + 10) << 16)) & 0x100000) == 0)
      return 0;
    result = sub_22F3B1CF4(a1);
    if (result)
    {
      if ((*(_DWORD *)(result + 28) & 0x7F) != 0x40)
        return 0;
      v4 = *(_QWORD *)(result + 16);
      result = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        return *(_QWORD *)result;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F09CC20(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  unint64_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *result;
  int v13;
  int v15;
  void *v17;
  int v18;

  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(llvm::raw_ostream **)(a1 + 8);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (a5 <= *((_QWORD *)v10 + 3) - (_QWORD)v11)
  {
    if (a5)
    {
      memcpy(v11, a4, a5);
      *((_QWORD *)v10 + 4) += a5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, a4);
  }
  result = sub_22F09CFFC(a1, a2, a3);
  v13 = *(_DWORD *)(v9 + 28);
  if ((v13 & 0x7Eu) - 58 < 0xFFFFFFFA || v9 == 0)
  {
    v15 = v13 & 0x7F;
    if ((v15 - 67) < 0xFFFFFFF9 || v9 == 0)
    {
      if (v15 == 69)
      {
        result = *(llvm::raw_ostream **)(a1 + 8);
        v17 = (void *)*((_QWORD *)result + 4);
        if (*((_QWORD *)result + 3) - (_QWORD)v17 > 0xCuLL)
        {
          qmemcpy(v17, "3U__s_GUID@@B", 13);
          *((_QWORD *)result + 4) += 13;
        }
        else
        {
          return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "3U__s_GUID@@B");
        }
      }
    }
    else
    {
      return sub_22F09D500((llvm::APInt **)a1, v9);
    }
  }
  else
  {
    v18 = sub_22F096440(*(uint64_t **)a1, v9);
    return sub_22F09D070(a1, a2, a3, v18);
  }
  return result;
}

uint64_t sub_22F09CD88(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  size_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  void *v16;
  char v18[32];
  _BYTE v19[152];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24FAC6870;
  v2 = *(unsigned __int8 ***)(a1 + 64);
  v3 = *v2;
  v4 = (size_t)v2[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v5 == 1;
    v7 = v5 == 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v4 - v7 > 0xFFF)
  {
    llvm::MD5::MD5((llvm::MD5 *)v19);
    llvm::MD5::update();
    llvm::MD5::final();
    llvm::MD5::stringifyResult();
    if (v6)
    {
      v10 = *(llvm::raw_ostream **)(a1 + 72);
      v11 = (_BYTE *)*((_QWORD *)v10 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
      {
        llvm::raw_ostream::write(v10);
      }
      else
      {
        *((_QWORD *)v10 + 4) = v11 + 1;
        *v11 = 1;
      }
    }
    v12 = *(llvm::raw_ostream **)(a1 + 72);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
    {
      *(_BYTE *)(v13 + 2) = 64;
      *(_WORD *)v13 = 16191;
      *((_QWORD *)v12 + 4) += 3;
    }
    else
    {
      v12 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, "??@");
    }
    v14 = (llvm::raw_ostream *)llvm::raw_ostream::write(v12, v18);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 64;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(void **)(v8 + 32);
    if (v4 <= *(_QWORD *)(v8 + 24) - (_QWORD)v9)
    {
      if (v4)
      {
        memcpy(v9, v3, v4);
        *(_QWORD *)(v8 + 32) += v4;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 72), (const char *)v3);
    }
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 104))
    free(v16);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)a1);
  return a1;
}

void sub_22F09CF8C(uint64_t a1)
{
  sub_22F09CD88(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F09CFB0(unint64_t a1)
{
  unint64_t v1;
  unint64_t v3;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x1D)
    goto LABEL_9;
  v1 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 144) & 6) == 4 && v1 != 0)
  {
    v3 = *(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      a1 = v3;
LABEL_9:
      a1 = *(_QWORD *)(a1 + 48);
    }
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1);
}

llvm::raw_ostream *sub_22F09CFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *result;
  _BYTE *v6;

  sub_22F09D9C0(a1, a2, a3);
  sub_22F09F810(a1, a2);
  result = *(llvm::raw_ostream **)(a1 + 8);
  v6 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v6 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v6 + 1;
  *v6 = 64;
  return result;
}

llvm::raw_ostream *sub_22F09D070(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  llvm::raw_ostream *v9;
  _DWORD *v10;
  _QWORD *v11;
  char *v12;
  char v13;
  llvm::raw_ostream *result;
  _BYTE *v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 112);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (a4)
  {
    if (sub_22EFB9440(v6) && sub_22EA0E084(v6))
    {
      v9 = *(llvm::raw_ostream **)(a1 + 8);
      v10 = (_DWORD *)*((_QWORD *)v9 + 4);
      if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 3uLL)
      {
        *v10 = 810165284;
        *((_QWORD *)v9 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v9, "$$J0");
      }
    }
    if ((*(_DWORD *)(v6 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
    {
      v11 = *(_QWORD **)(a1 + 8);
      v12 = (char *)v11[4];
      if ((unint64_t)v12 < v11[3])
      {
        v11[4] = v12 + 1;
        v13 = 89;
LABEL_14:
        *v12 = v13;
        return sub_22F0A709C(a1, v7, v6, 0, 0);
      }
LABEL_20:
      llvm::raw_ostream::write((llvm::raw_ostream *)v11);
      return sub_22F0A709C(a1, v7, v6, 0, 0);
    }
    v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6);
    v17 = (*(_BYTE *)(v16 + 82) & 0xC) != 0 || sub_22EFD7260(v16) != 0;
    if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x39
      && (*(_QWORD *)(a1 + 16) == v6 || sub_22F09CFB0(v6) == *(_QWORD *)(a1 + 16))
      && *(_DWORD *)(a1 + 24) == 1)
    {
      v17 = 0;
    }
    v18 = (*(_DWORD *)(v6 + 28) >> 13) & 3;
    if (v18)
    {
      if (v18 != 1)
      {
        if (v18 != 2)
          return sub_22F0A709C(a1, v7, v6, 0, 0);
        if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 80) & 0xE000) != 0x4000)
        {
          if ((*(_QWORD *)(v6 + 40) & 7) == 6)
          {
            v11 = *(_QWORD **)(a1 + 8);
            v19 = v11 + 4;
            v12 = (char *)v11[4];
            v20 = v11[3];
            v21 = (unint64_t)v12 < v20;
            if ((*(_DWORD *)(*(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
            {
              if ((unint64_t)v12 >= v20)
                goto LABEL_20;
LABEL_34:
              *v19 = v12 + 1;
              v13 = 67;
              goto LABEL_14;
            }
          }
          else
          {
            v11 = *(_QWORD **)(a1 + 8);
            v19 = v11 + 4;
            v12 = (char *)v11[4];
            v21 = (unint64_t)v12 < v11[3];
          }
          if (v17)
          {
            if (v21)
            {
              *v19 = v12 + 1;
              v13 = 69;
              goto LABEL_14;
            }
          }
          else if (v21)
          {
            *v19 = v12 + 1;
            v13 = 65;
            goto LABEL_14;
          }
          goto LABEL_20;
        }
        v11 = *(_QWORD **)(a1 + 8);
        v19 = v11 + 4;
        v12 = (char *)v11[4];
        if ((unint64_t)v12 >= v11[3])
          goto LABEL_20;
        goto LABEL_34;
      }
      if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 80) & 0xE000) != 0x4000)
      {
        if ((*(_QWORD *)(v6 + 40) & 7) == 6)
        {
          v11 = *(_QWORD **)(a1 + 8);
          v25 = v11 + 4;
          v12 = (char *)v11[4];
          v26 = v11[3];
          v27 = (unint64_t)v12 < v26;
          if ((*(_DWORD *)(*(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
          {
            if ((unint64_t)v12 >= v26)
              goto LABEL_20;
LABEL_45:
            *v25 = v12 + 1;
            v13 = 75;
            goto LABEL_14;
          }
        }
        else
        {
          v11 = *(_QWORD **)(a1 + 8);
          v25 = v11 + 4;
          v12 = (char *)v11[4];
          v27 = (unint64_t)v12 < v11[3];
        }
        if (v17)
        {
          if (v27)
          {
            *v25 = v12 + 1;
            v13 = 77;
            goto LABEL_14;
          }
        }
        else if (v27)
        {
          *v25 = v12 + 1;
          v13 = 73;
          goto LABEL_14;
        }
        goto LABEL_20;
      }
      v11 = *(_QWORD **)(a1 + 8);
      v25 = v11 + 4;
      v12 = (char *)v11[4];
      if ((unint64_t)v12 >= v11[3])
        goto LABEL_20;
      goto LABEL_45;
    }
    if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 80) & 0xE000) != 0x4000)
    {
      if ((*(_QWORD *)(v6 + 40) & 7) == 6)
      {
        v11 = *(_QWORD **)(a1 + 8);
        v22 = v11 + 4;
        v12 = (char *)v11[4];
        v23 = v11[3];
        v24 = (unint64_t)v12 < v23;
        if ((*(_DWORD *)(*(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
        {
          if ((unint64_t)v12 >= v23)
            goto LABEL_20;
LABEL_40:
          *v22 = v12 + 1;
          v13 = 83;
          goto LABEL_14;
        }
      }
      else
      {
        v11 = *(_QWORD **)(a1 + 8);
        v22 = v11 + 4;
        v12 = (char *)v11[4];
        v24 = (unint64_t)v12 < v11[3];
      }
      if (v17)
      {
        if (v24)
        {
          *v22 = v12 + 1;
          v13 = 85;
          goto LABEL_14;
        }
      }
      else if (v24)
      {
        *v22 = v12 + 1;
        v13 = 81;
        goto LABEL_14;
      }
      goto LABEL_20;
    }
    v11 = *(_QWORD **)(a1 + 8);
    v22 = v11 + 4;
    v12 = (char *)v11[4];
    if ((unint64_t)v12 >= v11[3])
      goto LABEL_20;
    goto LABEL_40;
  }
  result = *(llvm::raw_ostream **)(a1 + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v15 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v15 + 1;
  *v15 = 57;
  return result;
}

llvm::raw_ostream *sub_22F09D500(llvm::APInt **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  llvm::raw_ostream *v8;
  char *v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  llvm::raw_ostream *result;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v4 == 64)
    goto LABEL_9;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3)
  {
LABEL_9:
    v11 = *(_BYTE *)(a2 + 96);
    v12 = v11 & 7;
    if (v12 != 2)
    {
      v13 = v11 & 0x18;
      if (v12 || v13 != 16)
        goto LABEL_20;
    }
    if (v4 == 64 || v4 == 62)
      goto LABEL_71;
    v15 = *(_QWORD *)(a2 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)(v16 + 8);
    v17 = *(_WORD *)(sub_22EFCBB30(v16) + 8) & 0x7F;
    if (v17 == 16 || v17 == 83)
      goto LABEL_20;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      goto LABEL_71;
    v45 = *(_QWORD *)(a2 + 16);
    v46 = v45 & 0xFFFFFFFFFFFFFFF8;
    if ((v45 & 4) != 0)
      v46 = *(_QWORD *)v46;
    if ((*(_WORD *)(v46 + 8) & 0x7Eu) - 34 > 3)
    {
LABEL_71:
      v8 = a1[1];
      v9 = (char *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        v10 = 52;
        goto LABEL_22;
      }
    }
    else
    {
LABEL_20:
      v8 = a1[1];
      v9 = (char *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        v10 = 51;
        goto LABEL_22;
      }
    }
LABEL_23:
    llvm::raw_ostream::write(v8);
    goto LABEL_24;
  }
  v7 = (*(_DWORD *)(a2 + 28) >> 13) & 3;
  if (!v7)
  {
    v8 = a1[1];
    v9 = (char *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      v10 = 50;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  if (v7 != 1)
  {
    v8 = a1[1];
    v9 = (char *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      v10 = 48;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  v8 = a1[1];
  v9 = (char *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    goto LABEL_23;
  *((_QWORD *)v8 + 4) = v9 + 1;
  v10 = 49;
LABEL_22:
  *v9 = v10;
LABEL_24:
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16);
    if (v21 != 39 && v21 != 31)
    {
      v23 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v19);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)(v23 + 32);
        v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v26 & 8) != 0)
        {
          v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          LODWORD(v27) = 0;
          v28 = 0;
        }
        sub_22F0A9BA4((uint64_t)a1, v27 | v28 | (v26 | v25) & 7);
        sub_22F0A1E3C(a1, *(_QWORD *)(v24 + 32), 0, 1);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 <= 3)
        {
          result = a1[1];
          v30 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v30 >= *((_QWORD *)result + 3))
            return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
          *((_QWORD *)result + 4) = v30 + 1;
          *v30 = 65;
          return result;
        }
      }
      else
      {
        sub_22F0A1E3C(a1, v19, v18, 0);
      }
      v31 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v31 & 8) != 0)
      {
        v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        LOBYTE(v32) = 0;
        v33 = 0;
      }
      v34 = v31 | v19;
      return sub_22F0A7CF0(a1[1], (v32 | v33) | v34 & 7u, 0);
    }
  }
  sub_22F0A1E3C(a1, v19, v18, 0);
  v35 = sub_22F40989C(v19, *((_QWORD *)*a1 + 1));
  if ((v35 & 8) != 0)
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  }
  else
  {
    LOBYTE(v36) = 0;
    v37 = 0;
  }
  sub_22F0A94E0((uint64_t)a1, v36 | v37 | v35 & 7, 0);
  v38 = *v20;
  if (!*v20 || *(_BYTE *)(v38 + 16) != 31)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
    {
      v38 = sub_22F10CF48(*v20);
      if (v38)
        goto LABEL_54;
      v38 = *v20;
    }
    v47 = sub_22F10ACF8(v38);
    v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v48 & 8) != 0)
    {
      v33 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v32 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      LOBYTE(v32) = 0;
      v33 = 0;
    }
    v34 = v48 | v47;
    return sub_22F0A7CF0(a1[1], (v32 | v33) | v34 & 7u, 0);
  }
LABEL_54:
  v39 = *(_QWORD *)(v38 + 32);
  v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v40 & 8) != 0)
  {
    v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    LOBYTE(v41) = 0;
    v42 = 0;
  }
  sub_22F0A7CF0(a1[1], v41 | v42 | (v40 | v39) & 7, 1);
  v43 = sub_22F10C2A4(*(_QWORD *)(v38 + 40));
  if (v43)
  {
    if ((*(_DWORD *)(v43 + 28) & 0x7Fu) - 35 >= 3)
      v44 = 0;
    else
      v44 = v43;
  }
  else
  {
    v44 = 0;
  }
  return sub_22F09CFFC((uint64_t)a1, v44, 0);
}

void sub_22F09D9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  char *v21;
  size_t v22;
  void *v23;
  int v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  __int16 *v29;
  const char *v30;
  int v31;
  llvm::raw_ostream *v32;
  _DWORD *v33;
  unint64_t v34;
  char *v35;
  int v36;
  llvm::raw_ostream *v37;
  _DWORD *v38;
  _BYTE *v39;
  const void *v40;
  size_t v41;
  llvm::raw_ostream *v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v57;
  unsigned int *v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  _DWORD *v62;
  size_t v63;
  const char *v64;
  unsigned int v65;
  size_t v66;
  size_t v67;
  size_t v68;
  char *v69;
  size_t v70;
  llvm::raw_ostream *v71;
  const void *v72;
  unint64_t v73;
  __int16 v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int *v90;
  char *v91;
  BOOL v92;
  char **v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char **v101;
  size_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int j;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const void **v128;
  char *v129;
  char **v130;
  size_t v131;
  uint64_t v132;
  char *v133;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  BOOL v138;
  const void *v139;
  const void *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unint64_t v153;
  char *v154;
  char **v155;
  size_t v156;
  uint64_t v157;
  size_t v158;
  unint64_t v159;
  char *v160;
  char **v161;
  size_t v162;
  uint64_t v163;
  size_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const void **v169;
  uint64_t *v170;
  unint64_t v171;
  void *v172;
  __int128 v173;
  uint64_t v174;
  char *v175[2];
  uint64_t v176;
  llvm *v177;
  uint64_t v178;
  unsigned int v179;
  llvm *v180;
  uint64_t v181;
  unsigned int v182;
  llvm *v183;
  uint64_t v184;
  unsigned int v185;
  _QWORD *v186;
  _QWORD v187[4];
  _QWORD v188[6];
  _QWORD v189[3];
  _QWORD *v190[2];
  BOOL v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  char v195[51];
  char *v196;
  __int128 v197;
  _QWORD v198[10];

  v4 = a2;
  v5 = (_QWORD *)a1;
  v198[8] = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v8 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28);
  v9 = v8 & 0x7E;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0 && (v9 - 58) >= 0xFFFFFFFA)
  {
    v10 = *(_QWORD *)(v6 + 144) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v6 + 144) & 6) == 4 && v10 != 0)
    {
      v12 = *(_QWORD *)(v10 + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 24);
        goto LABEL_19;
      }
    }
  }
  else if (v6 && v9 == 36)
  {
    v13 = *(_QWORD *)(v6 + 168);
    for (i = *(_QWORD *)(v6 + 152); ; i = *(_QWORD *)(*(_QWORD *)v12 + 152))
    {
      v12 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) == 0 || !v12)
        break;
    }
    goto LABEL_19;
  }
  if (!v6 || (v8 & 0x7Fu) - 67 < 0xFFFFFFFE)
  {
LABEL_23:
    v19 = v7 & 7;
    if (v19 == 7)
    {
      v20 = *(_DWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if (v20 >= 3)
        v20 = 3;
      v19 = v20 | 8;
    }
    switch(v19)
    {
      case 0:
        if ((v7 & 7) == 0)
        {
          v28 = v7 & 0xFFFFFFFFFFFFFFF8;
          if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (!v6)
            {
LABEL_125:
              v35 = *(char **)(v28 + 16);
              goto LABEL_126;
            }
            if ((v9 - 52) <= 5)
            {
              if (sub_22E462B18(a2 & 0xFFFFFFFFFFFFFFF8))
              {
                if ((v4 & 7) != 1)
                  goto LABEL_125;
LABEL_117:
                v58 = *(unsigned int **)(v28 + 16);
                v59 = *v58;
                v172 = "__device_stub__";
                *((_QWORD *)&v173 + 1) = v58 + 4;
                v174 = v59;
                LOWORD(v175[0]) = 1283;
                llvm::Twine::str((llvm::Twine *)&v172);
                if (v197 >= 0)
                  v60 = (char *)&v196;
                else
                  v60 = v196;
                if (v197 >= 0)
                  v61 = HIBYTE(v197) & 0x7F;
                else
                  v61 = v197;
                sub_22F0A02E8((uint64_t)v5, v60, v61);
                if (SHIBYTE(v197) < 0)
                  operator delete(v196);
                return;
              }
              v8 = *(_DWORD *)(v6 + 28);
            }
            if ((v8 & 0x7F) != 0x1D)
              goto LABEL_125;
            v57 = sub_22E462B18(*(_QWORD *)(v6 + 48));
            if ((v4 & 7) != 1 || !v57)
              goto LABEL_125;
            goto LABEL_117;
          }
        }
        v36 = v8 & 0x7F;
        if (v6 && v36 == 16)
        {
          if (v7 < 8 || (v7 & 7) != 0)
          {
            v37 = *(llvm::raw_ostream **)(a1 + 8);
            v38 = (_DWORD *)*((_QWORD *)v37 + 4);
            if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 3uLL)
            {
              *v38 = 2016428351;
              v39 = (_BYTE *)(*((_QWORD *)v37 + 4) + 4);
              *((_QWORD *)v37 + 4) = v39;
            }
            else
            {
              v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "?A0x");
              v39 = (_BYTE *)*((_QWORD *)v37 + 4);
            }
            v40 = *(const void **)(*v5 + 224);
            v41 = *(_QWORD *)(*v5 + 232);
            if (v41 <= *((_QWORD *)v37 + 3) - (_QWORD)v39)
            {
              if (v41)
              {
                memcpy(v39, v40, v41);
                v39 = (_BYTE *)(*((_QWORD *)v37 + 4) + v41);
                *((_QWORD *)v37 + 4) = v39;
              }
            }
            else
            {
              v37 = (llvm::raw_ostream *)llvm::raw_ostream::write(v37, (const char *)v40);
              v39 = (_BYTE *)*((_QWORD *)v37 + 4);
            }
            if ((unint64_t)v39 >= *((_QWORD *)v37 + 3))
            {
              llvm::raw_ostream::write(v37);
              return;
            }
            *((_QWORD *)v37 + 4) = v39 + 1;
            goto LABEL_131;
          }
          goto LABEL_89;
        }
        if (!v6 || v36 != 61)
        {
          if (!v6 || (v36 - 67) < 0xFFFFFFF9)
          {
            if (v6 && v36 == 69)
            {
              v172 = &v174;
              v173 = xmmword_22F4A5A40;
              sub_22F242C48((uint64_t)&v196, (uint64_t)&v172);
              (*(void (**)(_QWORD, unint64_t, char **))(*(_QWORD *)*v5 + 136))(*v5, v6, &v196);
              sub_22F0A02E8((uint64_t)v5, (char *)v172, v173);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v196);
              goto LABEL_142;
            }
            if (v6 && v36 == 72)
            {
              v42 = *(llvm::raw_ostream **)(a1 + 8);
              v43 = (_DWORD *)*((_QWORD *)v42 + 4);
              if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 3uLL)
              {
                *v43 = 1314873151;
                *((_QWORD *)v42 + 4) += 4;
              }
              else
              {
                llvm::raw_ostream::write(v42, "?__N");
              }
              v44 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v44 + 8) & 0xF) != 0)
                v44 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v6 + 48));
              sub_22F0A0520((uint64_t)v5, v44 & 0xFFFFFFFFFFFFFFF0, v6 + 64, 0);
              return;
            }
LABEL_89:
            v45 = *(_QWORD *)(v6 + 120);
            if ((v45 & 4) == 0)
            {
              v46 = v45 & 0xFFFFFFFFFFFFFFF8;
              if (v46)
              {
                v47 = *(_QWORD *)(v46 + 40);
                if ((v47 & 7) != 0)
                  v34 = 0;
                else
                  v34 = v47 & 0xFFFFFFFFFFFFFFF8;
LABEL_60:
                v35 = *(char **)(v34 + 16);
LABEL_126:
                sub_22F0A02E8((uint64_t)v5, v35 + 16, *(unsigned int *)v35);
                return;
              }
            }
            if (!v6
              || (v36 - 38) < 0xFFFFFFFD
              || (v48 = *(_QWORD *)(v6 + 128)) == 0
              || ((*(unsigned __int16 *)(v48 + 8) | (*(unsigned __int8 *)(v48 + 10) << 16)) & 0x100000) == 0)
            {
              v172 = &v174;
              v173 = xmmword_22F44E300;
              v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 15064);
              v50 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 88))(v49, a2 & 0xFFFFFFFFFFFFFFF8);
              if (v50
                || (v51 = *(_QWORD *)(*(_QWORD *)(*v5 + 8) + 15064),
                    (v50 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v51 + 72))(v51, v6)) != 0))
              {
                v52 = v50;
                v53 = v173;
                if (*((_QWORD *)&v173 + 1) < (unint64_t)(v173 + 14))
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v53 = v173;
                }
                qmemcpy((char *)v172 + v53, "<unnamed-type-", 14);
                v54 = v173 + 14;
                *(_QWORD *)&v173 = v173 + 14;
                v55 = *(_QWORD *)(v52 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(v52 + 40) & 7) != 0 || v55 == 0)
                {
                  v63 = 0;
                  v64 = "";
                }
                else
                {
                  v62 = *(_DWORD **)(v55 + 16);
                  v65 = *v62;
                  v64 = (const char *)(v62 + 4);
                  v63 = v65;
                }
                v66 = v63 + v54;
                v67 = *((_QWORD *)&v173 + 1);
                goto LABEL_134;
              }
              if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x21)
              {
                v75 = sub_22E49F9AC(v6);
                sub_22EFC3500(v6);
                if (v75)
                {
                  v76 = v173;
                  if (*((_QWORD *)&v173 + 1) < (unint64_t)(v173 + 14))
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v76 = v173;
                  }
                  qmemcpy((char *)v172 + v76, "<unnamed-enum-", 14);
                  *(_QWORD *)&v173 = v173 + 14;
                  v77 = sub_22E49F9AC(v6);
                  v63 = 0;
                  v78 = *(_QWORD *)(v77 + 40);
                  v64 = "";
                  if ((v78 & 7) == 0)
                  {
                    v79 = v78 & 0xFFFFFFFFFFFFFFF8;
                    if (v79)
                    {
                      v80 = *(_DWORD **)(v79 + 16);
                      v81 = *v80;
                      v64 = (const char *)(v80 + 4);
                      v63 = v81;
                    }
                  }
                  v67 = *((_QWORD *)&v173 + 1);
                  v54 = v173;
                  v66 = v173 + v63;
LABEL_134:
                  if (v67 < v66)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v54 = v173;
                    if (!v63)
                      goto LABEL_137;
                  }
                  else if (!v63)
                  {
LABEL_137:
                    v68 = v54 + v63;
                    *(_QWORD *)&v173 = v68;
LABEL_138:
                    if (*((_QWORD *)&v173 + 1) < v68 + 1)
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      v68 = v173;
                    }
                    *((_BYTE *)v172 + v68) = 62;
                    v69 = (char *)v172;
                    v70 = v173 + 1;
                    *(_QWORD *)&v173 = v173 + 1;
LABEL_141:
                    sub_22F0A02E8((uint64_t)v5, v69, v70);
                    goto LABEL_142;
                  }
                  memcpy((char *)v172 + v54, v64, v63);
                  v54 = v173;
                  goto LABEL_137;
                }
              }
              v121 = v173;
              if (*((_QWORD *)&v173 + 1) < (unint64_t)(v173 + 16))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v121 = v173;
              }
              *(_OWORD *)((char *)v172 + v121) = *(_OWORD *)"<unnamed-type-$S";
              *(_QWORD *)&v173 = v173 + 16;
              v122 = *v5 + 80;
              v123 = *(unsigned int *)(*v5 + 88);
              v192 = v6;
              v193 = v123;
              sub_22F270EE0(v122, &v192, &v193, (uint64_t)&v196);
              v124 = *((_QWORD *)v196 + 1);
              v85 = __CFADD__(v124, 1);
              v125 = v124 + 1;
              if (v85)
              {
                v129 = &v194;
                v194 = 48;
              }
              else
              {
                v129 = v195;
                do
                {
                  *--v129 = (v125 % 0xA) | 0x30;
                  v92 = v125 > 9;
                  v125 /= 0xAuLL;
                }
                while (v92);
              }
              sub_22E3B4274(&v196, v129, v195, v195 - v129);
              if (v197 >= 0)
                v130 = &v196;
              else
                v130 = (char **)v196;
              if (v197 >= 0)
                v131 = HIBYTE(v197) & 0x7F;
              else
                v131 = v197;
              v132 = v173;
              if (*((_QWORD *)&v173 + 1) < (unint64_t)v173 + v131)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v132 = v173;
                if (!v131)
                {
LABEL_353:
                  v68 = v132 + v131;
                  *(_QWORD *)&v173 = v68;
                  if (SHIBYTE(v197) < 0)
                  {
                    operator delete(v196);
                    v68 = v173;
                  }
                  goto LABEL_138;
                }
              }
              else if (!v131)
              {
                goto LABEL_353;
              }
              memcpy((char *)v172 + v132, v130, v131);
              v132 = v173;
              goto LABEL_353;
            }
            v172 = &v174;
            v174 = 0x5F6164626D616C3CLL;
            v173 = xmmword_22F4A6790;
            v105 = sub_22F3B1CF4(a2 & 0xFFFFFFFFFFFFFFF8);
            v106 = v105;
            v107 = *(_DWORD *)(*(_QWORD *)(v6 + 128) + 112) & 0x7FFFFFFF;
            if (!v105 || (*(_DWORD *)(v105 + 28) & 0x7F) != 0x40)
              goto LABEL_448;
            v108 = *(_QWORD *)(v105 + 16);
            v109 = v108 & 0xFFFFFFFFFFFFFFF8;
            if ((v108 & 4) != 0)
              v109 = *(_QWORD *)v109;
            if (!v109 || (*(_WORD *)(v109 + 8) & 0x7Eu) - 58 < 0xFFFFFFFA)
            {
LABEL_448:
              if (v107)
              {
                LODWORD(v159) = v107;
              }
              else
              {
                v166 = *v5 + 152;
                v167 = *(unsigned int *)(*v5 + 160);
                v192 = v6;
                v193 = v167;
                sub_22F294A80((uint64_t)&v196, v166, &v192, &v193);
                LODWORD(v159) = *((_DWORD *)v196 + 2);
                if (!(_DWORD)v159)
                {
                  v160 = &v194;
                  v194 = 48;
LABEL_452:
                  sub_22E3B4274(&v196, v160, v195, v195 - v160);
                  if (v197 >= 0)
                    v161 = &v196;
                  else
                    v161 = (char **)v196;
                  if (v197 >= 0)
                    v162 = HIBYTE(v197) & 0x7F;
                  else
                    v162 = v197;
                  v163 = v173;
                  if (*((_QWORD *)&v173 + 1) < (unint64_t)v173 + v162)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v163 = v173;
                    if (!v162)
                      goto LABEL_461;
                  }
                  else if (!v162)
                  {
LABEL_461:
                    v164 = v163 + v162;
                    *(_QWORD *)&v173 = v164;
                    if (SHIBYTE(v197) < 0)
                    {
                      operator delete(v196);
                      v164 = v173;
                    }
                    if (*((_QWORD *)&v173 + 1) < v164 + 1)
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      v164 = v173;
                    }
                    *((_BYTE *)v172 + v164) = 62;
                    *(_QWORD *)&v173 = v173 + 1;
                    sub_22F0A02E8((uint64_t)v5, (char *)v172, v173);
                    if (v106)
                    {
                      if (v107)
                      {
                        v165 = (*(_DWORD *)(v106 + 28) & 0x7F) - 49;
                        if (v165 <= 0x11 && ((1 << v165) & 0x37807) != 0)
                          sub_22F09D9C0(v5, v106, 0);
                      }
                    }
LABEL_142:
                    v23 = v172;
                    if (v172 == &v174)
                      return;
                    goto LABEL_30;
                  }
                  memcpy((char *)v172 + v163, v161, v162);
                  v163 = v173;
                  goto LABEL_461;
                }
              }
              v160 = v195;
              v159 = v159;
              do
              {
                *--v160 = (v159 % 0xA) | 0x30;
                v92 = v159 > 9;
                v159 /= 0xAuLL;
              }
              while (v92);
              goto LABEL_452;
            }
            v110 = *(_QWORD *)(*(_QWORD *)(v109 - 24) & 0xFFFFFFFFFFFFFFF0);
            if (v110 && *(_BYTE *)(v110 + 16) == 26
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
              && (v110 = sub_22F10CF48(v110)) != 0)
            {
              v111 = (unsigned __int16)(*(_QWORD *)(v110 + 16) >> 38);
            }
            else
            {
              v111 = 0;
            }
            v112 = (*(_DWORD *)(v106 + 96) >> 20);
            if (v112 == 255)
            {
              v113 = v106;
              if ((*(_DWORD *)(v106 + 28) & 0x7F) != 0x53)
              {
                v114 = *(_QWORD *)(v106 + 16);
                v115 = v114 & 0xFFFFFFFFFFFFFFF8;
                if ((v114 & 4) != 0)
                  v115 = *(_QWORD *)v115;
                for (j = *(_WORD *)(v115 + 8) & 0x7F; j != 83; j = *(_WORD *)(v115 + 8) & 0x7F)
                {
                  v117 = -40;
                  if (j > 70)
                  {
                    if (j == 71)
                    {
                      v117 = -56;
                    }
                    else if (j != 81)
                    {
                      goto LABEL_323;
                    }
                  }
                  else
                  {
                    if (j > 0x18)
                      goto LABEL_322;
                    if (j == 16)
                      goto LABEL_316;
                    if (((1 << j) & 0x1066) != 0)
                      goto LABEL_329;
                    if (j == 24)
                    {
LABEL_316:
                      v117 = -48;
                    }
                    else
                    {
LABEL_322:
                      if (j != 70)
                      {
LABEL_323:
                        v118 = j - 52;
                        if ((j - 33) >= 5)
                          v119 = -48;
                        else
                          v119 = -64;
                        if (v118 >= 6)
                          v117 = v119;
                        else
                          v117 = -72;
                        goto LABEL_329;
                      }
                      v117 = -64;
                    }
                  }
LABEL_329:
                  v120 = *(_QWORD *)(v115 + v117 + 16);
                  v115 = v120 & 0xFFFFFFFFFFFFFFF8;
                  if ((v120 & 4) != 0)
                    v115 = *(_QWORD *)v115;
                }
                v113 = v115 - 40;
              }
              v112 = sub_22F36F2CC(*(_QWORD *)(v113 + 88), v106);
            }
            v153 = (v111 - v112);
            if (v111 == v112)
            {
              v154 = &v194;
              v194 = 48;
            }
            else
            {
              v154 = v195;
              do
              {
                *--v154 = (v153 % 0xA) | 0x30;
                v92 = v153 > 9;
                v153 /= 0xAuLL;
              }
              while (v92);
            }
            sub_22E3B4274(&v196, v154, v195, v195 - v154);
            if (v197 >= 0)
              v155 = &v196;
            else
              v155 = (char **)v196;
            if (v197 >= 0)
              v156 = HIBYTE(v197) & 0x7F;
            else
              v156 = v197;
            v157 = v173;
            if (*((_QWORD *)&v173 + 1) < (unint64_t)v173 + v156)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v157 = v173;
              if (!v156)
                goto LABEL_443;
            }
            else if (!v156)
            {
LABEL_443:
              v158 = v157 + v156;
              *(_QWORD *)&v173 = v158;
              if (SHIBYTE(v197) < 0)
              {
                operator delete(v196);
                v158 = v173;
              }
              if (*((_QWORD *)&v173 + 1) < v158 + 1)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v158 = v173;
              }
              *((_BYTE *)v172 + v158) = 95;
              *(_QWORD *)&v173 = v173 + 1;
              goto LABEL_448;
            }
            memcpy((char *)v172 + v157, v155, v156);
            v157 = v173;
            goto LABEL_443;
          }
          v87 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0));
          if (v87)
          {
            if ((*(_DWORD *)(v87 + 28) & 0x7Fu) - 35 >= 3)
              v88 = 0;
            else
              v88 = v87;
          }
          else
          {
            v88 = 0;
          }
          v172 = &v174;
          LOWORD(v174) = 21284;
          v173 = xmmword_22F4A6780;
          v96 = *v5 + 80;
          v97 = *(unsigned int *)(*v5 + 88);
          v192 = v88;
          v193 = v97;
          sub_22F270EE0(v96, &v192, &v193, (uint64_t)&v196);
          v98 = *((_QWORD *)v196 + 1);
          v85 = __CFADD__(v98, 1);
          v99 = v98 + 1;
          if (v85)
          {
            v100 = &v194;
            v194 = 48;
          }
          else
          {
            v100 = v195;
            do
            {
              *--v100 = (v99 % 0xA) | 0x30;
              v92 = v99 > 9;
              v99 /= 0xAuLL;
            }
            while (v92);
          }
          sub_22E3B4274(&v196, v100, v195, v195 - v100);
          if (v197 >= 0)
            v101 = &v196;
          else
            v101 = (char **)v196;
          if (v197 >= 0)
            v102 = HIBYTE(v197) & 0x7F;
          else
            v102 = v197;
          v103 = v173;
          if (*((_QWORD *)&v173 + 1) < (unint64_t)v173 + v102)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v103 = v173;
            if (!v102)
              goto LABEL_289;
          }
          else if (!v102)
          {
LABEL_289:
            v22 = v103 + v102;
            *(_QWORD *)&v173 = v103 + v102;
            if (SHIBYTE(v197) < 0)
            {
              operator delete(v196);
              v22 = v173;
            }
            v21 = (char *)v172;
            a1 = (uint64_t)v5;
LABEL_29:
            sub_22F0A02E8(a1, v21, v22);
            v23 = v172;
            if (v172 == &v174)
              return;
LABEL_30:
            free(v23);
            return;
          }
          memcpy((char *)v172 + v103, v101, v102);
          v103 = v173;
          goto LABEL_289;
        }
        v172 = &v174;
        LOWORD(v174) = 21284;
        v173 = xmmword_22F4A6780;
        v82 = *(_QWORD *)a1 + 80;
        v83 = *(unsigned int *)(*v5 + 88);
        v192 = a2 & 0xFFFFFFFFFFFFFFF8;
        v193 = v83;
        sub_22F270EE0(v82, &v192, &v193, (uint64_t)&v196);
        v84 = *((_QWORD *)v196 + 1);
        v85 = __CFADD__(v84, 1);
        v86 = v84 + 1;
        if (v85)
        {
          v91 = &v194;
          v194 = 48;
        }
        else
        {
          v91 = v195;
          do
          {
            *--v91 = (v86 % 0xA) | 0x30;
            v92 = v86 > 9;
            v86 /= 0xAuLL;
          }
          while (v92);
        }
        sub_22E3B4274(&v196, v91, v195, v195 - v91);
        if (v197 >= 0)
          v93 = &v196;
        else
          v93 = (char **)v196;
        if (v197 >= 0)
          v94 = HIBYTE(v197) & 0x7F;
        else
          v94 = v197;
        v95 = v173;
        if (*((_QWORD *)&v173 + 1) < (unint64_t)v173 + v94)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v95 = v173;
          if (!v94)
            goto LABEL_270;
        }
        else if (!v94)
        {
LABEL_270:
          v70 = v95 + v94;
          *(_QWORD *)&v173 = v95 + v94;
          if (SHIBYTE(v197) < 0)
          {
            operator delete(v196);
            v70 = v173;
          }
          v69 = (char *)v172;
          goto LABEL_141;
        }
        memcpy((char *)v172 + v95, v93, v94);
        v95 = v173;
        goto LABEL_270;
      case 1:
      case 2:
      case 11:
        v172 = &v174;
        v173 = xmmword_22F44E300;
        v21 = (char *)&v174;
        v22 = 0;
        goto LABEL_29;
      case 3:
        if (*(_QWORD *)(a1 + 16) != v6 && sub_22F09CFB0(a2 & 0xFFFFFFFFFFFFFFF8) != *(_QWORD *)(a1 + 16))
          goto LABEL_63;
        v31 = *((_DWORD *)v5 + 6);
        if (v31 == 4)
        {
          v25 = (llvm::raw_ostream *)v5[1];
          v26 = *((_QWORD *)v25 + 4);
          if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
          {
            v27 = "?_F";
            goto LABEL_98;
          }
          v104 = 70;
          goto LABEL_296;
        }
        if (v31 == 3)
        {
          v25 = (llvm::raw_ostream *)v5[1];
          v26 = *((_QWORD *)v25 + 4);
          if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
          {
            v27 = "?_O";
            goto LABEL_98;
          }
          v104 = 79;
          goto LABEL_296;
        }
LABEL_63:
        v25 = (llvm::raw_ostream *)v5[1];
        v29 = (__int16 *)*((_QWORD *)v25 + 4);
        if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
        {
          v27 = "?0";
          goto LABEL_98;
        }
        v74 = 12351;
        goto LABEL_171;
      case 4:
        if (*(_QWORD *)(a1 + 16) != v6 && sub_22F09CFB0(a2 & 0xFFFFFFFFFFFFFFF8) != *(_QWORD *)(a1 + 16))
          goto LABEL_61;
        v24 = *((_DWORD *)v5 + 6);
        if (v24)
        {
          if (v24 != 1)
          {
LABEL_61:
            v25 = (llvm::raw_ostream *)v5[1];
            v29 = (__int16 *)*((_QWORD *)v25 + 4);
            if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
            {
              v27 = "?1";
              goto LABEL_98;
            }
            v74 = 12607;
LABEL_171:
            *v29 = v74;
            v89 = *((_QWORD *)v25 + 4) + 2;
LABEL_297:
            *((_QWORD *)v25 + 4) = v89;
            return;
          }
          v25 = (llvm::raw_ostream *)v5[1];
          v26 = *((_QWORD *)v25 + 4);
          if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
          {
            v27 = "?_D";
            goto LABEL_98;
          }
          v104 = 68;
        }
        else
        {
          v25 = (llvm::raw_ostream *)v5[1];
          v26 = *((_QWORD *)v25 + 4);
          if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
          {
            v27 = "?_G";
            goto LABEL_98;
          }
          v104 = 71;
        }
LABEL_296:
        *(_BYTE *)(v26 + 2) = v104;
        *(_WORD *)v26 = 24383;
        v89 = *((_QWORD *)v25 + 4) + 3;
        goto LABEL_297;
      case 5:
        v25 = *(llvm::raw_ostream **)(a1 + 8);
        v29 = (__int16 *)*((_QWORD *)v25 + 4);
        if (*((_QWORD *)v25 + 3) - (_QWORD)v29 > 1uLL)
        {
          v74 = 16959;
          goto LABEL_171;
        }
        v27 = "?B";
LABEL_98:
        llvm::raw_ostream::write(v25, v27);
        return;
      case 6:
        if ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40) & 7) == 6)
        {
          switch(*(_DWORD *)(v7 & 0xFFFFFFFFFFFFFFF8))
          {
            case 1:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?2";
                goto LABEL_258;
              }
              v74 = 12863;
              goto LABEL_171;
            case 2:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?3";
                goto LABEL_258;
              }
              v74 = 13119;
              goto LABEL_171;
            case 3:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_U";
                goto LABEL_258;
              }
              v104 = 85;
              goto LABEL_296;
            case 4:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_V";
                goto LABEL_258;
              }
              v104 = 86;
              goto LABEL_296;
            case 5:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?H";
                goto LABEL_258;
              }
              v74 = 18495;
              goto LABEL_171;
            case 6:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?G";
                goto LABEL_258;
              }
              v74 = 18239;
              goto LABEL_171;
            case 7:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?D";
                goto LABEL_258;
              }
              v74 = 17471;
              goto LABEL_171;
            case 8:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?K";
                goto LABEL_258;
              }
              v74 = 19263;
              goto LABEL_171;
            case 9:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?L";
                goto LABEL_258;
              }
              v74 = 19519;
              goto LABEL_171;
            case 0xA:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?T";
                goto LABEL_258;
              }
              v74 = 21567;
              goto LABEL_171;
            case 0xB:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?I";
                goto LABEL_258;
              }
              v74 = 18751;
              goto LABEL_171;
            case 0xC:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?U";
                goto LABEL_258;
              }
              v74 = 21823;
              goto LABEL_171;
            case 0xD:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?S";
                goto LABEL_258;
              }
              v74 = 21311;
              goto LABEL_171;
            case 0xE:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?7";
                goto LABEL_258;
              }
              v74 = 14143;
              goto LABEL_171;
            case 0xF:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?4";
                goto LABEL_258;
              }
              v74 = 13375;
              goto LABEL_171;
            case 0x10:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?M";
                goto LABEL_258;
              }
              v74 = 19775;
              goto LABEL_171;
            case 0x11:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?O";
                goto LABEL_258;
              }
              v74 = 20287;
              goto LABEL_171;
            case 0x12:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?Y";
                goto LABEL_258;
              }
              v74 = 22847;
              goto LABEL_171;
            case 0x13:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?Z";
                goto LABEL_258;
              }
              v74 = 23103;
              goto LABEL_171;
            case 0x14:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?X";
                goto LABEL_258;
              }
              v74 = 22591;
              goto LABEL_171;
            case 0x15:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_0";
                goto LABEL_258;
              }
              v104 = 48;
              goto LABEL_296;
            case 0x16:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_1";
                goto LABEL_258;
              }
              v104 = 49;
              goto LABEL_296;
            case 0x17:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_6";
                goto LABEL_258;
              }
              v104 = 54;
              goto LABEL_296;
            case 0x18:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_4";
                goto LABEL_258;
              }
              v104 = 52;
              goto LABEL_296;
            case 0x19:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_5";
                goto LABEL_258;
              }
              v104 = 53;
              goto LABEL_296;
            case 0x1A:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?6";
                goto LABEL_258;
              }
              v74 = 13887;
              goto LABEL_171;
            case 0x1B:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?5";
                goto LABEL_258;
              }
              v74 = 13631;
              goto LABEL_171;
            case 0x1C:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_3";
                goto LABEL_258;
              }
              v104 = 51;
              goto LABEL_296;
            case 0x1D:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v26 = *((_QWORD *)v25 + 4);
              if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) <= 2)
              {
                v30 = "?_2";
                goto LABEL_258;
              }
              v104 = 50;
              goto LABEL_296;
            case 0x1E:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?8";
                goto LABEL_258;
              }
              v74 = 14399;
              goto LABEL_171;
            case 0x1F:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?9";
                goto LABEL_258;
              }
              v74 = 14655;
              goto LABEL_171;
            case 0x20:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?N";
                goto LABEL_258;
              }
              v74 = 20031;
              goto LABEL_171;
            case 0x21:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?P";
                goto LABEL_258;
              }
              v74 = 20543;
              goto LABEL_171;
            case 0x22:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v90 = (int *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v90 <= 3uLL)
              {
                v30 = "?__M";
                goto LABEL_258;
              }
              v152 = 1298095935;
              goto LABEL_392;
            case 0x23:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?V";
                goto LABEL_258;
              }
              v74 = 22079;
              goto LABEL_171;
            case 0x24:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?W";
                goto LABEL_258;
              }
              v74 = 22335;
              goto LABEL_171;
            case 0x25:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?E";
                goto LABEL_258;
              }
              v74 = 17727;
              goto LABEL_171;
            case 0x26:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?F";
                goto LABEL_258;
              }
              v74 = 17983;
              goto LABEL_171;
            case 0x27:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?Q";
                goto LABEL_258;
              }
              v74 = 20799;
              goto LABEL_171;
            case 0x28:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?J";
                goto LABEL_258;
              }
              v74 = 19007;
              goto LABEL_171;
            case 0x29:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?C";
                goto LABEL_258;
              }
              v74 = 17215;
              goto LABEL_171;
            case 0x2A:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?R";
                goto LABEL_258;
              }
              v74 = 21055;
              goto LABEL_171;
            case 0x2B:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v29 = (__int16 *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v29 <= 1uLL)
              {
                v30 = "?A";
                goto LABEL_258;
              }
              v74 = 16703;
              goto LABEL_171;
            case 0x2C:
              v146 = *(_DWORD *)(v6 + 24);
              v147 = *(_QWORD *)(*(_QWORD *)a1 + 16);
              v148 = sub_22F41A810(*(_QWORD *)(v147 + 32), 4, "cannot mangle this conditional operator yet", 0x2BuLL);
              *(_DWORD *)(v147 + 312) = v146;
              *(_DWORD *)(v147 + 316) = v148;
              if (*(char *)(v147 + 311) < 0)
              {
                **(_BYTE **)(v147 + 288) = 0;
                *(_QWORD *)(v147 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v147 + 288) = 0;
                *(_BYTE *)(v147 + 311) = 0;
              }
              v172 = (void *)(v147 + 320);
              *(_QWORD *)&v173 = 0;
              *((_QWORD *)&v173 + 1) = v147;
              LOWORD(v174) = 1;
              *(_BYTE *)(v147 + 320) = 0;
              *(_DWORD *)(v147 + 664) = 0;
              v149 = *(unsigned int *)(v147 + 776);
              if ((_DWORD)v149)
              {
                v150 = *(_QWORD *)(v147 + 768);
                v151 = 56 * v149;
                do
                {
                  if (*(char *)(v150 + v151 - 9) < 0)
                    operator delete(*(void **)(v150 + v151 - 32));
                  v151 -= 56;
                }
                while (v151);
              }
              *(_DWORD *)(v147 + 776) = 0;
              sub_22E3BB0B8((uint64_t)&v172);
              return;
            case 0x2D:
              v25 = *(llvm::raw_ostream **)(a1 + 8);
              v90 = (int *)*((_QWORD *)v25 + 4);
              if (*((_QWORD *)v25 + 3) - (_QWORD)v90 > 3uLL)
              {
                v152 = 1281318719;
LABEL_392:
                *v90 = v152;
                v89 = *((_QWORD *)v25 + 4) + 4;
                goto LABEL_297;
              }
              v30 = "?__L";
LABEL_258:
              llvm::raw_ostream::write(v25, v30);
              break;
            default:
              return;
          }
        }
        return;
      case 9:
        v32 = *(llvm::raw_ostream **)(a1 + 8);
        v33 = (_DWORD *)*((_QWORD *)v32 + 4);
        if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 3uLL)
        {
          *v33 = 1264541503;
          *((_QWORD *)v32 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v32, "?__K");
        }
        v34 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
        goto LABEL_60;
      default:
        return;
    }
  }
  v13 = *(_QWORD *)(v6 + 128);
  v15 = *(_QWORD *)(v6 + 112);
  v12 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 4) != 0 && v12)
  {
    do
    {
      v168 = *(_QWORD *)(*(_QWORD *)v12 + 112);
      v12 = v168 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v168 & 4) != 0 && v12);
  }
LABEL_19:
  v16 = v12 | a2 & 7;
  if (!v16)
    goto LABEL_23;
  if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x1D)
  {
    sub_22F09FFDC(a1, v12 | a2 & 7, a3, v13);
    v17 = (llvm::raw_ostream *)v5[1];
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 64;
    }
    return;
  }
  v196 = (char *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v172 = 0;
  if (sub_22F246C54((uint64_t *)(a1 + 312), &v196, &v172)
    && v172 != (void *)(v5[39] + 16 * *((unsigned int *)v5 + 82)))
  {
    llvm::raw_ostream::operator<<();
    return;
  }
  v196 = (char *)v6;
  v172 = 0;
  if (sub_22F251EFC(v5 + 42, &v196, &v172)
    && v172 != (void *)(v5[42] + 24 * *((unsigned int *)v5 + 88)))
  {
    v71 = (llvm::raw_ostream *)v5[1];
    v72 = (const void *)*((_QWORD *)v172 + 1);
    v73 = *((_QWORD *)v172 + 2);
    v39 = (_BYTE *)*((_QWORD *)v71 + 4);
    if (v73 <= *((_QWORD *)v71 + 3) - (_QWORD)v39)
    {
      if (v73)
      {
        memcpy(v39, v72, *((_QWORD *)v172 + 2));
        v39 = (_BYTE *)(*((_QWORD *)v71 + 4) + v73);
        *((_QWORD *)v71 + 4) = v39;
      }
    }
    else
    {
      v71 = (llvm::raw_ostream *)llvm::raw_ostream::write(v71, (const char *)v72);
      v39 = (_BYTE *)*((_QWORD *)v71 + 4);
    }
    if ((unint64_t)v39 >= *((_QWORD *)v71 + 3))
    {
      llvm::raw_ostream::write(v71);
      return;
    }
    *((_QWORD *)v71 + 4) = v39 + 1;
LABEL_131:
    *v39 = 64;
    return;
  }
  v170 = v5 + 42;
  v196 = (char *)v198;
  v197 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)&v192, (uint64_t)&v196);
  v172 = (void *)*v5;
  v173 = (unint64_t)&v192;
  LODWORD(v174) = -1;
  v175[0] = (char *)&v176;
  v175[1] = (char *)0xA00000000;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v186 = v187;
  v187[0] = 0;
  v187[1] = 0;
  v187[2] = v188;
  v187[3] = 0x400000000;
  v188[4] = v189;
  v188[5] = 0;
  v189[0] = 0;
  v189[1] = 1;
  v190[1] = 0;
  v190[0] = 0;
  v189[2] = v190;
  v191 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v172 + 1) + 15088)
                  + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v172 + 1) + 15088) - 24)) == 64;
  sub_22F09FFDC((uint64_t)&v172, v16, a3, v13);
  sub_22F0A02E8((uint64_t)v5, v196, v197);
  v126 = v5[4];
  v127 = *((unsigned int *)v5 + 10);
  if ((_DWORD)v127)
  {
    v169 = (const void **)(v126 + 24 * v127);
    v133 = v196;
    v134 = v197;
    v135 = *((unsigned int *)v5 + 10);
    v136 = 24 * v127;
    v128 = (const void **)v5[4];
    while (1)
    {
      v137 = *((_BYTE *)v128 + 23);
      v138 = v137 < 0;
      if (v137 >= 0)
        v139 = v128;
      else
        v139 = *v128;
      v140 = (const void *)(v137 & 0x7F);
      if (v138)
        v140 = v128[1];
      if (v140 == (const void *)v134 && (!v134 || !memcmp(v139, v133, v134)))
        break;
      v128 += 3;
      v136 -= 24;
      if (!v136)
      {
        v128 = v169;
        break;
      }
    }
    v127 = v135;
  }
  else
  {
    v128 = (const void **)v5[4];
  }
  v141 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v128 - v126) >> 3);
  if (v141 == v127)
  {
    v142 = llvm::StringSaver::save();
    v144 = v143;
    v171 = v6;
    v145 = sub_22F3E8AC8(v170, &v171);
    v145[1] = v142;
    v145[2] = v144;
  }
  else
  {
    v171 = v6;
    *((_DWORD *)sub_22F283EC0(v5 + 39, &v171) + 2) = v141;
  }
  sub_22F258024(v190[0]);
  sub_22E3B4EF4((uint64_t)v187);
  llvm::deallocate_buffer(v183, (void *)(24 * v185));
  llvm::deallocate_buffer(v180, (void *)(16 * v182));
  llvm::deallocate_buffer(v177, (void *)(16 * v179));
  sub_22E3B9848(v175);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v192);
  v23 = v196;
  if (v196 != (char *)v198)
    goto LABEL_30;
}

void sub_22F09F810(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  __int16 v5;
  __int16 *v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  char *p_p;
  size_t v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  char *v51;
  size_t v52;
  llvm::raw_ostream *v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  void *__p;
  size_t v68;
  char v69;

  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = sub_22F09CA5C(a2 & 0xFFFFFFFFFFFFFFF8);
  v6 = (__int16 *)(v4 + 8);
  v5 = *(_WORD *)(v4 + 8);
  if ((v5 & 0x7F) == 0x53)
    return;
  v7 = v4;
  while (1)
  {
    v8 = (*(_DWORD *)(v3 + 28) & 0x7F) - 33;
    v9 = v8 > 0x21;
    v10 = (1 << v8) & 0x3F800001FLL;
    if (!v9 && v10 != 0)
    {
      LODWORD(__p) = 0;
      if (sub_22F0AA038(*(_QWORD **)a1, v3, (int *)&__p))
      {
        v12 = *(llvm::raw_ostream **)(a1 + 8);
        v13 = (_BYTE *)*((_QWORD *)v12 + 4);
        if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
        {
          llvm::raw_ostream::write(v12);
        }
        else
        {
          *((_QWORD *)v12 + 4) = v13 + 1;
          *v13 = 63;
        }
        sub_22F0A8DC0(a1, __p);
        v14 = *(llvm::raw_ostream **)(a1 + 8);
        v15 = (_BYTE *)*((_QWORD *)v14 + 4);
        if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
        {
          llvm::raw_ostream::write(v14);
        }
        else
        {
          *((_QWORD *)v14 + 4) = v15 + 1;
          *v15 = 63;
        }
      }
      v5 = *v6;
    }
    v16 = v5 & 0x7F;
    if (v16 == 1)
      break;
    if (v16 == 24)
    {
      sub_22F3E8270(*(_QWORD *)a1, v7 - 48);
LABEL_128:
      v59 = *(_WORD *)(v7 + 8) & 0x7F;
      v60 = -40;
      if (v59 > 0x46)
      {
        if (v59 != 83)
        {
          if (v59 == 71)
          {
            v60 = -56;
          }
          else if (v59 != 81)
          {
            goto LABEL_139;
          }
        }
      }
      else
      {
        if (v59 > 0x18)
          goto LABEL_138;
        if (v59 == 16)
          goto LABEL_131;
        if (((1 << v59) & 0x1066) == 0)
        {
          if (v59 == 24)
          {
LABEL_131:
            v60 = -48;
          }
          else
          {
LABEL_138:
            if (v59 == 70)
            {
              v60 = -64;
            }
            else
            {
LABEL_139:
              v61 = v59 - 52;
              v23 = v59 - 33 >= 5;
              v62 = -64;
              if (v23)
                v62 = -48;
              v23 = v61 >= 6;
              v60 = -72;
              if (v23)
                v60 = v62;
            }
          }
        }
      }
      v63 = *(_QWORD *)(v7 + v60 + 16);
      v35 = v63 & 0xFFFFFFFFFFFFFFF8;
      if ((v63 & 4) != 0)
        v35 = *(_QWORD *)v35;
      goto LABEL_147;
    }
    if ((v16 - 13) > 0x3D)
      goto LABEL_128;
    v17 = *(_WORD *)(v7 + 8) & 0x7F;
    v18 = -40;
    if (v17 > 0x46)
    {
      if (v17 == 83)
        goto LABEL_126;
      if (v17 == 71)
      {
        v18 = -56;
        goto LABEL_126;
      }
      if (v17 != 81)
        goto LABEL_120;
    }
    else
    {
      if (v17 > 0x18)
        goto LABEL_119;
      if (v17 == 16)
        goto LABEL_21;
      if (((1 << v17) & 0x1066) == 0)
      {
        if (v17 == 24)
        {
LABEL_21:
          v18 = -48;
          goto LABEL_126;
        }
LABEL_119:
        if (v17 == 70)
        {
          v18 = -64;
          goto LABEL_126;
        }
LABEL_120:
        v57 = v17 - 52;
        v23 = v17 - 33 >= 5;
        v58 = -64;
        if (v23)
          v58 = -48;
        v23 = v57 >= 6;
        v18 = -72;
        if (v23)
          v18 = v58;
      }
    }
LABEL_126:
    v3 = v7 + v18;
    if ((*(_DWORD *)(v7 + v18 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v64 = *(_WORD *)(v3 + 80) & 0x7F;
      if (v64 == 57)
      {
        LODWORD(v3) = v3 & 0xFFFFFFF8 | 1;
      }
      else if (v64 == 55)
      {
        LODWORD(v3) = v3 & 0xFFFFFFF8;
      }
      else if (sub_22E462B18(v3))
      {
        LODWORD(v3) = v3 & 0xFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v3) + 96) & 0x80) == 0);
      }
      sub_22F09CC20(a1, v3, 0, "?", 1uLL);
      return;
    }
    sub_22F09D9C0(a1, v3, 0);
    v35 = sub_22F09CBA4(v3);
    if (!v35)
      goto LABEL_128;
LABEL_147:
    v6 = (__int16 *)(v35 + 8);
    v5 = *(_WORD *)(v35 + 8);
    v7 = v35;
    if ((v5 & 0x7F) == 0x53)
      return;
  }
  v19 = *(_DWORD *)(v7 + 76);
  if (!v19)
  {
    v55 = *(_QWORD *)a1 + 32;
    v56 = *(unsigned int *)(*(_QWORD *)a1 + 40);
    v65 = v7 - 40;
    v66 = v56;
    sub_22F2611B4(v55, &v65, &v66, (uint64_t)&__p);
    v19 = *((_DWORD *)__p + 2);
  }
  v20 = *(_QWORD *)(v7 + 80);
  if (!v20)
    goto LABEL_71;
  if ((*(_DWORD *)(v20 + 28) & 0x7F) != 0x40)
    goto LABEL_32;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0)
    v22 = *(_QWORD *)v22;
  v23 = v22 && (*(_WORD *)(v22 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  if (!v23)
  {
LABEL_32:
    LODWORD(v20) = 0;
    goto LABEL_71;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v22 - 24) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = *(_BYTE *)(v24 + 16) == 26;
  else
    v25 = 0;
  if (v25
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v24 = sub_22F10CF48(v24)) != 0)
  {
    v26 = (unsigned __int16)(*(_QWORD *)(v24 + 16) >> 38);
  }
  else
  {
    v26 = 0;
  }
  v27 = (*(_DWORD *)(v20 + 96) >> 20);
  if (v27 != 255)
    goto LABEL_70;
  v28 = v20;
  if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x53)
    goto LABEL_69;
  v29 = *(_QWORD *)(v20 + 16);
  while (2)
  {
    v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v29 & 4) != 0)
      v30 = *(_QWORD *)v30;
    v31 = *(_WORD *)(v30 + 8) & 0x7F;
    if (v31 != 83)
    {
      v32 = -40;
      if ((*(_WORD *)(v30 + 8) & 0x7Fu) > 0x46)
      {
        if (v31 == 71)
        {
          v32 = -56;
        }
        else if (v31 != 81)
        {
          goto LABEL_55;
        }
      }
      else
      {
        if (v31 > 0x18)
          goto LABEL_54;
        if (v31 == 16)
          goto LABEL_48;
        if (((1 << v31) & 0x1066) == 0)
        {
          if (v31 == 24)
          {
LABEL_48:
            v32 = -48;
          }
          else
          {
LABEL_54:
            if (v31 == 70)
            {
              v32 = -64;
            }
            else
            {
LABEL_55:
              v33 = v31 - 52;
              v23 = v31 - 33 >= 5;
              v34 = -64;
              if (v23)
                v34 = -48;
              v23 = v33 >= 6;
              v32 = -72;
              if (v23)
                v32 = v34;
            }
          }
        }
      }
      v29 = *(_QWORD *)(v30 + v32 + 16);
      continue;
    }
    break;
  }
  v28 = v30 - 40;
LABEL_69:
  v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), v20);
LABEL_70:
  LODWORD(v20) = v26 - v27;
LABEL_71:
  v35 = sub_22F09CA5C(v7 - 40);
  v36 = *(llvm::raw_ostream **)(a1 + 8);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
  {
    llvm::raw_ostream::write(v36);
  }
  else
  {
    *((_QWORD *)v36 + 4) = v37 + 1;
    *v37 = 63;
  }
  sub_22F0AA1E8((uint64_t)&__p, "_block_invoke", 13, v19, v20);
  if (v69 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v69 >= 0)
    v39 = v69 & 0x7F;
  else
    v39 = v68;
  sub_22F0A02E8(a1, p_p, v39);
  if (v69 < 0)
    operator delete(__p);
  v40 = *(_QWORD *)(v7 + 80);
  if (v40 && (*(_DWORD *)(v40 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(v40 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
    sub_22F09D9C0(a1, v40, 0);
  if ((*(_WORD *)(v35 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC && v35)
  {
    sub_22F09CFFC(a1, v35 - 64, 0);
  }
  else
  {
    v41 = *(llvm::raw_ostream **)(a1 + 8);
    v42 = (_BYTE *)*((_QWORD *)v41 + 4);
    if ((unint64_t)v42 >= *((_QWORD *)v41 + 3))
    {
      llvm::raw_ostream::write(v41);
    }
    else
    {
      *((_QWORD *)v41 + 4) = v42 + 1;
      *v42 = 64;
    }
  }
  v43 = *(llvm::raw_ostream **)(a1 + 8);
  v44 = *((_QWORD *)v43 + 4);
  if ((unint64_t)(*((_QWORD *)v43 + 3) - v44) > 2)
  {
    *(_BYTE *)(v44 + 2) = 88;
    *(_WORD *)v44 = 16729;
    *((_QWORD *)v43 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v43, "YAX");
  }
  v45 = *(llvm::raw_ostream **)(a1 + 8);
  v46 = (_BYTE *)*((_QWORD *)v45 + 4);
  if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
  {
    llvm::raw_ostream::write(v45);
  }
  else
  {
    *((_QWORD *)v45 + 4) = v46 + 1;
    *v46 = 80;
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v47 = *(llvm::raw_ostream **)(a1 + 8);
    v48 = (_BYTE *)*((_QWORD *)v47 + 4);
    if ((unint64_t)v48 >= *((_QWORD *)v47 + 3))
    {
      llvm::raw_ostream::write(v47);
    }
    else
    {
      *((_QWORD *)v47 + 4) = v48 + 1;
      *v48 = 69;
    }
  }
  v49 = *(llvm::raw_ostream **)(a1 + 8);
  v50 = (_BYTE *)*((_QWORD *)v49 + 4);
  if ((unint64_t)v50 >= *((_QWORD *)v49 + 3))
  {
    llvm::raw_ostream::write(v49);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 65;
  }
  sub_22F0AA1E8((uint64_t)&__p, "__block_literal", 15, v19, v20);
  if (v69 >= 0)
    v51 = (char *)&__p;
  else
    v51 = (char *)__p;
  if (v69 >= 0)
    v52 = v69 & 0x7F;
  else
    v52 = v68;
  sub_22F0A99C4((llvm::raw_ostream *)a1, 0, v51, v52, 0, 0);
  if (v69 < 0)
    operator delete(__p);
  v53 = *(llvm::raw_ostream **)(a1 + 8);
  v54 = (_WORD *)*((_QWORD *)v53 + 4);
  if (*((_QWORD *)v53 + 3) - (_QWORD)v54 > 1uLL)
  {
    *v54 = 23104;
    *((_QWORD *)v53 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v53, "@Z");
  }
  if ((*(_WORD *)(v35 + 8) & 0x7Eu) - 34 >= 4)
    goto LABEL_147;
}

uint64_t sub_22F09FFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm *v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46[2];
  _QWORD v47[32];

  v47[30] = *MEMORY[0x24BDAC8D0];
  v45 = 0;
  v46[0] = (char *)v47;
  v46[1] = (char *)0xA00000000;
  v44 = 0;
  v42 = a1 + 32;
  sub_22F0A1300(a1 + 32, (uint64_t)v46);
  v41 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  v8 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  v40 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = 0;
  v39 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  v9 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  v38 = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 328) = 0;
  v11 = *(_QWORD **)(a1 + 464);
  v10 = *(_QWORD **)(a1 + 472);
  v12 = v44;
  *(_QWORD *)(a1 + 464) = &v44;
  *(_QWORD *)(a1 + 472) = v12;
  v43 = v11;
  v44 = v10;
  v13 = *(_QWORD *)(a1 + 480);
  v14 = v45;
  *(_QWORD *)(a1 + 480) = v45;
  v45 = v13;
  v15 = v12 + 2;
  if (v14)
    v16 = v15;
  else
    v16 = (_QWORD *)(a1 + 464);
  *v16 = a1 + 472;
  if (v13)
    v10[2] = &v44;
  else
    v43 = &v44;
  v17 = *(llvm::raw_ostream **)(a1 + 8);
  v18 = (_WORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 9279;
    *((_QWORD *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, "?$");
  }
  sub_22F09D9C0(a1, a2, a3);
  if (*(_DWORD *)(a4 + 8))
  {
    v30 = 0;
    v31 = 0;
    v32 = a2 & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)(v32 + 56) + 16;
    do
    {
      v34 = (_DWORD *)(*(_QWORD *)a4 + v30);
      if (v31 && *v34 == 8 && *(_DWORD *)(*(_QWORD *)a4 + 24 * (v31 - 1)) == 8)
      {
        v35 = *(llvm::raw_ostream **)(a1 + 8);
        v36 = *((_QWORD *)v35 + 4);
        if ((unint64_t)(*((_QWORD *)v35 + 3) - v36) > 2)
        {
          *(_BYTE *)(v36 + 2) = 90;
          *(_WORD *)v36 = 9252;
          *((_QWORD *)v35 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v35, "$$Z");
        }
      }
      sub_22F0A15BC(a1, v32, (uint64_t)v34, *(_QWORD *)(v33 + 8 * v31++));
      v30 += 24;
    }
    while (v31 < *(unsigned int *)(a4 + 8));
  }
  sub_22F0A1300(v42, (uint64_t)v46);
  v19 = *(llvm **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v41;
  *(_QWORD *)(a1 + 296) = v8;
  v20 = *(unsigned int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = v40;
  v21 = *(llvm **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v39;
  *(_QWORD *)(a1 + 320) = v9;
  v22 = *(unsigned int *)(a1 + 328);
  *(_DWORD *)(a1 + 328) = v38;
  v23 = *(_QWORD **)(a1 + 472);
  v24 = v44;
  *(_QWORD *)(a1 + 464) = v43;
  *(_QWORD *)(a1 + 472) = v24;
  v44 = v23;
  v25 = *(_QWORD *)(a1 + 480);
  v26 = v45;
  *(_QWORD *)(a1 + 480) = v45;
  v45 = v25;
  v27 = v24 + 2;
  v28 = v26 == 0;
  v29 = (_QWORD *)(a1 + 464);
  if (!v28)
    v29 = v27;
  *v29 = a1 + 472;
  if (v25)
    v23[2] = &v44;
  sub_22F258024(v23);
  sub_22E3B9848(v46);
  llvm::deallocate_buffer(v21, (void *)(16 * v22));
  return llvm::deallocate_buffer(v19, (void *)(16 * v20));
}

_BYTE *sub_22F0A02E8(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  char v11;
  BOOL v12;
  const void *v13;
  const void *v14;
  void **v15;
  _BYTE *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  llvm::raw_ostream *v22;
  void *__dst[2];
  unint64_t v24;

  v6 = a1 + 32;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v8)
    goto LABEL_15;
  v9 = 24 * v8;
  v10 = *(const void ***)(a1 + 32);
  while (1)
  {
    v11 = *((_BYTE *)v10 + 23);
    v12 = v11 < 0;
    if (v11 >= 0)
      v13 = v10;
    else
      v13 = *v10;
    v14 = (const void *)(v11 & 0x7F);
    if (v12)
      v14 = v10[1];
    if (v14 == (const void *)a3 && (!a3 || !memcmp(v13, a2, a3)))
      break;
    v10 += 3;
    v9 -= 24;
    if (!v9)
    {
      v10 = (const void **)(v7 + 24 * v8);
      break;
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v7) >> 3) != v8)
    return (_BYTE *)llvm::raw_ostream::operator<<();
  if (v8 <= 9)
  {
LABEL_15:
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v17 = a3 | 7;
      v18 = v17 + 1;
      v15 = (void **)operator new(v17 + 1);
      __dst[1] = (void *)a3;
      v24 = v18 | 0x8000000000000000;
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(v24) = a3;
      v15 = __dst;
      if (!a3)
      {
LABEL_24:
        *((_BYTE *)v15 + a3) = 0;
        v19 = sub_22E3B9688(v6, (unint64_t)__dst, 1);
        v20 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 40);
        v21 = *(_OWORD *)v19;
        *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
        *(_OWORD *)v20 = v21;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)v19 = 0;
        ++*(_DWORD *)(a1 + 40);
        if (SHIBYTE(v24) < 0)
          operator delete(__dst[0]);
        goto LABEL_26;
      }
    }
    memmove(v15, a2, a3);
    goto LABEL_24;
  }
LABEL_26:
  v22 = *(llvm::raw_ostream **)(a1 + 8);
  result = (_BYTE *)*((_QWORD *)v22 + 4);
  if (a3 <= *((_QWORD *)v22 + 3) - (_QWORD)result)
  {
    if (a3)
    {
      memcpy(result, a2, a3);
      result = (_BYTE *)(*((_QWORD *)v22 + 4) + a3);
      *((_QWORD *)v22 + 4) = result;
    }
  }
  else
  {
    v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v22, a2);
    result = (_BYTE *)*((_QWORD *)v22 + 4);
  }
  if ((unint64_t)result >= *((_QWORD *)v22 + 3))
    return (_BYTE *)llvm::raw_ostream::write(v22);
  *((_QWORD *)v22 + 4) = result + 1;
  *result = 64;
  return result;
}

void sub_22F0A0520(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  const llvm::detail::IEEEFloat *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  int v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  const llvm::APInt *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  _WORD *v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  const llvm::APInt *v47;
  const llvm::APInt *v48;
  uint64_t v49;
  llvm::APFloatBase *v50;
  uint64_t v51;
  const llvm::detail::IEEEFloat *v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  unint64_t v55;
  int v56;
  unsigned int i;
  unsigned int v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  int v83;
  llvm::raw_ostream *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  llvm::raw_ostream *v89;
  _BYTE *v90;
  int v91;
  llvm::raw_ostream *v92;
  const char *v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[3];
  __int16 v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  uint64_t v111;
  unsigned int v112;
  char v113;
  unint64_t v114[3];
  uint64_t v115;
  unsigned int v116;
  char v117;
  _BYTE v118[8];
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[8];
  uint64_t v122;
  uint64_t v123;
  _BYTE v124[8];
  uint64_t v125;
  _QWORD v126[3];

  v126[2] = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)a3)
  {
    case 0:
    case 1:
      if (a4)
        sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      goto LABEL_117;
    case 2:
      if (a4)
        sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v22 = *(llvm::raw_ostream **)(a1 + 8);
      v23 = (_BYTE *)*((_QWORD *)v22 + 4);
      if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
      {
        llvm::raw_ostream::write(v22);
      }
      else
      {
        *((_QWORD *)v22 + 4) = v23 + 1;
        *v23 = 48;
      }
      v48 = (const llvm::APInt *)(a3 + 8);
      v116 = *(_DWORD *)(a3 + 16);
      if (v116 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v115, v48);
      else
        v115 = *(_QWORD *)v48;
      v117 = *(_BYTE *)(a3 + 20);
      sub_22F0A8F10(a1, (llvm::APInt *)&v115);
      if (v116 >= 0x41 && v115)
        MEMORY[0x2348A0E84](v115, 0x1000C8000313F17);
      return;
    case 3:
      if (a4)
        sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v14 = *(_QWORD *)(a3 + 16);
      v13 = (const llvm::detail::IEEEFloat *)(a3 + 16);
      v15 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
      if (v15 == v14)
        MEMORY[0x23489F2A0](&v125, v13);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v125, v13);
      sub_22F0A9E64(a1, (uint64_t)v124);
      if (v15 == v125)
        sub_22E463170((llvm::APFloatBase *)v126);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v125);
      return;
    case 5:
      v9 = *(llvm::raw_ostream **)(a1 + 8);
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v10 + 1;
        *v10 = 50;
      }
      sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v31 = *(llvm::raw_ostream **)(a1 + 8);
      v32 = (_BYTE *)*((_QWORD *)v31 + 4);
      if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
      {
        llvm::raw_ostream::write(v31);
      }
      else
      {
        *((_QWORD *)v31 + 4) = v32 + 1;
        *v32 = 48;
      }
      v35 = (const llvm::APInt *)(a3 + 8);
      v112 = *(_DWORD *)(a3 + 16);
      if (v112 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v111, v35);
      else
        v111 = *(_QWORD *)v35;
      v113 = *(_BYTE *)(a3 + 20);
      sub_22F0A8F10(a1, (llvm::APInt *)&v111);
      if (v112 >= 0x41 && v111)
        MEMORY[0x2348A0E84](v111, 0x1000C8000313F17);
      v45 = *(llvm::raw_ostream **)(a1 + 8);
      v46 = (_BYTE *)*((_QWORD *)v45 + 4);
      if ((unint64_t)v46 >= *((_QWORD *)v45 + 3))
      {
        llvm::raw_ostream::write(v45);
      }
      else
      {
        *((_QWORD *)v45 + 4) = v46 + 1;
        *v46 = 48;
      }
      v47 = (const llvm::APInt *)(a3 + 24);
      v109 = *(_DWORD *)(a3 + 32);
      if (v109 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v108, v47);
      else
        v108 = *(_QWORD *)v47;
      v110 = *(_BYTE *)(a3 + 36);
      sub_22F0A8F10(a1, (llvm::APInt *)&v108);
      if (v109 >= 0x41 && v108)
        MEMORY[0x2348A0E84](v108, 0x1000C8000313F17);
      goto LABEL_87;
    case 6:
      v24 = *(llvm::raw_ostream **)(a1 + 8);
      v25 = (_BYTE *)*((_QWORD *)v24 + 4);
      if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
      {
        llvm::raw_ostream::write(v24);
      }
      else
      {
        *((_QWORD *)v24 + 4) = v25 + 1;
        *v25 = 50;
      }
      sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v49 = *(_QWORD *)(a3 + 16);
      v51 = llvm::APFloatBase::PPCDoubleDouble(v50);
      if (v51 == v49)
        MEMORY[0x23489F2A0](&v122, a3 + 16);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v122, (const llvm::detail::IEEEFloat *)(a3 + 16));
      sub_22F0A9E64(a1, (uint64_t)v121);
      if (v51 == v122)
        sub_22E463170((llvm::APFloatBase *)&v123);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v122);
      v52 = (const llvm::detail::IEEEFloat *)(a3 + 48);
      if (v51 == *(_QWORD *)(a3 + 48))
        MEMORY[0x23489F2A0](&v119, v52);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v119, v52);
      sub_22F0A9E64(a1, (uint64_t)v118);
      if (v51 == v119)
        sub_22E463170((llvm::APFloatBase *)&v120);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v119);
LABEL_87:
      v53 = *(llvm::raw_ostream **)(a1 + 8);
      v54 = (_BYTE *)*((_QWORD *)v53 + 4);
      if ((unint64_t)v54 < *((_QWORD *)v53 + 3))
        goto LABEL_118;
      llvm::raw_ostream::write(v53);
      return;
    case 7:
      if (a4)
        sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      if ((*(_BYTE *)(a3 + 52) & 2) != 0)
        goto LABEL_177;
      v16 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)v114 = v16;
      v17 = *(_DWORD *)(a3 + 48);
      if (v17 == -1)
      {
        if ((unint64_t)v16 > 3)
          goto LABEL_177;
LABEL_124:
        v73 = *(llvm::raw_ostream **)(a1 + 8);
        v74 = (_BYTE *)*((_QWORD *)v73 + 4);
        if (*((_BYTE **)v73 + 3) == v74)
        {
          llvm::raw_ostream::write(v73, "0");
        }
        else
        {
          *v74 = 48;
          ++*((_QWORD *)v73 + 4);
        }
        sub_22F0A8DC0(a1, *(_QWORD *)(a3 + 24));
        return;
      }
      if (!v17)
      {
        if ((unint64_t)v16 >= 4)
        {
          if ((v16 & 3) == 0)
          {
            v91 = v16 & 0xFFFFFFFC;
            if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v92 = *(llvm::raw_ostream **)(a1 + 8);
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE) == 0x28)
                v93 = "E";
              else
                v93 = "1";
              v94 = (char *)*((_QWORD *)v92 + 4);
              if (*((char **)v92 + 3) == v94)
              {
                llvm::raw_ostream::write(v92, v93);
              }
              else
              {
                *v94 = *v93;
                ++*((_QWORD *)v92 + 4);
              }
              sub_22F09CC20(a1, v91, 0, "?", 1uLL);
              return;
            }
          }
          goto LABEL_177;
        }
        goto LABEL_124;
      }
      v18 = (uint64_t *)(a3 + 56);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 39)
      {
        v19 = *(llvm::raw_ostream **)(a1 + 8);
        v20 = (_BYTE *)*((_QWORD *)v19 + 4);
        if (*((_BYTE **)v19 + 3) == v20)
        {
          v21 = 1;
          llvm::raw_ostream::write(v19, "5");
        }
        else
        {
          *v20 = 53;
          ++*((_QWORD *)v19 + 4);
          v21 = 1;
        }
      }
      else
      {
        v21 = 0;
      }
      v75 = sub_22EF52AD4(v114);
      v76 = *(unsigned int *)(a3 + 48);
      if ((v76 - 3) <= 0xFFFFFFFB)
      {
        v78 = (uint64_t *)*v18;
        v77 = *v18 + 8 * v76;
        goto LABEL_131;
      }
      if ((_DWORD)v76)
      {
        v77 = (uint64_t)&v18[v76];
        v78 = (uint64_t *)(a3 + 56);
LABEL_131:
        while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) & 0xFEu)
              - 2 >= 4)
        {
          v79 = *v78 & 0xFFFFFFFFFFFFFFF8;
          if (!v79 || (*(_DWORD *)(v79 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
            break;
          v81 = *(llvm::raw_ostream **)(a1 + 8);
          v82 = (_BYTE *)*((_QWORD *)v81 + 4);
          if (*((_BYTE **)v81 + 3) == v82)
          {
            llvm::raw_ostream::write(v81, "6");
          }
          else
          {
            *v82 = 54;
            ++*((_QWORD *)v81 + 4);
          }
          ++v21;
          v75 = *(_QWORD *)(v79 + 48);
          if (++v78 == (uint64_t *)v77)
            goto LABEL_142;
        }
        goto LABEL_177;
      }
LABEL_142:
      if ((v114[0] & 3) != 0 || (v83 = v114[0] & 0xFFFFFFFC, (v114[0] & 0xFFFFFFFFFFFFFFFCLL) == 0))
      {
LABEL_177:
        v101 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        v102 = sub_22F41A810(*(_QWORD *)(v101 + 32), 4, "cannot mangle this template argument yet", 0x28uLL);
        *(_DWORD *)(v101 + 312) = 0;
        *(_DWORD *)(v101 + 316) = v102;
        if (*(char *)(v101 + 311) < 0)
        {
          **(_BYTE **)(v101 + 288) = 0;
          *(_QWORD *)(v101 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v101 + 288) = 0;
          *(_BYTE *)(v101 + 311) = 0;
        }
        v106[0] = v101 + 320;
        v106[1] = 0;
        v106[2] = v101;
        v107 = 1;
        *(_BYTE *)(v101 + 320) = 0;
        *(_DWORD *)(v101 + 664) = 0;
        v103 = *(unsigned int *)(v101 + 776);
        if ((_DWORD)v103)
        {
          v104 = *(_QWORD *)(v101 + 768);
          v105 = 56 * v103;
          do
          {
            if (*(char *)(v104 + v105 - 9) < 0)
              operator delete(*(void **)(v104 + v105 - 32));
            v105 -= 56;
          }
          while (v105);
        }
        *(_DWORD *)(v101 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v106);
        return;
      }
      v84 = *(llvm::raw_ostream **)(a1 + 8);
      v85 = (_BYTE *)*((_QWORD *)v84 + 4);
      if (*((_BYTE **)v84 + 3) == v85)
      {
        llvm::raw_ostream::write(v84, "E");
      }
      else
      {
        *v85 = 69;
        ++*((_QWORD *)v84 + 4);
      }
      sub_22F09CC20(a1, v83, 0, "?", 1uLL);
      v86 = *(unsigned int *)(a3 + 48);
      if ((v86 - 3) <= 0xFFFFFFFB)
      {
        v18 = (uint64_t *)*v18;
      }
      else if (!(_DWORD)v86)
      {
        goto LABEL_150;
      }
      v87 = &v18[v86];
      do
      {
        v88 = *v18++;
        sub_22F09D9C0(a1, v88 & 0xFFFFFFFFFFFFFFF8, 0);
      }
      while (v18 != v87);
LABEL_150:
      while (v21)
      {
        v89 = *(llvm::raw_ostream **)(a1 + 8);
        v90 = (_BYTE *)*((_QWORD *)v89 + 4);
        if ((unint64_t)v90 >= *((_QWORD *)v89 + 3))
        {
          llvm::raw_ostream::write(v89);
        }
        else
        {
          *((_QWORD *)v89 + 4) = v90 + 1;
          *v90 = 64;
        }
        --v21;
      }
      return;
    case 8:
      v11 = *(llvm::raw_ostream **)(a1 + 8);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
      {
        llvm::raw_ostream::write(v11);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v12 + 1;
        *v12 = 50;
      }
      sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v33 = *(llvm::raw_ostream **)(a1 + 8);
      v34 = (_BYTE *)*((_QWORD *)v33 + 4);
      if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
      {
        llvm::raw_ostream::write(v33);
      }
      else
      {
        *((_QWORD *)v33 + 4) = v34 + 1;
        *v34 = 51;
      }
      v36 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (!v36 || *(unsigned __int8 *)(v36 + 16) - 57 <= 0xFFFFFFFD)
        v36 = sub_22F10CF48(v36);
      v37 = *(_QWORD *)(v36 + 32);
      sub_22F0A1E3C((llvm::APInt **)a1, v37, 0, 2);
      v38 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 72 * v38;
        do
        {
          sub_22F0A0520(a1, v37, *(_QWORD *)(a3 + 8) + v39, 0);
          v41 = *(llvm::raw_ostream **)(a1 + 8);
          v42 = (_BYTE *)*((_QWORD *)v41 + 4);
          if ((unint64_t)v42 >= *((_QWORD *)v41 + 3))
          {
            llvm::raw_ostream::write(v41);
          }
          else
          {
            *((_QWORD *)v41 + 4) = v42 + 1;
            *v42 = 64;
          }
          v39 += 72;
        }
        while (v40 != v39);
      }
      v43 = *(llvm::raw_ostream **)(a1 + 8);
      v44 = (_WORD *)*((_QWORD *)v43 + 4);
      if (*((_QWORD *)v43 + 3) - (_QWORD)v44 > 1uLL)
      {
        *v44 = 16448;
        *((_QWORD *)v43 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v43, "@@");
      }
      return;
    case 9:
      v26 = *(llvm::raw_ostream **)(a1 + 8);
      v27 = (_BYTE *)*((_QWORD *)v26 + 4);
      if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
      {
        llvm::raw_ostream::write(v26);
      }
      else
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        *v27 = 51;
      }
      v55 = *(_QWORD *)(sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 8), a2) + 32);
      sub_22F0A1E3C((llvm::APInt **)a1, v55, 0, 2);
      v56 = *(_DWORD *)(a3 + 20);
      if (v56)
      {
        for (i = 0; i != v56; ++i)
        {
          v58 = *(_DWORD *)(a3 + 16);
          if (i < v58)
            v58 = i;
          sub_22F0A0520(a1, v55, *(_QWORD *)(a3 + 8) + 72 * v58, 0);
          v59 = *(llvm::raw_ostream **)(a1 + 8);
          v60 = (_BYTE *)*((_QWORD *)v59 + 4);
          if ((unint64_t)v60 >= *((_QWORD *)v59 + 3))
          {
            llvm::raw_ostream::write(v59);
          }
          else
          {
            *((_QWORD *)v59 + 4) = v60 + 1;
            *v60 = 64;
          }
        }
      }
      goto LABEL_117;
    case 0xA:
      v28 = *(llvm::raw_ostream **)(a1 + 8);
      v29 = (_BYTE *)*((_QWORD *)v28 + 4);
      if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
      {
        llvm::raw_ostream::write(v28);
      }
      else
      {
        *((_QWORD *)v28 + 4) = v29 + 1;
        *v29 = 50;
      }
      sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v61 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      v62 = 0;
      if (v61)
      {
        if ((*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 >= 3)
          v62 = 0;
        else
          v62 = v61;
      }
      v63 = sub_22E46A3A0(v62);
      if (v63 != v64)
      {
        v65 = v63;
        v66 = v64;
        v67 = 0;
        do
        {
          v68 = *(_QWORD *)(**(_QWORD **)(v65 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v68 + 8) & 0xF) != 0)
            v68 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v65 + 16));
          sub_22F0A0520(a1, v68 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a3 + 8) + 72 * v67, 0);
          v65 += 24;
          ++v67;
        }
        while (v65 != v66);
      }
      v69 = sub_22EFC3B90(v62);
      if (!v69)
        goto LABEL_117;
      v70 = v69;
LABEL_111:
      if ((*(_BYTE *)(v70 + 68) & 1) == 0 || *(_QWORD *)(v70 + 40))
      {
        v71 = *(_QWORD *)(v70 + 48);
        v72 = sub_22EFC306C(v70);
        sub_22F0A0520(a1, v71, *(_QWORD *)(a3 + 8) + 72 * (*(_DWORD *)(a3 + 16) + v72), 1);
      }
      while (1)
      {
        v70 = *(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v70)
          break;
        if ((*(_DWORD *)(v70 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_111;
      }
LABEL_117:
      v53 = *(llvm::raw_ostream **)(a1 + 8);
      v54 = (_BYTE *)*((_QWORD *)v53 + 4);
      if ((unint64_t)v54 >= *((_QWORD *)v53 + 3))
      {
        llvm::raw_ostream::write(v53);
      }
      else
      {
LABEL_118:
        *((_QWORD *)v53 + 4) = v54 + 1;
        *v54 = 64;
      }
      return;
    case 0xB:
      v7 = *(llvm::raw_ostream **)(a1 + 8);
      v8 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v8 + 1;
        *v8 = 55;
      }
      sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      v30 = *(_QWORD *)(a3 + 8);
      if (v30)
      {
        sub_22F09D9C0(a1, *(_QWORD *)(a3 + 8), 0);
        sub_22F0A0520(a1, *(_QWORD *)(v30 + 48), *(_QWORD *)(a3 + 16), 0);
      }
      goto LABEL_117;
    case 0xC:
      if (a4)
        sub_22F0A1E3C((llvm::APInt **)a1, a2, 0, 2);
      if (*(_DWORD *)(a3 + 16))
        goto LABEL_177;
      v95 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
      v96 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (v96)
        v97 = *(_BYTE *)(v96 + 16) == 31;
      else
        v97 = 0;
      if (!v97)
        v96 = sub_22F10CF48(v96);
      v98 = sub_22F40AE38(v96);
      v99 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
      v100 = *v95;
      if ((*v95 && *(_BYTE *)(v100 + 16) == 31
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v100 = sub_22F10CF48(v100)) != 0)
        && sub_22F2559E0(v100))
      {
        sub_22F0A6930((llvm::raw_ostream **)a1, v98, v99, "", 0);
      }
      else
      {
        sub_22F0A6AF0((llvm::raw_ostream **)a1, v98, v99, "", 0);
      }
      return;
    default:
      goto LABEL_177;
  }
}

void sub_22F0A1300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == a1 + 16 || *(_QWORD *)a2 == a2 + 16)
    {
      if (*(_DWORD *)(a1 + 12) < *(_DWORD *)(a2 + 8))
        sub_22F243B14(a1);
      v7 = *(_DWORD *)(a1 + 8);
      if (*(_DWORD *)(a2 + 12) < v7)
      {
        sub_22F243B14(a2);
        v7 = *(_DWORD *)(a1 + 8);
      }
      v8 = *(_DWORD *)(a2 + 8);
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = v7;
      if ((_DWORD)v9)
      {
        v10 = 0;
        do
        {
          v11 = (__int128 *)(*(_QWORD *)a1 + v10);
          v12 = (__int128 *)(*(_QWORD *)a2 + v10);
          v13 = *((_QWORD *)v11 + 2);
          v14 = *v11;
          v15 = *((_QWORD *)v12 + 2);
          *v11 = *v12;
          *((_QWORD *)v11 + 2) = v15;
          *v12 = v14;
          *((_QWORD *)v12 + 2) = v13;
          v10 += 24;
        }
        while (24 * v9 != v10);
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a2 + 8);
      }
      v16 = v7 - v8;
      if (v7 <= v8)
      {
        v28 = v8 - v7;
        if (v8 > v7)
        {
          v29 = *(_QWORD *)a2;
          if ((_DWORD)v9 != v8)
          {
            v30 = *(_QWORD *)a1 + 24 * v7;
            v31 = (__int128 *)(v29 + 24 * v9);
            v32 = 24 * v8 - 24 * v9;
            do
            {
              if (*((char *)v31 + 23) < 0)
              {
                sub_22E3BB2B4((_BYTE *)v30, *(void **)v31, *((_QWORD *)v31 + 1));
              }
              else
              {
                v33 = *v31;
                *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
                *(_OWORD *)v30 = v33;
              }
              v31 = (__int128 *)((char *)v31 + 24);
              v30 += 24;
              v32 -= 24;
            }
            while (v32);
            v7 = *(_DWORD *)(a1 + 8);
            v29 = *(_QWORD *)a2;
          }
          *(_DWORD *)(a1 + 8) = v28 + v7;
          v34 = *(unsigned int *)(a2 + 8);
          if ((_DWORD)v34 != (_DWORD)v9)
          {
            v35 = 3 * v34;
            v36 = v29 + 24 * v34 - 1;
            v37 = 24 * v9 - 8 * v35;
            v38 = (char *)v36;
            do
            {
              v39 = *v38;
              v38 -= 24;
              if (v39 < 0)
                operator delete(*(void **)(v36 - 23));
              v36 = (uint64_t)v38;
              v37 += 24;
            }
            while (v37);
          }
          *(_DWORD *)(a2 + 8) = v9;
        }
      }
      else
      {
        v17 = *(_QWORD *)a1;
        if ((_DWORD)v9 != v7)
        {
          v18 = *(_QWORD *)a2 + 24 * v8;
          v19 = (__int128 *)(v17 + 24 * v9);
          v20 = 24 * v7 - 24 * v9;
          do
          {
            if (*((char *)v19 + 23) < 0)
            {
              sub_22E3BB2B4((_BYTE *)v18, *(void **)v19, *((_QWORD *)v19 + 1));
            }
            else
            {
              v21 = *v19;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
              *(_OWORD *)v18 = v21;
            }
            v19 = (__int128 *)((char *)v19 + 24);
            v18 += 24;
            v20 -= 24;
          }
          while (v20);
          v8 = *(_DWORD *)(a2 + 8);
          v17 = *(_QWORD *)a1;
        }
        *(_DWORD *)(a2 + 8) = v16 + v8;
        v22 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v22 != (_DWORD)v9)
        {
          v23 = 3 * v22;
          v24 = v17 + 24 * v22 - 1;
          v25 = 24 * v9 - 8 * v23;
          v26 = (char *)v24;
          do
          {
            v27 = *v26;
            v26 -= 24;
            if (v27 < 0)
              operator delete(*(void **)(v24 - 23));
            v24 = (uint64_t)v26;
            v25 += 24;
          }
          while (v25);
        }
        *(_DWORD *)(a1 + 8) = v9;
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
}

void sub_22F0A15BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  llvm::raw_ostream **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  unsigned int v36;
  const char *v37;
  size_t v38;
  void *v39;
  llvm::raw_ostream *v40;
  unsigned int v41;
  int v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  unint64_t v45;
  _WORD *v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  llvm::raw_ostream **v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;

  switch(*(_DWORD *)a3)
  {
    case 1:
      sub_22F0A1E3C((llvm::APInt **)a1, *(_QWORD *)(a3 + 8), 0, 2);
      return;
    case 2:
      v8 = *(_QWORD *)(a3 + 16);
      v9 = *(_DWORD *)(v8 + 28);
      v10 = (v9 & 0x7F) - 49;
      v11 = v10 > 0x13;
      v12 = (1 << v10) & 0x80007;
      if (!v11 && v12 != 0)
      {
        v14 = *(_QWORD *)(v8 + 16);
        v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 4) != 0)
          v15 = (_QWORD *)*v15;
        if (v15)
          v16 = (uint64_t)(v15 - 8);
        else
          v16 = 0;
        v17 = sub_22E6939D8(v16);
        v18 = (llvm::raw_ostream **)a1;
        v19 = v8;
        goto LABEL_16;
      }
      v41 = (v9 & 0x7E) - 58;
      if (v41 < 0xFFFFFFFA)
      {
        v42 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
        if (v42 == 45)
        {
          v43 = *(llvm::raw_ostream **)(a1 + 8);
          v44 = (_BYTE *)*((_QWORD *)v43 + 4);
          if (*((_BYTE **)v43 + 3) == v44)
          {
            llvm::raw_ostream::write(v43, "$");
          }
          else
          {
            *v44 = 36;
            ++*((_QWORD *)v43 + 4);
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v45 + 8) & 0xF) != 0)
            v45 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v8 + 48));
          sub_22F0A0520(a1, v45 & 0xFFFFFFFFFFFFFFF0, v8 + 64, 0);
        }
        else
        {
          if ((v42 & 0xFE) == 0x28)
            v53 = "$E?";
          else
            v53 = "$1?";
          sub_22F09CC20(a1, *(_QWORD *)(a3 + 16), 0, v53, 3uLL);
        }
        return;
      }
      if (v41 >= 0xFFFFFFFC
        && (*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 32))(*(_QWORD *)(a3 + 16)) + 80) & 0xE000) != 0x4000
        && ((*(_QWORD *)(v8 + 40) & 7) != 6
         || (*(_DWORD *)(*(_QWORD *)(v8 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
      {
        v54 = *(_WORD *)(v8 + 80) & 0x7F;
        v55 = -40;
        if (v54 > 0x46)
        {
          if (v54 != 83)
          {
            if (v54 == 71)
            {
              v55 = -56;
              goto LABEL_114;
            }
            if (v54 == 81)
              goto LABEL_114;
LABEL_109:
            v65 = v54 - 52;
            v32 = v54 - 33 >= 5;
            v66 = -48;
            if (!v32)
              v66 = -64;
            if (v65 >= 6)
              v55 = v66;
            else
              v55 = -72;
          }
        }
        else
        {
          if (v54 > 0x18)
            goto LABEL_108;
          if (v54 != 16)
          {
            if (((1 << v54) & 0x1066) != 0)
              goto LABEL_114;
            if (v54 != 24)
            {
LABEL_108:
              if (v54 == 70)
              {
                v55 = -64;
                goto LABEL_114;
              }
              goto LABEL_109;
            }
          }
          v55 = -48;
        }
LABEL_114:
        v67 = *(_QWORD *)(v8 + 72 + v55 + 16);
        v68 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
        if ((v67 & 4) != 0)
          v68 = (_QWORD *)*v68;
        if (v68)
          v69 = (uint64_t)(v68 - 8);
        else
          v69 = 0;
        v70 = sub_22E6939D8(v69);
        v71 = (llvm::raw_ostream **)a1;
        v72 = v8;
        goto LABEL_120;
      }
      v47 = *(llvm::raw_ostream **)(a1 + 8);
      v48 = *((_QWORD *)v47 + 4);
      if ((unint64_t)(*((_QWORD *)v47 + 3) - v48) > 2)
      {
        *(_BYTE *)(v48 + 2) = 63;
        *(_WORD *)v48 = 12580;
        *((_QWORD *)v47 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v47, "$1?");
      }
      if (sub_22E462B18(v8))
        v49 = v8 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v8) + 96) & 0x80) == 0);
      else
        v49 = v8;
      sub_22F09CFFC(a1, v49, 0);
      if (sub_22E462B18(v8))
        v8 = v8 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v8) + 96) & 0x80) == 0);
      sub_22F09D070(a1, v8, 0, 1);
      return;
    case 3:
      v23 = *(_QWORD *)(a3 + 8);
      v24 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
      if (v24)
        v25 = *(_BYTE *)(v24 + 16) == 31;
      else
        v25 = 0;
      if (v25)
        goto LABEL_86;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
        goto LABEL_27;
      v26 = sub_22F10CF48(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
      if (!v26)
        goto LABEL_27;
      v24 = v26;
LABEL_86:
      v56 = sub_22F40AE38(v24);
      v57 = v24;
      if ((*(_BYTE *)(v24 + 16) == 31
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v57 = sub_22F10CF48(v24)) != 0)
        && sub_22F28C8B4(v57)
        && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x1D)
      {
        v71 = (llvm::raw_ostream **)a1;
        v70 = v56;
        v72 = 0;
LABEL_120:
        sub_22F0A6AF0(v71, v70, v72, "$", 1uLL);
        return;
      }
      if (!sub_22F2559E0(v24))
        goto LABEL_27;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x1D)
      {
        v18 = (llvm::raw_ostream **)a1;
        v17 = v56;
        v19 = 0;
LABEL_16:
        sub_22F0A6930(v18, v17, v19, "$", 1uLL);
        return;
      }
      if ((sub_22F3E87D0(v56) & 1) != 0)
      {
LABEL_27:
        LODWORD(v74) = 64;
        v73 = 0;
        BYTE4(v74) = 1;
      }
      else
      {
        LODWORD(v74) = 64;
        v73 = -1;
        BYTE4(v74) = 0;
      }
      v27 = (_QWORD *)a1;
      v28 = a4;
      v29 = v23;
LABEL_30:
      sub_22F0A6F00(v27, &v73, v28, v29);
      goto LABEL_31;
    case 4:
      v30 = *(_QWORD *)(a3 + 16);
      sub_22E466FDC(a3, (uint64_t)&v73);
      v27 = (_QWORD *)a1;
      v28 = a4;
      v29 = v30;
      goto LABEL_30;
    case 5:
      v73 = *(_QWORD *)(a3 + 8);
      v31 = *(_QWORD *)(sub_22F0F08CC(&v73) + 48);
      if (v31)
        v32 = (*(_DWORD *)(v31 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFB;
      else
        v32 = 0;
      if (v32)
      {
        sub_22F0A9AC8((llvm::raw_ostream *)a1, (unsigned __int16)*(_DWORD *)(v31 + 72) >> 13);
      }
      else
      {
        v33 = *(llvm::raw_ostream **)(a1 + 8);
        v34 = *((_QWORD *)v33 + 4);
        if ((unint64_t)(*((_QWORD *)v33 + 3) - v34) > 2)
        {
          *(_BYTE *)(v34 + 2) = 89;
          *(_WORD *)v34 = 9252;
          *((_QWORD *)v33 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v33, "$$Y");
        }
      }
      sub_22F09CFFC(a1, v31, 0);
      return;
    case 7:
      v7 = *(unsigned __int8 **)(a3 + 8);
      sub_22F00905C((uint64_t)v7, *(_QWORD *)(*(_QWORD *)a1 + 8), 0, (uint64_t)&v73);
      if ((_BYTE)v75)
      {
        sub_22F0A6F00((_QWORD *)a1, &v73, a4, *((_QWORD *)v7 + 1));
        if ((_BYTE)v75)
        {
LABEL_31:
          if (v74 >= 0x41 && v73)
            MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
        }
      }
      else
      {
        v50 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        v51 = sub_22F41A810(*(_QWORD *)(v50 + 32), 4, "cannot yet mangle expression type %0", 0x24uLL);
        sub_22EFF605C((uint64_t)v7);
        *(_DWORD *)(v50 + 312) = v52;
        *(_DWORD *)(v50 + 316) = v51;
        if (*(char *)(v50 + 311) < 0)
        {
          **(_BYTE **)(v50 + 288) = 0;
          *(_QWORD *)(v50 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v50 + 288) = 0;
          *(_BYTE *)(v50 + 311) = 0;
        }
        v58 = v50 + 320;
        v73 = v50 + 320;
        v74 = 0;
        v75 = v50;
        v76 = 1;
        *(_BYTE *)(v50 + 320) = 0;
        *(_DWORD *)(v50 + 664) = 0;
        v59 = *(unsigned int *)(v50 + 776);
        if ((_DWORD)v59)
        {
          v60 = *(_QWORD *)(v50 + 768);
          v61 = 56 * v59;
          do
          {
            if (*(char *)(v60 + v61 - 9) < 0)
              operator delete(*(void **)(v60 + v61 - 32));
            v61 -= 56;
          }
          while (v61);
        }
        *(_DWORD *)(v50 + 776) = 0;
        v62 = *(_QWORD *)sub_22F0D3748(*v7);
        v63 = *(unsigned __int8 *)(v50 + 320);
        *(_BYTE *)(v58 + v63 + 1) = 1;
        *(_BYTE *)(v50 + 320) = v63 + 1;
        *(_QWORD *)(v58 + 8 * v63 + 16) = v62;
        sub_22F0D4E74((uint64_t)v7);
        sub_22E4D6448(v50 + 656, v64, 1);
        sub_22E3BB0B8((uint64_t)&v73);
      }
      return;
    case 8:
      v20 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v20)
      {
        if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x26 || (*(_DWORD *)(a4 + 28) & 0x7F) == 0x20)
        {
          v35 = *(llvm::raw_ostream **)(a1 + 8);
          v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2000) + 192);
          if (v36 <= 0xB532B7F)
            v37 = "$$$V";
          else
            v37 = "$$V";
          if (v36 > 0xB532B7F)
            v38 = 3;
          else
            v38 = 4;
          v39 = (void *)*((_QWORD *)v35 + 4);
          if (v38 <= *((_QWORD *)v35 + 3) - (_QWORD)v39)
          {
            memcpy(v39, v37, v38);
            *((_QWORD *)v35 + 4) += v38;
            return;
          }
          v40 = v35;
        }
        else
        {
          v40 = *(llvm::raw_ostream **)(a1 + 8);
          v46 = (_WORD *)*((_QWORD *)v40 + 4);
          if (*((_QWORD *)v40 + 3) - (_QWORD)v46 > 1uLL)
          {
            *v46 = 21284;
            *((_QWORD *)v40 + 4) += 2;
            return;
          }
          v37 = "$S";
        }
        llvm::raw_ostream::write(v40, v37);
        return;
      }
      v21 = *(_QWORD *)(a3 + 8);
      v22 = 24 * v20;
      do
      {
        sub_22F0A15BC(a1, a2, v21, a4);
        v21 += 24;
        v22 -= 24;
      }
      while (v22);
      return;
    default:
      return;
  }
}

void sub_22F0A1E3C(llvm::APInt **a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v16;
  unint64_t v18;
  BOOL v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  uint64_t v54;
  llvm::APInt **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::APInt **v59;
  uint64_t v60;
  unint64_t v61;
  llvm::raw_ostream *v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  llvm::raw_ostream *v67;
  _WORD *v68;
  BOOL v69;
  llvm::raw_ostream *v70;
  uint64_t v71;
  llvm::raw_ostream *v72;
  _DWORD *v73;
  llvm::raw_ostream *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  char *v81;
  llvm::APInt *v82;
  llvm::APInt *v83;
  unsigned int v84;
  int64_t v85;
  llvm::raw_ostream *v86;
  _BYTE *v87;
  llvm::APInt *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  llvm::APInt *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  llvm::raw_ostream *v105;
  _BYTE *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  char *v116;
  size_t v117;
  int v118;
  int v119;
  char *v120;
  size_t v121;
  const char *v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  const char *v132;
  char *v133;
  size_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  size_t v145;
  llvm::APInt *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  llvm::raw_ostream *v206;
  char *v207;
  char v208;
  llvm::raw_ostream *v209;
  __int16 *v210;
  const char *v211;
  llvm::raw_ostream *v212;
  _WORD *v213;
  char *v214;
  llvm::raw_ostream *v215;
  _WORD *v216;
  uint64_t v217;
  llvm::raw_ostream *v218;
  size_t v219;
  llvm::raw_ostream *v220;
  _WORD *v221;
  llvm::raw_ostream *v222;
  _WORD *v223;
  llvm::raw_ostream *v224;
  _WORD *v225;
  llvm::raw_ostream *v226;
  _WORD *v227;
  llvm::raw_ostream *v228;
  _WORD *v229;
  llvm::raw_ostream *v230;
  _WORD *v231;
  llvm::raw_ostream *v232;
  _WORD *v233;
  llvm::raw_ostream *v234;
  _WORD *v235;
  llvm::raw_ostream *v236;
  _WORD *v237;
  _OWORD *v238;
  _OWORD *v239;
  _OWORD *v240;
  uint64_t v241;
  _OWORD *v242;
  uint64_t v243;
  char *v244;
  llvm::raw_ostream *v245;
  size_t v246;
  uint64_t v247;
  llvm::raw_ostream *v248;
  _WORD *v249;
  llvm::raw_ostream *v250;
  _WORD *v251;
  llvm::raw_ostream *v252;
  _WORD *v253;
  llvm::raw_ostream *v254;
  _WORD *v255;
  llvm::raw_ostream *v256;
  _WORD *v257;
  llvm::raw_ostream *v258;
  _WORD *v259;
  llvm::raw_ostream *v260;
  _WORD *v261;
  llvm::raw_ostream *v262;
  _WORD *v263;
  llvm::raw_ostream *v264;
  _WORD *v265;
  llvm::raw_ostream *v266;
  _WORD *v267;
  llvm::raw_ostream *v268;
  _WORD *v269;
  llvm::raw_ostream *v270;
  _WORD *v271;
  llvm::raw_ostream *v272;
  _WORD *v273;
  llvm::raw_ostream *v274;
  _WORD *v275;
  llvm::raw_ostream *v276;
  _WORD *v277;
  llvm::raw_ostream *v278;
  _WORD *v279;
  llvm::raw_ostream *v280;
  _WORD *v281;
  llvm::raw_ostream *v282;
  _WORD *v283;
  llvm::raw_ostream *v284;
  _WORD *v285;
  llvm::raw_ostream *v286;
  _WORD *v287;
  llvm::raw_ostream *v288;
  _WORD *v289;
  llvm::raw_ostream *v290;
  _WORD *v291;
  llvm::raw_ostream *v292;
  _WORD *v293;
  llvm::raw_ostream *v294;
  _WORD *v295;
  llvm::raw_ostream *v296;
  _WORD *v297;
  llvm::raw_ostream *v298;
  _WORD *v299;
  char *v300;
  uint64_t v301;
  unsigned int v303;
  llvm::raw_ostream *v304;
  _BYTE *v305;
  __int16 v306;
  int v307;
  const char *v308;
  const char *v309;
  const char *v310;
  const char *v311;
  const char *v312;
  const char *v313;
  const char *v314;
  uint64_t v315;
  __int128 v316;
  llvm::APInt **v318;
  char *v319;
  __int128 v320;
  uint64_t v321;
  _WORD *v322;
  void *v323;
  __int128 v324;
  uint64_t v325;
  _WORD *v326;
  const char *v327;
  uint64_t v328;
  llvm::APInt *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  char *v333;
  uint64_t v334;
  _BYTE v335[240];
  llvm *v336;
  uint64_t v337;
  unsigned int v338;
  llvm *v339;
  uint64_t v340;
  unsigned int v341;
  llvm *v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  _BYTE v350[32];
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD **v355;
  _QWORD *v356;
  uint64_t v357;
  BOOL v358;
  uint64_t v359;

  v359 = *MEMORY[0x24BDAC8D0];
  v318 = a1 + 1;
  while (1)
  {
    v7 = sub_22F40989C(a2, *((_QWORD *)*a1 + 1));
    v8 = v7;
    if ((v7 & 8) != 0)
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v7);
    if (v11)
      break;
    v12 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
    v13 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v16 = v14 <= 0x27 && ((1 << v14) & 0x8180000000) != 0 || (v14 & 0xFE) == 0x28 || v14 == 10;
    v18 = v10 | v8 & 7;
    switch(a4)
    {
      case 0:
        v18 &= 0xFFFFFFFFFFFFFE3FLL;
        break;
      case 1:
        v27 = *v318;
        if (*(unsigned __int8 *)(v13 + 16) - 27 >= 0xFFFFFFFE)
        {
          v97 = (_BYTE *)*((_QWORD *)v27 + 4);
          if ((unint64_t)v97 >= *((_QWORD *)v27 + 3))
          {
            llvm::raw_ostream::write(v27);
          }
          else
          {
            *((_QWORD *)v27 + 4) = v97 + 1;
            *v97 = 54;
          }
          v55 = a1;
          v56 = v13;
LABEL_176:
          v57 = 0;
LABEL_92:
          sub_22F0A709C(v55, v56, 0, v57, 1);
          return;
        }
        v22 = v18 | v9;
LABEL_44:
        sub_22F0A7CF0(v27, v22, 0);
        break;
      case 2:
        if (v16)
          break;
        if (v18)
          v19 = 0;
        else
          v19 = (v9 & 0xC00000000) == 0;
        if (v19)
        {
          v18 = 0;
          break;
        }
        v20 = *v318;
        v21 = *((_QWORD *)*v318 + 4);
        if ((unint64_t)(*((_QWORD *)*v318 + 3) - v21) > 2)
        {
          *(_BYTE *)(v21 + 2) = 67;
          *(_WORD *)v21 = 9252;
          *((_QWORD *)v20 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v20, "$$C");
        }
        v22 = v18 | v9;
LABEL_43:
        v27 = *v318;
        goto LABEL_44;
      case 3:
        v23 = 4294966839;
        if ((v18 & 0x1C0) == 0)
          v23 = 4294967287;
        v18 &= v23;
        if (v16 || (!v18 ? (v24 = (v9 & 0xC00000000) == 0) : (v24 = 0), v24))
        {
          if ((*(_DWORD *)(v13 + 16) & 0xFE) != 0x2C && *(_DWORD *)(v13 + 16) != 55)
            break;
        }
        v25 = *v318;
        v26 = (_BYTE *)*((_QWORD *)*v318 + 4);
        if ((unint64_t)v26 >= *((_QWORD *)*v318 + 3))
        {
          llvm::raw_ostream::write(v25);
        }
        else
        {
          *((_QWORD *)v25 + 4) = v26 + 1;
          *v26 = 63;
        }
        v22 = v9 | v18;
        goto LABEL_43;
      default:
        break;
    }
    v28 = *v12;
    v29 = *(_DWORD *)(*v12 + 16);
    switch((char)v29)
    {
      case 6:
        v115 = *(_QWORD *)(v28 + 32);
        v300 = (char *)&v325;
        v323 = &v325;
        v324 = xmmword_22F44E300;
        sub_22F242C48((uint64_t)&v319, (uint64_t)&v323);
        v329 = *a1;
        v330 = (uint64_t)&v319;
        v331 = 0;
        v332 = -1;
        v333 = v335;
        v334 = 0xA00000000;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v345 = &v346;
        v346 = 0;
        v347 = 0;
        v348 = v350;
        v349 = 0x400000000;
        v351 = &v353;
        v352 = 0;
        v353 = 0;
        v354 = 1;
        v357 = 0;
        v356 = 0;
        v355 = &v356;
        v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                        + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
        if ((unint64_t)(v321 - (_QWORD)v322) > 1)
          *v322++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v319, "?$");
        sub_22F0A02E8((uint64_t)&v329, "_Atomic", 7uLL);
        sub_22F0A1E3C(&v329, v115, a3, 2);
        v116 = (char *)v323;
        v117 = v324;
        v327 = "__clang";
        v328 = 7;
        goto LABEL_244;
      case 9:
        v323 = &v325;
        v324 = xmmword_22F44E300;
        sub_22F242C48((uint64_t)&v319, (uint64_t)&v323);
        v329 = *a1;
        v330 = (uint64_t)&v319;
        v331 = 0;
        v332 = -1;
        v333 = v335;
        v334 = 0xA00000000;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v345 = &v346;
        v346 = 0;
        v347 = 0;
        v348 = v350;
        v349 = 0x400000000;
        v351 = &v353;
        v352 = 0;
        v353 = 0;
        v354 = 1;
        v357 = 0;
        v356 = 0;
        v355 = &v356;
        v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                        + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
        if ((unint64_t)(v321 - (_QWORD)v322) > 1)
          *v322++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v319, "?$");
        v119 = *(_DWORD *)(v28 + 32);
        if ((v119 & 1) != 0)
          v120 = "_UBitInt";
        else
          v120 = "_BitInt";
        if ((v119 & 1) != 0)
          v121 = 8;
        else
          v121 = 7;
        sub_22F0A02E8((uint64_t)&v329, v120, v121);
        v122 = (const char *)(((unint64_t)*(unsigned int *)(v28 + 32) >> 1) & 0xFFFFFF);
        LODWORD(v328) = 64;
        v327 = v122;
        BYTE4(v328) = 1;
        sub_22F0A6F00(&v329, (uint64_t *)&v327, 0, 0);
        if (v328 >= 0x41 && v327)
          MEMORY[0x2348A0E84](v327, 0x1000C8000313F17);
        v327 = "__clang";
        v328 = 7;
        sub_22F0A99C4((llvm::raw_ostream *)a1, 0, (char *)v323, v324, (uint64_t)&v327, 1);
        sub_22F258024(v356);
        sub_22E3B4EF4((uint64_t)&v346);
        llvm::deallocate_buffer(v342, (void *)(24 * v344));
        llvm::deallocate_buffer(v339, (void *)(16 * v341));
        llvm::deallocate_buffer(v336, (void *)(16 * v338));
        sub_22E3B9848(&v333);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v319);
        v96 = (char *)v323;
        if (v323 != &v325)
          goto LABEL_423;
        return;
      case 10:
        v66 = *(_QWORD *)(v28 + 32);
        sub_22F0A9BA4((uint64_t)a1, v9 | v18);
        sub_22F0A94E0((uint64_t)a1, v9 | v18, v66);
        v67 = a1[1];
        v68 = (_WORD *)*((_QWORD *)v67 + 4);
        if (*((_QWORD *)v67 + 3) - (_QWORD)v68 > 1uLL)
        {
          *v68 = 17759;
          *((_QWORD *)v67 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v67, "_E");
        }
        v56 = *(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0);
        if (v56)
          v69 = *(_BYTE *)(v56 + 16) == 26;
        else
          v69 = 0;
        if (!v69)
          v56 = sub_22F10CF48(*(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0));
        v55 = a1;
        goto LABEL_176;
      case 11:
        switch((v29 >> 19) & 0x1FF)
        {
          case 0u:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image1d_ro@@";
              goto LABEL_620;
            }
            v307 = 1077964658;
            v308 = "PAUocl_image1d_ro@@";
            goto LABEL_753;
          case 1u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image1d_array_ro@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image1d_array_ro@@";
            goto LABEL_756;
          case 2u:
            v209 = *v318;
            v239 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v239 <= 0x19uLL)
            {
              v211 = "PAUocl_image1d_buffer_ro@@";
              goto LABEL_620;
            }
            v310 = "PAUocl_image1d_buffer_ro@@";
            goto LABEL_751;
          case 3u:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image2d_ro@@";
              goto LABEL_620;
            }
            v307 = 1077964658;
            v308 = "PAUocl_image2d_ro@@";
            goto LABEL_753;
          case 4u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_array_ro@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_array_ro@@";
            goto LABEL_756;
          case 5u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_depth_ro@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_depth_ro@@";
            goto LABEL_756;
          case 6u:
            v209 = *v318;
            v240 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v240 <= 0x1EuLL)
            {
              v211 = "PAUocl_image2d_array_depth_ro@@";
              goto LABEL_620;
            }
            v311 = "PAUocl_image2d_array_depth_ro@@";
            goto LABEL_758;
          case 7u:
            v209 = *v318;
            v241 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v241) <= 0x17)
            {
              v211 = "PAUocl_image2d_msaa_ro@@";
              goto LABEL_620;
            }
            v312 = "PAUocl_image2d_msaa_ro@@";
            goto LABEL_760;
          case 8u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_array_msaa_ro@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_array_msaa_ro@@";
            goto LABEL_763;
          case 9u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_msaa_depth_ro@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_msaa_depth_ro@@";
            goto LABEL_763;
          case 0xAu:
            v209 = *v318;
            v243 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v243) <= 0x23)
            {
              v211 = "PAUocl_image2d_array_msaa_depth_ro@@";
              goto LABEL_620;
            }
            *(_DWORD *)(v243 + 32) = 1077964658;
            v314 = "PAUocl_image2d_array_msaa_depth_ro@@";
            goto LABEL_765;
          case 0xBu:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image3d_ro@@";
              goto LABEL_620;
            }
            v307 = 1077964658;
            v308 = "PAUocl_image3d_ro@@";
            goto LABEL_753;
          case 0xCu:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image1d_wo@@";
              goto LABEL_620;
            }
            v307 = 1077964663;
            v308 = "PAUocl_image1d_wo@@";
            goto LABEL_753;
          case 0xDu:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image1d_array_wo@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image1d_array_wo@@";
            goto LABEL_756;
          case 0xEu:
            v209 = *v318;
            v239 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v239 <= 0x19uLL)
            {
              v211 = "PAUocl_image1d_buffer_wo@@";
              goto LABEL_620;
            }
            v310 = "PAUocl_image1d_buffer_wo@@";
            goto LABEL_751;
          case 0xFu:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image2d_wo@@";
              goto LABEL_620;
            }
            v307 = 1077964663;
            v308 = "PAUocl_image2d_wo@@";
            goto LABEL_753;
          case 0x10u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_array_wo@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_array_wo@@";
            goto LABEL_756;
          case 0x11u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_depth_wo@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_depth_wo@@";
            goto LABEL_756;
          case 0x12u:
            v209 = *v318;
            v240 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v240 <= 0x1EuLL)
            {
              v211 = "PAUocl_image2d_array_depth_wo@@";
              goto LABEL_620;
            }
            v311 = "PAUocl_image2d_array_depth_wo@@";
            goto LABEL_758;
          case 0x13u:
            v209 = *v318;
            v241 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v241) <= 0x17)
            {
              v211 = "PAUocl_image2d_msaa_wo@@";
              goto LABEL_620;
            }
            v312 = "PAUocl_image2d_msaa_wo@@";
            goto LABEL_760;
          case 0x14u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_array_msaa_wo@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_array_msaa_wo@@";
            goto LABEL_763;
          case 0x15u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_msaa_depth_wo@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_msaa_depth_wo@@";
            goto LABEL_763;
          case 0x16u:
            v209 = *v318;
            v243 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v243) <= 0x23)
            {
              v211 = "PAUocl_image2d_array_msaa_depth_wo@@";
              goto LABEL_620;
            }
            *(_DWORD *)(v243 + 32) = 1077964663;
            v314 = "PAUocl_image2d_array_msaa_depth_wo@@";
            goto LABEL_765;
          case 0x17u:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image3d_wo@@";
              goto LABEL_620;
            }
            v307 = 1077964663;
            v308 = "PAUocl_image3d_wo@@";
            goto LABEL_753;
          case 0x18u:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image1d_rw@@";
              goto LABEL_620;
            }
            v307 = 1077966706;
            v308 = "PAUocl_image1d_rw@@";
            goto LABEL_753;
          case 0x19u:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image1d_array_rw@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image1d_array_rw@@";
            goto LABEL_756;
          case 0x1Au:
            v209 = *v318;
            v239 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v239 <= 0x19uLL)
            {
              v211 = "PAUocl_image1d_buffer_rw@@";
              goto LABEL_620;
            }
            v310 = "PAUocl_image1d_buffer_rw@@";
LABEL_751:
            *v239 = *(_OWORD *)v310;
            *(_OWORD *)((char *)v239 + 10) = *(_OWORD *)(v310 + 10);
            v315 = *((_QWORD *)v209 + 4) + 26;
            goto LABEL_784;
          case 0x1Bu:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image2d_rw@@";
              goto LABEL_620;
            }
            v307 = 1077966706;
            v308 = "PAUocl_image2d_rw@@";
            goto LABEL_753;
          case 0x1Cu:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_array_rw@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_array_rw@@";
            goto LABEL_756;
          case 0x1Du:
            v209 = *v318;
            v238 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v238 <= 0x18uLL)
            {
              v211 = "PAUocl_image2d_depth_rw@@";
              goto LABEL_620;
            }
            v309 = "PAUocl_image2d_depth_rw@@";
LABEL_756:
            *v238 = *(_OWORD *)v309;
            *(_OWORD *)((char *)v238 + 9) = *(_OWORD *)(v309 + 9);
            v315 = *((_QWORD *)v209 + 4) + 25;
            goto LABEL_784;
          case 0x1Eu:
            v209 = *v318;
            v240 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v240 <= 0x1EuLL)
            {
              v211 = "PAUocl_image2d_array_depth_rw@@";
              goto LABEL_620;
            }
            v311 = "PAUocl_image2d_array_depth_rw@@";
LABEL_758:
            *v240 = *(_OWORD *)v311;
            *(_OWORD *)((char *)v240 + 15) = *(_OWORD *)(v311 + 15);
            v315 = *((_QWORD *)v209 + 4) + 31;
            goto LABEL_784;
          case 0x1Fu:
            v209 = *v318;
            v241 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v241) <= 0x17)
            {
              v211 = "PAUocl_image2d_msaa_rw@@";
              goto LABEL_620;
            }
            v312 = "PAUocl_image2d_msaa_rw@@";
LABEL_760:
            *(_OWORD *)v241 = *(_OWORD *)v312;
            *(_QWORD *)(v241 + 16) = *((_QWORD *)v312 + 2);
            v315 = *((_QWORD *)v209 + 4) + 24;
            goto LABEL_784;
          case 0x20u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_array_msaa_rw@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_array_msaa_rw@@";
            goto LABEL_763;
          case 0x21u:
            v209 = *v318;
            v242 = (_OWORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v242 <= 0x1DuLL)
            {
              v211 = "PAUocl_image2d_msaa_depth_rw@@";
              goto LABEL_620;
            }
            v313 = "PAUocl_image2d_msaa_depth_rw@@";
LABEL_763:
            *v242 = *(_OWORD *)v313;
            *(_OWORD *)((char *)v242 + 14) = *(_OWORD *)(v313 + 14);
            v315 = *((_QWORD *)v209 + 4) + 30;
            goto LABEL_784;
          case 0x22u:
            v209 = *v318;
            v243 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v243) <= 0x23)
            {
              v211 = "PAUocl_image2d_array_msaa_depth_rw@@";
              goto LABEL_620;
            }
            *(_DWORD *)(v243 + 32) = 1077966706;
            v314 = "PAUocl_image2d_array_msaa_depth_rw@@";
LABEL_765:
            v316 = *((_OWORD *)v314 + 1);
            *(_OWORD *)v243 = *(_OWORD *)v314;
            *(_OWORD *)(v243 + 16) = v316;
            v315 = *((_QWORD *)v209 + 4) + 36;
            goto LABEL_784;
          case 0x23u:
            v209 = *v318;
            v217 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v217) <= 0x12)
            {
              v211 = "PAUocl_image3d_rw@@";
              goto LABEL_620;
            }
            v307 = 1077966706;
            v308 = "PAUocl_image3d_rw@@";
LABEL_753:
            *(_DWORD *)(v217 + 15) = v307;
            *(_OWORD *)v217 = *(_OWORD *)v308;
            v315 = *((_QWORD *)v209 + 4) + 19;
            goto LABEL_784;
          case 0x24u:
            v214 = "ocl_intel_sub_group_avc_mce_payload_t";
            goto LABEL_609;
          case 0x25u:
            v214 = "ocl_intel_sub_group_avc_ime_payload_t";
            goto LABEL_609;
          case 0x26u:
            v214 = "ocl_intel_sub_group_avc_ref_payload_t";
            goto LABEL_609;
          case 0x27u:
            v214 = "ocl_intel_sub_group_avc_sic_payload_t";
            goto LABEL_609;
          case 0x28u:
            v214 = "ocl_intel_sub_group_avc_mce_result_t";
            goto LABEL_548;
          case 0x29u:
            v214 = "ocl_intel_sub_group_avc_ime_result_t";
            goto LABEL_548;
          case 0x2Au:
            v214 = "ocl_intel_sub_group_avc_ref_result_t";
            goto LABEL_548;
          case 0x2Bu:
            v214 = "ocl_intel_sub_group_avc_sic_result_t";
LABEL_548:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 36;
            goto LABEL_683;
          case 0x2Cu:
            v214 = "ocl_intel_sub_group_avc_ime_result_single_reference_streamout_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 63;
            goto LABEL_683;
          case 0x2Du:
            v214 = "ocl_intel_sub_group_avc_ime_result_dual_reference_streamout_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 61;
            goto LABEL_683;
          case 0x2Eu:
            v214 = "ocl_intel_sub_group_avc_ime_single_reference_streamin_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 55;
            goto LABEL_683;
          case 0x2Fu:
            v214 = "ocl_intel_sub_group_avc_ime_dual_reference_streamin_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 53;
            goto LABEL_683;
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x4Fu:
          case 0x50u:
          case 0x51u:
          case 0x52u:
          case 0x53u:
          case 0x54u:
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
          case 0x59u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Cu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
          case 0xA0u:
          case 0xA1u:
          case 0xA2u:
          case 0xA3u:
          case 0xA4u:
          case 0xBAu:
          case 0xBBu:
          case 0xBCu:
          case 0xBDu:
          case 0xBEu:
          case 0xBFu:
          case 0xC0u:
          case 0xC1u:
          case 0xC2u:
          case 0xC3u:
          case 0xC4u:
          case 0xC5u:
          case 0xC6u:
          case 0xC7u:
          case 0xC8u:
          case 0xC9u:
          case 0xCAu:
          case 0xCBu:
          case 0xCCu:
          case 0xCDu:
          case 0xCEu:
          case 0xCFu:
          case 0xD0u:
          case 0xD1u:
          case 0xD8u:
          case 0xD9u:
            v64 = *((_QWORD *)*a1 + 2);
            v65 = sub_22F41A810(*(_QWORD *)(v64 + 32), 4, "cannot mangle this built-in %0 type yet", 0x27uLL);
            *(_DWORD *)(v64 + 312) = a3;
            *(_DWORD *)(v64 + 316) = v65;
            if (*(char *)(v64 + 311) < 0)
            {
              **(_BYTE **)(v64 + 288) = 0;
              *(_QWORD *)(v64 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v64 + 288) = 0;
              *(_BYTE *)(v64 + 311) = 0;
            }
            v329 = (llvm::APInt *)(v64 + 320);
            v330 = 0;
            v331 = v64;
            LOWORD(v332) = 1;
            *(_BYTE *)(v64 + 320) = 0;
            *(_DWORD *)(v64 + 664) = 0;
            v141 = *(unsigned int *)(v64 + 776);
            if ((_DWORD)v141)
            {
              v142 = *(_QWORD *)(v64 + 768);
              v143 = 56 * v141;
              do
              {
                if (*(char *)(v142 + v143 - 9) < 0)
                  operator delete(*(void **)(v142 + v143 - 32));
                v143 -= 56;
              }
              while (v143);
            }
            *(_DWORD *)(v64 + 776) = 0;
            v144 = (void *)sub_22F1125EC(v28);
            sub_22E3B89A8((unsigned __int8 **)&v329, v144, v145);
            v146 = v329;
            if (!v329)
            {
              v146 = (llvm::APInt *)sub_22E3B8AAC(v330);
              v329 = v146;
            }
            v147 = (uint64_t)v146 + 336;
            v148 = a3;
            goto LABEL_410;
          case 0xA5u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 88;
            goto LABEL_629;
          case 0xA6u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_N";
              goto LABEL_620;
            }
            v306 = 20063;
            goto LABEL_783;
          case 0xA7u:
          case 0xB2u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 68;
            goto LABEL_629;
          case 0xA8u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 69;
            goto LABEL_629;
          case 0xA9u:
          case 0xB4u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_W";
              goto LABEL_620;
            }
            v306 = 22367;
            goto LABEL_783;
          case 0xAAu:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_Q";
              goto LABEL_620;
            }
            v306 = 20831;
            goto LABEL_783;
          case 0xABu:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_S";
              goto LABEL_620;
            }
            v306 = 21343;
            goto LABEL_783;
          case 0xACu:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_U";
              goto LABEL_620;
            }
            v306 = 21855;
            goto LABEL_783;
          case 0xADu:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 71;
            goto LABEL_629;
          case 0xAEu:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 73;
            goto LABEL_629;
          case 0xAFu:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 75;
            goto LABEL_629;
          case 0xB0u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_K";
              goto LABEL_620;
            }
            v306 = 19295;
            goto LABEL_783;
          case 0xB1u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_M";
              goto LABEL_620;
            }
            v306 = 19807;
            goto LABEL_783;
          case 0xB3u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 67;
            goto LABEL_629;
          case 0xB5u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 70;
            goto LABEL_629;
          case 0xB6u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 72;
            goto LABEL_629;
          case 0xB7u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 74;
            goto LABEL_629;
          case 0xB8u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_J";
              goto LABEL_620;
            }
            v306 = 19039;
            goto LABEL_783;
          case 0xB9u:
            v209 = *v318;
            v210 = (__int16 *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v210 <= 1uLL)
            {
              v211 = "_L";
              goto LABEL_620;
            }
            v306 = 19551;
LABEL_783:
            *v210 = v306;
            v315 = *((_QWORD *)v209 + 4) + 2;
            goto LABEL_784;
          case 0xD2u:
            v329 = (llvm::APInt *)"__clang";
            v330 = 7;
            v244 = "_Half";
            v245 = (llvm::raw_ostream *)a1;
            v246 = 5;
            goto LABEL_632;
          case 0xD3u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 77;
            goto LABEL_629;
          case 0xD4u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
              goto LABEL_697;
            *((_QWORD *)v206 + 4) = v207 + 1;
            v208 = 78;
            goto LABEL_629;
          case 0xD5u:
            v206 = *v318;
            v207 = (char *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v207 >= *((_QWORD *)*v318 + 3))
            {
LABEL_697:
              llvm::raw_ostream::write(v206);
            }
            else
            {
              *((_QWORD *)v206 + 4) = v207 + 1;
              v208 = 79;
LABEL_629:
              *v207 = v208;
            }
            return;
          case 0xD6u:
            v329 = (llvm::APInt *)"__clang";
            v330 = 7;
            v244 = "_Float16";
            v245 = (llvm::raw_ostream *)a1;
            v246 = 8;
            goto LABEL_632;
          case 0xD7u:
            v329 = (llvm::APInt *)"__clang";
            v330 = 7;
            v244 = "__bf16";
            v245 = (llvm::raw_ostream *)a1;
            v246 = 6;
LABEL_632:
            sub_22F0A99C4(v245, 0, v244, v246, (uint64_t)&v329, 1);
            return;
          case 0xDAu:
            v209 = *v318;
            v247 = *((_QWORD *)*v318 + 4);
            if ((unint64_t)(*((_QWORD *)*v318 + 3) - v247) > 2)
            {
              *(_BYTE *)(v247 + 2) = 84;
              *(_WORD *)v247 = 9252;
              v315 = *((_QWORD *)v209 + 4) + 3;
LABEL_784:
              *((_QWORD *)v209 + 4) = v315;
            }
            else
            {
              v211 = "$$T";
LABEL_620:
              llvm::raw_ostream::write(v209, v211);
            }
            break;
          case 0xDBu:
            v214 = "objc_object";
            goto LABEL_578;
          case 0xDCu:
            v214 = "objc_class";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 10;
            goto LABEL_683;
          case 0xDDu:
            v214 = "objc_selector";
            goto LABEL_574;
          case 0xDEu:
            v248 = *v318;
            v249 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v249 > 1uLL)
            {
              *v249 = 16720;
              *((_QWORD *)v248 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v248, "PA");
            }
            v214 = "ocl_sampler";
LABEL_578:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 11;
            goto LABEL_683;
          case 0xDFu:
            v250 = *v318;
            v251 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v251 > 1uLL)
            {
              *v251 = 16720;
              *((_QWORD *)v250 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v250, "PA");
            }
            v214 = "ocl_event";
            goto LABEL_655;
          case 0xE0u:
            v220 = *v318;
            v221 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v221 > 1uLL)
            {
              *v221 = 16720;
              *((_QWORD *)v220 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v220, "PA");
            }
            v214 = "ocl_clkevent";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 12;
            goto LABEL_683;
          case 0xE1u:
            v282 = *v318;
            v283 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v283 > 1uLL)
            {
              *v283 = 16720;
              *((_QWORD *)v282 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v282, "PA");
            }
            v214 = "ocl_queue";
LABEL_655:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 9;
            goto LABEL_683;
          case 0xE2u:
            v222 = *v318;
            v223 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v223 > 1uLL)
            {
              *v223 = 16720;
              *((_QWORD *)v222 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v222, "PA");
            }
            v214 = "ocl_reserveid";
LABEL_574:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 13;
            goto LABEL_683;
          case 0xE3u:
            v252 = *v318;
            v253 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v253 > 1uLL)
            {
              *v253 = 16720;
              *((_QWORD *)v252 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v252, "PA");
            }
            v214 = "__metal_texture_1d_t";
            goto LABEL_662;
          case 0xE4u:
            v270 = *v318;
            v271 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v271 > 1uLL)
            {
              *v271 = 16720;
              *((_QWORD *)v270 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v270, "PA");
            }
            v214 = "__metal_texture_1d_array_t";
            goto LABEL_639;
          case 0xE5u:
            v284 = *v318;
            v285 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v285 > 1uLL)
            {
              *v285 = 16720;
              *((_QWORD *)v284 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v284, "PA");
            }
            v214 = "__metal_texture_2d_t";
            goto LABEL_662;
          case 0xE6u:
            v272 = *v318;
            v273 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v273 > 1uLL)
            {
              *v273 = 16720;
              *((_QWORD *)v272 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v272, "PA");
            }
            v214 = "__metal_texture_2d_array_t";
            goto LABEL_639;
          case 0xE7u:
            v286 = *v318;
            v287 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v287 > 1uLL)
            {
              *v287 = 16720;
              *((_QWORD *)v286 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v286, "PA");
            }
            v214 = "__metal_texture_3d_t";
            goto LABEL_662;
          case 0xE8u:
            v274 = *v318;
            v275 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v275 > 1uLL)
            {
              *v275 = 16720;
              *((_QWORD *)v274 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v274, "PA");
            }
            v214 = "__metal_texture_cube_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 22;
            goto LABEL_683;
          case 0xE9u:
            v288 = *v318;
            v289 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v289 > 1uLL)
            {
              *v289 = 16720;
              *((_QWORD *)v288 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v288, "PA");
            }
            v214 = "__metal_texture_cube_array_t";
            goto LABEL_682;
          case 0xEAu:
            v254 = *v318;
            v255 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v255 > 1uLL)
            {
              *v255 = 16720;
              *((_QWORD *)v254 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v254, "PA");
            }
            v214 = "__metal_texture_2d_ms_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 23;
            goto LABEL_683;
          case 0xEBu:
            v212 = *v318;
            v213 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v213 > 1uLL)
            {
              *v213 = 16720;
              *((_QWORD *)v212 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v212, "PA");
            }
            v214 = "__metal_texture_2d_ms_array_t";
            goto LABEL_601;
          case 0xECu:
            v256 = *v318;
            v257 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v257 > 1uLL)
            {
              *v257 = 16720;
              *((_QWORD *)v256 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v256, "PA");
            }
            v214 = "__metal_texture_buffer_1d_t";
            goto LABEL_591;
          case 0xEDu:
            v224 = *v318;
            v225 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v225 > 1uLL)
            {
              *v225 = 16720;
              *((_QWORD *)v224 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v224, "PA");
            }
            v214 = "__metal_depth_2d_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 18;
            goto LABEL_683;
          case 0xEEu:
            v226 = *v318;
            v227 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v227 > 1uLL)
            {
              *v227 = 16720;
              *((_QWORD *)v226 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v226, "PA");
            }
            v214 = "__metal_depth_2d_array_t";
            goto LABEL_466;
          case 0xEFu:
            v258 = *v318;
            v259 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v259 > 1uLL)
            {
              *v259 = 16720;
              *((_QWORD *)v258 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v258, "PA");
            }
            v214 = "__metal_depth_cube_t";
            goto LABEL_662;
          case 0xF0u:
            v260 = *v318;
            v261 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v261 > 1uLL)
            {
              *v261 = 16720;
              *((_QWORD *)v260 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v260, "PA");
            }
            v214 = "__metal_depth_cube_array_t";
LABEL_639:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 26;
            goto LABEL_683;
          case 0xF1u:
            v290 = *v318;
            v291 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v291 > 1uLL)
            {
              *v291 = 16720;
              *((_QWORD *)v290 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v290, "PA");
            }
            v214 = "__metal_depth_2d_ms_t";
            goto LABEL_669;
          case 0xF2u:
            v228 = *v318;
            v229 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v229 > 1uLL)
            {
              *v229 = 16720;
              *((_QWORD *)v228 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v228, "PA");
            }
            v214 = "__metal_depth_2d_ms_array_t";
            goto LABEL_591;
          case 0xF3u:
            v292 = *v318;
            v293 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v293 > 1uLL)
            {
              *v293 = 16720;
              *((_QWORD *)v292 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v292, "PA");
            }
            v214 = "__metal_sampler_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 17;
            goto LABEL_683;
          case 0xF4u:
            v230 = *v318;
            v231 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v231 > 1uLL)
            {
              *v231 = 16720;
              *((_QWORD *)v230 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v230, "PA");
            }
            v214 = "__metal_threadgroup_event_t";
LABEL_591:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 27;
            goto LABEL_683;
          case 0xF5u:
            v276 = *v318;
            v277 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v277 > 1uLL)
            {
              *v277 = 16720;
              *((_QWORD *)v276 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v276, "PA");
            }
            v214 = "__metal_imageblock_t";
LABEL_662:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 20;
            goto LABEL_683;
          case 0xF6u:
            v262 = *v318;
            v263 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v263 > 1uLL)
            {
              *v263 = 16720;
              *((_QWORD *)v262 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v262, "PA");
            }
            v214 = "__metal_patch_control_point_t";
            goto LABEL_601;
          case 0xF7u:
            v232 = *v318;
            v233 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v233 > 1uLL)
            {
              *v233 = 16720;
              *((_QWORD *)v232 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v232, "PA");
            }
            v214 = "__metal_command_buffer_t";
LABEL_466:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 24;
            goto LABEL_683;
          case 0xF8u:
            v294 = *v318;
            v295 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v295 > 1uLL)
            {
              *v295 = 16720;
              *((_QWORD *)v294 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v294, "PA");
            }
            v214 = "__metal_render_pipeline_state_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 31;
            goto LABEL_683;
          case 0xF9u:
            v264 = *v318;
            v265 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v265 > 1uLL)
            {
              *v265 = 16720;
              *((_QWORD *)v264 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v264, "PA");
            }
            v214 = "__metal_compute_pipeline_state_t";
            goto LABEL_605;
          case 0xFAu:
            v234 = *v318;
            v235 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v235 > 1uLL)
            {
              *v235 = 16720;
              *((_QWORD *)v234 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v234, "PA");
            }
            v214 = "__metal_interpolant_t";
LABEL_669:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 21;
            goto LABEL_683;
          case 0xFBu:
            v236 = *v318;
            v237 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v237 > 1uLL)
            {
              *v237 = 16720;
              *((_QWORD *)v236 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v236, "PA");
            }
            v214 = "__metal_visible_function_table_t";
LABEL_605:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 32;
            goto LABEL_683;
          case 0xFCu:
            v266 = *v318;
            v267 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v267 > 1uLL)
            {
              *v267 = 16720;
              *((_QWORD *)v266 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v266, "PA");
            }
            v214 = "__metal_intersection_function_table_t";
LABEL_609:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 37;
            goto LABEL_683;
          case 0xFDu:
            v278 = *v318;
            v279 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v279 > 1uLL)
            {
              *v279 = 16720;
              *((_QWORD *)v278 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v278, "PA");
            }
            v214 = "__metal_instance_acceleration_structure_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 41;
            goto LABEL_683;
          case 0xFEu:
            v268 = *v318;
            v269 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v269 > 1uLL)
            {
              *v269 = 16720;
              *((_QWORD *)v268 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v268, "PA");
            }
            v214 = "__metal_primitive_acceleration_structure_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 42;
            goto LABEL_683;
          case 0xFFu:
            v280 = *v318;
            v281 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v281 > 1uLL)
            {
              *v281 = 16720;
              *((_QWORD *)v280 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v280, "PA");
            }
            v214 = "__metal_mesh_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 14;
            goto LABEL_683;
          case 0x100u:
            v296 = *v318;
            v297 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v297 > 1uLL)
            {
              *v297 = 16720;
              *((_QWORD *)v296 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v296, "PA");
            }
            v214 = "__metal_mesh_grid_properties_t";
            v218 = (llvm::raw_ostream *)a1;
            v219 = 30;
            goto LABEL_683;
          case 0x101u:
            v298 = *v318;
            v299 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v299 > 1uLL)
            {
              *v299 = 16720;
              *((_QWORD *)v298 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v298, "PA");
            }
            v214 = "__metal_intersection_query_t";
LABEL_682:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 28;
            goto LABEL_683;
          case 0x102u:
            v215 = *v318;
            v216 = (_WORD *)*((_QWORD *)*v318 + 4);
            if (*((_QWORD *)*v318 + 3) - (_QWORD)v216 > 1uLL)
            {
              *v216 = 16720;
              *((_QWORD *)v215 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v215, "PA");
            }
            v214 = "__metal_intersection_result_t";
LABEL_601:
            v218 = (llvm::raw_ostream *)a1;
            v219 = 29;
LABEL_683:
            sub_22F0A99C4(v218, 0, v214, v219, 0, 0);
            return;
          default:
            return;
        }
        return;
      case 12:
        v124 = *(_QWORD *)(v28 + 32);
        v300 = (char *)&v325;
        v323 = &v325;
        v324 = xmmword_22F44E300;
        sub_22F242C48((uint64_t)&v319, (uint64_t)&v323);
        v329 = *a1;
        v330 = (uint64_t)&v319;
        v331 = 0;
        v332 = -1;
        v333 = v335;
        v334 = 0xA00000000;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v345 = &v346;
        v346 = 0;
        v347 = 0;
        v348 = v350;
        v349 = 0x400000000;
        v351 = &v353;
        v352 = 0;
        v353 = 0;
        v354 = 1;
        v357 = 0;
        v356 = 0;
        v355 = &v356;
        v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                        + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
        if ((unint64_t)(v321 - (_QWORD)v322) > 1)
          *v322++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v319, "?$");
        sub_22F0A02E8((uint64_t)&v329, "_Complex", 8uLL);
        sub_22F0A1E3C(&v329, v124, a3, 2);
        v327 = "__clang";
        v328 = 7;
        sub_22F0A99C4((llvm::raw_ostream *)a1, 0, (char *)v323, v324, (uint64_t)&v327, 1);
        sub_22F258024(v356);
        goto LABEL_245;
      case 13:
        v100 = *((_QWORD *)*a1 + 2);
        v112 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this decltype() yet", 0x21uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v112;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v173 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v173)
        {
          v174 = *(_QWORD *)(v100 + 768);
          v175 = 56 * v173;
          do
          {
            if (*(char *)(v174 + v175 - 9) < 0)
              operator delete(*(void **)(v174 + v175 - 32));
            v175 -= 56;
          }
          while (v175);
        }
        goto LABEL_409;
      case 14:
        v100 = *((_QWORD *)*a1 + 2);
        v110 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this 'auto' type yet", 0x22uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v110;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v167 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v167)
        {
          v168 = *(_QWORD *)(v100 + 768);
          v169 = 56 * v167;
          do
          {
            if (*(char *)(v168 + v169 - 9) < 0)
              operator delete(*(void **)(v168 + v169 - 32));
            v169 -= 56;
          }
          while (v169);
        }
        goto LABEL_409;
      case 15:
        v100 = *((_QWORD *)*a1 + 2);
        v127 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this deduced class template specialization type yet", 0x41uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v127;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v194 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v194)
        {
          v195 = *(_QWORD *)(v100 + 768);
          v196 = 56 * v194;
          do
          {
            if (*(char *)(v195 + v196 - 9) < 0)
              operator delete(*(void **)(v195 + v196 - 32));
            v196 -= 56;
          }
          while (v196);
        }
        goto LABEL_409;
      case 16:
        v100 = *((_QWORD *)*a1 + 2);
        v128 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this dependent address space type yet", 0x33uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v128;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v197 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v197)
        {
          v198 = *(_QWORD *)(v100 + 768);
          v199 = 56 * v197;
          do
          {
            if (*(char *)(v198 + v199 - 9) < 0)
              operator delete(*(void **)(v198 + v199 - 32));
            v199 -= 56;
          }
          while (v199);
        }
        goto LABEL_409;
      case 17:
        v100 = *((_QWORD *)*a1 + 2);
        v114 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this DependentBitInt type yet", 0x2BuLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v114;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v179 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v179)
        {
          v180 = *(_QWORD *)(v100 + 768);
          v181 = 56 * v179;
          do
          {
            if (*(char *)(v180 + v181 - 9) < 0)
              operator delete(*(void **)(v180 + v181 - 32));
            v181 -= 56;
          }
          while (v181);
        }
        goto LABEL_409;
      case 18:
        v100 = *((_QWORD *)*a1 + 2);
        v118 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this dependent name type yet", 0x2AuLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v118;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v182 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v182)
        {
          v183 = *(_QWORD *)(v100 + 768);
          v184 = 56 * v182;
          do
          {
            if (*(char *)(v183 + v184 - 9) < 0)
              operator delete(*(void **)(v183 + v184 - 32));
            v184 -= 56;
          }
          while (v184);
        }
        goto LABEL_409;
      case 19:
        v100 = *((_QWORD *)*a1 + 2);
        v123 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this dependent-sized extended vector type yet", 0x3BuLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v123;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v185 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v185)
        {
          v186 = *(_QWORD *)(v100 + 768);
          v187 = 56 * v185;
          do
          {
            if (*(char *)(v186 + v187 - 9) < 0)
              operator delete(*(void **)(v186 + v187 - 32));
            v187 -= 56;
          }
          while (v187);
        }
        goto LABEL_409;
      case 20:
        v100 = *((_QWORD *)*a1 + 2);
        v125 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this dependent template specialization type yet", 0x3DuLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v125;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v188 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v188)
        {
          v189 = *(_QWORD *)(v100 + 768);
          v190 = 56 * v188;
          do
          {
            if (*(char *)(v189 + v190 - 9) < 0)
              operator delete(*(void **)(v189 + v190 - 32));
            v190 -= 56;
          }
          while (v190);
        }
        goto LABEL_409;
      case 21:
        v100 = *((_QWORD *)*a1 + 2);
        v126 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this dependent-sized vector type yet", 0x32uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v126;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v191 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v191)
        {
          v192 = *(_QWORD *)(v100 + 768);
          v193 = 56 * v191;
          do
          {
            if (*(char *)(v192 + v193 - 9) < 0)
              operator delete(*(void **)(v192 + v193 - 32));
            v193 -= 56;
          }
          while (v193);
        }
        goto LABEL_409;
      case 25:
        goto LABEL_115;
      case 26:
        if ((sub_22E47E1B0(*v12) & 0xCFFFFFFFFLL) == 0 && (*(_BYTE *)(v28 + 20) & 3) == 0)
        {
LABEL_115:
          v72 = *v318;
          v73 = (_DWORD *)*((_QWORD *)*v318 + 4);
          if (*((_QWORD *)*v318 + 3) - (_QWORD)v73 > 3uLL)
          {
            *v73 = 910238756;
            *((_QWORD *)v72 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v72, "$$A6");
          }
          v55 = a1;
          v56 = v28;
          goto LABEL_176;
        }
        v70 = *v318;
        v71 = *((_QWORD *)*v318 + 4);
        if ((unint64_t)(*((_QWORD *)*v318 + 3) - v71) > 5)
        {
          *(_WORD *)(v71 + 4) = 16448;
          *(_DWORD *)v71 = 943793188;
          *((_QWORD *)v70 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v70, "$$A8@@");
        }
        v55 = a1;
        v56 = v28;
        goto LABEL_91;
      case 29:
        v100 = *((_QWORD *)*a1 + 2);
        v111 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "Cannot mangle this matrix type yet", 0x22uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v111;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v170 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v170)
        {
          v171 = *(_QWORD *)(v100 + 768);
          v172 = 56 * v170;
          do
          {
            if (*(char *)(v171 + v172 - 9) < 0)
              operator delete(*(void **)(v171 + v172 - 32));
            v172 -= 56;
          }
          while (v172);
        }
        goto LABEL_409;
      case 30:
        v100 = *((_QWORD *)*a1 + 2);
        v104 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "Cannot mangle this dependent-sized matrix type yet", 0x32uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v104;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v155 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v155)
        {
          v156 = *(_QWORD *)(v100 + 768);
          v157 = 56 * v155;
          do
          {
            if (*(char *)(v156 + v157 - 9) < 0)
              operator delete(*(void **)(v156 + v157 - 32));
            v157 -= 56;
          }
          while (v157);
        }
        goto LABEL_409;
      case 31:
        v30 = v9 | v18;
        a2 = *(_QWORD *)(v28 + 32);
        sub_22F0A9BA4((uint64_t)a1, v30);
        sub_22F0A94E0((uint64_t)a1, v30, a2);
        v31 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
        if (v31)
          v32 = *(_BYTE *)(v31 + 16) == 26;
        else
          v32 = 0;
        if (v32)
          goto LABEL_87;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        {
          v33 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
          if (v33)
          {
            v31 = v33;
LABEL_87:
            v52 = *v318;
            v53 = (_BYTE *)*((_QWORD *)*v318 + 4);
            if ((unint64_t)v53 >= *((_QWORD *)*v318 + 3))
            {
              llvm::raw_ostream::write(v52);
            }
            else
            {
              *((_QWORD *)v52 + 4) = v53 + 1;
              *v53 = 56;
            }
            v54 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 24));
            sub_22F09CFFC(a1, v54, 0);
            v55 = a1;
            v56 = v31;
LABEL_91:
            v57 = 1;
            goto LABEL_92;
          }
        }
        v34 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v34 & 8) != 0)
        {
          v36 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          LOBYTE(v35) = 0;
          v36 = 0;
        }
        sub_22F0A7CF0(a1[1], v35 | v36 | (v34 | a2) & 7, 1);
        v37 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        sub_22F09CFFC(a1, v37, 0);
        a4 = 0;
        continue;
      case 32:
        v38 = v9 | v18;
        a2 = *(_QWORD *)(v28 + 32);
        v39 = (v18 >> 6) & 7;
        if ((unint64_t)(v39 - 2) <= 2)
        {
          v323 = &v325;
          v324 = xmmword_22F44E300;
          sub_22F242C48((uint64_t)&v319, (uint64_t)&v323);
          v329 = *a1;
          v330 = (uint64_t)&v319;
          v331 = 0;
          v332 = -1;
          v333 = v335;
          v334 = 0xA00000000;
          v336 = 0;
          v337 = 0;
          v338 = 0;
          v339 = 0;
          v340 = 0;
          v341 = 0;
          v343 = 0;
          v342 = 0;
          v344 = 0;
          v345 = &v346;
          v346 = 0;
          v347 = 0;
          v348 = v350;
          v349 = 0x400000000;
          v351 = &v353;
          v352 = 0;
          v353 = 0;
          v354 = 1;
          v357 = 0;
          v356 = 0;
          v355 = &v356;
          v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                          + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
          if ((unint64_t)(v321 - (_QWORD)v322) > 1)
            *v322++ = 9279;
          else
            llvm::raw_ostream::write((llvm::raw_ostream *)&v319, "?$");
          switch(v39)
          {
            case 4:
              v133 = "Autoreleasing";
              v134 = 13;
              break;
            case 3:
              v133 = "Weak";
              v134 = 4;
              break;
            case 2:
              v133 = "Strong";
              v134 = 6;
              break;
            default:
LABEL_422:
              sub_22F0A9BA4((uint64_t)&v329, v38);
              sub_22F0A94E0((uint64_t)&v329, v38, a2);
              sub_22F0A1E3C(&v329, a2, a3, 1);
              v327 = "__ObjC";
              v328 = 6;
              sub_22F0A99C4((llvm::raw_ostream *)a1, 0, (char *)v323, v324, (uint64_t)&v327, 1);
              sub_22F258024(v356);
              sub_22E3B4EF4((uint64_t)&v346);
              llvm::deallocate_buffer(v342, (void *)(24 * v344));
              llvm::deallocate_buffer(v339, (void *)(16 * v341));
              llvm::deallocate_buffer(v336, (void *)(16 * v338));
              sub_22E3B9848(&v333);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v319);
              v96 = (char *)v323;
              if (v323 != &v325)
LABEL_423:
                free(v96);
              return;
          }
          sub_22F0A02E8((uint64_t)&v329, v133, v134);
          goto LABEL_422;
        }
        sub_22F0A9BA4((uint64_t)a1, v38);
        v40 = (uint64_t)a1;
        v41 = v38;
LABEL_83:
        sub_22F0A94E0(v40, v41, a2);
        a4 = 1;
        break;
      case 33:
        sub_22F0A7E10((uint64_t)a1, *v12, a3);
        return;
      case 34:
        v105 = *v318;
        v106 = (_BYTE *)*((_QWORD *)*v318 + 4);
        if ((unint64_t)v106 >= *((_QWORD *)*v318 + 3))
        {
          llvm::raw_ostream::write(v105);
        }
        else
        {
          *((_QWORD *)v105 + 4) = v106 + 1;
          *v106 = 85;
        }
        v60 = sub_22F409D88(v28);
        v59 = a1;
        goto LABEL_95;
      case 36:
        v100 = *((_QWORD *)*a1 + 2);
        v129 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this pack expansion yet", 0x25uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v129;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v200 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v200)
        {
          v201 = *(_QWORD *)(v100 + 768);
          v202 = 56 * v200;
          do
          {
            if (*(char *)(v201 + v202 - 9) < 0)
              operator delete(*(void **)(v201 + v202 - 32));
            v202 -= 56;
          }
          while (v202);
        }
        goto LABEL_409;
      case 38:
        v131 = *(_QWORD *)(v28 + 32);
        v300 = (char *)&v325;
        v323 = &v325;
        v324 = xmmword_22F44E300;
        sub_22F242C48((uint64_t)&v319, (uint64_t)&v323);
        v329 = *a1;
        v330 = (uint64_t)&v319;
        v331 = 0;
        v332 = -1;
        v333 = v335;
        v334 = 0xA00000000;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v345 = &v346;
        v346 = 0;
        v347 = 0;
        v348 = v350;
        v349 = 0x400000000;
        v351 = &v353;
        v352 = 0;
        v353 = 0;
        v354 = 1;
        v357 = 0;
        v356 = 0;
        v355 = &v356;
        v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                        + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
        if ((unint64_t)(v321 - (_QWORD)v322) > 1)
          *v322++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v319, "?$");
        sub_22F0A02E8((uint64_t)&v329, "ocl_pipe", 8uLL);
        sub_22F0A1E3C(&v329, v131, a3, 2);
        v132 = (const char *)*(unsigned __int8 *)(v28 + 40);
        LODWORD(v328) = 64;
        v327 = v132;
        BYTE4(v328) = 0;
        sub_22F0A6F00(&v329, (uint64_t *)&v327, 0, 0);
        if (v328 >= 0x41 && v327)
          MEMORY[0x2348A0E84](v327, 0x1000C8000313F17);
        v116 = (char *)v323;
        v117 = v324;
        v327 = "__clang";
        v328 = 7;
LABEL_244:
        sub_22F0A99C4((llvm::raw_ostream *)a1, 0, v116, v117, (uint64_t)&v327, 1);
        sub_22F258024(v356);
LABEL_245:
        sub_22E3B4EF4((uint64_t)&v346);
        llvm::deallocate_buffer(v342, (void *)(24 * v344));
        llvm::deallocate_buffer(v339, (void *)(16 * v341));
        llvm::deallocate_buffer(v336, (void *)(16 * v338));
        sub_22E3B9848(&v333);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v319);
        v96 = (char *)v323;
        goto LABEL_246;
      case 39:
        v45 = v9 | v18;
        a2 = *(_QWORD *)(v28 + 32);
        sub_22F0A9BA4((uint64_t)a1, v45);
        sub_22F0A94E0((uint64_t)a1, v45, a2);
        v46 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
        a4 = 1;
        if ((v46 & 8) == 0)
          continue;
        v47 = *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        if (v47 - 24 < 3 || v47 == 0)
          continue;
        v300 = (char *)&v321;
        v319 = (char *)&v321;
        v320 = xmmword_22F44E330;
        sub_22F242C48((uint64_t)&v323, (uint64_t)&v319);
        v329 = *a1;
        v330 = (uint64_t)&v323;
        v331 = 0;
        v332 = -1;
        v333 = v335;
        v334 = 0xA00000000;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        v340 = 0;
        v341 = 0;
        v343 = 0;
        v342 = 0;
        v344 = 0;
        v345 = &v346;
        v346 = 0;
        v347 = 0;
        v348 = v350;
        v349 = 0x400000000;
        v351 = &v353;
        v352 = 0;
        v353 = 0;
        v354 = 1;
        v357 = 0;
        v356 = 0;
        v355 = &v356;
        v358 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v329 + 1) + 15088)
                        + *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v329 + 1) + 15088) - 24)) == 64;
        if ((unint64_t)(v325 - (_QWORD)v326) > 1)
          *v326++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v323, "?$");
        v301 = *((_QWORD *)*a1 + 1);
        if (v47 <= 0x1A && *(_BYTE *)(v301 + 15080) == 0)
          __asm { BR              X10 }
        v303 = v47 - 27;
        if (v47 < 0x1B)
          v303 = *(_DWORD *)(*(_QWORD *)(v301 + 15072) + 4 * v47);
        sub_22F0A02E8((uint64_t)&v329, "_AS", 3uLL);
        LODWORD(v328) = 64;
        v327 = (const char *)v303;
        BYTE4(v328) = 1;
        sub_22F0A6F00(&v329, (uint64_t *)&v327, 0, 0);
        if (v328 >= 0x41 && v327)
          MEMORY[0x2348A0E84](v327, 0x1000C8000313F17);
        sub_22F0A1E3C(&v329, a2, a3, 2);
        v304 = *v318;
        v305 = (_BYTE *)*((_QWORD *)*v318 + 4);
        if ((unint64_t)v305 >= *((_QWORD *)*v318 + 3))
        {
          llvm::raw_ostream::write(v304);
        }
        else
        {
          *((_QWORD *)v304 + 4) = v305 + 1;
          *v305 = 65;
        }
        v327 = "__clang";
        v328 = 7;
        sub_22F0A99C4((llvm::raw_ostream *)a1, 0, v319, v320, (uint64_t)&v327, 1);
        sub_22F258024(v356);
        sub_22E3B4EF4((uint64_t)&v346);
        llvm::deallocate_buffer(v342, (void *)(24 * v344));
        llvm::deallocate_buffer(v339, (void *)(16 * v341));
        llvm::deallocate_buffer(v336, (void *)(16 * v338));
        sub_22E3B9848(&v333);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v323);
        v96 = v319;
LABEL_246:
        if (v96 == v300)
          return;
        goto LABEL_423;
      case 40:
        if ((v29 & 0x100000) == 0)
          goto LABEL_79;
        do
        {
          while (1)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v28)
              break;
            v49 = *(_DWORD *)(v28 + 16);
            if ((v49 & 0xFE) != 0x28)
              break;
            if ((v49 & 0x100000) == 0)
              goto LABEL_79;
          }
          v28 = sub_22F10CF48(v28);
        }
        while ((*(_DWORD *)(v28 + 16) & 0x100000) != 0);
LABEL_79:
        a2 = *(_QWORD *)(v28 + 32);
        v50 = *v318;
        v51 = (_BYTE *)*((_QWORD *)*v318 + 4);
        if ((unint64_t)v51 >= *((_QWORD *)*v318 + 3))
        {
          llvm::raw_ostream::write(v50);
        }
        else
        {
          *((_QWORD *)v50 + 4) = v51 + 1;
          *v51 = 65;
        }
        goto LABEL_82;
      case 41:
        if ((v29 & 0x100000) == 0)
          goto LABEL_65;
        do
        {
          while (1)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v28)
              break;
            v42 = *(_DWORD *)(v28 + 16);
            if ((v42 & 0xFE) != 0x28)
              break;
            if ((v42 & 0x100000) == 0)
              goto LABEL_65;
          }
          v28 = sub_22F10CF48(v28);
        }
        while ((*(_DWORD *)(v28 + 16) & 0x100000) != 0);
LABEL_65:
        a2 = *(_QWORD *)(v28 + 32);
        v43 = *v318;
        v44 = *((_QWORD *)*v318 + 4);
        if ((unint64_t)(*((_QWORD *)*v318 + 3) - v44) > 2)
        {
          *(_BYTE *)(v44 + 2) = 81;
          *(_WORD *)v44 = 9252;
          *((_QWORD *)v43 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v43, "$$Q");
        }
LABEL_82:
        v41 = v9 | v18;
        v40 = (uint64_t)a1;
        goto LABEL_83;
      case 42:
        v100 = *((_QWORD *)*a1 + 2);
        v113 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this substituted parameter pack yet", 0x31uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v113;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v176 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v176)
        {
          v177 = *(_QWORD *)(v100 + 768);
          v178 = 56 * v176;
          do
          {
            if (*(char *)(v177 + v178 - 9) < 0)
              operator delete(*(void **)(v177 + v178 - 32));
            v178 -= 56;
          }
          while (v178);
        }
        goto LABEL_409;
      case 44:
      case 45:
        v58 = sub_22F114198(*(_QWORD *)(v28 + 24));
        sub_22F0A9AC8((llvm::raw_ostream *)a1, (unsigned __int16)*(_DWORD *)(v58 + 72) >> 13);
        v59 = a1;
        v60 = v58;
LABEL_95:
        sub_22F09CFFC(v59, v60, 0);
        return;
      case 46:
        v100 = *((_QWORD *)*a1 + 2);
        v101 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this template specialization type yet", 0x33uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v101;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v149 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v149)
        {
          v150 = *(_QWORD *)(v100 + 768);
          v151 = 56 * v149;
          do
          {
            if (*(char *)(v150 + v151 - 9) < 0)
              operator delete(*(void **)(v150 + v151 - 32));
            v151 -= 56;
          }
          while (v151);
        }
        goto LABEL_409;
      case 47:
        v100 = *((_QWORD *)*a1 + 2);
        v107 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this template type parameter type yet", 0x33uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v107;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v158 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v158)
        {
          v159 = *(_QWORD *)(v100 + 768);
          v160 = 56 * v158;
          do
          {
            if (*(char *)(v159 + v160 - 9) < 0)
              operator delete(*(void **)(v159 + v160 - 32));
            v160 -= 56;
          }
          while (v160);
        }
        goto LABEL_409;
      case 48:
        v100 = *((_QWORD *)*a1 + 2);
        v108 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this typeof(expression) yet", 0x29uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v108;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v161 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v161)
        {
          v162 = *(_QWORD *)(v100 + 768);
          v163 = 56 * v161;
          do
          {
            if (*(char *)(v162 + v163 - 9) < 0)
              operator delete(*(void **)(v162 + v163 - 32));
            v163 -= 56;
          }
          while (v163);
        }
        goto LABEL_409;
      case 49:
        v100 = *((_QWORD *)*a1 + 2);
        v130 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this typeof(type) yet", 0x23uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v130;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v203 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v203)
        {
          v204 = *(_QWORD *)(v100 + 768);
          v205 = 56 * v203;
          do
          {
            if (*(char *)(v204 + v205 - 9) < 0)
              operator delete(*(void **)(v204 + v205 - 32));
            v205 -= 56;
          }
          while (v205);
        }
        goto LABEL_409;
      case 51:
        v100 = *((_QWORD *)*a1 + 2);
        v103 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this unary transform type yet", 0x2BuLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v103;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v152 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v152)
        {
          v153 = *(_QWORD *)(v100 + 768);
          v154 = 56 * v152;
          do
          {
            if (*(char *)(v153 + v154 - 9) < 0)
              operator delete(*(void **)(v153 + v154 - 32));
            v154 -= 56;
          }
          while (v154);
        }
        goto LABEL_409;
      case 52:
        v100 = *((_QWORD *)*a1 + 2);
        v109 = sub_22F41A810(*(_QWORD *)(v100 + 32), 4, "cannot mangle this unresolved dependent type yet", 0x30uLL);
        v102 = a3;
        *(_DWORD *)(v100 + 312) = a3;
        *(_DWORD *)(v100 + 316) = v109;
        if (*(char *)(v100 + 311) < 0)
        {
          **(_BYTE **)(v100 + 288) = 0;
          *(_QWORD *)(v100 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v100 + 288) = 0;
          *(_BYTE *)(v100 + 311) = 0;
        }
        v329 = (llvm::APInt *)(v100 + 320);
        v330 = 0;
        v331 = v100;
        LOWORD(v332) = 1;
        *(_BYTE *)(v100 + 320) = 0;
        *(_DWORD *)(v100 + 664) = 0;
        v164 = *(unsigned int *)(v100 + 776);
        if ((_DWORD)v164)
        {
          v165 = *(_QWORD *)(v100 + 768);
          v166 = 56 * v164;
          do
          {
            if (*(char *)(v165 + v166 - 9) < 0)
              operator delete(*(void **)(v165 + v166 - 32));
            v166 -= 56;
          }
          while (v166);
        }
LABEL_409:
        *(_DWORD *)(v100 + 776) = 0;
        v147 = v100 + 656;
        v148 = v102;
LABEL_410:
        sub_22E4D6448(v147, v148, 1);
        sub_22E3BB0B8((uint64_t)&v329);
        return;
      case 55:
      case 56:
        sub_22F0A8604((llvm::raw_ostream *)a1, *v12, a3);
        return;
      default:
        return;
    }
  }
  v61 = v11;
  if (a4 == 1)
  {
    v62 = *v318;
    v63 = (_BYTE *)*((_QWORD *)*v318 + 4);
    if ((unint64_t)v63 >= *((_QWORD *)*v318 + 3))
    {
      llvm::raw_ostream::write(v62);
    }
    else
    {
      *((_QWORD *)v62 + 4) = v63 + 1;
      *v63 = 65;
    }
  }
  else if ((a4 & 0xFFFFFFFE) == 2)
  {
    v74 = *v318;
    v75 = *((_QWORD *)*v318 + 4);
    if ((unint64_t)(*((_QWORD *)*v318 + 3) - v75) > 2)
    {
      *(_BYTE *)(v75 + 2) = 66;
      *(_WORD *)v75 = 9252;
      *((_QWORD *)v74 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v74, "$$B");
    }
  }
  v76 = v61 & 0xFFFFFFFFFFFFFFF0;
  v329 = (llvm::APInt *)&v331;
  v330 = 0x300000000;
  while (2)
  {
    switch(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16))
    {
      case 2:
        v77 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v76);
        if (v77)
        {
          if (*(_BYTE *)(v77 + 16) == 2)
            v78 = v77;
          else
            v78 = 0;
        }
        else
        {
          v78 = 0;
        }
        v81 = (char *)(v78 + 40);
        v82 = v329;
        if (v330 >= HIDWORD(v330))
        {
          if (v329 <= (llvm::APInt *)v81 && (char *)v329 + 16 * v330 > v81)
          {
            v85 = v81 - (char *)v329;
            sub_22F0A8E18((uint64_t)&v329);
            v82 = v329;
            v81 = (char *)v329 + v85;
          }
          else
          {
            sub_22F0A8E18((uint64_t)&v329);
            v82 = v329;
          }
        }
        v83 = (llvm::APInt *)((char *)v82 + 16 * v330);
        v84 = *((_DWORD *)v81 + 2);
        *((_DWORD *)v83 + 2) = v84;
        if (v84 > 0x40)
          llvm::APInt::initSlowCase(v83, (const llvm::APInt *)v81);
        else
          *(_QWORD *)v83 = *(_QWORD *)v81;
        LODWORD(v330) = v330 + 1;
        goto LABEL_146;
      case 3:
        v98 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v76);
        if (v98)
        {
          if (*(_BYTE *)(v98 + 16) == 3)
            v99 = v98;
          else
            v99 = 0;
        }
        else
        {
          v99 = 0;
        }
        v135 = *((_QWORD *)*a1 + 2);
        v136 = sub_22F41A810(*(_QWORD *)(v135 + 32), 4, "cannot mangle this dependent-length array yet", 0x2DuLL);
        sub_22EFF605C(*(_QWORD *)(v99 + 48));
        *(_DWORD *)(v135 + 312) = v137;
        *(_DWORD *)(v135 + 316) = v136;
        if (*(char *)(v135 + 311) < 0)
        {
          **(_BYTE **)(v135 + 288) = 0;
          *(_QWORD *)(v135 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v135 + 288) = 0;
          *(_BYTE *)(v135 + 311) = 0;
        }
        v323 = (void *)(v135 + 320);
        *(_QWORD *)&v324 = 0;
        *((_QWORD *)&v324 + 1) = v135;
        LOWORD(v325) = 1;
        *(_BYTE *)(v135 + 320) = 0;
        *(_DWORD *)(v135 + 664) = 0;
        v138 = *(unsigned int *)(v135 + 776);
        if ((_DWORD)v138)
        {
          v139 = *(_QWORD *)(v135 + 768);
          v140 = 56 * v138;
          do
          {
            if (*(char *)(v139 + v140 - 9) < 0)
              operator delete(*(void **)(v139 + v140 - 32));
            v140 -= 56;
          }
          while (v140);
        }
        *(_DWORD *)(v135 + 776) = 0;
        sub_22E4D6448(v135 + 656, *(_QWORD *)(v99 + 56), 1);
        sub_22E3BB0B8((uint64_t)&v323);
        goto LABEL_163;
      case 4:
        v79 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v76);
        if (!v79)
          goto LABEL_136;
        v80 = *(_BYTE *)(v79 + 16) == 4;
        goto LABEL_133;
      case 5:
        v79 = sub_22EF5C728(*((_QWORD *)*a1 + 1), v76);
        if (v79)
        {
          v80 = *(_BYTE *)(v79 + 16) == 5;
LABEL_133:
          if (v80)
            v78 = v79;
          else
            v78 = 0;
        }
        else
        {
LABEL_136:
          v78 = 0;
        }
        LODWORD(v324) = 32;
        v323 = 0;
        sub_22F0A8D2C((uint64_t)&v329, (unint64_t)&v323);
        if (v324 >= 0x41 && v323)
          MEMORY[0x2348A0E84](v323, 0x1000C8000313F17);
LABEL_146:
        v76 = *(_QWORD *)(v78 + 32);
        continue;
      default:
        v86 = *v318;
        v87 = (_BYTE *)*((_QWORD *)*v318 + 4);
        if ((unint64_t)v87 >= *((_QWORD *)*v318 + 3))
        {
          llvm::raw_ostream::write(v86);
        }
        else
        {
          *((_QWORD *)v86 + 4) = v87 + 1;
          *v87 = 89;
        }
        sub_22F0A8DC0((uint64_t)a1, v330);
        if (!(_DWORD)v330)
          goto LABEL_162;
        v88 = v329;
        v89 = 16 * v330;
        break;
    }
    break;
  }
  do
  {
    v90 = *((_DWORD *)v88 + 2);
    v91 = (uint64_t *)v88;
    if (v90 >= 0x41)
    {
      if (v90 - llvm::APInt::countLeadingZerosSlowCase(v88) > 0x40)
      {
        v92 = -1;
        goto LABEL_161;
      }
      v91 = *(uint64_t **)v88;
    }
    v92 = *v91;
LABEL_161:
    sub_22F0A8DC0((uint64_t)a1, v92);
    v88 = (llvm::APInt *)((char *)v88 + 16);
    v89 -= 16;
  }
  while (v89);
LABEL_162:
  sub_22F0A1E3C(a1, v76, 0, 2);
LABEL_163:
  v93 = v329;
  if ((_DWORD)v330)
  {
    v94 = 16 * v330;
    do
    {
      if (*(_DWORD *)((char *)v93 + v94 - 8) >= 0x41u)
      {
        v95 = *(_QWORD *)((char *)v93 + v94 - 16);
        if (v95)
          MEMORY[0x2348A0E84](v95, 0x1000C8000313F17);
      }
      v94 -= 16;
    }
    while (v94);
    v93 = v329;
  }
  if (v93 != (llvm::APInt *)&v331)
  {
    v96 = (char *)v93;
    goto LABEL_423;
  }
}

void sub_22F0A6930(llvm::raw_ostream **a1, unint64_t a2, unint64_t a3, const void *a4, size_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  char *v17;

  v10 = sub_22F3E87A8(a2);
  if (a3)
  {
    v11 = sub_22F0CBBE4(*((_QWORD *)*a1 + 1), a3);
    v12 = v11
        / sub_22EF5CDF0(*((_QWORD *)*a1 + 1), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 1) + 16408) & 0xFFFFFFFFFFFFFFF0));
    if (v10 == 2)
    {
      v15 = sub_22F36894C(*((_QWORD *)*a1 + 1), a2);
      v13 = 0;
      v12 -= v15;
LABEL_10:
      v14 = 70;
      goto LABEL_11;
    }
    v13 = 0;
  }
  else
  {
    v12 = sub_22F3E87D0(a2) - 1;
    v13 = -1;
  }
  switch(v10)
  {
    case 0:
    case 1:
      v14 = 48;
      break;
    case 2:
      goto LABEL_10;
    case 3:
      v14 = 71;
      break;
    default:
      v14 = 0;
      break;
  }
LABEL_11:
  v16 = a1[1];
  v17 = (char *)*((_QWORD *)v16 + 4);
  if (a5 <= *((_QWORD *)v16 + 3) - (_QWORD)v17)
  {
    if (a5)
    {
      memcpy(v17, a4, a5);
      v17 = (char *)(*((_QWORD *)v16 + 4) + a5);
      *((_QWORD *)v16 + 4) = v17;
    }
  }
  else
  {
    v16 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1[1], (const char *)a4);
    v17 = (char *)*((_QWORD *)v16 + 4);
  }
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = v14;
  }
  sub_22F0A8DC0((uint64_t)a1, v12);
  if (v10 == 3)
  {
    sub_22F0A8DC0((uint64_t)a1, 0);
  }
  else if (v10 < 2)
  {
    return;
  }
  sub_22F0A8DC0((uint64_t)a1, v13);
}

void sub_22F0A6AF0(llvm::raw_ostream **a1, unint64_t a2, unint64_t a3, const void *a4, size_t a5)
{
  unsigned int v10;
  int v11;
  char v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;

  v10 = sub_22F3E87A8(a2);
  v11 = v10;
  if (v10 >= 4)
    v12 = 0;
  else
    v12 = 0x4A494831u >> (8 * v10);
  if (a3)
  {
    v13 = a1[1];
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if (a5 <= *((_QWORD *)v13 + 3) - (_QWORD)v14)
    {
      if (a5)
      {
        memcpy(v14, a4, a5);
        v14 = (_BYTE *)(*((_QWORD *)v13 + 4) + a5);
        *((_QWORD *)v13 + 4) = v14;
      }
    }
    else
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1[1], (const char *)a4);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    }
    if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
    {
      v13 = (llvm::raw_ostream *)llvm::raw_ostream::write(v13);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = v12;
    }
    v17 = (_BYTE *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v13 + 3))
    {
      llvm::raw_ostream::write(v13);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v17 + 1;
      *v17 = 63;
    }
    v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 32))(a3);
    if ((*(_BYTE *)(v18 + 82) & 0xC) != 0 || sub_22EFD7260(v18))
    {
      v25 = sub_22F36EF28(*((_QWORD **)*a1 + 1));
      if (sub_22E462B18(a3))
        v26 = a3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a3) + 96) & 0x80) == 0);
      else
        v26 = a3;
      sub_22F40C3DC(v25, v26, 0, (uint64_t)v27);
      sub_22F0A9C44(a1, a3, (uint64_t)v27);
      v22 = v28;
      v21 = 4 * v27[0];
      if (v27[1])
        v20 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*((_QWORD *)*a1 + 1), a2) + 72) + 32);
      else
        v20 = 0;
    }
    else
    {
      if (sub_22E462B18(a3))
        v19 = a3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a3) + 96) & 0x80) == 0);
      else
        v19 = a3;
      sub_22F09CFFC(a1, v19, 0);
      if (sub_22E462B18(a3))
        a3 = a3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a3) + 96) & 0x80) == 0);
      sub_22F09D070((uint64_t)a1, a3, 0, 1);
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    if (v11 == 2 && !v21)
    {
      v20 = v22 - sub_22F36894C(*((_QWORD *)*a1 + 1), a2);
      goto LABEL_41;
    }
LABEL_39:
    if (v11 < 1)
      return;
    sub_22F0A8DC0((uint64_t)a1, v22);
    if (v11 != 3)
    {
      if (v11 <= 1)
        return;
      goto LABEL_43;
    }
LABEL_41:
    sub_22F0A8DC0((uint64_t)a1, v20);
LABEL_43:
    sub_22F0A8DC0((uint64_t)a1, v21);
    return;
  }
  if (v10 == 3)
  {
    v21 = -1;
LABEL_32:
    v23 = a1[1];
    v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    if (a5 <= *((_QWORD *)v23 + 3) - (_QWORD)v24)
    {
      if (a5)
      {
        memcpy(v24, a4, a5);
        v24 = (_BYTE *)(*((_QWORD *)v23 + 4) + a5);
        *((_QWORD *)v23 + 4) = v24;
      }
    }
    else
    {
      v23 = (llvm::raw_ostream *)llvm::raw_ostream::write(a1[1], (const char *)a4);
      v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    }
    if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
    {
      llvm::raw_ostream::write(v23);
      v20 = 0;
      v22 = 0;
    }
    else
    {
      v20 = 0;
      v22 = 0;
      *((_QWORD *)v23 + 4) = v24 + 1;
      *v24 = v12;
    }
    goto LABEL_39;
  }
  if (v10)
  {
    v21 = 0;
    goto LABEL_32;
  }
  v15 = a1[1];
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (a5 <= *((_QWORD *)v15 + 3) - (_QWORD)v16)
  {
    if (a5)
    {
      memcpy(v16, a4, a5);
      v16 = (_BYTE *)(*((_QWORD *)v15 + 4) + a5);
      *((_QWORD *)v15 + 4) = v16;
    }
  }
  else
  {
    v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, (const char *)a4);
    v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  }
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 2uLL)
  {
    v16[2] = 64;
    *(_WORD *)v16 = 16688;
    *((_QWORD *)v15 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v15, "0A@");
  }
}

void sub_22F0A6F00(_QWORD *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;

  v8 = (llvm::raw_ostream *)a1[1];
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "$");
    if (!a3)
      goto LABEL_12;
  }
  else
  {
    *v9 = 36;
    ++*((_QWORD *)v8 + 4);
    if (!a3)
      goto LABEL_12;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000) + 192) >= 0xB71B000u
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 14
    && a4 >= 0x10)
  {
    v11 = (llvm::raw_ostream *)a1[1];
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, "M");
    }
    else
    {
      *v12 = 77;
      ++*((_QWORD *)v11 + 4);
    }
    sub_22F0A1E3C(a1, a4, 0, 0);
  }
LABEL_12:
  v13 = (llvm::raw_ostream *)a1[1];
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v14)
  {
    llvm::raw_ostream::write(v13, "0");
  }
  else
  {
    *v14 = 48;
    ++*((_QWORD *)v13 + 4);
  }
  v16 = *((_DWORD *)a2 + 2);
  if (v16 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, (const llvm::APInt *)a2);
  else
    v15 = *a2;
  v17 = *((_BYTE *)a2 + 12);
  sub_22F0A8F10((uint64_t)a1, (llvm::APInt *)&v15);
  if (v16 >= 0x41)
  {
    if (v15)
      MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
  }
}

llvm::raw_ostream *sub_22F0A709C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  char v28;
  llvm::raw_ostream *v29;
  char *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  llvm::APInt **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BOOL4 v62;
  const char *v63;
  size_t v64;
  const char *v65;
  void **v66;
  void **p_p;
  char *v68;
  BOOL v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type v73;
  char *v74;
  size_t v75;
  unsigned int v76;
  llvm::raw_ostream *v77;
  char *v78;
  unint64_t v79;
  char v80;
  char *v81;
  char v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  size_t v85;
  char *v86;
  llvm::raw_ostream *v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  llvm::raw_ostream *v91;
  const char *v92;
  size_t v93;
  void *v94;
  llvm::raw_ostream *result;
  unint64_t v96;
  uint64_t v97;
  int v98;
  _WORD *v99;
  _BYTE *v100;
  llvm::raw_ostream *v101;
  char *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t *v114;
  std::string v116;
  void *__p;
  __int128 v118;
  char *v119;
  _QWORD v120[2];
  __int128 v121;
  _QWORD v122[4];

  v122[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 16) == 26)
    v9 = a2;
  else
    v9 = 0;
  if (!a3)
  {
    v113 = 0;
    v12 = 0;
    v13 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1F;
LABEL_11:
    LODWORD(v16) = 0;
    v17 = 0;
    v18 = 0;
    if ((a4 & 1) != 0)
      goto LABEL_47;
    goto LABEL_12;
  }
  v10 = *(_QWORD *)a3;
  v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 16))(a3);
  v12 = v11;
  v113 = HIDWORD(v11);
  v13 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1F;
  if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 54 >= 4)
    goto LABEL_11;
  v14 = *(_WORD *)(a3 + 80) & 0x7F;
  v15 = -40;
  if (v14 > 0x46)
  {
    if (v14 == 83)
      goto LABEL_25;
    if (v14 == 71)
    {
      v15 = -56;
      goto LABEL_25;
    }
    if (v14 != 81)
    {
LABEL_20:
      v19 = v14 - 52;
      v20 = v14 - 33 >= 5;
      v21 = -48;
      if (!v20)
        v21 = -64;
      if (v19 >= 6)
        v15 = v21;
      else
        v15 = -72;
    }
  }
  else
  {
    if (v14 > 0x18)
      goto LABEL_19;
    if (v14 == 16)
    {
LABEL_9:
      v15 = -48;
      goto LABEL_25;
    }
    if (((1 << v14) & 0x1066) == 0)
    {
      if (v14 == 24)
        goto LABEL_9;
LABEL_19:
      if (v14 == 70)
      {
        v15 = -64;
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
LABEL_25:
  v22 = *(_QWORD *)(a3 + 72 + v15 + 16);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  if ((v22 & 4) != 0)
    v23 = (_QWORD *)*v23;
  if (v23)
    v24 = v23 - 8;
  else
    v24 = 0;
  v25 = v24[16];
  if (v25)
    v16 = ((unint64_t)(*(unsigned __int8 *)(v25 + 10) << 16) >> 20) & 1;
  else
    LODWORD(v16) = 0;
  if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(v10 + 32))(a3) + 80) & 0xE000) == 0x4000)
    v26 = 1;
  else
    v26 = (*(_QWORD *)(a3 + 40) & 7) == 6
       && (*(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
  v27 = !v26 | a4;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x39)
  {
LABEL_41:
    v18 = 0;
    if (!v27)
      goto LABEL_157;
    goto LABEL_46;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x37)
  {
    if ((v27 & 1) != 0)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_47;
    }
LABEL_12:
    sub_22F0A962C(a1, v13);
    goto LABEL_56;
  }
  if ((*(_DWORD *)(a1 + 24) - 3) >= 2)
  {
    v18 = 0;
    if ((v27 & 1) != 0)
    {
LABEL_46:
      v17 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != a3 && sub_22F09CFB0(a3) != *(_QWORD *)(a1 + 16))
      goto LABEL_41;
    v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 15064);
    v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 24))(v89, 0);
    v17 = 1;
    v18 = 1;
    if ((v27 & 1) != 0)
    {
LABEL_47:
      v28 = sub_22E47E1B0(v9);
      sub_22F0A94E0(a1, v28, 0);
      if ((*(_DWORD *)(v9 + 20) & 3) == 2)
      {
        v29 = *(llvm::raw_ostream **)(a1 + 8);
        v30 = (char *)*((_QWORD *)v29 + 4);
        if ((unint64_t)v30 < *((_QWORD *)v29 + 3))
        {
          *((_QWORD *)v29 + 4) = v30 + 1;
          v31 = 72;
          goto LABEL_53;
        }
      }
      else
      {
        if ((*(_DWORD *)(v9 + 20) & 3) != 1)
          goto LABEL_55;
        v29 = *(llvm::raw_ostream **)(a1 + 8);
        v30 = (char *)*((_QWORD *)v29 + 4);
        if ((unint64_t)v30 < *((_QWORD *)v29 + 3))
        {
          *((_QWORD *)v29 + 4) = v30 + 1;
          v31 = 71;
LABEL_53:
          *v30 = v31;
          goto LABEL_55;
        }
      }
      llvm::raw_ostream::write(v29);
LABEL_55:
      sub_22F0A7CF0(*(llvm::raw_ostream **)(a1 + 8), v28, 0);
      sub_22F0A962C(a1, v13);
      if (v17)
        goto LABEL_158;
LABEL_56:
      if (a3 && (_DWORD)v16 && (*(_DWORD *)(a3 + 28) & 0x7F) == 0x38)
      {
        v32 = *(_QWORD *)(a2 + 24);
        v33 = v12 | (v113 << 32);
        v34 = (llvm::APInt **)a1;
        goto LABEL_77;
      }
      v35 = *(_QWORD *)(a2 + 24);
      if (!(_DWORD)v16 || (*(_DWORD *)(a3 + 28) & 0x7F) != 0x38)
      {
        v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
        LOBYTE(__p) = 0;
        v37 = sub_22F110500((uint64_t)&__p, v36);
        if (v37)
        {
          v38 = v37;
          if (*(_BYTE *)(v37 + 16) == 14)
          {
            v39 = *(llvm::raw_ostream **)(a1 + 8);
            v40 = (_BYTE *)*((_QWORD *)v39 + 4);
            if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
            {
              llvm::raw_ostream::write(v39);
              if ((v35 & 8) != 0)
                goto LABEL_66;
            }
            else
            {
              *((_QWORD *)v39 + 4) = v40 + 1;
              *v40 = 63;
              if ((v35 & 8) != 0)
              {
LABEL_66:
                v41 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                v42 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF0) + 0x18);
LABEL_142:
                sub_22F0A7CF0(*(llvm::raw_ostream **)(a1 + 8), v41 | v42 | v35 & 7, 0);
                v83 = *(llvm::raw_ostream **)(a1 + 8);
                v84 = (_BYTE *)*((_QWORD *)v83 + 4);
                if ((unint64_t)v84 >= *((_QWORD *)v83 + 3))
                {
                  llvm::raw_ostream::write(v83);
                }
                else
                {
                  *((_QWORD *)v83 + 4) = v84 + 1;
                  *v84 = 63;
                }
                if ((*(_DWORD *)(v38 + 16) & 0x180000) == 0x80000)
                  v85 = 15;
                else
                  v85 = 6;
                if ((*(_DWORD *)(v38 + 16) & 0x180000) == 0x80000)
                  v86 = "<decltype-auto>";
                else
                  v86 = "<auto>";
                sub_22F0A02E8(a1, v86, v85);
LABEL_152:
                v87 = *(llvm::raw_ostream **)(a1 + 8);
                v88 = (_BYTE *)*((_QWORD *)v87 + 4);
                if ((unint64_t)v88 >= *((_QWORD *)v87 + 3))
                  goto LABEL_175;
                goto LABEL_153;
              }
            }
            LOBYTE(v41) = 0;
            v42 = 0;
            goto LABEL_142;
          }
        }
        if ((_DWORD)v16)
          goto LABEL_152;
        v43 = *(_QWORD *)(v36 + 8);
        v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
        if (v44)
          v45 = (*(_DWORD *)(v44 + 16) & 0xFF800FF) == 86507531;
        else
          v45 = 0;
        if (v45)
        {
          if ((v43 & 0xF) != 0)
            v36 = (uint64_t)sub_22F10D2BC(v35);
          v35 = v36 & 0xFFFFFFFFFFFFFFF0;
        }
      }
      v33 = v12 | (v113 << 32);
      v34 = (llvm::APInt **)a1;
      v32 = v35;
LABEL_77:
      sub_22F0A1E3C(v34, v32, v33, 3);
      if (!v9)
        goto LABEL_176;
      goto LABEL_78;
    }
  }
LABEL_157:
  sub_22F0A962C(a1, v13);
LABEL_158:
  if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x39 || *(_QWORD *)(a1 + 16) != a3 && sub_22F09CFB0(a3) != *(_QWORD *)(a1 + 16))
    goto LABEL_171;
  v90 = *(_DWORD *)(a1 + 24);
  if (v90 == 1)
  {
    result = *(llvm::raw_ostream **)(a1 + 8);
    v106 = *((_QWORD *)result + 4);
    if ((unint64_t)(*((_QWORD *)result + 3) - v106) <= 2)
    {
      v92 = "XXZ";
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v92);
    }
    *(_BYTE *)(v106 + 2) = 90;
    *(_WORD *)v106 = 22616;
    v109 = *((_QWORD *)result + 4) + 3;
    goto LABEL_219;
  }
  if (v90)
  {
LABEL_171:
    v87 = *(llvm::raw_ostream **)(a1 + 8);
    v96 = *((_QWORD *)v87 + 3);
    v88 = (_BYTE *)*((_QWORD *)v87 + 4);
    if (v18)
    {
      if ((unint64_t)v88 >= v96)
      {
        llvm::raw_ostream::write(v87);
      }
      else
      {
        *((_QWORD *)v87 + 4) = v88 + 1;
        *v88 = 88;
      }
      if (*(_DWORD *)(a1 + 24) == 4)
      {
        v101 = *(llvm::raw_ostream **)(a1 + 8);
        v102 = (char *)*((_QWORD *)v101 + 4);
        if ((unint64_t)v102 < *((_QWORD *)v101 + 3))
        {
          *((_QWORD *)v101 + 4) = v102 + 1;
          v103 = 88;
LABEL_211:
          *v102 = v103;
          goto LABEL_213;
        }
      }
      else
      {
        v104 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        v105 = *(_QWORD *)(*(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFF0);
        if (!v105 || *(_BYTE *)(v105 + 16) != 40)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v105 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
            v105 = sub_22F10CF48(v105);
          else
            v105 = 0;
        }
        if ((*(_BYTE *)(v105 + 18) & 0x10) != 0)
        {
          do
          {
            while (1)
            {
              v105 = *(_QWORD *)(*(_QWORD *)(v105 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v105)
                break;
              v107 = *(_DWORD *)(v105 + 16);
              if ((v107 & 0xFE) != 0x28)
                break;
              if ((v107 & 0x100000) == 0)
                goto LABEL_209;
            }
            v105 = sub_22F10CF48(v105);
          }
          while ((*(_DWORD *)(v105 + 16) & 0x100000) != 0);
        }
LABEL_209:
        v108 = sub_22EF5F8C4(v104, *(_QWORD *)(v105 + 32), 1);
        sub_22F0A97E0(a1, v108, v12 | (v113 << 32));
        v101 = *(llvm::raw_ostream **)(a1 + 8);
        v102 = (char *)*((_QWORD *)v101 + 4);
        if ((unint64_t)v102 < *((_QWORD *)v101 + 3))
        {
          *((_QWORD *)v101 + 4) = v102 + 1;
          v103 = 64;
          goto LABEL_211;
        }
      }
      llvm::raw_ostream::write(v101);
LABEL_213:
      result = *(llvm::raw_ostream **)(a1 + 8);
      v100 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v100 >= *((_QWORD *)result + 3))
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
LABEL_188:
      *((_QWORD *)result + 4) = v100 + 1;
      *v100 = 90;
      return result;
    }
    if ((unint64_t)v88 >= v96)
    {
LABEL_175:
      llvm::raw_ostream::write(v87);
      if (!v9)
        goto LABEL_176;
      goto LABEL_78;
    }
LABEL_153:
    *((_QWORD *)v87 + 4) = v88 + 1;
    *v88 = 64;
    if (!v9)
    {
LABEL_176:
      v77 = *(llvm::raw_ostream **)(a1 + 8);
      v81 = (char *)*((_QWORD *)v77 + 4);
      if ((unint64_t)v81 < *((_QWORD *)v77 + 3))
      {
        *((_QWORD *)v77 + 4) = v81 + 1;
        v82 = 64;
        goto LABEL_178;
      }
      goto LABEL_179;
    }
LABEL_78:
    v46 = *(_QWORD *)(v9 + 16);
    if ((v46 & 0x83FFFC000000000) != 0)
    {
      if ((v46 & 0x3FFFC000000000) != 0)
      {
        v47 = 0;
        v48 = v12 | (v113 << 32);
        v49 = a1 + 464;
        v114 = (uint64_t *)(a1 + 288);
        v50 = (char *)v122 + 5;
        v51 = (char *)v122 + 4;
        v52 = (unsigned __int16)(v46 >> 38);
        do
        {
          sub_22F0A97E0(a1, *(_QWORD *)(v9 + 40 + 8 * v47), v48);
          if (a3)
          {
            v53 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v47);
            if ((*(_BYTE *)(v53 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v53);
              v55 = *(uint64_t **)v54;
              v56 = *(unsigned int *)(v54 + 8);
              v57 = *(uint64_t **)v54;
              if ((_DWORD)v56)
              {
                v58 = 8 * v56;
                v57 = *(uint64_t **)v54;
                while (*(_WORD *)(*v57 + 32) != 83)
                {
                  ++v57;
                  v58 -= 8;
                  if (!v58)
                    goto LABEL_89;
                }
              }
              if (v57 != &v55[v56])
              {
                v111 = v50;
                v112 = v51;
                do
                {
                  v60 = *v55++;
                  v59 = v60;
                }
                while (*(_WORD *)(v60 + 32) != 83);
                LODWORD(v61) = *(_DWORD *)(v59 + 36);
                v62 = sub_22F248BA8(v59);
                LODWORD(__p) = v61;
                BYTE4(__p) = v62;
                v119 = (char *)sub_22F3E8A24(v49, v61, v62, (uint64_t *)&__p) + 28;
                *(_QWORD *)&v121 = v119;
                __p = 0;
                if (!sub_22F246C54(v114, &v121, &__p)
                  || __p == (void *)(*(_QWORD *)(a1 + 288) + 16 * *(unsigned int *)(a1 + 304)))
                {
                  v110 = v49;
                  if (v62)
                    v63 = "__pass_dynamic_object_size";
                  else
                    v63 = "__pass_object_size";
                  if (v62)
                    v64 = 26;
                  else
                    v64 = 18;
                  if (v62)
                  {
                    v65 = v63;
                    v66 = (void **)operator new(0x20uLL);
                    v63 = v65;
                    p_p = v66;
                    __p = v66;
                    v118 = xmmword_22F45E210;
                  }
                  else
                  {
                    HIBYTE(v118) = 18;
                    p_p = &__p;
                  }
                  v61 = (int)v61;
                  memcpy(p_p, v63, v64);
                  *((_BYTE *)p_p + v64) = 0;
                  v50 = v111;
                  v68 = v111;
                  if ((_DWORD)v61)
                  {
                    do
                    {
                      *--v68 = (v61 % 0xA) | 0x30;
                      v69 = v61 > 9;
                      v61 /= 0xAuLL;
                    }
                    while (v69);
                  }
                  else
                  {
                    BYTE4(v122[0]) = 48;
                    v68 = v112;
                  }
                  sub_22E3B4274(&v116, v68, v111, v111 - v68);
                  if (v118 >= 0)
                    v70 = (const std::string::value_type *)&__p;
                  else
                    v70 = (const std::string::value_type *)__p;
                  if (v118 >= 0)
                    v71 = HIBYTE(v118) & 0x7F;
                  else
                    v71 = v118;
                  v72 = std::string::insert(&v116, 0, v70, v71);
                  v73 = v72->__r_.__value_.__r.__words[2];
                  v121 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                  v122[0] = v73;
                  v72->__r_.__value_.__l.__size_ = 0;
                  v72->__r_.__value_.__r.__words[2] = 0;
                  v72->__r_.__value_.__r.__words[0] = 0;
                  if (v122[0] >= 0)
                    v74 = (char *)&v121;
                  else
                    v74 = (char *)v121;
                  if (v122[0] >= 0)
                    v75 = HIBYTE(v122[0]) & 0x7F;
                  else
                    v75 = *((_QWORD *)&v121 + 1);
                  v120[0] = "__clang";
                  v120[1] = 7;
                  sub_22F0A99C4((llvm::raw_ostream *)a1, 4, v74, v75, (uint64_t)v120, 1);
                  if (SHIBYTE(v122[0]) < 0)
                    operator delete((void *)v121);
                  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v116.__r_.__value_.__l.__data_);
                  v76 = *(_DWORD *)(a1 + 296);
                  if (v76 <= 9)
                    *((_DWORD *)sub_22F283EC0(v114, &v119) + 2) = v76;
                  v51 = v112;
                  if (SHIBYTE(v118) < 0)
                    operator delete(__p);
                  v49 = v110;
                }
                else
                {
                  llvm::raw_ostream::operator<<();
                  v50 = v111;
                  v51 = v112;
                }
              }
            }
          }
LABEL_89:
          ++v47;
        }
        while (v47 != v52);
        v46 = *(_QWORD *)(v9 + 16);
      }
      v77 = *(llvm::raw_ostream **)(a1 + 8);
      v79 = *((_QWORD *)v77 + 3);
      v78 = (char *)*((_QWORD *)v77 + 4);
      if ((v46 & 0x800000000000000) != 0)
      {
        if ((unint64_t)v78 >= v79)
          goto LABEL_179;
        *((_QWORD *)v77 + 4) = v78 + 1;
        v80 = 90;
      }
      else
      {
        if ((unint64_t)v78 >= v79)
          goto LABEL_179;
        *((_QWORD *)v77 + 4) = v78 + 1;
        v80 = 64;
      }
      *v78 = v80;
LABEL_180:
      if (a5
        && (v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 2000), (*(_BYTE *)(v97 + 1) & 8) != 0)
        && *(_DWORD *)(v97 + 192) >= 0xB657B00u)
      {
        v98 = sub_22F113A44(v9);
        result = *(llvm::raw_ostream **)(a1 + 8);
        if (!v98)
        {
          v99 = (_WORD *)*((_QWORD *)result + 4);
          if (*((_QWORD *)result + 3) - (_QWORD)v99 <= 1uLL)
            return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "_E");
          *v99 = 17759;
          v109 = *((_QWORD *)result + 4) + 2;
LABEL_219:
          *((_QWORD *)result + 4) = v109;
          return result;
        }
      }
      else
      {
        result = *(llvm::raw_ostream **)(a1 + 8);
      }
      v100 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v100 >= *((_QWORD *)result + 3))
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      goto LABEL_188;
    }
    v77 = *(llvm::raw_ostream **)(a1 + 8);
    v81 = (char *)*((_QWORD *)v77 + 4);
    if ((unint64_t)v81 < *((_QWORD *)v77 + 3))
    {
      *((_QWORD *)v77 + 4) = v81 + 1;
      v82 = 88;
LABEL_178:
      *v81 = v82;
      goto LABEL_180;
    }
LABEL_179:
    llvm::raw_ostream::write(v77);
    goto LABEL_180;
  }
  v91 = *(llvm::raw_ostream **)(a1 + 8);
  if (*(_BYTE *)(a1 + 488))
    v92 = "PEAXI@Z";
  else
    v92 = "PAXI@Z";
  if (*(_BYTE *)(a1 + 488))
    v93 = 7;
  else
    v93 = 6;
  v94 = (void *)*((_QWORD *)v91 + 4);
  if (v93 > *((_QWORD *)v91 + 3) - (_QWORD)v94)
  {
    result = v91;
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, v92);
  }
  result = (llvm::raw_ostream *)memcpy(v94, v92, v93);
  *((_QWORD *)v91 + 4) += v93;
  return result;
}

llvm::raw_ostream *sub_22F0A7CF0(llvm::raw_ostream *this, char a2, char a3)
{
  int v3;
  char *v4;
  unint64_t v5;
  char v6;

  v3 = a2 & 5;
  v5 = *((_QWORD *)this + 3);
  v4 = (char *)*((_QWORD *)this + 4);
  if ((a3 & 1) == 0)
  {
    if (v3 == 5)
    {
      if ((unint64_t)v4 < v5)
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v6 = 68;
        goto LABEL_26;
      }
    }
    else if ((a2 & 4) != 0)
    {
      if ((unint64_t)v4 < v5)
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v6 = 67;
        goto LABEL_26;
      }
    }
    else if ((a2 & 1) != 0)
    {
      if ((unint64_t)v4 < v5)
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v6 = 66;
        goto LABEL_26;
      }
    }
    else if ((unint64_t)v4 < v5)
    {
      *((_QWORD *)this + 4) = v4 + 1;
      v6 = 65;
      goto LABEL_26;
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this);
  }
  if (v3 != 5)
  {
    if ((a2 & 4) != 0)
    {
      if ((unint64_t)v4 < v5)
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v6 = 83;
        goto LABEL_26;
      }
    }
    else if ((a2 & 1) != 0)
    {
      if ((unint64_t)v4 < v5)
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v6 = 82;
        goto LABEL_26;
      }
    }
    else if ((unint64_t)v4 < v5)
    {
      *((_QWORD *)this + 4) = v4 + 1;
      v6 = 81;
      goto LABEL_26;
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this);
  }
  if ((unint64_t)v4 >= v5)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this);
  *((_QWORD *)this + 4) = v4 + 1;
  v6 = 84;
LABEL_26:
  *v4 = v6;
  return this;
}

void sub_22F0A7E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  llvm *v46;
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  _BYTE v58[232];
  _QWORD v59[2];
  uint64_t v60;
  void **v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[240];
  llvm *v67;
  uint64_t v68;
  unsigned int v69;
  llvm *v70;
  uint64_t v71;
  unsigned int v72;
  llvm *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE v81[32];
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  BOOL v89;
  _QWORD v90[4];
  _WORD *v91;
  char *v92;
  __int128 v93;
  uint64_t v94;
  _WORD *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (sub_22F409D44(a2))
  {
    v56 = v58;
    v57 = xmmword_22F44E300;
    v6 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)&v92, (uint64_t)&v56);
    v60 = *(_QWORD *)a1;
    v61 = (void **)&v92;
    v62 = 0;
    v63 = -1;
    v64 = v66;
    v65 = 0xA00000000;
    v68 = 0;
    v67 = 0;
    v69 = 0;
    v71 = 0;
    v70 = 0;
    v72 = 0;
    v74 = 0;
    v73 = 0;
    v75 = 0;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
    v79 = v81;
    v80 = 0x400000000;
    v82 = &v84;
    v83 = 0;
    v84 = 0;
    v85 = 1;
    v88 = 0;
    v87 = 0;
    v86 = &v87;
    v89 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 15088)
                   + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v60 + 8) + 15088) - 24)) == 64;
    if ((unint64_t)(v94 - (_QWORD)v95) > 1)
      *v95++ = 9279;
    else
      llvm::raw_ostream::write(v6, "?$");
    sub_22F0A02E8((uint64_t)&v60, "KindOf", 6uLL);
    v90[0] = *(_QWORD *)(*(_QWORD *)a1 + 8);
    sub_22F10F8A0((uint64_t)v90, a2 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if (!v8 || *(unsigned __int8 *)(v8 + 16) - 35 <= 0xFFFFFFFD)
      v8 = sub_22F10CF48(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
    sub_22F0A7E10(&v60, v8, a3);
    v90[0] = "__ObjC";
    v90[1] = 6;
    sub_22F0A99C4((llvm::raw_ostream *)a1, 0, (char *)v56, v57, (uint64_t)v90, 1);
    sub_22F258024(v87);
    sub_22E3B4EF4((uint64_t)&v77);
    llvm::deallocate_buffer(v73, (void *)(24 * v75));
    llvm::deallocate_buffer(v70, (void *)(16 * v72));
    llvm::deallocate_buffer(v67, (void *)(16 * v69));
    sub_22E3B9848(&v64);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v92);
    if (v56 != v58)
      free(v56);
  }
  else if ((*(_BYTE *)(a2 + 19) & 0xFC) != 0 || sub_22F409CF8(a2))
  {
    v56 = (char *)&v57 + 8;
    *(_QWORD *)&v57 = 0xA00000000;
    v9 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = 0;
    v10 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    v52 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)(a1 + 304) = 0;
    v51 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;
    v11 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    v50 = *(_DWORD *)(a1 + 328);
    *(_DWORD *)(a1 + 328) = 0;
    v53 = a1 + 32;
    v54 = v9;
    sub_22F0A1300(a1 + 32, (uint64_t)&v56);
    v12 = *(llvm::raw_ostream **)(a1 + 8);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 85;
    }
    v14 = *(llvm::raw_ostream **)(a1 + 8);
    v15 = (_WORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 9279;
      *((_QWORD *)v14 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v14, "?$");
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_DWORD *)(v16 + 16) & 0xFF800FF;
    if (v16)
      v18 = v17 == 114819083;
    else
      v18 = 0;
    if (v18)
    {
      v23 = "objc_object";
      v21 = 11;
    }
    else
    {
      if (v16)
        v19 = v17 == 115343371;
      else
        v19 = 0;
      if (v19)
      {
        v23 = "objc_class";
        v21 = 10;
      }
      else
      {
        v20 = sub_22F272660(a2);
        v21 = 0;
        v22 = *(_QWORD *)(v20 + 40);
        v23 = "";
        if ((v22 & 7) == 0)
        {
          v24 = v22 & 0xFFFFFFFFFFFFFFF8;
          if (v24)
          {
            v25 = *(_DWORD **)(v24 + 16);
            v26 = *v25;
            v23 = (char *)(v25 + 4);
            v21 = v26;
          }
        }
      }
    }
    v55 = a1;
    sub_22F0A02E8(a1, v23, v21);
    v27 = *(_QWORD *)(a2 + 16);
    if (v27 >> 26)
    {
      v35 = (uint64_t *)(a2 + 8 * ((v27 >> 19) & 0x7F) + 48);
      v36 = 8 * (v27 >> 26);
      do
      {
        v37 = *v35;
        v92 = (char *)&v94;
        v93 = xmmword_22F44E300;
        sub_22F242C48((uint64_t)v90, (uint64_t)&v92);
        v60 = *(_QWORD *)a1;
        v61 = (void **)v90;
        v62 = 0;
        v63 = -1;
        v64 = v66;
        v65 = 0xA00000000;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v77 = 0;
        v78 = 0;
        v76 = &v77;
        v79 = v81;
        v80 = 0x400000000;
        v83 = 0;
        v84 = 0;
        v82 = &v84;
        v85 = 1;
        v87 = 0;
        v88 = 0;
        v86 = &v87;
        v89 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 15088)
                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v60 + 8) + 15088) - 24)) == 64;
        if (v90[3] - (_QWORD)v91 > 1uLL)
          *v91++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)v90, "?$");
        sub_22F0A02E8((uint64_t)&v60, "Protocol", 8uLL);
        v38 = 0;
        v39 = *(_QWORD *)(v37 + 40);
        v40 = "";
        if ((v39 & 7) == 0)
        {
          v41 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v41)
          {
            v42 = *(_DWORD **)(v41 + 16);
            v43 = *v42;
            v40 = (char *)(v42 + 4);
            v38 = v43;
          }
        }
        sub_22F0A99C4((llvm::raw_ostream *)&v60, 0, v40, v38, 0, 0);
        v59[0] = "__ObjC";
        v59[1] = 6;
        sub_22F0A99C4((llvm::raw_ostream *)a1, 0, v92, v93, (uint64_t)v59, 1);
        sub_22F258024(v87);
        sub_22E3B4EF4((uint64_t)&v77);
        llvm::deallocate_buffer(v73, (void *)(24 * v75));
        llvm::deallocate_buffer(v70, (void *)(16 * v72));
        llvm::deallocate_buffer(v67, (void *)(16 * v69));
        sub_22E3B9848(&v64);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v90);
        if (v92 != (char *)&v94)
          free(v92);
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
    if (sub_22F409CF8(a2))
    {
      v28 = sub_22F10E414(a2);
      if (v29)
      {
        v30 = (uint64_t *)v28;
        v31 = 8 * v29;
        do
        {
          v32 = *v30++;
          sub_22F0A1E3C(v55, v32, a3, 0);
          v31 -= 8;
        }
        while (v31);
      }
    }
    v33 = *(llvm::raw_ostream **)(v55 + 8);
    v34 = (_BYTE *)*((_QWORD *)v33 + 4);
    if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
    {
      llvm::raw_ostream::write(v33);
    }
    else
    {
      *((_QWORD *)v33 + 4) = v34 + 1;
      *v34 = 64;
    }
    v44 = *(llvm::raw_ostream **)(v55 + 8);
    v45 = (_BYTE *)*((_QWORD *)v44 + 4);
    if ((unint64_t)v45 >= *((_QWORD *)v44 + 3))
    {
      llvm::raw_ostream::write(v44);
    }
    else
    {
      *((_QWORD *)v44 + 4) = v45 + 1;
      *v45 = 64;
    }
    v46 = *(llvm **)(v55 + 288);
    *(_QWORD *)(v55 + 288) = v54;
    *(_QWORD *)(v55 + 296) = v10;
    v47 = *(unsigned int *)(v55 + 304);
    *(_DWORD *)(v55 + 304) = v52;
    v48 = *(llvm **)(v55 + 312);
    *(_QWORD *)(v55 + 312) = v51;
    *(_QWORD *)(v55 + 320) = v11;
    v49 = *(unsigned int *)(v55 + 328);
    *(_DWORD *)(v55 + 328) = v50;
    sub_22F0A1300(v53, (uint64_t)&v56);
    sub_22E3B9848((char **)&v56);
    llvm::deallocate_buffer(v48, (void *)(16 * v49));
    llvm::deallocate_buffer(v46, (void *)(16 * v47));
  }
  else
  {
    sub_22F0A1E3C(a1, *(_QWORD *)(a2 + 24), a3, 0);
  }
}

void sub_22F0A8604(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  size_t v15;
  void *v16;
  std::string::size_type v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  std::string *p_p;
  std::string::size_type v29;
  std::string::size_type size;
  llvm::raw_ostream *v31;
  int v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  std::string::size_type v39;
  _QWORD *v40;
  const char *v41;
  std::string v42;
  uint64_t v43;
  _WORD *v44;
  const char *v45;
  uint64_t v46;
  std::string __p;
  int v48;
  char *v49[2];
  uint64_t v50;
  llvm *v51;
  uint64_t v52;
  unsigned int v53;
  llvm *v54;
  uint64_t v55;
  unsigned int v56;
  llvm *v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  _QWORD v61[4];
  _QWORD v62[6];
  _QWORD v63[3];
  _QWORD *v64[2];
  BOOL v65;
  std::string v66;
  _QWORD v67[9];

  v67[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 16) & 0x780000) != 0x80000)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 11)
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    else
      v6 = 0;
    v7 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 8), a2);
    v8 = (_QWORD *)*((_QWORD *)a1 + 1);
    v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8) + v8[4] - v8[2];
    if (*(_BYTE *)(a2 + 16) == 56
      || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 15088) + 56) - 41) > 1)
    {
      goto LABEL_60;
    }
    if (v7 == 64)
    {
      if ((*(_DWORD *)(v6 + 16) & 0xFF80000) == 0x5C00000)
        sub_22F0A99C4(a1, 2, "__m64", 5uLL, 0, 0);
      goto LABEL_60;
    }
    if (v7 < 0x80)
    {
LABEL_60:
      v40 = (_QWORD *)*((_QWORD *)a1 + 1);
      if ((*(uint64_t (**)(_QWORD *))(*v40 + 80))(v40) + v40[4] - v40[2] == v9)
      {
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
        *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = xmmword_22F44E300;
        sub_22F242C48((uint64_t)&v42, (uint64_t)&v66);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v42;
        __p.__r_.__value_.__r.__words[2] = 0;
        v48 = -1;
        v49[0] = (char *)&v50;
        v49[1] = (char *)0xA00000000;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = v61;
        v61[0] = 0;
        v61[1] = 0;
        v61[2] = v62;
        v61[3] = 0x400000000;
        v62[4] = v63;
        v62[5] = 0;
        v63[0] = 0;
        v63[1] = 1;
        v64[1] = 0;
        v64[0] = 0;
        v63[2] = v64;
        v65 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) + 15088)
                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) + 15088) - 24)) == 64;
        if ((unint64_t)(v43 - (_QWORD)v44) > 1)
          *v44++ = 9279;
        else
          llvm::raw_ostream::write((llvm::raw_ostream *)&v42, "?$");
        sub_22F0A02E8((uint64_t)&__p, "__vector", 8uLL);
        sub_22F0A1E3C(&__p, v6 & 0xFFFFFFFFFFFFFFF0, a3, 2);
        v41 = (const char *)*(unsigned int *)(a2 + 20);
        LODWORD(v46) = 64;
        v45 = v41;
        BYTE4(v46) = 1;
        sub_22F0A6F00(&__p, (uint64_t *)&v45, 0, 0);
        if (v46 >= 0x41 && v45)
          MEMORY[0x2348A0E84](v45, 0x1000C8000313F17);
        v45 = "__clang";
        v46 = 7;
        sub_22F0A99C4(a1, 2, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_, (uint64_t)&v45, 1);
        sub_22F258024(v64[0]);
        sub_22E3B4EF4((uint64_t)v61);
        llvm::deallocate_buffer(v57, (void *)(24 * v59));
        llvm::deallocate_buffer(v54, (void *)(16 * v56));
        llvm::deallocate_buffer(v51, (void *)(16 * v53));
        sub_22E3B9848(v49);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v42);
        if (v66.__r_.__value_.__l.__data_ != (std::string::pointer)v67)
          free(v66.__r_.__value_.__l.__data_);
      }
      return;
    }
    v10 = (*(_DWORD *)(v6 + 16) >> 19) & 0x1FF;
    switch(v10)
    {
      case 184:
        v22 = 0;
        do
        {
          *((_BYTE *)&__p.__r_.__value_.__r.__words[2] + v22-- + 4) = (v7 % 0xA) | 0x30;
          v27 = v7 > 9;
          v7 /= 0xAuLL;
        }
        while (v27);
        sub_22E3B4274(&v42, (char *)&__p.__r_.__value_.__r.__words[2] + v22 + 5, &__p.__r_.__value_.__s.__data_[21], -v22);
        v23 = std::string::insert(&v42, 0, "__m");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v66, 105);
        __p = v66;
        v25 = v66.__r_.__value_.__r.__words[2];
        memset(&v66, 0, sizeof(v66));
        v26 = HIBYTE(v25);
        v27 = (v26 & 0x80u) != 0;
        if ((v26 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v29 = v26 & 0x7F;
        if (v27)
          size = __p.__r_.__value_.__l.__size_;
        else
          size = v29;
        v31 = a1;
        v32 = 2;
        break;
      case 212:
        v33 = 0;
        do
        {
          *((_BYTE *)&__p.__r_.__value_.__r.__words[2] + v33-- + 4) = (v7 % 0xA) | 0x30;
          v27 = v7 > 9;
          v7 /= 0xAuLL;
        }
        while (v27);
        sub_22E3B4274(&v42, (char *)&__p.__r_.__value_.__r.__words[2] + v33 + 5, &__p.__r_.__value_.__s.__data_[21], -v33);
        v34 = std::string::insert(&v42, 0, "__m");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v66, 100);
        __p = v66;
        v36 = v66.__r_.__value_.__r.__words[2];
        memset(&v66, 0, sizeof(v66));
        v37 = HIBYTE(v36);
        v38 = (v37 & 0x80u) != 0;
        if ((v37 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v39 = v37 & 0x7F;
        if (v38)
          size = __p.__r_.__value_.__l.__size_;
        else
          size = v39;
        v31 = a1;
        v32 = 0;
        break;
      case 211:
        v11 = 0;
        do
        {
          *((_BYTE *)&__p.__r_.__value_.__r.__words[2] + v11-- + 4) = (v7 % 0xA) | 0x30;
          v27 = v7 > 9;
          v7 /= 0xAuLL;
        }
        while (v27);
        sub_22E3B4274(&v66, (char *)&__p.__r_.__value_.__r.__words[2] + v11 + 5, &__p.__r_.__value_.__s.__data_[21], -v11);
        v12 = std::string::insert(&v66, 0, "__m");
        v13 = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__p;
        else
          v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v15 = __p.__r_.__value_.__l.__size_;
        sub_22F0A99C4(a1, 2, (char *)v14, v15, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_60;
        v16 = (void *)v66.__r_.__value_.__r.__words[0];
        goto LABEL_59;
      default:
        goto LABEL_60;
    }
    sub_22F0A99C4(v31, v32, (char *)p_p, size, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    v16 = (void *)v42.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v16);
    goto LABEL_60;
  }
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v18 = sub_22F41A810(*(_QWORD *)(v17 + 32), 4, "cannot mangle this packed vector type yet", 0x29uLL);
  *(_DWORD *)(v17 + 312) = a3;
  *(_DWORD *)(v17 + 316) = v18;
  if (*(char *)(v17 + 311) < 0)
  {
    **(_BYTE **)(v17 + 288) = 0;
    *(_QWORD *)(v17 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v17 + 288) = 0;
    *(_BYTE *)(v17 + 311) = 0;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17 + 320;
  __p.__r_.__value_.__r.__words[2] = v17;
  LOWORD(v48) = 1;
  *(_BYTE *)(v17 + 320) = 0;
  *(_DWORD *)(v17 + 664) = 0;
  v19 = *(unsigned int *)(v17 + 776);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(v17 + 768);
    v21 = 56 * v19;
    do
    {
      if (*(char *)(v20 + v21 - 9) < 0)
        operator delete(*(void **)(v20 + v21 - 32));
      v21 -= 56;
    }
    while (v21);
  }
  *(_DWORD *)(v17 + 776) = 0;
  sub_22E4D6448(v17 + 656, a3, 1);
  sub_22E3BB0B8((uint64_t)&__p);
}

uint64_t sub_22F0A8D2C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(_QWORD *)result;
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v7 = v5 + 16 * v4;
    if (v5 <= a2 && v7 > a2)
    {
      v9 = a2 - v5;
      result = sub_22F0A8E18(result);
      v5 = *(_QWORD *)v3;
      v2 = *(_QWORD *)v3 + v9;
    }
    else
    {
      result = sub_22F0A8E18(result);
      v5 = *(_QWORD *)v3;
    }
  }
  v6 = v5 + 16 * *(unsigned int *)(v3 + 8);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)v2;
  *(_DWORD *)(v2 + 8) = 0;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_22F0A8DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  char v4;

  v3 = 64;
  v2 = a2;
  v4 = 0;
  sub_22F0A8F10(a1, (llvm::APInt *)&v2);
  if (v3 >= 0x41)
  {
    if (v2)
      MEMORY[0x2348A0E84](v2, 0x1000C8000313F17);
  }
}

uint64_t sub_22F0A8E18(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(_DWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD *)(result + 8);
    v6 = 16 * v4;
    v7 = v3 + 2;
    do
    {
      *v5 = *v7;
      *((_QWORD *)v5 - 1) = *((_QWORD *)v7 - 1);
      *v7 = 0;
      v7 += 4;
      v5 += 4;
      v6 -= 16;
    }
    while (v6);
    v3 = *(_DWORD **)a1;
    v8 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      do
      {
        if (*(_DWORD *)((char *)v3 + v9 - 8) >= 0x41u)
        {
          v10 = *(_QWORD *)((char *)v3 + v9 - 16);
          if (v10)
          {
            v12 = v3;
            v13 = result;
            v11 = v9;
            MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
            v9 = v11;
            v3 = v12;
            result = v13;
          }
        }
        v9 -= 16;
      }
      while (v9);
      v3 = *(_DWORD **)a1;
    }
  }
  if (v3 != (_DWORD *)(a1 + 16))
  {
    v14 = result;
    free(v3);
    result = v14;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 12) = 0;
  return result;
}

void sub_22F0A8F10(uint64_t a1, llvm::APInt *this)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;

  if (*((_BYTE *)this + 12))
    llvm::APInt::zextOrSelf(this);
  else
    llvm::APInt::sextOrSelf(this);
  v3 = v17;
  v4 = v16;
  v5 = (unint64_t *)(v16 + 8 * ((v17 - 1) >> 6));
  if (v17 < 0x41)
    v5 = &v16;
  if (((*v5 >> (v17 - 1)) & 1) != 0)
  {
    v15 = v17;
    if (v17 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const llvm::APInt *)&v16);
      v3 = v15;
      if (v15 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v14);
LABEL_14:
        llvm::APInt::operator++();
        v8 = v15;
        v9 = v14;
        v15 = 0;
        if (v17 > 0x40 && v16)
        {
          MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
          v16 = v9;
          v17 = v8;
          if (v15 >= 0x41 && v14)
            MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
        }
        else
        {
          v16 = v14;
          v17 = v8;
        }
        v10 = *(llvm::raw_ostream **)(a1 + 8);
        v11 = (_BYTE *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
        {
          llvm::raw_ostream::write(v10);
        }
        else
        {
          *((_QWORD *)v10 + 4) = v11 + 1;
          *v11 = 63;
        }
        goto LABEL_23;
      }
      v4 = v14;
    }
    v6 = ~v4;
    if (v3)
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    else
      v7 = 0;
    v14 = v7 & v6;
    goto LABEL_14;
  }
LABEL_23:
  v13 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, (const llvm::APInt *)&v16);
  else
    v12 = v16;
  sub_22F0A9110(a1, (llvm::APInt *)&v12);
  if (v13 >= 0x41 && v12)
    MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
  if (v17 >= 0x41)
  {
    if (v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
}

void sub_22F0A9110(uint64_t a1, llvm::APInt *this)
{
  unsigned int v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  const char *v16;
  char *v17;
  BOOL v18;
  char *v19;
  char v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  _QWORD *v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  void *v29;
  __int128 v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 2);
  if (v4 < 0x41)
  {
    v5 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (v5 < 0xB)
      {
        v6 = *(llvm::raw_ostream **)(a1 + 8);
        v28 = *((_DWORD *)this + 2);
        v27 = (void *)v5;
        goto LABEL_9;
      }
      goto LABEL_15;
    }
LABEL_52:
    v23 = *(llvm::raw_ostream **)(a1 + 8);
    v24 = (_WORD *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 1uLL)
    {
      *v24 = 16449;
      *((_QWORD *)v23 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v23, "A@");
    }
    return;
  }
  if (v4 - llvm::APInt::countLeadingZerosSlowCase(this) < 0x41)
  {
    v7 = **(_QWORD **)this;
    if (v7)
    {
      if (v7 < 0xB)
      {
        v6 = *(llvm::raw_ostream **)(a1 + 8);
        v28 = v4;
        llvm::APInt::initSlowCase((llvm::APInt *)&v27, this);
LABEL_9:
        llvm::APInt::operator-=();
        LODWORD(v30) = v28;
        v29 = v27;
        v28 = 0;
        llvm::APInt::print((llvm::APInt *)&v29, v6);
        if (v30 >= 0x41 && v29)
          MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
        if (v28 >= 0x41)
        {
          if (v27)
            MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
        }
        return;
      }
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_15:
  v29 = v31;
  v30 = xmmword_22F44E330;
  while (1)
  {
    if (v4 < 0x41)
    {
      v8 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        break;
      goto LABEL_23;
    }
    if (v4 - llvm::APInt::countLeadingZerosSlowCase(this) < 0x41 && !**(_QWORD **)this)
      break;
    v26 = v4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, this);
    v9 = v26;
    if (v26 <= 0x40)
    {
      LOBYTE(v8) = (_BYTE)v25;
LABEL_23:
      v10 = (_QWORD *)(v8 & 0xF);
      v25 = v10;
      v26 = 0;
LABEL_24:
      v11 = 1;
      LOBYTE(v12) = (_BYTE)v10;
      goto LABEL_25;
    }
    *v25 &= 0xFuLL;
    v10 = v25;
    bzero(v25 + 1, (((unint64_t)(v9 + 63) >> 3) - 8) & 0xFFFFFFF8);
    v15 = v26;
    v26 = 0;
    if (v15 < 0x41)
      goto LABEL_24;
    v11 = 0;
    v12 = *v10;
LABEL_25:
    v13 = v30;
    if ((unint64_t)(v30 + 1) > *((_QWORD *)&v30 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v13 = v30;
    }
    *((_BYTE *)v29 + v13) = v12 + 65;
    *(_QWORD *)&v30 = v30 + 1;
    if (v10)
      v14 = v11;
    else
      v14 = 1;
    if ((v14 & 1) == 0)
      MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
    if (v26 >= 0x41 && v25)
      MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
    v4 = *((_DWORD *)this + 2);
    if (v4 > 0x40)
    {
      llvm::APInt::lshrSlowCase(this);
      v4 = *((_DWORD *)this + 2);
    }
    else if (v4 == 4)
    {
      *(_QWORD *)this = 0;
    }
    else
    {
      *(_QWORD *)this >>= 4;
    }
  }
  v16 = (const char *)v29;
  v17 = (char *)v29 + v30 - 1;
  if ((_QWORD)v30)
    v18 = v29 >= v17;
  else
    v18 = 1;
  if (!v18)
  {
    v19 = (char *)v29 + 1;
    do
    {
      v20 = *(v19 - 1);
      *(v19 - 1) = *v17;
      *v17-- = v20;
      v18 = v19++ >= v17;
    }
    while (!v18);
    v16 = (const char *)v29;
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), v16);
  v21 = *(llvm::raw_ostream **)(a1 + 8);
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
  {
    llvm::raw_ostream::write(v21);
  }
  else
  {
    *((_QWORD *)v21 + 4) = v22 + 1;
    *v22 = 64;
  }
  if (v29 != v31)
    free(v29);
}

uint64_t sub_22F0A94E0(uint64_t result, char a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;

  v5 = result;
  if (a3 > 0xF)
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v6 & 8) != 0)
    {
      v7 = *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      if ((v7 & 0xFFFFF800) == 0xD000)
      {
LABEL_9:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
          goto LABEL_12;
        goto LABEL_10;
      }
    }
    else
    {
      v7 = 0;
    }
    if ((v7 & 0xFFFFF000) == 0xC000 || !*(_BYTE *)(result + 488))
    {
LABEL_12:
      if ((a2 & 2) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (!*(_BYTE *)(result + 488))
    goto LABEL_12;
LABEL_10:
  result = *(_QWORD *)(result + 8);
  v8 = *(_BYTE **)(result + 32);
  if ((unint64_t)v8 < *(_QWORD *)(result + 24))
  {
    *(_QWORD *)(result + 32) = v8 + 1;
    *v8 = 69;
    goto LABEL_12;
  }
  result = llvm::raw_ostream::write((llvm::raw_ostream *)result);
  if ((a2 & 2) == 0)
    goto LABEL_17;
LABEL_13:
  result = *(_QWORD *)(v5 + 8);
  v9 = *(_BYTE **)(result + 32);
  if ((unint64_t)v9 >= *(_QWORD *)(result + 24))
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)result);
  }
  else
  {
    *(_QWORD *)(result + 32) = v9 + 1;
    *v9 = 73;
  }
LABEL_17:
  if ((a2 & 8) != 0 || a3 >= 0x10 && (a3 & 8) != 0 && (*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 8) != 0)
  {
    result = *(_QWORD *)(v5 + 8);
    v10 = *(_BYTE **)(result + 32);
    if ((unint64_t)v10 >= *(_QWORD *)(result + 24))
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)result);
    }
    else
    {
      *(_QWORD *)(result + 32) = v10 + 1;
      *v10 = 70;
    }
  }
  return result;
}

uint64_t sub_22F0A962C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F0A9648 + 4 * byte_22F4A6AB6[a2]))();
}

llvm::raw_ostream *sub_22F0A9648(uint64_t a1)
{
  llvm::raw_ostream *result;
  _BYTE *v2;

  result = *(llvm::raw_ostream **)(a1 + 8);
  v2 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v2 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v2 + 1;
  *v2 = 65;
  return result;
}

_QWORD *sub_22F0A97E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 1;
  else
    v8 = 0;
  if (v8
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 1 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v10 = *(_QWORD *)(v7 + 32);
    v11 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 8), v10);
    if (v11)
      v10 = sub_22EF6096C(*(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(v11 + 32), (*(_DWORD *)(v11 + 16) >> 22) & 7, (*(_DWORD *)(v11 + 16) >> 19) & 7, 0, 0, 0);
    v9 = v10 & 7 | *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8);
    v21 = v9;
    v4 |= (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) & 0xFEu)
        - 2 < 4;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 8) | v4 & 7;
    v21 = v9;
  }
  v12 = (uint64_t *)(a1 + 288);
  v22 = v9;
  v23 = 0;
  v13 = sub_22F246C54((uint64_t *)(a1 + 288), &v22, &v23);
  v14 = *(_QWORD **)(a1 + 8);
  if (v13 && v23 != *(_QWORD *)(a1 + 288) + 16 * *(unsigned int *)(a1 + 304))
    return (_QWORD *)llvm::raw_ostream::operator<<();
  v16 = (*(uint64_t (**)(_QWORD))(*v14 + 80))(*(_QWORD *)(a1 + 8));
  v17 = v14[4];
  v18 = v14[2];
  sub_22F0A1E3C((llvm::APInt **)a1, v4, a3, 0);
  v19 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v19 + 80))(v19);
  if ((unint64_t)result + v19[4] + v18 - v17 - v16 - v19[2] >= 2)
  {
    v20 = *(_DWORD *)(a1 + 296);
    if (v20 <= 9)
    {
      result = sub_22F283EC0(v12, &v21);
      *((_DWORD *)result + 2) = v20;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F0A99C4(llvm::raw_ostream *a1, int a2, char *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  sub_22F0A9AC8(a1, a2);
  sub_22F0A02E8((uint64_t)a1, a3, a4);
  if (a6)
  {
    v11 = 16 * a6;
    do
    {
      sub_22F0A02E8((uint64_t)a1, *(char **)(a5 + v11 - 16), *(_QWORD *)(a5 + v11 - 8));
      v11 -= 16;
    }
    while (v11);
  }
  result = (llvm::raw_ostream *)*((_QWORD *)a1 + 1);
  v13 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v13 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v13 + 1;
  *v13 = 64;
  return result;
}

uint64_t *sub_22F0A9A6C(uint64_t a1, _QWORD *a2, int a3, unsigned __int8 a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = *((unsigned __int8 *)v7 + 32);
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

llvm::raw_ostream *sub_22F0A9AC8(llvm::raw_ostream *result, int a2)
{
  char *v2;
  char v3;
  _WORD *v4;

  switch(a2)
  {
    case 0:
    case 1:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v2 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v2 >= *((_QWORD *)result + 3))
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      *((_QWORD *)result + 4) = v2 + 1;
      v3 = 85;
      goto LABEL_8;
    case 2:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v2 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v2 >= *((_QWORD *)result + 3))
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      *((_QWORD *)result + 4) = v2 + 1;
      v3 = 84;
      goto LABEL_8;
    case 3:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v2 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v2 >= *((_QWORD *)result + 3))
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      *((_QWORD *)result + 4) = v2 + 1;
      v3 = 86;
LABEL_8:
      *v2 = v3;
      return result;
    case 4:
      result = (llvm::raw_ostream *)*((_QWORD *)result + 1);
      v4 = (_WORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v4 <= 1uLL)
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "W4");
      *v4 = 13399;
      *((_QWORD *)result + 4) += 2;
      return result;
    default:
      return result;
  }
}

llvm::raw_ostream *sub_22F0A9BA4(uint64_t a1, int a2)
{
  llvm::raw_ostream *result;
  char *v3;
  char v4;
  unint64_t v5;

  if ((~a2 & 5) != 0)
  {
    result = *(llvm::raw_ostream **)(a1 + 8);
    v5 = *((_QWORD *)result + 3);
    v3 = (char *)*((_QWORD *)result + 4);
    if ((a2 & 4) != 0)
    {
      if ((unint64_t)v3 < v5)
      {
        *((_QWORD *)result + 4) = v3 + 1;
        v4 = 82;
        goto LABEL_13;
      }
    }
    else if ((a2 & 1) != 0)
    {
      if ((unint64_t)v3 < v5)
      {
        *((_QWORD *)result + 4) = v3 + 1;
        v4 = 81;
        goto LABEL_13;
      }
    }
    else if ((unint64_t)v3 < v5)
    {
      *((_QWORD *)result + 4) = v3 + 1;
      v4 = 80;
      goto LABEL_13;
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  }
  result = *(llvm::raw_ostream **)(a1 + 8);
  v3 = (char *)*((_QWORD *)result + 4);
  if ((unint64_t)v3 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v3 + 1;
  v4 = 83;
LABEL_13:
  *v3 = v4;
  return result;
}

